{"sha": "67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MzQyYjgzMGViZWNhMDVlYmFmYzA5ZDhjN2VkNzFiMmFkODIxZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T12:57:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T12:57:06Z"}, "message": "Auto merge of #82698 - JohnTitor:rollup-htd533c, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #80189 (Convert primitives in the standard library to intra-doc links)\n - #80874 (Update intra-doc link documentation to match the implementation)\n - #82376 (Add option to enable MIR inlining independently of mir-opt-level)\n - #82516 (Add incomplete feature gate for inherent associate types.)\n - #82579 (Fix turbofish recovery with multiple generic args)\n - #82593 (Teach rustdoc how to display WASI.)\n - #82597 (Get TyCtxt from self instead of passing as argument in AutoTraitFinder)\n - #82627 (Erase late bound regions to avoid ICE)\n - #82661 (:arrow_up: rust-analyzer)\n - #82691 (Update books)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4f22db53302ec9f0e7961f6ae92c28f79e87f5df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f22db53302ec9f0e7961f6ae92c28f79e87f5df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "html_url": "https://github.com/rust-lang/rust/commit/67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edeee915b1c52f97411e57ef6b1a8bd46548a37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/edeee915b1c52f97411e57ef6b1a8bd46548a37a", "html_url": "https://github.com/rust-lang/rust/commit/edeee915b1c52f97411e57ef6b1a8bd46548a37a"}, {"sha": "97f9b186ae6fbd03d9bf4892ec0320f17c623b6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/97f9b186ae6fbd03d9bf4892ec0320f17c623b6b", "html_url": "https://github.com/rust-lang/rust/commit/97f9b186ae6fbd03d9bf4892ec0320f17c623b6b"}], "stats": {"total": 916, "additions": 599, "deletions": 317}, "files": [{"sha": "4b529734328c7153387a4f2df61b5ce9cab8e7f2", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -103,7 +103,6 @@ E0198: include_str!(\"./error_codes/E0198.md\"),\n E0199: include_str!(\"./error_codes/E0199.md\"),\n E0200: include_str!(\"./error_codes/E0200.md\"),\n E0201: include_str!(\"./error_codes/E0201.md\"),\n-E0202: include_str!(\"./error_codes/E0202.md\"),\n E0203: include_str!(\"./error_codes/E0203.md\"),\n E0204: include_str!(\"./error_codes/E0204.md\"),\n E0205: include_str!(\"./error_codes/E0205.md\"),"}, {"sha": "afc61ec2e48ff87fc80b0c9733a3c8360f624ccc", "filename": "compiler/rustc_error_codes/src/error_codes/E0202.md", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/edeee915b1c52f97411e57ef6b1a8bd46548a37a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0202.md", "raw_url": "https://github.com/rust-lang/rust/raw/edeee915b1c52f97411e57ef6b1a8bd46548a37a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0202.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0202.md?ref=edeee915b1c52f97411e57ef6b1a8bd46548a37a", "patch": "@@ -1,15 +0,0 @@\n-Inherent associated types were part of [RFC 195] but are not yet implemented.\n-See [the tracking issue][iss8995] for the status of this implementation.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0202\n-struct Foo;\n-\n-impl Foo {\n-    type Bar = isize; // error!\n-}\n-```\n-\n-[RFC 195]: https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\n-[iss8995]: https://github.com/rust-lang/rust/issues/8995"}, {"sha": "8ee995a59d80d6de4dcef6f0a1f64030574b631f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -641,6 +641,9 @@ declare_features! (\n     /// Allows `pub` on `macro_rules` items.\n     (active, pub_macro_rules, \"1.52.0\", Some(78855), None),\n \n+    /// Allows associated types in inherent impls.\n+    (active, inherent_associated_types, \"1.52.0\", Some(8995), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -666,6 +669,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::unsized_locals,\n     sym::capture_disjoint_fields,\n     sym::const_generics_defaults,\n+    sym::inherent_associated_types,\n ];\n \n /// Some features are not allowed to be used together at the same time, if"}, {"sha": "9a11b53488786a15fe591e09e454e3b137991d9b", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -557,8 +557,9 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(function_sections, Some(false));\n     tracked!(human_readable_cgu_names, true);\n     tracked!(inline_in_all_cgus, Some(true));\n-    tracked!(inline_mir_threshold, 123);\n-    tracked!(inline_mir_hint_threshold, 123);\n+    tracked!(inline_mir, Some(true));\n+    tracked!(inline_mir_threshold, Some(123));\n+    tracked!(inline_mir_hint_threshold, Some(123));\n     tracked!(insert_sideeffect, true);\n     tracked!(instrument_coverage, true);\n     tracked!(instrument_mcount, true);"}, {"sha": "16410175bd25b1d9569d06e517c6f8d29f4a7d4c", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -37,21 +37,27 @@ struct CallSite<'tcx> {\n     source_info: SourceInfo,\n }\n \n+/// Returns true if MIR inlining is enabled in the current compilation session.\n+crate fn is_enabled(tcx: TyCtxt<'_>) -> bool {\n+    if tcx.sess.opts.debugging_opts.instrument_coverage {\n+        // Since `Inline` happens after `InstrumentCoverage`, the function-specific coverage\n+        // counters can be invalidated, such as by merging coverage counter statements from\n+        // a pre-inlined function into a different function. This kind of change is invalid,\n+        // so inlining must be skipped. Note: This check is performed here so inlining can\n+        // be disabled without preventing other optimizations (regardless of `mir_opt_level`).\n+        return false;\n+    }\n+\n+    if let Some(enabled) = tcx.sess.opts.debugging_opts.inline_mir {\n+        return enabled;\n+    }\n+\n+    tcx.sess.opts.debugging_opts.mir_opt_level >= 2\n+}\n+\n impl<'tcx> MirPass<'tcx> for Inline {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        // If you change this optimization level, also change the level in\n-        // `mir_drops_elaborated_and_const_checked` for the call to `mir_inliner_callees`.\n-        // Otherwise you will get an ICE about stolen MIR.\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 2 {\n-            return;\n-        }\n-\n-        if tcx.sess.opts.debugging_opts.instrument_coverage {\n-            // Since `Inline` happens after `InstrumentCoverage`, the function-specific coverage\n-            // counters can be invalidated, such as by merging coverage counter statements from\n-            // a pre-inlined function into a different function. This kind of change is invalid,\n-            // so inlining must be skipped. Note: This check is performed here so inlining can\n-            // be disabled without preventing other optimizations (regardless of `mir_opt_level`).\n+        if !is_enabled(tcx) {\n             return;\n         }\n \n@@ -343,9 +349,9 @@ impl Inliner<'tcx> {\n         let tcx = self.tcx;\n \n         let mut threshold = if callee_attrs.requests_inline() {\n-            self.tcx.sess.opts.debugging_opts.inline_mir_hint_threshold\n+            self.tcx.sess.opts.debugging_opts.inline_mir_hint_threshold.unwrap_or(100)\n         } else {\n-            self.tcx.sess.opts.debugging_opts.inline_mir_threshold\n+            self.tcx.sess.opts.debugging_opts.inline_mir_threshold.unwrap_or(50)\n         };\n \n         // Give a bonus functions with a small number of blocks,"}, {"sha": "9cb8abf75c424cbab028689a2fab79947ff48fa6", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -430,8 +430,7 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n         let def = ty::WithOptConstParam::unknown(did);\n \n         // Do not compute the mir call graph without said call graph actually being used.\n-        // Keep this in sync with the mir inliner's optimization level.\n-        if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n+        if inline::is_enabled(tcx) {\n             let _ = tcx.mir_inliner_callees(ty::InstanceDef::Item(def));\n         }\n     }"}, {"sha": "f4ab3260d1a83e5603603e8ec4995ee7c1a337fd", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -662,7 +662,7 @@ impl<'a> Parser<'a> {\n                     let x = self.parse_seq_to_before_end(\n                         &token::Gt,\n                         SeqSep::trailing_allowed(token::Comma),\n-                        |p| p.parse_ty(),\n+                        |p| p.parse_generic_arg(),\n                     );\n                     match x {\n                         Ok((_, _, false)) => {"}, {"sha": "9cc600d9ede02fb3d9aad3ce583479c067bbde46", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -545,7 +545,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse a generic argument in a path segment.\n     /// This does not include constraints, e.g., `Item = u8`, which is handled in `parse_angle_arg`.\n-    fn parse_generic_arg(&mut self) -> PResult<'a, Option<GenericArg>> {\n+    pub(super) fn parse_generic_arg(&mut self) -> PResult<'a, Option<GenericArg>> {\n         let start = self.token.span;\n         let arg = if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n             // Parse lifetime argument."}, {"sha": "8f03bfd4c3ab78fd7f58ce8a35f2cdd03df01e8a", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -360,12 +360,20 @@ impl<'a> Parser<'a> {\n             }\n             Err(err) => return Err(err),\n         };\n+\n         let ty = if self.eat(&token::Semi) {\n-            TyKind::Array(elt_ty, self.parse_anon_const_expr()?)\n+            let mut length = self.parse_anon_const_expr()?;\n+            if let Err(e) = self.expect(&token::CloseDelim(token::Bracket)) {\n+                // Try to recover from `X<Y, ...>` when `X::<Y, ...>` works\n+                self.check_mistyped_turbofish_with_multiple_type_params(e, &mut length.value)?;\n+                self.expect(&token::CloseDelim(token::Bracket))?;\n+            }\n+            TyKind::Array(elt_ty, length)\n         } else {\n+            self.expect(&token::CloseDelim(token::Bracket))?;\n             TyKind::Slice(elt_ty)\n         };\n-        self.expect(&token::CloseDelim(token::Bracket))?;\n+\n         Ok(ty)\n     }\n "}, {"sha": "e2b6b1dc2437b40cb8e58a169c98471bbdacfc11", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -957,9 +957,11 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         (default: no)\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n         \"verify incr. comp. hashes of green query instances (default: no)\"),\n-    inline_mir_threshold: usize = (50, parse_uint, [TRACKED],\n+    inline_mir: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"enable MIR inlining (default: no)\"),\n+    inline_mir_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n         \"a default MIR inlining threshold (default: 50)\"),\n-    inline_mir_hint_threshold: usize = (100, parse_uint, [TRACKED],\n+    inline_mir_hint_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n         \"inlining threshold for functions with inline hint (default: 100)\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether `#[inline]` functions are in all CGUs\"),"}, {"sha": "27bb45bcc8512f5f93c179649990d5e65350d559", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -634,6 +634,7 @@ symbols! {\n         index_mut,\n         infer_outlives_requirements,\n         infer_static_outlives_requirements,\n+        inherent_associated_types,\n         inlateout,\n         inline,\n         inline_const,"}, {"sha": "6510c9464e145d189544b0ae00b6ce1f8faadb3d", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         ty: Ty<'tcx>,\n         orig_env: ty::ParamEnv<'tcx>,\n         trait_did: DefId,\n-        mut auto_trait_callback: impl FnMut(&InferCtxt<'_, 'tcx>, AutoTraitInfo<'tcx>) -> A,\n+        mut auto_trait_callback: impl FnMut(AutoTraitInfo<'tcx>) -> A,\n     ) -> AutoTraitResult<A> {\n         let tcx = self.tcx;\n \n@@ -211,7 +211,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n \n             let info = AutoTraitInfo { full_user_env, region_data, vid_to_region };\n \n-            AutoTraitResult::PositiveImpl(auto_trait_callback(&infcx, info))\n+            AutoTraitResult::PositiveImpl(auto_trait_callback(info))\n         })\n     }\n }"}, {"sha": "9f15993e4718cdb3ea02e8b86ed50447e79e3350", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, ItemKind, Node};\n use rustc_infer::infer;\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Binder, Ty};\n use rustc_span::symbol::kw;\n \n use std::iter;\n@@ -487,6 +487,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let found = self.resolve_vars_with_obligations(found);\n         if let hir::FnRetTy::Return(ty) = fn_decl.output {\n             let ty = AstConv::ast_ty_to_ty(self, ty);\n+            let ty = self.tcx.erase_late_bound_regions(Binder::bind(ty));\n             let ty = self.normalize_associated_types_in(expr.span, ty);\n             if self.can_coerce(found, ty) {\n                 err.multipart_suggestion("}, {"sha": "e6f771cfd537295cce4133d98bd93b4974e7dd24", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,4 +1,3 @@\n-use crate::errors::AssocTypeOnInherentImpl;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, ErrorReported, StashKey};\n use rustc_hir as hir;\n@@ -294,7 +293,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             }\n             ImplItemKind::TyAlias(ref ty) => {\n                 if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id).to_def_id()).is_none() {\n-                    report_assoc_ty_on_inherent_impl(tcx, item.span);\n+                    check_feature_inherent_assoc_ty(tcx, item.span);\n                 }\n \n                 icx.to_ty(ty)\n@@ -746,6 +745,16 @@ fn infer_placeholder_type(\n     })\n }\n \n-fn report_assoc_ty_on_inherent_impl(tcx: TyCtxt<'_>, span: Span) {\n-    tcx.sess.emit_err(AssocTypeOnInherentImpl { span });\n+fn check_feature_inherent_assoc_ty(tcx: TyCtxt<'_>, span: Span) {\n+    if !tcx.features().inherent_associated_types {\n+        use rustc_session::parse::feature_err;\n+        use rustc_span::symbol::sym;\n+        feature_err(\n+            &tcx.sess.parse_sess,\n+            sym::inherent_associated_types,\n+            span,\n+            \"inherent associated types are unstable\",\n+        )\n+        .emit();\n+    }\n }"}, {"sha": "5068242692ae85d4e7677ffec6d8dbbe813c5093", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -82,13 +82,6 @@ pub struct CopyImplOnTypeWithDtor {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[error = \"E0202\"]\n-pub struct AssocTypeOnInherentImpl {\n-    #[message = \"associated types are not yet supported in inherent impls (see #8995)\"]\n-    pub span: Span,\n-}\n-\n #[derive(SessionDiagnostic)]\n #[error = \"E0203\"]\n pub struct MultipleRelaxedDefaultBounds {"}, {"sha": "e702e02d2e426ab5bc8cf245fd3a69c156623681", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -104,6 +104,11 @@\n #![feature(fundamental)]\n #![feature(inplace_iteration)]\n #![feature(int_bits_const)]\n+// Technically, this is a bug in rustdoc: rustdoc sees the documentation on `#[lang = slice_alloc]`\n+// blocks is for `&[T]`, which also has documentation using this feature in `core`, and gets mad\n+// that the feature-gate isn't enabled. Ideally, it wouldn't check for the feature gate for docs\n+// from other crates, but since this can only appear for lang items, it doesn't seem worth fixing.\n+#![feature(intra_doc_pointers)]\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]\n #![feature(maybe_uninit_ref)]"}, {"sha": "0c911cea1bb1e99c602868f468e32f68c1ad75eb", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! A dynamically-sized view into a contiguous sequence, `[T]`.\n //!\n-//! *[See also the slice primitive type](../../std/primitive.slice.html).*\n+//! *[See also the slice primitive type](slice).*\n //!\n //! Slices are a view into a block of memory represented as a pointer and a\n //! length.\n@@ -71,12 +71,12 @@\n //!   [`.chunks`], [`.windows`] and more.\n //!\n //! [`Hash`]: core::hash::Hash\n-//! [`.iter`]: ../../std/primitive.slice.html#method.iter\n-//! [`.iter_mut`]: ../../std/primitive.slice.html#method.iter_mut\n-//! [`.split`]: ../../std/primitive.slice.html#method.split\n-//! [`.splitn`]: ../../std/primitive.slice.html#method.splitn\n-//! [`.chunks`]: ../../std/primitive.slice.html#method.chunks\n-//! [`.windows`]: ../../std/primitive.slice.html#method.windows\n+//! [`.iter`]: slice::iter\n+//! [`.iter_mut`]: slice::iter_mut\n+//! [`.split`]: slice::split\n+//! [`.splitn`]: slice::splitn\n+//! [`.chunks`]: slice::chunks\n+//! [`.windows`]: slice::windows\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n // Many of the usings in this module are only used in the test configuration.\n // It's cleaner to just turn off the unused_imports warning than to fix them.\n@@ -673,7 +673,7 @@ impl [u8] {\n // Extension traits for slices over specific kinds of data\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// Helper trait for [`[T]::concat`](../../std/primitive.slice.html#method.concat).\n+/// Helper trait for [`[T]::concat`](slice::concat).\n ///\n /// Note: the `Item` type parameter is not used in this trait,\n /// but it allows impls to be more generic.\n@@ -708,19 +708,19 @@ pub trait Concat<Item: ?Sized> {\n     /// The resulting type after concatenation\n     type Output;\n \n-    /// Implementation of [`[T]::concat`](../../std/primitive.slice.html#method.concat)\n+    /// Implementation of [`[T]::concat`](slice::concat)\n     #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n     fn concat(slice: &Self) -> Self::Output;\n }\n \n-/// Helper trait for [`[T]::join`](../../std/primitive.slice.html#method.join)\n+/// Helper trait for [`[T]::join`](slice::join)\n #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n pub trait Join<Separator> {\n     #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n     /// The resulting type after concatenation\n     type Output;\n \n-    /// Implementation of [`[T]::join`](../../std/primitive.slice.html#method.join)\n+    /// Implementation of [`[T]::join`](slice::join)\n     #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n     fn join(slice: &Self, sep: Separator) -> Self::Output;\n }"}, {"sha": "8c64bc0801259ca706b27f3da3854007db42f46d", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Unicode string slices.\n //!\n-//! *[See also the `str` primitive type](../../std/primitive.str.html).*\n+//! *[See also the `str` primitive type](str).*\n //!\n //! The `&str` type is one of the two main string types, the other being `String`.\n //! Unlike its `String` counterpart, its contents are borrowed."}, {"sha": "b567d0a2fe2d95d811722a77c49eea5f30311d10", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -495,7 +495,7 @@ impl String {\n     /// `from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n     /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], which looks like this: \ufffd\n     ///\n-    /// [byteslice]: ../../std/primitive.slice.html\n+    /// [byteslice]: prim@slice\n     /// [U+FFFD]: core::char::REPLACEMENT_CHARACTER\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want"}, {"sha": "01a3f9f9b5976af827c543c51c3b9dcece7cc0ec", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -216,7 +216,7 @@ mod spec_extend;\n /// # Slicing\n ///\n /// A `Vec` can be mutable. Slices, on the other hand, are read-only objects.\n-/// To get a [slice], use [`&`]. Example:\n+/// To get a [slice][prim@slice], use [`&`]. Example:\n ///\n /// ```\n /// fn read_slice(slice: &[usize]) {\n@@ -369,8 +369,6 @@ mod spec_extend;\n /// [`reserve`]: Vec::reserve\n /// [`MaybeUninit`]: core::mem::MaybeUninit\n /// [owned slice]: Box\n-/// [slice]: ../../std/primitive.slice.html\n-/// [`&`]: ../../std/primitive.reference.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"vec_type\")]\n pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n@@ -2517,7 +2515,7 @@ impl<T, A: Allocator> Vec<T, A> {\n /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to\n /// append the entire slice at once.\n ///\n-/// [`copy_from_slice`]: ../../std/primitive.slice.html#method.copy_from_slice\n+/// [`copy_from_slice`]: slice::copy_from_slice\n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {"}, {"sha": "8b95b70396bbd8f99d7fa430cf15fc29f1607642", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -164,7 +164,6 @@ impl Layout {\n     ///       [`Layout::for_value`] on a reference to an extern type tail.\n     ///     - otherwise, it is conservatively not allowed to call this function.\n     ///\n-    /// [slice]: ../../std/primitive.slice.html\n     /// [trait object]: ../../book/ch17-02-trait-objects.html\n     /// [extern type]: ../../unstable-book/language-features/extern-types.html\n     #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]"}, {"sha": "4472fba26b99b2dec700026cf03b6165b749881d", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -9,8 +9,6 @@ use crate::{\n };\n \n /// A by-value [array] iterator.\n-///\n-/// [array]: ../../std/primitive.array.html\n #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n pub struct IntoIter<T, const N: usize> {\n     /// This is the array we are iterating over."}, {"sha": "20251edf6f7f4ead1d41cc753d7126b2e76f6085", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -2,7 +2,7 @@\n //! up to a certain length. Eventually, we should be able to generalize\n //! to all lengths.\n //!\n-//! *[See also the array primitive type](../../std/primitive.array.html).*\n+//! *[See also the array primitive type](array).*\n \n #![stable(feature = \"core_array\", since = \"1.36.0\")]\n "}, {"sha": "788fafa0adc5c79bd2d8f1b6235cf8dd618eacb5", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -9,8 +9,7 @@\n //! [Unicode code point]: http://www.unicode.org/glossary/#code_point\n //!\n //! This module exists for technical reasons, the primary documentation for\n-//! `char` is directly on [the `char` primitive type](../../std/primitive.char.html)\n-//! itself.\n+//! `char` is directly on [the `char` primitive type][char] itself.\n //!\n //! This module is the home of the iterator implementations for the iterators\n //! implemented on `char`, as well as some useful constants and conversion"}, {"sha": "65af8508a6839cfcdb23a5851b84c59de03508be", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -463,7 +463,6 @@ pub trait TryInto<T>: Sized {\n /// ```\n ///\n /// [`try_from`]: TryFrom::try_from\n-/// [`!`]: ../../std/primitive.never.html\n #[rustc_diagnostic_item = \"try_from_trait\"]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n@@ -673,8 +672,6 @@ impl AsMut<str> for str {\n /// However when `Infallible` becomes an alias for the never type,\n /// the two `impl`s will start to overlap\n /// and therefore will be disallowed by the language\u2019s trait coherence rules.\n-///\n-/// [never]: ../../std/primitive.never.html\n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n #[derive(Copy)]\n pub enum Infallible {}"}, {"sha": "9302baa823bc5f29cde200cfccbcb2ead7e64099", "filename": "library/core/src/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -21,7 +21,6 @@ use crate::ops::{Deref, DerefMut};\n /// compiler down to 1.1.0. After Rust 1.30.0, it was re-exported by\n /// this definition. For more information, please read [RFC 2521].\n ///\n-/// [pointer]: ../../std/primitive.pointer.html\n /// [Nomicon]: https://doc.rust-lang.org/nomicon/ffi.html#representing-opaque-structs\n /// [RFC 2521]: https://github.com/rust-lang/rfcs/blob/master/text/2521-c_void-reunification.md\n // N.B., for LLVM to recognize the void pointer type and by extension"}, {"sha": "afea8aa8ff262b989df3483062299c42e7ac0e6b", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1093,8 +1093,7 @@ extern \"rust-intrinsic\" {\n     /// bounds or arithmetic overflow occurs then any further use of the\n     /// returned value will result in undefined behavior.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::pointer::offset`](../../std/primitive.pointer.html#method.offset).\n+    /// The stabilized version of this intrinsic is [`pointer::offset`].\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n@@ -1111,8 +1110,7 @@ extern \"rust-intrinsic\" {\n     /// object, and it wraps with two's complement arithmetic. The resulting\n     /// value is not necessarily valid to be used to actually access memory.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::pointer::wrapping_offset`](../../std/primitive.pointer.html#method.wrapping_offset).\n+    /// The stabilized version of this intrinsic is [`pointer::wrapping_offset`].\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     pub fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;"}, {"sha": "c50d9507a179828786f05ad14f7d8ce717908efc", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -114,7 +114,7 @@\n #![feature(extended_key_value_attributes)]\n #![feature(extern_types)]\n #![feature(fundamental)]\n-#![cfg_attr(not(bootstrap), feature(intra_doc_pointers))]\n+#![feature(intra_doc_pointers)]\n #![feature(intrinsics)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]"}, {"sha": "26314213ff7306713141b11b75bc8a4421e867a1", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -976,7 +976,6 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     ///\n     /// [`write_slice_cloned`]: MaybeUninit::write_slice_cloned\n-    /// [`slice::copy_from_slice`]: ../../std/primitive.slice.html#method.copy_from_slice\n     #[unstable(feature = \"maybe_uninit_write_slice\", issue = \"79995\")]\n     pub fn write_slice<'a>(this: &'a mut [MaybeUninit<T>], src: &[T]) -> &'a mut [T]\n     where\n@@ -1037,7 +1036,6 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     ///\n     /// [`write_slice`]: MaybeUninit::write_slice\n-    /// [`slice::clone_from_slice`]: ../../std/primitive.slice.html#method.clone_from_slice\n     #[unstable(feature = \"maybe_uninit_write_slice\", issue = \"79995\")]\n     pub fn write_slice_cloned<'a>(this: &'a mut [MaybeUninit<T>], src: &[T]) -> &'a mut [T]\n     where"}, {"sha": "afce6e55b8f6a782a80d8865bdb3ab9e4f1ded93", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -308,7 +308,6 @@ pub const fn size_of<T>() -> usize {\n /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],\n /// then `size_of_val` can be used to get the dynamically-known size.\n ///\n-/// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n ///\n /// # Examples\n@@ -355,7 +354,6 @@ pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n ///       [`size_of_val`] on a reference to a type with an extern type tail.\n ///     - otherwise, it is conservatively not allowed to call this function.\n ///\n-/// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n ///\n@@ -494,7 +492,6 @@ pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {\n ///       [`align_of_val`] on a reference to a type with an extern type tail.\n ///     - otherwise, it is conservatively not allowed to call this function.\n ///\n-/// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n ///"}, {"sha": "690247bc96df96735feecd65ffe41dcfbc51e11f", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants specific to the `f32` single-precision floating point type.\n //!\n-//! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n+//! *[See also the `f32` primitive type][f32].*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n@@ -35,7 +35,7 @@ use crate::num::FpCategory;\n pub const RADIX: u32 = f32::RADIX;\n \n /// Number of significant digits in base 2.\n-/// Use [`f32::MANTISSA_DIGITS`](../../std/primitive.f32.html#associatedconstant.MANTISSA_DIGITS) instead.\n+/// Use [`f32::MANTISSA_DIGITS`] instead.\n ///\n /// # Examples\n ///\n@@ -55,7 +55,7 @@ pub const RADIX: u32 = f32::RADIX;\n pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n \n /// Approximate number of significant digits in base 10.\n-/// Use [`f32::DIGITS`](../../std/primitive.f32.html#associatedconstant.DIGITS) instead.\n+/// Use [`f32::DIGITS`] instead.\n ///\n /// # Examples\n ///\n@@ -72,7 +72,7 @@ pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n pub const DIGITS: u32 = f32::DIGITS;\n \n /// [Machine epsilon] value for `f32`.\n-/// Use [`f32::EPSILON`](../../std/primitive.f32.html#associatedconstant.EPSILON) instead.\n+/// Use [`f32::EPSILON`] instead.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n@@ -96,7 +96,7 @@ pub const DIGITS: u32 = f32::DIGITS;\n pub const EPSILON: f32 = f32::EPSILON;\n \n /// Smallest finite `f32` value.\n-/// Use [`f32::MIN`](../../std/primitive.f32.html#associatedconstant.MIN) instead.\n+/// Use [`f32::MIN`] instead.\n ///\n /// # Examples\n ///\n@@ -113,7 +113,7 @@ pub const EPSILON: f32 = f32::EPSILON;\n pub const MIN: f32 = f32::MIN;\n \n /// Smallest positive normal `f32` value.\n-/// Use [`f32::MIN_POSITIVE`](../../std/primitive.f32.html#associatedconstant.MIN_POSITIVE) instead.\n+/// Use [`f32::MIN_POSITIVE`] instead.\n ///\n /// # Examples\n ///\n@@ -133,7 +133,7 @@ pub const MIN: f32 = f32::MIN;\n pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n \n /// Largest finite `f32` value.\n-/// Use [`f32::MAX`](../../std/primitive.f32.html#associatedconstant.MAX) instead.\n+/// Use [`f32::MAX`] instead.\n ///\n /// # Examples\n ///\n@@ -150,7 +150,7 @@ pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n pub const MAX: f32 = f32::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n-/// Use [`f32::MIN_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_EXP) instead.\n+/// Use [`f32::MIN_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -170,7 +170,7 @@ pub const MAX: f32 = f32::MAX;\n pub const MIN_EXP: i32 = f32::MIN_EXP;\n \n /// Maximum possible power of 2 exponent.\n-/// Use [`f32::MAX_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_EXP) instead.\n+/// Use [`f32::MAX_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -190,7 +190,7 @@ pub const MIN_EXP: i32 = f32::MIN_EXP;\n pub const MAX_EXP: i32 = f32::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n-/// Use [`f32::MIN_10_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_10_EXP) instead.\n+/// Use [`f32::MIN_10_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -210,7 +210,7 @@ pub const MAX_EXP: i32 = f32::MAX_EXP;\n pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n \n /// Maximum possible power of 10 exponent.\n-/// Use [`f32::MAX_10_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_10_EXP) instead.\n+/// Use [`f32::MAX_10_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -230,7 +230,7 @@ pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n \n /// Not a Number (NaN).\n-/// Use [`f32::NAN`](../../std/primitive.f32.html#associatedconstant.NAN) instead.\n+/// Use [`f32::NAN`] instead.\n ///\n /// # Examples\n ///\n@@ -247,7 +247,7 @@ pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n pub const NAN: f32 = f32::NAN;\n \n /// Infinity (\u221e).\n-/// Use [`f32::INFINITY`](../../std/primitive.f32.html#associatedconstant.INFINITY) instead.\n+/// Use [`f32::INFINITY`] instead.\n ///\n /// # Examples\n ///\n@@ -267,7 +267,7 @@ pub const NAN: f32 = f32::NAN;\n pub const INFINITY: f32 = f32::INFINITY;\n \n /// Negative infinity (\u2212\u221e).\n-/// Use [`f32::NEG_INFINITY`](../../std/primitive.f32.html#associatedconstant.NEG_INFINITY) instead.\n+/// Use [`f32::NEG_INFINITY`] instead.\n ///\n /// # Examples\n ///"}, {"sha": "6d3737224c0b6276fec5bcaa7c23463698a5f75c", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants specific to the `f64` double-precision floating point type.\n //!\n-//! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n+//! *[See also the `f64` primitive type][f64].*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n@@ -18,7 +18,7 @@ use crate::mem;\n use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f64`.\n-/// Use [`f64::RADIX`](../../std/primitive.f64.html#associatedconstant.RADIX) instead.\n+/// Use [`f64::RADIX`] instead.\n ///\n /// # Examples\n ///\n@@ -35,7 +35,7 @@ use crate::num::FpCategory;\n pub const RADIX: u32 = f64::RADIX;\n \n /// Number of significant digits in base 2.\n-/// Use [`f64::MANTISSA_DIGITS`](../../std/primitive.f64.html#associatedconstant.MANTISSA_DIGITS) instead.\n+/// Use [`f64::MANTISSA_DIGITS`] instead.\n ///\n /// # Examples\n ///\n@@ -55,7 +55,7 @@ pub const RADIX: u32 = f64::RADIX;\n pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n \n /// Approximate number of significant digits in base 10.\n-/// Use [`f64::DIGITS`](../../std/primitive.f64.html#associatedconstant.DIGITS) instead.\n+/// Use [`f64::DIGITS`] instead.\n ///\n /// # Examples\n ///\n@@ -72,7 +72,7 @@ pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n pub const DIGITS: u32 = f64::DIGITS;\n \n /// [Machine epsilon] value for `f64`.\n-/// Use [`f64::EPSILON`](../../std/primitive.f64.html#associatedconstant.EPSILON) instead.\n+/// Use [`f64::EPSILON`] instead.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n@@ -96,7 +96,7 @@ pub const DIGITS: u32 = f64::DIGITS;\n pub const EPSILON: f64 = f64::EPSILON;\n \n /// Smallest finite `f64` value.\n-/// Use [`f64::MIN`](../../std/primitive.f64.html#associatedconstant.MIN) instead.\n+/// Use [`f64::MIN`] instead.\n ///\n /// # Examples\n ///\n@@ -113,7 +113,7 @@ pub const EPSILON: f64 = f64::EPSILON;\n pub const MIN: f64 = f64::MIN;\n \n /// Smallest positive normal `f64` value.\n-/// Use [`f64::MIN_POSITIVE`](../../std/primitive.f64.html#associatedconstant.MIN_POSITIVE) instead.\n+/// Use [`f64::MIN_POSITIVE`] instead.\n ///\n /// # Examples\n ///\n@@ -133,7 +133,7 @@ pub const MIN: f64 = f64::MIN;\n pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n \n /// Largest finite `f64` value.\n-/// Use [`f64::MAX`](../../std/primitive.f64.html#associatedconstant.MAX) instead.\n+/// Use [`f64::MAX`] instead.\n ///\n /// # Examples\n ///\n@@ -150,7 +150,7 @@ pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n pub const MAX: f64 = f64::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n-/// Use [`f64::MIN_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_EXP) instead.\n+/// Use [`f64::MIN_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -170,7 +170,7 @@ pub const MAX: f64 = f64::MAX;\n pub const MIN_EXP: i32 = f64::MIN_EXP;\n \n /// Maximum possible power of 2 exponent.\n-/// Use [`f64::MAX_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_EXP) instead.\n+/// Use [`f64::MAX_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -190,7 +190,7 @@ pub const MIN_EXP: i32 = f64::MIN_EXP;\n pub const MAX_EXP: i32 = f64::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n-/// Use [`f64::MIN_10_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_10_EXP) instead.\n+/// Use [`f64::MIN_10_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -210,7 +210,7 @@ pub const MAX_EXP: i32 = f64::MAX_EXP;\n pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n \n /// Maximum possible power of 10 exponent.\n-/// Use [`f64::MAX_10_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_10_EXP) instead.\n+/// Use [`f64::MAX_10_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -230,7 +230,7 @@ pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n \n /// Not a Number (NaN).\n-/// Use [`f64::NAN`](../../std/primitive.f64.html#associatedconstant.NAN) instead.\n+/// Use [`f64::NAN`] instead.\n ///\n /// # Examples\n ///\n@@ -247,7 +247,7 @@ pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n pub const NAN: f64 = f64::NAN;\n \n /// Infinity (\u221e).\n-/// Use [`f64::INFINITY`](../../std/primitive.f64.html#associatedconstant.INFINITY) instead.\n+/// Use [`f64::INFINITY`] instead.\n ///\n /// # Examples\n ///\n@@ -267,7 +267,7 @@ pub const NAN: f64 = f64::NAN;\n pub const INFINITY: f64 = f64::INFINITY;\n \n /// Negative infinity (\u2212\u221e).\n-/// Use [`f64::NEG_INFINITY`](../../std/primitive.f64.html#associatedconstant.NEG_INFINITY) instead.\n+/// Use [`f64::NEG_INFINITY`] instead.\n ///\n /// # Examples\n ///"}, {"sha": "b37767cd5eb6d9355051ba1fefb7195df4329aab", "filename": "library/core/src/num/shells/i128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 128-bit signed integer type.\n //!\n-//! *[See also the `i128` primitive type](../../std/primitive.i128.html).*\n+//! *[See also the `i128` primitive type][i128].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "3137e72ca00e5b6dba05a0b12a37669ccefc3a14", "filename": "library/core/src/num/shells/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 16-bit signed integer type.\n //!\n-//! *[See also the `i16` primitive type](../../std/primitive.i16.html).*\n+//! *[See also the `i16` primitive type][i16].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "bb70751d8ca1aed0df6f983dcb6b93884fccb917", "filename": "library/core/src/num/shells/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 32-bit signed integer type.\n //!\n-//! *[See also the `i32` primitive type](../../std/primitive.i32.html).*\n+//! *[See also the `i32` primitive type][i32].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "b08201c2555a88da3214c4705c01440aad386012", "filename": "library/core/src/num/shells/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 64-bit signed integer type.\n //!\n-//! *[See also the `i64` primitive type](../../std/primitive.i64.html).*\n+//! *[See also the `i64` primitive type][i64].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "a7ad9bbbbceb84fb34edf84bcc6818c4c4e58012", "filename": "library/core/src/num/shells/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 8-bit signed integer type.\n //!\n-//! *[See also the `i8` primitive type](../../std/primitive.i8.html).*\n+//! *[See also the `i8` primitive type][i8].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "c6a5595d95804b7f2a8f5bb7562cd06ae0d0c539", "filename": "library/core/src/num/shells/int_macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -5,8 +5,7 @@ macro_rules! int_module {\n     ($T:ident, #[$attr:meta]) => (\n         #[doc = concat!(\n             \"The smallest value that can be represented by this integer type. Use \",\n-            \"[`\", stringify!($T), \"::MIN\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MIN)\",\n-            \" instead.\",\n+            \"[`\", stringify!($T), \"::MIN\", \"`] instead.\"\n         )]\n         ///\n         /// # Examples\n@@ -25,8 +24,7 @@ macro_rules! int_module {\n \n         #[doc = concat!(\n             \"The largest value that can be represented by this integer type. Use \",\n-            \"[`\", stringify!($T), \"::MAX\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MAX)\",\n-            \" instead.\",\n+            \"[`\", stringify!($T), \"::MAX\", \"`] instead.\"\n         )]\n         ///\n         /// # Examples"}, {"sha": "d719936c0b2c0972e6084f64ea7d4f7e8d3fa9ed", "filename": "library/core/src/num/shells/isize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the pointer-sized signed integer type.\n //!\n-//! *[See also the `isize` primitive type](../../std/primitive.isize.html).*\n+//! *[See also the `isize` primitive type][isize].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "49f56c67c37a8e77e5f5afc997053c16e12e8bc5", "filename": "library/core/src/num/shells/u128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 128-bit unsigned integer type.\n //!\n-//! *[See also the `u128` primitive type](../../std/primitive.u128.html).*\n+//! *[See also the `u128` primitive type][u128].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "b1d58ad4b9d8de2ad433157d8dbc6ec04df249dc", "filename": "library/core/src/num/shells/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 16-bit unsigned integer type.\n //!\n-//! *[See also the `u16` primitive type](../../std/primitive.u16.html).*\n+//! *[See also the `u16` primitive type][u16].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "b6acf950035f4270a4b358179f7372b634caa5d5", "filename": "library/core/src/num/shells/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 32-bit unsigned integer type.\n //!\n-//! *[See also the `u32` primitive type](../../std/primitive.u32.html).*\n+//! *[See also the `u32` primitive type][u32].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "d43726f84fa2fdccc5572706290ca406e1fba8e0", "filename": "library/core/src/num/shells/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 64-bit unsigned integer type.\n //!\n-//! *[See also the `u64` primitive type](../../std/primitive.u64.html).*\n+//! *[See also the `u64` primitive type][u64].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "0eadf85ec6d275262e867fd56d5e151336773968", "filename": "library/core/src/num/shells/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 8-bit unsigned integer type.\n //!\n-//! *[See also the `u8` primitive type](../../std/primitive.u8.html).*\n+//! *[See also the `u8` primitive type][u8].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "deeed67d4960fe757339b5a0c488cec75a5f0da8", "filename": "library/core/src/num/shells/usize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the pointer-sized unsigned integer type.\n //!\n-//! *[See also the `usize` primitive type](../../std/primitive.usize.html).*\n+//! *[See also the `usize` primitive type][usize].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "e5c4798afcbff284c002a325d7ee46dc0705bb0c", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -28,7 +28,7 @@\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n /// [book]: ../../book/ch13-01-closures.html\n-/// [function pointers]: ../../std/primitive.fn.html\n+/// [function pointers]: fn\n /// [nomicon]: ../../nomicon/hrtb.html\n ///\n /// # Examples\n@@ -97,7 +97,7 @@ pub trait Fn<Args>: FnMut<Args> {\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n /// [book]: ../../book/ch13-01-closures.html\n-/// [function pointers]: ../../std/primitive.fn.html\n+/// [function pointers]: fn\n /// [nomicon]: ../../nomicon/hrtb.html\n ///\n /// # Examples\n@@ -176,7 +176,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n /// [book]: ../../book/ch13-01-closures.html\n-/// [function pointers]: ../../std/primitive.fn.html\n+/// [function pointers]: fn\n /// [nomicon]: ../../nomicon/hrtb.html\n ///\n /// # Examples"}, {"sha": "cfc1bfd54be2d032d2fe8e1b14070a3738c24fc4", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1011,8 +1011,6 @@ impl<T> *const [T] {\n     /// See also [`slice::from_raw_parts`][].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`NonNull::dangling()`]: NonNull::dangling\n-    /// [`pointer::offset`]: ../std/primitive.pointer.html#method.offset\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {"}, {"sha": "5026c48bdf4b4c1153046f45830c719dc0482233", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,6 +1,6 @@\n //! Manually manage memory through raw pointers.\n //!\n-//! *[See also the pointer primitive types](../../std/primitive.pointer.html).*\n+//! *[See also the pointer primitive types](pointer).*\n //!\n //! # Safety\n //!\n@@ -60,7 +60,7 @@\n //! [ub]: ../../reference/behavior-considered-undefined.html\n //! [zst]: ../../nomicon/exotic-sizes.html#zero-sized-types-zsts\n //! [atomic operations]: crate::sync::atomic\n-//! [`offset`]: ../../std/primitive.pointer.html#method.offset\n+//! [`offset`]: pointer::offset\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "06bacc863514790d97c43a349f7c70f36e676730", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1273,8 +1273,6 @@ impl<T> *mut [T] {\n     /// See also [`slice::from_raw_parts`][].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`NonNull::dangling()`]: NonNull::dangling\n-    /// [`pointer::offset`]: ../std/primitive.pointer.html#method.offset\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {\n@@ -1325,8 +1323,6 @@ impl<T> *mut [T] {\n     /// See also [`slice::from_raw_parts_mut`][].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`NonNull::dangling()`]: NonNull::dangling\n-    /// [`pointer::offset`]: ../std/primitive.pointer.html#method.offset\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice_mut<'a>(self) -> Option<&'a mut [MaybeUninit<T>]> {"}, {"sha": "8d533cd6be117cb53c65070f7851b5a05d5849f6", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -425,7 +425,6 @@ impl<T> NonNull<[T]> {\n     /// See also [`slice::from_raw_parts`].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice(&self) -> &[MaybeUninit<T>] {\n@@ -470,7 +469,6 @@ impl<T> NonNull<[T]> {\n     /// See also [`slice::from_raw_parts_mut`].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n     ///\n     /// # Examples\n     ///"}, {"sha": "7c48b8e41c62127d8b30fb1c6344fdd133f7ea3e", "filename": "library/core/src/result.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1285,11 +1285,10 @@ impl<T> Result<T, T> {\n     /// `Err`.\n     ///\n     /// This can be useful in conjunction with APIs such as\n-    /// [`Atomic*::compare_exchange`], or [`slice::binary_search`][binary_search], but only in\n+    /// [`Atomic*::compare_exchange`], or [`slice::binary_search`], but only in\n     /// cases where you don't care if the result was `Ok` or not.\n     ///\n     /// [`Atomic*::compare_exchange`]: crate::sync::atomic::AtomicBool::compare_exchange\n-    /// [binary_search]: ../../std/primitive.slice.html#method.binary_search\n     ///\n     /// # Examples\n     ///"}, {"sha": "c92b37b14be4fa91d021d66822095ff000600db4", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -464,8 +464,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n ///\n /// [`Range`]: ops::Range\n /// [`RangeTo`]: ops::RangeTo\n-/// [`slice::get_unchecked`]: ../../std/primitive.slice.html#method.get_unchecked\n-/// [`slice::get_unchecked_mut`]: ../../std/primitive.slice.html#method.get_unchecked_mut\n+/// [`slice::get_unchecked`]: slice::get_unchecked\n+/// [`slice::get_unchecked_mut`]: slice::get_unchecked_mut\n ///\n /// # Panics\n ///"}, {"sha": "8e651091cab484ac48ed6214fdf60925e2ae3179", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -60,8 +60,8 @@ fn size_from_ptr<T>(_: *const T) -> usize {\n /// }\n /// ```\n ///\n-/// [`iter`]: ../../std/primitive.slice.html#method.iter\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`iter`]: slice::iter\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     ptr: NonNull<T>,\n@@ -179,8 +179,8 @@ impl<T> AsRef<[T]> for Iter<'_, T> {\n /// println!(\"{:?}\", slice);\n /// ```\n ///\n-/// [`iter_mut`]: ../../std/primitive.slice.html#method.iter_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`iter_mut`]: slice::iter_mut\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     ptr: NonNull<T>,\n@@ -328,8 +328,8 @@ pub(super) trait SplitIter: DoubleEndedIterator {\n /// let mut iter = slice.split(|num| num % 3 == 0);\n /// ```\n ///\n-/// [`split`]: ../../std/primitive.slice.html#method.split\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`split`]: slice::split\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Split<'a, T: 'a, P>\n where\n@@ -450,8 +450,8 @@ impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n /// let mut iter = slice.split_inclusive(|num| num % 3 == 0);\n /// ```\n ///\n-/// [`split_inclusive`]: ../../std/primitive.slice.html#method.split_inclusive\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`split_inclusive`]: slice::split_inclusive\n+/// [slices]: slice\n #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n pub struct SplitInclusive<'a, T: 'a, P>\n where\n@@ -562,8 +562,8 @@ impl<T, P> FusedIterator for SplitInclusive<'_, T, P> where P: FnMut(&T) -> bool\n /// let iter = v.split_mut(|num| *num % 3 == 0);\n /// ```\n ///\n-/// [`split_mut`]: ../../std/primitive.slice.html#method.split_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`split_mut`]: slice::split_mut\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitMut<'a, T: 'a, P>\n where\n@@ -691,8 +691,8 @@ impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n /// let iter = v.split_inclusive_mut(|num| *num % 3 == 0);\n /// ```\n ///\n-/// [`split_inclusive_mut`]: ../../std/primitive.slice.html#method.split_inclusive_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`split_inclusive_mut`]: slice::split_inclusive_mut\n+/// [slices]: slice\n #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n pub struct SplitInclusiveMut<'a, T: 'a, P>\n where\n@@ -812,8 +812,8 @@ impl<T, P> FusedIterator for SplitInclusiveMut<'_, T, P> where P: FnMut(&T) -> b\n /// let iter = slice.rsplit(|num| *num == 0);\n /// ```\n ///\n-/// [`rsplit`]: ../../std/primitive.slice.html#method.rsplit\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rsplit`]: slice::rsplit\n+/// [slices]: slice\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n #[derive(Clone)] // Is this correct, or does it incorrectly require `T: Clone`?\n pub struct RSplit<'a, T: 'a, P>\n@@ -898,8 +898,8 @@ impl<T, P> FusedIterator for RSplit<'_, T, P> where P: FnMut(&T) -> bool {}\n /// let iter = slice.rsplit_mut(|num| *num == 0);\n /// ```\n ///\n-/// [`rsplit_mut`]: ../../std/primitive.slice.html#method.rsplit_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rsplit_mut`]: slice::rsplit_mut\n+/// [slices]: slice\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n pub struct RSplitMut<'a, T: 'a, P>\n where\n@@ -1017,8 +1017,8 @@ impl<T, I: SplitIter<Item = T>> Iterator for GenericSplitN<I> {\n /// let iter = slice.splitn(2, |num| *num % 3 == 0);\n /// ```\n ///\n-/// [`splitn`]: ../../std/primitive.slice.html#method.splitn\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`splitn`]: slice::splitn\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitN<'a, T: 'a, P>\n where\n@@ -1057,8 +1057,8 @@ where\n /// let iter = slice.rsplitn(2, |num| *num % 3 == 0);\n /// ```\n ///\n-/// [`rsplitn`]: ../../std/primitive.slice.html#method.rsplitn\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rsplitn`]: slice::rsplitn\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplitN<'a, T: 'a, P>\n where\n@@ -1096,8 +1096,8 @@ where\n /// let iter = slice.splitn_mut(2, |num| *num % 3 == 0);\n /// ```\n ///\n-/// [`splitn_mut`]: ../../std/primitive.slice.html#method.splitn_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`splitn_mut`]: slice::splitn_mut\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitNMut<'a, T: 'a, P>\n where\n@@ -1136,8 +1136,8 @@ where\n /// let iter = slice.rsplitn_mut(2, |num| *num % 3 == 0);\n /// ```\n ///\n-/// [`rsplitn_mut`]: ../../std/primitive.slice.html#method.rsplitn_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rsplitn_mut`]: slice::rsplitn_mut\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplitNMut<'a, T: 'a, P>\n where\n@@ -1179,8 +1179,8 @@ forward_iterator! { RSplitNMut: T, &'a mut [T] }\n /// let iter = slice.windows(2);\n /// ```\n ///\n-/// [`windows`]: ../../std/primitive.slice.html#method.windows\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`windows`]: slice::windows\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Windows<'a, T: 'a> {\n@@ -1325,8 +1325,8 @@ unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {\n /// let iter = slice.chunks(2);\n /// ```\n ///\n-/// [`chunks`]: ../../std/primitive.slice.html#method.chunks\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`chunks`]: slice::chunks\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chunks<'a, T: 'a> {\n@@ -1493,8 +1493,8 @@ unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {\n /// let iter = slice.chunks_mut(2);\n /// ```\n ///\n-/// [`chunks_mut`]: ../../std/primitive.slice.html#method.chunks_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`chunks_mut`]: slice::chunks_mut\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ChunksMut<'a, T: 'a> {\n@@ -1659,9 +1659,9 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n /// let iter = slice.chunks_exact(2);\n /// ```\n ///\n-/// [`chunks_exact`]: ../../std/primitive.slice.html#method.chunks_exact\n+/// [`chunks_exact`]: slice::chunks_exact\n /// [`remainder`]: ChunksExact::remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n pub struct ChunksExact<'a, T: 'a> {\n@@ -1815,9 +1815,9 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n /// let iter = slice.chunks_exact_mut(2);\n /// ```\n ///\n-/// [`chunks_exact_mut`]: ../../std/primitive.slice.html#method.chunks_exact_mut\n+/// [`chunks_exact_mut`]: slice::chunks_exact_mut\n /// [`into_remainder`]: ChunksExactMut::into_remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n pub struct ChunksExactMut<'a, T: 'a> {\n@@ -1966,8 +1966,8 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n /// let iter = slice.array_windows::<2>();\n /// ```\n ///\n-/// [`array_windows`]: ../../std/primitive.slice.html#method.array_windows\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`array_windows`]: slice::array_windows\n+/// [slices]: slice\n #[derive(Debug, Clone, Copy)]\n #[unstable(feature = \"array_windows\", issue = \"75027\")]\n pub struct ArrayWindows<'a, T: 'a, const N: usize> {\n@@ -2087,9 +2087,9 @@ impl<T, const N: usize> ExactSizeIterator for ArrayWindows<'_, T, N> {\n /// let iter = slice.array_chunks::<2>();\n /// ```\n ///\n-/// [`array_chunks`]: ../../std/primitive.slice.html#method.array_chunks\n+/// [`array_chunks`]: slice::array_chunks\n /// [`remainder`]: ArrayChunks::remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub struct ArrayChunks<'a, T: 'a, const N: usize> {\n@@ -2209,9 +2209,9 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N>\n /// let iter = slice.array_chunks_mut::<2>();\n /// ```\n ///\n-/// [`array_chunks_mut`]: ../../std/primitive.slice.html#method.array_chunks_mut\n+/// [`array_chunks_mut`]: slice::array_chunks_mut\n /// [`into_remainder`]: ../../std/slice/struct.ArrayChunksMut.html#method.into_remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub struct ArrayChunksMut<'a, T: 'a, const N: usize> {\n@@ -2320,8 +2320,8 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunksMut<'a, T,\n /// let iter = slice.rchunks(2);\n /// ```\n ///\n-/// [`rchunks`]: ../../std/primitive.slice.html#method.rchunks\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rchunks`]: slice::rchunks\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunks<'a, T: 'a> {\n@@ -2484,8 +2484,8 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n /// let iter = slice.rchunks_mut(2);\n /// ```\n ///\n-/// [`rchunks_mut`]: ../../std/primitive.slice.html#method.rchunks_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rchunks_mut`]: slice::rchunks_mut\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksMut<'a, T: 'a> {\n@@ -2648,9 +2648,9 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n /// let iter = slice.rchunks_exact(2);\n /// ```\n ///\n-/// [`rchunks_exact`]: ../../std/primitive.slice.html#method.rchunks_exact\n+/// [`rchunks_exact`]: slice::rchunks_exact\n /// [`remainder`]: ChunksExact::remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksExact<'a, T: 'a> {\n@@ -2808,9 +2808,9 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n /// let iter = slice.rchunks_exact_mut(2);\n /// ```\n ///\n-/// [`rchunks_exact_mut`]: ../../std/primitive.slice.html#method.rchunks_exact_mut\n+/// [`rchunks_exact_mut`]: slice::rchunks_exact_mut\n /// [`into_remainder`]: ChunksExactMut::into_remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksExactMut<'a, T: 'a> {\n@@ -2969,8 +2969,8 @@ unsafe impl<'a, T> TrustedRandomAccess for IterMut<'a, T> {\n ///\n /// This struct is created by the [`group_by`] method on [slices].\n ///\n-/// [`group_by`]: ../../std/primitive.slice.html#method.group_by\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`group_by`]: slice::group_by\n+/// [slices]: slice\n #[unstable(feature = \"slice_group_by\", issue = \"80552\")]\n pub struct GroupBy<'a, T: 'a, P> {\n     slice: &'a [T],\n@@ -3055,8 +3055,8 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for GroupBy<'a, T, P> {\n ///\n /// This struct is created by the [`group_by_mut`] method on [slices].\n ///\n-/// [`group_by_mut`]: ../../std/primitive.slice.html#method.group_by_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`group_by_mut`]: slice::group_by_mut\n+/// [slices]: slice\n #[unstable(feature = \"slice_group_by\", issue = \"80552\")]\n pub struct GroupByMut<'a, T: 'a, P> {\n     slice: &'a mut [T],"}, {"sha": "eda50dc287f6c943b822cd259c0e9c426d29078a", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -83,7 +83,6 @@ use crate::ptr;\n ///\n /// [valid]: ptr#safety\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n-/// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n@@ -125,7 +124,6 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n ///\n /// [valid]: ptr#safety\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n-/// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {"}, {"sha": "05ff7bb120daeba91080321a8cd4fe0752e9817d", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -14,7 +14,7 @@ use super::Utf8Error;\n /// UTF-8, and then does the conversion.\n ///\n /// [`&str`]: str\n-/// [byteslice]: ../../std/primitive.slice.html\n+/// [byteslice]: slice\n ///\n /// If you are sure that the byte slice is valid UTF-8, and you don't want to\n /// incur the overhead of the validity check, there is an unsafe version of\n@@ -31,7 +31,7 @@ use super::Utf8Error;\n /// stack-allocated string. There is an example of this in the\n /// examples section below.\n ///\n-/// [byteslice]: ../../std/primitive.slice.html\n+/// [byteslice]: slice\n ///\n /// # Errors\n ///"}, {"sha": "0a2743b1c31e5b106c282a58f4a341614cc515dd", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -540,9 +540,7 @@ pub trait FromStr: Sized {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage with [`i32`][ithirtytwo], a type that implements `FromStr`:\n-    ///\n-    /// [ithirtytwo]: ../../std/primitive.i32.html\n+    /// Basic usage with [`i32`], a type that implements `FromStr`:\n     ///\n     /// ```\n     /// use std::str::FromStr;"}, {"sha": "ca39224602e6970ab7e256e5c0df29db9e07bf06", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1307,7 +1307,7 @@ macro_rules! atomic_int {\n      $stable_nand:meta,\n      $const_stable:meta,\n      $stable_init_const:meta,\n-     $s_int_type:literal, $int_ref:expr,\n+     $s_int_type:literal,\n      $extra_feature:expr,\n      $min_fn:ident, $max_fn:ident,\n      $align:expr,\n@@ -1318,18 +1318,14 @@ macro_rules! atomic_int {\n         /// This type has the same in-memory representation as the underlying\n         /// integer type, [`\n         #[doc = $s_int_type]\n-        /// `](\n-        #[doc = $int_ref]\n-        /// ). For more about the differences between atomic types and\n+        /// `]. For more about the differences between atomic types and\n         /// non-atomic types as well as information about the portability of\n         /// this type, please see the [module-level documentation].\n         ///\n         /// **Note:** This type is only available on platforms that support\n         /// atomic loads and stores of [`\n         #[doc = $s_int_type]\n-        /// `](\n-        #[doc = $int_ref]\n-        /// ).\n+        /// `].\n         ///\n         /// [module-level documentation]: crate::sync::atomic\n         #[$stable]\n@@ -1525,7 +1521,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1557,7 +1553,7 @@ macro_rules! atomic_int {\n             /// happens, and using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Migrating to `compare_exchange` and `compare_exchange_weak`\n             ///\n@@ -1626,7 +1622,7 @@ macro_rules! atomic_int {\n             /// and must be equivalent to or weaker than the success ordering.\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1678,7 +1674,7 @@ macro_rules! atomic_int {\n             /// and must be equivalent to or weaker than the success ordering.\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1720,7 +1716,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1749,7 +1745,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1781,7 +1777,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1813,7 +1809,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1845,7 +1841,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1877,7 +1873,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1916,7 +1912,7 @@ macro_rules! atomic_int {\n             /// and must be equivalent to or weaker than the success ordering.\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1960,7 +1956,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -2003,7 +1999,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -2088,7 +2084,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"i8\", \"../../../std/primitive.i8.html\",\n+    \"i8\",\n     \"\",\n     atomic_min, atomic_max,\n     1,\n@@ -2107,7 +2103,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"u8\", \"../../../std/primitive.u8.html\",\n+    \"u8\",\n     \"\",\n     atomic_umin, atomic_umax,\n     1,\n@@ -2126,7 +2122,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"i16\", \"../../../std/primitive.i16.html\",\n+    \"i16\",\n     \"\",\n     atomic_min, atomic_max,\n     2,\n@@ -2145,7 +2141,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"u16\", \"../../../std/primitive.u16.html\",\n+    \"u16\",\n     \"\",\n     atomic_umin, atomic_umax,\n     2,\n@@ -2164,7 +2160,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"i32\", \"../../../std/primitive.i32.html\",\n+    \"i32\",\n     \"\",\n     atomic_min, atomic_max,\n     4,\n@@ -2183,7 +2179,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"u32\", \"../../../std/primitive.u32.html\",\n+    \"u32\",\n     \"\",\n     atomic_umin, atomic_umax,\n     4,\n@@ -2202,7 +2198,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"i64\", \"../../../std/primitive.i64.html\",\n+    \"i64\",\n     \"\",\n     atomic_min, atomic_max,\n     8,\n@@ -2221,7 +2217,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"u64\", \"../../../std/primitive.u64.html\",\n+    \"u64\",\n     \"\",\n     atomic_umin, atomic_umax,\n     8,\n@@ -2240,7 +2236,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"i128\", \"../../../std/primitive.i128.html\",\n+    \"i128\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n     16,\n@@ -2259,7 +2255,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"u128\", \"../../../std/primitive.u128.html\",\n+    \"u128\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n     16,\n@@ -2282,7 +2278,7 @@ macro_rules! atomic_int_ptr_sized {\n             stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n             rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n             stable(feature = \"rust1\", since = \"1.0.0\"),\n-            \"isize\", \"../../../std/primitive.isize.html\",\n+            \"isize\",\n             \"\",\n             atomic_min, atomic_max,\n             $align,\n@@ -2302,7 +2298,7 @@ macro_rules! atomic_int_ptr_sized {\n             stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n             rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n             stable(feature = \"rust1\", since = \"1.0.0\"),\n-            \"usize\", \"../../../std/primitive.usize.html\",\n+            \"usize\",\n             \"\",\n             atomic_umin, atomic_umax,\n             $align,"}, {"sha": "945bfda1b78742d0d142e4be0430e6fdaae181f6", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -62,20 +62,18 @@ use crate::sys;\n /// u8` argument which is not necessarily nul-terminated, plus another\n /// argument with the length of the string \u2014 like C's `strndup()`.\n /// You can of course get the slice's length with its\n-/// [`len`][slice.len] method.\n+/// [`len`][slice::len] method.\n ///\n /// If you need a `&[`[`u8`]`]` slice *with* the nul terminator, you\n /// can use [`CString::as_bytes_with_nul`] instead.\n ///\n /// Once you have the kind of slice you need (with or without a nul\n /// terminator), you can call the slice's own\n-/// [`as_ptr`][slice.as_ptr] method to get a read-only raw pointer to pass to\n+/// [`as_ptr`][slice::as_ptr] method to get a read-only raw pointer to pass to\n /// extern functions. See the documentation for that function for a\n /// discussion on ensuring the lifetime of the raw pointer.\n ///\n /// [`&str`]: prim@str\n-/// [slice.as_ptr]: ../primitive.slice.html#method.as_ptr\n-/// [slice.len]: ../primitive.slice.html#method.len\n /// [`Deref`]: ops::Deref\n /// [`&CStr`]: CStr\n ///"}, {"sha": "2291498740510e092590d42188a1ce0861305723", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -482,7 +482,7 @@ pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [\n /// }\n /// ```\n ///\n-/// Read from [`&str`] because [`&[u8]`][slice] implements `Read`:\n+/// Read from [`&str`] because [`&[u8]`][prim@slice] implements `Read`:\n ///\n /// ```no_run\n /// # use std::io;\n@@ -504,7 +504,6 @@ pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [\n /// [`&str`]: prim@str\n /// [`std::io`]: self\n /// [`File`]: crate::fs::File\n-/// [slice]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(spotlight)]\n pub trait Read {"}, {"sha": "383eaf2e3a206db4b21e72bd4940ce43e2b0e8c2", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -42,7 +42,7 @@\n /// [Reference]: ../reference/expressions/operator-expr.html#type-cast-expressions\n /// [`crate`]: keyword.crate.html\n /// [`use`]: keyword.use.html\n-/// [const-cast]: primitive.pointer.html#method.cast\n+/// [const-cast]: pointer::cast\n /// [mut-cast]: primitive.pointer.html#method.cast-1\n mod as_keyword {}\n \n@@ -181,9 +181,8 @@ mod break_keyword {}\n /// The `const` keyword is also used in raw pointers in combination with `mut`, as seen in `*const\n /// T` and `*mut T`. More about `const` as used in raw pointers can be read at the Rust docs for the [pointer primitive].\n ///\n-/// [pointer primitive]: primitive.pointer.html\n-/// [Rust Book]:\n-/// ../book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n+/// [pointer primitive]: pointer\n+/// [Rust Book]: ../book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n /// [Reference]: ../reference/items/constant-items.html\n /// [const-eval]: ../reference/const_eval.html\n mod const_keyword {}\n@@ -371,7 +370,6 @@ mod else_keyword {}\n /// [ADT]: https://en.wikipedia.org/wiki/Algebraic_data_type\n /// [Rust Book]: ../book/ch06-01-defining-an-enum.html\n /// [Reference]: ../reference/items/enumerations.html\n-/// [`!`]: primitive.never.html\n mod enum_keyword {}\n \n #[doc(keyword = \"extern\")]"}, {"sha": "ba49dee38e642564f65ac27fff722b35d46827d0", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -61,14 +61,14 @@\n //!    type, but not the all-important methods.\n //!\n //! So for example there is a [page for the primitive type\n-//! `i32`](primitive.i32.html) that lists all the methods that can be called on\n+//! `i32`](primitive::i32) that lists all the methods that can be called on\n //! 32-bit integers (very useful), and there is a [page for the module\n //! `std::i32`] that documents the constant values [`MIN`] and [`MAX`] (rarely\n //! useful).\n //!\n-//! Note the documentation for the primitives [`str`] and [`[T]`][slice] (also\n+//! Note the documentation for the primitives [`str`] and [`[T]`][prim@slice] (also\n //! called 'slice'). Many method calls on [`String`] and [`Vec<T>`] are actually\n-//! calls to methods on [`str`] and [`[T]`][slice] respectively, via [deref\n+//! calls to methods on [`str`] and [`[T]`][prim@slice] respectively, via [deref\n //! coercions][deref-coercions].\n //!\n //! Third, the standard library defines [The Rust Prelude], a small collection\n@@ -111,8 +111,8 @@\n //! regions of memory:\n //!\n //! * [`Vec<T>`] - A heap-allocated *vector* that is resizable at runtime.\n-//! * [`[T; n]`][array] - An inline *array* with a fixed size at compile time.\n-//! * [`[T]`][slice] - A dynamically sized *slice* into any other kind of contiguous\n+//! * [`[T; N]`][prim@array] - An inline *array* with a fixed size at compile time.\n+//! * [`[T]`][prim@slice] - A dynamically sized *slice* into any other kind of contiguous\n //!   storage, whether heap-allocated or not.\n //!\n //! Slices can only be handled through some kind of *pointer*, and as such come\n@@ -275,7 +275,7 @@\n #![feature(int_error_matching)]\n #![feature(integer_atomics)]\n #![feature(into_future)]\n-#![cfg_attr(not(bootstrap), feature(intra_doc_pointers))]\n+#![feature(intra_doc_pointers)]\n #![feature(lang_items)]\n #![feature(link_args)]\n #![feature(linkage)]"}, {"sha": "d4bb2083d00d84216b3e3e8fac3053a904c6c543", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -468,8 +468,8 @@ mod prim_unit {}\n ///\n /// [`null`]: ptr::null\n /// [`null_mut`]: ptr::null_mut\n-/// [`is_null`]: ../std/primitive.pointer.html#method.is_null\n-/// [`offset`]: ../std/primitive.pointer.html#method.offset\n+/// [`is_null`]: pointer::is_null\n+/// [`offset`]: pointer::offset\n /// [`into_raw`]: Box::into_raw\n /// [`drop`]: mem::drop\n /// [`write`]: ptr::write\n@@ -564,7 +564,7 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n-/// [slice]: primitive.slice.html\n+/// [slice]: prim@slice\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash\n /// [`Borrow`]: borrow::Borrow"}, {"sha": "0f87daf683ae3de3cb725faecb11b7e7e89f0e5a", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1 +1 @@\n-Subproject commit db5e8a5105aa22979490dce30e33b68d8645761d\n+Subproject commit 0f87daf683ae3de3cb725faecb11b7e7e89f0e5a"}, {"sha": "a96d096cffe5fa2c84af1b4b61e1492f839bb2e1", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1 +1 @@\n-Subproject commit 4cf7981696a85c3e633076c6401611bd3f6346c4\n+Subproject commit a96d096cffe5fa2c84af1b4b61e1492f839bb2e1"}, {"sha": "3b6fe80c205d2a2b5dc8a276192bbce9eeb9e9cf", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1 +1 @@\n-Subproject commit 361367c126290ac17cb4089f8d38fd8b2ac43f98\n+Subproject commit 3b6fe80c205d2a2b5dc8a276192bbce9eeb9e9cf"}, {"sha": "3e0d98790c9126517fa1c604dc3678f396e92a27", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1 +1 @@\n-Subproject commit 551cc4bc8394feccea6acd21f86d9a4e1d2271a0\n+Subproject commit 3e0d98790c9126517fa1c604dc3678f396e92a27"}, {"sha": "c431f8c29a41413dddcb3bfa0d71c9cabe366317", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1 +1 @@\n-Subproject commit 7adfab42bab045a848126895c2f1e09927c1331a\n+Subproject commit c431f8c29a41413dddcb3bfa0d71c9cabe366317"}, {"sha": "6ca1d1153b4942924f44e1fb2c089d54a0044074", "filename": "src/doc/rustdoc/src/linking-to-items-by-name.md", "status": "modified", "additions": 62, "deletions": 13, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,7 +1,7 @@\n # Linking to items by name\n \n Rustdoc is capable of directly linking to other rustdoc pages using the path of\n-the item as a link.\n+the item as a link. This is referred to as an 'intra-doc link'.\n \n For example, in the following code all of the links will link to the rustdoc page for `Bar`:\n \n@@ -24,11 +24,20 @@ pub struct Foo4;\n pub struct Bar;\n ```\n \n+Unlike normal Markdown, `[bar][Bar]` syntax is also supported without needing a\n+`[Bar]: ...` reference link.\n+\n Backticks around the link will be stripped, so ``[`Option`]`` will correctly\n link to `Option`.\n \n-You can refer to anything in scope, and use paths, including `Self`, `self`,\n-`super`, and `crate`. You may also use `foo()` and `foo!()` to refer to methods/functions and macros, respectively.\n+## Valid links\n+\n+You can refer to anything in scope, and use paths, including `Self`, `self`, `super`, and\n+`crate`. Associated items (functions, types, and constants) are supported, but [not for blanket\n+trait implementations][#79682]. Rustdoc also supports linking to all primitives listed in\n+[the standard library documentation](../std/index.html#primitives).\n+\n+[#79682]: https://github.com/rust-lang/rust/pull/79682\n \n You can also refer to items with generic parameters like `Vec<T>`. The link will\n resolve as if you had written ``[`Vec<T>`](Vec)``. Fully-qualified syntax (for example,\n@@ -53,7 +62,7 @@ impl<T> AsyncReceiver<T> {\n }\n ```\n \n-You can also link to sections using URL fragment specifiers:\n+Rustdoc allows using URL fragment specifiers, just like a normal link:\n \n ```rust\n /// This is a special implementation of [positional parameters].\n@@ -62,9 +71,11 @@ You can also link to sections using URL fragment specifiers:\n struct MySpecialFormatter;\n ```\n \n-Paths in Rust have three namespaces: type, value, and macro. Item names must be\n-unique within their namespace, but can overlap with items outside of their\n-namespace. In case of ambiguity, rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a prefix like `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`, `fn@`, `function@`, `mod@`, `module@`, `method@`, `prim@`, `primitive@`, `macro@`, or `derive@`:\n+## Namespaces and Disambiguators\n+\n+Paths in Rust have three namespaces: type, value, and macro. Item names must be unique within\n+their namespace, but can overlap with items in other namespaces. In case of ambiguity,\n+rustdoc will warn about the ambiguity and suggest a disambiguator.\n \n ```rust\n /// See also: [`Foo`](struct@Foo)\n@@ -76,19 +87,57 @@ struct Foo {}\n fn Foo() {}\n ```\n \n+These prefixes will be stripped when displayed in the documentation, so `[struct@Foo]` will be\n+rendered as `Foo`.\n+\n You can also disambiguate for functions by adding `()` after the function name,\n or for macros by adding `!` after the macro name:\n \n ```rust\n-/// See also: [`Foo`](struct@Foo)\n-struct Bar;\n+/// This is different from [`foo!`]\n+fn foo() {}\n \n-/// This is different from [`Foo()`]\n-struct Foo {}\n+/// This is different from [`foo()`]\n+macro_rules! foo {\n+  () => {}\n+}\n+```\n \n-fn Foo() {}\n+## Warnings, re-exports, and scoping\n+\n+Links are resolved in the scope of the module where the item is defined, even\n+when the item is re-exported. If a link from another crate fails to resolve, no\n+warning is given.\n+\n+```rust,edition2018\n+mod inner {\n+    /// Link to [f()]\n+    pub struct S;\n+    pub fn f() {}\n+}\n+pub use inner::S; // the link to `f` will still resolve correctly\n ```\n \n-Note: Because of how `macro_rules!` macros are scoped in Rust, the intra-doc links of a `macro_rules!` macro will be resolved [relative to the crate root][#72243], as opposed to the module it is defined in.\n+When re-exporting an item, rustdoc allows adding additional documentation to it.\n+That additional documentation will be resolved in the scope of the re-export, not\n+the original, allowing you to link to items in the new crate. The new links\n+will still give a warning if they fail to resolve.\n+\n+```rust\n+/// See also [foo()]\n+pub use std::process::Command;\n+\n+pub fn foo() {}\n+```\n+\n+This is especially useful for proc-macros, which must always be defined in their own dedicated crate.\n+\n+Note: Because of how `macro_rules!` macros are scoped in Rust, the intra-doc links of a\n+`macro_rules!` macro will be resolved [relative to the crate root][#72243], as opposed to the\n+module it is defined in.\n+\n+If links do not look 'sufficiently like' an intra-doc link, they will be ignored and no warning\n+will be given, even if the link fails to resolve. For example, any link containing `/` or `[]`\n+characters will be ignored.\n \n [#72243]: https://github.com/rust-lang/rust/issues/72243"}, {"sha": "d0e058c7dda7556d746e7a85815b7d5442c8c379", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             return None;\n         }\n \n-        let result = f.find_auto_trait_generics(ty, param_env, trait_def_id, |infcx, info| {\n+        let result = f.find_auto_trait_generics(ty, param_env, trait_def_id, |info| {\n             let region_data = info.region_data;\n \n             let names_map = tcx\n@@ -61,7 +61,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 .collect();\n             let lifetime_predicates = Self::handle_lifetimes(&region_data, &names_map);\n             let new_generics = self.param_env_to_generics(\n-                infcx.tcx,\n                 item_def_id,\n                 info.full_user_env,\n                 lifetime_predicates,\n@@ -313,12 +312,9 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         lifetime_predicates\n     }\n \n-    fn extract_for_generics(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        pred: ty::Predicate<'tcx>,\n-    ) -> FxHashSet<GenericParamDef> {\n+    fn extract_for_generics(&self, pred: ty::Predicate<'tcx>) -> FxHashSet<GenericParamDef> {\n         let bound_predicate = pred.kind();\n+        let tcx = self.cx.tcx;\n         let regions = match bound_predicate.skip_binder() {\n             ty::PredicateKind::Trait(poly_trait_pred, _) => {\n                 tcx.collect_referenced_late_bound_regions(&bound_predicate.rebind(poly_trait_pred))\n@@ -443,7 +439,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // * We explicitly add a '?Sized' bound if we didn't find any 'Sized' predicates for a type\n     fn param_env_to_generics(\n         &mut self,\n-        tcx: TyCtxt<'tcx>,\n         item_def_id: DefId,\n         param_env: ty::ParamEnv<'tcx>,\n         mut existing_predicates: Vec<WherePredicate>,\n@@ -455,14 +450,15 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             item_def_id, param_env, existing_predicates\n         );\n \n+        let tcx = self.cx.tcx;\n+\n         // The `Sized` trait must be handled specially, since we only display it when\n         // it is *not* required (i.e., '?Sized')\n-        let sized_trait = self.cx.tcx.require_lang_item(LangItem::Sized, None);\n+        let sized_trait = tcx.require_lang_item(LangItem::Sized, None);\n \n         let mut replacer = RegionReplacer { vid_to_region: &vid_to_region, tcx };\n \n-        let orig_bounds: FxHashSet<_> =\n-            self.cx.tcx.param_env(item_def_id).caller_bounds().iter().collect();\n+        let orig_bounds: FxHashSet<_> = tcx.param_env(item_def_id).caller_bounds().iter().collect();\n         let clean_where_predicates = param_env\n             .caller_bounds()\n             .iter()\n@@ -512,7 +508,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         continue;\n                     }\n \n-                    let mut for_generics = self.extract_for_generics(tcx, orig_p);\n+                    let mut for_generics = self.extract_for_generics(orig_p);\n \n                     assert!(bounds.len() == 1);\n                     let mut b = bounds.pop().expect(\"bounds were empty\");\n@@ -541,7 +537,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                 // that we don't end up with duplicate bounds (e.g., for<'b, 'b>)\n                                 for_generics.extend(p.generic_params.clone());\n                                 p.generic_params = for_generics.into_iter().collect();\n-                                self.is_fn_ty(tcx, &p.trait_)\n+                                self.is_fn_ty(&p.trait_)\n                             }\n                             _ => false,\n                         };\n@@ -576,7 +572,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                 } => {\n                                     let mut new_trait_path = trait_path.clone();\n \n-                                    if self.is_fn_ty(tcx, trait_) && left_name == sym::Output {\n+                                    if self.is_fn_ty(trait_) && left_name == sym::Output {\n                                         ty_to_fn\n                                             .entry(*ty.clone())\n                                             .and_modify(|e| *e = (e.0.clone(), Some(rhs.clone())))\n@@ -734,7 +730,8 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         vec.sort_by_cached_key(|x| format!(\"{:?}\", x))\n     }\n \n-    fn is_fn_ty(&self, tcx: TyCtxt<'_>, ty: &Type) -> bool {\n+    fn is_fn_ty(&self, ty: &Type) -> bool {\n+        let tcx = self.cx.tcx;\n         match ty {\n             &Type::ResolvedPath { did, .. } => {\n                 did == tcx.require_lang_item(LangItem::Fn, None)"}, {"sha": "02adccef594efe723da52a96d37eb41edf3da500", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -483,6 +483,7 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"openbsd\" => \"OpenBSD\",\n                         \"redox\" => \"Redox\",\n                         \"solaris\" => \"Solaris\",\n+                        \"wasi\" => \"WASI\",\n                         \"windows\" => \"Windows\",\n                         _ => \"\",\n                     },"}, {"sha": "34b9cbcb6793ab608539ae722ddd8bd7de5dcbd1", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -367,6 +367,10 @@ fn test_render_long_html() {\n             name_value_cfg(\"target_os\", \"macos\").render_long_html(),\n             \"This is supported on <strong>macOS</strong> only.\"\n         );\n+        assert_eq!(\n+            name_value_cfg(\"target_os\", \"wasi\").render_long_html(),\n+            \"This is supported on <strong>WASI</strong> only.\"\n+        );\n         assert_eq!(\n             name_value_cfg(\"target_pointer_width\", \"16\").render_long_html(),\n             \"This is supported on <strong>16-bit</strong> only.\""}, {"sha": "89a61a289fdebb5f00a0c0453202523a83828d3f", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -5,6 +5,8 @@\n // @!has - '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' ''\n // @has - '//*[@id=\"method.unix_and_arm_only_function\"]' 'fn unix_and_arm_only_function()'\n // @has - '//*[@class=\"stab portability\"]' 'This is supported on Unix and ARM only.'\n+// @has - '//*[@id=\"method.wasi_and_wasm32_only_function\"]' 'fn wasi_and_wasm32_only_function()'\n+// @has - '//*[@class=\"stab portability\"]' 'This is supported on WASI and WebAssembly only.'\n pub struct Portable;\n \n // @has doc_cfg/unix_only/index.html \\\n@@ -37,6 +39,36 @@ pub mod unix_only {\n     }\n }\n \n+// @has doc_cfg/wasi_only/index.html \\\n+//  '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n+//  'This is supported on WASI only.'\n+// @matches - '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '\\AWebAssembly\\Z'\n+// @count - '//*[@class=\"stab portability\"]' 2\n+#[doc(cfg(target_os = \"wasi\"))]\n+pub mod wasi_only {\n+    // @has doc_cfg/wasi_only/fn.wasi_only_function.html \\\n+    //  '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n+    //  'This is supported on WASI only.'\n+    // @count - '//*[@class=\"stab portability\"]' 1\n+    pub fn wasi_only_function() {\n+        content::should::be::irrelevant();\n+    }\n+\n+    // @has doc_cfg/wasi_only/trait.Wasm32Only.html \\\n+    //  '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n+    //  'This is supported on WASI and WebAssembly only.'\n+    // @count - '//*[@class=\"stab portability\"]' 1\n+    #[doc(cfg(target_arch = \"wasm32\"))]\n+    pub trait Wasm32Only {\n+        fn wasi_and_wasm32_only_function();\n+    }\n+\n+    #[doc(cfg(target_arch = \"wasm32\"))]\n+    impl Wasm32Only for super::Portable {\n+        fn wasi_and_wasm32_only_function() {}\n+    }\n+}\n+\n // tagging a function with `#[target_feature]` creates a doc(cfg(target_feature)) node for that\n // item as well\n "}, {"sha": "c579c962ffcc16dcc9c01c1587a814168b103e3e", "filename": "src/test/ui/assoc-inherent.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,9 +1,20 @@\n-// Test associated types are, until #8995 is implemented, forbidden in inherent impls.\n+// Test that inherent associated types work with\n+// inherent_associated_types feature gate.\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n \n struct Foo;\n \n impl Foo {\n-    type Bar = isize; //~ERROR associated types are not yet supported in inherent impls (see #8995)\n+    type Bar = isize;\n }\n \n-fn main() {}\n+impl Foo {\n+    type Baz; //~ ERROR associated type in `impl` without body\n+}\n+\n+fn main() {\n+    let x : Foo::Bar; //~ERROR ambiguous associated type\n+    x = 0isize;\n+}"}, {"sha": "b703453fa0334b2e3f55680ce9df127a8460d2a1", "filename": "src/test/ui/assoc-inherent.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.stderr?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1,9 +1,17 @@\n-error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n-  --> $DIR/assoc-inherent.rs:6:5\n+error: associated type in `impl` without body\n+  --> $DIR/assoc-inherent.rs:14:5\n    |\n-LL |     type Bar = isize;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     type Baz;\n+   |     ^^^^^^^^-\n+   |             |\n+   |             help: provide a definition for the type: `= <type>;`\n \n-error: aborting due to previous error\n+error[E0223]: ambiguous associated type\n+  --> $DIR/assoc-inherent.rs:18:13\n+   |\n+LL |     let x : Foo::Bar;\n+   |             ^^^^^^^^ help: use fully-qualified syntax: `<Foo as Trait>::Bar`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0202`.\n+For more information about this error, try `rustc --explain E0223`."}, {"sha": "fc7c6dbc02eef2fe1c167a607b8068b38db4ca23", "filename": "src/test/ui/feature-gates/feature-gate-inherent_associated_types.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -0,0 +1,10 @@\n+// Test that inherent associated types cannot be used when inherent_associated_types\n+// feature gate is not used.\n+\n+struct Foo;\n+\n+impl Foo {\n+    type Bar = isize; //~ERROR inherent associated types are unstable\n+}\n+\n+fn main() {}"}, {"sha": "76e65d239f87867a4fe3fdb727649a6603b28da3", "filename": "src/test/ui/feature-gates/feature-gate-inherent_associated_types.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.stderr?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: inherent associated types are unstable\n+  --> $DIR/feature-gate-inherent_associated_types.rs:7:5\n+   |\n+LL |     type Bar = isize;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1ccc9497d9d81b82d31715637a5f150230f71204", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -8,16 +8,16 @@ struct X;\n impl X {\n     type Y;\n     //~^ ERROR associated type in `impl` without body\n-    //~| ERROR associated types are not yet supported in inherent impls\n+    //~| ERROR inherent associated types are unstable\n     type Z: Ord;\n     //~^ ERROR associated type in `impl` without body\n     //~| ERROR bounds on `type`s in `impl`s have no effect\n-    //~| ERROR associated types are not yet supported in inherent impls\n+    //~| ERROR inherent associated types are unstable\n     type W: Ord where Self: Eq;\n     //~^ ERROR associated type in `impl` without body\n     //~| ERROR bounds on `type`s in `impl`s have no effect\n-    //~| ERROR associated types are not yet supported in inherent impls\n+    //~| ERROR inherent associated types are unstable\n     type W where Self: Eq;\n     //~^ ERROR associated type in `impl` without body\n-    //~| ERROR associated types are not yet supported in inherent impls\n+    //~| ERROR inherent associated types are unstable\n }"}, {"sha": "818d73c898dcaf6ef4a19222d28584851f5b67bc", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -51,30 +51,42 @@ LL | #![feature(generic_associated_types)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n-error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+error[E0658]: inherent associated types are unstable\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:9:5\n    |\n LL |     type Y;\n    |     ^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n-error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+error[E0658]: inherent associated types are unstable\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:12:5\n    |\n LL |     type Z: Ord;\n    |     ^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n-error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+error[E0658]: inherent associated types are unstable\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:16:5\n    |\n LL |     type W: Ord where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n-error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+error[E0658]: inherent associated types are unstable\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:20:5\n    |\n LL |     type W where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n error: aborting due to 10 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0202`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "db0d08ddb915b1a9be64f3038b5aff9e1f4850b4", "filename": "src/test/ui/return/issue-82612-return-mutable-reference.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Freturn%2Fissue-82612-return-mutable-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Freturn%2Fissue-82612-return-mutable-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Fissue-82612-return-mutable-reference.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -0,0 +1,24 @@\n+// Regression test for #82612.\n+\n+use std::marker::PhantomData;\n+\n+pub trait SparseSetIndex {\n+    fn sparse_set_index(&self) -> usize;\n+}\n+pub struct SparseArray<I, V = I> {\n+    values: Vec<Option<V>>,\n+    marker: PhantomData<I>,\n+}\n+\n+impl<I: SparseSetIndex, V> SparseArray<I, V> {\n+    pub fn get_or_insert_with(&mut self, index: I, func: impl FnOnce() -> V) -> &mut V {\n+        let index = index.sparse_set_index();\n+        if index < self.values.len() {\n+            let value = unsafe { self.values.get_unchecked_mut(index) };\n+            value.get_or_insert_with(func) //~ ERROR mismatched types\n+        }\n+        unsafe { self.values.get_unchecked_mut(index).as_mut().unwrap() }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a8045e043ad891c000f3230b9dbeb19d5c78a97e", "filename": "src/test/ui/return/issue-82612-return-mutable-reference.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Freturn%2Fissue-82612-return-mutable-reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Freturn%2Fissue-82612-return-mutable-reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Fissue-82612-return-mutable-reference.stderr?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -0,0 +1,28 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-82612-return-mutable-reference.rs:18:13\n+   |\n+LL | /         if index < self.values.len() {\n+LL | |             let value = unsafe { self.values.get_unchecked_mut(index) };\n+LL | |             value.get_or_insert_with(func)\n+   | |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `&mut V`\n+LL | |         }\n+   | |_________- expected this to be `()`\n+   |\n+   = note:      expected unit type `()`\n+           found mutable reference `&mut V`\n+help: consider using a semicolon here\n+   |\n+LL |             value.get_or_insert_with(func);\n+   |                                           ^\n+help: consider using a semicolon here\n+   |\n+LL |         };\n+   |          ^\n+help: you might have meant to return this value\n+   |\n+LL |             return value.get_or_insert_with(func);\n+   |             ^^^^^^                               ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "95c31fbaa289ace51be419dcec281f4f5f0f8d77", "filename": "src/test/ui/suggestions/issue-82566-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -0,0 +1,21 @@\n+struct T1<const X1: usize>;\n+struct T2<const X1: usize, const X2: usize>;\n+struct T3<const X1: usize, const X2: usize, const X3: usize>;\n+\n+impl T1<1> {\n+    const C: () = ();\n+}\n+\n+impl T2<1, 2> {\n+    const C: () = ();\n+}\n+\n+impl T3<1, 2, 3> {\n+    const C: () = ();\n+}\n+\n+fn main() {\n+    T1<1>::C; //~ ERROR: comparison operators cannot be chained\n+    T2<1, 2>::C; //~ ERROR: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n+    T3<1, 2, 3>::C; //~ ERROR: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n+}"}, {"sha": "5a9099a894c8fb4387a88834bc92d4bc4c928871", "filename": "src/test/ui/suggestions/issue-82566-1.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -0,0 +1,35 @@\n+error: comparison operators cannot be chained\n+  --> $DIR/issue-82566-1.rs:18:7\n+   |\n+LL |     T1<1>::C;\n+   |       ^ ^\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL |     T1::<1>::C;\n+   |       ^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n+  --> $DIR/issue-82566-1.rs:19:9\n+   |\n+LL |     T2<1, 2>::C;\n+   |         ^ expected one of `.`, `;`, `?`, `}`, or an operator\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL |     T2::<1, 2>::C;\n+   |       ^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n+  --> $DIR/issue-82566-1.rs:20:9\n+   |\n+LL |     T3<1, 2, 3>::C;\n+   |         ^ expected one of `.`, `;`, `?`, `}`, or an operator\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL |     T3::<1, 2, 3>::C;\n+   |       ^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "80c8034bd0adff49f2c8dc483b439d9a58a14525", "filename": "src/test/ui/suggestions/issue-82566-2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.rs?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -0,0 +1,31 @@\n+struct Foo1<const N1: usize>;\n+struct Foo2<const N1: usize, const N2: usize>;\n+struct Foo3<const N1: usize, const N2: usize, const N3: usize>;\n+\n+impl<const N1: usize> Foo1<N1> {\n+    const SUM: usize = N1;\n+}\n+\n+impl<const N1: usize, const N2: usize> Foo2<N1, N2> {\n+    const SUM: usize = N1 + N2;\n+}\n+\n+impl<const N1: usize, const N2: usize, const N3: usize> Foo3<N1, N2, N3> {\n+    const SUM: usize = N1 + N2 + N3;\n+}\n+\n+fn foo1() -> [(); Foo1<10>::SUM] { //~ ERROR: comparison operators cannot be chained\n+    todo!()\n+}\n+\n+fn foo2() -> [(); Foo2<10, 20>::SUM] {\n+    //~^ ERROR: expected one of `.`, `?`, `]`, or an operator, found `,`\n+    todo!()\n+}\n+\n+fn foo3() -> [(); Foo3<10, 20, 30>::SUM] {\n+    //~^ ERROR: expected one of `.`, `?`, `]`, or an operator, found `,`\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "ea391ee078c8154c7440acbea7680dcf03589f25", "filename": "src/test/ui/suggestions/issue-82566-2.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67342b830ebeca05ebafc09d8c7ed71b2ad821e1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -0,0 +1,35 @@\n+error: comparison operators cannot be chained\n+  --> $DIR/issue-82566-2.rs:17:23\n+   |\n+LL | fn foo1() -> [(); Foo1<10>::SUM] {\n+   |                       ^  ^\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL | fn foo1() -> [(); Foo1::<10>::SUM] {\n+   |                       ^^\n+\n+error: expected one of `.`, `?`, `]`, or an operator, found `,`\n+  --> $DIR/issue-82566-2.rs:21:26\n+   |\n+LL | fn foo2() -> [(); Foo2<10, 20>::SUM] {\n+   |                          ^ expected one of `.`, `?`, `]`, or an operator\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL | fn foo2() -> [(); Foo2::<10, 20>::SUM] {\n+   |                       ^^\n+\n+error: expected one of `.`, `?`, `]`, or an operator, found `,`\n+  --> $DIR/issue-82566-2.rs:26:26\n+   |\n+LL | fn foo3() -> [(); Foo3<10, 20, 30>::SUM] {\n+   |                          ^ expected one of `.`, `?`, `]`, or an operator\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL | fn foo3() -> [(); Foo3::<10, 20, 30>::SUM] {\n+   |                       ^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "patch": "@@ -1 +1 @@\n-Subproject commit 14de9e54a6d9ef070399b34a11634294a8cc3ca5\n+Subproject commit 5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1"}]}