{"sha": "8b8ab85551877755a652170935eee280f88c7ff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOGFiODU1NTE4Nzc3NTVhNjUyMTcwOTM1ZWVlMjgwZjg4YzdmZjY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-30T01:26:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-30T01:26:28Z"}, "message": "Rollup merge of #38635 - GuillaumeGomez:atomicptr_docs, r=frewsxcv\n\nAdd missing urls for AtomicPtr\n\nr? @frewsxcv", "tree": {"sha": "cc2827496f9f3674879b41f6a2304bb550ab1bb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc2827496f9f3674879b41f6a2304bb550ab1bb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b8ab85551877755a652170935eee280f88c7ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8ab85551877755a652170935eee280f88c7ff6", "html_url": "https://github.com/rust-lang/rust/commit/8b8ab85551877755a652170935eee280f88c7ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b8ab85551877755a652170935eee280f88c7ff6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ccf039a2c3c0f355c8f73d80c68e8cc8f89afbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ccf039a2c3c0f355c8f73d80c68e8cc8f89afbd", "html_url": "https://github.com/rust-lang/rust/commit/6ccf039a2c3c0f355c8f73d80c68e8cc8f89afbd"}, {"sha": "ef8d5e14b12f6dc3e72810fbaa22d23287218ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8d5e14b12f6dc3e72810fbaa22d23287218ece", "html_url": "https://github.com/rust-lang/rust/commit/ef8d5e14b12f6dc3e72810fbaa22d23287218ece"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "aebe624e13d3232adf7c1aacacb9a2aff7b9ded3", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8b8ab85551877755a652170935eee280f88c7ff6/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8ab85551877755a652170935eee280f88c7ff6/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=8b8ab85551877755a652170935eee280f88c7ff6", "patch": "@@ -641,11 +641,16 @@ impl<T> AtomicPtr<T> {\n \n     /// Loads a value from the pointer.\n     ///\n-    /// `load` takes an `Ordering` argument which describes the memory ordering of this operation.\n+    /// `load` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation.\n     ///\n     /// # Panics\n     ///\n-    /// Panics if `order` is `Release` or `AcqRel`.\n+    /// Panics if `order` is [`Release`] or [`AcqRel`].\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     ///\n     /// # Examples\n     ///\n@@ -665,7 +670,10 @@ impl<T> AtomicPtr<T> {\n \n     /// Stores a value into the pointer.\n     ///\n-    /// `store` takes an `Ordering` argument which describes the memory ordering of this operation.\n+    /// `store` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation.\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n     ///\n     /// # Examples\n     ///\n@@ -693,7 +701,10 @@ impl<T> AtomicPtr<T> {\n \n     /// Stores a value into the pointer, returning the old value.\n     ///\n-    /// `swap` takes an `Ordering` argument which describes the memory ordering of this operation.\n+    /// `swap` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation.\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n     ///\n     /// # Examples\n     ///\n@@ -718,8 +729,10 @@ impl<T> AtomicPtr<T> {\n     /// The return value is always the previous value. If it is equal to `current`, then the value\n     /// was updated.\n     ///\n-    /// `compare_and_swap` also takes an `Ordering` argument which describes the memory ordering of\n-    /// this operation.\n+    /// `compare_and_swap` also takes an [`Ordering`] argument which describes the memory\n+    /// ordering of this operation.\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n     ///\n     /// # Examples\n     ///\n@@ -748,10 +761,15 @@ impl<T> AtomicPtr<T> {\n     /// The return value is a result indicating whether the new value was written and containing\n     /// the previous value. On success this value is guaranteed to be equal to `current`.\n     ///\n-    /// `compare_exchange` takes two `Ordering` arguments to describe the memory ordering of this\n-    /// operation. The first describes the required ordering if the operation succeeds while the\n-    /// second describes the required ordering when the operation fails. The failure ordering can't\n-    /// be `Release` or `AcqRel` and must be equivalent or weaker than the success ordering.\n+    /// `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n+    /// ordering of this operation. The first describes the required ordering if\n+    /// the operation succeeds while the second describes the required ordering when\n+    /// the operation fails. The failure ordering can't be [`Release`] or [`AcqRel`]\n+    /// and must be equivalent or weaker than the success ordering.\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     ///\n     /// # Examples\n     ///\n@@ -790,16 +808,21 @@ impl<T> AtomicPtr<T> {\n \n     /// Stores a value into the pointer if the current value is the same as the `current` value.\n     ///\n-    /// Unlike `compare_exchange`, this function is allowed to spuriously fail even when the\n+    /// Unlike [`compare_exchange`], this function is allowed to spuriously fail even when the\n     /// comparison succeeds, which can result in more efficient code on some platforms. The\n     /// return value is a result indicating whether the new value was written and containing the\n     /// previous value.\n     ///\n-    /// `compare_exchange_weak` takes two `Ordering` arguments to describe the memory\n+    /// `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n     /// ordering of this operation. The first describes the required ordering if the operation\n     /// succeeds while the second describes the required ordering when the operation fails. The\n-    /// failure ordering can't be `Release` or `AcqRel` and must be equivalent or weaker than the\n-    /// success ordering.\n+    /// failure ordering can't be [`Release`] or [`AcqRel`] and must be equivalent or\n+    /// weaker than the success ordering.\n+    ///\n+    /// [`compare_exchange`]: #method.compare_exchange\n+    /// [`Ordering`]: enum.Ordering.html\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     ///\n     /// # Examples\n     ///"}]}