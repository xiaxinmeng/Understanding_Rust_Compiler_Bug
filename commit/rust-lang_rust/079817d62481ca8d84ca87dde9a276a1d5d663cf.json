{"sha": "079817d62481ca8d84ca87dde9a276a1d5d663cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OTgxN2Q2MjQ4MWNhOGQ4NGNhODdkZGU5YTI3NmExZDVkNjYzY2Y=", "commit": {"author": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-04-25T00:56:07Z"}, "committer": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-04-25T00:56:07Z"}, "message": "Make `prefix` immutable", "tree": {"sha": "43f223a892312bc1e720ca47dfe3c8f8ba871432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43f223a892312bc1e720ca47dfe3c8f8ba871432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/079817d62481ca8d84ca87dde9a276a1d5d663cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/079817d62481ca8d84ca87dde9a276a1d5d663cf", "html_url": "https://github.com/rust-lang/rust/commit/079817d62481ca8d84ca87dde9a276a1d5d663cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/079817d62481ca8d84ca87dde9a276a1d5d663cf/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061256835886be38fcb2255d585ec4e1292b77d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/061256835886be38fcb2255d585ec4e1292b77d0", "html_url": "https://github.com/rust-lang/rust/commit/061256835886be38fcb2255d585ec4e1292b77d0"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "7e33bb8c2a741eb09c4f00fd5862fd3f111caec5", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/079817d62481ca8d84ca87dde9a276a1d5d663cf/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079817d62481ca8d84ca87dde9a276a1d5d663cf/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=079817d62481ca8d84ca87dde9a276a1d5d663cf", "patch": "@@ -614,24 +614,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // For now, don't suggest casting with `as`.\n         let can_cast = false;\n \n-        let mut prefix = String::new();\n-        if let Some(hir::Node::Expr(hir::Expr {\n-            kind: hir::ExprKind::Struct(_, fields, _), ..\n+        let prefix = if let Some(hir::Node::Expr(hir::Expr {\n+            kind: hir::ExprKind::Struct(_, fields, _),\n+            ..\n         })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n         {\n             // `expr` is a literal field for a struct, only suggest if appropriate\n-            for field in *fields {\n-                if field.expr.hir_id == expr.hir_id && field.is_shorthand {\n-                    // This is a field literal\n-                    prefix = format!(\"{}: \", field.ident);\n-                    break;\n-                }\n-            }\n-            if &prefix == \"\" {\n+            match (*fields)\n+                .iter()\n+                .find(|field| field.expr.hir_id == expr.hir_id && field.is_shorthand)\n+            {\n+                // This is a field literal\n+                Some(field) => format!(\"{}: \", field.ident),\n                 // Likely a field was meant, but this field wasn't found. Do not suggest anything.\n-                return false;\n+                None => return false,\n             }\n-        }\n+        } else {\n+            String::new()\n+        };\n         if let hir::ExprKind::Call(path, args) = &expr.kind {\n             if let (hir::ExprKind::Path(hir::QPath::TypeRelative(base_ty, path_segment)), 1) =\n                 (&path.kind, args.len())\n@@ -723,7 +723,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let suggest_to_change_suffix_or_into =\n                 |err: &mut DiagnosticBuilder<'_>, is_fallible: bool| {\n-                    let into_sugg = into_suggestion.clone();\n                     err.span_suggestion(\n                         expr.span,\n                         if literal_is_ty_suffixed(expr) {\n@@ -738,7 +737,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else if is_fallible {\n                             try_into_suggestion\n                         } else {\n-                            into_sugg\n+                            into_suggestion.clone()\n                         },\n                         Applicability::MachineApplicable,\n                     );"}]}