{"sha": "0195714836d1b2fb754452ad5fc400c7bfa3c9bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOTU3MTQ4MzZkMWIyZmI3NTQ0NTJhZDVmYzQwMGM3YmZhM2M5YmM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-01T19:57:23Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-02T18:44:27Z"}, "message": "Fix ICEs with match/return expressions inside array lengths", "tree": {"sha": "5aec914f66e2301532921af66819667f843d93d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aec914f66e2301532921af66819667f843d93d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0195714836d1b2fb754452ad5fc400c7bfa3c9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0195714836d1b2fb754452ad5fc400c7bfa3c9bc", "html_url": "https://github.com/rust-lang/rust/commit/0195714836d1b2fb754452ad5fc400c7bfa3c9bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0195714836d1b2fb754452ad5fc400c7bfa3c9bc/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30fde047804b6555ad982e7d55fea9e54815ea39", "url": "https://api.github.com/repos/rust-lang/rust/commits/30fde047804b6555ad982e7d55fea9e54815ea39", "html_url": "https://github.com/rust-lang/rust/commit/30fde047804b6555ad982e7d55fea9e54815ea39"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "0763c8af5d037a02d69e2ed51b5af57ef475915e", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0195714836d1b2fb754452ad5fc400c7bfa3c9bc/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0195714836d1b2fb754452ad5fc400c7bfa3c9bc/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=0195714836d1b2fb754452ad5fc400c7bfa3c9bc", "patch": "@@ -1118,9 +1118,12 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             ty::TyParam(_) => {\n                 return Err(LayoutError::Unknown(ty));\n             }\n-            ty::TyGeneratorWitness(..) | ty::TyInfer(_) | ty::TyError => {\n+            ty::TyGeneratorWitness(..) | ty::TyInfer(_) => {\n                 bug!(\"LayoutDetails::compute: unexpected type `{}`\", ty)\n             }\n+            ty::TyError => {\n+                return Err(LayoutError::Unknown(ty));\n+            }\n         })\n     }\n "}, {"sha": "2291387792b0e2c689066cf4b946e2d7deaab749", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0195714836d1b2fb754452ad5fc400c7bfa3c9bc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0195714836d1b2fb754452ad5fc400c7bfa3c9bc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=0195714836d1b2fb754452ad5fc400c7bfa3c9bc", "patch": "@@ -743,8 +743,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         );\n                         *self.const_to_pat(instance, val, expr.hir_id, lit.span).kind\n                     },\n-                    Err(()) => {\n-                        self.errors.push(PatternError::FloatBug);\n+                    Err(float_bug) => {\n+                        if float_bug {\n+                            self.errors.push(PatternError::FloatBug);\n+                        }\n                         PatternKind::Wild\n                     },\n                 }\n@@ -764,8 +766,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         );\n                         *self.const_to_pat(instance, val, expr.hir_id, lit.span).kind\n                     },\n-                    Err(()) => {\n-                        self.errors.push(PatternError::FloatBug);\n+                    Err(float_bug) => {\n+                        if float_bug {\n+                            self.errors.push(PatternError::FloatBug);\n+                        }\n                         PatternKind::Wild\n                     },\n                 }\n@@ -1123,7 +1127,7 @@ fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           ty: Ty<'tcx>,\n                           neg: bool)\n-                          -> Result<&'tcx ty::Const<'tcx>, ()> {\n+                          -> Result<&'tcx ty::Const<'tcx>, bool> {\n     use syntax::ast::*;\n \n     use rustc::mir::interpret::*;\n@@ -1152,7 +1156,11 @@ fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n                 ty::TyInt(other) => Int::Signed(other),\n                 ty::TyUint(UintTy::Usize) => Int::Unsigned(tcx.sess.target.usize_ty),\n                 ty::TyUint(other) => Int::Unsigned(other),\n-                _ => bug!(),\n+                ty::TyError => {\n+                    // Avoid ICE\n+                    return Err(false);\n+                }\n+                _ => bug!(\"{:?}\", ty.sty),\n             };\n             // This converts from LitKind::Int (which is sign extended) to\n             // Scalar::Bytes (which is zero extended)\n@@ -1182,14 +1190,14 @@ fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n             })\n         },\n         LitKind::Float(n, fty) => {\n-            parse_float(n, fty, neg)?\n+            parse_float(n, fty, neg).map_err(|_| true)?\n         }\n         LitKind::FloatUnsuffixed(n) => {\n             let fty = match ty.sty {\n                 ty::TyFloat(fty) => fty,\n                 _ => bug!()\n             };\n-            parse_float(n, fty, neg)?\n+            parse_float(n, fty, neg).map_err(|_| true)?\n         }\n         LitKind::Bool(b) => ConstValue::Scalar(Scalar::Bits {\n             bits: b as u128,"}, {"sha": "45fc571d79d56e8a83ebfc762a3793598932452f", "filename": "src/test/ui/return-match-array-const.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0195714836d1b2fb754452ad5fc400c7bfa3c9bc/src%2Ftest%2Fui%2Freturn-match-array-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0195714836d1b2fb754452ad5fc400c7bfa3c9bc/src%2Ftest%2Fui%2Freturn-match-array-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn-match-array-const.rs?ref=0195714836d1b2fb754452ad5fc400c7bfa3c9bc", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    [(); return match 0 { n => n }]; //~ ERROR: return statement outside of function body\n+\n+    [(); return match 0 { 0 => 0 }]; //~ ERROR: return statement outside of function body\n+\n+    [(); return match () { 'a' => 0, _ => 0 }]; //~ ERROR: return statement outside of function body\n+}"}, {"sha": "044dc8f51455f80d50b53e417ca12d4ad6efa525", "filename": "src/test/ui/return-match-array-const.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0195714836d1b2fb754452ad5fc400c7bfa3c9bc/src%2Ftest%2Fui%2Freturn-match-array-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0195714836d1b2fb754452ad5fc400c7bfa3c9bc/src%2Ftest%2Fui%2Freturn-match-array-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn-match-array-const.stderr?ref=0195714836d1b2fb754452ad5fc400c7bfa3c9bc", "patch": "@@ -0,0 +1,21 @@\n+error[E0572]: return statement outside of function body\n+  --> $DIR/return-match-array-const.rs:12:10\n+   |\n+LL |     [(); return match 0 { n => n }]; //~ ERROR: return statement outside of function body\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0572]: return statement outside of function body\n+  --> $DIR/return-match-array-const.rs:14:10\n+   |\n+LL |     [(); return match 0 { 0 => 0 }]; //~ ERROR: return statement outside of function body\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0572]: return statement outside of function body\n+  --> $DIR/return-match-array-const.rs:16:10\n+   |\n+LL |     [(); return match () { 'a' => 0, _ => 0 }]; //~ ERROR: return statement outside of function body\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0572`."}]}