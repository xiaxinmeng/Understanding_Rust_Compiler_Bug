{"sha": "4fcee62736b42449fd278058f10af74919b3019b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmY2VlNjI3MzZiNDI0NDlmZDI3ODA1OGYxMGFmNzQ5MTliMzAxOWI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-16T15:46:32Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-17T06:52:25Z"}, "message": "Rollup merge of #58509 - phansch:add_myself_to_clippy_toolstate_maintainers, r=oli-obk\n\nNotify myself when Clippy toolstate changes", "tree": {"sha": "f7a4ad2b479799e26307dde4b12ede33bbb01067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7a4ad2b479799e26307dde4b12ede33bbb01067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fcee62736b42449fd278058f10af74919b3019b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlxpBKkACgkQ/vbIBR0O\nATxVMBAAqwOb4Lo0StXxB2J0nlRtYNiyhdfCiTSdgrE9nGQ6wSrlBkJxfVHtas1A\nNR8fHI3LzTHAnG5pg20KmuivjzvkgndEp7nHkZSlwmmWOcDlmG/xb8OoupQvjxMZ\n2HgEfHj6fOT9L3CHwuhlW0JdsEBoVwm4ccQfgfeQonEl2v/2WIEKMyJl9x9VZld2\nB4mq/N3M2LOrp39pzbhUT0M0/WbzTrFl7YogOJisq0LfwPEYwfEemy4n1vk7xJ9+\nWmqobhkj3CCxXraUT+YEAMqkBFG0L2RNyOahAuOkaB/+70bcfKX4CWEZfql8gzip\nmawCZn6cpL88WHlctfu3OnpPutu7VxbfbsJnsst10HjPszRPP5120xOesQj9CBOg\nZTzTXYoP3FnGjcDv4Eou68vf++uaJGY+IEZd85VVJUDAmXqj35dxw8g74lsQySKs\nkmDmUULJ33mSWKMfJ6QsF8arYVKyrg3M/0Tlf42Dy/yoR83skd8EFGaHc8pu+5Sx\nuKH2zMG/73lTfph+BAGufhgLfFzDK44nxdIZHiqMxkiSbFAdUlmXl6YokTUExMOn\nXvw36pWGOzFbEPxPk7ofg7P3bTVZluiQmzUFF3/+Fg83L1Rpp0fNQFpoqFI9cjXV\ngA2sHQjq8RvD9z2Y76rEZ9oJX4Mo91src0uP9CGiV1FvZ1zpmhg=\n=o4ZL\n-----END PGP SIGNATURE-----", "payload": "tree f7a4ad2b479799e26307dde4b12ede33bbb01067\nparent 98f1865718048b4e4d493cc8ec34363288235ee5\nparent d6a98f4b3afeb2e793e96a6603d3c3aa7c5c4f37\nauthor kennytm <kennytm@gmail.com> 1550331992 +0800\ncommitter kennytm <kennytm@gmail.com> 1550386345 +0800\n\nRollup merge of #58509 - phansch:add_myself_to_clippy_toolstate_maintainers, r=oli-obk\n\nNotify myself when Clippy toolstate changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fcee62736b42449fd278058f10af74919b3019b", "html_url": "https://github.com/rust-lang/rust/commit/4fcee62736b42449fd278058f10af74919b3019b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fcee62736b42449fd278058f10af74919b3019b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f1865718048b4e4d493cc8ec34363288235ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f1865718048b4e4d493cc8ec34363288235ee5", "html_url": "https://github.com/rust-lang/rust/commit/98f1865718048b4e4d493cc8ec34363288235ee5"}, {"sha": "d6a98f4b3afeb2e793e96a6603d3c3aa7c5c4f37", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a98f4b3afeb2e793e96a6603d3c3aa7c5c4f37", "html_url": "https://github.com/rust-lang/rust/commit/d6a98f4b3afeb2e793e96a6603d3c3aa7c5c4f37"}], "stats": {"total": 399, "additions": 219, "deletions": 180}, "files": [{"sha": "f80293b182e97d93ba03ceb23d068301a9340288", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -112,6 +112,8 @@ ENV TARGETS=$TARGETS,thumbv7em-none-eabihf\n ENV TARGETS=$TARGETS,thumbv8m.main-none-eabi\n ENV TARGETS=$TARGETS,riscv32imc-unknown-none-elf\n ENV TARGETS=$TARGETS,riscv32imac-unknown-none-elf\n+ENV TARGETS=$TARGETS,riscv64imac-unknown-none-elf\n+ENV TARGETS=$TARGETS,riscv64gc-unknown-none-elf\n ENV TARGETS=$TARGETS,armebv7r-none-eabi\n ENV TARGETS=$TARGETS,armebv7r-none-eabihf\n ENV TARGETS=$TARGETS,armv7r-none-eabi"}, {"sha": "6f04a68a6ed614e5283152b7f59437e7699b042f", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -206,6 +206,10 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::adjustment::AutoBorrow\n     }\n }\n \n+impl_stable_hash_for!(tuple_struct ty::util::NeedsDrop { value });\n+\n+impl_stable_hash_for!(tuple_struct ty::AdtSizedConstraint<'tcx> { list });\n+\n impl_stable_hash_for!(struct ty::UpvarPath { hir_id });\n \n impl_stable_hash_for!(struct ty::UpvarId { var_path, closure_expr_id });"}, {"sha": "18dba3092ad5a5063e824b12c4ba125a8b45e7cf", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -43,7 +43,7 @@ use syntax::ast::{self, Name, Ident, NodeId};\n use syntax::attr;\n use syntax::ext::hygiene::Mark;\n use syntax::symbol::{keywords, Symbol, LocalInternedString, InternedString};\n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::Span;\n \n use smallvec;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -2379,20 +2379,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     /// Due to normalization being eager, this applies even if\n     /// the associated type is behind a pointer (e.g., issue #31299).\n     pub fn sized_constraint(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> &'tcx [Ty<'tcx>] {\n-        match tcx.try_adt_sized_constraint(DUMMY_SP, self.did) {\n-            Ok(tys) => tys,\n-            Err(mut bug) => {\n-                debug!(\"adt_sized_constraint: {:?} is recursive\", self);\n-                // This should be reported as an error by `check_representable`.\n-                //\n-                // Consider the type as Sized in the meanwhile to avoid\n-                // further errors. Delay our `bug` diagnostic here to get\n-                // emitted later as well in case we accidentally otherwise don't\n-                // emit an error.\n-                bug.delay_as_bug();\n-                tcx.intern_type_list(&[tcx.types.err])\n-            }\n-        }\n+        tcx.adt_sized_constraint(self.did).0\n     }\n \n     fn sized_constraint_for_ty(&self,\n@@ -3083,6 +3070,9 @@ fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Asso\n               parent_item.node)\n }\n \n+#[derive(Clone)]\n+pub struct AdtSizedConstraint<'tcx>(pub &'tcx [Ty<'tcx>]);\n+\n /// Calculates the `Sized` constraint.\n ///\n /// In fact, there are only a few options for the types in the constraint:\n@@ -3094,7 +3084,7 @@ fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Asso\n ///       check should catch this case.\n fn adt_sized_constraint<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                   def_id: DefId)\n-                                  -> &'tcx [Ty<'tcx>] {\n+                                  -> AdtSizedConstraint<'tcx> {\n     let def = tcx.adt_def(def_id);\n \n     let result = tcx.mk_type_list(def.variants.iter().flat_map(|v| {\n@@ -3105,7 +3095,7 @@ fn adt_sized_constraint<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     debug!(\"adt_sized_constraint: {:?} => {:?}\", def, result);\n \n-    result\n+    AdtSizedConstraint(result)\n }\n \n fn associated_item_def_ids<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "1870812893c14a4abdb6ea27c0c7e328cfd83a56", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -13,6 +13,7 @@ use crate::ty::subst::Substs;\n use crate::ty::query::queries;\n use crate::ty::query::Query;\n use crate::ty::query::QueryCache;\n+use crate::ty::query::plumbing::CycleError;\n use crate::util::profiling::ProfileCategory;\n \n use std::borrow::Cow;\n@@ -49,7 +50,7 @@ pub(super) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n         result: &Self::Value\n     ) -> Option<Fingerprint>;\n \n-    fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>) -> Self::Value;\n+    fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>, error: CycleError<'tcx>) -> Self::Value;\n }\n \n pub(super) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {"}, {"sha": "22211468412c1f1551d65b1df4457273de942327", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -73,30 +73,12 @@ impl<'tcx> QueryJob<'tcx> {\n     }\n \n     /// Awaits for the query job to complete.\n-    ///\n-    /// For single threaded rustc there's no concurrent jobs running, so if we are waiting for any\n-    /// query that means that there is a query cycle, thus this always running a cycle error.\n-    #[cfg(not(parallel_compiler))]\n-    #[inline(never)]\n-    #[cold]\n-    pub(super) fn cycle_error<'lcx, 'a, D: QueryDescription<'tcx>>(\n-        &self,\n-        tcx: TyCtxt<'_, 'tcx, 'lcx>,\n-        span: Span,\n-    ) -> TryGetJob<'a, 'tcx, D> {\n-        TryGetJob::JobCompleted(Err(Box::new(self.find_cycle_in_stack(tcx, span))))\n-    }\n-\n-    /// Awaits for the query job to complete.\n-    ///\n-    /// For single threaded rustc there's no concurrent jobs running, so if we are waiting for any\n-    /// query that means that there is a query cycle, thus this always running a cycle error.\n     #[cfg(parallel_compiler)]\n     pub(super) fn r#await<'lcx>(\n         &self,\n         tcx: TyCtxt<'_, 'tcx, 'lcx>,\n         span: Span,\n-    ) -> Result<(), Box<CycleError<'tcx>>> {\n+    ) -> Result<(), CycleError<'tcx>> {\n         tls::with_related_context(tcx, move |icx| {\n             let mut waiter = Lrc::new(QueryWaiter {\n                 query: icx.query.clone(),\n@@ -111,13 +93,13 @@ impl<'tcx> QueryJob<'tcx> {\n             let mut cycle = waiter.cycle.lock();\n             match cycle.take() {\n                 None => Ok(()),\n-                Some(cycle) => Err(Box::new(cycle))\n+                Some(cycle) => Err(cycle)\n             }\n         })\n     }\n \n     #[cfg(not(parallel_compiler))]\n-    fn find_cycle_in_stack<'lcx>(\n+    pub(super) fn find_cycle_in_stack<'lcx>(\n         &self,\n         tcx: TyCtxt<'_, 'tcx, 'lcx>,\n         span: Span,"}, {"sha": "740875109d02923b5ce508f5cf20b9c042b69af8", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -34,15 +34,15 @@ use crate::traits::query::normalize::NormalizationResult;\n use crate::traits::query::outlives_bounds::OutlivesBound;\n use crate::traits::specialization_graph;\n use crate::traits::Clauses;\n-use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt, AdtSizedConstraint};\n use crate::ty::steal::Steal;\n use crate::ty::subst::Substs;\n+use crate::ty::util::NeedsDrop;\n use crate::util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n use crate::util::common::{ErrorReported};\n use crate::util::profiling::ProfileCategory::*;\n use crate::session::Session;\n \n-use errors::DiagnosticBuilder;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -154,7 +154,16 @@ define_queries! { <'tcx>\n         [] fn trait_def: TraitDefOfItem(DefId) -> &'tcx ty::TraitDef,\n         [] fn adt_def: AdtDefOfItem(DefId) -> &'tcx ty::AdtDef,\n         [] fn adt_destructor: AdtDestructor(DefId) -> Option<ty::Destructor>,\n-        [] fn adt_sized_constraint: SizedConstraint(DefId) -> &'tcx [Ty<'tcx>],\n+\n+        // The cycle error here should be reported as an error by `check_representable`.\n+        // We consider the type as Sized in the meanwhile to avoid\n+        // further errors (done in impl Value for AdtSizedConstraint).\n+        // Use `cycle_delay_bug` to delay the cycle error here to be emitted later\n+        // in case we accidentally otherwise don't emit an error.\n+        [cycle_delay_bug] fn adt_sized_constraint: SizedConstraint(\n+            DefId\n+        ) -> AdtSizedConstraint<'tcx>,\n+\n         [] fn adt_dtorck_constraint: DtorckConstraint(\n             DefId\n         ) -> Result<DtorckConstraint<'tcx>, NoSolution>,\n@@ -411,7 +420,16 @@ define_queries! { <'tcx>\n         [] fn is_copy_raw: is_copy_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n         [] fn is_sized_raw: is_sized_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n         [] fn is_freeze_raw: is_freeze_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n-        [] fn needs_drop_raw: needs_drop_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n+\n+        // The cycle error here should be reported as an error by `check_representable`.\n+        // We consider the type as not needing drop in the meanwhile to avoid\n+        // further errors (done in impl Value for NeedsDrop).\n+        // Use `cycle_delay_bug` to delay the cycle error here to be emitted later\n+        // in case we accidentally otherwise don't emit an error.\n+        [cycle_delay_bug] fn needs_drop_raw: needs_drop_dep_node(\n+            ty::ParamEnvAnd<'tcx, Ty<'tcx>>\n+        ) -> NeedsDrop,\n+\n         [] fn layout_raw: layout_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                                     -> Result<&'tcx ty::layout::LayoutDetails,\n                                                 ty::layout::LayoutError<'tcx>>,\n@@ -731,32 +749,6 @@ define_queries! { <'tcx>\n     },\n }\n \n-// `try_get_query` can't be public because it uses the private query\n-// implementation traits, so we provide access to it selectively.\n-impl<'a, 'tcx, 'lcx> TyCtxt<'a, 'tcx, 'lcx> {\n-    pub fn try_adt_sized_constraint(\n-        self,\n-        span: Span,\n-        key: DefId,\n-    ) -> Result<&'tcx [Ty<'tcx>], Box<DiagnosticBuilder<'a>>> {\n-        self.try_get_query::<queries::adt_sized_constraint<'_>>(span, key)\n-    }\n-    pub fn try_needs_drop_raw(\n-        self,\n-        span: Span,\n-        key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n-    ) -> Result<bool, Box<DiagnosticBuilder<'a>>> {\n-        self.try_get_query::<queries::needs_drop_raw<'_>>(span, key)\n-    }\n-    pub fn try_optimized_mir(\n-        self,\n-        span: Span,\n-        key: DefId,\n-    ) -> Result<&'tcx mir::Mir<'tcx>, Box<DiagnosticBuilder<'a>>> {\n-        self.try_get_query::<queries::optimized_mir<'_>>(span, key)\n-    }\n-}\n-\n //////////////////////////////////////////////////////////////////////\n // These functions are little shims used to find the dep-node for a\n // given query when there is not a *direct* mapping:"}, {"sha": "37cb6753ed5b211e2e52197aed00ebc3aeeaee7b", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 44, "deletions": 65, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -19,6 +19,8 @@ use errors::FatalError;\n use rustc_data_structures::fx::{FxHashMap};\n use rustc_data_structures::sync::{Lrc, Lock};\n use rustc_data_structures::thin_vec::ThinVec;\n+#[cfg(not(parallel_compiler))]\n+use rustc_data_structures::cold_path;\n use std::mem;\n use std::ptr;\n use std::collections::hash_map::Entry;\n@@ -114,7 +116,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             if let Some(value) = lock.results.get(key) {\n                 profq_msg!(tcx, ProfileQueriesMsg::CacheHit);\n                 tcx.sess.profiler(|p| p.record_query_hit(Q::NAME, Q::CATEGORY));\n-                let result = Ok((value.value.clone(), value.index));\n+                let result = (value.value.clone(), value.index);\n                 #[cfg(debug_assertions)]\n                 {\n                     lock.cache_hits += 1;\n@@ -160,9 +162,11 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             mem::drop(lock);\n \n             // If we are single-threaded we know that we have cycle error,\n-            // so we just turn the errror\n+            // so we just return the error\n             #[cfg(not(parallel_compiler))]\n-            return job.cycle_error(tcx, span);\n+            return TryGetJob::Cycle(cold_path(|| {\n+                Q::handle_cycle_error(tcx, job.find_cycle_in_stack(tcx, span))\n+            }));\n \n             // With parallel queries we might just have to wait on some other\n             // thread\n@@ -172,7 +176,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n                 tcx.sess.profiler(|p| p.query_blocked_end(Q::NAME, Q::CATEGORY));\n \n                 if let Err(cycle) = result {\n-                    return TryGetJob::JobCompleted(Err(cycle));\n+                    return TryGetJob::Cycle(Q::handle_cycle_error(tcx, cycle));\n                 }\n             }\n         }\n@@ -238,7 +242,10 @@ pub(super) enum TryGetJob<'a, 'tcx: 'a, D: QueryDescription<'tcx> + 'a> {\n     /// The query was already completed.\n     /// Returns the result of the query and its dep node index\n     /// if it succeeded or a cycle error if it failed\n-    JobCompleted(Result<(D::Value, DepNodeIndex), Box<CycleError<'tcx>>>),\n+    JobCompleted((D::Value, DepNodeIndex)),\n+\n+    /// Trying to execute the query resulted in a cycle.\n+    Cycle(D::Value),\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n@@ -279,8 +286,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     #[cold]\n     pub(super) fn report_cycle(\n         self,\n-        box CycleError { usage, cycle: stack }: Box<CycleError<'gcx>>\n-    ) -> Box<DiagnosticBuilder<'a>>\n+        CycleError { usage, cycle: stack }: CycleError<'gcx>\n+    ) -> DiagnosticBuilder<'a>\n     {\n         assert!(!stack.is_empty());\n \n@@ -314,7 +321,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                               &format!(\"cycle used when {}\", query.describe(self)));\n             }\n \n-            return Box::new(err)\n+            err\n         })\n     }\n \n@@ -346,13 +353,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline(never)]\n-    fn try_get_with<Q: QueryDescription<'gcx>>(\n+    pub(super) fn get_query<Q: QueryDescription<'gcx>>(\n         self,\n         span: Span,\n         key: Q::Key)\n-    -> Result<Q::Value, Box<CycleError<'gcx>>>\n-    {\n-        debug!(\"ty::queries::{}::try_get_with(key={:?}, span={:?})\",\n+    -> Q::Value {\n+        debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\",\n                Q::NAME,\n                key,\n                span);\n@@ -366,19 +372,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         let job = match JobOwner::try_get(self, span, &key) {\n             TryGetJob::NotYetStarted(job) => job,\n-            TryGetJob::JobCompleted(result) => {\n-                return result.map(|(v, index)| {\n-                    self.dep_graph.read_index(index);\n-                    v\n-                })\n+            TryGetJob::Cycle(result) => return result,\n+            TryGetJob::JobCompleted((v, index)) => {\n+                self.dep_graph.read_index(index);\n+                return v\n             }\n         };\n \n         // Fast path for when incr. comp. is off. `to_dep_node` is\n         // expensive for some DepKinds.\n         if !self.dep_graph.is_fully_enabled() {\n             let null_dep_node = DepNode::new_no_params(crate::dep_graph::DepKind::Null);\n-            return Ok(self.force_query_with_job::<Q>(key, job, null_dep_node).0);\n+            return self.force_query_with_job::<Q>(key, job, null_dep_node).0;\n         }\n \n         let dep_node = Q::to_dep_node(self, &key);\n@@ -407,7 +412,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n             job.complete(&result, dep_node_index);\n \n-            return Ok(result);\n+            return result;\n         }\n \n         if !dep_node.kind.is_input() {\n@@ -427,13 +432,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             });\n             if let Some((result, dep_node_index)) = loaded {\n                 job.complete(&result, dep_node_index);\n-                return Ok(result);\n+                return result;\n             }\n         }\n \n         let (result, dep_node_index) = self.force_query_with_job::<Q>(key, job, dep_node);\n         self.dep_graph.read_index(dep_node_index);\n-        Ok(result)\n+        result\n     }\n \n     fn load_from_disk_and_cache_in_memory<Q: QueryDescription<'gcx>>(\n@@ -631,57 +636,28 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Ensure that only one of them runs the query\n         let job = match JobOwner::try_get(self, span, &key) {\n             TryGetJob::NotYetStarted(job) => job,\n-            TryGetJob::JobCompleted(result) => {\n-                if let Err(e) = result {\n-                    self.report_cycle(e).emit();\n-                }\n+            TryGetJob::Cycle(_) |\n+            TryGetJob::JobCompleted(_) => {\n                 return\n             }\n         };\n         self.force_query_with_job::<Q>(key, job, dep_node);\n     }\n-\n-    pub(super) fn try_get_query<Q: QueryDescription<'gcx>>(\n-        self,\n-        span: Span,\n-        key: Q::Key,\n-    ) -> Result<Q::Value, Box<DiagnosticBuilder<'a>>> {\n-        match self.try_get_with::<Q>(span, key) {\n-            Ok(e) => Ok(e),\n-            Err(e) => Err(self.report_cycle(e)),\n-        }\n-    }\n-\n-    // FIXME: Try uninlining this\n-    #[inline(always)]\n-    pub(super) fn get_query<Q: QueryDescription<'gcx>>(\n-        self,\n-        span: Span,\n-        key: Q::Key,\n-    ) -> Q::Value {\n-        self.try_get_with::<Q>(span, key).unwrap_or_else(|e| {\n-            self.emit_error::<Q>(e)\n-        })\n-    }\n-\n-    #[inline(never)]\n-    #[cold]\n-    fn emit_error<Q: QueryDescription<'gcx>>(\n-        self,\n-        e: Box<CycleError<'gcx>>,\n-    ) -> Q::Value {\n-        self.report_cycle(e).emit();\n-        Q::handle_cycle_error(self)\n-    }\n }\n \n macro_rules! handle_cycle_error {\n-    ([][$this: expr]) => {{\n-        Value::from_cycle_error($this.global_tcx())\n+    ([][$tcx: expr, $error:expr]) => {{\n+        $tcx.report_cycle($error).emit();\n+        Value::from_cycle_error($tcx.global_tcx())\n+    }};\n+    ([fatal_cycle$(, $modifiers:ident)*][$tcx:expr, $error:expr]) => {{\n+        $tcx.report_cycle($error).emit();\n+        $tcx.sess.abort_if_errors();\n+        unreachable!()\n     }};\n-    ([fatal_cycle$(, $modifiers:ident)*][$this:expr]) => {{\n-        $this.sess.abort_if_errors();\n-        unreachable!();\n+    ([cycle_delay_bug$(, $modifiers:ident)*][$tcx:expr, $error:expr]) => {{\n+        $tcx.report_cycle($error).delay_as_bug();\n+        Value::from_cycle_error($tcx.global_tcx())\n     }};\n     ([$other:ident$(, $modifiers:ident)*][$($args:tt)*]) => {\n         handle_cycle_error!([$($modifiers),*][$($args)*])\n@@ -995,8 +971,11 @@ macro_rules! define_queries_inner {\n                 hash_result!([$($modifiers)*][_hcx, _result])\n             }\n \n-            fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>) -> Self::Value {\n-                handle_cycle_error!([$($modifiers)*][tcx])\n+            fn handle_cycle_error(\n+                tcx: TyCtxt<'_, 'tcx, '_>,\n+                error: CycleError<'tcx>\n+            ) -> Self::Value {\n+                handle_cycle_error!([$($modifiers)*][tcx, error])\n             }\n         })*\n "}, {"sha": "a4b8d365a12ef3b01c2e449973147a0bf9474d2b", "filename": "src/librustc/ty/query/values.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -1,4 +1,5 @@\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt, AdtSizedConstraint};\n+use crate::ty::util::NeedsDrop;\n \n use syntax::symbol::Symbol;\n \n@@ -31,3 +32,14 @@ impl<'tcx> Value<'tcx> for ty::SymbolName {\n     }\n }\n \n+impl<'tcx> Value<'tcx> for NeedsDrop {\n+    fn from_cycle_error(_: TyCtxt<'_, 'tcx, 'tcx>) -> Self {\n+        NeedsDrop(false)\n+    }\n+}\n+\n+impl<'tcx> Value<'tcx> for AdtSizedConstraint<'tcx> {\n+    fn from_cycle_error(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> Self {\n+        AdtSizedConstraint(tcx.intern_type_list(&[tcx.types.err]))\n+    }\n+}"}, {"sha": "1ba7c3bba797ce29568e4dd0ae4a418ff8057ac5", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -755,7 +755,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                       tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                       param_env: ty::ParamEnv<'tcx>)\n                       -> bool {\n-        tcx.needs_drop_raw(param_env.and(self))\n+        tcx.needs_drop_raw(param_env.and(self)).0\n     }\n \n     pub fn same_type(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n@@ -992,29 +992,22 @@ fn is_freeze_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ))\n }\n \n+#[derive(Clone)]\n+pub struct NeedsDrop(pub bool);\n+\n fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n-                            -> bool\n+                            -> NeedsDrop\n {\n     let (param_env, ty) = query.into_parts();\n \n     let needs_drop = |ty: Ty<'tcx>| -> bool {\n-        tcx.try_needs_drop_raw(DUMMY_SP, param_env.and(ty)).unwrap_or_else(|mut bug| {\n-            // Cycles should be reported as an error by `check_representable`.\n-            //\n-            // Consider the type as not needing drop in the meanwhile to\n-            // avoid further errors.\n-            //\n-            // In case we forgot to emit a bug elsewhere, delay our\n-            // diagnostic to get emitted as a compiler bug.\n-            bug.delay_as_bug();\n-            false\n-        })\n+        tcx.needs_drop_raw(param_env.and(ty)).0\n     };\n \n     assert!(!ty.needs_infer());\n \n-    match ty.sty {\n+    NeedsDrop(match ty.sty {\n         // Fast-path for primitive types\n         ty::Infer(ty::FreshIntTy(_)) | ty::Infer(ty::FreshFloatTy(_)) |\n         ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Never |\n@@ -1072,7 +1065,7 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             def.variants.iter().any(\n                 |variant| variant.fields.iter().any(\n                     |field| needs_drop(field.ty(tcx, substs)))),\n-    }\n+    })\n }\n \n pub enum ExplicitSelf<'tcx> {"}, {"sha": "2bfb1b24a81b9629c4a7dbb524f6ae4344ede066", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -41,6 +41,12 @@ extern crate rustc_cratesio_shim;\n \n pub use rustc_serialize::hex::ToHex;\n \n+#[inline(never)]\n+#[cold]\n+pub fn cold_path<F: FnOnce() -> R, R>(f: F) -> R {\n+      f()\n+}\n+\n #[macro_export]\n macro_rules! likely {\n       ($e:expr) => {"}, {"sha": "07ebbf6d0ebe37233d4a841a468d07c8750ebddd", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -98,22 +98,34 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     continue;\n                 }\n \n-                let callee_mir = match self.tcx.try_optimized_mir(callsite.location.span,\n-                                                                  callsite.callee) {\n-                    Ok(callee_mir) if self.consider_optimizing(callsite, callee_mir) => {\n-                        self.tcx.subst_and_normalize_erasing_regions(\n-                            &callsite.substs,\n-                            param_env,\n-                            callee_mir,\n-                        )\n+                let self_node_id = self.tcx.hir().as_local_node_id(self.source.def_id()).unwrap();\n+                let callee_node_id = self.tcx.hir().as_local_node_id(callsite.callee);\n+\n+                let callee_mir = if let Some(callee_node_id) = callee_node_id {\n+                    // Avoid a cycle here by only using `optimized_mir` only if we have\n+                    // a lower node id than the callee. This ensures that the callee will\n+                    // not inline us. This trick only works without incremental compilation.\n+                    // So don't do it if that is enabled.\n+                    if !self.tcx.dep_graph.is_fully_enabled()\n+                        && self_node_id.as_u32() < callee_node_id.as_u32() {\n+                        self.tcx.optimized_mir(callsite.callee)\n+                    } else {\n+                        continue;\n                     }\n-                    Ok(_) => continue,\n+                } else {\n+                    // This cannot result in a cycle since the callee MIR is from another crate\n+                    // and is already optimized.\n+                    self.tcx.optimized_mir(callsite.callee)\n+                };\n \n-                    Err(mut bug) => {\n-                        // FIXME(#43542) shouldn't have to cancel an error\n-                        bug.cancel();\n-                        continue\n-                    }\n+                let callee_mir = if self.consider_optimizing(callsite, callee_mir) {\n+                    self.tcx.subst_and_normalize_erasing_regions(\n+                        &callsite.substs,\n+                        param_env,\n+                        callee_mir,\n+                    )\n+                } else {\n+                    continue;\n                 };\n \n                 let start = caller_mir.basic_blocks().len();"}, {"sha": "7cbf24402d7422035976b800c96c9192aa43838c", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -451,6 +451,8 @@ supported_targets! {\n \n     (\"riscv32imc-unknown-none-elf\", riscv32imc_unknown_none_elf),\n     (\"riscv32imac-unknown-none-elf\", riscv32imac_unknown_none_elf),\n+    (\"riscv64imac-unknown-none-elf\", riscv64imac_unknown_none_elf),\n+    (\"riscv64gc-unknown-none-elf\", riscv64gc_unknown_none_elf),\n \n     (\"aarch64-unknown-none\", aarch64_unknown_none),\n "}, {"sha": "2d4070c786fed8679728968120555d3619518f8e", "filename": "src/librustc_target/spec/riscv64gc_unknown_none_elf.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -0,0 +1,31 @@\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy,\n+           Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n+        llvm_target: \"riscv64\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"unknown\".to_string(),\n+        arch: \"riscv64\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+\n+        options: TargetOptions {\n+            linker: Some(\"rust-lld\".to_string()),\n+            cpu: \"generic-rv64\".to_string(),\n+            max_atomic_width: Some(64),\n+            atomic_cas: true,\n+            features: \"+m,+a,+f,+d,+c\".to_string(),\n+            executables: true,\n+            panic_strategy: PanicStrategy::Abort,\n+            relocation_model: \"static\".to_string(),\n+            emit_debug_gdb_scripts: false,\n+            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            .. Default::default()\n+        },\n+    })\n+}"}, {"sha": "f2e152c741e02c4af7b0af8b40082e456c8dbab0", "filename": "src/librustc_target/spec/riscv64imac_unknown_none_elf.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -0,0 +1,31 @@\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy,\n+           Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n+        llvm_target: \"riscv64\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"unknown\".to_string(),\n+        arch: \"riscv64\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+\n+        options: TargetOptions {\n+            linker: Some(\"rust-lld\".to_string()),\n+            cpu: \"generic-rv64\".to_string(),\n+            max_atomic_width: Some(64),\n+            atomic_cas: true,\n+            features: \"+m,+a,+c\".to_string(),\n+            executables: true,\n+            panic_strategy: PanicStrategy::Abort,\n+            relocation_model: \"static\".to_string(),\n+            emit_debug_gdb_scripts: false,\n+            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            .. Default::default()\n+        },\n+    })\n+}"}, {"sha": "73a75d35b9776d56160fa3200aca4a970ae49b60", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -1 +1 @@\n-Subproject commit 683d3522690b7a9d0163e7e7e6586f2b1364ed02\n+Subproject commit 73a75d35b9776d56160fa3200aca4a970ae49b60"}, {"sha": "b545500371936cf152af686da5433f791548d608", "filename": "src/test/mir-opt/inline-any-operand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Ftest%2Fmir-opt%2Finline-any-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Ftest%2Fmir-opt%2Finline-any-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-any-operand.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -6,16 +6,16 @@ fn main() {\n     println!(\"{}\", bar());\n }\n \n-#[inline(always)]\n-fn foo(x: i32, y: i32) -> bool {\n-    x == y\n-}\n-\n fn bar() -> bool {\n     let f = foo;\n     f(1, -1)\n }\n \n+#[inline(always)]\n+fn foo(x: i32, y: i32) -> bool {\n+    x == y\n+}\n+\n // END RUST SOURCE\n // START rustc.bar.Inline.after.mir\n // ..."}, {"sha": "6cdbcfdb0add731d3f89e7858c597f6c0217a7cb", "filename": "src/test/mir-opt/inline-retag.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Ftest%2Fmir-opt%2Finline-retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Ftest%2Fmir-opt%2Finline-retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-retag.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -6,16 +6,16 @@ fn main() {\n     println!(\"{}\", bar());\n }\n \n-#[inline(always)]\n-fn foo(x: &i32, y: &i32) -> bool {\n-    *x == *y\n-}\n-\n fn bar() -> bool {\n     let f = foo;\n     f(&1, &-1)\n }\n \n+#[inline(always)]\n+fn foo(x: &i32, y: &i32) -> bool {\n+    *x == *y\n+}\n+\n // END RUST SOURCE\n // START rustc.bar.Inline.after.mir\n // ..."}, {"sha": "8f9f2535aa5f8c6ddd8f84adb5ec003ca00fb7d8", "filename": "src/test/mir-opt/inline-trait-method_2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Ftest%2Fmir-opt%2Finline-trait-method_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Ftest%2Fmir-opt%2Finline-trait-method_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-trait-method_2.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -1,14 +1,14 @@\n // compile-flags: -Z span_free_formats -Z mir-opt-level=3\n \n+fn test2(x: &dyn X) -> bool {\n+    test(x)\n+}\n+\n #[inline]\n fn test(x: &dyn X) -> bool {\n     x.y()\n }\n \n-fn test2(x: &dyn X) -> bool {\n-    test(x)\n-}\n-\n trait X {\n     fn y(&self) -> bool {\n         false"}, {"sha": "8d87c404d0b283ee112e7bbd279760cdefc36e6a", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -85,6 +85,8 @@ static TARGETS: &'static [&'static str] = &[\n     \"powerpc64le-unknown-linux-gnu\",\n     \"riscv32imc-unknown-none-elf\",\n     \"riscv32imac-unknown-none-elf\",\n+    \"riscv64imac-unknown-none-elf\",\n+    \"riscv64gc-unknown-none-elf\",\n     \"s390x-unknown-linux-gnu\",\n     \"sparc64-unknown-linux-gnu\",\n     \"sparcv9-sun-solaris\","}, {"sha": "3688812fe0a6e5898ef54575e47042b360c5902f", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fcee62736b42449fd278058f10af74919b3019b/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/4fcee62736b42449fd278058f10af74919b3019b/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=4fcee62736b42449fd278058f10af74919b3019b", "patch": "@@ -15,7 +15,7 @@\n # List of people to ping when the status of a tool changed.\n MAINTAINERS = {\n     'miri': '@oli-obk @RalfJung @eddyb',\n-    'clippy-driver': '@Manishearth @llogiq @mcarton @oli-obk',\n+    'clippy-driver': '@Manishearth @llogiq @mcarton @oli-obk @phansch',\n     'rls': '@nrc @Xanewok',\n     'rustfmt': '@nrc @topecongiro',\n     'book': '@carols10cents @steveklabnik',"}]}