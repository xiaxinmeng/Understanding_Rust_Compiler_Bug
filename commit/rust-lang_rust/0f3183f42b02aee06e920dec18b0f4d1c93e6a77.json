{"sha": "0f3183f42b02aee06e920dec18b0f4d1c93e6a77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMzE4M2Y0MmIwMmFlZTA2ZTkyMGRlYzE4YjBmNGQxYzkzZTZhNzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-07T18:08:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T00:54:34Z"}, "message": "rustdoc: Don't duplicate inlined impl blocks\n\nCloses #21474", "tree": {"sha": "56ccbe0bb41163c2300892f8131f00ab0c9b40c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56ccbe0bb41163c2300892f8131f00ab0c9b40c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f3183f42b02aee06e920dec18b0f4d1c93e6a77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3183f42b02aee06e920dec18b0f4d1c93e6a77", "html_url": "https://github.com/rust-lang/rust/commit/0f3183f42b02aee06e920dec18b0f4d1c93e6a77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f3183f42b02aee06e920dec18b0f4d1c93e6a77/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec412c2a94cec88f7c9d4bbdd793c3407c6871f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec412c2a94cec88f7c9d4bbdd793c3407c6871f7", "html_url": "https://github.com/rust-lang/rust/commit/ec412c2a94cec88f7c9d4bbdd793c3407c6871f7"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "6ed6626d64c01b2c91a93cdb4c240662336c4a3e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f3183f42b02aee06e920dec18b0f4d1c93e6a77/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3183f42b02aee06e920dec18b0f4d1c93e6a77/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=0f3183f42b02aee06e920dec18b0f4d1c93e6a77", "patch": "@@ -12,6 +12,7 @@\n //! usable for clean\n \n use std::collections::HashSet;\n+use std::mem;\n \n use syntax::abi;\n use syntax::ast;\n@@ -40,6 +41,7 @@ pub struct RustdocVisitor<'a, 'tcx: 'a> {\n     pub cx: &'a core::DocContext<'tcx>,\n     pub analysis: Option<&'a core::CrateAnalysis>,\n     view_item_stack: HashSet<ast::NodeId>,\n+    inlining_from_glob: bool,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -54,6 +56,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             cx: cx,\n             analysis: analysis,\n             view_item_stack: stack,\n+            inlining_from_glob: false,\n         }\n     }\n \n@@ -209,6 +212,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let ret = match tcx.map.get(def.node) {\n             ast_map::NodeItem(it) => {\n                 if glob {\n+                    let prev = mem::replace(&mut self.inlining_from_glob, true);\n                     match it.node {\n                         ast::ItemMod(ref m) => {\n                             for i in &m.items {\n@@ -218,6 +222,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         ast::ItemEnum(..) => {}\n                         _ => { panic!(\"glob not mapped to a module or enum\"); }\n                     }\n+                    self.inlining_from_glob = prev;\n                 } else {\n                     self.visit_item(it, renamed, om);\n                 }\n@@ -356,7 +361,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     vis: item.vis,\n                     stab: self.stability(item.id),\n                 };\n-                om.impls.push(i);\n+                // Don't duplicate impls when inlining glob imports, we'll pick\n+                // them up regardless of where they're located.\n+                if !self.inlining_from_glob {\n+                    om.impls.push(i);\n+                }\n             },\n             ast::ItemDefaultImpl(unsafety, ref trait_ref) => {\n                 let i = DefaultImpl {\n@@ -366,7 +375,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                 };\n-                om.def_traits.push(i);\n+                // see comment above about ItemImpl\n+                if !self.inlining_from_glob {\n+                    om.def_traits.push(i);\n+                }\n             }\n             ast::ItemForeignMod(ref fm) => {\n                 om.foreigns.push(fm.clone());"}, {"sha": "36f160acf1cf86fa53e33631241361465682580f", "filename": "src/test/rustdoc/issue-21474.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0f3183f42b02aee06e920dec18b0f4d1c93e6a77/src%2Ftest%2Frustdoc%2Fissue-21474.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3183f42b02aee06e920dec18b0f4d1c93e6a77/src%2Ftest%2Frustdoc%2Fissue-21474.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-21474.rs?ref=0f3183f42b02aee06e920dec18b0f4d1c93e6a77", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use inner::*;\n+\n+mod inner {\n+    impl super::Blah for super::What { }\n+}\n+\n+pub trait Blah { }\n+\n+// @count issue_21474/struct.What.html \\\n+//        '//*[@class=\"impl\"]' 1\n+pub struct What;"}]}