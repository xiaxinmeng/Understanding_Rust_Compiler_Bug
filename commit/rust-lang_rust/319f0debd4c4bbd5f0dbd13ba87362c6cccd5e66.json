{"sha": "319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOWYwZGViZDRjNGJiZDVmMGRiZDEzYmE4NzM2MmM2Y2NjZDVlNjY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-09T22:40:05Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-10T10:48:17Z"}, "message": "resolve: Address FIXME from the previous commit\n\nMake the `is_import` flag in `ScopeSet` independent from namespace\nFix rebase", "tree": {"sha": "196041ea3bd88ba5be92a406a53d3ba6a40a24bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/196041ea3bd88ba5be92a406a53d3ba6a40a24bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66", "html_url": "https://github.com/rust-lang/rust/commit/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cc8133973d42abe273bb1d6b8a9e30fdae5f0c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc8133973d42abe273bb1d6b8a9e30fdae5f0c9", "html_url": "https://github.com/rust-lang/rust/commit/8cc8133973d42abe273bb1d6b8a9e30fdae5f0c9"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "e786e1020026a151713eab5029f4543765642d56", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::{self, PrimTy, Bool, Char, Float, Int, Uint, Str};\n use rustc::middle::cstore::CrateStore;\n use rustc::session::Session;\n use rustc::lint;\n-use rustc::hir::def::{self, DefKind, PartialRes, CtorOf, NonMacroAttrKind, ExportMap};\n+use rustc::hir::def::{self, DefKind, PartialRes, CtorKind, CtorOf, NonMacroAttrKind, ExportMap};\n use rustc::hir::def::Namespace::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::hir::{TraitMap, GlobMap};\n@@ -37,7 +37,7 @@ use syntax::visit::{self, Visitor};\n use syntax::attr;\n use syntax::ast::{CRATE_NODE_ID, Crate};\n use syntax::ast::{ItemKind, Path};\n-use syntax::{span_err, struct_span_err, unwrap_or};\n+use syntax::{struct_span_err, unwrap_or};\n \n use syntax_pos::{Span, DUMMY_SP};\n use errors::{Applicability, DiagnosticBuilder};\n@@ -110,10 +110,12 @@ enum Scope<'a> {\n /// This enum is currently used only for early resolution (imports and macros),\n /// but not for late resolution yet.\n enum ScopeSet {\n-    Import(Namespace),\n+    /// All scopes with the given namespace.\n+    All(Namespace, /*is_import*/ bool),\n+    /// Crate root, then extern prelude (used for mixed 2015-2018 mode in macros).\n     AbsolutePath(Namespace),\n+    /// All scopes with macro namespace and the given macro kind restriction.\n     Macro(MacroKind),\n-    Module,\n }\n \n /// Everything you need to know about a name's location to resolve it.\n@@ -1330,10 +1332,9 @@ impl<'a> Resolver<'a> {\n \n         let rust_2015 = ident.span.rust_2015();\n         let (ns, is_absolute_path) = match scope_set {\n-            ScopeSet::Import(ns) => (ns, false),\n+            ScopeSet::All(ns, _) => (ns, false),\n             ScopeSet::AbsolutePath(ns) => (ns, true),\n             ScopeSet::Macro(_) => (MacroNS, false),\n-            ScopeSet::Module => (TypeNS, false),\n         };\n         let mut scope = match ns {\n             _ if is_absolute_path => Scope::CrateRoot,\n@@ -1858,9 +1859,7 @@ impl<'a> Resolver<'a> {\n                     module, ident, ns, parent_scope, record_used, path_span\n                 )\n             } else if ribs.is_none() || opt_ns.is_none() || opt_ns == Some(MacroNS) {\n-                // FIXME: Decouple the import property from `ScopeSet`.\n-                let is_import = opt_ns.is_none() || ns != TypeNS;\n-                let scopes = if is_import { ScopeSet::Import(ns) } else { ScopeSet::Module };\n+                let scopes = ScopeSet::All(ns, opt_ns.is_none());\n                 self.early_resolve_ident_in_lexical_scope(ident, scopes, parent_scope, record_used,\n                                                           record_used, path_span)\n             } else {"}, {"sha": "5af71a0170a7bb7fcee36d41b33baa645418a655", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66", "patch": "@@ -374,8 +374,7 @@ impl<'a> Resolver<'a> {\n             self.prohibit_imported_non_macro_attrs(None, res.ok(), path_span);\n             res\n         } else {\n-            // Macro without a specific kind restriction is equvalent to a macro import.\n-            let scope_set = kind.map_or(ScopeSet::Import(MacroNS), ScopeSet::Macro);\n+            let scope_set = kind.map_or(ScopeSet::All(MacroNS, false), ScopeSet::Macro);\n             let binding = self.early_resolve_ident_in_lexical_scope(\n                 path[0].ident, scope_set, parent_scope, false, force, path_span\n             );\n@@ -430,10 +429,9 @@ impl<'a> Resolver<'a> {\n         }\n \n         let (ns, macro_kind, is_import) = match scope_set {\n-            ScopeSet::Import(ns) => (ns, None, true),\n+            ScopeSet::All(ns, is_import) => (ns, None, is_import),\n             ScopeSet::AbsolutePath(ns) => (ns, None, false),\n             ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),\n-            ScopeSet::Module => (TypeNS, None, false),\n         };\n \n         // This is *the* result, resolution from the scope closest to the resolved identifier."}, {"sha": "00e89f0fdae0a7058a79d47425ff58c96d0dd9b9", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66", "patch": "@@ -232,8 +232,9 @@ impl<'a> Resolver<'a> {\n                     }\n                 }\n \n+                let scopes = ScopeSet::All(ns, true);\n                 let binding = self.early_resolve_ident_in_lexical_scope(\n-                    ident, ScopeSet::Import(ns), parent_scope, record_used, record_used, path_span\n+                    ident, scopes, parent_scope, record_used, record_used, path_span\n                 );\n                 return binding.map_err(|determinacy| (determinacy, Weak::No));\n             }\n@@ -1217,7 +1218,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n             match this.early_resolve_ident_in_lexical_scope(\n                 target,\n-                ScopeSet::Import(ns),\n+                ScopeSet::All(ns, false),\n                 &directive.parent_scope,\n                 false,\n                 false,"}, {"sha": "d2fb7c7a9e69d47ee5b77be962d0c35816aa4e43", "filename": "src/test/ui/resolve/resolve-bad-visibility.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-visibility.stderr?ref=319f0debd4c4bbd5f0dbd13ba87362c6cccd5e66", "patch": "@@ -16,17 +16,17 @@ error: visibilities can only be restricted to ancestor modules\n LL | pub(in std::vec) struct F;\n    |        ^^^^^^^^\n \n-error[E0433]: failed to resolve: maybe a missing `extern crate nonexistent;`?\n+error[E0433]: failed to resolve: maybe a missing crate `nonexistent`?\n   --> $DIR/resolve-bad-visibility.rs:7:8\n    |\n LL | pub(in nonexistent) struct G;\n-   |        ^^^^^^^^^^^ maybe a missing `extern crate nonexistent;`?\n+   |        ^^^^^^^^^^^ maybe a missing crate `nonexistent`?\n \n-error[E0433]: failed to resolve: maybe a missing `extern crate too_soon;`?\n+error[E0433]: failed to resolve: maybe a missing crate `too_soon`?\n   --> $DIR/resolve-bad-visibility.rs:8:8\n    |\n LL | pub(in too_soon) struct H;\n-   |        ^^^^^^^^ maybe a missing `extern crate too_soon;`?\n+   |        ^^^^^^^^ maybe a missing crate `too_soon`?\n \n error: aborting due to 5 previous errors\n "}]}