{"sha": "8f5585ac00af80c55467135b9437c871445179a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNTU4NWFjMDBhZjgwYzU1NDY3MTM1Yjk0MzdjODcxNDQ1MTc5YTU=", "commit": {"author": {"name": "hamidreza kalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-05-10T01:23:42Z"}, "committer": {"name": "hamidreza kalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-05-10T01:23:42Z"}, "message": "remove big match", "tree": {"sha": "a61b57a844c0ca511812c9d50dfb2fc1f773598a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a61b57a844c0ca511812c9d50dfb2fc1f773598a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f5585ac00af80c55467135b9437c871445179a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5585ac00af80c55467135b9437c871445179a5", "html_url": "https://github.com/rust-lang/rust/commit/8f5585ac00af80c55467135b9437c871445179a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f5585ac00af80c55467135b9437c871445179a5/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48f5f01e8bb874b789821dba4d18d5930ec33172", "url": "https://api.github.com/repos/rust-lang/rust/commits/48f5f01e8bb874b789821dba4d18d5930ec33172", "html_url": "https://github.com/rust-lang/rust/commit/48f5f01e8bb874b789821dba4d18d5930ec33172"}], "stats": {"total": 111, "additions": 48, "deletions": 63}, "files": [{"sha": "85c5ee717481f12a9c38394ea7c837034fcb5bdd", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 48, "deletions": 63, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/8f5585ac00af80c55467135b9437c871445179a5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5585ac00af80c55467135b9437c871445179a5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=8f5585ac00af80c55467135b9437c871445179a5", "patch": "@@ -524,74 +524,59 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             return (false, None);\n         }\n         let hir_map = self.infcx.tcx.hir();\n-        let my_hir = hir_map.local_def_id_to_hir_id(\n-            self.body.source.def_id().as_local().unwrap(),\n-        );\n-        match hir_map.find(hir_map.get_parent_node(my_hir)) {\n-            Some(Node::Item(hir::Item {\n-                kind:\n-                    hir::ItemKind::Impl(hir::Impl {\n-                        of_trait:\n-                            Some(hir::TraitRef {\n-                                path:\n-                                    hir::Path {\n-                                        res:\n-                                            hir::def::Res::Def(_, td),\n+        let my_def = self.body.source.def_id();\n+        let my_hir = hir_map.local_def_id_to_hir_id(my_def.as_local().unwrap());\n+        let td = if let Some(a) = self.infcx.tcx.impl_of_method(my_def).and_then(|x| {\n+            self.infcx.tcx.trait_id_of_impl(x)\n+        }) {\n+            a\n+        } else {\n+            return (false, None);\n+        };\n+        (true, td.as_local().and_then(|tld| {\n+            let h = hir_map.local_def_id_to_hir_id(tld);\n+            match hir_map.find(h) {\n+                Some(Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Trait(\n+                        _, _, _, _,\n+                        items\n+                    ),\n+                    ..\n+                })) => {\n+                    let mut f_in_trait_opt = None;\n+                    for hir::TraitItemRef { id: fi, kind: k, .. } in *items {\n+                        let hi = fi.hir_id();\n+                        if !matches!(k, hir::AssocItemKind::Fn { .. }) {\n+                            continue;\n+                        }\n+                        if hir_map.name(hi) != hir_map.name(my_hir) {\n+                            continue;\n+                        }\n+                        f_in_trait_opt = Some(hi);\n+                        break;\n+                    }\n+                    f_in_trait_opt.and_then(|f_in_trait| {\n+                        match hir_map.find(f_in_trait) {\n+                            Some(Node::TraitItem(hir::TraitItem {\n+                                kind: hir::TraitItemKind::Fn(hir::FnSig {\n+                                    decl: hir::FnDecl {\n+                                        inputs,\n                                         ..\n                                     },\n+                                    ..\n+                                }, _),\n                                 ..\n-                            }),\n-                        ..\n-                    }),\n-                ..\n-            })) => {\n-                (true, td.as_local().and_then(|tld| {\n-                    let h = hir_map.local_def_id_to_hir_id(tld);\n-                    match hir_map.find(h) {\n-                        Some(Node::Item(hir::Item {\n-                            kind: hir::ItemKind::Trait(\n-                                _, _, _, _,\n-                                items\n-                            ),\n-                            ..\n-                        })) => {\n-                            let mut f_in_trait_opt = None;\n-                            for hir::TraitItemRef { id: fi, kind: k, .. } in *items {\n-                                let hi = fi.hir_id();\n-                                if !matches!(k, hir::AssocItemKind::Fn { .. }) {\n-                                    continue;\n-                                }\n-                                if hir_map.name(hi) != hir_map.name(my_hir) {\n-                                    continue;\n-                                }\n-                                f_in_trait_opt = Some(hi);\n-                                break;\n-                            }\n-                            f_in_trait_opt.and_then(|f_in_trait| {\n-                                match hir_map.find(f_in_trait) {\n-                                    Some(Node::TraitItem(hir::TraitItem {\n-                                        kind: hir::TraitItemKind::Fn(hir::FnSig {\n-                                            decl: hir::FnDecl {\n-                                                inputs,\n-                                                ..\n-                                            },\n-                                            ..\n-                                        }, _),\n-                                        ..\n-                                    })) => {\n-                                        let hir::Ty { span, .. } = inputs[local.index() - 1];\n-                                        Some(span)\n-                                    },\n-                                    _ => None,\n-                                }\n-                            })\n+                            })) => {\n+                                let hir::Ty { span, .. } = inputs[local.index() - 1];\n+                                Some(span)\n+                            },\n+                            _ => None,\n                         }\n-                        _ => None\n-                    }\n-                }))\n+                    })\n+                }\n+                _ => None\n             }\n-            _ => (false, None),\n-        }\n+        }))\n     }\n \n     // point to span of upvar making closure call require mutable borrow"}]}