{"sha": "5e1e487624a134e99371fff073862c90da479755", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMWU0ODc2MjRhMTM0ZTk5MzcxZmZmMDczODYyYzkwZGE0Nzk3NTU=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-11-19T17:15:49Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-11-20T07:51:25Z"}, "message": "Make BytePos 32-bit", "tree": {"sha": "0be3e812df267b8bbe5fda86eefa2457841ce9d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0be3e812df267b8bbe5fda86eefa2457841ce9d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e1e487624a134e99371fff073862c90da479755", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1e487624a134e99371fff073862c90da479755", "html_url": "https://github.com/rust-lang/rust/commit/5e1e487624a134e99371fff073862c90da479755", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e1e487624a134e99371fff073862c90da479755/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4e28ae06842c2066fadb70a1a4f3dc3f1e26e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e28ae06842c2066fadb70a1a4f3dc3f1e26e3c", "html_url": "https://github.com/rust-lang/rust/commit/c4e28ae06842c2066fadb70a1a4f3dc3f1e26e3c"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "cd0e437d171054e05269ce7520a3b003a41ce24f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1e487624a134e99371fff073862c90da479755/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1e487624a134e99371fff073862c90da479755/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5e1e487624a134e99371fff073862c90da479755", "patch": "@@ -29,7 +29,7 @@ use syntax::parse::token;\n use syntax::parse::token::{ident_interner, interner_get};\n use syntax::parse::token::special_idents;\n use syntax::print::pprust::path_to_str;\n-use syntax::codemap::{Span, dummy_sp, BytePos};\n+use syntax::codemap::{Span, dummy_sp, Pos};\n use syntax::opt_vec::OptVec;\n use syntax::visit;\n use syntax::visit::Visitor;\n@@ -2624,7 +2624,7 @@ impl Resolver {\n                     if \"???\" == module_name {\n                         let span = Span {\n                             lo: span.lo,\n-                            hi: span.lo + BytePos(segment_name.len()),\n+                            hi: span.lo + Pos::from_uint(segment_name.len()),\n                             expn_info: span.expn_info,\n                         };\n                         self.resolve_error(span,"}, {"sha": "f7590e7b4ed55747fb40af5b4172c12fed66ab4b", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e1e487624a134e99371fff073862c90da479755/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1e487624a134e99371fff073862c90da479755/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=5e1e487624a134e99371fff073862c90da479755", "patch": "@@ -29,9 +29,11 @@ pub trait Pos {\n     fn to_uint(&self) -> uint;\n }\n \n-/// A byte offset\n+/// A byte offset. Keep this small (currently 32-bits), as AST contains\n+/// a lot of them.\n #[deriving(Clone, Eq, IterBytes, Ord)]\n-pub struct BytePos(uint);\n+pub struct BytePos(u32);\n+\n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n@@ -42,8 +44,8 @@ pub struct CharPos(uint);\n // have been unsuccessful\n \n impl Pos for BytePos {\n-    fn from_uint(n: uint) -> BytePos { BytePos(n) }\n-    fn to_uint(&self) -> uint { **self }\n+    fn from_uint(n: uint) -> BytePos { BytePos(n as u32) }\n+    fn to_uint(&self) -> uint { **self as uint }\n }\n \n impl Add<BytePos, BytePos> for BytePos {\n@@ -278,7 +280,7 @@ impl CodeMap {\n \n         let filemap = @FileMap {\n             name: filename, substr: substr, src: src,\n-            start_pos: BytePos(start_pos),\n+            start_pos: Pos::from_uint(start_pos),\n             lines: @mut ~[],\n             multibyte_chars: @mut ~[],\n         };"}, {"sha": "2974b90d97e8be72b515efc29d6eb4a4db3f5f80", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e1e487624a134e99371fff073862c90da479755/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1e487624a134e99371fff073862c90da479755/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=5e1e487624a134e99371fff073862c90da479755", "patch": "@@ -241,7 +241,7 @@ pub fn bump(rdr: &mut StringReader) {\n         let last_char = rdr.curr;\n         let next = rdr.src.char_range_at(current_byte_offset);\n         let byte_offset_diff = next.next - current_byte_offset;\n-        rdr.pos = rdr.pos + BytePos(byte_offset_diff);\n+        rdr.pos = rdr.pos + Pos::from_uint(byte_offset_diff);\n         rdr.curr = next.ch;\n         rdr.col = rdr.col + CharPos(1u);\n         if last_char == '\\n' {\n@@ -251,7 +251,7 @@ pub fn bump(rdr: &mut StringReader) {\n \n         if byte_offset_diff > 1 {\n             rdr.filemap.record_multibyte_char(\n-                BytePos(current_byte_offset), byte_offset_diff);\n+                Pos::from_uint(current_byte_offset), byte_offset_diff);\n         }\n     } else {\n         rdr.curr = unsafe { transmute(-1u32) }; // FIXME: #8971: unsound\n@@ -327,7 +327,7 @@ fn consume_any_line_comment(rdr: @mut StringReader)\n             bump(rdr);\n             // line comments starting with \"///\" or \"//!\" are doc-comments\n             if rdr.curr == '/' || rdr.curr == '!' {\n-                let start_bpos = rdr.pos - BytePos(3u);\n+                let start_bpos = rdr.pos - BytePos(3);\n                 while rdr.curr != '\\n' && !is_eof(rdr) {\n                     bump(rdr);\n                 }\n@@ -381,7 +381,7 @@ fn consume_block_comment(rdr: @mut StringReader)\n                       -> Option<TokenAndSpan> {\n     // block comments starting with \"/**\" or \"/*!\" are doc-comments\n     let is_doc_comment = rdr.curr == '*' || rdr.curr == '!';\n-    let start_bpos = rdr.pos - BytePos(if is_doc_comment {3u} else {2u});\n+    let start_bpos = rdr.pos - BytePos(if is_doc_comment {3} else {2});\n \n     let mut level: int = 1;\n     while level > 0 {\n@@ -809,7 +809,7 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n                                // Byte offsetting here is okay because the\n                                // character before position `start` is an\n                                // ascii single quote.\n-                               start - BytePos(1u),\n+                               start - BytePos(1),\n                                rdr.last_pos,\n                                ~\"unterminated character constant\");\n         }"}, {"sha": "2a270b392bcddc55724a790d40f4cbf451f662e2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1e487624a134e99371fff073862c90da479755/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1e487624a134e99371fff073862c90da479755/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5e1e487624a134e99371fff073862c90da479755", "patch": "@@ -608,7 +608,7 @@ impl Parser {\n             token::GT => self.bump(),\n             token::BINOP(token::SHR) => self.replace_token(\n                 token::GT,\n-                self.span.lo + BytePos(1u),\n+                self.span.lo + BytePos(1),\n                 self.span.hi\n             ),\n             _ => self.fatal(format!(\"expected `{}`, found `{}`\","}, {"sha": "5e822165da8a3d02c15f18ee4b29dd2717973d31", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1e487624a134e99371fff073862c90da479755/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1e487624a134e99371fff073862c90da479755/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5e1e487624a134e99371fff073862c90da479755", "patch": "@@ -2115,7 +2115,7 @@ pub fn maybe_print_trailing_comment(s: @ps, span: codemap::Span,\n         if (*cmnt).style != comments::trailing { return; }\n         let span_line = cm.lookup_char_pos(span.hi);\n         let comment_line = cm.lookup_char_pos((*cmnt).pos);\n-        let mut next = (*cmnt).pos + BytePos(1u);\n+        let mut next = (*cmnt).pos + BytePos(1);\n         match next_pos { None => (), Some(p) => next = p }\n         if span.hi < (*cmnt).pos && (*cmnt).pos < next &&\n                span_line.line == comment_line.line {"}]}