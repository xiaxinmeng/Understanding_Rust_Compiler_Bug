{"sha": "0ca1885da133cb7e4a1f4d557cfde5d16ac68231", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYTE4ODVkYTEzM2NiN2U0YTFmNGQ1NTdjZmRlNWQxNmFjNjgyMzE=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-04-06T21:01:56Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-04-08T08:03:42Z"}, "message": "Feed enum field offsets to type vistors.", "tree": {"sha": "5701106cf7a6fa8b06a2d4bd9752237fedd90b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5701106cf7a6fa8b06a2d4bd9752237fedd90b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ca1885da133cb7e4a1f4d557cfde5d16ac68231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca1885da133cb7e4a1f4d557cfde5d16ac68231", "html_url": "https://github.com/rust-lang/rust/commit/0ca1885da133cb7e4a1f4d557cfde5d16ac68231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ca1885da133cb7e4a1f4d557cfde5d16ac68231/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44d4d6de762f3f9aae1fedcf454c66b79b3ad58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/44d4d6de762f3f9aae1fedcf454c66b79b3ad58d", "html_url": "https://github.com/rust-lang/rust/commit/44d4d6de762f3f9aae1fedcf454c66b79b3ad58d"}], "stats": {"total": 81, "additions": 61, "deletions": 20}, "files": [{"sha": "a38e51b38134b5034a434118ec0df12c61b3478d", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ca1885da133cb7e4a1f4d557cfde5d16ac68231/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca1885da133cb7e4a1f4d557cfde5d16ac68231/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=0ca1885da133cb7e4a1f4d557cfde5d16ac68231", "patch": "@@ -406,21 +406,31 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n                                 disr_val: int,\n                                 n_fields: uint,\n                                 name: &str) -> bool {\n-        self.inner.push_ptr();\n+        self.inner.push_ptr(); // NOTE remove after next snapshot\n         if ! self.inner.visit_enter_enum_variant(variant, disr_val,\n                                                  n_fields, name) {\n             return false;\n         }\n         true\n     }\n \n+    #[cfg(stage0)]\n     fn visit_enum_variant_field(&self, i: uint, inner: *TyDesc) -> bool {\n         unsafe { self.align((*inner).align); }\n         if ! self.inner.visit_enum_variant_field(i, inner) { return false; }\n         unsafe { self.bump((*inner).size); }\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_enum_variant_field(&self, i: uint, offset: uint, inner: *TyDesc) -> bool {\n+        self.inner.push_ptr();\n+        self.bump(offset);\n+        if ! self.inner.visit_enum_variant_field(i, offset, inner) { return false; }\n+        self.inner.pop_ptr();\n+        true\n+    }\n+\n     fn visit_leave_enum_variant(&self, variant: uint,\n                                 disr_val: int,\n                                 n_fields: uint,\n@@ -429,7 +439,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n                                                  n_fields, name) {\n             return false;\n         }\n-        self.inner.pop_ptr();\n+        self.inner.pop_ptr(); // NOTE remove after next snapshot\n         true\n     }\n "}, {"sha": "3d42f064831788250b043a2cc673c81366b8992b", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0ca1885da133cb7e4a1f4d557cfde5d16ac68231/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca1885da133cb7e4a1f4d557cfde5d16ac68231/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=0ca1885da133cb7e4a1f4d557cfde5d16ac68231", "patch": "@@ -193,6 +193,14 @@ pub impl ReprVisitor {\n         self.bump(sys::size_of::<T>());\n     }\n \n+    #[cfg(stage0)] #[inline(always)]\n+    fn stage0_bump_past<T>(&self) {\n+        self.bump_past::<T>();\n+    }\n+    #[cfg(not(stage0))] #[inline(always)]\n+    fn stage0_bump_past<T>(&self) {\n+    }\n+\n     #[inline(always)]\n     fn visit_inner(&self, inner: *TyDesc) -> bool {\n         self.visit_ptr_inner(self.ptr, inner)\n@@ -487,7 +495,7 @@ impl TyVisitor for ReprVisitor {\n                         self.var_stk.push(TagMismatch);\n                     }\n                 };\n-                self.bump_past::<int>();\n+                self.stage0_bump_past::<int>();\n             }\n         }\n \n@@ -500,6 +508,7 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+    #[cfg(stage0)]\n     fn visit_enum_variant_field(&self, i: uint, inner: *TyDesc) -> bool {\n         match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n             Degenerate | TagMatch => {\n@@ -515,6 +524,22 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_enum_variant_field(&self, i: uint, _offset: uint, inner: *TyDesc) -> bool {\n+        match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n+            Degenerate | TagMatch => {\n+                if i != 0 {\n+                    self.writer.write_str(\", \");\n+                }\n+                if ! self.visit_inner(inner) {\n+                    return false;\n+                }\n+            }\n+            TagMismatch => ()\n+        }\n+        true\n+    }\n+\n     fn visit_leave_enum_variant(&self, _variant: uint,\n                                 _disr_val: int,\n                                 n_fields: uint,"}, {"sha": "7a07ce125161612210be1497a3f4cd21f04de114", "filename": "src/librustc/front/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ca1885da133cb7e4a1f4d557cfde5d16ac68231/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca1885da133cb7e4a1f4d557cfde5d16ac68231/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=0ca1885da133cb7e4a1f4d557cfde5d16ac68231", "patch": "@@ -96,7 +96,7 @@ pub mod intrinsic {\n                                     disr_val: int,\n                                     n_fields: uint,\n                                     name: &str) -> bool;\n-        fn visit_enum_variant_field(&self, i: uint, inner: *TyDesc) -> bool;\n+        fn visit_enum_variant_field(&self, i: uint, offset: uint, inner: *TyDesc) -> bool;\n         fn visit_leave_enum_variant(&self, variant: uint,\n                                     disr_val: int,\n                                     n_fields: uint,"}, {"sha": "9d62231905eeaea33a1a3c5d3848f8581c48959b", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0ca1885da133cb7e4a1f4d557cfde5d16ac68231/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca1885da133cb7e4a1f4d557cfde5d16ac68231/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=0ca1885da133cb7e4a1f4d557cfde5d16ac68231", "patch": "@@ -10,6 +10,7 @@\n \n \n use lib::llvm::{TypeRef, ValueRef};\n+use middle::trans::adt;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee::{ArgVals, DontAutorefArg};\n@@ -266,23 +267,28 @@ pub impl Reflector {\n           // variant?\n           ty::ty_enum(did, ref substs) => {\n             let bcx = self.bcx;\n-            let tcx = bcx.ccx().tcx;\n-            let variants = ty::substd_enum_variants(tcx, did, substs);\n+            let ccx = bcx.ccx();\n+            let repr = adt::represent_type(bcx.ccx(), t);\n+            let variants = ty::substd_enum_variants(ccx.tcx, did, substs);\n \n-            let extra = ~[self.c_uint(vec::len(variants))]\n+            let enum_args = ~[self.c_uint(vec::len(variants))]\n                 + self.c_size_and_align(t);\n-            do self.bracketed(~\"enum\", extra) |this| {\n+            do self.bracketed(~\"enum\", enum_args) |this| {\n                 for variants.eachi |i, v| {\n-                    let extra1 = ~[this.c_uint(i),\n-                                   this.c_int(v.disr_val),\n-                                   this.c_uint(vec::len(v.args)),\n-                                   this.c_slice(\n-                                       bcx.ccx().sess.str_of(v.name))];\n-                    do this.bracketed(~\"enum_variant\", extra1) |this| {\n+                    let variant_args = ~[this.c_uint(i),\n+                                         this.c_int(v.disr_val),\n+                                         this.c_uint(vec::len(v.args)),\n+                                         this.c_slice(ccx.sess.str_of(v.name))];\n+                    do this.bracketed(~\"enum_variant\", variant_args) |this| {\n                         for v.args.eachi |j, a| {\n-                            let extra = ~[this.c_uint(j),\n-                                          this.c_tydesc(*a)];\n-                            this.visit(~\"enum_variant_field\", extra);\n+                            let bcx = this.bcx;\n+                            let null = C_null(T_ptr(type_of(ccx, t)));\n+                            let offset = p2i(ccx, adt::trans_field_ptr(bcx, repr, null,\n+                                                                       v.disr_val, j));\n+                            let field_args = ~[this.c_uint(j),\n+                                               offset,\n+                                               this.c_tydesc(*a)];\n+                            this.visit(~\"enum_variant_field\", field_args);\n                         }\n                     }\n                 }"}, {"sha": "8ddc845f50cbc551bd30fcc2ac46029dfd50f4b1", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ca1885da133cb7e4a1f4d557cfde5d16ac68231/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca1885da133cb7e4a1f4d557cfde5d16ac68231/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=0ca1885da133cb7e4a1f4d557cfde5d16ac68231", "patch": "@@ -394,8 +394,8 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_enum_variant_field(&self, i: uint, inner: *TyDesc) -> bool {\n-        if ! self.inner.visit_enum_variant_field(i, inner) { return false; }\n+    fn visit_enum_variant_field(&self, i: uint, offset: uint, inner: *TyDesc) -> bool {\n+        if ! self.inner.visit_enum_variant_field(i, offset, inner) { return false; }\n         true\n     }\n \n@@ -594,7 +594,7 @@ impl TyVisitor for my_visitor {\n                                 _disr_val: int,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n-    fn visit_enum_variant_field(&self, _i: uint, inner: *TyDesc) -> bool {\n+    fn visit_enum_variant_field(&self, _i: uint, _offset: uint, inner: *TyDesc) -> bool {\n         self.visit_inner(inner)\n     }\n     fn visit_leave_enum_variant(&self, _variant: uint,"}]}