{"sha": "c586490715a35d3c9dae17de7f8907c2f73168d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ODY0OTA3MTVhMzVkM2M5ZGFlMTdkZTdmODkwN2MyZjczMTY4ZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-05T10:57:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-05T10:57:04Z"}, "message": "auto merge of #17785 : P1start/rust/diagnostics, r=alexcrichton\n\nCloses #17765.\r\nCloses #15524.\r\nCloses #14772.", "tree": {"sha": "52b24e796acafe2ecc781a8ce920eae97080caaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52b24e796acafe2ecc781a8ce920eae97080caaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c586490715a35d3c9dae17de7f8907c2f73168d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c586490715a35d3c9dae17de7f8907c2f73168d3", "html_url": "https://github.com/rust-lang/rust/commit/c586490715a35d3c9dae17de7f8907c2f73168d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c586490715a35d3c9dae17de7f8907c2f73168d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfbe9eb3b24fdc7ea5c78f96fedec6630476dec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbe9eb3b24fdc7ea5c78f96fedec6630476dec7", "html_url": "https://github.com/rust-lang/rust/commit/dfbe9eb3b24fdc7ea5c78f96fedec6630476dec7"}, {"sha": "cc31d9cabcc6c8ad396c1aae6257a4b5ea25cb46", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc31d9cabcc6c8ad396c1aae6257a4b5ea25cb46", "html_url": "https://github.com/rust-lang/rust/commit/cc31d9cabcc6c8ad396c1aae6257a4b5ea25cb46"}], "stats": {"total": 104, "additions": 81, "deletions": 23}, "files": [{"sha": "b5af2b26b295bc842965150b989604e0465cbe2f", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=c586490715a35d3c9dae17de7f8907c2f73168d3", "patch": "@@ -670,30 +670,30 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                   (ty, default_region_var, ast::MutImmutable, None)\n               }\n               _ => {\n-                  check_err(\"a vector pattern\".to_string());\n+                  check_err(\"an array  pattern\".to_string());\n                   return;\n               }\n           },\n           ty::ty_rptr(r, mt) => match ty::get(mt.ty).sty {\n               ty::ty_vec(ty, None) => (ty, r, mt.mutbl, None),\n               _ => {\n-                  check_err(\"a vector pattern\".to_string());\n+                  check_err(\"an array pattern\".to_string());\n                   return;\n               }\n           },\n           _ => {\n-              check_err(\"a vector pattern\".to_string());\n+              check_err(\"an array pattern\".to_string());\n               return;\n           }\n         };\n \n         let min_len = before.len() + after.len();\n         fixed.and_then(|count| match *slice {\n             Some(_) if count < min_len =>\n-                Some(format!(\"a fixed vector pattern of size at least {}\", min_len)),\n+                Some(format!(\"a fixed array pattern of size at least {}\", min_len)),\n \n             None if count != min_len =>\n-                Some(format!(\"a fixed vector pattern of size {}\", min_len)),\n+                Some(format!(\"a fixed array pattern of size {}\", min_len)),\n \n             _ => None\n         }).map(check_err);"}, {"sha": "bb490273e9f0d66e59b425f5a73e591d29f8ab44", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=c586490715a35d3c9dae17de7f8907c2f73168d3", "patch": "@@ -5004,9 +5004,14 @@ pub fn check_enum_variants(ccx: &CrateCtxt,\n             };\n \n             // Check for duplicate discriminant values\n-            if disr_vals.contains(&current_disr_val) {\n-                span_err!(ccx.tcx.sess, v.span, E0081,\n-                    \"discriminant value already exists\");\n+            match disr_vals.iter().position(|&x| x == current_disr_val) {\n+                Some(i) => {\n+                    span_err!(ccx.tcx.sess, v.span, E0081,\n+                        \"discriminant value `{}` already exists\", disr_vals[i]);\n+                    span_note!(ccx.tcx.sess, ccx.tcx().map.span(variants[i].id.node),\n+                        \"conflicting discriminant here\")\n+                }\n+                None => {}\n             }\n             // Check for unrepresentable discriminant values\n             match hint {"}, {"sha": "d2c0ebd4393191ab364bfb1cb829098c2546eec9", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=c586490715a35d3c9dae17de7f8907c2f73168d3", "patch": "@@ -274,30 +274,43 @@ fn strip_test_functions(krate: ast::Crate) -> ast::Crate {\n fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     let has_test_attr = attr::contains_name(i.attrs.as_slice(), \"test\");\n \n-    fn has_test_signature(i: &ast::Item) -> bool {\n+    #[deriving(PartialEq)]\n+    enum HasTestSignature {\n+        Yes,\n+        No,\n+        NotEvenAFunction,\n+    }\n+\n+    fn has_test_signature(i: &ast::Item) -> HasTestSignature {\n         match &i.node {\n           &ast::ItemFn(ref decl, _, _, ref generics, _) => {\n             let no_output = match decl.output.node {\n                 ast::TyNil => true,\n-                _ => false\n+                _ => false,\n             };\n-            decl.inputs.is_empty()\n-                && no_output\n-                && !generics.is_parameterized()\n+            if decl.inputs.is_empty()\n+                   && no_output\n+                   && !generics.is_parameterized() {\n+                Yes\n+            } else {\n+                No\n+            }\n           }\n-          _ => false\n+          _ => NotEvenAFunction,\n         }\n     }\n \n-    if has_test_attr && !has_test_signature(i) {\n+    if has_test_attr {\n         let diag = cx.span_diagnostic;\n-        diag.span_err(\n-            i.span,\n-            \"functions used as tests must have signature fn() -> ().\"\n-        );\n+        match has_test_signature(i) {\n+            Yes => {},\n+            No => diag.span_err(i.span, \"functions used as tests must have signature fn() -> ()\"),\n+            NotEvenAFunction => diag.span_err(i.span,\n+                                              \"only functions may be used as tests\"),\n+        }\n     }\n \n-    return has_test_attr && has_test_signature(i);\n+    return has_test_attr && has_test_signature(i) == Yes;\n }\n \n fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {"}, {"sha": "2c7b56f9dc7f747d07d82bd6e2185b695ceb00a2", "filename": "src/test/compile-fail/issue-13482.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs?ref=c586490715a35d3c9dae17de7f8907c2f73168d3", "patch": "@@ -12,7 +12,7 @@ fn main() {\n   let x = [1,2];\n   let y = match x {\n     [] => None,\n-//~^ ERROR expected `[<generic integer #0>, ..2]`, found a fixed vector pattern of size 0\n+//~^ ERROR expected `[<generic integer #0>, ..2]`, found a fixed array pattern of size 0\n     [a,_] => Some(a)\n   };\n }"}, {"sha": "aaaad67be52dd9beb7f98779db8ae4043d42c0f1", "filename": "src/test/compile-fail/issue-14772.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Ftest%2Fcompile-fail%2Fissue-14772.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Ftest%2Fcompile-fail%2Fissue-14772.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14772.rs?ref=c586490715a35d3c9dae17de7f8907c2f73168d3", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#[test]\n+mod foo {} //~ ERROR only functions may be used as tests\n+\n+fn main() {}"}, {"sha": "1e7bd6fc623a8ca4f9822e4a70590bbf15b22017", "filename": "src/test/compile-fail/issue-15524.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Ftest%2Fcompile-fail%2Fissue-15524.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Ftest%2Fcompile-fail%2Fissue-15524.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15524.rs?ref=c586490715a35d3c9dae17de7f8907c2f73168d3", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static N: int = 1;\n+\n+enum Foo {\n+    A = 1,\n+    B = 1, //~ ERROR discriminant value `1` already exists\n+    //~^^ NOTE conflicting\n+    C = 0,\n+    D, //~ ERROR discriminant value `1` already exists\n+    //~^^^^^ NOTE conflicting\n+    E = N, //~ ERROR discriminant value `1` already exists\n+    //~^^^^^^^ NOTE conflicting\n+}\n+\n+fn main() {}"}, {"sha": "e095c7c240859a223918771d6e5711515bfd561f", "filename": "src/test/compile-fail/match-vec-mismatch-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs?ref=c586490715a35d3c9dae17de7f8907c2f73168d3", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     match () {\n-        [()] => { } //~ ERROR mismatched types: expected `()`, found a vector pattern\n+        [()] => { } //~ ERROR mismatched types: expected `()`, found an array pattern\n     }\n }"}, {"sha": "5da5bb854097d6b4a1be8de095223a27ae4baf4e", "filename": "src/test/compile-fail/tag-variant-disr-dup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c586490715a35d3c9dae17de7f8907c2f73168d3/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs?ref=c586490715a35d3c9dae17de7f8907c2f73168d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//error-pattern:discriminant value already exists\n+//error-pattern:discriminant value\n \n // black and white have the same discriminator value ...\n "}]}