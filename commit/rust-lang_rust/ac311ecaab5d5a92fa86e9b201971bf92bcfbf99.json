{"sha": "ac311ecaab5d5a92fa86e9b201971bf92bcfbf99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMzExZWNhYWI1ZDVhOTJmYTg2ZTliMjAxOTcxYmY5MmJjZmJmOTk=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-10-03T17:11:24Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-10-29T16:09:20Z"}, "message": "Fix multiple mistakes in adt::is_ffi_safe", "tree": {"sha": "273f12c792b29d2ed24d7a8cb15a235d92b46bc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/273f12c792b29d2ed24d7a8cb15a235d92b46bc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac311ecaab5d5a92fa86e9b201971bf92bcfbf99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac311ecaab5d5a92fa86e9b201971bf92bcfbf99", "html_url": "https://github.com/rust-lang/rust/commit/ac311ecaab5d5a92fa86e9b201971bf92bcfbf99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac311ecaab5d5a92fa86e9b201971bf92bcfbf99/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25f953437d2bc3983b03c0d17cf56de40acec45b", "url": "https://api.github.com/repos/rust-lang/rust/commits/25f953437d2bc3983b03c0d17cf56de40acec45b", "html_url": "https://github.com/rust-lang/rust/commit/25f953437d2bc3983b03c0d17cf56de40acec45b"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "26f8ad6bd4788632bb864fd1b0d6bd85b46c011a", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac311ecaab5d5a92fa86e9b201971bf92bcfbf99/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac311ecaab5d5a92fa86e9b201971bf92bcfbf99/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=ac311ecaab5d5a92fa86e9b201971bf92bcfbf99", "patch": "@@ -221,21 +221,21 @@ fn represent_type_uncached(cx: &mut CrateContext, t: ty::t) -> Repr {\n /// For use in lint or similar, where being sound but slightly incomplete is acceptable.\n pub fn is_ffi_safe(tcx: ty::ctxt, def_id: ast::DefId) -> bool {\n     match ty::get(ty::lookup_item_type(tcx, def_id).ty).sty {\n-        ty::ty_enum(def_id, ref substs) => {\n-            let cases = get_cases(tcx, def_id, substs);\n+        ty::ty_enum(def_id, _) => {\n+            let variants = ty::enum_variants(tcx, def_id);\n             // Univariant => like struct/tuple.\n-            if cases.len() <= 2 {\n+            if variants.len() <= 1 {\n                 return true;\n             }\n             let hint = ty::lookup_repr_hint(tcx, def_id);\n             // Appropriate representation explicitly selected?\n             if hint.is_ffi_safe() {\n                 return true;\n             }\n-            // Conservative approximation of nullable pointers, for Option<~T> etc.\n-            if cases.len() == 2 && hint == attr::ReprAny &&\n-                (cases[0].tys.is_empty() && cases[1].find_ptr().is_some() ||\n-                 cases[1].tys.is_empty() && cases[0].find_ptr().is_some()) {\n+            // Option<~T> and similar are used in FFI.  Rather than try to resolve type parameters\n+            // and recognize this case exactly, this overapproximates -- assuming that if a\n+            // non-C-like enum is being used in FFI then the user knows what they're doing.\n+            if variants.iter().any(|vi| !vi.args.is_empty()) {\n                 return true;\n             }\n             false"}]}