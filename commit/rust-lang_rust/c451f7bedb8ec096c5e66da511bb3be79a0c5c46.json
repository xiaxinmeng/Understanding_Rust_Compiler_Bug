{"sha": "c451f7bedb8ec096c5e66da511bb3be79a0c5c46", "node_id": "C_kwDOAAsO6NoAKGM0NTFmN2JlZGI4ZWMwOTZjNWU2NmRhNTExYmIzYmU3OWEwYzVjNDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-14T16:10:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-14T16:10:29Z"}, "message": "Rollup merge of #111974 - Sp00ph:update_guarantees, r=Amanieu\n\nUpdate runtime guarantee for `select_nth_unstable`\n\n#106933 changed the runtime guarantee for `select_nth_unstable` from O(n) to O(n log n), since the old guarantee wasn't actually met by the implementation at the time. Now with #107522, `select_nth_unstable` should be truly linear in runtime, so we can revert its runtime guarantee to O(n). Since #106933 was considered a bug fix, this will probably need an FCP because it counts as a new API guarantee.\n\nr? `@Amanieu`", "tree": {"sha": "c2735f2a36232c66c4ce19249a8293679e6b0eca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2735f2a36232c66c4ce19249a8293679e6b0eca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c451f7bedb8ec096c5e66da511bb3be79a0c5c46", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkieZ1CRBK7hj4Ov3rIwAAXEoIAJeLHsz8AZ+WvLxRtLuZe5nV\nn4SY8A+u/FBT8RuH0iBaLD3PwS1iDcOPja2E6ooolizg7w2w6tcK0btofgkrHH+3\n4Y3oae5O3odIKW4n+LNQk6EbBDunfmtyyxZgPLYARIgkzk9JIrpPahRU1BanYyeB\nL3EUHsOLPZcFi3ZNAqvdAAZtyL/zRZzfxcJux2Jfta2RlOfP+TVtx+rhcT4ALVaE\nNbNhxv1VhjpGxwdRcVkjZB2YU16TODBEGHDk1DLclRmk4C1QnuVqoEE3g7mJ/CKD\nyivzWsho0Prm5U4pQ0vqxRtmBP3nSHkAvYp4snSaagUnwWTPQi9yMtM/YLx84eU=\n=C46J\n-----END PGP SIGNATURE-----\n", "payload": "tree c2735f2a36232c66c4ce19249a8293679e6b0eca\nparent b8f71eaf0195be2a42e054e8adf7a8f967b829c1\nparent 62ee9e1d0a7f491601d5a7252fcbb0c9e6fa2795\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686759029 +0200\ncommitter GitHub <noreply@github.com> 1686759029 +0200\n\nRollup merge of #111974 - Sp00ph:update_guarantees, r=Amanieu\n\nUpdate runtime guarantee for `select_nth_unstable`\n\n#106933 changed the runtime guarantee for `select_nth_unstable` from O(n) to O(n log n), since the old guarantee wasn't actually met by the implementation at the time. Now with #107522, `select_nth_unstable` should be truly linear in runtime, so we can revert its runtime guarantee to O(n). Since #106933 was considered a bug fix, this will probably need an FCP because it counts as a new API guarantee.\n\nr? `@Amanieu`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c451f7bedb8ec096c5e66da511bb3be79a0c5c46", "html_url": "https://github.com/rust-lang/rust/commit/c451f7bedb8ec096c5e66da511bb3be79a0c5c46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c451f7bedb8ec096c5e66da511bb3be79a0c5c46/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8f71eaf0195be2a42e054e8adf7a8f967b829c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f71eaf0195be2a42e054e8adf7a8f967b829c1", "html_url": "https://github.com/rust-lang/rust/commit/b8f71eaf0195be2a42e054e8adf7a8f967b829c1"}, {"sha": "62ee9e1d0a7f491601d5a7252fcbb0c9e6fa2795", "url": "https://api.github.com/repos/rust-lang/rust/commits/62ee9e1d0a7f491601d5a7252fcbb0c9e6fa2795", "html_url": "https://github.com/rust-lang/rust/commit/62ee9e1d0a7f491601d5a7252fcbb0c9e6fa2795"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "5d6e7dcfcee87d24c245f539ab902c03669727ce", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c451f7bedb8ec096c5e66da511bb3be79a0c5c46/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c451f7bedb8ec096c5e66da511bb3be79a0c5c46/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=c451f7bedb8ec096c5e66da511bb3be79a0c5c46", "patch": "@@ -2995,7 +2995,7 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index`. Additionally, this reordering is\n     /// unstable (i.e. any number of equal elements may end up at position `index`), in-place\n-    /// (i.e. does not allocate), and *O*(*n*) on average. The worst-case performance is *O*(*n* log *n*).\n+    /// (i.e. does not allocate), and runs in *O*(*n*) time.\n     /// This function is also known as \"kth element\" in other libraries.\n     ///\n     /// It returns a triplet of the following from the reordered slice:\n@@ -3045,9 +3045,8 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index` using the comparator function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n-    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) on average.\n-    /// The worst-case performance is *O*(*n* log *n*). This function is also known as\n-    /// \"kth element\" in other libraries.\n+    /// position `index`), in-place (i.e. does not allocate), and runs in *O*(*n*) time.\n+    /// This function is also known as \"kth element\" in other libraries.\n     ///\n     /// It returns a triplet of the following from\n     /// the slice reordered according to the provided comparator function: the subslice prior to\n@@ -3101,8 +3100,7 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index` using the key extraction function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n-    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) on average.\n-    /// The worst-case performance is *O*(*n* log *n*).\n+    /// position `index`), in-place (i.e. does not allocate), and runs in *O*(*n*) time.\n     /// This function is also known as \"kth element\" in other libraries.\n     ///\n     /// It returns a triplet of the following from"}]}