{"sha": "33ba2776c903dab45e4c9a8c9313ce5d59e69af1", "node_id": "C_kwDOAAsO6NoAKDMzYmEyNzc2YzkwM2RhYjQ1ZTRjOWE4YzkzMTNjZTVkNTllNjlhZjE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-26T02:57:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-26T03:35:43Z"}, "message": "Remove `ast::Token::take`.\n\nInstead of replacing `TokenTreesReader::token` in two steps, we can just\ndo it in one, which is both simpler and faster.", "tree": {"sha": "925b9212f8aff119d58e99552f4592eae6462688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/925b9212f8aff119d58e99552f4592eae6462688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33ba2776c903dab45e4c9a8c9313ce5d59e69af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33ba2776c903dab45e4c9a8c9313ce5d59e69af1", "html_url": "https://github.com/rust-lang/rust/commit/33ba2776c903dab45e4c9a8c9313ce5d59e69af1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33ba2776c903dab45e4c9a8c9313ce5d59e69af1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b2075e03d90b53dddda4459ad299c1ffa9cf960", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2075e03d90b53dddda4459ad299c1ffa9cf960", "html_url": "https://github.com/rust-lang/rust/commit/5b2075e03d90b53dddda4459ad299c1ffa9cf960"}], "stats": {"total": 10, "additions": 2, "deletions": 8}, "files": [{"sha": "fa6162c51847a39bb218182b60fdcfba015e84e6", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33ba2776c903dab45e4c9a8c9313ce5d59e69af1/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ba2776c903dab45e4c9a8c9313ce5d59e69af1/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=33ba2776c903dab45e4c9a8c9313ce5d59e69af1", "patch": "@@ -13,7 +13,7 @@ use rustc_span::symbol::{kw, sym};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{self, edition::Edition, Span, DUMMY_SP};\n use std::borrow::Cow;\n-use std::{fmt, mem};\n+use std::fmt;\n \n #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum CommentKind {\n@@ -335,11 +335,6 @@ impl Token {\n         Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)\n     }\n \n-    /// Return this token by value and leave a dummy token in its place.\n-    pub fn take(&mut self) -> Self {\n-        mem::replace(self, Token::dummy())\n-    }\n-\n     /// For interpolated tokens, returns a span of the fragment to which the interpolated\n     /// token refers. For all other tokens this is just a regular span.\n     /// It is particularly important to use this for identifiers and lifetimes"}, {"sha": "c23090e7142393fc0f41472c450906a263e9f2da", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33ba2776c903dab45e4c9a8c9313ce5d59e69af1/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ba2776c903dab45e4c9a8c9313ce5d59e69af1/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=33ba2776c903dab45e4c9a8c9313ce5d59e69af1", "patch": "@@ -247,14 +247,13 @@ impl<'a> TokenTreesReader<'a> {\n     fn parse_token_tree_other(&mut self) -> TokenTree {\n         // `spacing` for the returned token is determined by the next token:\n         // its kind and its `preceded_by_whitespace` status.\n-        let this_tok = self.token.take();\n         let (next_tok, is_next_tok_preceded_by_whitespace) = self.string_reader.next_token();\n         let this_spacing = if is_next_tok_preceded_by_whitespace || !next_tok.is_op() {\n             Spacing::Alone\n         } else {\n             Spacing::Joint\n         };\n-        self.token = next_tok;\n+        let this_tok = std::mem::replace(&mut self.token, next_tok);\n         TokenTree::Token(this_tok, this_spacing)\n     }\n }"}]}