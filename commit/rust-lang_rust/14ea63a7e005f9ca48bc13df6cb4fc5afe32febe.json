{"sha": "14ea63a7e005f9ca48bc13df6cb4fc5afe32febe", "node_id": "C_kwDOAAsO6NoAKDE0ZWE2M2E3ZTAwNWY5Y2E0OGJjMTNkZjZjYjRmYzVhZmUzMmZlYmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-05T23:13:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-05T23:13:41Z"}, "message": "Auto merge of #107627 - nnethercote:optimize-fold_ty, r=compiler-errors\n\nOptimize `fold_ty`\n\nMicro-optimizing the heck out of the important `fold_ty` methods.\n\nr? `@oli-obk`", "tree": {"sha": "2ab73c741a1227afee9011dd0d7f5beb8b4ccdf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ab73c741a1227afee9011dd0d7f5beb8b4ccdf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe", "html_url": "https://github.com/rust-lang/rust/commit/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a0be98f25a4b9de5afa0e15eb016e7f9627032", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a0be98f25a4b9de5afa0e15eb016e7f9627032", "html_url": "https://github.com/rust-lang/rust/commit/75a0be98f25a4b9de5afa0e15eb016e7f9627032"}, {"sha": "4aec1345aa5deabba4b63a71f5fb9bd2a3fde01b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aec1345aa5deabba4b63a71f5fb9bd2a3fde01b", "html_url": "https://github.com/rust-lang/rust/commit/4aec1345aa5deabba4b63a71f5fb9bd2a3fde01b"}], "stats": {"total": 203, "additions": 104, "deletions": 99}, "files": [{"sha": "2355234637c40790013f90ef4a521190aa2cee7c", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 61, "deletions": 68, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=14ea63a7e005f9ca48bc13df6cb4fc5afe32febe", "patch": "@@ -140,79 +140,21 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n         }\n     }\n \n+    #[inline]\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         if !t.needs_infer() && !t.has_erasable_regions() {\n-            return t;\n-        }\n-\n-        let tcx = self.infcx.tcx;\n-\n-        match *t.kind() {\n-            ty::Infer(ty::TyVar(v)) => {\n-                let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();\n-                self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy)\n-            }\n+            t\n+        } else {\n+            match *t.kind() {\n+                ty::Infer(v) => self.fold_infer_ty(v).unwrap_or(t),\n \n-            ty::Infer(ty::IntVar(v)) => self.freshen_ty(\n-                self.infcx\n-                    .inner\n-                    .borrow_mut()\n-                    .int_unification_table()\n-                    .probe_value(v)\n-                    .map(|v| v.to_type(tcx)),\n-                ty::IntVar(v),\n-                ty::FreshIntTy,\n-            ),\n+                // This code is hot enough that a non-debug assertion here makes a noticeable\n+                // difference on benchmarks like `wg-grammar`.\n+                #[cfg(debug_assertions)]\n+                ty::Placeholder(..) | ty::Bound(..) => bug!(\"unexpected type {:?}\", t),\n \n-            ty::Infer(ty::FloatVar(v)) => self.freshen_ty(\n-                self.infcx\n-                    .inner\n-                    .borrow_mut()\n-                    .float_unification_table()\n-                    .probe_value(v)\n-                    .map(|v| v.to_type(tcx)),\n-                ty::FloatVar(v),\n-                ty::FreshFloatTy,\n-            ),\n-\n-            ty::Infer(ty::FreshTy(ct) | ty::FreshIntTy(ct) | ty::FreshFloatTy(ct)) => {\n-                if ct >= self.ty_freshen_count {\n-                    bug!(\n-                        \"Encountered a freshend type with id {} \\\n-                          but our counter is only at {}\",\n-                        ct,\n-                        self.ty_freshen_count\n-                    );\n-                }\n-                t\n+                _ => t.super_fold_with(self),\n             }\n-\n-            ty::Generator(..)\n-            | ty::Bool\n-            | ty::Char\n-            | ty::Int(..)\n-            | ty::Uint(..)\n-            | ty::Float(..)\n-            | ty::Adt(..)\n-            | ty::Str\n-            | ty::Error(_)\n-            | ty::Array(..)\n-            | ty::Slice(..)\n-            | ty::RawPtr(..)\n-            | ty::Ref(..)\n-            | ty::FnDef(..)\n-            | ty::FnPtr(_)\n-            | ty::Dynamic(..)\n-            | ty::Never\n-            | ty::Tuple(..)\n-            | ty::Alias(..)\n-            | ty::Foreign(..)\n-            | ty::Param(..)\n-            | ty::Closure(..)\n-            | ty::GeneratorWitnessMIR(..)\n-            | ty::GeneratorWitness(..) => t.super_fold_with(self),\n-\n-            ty::Placeholder(..) | ty::Bound(..) => bug!(\"unexpected type {:?}\", t),\n         }\n     }\n \n@@ -253,3 +195,54 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n         }\n     }\n }\n+\n+impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n+    // This is separate from `fold_ty` to keep that method small and inlinable.\n+    #[inline(never)]\n+    fn fold_infer_ty(&mut self, v: ty::InferTy) -> Option<Ty<'tcx>> {\n+        match v {\n+            ty::TyVar(v) => {\n+                let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();\n+                Some(self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy))\n+            }\n+\n+            ty::IntVar(v) => Some(\n+                self.freshen_ty(\n+                    self.infcx\n+                        .inner\n+                        .borrow_mut()\n+                        .int_unification_table()\n+                        .probe_value(v)\n+                        .map(|v| v.to_type(self.infcx.tcx)),\n+                    ty::IntVar(v),\n+                    ty::FreshIntTy,\n+                ),\n+            ),\n+\n+            ty::FloatVar(v) => Some(\n+                self.freshen_ty(\n+                    self.infcx\n+                        .inner\n+                        .borrow_mut()\n+                        .float_unification_table()\n+                        .probe_value(v)\n+                        .map(|v| v.to_type(self.infcx.tcx)),\n+                    ty::FloatVar(v),\n+                    ty::FreshFloatTy,\n+                ),\n+            ),\n+\n+            ty::FreshTy(ct) | ty::FreshIntTy(ct) | ty::FreshFloatTy(ct) => {\n+                if ct >= self.ty_freshen_count {\n+                    bug!(\n+                        \"Encountered a freshend type with id {} \\\n+                          but our counter is only at {}\",\n+                        ct,\n+                        self.ty_freshen_count\n+                    );\n+                }\n+                None\n+            }\n+        }\n+    }\n+}"}, {"sha": "8e0bcff8d0a89cd794fd77d8902dd7d05fb970b7", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 35, "deletions": 26, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=14ea63a7e005f9ca48bc13df6cb4fc5afe32febe", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n use rustc_middle::ty::visit::TypeVisitable;\n pub use rustc_middle::ty::IntVarValue;\n-use rustc_middle::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n+use rustc_middle::ty::{self, GenericParamDefKind, InferConst, InferTy, Ty, TyCtxt};\n use rustc_middle::ty::{ConstVid, FloatVid, IntVid, TyVid};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -1389,8 +1389,8 @@ impl<'tcx> InferCtxt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        if !value.needs_infer() {\n-            return value; // Avoid duplicated subst-folding.\n+        if !value.has_non_region_infer() {\n+            return value;\n         }\n         let mut r = resolve::OpportunisticVarResolver::new(self);\n         value.fold_with(&mut r)\n@@ -1870,9 +1870,33 @@ impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n     /// If `ty` is a type variable of some kind, resolve it one level\n     /// (but do not resolve types found in the result). If `typ` is\n     /// not a type variable, just return it unmodified.\n+    #[inline]\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        match *ty.kind() {\n-            ty::Infer(ty::TyVar(v)) => {\n+        if let ty::Infer(v) = ty.kind() { self.fold_infer_ty(*v).unwrap_or(ty) } else { ty }\n+    }\n+\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.kind() {\n+            self.infcx\n+                .inner\n+                .borrow_mut()\n+                .const_unification_table()\n+                .probe_value(vid)\n+                .val\n+                .known()\n+                .unwrap_or(ct)\n+        } else {\n+            ct\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> ShallowResolver<'a, 'tcx> {\n+    // This is separate from `fold_ty` to keep that method small and inlinable.\n+    #[inline(never)]\n+    fn fold_infer_ty(&mut self, v: InferTy) -> Option<Ty<'tcx>> {\n+        match v {\n+            ty::TyVar(v) => {\n                 // Not entirely obvious: if `typ` is a type variable,\n                 // it can be resolved to an int/float variable, which\n                 // can then be recursively resolved, hence the\n@@ -1886,41 +1910,26 @@ impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n                 // Note: if these two lines are combined into one we get\n                 // dynamic borrow errors on `self.inner`.\n                 let known = self.infcx.inner.borrow_mut().type_variables().probe(v).known();\n-                known.map_or(ty, |t| self.fold_ty(t))\n+                known.map(|t| self.fold_ty(t))\n             }\n \n-            ty::Infer(ty::IntVar(v)) => self\n+            ty::IntVar(v) => self\n                 .infcx\n                 .inner\n                 .borrow_mut()\n                 .int_unification_table()\n                 .probe_value(v)\n-                .map_or(ty, |v| v.to_type(self.infcx.tcx)),\n+                .map(|v| v.to_type(self.infcx.tcx)),\n \n-            ty::Infer(ty::FloatVar(v)) => self\n+            ty::FloatVar(v) => self\n                 .infcx\n                 .inner\n                 .borrow_mut()\n                 .float_unification_table()\n                 .probe_value(v)\n-                .map_or(ty, |v| v.to_type(self.infcx.tcx)),\n+                .map(|v| v.to_type(self.infcx.tcx)),\n \n-            _ => ty,\n-        }\n-    }\n-\n-    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.kind() {\n-            self.infcx\n-                .inner\n-                .borrow_mut()\n-                .const_unification_table()\n-                .probe_value(vid)\n-                .val\n-                .known()\n-                .unwrap_or(ct)\n-        } else {\n-            ct\n+            ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_) => None,\n         }\n     }\n }"}, {"sha": "a39a40cf9abe242f22408b62c077e2d7ef32160e", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=14ea63a7e005f9ca48bc13df6cb4fc5afe32febe", "patch": "@@ -16,26 +16,29 @@ use std::ops::ControlFlow;\n /// useful for printing messages etc but also required at various\n /// points for correctness.\n pub struct OpportunisticVarResolver<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'tcx>,\n+    // The shallow resolver is used to resolve inference variables at every\n+    // level of the type.\n+    shallow_resolver: crate::infer::ShallowResolver<'a, 'tcx>,\n }\n \n impl<'a, 'tcx> OpportunisticVarResolver<'a, 'tcx> {\n     #[inline]\n     pub fn new(infcx: &'a InferCtxt<'tcx>) -> Self {\n-        OpportunisticVarResolver { infcx }\n+        OpportunisticVarResolver { shallow_resolver: crate::infer::ShallowResolver { infcx } }\n     }\n }\n \n impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n+        TypeFolder::tcx(&self.shallow_resolver)\n     }\n \n+    #[inline]\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         if !t.has_non_region_infer() {\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n-            let t = self.infcx.shallow_resolve(t);\n+            let t = self.shallow_resolver.fold_ty(t);\n             t.super_fold_with(self)\n         }\n     }\n@@ -44,7 +47,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n         if !ct.has_non_region_infer() {\n             ct // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n-            let ct = self.infcx.shallow_resolve(ct);\n+            let ct = self.shallow_resolver.fold_const(ct);\n             ct.super_fold_with(self)\n         }\n     }"}]}