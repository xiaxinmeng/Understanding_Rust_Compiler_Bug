{"sha": "22a743bc1c242b539cd70116068e62b1bd686a10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYTc0M2JjMWMyNDJiNTM5Y2Q3MDExNjA2OGU2MmIxYmQ2ODZhMTA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-05T21:04:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-05T21:04:05Z"}, "message": "Rollup merge of #69713 - matthiaskrgr:more_cleanup, r=cramertj\n\nmore clippy cleanups\n\n* Don't use .ok() before unwrapping via .expect() on a Result.\n* Use .map() to modify data inside Options instead of using .and_then(|x| Some(y))\n* Use .as_deref() instead of .as_ref().map(Deref::deref)\n* Don't use \"if let\" bindings to only check a value and not actually bind anything.\n* Use single-char patter on {ends,starts}_with and remove clone on copy type.", "tree": {"sha": "50e7c4bc9bd8192437d49371a4dfc5530bbf00eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50e7c4bc9bd8192437d49371a4dfc5530bbf00eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22a743bc1c242b539cd70116068e62b1bd686a10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeYWlGCRBK7hj4Ov3rIwAAdHIIACf03FNUoCjgEl8G7iM3rXSi\nLeU9ND7/2Bn/GMMGrdD6Ul1jbbUX1iREvs1LeZMm0AtLX9Le6kfz51Y5VPqCjXBE\nZdir0KwSgQGAoFLGNO8ZeJwTaEKS42P6HMC2J70axMY5pKIuireGBFmL1i/qhliD\nb0cbSvREuOBI/hMCiakpWE38zllus5hXf+gZGHMUh0QrULV1DCEWQD1BLNJ90JwK\nfQn26G0iLJotsriGFJ/IFSsF4tW/MSEA1h8FzQ5llB4sYbhd6LQpOmBrzkFkdIX7\nXhdCcqCLSDMiw2SxCSwJJJWN4NgrlhsXLFNTszSf8EWIPKjKjquUtrnX43yw29A=\n=QSYK\n-----END PGP SIGNATURE-----\n", "payload": "tree 50e7c4bc9bd8192437d49371a4dfc5530bbf00eb\nparent 189626672d4a8a838643ed612e568403aec27701\nparent 80ed505c41319f2fbbc7e97189e62b38c47b5a70\nauthor Dylan DPC <dylan.dpc@gmail.com> 1583442245 +0100\ncommitter GitHub <noreply@github.com> 1583442245 +0100\n\nRollup merge of #69713 - matthiaskrgr:more_cleanup, r=cramertj\n\nmore clippy cleanups\n\n* Don't use .ok() before unwrapping via .expect() on a Result.\n* Use .map() to modify data inside Options instead of using .and_then(|x| Some(y))\n* Use .as_deref() instead of .as_ref().map(Deref::deref)\n* Don't use \"if let\" bindings to only check a value and not actually bind anything.\n* Use single-char patter on {ends,starts}_with and remove clone on copy type.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22a743bc1c242b539cd70116068e62b1bd686a10", "html_url": "https://github.com/rust-lang/rust/commit/22a743bc1c242b539cd70116068e62b1bd686a10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22a743bc1c242b539cd70116068e62b1bd686a10/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "189626672d4a8a838643ed612e568403aec27701", "url": "https://api.github.com/repos/rust-lang/rust/commits/189626672d4a8a838643ed612e568403aec27701", "html_url": "https://github.com/rust-lang/rust/commit/189626672d4a8a838643ed612e568403aec27701"}, {"sha": "80ed505c41319f2fbbc7e97189e62b38c47b5a70", "url": "https://api.github.com/repos/rust-lang/rust/commits/80ed505c41319f2fbbc7e97189e62b38c47b5a70", "html_url": "https://github.com/rust-lang/rust/commit/80ed505c41319f2fbbc7e97189e62b38c47b5a70"}], "stats": {"total": 70, "additions": 32, "deletions": 38}, "files": [{"sha": "63d7124ee91f9d1f06a6e9e788c5194dcfc097db", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -415,9 +415,9 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::ReferenceOutlivesReferent(ty) => {\n                 tcx.lift(&ty).map(super::ReferenceOutlivesReferent)\n             }\n-            super::ObjectTypeBound(ty, r) => tcx\n-                .lift(&ty)\n-                .and_then(|ty| tcx.lift(&r).and_then(|r| Some(super::ObjectTypeBound(ty, r)))),\n+            super::ObjectTypeBound(ty, r) => {\n+                tcx.lift(&ty).and_then(|ty| tcx.lift(&r).map(|r| super::ObjectTypeBound(ty, r)))\n+            }\n             super::ObjectCastObligation(ty) => tcx.lift(&ty).map(super::ObjectCastObligation),\n             super::Coercion { source, target } => {\n                 Some(super::Coercion { source: tcx.lift(&source)?, target: tcx.lift(&target)? })"}, {"sha": "0c243128104e789fb447af1be383e317ec22ee18", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -725,7 +725,7 @@ pub(crate) unsafe fn codegen(\n                         Err(_) => return 0,\n                     };\n \n-                    if let Err(_) = write!(cursor, \"{:#}\", demangled) {\n+                    if write!(cursor, \"{:#}\", demangled).is_err() {\n                         // Possible only if provided buffer is not big enough\n                         return 0;\n                     }"}, {"sha": "3466363ac797227b4febe21cf5099e958e5718d9", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -174,7 +174,6 @@ pub unsafe fn create_module(\n \n         let llvm_data_layout = llvm::LLVMGetDataLayout(llmod);\n         let llvm_data_layout = str::from_utf8(CStr::from_ptr(llvm_data_layout).to_bytes())\n-            .ok()\n             .expect(\"got a non-UTF8 data-layout from LLVM\");\n \n         // Unfortunately LLVM target specs change over time, and right now we"}, {"sha": "b313bf57d4a9a016a4f108a4b8d9d1d9a978b9c7", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -1257,7 +1257,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                 if main_thread_worker_state == MainThreadWorkerState::Idle {\n                     if !queue_full_enough(work_items.len(), running, max_workers) {\n                         // The queue is not full enough, codegen more items:\n-                        if let Err(_) = codegen_worker_send.send(Message::CodegenItem) {\n+                        if codegen_worker_send.send(Message::CodegenItem).is_err() {\n                             panic!(\"Could not send Message::CodegenItem to main thread\")\n                         }\n                         main_thread_worker_state = MainThreadWorkerState::Codegenning;"}, {"sha": "f0e388a597b408ff554449d657ecc0c20e70bbb9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -163,7 +163,7 @@ impl CodeSuggestion {\n                         None => buf.push_str(&line[lo..]),\n                     }\n                 }\n-                if let None = hi_opt {\n+                if hi_opt.is_none() {\n                     buf.push('\\n');\n                 }\n             }"}, {"sha": "32700c6500bc86619a05fd1d09a546c7d64c6885", "filename": "src/librustc_errors/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_errors%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_errors%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fregistry.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -27,6 +27,6 @@ impl Registry {\n         if !self.long_descriptions.contains_key(code) {\n             return Err(InvalidErrorCode);\n         }\n-        Ok(self.long_descriptions.get(code).unwrap().clone())\n+        Ok(*self.long_descriptions.get(code).unwrap())\n     }\n }"}, {"sha": "7866ddbd4ccd85e8bf3642d05c24ab0e1952bc9e", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -426,7 +426,7 @@ pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut\n     for a in attrs.iter() {\n         if a.check_name(sym::crate_type) {\n             if let Some(n) = a.value_str() {\n-                if let Some(_) = categorize_crate_type(n) {\n+                if categorize_crate_type(n).is_some() {\n                     return;\n                 }\n "}, {"sha": "a6e8a0ab9301c1c3660dc50cfab99c937bdd6bdd", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -335,7 +335,7 @@ impl LintStore {\n             lint_name.to_string()\n         };\n         // If the lint was scoped with `tool::` check if the tool lint exists\n-        if let Some(_) = tool_name {\n+        if tool_name.is_some() {\n             match self.by_name.get(&complete_name) {\n                 None => match self.lint_groups.get(&*complete_name) {\n                     None => return CheckLintNameResult::Tool(Err((None, String::new()))),"}, {"sha": "652de6c7b6fdf0d6abef7dd2064b3addec1b9c22", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -1905,7 +1905,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // expressions evaluate through `as_temp` or `into` a return\n             // slot or local, so to find all unsized rvalues it is enough\n             // to check all temps, return slots and locals.\n-            if let None = self.reported_errors.replace((ty, span)) {\n+            if self.reported_errors.replace((ty, span)).is_none() {\n                 let mut diag = struct_span_err!(\n                     self.tcx().sess,\n                     span,"}, {"sha": "b0f048ff1a6fdbd0da04c0d29638088b27ba356b", "filename": "src/librustc_mir/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -64,7 +64,7 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n     }\n \n     fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n-        if let Some(_) = &mut self.borrowck_context {\n+        if self.borrowck_context.is_some() {\n             let origin = NLLRegionVariableOrigin::Existential { from_forall };\n             self.infcx.next_nll_region_var(origin)\n         } else {"}, {"sha": "3c4a1857f9690e80fb69c60c4a91e33aa540e2be", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -565,7 +565,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         // # Function pointers\n         // (both global from `alloc_map` and local from `extra_fn_ptr_map`)\n-        if let Some(_) = self.get_fn_alloc(id) {\n+        if self.get_fn_alloc(id).is_some() {\n             return if let AllocCheck::Dereferenceable = liveness {\n                 // The caller requested no function pointers.\n                 throw_unsup!(DerefFunctionPointer)"}, {"sha": "2dccb04f6cce1c1cca0ac434e3b25869ddf5b14b", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -37,7 +37,7 @@ impl<'a> Parser<'a> {\n                     let inner_parse_policy = InnerAttributeParsePolicy::NotPermitted {\n                         reason: inner_error_reason,\n                         saw_doc_comment: just_parsed_doc_comment,\n-                        prev_attr_sp: attrs.last().and_then(|a| Some(a.span)),\n+                        prev_attr_sp: attrs.last().map(|a| a.span),\n                     };\n                     let attr = self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?;\n                     attrs.push(attr);"}, {"sha": "86596e205562ed034919e2a15ac8567caecfe548", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -196,7 +196,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     // The file may be empty, which leads to the diagnostic machinery not emitting this\n     // note. This is a relatively simple way to detect that case and emit a span-less\n     // note instead.\n-    if let Ok(_) = tcx.sess.source_map().lookup_line(sp.lo()) {\n+    if tcx.sess.source_map().lookup_line(sp.lo()).is_ok() {\n         err.set_span(sp);\n         err.span_label(sp, &note);\n     } else {"}, {"sha": "fd62c802934255a7a85c961eb4601507601ab4e6", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -1086,7 +1086,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     for param in params {\n                         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span)\n                         {\n-                            if snippet.starts_with(\"&\") && !snippet.starts_with(\"&'\") {\n+                            if snippet.starts_with('&') && !snippet.starts_with(\"&'\") {\n                                 introduce_suggestion\n                                     .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n                             } else if snippet.starts_with(\"&'_ \") {\n@@ -1118,7 +1118,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 (1, Some(name), Some(\"'_\")) => {\n                     suggest_existing(err, name.to_string());\n                 }\n-                (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n+                (1, Some(name), Some(snippet)) if !snippet.ends_with('>') => {\n                     suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n                 }\n                 (0, _, Some(\"&\")) => {\n@@ -1127,7 +1127,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 (0, _, Some(\"'_\")) => {\n                     suggest_new(err, \"'a\");\n                 }\n-                (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n+                (0, _, Some(snippet)) if !snippet.ends_with('>') => {\n                     suggest_new(err, &format!(\"{}<'a>\", snippet));\n                 }\n                 _ => {"}, {"sha": "40cafb626d7c2e23c02789a38ba4ad9503b4852e", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -1550,21 +1550,18 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n             let method_names = pcx.candidate_method_names();\n             pcx.allow_similar_names = false;\n-            let applicable_close_candidates: Vec<ty::AssocItem> =\n-                method_names\n-                    .iter()\n-                    .filter_map(|&method_name| {\n-                        pcx.reset();\n-                        pcx.method_name = Some(method_name);\n-                        pcx.assemble_inherent_candidates();\n-                        pcx.assemble_extension_candidates_for_traits_in_scope(hir::DUMMY_HIR_ID)\n-                            .map_or(None, |_| {\n-                                pcx.pick_core()\n-                                    .and_then(|pick| pick.ok())\n-                                    .and_then(|pick| Some(pick.item))\n-                            })\n-                    })\n-                    .collect();\n+            let applicable_close_candidates: Vec<ty::AssocItem> = method_names\n+                .iter()\n+                .filter_map(|&method_name| {\n+                    pcx.reset();\n+                    pcx.method_name = Some(method_name);\n+                    pcx.assemble_inherent_candidates();\n+                    pcx.assemble_extension_candidates_for_traits_in_scope(hir::DUMMY_HIR_ID)\n+                        .map_or(None, |_| {\n+                            pcx.pick_core().and_then(|pick| pick.ok()).map(|pick| pick.item)\n+                        })\n+                })\n+                .collect();\n \n             if applicable_close_candidates.is_empty() {\n                 Ok(None)"}, {"sha": "21e3d24cc968b18c3a2e21ab8cdc4c39fa4f8d43", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -121,9 +121,7 @@ pub fn external_generic_args(\n     let args: Vec<_> = substs\n         .iter()\n         .filter_map(|kind| match kind.unpack() {\n-            GenericArgKind::Lifetime(lt) => {\n-                lt.clean(cx).and_then(|lt| Some(GenericArg::Lifetime(lt)))\n-            }\n+            GenericArgKind::Lifetime(lt) => lt.clean(cx).map(|lt| GenericArg::Lifetime(lt)),\n             GenericArgKind::Type(_) if skip_self => {\n                 skip_self = false;\n                 None"}, {"sha": "788cc9866155ca9ea01199173e0995a586c48ff4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a743bc1c242b539cd70116068e62b1bd686a10/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=22a743bc1c242b539cd70116068e62b1bd686a10", "patch": "@@ -296,7 +296,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                         \"\"\n                     }\n                 )),\n-                playground_button.as_ref().map(String::as_str),\n+                playground_button.as_deref(),\n                 Some((s1.as_str(), s2)),\n             ));\n             Some(Event::Html(s.into()))\n@@ -315,7 +315,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                         \"\"\n                     }\n                 )),\n-                playground_button.as_ref().map(String::as_str),\n+                playground_button.as_deref(),\n                 None,\n             ));\n             Some(Event::Html(s.into()))"}]}