{"sha": "f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNjFlZmFjMmJiMzdiNDBkNDA4MjI1NmNhNzc2Y2EyZGJjN2MwZTY=", "commit": {"author": {"name": "Baoshan Pang", "email": "baoshan.pang@windriver.com", "date": "2019-08-12T17:46:57Z"}, "committer": {"name": "Baoshan Pang", "email": "baoshan.pang@windriver.com", "date": "2019-08-14T05:07:43Z"}, "message": "1. support crt-static\n2. change armv7_wrs_vxworks to armv7_wrs_vxworks_eabihf.\n3. use wr-** instead of vx-**\n4. set PIE to false\n5. code cleanup", "tree": {"sha": "1e7589e142dd65f5b8acfbfd735c4aa9caa11a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e7589e142dd65f5b8acfbfd735c4aa9caa11a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "html_url": "https://github.com/rust-lang/rust/commit/f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/comments", "author": {"login": "bpangWR", "id": 53950092, "node_id": "MDQ6VXNlcjUzOTUwMDky", "avatar_url": "https://avatars.githubusercontent.com/u/53950092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpangWR", "html_url": "https://github.com/bpangWR", "followers_url": "https://api.github.com/users/bpangWR/followers", "following_url": "https://api.github.com/users/bpangWR/following{/other_user}", "gists_url": "https://api.github.com/users/bpangWR/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpangWR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpangWR/subscriptions", "organizations_url": "https://api.github.com/users/bpangWR/orgs", "repos_url": "https://api.github.com/users/bpangWR/repos", "events_url": "https://api.github.com/users/bpangWR/events{/privacy}", "received_events_url": "https://api.github.com/users/bpangWR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bpangWR", "id": 53950092, "node_id": "MDQ6VXNlcjUzOTUwMDky", "avatar_url": "https://avatars.githubusercontent.com/u/53950092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpangWR", "html_url": "https://github.com/bpangWR", "followers_url": "https://api.github.com/users/bpangWR/followers", "following_url": "https://api.github.com/users/bpangWR/following{/other_user}", "gists_url": "https://api.github.com/users/bpangWR/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpangWR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpangWR/subscriptions", "organizations_url": "https://api.github.com/users/bpangWR/orgs", "repos_url": "https://api.github.com/users/bpangWR/repos", "events_url": "https://api.github.com/users/bpangWR/events{/privacy}", "received_events_url": "https://api.github.com/users/bpangWR/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60960a260f7b5c695fd0717311d72ce62dd4eb43", "url": "https://api.github.com/repos/rust-lang/rust/commits/60960a260f7b5c695fd0717311d72ce62dd4eb43", "html_url": "https://github.com/rust-lang/rust/commit/60960a260f7b5c695fd0717311d72ce62dd4eb43"}], "stats": {"total": 227, "additions": 25, "deletions": 202}, "files": [{"sha": "a4cb81d3d1b1b02716417c3c26752f7284b3a2f5", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "patch": "@@ -46,7 +46,7 @@ fn cc2ar(cc: &Path, target: &str) -> Option<PathBuf> {\n     } else if target.contains(\"openbsd\") {\n         Some(PathBuf::from(\"ar\"))\n     } else if target.contains(\"vxworks\") {\n-        Some(PathBuf::from(\"vx-ar\"))\n+        Some(PathBuf::from(\"wr-ar\"))\n     } else {\n         let parent = cc.parent().unwrap();\n         let file = cc.file_name().unwrap().to_str().unwrap();"}, {"sha": "65caeac5ed1adca7bb7cba28e93a691e4b6303e2", "filename": "src/librustc_target/spec/aarch64_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs?ref=f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "patch": "@@ -9,15 +9,14 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        target_env: \"gnu\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"vxworks\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n-            target_mcount: \"\\u{1}_mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "bde903de102212370bff818009362b10a427688c", "filename": "src/librustc_target/spec/arm_wrs_vxworks_sf.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Farm_wrs_vxworks_sf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Farm_wrs_vxworks_sf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_wrs_vxworks_sf.rs?ref=60960a260f7b5c695fd0717311d72ce62dd4eb43", "patch": "@@ -1,25 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::vxworks_base::opts();\n-    base.max_atomic_width = Some(64);\n-    Ok(Target {\n-        llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-\n-        options: TargetOptions {\n-            features: \"+strict-align,+v6\".to_string(),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            .. base\n-        },\n-    })\n-}"}, {"sha": "06c51ae61068f3ef83db158cba14cae036d7016c", "filename": "src/librustc_target/spec/armv7_wrs_vxworks.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks.rs?ref=60960a260f7b5c695fd0717311d72ce62dd4eb43", "patch": "@@ -1,31 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n-\n-// This target is for glibc Linux on ARMv7 without NEON or\n-// thumb-mode. See the thumbv7neon variant for enabling both.\n-\n-pub fn target() -> TargetResult {\n-    let base = super::vxworks_base::opts();\n-    Ok(Target {\n-        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-\n-        options: TargetOptions {\n-            // Info about features at https://wiki.debian.org/ArmHardFloatPort\n-            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n-            max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            position_independent_executables: false,\n-            .. base\n-        }\n-    })\n-}"}, {"sha": "9e3b24dd327dcf4630c3a5b06bd89ddd88a431d2", "filename": "src/librustc_target/spec/armv7_wrs_vxworks_eabihf.rs", "status": "renamed", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs?ref=f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "patch": "@@ -1,8 +1,5 @@\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n-// This target is for glibc Linux on ARMv7 without NEON or\n-// thumb-mode. See the thumbv7neon variant for enabling both.\n-\n pub fn target() -> TargetResult {\n     let base = super::vxworks_base::opts();\n     Ok(Target {\n@@ -14,17 +11,14 @@ pub fn target() -> TargetResult {\n         arch: \"arm\".to_string(),\n         target_os: \"vxworks\".to_string(),\n         target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n+        target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-\n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            position_independent_executables: false,\n             .. base\n         }\n     })", "previous_filename": "src/librustc_target/spec/arm_wrs_vxworks.rs"}, {"sha": "355250e6eca7f152fe03701c8dc8dd277cf9bf2c", "filename": "src/librustc_target/spec/i586_wrs_vxworks.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Fi586_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Fi586_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi586_wrs_vxworks.rs?ref=60960a260f7b5c695fd0717311d72ce62dd4eb43", "patch": "@@ -1,8 +0,0 @@\n-use crate::spec::TargetResult;\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::i686_wrs_vxworks::target()?;\n-    base.options.cpu = \"pentium\".to_string();\n-    base.llvm_target = \"i586-unknown-linux-gnu\".to_string();\n-    Ok(base)\n-}"}, {"sha": "c5f9583a358563b2e27c9e26e2d8cbefe30c1f79", "filename": "src/librustc_target/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks.rs?ref=f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n         arch: \"x86\".to_string(),\n         target_os: \"vxworks\".to_string(),\n         target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n+        target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })"}, {"sha": "4b1ff5ccbe8aa238d4cdbab86ea4cbc6e666779b", "filename": "src/librustc_target/spec/i686_wrs_vxworks_gnu.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks_gnu.rs?ref=60960a260f7b5c695fd0717311d72ce62dd4eb43", "patch": "@@ -1,23 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::vxworks_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n-    base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.stack_probes = true;\n-\n-    Ok(Target {\n-        llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n-        arch: \"x86\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n-    })\n-}"}, {"sha": "aed31bd2fb2efe63016827d4d23e4f81311bafca", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "patch": "@@ -485,10 +485,9 @@ supported_targets! {\n \n     (\"nvptx64-nvidia-cuda\", nvptx64_nvidia_cuda),\n \n-    (\"x86_64-wrs-vxworks\", x86_64_wrs_vxworks),\n     (\"i686-wrs-vxworks\", i686_wrs_vxworks),\n-    (\"i586-wrs-vxworks\", i586_wrs_vxworks),\n-    (\"armv7-wrs-vxworks\", armv7_wrs_vxworks),\n+    (\"x86_64-wrs-vxworks\", x86_64_wrs_vxworks),\n+    (\"armv7-wrs-vxworks-eabihf\", armv7_wrs_vxworks_eabihf),\n     (\"aarch64-wrs-vxworks\", aarch64_wrs_vxworks),\n     (\"powerpc-wrs-vxworks\", powerpc_wrs_vxworks),\n     (\"powerpc-wrs-vxworks-spe\", powerpc_wrs_vxworks_spe),"}, {"sha": "27a84b953dd07453749392326243eb3229bb7116", "filename": "src/librustc_target/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "patch": "@@ -15,10 +15,9 @@ pub fn target() -> TargetResult {\n         arch: \"powerpc64\".to_string(),\n         target_os: \"vxworks\".to_string(),\n         target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n+        target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            target_mcount: \"_mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "c2dae8535a2870b2fb58b624e0a4d6a348872136", "filename": "src/librustc_target/spec/powerpc64_wrs_vxworks_gnusf.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks_gnusf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks_gnusf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks_gnusf.rs?ref=60960a260f7b5c695fd0717311d72ce62dd4eb43", "patch": "@@ -1,26 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::vxworks_base::opts();\n-    base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.max_atomic_width = Some(64);\n-\n-    Ok(Target {\n-        llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n-        target_pointer_width: \"64\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n-        arch: \"powerpc64\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions {\n-            features: \"-hard-float\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            .. base\n-        },\n-    })\n-}"}, {"sha": "a4d2897f892282ec3a8547bff3f647fd94888cc1", "filename": "src/librustc_target/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "patch": "@@ -19,7 +19,6 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             features: \"+secure-plt\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "43723ea7c0cc8404c0a3a93fe89d97c24a270c32", "filename": "src/librustc_target/spec/powerpc_wrs_vxworks_gnusf.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnusf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnusf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnusf.rs?ref=60960a260f7b5c695fd0717311d72ce62dd4eb43", "patch": "@@ -1,26 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"--secure-plt\".to_string());\n-    base.max_atomic_width = Some(32);\n-\n-    Ok(Target {\n-        llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions {\n-            features: \"+secure-plt,-hard-float\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            .. base\n-        },\n-    })\n-}"}, {"sha": "8f236235867e57bba34a2ed93c893d541065ee80", "filename": "src/librustc_target/spec/powerpc_wrs_vxworks_gnuspesf.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnuspesf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60960a260f7b5c695fd0717311d72ce62dd4eb43/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnuspesf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnuspesf.rs?ref=60960a260f7b5c695fd0717311d72ce62dd4eb43", "patch": "@@ -1,27 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mspe\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"--secure-plt\".to_string());\n-    base.max_atomic_width = Some(32);\n-\n-    Ok(Target {\n-        llvm_target: \"powerpc-unknown-linux-gnuspe\".to_string(),\n-        target_endian: \"big\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions {\n-            // feature msync would disable instruction 'fsync' which is not supported by fsl_p1p2\n-            features: \"+secure-plt,+msync,-hard-float\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            .. base\n-        },\n-    })\n-}"}, {"sha": "90118a148524236648edd3978aefd53d70fe8785", "filename": "src/librustc_target/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "patch": "@@ -20,7 +20,6 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             // feature msync would disable instruction 'fsync' which is not supported by fsl_p1p2\n             features: \"+secure-plt,+msync\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "16acd411dca8177c9f51039147a03d8e08f37238", "filename": "src/librustc_target/spec/vxworks_base.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs?ref=f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "patch": "@@ -1,7 +1,11 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let mut args_crt = LinkArgs::new();\n+    args_crt.insert(LinkerFlavor::Gcc, vec![\n+        \"--static-crt\".to_string(),\n+    ]);\n     let mut args = LinkArgs::new();\n     args.insert(LinkerFlavor::Gcc, vec![\n         // We want to be able to strip as much executable code as possible\n@@ -12,30 +16,25 @@ pub fn opts() -> TargetOptions {\n         // following libraries so we're sure to pass it as one of the first\n         // arguments.\n         \"-Wl,--as-needed\".to_string(),\n-\n-        // Always enable NX protection when it is available\n-        \"-Wl,-z,noexecstack\".to_string(),\n-    ]);\n-\n-    let mut late_lk_args = LinkArgs::new();\n-    late_lk_args.insert(LinkerFlavor::Gcc, vec![\n-        \"-lnet\".to_string(),\n-        \"-lunix\".to_string(),\n     ]);\n \n     TargetOptions {\n-        linker: Some(\"vx-cxx\".to_string()),\n+        linker: Some(\"wr-c++\".to_string()),\n         exe_suffix: \".vxe\".to_string(),\n-        late_link_args: late_lk_args,\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,\n-        position_independent_executables: true,\n-        relro_level: RelroLevel::Full,\n+        position_independent_executables: false,\n         has_elf_tls: true,\n+        pre_link_args_crt: args_crt,\n+        crt_static_default: true,\n+        crt_static_respected: true,\n+        crt_static_allows_dylibs: true,\n+        // VxWorks needs to implement this to support profiling\n+        target_mcount: \"_mcount\".to_string(),\n         .. Default::default()\n     }\n }"}, {"sha": "1ab2f3a47c481abc55db7a07d7047e216d80fb9b", "filename": "src/librustc_target/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Flibrustc_target%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "patch": "@@ -6,6 +6,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n+    base.disable_redzone = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),"}, {"sha": "3da6be74129f457d356f7279d16b24f8dc0cd8dd", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f161efac2bb37b40d4082256ca776ca2dbc7c0e6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f161efac2bb37b40d4082256ca776ca2dbc7c0e6", "patch": "@@ -1659,10 +1659,10 @@ impl<'test> TestCx<'test> {\n             _ if self.config.target.contains(\"vxworks\") => {\n                 let aux_dir = self.aux_output_dir_name();\n                 let ProcArgs { prog, args } = self.make_run_args();\n-                let mut vx_run = Command::new(\"vx-run\");\n-                vx_run.args(&[&prog]).args(args).envs(env.clone());\n+                let mut wr_run = Command::new(\"wr-run\");\n+                wr_run.args(&[&prog]).args(args).envs(env.clone());\n                 self.compose_and_run(\n-                    vx_run,\n+                    wr_run,\n                     self.config.run_lib_path.to_str().unwrap(),\n                     Some(aux_dir.to_str().unwrap()),\n                     None,"}]}