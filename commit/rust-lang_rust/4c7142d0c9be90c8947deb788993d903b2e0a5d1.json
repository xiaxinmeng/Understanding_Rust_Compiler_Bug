{"sha": "4c7142d0c9be90c8947deb788993d903b2e0a5d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNzE0MmQwYzliZTkwYzg5NDdkZWI3ODg5OTNkOTAzYjJlMGE1ZDE=", "commit": {"author": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-03-21T17:06:48Z"}, "committer": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-03-21T23:04:48Z"}, "message": "Add fuzz test for reparsing", "tree": {"sha": "0fc0ebe4aa7918e39b4e95d23ad192a0734f339a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc0ebe4aa7918e39b4e95d23ad192a0734f339a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c7142d0c9be90c8947deb788993d903b2e0a5d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c7142d0c9be90c8947deb788993d903b2e0a5d1", "html_url": "https://github.com/rust-lang/rust/commit/4c7142d0c9be90c8947deb788993d903b2e0a5d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c7142d0c9be90c8947deb788993d903b2e0a5d1/comments", "author": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e734190c24d2a5aca5b62c2b1ab7e6136017a25c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e734190c24d2a5aca5b62c2b1ab7e6136017a25c", "html_url": "https://github.com/rust-lang/rust/commit/e734190c24d2a5aca5b62c2b1ab7e6136017a25c"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "613ad2857d00cea160247df48f8c9bdeebac2ea5", "filename": "crates/ra_syntax/fuzz/Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c7142d0c9be90c8947deb788993d903b2e0a5d1/crates%2Fra_syntax%2Ffuzz%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c7142d0c9be90c8947deb788993d903b2e0a5d1/crates%2Fra_syntax%2Ffuzz%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ffuzz%2FCargo.toml?ref=4c7142d0c9be90c8947deb788993d903b2e0a5d1", "patch": "@@ -11,6 +11,7 @@ cargo-fuzz = true\n \n [dependencies]\n ra_syntax = { path = \"..\" }\n+ra_text_edit = { path = \"../../ra_text_edit\" }\n libfuzzer-sys = { git = \"https://github.com/rust-fuzz/libfuzzer-sys.git\" }\n \n # Prevent this from interfering with workspaces\n@@ -20,3 +21,7 @@ members = [\".\"]\n [[bin]]\n name = \"parser\"\n path = \"fuzz_targets/parser.rs\"\n+\n+[[bin]]\n+name = \"reparse\"\n+path = \"fuzz_targets/reparse.rs\""}, {"sha": "45524d4c123accedb2e5644d25242625b9a0a986", "filename": "crates/ra_syntax/fuzz/fuzz_targets/reparse.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c7142d0c9be90c8947deb788993d903b2e0a5d1/crates%2Fra_syntax%2Ffuzz%2Ffuzz_targets%2Freparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7142d0c9be90c8947deb788993d903b2e0a5d1/crates%2Fra_syntax%2Ffuzz%2Ffuzz_targets%2Freparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ffuzz%2Ffuzz_targets%2Freparse.rs?ref=4c7142d0c9be90c8947deb788993d903b2e0a5d1", "patch": "@@ -0,0 +1,9 @@\n+#![no_main]\n+use libfuzzer_sys::fuzz_target;\n+use ra_syntax::fuzz::CheckReparse;\n+\n+fuzz_target!(|data: &[u8]| {\n+    if let Some(check) = CheckReparse::from_data(data) {\n+        check.run();\n+    }\n+});"}, {"sha": "efb080ac20f6a1ef0898ed6b0d9031103dc6418e", "filename": "crates/ra_syntax/src/fuzz.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4c7142d0c9be90c8947deb788993d903b2e0a5d1/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7142d0c9be90c8947deb788993d903b2e0a5d1/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs?ref=4c7142d0c9be90c8947deb788993d903b2e0a5d1", "patch": "@@ -1,4 +1,6 @@\n-use crate::{SourceFile, validation, AstNode};\n+use crate::{SourceFile, validation, TextUnit, TextRange, AstNode};\n+use ra_text_edit::AtomTextEdit;\n+use std::str::{self, FromStr};\n \n fn check_file_invariants(file: &SourceFile) {\n     let root = file.syntax();\n@@ -10,3 +12,41 @@ pub fn check_parser(text: &str) {\n     let file = SourceFile::parse(text);\n     check_file_invariants(&file);\n }\n+\n+#[derive(Debug, Clone)]\n+pub struct CheckReparse {\n+    text: String,\n+    edit: AtomTextEdit,\n+    edited_text: String,\n+}\n+\n+impl CheckReparse {\n+    pub fn from_data(data: &[u8]) -> Option<Self> {\n+        let data = str::from_utf8(data).ok()?;\n+        let mut lines = data.lines();\n+        let delete_start = usize::from_str(lines.next()?).ok()?;\n+        let delete_len = usize::from_str(lines.next()?).ok()?;\n+        let insert = lines.next()?.to_string();\n+        let text = lines.collect::<Vec<_>>().join(\"\\n\");\n+        text.get(delete_start..delete_start.checked_add(delete_len)?)?; // make sure delete is a valid range\n+        let delete = TextRange::offset_len(\n+            TextUnit::from_usize(delete_start),\n+            TextUnit::from_usize(delete_len),\n+        );\n+        let edited_text =\n+            format!(\"{}{}{}\", &text[..delete_start], &insert, &text[delete_start + delete_len..]);\n+        let edit = AtomTextEdit { delete, insert };\n+        Some(CheckReparse { text, edit, edited_text })\n+    }\n+\n+    pub fn run(&self) {\n+        let file = SourceFile::parse(&self.text);\n+        let new_file = file.reparse(&self.edit);\n+        check_file_invariants(&new_file);\n+        assert_eq!(&new_file.syntax().text().to_string(), &self.edited_text);\n+        let full_reparse = SourceFile::parse(&self.edited_text);\n+        for (a, b) in new_file.syntax().descendants().zip(full_reparse.syntax().descendants()) {\n+            assert_eq!(a.kind(), b.kind(), \"different syntax tree produced by a full reparse\");\n+        }\n+    }\n+}"}, {"sha": "537b01368b03100bd32358093e5405a897c031bb", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c7142d0c9be90c8947deb788993d903b2e0a5d1/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7142d0c9be90c8947deb788993d903b2e0a5d1/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=4c7142d0c9be90c8947deb788993d903b2e0a5d1", "patch": "@@ -51,6 +51,15 @@ fn parser_fuzz_tests() {\n     }\n }\n \n+#[test]\n+fn reparse_fuzz_tests() {\n+    for (_, text) in collect_tests(&test_data_dir(), &[\"reparse/fuzz-failures\"]) {\n+        let check = fuzz::CheckReparse::from_data(text.as_bytes()).unwrap();\n+        println!(\"{:?}\", check);\n+        check.run();\n+    }\n+}\n+\n /// Test that Rust-analyzer can parse and validate the rust-analyser\n /// TODO: Use this as a benchmark\n #[test]"}]}