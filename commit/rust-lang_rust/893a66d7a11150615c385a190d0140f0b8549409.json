{"sha": "893a66d7a11150615c385a190d0140f0b8549409", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5M2E2NmQ3YTExMTUwNjE1YzM4NWExOTBkMDE0MGYwYjg1NDk0MDk=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-14T21:27:58Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-06T11:40:57Z"}, "message": "Split Call into Call and DivergingCall\n\nDivergingCall is different enough from the regular converging Call to warrant the split. This also\ninlines CallData struct and creates a new CallTargets enum in order to have a way to differentiate\nbetween calls that do not have an associated cleanup block.\n\nNote, that this patch still does not produce DivergingCall terminator anywhere. Look for that in\nthe next patches.", "tree": {"sha": "8acfd3409cbfcb7483eb8666841b58205ce39751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8acfd3409cbfcb7483eb8666841b58205ce39751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/893a66d7a11150615c385a190d0140f0b8549409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/893a66d7a11150615c385a190d0140f0b8549409", "html_url": "https://github.com/rust-lang/rust/commit/893a66d7a11150615c385a190d0140f0b8549409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/893a66d7a11150615c385a190d0140f0b8549409/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7312e0a16328e6227d7fc593176a1fd12fea4342", "url": "https://api.github.com/repos/rust-lang/rust/commits/7312e0a16328e6227d7fc593176a1fd12fea4342", "html_url": "https://github.com/rust-lang/rust/commit/7312e0a16328e6227d7fc593176a1fd12fea4342"}], "stats": {"total": 170, "additions": 113, "deletions": 57}, "files": [{"sha": "42c9b7b0f39abd112554f9b14ba7518dc095112a", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 65, "deletions": 30, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/893a66d7a11150615c385a190d0140f0b8549409/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893a66d7a11150615c385a190d0140f0b8549409/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=893a66d7a11150615c385a190d0140f0b8549409", "patch": "@@ -256,13 +256,51 @@ pub enum Terminator<'tcx> {\n     /// `END_BLOCK`.\n     Return,\n \n-    /// block ends with a call; it should have two successors. The\n-    /// first successor indicates normal return. The second indicates\n-    /// unwinding.\n+    /// Block ends with a call of a converging function\n     Call {\n-        data: CallData<'tcx>,\n-        targets: (BasicBlock, BasicBlock),\n+        /// The function that\u2019s being called\n+        func: Operand<'tcx>,\n+        /// Arguments the function is called with\n+        args: Vec<Operand<'tcx>>,\n+        /// Location to write the return value into\n+        destination: Lvalue<'tcx>,\n+        targets: CallTargets,\n     },\n+\n+    /// Block ends with a call of a diverging function.\n+    DivergingCall {\n+        /// The function that\u2019s being called\n+        func: Operand<'tcx>,\n+        /// Arguments the function is called with\n+        args: Vec<Operand<'tcx>>,\n+        /// Some, if there\u2019s any cleanup to be done when function unwinds\n+        cleanup: Option<BasicBlock>,\n+    }\n+}\n+\n+#[derive(RustcEncodable, RustcDecodable)]\n+pub enum CallTargets {\n+    /// The only target that should be entered when function returns normally.\n+    Return(BasicBlock),\n+    /// In addition to the normal-return block, function has associated cleanup that should be done\n+    /// when function unwinds.\n+    WithCleanup((BasicBlock, BasicBlock))\n+}\n+\n+impl CallTargets {\n+    pub fn as_slice(&self) -> &[BasicBlock] {\n+        match *self {\n+            CallTargets::Return(ref b) => slice::ref_slice(b),\n+            CallTargets::WithCleanup(ref bs) => bs.as_slice()\n+        }\n+    }\n+\n+    pub fn as_mut_slice(&mut self) -> &mut [BasicBlock] {\n+        match *self {\n+            CallTargets::Return(ref mut b) => slice::mut_ref_slice(b),\n+            CallTargets::WithCleanup(ref mut bs) => bs.as_mut_slice()\n+        }\n+    }\n }\n \n impl<'tcx> Terminator<'tcx> {\n@@ -271,12 +309,17 @@ impl<'tcx> Terminator<'tcx> {\n         match *self {\n             Goto { target: ref b } => slice::ref_slice(b),\n             Panic { target: ref b } => slice::ref_slice(b),\n-            If { cond: _, targets: ref b } => b.as_slice(),\n+            If { targets: ref b, .. } => b.as_slice(),\n             Switch { targets: ref b, .. } => b,\n             SwitchInt { targets: ref b, .. } => b,\n             Diverge => &[],\n             Return => &[],\n-            Call { data: _, targets: ref b } => b.as_slice(),\n+            Call { targets: ref b, .. } => b.as_slice(),\n+            DivergingCall { cleanup: ref b, .. } => if let Some(b) = b.as_ref() {\n+                slice::ref_slice(b)\n+            } else {\n+                &mut []\n+            },\n         }\n     }\n \n@@ -285,28 +328,21 @@ impl<'tcx> Terminator<'tcx> {\n         match *self {\n             Goto { target: ref mut b } => slice::mut_ref_slice(b),\n             Panic { target: ref mut b } => slice::mut_ref_slice(b),\n-            If { cond: _, targets: ref mut b } => b.as_mut_slice(),\n+            If { targets: ref mut b, .. } => b.as_mut_slice(),\n             Switch { targets: ref mut b, .. } => b,\n             SwitchInt { targets: ref mut b, .. } => b,\n             Diverge => &mut [],\n             Return => &mut [],\n-            Call { data: _, targets: ref mut b } => b.as_mut_slice(),\n+            Call { targets: ref mut b, .. } => b.as_mut_slice(),\n+            DivergingCall { cleanup: ref mut b, .. } => if let Some(b) = b.as_mut() {\n+                slice::mut_ref_slice(b)\n+            } else {\n+                &mut []\n+            },\n         }\n     }\n }\n \n-#[derive(Debug, RustcEncodable, RustcDecodable)]\n-pub struct CallData<'tcx> {\n-    /// where the return value is written to\n-    pub destination: Lvalue<'tcx>,\n-\n-    /// the fn being called\n-    pub func: Operand<'tcx>,\n-\n-    /// the arguments\n-    pub args: Vec<Operand<'tcx>>,\n-}\n-\n impl<'tcx> BasicBlockData<'tcx> {\n     pub fn new(terminator: Terminator<'tcx>) -> BasicBlockData<'tcx> {\n         BasicBlockData {\n@@ -357,15 +393,13 @@ impl<'tcx> Terminator<'tcx> {\n             SwitchInt { discr: ref lv, .. } => write!(fmt, \"switchInt({:?})\", lv),\n             Diverge => write!(fmt, \"diverge\"),\n             Return => write!(fmt, \"return\"),\n-            Call { data: ref c, .. } => {\n-                try!(write!(fmt, \"{:?} = {:?}(\", c.destination, c.func));\n-                for (index, arg) in c.args.iter().enumerate() {\n-                    if index > 0 {\n-                        try!(write!(fmt, \", \"));\n-                    }\n-                    try!(write!(fmt, \"{:?}\", arg));\n-                }\n-                write!(fmt, \")\")\n+            Call { .. } => {\n+                // the author didn\u2019t bother rebasing this\n+                unimplemented!()\n+            },\n+            DivergingCall { .. } => {\n+                // the author didn\u2019t bother rebasing this\n+                unimplemented!()\n             }\n         }\n     }\n@@ -378,6 +412,7 @@ impl<'tcx> Terminator<'tcx> {\n             Goto { .. } | Panic { .. } => vec![\"\".into_cow()],\n             If { .. } => vec![\"true\".into_cow(), \"false\".into_cow()],\n             Call { .. } => vec![\"return\".into_cow(), \"unwind\".into_cow()],\n+            DivergingCall { .. } => vec![\"unwind\".into_cow()],\n             Switch { ref adt_def, .. } => {\n                 adt_def.variants\n                        .iter()"}, {"sha": "c3a335fdfaac3781c60778167c159383df91431b", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/893a66d7a11150615c385a190d0140f0b8549409/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893a66d7a11150615c385a190d0140f0b8549409/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=893a66d7a11150615c385a190d0140f0b8549409", "patch": "@@ -137,16 +137,26 @@ pub trait Visitor<'tcx> {\n             Terminator::Return => {\n             }\n \n-            Terminator::Call { ref data, ref targets } => {\n-                self.visit_lvalue(&data.destination, LvalueContext::Store);\n-                self.visit_operand(&data.func);\n-                for arg in &data.args {\n+            Terminator::Call { ref func, ref args, ref destination, ref targets } => {\n+                self.visit_lvalue(destination, LvalueContext::Store);\n+                self.visit_operand(func);\n+                for arg in args {\n                     self.visit_operand(arg);\n                 }\n                 for &target in targets.as_slice() {\n                     self.visit_branch(block, target);\n                 }\n             }\n+\n+            Terminator::DivergingCall { ref func, ref args, ref cleanup } => {\n+                self.visit_operand(func);\n+                for arg in args {\n+                    self.visit_operand(arg);\n+                }\n+                for &target in cleanup.as_ref() {\n+                    self.visit_branch(block, target);\n+                }\n+            }\n         }\n     }\n \n@@ -424,16 +434,29 @@ pub trait MutVisitor<'tcx> {\n             Terminator::Return => {\n             }\n \n-            Terminator::Call { ref mut data, ref mut targets } => {\n-                self.visit_lvalue(&mut data.destination, LvalueContext::Store);\n-                self.visit_operand(&mut data.func);\n-                for arg in &mut data.args {\n+            Terminator::Call { ref mut func,\n+                               ref mut args,\n+                               ref mut destination,\n+                               ref mut targets } => {\n+                self.visit_lvalue(destination, LvalueContext::Store);\n+                self.visit_operand(func);\n+                for arg in args {\n                     self.visit_operand(arg);\n                 }\n                 for &target in targets.as_slice() {\n                     self.visit_branch(block, target);\n                 }\n             }\n+\n+            Terminator::DivergingCall { ref mut func, ref mut args, ref mut cleanup } => {\n+                self.visit_operand(func);\n+                for arg in args {\n+                    self.visit_operand(arg);\n+                }\n+                for &target in cleanup.as_ref() {\n+                    self.visit_branch(block, target);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "4a262196d367049fb264ade77e5e8ea695b60402", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/893a66d7a11150615c385a190d0140f0b8549409/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893a66d7a11150615c385a190d0140f0b8549409/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=893a66d7a11150615c385a190d0140f0b8549409", "patch": "@@ -218,14 +218,13 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                         .collect();\n                 let success = this.cfg.start_new_block();\n                 let panic = this.diverge_cleanup();\n+                let targets = CallTargets::WithCleanup((success, panic));\n                 this.cfg.terminate(block,\n                                    Terminator::Call {\n-                                       data: CallData {\n-                                           destination: destination.clone(),\n-                                           func: fun,\n-                                           args: args,\n-                                       },\n-                                       targets: (success, panic),\n+                                       func: fun,\n+                                       args: args,\n+                                       destination: destination.clone(),\n+                                       targets: targets\n                                    });\n                 success.unit()\n             }"}, {"sha": "1e7bb305cdbd2e2f79a7d803b61cd6afebd4b8db", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/893a66d7a11150615c385a190d0140f0b8549409/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893a66d7a11150615c385a190d0140f0b8549409/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=893a66d7a11150615c385a190d0140f0b8549409", "patch": "@@ -90,28 +90,23 @@ impl<'a, 'tcx> EraseRegions<'a, 'tcx> {\n             Terminator::Switch { ref mut discr, .. } => {\n                 self.erase_regions_lvalue(discr);\n             }\n-            Terminator::SwitchInt {\n-                ref mut discr,\n-                ref mut switch_ty,\n-                ..\n-            } => {\n+            Terminator::SwitchInt { ref mut discr, ref mut switch_ty, .. } => {\n                 self.erase_regions_lvalue(discr);\n                 *switch_ty = self.tcx.erase_regions(switch_ty);\n             },\n-            Terminator::Call {\n-                data: CallData {\n-                    ref mut destination,\n-                    ref mut func,\n-                    ref mut args\n-                },\n-                ..\n-            } => {\n+            Terminator::Call { ref mut destination, ref mut func, ref mut args, .. } => {\n                 self.erase_regions_lvalue(destination);\n                 self.erase_regions_operand(func);\n                 for arg in &mut *args {\n                     self.erase_regions_operand(arg);\n                 }\n             }\n+            Terminator::DivergingCall { ref mut func, ref mut args, .. } => {\n+                self.erase_regions_operand(func);\n+                for arg in &mut *args {\n+                    self.erase_regions_operand(arg);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "00508ed21e58e768b53a5b12ce0df4f94352f0e1", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893a66d7a11150615c385a190d0140f0b8549409/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893a66d7a11150615c385a190d0140f0b8549409/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=893a66d7a11150615c385a190d0140f0b8549409", "patch": "@@ -164,6 +164,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 }\n \n                 build::Br(bcx, self.llblock(targets.0), DebugLoc::None)\n+            },\n+\n+            mir::Terminator::DivergingCall { .. } => {\n+                unimplemented!()\n             }\n         }\n     }"}]}