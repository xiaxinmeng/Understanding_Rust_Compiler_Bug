{"sha": "9cb6499dde3826ade463c380d495afabca7aad5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYjY0OTlkZGUzODI2YWRlNDYzYzM4MGQ0OTVhZmFiY2E3YWFkNWM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-12-06T12:23:32Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-12-06T12:23:32Z"}, "message": "miri: don't use an associated constant for a Machine's own data.", "tree": {"sha": "28d0de0d3dcfa5a9ece76fdb72e81cff35d2994b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d0de0d3dcfa5a9ece76fdb72e81cff35d2994b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cb6499dde3826ade463c380d495afabca7aad5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb6499dde3826ade463c380d495afabca7aad5c", "html_url": "https://github.com/rust-lang/rust/commit/9cb6499dde3826ade463c380d495afabca7aad5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cb6499dde3826ade463c380d495afabca7aad5c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff6152cdc88f972f61530974b1b6fae08d9e8a7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6152cdc88f972f61530974b1b6fae08d9e8a7b", "html_url": "https://github.com/rust-lang/rust/commit/ff6152cdc88f972f61530974b1b6fae08d9e8a7b"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "dd8bf09586acce0f71f682de31ef492262a2fd1d", "filename": "src/librustc/mir/interpret/const_eval.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6499dde3826ade463c380d495afabca7aad5c/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6499dde3826ade463c380d495afabca7aad5c/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs?ref=9cb6499dde3826ade463c380d495afabca7aad5c", "patch": "@@ -17,10 +17,10 @@ pub fn eval_body<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     instance: Instance<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-) -> (EvalResult<'tcx, (PtrAndAlign, Ty<'tcx>)>, EvalContext<'a, 'tcx, CompileTimeFunctionEvaluator>) {\n+) -> (EvalResult<'tcx, (PtrAndAlign, Ty<'tcx>)>, EvalContext<'a, 'tcx, CompileTimeEvaluator>) {\n     debug!(\"eval_body: {:?}, {:?}\", instance, param_env);\n     let limits = super::ResourceLimits::default();\n-    let mut ecx = EvalContext::<CompileTimeFunctionEvaluator>::new(tcx, param_env, limits, (), ());\n+    let mut ecx = EvalContext::new(tcx, param_env, limits, CompileTimeEvaluator, ());\n     let cid = GlobalId {\n         instance,\n         promoted: None,\n@@ -120,7 +120,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n     })\n }\n \n-pub struct CompileTimeFunctionEvaluator;\n+pub struct CompileTimeEvaluator;\n \n impl<'tcx> Into<EvalError<'tcx>> for ConstEvalError {\n     fn into(self) -> EvalError<'tcx> {\n@@ -164,8 +164,7 @@ impl Error for ConstEvalError {\n     }\n }\n \n-impl<'tcx> super::Machine<'tcx> for CompileTimeFunctionEvaluator {\n-    type Data = ();\n+impl<'tcx> super::Machine<'tcx> for CompileTimeEvaluator {\n     type MemoryData = ();\n     type MemoryKinds = !;\n     fn eval_fn_call<'a>("}, {"sha": "f23946fbc16493aa2525f9132464783f5152ddf5", "filename": "src/librustc/mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6499dde3826ade463c380d495afabca7aad5c/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6499dde3826ade463c380d495afabca7aad5c/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs?ref=9cb6499dde3826ade463c380d495afabca7aad5c", "patch": "@@ -19,8 +19,8 @@ use super::{EvalError, EvalResult, EvalErrorKind, GlobalId, Place, PlaceExtra, M\n             ValidationQuery, Machine};\n \n pub struct EvalContext<'a, 'tcx: 'a, M: Machine<'tcx>> {\n-    /// Stores data required by the `Machine`\n-    pub machine_data: M::Data,\n+    /// Stores the `Machine` instance.\n+    pub machine: M,\n \n     /// The results of the type checker, from rustc.\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -217,11 +217,11 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         limits: ResourceLimits,\n-        machine_data: M::Data,\n+        machine: M,\n         memory_data: M::MemoryData,\n     ) -> Self {\n         EvalContext {\n-            machine_data,\n+            machine,\n             tcx,\n             param_env,\n             memory: Memory::new(tcx, limits.memory_size, memory_data),"}, {"sha": "3fbc69b80e58c3e22bf6f39e9693316472b1a733", "filename": "src/librustc/mir/interpret/machine.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6499dde3826ade463c380d495afabca7aad5c/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6499dde3826ade463c380d495afabca7aad5c/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs?ref=9cb6499dde3826ade463c380d495afabca7aad5c", "patch": "@@ -12,9 +12,6 @@ use syntax::ast::Mutability;\n /// Methods of this trait signifies a point where CTFE evaluation would fail\n /// and some use case dependent behaviour can instead be applied\n pub trait Machine<'tcx>: Sized {\n-    /// Additional data that can be accessed via the EvalContext\n-    type Data;\n-\n     /// Additional data that can be accessed via the Memory\n     type MemoryData;\n "}, {"sha": "9c1a3f09432d7b6044a9f72bf08ad3f7ba96a815", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6499dde3826ade463c380d495afabca7aad5c/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6499dde3826ade463c380d495afabca7aad5c/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=9cb6499dde3826ade463c380d495afabca7aad5c", "patch": "@@ -35,7 +35,7 @@ use self::range_map::RangeMap;\n \n pub use self::value::{PrimVal, PrimValKind, Value, Pointer};\n \n-pub use self::const_eval::{eval_body_as_integer, eval_body, CompileTimeFunctionEvaluator};\n+pub use self::const_eval::{eval_body_as_integer, eval_body, CompileTimeEvaluator};\n \n pub use self::machine::Machine;\n "}, {"sha": "f400380536ea3bca6c641448603d8dea21da6c98", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6499dde3826ade463c380d495afabca7aad5c/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6499dde3826ade463c380d495afabca7aad5c/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=9cb6499dde3826ade463c380d495afabca7aad5c", "patch": "@@ -24,7 +24,7 @@ use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeMap;\n \n use rustc::mir::interpret::{PrimVal, Value, PtrAndAlign, HasMemory, EvalError};\n-use rustc::mir::interpret::{CompileTimeFunctionEvaluator, EvalContext};\n+use rustc::mir::interpret::{CompileTimeEvaluator, EvalContext};\n use rustc::mir::Field;\n use rustc::mir::interpret::{Place, PlaceExtra};\n use rustc_data_structures::indexed_vec::Idx;\n@@ -754,7 +754,7 @@ pub(crate) fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn check_ctfe_against_miri<'a, 'tcx>(\n-    ecx: &mut EvalContext<'a, 'tcx, CompileTimeFunctionEvaluator>,\n+    ecx: &mut EvalContext<'a, 'tcx, CompileTimeEvaluator>,\n     miri_val: PtrAndAlign,\n     miri_ty: Ty<'tcx>,\n     ctfe: ConstVal<'tcx>,\n@@ -950,7 +950,7 @@ fn check_ctfe_against_miri<'a, 'tcx>(\n }\n \n fn get_prim<'a, 'tcx>(\n-    ecx: &mut EvalContext<'a, 'tcx, CompileTimeFunctionEvaluator>,\n+    ecx: &mut EvalContext<'a, 'tcx, CompileTimeEvaluator>,\n     res: Result<Option<Value>, EvalError<'tcx>>,\n ) -> u128 {\n     match res {\n@@ -961,7 +961,7 @@ fn get_prim<'a, 'tcx>(\n }\n \n fn unwrap_miri<'a, 'tcx, T>(\n-    ecx: &EvalContext<'a, 'tcx, CompileTimeFunctionEvaluator>,\n+    ecx: &EvalContext<'a, 'tcx, CompileTimeEvaluator>,\n     res: Result<T, EvalError<'tcx>>,\n ) -> T {\n     match res {"}]}