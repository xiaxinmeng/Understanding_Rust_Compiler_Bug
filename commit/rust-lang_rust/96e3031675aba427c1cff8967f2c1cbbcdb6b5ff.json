{"sha": "96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZTMwMzE2NzVhYmE0MjdjMWNmZjg5NjdmMmMxY2JiY2RiNmI1ZmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-21T05:08:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-22T00:14:02Z"}, "message": "rustdoc: Convert the astsrv constructor to a higher order fn\n\nThis will allow it to manage the destruction of the astsrv after\nI convert it to a task", "tree": {"sha": "2b6757b7c7733b753b303ada420b37221da072f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b6757b7c7733b753b303ada420b37221da072f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "html_url": "https://github.com/rust-lang/rust/commit/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6095dc6b5baa44c8d15db76dee185170b7be4b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6095dc6b5baa44c8d15db76dee185170b7be4b6", "html_url": "https://github.com/rust-lang/rust/commit/d6095dc6b5baa44c8d15db76dee185170b7be4b6"}], "stats": {"total": 365, "additions": 200, "deletions": 165}, "files": [{"sha": "7c5d435504ed6a2e92f31e24cf8aa448a3c123a3", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -32,26 +32,33 @@ type ctxt = {\n     exp_map: resolve::exp_map\n };\n \n+type srv_owner<T> = fn(srv: srv) -> T;\n type ctxt_handler<T> = fn~(ctxt: ctxt) -> T;\n \n type srv = {\n     ctxt: ctxt\n };\n \n-fn from_str(source: str) -> srv {\n+fn from_str<T>(source: str, owner: srv_owner<T>) -> T {\n     let (sess, ignore_errors) = build_session();\n-    {\n+\n+    let srv = {\n         ctxt: build_ctxt(sess, parse::from_str_sess(sess, source),\n                          ignore_errors)\n-    }\n+    };\n+\n+    owner(srv)\n }\n \n-fn from_file(file: str) -> srv {\n+fn from_file<T>(file: str, owner: srv_owner<T>) -> T {\n     let (sess, ignore_errors) = build_session();\n-    {\n+\n+    let srv = {\n         ctxt: build_ctxt(sess, parse::from_file_sess(sess, file),\n                          ignore_errors)\n-    }\n+    };\n+\n+    owner(srv)\n }\n \n fn build_ctxt(sess: session::session, ast: @ast::crate,\n@@ -172,28 +179,31 @@ fn build_error_handlers(\n #[test]\n fn should_prune_unconfigured_items() {\n     let source = \"#[cfg(shut_up_and_leave_me_alone)]fn a() { }\";\n-    let srv = from_str(source);\n-    exec(srv) {|ctxt|\n-        assert vec::is_empty(ctxt.ast.node.module.items);\n+    from_str(source) {|srv|\n+        exec(srv) {|ctxt|\n+            assert vec::is_empty(ctxt.ast.node.module.items);\n+        }\n     }\n }\n \n #[test]\n fn srv_should_build_ast_map() {\n     let source = \"fn a() { }\";\n-    let srv = from_str(source);\n-    exec(srv) {|ctxt|\n-        assert ctxt.ast_map.size() != 0u\n-    };\n+    from_str(source) {|srv|\n+        exec(srv) {|ctxt|\n+            assert ctxt.ast_map.size() != 0u\n+        };\n+    }\n }\n \n #[test]\n fn srv_should_build_reexport_map() {\n     let source = \"import a::b; export b; mod a { mod b { } }\";\n-    let srv = from_str(source);\n-    exec(srv) {|ctxt|\n-        assert ctxt.exp_map.size() != 0u\n-    };\n+    from_str(source) {|srv|\n+        exec(srv) {|ctxt|\n+            assert ctxt.exp_map.size() != 0u\n+        };\n+    }\n }\n \n #[test]\n@@ -202,34 +212,34 @@ fn srv_should_resolve_external_crates() {\n                   fn f() -> std::sha1::sha1 {\\\n                   std::sha1::mk_sha1() }\";\n     // Just testing that resolve doesn't crash\n-    from_str(source);\n+    from_str(source) {|_srv| }\n }\n \n #[test]\n fn srv_should_resolve_core_crate() {\n     let source = \"fn a() -> option { fail }\";\n     // Just testing that resolve doesn't crash\n-    from_str(source);\n+    from_str(source) {|_srv| }\n }\n \n #[test]\n fn srv_should_resolve_non_existant_imports() {\n     // We want to ignore things we can't resolve. Shouldn't\n     // need to be able to find external crates to create docs.\n     let source = \"import wooboo; fn a() { }\";\n-    from_str(source);\n+    from_str(source) {|_srv| }\n }\n \n #[test]\n fn srv_should_resolve_non_existant_uses() {\n     let source = \"use forble; fn a() { }\";\n-    from_str(source);\n+    from_str(source) {|_srv| }\n }\n \n #[test]\n fn should_ignore_external_import_paths_that_dont_exist() {\n     let source = \"use forble; import forble::bippy;\";\n-    from_str(source);\n+    from_str(source) {|_srv| }\n }\n \n fn exec<T:send>(\n@@ -242,7 +252,8 @@ fn exec<T:send>(\n #[test]\n fn srv_should_return_request_result() {\n     let source = \"fn a() { }\";\n-    let srv = from_str(source);\n-    let result = exec(srv) {|_ctxt| 1000};\n-    assert result == 1000;\n+    from_str(source) {|srv|\n+        let result = exec(srv) {|_ctxt| 1000};\n+        assert result == 1000;\n+    }\n }"}, {"sha": "f95d32b6cc74d1c71cd5d3803a12331eba3c9d92", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -183,23 +183,25 @@ fn should_extract_fn_arg_attributes() {\n #[test]\n fn should_extract_fn_return_attributes() {\n     let source = \"#[doc(return = \\\"what\\\")] fn a() -> int { }\";\n-    let srv = astsrv::from_str(source);\n-    let doc = extract::from_srv(srv, \"\");\n-    let doc = tystr_pass::mk_pass()(srv, doc);\n-    let fold = fold::default_seq_fold(srv);\n-    let doc = fold_fn(fold, doc.topmod.fns()[0]);\n-    assert doc.return.desc == some(\"what\");\n+    astsrv::from_str(source) {|srv|\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = tystr_pass::mk_pass()(srv, doc);\n+        let fold = fold::default_seq_fold(srv);\n+        let doc = fold_fn(fold, doc.topmod.fns()[0]);\n+        assert doc.return.desc == some(\"what\");\n+    }\n }\n \n #[test]\n fn should_preserve_fn_sig() {\n     let source = \"fn a() -> int { }\";\n-    let srv = astsrv::from_str(source);\n-    let doc = extract::from_srv(srv, \"\");\n-    let doc = tystr_pass::mk_pass()(srv, doc);\n-    let fold = fold::default_seq_fold(srv);\n-    let doc = fold_fn(fold, doc.topmod.fns()[0]);\n-    assert doc.sig == some(\"fn a() -> int\");\n+    astsrv::from_str(source) {|srv|\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = tystr_pass::mk_pass()(srv, doc);\n+        let fold = fold::default_seq_fold(srv);\n+        let doc = fold_fn(fold, doc.topmod.fns()[0]);\n+        assert doc.sig == some(\"fn a() -> int\");\n+    }\n }\n \n #[test]\n@@ -448,8 +450,9 @@ fn should_extract_type_docs() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        run(srv, doc)\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            run(srv, doc)\n+        }\n     }\n }\n\\ No newline at end of file"}, {"sha": "4e64c29b2957d027be0722e6df36a69ecda3725e", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -279,9 +279,10 @@ fn should_execute_op_on_type_desc() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = attr_pass::mk_pass()(srv, doc);\n-        mk_pass(str::trim)(srv, doc)\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            let doc = attr_pass::mk_pass()(srv, doc);\n+            mk_pass(str::trim)(srv, doc)\n+        }\n     }\n }\n\\ No newline at end of file"}, {"sha": "5bf983d43ebf6d65e4789b29cb089292d4039f69", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -147,10 +147,11 @@ fn should_promote_type_desc() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = attr_pass::mk_pass()(srv, doc);\n-        run(srv, doc)\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            let doc = attr_pass::mk_pass()(srv, doc);\n+            run(srv, doc)\n+        }\n     }\n }\n "}, {"sha": "004f1b6df17af8fdbf66b3eee067ba4d7f75fe32", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -379,8 +379,9 @@ mod test {\n     #[test]\n     fn extract_from_seq_srv() {\n         let source = \"\";\n-        let srv = astsrv::from_str(source);\n-        let doc = from_srv(srv, \"name\");\n-        assert doc.topmod.name() == \"name\";\n+        astsrv::from_str(source) {|srv|\n+            let doc = from_srv(srv, \"name\");\n+            assert doc.topmod.name() == \"name\";\n+        }\n     }\n }\n\\ No newline at end of file"}, {"sha": "1f82e892c0e5194166a1c5af3347ec00db7e7d0e", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -790,16 +790,17 @@ mod test {\n     }\n \n     fn create_doc_srv(source: str) -> (astsrv::srv, doc::cratedoc) {\n-        let srv = astsrv::from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        #debug(\"doc (extract): %?\", doc);\n-        let doc = tystr_pass::mk_pass()(srv, doc);\n-        #debug(\"doc (tystr): %?\", doc);\n-        let doc = path_pass::mk_pass()(srv, doc);\n-        #debug(\"doc (path): %?\", doc);\n-        let doc = attr_pass::mk_pass()(srv, doc);\n-        #debug(\"doc (attr): %?\", doc);\n-        (srv, doc)\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            #debug(\"doc (extract): %?\", doc);\n+            let doc = tystr_pass::mk_pass()(srv, doc);\n+            #debug(\"doc (tystr): %?\", doc);\n+            let doc = path_pass::mk_pass()(srv, doc);\n+            #debug(\"doc (path): %?\", doc);\n+            let doc = attr_pass::mk_pass()(srv, doc);\n+            #debug(\"doc (attr): %?\", doc);\n+            (srv, doc)\n+        }\n     }\n \n     fn create_doc(source: str) -> doc::cratedoc {\n@@ -836,11 +837,12 @@ mod test {\n \n     #[test]\n     fn write_markdown_should_write_crate_header() {\n-        let srv = astsrv::from_str(\"\");\n-        let doc = extract::from_srv(srv, \"belch\");\n-        let doc = attr_pass::mk_pass()(srv, doc);\n-        let markdown = write_markdown_str(doc);\n-        assert str::contains(markdown, \"# Crate belch\");\n+        astsrv::from_str(\"\") {|srv|\n+            let doc = extract::from_srv(srv, \"belch\");\n+            let doc = attr_pass::mk_pass()(srv, doc);\n+            let markdown = write_markdown_str(doc);\n+            assert str::contains(markdown, \"# Crate belch\");\n+        }\n     }\n \n     #[test]"}, {"sha": "01d3d6b731dd191db23854b957f8d8c7fa002e8c", "filename": "src/rustdoc/path_pass.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpath_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -45,18 +45,20 @@ fn fold_mod(fold: fold::fold<ctxt>, doc: doc::moddoc) -> doc::moddoc {\n #[test]\n fn should_record_mod_paths() {\n     let source = \"mod a { mod b { mod c { } } mod d { mod e { } } }\";\n-    let srv = astsrv::from_str(source);\n-    let doc = extract::from_srv(srv, \"\");\n-    let doc = run(srv, doc);\n-    assert doc.topmod.mods()[0].mods()[0].mods()[0].path() == [\"a\", \"b\"];\n-    assert doc.topmod.mods()[0].mods()[1].mods()[0].path() == [\"a\", \"d\"];\n+    astsrv::from_str(source) {|srv|\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = run(srv, doc);\n+        assert doc.topmod.mods()[0].mods()[0].mods()[0].path() == [\"a\", \"b\"];\n+        assert doc.topmod.mods()[0].mods()[1].mods()[0].path() == [\"a\", \"d\"];\n+    }\n }\n \n #[test]\n fn should_record_fn_paths() {\n     let source = \"mod a { fn b() { } }\";\n-    let srv = astsrv::from_str(source);\n-    let doc = extract::from_srv(srv, \"\");\n-    let doc = run(srv, doc);\n-    assert doc.topmod.mods()[0].fns()[0].path() == [\"a\"];\n+    astsrv::from_str(source) {|srv|\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = run(srv, doc);\n+        assert doc.topmod.mods()[0].fns()[0].path() == [\"a\"];\n+    }\n }\n\\ No newline at end of file"}, {"sha": "1a1c55bdf68b96f94213489299ef8528c77c640d", "filename": "src/rustdoc/prune_undoc_details_pass.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fprune_undoc_details_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fprune_undoc_details_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_details_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -64,12 +64,13 @@ fn should_elide_undocumented_arguments() {\n #[test]\n fn should_elide_undocumented_return_values() {\n     let source = \"#[doc = \\\"fonz\\\"] fn a() -> int { }\";\n-    let srv = astsrv::from_str(source);\n-    let doc = extract::from_srv(srv, \"\");\n-    let doc = tystr_pass::mk_pass()(srv, doc);\n-    let doc = attr_pass::mk_pass()(srv, doc);\n-    let doc = run(srv, doc);\n-    assert doc.topmod.fns()[0].return.ty == none;\n+    astsrv::from_str(source) {|srv|\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = tystr_pass::mk_pass()(srv, doc);\n+        let doc = attr_pass::mk_pass()(srv, doc);\n+        let doc = run(srv, doc);\n+        assert doc.topmod.fns()[0].return.ty == none;\n+    }\n }\n \n fn fold_res(\n@@ -154,9 +155,10 @@ fn should_elide_undocumented_impl_method_return_values() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = attr_pass::mk_pass()(srv, doc);\n-        run(srv, doc)\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            let doc = attr_pass::mk_pass()(srv, doc);\n+            run(srv, doc)\n+        }\n     }\n }"}, {"sha": "3109b2aaf470377af3e3bfc6924f91d34aa22089", "filename": "src/rustdoc/prune_undoc_items_pass.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_items_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -365,9 +365,10 @@ fn should_elide_undocumented_types() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = attr_pass::mk_pass()(srv, doc);\n-        run(srv, doc)\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            let doc = attr_pass::mk_pass()(srv, doc);\n+            run(srv, doc)\n+        }\n     }\n }"}, {"sha": "228137f354692324be6223c13e7ebe741fa5ae1b", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -229,8 +229,9 @@ fn should_prune_unexported_types() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        run(srv, doc)\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            run(srv, doc)\n+        }\n     }\n }\n\\ No newline at end of file"}, {"sha": "e6f2aeea234313d04bcb90f3ed6faa201ec698e4", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -289,14 +289,15 @@ fn should_duplicate_multiple_reexported_items() {\n                   import a::b; import a::c; \\\n                   export b; export c; \\\n                   }\";\n-    let srv = astsrv::from_str(source);\n-    let doc = extract::from_srv(srv, \"\");\n-    let doc = path_pass::mk_pass()(srv, doc);\n-    let doc = run(srv, doc);\n-    // Reexports may not be in any specific order\n-    let doc = sort_item_name_pass::mk_pass()(srv, doc);\n-    assert doc.topmod.mods()[1].fns()[0].name() == \"b\";\n-    assert doc.topmod.mods()[1].fns()[1].name() == \"c\";\n+    astsrv::from_str(source) {|srv|\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = path_pass::mk_pass()(srv, doc);\n+        let doc = run(srv, doc);\n+        // Reexports may not be in any specific order\n+        let doc = sort_item_name_pass::mk_pass()(srv, doc);\n+        assert doc.topmod.mods()[1].fns()[0].name() == \"b\";\n+        assert doc.topmod.mods()[1].fns()[1].name() == \"c\";\n+    }\n }\n \n #[test]\n@@ -310,9 +311,10 @@ fn should_rename_items_reexported_with_different_names() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = path_pass::mk_pass()(srv, doc);\n-        run(srv, doc)\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            let doc = path_pass::mk_pass()(srv, doc);\n+            run(srv, doc)\n+        }\n     }\n }"}, {"sha": "bc46dab13023f49adc65327e237eca887dc42539", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -71,11 +71,12 @@ fn test_run_passes() {\n         }\n     }\n     let source = \"\";\n-    let srv = astsrv::from_str(source);\n-    let passes = [pass1, pass2];\n-    let doc = extract::from_srv(srv, \"one\");\n-    let doc = run_passes(srv, doc, passes);\n-    assert doc.topmod.name() == \"onetwothree\";\n+    astsrv::from_str(source) {|srv|\n+        let passes = [pass1, pass2];\n+        let doc = extract::from_srv(srv, \"one\");\n+        let doc = run_passes(srv, doc, passes);\n+        assert doc.topmod.name() == \"onetwothree\";\n+    }\n }\n \n fn main(argv: [str]) {\n@@ -93,22 +94,23 @@ fn main(argv: [str]) {\n fn run(source_file: str) {\n \n     let default_name = source_file;\n-    let srv = astsrv::from_file(source_file);\n-    let doc = extract::from_srv(srv, default_name);\n-    run_passes(srv, doc, [\n-        prune_unexported_pass::mk_pass(),\n-        tystr_pass::mk_pass(),\n-        path_pass::mk_pass(),\n-        attr_pass::mk_pass(),\n-        prune_undoc_details_pass::mk_pass(),\n-        // FIXME: This pass should be optional\n-        // prune_undoc_items_pass::mk_pass(),\n-        desc_to_brief_pass::mk_pass(),\n-        trim_pass::mk_pass(),\n-        unindent_pass::mk_pass(),\n-        reexport_pass::mk_pass(),\n-        sort_item_name_pass::mk_pass(),\n-        sort_item_type_pass::mk_pass(),\n-        markdown_pass::mk_pass {|f| f(std::io:: stdout()) }\n-    ]);\n+    astsrv::from_file(source_file) {|srv|\n+        let doc = extract::from_srv(srv, default_name);\n+        run_passes(srv, doc, [\n+            prune_unexported_pass::mk_pass(),\n+            tystr_pass::mk_pass(),\n+            path_pass::mk_pass(),\n+            attr_pass::mk_pass(),\n+            prune_undoc_details_pass::mk_pass(),\n+            // FIXME: This pass should be optional\n+            // prune_undoc_items_pass::mk_pass(),\n+            desc_to_brief_pass::mk_pass(),\n+            trim_pass::mk_pass(),\n+            unindent_pass::mk_pass(),\n+            reexport_pass::mk_pass(),\n+            sort_item_name_pass::mk_pass(),\n+            sort_item_type_pass::mk_pass(),\n+            markdown_pass::mk_pass {|f| f(std::io:: stdout()) }\n+        ]);\n+    }\n }\n\\ No newline at end of file"}, {"sha": "73a5143e6994a63c459dfb0edbcd4ceeded651ec", "filename": "src/rustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_item_name_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -11,9 +11,10 @@ fn mk_pass() -> pass {\n #[test]\n fn test() {\n     let source = \"mod z { } fn y() { }\";\n-    let srv = astsrv::from_str(source);\n-    let doc = extract::from_srv(srv, \"\");\n-    let doc = mk_pass()(srv, doc);\n-    assert doc.topmod.items[0].name() == \"y\";\n-    assert doc.topmod.items[1].name() == \"z\";\n+    astsrv::from_str(source) {|srv|\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = mk_pass()(srv, doc);\n+        assert doc.topmod.items[0].name() == \"y\";\n+        assert doc.topmod.items[1].name() == \"z\";\n+    }\n }"}, {"sha": "d2452dfa801b2e181295f4c8f8842e369fda9103", "filename": "src/rustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_item_type_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -33,15 +33,16 @@ fn test() {\n          iface iiface { fn a(); } \\\n          impl iimpl for int { fn a() { } } \\\n          type itype = int;\";\n-    let srv = astsrv::from_str(source);\n-    let doc = extract::from_srv(srv, \"\");\n-    let doc = mk_pass()(srv, doc);\n-    assert doc.topmod.items[0].name() == \"iconst\";\n-    assert doc.topmod.items[1].name() == \"itype\";\n-    assert doc.topmod.items[2].name() == \"ienum\";\n-    assert doc.topmod.items[3].name() == \"ires\";\n-    assert doc.topmod.items[4].name() == \"iiface\";\n-    assert doc.topmod.items[5].name() == \"iimpl\";\n-    assert doc.topmod.items[6].name() == \"ifn\";\n-    assert doc.topmod.items[7].name() == \"imod\";\n+    astsrv::from_str(source) {|srv|\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = mk_pass()(srv, doc);\n+        assert doc.topmod.items[0].name() == \"iconst\";\n+        assert doc.topmod.items[1].name() == \"itype\";\n+        assert doc.topmod.items[2].name() == \"ienum\";\n+        assert doc.topmod.items[3].name() == \"ires\";\n+        assert doc.topmod.items[4].name() == \"iiface\";\n+        assert doc.topmod.items[5].name() == \"iimpl\";\n+        assert doc.topmod.items[6].name() == \"ifn\";\n+        assert doc.topmod.items[7].name() == \"imod\";\n+    }\n }"}, {"sha": "2a486bbdcadda300f1efab28d9d578db12f44e9d", "filename": "src/rustdoc/sort_pass.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -42,13 +42,14 @@ fn test() {\n     }\n \n     let source = \"mod z { mod y { } fn x() { } } mod w { }\";\n-    let srv = astsrv::from_str(source);\n-    let doc = extract::from_srv(srv, \"\");\n-    let doc = mk_pass(name_lteq)(srv, doc);\n-    assert doc.topmod.mods()[0].name() == \"w\";\n-    assert doc.topmod.mods()[1].items[0].name() == \"x\";\n-    assert doc.topmod.mods()[1].items[1].name() == \"y\";\n-    assert doc.topmod.mods()[1].name() == \"z\";\n+    astsrv::from_str(source) {|srv|\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = mk_pass(name_lteq)(srv, doc);\n+        assert doc.topmod.mods()[0].name() == \"w\";\n+        assert doc.topmod.mods()[1].items[0].name() == \"x\";\n+        assert doc.topmod.mods()[1].items[1].name() == \"y\";\n+        assert doc.topmod.mods()[1].name() == \"z\";\n+    }\n }\n \n #[test]\n@@ -58,12 +59,13 @@ fn should_be_stable() {\n     }\n \n     let source = \"mod a { mod b { } } mod c { mod d { } }\";\n-    let srv = astsrv::from_str(source);\n-    let doc = extract::from_srv(srv, \"\");\n-    let doc = mk_pass(always_eq)(srv, doc);\n-    assert doc.topmod.mods()[0].items[0].name() == \"b\";\n-    assert doc.topmod.mods()[1].items[0].name() == \"d\";\n-    let doc = mk_pass(always_eq)(srv, doc);\n-    assert doc.topmod.mods()[0].items[0].name() == \"b\";\n-    assert doc.topmod.mods()[1].items[0].name() == \"d\";\n+    astsrv::from_str(source) {|srv|\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = mk_pass(always_eq)(srv, doc);\n+        assert doc.topmod.mods()[0].items[0].name() == \"b\";\n+        assert doc.topmod.mods()[1].items[0].name() == \"d\";\n+        let doc = mk_pass(always_eq)(srv, doc);\n+        assert doc.topmod.mods()[0].items[0].name() == \"b\";\n+        assert doc.topmod.mods()[1].items[0].name() == \"d\";\n+    }\n }"}, {"sha": "221ac86a4edac24dbe647212fc0bd89068563450", "filename": "src/rustdoc/trim_pass.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -61,9 +61,10 @@ fn should_trim_failure_conditions() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = attr_pass::mk_pass()(srv, doc);\n-        mk_pass()(srv, doc)\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            let doc = attr_pass::mk_pass()(srv, doc);\n+            mk_pass()(srv, doc)\n+        }\n     }\n }\n\\ No newline at end of file"}, {"sha": "9b1166fed7a15d8b3bc16cf17d72020dfb68b116", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "patch": "@@ -558,8 +558,9 @@ fn should_add_type_signatures() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        run(srv, doc)\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            run(srv, doc)\n+        }\n     }\n }"}]}