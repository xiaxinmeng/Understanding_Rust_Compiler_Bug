{"sha": "881aeab7b1f42947ee095976c9a8b97544ca5051", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MWFlYWI3YjFmNDI5NDdlZTA5NTk3NmM5YThiOTc1NDRjYTUwNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T16:57:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T16:57:34Z"}, "message": "Auto merge of #87984 - m-ou-se:closure-lint-wording, r=Aaron1011\n\nClosure lint wording\n\nSome small changes to the wording of the closure migration lint.\n\nr? `@Aaron1011`", "tree": {"sha": "eb66f17f5044b91464c4c5df9e7cc12d0d7aafd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb66f17f5044b91464c4c5df9e7cc12d0d7aafd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/881aeab7b1f42947ee095976c9a8b97544ca5051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/881aeab7b1f42947ee095976c9a8b97544ca5051", "html_url": "https://github.com/rust-lang/rust/commit/881aeab7b1f42947ee095976c9a8b97544ca5051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/881aeab7b1f42947ee095976c9a8b97544ca5051/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5de331ba40ac722dd5513c79194c6c411766a23f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5de331ba40ac722dd5513c79194c6c411766a23f", "html_url": "https://github.com/rust-lang/rust/commit/5de331ba40ac722dd5513c79194c6c411766a23f"}, {"sha": "2db4533f66e9fc4df226a1e680bc10692ed26022", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db4533f66e9fc4df226a1e680bc10692ed26022", "html_url": "https://github.com/rust-lang/rust/commit/2db4533f66e9fc4df226a1e680bc10692ed26022"}], "stats": {"total": 566, "additions": 283, "deletions": 283}, "files": [{"sha": "46f360075c09d7d6a195933ceab3743bbbd75413", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -611,7 +611,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         for (captured_hir_id, captured_name, reasons) in diagnostics_info.iter() {\n                             if let Some(captured_hir_id) = captured_hir_id {\n                                 let cause_span = self.tcx.hir().span(*captured_hir_id);\n-                                diagnostics_builder.span_label(cause_span, format!(\"in Rust 2018, closure captures all of `{}`, but in Rust 2021, it only captures `{}`\",\n+                                diagnostics_builder.span_label(cause_span, format!(\"in Rust 2018, this closure captures all of `{}`, but in Rust 2021, it will only capture `{}`\",\n                                     self.tcx.hir().name(*var_hir_id),\n                                     captured_name,\n                                 ));\n@@ -622,7 +622,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if reasons.contains(\"drop order\") {\n                                 let drop_location_span = drop_location_span(self.tcx, &closure_hir_id);\n \n-                                diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{}` would be dropped here, but in Rust 2021, only `{}` would be dropped here alongside the closure\",\n+                                diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{}` is dropped here, but in Rust 2021, only `{}` will be dropped here as part of the closure\",\n                                     self.tcx.hir().name(*var_hir_id),\n                                     captured_name,\n                                 ));\n@@ -632,7 +632,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if reasons.contains(\"trait implementation\") {\n                                 let missing_trait = &reasons[..reasons.find(\"trait implementation\").unwrap() - 1];\n \n-                                diagnostics_builder.span_label(closure_head_span, format!(\"in Rust 2018, this closure would implement {} as `{}` implements {}, but in Rust 2021, this closure would no longer implement {} as `{}` does not implement {}\",\n+                                diagnostics_builder.span_label(closure_head_span, format!(\"in Rust 2018, this closure implements {} as `{}` implements {}, but in Rust 2021, this closure will no longer implement {} as `{}` does not implement {}\",\n                                     missing_trait,\n                                     self.tcx.hir().name(*var_hir_id),\n                                     missing_trait,"}, {"sha": "beebb118399f3920f0b04fbc154be73ae751108a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -13,11 +13,11 @@ fn test_send_trait() {\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n         //~^ ERROR: `Send` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr.0` does not implement `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n-        //~^ NOTE: in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0`\n     } });\n }\n \n@@ -33,11 +33,11 @@ fn test_sync_trait() {\n     let fptr = SyncPointer(f);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n         //~^ ERROR: `Sync`, `Send` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n-        //~^ NOTE: in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0.0`\n     } });\n }\n \n@@ -58,19 +58,19 @@ fn test_clone_trait() {\n     let c = || {\n         let _ = &f;\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f.1` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.1`\n         println!(\"{:?}\", f_1.0);\n     };\n \n     let c_clone = c.clone();\n \n     c_clone();\n }\n-//~^ NOTE: in Rust 2018, `f` would be dropped here, but in Rust 2021, only `f.1` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `f` is dropped here, but in Rust 2021, only `f.1` will be dropped here as part of the closure\n \n fn main() {\n     test_send_trait();"}, {"sha": "812ecae262f77b8b2ee74d99024aec6fc021fa2f", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -13,11 +13,11 @@ fn test_send_trait() {\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || unsafe {\n         //~^ ERROR: `Send` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr.0` does not implement `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n-        //~^ NOTE: in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0`\n     });\n }\n \n@@ -33,11 +33,11 @@ fn test_sync_trait() {\n     let fptr = SyncPointer(f);\n     thread::spawn(move || unsafe {\n         //~^ ERROR: `Sync`, `Send` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n-        //~^ NOTE: in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0.0`\n     });\n }\n \n@@ -57,19 +57,19 @@ fn test_clone_trait() {\n     let f = U(S(String::from(\"Hello World\")), T(0));\n     let c = || {\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f.1` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.1`\n         println!(\"{:?}\", f_1.0);\n     };\n \n     let c_clone = c.clone();\n \n     c_clone();\n }\n-//~^ NOTE: in Rust 2018, `f` would be dropped here, but in Rust 2021, only `f.1` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `f` is dropped here, but in Rust 2021, only `f.1` will be dropped here as part of the closure\n \n fn main() {\n     test_send_trait();"}, {"sha": "e8dd81ede2547124aed40b3cc7b4314657add1e5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -2,10 +2,10 @@ error: changes to closure capture in Rust 2021 will affect `Send` trait implemen\n   --> $DIR/auto_traits.rs:14:19\n    |\n LL |     thread::spawn(move || unsafe {\n-   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr.0` does not implement `Send`\n+   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0` does not implement `Send`\n ...\n LL |         *fptr.0 = 20;\n-   |         ------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n+   |         ------- in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0`\n    |\n note: the lint level is defined here\n   --> $DIR/auto_traits.rs:2:9\n@@ -27,10 +27,10 @@ error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait\n   --> $DIR/auto_traits.rs:34:19\n    |\n LL |     thread::spawn(move || unsafe {\n-   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure would implement `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n+   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure implements `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n ...\n LL |         *fptr.0.0 = 20;\n-   |         --------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0.0`\n+   |         --------- in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0.0`\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n@@ -47,13 +47,13 @@ error: changes to closure capture in Rust 2021 will affect `Clone` trait impleme\n   --> $DIR/auto_traits.rs:58:13\n    |\n LL |     let c = || {\n-   |             ^^ in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f.1` does not implement `Clone`\n+   |             ^^ in Rust 2018, this closure implements `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`\n ...\n LL |         let f_1 = f.1;\n-   |                   --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.1`\n+   |                   --- in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.1`\n ...\n LL | }\n-   | - in Rust 2018, `f` would be dropped here, but in Rust 2021, only `f.1` would be dropped here alongside the closure\n+   | - in Rust 2018, `f` is dropped here, but in Rust 2021, only `f.1` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured"}, {"sha": "982407e2e25567e47885098c281edf556c99b322", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -19,18 +19,18 @@ fn test1_all_need_migration() {\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t1 = t1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n         let _t2 = t2.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t2`, but in Rust 2021, it will only capture `t2.0`\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n-//~| in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+//~| in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n+//~| in Rust 2018, `t2` is dropped here, but in Rust 2021, only `t2.0` will be dropped here as part of the closure\n \n // String implements drop and therefore should be migrated.\n // But in this test cases, `t2` is completely captured and when it is dropped won't be affected\n@@ -45,16 +45,16 @@ fn test2_only_precise_paths_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t1 = t1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n         let _t2 = t2;\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+//~| in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n \n // If a variable would've not been captured by value then it would've not been\n // dropped with the closure and therefore doesn't need migration.\n@@ -67,13 +67,13 @@ fn test3_only_by_value_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         println!(\"{}\", t1.1);\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // Copy types get copied into the closure instead of move. Therefore we don't need to\n // migrate then as their drop order isn't tied to the closure.\n@@ -89,13 +89,13 @@ fn test4_only_non_copy_types_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t1 = t1.0;\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n fn test5_only_drop_types_need_migration() {\n     struct S(i32, i32);\n@@ -111,13 +111,13 @@ fn test5_only_drop_types_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _s = s.0;\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // Since we are using a move closure here, both `t` and `t1` get moved\n // even though they are being used by ref inside the closure.\n@@ -130,14 +130,14 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n-        //~| NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n+        //~| NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.1`\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n-//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n+//~| in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.1` will be dropped here as part of the closure\n \n // Test migration analysis in case of Drop + Non Drop aggregates.\n // Note we need migration here only because the non-copy (because Drop type) is captured,\n@@ -151,12 +151,12 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n fn main() {\n     test1_all_need_migration();"}, {"sha": "1ac034959cbc80d3d672a4c9b20611064f6b4907", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -18,18 +18,18 @@ fn test1_all_need_migration() {\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t1 = t1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n         let _t2 = t2.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t2`, but in Rust 2021, it will only capture `t2.0`\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n-//~| in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+//~| in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n+//~| in Rust 2018, `t2` is dropped here, but in Rust 2021, only `t2.0` will be dropped here as part of the closure\n \n // String implements drop and therefore should be migrated.\n // But in this test cases, `t2` is completely captured and when it is dropped won't be affected\n@@ -43,16 +43,16 @@ fn test2_only_precise_paths_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t1 = t1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n         let _t2 = t2;\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+//~| in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n \n // If a variable would've not been captured by value then it would've not been\n // dropped with the closure and therefore doesn't need migration.\n@@ -64,13 +64,13 @@ fn test3_only_by_value_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         println!(\"{}\", t1.1);\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // Copy types get copied into the closure instead of move. Therefore we don't need to\n // migrate then as their drop order isn't tied to the closure.\n@@ -85,13 +85,13 @@ fn test4_only_non_copy_types_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t1 = t1.0;\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n fn test5_only_drop_types_need_migration() {\n     struct S(i32, i32);\n@@ -106,13 +106,13 @@ fn test5_only_drop_types_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _s = s.0;\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // Since we are using a move closure here, both `t` and `t1` get moved\n // even though they are being used by ref inside the closure.\n@@ -124,14 +124,14 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n-        //~| NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n+        //~| NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.1`\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n-//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n+//~| in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.1` will be dropped here as part of the closure\n \n // Test migration analysis in case of Drop + Non Drop aggregates.\n // Note we need migration here only because the non-copy (because Drop type) is captured,\n@@ -144,12 +144,12 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     };\n \n     c();\n }\n-//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n fn main() {\n     test1_all_need_migration();"}, {"sha": "b719b89f5fcbc4a90e36c3a0f6df0439988ed351", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -5,20 +5,20 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n LL |\n LL |         let _t1 = t1.0;\n-   |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+   |                   ---- in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n LL |\n LL |         let _t2 = t2.0;\n-   |                   ---- in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n+   |                   ---- in Rust 2018, this closure captures all of `t2`, but in Rust 2021, it will only capture `t2.0`\n ...\n LL | }\n    | -\n    | |\n-   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n-   | in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n+   | in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+   | in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n+   | in Rust 2018, `t2` is dropped here, but in Rust 2021, only `t2.0` will be dropped here as part of the closure\n    |\n note: the lint level is defined here\n   --> $DIR/insignificant_drop.rs:3:9\n@@ -43,16 +43,16 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n LL |\n LL |         let _t1 = t1.0;\n-   |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+   |                   ---- in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n ...\n LL | }\n    | -\n    | |\n-   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+   | in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+   | in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n@@ -72,10 +72,10 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -95,10 +95,10 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -118,10 +118,10 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -141,15 +141,15 @@ LL |     let c = move || {\n    |             ^^^^^^^\n ...\n LL |         println!(\"{} {}\", t1.1, t.1);\n-   |                           ----  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+   |                           ----  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n    |                           |\n-   |                           in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n+   |                           in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.1`\n ...\n LL | }\n    | -\n    | |\n-   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n-   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+   | in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.1` will be dropped here as part of the closure\n+   | in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n@@ -169,10 +169,10 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured"}, {"sha": "e672d9266fcd19dba7135009d4e73e3111528304", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -40,12 +40,12 @@ fn significant_drop_needs_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // Even if a type implements an insignificant drop, if it's\n // elements have a significant drop then the overall type is\n@@ -61,12 +61,12 @@ fn generic_struct_with_significant_drop_needs_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n \n fn main() {\n     significant_drop_needs_migration();"}, {"sha": "45850ec5f36dce9f68e8ee665e29456bea5a641e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -39,12 +39,12 @@ fn significant_drop_needs_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // Even if a type implements an insignificant drop, if it's\n // elements have a significant drop then the overall type is\n@@ -59,12 +59,12 @@ fn generic_struct_with_significant_drop_needs_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n \n fn main() {\n     significant_drop_needs_migration();"}, {"sha": "669614fee0a9354c72a5f2dcdde8c003c9fbc954", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -5,10 +5,10 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n note: the lint level is defined here\n   --> $DIR/insignificant_drop_attr_migrations.rs:3:9\n@@ -33,10 +33,10 @@ LL |     let c = move || {\n    |             ^^^^^^^\n ...\n LL |         let _t = t.1;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured"}, {"sha": "b9dd8a20b093f782ebb7c5962a331371bb7e1599", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/macro.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.fixed?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     let a = (\"hey\".to_string(), \"123\".to_string());\n     let _ = || { let _ = &a; dbg!(a.0) };\n     //~^ ERROR: drop order\n-    //~| NOTE: only captures `a.0`\n+    //~| NOTE: will only capture `a.0`\n     //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `a` to be fully captured\n }"}, {"sha": "f7ccdb754b85821acbcad57dc77948346dc1af44", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.rs?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     let a = (\"hey\".to_string(), \"123\".to_string());\n     let _ = || dbg!(a.0);\n     //~^ ERROR: drop order\n-    //~| NOTE: only captures `a.0`\n+    //~| NOTE: will only capture `a.0`\n     //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `a` to be fully captured\n }"}, {"sha": "0614b78a7437b7ed88789a4c6bdfa4476ff87134", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -4,10 +4,10 @@ error: changes to closure capture in Rust 2021 will affect drop order\n LL |     let _ = || dbg!(a.0);\n    |             ^^^^^^^^---^\n    |                     |\n-   |                     in Rust 2018, closure captures all of `a`, but in Rust 2021, it only captures `a.0`\n+   |                     in Rust 2018, this closure captures all of `a`, but in Rust 2021, it will only capture `a.0`\n ...\n LL | }\n-   | - in Rust 2018, `a` would be dropped here, but in Rust 2021, only `a.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `a` is dropped here, but in Rust 2021, only `a.0` will be dropped here as part of the closure\n    |\n note: the lint level is defined here\n   --> $DIR/macro.rs:5:9"}, {"sha": "ce8b607259576b11d5819bf22868b5a0c5647f9f", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -22,24 +22,24 @@ fn closure_contains_block() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || { let _ = &t; t.0 };\n     //~^ ERROR: drop order\n-    //~| NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+    //~| NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n fn main() {\n     closure_contains_block();"}, {"sha": "2237bebd788e7c8e37204bf88eecd8c0d69f8771", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -21,24 +21,24 @@ fn closure_contains_block() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || t.0;\n     //~^ ERROR: drop order\n-    //~| NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+    //~| NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n fn main() {\n     closure_contains_block();"}, {"sha": "8d4819fe2e22168b521b5162a46b345351ee5bb0", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -5,10 +5,10 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n note: the lint level is defined here\n   --> $DIR/migrations_rustfix.rs:2:9\n@@ -32,10 +32,10 @@ error: changes to closure capture in Rust 2021 will affect drop order\n LL |     let c = || t.0;\n    |             ^^^---\n    |                |\n-   |                in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured"}, {"sha": "a5652154682c5b672da67568c79a30dbc1f1e384", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -20,11 +20,11 @@ where\n     let result = panic::catch_unwind(move || {\n         let _ = &f;\n         //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure would no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n+        //~| NOTE: in Rust 2018, this closure implements `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()\n-        //~^ NOTE: in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.0`\n     });\n     if let Ok(..) = result {\n         panic!(\"diverging function returned\");"}, {"sha": "d9acde073fc3d38fffd84202b80668764057f394", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -19,11 +19,11 @@ where\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || {\n         //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure would no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n+        //~| NOTE: in Rust 2018, this closure implements `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()\n-        //~^ NOTE: in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.0`\n     });\n     if let Ok(..) = result {\n         panic!(\"diverging function returned\");"}, {"sha": "b6ee5edb59e7925168f6117caa0b2228258565ca", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -2,10 +2,10 @@ error: changes to closure capture in Rust 2021 will affect `UnwindSafe`, `RefUnw\n   --> $DIR/mir_calls_to_shims.rs:20:38\n    |\n LL |     let result = panic::catch_unwind(move || {\n-   |                                      ^^^^^^^ in Rust 2018, this closure would implement `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure would no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n+   |                                      ^^^^^^^ in Rust 2018, this closure implements `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n ...\n LL |         f.0()\n-   |         --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.0`\n+   |         --- in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.0`\n    |\n note: the lint level is defined here\n   --> $DIR/mir_calls_to_shims.rs:3:9"}, {"sha": "ef90257474a9f78eb9da9e65d5b1823fa8ff5ead", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.fixed", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -23,31 +23,31 @@ fn test_multi_issues() {\n     let c = || {\n         let _ = (&f1, &f2);\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1`, `f2` to be fully captured\n         let _f_1 = f1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n         let _f_2 = f2.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f2`, but in Rust 2021, it only captures `f2.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f2`, but in Rust 2021, it will only capture `f2.1`\n     };\n \n     let c_clone = c.clone();\n \n     c_clone();\n }\n-//~^ NOTE: in Rust 2018, `f2` would be dropped here, but in Rust 2021, only `f2.1` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `f2` is dropped here, but in Rust 2021, only `f2.1` will be dropped here as part of the closure\n \n fn test_capturing_all_disjoint_fields_individually() {\n     let f1 = U(S(String::from(\"foo\")), T(0));\n     let c = || {\n         let _ = &f1;\n         //~^ ERROR: `Clone` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_1 = f1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n         let _f_2 = f1.1;\n     };\n \n@@ -69,14 +69,14 @@ fn test_capturing_several_disjoint_fields_individually_1() {\n     let c = || {\n         let _ = &f1;\n         //~^ ERROR: `Clone` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.2` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.2` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_0 = f1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n         let _f_2 = f1.2;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.2`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.2`\n     };\n \n     let c_clone = c.clone();\n@@ -89,21 +89,21 @@ fn test_capturing_several_disjoint_fields_individually_2() {\n     let c = || {\n         let _ = &f1;\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_0 = f1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n         let _f_1 = f1.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.1`\n     };\n \n     let c_clone = c.clone();\n \n     c_clone();\n }\n-//~^ NOTE: in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.1` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `f1` is dropped here, but in Rust 2021, only `f1.1` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `f1` is dropped here, but in Rust 2021, only `f1.0` will be dropped here as part of the closure\n \n struct SendPointer(*mut i32);\n unsafe impl Send for SendPointer {}\n@@ -122,14 +122,14 @@ fn test_multi_traits_issues() {\n     let fptr2 = SendPointer(&mut f2 as *mut i32);\n     thread::spawn(move || { let _ = (&fptr1, &fptr2); unsafe {\n         //~^ ERROR: `Sync`, `Send` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n-        //~| NOTE: in Rust 2018, this closure would implement `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr2.0` does not implement `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr2.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr1`, `fptr2` to be fully captured\n         *fptr1.0.0 = 20;\n-        //~^ NOTE: in Rust 2018, closure captures all of `fptr1`, but in Rust 2021, it only captures `fptr1.0.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `fptr1`, but in Rust 2021, it will only capture `fptr1.0.0`\n         *fptr2.0 = 20;\n-        //~^ NOTE: in Rust 2018, closure captures all of `fptr2`, but in Rust 2021, it only captures `fptr2.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `fptr2`, but in Rust 2021, it will only capture `fptr2.0`\n     } });\n }\n "}, {"sha": "b9644c18d28e28465ee5a40e3de4eefa1318c0f8", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -22,30 +22,30 @@ fn test_multi_issues() {\n     let f2 = U(S(String::from(\"bar\")), T(0));\n     let c = || {\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1`, `f2` to be fully captured\n         let _f_1 = f1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n         let _f_2 = f2.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f2`, but in Rust 2021, it only captures `f2.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f2`, but in Rust 2021, it will only capture `f2.1`\n     };\n \n     let c_clone = c.clone();\n \n     c_clone();\n }\n-//~^ NOTE: in Rust 2018, `f2` would be dropped here, but in Rust 2021, only `f2.1` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `f2` is dropped here, but in Rust 2021, only `f2.1` will be dropped here as part of the closure\n \n fn test_capturing_all_disjoint_fields_individually() {\n     let f1 = U(S(String::from(\"foo\")), T(0));\n     let c = || {\n         //~^ ERROR: `Clone` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_1 = f1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n         let _f_2 = f1.1;\n     };\n \n@@ -66,14 +66,14 @@ fn test_capturing_several_disjoint_fields_individually_1() {\n     let f1 = U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")));\n     let c = || {\n         //~^ ERROR: `Clone` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.2` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.2` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_0 = f1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n         let _f_2 = f1.2;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.2`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.2`\n     };\n \n     let c_clone = c.clone();\n@@ -85,21 +85,21 @@ fn test_capturing_several_disjoint_fields_individually_2() {\n     let f1 = U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")));\n     let c = || {\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_0 = f1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n         let _f_1 = f1.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.1`\n     };\n \n     let c_clone = c.clone();\n \n     c_clone();\n }\n-//~^ NOTE: in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.1` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `f1` is dropped here, but in Rust 2021, only `f1.1` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `f1` is dropped here, but in Rust 2021, only `f1.0` will be dropped here as part of the closure\n \n struct SendPointer(*mut i32);\n unsafe impl Send for SendPointer {}\n@@ -118,14 +118,14 @@ fn test_multi_traits_issues() {\n     let fptr2 = SendPointer(&mut f2 as *mut i32);\n     thread::spawn(move || unsafe {\n         //~^ ERROR: `Sync`, `Send` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure would implement `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n-        //~| NOTE: in Rust 2018, this closure would implement `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr2.0` does not implement `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr2.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr1`, `fptr2` to be fully captured\n         *fptr1.0.0 = 20;\n-        //~^ NOTE: in Rust 2018, closure captures all of `fptr1`, but in Rust 2021, it only captures `fptr1.0.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `fptr1`, but in Rust 2021, it will only capture `fptr1.0.0`\n         *fptr2.0 = 20;\n-        //~^ NOTE: in Rust 2018, closure captures all of `fptr2`, but in Rust 2021, it only captures `fptr2.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `fptr2`, but in Rust 2021, it will only capture `fptr2.0`\n     });\n }\n "}, {"sha": "b887b212e3d45dc8c57cadeb6c161f8b1c909b43", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -2,16 +2,16 @@ error: changes to closure capture in Rust 2021 will affect `Clone` trait impleme\n   --> $DIR/multi_diagnostics.rs:23:13\n    |\n LL |     let c = || {\n-   |             ^^ in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+   |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n ...\n LL |         let _f_1 = f1.0;\n-   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+   |                    ---- in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n LL |\n LL |         let _f_2 = f2.1;\n-   |                    ---- in Rust 2018, closure captures all of `f2`, but in Rust 2021, it only captures `f2.1`\n+   |                    ---- in Rust 2018, this closure captures all of `f2`, but in Rust 2021, it will only capture `f2.1`\n ...\n LL | }\n-   | - in Rust 2018, `f2` would be dropped here, but in Rust 2021, only `f2.1` would be dropped here alongside the closure\n+   | - in Rust 2018, `f2` is dropped here, but in Rust 2021, only `f2.1` will be dropped here as part of the closure\n    |\n note: the lint level is defined here\n   --> $DIR/multi_diagnostics.rs:2:9\n@@ -33,10 +33,10 @@ error: changes to closure capture in Rust 2021 will affect `Clone` trait impleme\n   --> $DIR/multi_diagnostics.rs:42:13\n    |\n LL |     let c = || {\n-   |             ^^ in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+   |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n ...\n LL |         let _f_1 = f1.0;\n-   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+   |                    ---- in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n@@ -55,14 +55,14 @@ error: changes to closure capture in Rust 2021 will affect `Clone` trait impleme\n LL |     let c = || {\n    |             ^^\n    |             |\n-   |             in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n-   |             in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.2` does not implement `Clone`\n+   |             in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+   |             in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.2` does not implement `Clone`\n ...\n LL |         let _f_0 = f1.0;\n-   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+   |                    ---- in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n LL |\n LL |         let _f_2 = f1.2;\n-   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.2`\n+   |                    ---- in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.2`\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n@@ -79,19 +79,19 @@ error: changes to closure capture in Rust 2021 will affect `Clone` trait impleme\n   --> $DIR/multi_diagnostics.rs:86:13\n    |\n LL |     let c = || {\n-   |             ^^ in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+   |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n ...\n LL |         let _f_0 = f1.0;\n-   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+   |                    ---- in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n LL |\n LL |         let _f_1 = f1.1;\n-   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.1`\n+   |                    ---- in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.1`\n ...\n LL | }\n    | -\n    | |\n-   | in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.0` would be dropped here alongside the closure\n-   | in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.1` would be dropped here alongside the closure\n+   | in Rust 2018, `f1` is dropped here, but in Rust 2021, only `f1.0` will be dropped here as part of the closure\n+   | in Rust 2018, `f1` is dropped here, but in Rust 2021, only `f1.1` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n@@ -110,14 +110,14 @@ error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait\n LL |     thread::spawn(move || unsafe {\n    |                   ^^^^^^^^^^^^^^\n    |                   |\n-   |                   in Rust 2018, this closure would implement `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n-   |                   in Rust 2018, this closure would implement `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr2.0` does not implement `Send`\n+   |                   in Rust 2018, this closure implements `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n+   |                   in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr2.0` does not implement `Send`\n ...\n LL |         *fptr1.0.0 = 20;\n-   |         ---------- in Rust 2018, closure captures all of `fptr1`, but in Rust 2021, it only captures `fptr1.0.0`\n+   |         ---------- in Rust 2018, this closure captures all of `fptr1`, but in Rust 2021, it will only capture `fptr1.0.0`\n LL |\n LL |         *fptr2.0 = 20;\n-   |         -------- in Rust 2018, closure captures all of `fptr2`, but in Rust 2021, it only captures `fptr2.0`\n+   |         -------- in Rust 2018, this closure captures all of `fptr2`, but in Rust 2021, it will only capture `fptr2.0`\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr1`, `fptr2` to be fully captured"}, {"sha": "7892a72c76523a97ab901821b06f65ef80cca328", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.fixed", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -23,13 +23,13 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t = &t.1;\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n struct S;\n impl Drop for S {\n@@ -49,18 +49,18 @@ fn test_precise_analysis_long_path_missing() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `u`, but in Rust 2021, it will only capture `u.0.0`\n         let _x = u.0.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `u`, but in Rust 2021, it will only capture `u.0.1`\n         let _x = u.1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `u`, but in Rust 2021, it will only capture `u.1.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.0` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.1` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.1.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `u` is dropped here, but in Rust 2021, only `u.0.0` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `u` is dropped here, but in Rust 2021, only `u.0.1` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `u` is dropped here, but in Rust 2021, only `u.1.0` will be dropped here as part of the closure\n \n \n fn main() {"}, {"sha": "f5e99002bd08a4a943110b9e25228e5daaf4bf5e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -22,13 +22,13 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t = &t.1;\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n struct S;\n impl Drop for S {\n@@ -47,18 +47,18 @@ fn test_precise_analysis_long_path_missing() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `u`, but in Rust 2021, it will only capture `u.0.0`\n         let _x = u.0.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `u`, but in Rust 2021, it will only capture `u.0.1`\n         let _x = u.1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `u`, but in Rust 2021, it will only capture `u.1.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.0` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.1` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.1.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `u` is dropped here, but in Rust 2021, only `u.0.0` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `u` is dropped here, but in Rust 2021, only `u.0.1` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `u` is dropped here, but in Rust 2021, only `u.1.0` will be dropped here as part of the closure\n \n \n fn main() {"}, {"sha": "51b4e11819f4554850ffd713f7e594b4c89d9de6", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -5,10 +5,10 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n note: the lint level is defined here\n   --> $DIR/precise.rs:3:9\n@@ -33,20 +33,20 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _x = u.0.0;\n-   |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.0`\n+   |                  ----- in Rust 2018, this closure captures all of `u`, but in Rust 2021, it will only capture `u.0.0`\n LL |\n LL |         let _x = u.0.1;\n-   |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.1`\n+   |                  ----- in Rust 2018, this closure captures all of `u`, but in Rust 2021, it will only capture `u.0.1`\n LL |\n LL |         let _x = u.1.0;\n-   |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.1.0`\n+   |                  ----- in Rust 2018, this closure captures all of `u`, but in Rust 2021, it will only capture `u.1.0`\n ...\n LL | }\n    | -\n    | |\n-   | in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.0` would be dropped here alongside the closure\n-   | in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.1` would be dropped here alongside the closure\n-   | in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.1.0` would be dropped here alongside the closure\n+   | in Rust 2018, `u` is dropped here, but in Rust 2021, only `u.0.0` will be dropped here as part of the closure\n+   | in Rust 2018, `u` is dropped here, but in Rust 2021, only `u.0.1` will be dropped here as part of the closure\n+   | in Rust 2018, `u` is dropped here, but in Rust 2021, only `u.1.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `u` to be fully captured"}, {"sha": "aca0b2a96ac56bc2b6a6cc5fdb2ec0b73a474222", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -28,18 +28,18 @@ fn test1_all_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t1 = t1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n         let _t2 = t2.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t2`, but in Rust 2021, it will only capture `t2.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `t2` is dropped here, but in Rust 2021, only `t2.0` will be dropped here as part of the closure\n \n // String implements drop and therefore should be migrated.\n // But in this test cases, `t2` is completely captured and when it is dropped won't be affected\n@@ -54,16 +54,16 @@ fn test2_only_precise_paths_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t1 = t1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n         let _t2 = t2;\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n \n // If a variable would've not been captured by value then it would've not been\n // dropped with the closure and therefore doesn't need migration.\n@@ -76,13 +76,13 @@ fn test3_only_by_value_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         println!(\"{:?}\", t1.1);\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // The root variable might not implement drop themselves but some path starting\n // at the root variable might implement Drop.\n@@ -97,12 +97,12 @@ fn test4_type_contains_drop_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // Test migration analysis in case of Drop + Non Drop aggregates.\n // Note we need migration here only because the non-copy (because Drop type) is captured,\n@@ -116,12 +116,12 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // Test migration analysis in case of Significant and Insignificant Drop aggregates.\n fn test6_significant_insignificant_drop_aggregate_need_migration() {\n@@ -133,12 +133,12 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n \n // Since we are using a move closure here, both `t` and `t1` get moved\n // even though they are being used by ref inside the closure.\n@@ -152,14 +152,14 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n-        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n-        //~| NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.1`\n+        //~| NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.1` will be dropped here as part of the closure\n \n \n fn test8_drop_order_and_blocks() {\n@@ -173,12 +173,12 @@ fn test8_drop_order_and_blocks() {\n                 //~| NOTE: for more information, see\n                 //~| HELP: add a dummy let to cause `tuple` to be fully captured\n                 tuple.0;\n-                //~^ NOTE: in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+                //~^ NOTE: in Rust 2018, this closure captures all of `tuple`, but in Rust 2021, it will only capture `tuple.0`\n             };\n \n             c();\n         }\n-        //~^ NOTE: in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+        //~^ NOTE: in Rust 2018, `tuple` is dropped here, but in Rust 2021, only `tuple.0` will be dropped here as part of the closure\n     }\n }\n \n@@ -192,12 +192,12 @@ fn test9_drop_order_and_nested_closures() {\n             //~| NOTE: for more information, see\n             //~| HELP: add a dummy let to cause `tuple` to be fully captured\n             tuple.0;\n-            //~^ NOTE: in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+            //~^ NOTE: in Rust 2018, this closure captures all of `tuple`, but in Rust 2021, it will only capture `tuple.0`\n         };\n \n         c();\n     };\n-    //~^ NOTE: in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+    //~^ NOTE: in Rust 2018, `tuple` is dropped here, but in Rust 2021, only `tuple.0` will be dropped here as part of the closure\n \n     b();\n }"}, {"sha": "fd4134a7704793daacf70bf73b243ee027b0a782", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -27,18 +27,18 @@ fn test1_all_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t1 = t1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n         let _t2 = t2.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t2`, but in Rust 2021, it will only capture `t2.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `t2` is dropped here, but in Rust 2021, only `t2.0` will be dropped here as part of the closure\n \n // String implements drop and therefore should be migrated.\n // But in this test cases, `t2` is completely captured and when it is dropped won't be affected\n@@ -52,16 +52,16 @@ fn test2_only_precise_paths_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         let _t1 = t1.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n         let _t2 = t2;\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n \n // If a variable would've not been captured by value then it would've not been\n // dropped with the closure and therefore doesn't need migration.\n@@ -73,13 +73,13 @@ fn test3_only_by_value_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n         println!(\"{:?}\", t1.1);\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // The root variable might not implement drop themselves but some path starting\n // at the root variable might implement Drop.\n@@ -93,12 +93,12 @@ fn test4_type_contains_drop_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // Test migration analysis in case of Drop + Non Drop aggregates.\n // Note we need migration here only because the non-copy (because Drop type) is captured,\n@@ -111,12 +111,12 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n \n // Test migration analysis in case of Significant and Insignificant Drop aggregates.\n fn test6_significant_insignificant_drop_aggregate_need_migration() {\n@@ -127,12 +127,12 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n-        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n \n // Since we are using a move closure here, both `t` and `t1` get moved\n // even though they are being used by ref inside the closure.\n@@ -145,14 +145,14 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n-        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n-        //~| NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+        //~^ NOTE: in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.1`\n+        //~| NOTE: in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n     };\n \n     c();\n }\n-//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n-//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n+//~^ NOTE: in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n+//~| NOTE: in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.1` will be dropped here as part of the closure\n \n \n fn test8_drop_order_and_blocks() {\n@@ -165,12 +165,12 @@ fn test8_drop_order_and_blocks() {\n                 //~| NOTE: for more information, see\n                 //~| HELP: add a dummy let to cause `tuple` to be fully captured\n                 tuple.0;\n-                //~^ NOTE: in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+                //~^ NOTE: in Rust 2018, this closure captures all of `tuple`, but in Rust 2021, it will only capture `tuple.0`\n             };\n \n             c();\n         }\n-        //~^ NOTE: in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+        //~^ NOTE: in Rust 2018, `tuple` is dropped here, but in Rust 2021, only `tuple.0` will be dropped here as part of the closure\n     }\n }\n \n@@ -183,12 +183,12 @@ fn test9_drop_order_and_nested_closures() {\n             //~| NOTE: for more information, see\n             //~| HELP: add a dummy let to cause `tuple` to be fully captured\n             tuple.0;\n-            //~^ NOTE: in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+            //~^ NOTE: in Rust 2018, this closure captures all of `tuple`, but in Rust 2021, it will only capture `tuple.0`\n         };\n \n         c();\n     };\n-    //~^ NOTE: in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+    //~^ NOTE: in Rust 2018, `tuple` is dropped here, but in Rust 2021, only `tuple.0` will be dropped here as part of the closure\n \n     b();\n }"}, {"sha": "81700e32b5f40d0e8869d7af740a49e67125400b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881aeab7b1f42947ee095976c9a8b97544ca5051/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=881aeab7b1f42947ee095976c9a8b97544ca5051", "patch": "@@ -5,20 +5,20 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n LL |\n LL |         let _t1 = t1.0;\n-   |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+   |                   ---- in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n LL |\n LL |         let _t2 = t2.0;\n-   |                   ---- in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n+   |                   ---- in Rust 2018, this closure captures all of `t2`, but in Rust 2021, it will only capture `t2.0`\n ...\n LL | }\n    | -\n    | |\n-   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n-   | in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n+   | in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+   | in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n+   | in Rust 2018, `t2` is dropped here, but in Rust 2021, only `t2.0` will be dropped here as part of the closure\n    |\n note: the lint level is defined here\n   --> $DIR/significant_drop.rs:2:9\n@@ -43,16 +43,16 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n LL |\n LL |         let _t1 = t1.0;\n-   |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+   |                   ---- in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.0`\n ...\n LL | }\n    | -\n    | |\n-   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+   | in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n+   | in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n@@ -72,10 +72,10 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -95,10 +95,10 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -118,10 +118,10 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.0;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -141,10 +141,10 @@ LL |     let c = || {\n    |             ^^\n ...\n LL |         let _t = t.1;\n-   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n ...\n LL | }\n-   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -164,15 +164,15 @@ LL |     let c = move || {\n    |             ^^^^^^^\n ...\n LL |         println!(\"{:?} {:?}\", t1.1, t.1);\n-   |                               ----  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+   |                               ----  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n    |                               |\n-   |                               in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n+   |                               in Rust 2018, this closure captures all of `t1`, but in Rust 2021, it will only capture `t1.1`\n ...\n LL | }\n    | -\n    | |\n-   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n-   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+   | in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.1` will be dropped here as part of the closure\n+   | in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n@@ -192,10 +192,10 @@ LL |             let c = || {\n    |                     ^^\n ...\n LL |                 tuple.0;\n-   |                 ------- in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+   |                 ------- in Rust 2018, this closure captures all of `tuple`, but in Rust 2021, it will only capture `tuple.0`\n ...\n LL |         }\n-   |         - in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+   |         - in Rust 2018, `tuple` is dropped here, but in Rust 2021, only `tuple.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `tuple` to be fully captured\n@@ -215,10 +215,10 @@ LL |         let c = || {\n    |                 ^^\n ...\n LL |             tuple.0;\n-   |             ------- in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+   |             ------- in Rust 2018, this closure captures all of `tuple`, but in Rust 2021, it will only capture `tuple.0`\n ...\n LL |     };\n-   |     - in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+   |     - in Rust 2018, `tuple` is dropped here, but in Rust 2021, only `tuple.0` will be dropped here as part of the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `tuple` to be fully captured"}]}