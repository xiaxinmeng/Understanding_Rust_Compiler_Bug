{"sha": "5e1e8ed34a46738dda507a4a0f4e73065be74e57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMWU4ZWQzNGE0NjczOGRkYTUwN2E0YTBmNGU3MzA2NWJlNzRlNTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-28T21:56:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-28T21:56:36Z"}, "message": "Lexer scaffold", "tree": {"sha": "5191bbb793ce1a563026a9360380cbb207b43b9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5191bbb793ce1a563026a9360380cbb207b43b9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e1e8ed34a46738dda507a4a0f4e73065be74e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1e8ed34a46738dda507a4a0f4e73065be74e57", "html_url": "https://github.com/rust-lang/rust/commit/5e1e8ed34a46738dda507a4a0f4e73065be74e57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e1e8ed34a46738dda507a4a0f4e73065be74e57/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45fce4b3ef53b0ffc78aac7064701f1f31792a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/45fce4b3ef53b0ffc78aac7064701f1f31792a5a", "html_url": "https://github.com/rust-lang/rust/commit/45fce4b3ef53b0ffc78aac7064701f1f31792a5a"}], "stats": {"total": 128, "additions": 117, "deletions": 11}, "files": [{"sha": "cda9fe2b2dcc33a55e8f5c7bb41910ccee1ead81", "filename": "src/lexer.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e1e8ed34a46738dda507a4a0f4e73065be74e57/src%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1e8ed34a46738dda507a4a0f4e73065be74e57/src%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer.rs?ref=5e1e8ed34a46738dda507a4a0f4e73065be74e57", "patch": "@@ -0,0 +1,10 @@\n+use {Token, TextUnit};\n+use syntax_kinds::*;\n+\n+pub fn next_token(text: &str) -> Token {\n+    let c = text.chars().next().unwrap();\n+    Token {\n+        kind: IDENT,\n+        len: TextUnit::len_of_char(c),\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "4385c032545f566ac4f2302a903143b7e99401cc", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5e1e8ed34a46738dda507a4a0f4e73065be74e57/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1e8ed34a46738dda507a4a0f4e73065be74e57/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5e1e8ed34a46738dda507a4a0f4e73065be74e57", "patch": "@@ -1,7 +1,8 @@\n-#[cfg(test)]\n-mod tests {\n-    #[test]\n-    fn it_works() {\n-        assert_eq!(2 + 2, 4);\n-    }\n-}\n+mod text;\n+mod tree;\n+mod lexer;\n+\n+pub mod syntax_kinds;\n+pub use text::TextUnit;\n+pub use tree::{SyntaxKind, Token};\n+pub use lexer::next_token;"}, {"sha": "18574b7f5b5c6c458ef298d074e612cdcce32dcc", "filename": "src/syntax_kinds.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1e8ed34a46738dda507a4a0f4e73065be74e57/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1e8ed34a46738dda507a4a0f4e73065be74e57/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=5e1e8ed34a46738dda507a4a0f4e73065be74e57", "patch": "@@ -0,0 +1,16 @@\n+use tree::{SyntaxKind, SyntaxInfo};\n+\n+pub const IDENT: SyntaxKind = SyntaxKind(1);\n+pub const WHITESPACE: SyntaxKind = SyntaxKind(2);\n+\n+\n+static IDENT_INFO: SyntaxInfo = SyntaxInfo {\n+    name: \"IDENT\",\n+};\n+\n+pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {\n+    match kind {\n+        IDENT => &IDENT_INFO,\n+        _ => unreachable!(),\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "5297275ed469d480ee7fb3909b1453fe6d562906", "filename": "src/text.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5e1e8ed34a46738dda507a4a0f4e73065be74e57/src%2Ftext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1e8ed34a46738dda507a4a0f4e73065be74e57/src%2Ftext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftext.rs?ref=5e1e8ed34a46738dda507a4a0f4e73065be74e57", "patch": "@@ -0,0 +1,32 @@\n+use std::fmt;\n+\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct TextUnit(u32);\n+\n+impl TextUnit {\n+    pub fn len_of_char(c: char) -> TextUnit {\n+        TextUnit(c.len_utf8() as u32)\n+    }\n+\n+    pub fn new(val: u32) -> TextUnit {\n+        TextUnit(val)\n+    }\n+}\n+\n+impl fmt::Debug for TextUnit {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        <Self as fmt::Display>::fmt(self, f)\n+    }\n+}\n+\n+impl fmt::Display for TextUnit {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n+impl From<TextUnit> for u32 {\n+    fn from(tu: TextUnit) -> u32 {\n+        tu.0\n+    }\n+}"}, {"sha": "0924f38d0dc6a52009667ad87b7b73045d83e5ea", "filename": "src/tree.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5e1e8ed34a46738dda507a4a0f4e73065be74e57/src%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1e8ed34a46738dda507a4a0f4e73065be74e57/src%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree.rs?ref=5e1e8ed34a46738dda507a4a0f4e73065be74e57", "patch": "@@ -0,0 +1,31 @@\n+use text::{TextUnit};\n+use syntax_kinds::syntax_info;\n+\n+use std::fmt;\n+\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct SyntaxKind(pub(crate) u32);\n+\n+impl SyntaxKind {\n+    fn info(self) -> &'static SyntaxInfo {\n+        syntax_info(self)\n+    }\n+}\n+\n+impl fmt::Debug for SyntaxKind {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let name = self.info().name;\n+        f.write_str(name)\n+    }\n+}\n+\n+\n+pub(crate) struct SyntaxInfo {\n+    pub name: &'static str,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct Token {\n+    pub kind: SyntaxKind,\n+    pub len: TextUnit,\n+}\n\\ No newline at end of file"}, {"sha": "a27e7c3954c3de4eb328d9e40f6e68406e97d512", "filename": "tests/lexer.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5e1e8ed34a46738dda507a4a0f4e73065be74e57/tests%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1e8ed34a46738dda507a4a0f4e73065be74e57/tests%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flexer.rs?ref=5e1e8ed34a46738dda507a4a0f4e73065be74e57", "patch": "@@ -1,9 +1,13 @@\n extern crate file;\n #[macro_use(assert_diff)]\n extern crate difference;\n+extern crate libsyntax2;\n \n use std::path::{PathBuf, Path};\n use std::fs::read_dir;\n+use std::fmt::Write;\n+\n+use libsyntax2::{Token, next_token};\n \n #[test]\n fn lexer_tests() {\n@@ -46,10 +50,22 @@ fn lexer_test_case(path: &Path) {\n     )\n }\n \n-fn tokenize(text: &str) -> Vec<()> {\n-    Vec::new()\n+fn tokenize(text: &str) -> Vec<Token> {\n+    let mut text = text;\n+    let mut acc = Vec::new();\n+    while !text.is_empty() {\n+        let token = next_token(text);\n+        acc.push(token);\n+        let len: u32 = token.len.into();\n+        text = &text[len as usize..];\n+    }\n+    acc\n }\n \n-fn dump_tokens(tokens: &[()]) -> String {\n-    \"IDENT 5\\nKEYWORD 1\\nIDENT 5\\n\".to_string()\n+fn dump_tokens(tokens: &[Token]) -> String {\n+    let mut acc = String::new();\n+    for token in tokens {\n+        write!(acc, \"{:?} {}\\n\", token.kind, token.len).unwrap()\n+    }\n+    acc\n }\n\\ No newline at end of file"}]}