{"sha": "a5b008c45065989e58a1afa5809df0daac481a75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YjAwOGM0NTA2NTk4OWU1OGExYWZhNTgwOWRmMGRhYWM0ODFhNzU=", "commit": {"author": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-08-14T18:56:20Z"}, "committer": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-08-15T22:14:21Z"}, "message": "Test move-into-Fn/FnMut errors too", "tree": {"sha": "7b4beb8d55fbf81a27751e5e24d4c961c689456e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b4beb8d55fbf81a27751e5e24d4c961c689456e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5b008c45065989e58a1afa5809df0daac481a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b008c45065989e58a1afa5809df0daac481a75", "html_url": "https://github.com/rust-lang/rust/commit/a5b008c45065989e58a1afa5809df0daac481a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5b008c45065989e58a1afa5809df0daac481a75/comments", "author": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a24abbbc552ac94e8b18cbc1ef38414d192c60f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a24abbbc552ac94e8b18cbc1ef38414d192c60f", "html_url": "https://github.com/rust-lang/rust/commit/6a24abbbc552ac94e8b18cbc1ef38414d192c60f"}], "stats": {"total": 532, "additions": 530, "deletions": 2}, "files": [{"sha": "8cc847e693fa71179bae68dfc2bea1cf750616e8", "filename": "src/test/ui/suggestions/dont-suggest-ref-in-closure.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/a5b008c45065989e58a1afa5809df0daac481a75/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b008c45065989e58a1afa5809df0daac481a75/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref-in-closure.rs?ref=a5b008c45065989e58a1afa5809df0daac481a75", "patch": "@@ -0,0 +1,171 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+#[derive(Clone)]\n+enum Either {\n+    One(X),\n+    Two(X),\n+}\n+\n+#[derive(Clone)]\n+struct X(Y);\n+\n+#[derive(Clone)]\n+struct Y;\n+\n+fn consume_fn<F: Fn()>(_f: F) { }\n+\n+fn consume_fnmut<F: FnMut()>(_f: F) { }\n+\n+pub fn main() { }\n+\n+fn move_into_fn() {\n+    let e = Either::One(X(Y));\n+    let mut em = Either::One(X(Y));\n+\n+    let x = X(Y);\n+\n+    // -------- move into Fn --------\n+\n+    consume_fn(|| {\n+        let X(_t) = x;\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &x\n+        if let Either::One(_t) = e { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &e\n+        while let Either::One(_t) = e { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &e\n+        match e {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &e\n+            Either::One(_t)\n+            | Either::Two(_t) => (),\n+        }\n+        match e {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &e\n+            Either::One(_t) => (),\n+            Either::Two(ref _t) => (),\n+            // FIXME: should suggest removing `ref` too\n+        }\n+\n+        let X(mut _t) = x;\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &x\n+        if let Either::One(mut _t) = em { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &em\n+        while let Either::One(mut _t) = em { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &em\n+        match em {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &em\n+            Either::One(mut _t)\n+            | Either::Two(mut _t) => (),\n+        }\n+        match em {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &em\n+            Either::One(mut _t) => (),\n+            Either::Two(ref _t) => (),\n+            // FIXME: should suggest removing `ref` too\n+        }\n+    });\n+}\n+\n+fn move_into_fnmut() {\n+    let e = Either::One(X(Y));\n+    let mut em = Either::One(X(Y));\n+\n+    let x = X(Y);\n+\n+    // -------- move into FnMut --------\n+\n+    consume_fnmut(|| {\n+        let X(_t) = x;\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &x\n+        if let Either::One(_t) = e { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &e\n+        while let Either::One(_t) = e { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &e\n+        match e {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &e\n+            Either::One(_t)\n+            | Either::Two(_t) => (),\n+        }\n+        match e {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &e\n+            Either::One(_t) => (),\n+            Either::Two(ref _t) => (),\n+            // FIXME: should suggest removing `ref` too\n+        }\n+\n+        let X(mut _t) = x;\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &x\n+        if let Either::One(mut _t) = em { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &em\n+        while let Either::One(mut _t) = em { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &em\n+        match em {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &em\n+            Either::One(mut _t)\n+            | Either::Two(mut _t) => (),\n+        }\n+        match em {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &em\n+            Either::One(mut _t) => (),\n+            Either::Two(ref _t) => (),\n+            // FIXME: should suggest removing `ref` too\n+        }\n+        match em {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &em\n+            Either::One(mut _t) => (),\n+            Either::Two(ref mut _t) => (),\n+            // FIXME: should suggest removing `ref` too\n+        }\n+    });\n+}"}, {"sha": "d90773786e58d78f763c9abf1de726fb5cad7856", "filename": "src/test/ui/suggestions/dont-suggest-ref-in-closure.stderr", "status": "added", "additions": 357, "deletions": 0, "changes": 357, "blob_url": "https://github.com/rust-lang/rust/blob/a5b008c45065989e58a1afa5809df0daac481a75/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref-in-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5b008c45065989e58a1afa5809df0daac481a75/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref-in-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref-in-closure.stderr?ref=a5b008c45065989e58a1afa5809df0daac481a75", "patch": "@@ -0,0 +1,357 @@\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:40:21\n+   |\n+LL |         let X(_t) = x;\n+   |               --    ^\n+   |               |     |\n+   |               |     cannot move out of captured variable in an `Fn` closure\n+   |               |     help: consider borrowing here: `&x`\n+   |               data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:40:15\n+   |\n+LL |         let X(_t) = x;\n+   |               ^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:44:34\n+   |\n+LL |         if let Either::One(_t) = e { }\n+   |                            --    ^\n+   |                            |     |\n+   |                            |     cannot move out of captured variable in an `Fn` closure\n+   |                            |     help: consider borrowing here: `&e`\n+   |                            data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:44:28\n+   |\n+LL |         if let Either::One(_t) = e { }\n+   |                            ^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:48:37\n+   |\n+LL |         while let Either::One(_t) = e { }\n+   |                               --    ^\n+   |                               |     |\n+   |                               |     cannot move out of captured variable in an `Fn` closure\n+   |                               |     help: consider borrowing here: `&e`\n+   |                               data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:48:31\n+   |\n+LL |         while let Either::One(_t) = e { }\n+   |                               ^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:52:15\n+   |\n+LL |         match e {\n+   |               ^\n+   |               |\n+   |               cannot move out of captured variable in an `Fn` closure\n+   |               help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t)\n+   |                         -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:56:25\n+   |\n+LL |             Either::One(_t)\n+   |                         ^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:59:15\n+   |\n+LL |         match e {\n+   |               ^\n+   |               |\n+   |               cannot move out of captured variable in an `Fn` closure\n+   |               help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t) => (),\n+   |                         -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:63:25\n+   |\n+LL |             Either::One(_t) => (),\n+   |                         ^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:68:25\n+   |\n+LL |         let X(mut _t) = x;\n+   |               ------    ^\n+   |               |         |\n+   |               |         cannot move out of captured variable in an `Fn` closure\n+   |               |         help: consider borrowing here: `&x`\n+   |               data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:68:15\n+   |\n+LL |         let X(mut _t) = x;\n+   |               ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:72:38\n+   |\n+LL |         if let Either::One(mut _t) = em { }\n+   |                            ------    ^^\n+   |                            |         |\n+   |                            |         cannot move out of captured variable in an `Fn` closure\n+   |                            |         help: consider borrowing here: `&em`\n+   |                            data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:72:28\n+   |\n+LL |         if let Either::One(mut _t) = em { }\n+   |                            ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:76:41\n+   |\n+LL |         while let Either::One(mut _t) = em { }\n+   |                               ------    ^^\n+   |                               |         |\n+   |                               |         cannot move out of captured variable in an `Fn` closure\n+   |                               |         help: consider borrowing here: `&em`\n+   |                               data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:76:31\n+   |\n+LL |         while let Either::One(mut _t) = em { }\n+   |                               ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:80:15\n+   |\n+LL |         match em {\n+   |               ^^\n+   |               |\n+   |               cannot move out of captured variable in an `Fn` closure\n+   |               help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t)\n+   |                         ------ data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:84:25\n+   |\n+LL |             Either::One(mut _t)\n+   |                         ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:87:15\n+   |\n+LL |         match em {\n+   |               ^^\n+   |               |\n+   |               cannot move out of captured variable in an `Fn` closure\n+   |               help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t) => (),\n+   |                         ------ data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:91:25\n+   |\n+LL |             Either::One(mut _t) => (),\n+   |                         ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:107:21\n+   |\n+LL |         let X(_t) = x;\n+   |               --    ^\n+   |               |     |\n+   |               |     cannot move out of captured variable in an `FnMut` closure\n+   |               |     help: consider borrowing here: `&x`\n+   |               data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:107:15\n+   |\n+LL |         let X(_t) = x;\n+   |               ^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:111:34\n+   |\n+LL |         if let Either::One(_t) = e { }\n+   |                            --    ^\n+   |                            |     |\n+   |                            |     cannot move out of captured variable in an `FnMut` closure\n+   |                            |     help: consider borrowing here: `&e`\n+   |                            data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:111:28\n+   |\n+LL |         if let Either::One(_t) = e { }\n+   |                            ^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:115:37\n+   |\n+LL |         while let Either::One(_t) = e { }\n+   |                               --    ^\n+   |                               |     |\n+   |                               |     cannot move out of captured variable in an `FnMut` closure\n+   |                               |     help: consider borrowing here: `&e`\n+   |                               data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:115:31\n+   |\n+LL |         while let Either::One(_t) = e { }\n+   |                               ^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:119:15\n+   |\n+LL |         match e {\n+   |               ^\n+   |               |\n+   |               cannot move out of captured variable in an `FnMut` closure\n+   |               help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t)\n+   |                         -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:123:25\n+   |\n+LL |             Either::One(_t)\n+   |                         ^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:126:15\n+   |\n+LL |         match e {\n+   |               ^\n+   |               |\n+   |               cannot move out of captured variable in an `FnMut` closure\n+   |               help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t) => (),\n+   |                         -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:130:25\n+   |\n+LL |             Either::One(_t) => (),\n+   |                         ^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:135:25\n+   |\n+LL |         let X(mut _t) = x;\n+   |               ------    ^\n+   |               |         |\n+   |               |         cannot move out of captured variable in an `FnMut` closure\n+   |               |         help: consider borrowing here: `&x`\n+   |               data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:135:15\n+   |\n+LL |         let X(mut _t) = x;\n+   |               ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:139:38\n+   |\n+LL |         if let Either::One(mut _t) = em { }\n+   |                            ------    ^^\n+   |                            |         |\n+   |                            |         cannot move out of captured variable in an `FnMut` closure\n+   |                            |         help: consider borrowing here: `&em`\n+   |                            data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:139:28\n+   |\n+LL |         if let Either::One(mut _t) = em { }\n+   |                            ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:143:41\n+   |\n+LL |         while let Either::One(mut _t) = em { }\n+   |                               ------    ^^\n+   |                               |         |\n+   |                               |         cannot move out of captured variable in an `FnMut` closure\n+   |                               |         help: consider borrowing here: `&em`\n+   |                               data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:143:31\n+   |\n+LL |         while let Either::One(mut _t) = em { }\n+   |                               ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:147:15\n+   |\n+LL |         match em {\n+   |               ^^\n+   |               |\n+   |               cannot move out of captured variable in an `FnMut` closure\n+   |               help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t)\n+   |                         ------ data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:151:25\n+   |\n+LL |             Either::One(mut _t)\n+   |                         ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:154:15\n+   |\n+LL |         match em {\n+   |               ^^\n+   |               |\n+   |               cannot move out of captured variable in an `FnMut` closure\n+   |               help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t) => (),\n+   |                         ------ data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:158:25\n+   |\n+LL |             Either::One(mut _t) => (),\n+   |                         ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/dont-suggest-ref-in-closure.rs:162:15\n+   |\n+LL |         match em {\n+   |               ^^\n+   |               |\n+   |               cannot move out of captured variable in an `FnMut` closure\n+   |               help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t) => (),\n+   |                         ------ data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/dont-suggest-ref-in-closure.rs:166:25\n+   |\n+LL |             Either::One(mut _t) => (),\n+   |                         ^^^^^^\n+\n+error: aborting due to 21 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "3bd6102c5d648ed488dcfa6a1dc4670b5df27731", "filename": "src/test/ui/suggestions/dont-suggest-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5b008c45065989e58a1afa5809df0daac481a75/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b008c45065989e58a1afa5809df0daac481a75/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.rs?ref=a5b008c45065989e58a1afa5809df0daac481a75", "patch": "@@ -108,7 +108,7 @@ pub fn main() {\n         //~| SUGGESTION rm\n         Either::One(_t) => (),\n         Either::Two(ref mut _t) => (),\n-        // FIXME: should suggest removing `ref mut` too\n+        // FIXME: should suggest removing `ref` too\n     }\n \n     let X(_t) = vs[0];\n@@ -172,7 +172,7 @@ pub fn main() {\n         //~| SUGGESTION &vrm[0]\n         Either::One(_t) => (),\n         Either::Two(ref mut _t) => (),\n-        // FIXME: should suggest removing `ref mut` too\n+        // FIXME: should suggest removing `ref` too\n     }\n \n     // -------- move from &Either/&X place --------"}]}