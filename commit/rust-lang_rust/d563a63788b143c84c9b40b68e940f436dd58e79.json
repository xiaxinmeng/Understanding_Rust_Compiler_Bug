{"sha": "d563a63788b143c84c9b40b68e940f436dd58e79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NjNhNjM3ODhiMTQzYzg0YzliNDBiNjhlOTQwZjQzNmRkNThlNzk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-06-07T19:25:19Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-08-15T07:11:01Z"}, "message": "Report nicer errors for HRTB NLL errors from queries", "tree": {"sha": "a9128644268240f064ca75293aec64ba24e298c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9128644268240f064ca75293aec64ba24e298c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d563a63788b143c84c9b40b68e940f436dd58e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d563a63788b143c84c9b40b68e940f436dd58e79", "html_url": "https://github.com/rust-lang/rust/commit/d563a63788b143c84c9b40b68e940f436dd58e79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d563a63788b143c84c9b40b68e940f436dd58e79/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c388b0261d7ac33089e5b10ab215653154a5293", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c388b0261d7ac33089e5b10ab215653154a5293", "html_url": "https://github.com/rust-lang/rust/commit/0c388b0261d7ac33089e5b10ab215653154a5293"}], "stats": {"total": 574, "additions": 473, "deletions": 101}, "files": [{"sha": "9b9ded5c6bab4a1d1afd6ed89101117308233fc7", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1111,7 +1111,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// etc) this is the root universe U0. For inference variables or\n     /// placeholders, however, it will return the universe which which\n     /// they are associated.\n-    fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {\n+    pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {\n         self.inner.borrow_mut().unwrap_region_constraints().universe(r)\n     }\n \n@@ -1289,6 +1289,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         op(inner.unwrap_region_constraints().data())\n     }\n \n+    pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {\n+        let mut inner = self.inner.borrow_mut();\n+        let inner = &mut *inner;\n+        inner\n+            .region_constraint_storage\n+            .as_mut()\n+            .expect(\"regions already resolved\")\n+            .with_log(&mut inner.undo_log)\n+            .var_origin(vid)\n+    }\n+\n     /// Takes ownership of the list of variable regions. This implies\n     /// that all the region constraints have already been taken, and\n     /// hence that `resolve_regions_and_report_errors` can never be"}, {"sha": "5adbfd469a4aef3889d7a17ec599c8c6286667ec", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -445,6 +445,11 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         self.var_infos[vid].universe\n     }\n \n+    /// Returns the origin for the given variable.\n+    pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {\n+        self.var_infos[vid].origin\n+    }\n+\n     fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {\n         // cannot add constraints once regions are resolved\n         debug!(\"RegionConstraintCollector: add_constraint({:?})\", constraint);"}, {"sha": "8400bcf12d7a3f830e160b3627b4c23e8ef0ece4", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 234, "deletions": 18, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,9 +1,14 @@\n+use rustc_errors::DiagnosticBuilder;\n use rustc_infer::infer::canonical::Canonical;\n-use rustc_infer::traits::ObligationCause;\n+use rustc_infer::infer::error_reporting::nice_region_error::NiceRegionError;\n+use rustc_infer::infer::region_constraints::Constraint;\n+use rustc_infer::infer::{InferCtxt, RegionResolutionError, SubregionOrigin, TyCtxtInferExt as _};\n+use rustc_infer::traits::{Normalized, Obligation, ObligationCause, TraitEngine, TraitEngineExt};\n use rustc_middle::ty::error::TypeError;\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::type_op;\n+use rustc_trait_selection::traits::{SelectionContext, TraitEngineExt as _};\n \n use std::fmt;\n use std::rc::Rc;\n@@ -37,11 +42,10 @@ impl UniverseInfo<'tcx> {\n     crate fn report_error(\n         &self,\n         mbcx: &mut MirBorrowckCtxt<'_, 'tcx>,\n-        _placeholder: ty::PlaceholderRegion,\n-        _error_element: RegionElement,\n+        placeholder: ty::PlaceholderRegion,\n+        error_element: RegionElement,\n         span: Span,\n     ) {\n-        // FIXME: improve this error message\n         match self.0 {\n             UniverseInfoInner::RelateTys { expected, found } => {\n                 let body_id = mbcx.infcx.tcx.hir().local_def_id_to_hir_id(mbcx.mir_def_id());\n@@ -53,7 +57,13 @@ impl UniverseInfo<'tcx> {\n                 );\n                 err.buffer(&mut mbcx.errors_buffer);\n             }\n-            UniverseInfoInner::TypeOp(_) | UniverseInfoInner::Other => {\n+            UniverseInfoInner::TypeOp(ref type_op_info) => {\n+                type_op_info.report_error(mbcx, placeholder, error_element, span);\n+            }\n+            UniverseInfoInner::Other => {\n+                // FIXME: This error message isn't great, but it doesn't show\n+                // up in the existing UI tests. Consider investigating this\n+                // some more.\n                 mbcx.infcx\n                     .tcx\n                     .sess\n@@ -73,8 +83,8 @@ impl<'tcx> ToUniverseInfo<'tcx>\n {\n     fn to_universe_info(self, base_universe: ty::UniverseIndex) -> UniverseInfo<'tcx> {\n         UniverseInfo(UniverseInfoInner::TypeOp(Rc::new(PredicateQuery {\n-            _canonical_query: self,\n-            _base_universe: base_universe,\n+            canonical_query: self,\n+            base_universe,\n         })))\n     }\n }\n@@ -84,8 +94,8 @@ impl<'tcx, T: Copy + fmt::Display + TypeFoldable<'tcx> + 'tcx> ToUniverseInfo<'t\n {\n     fn to_universe_info(self, base_universe: ty::UniverseIndex) -> UniverseInfo<'tcx> {\n         UniverseInfo(UniverseInfoInner::TypeOp(Rc::new(NormalizeQuery {\n-            _canonical_query: self,\n-            _base_universe: base_universe,\n+            canonical_query: self,\n+            base_universe,\n         })))\n     }\n }\n@@ -109,23 +119,229 @@ impl<'tcx, F, G> ToUniverseInfo<'tcx> for Canonical<'tcx, type_op::custom::Custo\n \n #[allow(unused_lifetimes)]\n trait TypeOpInfo<'tcx> {\n-    // TODO: Methods for rerunning type op and reporting an error\n+    /// Returns an rrror to be reported if rerunning the type op fails to\n+    /// recover the error's cause.\n+    fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx>;\n+\n+    fn base_universe(&self) -> ty::UniverseIndex;\n+\n+    fn nice_error(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        span: Span,\n+        placeholder_region: ty::Region<'tcx>,\n+        error_region: Option<ty::Region<'tcx>>,\n+    ) -> Option<DiagnosticBuilder<'tcx>>;\n+\n+    fn report_error(\n+        &self,\n+        mbcx: &mut MirBorrowckCtxt<'_, 'tcx>,\n+        placeholder: ty::PlaceholderRegion,\n+        error_element: RegionElement,\n+        span: Span,\n+    ) {\n+        let tcx = mbcx.infcx.tcx;\n+        let base_universe = self.base_universe();\n+\n+        let adjusted_universe = if let Some(adjusted) =\n+            placeholder.universe.as_u32().checked_sub(base_universe.as_u32())\n+        {\n+            adjusted\n+        } else {\n+            self.fallback_error(tcx, span).buffer(&mut mbcx.errors_buffer);\n+            return;\n+        };\n+\n+        let placeholder_region = tcx.mk_region(ty::RePlaceholder(ty::Placeholder {\n+            name: placeholder.name,\n+            universe: adjusted_universe.into(),\n+        }));\n+\n+        let error_region =\n+            if let RegionElement::PlaceholderRegion(error_placeholder) = error_element {\n+                let adjusted_universe =\n+                    error_placeholder.universe.as_u32().checked_sub(base_universe.as_u32());\n+                adjusted_universe.map(|adjusted| {\n+                    tcx.mk_region(ty::RePlaceholder(ty::Placeholder {\n+                        name: error_placeholder.name,\n+                        universe: adjusted.into(),\n+                    }))\n+                })\n+            } else {\n+                None\n+            };\n+\n+        debug!(?placeholder_region);\n+\n+        let nice_error = self.nice_error(tcx, span, placeholder_region, error_region);\n+\n+        if let Some(nice_error) = nice_error {\n+            nice_error.buffer(&mut mbcx.errors_buffer);\n+        } else {\n+            self.fallback_error(tcx, span).buffer(&mut mbcx.errors_buffer);\n+        }\n+    }\n }\n \n struct PredicateQuery<'tcx> {\n-    _canonical_query:\n+    canonical_query:\n         Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::prove_predicate::ProvePredicate<'tcx>>>,\n-    _base_universe: ty::UniverseIndex,\n+    base_universe: ty::UniverseIndex,\n }\n \n-impl TypeOpInfo<'tcx> for PredicateQuery<'tcx> {}\n+impl TypeOpInfo<'tcx> for PredicateQuery<'tcx> {\n+    fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        let mut err = tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\");\n+        err.note(&format!(\"could not prove {}\", self.canonical_query.value.value.predicate));\n+        err\n+    }\n+\n+    fn base_universe(&self) -> ty::UniverseIndex {\n+        self.base_universe\n+    }\n+\n+    fn nice_error(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        span: Span,\n+        placeholder_region: ty::Region<'tcx>,\n+        error_region: Option<ty::Region<'tcx>>,\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n+        tcx.infer_ctxt().enter_with_canonical(span, &self.canonical_query, |ref infcx, key, _| {\n+            let mut fulfill_cx = TraitEngine::new(tcx);\n+\n+            let (param_env, prove_predicate) = key.into_parts();\n+            fulfill_cx.register_predicate_obligation(\n+                infcx,\n+                Obligation::new(\n+                    ObligationCause::dummy_with_span(span),\n+                    param_env,\n+                    prove_predicate.predicate,\n+                ),\n+            );\n+\n+            try_extract_error_from_fulfill_cx(fulfill_cx, infcx, placeholder_region, error_region)\n+        })\n+    }\n+}\n \n struct NormalizeQuery<'tcx, T> {\n-    _canonical_query: Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::Normalize<T>>>,\n-    _base_universe: ty::UniverseIndex,\n+    canonical_query: Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::Normalize<T>>>,\n+    base_universe: ty::UniverseIndex,\n }\n \n-impl<T> TypeOpInfo<'tcx> for NormalizeQuery<'tcx, T> where\n-    T: Copy + fmt::Display + TypeFoldable<'tcx> + 'tcx\n+impl<T> TypeOpInfo<'tcx> for NormalizeQuery<'tcx, T>\n+where\n+    T: Copy + fmt::Display + TypeFoldable<'tcx> + 'tcx,\n {\n+    fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        let mut err = tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\");\n+        err.note(&format!(\"could not normalize `{}`\", self.canonical_query.value.value.value));\n+        err\n+    }\n+\n+    fn base_universe(&self) -> ty::UniverseIndex {\n+        self.base_universe\n+    }\n+\n+    fn nice_error(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        span: Span,\n+        placeholder_region: ty::Region<'tcx>,\n+        error_region: Option<ty::Region<'tcx>>,\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n+        tcx.infer_ctxt().enter_with_canonical(span, &self.canonical_query, |ref infcx, key, _| {\n+            let mut fulfill_cx = TraitEngine::new(tcx);\n+\n+            let mut selcx = SelectionContext::new(infcx);\n+            let (param_env, value) = key.into_parts();\n+\n+            let Normalized { value: _, obligations } = rustc_trait_selection::traits::normalize(\n+                &mut selcx,\n+                param_env,\n+                ObligationCause::dummy_with_span(span),\n+                value.value,\n+            );\n+            fulfill_cx.register_predicate_obligations(infcx, obligations);\n+\n+            try_extract_error_from_fulfill_cx(fulfill_cx, infcx, placeholder_region, error_region)\n+        })\n+    }\n+}\n+\n+fn try_extract_error_from_fulfill_cx<'tcx>(\n+    mut fulfill_cx: Box<dyn TraitEngine<'tcx> + 'tcx>,\n+    infcx: &InferCtxt<'_, 'tcx>,\n+    placeholder_region: ty::Region<'tcx>,\n+    error_region: Option<ty::Region<'tcx>>,\n+) -> Option<DiagnosticBuilder<'tcx>> {\n+    let tcx = infcx.tcx;\n+\n+    // We generally shouldn't have here because the query was\n+    // already run, but there's no point using `delay_span_bug`\n+    // when we're going to emit an error here anyway.\n+    let _errors = fulfill_cx.select_all_or_error(infcx).err().unwrap_or_else(Vec::new);\n+\n+    let region_obligations = infcx.take_registered_region_obligations();\n+    debug!(?region_obligations);\n+\n+    let (sub_region, cause) = infcx.with_region_constraints(|region_constraints| {\n+        debug!(?region_constraints);\n+        region_constraints.constraints.iter().find_map(|(constraint, cause)| {\n+            match *constraint {\n+                Constraint::RegSubReg(sub, sup) if sup == placeholder_region && sup != sub => {\n+                    Some((sub, cause.clone()))\n+                }\n+                // FIXME: Should this check the universe of the var?\n+                Constraint::VarSubReg(vid, sup) if sup == placeholder_region => {\n+                    Some((tcx.mk_region(ty::ReVar(vid)), cause.clone()))\n+                }\n+                _ => None,\n+            }\n+        })\n+    })?;\n+\n+    debug!(?sub_region, ?cause);\n+    let nice_error = match (error_region, sub_region) {\n+        (Some(error_region), &ty::ReVar(vid)) => NiceRegionError::new(\n+            infcx,\n+            RegionResolutionError::SubSupConflict(\n+                vid,\n+                infcx.region_var_origin(vid),\n+                cause.clone(),\n+                error_region,\n+                cause.clone(),\n+                placeholder_region,\n+            ),\n+        ),\n+        (Some(error_region), _) => NiceRegionError::new(\n+            infcx,\n+            RegionResolutionError::ConcreteFailure(cause.clone(), error_region, placeholder_region),\n+        ),\n+        // Note universe here is wrong...\n+        (None, &ty::ReVar(vid)) => NiceRegionError::new(\n+            infcx,\n+            RegionResolutionError::UpperBoundUniverseConflict(\n+                vid,\n+                infcx.region_var_origin(vid),\n+                infcx.universe_of_region(sub_region),\n+                cause.clone(),\n+                placeholder_region,\n+            ),\n+        ),\n+        (None, _) => NiceRegionError::new(\n+            infcx,\n+            RegionResolutionError::ConcreteFailure(cause.clone(), sub_region, placeholder_region),\n+        ),\n+    };\n+    nice_error.try_report_from_nll().or_else(|| {\n+        if let SubregionOrigin::Subtype(trace) = cause {\n+            Some(\n+                infcx.report_and_explain_type_error(*trace, &TypeError::RegionsPlaceholderMismatch),\n+            )\n+        } else {\n+            None\n+        }\n+    })\n }"}, {"sha": "59e27cd2e7dd6e2b8bc014d8bb37bc4acb0e9d4e", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.nll.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,8 +1,12 @@\n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n LL |     foo(());\n-   |     ^^^^^^^\n+   |     ^^^^^^^ one type is more general than the other\n+   |\n+   = note:   expected type `&'a ()`\n+           found reference `&()`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "76970fb7872142f0260cb46ed333c13c9ea10039", "filename": "src/test/ui/generator/auto-trait-regions.nll.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -24,17 +24,23 @@ LL |         assert_foo(a);\n    |\n    = note: consider using a `let` binding to create a longer lived value\n \n-error: higher-ranked subtype error\n+error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:31:5\n    |\n LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n-error: higher-ranked subtype error\n+error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:50:5\n    |\n LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "25bc6afc550b3a08e9ae3cbc115b2f81d5c13792", "filename": "src/test/ui/generator/resume-arg-late-bound.nll.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,8 +1,12 @@\n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/resume-arg-late-bound.rs:15:5\n    |\n LL |     test(gen);\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'a> Generator<&'a mut bool>`\n+              found type `Generator<&mut bool>`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d617571753c1d28559ab06c4de64756a359d184b", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -14,7 +14,7 @@ pub fn crash<V>(v: &V)\n where\n     for<'a> &'a V: T + 'static,\n {\n-    v.t(|| {}); //~ ERROR: higher-ranked subtype error\n+    v.t(|| {}); //~ ERROR: higher-ranked lifetime error\n }\n \n fn main() {}"}, {"sha": "c16c8206153248d8202e782e21b85c7d79e39073", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,8 +1,10 @@\n-error: higher-ranked subtype error\n+error: higher-ranked lifetime error\n   --> $DIR/issue-59311.rs:17:9\n    |\n LL |     v.t(|| {});\n    |         ^^^^^\n+   |\n+   = note: could not prove for<'a> &'a V: 'static\n \n error: aborting due to previous error\n "}, {"sha": "46f5308dd87ba4cb193cc6884f806743790f883f", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.nll.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,14 +1,20 @@\n-error: higher-ranked subtype error\n+error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-conflate-regions.rs:27:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `SomeStruct` must implement `Foo<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but it actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n-error: higher-ranked subtype error\n+error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-conflate-regions.rs:27:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `SomeStruct` must implement `Foo<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but it actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "364b613fc7717b87ac4401c7d5edaa7883bad873", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,8 +1,11 @@\n-error: higher-ranked subtype error\n+error: implementation of `Trait` is not general enough\n   --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n    |\n LL |     foo::<()>();\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `()` must implement `Trait<for<'b> fn(&'b u32)>`\n+   = note: ...but it actually implements `Trait<fn(&'0 u32)>`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n "}, {"sha": "cb2ce8a4116aa887b5621130f33e9f5e1bbd391d", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,8 +1,11 @@\n-error: higher-ranked subtype error\n+error: implementation of `Trait` is not general enough\n   --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n    |\n LL |     foo::<()>();\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `()` must implement `Trait<for<'b> fn(Cell<&'b u32>)>`\n+   = note: ...but it actually implements `Trait<fn(Cell<&'0 u32>)>`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n "}, {"sha": "a812282def9a80835779b90b0707d81e9eb2b2fa", "filename": "src/test/ui/hrtb/hrtb-just-for-static.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,8 +1,11 @@\n-error: higher-ranked subtype error\n+error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:24:5\n    |\n LL |     want_hrtb::<StaticInt>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Foo<&'static isize>`\n \n error: lifetime may not live long enough\n   --> $DIR/hrtb-just-for-static.rs:30:5"}, {"sha": "aefe3cdfd6487a00466de9cef3ef7e1b68967e4f", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -57,11 +57,14 @@ LL |     foo_hrtb_bar_not(&mut t);\n    |\n    = help: consider replacing `'b` with `'static`\n \n-error: higher-ranked subtype error\n+error: implementation of `Bar` is not general enough\n   --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n+   |\n+   = note: `T` must implement `Bar<&'0 isize>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Bar<&'1 isize>`, for some specific lifetime `'1`\n \n warning: function cannot return without recursing\n   --> $DIR/hrtb-perfect-forwarding.rs:48:1"}, {"sha": "309e1a676edafa4669f72f15f32c129f69cf4e50", "filename": "src/test/ui/hrtb/issue-46989.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,8 +1,11 @@\n-error: higher-ranked subtype error\n+error: implementation of `Foo` is not general enough\n   --> $DIR/issue-46989.rs:38:5\n    |\n LL |     assert_foo::<fn(&i32)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `for<'r> fn(&'r i32)`\n+   = note: ...but `Foo` is actually implemented for the type `fn(&'0 i32)`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n "}, {"sha": "e6f0b5fbfba1dc098b8501a9f22a5a1e19c07707", "filename": "src/test/ui/issues/issue-40000.nll.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fissues%2Fissue-40000.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fissues%2Fissue-40000.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,14 +1,21 @@\n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/issue-40000.rs:6:9\n    |\n LL |     foo(bar);\n-   |         ^^^\n+   |         ^^^ one type is more general than the other\n+   |\n+   = note: expected trait object `dyn for<'r> Fn(&'r i32)`\n+              found trait object `dyn Fn(&i32)`\n \n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/issue-40000.rs:6:9\n    |\n LL |     foo(bar);\n-   |         ^^^\n+   |         ^^^ one type is more general than the other\n+   |\n+   = note: expected trait object `dyn for<'r> Fn(&'r i32)`\n+              found trait object `dyn Fn(&i32)`\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6e8b69c4beebb2bfbfefb11ab6b43ba18d580a83", "filename": "src/test/ui/issues/issue-54302-cases.nll.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,26 +1,38 @@\n-error: higher-ranked subtype error\n+error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:63:5\n    |\n LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo<'static, u32>` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`...\n+   = note: ...but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n-error: higher-ranked subtype error\n+error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:69:5\n    |\n LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo<'static, i32>` would have to be implemented for the type `&'0 i32`, for any lifetime `'0`...\n+   = note: ...but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for some specific lifetime `'1`\n \n-error: higher-ranked subtype error\n+error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:75:5\n    |\n LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo<'static, u64>` would have to be implemented for the type `&'0 u64`, for any lifetime `'0`...\n+   = note: ...but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for some specific lifetime `'1`\n \n-error: higher-ranked subtype error\n+error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:81:5\n    |\n LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo<'static, i64>` would have to be implemented for the type `&'0 i64`, for any lifetime `'0`...\n+   = note: ...but `Foo<'_, i64>` is actually implemented for the type `&'1 i64`, for some specific lifetime `'1`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "97fd6678c997e6d959bd61680b7ab1bc2b947ae4", "filename": "src/test/ui/issues/issue-55731.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,11 +1,14 @@\n-error: higher-ranked subtype error\n+error: implementation of `DistributedIteratorMulti` is not general enough\n   --> $DIR/issue-55731.rs:48:5\n    |\n LL | /     multi(Map {\n LL | |         i: Cloned(PhantomData),\n LL | |         f: X,\n LL | |     });\n-   | |______^\n+   | |______^ implementation of `DistributedIteratorMulti` is not general enough\n+   |\n+   = note: `DistributedIteratorMulti<&'0 ()>` would have to be implemented for the type `Cloned<&()>`, for any lifetime `'0`...\n+   = note: ...but `DistributedIteratorMulti<&'1 ()>` is actually implemented for the type `Cloned<&'1 ()>`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "2ab49ec61cf597ef187b72d897312e9ffd112962", "filename": "src/test/ui/issues/issue-57843.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,8 +1,11 @@\n-error: higher-ranked subtype error\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-57843.rs:25:9\n    |\n LL |     Foo(Box::new(|_| ()));\n-   |         ^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 bool)` must implement `FnOnce<(&'1 bool,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 bool,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n "}, {"sha": "907b43d6762e98e51a36463b5a110ec222920a89", "filename": "src/test/ui/lifetimes/issue-79187-2.nll.stderr", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -16,29 +16,47 @@ LL |     take_foo(|a: &i32| -> &i32 { a });\n    |                  |        let's call the lifetime of this reference `'2`\n    |                  let's call the lifetime of this reference `'1`\n \n-error: higher-ranked subtype error\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-79187-2.rs:8:5\n    |\n LL |     take_foo(|a| a);\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 i32) -> &i32` must implement `FnOnce<(&'1 i32,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 i32,)>`, for some specific lifetime `'2`\n \n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/issue-79187-2.rs:8:5\n    |\n LL |     take_foo(|a| a);\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> Fn<(&'r i32,)>`\n+              found type `Fn<(&i32,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-79187-2.rs:8:14\n+   |\n+LL |     take_foo(|a| a);\n+   |              ^^^^^\n \n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/issue-79187-2.rs:9:5\n    |\n LL |     take_foo(|a: &i32| a);\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected reference `&i32`\n+              found reference `&i32`\n \n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/issue-79187-2.rs:10:5\n    |\n LL |     take_foo(|a: &i32| -> &i32 { a });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected reference `&i32`\n+              found reference `&i32`\n \n error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "725b132e83a12b0aaeb5596bfc2cba9c9b1b36ec", "filename": "src/test/ui/lifetimes/issue-79187.nll.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,14 +1,26 @@\n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/issue-79187.rs:5:5\n    |\n LL |     thing(f);\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> FnOnce<(&'r u32,)>`\n+              found type `FnOnce<(&u32,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-79187.rs:4:13\n+   |\n+LL |     let f = |_| ();\n+   |             ^^^^^^\n \n-error: higher-ranked subtype error\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-79187.rs:5:5\n    |\n LL |     thing(f);\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 u32)` must implement `FnOnce<(&'1 u32,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 u32,)>`, for some specific lifetime `'2`\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ad14d6b7521bcaf97090931114f75e66e350f341", "filename": "src/test/ui/lub-glb/old-lub-glb-object.nll.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,14 +1,21 @@\n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/old-lub-glb-object.rs:10:14\n    |\n LL |         _ => y,\n-   |              ^\n+   |              ^ one type is more general than the other\n+   |\n+   = note: expected trait object `dyn for<'r, 's> Foo<&'r u8, &'s u8>`\n+              found trait object `dyn for<'r> Foo<&'r u8, &'r u8>`\n \n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/old-lub-glb-object.rs:10:14\n    |\n LL |         _ => y,\n-   |              ^\n+   |              ^ one type is more general than the other\n+   |\n+   = note: expected trait object `dyn for<'r, 's> Foo<&'r u8, &'s u8>`\n+              found trait object `dyn for<'r> Foo<&'r u8, &'r u8>`\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "f29126e6afc76c7430e0896533fcf2510ab7516d", "filename": "src/test/ui/mismatched_types/closure-mismatch.nll.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,14 +1,26 @@\n-error: higher-ranked subtype error\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n LL |     baz(|_| ());\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 ())` must implement `FnOnce<(&'1 (),)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 (),)>`, for some specific lifetime `'2`\n \n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n LL |     baz(|_| ());\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> Fn<(&'r (),)>`\n+              found type `Fn<(&(),)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/closure-mismatch.rs:8:9\n+   |\n+LL |     baz(|_| ());\n+   |         ^^^^^^\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "37a01f28946d204fa83357f296aef362febd21b3", "filename": "src/test/ui/nll/relate_tys/impl-fn-ignore-binder-via-bottom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.rs?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -30,6 +30,6 @@ impl<T> Y for fn(T) {\n \n fn main() {\n     let _x = <fn(&())>::make_f();\n-    //~^ higher-ranked subtype error\n-    //~| higher-ranked subtype error\n+    //~^ ERROR implementation of `Y` is not general enough\n+    //~| ERROR implementation of `Y` is not general enough\n }"}, {"sha": "ed79c7df25e2a0aa0dab078bc195b2e0eb44cafd", "filename": "src/test/ui/nll/relate_tys/impl-fn-ignore-binder-via-bottom.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,14 +1,20 @@\n-error: higher-ranked subtype error\n+error: implementation of `Y` is not general enough\n   --> $DIR/impl-fn-ignore-binder-via-bottom.rs:32:14\n    |\n LL |     let _x = <fn(&())>::make_f();\n-   |              ^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^ implementation of `Y` is not general enough\n+   |\n+   = note: `Y` would have to be implemented for the type `for<'r> fn(&'r ())`\n+   = note: ...but `Y` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n \n-error: higher-ranked subtype error\n+error: implementation of `Y` is not general enough\n   --> $DIR/impl-fn-ignore-binder-via-bottom.rs:32:14\n    |\n LL |     let _x = <fn(&())>::make_f();\n-   |              ^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^ implementation of `Y` is not general enough\n+   |\n+   = note: `Y` would have to be implemented for the type `for<'r> fn(&'r ())`\n+   = note: ...but `Y` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2e94fc5c12df1507663617b479ffed8043ea8c93", "filename": "src/test/ui/nll/relate_tys/trait-hrtb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.rs?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -12,5 +12,5 @@ fn make_foo<'a>() -> Box<dyn Foo<'a>> {\n \n fn main() {\n     let x: Box<dyn Foo<'static>> = make_foo();\n-    let y: Box<dyn for<'a> Foo<'a>> = x; //~ ERROR higher-ranked subtype error\n+    let y: Box<dyn for<'a> Foo<'a>> = x; //~ ERROR mismatched types [E0308]\n }"}, {"sha": "60a7f204446806872f27e12670de0bfe46849759", "filename": "src/test/ui/nll/relate_tys/trait-hrtb.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,8 +1,12 @@\n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/trait-hrtb.rs:15:39\n    |\n LL |     let y: Box<dyn for<'a> Foo<'a>> = x;\n-   |                                       ^\n+   |                                       ^ one type is more general than the other\n+   |\n+   = note: expected trait object `dyn for<'r> Foo<'r>`\n+              found trait object `dyn Foo<'_>`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "cc247bbcb119900591bf063b80835d20690cd32d", "filename": "src/test/ui/rfc1623.nll.stderr", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -19,7 +19,7 @@ LL | struct SomeStruct<'x, 'y, 'z: 'x> {\n    = note: required because it appears within the type `&SomeStruct`\n    = note: shared static variables must have a type that implements `Sync`\n \n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/rfc1623.rs:21:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n@@ -29,9 +29,12 @@ LL | |     bar: &Bar { bools: &[true, true] },\n LL | |     f: &id,\n LL | |\n LL | | };\n-   | |_^\n+   | |_^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r, 's> Fn<(&'r Foo<'s>,)>`\n+              found type `Fn<(&Foo<'_>,)>`\n \n-error: higher-ranked subtype error\n+error[E0308]: mismatched types\n   --> $DIR/rfc1623.rs:21:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n@@ -41,9 +44,12 @@ LL | |     bar: &Bar { bools: &[true, true] },\n LL | |     f: &id,\n LL | |\n LL | | };\n-   | |_^\n+   | |_^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r, 's> Fn<(&'r Foo<'s>,)>`\n+              found type `Fn<(&Foo<'_>,)>`\n \n-error: higher-ranked subtype error\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/rfc1623.rs:21:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n@@ -53,9 +59,12 @@ LL | |     bar: &Bar { bools: &[true, true] },\n LL | |     f: &id,\n LL | |\n LL | | };\n-   | |_^\n+   | |_^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: `fn(&'2 Foo<'_>) -> &'2 Foo<'_> {id::<&'2 Foo<'_>>}` must implement `FnOnce<(&'1 Foo<'_>,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n-error: higher-ranked subtype error\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/rfc1623.rs:21:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n@@ -65,8 +74,12 @@ LL | |     bar: &Bar { bools: &[true, true] },\n LL | |     f: &id,\n LL | |\n LL | | };\n-   | |_^\n+   | |_^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: `fn(&Foo<'2>) -> &Foo<'2> {id::<&Foo<'2>>}` must implement `FnOnce<(&Foo<'1>,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&Foo<'2>,)>`, for some specific lifetime `'2`\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "147a20974732def5fe8f699bf701381f718c4229", "filename": "src/test/ui/unboxed-closures/issue-30906.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,8 +1,11 @@\n-error: higher-ranked subtype error\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-30906.rs:18:5\n    |\n LL |     test(Compose(f, |_| {}));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: `fn(&'2 str) -> T` must implement `FnOnce<(&'1 str,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 str,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n "}, {"sha": "f65db78fc8993b55753ab7bfdd463e57c014d20b", "filename": "src/test/ui/where-clauses/where-for-self-2.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d563a63788b143c84c9b40b68e940f436dd58e79/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr?ref=d563a63788b143c84c9b40b68e940f436dd58e79", "patch": "@@ -1,8 +1,11 @@\n-error: higher-ranked subtype error\n+error: implementation of `Bar` is not general enough\n   --> $DIR/where-for-self-2.rs:23:5\n    |\n LL |     foo(&X);\n-   |     ^^^^^^^\n+   |     ^^^^^^^ implementation of `Bar` is not general enough\n+   |\n+   = note: `&'0 u32` must implement `Bar`, for any lifetime `'0`...\n+   = note: ...but `Bar` is actually implemented for the type `&'static u32`\n \n error: aborting due to previous error\n "}]}