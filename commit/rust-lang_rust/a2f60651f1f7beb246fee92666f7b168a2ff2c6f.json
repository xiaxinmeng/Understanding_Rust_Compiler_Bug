{"sha": "a2f60651f1f7beb246fee92666f7b168a2ff2c6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZjYwNjUxZjFmN2JlYjI0NmZlZTkyNjY2ZjdiMTY4YTJmZjJjNmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-12T21:01:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-13T17:20:50Z"}, "message": "add comments to region inference", "tree": {"sha": "7d4f2b3c8cc8db7cb2d919ea0eeaf226161a30e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d4f2b3c8cc8db7cb2d919ea0eeaf226161a30e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f60651f1f7beb246fee92666f7b168a2ff2c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f60651f1f7beb246fee92666f7b168a2ff2c6f", "html_url": "https://github.com/rust-lang/rust/commit/a2f60651f1f7beb246fee92666f7b168a2ff2c6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f60651f1f7beb246fee92666f7b168a2ff2c6f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90e435e8082105f86f45a11186450ffb50653ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/90e435e8082105f86f45a11186450ffb50653ffd", "html_url": "https://github.com/rust-lang/rust/commit/90e435e8082105f86f45a11186450ffb50653ffd"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "87640b5824e02f32a3519c1ea498a11f687a4896", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a2f60651f1f7beb246fee92666f7b168a2ff2c6f/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f60651f1f7beb246fee92666f7b168a2ff2c6f/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=a2f60651f1f7beb246fee92666f7b168a2ff2c6f", "patch": "@@ -434,7 +434,11 @@ type determine_rp_ctxt = @{\n     dep_map: dep_map,\n     worklist: dvec<ast::node_id>,\n \n+    // the innermost enclosing item id\n     mut item_id: ast::node_id,\n+\n+    // true when we are within an item but not within a method.\n+    // see long discussion on region_is_relevant()\n     mut anon_implies_rp: bool\n };\n \n@@ -466,6 +470,38 @@ impl methods for determine_rp_ctxt {\n         if !vec.contains(to) { vec.push(to); }\n     }\n \n+    // Determines whether a reference to a region that appears in the\n+    // AST implies that the enclosing type is region-parameterized.\n+    //\n+    // This point is subtle.  Here are four examples to make it more\n+    // concrete.\n+    //\n+    // 1. impl foo for &int { ... }\n+    // 2. impl foo for &self/int { ... }\n+    // 3. impl foo for bar { fn m() -> &self/int { ... } }\n+    // 4. impl foo for bar { fn m() -> &int { ... } }\n+    //\n+    // In case 1, the anonymous region is being referenced,\n+    // but it appears in a context where the anonymous region\n+    // resolves to self, so the impl foo is region-parameterized.\n+    //\n+    // In case 2, the self parameter is written explicitly.\n+    //\n+    // In case 3, the method refers to self, so that implies that the\n+    // impl must be region parameterized.  (If the type bar is not\n+    // region parameterized, that is an error, because the self region\n+    // is effectively unconstrained, but that is detected elsewhere).\n+    //\n+    // In case 4, the anonymous region is referenced, but it\n+    // bound by the method, so it does not refer to self.  This impl\n+    // need not be region parameterized.\n+    //\n+    // So the rules basically are: the `self` region always implies\n+    // that the enclosing type is region parameterized.  The anonymous\n+    // region also does, unless it appears within a method, in which\n+    // case it is bound.  We handle this by setting a flag\n+    // (anon_implies_rp) to true when we enter an item and setting\n+    // that flag to false when we enter a method.\n     fn region_is_relevant(r: @ast::region) -> bool {\n         alt r.node {\n           ast::re_anon {self.anon_implies_rp}"}]}