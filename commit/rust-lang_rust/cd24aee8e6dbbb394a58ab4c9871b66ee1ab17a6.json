{"sha": "cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMjRhZWU4ZTZkYmJiMzk0YTU4YWI0Yzk4NzFiNjZlZTFhYjE3YTY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-24T05:52:48Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-22T21:18:26Z"}, "message": "Recursively expand `TokenKind::Interpolated` (take 2)\n\nFixes #68430\n\nThis is a re-attempt of PR #72388, which was previously reverted due to\na large number of breakages. All of the known breakages should now be\npatched upstream.", "tree": {"sha": "bdc8f0f9b3d5994be6f14f1e8fd120c6f5f53589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdc8f0f9b3d5994be6f14f1e8fd120c6f5f53589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9Bi6IACgkQtAh+UQ6Y\nsWTvhw//X4ZM44ltzVaajfUVC4sF3AWj+GOrzdD4CZqvUvL6o3KdhEbgktORt7pt\noZDbEEwRjBnsyTMTe44HcBcfi5c0dwh2O9yn5+XuJ9OWb2Qa54FuUlxPNSoBa4VY\n+nZaAkeyqV11UEgSLQuMaLBX/b97QXgMfjU2jkiKY2Y2v7rzdGdSo29HcGurlJL5\n7Jdiq5zKpzLgSpnmQbGJZIwE+SfFHMrlqvlQrT4G7BOujrtIiGf1h80qbShTkmzj\n0+vevVGEkiyN3dxmiwrN4KAvEmw5uOPes7j5cHsYeXt3EV2pFhPmPM6EfOt4sq19\nGzUOzWmEYUE4Lc2imRYNVxctkSQJ/DblkmoCoj2j/hmf6NuA8ShRtu0nhFvwzcoA\nHDD9DxJ68nqPGIOEt5sZ6vWR/wdaj/JN6mcdrBeahXXaHAsJOqN649qiP94oy1tl\n8wFD8ePYmlojoPJczJesAvgAx02u/bxXK7oQv4Vjhaast7w1ENjq7AmeSxSK1ttt\nPnKtu2JQBdWVsh+9PFg3Tl+LQcdBxF6I+56RkoyJxHOT74MEjqInVfXVOG3fsWyx\nX/LspEgNbQa5Pr+9GZK7xpfQUipv9tPmrrXoPAjTrDHMcwJBX2mtCjfLq5wmTdJW\ncpgRrDmll4vNZBVHc7NqI8e1cR2VLVnO33UxImDuoASQBG0paVg=\n=+/Jt\n-----END PGP SIGNATURE-----", "payload": "tree bdc8f0f9b3d5994be6f14f1e8fd120c6f5f53589\nparent 527a685e40d8fbe61442bdbd510c2b4e1d248019\nauthor Aaron Hill <aa1ronham@gmail.com> 1592977968 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1598131106 -0400\n\nRecursively expand `TokenKind::Interpolated` (take 2)\n\nFixes #68430\n\nThis is a re-attempt of PR #72388, which was previously reverted due to\na large number of breakages. All of the known breakages should now be\npatched upstream.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "html_url": "https://github.com/rust-lang/rust/commit/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "527a685e40d8fbe61442bdbd510c2b4e1d248019", "url": "https://api.github.com/repos/rust-lang/rust/commits/527a685e40d8fbe61442bdbd510c2b4e1d248019", "html_url": "https://github.com/rust-lang/rust/commit/527a685e40d8fbe61442bdbd510c2b4e1d248019"}], "stats": {"total": 227, "additions": 152, "deletions": 75}, "files": [{"sha": "bc857c9774218b75faad2800942d26a97718d31a", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "patch": "@@ -7,8 +7,8 @@\n #![feature(or_patterns)]\n \n use rustc_ast as ast;\n-use rustc_ast::token::{self, DelimToken, Nonterminal, Token};\n-use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n+use rustc_ast::token::{self, DelimToken, Nonterminal, Token, TokenKind};\n+use rustc_ast::tokenstream::{self, IsJoint, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n@@ -309,7 +309,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n     // modifications, including adding/removing typically non-semantic\n     // tokens such as extra braces and commas, don't happen.\n     if let Some(tokens) = tokens {\n-        if tokenstream_probably_equal_for_proc_macro(&tokens, &tokens_for_real) {\n+        if tokenstream_probably_equal_for_proc_macro(&tokens, &tokens_for_real, sess) {\n             return tokens;\n         }\n         info!(\n@@ -327,7 +327,11 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n //\n // This is otherwise the same as `eq_unspanned`, only recursing with a\n // different method.\n-pub fn tokenstream_probably_equal_for_proc_macro(first: &TokenStream, other: &TokenStream) -> bool {\n+pub fn tokenstream_probably_equal_for_proc_macro(\n+    first: &TokenStream,\n+    other: &TokenStream,\n+    sess: &ParseSess,\n+) -> bool {\n     // When checking for `probably_eq`, we ignore certain tokens that aren't\n     // preserved in the AST. Because they are not preserved, the pretty\n     // printer arbitrarily adds or removes them when printing as token\n@@ -408,20 +412,39 @@ pub fn tokenstream_probably_equal_for_proc_macro(first: &TokenStream, other: &To\n                 }\n             }\n             token_trees = out.into_iter().map(TokenTree::Token).collect();\n-            if token_trees.len() != 1 {\n-                debug!(\"break_tokens: broke {:?} to {:?}\", tree, token_trees);\n-            }\n         } else {\n             token_trees = SmallVec::new();\n             token_trees.push(tree);\n         }\n         token_trees.into_iter()\n     }\n \n-    let mut t1 = first.trees().filter(semantic_tree).flat_map(break_tokens);\n-    let mut t2 = other.trees().filter(semantic_tree).flat_map(break_tokens);\n+    let expand_nt = |tree: TokenTree| {\n+        if let TokenTree::Token(Token { kind: TokenKind::Interpolated(nt), span }) = &tree {\n+            // When checking tokenstreams for 'probable equality', we are comparing\n+            // a captured (from parsing) `TokenStream` to a reparsed tokenstream.\n+            // The reparsed Tokenstream will never have `None`-delimited groups,\n+            // since they are only ever inserted as a result of macro expansion.\n+            // Therefore, inserting a `None`-delimtied group here (when we\n+            // convert a nested `Nonterminal` to a tokenstream) would cause\n+            // a mismatch with the reparsed tokenstream.\n+            //\n+            // Note that we currently do not handle the case where the\n+            // reparsed stream has a `Parenthesis`-delimited group\n+            // inserted. This will cause a spurious mismatch:\n+            // issue #75734 tracks resolving this.\n+            nt_to_tokenstream(nt, sess, *span).into_trees()\n+        } else {\n+            TokenStream::new(vec![(tree, IsJoint::NonJoint)]).into_trees()\n+        }\n+    };\n+\n+    // Break tokens after we expand any nonterminals, so that we break tokens\n+    // that are produced as a result of nonterminal expansion.\n+    let mut t1 = first.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n+    let mut t2 = other.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n     for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n-        if !tokentree_probably_equal_for_proc_macro(&t1, &t2) {\n+        if !tokentree_probably_equal_for_proc_macro(&t1, &t2, sess) {\n             return false;\n         }\n     }\n@@ -433,13 +456,17 @@ pub fn tokenstream_probably_equal_for_proc_macro(first: &TokenStream, other: &To\n //\n // This is otherwise the same as `eq_unspanned`, only recursing with a\n // different method.\n-fn tokentree_probably_equal_for_proc_macro(first: &TokenTree, other: &TokenTree) -> bool {\n+pub fn tokentree_probably_equal_for_proc_macro(\n+    first: &TokenTree,\n+    other: &TokenTree,\n+    sess: &ParseSess,\n+) -> bool {\n     match (first, other) {\n         (TokenTree::Token(token), TokenTree::Token(token2)) => {\n             token_probably_equal_for_proc_macro(token, token2)\n         }\n         (TokenTree::Delimited(_, delim, tts), TokenTree::Delimited(_, delim2, tts2)) => {\n-            delim == delim2 && tokenstream_probably_equal_for_proc_macro(&tts, &tts2)\n+            delim == delim2 && tokenstream_probably_equal_for_proc_macro(&tts, &tts2, sess)\n         }\n         _ => false,\n     }\n@@ -498,7 +525,7 @@ fn token_probably_equal_for_proc_macro(first: &Token, other: &Token) -> bool {\n             b == d && (a == c || a == kw::DollarCrate || c == kw::DollarCrate)\n         }\n \n-        (&Interpolated(..), &Interpolated(..)) => false,\n+        (&Interpolated(..), &Interpolated(..)) => panic!(\"Unexpanded Interpolated!\"),\n \n         _ => panic!(\"forgot to add a token?\"),\n     }"}, {"sha": "a9636cfef82197822add537a8f7d7abc28c797cd", "filename": "src/test/ui/proc-macro/input-interpolated.stdout", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout?ref=cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "patch": "@@ -15,51 +15,63 @@ PRINT-ATTR INPUT (DISPLAY): const A : u8 = 0 ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"const\",\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(416..421),\n     },\n-    Ident {\n-        ident: \"A\",\n-        span: #0 bytes(0..0),\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"A\",\n+                span: #0 bytes(503..504),\n+            },\n+        ],\n+        span: #3 bytes(422..424),\n     },\n     Punct {\n         ch: ':',\n         spacing: Alone,\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(424..425),\n     },\n     Ident {\n         ident: \"u8\",\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(426..428),\n     },\n     Punct {\n         ch: '=',\n         spacing: Alone,\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(429..430),\n     },\n     Literal {\n         kind: Integer,\n         symbol: \"0\",\n         suffix: None,\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(431..432),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(432..433),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct A { }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(468..474),\n     },\n-    Ident {\n-        ident: \"A\",\n-        span: #0 bytes(0..0),\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"A\",\n+                span: #0 bytes(503..504),\n+            },\n+        ],\n+        span: #3 bytes(475..477),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(478..480),\n     },\n ]"}, {"sha": "e0c40bbc7344ecb6feebbb3c17e85bfca7232571", "filename": "src/test/ui/proc-macro/macro-rules-derive.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.rs?ref=cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "patch": "@@ -1,14 +1,13 @@\n // aux-build:first-second.rs\n-// FIXME: The spans here are bad, see PR #73084\n \n extern crate first_second;\n use first_second::*;\n \n macro_rules! produce_it {\n     ($name:ident) => {\n-        #[first] //~ ERROR cannot find type\n+        #[first]\n         struct $name {\n-            field: MissingType\n+            field: MissingType //~ ERROR cannot find type\n         }\n     }\n }"}, {"sha": "54a079e4e736af0e9ae1152d3e98bdb8a21dc9a4", "filename": "src/test/ui/proc-macro/macro-rules-derive.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.stderr?ref=cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "patch": "@@ -1,8 +1,13 @@\n error[E0412]: cannot find type `MissingType` in this scope\n-  --> $DIR/macro-rules-derive.rs:9:9\n+  --> $DIR/macro-rules-derive.rs:10:20\n    |\n-LL |         #[first]\n-   |         ^^^^^^^^ not found in this scope\n+LL |             field: MissingType\n+   |                    ^^^^^^^^^^^ not found in this scope\n+...\n+LL | produce_it!(MyName);\n+   | -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "cdf851b535aa5b083373f50c2334576f82d1120e", "filename": "src/test/ui/proc-macro/nodelim-groups.stdout", "status": "modified", "additions": 49, "deletions": 38, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout?ref=cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "patch": "@@ -71,7 +71,6 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): \"hi\" \"hello\".len() + \"world\".len() (1 + 1)\n-PRINT-BANG RE-COLLECTED (DISPLAY): \"hi\" \"hello\" . len() + \"world\" . len() (1 + 1)\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Literal {\n         kind: Str,\n@@ -82,50 +81,62 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,\n         stream: TokenStream [\n-            Literal {\n-                kind: Str,\n-                symbol: \"hello\",\n-                suffix: None,\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n-            Punct {\n-                ch: '.',\n-                spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n-            Ident {\n-                ident: \"len\",\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n             Group {\n-                delimiter: Parenthesis,\n-                stream: TokenStream [],\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n+                delimiter: None,\n+                stream: TokenStream [\n+                    Literal {\n+                        kind: Str,\n+                        symbol: \"hello\",\n+                        suffix: None,\n+                        span: $DIR/nodelim-groups.rs:21:17: 21:24 (#0),\n+                    },\n+                    Punct {\n+                        ch: '.',\n+                        spacing: Alone,\n+                        span: $DIR/nodelim-groups.rs:21:24: 21:25 (#0),\n+                    },\n+                    Ident {\n+                        ident: \"len\",\n+                        span: $DIR/nodelim-groups.rs:21:25: 21:28 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [],\n+                        span: $DIR/nodelim-groups.rs:21:28: 21:30 (#0),\n+                    },\n+                ],\n+                span: $DIR/nodelim-groups.rs:15:49: 15:54 (#7),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n-            Literal {\n-                kind: Str,\n-                symbol: \"world\",\n-                suffix: None,\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n-            Punct {\n-                ch: '.',\n-                spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n-            Ident {\n-                ident: \"len\",\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n+                span: $DIR/nodelim-groups.rs:15:55: 15:56 (#7),\n             },\n             Group {\n-                delimiter: Parenthesis,\n-                stream: TokenStream [],\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n+                delimiter: None,\n+                stream: TokenStream [\n+                    Literal {\n+                        kind: Str,\n+                        symbol: \"world\",\n+                        suffix: None,\n+                        span: $DIR/nodelim-groups.rs:21:33: 21:40 (#0),\n+                    },\n+                    Punct {\n+                        ch: '.',\n+                        spacing: Alone,\n+                        span: $DIR/nodelim-groups.rs:21:40: 21:41 (#0),\n+                    },\n+                    Ident {\n+                        ident: \"len\",\n+                        span: $DIR/nodelim-groups.rs:21:41: 21:44 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [],\n+                        span: $DIR/nodelim-groups.rs:21:44: 21:46 (#0),\n+                    },\n+                ],\n+                span: $DIR/nodelim-groups.rs:15:57: 15:62 (#7),\n             },\n         ],\n         span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),"}, {"sha": "7ba3f98a7a9a888dbd7dfbfcc9b64e10f1265572", "filename": "src/test/ui/proc-macro/weird-hygiene.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.rs?ref=cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "patch": "@@ -1,6 +1,4 @@\n // aux-build:weird-hygiene.rs\n-// check-pass\n-// FIXME: This should actually error, see PR #73084\n \n #![feature(stmt_expr_attributes)]\n #![feature(proc_macro_hygiene)]\n@@ -22,7 +20,7 @@ macro_rules! other {\n \n         #[derive(WeirdDerive)]\n         enum MyEnum {\n-            Value = (stringify!($tokens + hidden_ident), 1).1\n+            Value = (stringify!($tokens + hidden_ident), 1).1 //~ ERROR cannot find\n         }\n \n         inner!();\n@@ -33,7 +31,7 @@ macro_rules! invoke_it {\n     ($token:expr) => {\n         #[recollect_attr] {\n             $token;\n-            hidden_ident\n+            hidden_ident //~ ERROR cannot find\n         }\n     }\n }"}, {"sha": "b17dc28f84091a6cf3cda30423291e1af0e37d6d", "filename": "src/test/ui/proc-macro/weird-hygiene.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr?ref=cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "patch": "@@ -0,0 +1,25 @@\n+error[E0425]: cannot find value `hidden_ident` in this scope\n+  --> $DIR/weird-hygiene.rs:23:43\n+   |\n+LL |             Value = (stringify!($tokens + hidden_ident), 1).1\n+   |                                           ^^^^^^^^^^^^ not found in this scope\n+...\n+LL |     other!(50);\n+   |     ----------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0425]: cannot find value `hidden_ident` in this scope\n+  --> $DIR/weird-hygiene.rs:34:13\n+   |\n+LL |             hidden_ident\n+   |             ^^^^^^^^^^^^ not found in this scope\n+...\n+LL |     invoke_it!(25);\n+   |     --------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}