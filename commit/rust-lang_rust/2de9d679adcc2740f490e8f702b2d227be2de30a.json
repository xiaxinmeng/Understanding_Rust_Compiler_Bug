{"sha": "2de9d679adcc2740f490e8f702b2d227be2de30a", "node_id": "C_kwDOAAsO6NoAKDJkZTlkNjc5YWRjYzI3NDBmNDkwZThmNzAyYjJkMjI3YmUyZGUzMGE", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-01-10T06:08:18Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-01-14T10:37:56Z"}, "message": "Add note when `FnPtr` vs. `FnDef` impl trait\n\nI encountered an instance where an `FnPtr` implemented a trait, but I was passing an `FnDef`. To\nthe end user, there is really no way to differentiate each of them, but it is necessary to cast\nto the generic function in order to compile. It is thus useful to suggest `as` in the help note,\n(even if the Fn output implements the trait).", "tree": {"sha": "610032e2ac9ce46e94ad6565be35d9f7434003a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/610032e2ac9ce46e94ad6565be35d9f7434003a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2de9d679adcc2740f490e8f702b2d227be2de30a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2de9d679adcc2740f490e8f702b2d227be2de30a", "html_url": "https://github.com/rust-lang/rust/commit/2de9d679adcc2740f490e8f702b2d227be2de30a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2de9d679adcc2740f490e8f702b2d227be2de30a/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b87359599629d69a7b37318088dac3a5d67c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b87359599629d69a7b37318088dac3a5d67c9c", "html_url": "https://github.com/rust-lang/rust/commit/c0b87359599629d69a7b37318088dac3a5d67c9c"}], "stats": {"total": 128, "additions": 111, "deletions": 17}, "files": [{"sha": "41a64a844ce49e15ed408ce1c110363b631e61b9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2de9d679adcc2740f490e8f702b2d227be2de30a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de9d679adcc2740f490e8f702b2d227be2de30a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=2de9d679adcc2740f490e8f702b2d227be2de30a", "patch": "@@ -374,6 +374,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         })\n     }\n }\n+\n impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     fn report_fulfillment_errors(\n         &self,\n@@ -852,6 +853,29 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         let mut suggested =\n                             self.suggest_dereferences(&obligation, &mut err, trait_predicate);\n                         suggested |= self.suggest_fn_call(&obligation, &mut err, trait_predicate);\n+                        let impl_candidates = self.find_similar_impl_candidates(trait_predicate);\n+                        suggested = if let &[cand] = &impl_candidates[..] {\n+                            let cand = cand.trait_ref;\n+                            if let (ty::FnPtr(_), ty::FnDef(..)) =\n+                                (cand.self_ty().kind(), trait_ref.self_ty().skip_binder().kind())\n+                            {\n+                                err.span_suggestion(\n+                                    span.shrink_to_hi(),\n+                                    format!(\n+                                        \"the trait `{}` is implemented for fn pointer `{}`, try casting using `as`\",\n+                                        cand.print_only_trait_path(),\n+                                        cand.self_ty(),\n+                                    ),\n+                                    format!(\" as {}\", cand.self_ty()),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                                true\n+                            } else {\n+                                false\n+                            }\n+                        } else {\n+                            false\n+                        } || suggested;\n                         suggested |=\n                             self.suggest_remove_reference(&obligation, &mut err, trait_predicate);\n                         suggested |= self.suggest_semicolon_removal(\n@@ -1968,27 +1992,25 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             candidates.sort();\n             candidates.dedup();\n             let len = candidates.len();\n-            if candidates.len() == 0 {\n+            if candidates.is_empty() {\n                 return false;\n             }\n-            if candidates.len() == 1 {\n-                let ty_desc = match candidates[0].self_ty().kind() {\n-                    ty::FnPtr(_) => Some(\"fn pointer\"),\n-                    _ => None,\n-                };\n-                let the_desc = match ty_desc {\n-                    Some(desc) => format!(\" implemented for {} `\", desc),\n-                    None => \" implemented for `\".to_string(),\n-                };\n+            if let &[cand] = &candidates[..] {\n+                let (desc, mention_castable) =\n+                    match (cand.self_ty().kind(), trait_ref.self_ty().skip_binder().kind()) {\n+                        (ty::FnPtr(_), ty::FnDef(..)) => {\n+                            (\" implemented for fn pointer `\", \", cast using `as`\")\n+                        }\n+                        (ty::FnPtr(_), _) => (\" implemented for fn pointer `\", \"\"),\n+                        _ => (\" implemented for `\", \"\"),\n+                    };\n                 err.highlighted_help(vec![\n-                    (\n-                        format!(\"the trait `{}` \", candidates[0].print_only_trait_path()),\n-                        Style::NoStyle,\n-                    ),\n+                    (format!(\"the trait `{}` \", cand.print_only_trait_path()), Style::NoStyle),\n                     (\"is\".to_string(), Style::Highlight),\n-                    (the_desc, Style::NoStyle),\n-                    (candidates[0].self_ty().to_string(), Style::Highlight),\n+                    (desc.to_string(), Style::NoStyle),\n+                    (cand.self_ty().to_string(), Style::Highlight),\n                     (\"`\".to_string(), Style::NoStyle),\n+                    (mention_castable.to_string(), Style::NoStyle),\n                 ]);\n                 return true;\n             }"}, {"sha": "e20aa210e58bd21e2192ba0887ab83ea6b9b8adb", "filename": "tests/ui/traits/fn-trait-cast-diagnostic.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2de9d679adcc2740f490e8f702b2d227be2de30a/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de9d679adcc2740f490e8f702b2d227be2de30a/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.rs?ref=2de9d679adcc2740f490e8f702b2d227be2de30a", "patch": "@@ -0,0 +1,26 @@\n+// There are two different instances to check that even if\n+// the trait is implemented for the output of a function,\n+// it will still be displayed if the function itself implements a trait.\n+trait Foo {}\n+\n+impl Foo for fn() -> bool {}\n+impl Foo for bool {}\n+\n+fn example() -> bool {\n+    true\n+}\n+\n+trait NoOtherFoo {}\n+\n+impl NoOtherFoo for fn() -> bool {}\n+\n+fn do_on_foo(v: impl Foo) {}\n+fn do_on_single_foo(v: impl NoOtherFoo) {}\n+\n+fn main() {\n+    do_on_foo(example);\n+    //~^ ERROR the trait bound\n+\n+    do_on_single_foo(example);\n+    //~^ ERROR the trait bound\n+}"}, {"sha": "6851dcdd504d19c1617b16b8acc03becf3782692", "filename": "tests/ui/traits/fn-trait-cast-diagnostic.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2de9d679adcc2740f490e8f702b2d227be2de30a/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2de9d679adcc2740f490e8f702b2d227be2de30a/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.stderr?ref=2de9d679adcc2740f490e8f702b2d227be2de30a", "patch": "@@ -0,0 +1,43 @@\n+error[E0277]: the trait bound `fn() -> bool {example}: Foo` is not satisfied\n+  --> $DIR/fn-trait-cast-diagnostic.rs:21:15\n+   |\n+LL |     do_on_foo(example);\n+   |     --------- ^^^^^^^ the trait `Foo` is not implemented for fn item `fn() -> bool {example}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `do_on_foo`\n+  --> $DIR/fn-trait-cast-diagnostic.rs:17:22\n+   |\n+LL | fn do_on_foo(v: impl Foo) {}\n+   |                      ^^^ required by this bound in `do_on_foo`\n+help: use parentheses to call this function\n+   |\n+LL |     do_on_foo(example());\n+   |                      ++\n+help: the trait `Foo` is implemented for fn pointer `fn() -> bool`, try casting using `as`\n+   |\n+LL |     do_on_foo(example as fn() -> bool);\n+   |                       +++++++++++++++\n+\n+error[E0277]: the trait bound `fn() -> bool {example}: NoOtherFoo` is not satisfied\n+  --> $DIR/fn-trait-cast-diagnostic.rs:24:22\n+   |\n+LL |     do_on_single_foo(example);\n+   |     ---------------- ^^^^^^^ the trait `NoOtherFoo` is not implemented for fn item `fn() -> bool {example}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `do_on_single_foo`\n+  --> $DIR/fn-trait-cast-diagnostic.rs:18:29\n+   |\n+LL | fn do_on_single_foo(v: impl NoOtherFoo) {}\n+   |                             ^^^^^^^^^^ required by this bound in `do_on_single_foo`\n+help: the trait `NoOtherFoo` is implemented for fn pointer `fn() -> bool`, try casting using `as`\n+   |\n+LL |     do_on_single_foo(example as fn() -> bool);\n+   |                              +++++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fb6eebbd254a2034206d4829c6b1f44bc7f28c6b", "filename": "tests/ui/traits/issue-99875.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2de9d679adcc2740f490e8f702b2d227be2de30a/tests%2Fui%2Ftraits%2Fissue-99875.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2de9d679adcc2740f490e8f702b2d227be2de30a/tests%2Fui%2Ftraits%2Fissue-99875.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-99875.stderr?ref=2de9d679adcc2740f490e8f702b2d227be2de30a", "patch": "@@ -6,12 +6,15 @@ LL |     takes(function);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Trait` is implemented for fn pointer `fn(Argument) -> Return`\n note: required by a bound in `takes`\n   --> $DIR/issue-99875.rs:9:18\n    |\n LL | fn takes(_: impl Trait) {}\n    |                  ^^^^^ required by this bound in `takes`\n+help: the trait `Trait` is implemented for fn pointer `fn(Argument) -> Return`, try casting using `as`\n+   |\n+LL |     takes(function as fn(Argument) -> Return);\n+   |                    +++++++++++++++++++++++++\n \n error[E0277]: the trait bound `[closure@$DIR/issue-99875.rs:14:11: 14:34]: Trait` is not satisfied\n   --> $DIR/issue-99875.rs:14:11"}]}