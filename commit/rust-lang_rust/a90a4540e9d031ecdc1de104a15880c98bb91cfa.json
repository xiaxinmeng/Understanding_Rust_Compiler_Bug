{"sha": "a90a4540e9d031ecdc1de104a15880c98bb91cfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MGE0NTQwZTlkMDMxZWNkYzFkZTEwNGExNTg4MGM5OGJiOTFjZmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-13T12:03:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-13T12:03:23Z"}, "message": "Merge pull request #390 from Manishearth/precedence\n\nimproved precedence messages (fixes #389)", "tree": {"sha": "90e8defd6c74e877b380d878e379f6217dfb8e9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90e8defd6c74e877b380d878e379f6217dfb8e9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a90a4540e9d031ecdc1de104a15880c98bb91cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a90a4540e9d031ecdc1de104a15880c98bb91cfa", "html_url": "https://github.com/rust-lang/rust/commit/a90a4540e9d031ecdc1de104a15880c98bb91cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a90a4540e9d031ecdc1de104a15880c98bb91cfa/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567d5a7293f2a3ab6672919fb0ce8f94c28a6136", "url": "https://api.github.com/repos/rust-lang/rust/commits/567d5a7293f2a3ab6672919fb0ce8f94c28a6136", "html_url": "https://github.com/rust-lang/rust/commit/567d5a7293f2a3ab6672919fb0ce8f94c28a6136"}, {"sha": "b2f1940f6f76c78771a2793b97e0cf2c5b459d1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f1940f6f76c78771a2793b97e0cf2c5b459d1f", "html_url": "https://github.com/rust-lang/rust/commit/b2f1940f6f76c78771a2793b97e0cf2c5b459d1f"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "b7dbe26855733dfd70bd8b06bbab9b6273aa9fdd", "filename": "src/precedence.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a90a4540e9d031ecdc1de104a15880c98bb91cfa/src%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90a4540e9d031ecdc1de104a15880c98bb91cfa/src%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprecedence.rs?ref=a90a4540e9d031ecdc1de104a15880c98bb91cfa", "patch": "@@ -1,7 +1,9 @@\n use rustc::lint::*;\n use syntax::codemap::Spanned;\n use syntax::ast::*;\n-use utils::span_lint;\n+use syntax::ast_util::binop_to_string;\n+\n+use utils::{span_lint, snippet};\n \n declare_lint!(pub PRECEDENCE, Warn,\n               \"catches operations where precedence may be unclear. See the wiki for a \\\n@@ -19,10 +21,24 @@ impl LintPass for Precedence {\n impl EarlyLintPass for Precedence {\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n         if let ExprBinary(Spanned { node: op, ..}, ref left, ref right) = expr.node {\n-            if is_bit_op(op) && (is_arith_expr(left) || is_arith_expr(right)) {\n-                span_lint(cx, PRECEDENCE, expr.span,\n-                    \"operator precedence can trip the unwary. Consider adding parentheses \\\n-                     to the subexpression\");\n+            if !is_bit_op(op) { return; }\n+            match (is_arith_expr(left), is_arith_expr(right)) {\n+                (true, true) =>  span_lint(cx, PRECEDENCE, expr.span, \n+                    &format!(\"operator precedence can trip the unwary. \\\n+                         Consider parenthesizing your expression:\\\n+                         `({}) {} ({})`\", snippet(cx, left.span, \"..\"),\n+                         binop_to_string(op), snippet(cx, right.span, \"..\"))),\n+                (true, false) => span_lint(cx, PRECEDENCE, expr.span, \n+                    &format!(\"operator precedence can trip the unwary. \\\n+                         Consider parenthesizing your expression:\\\n+                         `({}) {} {}`\", snippet(cx, left.span, \"..\"),\n+                         binop_to_string(op), snippet(cx, right.span, \"..\"))),\n+                (false, true) => span_lint(cx, PRECEDENCE, expr.span, \n+                    &format!(\"operator precedence can trip the unwary. \\\n+                         Consider parenthesizing your expression:\\\n+                         `{} {} ({})`\", snippet(cx, left.span, \"..\"),\n+                         binop_to_string(op), snippet(cx, right.span, \"..\"))),\n+                _ => (),\n             }\n         }\n \n@@ -32,9 +48,11 @@ impl EarlyLintPass for Precedence {\n                     if let ExprLit(ref lit) = slf.node {\n                         match lit.node {\n                             LitInt(..) | LitFloat(..) | LitFloatUnsuffixed(..) =>\n-                                span_lint(cx, PRECEDENCE, expr.span,\n-                                    \"unary minus has lower precedence than method call. Consider \\\n-                                     adding parentheses to clarify your intent\"),\n+                                span_lint(cx, PRECEDENCE, expr.span, &format!(\n+                                    \"unary minus has lower precedence than \\\n+                                     method call. Consider adding parentheses \\\n+                                     to clarify your intent: -({})\",\n+                                     snippet(cx, rhs.span, \"..\"))),\n                                 _ => ()\n                         }\n                     }"}]}