{"sha": "e07d3c94de4694f38aa87316018c0d4cf28be941", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwN2QzYzk0ZGU0Njk0ZjM4YWE4NzMxNjAxOGMwZDRjZjI4YmU5NDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T20:22:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T20:22:58Z"}, "message": "Remove code duplication", "tree": {"sha": "ae30dc5d6752f765b1ccefdcfd8af079a630133e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae30dc5d6752f765b1ccefdcfd8af079a630133e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e07d3c94de4694f38aa87316018c0d4cf28be941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e07d3c94de4694f38aa87316018c0d4cf28be941", "html_url": "https://github.com/rust-lang/rust/commit/e07d3c94de4694f38aa87316018c0d4cf28be941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e07d3c94de4694f38aa87316018c0d4cf28be941/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33df20868da38ca47f22f8bfab36dd4c965cf333", "url": "https://api.github.com/repos/rust-lang/rust/commits/33df20868da38ca47f22f8bfab36dd4c965cf333", "html_url": "https://github.com/rust-lang/rust/commit/33df20868da38ca47f22f8bfab36dd4c965cf333"}], "stats": {"total": 109, "additions": 49, "deletions": 60}, "files": [{"sha": "cb701f7f6c38bb0735ac145ac330c4f95a6da800", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e07d3c94de4694f38aa87316018c0d4cf28be941/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07d3c94de4694f38aa87316018c0d4cf28be941/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=e07d3c94de4694f38aa87316018c0d4cf28be941", "patch": "@@ -42,11 +42,6 @@ pub trait AstNode {\n     fn syntax(&self) -> &SyntaxNode;\n }\n \n-#[test]\n-fn assert_ast_is_object_safe() {\n-    fn _f(_: &dyn AstNode, _: &dyn NameOwner) {}\n-}\n-\n /// Like `AstNode`, but wraps tokens rather than interior nodes.\n pub trait AstToken {\n     fn can_cast(token: SyntaxKind) -> bool\n@@ -64,22 +59,6 @@ pub trait AstToken {\n     }\n }\n \n-mod support {\n-    use super::{AstChildren, AstNode, AstToken, SyntaxNode};\n-\n-    pub(super) fn child<N: AstNode>(parent: &SyntaxNode) -> Option<N> {\n-        parent.children().find_map(N::cast)\n-    }\n-\n-    pub(super) fn children<N: AstNode>(parent: &SyntaxNode) -> AstChildren<N> {\n-        AstChildren::new(parent)\n-    }\n-\n-    pub(super) fn token<T: AstToken>(parent: &SyntaxNode) -> Option<T> {\n-        parent.children_with_tokens().filter_map(|it| it.into_token()).find_map(T::cast)\n-    }\n-}\n-\n /// An iterator over `SyntaxNode` children of a particular AST type.\n #[derive(Debug, Clone)]\n pub struct AstChildren<N> {\n@@ -100,12 +79,25 @@ impl<N: AstNode> Iterator for AstChildren<N> {\n     }\n }\n \n-fn child_opt<P: AstNode + ?Sized, C: AstNode>(parent: &P) -> Option<C> {\n-    children(parent).next()\n+mod support {\n+    use super::{AstChildren, AstNode, AstToken, SyntaxNode};\n+\n+    pub(super) fn child<N: AstNode>(parent: &SyntaxNode) -> Option<N> {\n+        parent.children().find_map(N::cast)\n+    }\n+\n+    pub(super) fn children<N: AstNode>(parent: &SyntaxNode) -> AstChildren<N> {\n+        AstChildren::new(parent)\n+    }\n+\n+    pub(super) fn token<T: AstToken>(parent: &SyntaxNode) -> Option<T> {\n+        parent.children_with_tokens().filter_map(|it| it.into_token()).find_map(T::cast)\n+    }\n }\n \n-fn children<P: AstNode + ?Sized, C: AstNode>(parent: &P) -> AstChildren<C> {\n-    AstChildren::new(parent.syntax())\n+#[test]\n+fn assert_ast_is_object_safe() {\n+    fn _f(_: &dyn AstNode, _: &dyn NameOwner) {}\n }\n \n #[test]"}, {"sha": "3d428fab3a3410dd5ab9b1e40b5485c77f7527cf", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e07d3c94de4694f38aa87316018c0d4cf28be941/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07d3c94de4694f38aa87316018c0d4cf28be941/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=e07d3c94de4694f38aa87316018c0d4cf28be941", "patch": "@@ -6,7 +6,7 @@ use std::{iter, ops::RangeInclusive};\n use arrayvec::ArrayVec;\n \n use crate::{\n-    algo,\n+    algo::{self, neighbor, SyntaxRewriter},\n     ast::{\n         self,\n         make::{self, tokens},\n@@ -16,7 +16,6 @@ use crate::{\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n     SyntaxNode, SyntaxToken, T,\n };\n-use algo::{neighbor, SyntaxRewriter};\n \n impl ast::BinExpr {\n     #[must_use]"}, {"sha": "003ee00b3e5cdb652447b003fbe6f669079ad1ef", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e07d3c94de4694f38aa87316018c0d4cf28be941/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07d3c94de4694f38aa87316018c0d4cf28be941/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=e07d3c94de4694f38aa87316018c0d4cf28be941", "patch": "@@ -1,7 +1,7 @@\n //! Various extension methods to ast Expr Nodes, which are hard to code-generate.\n \n use crate::{\n-    ast::{self, child_opt, children, AstChildren, AstNode},\n+    ast::{self, support, AstChildren, AstNode},\n     SmolStr,\n     SyntaxKind::*,\n     SyntaxToken, T,\n@@ -36,15 +36,15 @@ impl ast::IfExpr {\n         let res = match self.blocks().nth(1) {\n             Some(block) => ElseBranch::Block(block),\n             None => {\n-                let elif: ast::IfExpr = child_opt(self)?;\n+                let elif: ast::IfExpr = support::child(self.syntax())?;\n                 ElseBranch::IfExpr(elif)\n             }\n         };\n         Some(res)\n     }\n \n     fn blocks(&self) -> AstChildren<ast::BlockExpr> {\n-        children(self)\n+        support::children(self.syntax())\n     }\n }\n \n@@ -212,15 +212,15 @@ impl ast::BinExpr {\n     }\n \n     pub fn lhs(&self) -> Option<ast::Expr> {\n-        children(self).next()\n+        support::children(self.syntax()).next()\n     }\n \n     pub fn rhs(&self) -> Option<ast::Expr> {\n-        children(self).nth(1)\n+        support::children(self.syntax()).nth(1)\n     }\n \n     pub fn sub_exprs(&self) -> (Option<ast::Expr>, Option<ast::Expr>) {\n-        let mut children = children(self);\n+        let mut children = support::children(self.syntax());\n         let first = children.next();\n         let second = children.next();\n         (first, second)\n@@ -275,10 +275,10 @@ impl ast::RangeExpr {\n \n impl ast::IndexExpr {\n     pub fn base(&self) -> Option<ast::Expr> {\n-        children(self).next()\n+        support::children(self.syntax()).next()\n     }\n     pub fn index(&self) -> Option<ast::Expr> {\n-        children(self).nth(1)\n+        support::children(self.syntax()).nth(1)\n     }\n }\n \n@@ -291,11 +291,11 @@ impl ast::ArrayExpr {\n     pub fn kind(&self) -> ArrayExprKind {\n         if self.is_repeat() {\n             ArrayExprKind::Repeat {\n-                initializer: children(self).next(),\n-                repeat: children(self).nth(1),\n+                initializer: support::children(self.syntax()).next(),\n+                repeat: support::children(self.syntax()).nth(1),\n             }\n         } else {\n-            ArrayExprKind::ElementList(children(self))\n+            ArrayExprKind::ElementList(support::children(self.syntax()))\n         }\n     }\n "}, {"sha": "fc252e79ce1c21cf405b47f9d8668386e81b70bd", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e07d3c94de4694f38aa87316018c0d4cf28be941/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07d3c94de4694f38aa87316018c0d4cf28be941/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=e07d3c94de4694f38aa87316018c0d4cf28be941", "patch": "@@ -5,9 +5,7 @@ use itertools::Itertools;\n use ra_parser::SyntaxKind;\n \n use crate::{\n-    ast::{\n-        self, child_opt, children, support, AstNode, AstToken, AttrInput, NameOwner, SyntaxNode,\n-    },\n+    ast::{self, support, AstNode, AstToken, AttrInput, NameOwner, SyntaxNode},\n     SmolStr, SyntaxElement, SyntaxToken, T,\n };\n \n@@ -161,7 +159,7 @@ impl ast::ImplDef {\n     }\n \n     fn target(&self) -> (Option<ast::TypeRef>, Option<ast::TypeRef>) {\n-        let mut types = children(self);\n+        let mut types = support::children(self.syntax());\n         let first = types.next();\n         let second = types.next();\n         (first, second)\n@@ -177,9 +175,9 @@ pub enum StructKind {\n \n impl StructKind {\n     fn from_node<N: AstNode>(node: &N) -> StructKind {\n-        if let Some(nfdl) = child_opt::<_, ast::RecordFieldDefList>(node) {\n+        if let Some(nfdl) = support::child::<ast::RecordFieldDefList>(node.syntax()) {\n             StructKind::Record(nfdl)\n-        } else if let Some(pfl) = child_opt::<_, ast::TupleFieldDefList>(node) {\n+        } else if let Some(pfl) = support::child::<ast::TupleFieldDefList>(node.syntax()) {\n             StructKind::Tuple(pfl)\n         } else {\n             StructKind::Unit\n@@ -322,9 +320,9 @@ pub enum TypeBoundKind {\n \n impl ast::TypeBound {\n     pub fn kind(&self) -> TypeBoundKind {\n-        if let Some(path_type) = children(self).next() {\n+        if let Some(path_type) = support::children(self.syntax()).next() {\n             TypeBoundKind::PathType(path_type)\n-        } else if let Some(for_type) = children(self).next() {\n+        } else if let Some(for_type) = support::children(self.syntax()).next() {\n             TypeBoundKind::ForType(for_type)\n         } else if let Some(lifetime) = self.lifetime_token() {\n             TypeBoundKind::Lifetime(lifetime)\n@@ -364,7 +362,7 @@ pub enum VisibilityKind {\n \n impl ast::Visibility {\n     pub fn kind(&self) -> VisibilityKind {\n-        if let Some(path) = children(self).next() {\n+        if let Some(path) = support::children(self.syntax()).next() {\n             VisibilityKind::In(path)\n         } else if self.crate_kw_token().is_some() {\n             VisibilityKind::PubCrate"}, {"sha": "f6c786e44b6dc67214decd27e4eb1b0a48b57864", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e07d3c94de4694f38aa87316018c0d4cf28be941/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07d3c94de4694f38aa87316018c0d4cf28be941/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=e07d3c94de4694f38aa87316018c0d4cf28be941", "patch": "@@ -5,69 +5,69 @@\n use itertools::Itertools;\n \n use crate::{\n-    ast::{self, child_opt, children, support, AstChildren, AstNode, AstToken},\n+    ast::{self, support, AstChildren, AstNode, AstToken},\n     syntax_node::SyntaxElementChildren,\n };\n \n pub trait TypeAscriptionOwner: AstNode {\n     fn ascribed_type(&self) -> Option<ast::TypeRef> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait NameOwner: AstNode {\n     fn name(&self) -> Option<ast::Name> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait VisibilityOwner: AstNode {\n     fn visibility(&self) -> Option<ast::Visibility> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait LoopBodyOwner: AstNode {\n     fn loop_body(&self) -> Option<ast::BlockExpr> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n \n     fn label(&self) -> Option<ast::Label> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait ArgListOwner: AstNode {\n     fn arg_list(&self) -> Option<ast::ArgList> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait FnDefOwner: AstNode {\n     fn functions(&self) -> AstChildren<ast::FnDef> {\n-        children(self)\n+        support::children(self.syntax())\n     }\n }\n \n pub trait ModuleItemOwner: AstNode {\n     fn items(&self) -> AstChildren<ast::ModuleItem> {\n-        children(self)\n+        support::children(self.syntax())\n     }\n }\n \n pub trait TypeParamsOwner: AstNode {\n     fn type_param_list(&self) -> Option<ast::TypeParamList> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n \n     fn where_clause(&self) -> Option<ast::WhereClause> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait TypeBoundsOwner: AstNode {\n     fn type_bound_list(&self) -> Option<ast::TypeBoundList> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n \n     fn colon(&self) -> Option<ast::Colon> {\n@@ -77,7 +77,7 @@ pub trait TypeBoundsOwner: AstNode {\n \n pub trait AttrsOwner: AstNode {\n     fn attrs(&self) -> AstChildren<ast::Attr> {\n-        children(self)\n+        support::children(self.syntax())\n     }\n     fn has_atom_attr(&self, atom: &str) -> bool {\n         self.attrs().filter_map(|x| x.as_simple_atom()).any(|x| x == atom)"}]}