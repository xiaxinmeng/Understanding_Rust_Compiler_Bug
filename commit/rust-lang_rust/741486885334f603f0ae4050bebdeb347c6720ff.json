{"sha": "741486885334f603f0ae4050bebdeb347c6720ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MTQ4Njg4NTMzNGY2MDNmMGFlNDA1MGJlYmRlYjM0N2M2NzIwZmY=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-18T00:01:48Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:24:37Z"}, "message": "Remove TypeId from stack in Builder", "tree": {"sha": "1a3d4e0f7d63016e05ba1293b6db6dae12687255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a3d4e0f7d63016e05ba1293b6db6dae12687255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/741486885334f603f0ae4050bebdeb347c6720ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/741486885334f603f0ae4050bebdeb347c6720ff", "html_url": "https://github.com/rust-lang/rust/commit/741486885334f603f0ae4050bebdeb347c6720ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/741486885334f603f0ae4050bebdeb347c6720ff/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28defe0fced3eb805aa4116bee356b139284831c", "url": "https://api.github.com/repos/rust-lang/rust/commits/28defe0fced3eb805aa4116bee356b139284831c", "html_url": "https://github.com/rust-lang/rust/commit/28defe0fced3eb805aa4116bee356b139284831c"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "50ecdeb988a01305f3a2ece773ed06e355389a90", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/741486885334f603f0ae4050bebdeb347c6720ff/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741486885334f603f0ae4050bebdeb347c6720ff/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=741486885334f603f0ae4050bebdeb347c6720ff", "patch": "@@ -15,7 +15,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::fs;\n use std::ops::Deref;\n-use std::any::{TypeId, Any};\n+use std::any::Any;\n \n use compile;\n use install;\n@@ -35,7 +35,7 @@ pub struct Builder<'a> {\n     pub top_stage: u32,\n     pub kind: Kind,\n     cache: Cache,\n-    stack: RefCell<Vec<(TypeId, Box<Any>)>>,\n+    stack: RefCell<Vec<Box<Any>>>,\n }\n \n impl<'a> Deref for Builder<'a> {\n@@ -477,12 +477,12 @@ impl<'a> Builder<'a> {\n     /// cache the step, so it is safe (and good!) to call this as often as\n     /// needed to ensure that all dependencies are built.\n     pub fn ensure<S: Step>(&'a self, step: S) -> S::Output {\n-        let type_id = TypeId::of::<S>();\n         {\n             let mut stack = self.stack.borrow_mut();\n-            for &(stack_type_id, ref stack_step) in stack.iter() {\n-                if !(type_id == stack_type_id && step == *stack_step.downcast_ref().unwrap()) {\n-                    continue\n+            for stack_step in stack.iter() {\n+                // should skip\n+                if stack_step.downcast_ref::<S>().map_or(true, |stack_step| *stack_step != step) {\n+                    continue;\n                 }\n                 let mut out = String::new();\n                 out += &format!(\"\\n\\nCycle in build detected when adding {:?}\\n\", step);\n@@ -497,13 +497,13 @@ impl<'a> Builder<'a> {\n                 return out;\n             }\n             self.build.verbose(&format!(\"{}> {:?}\", \"  \".repeat(stack.len()), step));\n-            stack.push((type_id, Box::new(step.clone())));\n+            stack.push(Box::new(step.clone()));\n         }\n         let out = step.clone().run(self);\n         {\n             let mut stack = self.stack.borrow_mut();\n-            let (cur_type_id, cur_step) = stack.pop().expect(\"step stack empty\");\n-            assert_eq!((cur_type_id, cur_step.downcast_ref()), (type_id, Some(&step)));\n+            let cur_step = stack.pop().expect(\"step stack empty\");\n+            assert_eq!(cur_step.downcast_ref(), Some(&step));\n         }\n         self.build.verbose(&format!(\"{}< {:?}\", \"  \".repeat(self.stack.borrow().len()), step));\n         self.cache.put(step, out.clone());"}]}