{"sha": "3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "node_id": "C_kwDOAAsO6NoAKDMzMzBjN2QxYzNiY2ZkMmM0NTJiNzk0ZGI2NjcwNWI5MmZiNTRhM2M", "commit": {"author": {"name": "Preston From", "email": "prestonfrom@gmail.com", "date": "2022-07-16T21:13:14Z"}, "committer": {"name": "Preston From", "email": "prestonfrom@gmail.com", "date": "2022-07-25T06:00:27Z"}, "message": "Generate correct suggestion with named arguments used positionally\n\nAddress issue #99265 by checking each positionally used argument\nto see if the argument is named and adding a lint to use the name\ninstead. This way, when named arguments are used positionally in a\ndifferent order than their argument order, the suggested lint is\ncorrect.\n\nFor example:\n```\nprintln!(\"{b} {}\", a=1, b=2);\n```\nThis will now generate the suggestion:\n```\nprintln!(\"{b} {a}\", a=1, b=2);\n```\n\nAdditionally, this check now also correctly replaces or inserts\nonly where the positional argument is (or would be if implicit).\nAlso, width and precision are replaced with their argument names\nwhen they exists.\n\nSince the issues were so closely related, this fix for issue #99265\nalso fixes issue #99266.\n\nFixes #99265\nFixes #99266", "tree": {"sha": "54a0678eba5caf07335b5a1ede0314f515bde6f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a0678eba5caf07335b5a1ede0314f515bde6f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "html_url": "https://github.com/rust-lang/rust/commit/3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/comments", "author": {"login": "PrestonFrom", "id": 12164367, "node_id": "MDQ6VXNlcjEyMTY0MzY3", "avatar_url": "https://avatars.githubusercontent.com/u/12164367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrestonFrom", "html_url": "https://github.com/PrestonFrom", "followers_url": "https://api.github.com/users/PrestonFrom/followers", "following_url": "https://api.github.com/users/PrestonFrom/following{/other_user}", "gists_url": "https://api.github.com/users/PrestonFrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrestonFrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrestonFrom/subscriptions", "organizations_url": "https://api.github.com/users/PrestonFrom/orgs", "repos_url": "https://api.github.com/users/PrestonFrom/repos", "events_url": "https://api.github.com/users/PrestonFrom/events{/privacy}", "received_events_url": "https://api.github.com/users/PrestonFrom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PrestonFrom", "id": 12164367, "node_id": "MDQ6VXNlcjEyMTY0MzY3", "avatar_url": "https://avatars.githubusercontent.com/u/12164367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrestonFrom", "html_url": "https://github.com/PrestonFrom", "followers_url": "https://api.github.com/users/PrestonFrom/followers", "following_url": "https://api.github.com/users/PrestonFrom/following{/other_user}", "gists_url": "https://api.github.com/users/PrestonFrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrestonFrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrestonFrom/subscriptions", "organizations_url": "https://api.github.com/users/PrestonFrom/orgs", "repos_url": "https://api.github.com/users/PrestonFrom/repos", "events_url": "https://api.github.com/users/PrestonFrom/events{/privacy}", "received_events_url": "https://api.github.com/users/PrestonFrom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "530c0a81d50c6e1c9b1bdee0970d27af02ca49be", "url": "https://api.github.com/repos/rust-lang/rust/commits/530c0a81d50c6e1c9b1bdee0970d27af02ca49be", "html_url": "https://github.com/rust-lang/rust/commit/530c0a81d50c6e1c9b1bdee0970d27af02ca49be"}], "stats": {"total": 1195, "additions": 1093, "deletions": 102}, "files": [{"sha": "a2205c3613d92737900d3e02cfffe5db3bf44301", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -656,7 +656,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                     let span = arg_spans.next().unwrap_or(template_sp);\n \n                     let operand_idx = match arg.position {\n-                        parse::ArgumentIs(idx) | parse::ArgumentImplicitlyIs(idx) => {\n+                        parse::ArgumentIs(idx, _) | parse::ArgumentImplicitlyIs(idx) => {\n                             if idx >= args.operands.len()\n                                 || named_pos.contains_key(&idx)\n                                 || args.reg_args.contains(&idx)"}, {"sha": "f5eb984c13878988237e28eaf7567e4892396281", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 187, "deletions": 60, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -11,14 +11,14 @@ use rustc_errors::{pluralize, Applicability, MultiSpan, PResult};\n use rustc_expand::base::{self, *};\n use rustc_parse_format as parse;\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::{InnerSpan, Span};\n+use rustc_span::{BytePos, InnerSpan, Span};\n use smallvec::SmallVec;\n \n use rustc_lint_defs::builtin::NAMED_ARGUMENTS_USED_POSITIONALLY;\n use rustc_lint_defs::{BufferedEarlyLint, BuiltinLintDiagnostics, LintId};\n-use rustc_parse_format::Count;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n+use std::ops::Deref;\n \n #[derive(PartialEq)]\n enum ArgumentType {\n@@ -32,6 +32,105 @@ enum Position {\n     Named(Symbol, InnerSpan),\n }\n \n+/// Indicates how positional named argument (i.e. an named argument which is used by position\n+/// instead of by name) is used in format string\n+/// * `Arg` is the actual argument to print\n+/// * `Width` is width format argument\n+/// * `Precision` is precion format argument\n+/// Example: `{Arg:Width$.Precision$}\n+#[derive(Debug, Eq, PartialEq)]\n+enum PositionalNamedArgType {\n+    Arg,\n+    Width,\n+    Precision,\n+}\n+\n+/// Contains information necessary to create a lint for a positional named argument\n+#[derive(Debug)]\n+struct PositionalNamedArg {\n+    ty: PositionalNamedArgType,\n+    /// The piece of the using this argument (multiple pieces can use the same argument)\n+    cur_piece: usize,\n+    /// The InnerSpan for in the string to be replaced with the named argument\n+    /// This will be None when the position is implicit\n+    inner_span_to_replace: Option<rustc_parse_format::InnerSpan>,\n+    /// The name to use instead of the position\n+    replacement: Symbol,\n+    /// The span for the positional named argument (so the lint can point a message to it)\n+    positional_named_arg_span: Span,\n+}\n+\n+impl PositionalNamedArg {\n+    /// Determines what span to replace with the name of the named argument\n+    fn get_span_to_replace(&self, cx: &Context<'_, '_>) -> Option<Span> {\n+        if let Some(inner_span) = &self.inner_span_to_replace {\n+            return match self.ty {\n+                PositionalNamedArgType::Arg | PositionalNamedArgType::Width => Some(Span::new(\n+                    cx.fmtsp.lo() + BytePos(inner_span.start.try_into().unwrap()),\n+                    cx.fmtsp.lo() + BytePos(inner_span.end.try_into().unwrap()),\n+                    self.positional_named_arg_span.ctxt(),\n+                    self.positional_named_arg_span.parent(),\n+                )),\n+                PositionalNamedArgType::Precision => Some(Span::new(\n+                    cx.fmtsp.lo() + BytePos(inner_span.start.try_into().unwrap()) + BytePos(1),\n+                    cx.fmtsp.lo() + BytePos(inner_span.end.try_into().unwrap()),\n+                    self.positional_named_arg_span.ctxt(),\n+                    self.positional_named_arg_span.parent(),\n+                )),\n+            };\n+        } else if self.ty == PositionalNamedArgType::Arg {\n+            // In the case of a named argument whose position is implicit, there will not be a span\n+            // to replace. Instead, we insert the name after the `{`, which is the first character\n+            // of arg_span.\n+            if let Some(arg_span) = cx.arg_spans.get(self.cur_piece).copied() {\n+                return Some(Span::new(\n+                    arg_span.lo() + BytePos(1),\n+                    arg_span.lo() + BytePos(1),\n+                    self.positional_named_arg_span.ctxt(),\n+                    self.positional_named_arg_span.parent(),\n+                ));\n+            }\n+        }\n+\n+        None\n+    }\n+}\n+\n+/// Encapsulates all the named arguments that have been used positionally\n+#[derive(Debug)]\n+struct PositionalNamedArgsLint {\n+    positional_named_args: Vec<PositionalNamedArg>,\n+}\n+\n+impl PositionalNamedArgsLint {\n+    /// Try constructing a PositionalNamedArg struct and pushing it into the vec of positional\n+    /// named arguments. If a named arg associated with `format_argument_index` cannot be found,\n+    /// a new item will not be added as the lint cannot be emitted in this case.\n+    fn maybe_push(\n+        &mut self,\n+        format_argument_index: usize,\n+        ty: PositionalNamedArgType,\n+        cur_piece: usize,\n+        inner_span: Option<rustc_parse_format::InnerSpan>,\n+        names: &FxHashMap<Symbol, (usize, Span)>,\n+    ) {\n+        let named_arg = names\n+            .iter()\n+            .find(|name| name.deref().1.0 == format_argument_index)\n+            .map(|found| found.clone());\n+\n+        if let Some(named_arg) = named_arg {\n+            self.positional_named_args.push(PositionalNamedArg {\n+                ty,\n+                cur_piece,\n+                inner_span_to_replace: inner_span,\n+                replacement: named_arg.0.clone(),\n+                positional_named_arg_span: named_arg.1.1.clone(),\n+            });\n+        }\n+    }\n+}\n+\n struct Context<'a, 'b> {\n     ecx: &'a mut ExtCtxt<'b>,\n     /// The macro's call site. References to unstable formatting internals must\n@@ -118,6 +217,7 @@ struct Context<'a, 'b> {\n \n     /// Whether this format string came from a string literal, as opposed to a macro.\n     is_literal: bool,\n+    unused_names_lint: PositionalNamedArgsLint,\n }\n \n /// Parses the arguments from the given list of tokens, returning the diagnostic\n@@ -242,7 +342,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         self.args.len() - self.num_captured_args\n     }\n \n-    fn resolve_name_inplace(&self, p: &mut parse::Piece<'_>) {\n+    fn resolve_name_inplace(&mut self, p: &mut parse::Piece<'_>) {\n         // NOTE: the `unwrap_or` branch is needed in case of invalid format\n         // arguments, e.g., `format_args!(\"{foo}\")`.\n         let lookup =\n@@ -252,7 +352,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             parse::String(_) => {}\n             parse::NextArgument(ref mut arg) => {\n                 if let parse::ArgumentNamed(s, _) = arg.position {\n-                    arg.position = parse::ArgumentIs(lookup(s));\n+                    arg.position = parse::ArgumentIs(lookup(s), None);\n                 }\n                 if let parse::CountIsName(s, _) = arg.format.width {\n                     arg.format.width = parse::CountIsParam(lookup(s));\n@@ -273,15 +373,50 @@ impl<'a, 'b> Context<'a, 'b> {\n             parse::NextArgument(ref arg) => {\n                 // width/precision first, if they have implicit positional\n                 // parameters it makes more sense to consume them first.\n-                self.verify_count(arg.format.width);\n-                self.verify_count(arg.format.precision);\n+                self.verify_count(\n+                    arg.format.width,\n+                    &arg.format.width_span,\n+                    PositionalNamedArgType::Width,\n+                );\n+                self.verify_count(\n+                    arg.format.precision,\n+                    &arg.format.precision_span,\n+                    PositionalNamedArgType::Precision,\n+                );\n \n                 // argument second, if it's an implicit positional parameter\n                 // it's written second, so it should come after width/precision.\n                 let pos = match arg.position {\n-                    parse::ArgumentIs(i) | parse::ArgumentImplicitlyIs(i) => Exact(i),\n+                    parse::ArgumentIs(i, arg_end) => {\n+                        let start_of_named_args = self.args.len() - self.names.len();\n+                        if self.curpiece >= start_of_named_args {\n+                            self.unused_names_lint.maybe_push(\n+                                i,\n+                                PositionalNamedArgType::Arg,\n+                                self.curpiece,\n+                                arg_end,\n+                                &self.names,\n+                            );\n+                        }\n+\n+                        Exact(i)\n+                    }\n+                    parse::ArgumentImplicitlyIs(i) => {\n+                        let start_of_named_args = self.args.len() - self.names.len();\n+                        if self.curpiece >= start_of_named_args {\n+                            self.unused_names_lint.maybe_push(\n+                                i,\n+                                PositionalNamedArgType::Arg,\n+                                self.curpiece,\n+                                None,\n+                                &self.names,\n+                            );\n+                        }\n+                        Exact(i)\n+                    }\n                     parse::ArgumentNamed(s, span) => {\n-                        Named(Symbol::intern(s), InnerSpan::new(span.start, span.end))\n+                        let symbol = Symbol::intern(s);\n+                        Named(symbol, InnerSpan::new(span.start, span.end))\n                     }\n                 };\n \n@@ -349,10 +484,25 @@ impl<'a, 'b> Context<'a, 'b> {\n         }\n     }\n \n-    fn verify_count(&mut self, c: parse::Count<'_>) {\n+    fn verify_count(\n+        &mut self,\n+        c: parse::Count<'_>,\n+        inner_span: &Option<rustc_parse_format::InnerSpan>,\n+        named_arg_type: PositionalNamedArgType,\n+    ) {\n         match c {\n             parse::CountImplied | parse::CountIs(..) => {}\n             parse::CountIsParam(i) => {\n+                let start_of_named_args = self.args.len() - self.names.len();\n+                if i >= start_of_named_args {\n+                    self.unused_names_lint.maybe_push(\n+                        i,\n+                        named_arg_type,\n+                        self.curpiece,\n+                        inner_span.clone(),\n+                        &self.names,\n+                    );\n+                }\n                 self.verify_arg_type(Exact(i), Count);\n             }\n             parse::CountIsName(s, span) => {\n@@ -673,7 +823,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 // Build the position\n                 let pos = {\n                     match arg.position {\n-                        parse::ArgumentIs(i) | parse::ArgumentImplicitlyIs(i) => {\n+                        parse::ArgumentIs(i, ..) | parse::ArgumentImplicitlyIs(i) => {\n                             // Map to index in final generated argument array\n                             // in case of multiple types specified\n                             let arg_idx = match arg_index_consumed.get_mut(i) {\n@@ -701,7 +851,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                         // track the current argument ourselves.\n                         let i = self.curarg;\n                         self.curarg += 1;\n-                        parse::ArgumentIs(i)\n+                        parse::ArgumentIs(i, None)\n                     },\n                     format: parse::FormatSpec {\n                         fill: arg.format.fill,\n@@ -971,43 +1121,27 @@ pub fn expand_format_args_nl<'cx>(\n     expand_format_args_impl(ecx, sp, tts, true)\n }\n \n-fn lint_named_arguments_used_positionally(\n-    names: FxHashMap<Symbol, (usize, Span)>,\n-    cx: &mut Context<'_, '_>,\n-    unverified_pieces: Vec<parse::Piece<'_>>,\n-) {\n-    let mut used_argument_names = FxHashSet::<&str>::default();\n-    for piece in unverified_pieces {\n-        if let rustc_parse_format::Piece::NextArgument(a) = piece {\n-            match a.position {\n-                rustc_parse_format::Position::ArgumentNamed(arg_name, _) => {\n-                    used_argument_names.insert(arg_name);\n-                }\n-                _ => {}\n-            };\n-            if let Count::CountIsName(s, _) = a.format.width {\n-                used_argument_names.insert(s);\n-            }\n-            if let Count::CountIsName(s, _) = a.format.precision {\n-                used_argument_names.insert(s);\n-            }\n-        }\n-    }\n+fn create_lints_for_named_arguments_used_positionally(cx: &mut Context<'_, '_>) {\n+    for named_arg in &cx.unused_names_lint.positional_named_args {\n+        let arg_span = named_arg.get_span_to_replace(cx);\n \n-    for (symbol, (index, span)) in names {\n-        if !used_argument_names.contains(symbol.as_str()) {\n-            let msg = format!(\"named argument `{}` is not used by name\", symbol.as_str());\n-            let arg_span = cx.arg_spans.get(index).copied();\n-            cx.ecx.buffered_early_lint.push(BufferedEarlyLint {\n-                span: MultiSpan::from_span(span),\n-                msg: msg.clone(),\n-                node_id: ast::CRATE_NODE_ID,\n-                lint_id: LintId::of(&NAMED_ARGUMENTS_USED_POSITIONALLY),\n-                diagnostic: BuiltinLintDiagnostics::NamedArgumentUsedPositionally(\n-                    arg_span, span, symbol,\n-                ),\n-            });\n-        }\n+        let msg = format!(\"named argument `{}` is not used by name\", named_arg.replacement);\n+        let replacement = match named_arg.ty {\n+            PositionalNamedArgType::Arg => named_arg.replacement.to_string(),\n+            _ => named_arg.replacement.to_string() + \"$\",\n+        };\n+\n+        cx.ecx.buffered_early_lint.push(BufferedEarlyLint {\n+            span: MultiSpan::from_span(named_arg.positional_named_arg_span),\n+            msg: msg.clone(),\n+            node_id: ast::CRATE_NODE_ID,\n+            lint_id: LintId::of(&NAMED_ARGUMENTS_USED_POSITIONALLY),\n+            diagnostic: BuiltinLintDiagnostics::NamedArgumentUsedPositionally(\n+                arg_span,\n+                named_arg.positional_named_arg_span,\n+                replacement,\n+            ),\n+        });\n     }\n }\n \n@@ -1119,11 +1253,6 @@ pub fn expand_preparsed_format_args(\n \n     let named_pos: FxHashSet<usize> = names.values().cloned().map(|(i, _)| i).collect();\n \n-    // Clone `names` because `names` in Context get updated by verify_piece, which includes usages\n-    // of the names of named arguments, resulting in incorrect errors if a name argument is used\n-    // but not declared, such as: `println!(\"x = {x}\");`\n-    let named_arguments = names.clone();\n-\n     let mut cx = Context {\n         ecx,\n         args,\n@@ -1148,13 +1277,12 @@ pub fn expand_preparsed_format_args(\n         arg_spans,\n         arg_with_formatting: Vec::new(),\n         is_literal: parser.is_literal,\n+        unused_names_lint: PositionalNamedArgsLint { positional_named_args: vec![] },\n     };\n \n-    // This needs to happen *after* the Parser has consumed all pieces to create all the spans.\n-    // unverified_pieces is used later to check named argument names are used, so clone each piece.\n+    // This needs to happen *after* the Parser has consumed all pieces to create all the spans\n     let pieces = unverified_pieces\n-        .iter()\n-        .cloned()\n+        .into_iter()\n         .map(|mut piece| {\n             cx.verify_piece(&piece);\n             cx.resolve_name_inplace(&mut piece);\n@@ -1164,7 +1292,7 @@ pub fn expand_preparsed_format_args(\n \n     let numbered_position_args = pieces.iter().any(|arg: &parse::Piece<'_>| match *arg {\n         parse::String(_) => false,\n-        parse::NextArgument(arg) => matches!(arg.position, parse::Position::ArgumentIs(_)),\n+        parse::NextArgument(arg) => matches!(arg.position, parse::Position::ArgumentIs(..)),\n     });\n \n     cx.build_index_map();\n@@ -1316,11 +1444,10 @@ pub fn expand_preparsed_format_args(\n         }\n \n         diag.emit();\n-    } else if cx.invalid_refs.is_empty() && !named_arguments.is_empty() {\n+    } else if cx.invalid_refs.is_empty() && cx.ecx.sess.err_count() == 0 {\n         // Only check for unused named argument names if there are no other errors to avoid causing\n         // too much noise in output errors, such as when a named argument is entirely unused.\n-        // We also only need to perform this check if there are actually named arguments.\n-        lint_named_arguments_used_positionally(named_arguments, &mut cx, unverified_pieces);\n+        create_lints_for_named_arguments_used_positionally(&mut cx);\n     }\n \n     cx.into_expr()"}, {"sha": "04ac50f1d48061b02b9893e21e5c5006dffb2cc4", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -861,10 +861,10 @@ pub trait LintContext: Sized {\n                     if let Some(positional_arg) = positional_arg {\n                         let msg = format!(\"this formatting argument uses named argument `{}` by position\", name);\n                         db.span_label(positional_arg, msg);\n-                            db.span_suggestion_verbose(\n+                        db.span_suggestion_verbose(\n                             positional_arg,\n                             \"use the named argument by name to avoid ambiguity\",\n-                            format!(\"{{{}}}\", name),\n+                            name,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }"}, {"sha": "4fd57ed8533795502ec2a652822b6d0939a92a14", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -467,7 +467,7 @@ pub enum BuiltinLintDiagnostics {\n         /// If true, the lifetime will be fully elided.\n         use_span: Option<(Span, bool)>,\n     },\n-    NamedArgumentUsedPositionally(Option<Span>, Span, Symbol),\n+    NamedArgumentUsedPositionally(Option<Span>, Span, String),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "5deb17b8651b6dedbee40a2202455b6b5a48e99b", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -104,16 +104,16 @@ pub struct FormatSpec<'a> {\n pub enum Position<'a> {\n     /// The argument is implied to be located at an index\n     ArgumentImplicitlyIs(usize),\n-    /// The argument is located at a specific index given in the format\n-    ArgumentIs(usize),\n+    /// The argument is located at a specific index given in the format,\n+    ArgumentIs(usize, Option<InnerSpan>),\n     /// The argument has a name.\n     ArgumentNamed(&'a str, InnerSpan),\n }\n \n impl Position<'_> {\n     pub fn index(&self) -> Option<usize> {\n         match self {\n-            ArgumentIs(i) | ArgumentImplicitlyIs(i) => Some(*i),\n+            ArgumentIs(i, ..) | ArgumentImplicitlyIs(i) => Some(*i),\n             _ => None,\n         }\n     }\n@@ -502,8 +502,15 @@ impl<'a> Parser<'a> {\n     /// Returns `Some(parsed_position)` if the position is not implicitly\n     /// consuming a macro argument, `None` if it's the case.\n     fn position(&mut self) -> Option<Position<'a>> {\n+        let start_position = self.cur.peek().map(|item| item.0);\n         if let Some(i) = self.integer() {\n-            Some(ArgumentIs(i))\n+            let inner_span = start_position.and_then(|start| {\n+                self.cur\n+                    .peek()\n+                    .cloned()\n+                    .and_then(|item| Some(self.to_span_index(start).to(self.to_span_index(item.0))))\n+            });\n+            Some(ArgumentIs(i, inner_span))\n         } else {\n             match self.cur.peek() {\n                 Some(&(start, c)) if rustc_lexer::is_id_start(c) => {\n@@ -574,6 +581,10 @@ impl<'a> Parser<'a> {\n             // no '0' flag and '0$' as the width instead.\n             if let Some(end) = self.consume_pos('$') {\n                 spec.width = CountIsParam(0);\n+\n+                if let Some((pos, _)) = self.cur.peek().cloned() {\n+                    spec.width_span = Some(self.to_span_index(pos - 2).to(self.to_span_index(pos)));\n+                }\n                 havewidth = true;\n                 spec.width_span = Some(self.to_span_index(end - 1).to(self.to_span_index(end + 1)));\n             } else {\n@@ -586,6 +597,7 @@ impl<'a> Parser<'a> {\n             spec.width = w;\n             spec.width_span = sp;\n         }\n+\n         if let Some(start) = self.consume_pos('.') {\n             if let Some(end) = self.consume_pos('*') {\n                 // Resolve `CountIsNextParam`."}, {"sha": "a98f816644bd69a93abd68fa535de67e67532bb8", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -62,18 +62,30 @@ fn format_nothing() {\n }\n #[test]\n fn format_position() {\n-    same(\"{3}\", &[NextArgument(Argument { position: ArgumentIs(3), format: fmtdflt() })]);\n+    same(\n+        \"{3}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n+            format: fmtdflt(),\n+        })],\n+    );\n }\n #[test]\n fn format_position_nothing_else() {\n-    same(\"{3:}\", &[NextArgument(Argument { position: ArgumentIs(3), format: fmtdflt() })]);\n+    same(\n+        \"{3:}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n+            format: fmtdflt(),\n+        })],\n+    );\n }\n #[test]\n fn format_type() {\n     same(\n         \"{3:x}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(3),\n+            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n@@ -93,7 +105,7 @@ fn format_align_fill() {\n     same(\n         \"{3:>}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(3),\n+            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignRight,\n@@ -110,7 +122,7 @@ fn format_align_fill() {\n     same(\n         \"{3:0<}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(3),\n+            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n             format: FormatSpec {\n                 fill: Some('0'),\n                 align: AlignLeft,\n@@ -127,7 +139,7 @@ fn format_align_fill() {\n     same(\n         \"{3:*<abcd}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(3),\n+            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n             format: FormatSpec {\n                 fill: Some('*'),\n                 align: AlignLeft,\n@@ -181,7 +193,7 @@ fn format_counts() {\n     same(\n         \"{1:0$.10x}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(1),\n+            position: ArgumentIs(1, Some(InnerSpan { start: 2, end: 3 })),\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n@@ -291,7 +303,7 @@ fn format_mixture() {\n         &[\n             String(\"abcd \"),\n             NextArgument(Argument {\n-                position: ArgumentIs(3),\n+                position: ArgumentIs(3, Some(InnerSpan { start: 7, end: 8 })),\n                 format: FormatSpec {\n                     fill: None,\n                     align: AlignUnknown,"}, {"sha": "4d3b0b4cf077ce9b8e282c6fad6bcdf82e5a1233", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -337,7 +337,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                         }\n                     }\n                     // `{:1}` and `{}` are not to be used\n-                    Position::ArgumentIs(_) | Position::ArgumentImplicitlyIs(_) => {\n+                    Position::ArgumentIs(..) | Position::ArgumentImplicitlyIs(_) => {\n                         let reported = struct_span_err!(\n                             tcx.sess,\n                             span,"}, {"sha": "4a39dd1440b1f212aff5098246a2ed4092aeac88", "filename": "src/test/ui/macros/issue-98466.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/src%2Ftest%2Fui%2Fmacros%2Fissue-98466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/src%2Ftest%2Fui%2Fmacros%2Fissue-98466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-98466.stderr?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -2,80 +2,80 @@ warning: named argument `_x` is not used by name\n   --> $DIR/issue-98466.rs:7:26\n    |\n LL |     println!(\"_x is {}\", _x = 5);\n-   |                     --   ^^ this named argument is only referred to by position in formatting string\n-   |                     |\n-   |                     this formatting argument uses named argument `_x` by position\n+   |                      -   ^^ this named argument is only referred to by position in formatting string\n+   |                      |\n+   |                      this formatting argument uses named argument `_x` by position\n    |\n    = note: `#[warn(named_arguments_used_positionally)]` on by default\n help: use the named argument by name to avoid ambiguity\n    |\n LL |     println!(\"_x is {_x}\", _x = 5);\n-   |                     ~~~~\n+   |                      ++\n \n warning: named argument `y` is not used by name\n   --> $DIR/issue-98466.rs:10:26\n    |\n LL |     println!(\"_x is {}\", y = _x);\n-   |                     --   ^ this named argument is only referred to by position in formatting string\n-   |                     |\n-   |                     this formatting argument uses named argument `y` by position\n+   |                      -   ^ this named argument is only referred to by position in formatting string\n+   |                      |\n+   |                      this formatting argument uses named argument `y` by position\n    |\n help: use the named argument by name to avoid ambiguity\n    |\n LL |     println!(\"_x is {y}\", y = _x);\n-   |                     ~~~\n+   |                      +\n \n warning: named argument `y` is not used by name\n   --> $DIR/issue-98466.rs:13:83\n    |\n LL |     println!(\"first positional arg {}, second positional arg {}, _x is {}\", 1, 2, y = _x);\n-   |                                                                        --         ^ this named argument is only referred to by position in formatting string\n-   |                                                                        |\n-   |                                                                        this formatting argument uses named argument `y` by position\n+   |                                                                         -         ^ this named argument is only referred to by position in formatting string\n+   |                                                                         |\n+   |                                                                         this formatting argument uses named argument `y` by position\n    |\n help: use the named argument by name to avoid ambiguity\n    |\n LL |     println!(\"first positional arg {}, second positional arg {}, _x is {y}\", 1, 2, y = _x);\n-   |                                                                        ~~~\n+   |                                                                         +\n \n warning: named argument `_x` is not used by name\n   --> $DIR/issue-98466.rs:19:34\n    |\n LL |     let _f = format!(\"_x is {}\", _x = 5);\n-   |                             --   ^^ this named argument is only referred to by position in formatting string\n-   |                             |\n-   |                             this formatting argument uses named argument `_x` by position\n+   |                              -   ^^ this named argument is only referred to by position in formatting string\n+   |                              |\n+   |                              this formatting argument uses named argument `_x` by position\n    |\n help: use the named argument by name to avoid ambiguity\n    |\n LL |     let _f = format!(\"_x is {_x}\", _x = 5);\n-   |                             ~~~~\n+   |                              ++\n \n warning: named argument `y` is not used by name\n   --> $DIR/issue-98466.rs:22:34\n    |\n LL |     let _f = format!(\"_x is {}\", y = _x);\n-   |                             --   ^ this named argument is only referred to by position in formatting string\n-   |                             |\n-   |                             this formatting argument uses named argument `y` by position\n+   |                              -   ^ this named argument is only referred to by position in formatting string\n+   |                              |\n+   |                              this formatting argument uses named argument `y` by position\n    |\n help: use the named argument by name to avoid ambiguity\n    |\n LL |     let _f = format!(\"_x is {y}\", y = _x);\n-   |                             ~~~\n+   |                              +\n \n warning: named argument `y` is not used by name\n   --> $DIR/issue-98466.rs:25:91\n    |\n LL |     let _f = format!(\"first positional arg {}, second positional arg {}, _x is {}\", 1, 2, y = _x);\n-   |                                                                                --         ^ this named argument is only referred to by position in formatting string\n-   |                                                                                |\n-   |                                                                                this formatting argument uses named argument `y` by position\n+   |                                                                                 -         ^ this named argument is only referred to by position in formatting string\n+   |                                                                                 |\n+   |                                                                                 this formatting argument uses named argument `y` by position\n    |\n help: use the named argument by name to avoid ambiguity\n    |\n LL |     let _f = format!(\"first positional arg {}, second positional arg {}, _x is {y}\", 1, 2, y = _x);\n-   |                                                                                ~~~\n+   |                                                                                 +\n \n warning: 6 warnings emitted\n "}, {"sha": "f3be9c6285d6c98475ba1b64ac28b81fda23c20c", "filename": "src/test/ui/macros/issue-99265.fixed", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/src%2Ftest%2Fui%2Fmacros%2Fissue-99265.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/src%2Ftest%2Fui%2Fmacros%2Fissue-99265.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-99265.fixed?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -0,0 +1,139 @@\n+// check-pass\n+// run-rustfix\n+\n+fn main() {\n+    println!(\"{b} {a}\", a=1, b=2);\n+    //~^ WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"{} {a} {b} {c} {d}\", 0, a=1, b=2, c=3, d=4);\n+    //~^ WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `b` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `c` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `d` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"Hello {:width$}!\", \"x\", width = 5);\n+    //~^ WARNING named argument `width` is not used by name [named_arguments_used_positionally\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"Hello {f:width$.precision$}!\", f = 0.02f32, width = 5, precision = 2);\n+    //~^ WARNING named argument `width` is not used by name [named_arguments_used_positionally\n+    //~| WARNING named argument `precision` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"Hello {f:width$.precision$}!\", f = 0.02f32, width = 5, precision = 2);\n+    //~^ WARNING named argument `width` is not used by name [named_arguments_used_positionally\n+    //~| WARNING named argument `precision` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\n+        \"{}, Hello {f:width$.precision$} {g:width2$.precision2$}! {f}\",\n+        //~^ HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        1,\n+        f = 0.02f32,\n+        //~^ WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+        //~| WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+        width = 5,\n+        //~^ WARNING named argument `width` is not used by name [named_arguments_used_positionally\n+        precision = 2,\n+        //~^ WARNING named argument `precision` is not used by name [named_arguments_used_positionally]\n+        g = 0.02f32,\n+        //~^ WARNING named argument `g` is not used by name [named_arguments_used_positionally]\n+        width2 = 5,\n+        //~^ WARNING named argument `width2` is not used by name [named_arguments_used_positionally\n+        precision2 = 2\n+        //~^ WARNING named argument `precision2` is not used by name [named_arguments_used_positionally]\n+    );\n+\n+    println!(\"Hello {f:0.1}!\", f = 0.02f32);\n+    //~^ WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"Hello {f:0.1}!\", f = 0.02f32);\n+    //~^ WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"Hello {f:width$.precision$}!\", f = 0.02f32, width = 5, precision = 2);\n+\n+    let width = 5;\n+    let precision = 2;\n+    println!(\"Hello {f:width$.precision$}!\", f = 0.02f32);\n+\n+    let val = 5;\n+    println!(\"{v:v$}\", v = val);\n+    //~^ WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    println!(\"{v:v$}\", v = val);\n+    //~^ WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    println!(\"{v:v$.v$}\", v = val);\n+    //~^ WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    println!(\"{v:v$.v$}\", v = val);\n+    //~^ WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"{a} {a} {a}\", a = 1);\n+    //~^ WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"aaaaaaaaaaaaaaa\\\n+                {a:b$.c$}\",\n+             //~^ HELP use the named argument by name to avoid ambiguity\n+             //~| HELP use the named argument by name to avoid ambiguity\n+             //~| HELP use the named argument by name to avoid ambiguity\n+             a = 1.0, b = 1, c = 2,\n+             //~^ WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+             //~| WARNING named argument `b` is not used by name [named_arguments_used_positionally]\n+             //~| WARNING named argument `c` is not used by name [named_arguments_used_positionally]\n+    );\n+\n+    println!(\"aaaaaaaaaaaaaaa\\\n+                {a:b$.c$}\",\n+             //~^ HELP use the named argument by name to avoid ambiguity\n+             //~| HELP use the named argument by name to avoid ambiguity\n+             //~| HELP use the named argument by name to avoid ambiguity\n+             a = 1.0, b = 1, c = 2,\n+             //~^ WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+             //~| WARNING named argument `b` is not used by name [named_arguments_used_positionally]\n+             //~| WARNING named argument `c` is not used by name [named_arguments_used_positionally]\n+    );\n+\n+    println!(\"{{{x:width$.precision$}}}\", x = 1.0, width = 3, precision = 2);\n+    //~^ WARNING named argument `x` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `width` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `precision` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+}"}, {"sha": "e7cf608765b0d5f55a4e4e26b414b33b0ed844ba", "filename": "src/test/ui/macros/issue-99265.rs", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/src%2Ftest%2Fui%2Fmacros%2Fissue-99265.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/src%2Ftest%2Fui%2Fmacros%2Fissue-99265.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-99265.rs?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -0,0 +1,139 @@\n+// check-pass\n+// run-rustfix\n+\n+fn main() {\n+    println!(\"{b} {}\", a=1, b=2);\n+    //~^ WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"{} {} {} {} {}\", 0, a=1, b=2, c=3, d=4);\n+    //~^ WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `b` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `c` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `d` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"Hello {:1$}!\", \"x\", width = 5);\n+    //~^ WARNING named argument `width` is not used by name [named_arguments_used_positionally\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"Hello {:1$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+    //~^ WARNING named argument `width` is not used by name [named_arguments_used_positionally\n+    //~| WARNING named argument `precision` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"Hello {0:1$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+    //~^ WARNING named argument `width` is not used by name [named_arguments_used_positionally\n+    //~| WARNING named argument `precision` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\n+        \"{}, Hello {1:2$.3$} {4:5$.6$}! {1}\",\n+        //~^ HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        //~| HELP use the named argument by name to avoid ambiguity\n+        1,\n+        f = 0.02f32,\n+        //~^ WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+        //~| WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+        width = 5,\n+        //~^ WARNING named argument `width` is not used by name [named_arguments_used_positionally\n+        precision = 2,\n+        //~^ WARNING named argument `precision` is not used by name [named_arguments_used_positionally]\n+        g = 0.02f32,\n+        //~^ WARNING named argument `g` is not used by name [named_arguments_used_positionally]\n+        width2 = 5,\n+        //~^ WARNING named argument `width2` is not used by name [named_arguments_used_positionally\n+        precision2 = 2\n+        //~^ WARNING named argument `precision2` is not used by name [named_arguments_used_positionally]\n+    );\n+\n+    println!(\"Hello {:0.1}!\", f = 0.02f32);\n+    //~^ WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"Hello {0:0.1}!\", f = 0.02f32);\n+    //~^ WARNING named argument `f` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"Hello {f:width$.precision$}!\", f = 0.02f32, width = 5, precision = 2);\n+\n+    let width = 5;\n+    let precision = 2;\n+    println!(\"Hello {f:width$.precision$}!\", f = 0.02f32);\n+\n+    let val = 5;\n+    println!(\"{:0$}\", v = val);\n+    //~^ WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    println!(\"{0:0$}\", v = val);\n+    //~^ WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    println!(\"{:0$.0$}\", v = val);\n+    //~^ WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    println!(\"{0:0$.0$}\", v = val);\n+    //~^ WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `v` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"{} {a} {0}\", a = 1);\n+    //~^ WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+\n+    println!(\"aaaaaaaaaaaaaaa\\\n+                {:1$.2$}\",\n+             //~^ HELP use the named argument by name to avoid ambiguity\n+             //~| HELP use the named argument by name to avoid ambiguity\n+             //~| HELP use the named argument by name to avoid ambiguity\n+             a = 1.0, b = 1, c = 2,\n+             //~^ WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+             //~| WARNING named argument `b` is not used by name [named_arguments_used_positionally]\n+             //~| WARNING named argument `c` is not used by name [named_arguments_used_positionally]\n+    );\n+\n+    println!(\"aaaaaaaaaaaaaaa\\\n+                {0:1$.2$}\",\n+             //~^ HELP use the named argument by name to avoid ambiguity\n+             //~| HELP use the named argument by name to avoid ambiguity\n+             //~| HELP use the named argument by name to avoid ambiguity\n+             a = 1.0, b = 1, c = 2,\n+             //~^ WARNING named argument `a` is not used by name [named_arguments_used_positionally]\n+             //~| WARNING named argument `b` is not used by name [named_arguments_used_positionally]\n+             //~| WARNING named argument `c` is not used by name [named_arguments_used_positionally]\n+    );\n+\n+    println!(\"{{{:1$.2$}}}\", x = 1.0, width = 3, precision = 2);\n+    //~^ WARNING named argument `x` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `width` is not used by name [named_arguments_used_positionally]\n+    //~| WARNING named argument `precision` is not used by name [named_arguments_used_positionally]\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+    //~| HELP use the named argument by name to avoid ambiguity\n+}"}, {"sha": "0798ad8dc517c18533dcde650234ba176c3e555b", "filename": "src/test/ui/macros/issue-99265.stderr", "status": "added", "additions": 562, "deletions": 0, "changes": 562, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/src%2Ftest%2Fui%2Fmacros%2Fissue-99265.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/src%2Ftest%2Fui%2Fmacros%2Fissue-99265.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-99265.stderr?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -0,0 +1,562 @@\n+warning: named argument `a` is not used by name\n+  --> $DIR/issue-99265.rs:5:24\n+   |\n+LL |     println!(\"{b} {}\", a=1, b=2);\n+   |                    -   ^ this named argument is only referred to by position in formatting string\n+   |                    |\n+   |                    this formatting argument uses named argument `a` by position\n+   |\n+   = note: `#[warn(named_arguments_used_positionally)]` on by default\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{b} {a}\", a=1, b=2);\n+   |                    +\n+\n+warning: named argument `a` is not used by name\n+  --> $DIR/issue-99265.rs:9:35\n+   |\n+LL |     println!(\"{} {} {} {} {}\", 0, a=1, b=2, c=3, d=4);\n+   |                   -               ^ this named argument is only referred to by position in formatting string\n+   |                   |\n+   |                   this formatting argument uses named argument `a` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{} {a} {} {} {}\", 0, a=1, b=2, c=3, d=4);\n+   |                   +\n+\n+warning: named argument `b` is not used by name\n+  --> $DIR/issue-99265.rs:9:40\n+   |\n+LL |     println!(\"{} {} {} {} {}\", 0, a=1, b=2, c=3, d=4);\n+   |                      -                 ^ this named argument is only referred to by position in formatting string\n+   |                      |\n+   |                      this formatting argument uses named argument `b` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{} {} {b} {} {}\", 0, a=1, b=2, c=3, d=4);\n+   |                      +\n+\n+warning: named argument `c` is not used by name\n+  --> $DIR/issue-99265.rs:9:45\n+   |\n+LL |     println!(\"{} {} {} {} {}\", 0, a=1, b=2, c=3, d=4);\n+   |                         -                   ^ this named argument is only referred to by position in formatting string\n+   |                         |\n+   |                         this formatting argument uses named argument `c` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{} {} {} {c} {}\", 0, a=1, b=2, c=3, d=4);\n+   |                         +\n+\n+warning: named argument `d` is not used by name\n+  --> $DIR/issue-99265.rs:9:50\n+   |\n+LL |     println!(\"{} {} {} {} {}\", 0, a=1, b=2, c=3, d=4);\n+   |                            -                     ^ this named argument is only referred to by position in formatting string\n+   |                            |\n+   |                            this formatting argument uses named argument `d` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{} {} {} {} {d}\", 0, a=1, b=2, c=3, d=4);\n+   |                            +\n+\n+warning: named argument `width` is not used by name\n+  --> $DIR/issue-99265.rs:19:35\n+   |\n+LL |     println!(\"Hello {:1$}!\", \"x\", width = 5);\n+   |                       --          ^^^^^ this named argument is only referred to by position in formatting string\n+   |                       |\n+   |                       this formatting argument uses named argument `width$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"Hello {:width$}!\", \"x\", width = 5);\n+   |                       ~~~~~~\n+\n+warning: named argument `width` is not used by name\n+  --> $DIR/issue-99265.rs:23:46\n+   |\n+LL |     println!(\"Hello {:1$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                       --                     ^^^^^ this named argument is only referred to by position in formatting string\n+   |                       |\n+   |                       this formatting argument uses named argument `width$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"Hello {:width$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                       ~~~~~~\n+\n+warning: named argument `precision` is not used by name\n+  --> $DIR/issue-99265.rs:23:57\n+   |\n+LL |     println!(\"Hello {:1$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                          --                             ^^^^^^^^^ this named argument is only referred to by position in formatting string\n+   |                          |\n+   |                          this formatting argument uses named argument `precision$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"Hello {:1$.precision$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                          ~~~~~~~~~~\n+\n+warning: named argument `f` is not used by name\n+  --> $DIR/issue-99265.rs:23:33\n+   |\n+LL |     println!(\"Hello {:1$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                      -          ^ this named argument is only referred to by position in formatting string\n+   |                      |\n+   |                      this formatting argument uses named argument `f` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"Hello {f:1$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                      +\n+\n+warning: named argument `width` is not used by name\n+  --> $DIR/issue-99265.rs:31:47\n+   |\n+LL |     println!(\"Hello {0:1$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                        --                     ^^^^^ this named argument is only referred to by position in formatting string\n+   |                        |\n+   |                        this formatting argument uses named argument `width$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"Hello {0:width$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                        ~~~~~~\n+\n+warning: named argument `precision` is not used by name\n+  --> $DIR/issue-99265.rs:31:58\n+   |\n+LL |     println!(\"Hello {0:1$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                           --                             ^^^^^^^^^ this named argument is only referred to by position in formatting string\n+   |                           |\n+   |                           this formatting argument uses named argument `precision$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"Hello {0:1$.precision$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                           ~~~~~~~~~~\n+\n+warning: named argument `f` is not used by name\n+  --> $DIR/issue-99265.rs:31:34\n+   |\n+LL |     println!(\"Hello {0:1$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                      -           ^ this named argument is only referred to by position in formatting string\n+   |                      |\n+   |                      this formatting argument uses named argument `f` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"Hello {f:1$.2$}!\", f = 0.02f32, width = 5, precision = 2);\n+   |                      ~\n+\n+warning: named argument `width` is not used by name\n+  --> $DIR/issue-99265.rs:52:9\n+   |\n+LL |         \"{}, Hello {1:2$.3$} {4:5$.6$}! {1}\",\n+   |                       -- this formatting argument uses named argument `width$` by position\n+...\n+LL |         width = 5,\n+   |         ^^^^^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |         \"{}, Hello {1:width$.3$} {4:5$.6$}! {1}\",\n+   |                       ~~~~~~\n+\n+warning: named argument `precision` is not used by name\n+  --> $DIR/issue-99265.rs:54:9\n+   |\n+LL |         \"{}, Hello {1:2$.3$} {4:5$.6$}! {1}\",\n+   |                          -- this formatting argument uses named argument `precision$` by position\n+...\n+LL |         precision = 2,\n+   |         ^^^^^^^^^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |         \"{}, Hello {1:2$.precision$} {4:5$.6$}! {1}\",\n+   |                          ~~~~~~~~~~\n+\n+warning: named argument `f` is not used by name\n+  --> $DIR/issue-99265.rs:49:9\n+   |\n+LL |         \"{}, Hello {1:2$.3$} {4:5$.6$}! {1}\",\n+   |                     - this formatting argument uses named argument `f` by position\n+...\n+LL |         f = 0.02f32,\n+   |         ^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |         \"{}, Hello {f:2$.3$} {4:5$.6$}! {1}\",\n+   |                     ~\n+\n+warning: named argument `width2` is not used by name\n+  --> $DIR/issue-99265.rs:58:9\n+   |\n+LL |         \"{}, Hello {1:2$.3$} {4:5$.6$}! {1}\",\n+   |                                 -- this formatting argument uses named argument `width2$` by position\n+...\n+LL |         width2 = 5,\n+   |         ^^^^^^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |         \"{}, Hello {1:2$.3$} {4:width2$.6$}! {1}\",\n+   |                                 ~~~~~~~\n+\n+warning: named argument `precision2` is not used by name\n+  --> $DIR/issue-99265.rs:60:9\n+   |\n+LL |         \"{}, Hello {1:2$.3$} {4:5$.6$}! {1}\",\n+   |                                    -- this formatting argument uses named argument `precision2$` by position\n+...\n+LL |         precision2 = 2\n+   |         ^^^^^^^^^^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |         \"{}, Hello {1:2$.3$} {4:5$.precision2$}! {1}\",\n+   |                                    ~~~~~~~~~~~\n+\n+warning: named argument `g` is not used by name\n+  --> $DIR/issue-99265.rs:56:9\n+   |\n+LL |         \"{}, Hello {1:2$.3$} {4:5$.6$}! {1}\",\n+   |                               - this formatting argument uses named argument `g` by position\n+...\n+LL |         g = 0.02f32,\n+   |         ^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |         \"{}, Hello {1:2$.3$} {g:5$.6$}! {1}\",\n+   |                               ~\n+\n+warning: named argument `f` is not used by name\n+  --> $DIR/issue-99265.rs:49:9\n+   |\n+LL |         \"{}, Hello {1:2$.3$} {4:5$.6$}! {1}\",\n+   |                                          - this formatting argument uses named argument `f` by position\n+...\n+LL |         f = 0.02f32,\n+   |         ^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |         \"{}, Hello {1:2$.3$} {4:5$.6$}! {f}\",\n+   |                                          ~\n+\n+warning: named argument `f` is not used by name\n+  --> $DIR/issue-99265.rs:64:31\n+   |\n+LL |     println!(\"Hello {:0.1}!\", f = 0.02f32);\n+   |                      -        ^ this named argument is only referred to by position in formatting string\n+   |                      |\n+   |                      this formatting argument uses named argument `f` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"Hello {f:0.1}!\", f = 0.02f32);\n+   |                      +\n+\n+warning: named argument `f` is not used by name\n+  --> $DIR/issue-99265.rs:68:32\n+   |\n+LL |     println!(\"Hello {0:0.1}!\", f = 0.02f32);\n+   |                      -         ^ this named argument is only referred to by position in formatting string\n+   |                      |\n+   |                      this formatting argument uses named argument `f` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"Hello {f:0.1}!\", f = 0.02f32);\n+   |                      ~\n+\n+warning: named argument `v` is not used by name\n+  --> $DIR/issue-99265.rs:79:23\n+   |\n+LL |     println!(\"{:0$}\", v = val);\n+   |                 --    ^ this named argument is only referred to by position in formatting string\n+   |                 |\n+   |                 this formatting argument uses named argument `v$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{:v$}\", v = val);\n+   |                 ~~\n+\n+warning: named argument `v` is not used by name\n+  --> $DIR/issue-99265.rs:79:23\n+   |\n+LL |     println!(\"{:0$}\", v = val);\n+   |                -      ^ this named argument is only referred to by position in formatting string\n+   |                |\n+   |                this formatting argument uses named argument `v` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{v:0$}\", v = val);\n+   |                +\n+\n+warning: named argument `v` is not used by name\n+  --> $DIR/issue-99265.rs:84:24\n+   |\n+LL |     println!(\"{0:0$}\", v = val);\n+   |                  --    ^ this named argument is only referred to by position in formatting string\n+   |                  |\n+   |                  this formatting argument uses named argument `v$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{0:v$}\", v = val);\n+   |                  ~~\n+\n+warning: named argument `v` is not used by name\n+  --> $DIR/issue-99265.rs:84:24\n+   |\n+LL |     println!(\"{0:0$}\", v = val);\n+   |                -       ^ this named argument is only referred to by position in formatting string\n+   |                |\n+   |                this formatting argument uses named argument `v` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{v:0$}\", v = val);\n+   |                ~\n+\n+warning: named argument `v` is not used by name\n+  --> $DIR/issue-99265.rs:89:26\n+   |\n+LL |     println!(\"{:0$.0$}\", v = val);\n+   |                 --       ^ this named argument is only referred to by position in formatting string\n+   |                 |\n+   |                 this formatting argument uses named argument `v$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{:v$.0$}\", v = val);\n+   |                 ~~\n+\n+warning: named argument `v` is not used by name\n+  --> $DIR/issue-99265.rs:89:26\n+   |\n+LL |     println!(\"{:0$.0$}\", v = val);\n+   |                    --    ^ this named argument is only referred to by position in formatting string\n+   |                    |\n+   |                    this formatting argument uses named argument `v$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{:0$.v$}\", v = val);\n+   |                    ~~\n+\n+warning: named argument `v` is not used by name\n+  --> $DIR/issue-99265.rs:89:26\n+   |\n+LL |     println!(\"{:0$.0$}\", v = val);\n+   |                -         ^ this named argument is only referred to by position in formatting string\n+   |                |\n+   |                this formatting argument uses named argument `v` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{v:0$.0$}\", v = val);\n+   |                +\n+\n+warning: named argument `v` is not used by name\n+  --> $DIR/issue-99265.rs:96:27\n+   |\n+LL |     println!(\"{0:0$.0$}\", v = val);\n+   |                  --       ^ this named argument is only referred to by position in formatting string\n+   |                  |\n+   |                  this formatting argument uses named argument `v$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{0:v$.0$}\", v = val);\n+   |                  ~~\n+\n+warning: named argument `v` is not used by name\n+  --> $DIR/issue-99265.rs:96:27\n+   |\n+LL |     println!(\"{0:0$.0$}\", v = val);\n+   |                     --    ^ this named argument is only referred to by position in formatting string\n+   |                     |\n+   |                     this formatting argument uses named argument `v$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{0:0$.v$}\", v = val);\n+   |                     ~~\n+\n+warning: named argument `v` is not used by name\n+  --> $DIR/issue-99265.rs:96:27\n+   |\n+LL |     println!(\"{0:0$.0$}\", v = val);\n+   |                -          ^ this named argument is only referred to by position in formatting string\n+   |                |\n+   |                this formatting argument uses named argument `v` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{v:0$.0$}\", v = val);\n+   |                ~\n+\n+warning: named argument `a` is not used by name\n+  --> $DIR/issue-99265.rs:104:28\n+   |\n+LL |     println!(\"{} {a} {0}\", a = 1);\n+   |                -           ^ this named argument is only referred to by position in formatting string\n+   |                |\n+   |                this formatting argument uses named argument `a` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{a} {a} {0}\", a = 1);\n+   |                +\n+\n+warning: named argument `a` is not used by name\n+  --> $DIR/issue-99265.rs:104:28\n+   |\n+LL |     println!(\"{} {a} {0}\", a = 1);\n+   |                       -    ^ this named argument is only referred to by position in formatting string\n+   |                       |\n+   |                       this formatting argument uses named argument `a` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{} {a} {a}\", a = 1);\n+   |                       ~\n+\n+warning: named argument `b` is not used by name\n+  --> $DIR/issue-99265.rs:115:23\n+   |\n+LL |                 {:1$.2$}\",\n+   |                   -- this formatting argument uses named argument `b$` by position\n+...\n+LL |              a = 1.0, b = 1, c = 2,\n+   |                       ^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |                 {:b$.2$}\",\n+   |                   ~~\n+\n+warning: named argument `c` is not used by name\n+  --> $DIR/issue-99265.rs:115:30\n+   |\n+LL |                 {:1$.2$}\",\n+   |                      -- this formatting argument uses named argument `c$` by position\n+...\n+LL |              a = 1.0, b = 1, c = 2,\n+   |                              ^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |                 {:1$.c$}\",\n+   |                      ~~\n+\n+warning: named argument `a` is not used by name\n+  --> $DIR/issue-99265.rs:115:14\n+   |\n+LL |                 {:1$.2$}\",\n+   |                  - this formatting argument uses named argument `a` by position\n+...\n+LL |              a = 1.0, b = 1, c = 2,\n+   |              ^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |                 {a:1$.2$}\",\n+   |                  +\n+\n+warning: named argument `b` is not used by name\n+  --> $DIR/issue-99265.rs:126:23\n+   |\n+LL |                 {0:1$.2$}\",\n+   |                    -- this formatting argument uses named argument `b$` by position\n+...\n+LL |              a = 1.0, b = 1, c = 2,\n+   |                       ^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |                 {0:b$.2$}\",\n+   |                    ~~\n+\n+warning: named argument `c` is not used by name\n+  --> $DIR/issue-99265.rs:126:30\n+   |\n+LL |                 {0:1$.2$}\",\n+   |                       -- this formatting argument uses named argument `c$` by position\n+...\n+LL |              a = 1.0, b = 1, c = 2,\n+   |                              ^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |                 {0:1$.c$}\",\n+   |                       ~~\n+\n+warning: named argument `a` is not used by name\n+  --> $DIR/issue-99265.rs:126:14\n+   |\n+LL |                 {0:1$.2$}\",\n+   |                  - this formatting argument uses named argument `a` by position\n+...\n+LL |              a = 1.0, b = 1, c = 2,\n+   |              ^ this named argument is only referred to by position in formatting string\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |                 {a:1$.2$}\",\n+   |                  ~\n+\n+warning: named argument `width` is not used by name\n+  --> $DIR/issue-99265.rs:132:39\n+   |\n+LL |     println!(\"{{{:1$.2$}}}\", x = 1.0, width = 3, precision = 2);\n+   |                   --                  ^^^^^ this named argument is only referred to by position in formatting string\n+   |                   |\n+   |                   this formatting argument uses named argument `width$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{{{:width$.2$}}}\", x = 1.0, width = 3, precision = 2);\n+   |                   ~~~~~~\n+\n+warning: named argument `precision` is not used by name\n+  --> $DIR/issue-99265.rs:132:50\n+   |\n+LL |     println!(\"{{{:1$.2$}}}\", x = 1.0, width = 3, precision = 2);\n+   |                      --                          ^^^^^^^^^ this named argument is only referred to by position in formatting string\n+   |                      |\n+   |                      this formatting argument uses named argument `precision$` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{{{:1$.precision$}}}\", x = 1.0, width = 3, precision = 2);\n+   |                      ~~~~~~~~~~\n+\n+warning: named argument `x` is not used by name\n+  --> $DIR/issue-99265.rs:132:30\n+   |\n+LL |     println!(\"{{{:1$.2$}}}\", x = 1.0, width = 3, precision = 2);\n+   |                  -           ^ this named argument is only referred to by position in formatting string\n+   |                  |\n+   |                  this formatting argument uses named argument `x` by position\n+   |\n+help: use the named argument by name to avoid ambiguity\n+   |\n+LL |     println!(\"{{{x:1$.2$}}}\", x = 1.0, width = 3, precision = 2);\n+   |                  +\n+\n+warning: 42 warnings emitted\n+"}, {"sha": "3a99d1b417fee1c96373112e6e35d2143ba570f3", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3330c7d1c3bcfd2c452b794db66705b92fb54a3c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "patch": "@@ -441,7 +441,7 @@ impl SimpleFormatArgs {\n         };\n \n         match arg.position {\n-            ArgumentIs(n) | ArgumentImplicitlyIs(n) => {\n+            ArgumentIs(n, _) | ArgumentImplicitlyIs(n) => {\n                 if self.unnamed.len() <= n {\n                     // Use a dummy span to mark all unseen arguments.\n                     self.unnamed.resize_with(n, || vec![DUMMY_SP]);"}]}