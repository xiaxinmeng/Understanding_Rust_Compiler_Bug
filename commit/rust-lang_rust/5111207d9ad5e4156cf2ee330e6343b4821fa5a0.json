{"sha": "5111207d9ad5e4156cf2ee330e6343b4821fa5a0", "node_id": "C_kwDOAAsO6NoAKDUxMTEyMDdkOWFkNWU0MTU2Y2YyZWUzMzBlNjM0M2I0ODIxZmE1YTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-17T12:45:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-17T12:45:31Z"}, "message": "Auto merge of #14591 - justahero:gh-14516, r=Veykril\n\nRestrict \"sort items\" assist for traits & impls\n\nThis restricts the \"sort items alphabetically\" assist when the selection is inside a `Impl` or `Trait` node & intersects with one of the associated items.\n\nIt re-orders the conditional checks of AST nodes in the `sort_items` function to check for more specific nodes first before checking `Trait` or `Impl` nodes. The `AssistContext` is passed into the `add_sort_methods_assist` function to check if the selection intersects with any inner items, e.g. associated const or type alias, function. In this case the assist does not apply.\n\nFixes: #14516", "tree": {"sha": "7aaac653eecc790c22db940f40a3936e85e3daf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aaac653eecc790c22db940f40a3936e85e3daf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5111207d9ad5e4156cf2ee330e6343b4821fa5a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5111207d9ad5e4156cf2ee330e6343b4821fa5a0", "html_url": "https://github.com/rust-lang/rust/commit/5111207d9ad5e4156cf2ee330e6343b4821fa5a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5111207d9ad5e4156cf2ee330e6343b4821fa5a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bab80dae445fd576cb4cc22ba208e9fbc39dc18d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bab80dae445fd576cb4cc22ba208e9fbc39dc18d", "html_url": "https://github.com/rust-lang/rust/commit/bab80dae445fd576cb4cc22ba208e9fbc39dc18d"}, {"sha": "c1712e55c6d7fbb9d7ccef5de0be0b1c41033219", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1712e55c6d7fbb9d7ccef5de0be0b1c41033219", "html_url": "https://github.com/rust-lang/rust/commit/c1712e55c6d7fbb9d7ccef5de0be0b1c41033219"}], "stats": {"total": 109, "additions": 103, "deletions": 6}, "files": [{"sha": "3a0121f55fa02b6b89a4d4f01516627833dcf1fc", "filename": "crates/ide-assists/src/handlers/sort_items.rs", "status": "modified", "additions": 103, "deletions": 6, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/5111207d9ad5e4156cf2ee330e6343b4821fa5a0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5111207d9ad5e4156cf2ee330e6343b4821fa5a0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fsort_items.rs?ref=5111207d9ad5e4156cf2ee330e6343b4821fa5a0", "patch": "@@ -87,11 +87,7 @@ pub(crate) fn sort_items(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<(\n         return None;\n     }\n \n-    if let Some(trait_ast) = ctx.find_node_at_offset::<ast::Trait>() {\n-        add_sort_methods_assist(acc, trait_ast.assoc_item_list()?)\n-    } else if let Some(impl_ast) = ctx.find_node_at_offset::<ast::Impl>() {\n-        add_sort_methods_assist(acc, impl_ast.assoc_item_list()?)\n-    } else if let Some(struct_ast) = ctx.find_node_at_offset::<ast::Struct>() {\n+    if let Some(struct_ast) = ctx.find_node_at_offset::<ast::Struct>() {\n         add_sort_field_list_assist(acc, struct_ast.field_list())\n     } else if let Some(union_ast) = ctx.find_node_at_offset::<ast::Union>() {\n         add_sort_fields_assist(acc, union_ast.record_field_list()?)\n@@ -103,6 +99,10 @@ pub(crate) fn sort_items(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<(\n         add_sort_fields_assist(acc, enum_struct_variant_ast)\n     } else if let Some(enum_ast) = ctx.find_node_at_offset::<ast::Enum>() {\n         add_sort_variants_assist(acc, enum_ast.variant_list()?)\n+    } else if let Some(trait_ast) = ctx.find_node_at_offset::<ast::Trait>() {\n+        add_sort_methods_assist(acc, ctx, trait_ast.assoc_item_list()?)\n+    } else if let Some(impl_ast) = ctx.find_node_at_offset::<ast::Impl>() {\n+        add_sort_methods_assist(acc, ctx, impl_ast.assoc_item_list()?)\n     } else {\n         None\n     }\n@@ -148,7 +148,19 @@ fn add_sort_field_list_assist(acc: &mut Assists, field_list: Option<ast::FieldLi\n     }\n }\n \n-fn add_sort_methods_assist(acc: &mut Assists, item_list: ast::AssocItemList) -> Option<()> {\n+fn add_sort_methods_assist(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+    item_list: ast::AssocItemList,\n+) -> Option<()> {\n+    let selection = ctx.selection_trimmed();\n+\n+    // ignore assist if the selection intersects with an associated item.\n+    if item_list.assoc_items().any(|item| item.syntax().text_range().intersect(selection).is_some())\n+    {\n+        return None;\n+    }\n+\n     let methods = get_methods(&item_list);\n     let sorted = sort_by_name(&methods);\n \n@@ -218,6 +230,51 @@ mod tests {\n \n     use super::*;\n \n+    #[test]\n+    fn not_applicable_if_selection_in_fn_body() {\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+struct S;\n+impl S {\n+    fn func2() {\n+        $0 bar $0\n+    }\n+    fn func() {}\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_selection_at_associated_const() {\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+struct S;\n+impl S {\n+    fn func2() {}\n+    fn func() {}\n+    const C: () = $0()$0;\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_selection_overlaps_nodes() {\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+struct S;\n+impl $0S {\n+    fn$0 func2() {}\n+    fn func() {}\n+}\n+        \"#,\n+        )\n+    }\n+\n     #[test]\n     fn not_applicable_if_no_selection() {\n         cov_mark::check!(not_applicable_if_no_selection);\n@@ -233,6 +290,21 @@ t$0rait Bar {\n         )\n     }\n \n+    #[test]\n+    fn not_applicable_if_selection_in_trait_fn_body() {\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+trait Bar {\n+    fn b() {\n+        $0 hello $0\n+    }\n+    fn a();\n+}\n+        \"#,\n+        )\n+    }\n+\n     #[test]\n     fn not_applicable_if_trait_empty() {\n         cov_mark::check!(not_applicable_if_sorted_or_empty_or_single);\n@@ -460,6 +532,31 @@ struct Bar {\n         )\n     }\n \n+    #[test]\n+    fn sort_struct_inside_a_function() {\n+        check_assist(\n+            sort_items,\n+            r#\"\n+fn hello() {\n+    $0struct Bar$0 {\n+        b: u8,\n+        a: u32,\n+        c: u64,\n+    }\n+}\n+        \"#,\n+            r#\"\n+fn hello() {\n+    struct Bar {\n+        a: u32,\n+        b: u8,\n+        c: u64,\n+    }\n+}\n+        \"#,\n+        )\n+    }\n+\n     #[test]\n     fn sort_generic_struct_with_lifetime() {\n         check_assist("}]}