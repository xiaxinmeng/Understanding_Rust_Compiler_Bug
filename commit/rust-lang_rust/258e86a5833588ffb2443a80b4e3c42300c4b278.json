{"sha": "258e86a5833588ffb2443a80b4e3c42300c4b278", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OGU4NmE1ODMzNTg4ZmZiMjQ0M2E4MGI0ZTNjNDIzMDBjNGIyNzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T06:53:59Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T06:53:59Z"}, "message": "syntax: fuse more code paths together.", "tree": {"sha": "0f0acc977d8cf01a0a5b171fac2b7bb356794d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f0acc977d8cf01a0a5b171fac2b7bb356794d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/258e86a5833588ffb2443a80b4e3c42300c4b278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/258e86a5833588ffb2443a80b4e3c42300c4b278", "html_url": "https://github.com/rust-lang/rust/commit/258e86a5833588ffb2443a80b4e3c42300c4b278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/258e86a5833588ffb2443a80b4e3c42300c4b278/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "573a8d8d30723592030c4eb22ebea637a58ac411", "url": "https://api.github.com/repos/rust-lang/rust/commits/573a8d8d30723592030c4eb22ebea637a58ac411", "html_url": "https://github.com/rust-lang/rust/commit/573a8d8d30723592030c4eb22ebea637a58ac411"}], "stats": {"total": 99, "additions": 51, "deletions": 48}, "files": [{"sha": "eaa04668b7a471bdaf4d798bd799d688df61c141", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 51, "deletions": 48, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/258e86a5833588ffb2443a80b4e3c42300c4b278/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/258e86a5833588ffb2443a80b4e3c42300c4b278/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=258e86a5833588ffb2443a80b4e3c42300c4b278", "patch": "@@ -18,7 +18,7 @@ use crate::parse::token;\n use crate::parse::parser::maybe_append;\n use crate::parse::diagnostics::Error;\n use crate::tokenstream::{TokenTree, TokenStream};\n-use crate::source_map::{respan, Span, Spanned};\n+use crate::source_map::{respan, Span};\n use crate::symbol::{kw, sym};\n \n use std::mem;\n@@ -122,12 +122,12 @@ impl<'a> Parser<'a> {\n             if self.eat_keyword(kw::Fn) {\n                 // EXTERN FUNCTION ITEM\n                 let fn_span = self.prev_span;\n-                let abi = opt_abi.unwrap_or(Abi::C);\n-                let (ident, item_, extra_attrs) =\n-                    self.parse_item_fn(Unsafety::Normal,\n-                                       respan(fn_span, IsAsync::NotAsync),\n-                                       respan(fn_span, Constness::NotConst),\n-                                       abi)?;\n+                let (ident, item_, extra_attrs) = self.parse_item_fn(FnHeader {\n+                    unsafety: Unsafety::Normal,\n+                    asyncness: respan(fn_span, IsAsync::NotAsync),\n+                    constness: respan(fn_span, Constness::NotConst),\n+                    abi: opt_abi.unwrap_or(Abi::C),\n+                })?;\n                 let prev_span = self.prev_span;\n                 let item = self.mk_item(lo.to(prev_span),\n                                         ident,\n@@ -165,11 +165,12 @@ impl<'a> Parser<'a> {\n                 // CONST FUNCTION ITEM\n                 let unsafety = self.parse_unsafety();\n                 self.bump();\n-                let (ident, item_, extra_attrs) =\n-                    self.parse_item_fn(unsafety,\n-                                       respan(const_span, IsAsync::NotAsync),\n-                                       respan(const_span, Constness::Const),\n-                                       Abi::Rust)?;\n+                let (ident, item_, extra_attrs) = self.parse_item_fn(FnHeader {\n+                    unsafety,\n+                    asyncness: respan(const_span, IsAsync::NotAsync),\n+                    constness: respan(const_span, Constness::Const),\n+                    abi: Abi::Rust,\n+                })?;\n                 let prev_span = self.prev_span;\n                 let item = self.mk_item(lo.to(prev_span),\n                                         ident,\n@@ -213,14 +214,16 @@ impl<'a> Parser<'a> {\n                 let unsafety = self.parse_unsafety(); // `unsafe`?\n                 self.expect_keyword(kw::Fn)?; // `fn`\n                 let fn_span = self.prev_span;\n-                let (ident, item_, extra_attrs) =\n-                    self.parse_item_fn(unsafety,\n-                                    respan(async_span, IsAsync::Async {\n-                                        closure_id: DUMMY_NODE_ID,\n-                                        return_impl_trait_id: DUMMY_NODE_ID,\n-                                    }),\n-                                    respan(fn_span, Constness::NotConst),\n-                                    Abi::Rust)?;\n+                let asyncness = respan(async_span, IsAsync::Async {\n+                    closure_id: DUMMY_NODE_ID,\n+                    return_impl_trait_id: DUMMY_NODE_ID,\n+                });\n+                let (ident, item_, extra_attrs) = self.parse_item_fn(FnHeader {\n+                    unsafety,\n+                    asyncness,\n+                    constness: respan(fn_span, Constness::NotConst),\n+                    abi: Abi::Rust,\n+                })?;\n                 let prev_span = self.prev_span;\n                 let item = self.mk_item(lo.to(prev_span),\n                                         ident,\n@@ -271,11 +274,12 @@ impl<'a> Parser<'a> {\n             // FUNCTION ITEM\n             self.bump();\n             let fn_span = self.prev_span;\n-            let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(Unsafety::Normal,\n-                                   respan(fn_span, IsAsync::NotAsync),\n-                                   respan(fn_span, Constness::NotConst),\n-                                   Abi::Rust)?;\n+            let (ident, item_, extra_attrs) = self.parse_item_fn(FnHeader {\n+                unsafety: Unsafety::Normal,\n+                asyncness: respan(fn_span, IsAsync::NotAsync),\n+                constness: respan(fn_span, Constness::NotConst),\n+                abi: Abi::Rust,\n+            })?;\n             let prev_span = self.prev_span;\n             let item = self.mk_item(lo.to(prev_span),\n                                     ident,\n@@ -297,11 +301,12 @@ impl<'a> Parser<'a> {\n             };\n             self.expect_keyword(kw::Fn)?;\n             let fn_span = self.prev_span;\n-            let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(Unsafety::Unsafe,\n-                                   respan(fn_span, IsAsync::NotAsync),\n-                                   respan(fn_span, Constness::NotConst),\n-                                   abi)?;\n+            let (ident, item_, extra_attrs) = self.parse_item_fn(FnHeader {\n+                unsafety: Unsafety::Unsafe,\n+                asyncness: respan(fn_span, IsAsync::NotAsync),\n+                constness: respan(fn_span, Constness::NotConst),\n+                abi,\n+            })?;\n             let prev_span = self.prev_span;\n             let item = self.mk_item(lo.to(prev_span),\n                                     ident,\n@@ -872,8 +877,7 @@ impl<'a> Parser<'a> {\n         is_name_required: impl Copy + Fn(&token::Token) -> bool,\n     ) -> PResult<'a, (Ident, MethodSig, Generics)> {\n         let header = self.parse_fn_front_matter()?;\n-        let ident = self.parse_ident()?;\n-        let mut generics = self.parse_generics()?;\n+        let (ident, mut generics) = self.parse_fn_header()?;\n         let decl = self.parse_fn_decl_with_self(is_name_required)?;\n         let sig = MethodSig { header, decl };\n         generics.where_clause = self.parse_where_clause()?;\n@@ -1251,20 +1255,22 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an item-position function declaration.\n-    fn parse_item_fn(\n+    fn parse_item_fn(&mut self, header: FnHeader) -> PResult<'a, ItemInfo> {\n+        let allow_c_variadic = header.abi == Abi::C && header.unsafety == Unsafety::Unsafe;\n+        let (ident, decl, generics) = self.parse_fn_sig(allow_c_variadic)?;\n+        let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n+        Ok((ident, ItemKind::Fn(decl, header, generics, body), Some(inner_attrs)))\n+    }\n+\n+    /// Parse the \"signature\", including the identifier, parameters, and generics of a function.\n+    fn parse_fn_sig(\n         &mut self,\n-        unsafety: Unsafety,\n-        asyncness: Spanned<IsAsync>,\n-        constness: Spanned<Constness>,\n-        abi: Abi\n-    ) -> PResult<'a, ItemInfo> {\n+        allow_c_variadic: bool,\n+    ) -> PResult<'a, (Ident, P<FnDecl>, Generics)> {\n         let (ident, mut generics) = self.parse_fn_header()?;\n-        let allow_c_variadic = abi == Abi::C && unsafety == Unsafety::Unsafe;\n         let decl = self.parse_fn_decl(allow_c_variadic)?;\n         generics.where_clause = self.parse_where_clause()?;\n-        let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        let header = FnHeader { unsafety, asyncness, constness, abi };\n-        Ok((ident, ItemKind::Fn(decl, header, generics, body), Some(inner_attrs)))\n+        Ok((ident, decl, generics))\n     }\n \n     /// Parses the name and optional generic types of a function header.\n@@ -1386,18 +1392,15 @@ impl<'a> Parser<'a> {\n         extern_sp: Span,\n     ) -> PResult<'a, ForeignItem> {\n         self.expect_keyword(kw::Fn)?;\n-\n-        let (ident, mut generics) = self.parse_fn_header()?;\n-        let decl = self.parse_fn_decl(true)?;\n-        generics.where_clause = self.parse_where_clause()?;\n-        let hi = self.token.span;\n+        let (ident, decl, generics) = self.parse_fn_sig(true)?;\n+        let span = lo.to(self.token.span);\n         self.parse_semi_or_incorrect_foreign_fn_body(&ident, extern_sp)?;\n         Ok(ast::ForeignItem {\n             ident,\n             attrs,\n             kind: ForeignItemKind::Fn(decl, generics),\n             id: DUMMY_NODE_ID,\n-            span: lo.to(hi),\n+            span,\n             vis,\n         })\n     }"}]}