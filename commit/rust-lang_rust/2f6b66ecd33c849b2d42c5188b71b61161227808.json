{"sha": "2f6b66ecd33c849b2d42c5188b71b61161227808", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNmI2NmVjZDMzYzg0OWIyZDQyYzUxODhiNzFiNjExNjEyMjc4MDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-13T18:46:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-13T20:24:33Z"}, "message": "s/vec::as_buf/vec::as_imm_buf/, fix comment, remove set.rs\n\nhat tip to @jruderman", "tree": {"sha": "96fc7d73849bd40ecb6b303af4c3544d178c37fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96fc7d73849bd40ecb6b303af4c3544d178c37fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6b66ecd33c849b2d42c5188b71b61161227808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6b66ecd33c849b2d42c5188b71b61161227808", "html_url": "https://github.com/rust-lang/rust/commit/2f6b66ecd33c849b2d42c5188b71b61161227808", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6b66ecd33c849b2d42c5188b71b61161227808/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c43426e35ba89fe52cd48b70d240f5014937f71f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c43426e35ba89fe52cd48b70d240f5014937f71f", "html_url": "https://github.com/rust-lang/rust/commit/c43426e35ba89fe52cd48b70d240f5014937f71f"}], "stats": {"total": 135, "additions": 36, "deletions": 99}, "files": [{"sha": "a44fae777409976ab9358892ba3a99c421d2fe2c", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -238,7 +238,7 @@ fn select2<A: Send, B: Send>(p_a: Port<A>, p_b: Port<B>)\n \n     let mut resport: *rust_port;\n     resport = rusti::init::<*rust_port>();\n-    do vec::as_buf(ports) |ports, n_ports| {\n+    do vec::as_imm_buf(ports) |ports, n_ports| {\n         rustrt::rust_port_select(ptr::addr_of(resport), ports,\n                                  n_ports as size_t, yieldp);\n     }"}, {"sha": "a7c3c4e0d0a0c3c6286129a9021c6f7bab11bfde", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -169,7 +169,7 @@ impl T : FromStr {\n /// Convert to a string in a given base\n fn to_str(n: T, radix: uint) -> ~str {\n     do to_str_bytes(n, radix) |slice| {\n-        do vec::as_buf(slice) |p, len| {\n+        do vec::as_imm_buf(slice) |p, len| {\n             unsafe { str::raw::from_buf_len(p, len) }\n         }\n     }"}, {"sha": "acb9953b1488f714e2cc845c5c6ff0c62c52c8f1", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -299,7 +299,7 @@ fn test_buf_len() {\n         do str::as_c_str(s1) |p1| {\n             do str::as_c_str(s2) |p2| {\n                 let v = ~[p0, p1, p2, null()];\n-                do vec::as_buf(v) |vp, len| {\n+                do vec::as_imm_buf(v) |vp, len| {\n                     assert unsafe { buf_len(vp) } == 3u;\n                     assert len == 4u;\n                 }"}, {"sha": "b99f3402ee5629b5df8a020c8b4f433435b16cbe", "filename": "src/libcore/run.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -92,7 +92,7 @@ fn with_argv<T>(prog: &str, args: &[~str],\n         vec::push_all(argptrs, str::as_c_str(*t, |b| ~[b]));\n     }\n     vec::push(argptrs, ptr::null());\n-    vec::as_buf(argptrs, |buf, _len| cb(buf))\n+    vec::as_imm_buf(argptrs, |buf, _len| cb(buf))\n }\n \n #[cfg(unix)]\n@@ -112,7 +112,7 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n             vec::push_all(ptrs, str::as_c_str(*t, |b| ~[b]));\n         }\n         vec::push(ptrs, ptr::null());\n-        vec::as_buf(ptrs, |p, _len|\n+        vec::as_imm_buf(ptrs, |p, _len|\n             unsafe { cb(::unsafe::reinterpret_cast(&p)) }\n         )\n       }\n@@ -138,7 +138,7 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n                 ::unsafe::forget(v);\n             }\n             blk += ~[0_u8];\n-            vec::as_buf(blk, |p, _len| cb(::unsafe::reinterpret_cast(&p)))\n+            vec::as_imm_buf(blk, |p, _len| cb(::unsafe::reinterpret_cast(&p)))\n           }\n           _ => cb(ptr::null())\n         }"}, {"sha": "17d6b9670298006f88e550bcae9c9bcaaa9115cb", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -1992,7 +1992,7 @@ mod raw {\n     unsafe fn from_buf_len(buf: *const u8, len: uint) -> ~str {\n         let mut v: ~[mut u8] = ~[mut];\n         vec::reserve(v, len + 1u);\n-        vec::as_buf(v, |vbuf, _len| {\n+        vec::as_imm_buf(v, |vbuf, _len| {\n             let vbuf = ::unsafe::transmute_mut_unsafe(vbuf);\n             ptr::memcpy(vbuf, buf as *u8, len)\n         });\n@@ -2049,7 +2049,7 @@ mod raw {\n             let mut v = ~[];\n             vec::reserve(v, end - begin + 1u);\n             unsafe {\n-                do vec::as_buf(v) |vbuf, _vlen| {\n+                do vec::as_imm_buf(v) |vbuf, _vlen| {\n                     let vbuf = ::unsafe::transmute_mut_unsafe(vbuf);\n                     let src = ptr::offset(sbuf, begin);\n                     ptr::memcpy(vbuf, src, end - begin);"}, {"sha": "80617fba8443c2d9b51cc9fe4f18ef730bcbb16a", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -174,7 +174,7 @@ fn from_str_radix(buf: &str, radix: u64) -> Option<u64> {\n  */\n pure fn to_str(num: T, radix: uint) -> ~str {\n     do to_str_bytes(false, num, radix) |slice| {\n-        do vec::as_buf(slice) |p, len| {\n+        do vec::as_imm_buf(slice) |p, len| {\n             unsafe { str::raw::from_buf_len(p, len) }\n         }\n     }\n@@ -219,7 +219,7 @@ pure fn to_str_bytes<U>(neg: bool, num: T, radix: uint,\n     // in-bounds, no extra cost.\n \n     unsafe {\n-        do vec::as_buf(buf) |p, len| {\n+        do vec::as_imm_buf(buf) |p, len| {\n             let mp = p as *mut u8;\n             let mut i = len;\n             let mut n = num;"}, {"sha": "bd67be910f04c57276531ace59c59f157c46d277", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -84,7 +84,7 @@ export riter;\n export riteri;\n export permute;\n export windowed;\n-export as_buf;\n+export as_imm_buf;\n export as_mut_buf;\n export as_const_buf;\n export raw;\n@@ -333,7 +333,7 @@ pure fn slice<T: Copy>(v: &[const T], start: uint, end: uint) -> ~[T] {\n pure fn view<T>(v: &[T], start: uint, end: uint) -> &[T] {\n     assert (start <= end);\n     assert (end <= len(v));\n-    do as_buf(v) |p, _len| {\n+    do as_imm_buf(v) |p, _len| {\n         unsafe {\n             ::unsafe::reinterpret_cast(\n                 &(ptr::offset(p, start),\n@@ -502,7 +502,7 @@ fn unshift<T>(&v: ~[T], +x: T) {\n }\n \n fn consume<T>(+v: ~[T], f: fn(uint, +T)) unsafe {\n-    do as_buf(v) |p, ln| {\n+    do as_imm_buf(v) |p, ln| {\n         for uint::range(0, ln) |i| {\n             let x <- *ptr::offset(p, i);\n             f(i, move x);\n@@ -513,7 +513,7 @@ fn consume<T>(+v: ~[T], f: fn(uint, +T)) unsafe {\n }\n \n fn consume_mut<T>(+v: ~[mut T], f: fn(uint, +T)) unsafe {\n-    do as_buf(v) |p, ln| {\n+    do as_imm_buf(v) |p, ln| {\n         for uint::range(0, ln) |i| {\n             let x <- *ptr::offset(p, i);\n             f(i, move x);\n@@ -605,7 +605,7 @@ fn push_all<T: Copy>(&v: ~[const T], rhs: &[const T]) {\n fn push_all_move<T>(&v: ~[const T], -rhs: ~[const T]) {\n     reserve(v, v.len() + rhs.len());\n     unsafe {\n-        do as_buf(rhs) |p, len| {\n+        do as_imm_buf(rhs) |p, len| {\n             for uint::range(0, len) |i| {\n                 let x <- *ptr::offset(p, i);\n                 push(v, move x);\n@@ -617,7 +617,7 @@ fn push_all_move<T>(&v: ~[const T], -rhs: ~[const T]) {\n \n /// Shorten a vector, dropping excess elements.\n fn truncate<T>(&v: ~[const T], newlen: uint) {\n-    do as_buf(v) |p, oldlen| {\n+    do as_imm_buf(v) |p, oldlen| {\n         assert(newlen <= oldlen);\n         unsafe {\n             // This loop is optimized out for non-drop types.\n@@ -1185,7 +1185,7 @@ element's value.\n */\n #[inline(always)]\n pure fn iter_between<T>(v: &[T], start: uint, end: uint, f: fn(T)) {\n-    do as_buf(v) |base_ptr, len| {\n+    do as_imm_buf(v) |base_ptr, len| {\n         assert start <= end;\n         assert end <= len;\n         unsafe {\n@@ -1212,7 +1212,7 @@ pure fn each<T>(v: &[T], f: fn(T) -> bool) {\n     // is that you are passing it to `f()` using\n     // an immutable.\n \n-    do vec::as_buf(v) |p, n| {\n+    do vec::as_imm_buf(v) |p, n| {\n         let mut n = n;\n         let mut p = p;\n         while n > 0u {\n@@ -1259,9 +1259,8 @@ fn each_mut_ref<T>(v: &[mut T], f: fn(elem: &mut T) -> bool) {\n     }\n }\n \n-/// Like `each()`, but for the case where you have\n-/// a vector with mutable contents and you would like\n-/// to mutate the contents as you iterate.\n+/// Like `each()`, but for the case where you have a vector that *may or may\n+/// not* have mutable contents.\n #[inline(always)]\n pure fn each_const_ref<T>(v: &[const T], f: fn(elem: &const T) -> bool) {\n     let mut i = 0;\n@@ -1281,7 +1280,7 @@ pure fn each_const_ref<T>(v: &[const T], f: fn(elem: &const T) -> bool) {\n  */\n #[inline(always)]\n pure fn eachi<T>(v: &[T], f: fn(uint, T) -> bool) {\n-    do vec::as_buf(v) |p, n| {\n+    do vec::as_imm_buf(v) |p, n| {\n         let mut i = 0u;\n         let mut p = p;\n         while i < n {\n@@ -1301,7 +1300,7 @@ pure fn eachi<T>(v: &[T], f: fn(uint, T) -> bool) {\n  */\n #[inline(always)]\n pure fn reach<T>(v: &[T], blk: fn(T) -> bool) {\n-    do vec::as_buf(v) |p, n| {\n+    do vec::as_imm_buf(v) |p, n| {\n         let mut i = 1;\n         while i <= n {\n             unsafe {\n@@ -1319,7 +1318,7 @@ pure fn reach<T>(v: &[T], blk: fn(T) -> bool) {\n  */\n #[inline(always)]\n pure fn reachi<T>(v: &[T], blk: fn(uint, T) -> bool) {\n-    do vec::as_buf(v) |p, n| {\n+    do vec::as_imm_buf(v) |p, n| {\n         let mut i = 1;\n         while i <= n {\n             unsafe {\n@@ -1431,10 +1430,10 @@ pure fn windowed<TT: Copy>(nn: uint, xx: &[TT]) -> ~[~[TT]] {\n  * foreign interop.\n  */\n #[inline(always)]\n-pure fn as_buf<T,U>(s: &[T], /* NB---this CANNOT be const, see below */\n-                    f: fn(*T, uint) -> U) -> U {\n+pure fn as_imm_buf<T,U>(s: &[T], /* NB---this CANNOT be const, see below */\n+                        f: fn(*T, uint) -> U) -> U {\n \n-    // NB---People keep changing the type of s to `&[const T]`.  This is\n+    // NB---Do not change the type of s to `&[const T]`.  This is\n     // unsound.  The reason is that we are going to create immutable pointers\n     // into `s` and pass them to `f()`, but in fact they are potentially\n     // pointing at *mutable memory*.  Use `as_const_buf` or `as_mut_buf`\n@@ -1448,7 +1447,7 @@ pure fn as_buf<T,U>(s: &[T], /* NB---this CANNOT be const, see below */\n     }\n }\n \n-/// Similar to `as_buf` but passing a `*const T`\n+/// Similar to `as_imm_buf` but passing a `*const T`\n #[inline(always)]\n pure fn as_const_buf<T,U>(s: &[const T],\n                           f: fn(*const T, uint) -> U) -> U {\n@@ -1461,7 +1460,7 @@ pure fn as_const_buf<T,U>(s: &[const T],\n     }\n }\n \n-/// Similar to `as_buf` but passing a `*mut T`\n+/// Similar to `as_imm_buf` but passing a `*mut T`\n #[inline(always)]\n pure fn as_mut_buf<T,U>(s: &[mut T],\n                         f: fn(*mut T, uint) -> U) -> U {"}, {"sha": "a587ad5a4cc7a5c6a5f8eb508733a0545f6af51c", "filename": "src/libstd/par.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -39,7 +39,7 @@ fn map_slices<A: Copy Send, B: Copy Send>(\n         log(info, ~\"spawning tasks\");\n         while base < len {\n             let end = uint::min(len, base + items_per_task);\n-            do vec::as_buf(xs) |p, _len| {\n+            do vec::as_imm_buf(xs) |p, _len| {\n                 let f = f();\n                 let f = do future_spawn() |move f, copy base| {\n                     unsafe {"}, {"sha": "15c1c160ed13631c41884b35a0e08bd5779ac929", "filename": "src/libstd/set.rs", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c43426e35ba89fe52cd48b70d240f5014937f71f/src%2Flibstd%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43426e35ba89fe52cd48b70d240f5014937f71f/src%2Flibstd%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fset.rs?ref=c43426e35ba89fe52cd48b70d240f5014937f71f", "patch": "@@ -1,62 +0,0 @@\n-import dvec::dvec;\n-import map::{hashfn, eqfn, hashmap};\n-\n-struct set<K: copy> {\n-    mut implementation: option<set_implementation<K>>\n-}\n-\n-struct list_set<K> {\n-    hasher: hashfn<K>;\n-    eqer: eqfn<K>;\n-    elements: ~[K];\n-}\n-\n-enum set_implementation<K: copy> {\n-    impl_with_list(list_set<K>),\n-    impl_with_map(hashmap<K, ()>)\n-}\n-\n-const threshold: uint = 25; // completely arbitrary.\n-\n-impl<K> &list_set {\n-    pure fn contains(element: &K) {\n-        for self.elements.each |existing_element| {\n-            if self.eqer(element, existing_element) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    pure fn convert_to_map() -> hashmap<K, ()> {\n-        ...\n-    }\n-}\n-\n-impl<K: copy> set<K> {\n-    fn add(+element: K) -> bool {\n-        let mut set_impl = option::swap_unwrap(&mut self.implementation);\n-        let contained_before = match set_impl {\n-          impl_with_list(ref mut list_set) => {\n-            if list_set.elements.len() >= threshold {\n-                // convert to a map\n-                self.implementation = some(list_set.convert_to_map());\n-                return self.add(move element);\n-            }\n-\n-            if list_set.contains(&element) {\n-                false\n-            } else {\n-                vec::push(list_set.elements, element);\n-                true\n-            }\n-          }\n-\n-          impl_with_map(ref map) => {\n-            let contained_before = map.insert(element, ());\n-          }\n-        }\n-        self.implementation = some(move set_impl);\n-        return true;\n-    }\n-}\n\\ No newline at end of file"}, {"sha": "7ce35c66c0bc72929356e6c4c29fbe555543240a", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -825,7 +825,7 @@ unsafe fn ip4_name(src: &sockaddr_in) -> ~str {\n     // ipv4 addr max size: 15 + 1 trailing null byte\n     let dst: ~[u8] = ~[0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n                      0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8];\n-    do vec::as_buf(dst) |dst_buf, size| {\n+    do vec::as_imm_buf(dst) |dst_buf, size| {\n         rustrt::rust_uv_ip4_name(to_unsafe_ptr(src),\n                                  dst_buf, size as libc::size_t);\n         // seems that checking the result of uv_ip4_name\n@@ -845,7 +845,7 @@ unsafe fn ip6_name(src: &sockaddr_in6) -> ~str {\n                        0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n                        0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n                        0u8,0u8,0u8,0u8,0u8,0u8];\n-    do vec::as_buf(dst) |dst_buf, size| {\n+    do vec::as_imm_buf(dst) |dst_buf, size| {\n         let src_unsafe_ptr = to_unsafe_ptr(src);\n         log(debug, fmt!(\"val of src *sockaddr_in6: %? sockaddr_in6: %?\",\n                         src_unsafe_ptr, src));"}, {"sha": "1855fec90aa73264e8b115ddfbe3d36e0bba3dfe", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -679,7 +679,7 @@ fn Call(cx: block, Fn: ValueRef, Args: &[ValueRef]) -> ValueRef {\n                val_str(cx.ccx().tn, Fn),\n                Args.map(|arg| val_str(cx.ccx().tn, arg)));\n \n-        do vec::as_buf(Args) |ptr, len| {\n+        do vec::as_imm_buf(Args) |ptr, len| {\n             llvm::LLVMBuildCall(B(cx), Fn, ptr, len as c_uint, noname())\n         }\n     }"}, {"sha": "b0ac8d920bc85eb39fc680f32a0b6af58ac618b6", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -1057,13 +1057,13 @@ fn C_zero_byte_arr(size: uint) -> ValueRef unsafe {\n }\n \n fn C_struct(elts: &[ValueRef]) -> ValueRef {\n-    do vec::as_buf(elts) |ptr, len| {\n+    do vec::as_imm_buf(elts) |ptr, len| {\n         llvm::LLVMConstStruct(ptr, len as c_uint, False)\n     }\n }\n \n fn C_named_struct(T: TypeRef, elts: &[ValueRef]) -> ValueRef {\n-    do vec::as_buf(elts) |ptr, len| {\n+    do vec::as_imm_buf(elts) |ptr, len| {\n         llvm::LLVMConstNamedStruct(T, ptr, len as c_uint)\n     }\n }"}, {"sha": "f32fd81775c2a37428428190eed8456fd17ff9c2", "filename": "src/rustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -60,7 +60,7 @@ fn const_deref(cx: @crate_ctxt, v: ValueRef) -> ValueRef {\n }\n \n fn const_get_elt(cx: @crate_ctxt, v: ValueRef, us: &[c_uint]) -> ValueRef {\n-    let r = do vec::as_buf(us) |p, len| {\n+    let r = do vec::as_imm_buf(us) |p, len| {\n         llvm::LLVMConstExtractValue(v, p, len as c_uint)\n     };\n "}, {"sha": "b97fa54588c669b4accede9adcb29028ae44e17c", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6b66ecd33c849b2d42c5188b71b61161227808/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=2f6b66ecd33c849b2d42c5188b71b61161227808", "patch": "@@ -76,7 +76,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     fn struct_tys(ty: TypeRef) -> ~[TypeRef] {\n         let n = llvm::LLVMCountStructElementTypes(ty);\n         let elts = vec::from_elem(n as uint, ptr::null());\n-        do vec::as_buf(elts) |buf, _len| {\n+        do vec::as_imm_buf(elts) |buf, _len| {\n             llvm::LLVMGetStructElementTypes(ty, buf);\n         }\n         return elts;"}]}