{"sha": "4626184cafa827e13cc7a71b183a704ee0ec5930", "node_id": "C_kwDOAAsO6NoAKDQ2MjYxODRjYWZhODI3ZTEzY2M3YTcxYjE4M2E3MDRlZTBlYzU5MzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-21T01:38:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-21T01:38:55Z"}, "message": "Auto merge of #89998 - camelid:box-default, r=jyn514\n\nrustdoc: Box some fields of `GenericParamDefKind` to reduce size\n\nThis change shrinks `GenericParamDef` from 120 to 56 bytes. `GenericParamDef` is\nused a lot, so the extra indirection should hopefully be worth the size savings.\n\nr? `@ghost`", "tree": {"sha": "83785939c69d0ac5b7da94fc237190cae8407f6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83785939c69d0ac5b7da94fc237190cae8407f6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4626184cafa827e13cc7a71b183a704ee0ec5930", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4626184cafa827e13cc7a71b183a704ee0ec5930", "html_url": "https://github.com/rust-lang/rust/commit/4626184cafa827e13cc7a71b183a704ee0ec5930", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4626184cafa827e13cc7a71b183a704ee0ec5930/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efd0483949496b067cd5f7569d1b28cd3d5d3c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd0483949496b067cd5f7569d1b28cd3d5d3c72", "html_url": "https://github.com/rust-lang/rust/commit/efd0483949496b067cd5f7569d1b28cd3d5d3c72"}, {"sha": "90986897c597d76d86673de6e6d17c3d7e026df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/90986897c597d76d86673de6e6d17c3d7e026df5", "html_url": "https://github.com/rust-lang/rust/commit/90986897c597d76d86673de6e6d17c3d7e026df5"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "075efd29b5969839251e8f3cf70a4a109c730f69", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4626184cafa827e13cc7a71b183a704ee0ec5930/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4626184cafa827e13cc7a71b183a704ee0ec5930/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4626184cafa827e13cc7a71b183a704ee0ec5930", "patch": "@@ -421,7 +421,7 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                     GenericParamDefKind::Type {\n                         did: self.def_id,\n                         bounds: vec![], // These are filled in from the where-clauses.\n-                        default,\n+                        default: default.map(Box::new),\n                         synthetic,\n                     },\n                 )\n@@ -430,9 +430,9 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                 self.name,\n                 GenericParamDefKind::Const {\n                     did: self.def_id,\n-                    ty: cx.tcx.type_of(self.def_id).clean(cx),\n+                    ty: Box::new(cx.tcx.type_of(self.def_id).clean(cx)),\n                     default: match has_default {\n-                        true => Some(cx.tcx.const_param_default(self.def_id).to_string()),\n+                        true => Some(Box::new(cx.tcx.const_param_default(self.def_id).to_string())),\n                         false => None,\n                     },\n                 },\n@@ -462,18 +462,18 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n                 GenericParamDefKind::Type {\n                     did: cx.tcx.hir().local_def_id(self.hir_id).to_def_id(),\n                     bounds: self.bounds.clean(cx),\n-                    default: default.clean(cx),\n+                    default: default.clean(cx).map(Box::new),\n                     synthetic,\n                 },\n             ),\n             hir::GenericParamKind::Const { ref ty, default } => (\n                 self.name.ident().name,\n                 GenericParamDefKind::Const {\n                     did: cx.tcx.hir().local_def_id(self.hir_id).to_def_id(),\n-                    ty: ty.clean(cx),\n+                    ty: Box::new(ty.clean(cx)),\n                     default: default.map(|ct| {\n                         let def_id = cx.tcx.hir().local_def_id(ct.hir_id);\n-                        ty::Const::from_anon_const(cx.tcx, def_id).to_string()\n+                        Box::new(ty::Const::from_anon_const(cx.tcx, def_id).to_string())\n                     }),\n                 },\n             ),"}, {"sha": "d25e166629fa261ef78b59c26f4c178f442c5991", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4626184cafa827e13cc7a71b183a704ee0ec5930/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4626184cafa827e13cc7a71b183a704ee0ec5930/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=4626184cafa827e13cc7a71b183a704ee0ec5930", "patch": "@@ -1219,13 +1219,13 @@ crate enum GenericParamDefKind {\n     Type {\n         did: DefId,\n         bounds: Vec<GenericBound>,\n-        default: Option<Type>,\n+        default: Option<Box<Type>>,\n         synthetic: Option<hir::SyntheticTyParamKind>,\n     },\n     Const {\n         did: DefId,\n-        ty: Type,\n-        default: Option<String>,\n+        ty: Box<Type>,\n+        default: Option<Box<String>>,\n     },\n }\n \n@@ -1239,8 +1239,8 @@ impl GenericParamDefKind {\n     // any embedded types, but `get_type` seems to be the wrong name for that.\n     crate fn get_type(&self) -> Option<Type> {\n         match self {\n-            GenericParamDefKind::Type { default, .. } => default.clone(),\n-            GenericParamDefKind::Const { ty, .. } => Some(ty.clone()),\n+            GenericParamDefKind::Type { default, .. } => default.as_deref().cloned(),\n+            GenericParamDefKind::Const { ty, .. } => Some((&**ty).clone()),\n             GenericParamDefKind::Lifetime { .. } => None,\n         }\n     }\n@@ -1252,6 +1252,10 @@ crate struct GenericParamDef {\n     crate kind: GenericParamDefKind,\n }\n \n+// `GenericParamDef` is used in many places. Make sure it doesn't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+rustc_data_structures::static_assert_size!(GenericParamDef, 56);\n+\n impl GenericParamDef {\n     crate fn is_synthetic_type_param(&self) -> bool {\n         match self.kind {"}, {"sha": "924275dc1858885bd7e7a2cb6d6ef148d101479d", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4626184cafa827e13cc7a71b183a704ee0ec5930/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4626184cafa827e13cc7a71b183a704ee0ec5930/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=4626184cafa827e13cc7a71b183a704ee0ec5930", "patch": "@@ -330,10 +330,10 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n             },\n             Type { did: _, bounds, default, synthetic: _ } => GenericParamDefKind::Type {\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-                default: default.map(|x| x.into_tcx(tcx)),\n+                default: default.map(|x| (*x).into_tcx(tcx)),\n             },\n             Const { did: _, ty, default } => {\n-                GenericParamDefKind::Const { ty: ty.into_tcx(tcx), default }\n+                GenericParamDefKind::Const { ty: (*ty).into_tcx(tcx), default: default.map(|x| *x) }\n             }\n         }\n     }"}]}