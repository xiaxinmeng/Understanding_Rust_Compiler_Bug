{"sha": "c6b65ac7480b25be5d7157e0a13b3677c5538104", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YjY1YWM3NDgwYjI1YmU1ZDcxNTdlMGExM2IzNjc3YzU1MzgxMDQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-11T20:46:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-25T20:50:47Z"}, "message": "process trait/impl items directly from the visitor callback\n\nThe current setup processes impl/trait items while visiting\nthe impl/trait. This means we basically have this setup:\n\n    <Lots> -> TypeckItemBody(Impl) -> Tables(ImplItem{0,1,2,3})\n\nBut this was largely an artifact of the older code. By moving the\nprocessing of items into method dedicated for their use, we produce this\nsetup:\n\n    <Little> -> TypeckItemBody(ImplItem0) -> Tables(ImplItem0)\n    ...\n    <Little> -> TypeckItemBody(ImplItem3) -> Tables(ImplItem3)", "tree": {"sha": "d0ce30a8d681615e168209c030059e7ce3768e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ce30a8d681615e168209c030059e7ce3768e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6b65ac7480b25be5d7157e0a13b3677c5538104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b65ac7480b25be5d7157e0a13b3677c5538104", "html_url": "https://github.com/rust-lang/rust/commit/c6b65ac7480b25be5d7157e0a13b3677c5538104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6b65ac7480b25be5d7157e0a13b3677c5538104/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc57e40ce703cb70a39249f5cfb661020a1549b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc57e40ce703cb70a39249f5cfb661020a1549b6", "html_url": "https://github.com/rust-lang/rust/commit/fc57e40ce703cb70a39249f5cfb661020a1549b6"}], "stats": {"total": 113, "additions": 58, "deletions": 55}, "files": [{"sha": "02f5d77f249ceac091fb0df79de580b3ca0937e6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 33, "deletions": 55, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c6b65ac7480b25be5d7157e0a13b3677c5538104/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b65ac7480b25be5d7157e0a13b3677c5538104/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c6b65ac7480b25be5d7157e0a13b3677c5538104", "patch": "@@ -570,16 +570,43 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemBodiesVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, i: &'tcx hir::Item) {\n-        check_item_body(self.ccx, i);\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+        match item.node {\n+            hir::ItemFn(ref decl, .., body_id) => {\n+                check_bare_fn(self.ccx, &decl, body_id, item.id, item.span);\n+            }\n+            _ => { }\n+        }\n     }\n \n-    fn visit_trait_item(&mut self, _item: &'tcx hir::TraitItem) {\n-        // done as part of `visit_item` above\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+        match trait_item.node {\n+            hir::TraitItemKind::Const(_, Some(expr)) => {\n+                check_const(self.ccx, expr, trait_item.id)\n+            }\n+            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body_id)) => {\n+                check_bare_fn(self.ccx, &sig.decl, body_id, trait_item.id, trait_item.span);\n+            }\n+            hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_)) |\n+            hir::TraitItemKind::Const(_, None) |\n+            hir::TraitItemKind::Type(..) => {\n+                // Nothing to do.\n+            }\n+        }\n     }\n \n-    fn visit_impl_item(&mut self, _item: &'tcx hir::ImplItem) {\n-        // done as part of `visit_item` above\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+        match impl_item.node {\n+            hir::ImplItemKind::Const(_, expr) => {\n+                check_const(self.ccx, expr, impl_item.id)\n+            }\n+            hir::ImplItemKind::Method(ref sig, body_id) => {\n+                check_bare_fn(self.ccx, &sig.decl, body_id, impl_item.id, impl_item.span);\n+            }\n+            hir::ImplItemKind::Type(_) => {\n+                // Nothing to do here.\n+            }\n+        }\n     }\n }\n \n@@ -897,55 +924,6 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n     }\n }\n \n-pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n-    debug!(\"check_item_body(it.id={}, it.name={})\",\n-           it.id,\n-           ccx.tcx.item_path_str(ccx.tcx.map.local_def_id(it.id)));\n-    let _indenter = indenter();\n-    match it.node {\n-      hir::ItemFn(ref decl, .., body_id) => {\n-        check_bare_fn(ccx, &decl, body_id, it.id, it.span);\n-      }\n-      hir::ItemImpl(.., ref impl_item_refs) => {\n-        debug!(\"ItemImpl {} with id {}\", it.name, it.id);\n-\n-        for impl_item_ref in impl_item_refs {\n-            let impl_item = ccx.tcx.map.impl_item(impl_item_ref.id);\n-            match impl_item.node {\n-                hir::ImplItemKind::Const(_, expr) => {\n-                    check_const(ccx, expr, impl_item.id)\n-                }\n-                hir::ImplItemKind::Method(ref sig, body_id) => {\n-                    check_bare_fn(ccx, &sig.decl, body_id, impl_item.id, impl_item.span);\n-                }\n-                hir::ImplItemKind::Type(_) => {\n-                    // Nothing to do here.\n-                }\n-            }\n-        }\n-      }\n-      hir::ItemTrait(.., ref trait_item_refs) => {\n-        for trait_item_ref in trait_item_refs {\n-            let trait_item = ccx.tcx.map.trait_item(trait_item_ref.id);\n-            match trait_item.node {\n-                hir::TraitItemKind::Const(_, Some(expr)) => {\n-                    check_const(ccx, expr, trait_item.id)\n-                }\n-                hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body_id)) => {\n-                    check_bare_fn(ccx, &sig.decl, body_id, trait_item.id, trait_item.span);\n-                }\n-                hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_)) |\n-                hir::TraitItemKind::Const(_, None) |\n-                hir::TraitItemKind::Type(..) => {\n-                    // Nothing to do.\n-                }\n-            }\n-        }\n-      }\n-      _ => {/* nothing to do */ }\n-    }\n-}\n-\n fn check_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     def_id: DefId,\n                                     item: &hir::Item) {"}, {"sha": "06fea1a8f296912f322809198a974d825d2fb7bc", "filename": "src/test/compile-fail/dep_graph_crosscontaminate_tables.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c6b65ac7480b25be5d7157e0a13b3677c5538104/src%2Ftest%2Fcompile-fail%2Fdep_graph_crosscontaminate_tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b65ac7480b25be5d7157e0a13b3677c5538104/src%2Ftest%2Fcompile-fail%2Fdep_graph_crosscontaminate_tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep_graph_crosscontaminate_tables.rs?ref=c6b65ac7480b25be5d7157e0a13b3677c5538104", "patch": "@@ -0,0 +1,25 @@\n+#![feature(rustc_attrs)]\n+\n+struct Foo {\n+    x: u8\n+}\n+\n+impl Foo {\n+    // Changing the item `new`...\n+    #[rustc_if_this_changed(HirBody)]\n+    fn new() -> Foo {\n+        Foo { x: 0 }\n+    }\n+\n+    // ...should not cause us to recompute the tables for `with`!\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR no path\n+    fn with(x: u8) -> Foo {\n+        Foo { x: x }\n+    }\n+}\n+\n+fn main() {\n+    let f = Foo::new();\n+    let g = Foo::with(22);\n+    assert_eq!(f.x, g.x - 22);\n+}"}]}