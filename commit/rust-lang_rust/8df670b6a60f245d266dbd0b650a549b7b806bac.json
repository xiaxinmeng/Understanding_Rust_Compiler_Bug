{"sha": "8df670b6a60f245d266dbd0b650a549b7b806bac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZjY3MGI2YTYwZjI0NWQyNjZkYmQwYjY1MGE1NDliN2I4MDZiYWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-21T23:03:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-21T23:03:57Z"}, "message": "Auto merge of #43540 - petrochenkov:pathrelax, r=nikomatsakis\n\nsyntax: Relax path grammar\n\nTLDR: Accept the disambiguator `::` in \"type\" paths (`Type::<Args>`), accept the disambiguator `::` before parenthesized generic arguments (`Fn::(Args)`).\n\nThe \"turbofish\" disambiguator `::<>` in expression paths is a necessary evil required for path parsing to be both simple and to give reasonable results.\nSince paths in expressions usually refer to values (but not necessarily, e.g. `Struct::<u8> { field: 0 }` is disambiguated, but refers to a type), people often consider `::<>` to be inherent to *values*, and not *expressions* and want to write disambiguated paths for values even in contexts where disambiguation is not strictly necessary, for example when a path is passed to a macro `m!(Vec::<i32>::new)`.\nThe problem is that currently, if the disambiguator is not *required*, then it's *prohibited*. This results in confusion - see https://github.com/rust-lang/rust/issues/41740, https://internals.rust-lang.org/t/macro-path-uses-novel-syntax/5561.\n\nThis PR makes the disambiguator *optional* instead of prohibited in contexts where it's not strictly required, so people can pass paths to macros in whatever form they consider natural (e.g. disambiguated form for value paths).\nThis PR also accepts the disambiguator in paths with parenthesized arguments (`Fn::(Args)`) for consistency and to simplify testing of stuff like https://github.com/rust-lang/rust/pull/41856#issuecomment-301219194.\n\nCloses https://github.com/rust-lang/rust/issues/41740\n\ncc @rust-lang/lang\nr? @nikomatsakis", "tree": {"sha": "e9310dc78c8bea36acc9ee43bb7d48eda654895d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9310dc78c8bea36acc9ee43bb7d48eda654895d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8df670b6a60f245d266dbd0b650a549b7b806bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8df670b6a60f245d266dbd0b650a549b7b806bac", "html_url": "https://github.com/rust-lang/rust/commit/8df670b6a60f245d266dbd0b650a549b7b806bac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8df670b6a60f245d266dbd0b650a549b7b806bac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "html_url": "https://github.com/rust-lang/rust/commit/4fdb4bedfd2395e1e1ebb923b10165b850e6064c"}, {"sha": "804459bdca28010137990220e617a6b6cbab18d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/804459bdca28010137990220e617a6b6cbab18d0", "html_url": "https://github.com/rust-lang/rust/commit/804459bdca28010137990220e617a6b6cbab18d0"}], "stats": {"total": 93, "additions": 49, "deletions": 44}, "files": [{"sha": "405d06dafbfdaa6383427dc57c8782536caf3789", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=8df670b6a60f245d266dbd0b650a549b7b806bac", "patch": "@@ -599,9 +599,7 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n                 panic!(FatalError)\n             }\n         },\n-        \"path\" => {\n-            token::NtPath(panictry!(p.parse_path(PathStyle::Type)))\n-        },\n+        \"path\" => token::NtPath(panictry!(p.parse_path_common(PathStyle::Type, false))),\n         \"meta\" => token::NtMeta(panictry!(p.parse_meta_item())),\n         \"vis\" => token::NtVis(panictry!(p.parse_visibility(true))),\n         // this is not supposed to happen, since it has been checked"}, {"sha": "84e3d8ddf702416906a6bfdf3c0f0b890481fbaf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8df670b6a60f245d266dbd0b650a549b7b806bac", "patch": "@@ -84,7 +84,7 @@ pub enum PathStyle {\n     Expr,\n     /// In other contexts, notably in types, no ambiguity exists and paths can be written\n     /// without the disambiguator, e.g. `x<y>` - unambiguously a path.\n-    /// Paths with disambiguators are rejected for now, but may be allowed in the future.\n+    /// Paths with disambiguators are still accepted, `x::<Y>` - unambiguously a path too.\n     Type,\n     /// A path with generic arguments disallowed, e.g. `foo::bar::Baz`, used in imports,\n     /// visibilities or attributes.\n@@ -1755,7 +1755,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::ModSep)?;\n \n         let qself = QSelf { ty, position: path.segments.len() };\n-        self.parse_path_segments(&mut path.segments, style)?;\n+        self.parse_path_segments(&mut path.segments, style, true)?;\n \n         Ok((qself, ast::Path { segments: path.segments, span: lo.to(self.prev_span) }))\n     }\n@@ -1770,16 +1770,20 @@ impl<'a> Parser<'a> {\n     /// `a::b::C::<D>` (with disambiguator)\n     /// `Fn(Args)` (without disambiguator)\n     /// `Fn::(Args)` (with disambiguator)\n-    pub fn parse_path(&mut self, style: PathStyle) -> PResult<'a, ast::Path>\n-    {\n+    pub fn parse_path(&mut self, style: PathStyle) -> PResult<'a, ast::Path> {\n+        self.parse_path_common(style, true)\n+    }\n+\n+    pub fn parse_path_common(&mut self, style: PathStyle, enable_warning: bool)\n+                             -> PResult<'a, ast::Path> {\n         maybe_whole!(self, NtPath, |x| x);\n \n         let lo = self.meta_var_span.unwrap_or(self.span);\n         let mut segments = Vec::new();\n         if self.eat(&token::ModSep) {\n             segments.push(PathSegment::crate_root(lo));\n         }\n-        self.parse_path_segments(&mut segments, style)?;\n+        self.parse_path_segments(&mut segments, style, enable_warning)?;\n \n         Ok(ast::Path { segments, span: lo.to(self.prev_span) })\n     }\n@@ -1804,18 +1808,19 @@ impl<'a> Parser<'a> {\n         self.parse_path(style)\n     }\n \n-    fn parse_path_segments(&mut self, segments: &mut Vec<PathSegment>, style: PathStyle)\n-                           -> PResult<'a, ()> {\n+    fn parse_path_segments(&mut self, segments: &mut Vec<PathSegment>, style: PathStyle,\n+                           enable_warning: bool) -> PResult<'a, ()> {\n         loop {\n-            segments.push(self.parse_path_segment(style)?);\n+            segments.push(self.parse_path_segment(style, enable_warning)?);\n \n             if self.is_import_coupler() || !self.eat(&token::ModSep) {\n                 return Ok(());\n             }\n         }\n     }\n \n-    fn parse_path_segment(&mut self, style: PathStyle) -> PResult<'a, PathSegment> {\n+    fn parse_path_segment(&mut self, style: PathStyle, enable_warning: bool)\n+                          -> PResult<'a, PathSegment> {\n         let ident_span = self.span;\n         let ident = self.parse_path_segment_ident()?;\n \n@@ -1835,17 +1840,9 @@ impl<'a> Parser<'a> {\n                                       && self.look_ahead(1, |t| is_args_start(t)) {\n             // Generic arguments are found - `<`, `(`, `::<` or `::(`.\n             let lo = self.span;\n-            if self.eat(&token::ModSep) {\n-                // These errors are not strictly necessary and may be removed in the future.\n-                if style == PathStyle::Type {\n-                    let mut err = self.diagnostic().struct_span_err(self.prev_span,\n-                        \"unnecessary path disambiguator\");\n-                    err.span_label(self.prev_span, \"try removing `::`\");\n-                    err.emit();\n-                } else if self.token == token::OpenDelim(token::Paren) {\n-                    self.diagnostic().span_err(self.prev_span,\n-                        \"`::` is not supported before parenthesized generic arguments\")\n-                }\n+            if self.eat(&token::ModSep) && style == PathStyle::Type && enable_warning {\n+                self.diagnostic().struct_span_warn(self.prev_span, \"unnecessary path disambiguator\")\n+                                 .span_label(self.prev_span, \"try removing `::`\").emit();\n             }\n \n             let parameters = if self.eat_lt() {\n@@ -2382,7 +2379,7 @@ impl<'a> Parser<'a> {\n \n     // Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n-        let segment = self.parse_path_segment(PathStyle::Expr)?;\n+        let segment = self.parse_path_segment(PathStyle::Expr, true)?;\n         Ok(match self.token {\n             token::OpenDelim(token::Paren) => {\n                 // Method call `expr.f()`"}, {"sha": "ffbd0c0c22a7c07d2b7513e12a7fdcb18444222a", "filename": "src/test/compile-fail/issue-32995.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs?ref=8df670b6a60f245d266dbd0b650a549b7b806bac", "patch": "@@ -19,15 +19,11 @@ fn main() {\n     //~^ ERROR parenthesized parameters may only be used with a trait\n     //~| WARN previously accepted\n \n-    macro_rules! pathexpr {\n-        ($p:path) => { $p }\n-    }\n-\n-    let p = pathexpr!(::std::str()::from_utf8)(b\"foo\").unwrap();\n+    let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n     //~^ ERROR parenthesized parameters may only be used with a trait\n     //~| WARN previously accepted\n \n-    let p = pathexpr!(::std::str::from_utf8())(b\"foo\").unwrap();\n+    let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n     //~^ ERROR parenthesized parameters may only be used with a trait\n     //~| WARN previously accepted\n "}, {"sha": "3afbfa61984b566456317591534df18c0a5571ef", "filename": "src/test/compile-fail/issue-36116.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs?ref=8df670b6a60f245d266dbd0b650a549b7b806bac", "patch": "@@ -8,16 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Unnecessary path disambiguator is ok\n+\n+#![feature(rustc_attrs)]\n+#![allow(unused)]\n+\n+macro_rules! m {\n+    ($p: path) => {\n+        let _ = $p(0);\n+        let _: $p;\n+    }\n+}\n+\n struct Foo<T> {\n     _a: T,\n }\n \n-fn main() {\n-    let f = Some(Foo { _a: 42 }).map(|a| a as Foo::<i32>);\n-    //~^ ERROR unnecessary path disambiguator\n-    //~| NOTE try removing `::`\n+struct S<T>(T);\n+\n+fn f() {\n+    let f = Some(Foo { _a: 42 }).map(|a| a as Foo::<i32>); //~ WARN unnecessary path disambiguator\n+    let g: Foo::<i32> = Foo { _a: 42 }; //~ WARN unnecessary path disambiguator\n \n-    let g: Foo::<i32> = Foo { _a: 42 };\n-    //~^ ERROR unnecessary path disambiguator\n-    //~| NOTE try removing `::`\n+    m!(S::<u8>); // OK, no warning\n }\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "42fffe546c20c171bb57f56890008de761184328", "filename": "src/test/compile-fail/unboxed-closure-sugar-used-on-struct-3.rs", "status": "renamed", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-3.rs?ref=8df670b6a60f245d266dbd0b650a549b7b806bac", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n-\n-// Test that parentheses form doesn't work in expression paths.\n+// Test that parentheses form parses in expression paths.\n \n struct Bar<A,R> {\n     f: A, r: R\n@@ -21,10 +19,10 @@ impl<A,B> Bar<A,B> {\n }\n \n fn bar() {\n-    let b = Box::Bar::<isize,usize>::new(); // OK\n+    let b = Bar::<isize, usize>::new(); // OK\n \n-    let b = Box::Bar::()::new();\n-    //~^ ERROR `::` is not supported before parenthesized generic arguments\n+    let b = Bar::(isize, usize)::new(); // OK too (for the parser)\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n }\n \n-fn main() { }\n+fn main() {}", "previous_filename": "src/test/parse-fail/unboxed-closure-sugar-used-on-struct-3.rs"}, {"sha": "cb018ff1bfa398f5272ca7e87c34add1747157a7", "filename": "src/test/parse-fail/type-parameters-in-field-exprs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df670b6a60f245d266dbd0b650a549b7b806bac/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs?ref=8df670b6a60f245d266dbd0b650a549b7b806bac", "patch": "@@ -24,4 +24,6 @@ fn main() {\n     //~^ ERROR field expressions may not have generic arguments\n     f.x::<>;\n     //~^ ERROR field expressions may not have generic arguments\n+    f.x::();\n+    //~^ ERROR field expressions may not have generic arguments\n }"}]}