{"sha": "b07968dda47f338a61993b7088c24362f76fdad0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNzk2OGRkYTQ3ZjMzOGE2MTk5M2I3MDg4YzI0MzYyZjc2ZmRhZDA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-24T19:08:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-24T19:09:06Z"}, "message": "rt: Print out fields of objects when logging them", "tree": {"sha": "b053294f26b3ef3e09b9fd6fc7fda6603c84dc2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b053294f26b3ef3e09b9fd6fc7fda6603c84dc2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b07968dda47f338a61993b7088c24362f76fdad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b07968dda47f338a61993b7088c24362f76fdad0", "html_url": "https://github.com/rust-lang/rust/commit/b07968dda47f338a61993b7088c24362f76fdad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b07968dda47f338a61993b7088c24362f76fdad0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65357eeecca281f7773fd98e6dc0d00fd4f97759", "url": "https://api.github.com/repos/rust-lang/rust/commits/65357eeecca281f7773fd98e6dc0d00fd4f97759", "html_url": "https://github.com/rust-lang/rust/commit/65357eeecca281f7773fd98e6dc0d00fd4f97759"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "3e1b64b3a2a3fe71e05ea58caf43d61f1802ba29", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07968dda47f338a61993b7088c24362f76fdad0/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b07968dda47f338a61993b7088c24362f76fdad0/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=b07968dda47f338a61993b7088c24362f76fdad0", "patch": "@@ -435,6 +435,12 @@ log::walk_vec(bool align, bool is_pod, const std::pair<ptr,ptr> &data) {\n     out << \"]\";\n }\n \n+void\n+log::walk_obj(bool align) {\n+    out << \"obj\";\n+    data<log,ptr>::walk_obj_contents(align, dp);\n+}\n+\n void\n log::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n                   const std::pair<const uint8_t *,const uint8_t *>"}, {"sha": "faab7c56a54810b10269680a139595dbbd1b4a7e", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b07968dda47f338a61993b7088c24362f76fdad0/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/b07968dda47f338a61993b7088c24362f76fdad0/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=b07968dda47f338a61993b7088c24362f76fdad0", "patch": "@@ -708,6 +708,7 @@ template<typename T,typename U>\n class data : public ctxt< data<T,U> > {\n protected:\n     void walk_box_contents(bool align);\n+    void walk_obj_contents(bool align, ptr &dp);\n     void walk_variant(bool align, tag_info &tinfo, uint32_t variant);\n \n     static std::pair<uint8_t *,uint8_t *> get_evec_data_range(ptr dp);\n@@ -749,8 +750,9 @@ class data : public ctxt< data<T,U> > {\n \n     void walk_obj(bool align) {\n         if (align) dp = align_to(dp, sizeof(void *));\n+        U next_dp = dp + sizeof(void *) * 2;\n         static_cast<T *>(this)->walk_obj(align);\n-        dp += sizeof(void *) * 2;\n+        dp = next_dp;\n     }\n \n     void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n@@ -882,6 +884,23 @@ data<T,U>::walk_tag(bool align, tag_info &tinfo) {\n     dp = end_dp;\n }\n \n+template<typename T,typename U>\n+void\n+data<T,U>::walk_obj_contents(bool align, ptr &dp) {\n+    dp += sizeof(void *);   // Skip over the vtable.\n+\n+    uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n+    type_desc *subtydesc =\n+        *reinterpret_cast<type_desc **>(box_ptr + sizeof(void *));\n+    ptr obj_closure_dp(box_ptr + sizeof(void *));\n+\n+    arena arena;\n+    type_param *params = type_param::make(subtydesc, arena);\n+    T sub(*static_cast<T *>(this), subtydesc->shape, params,\n+          subtydesc->shape_tables, obj_closure_dp);\n+    sub.walk(true);\n+}\n+\n \n // Polymorphic logging, for convenience\n \n@@ -903,6 +922,14 @@ class log : public data<log,ptr> {\n                     other.dp),\n       out(other.out) {}\n \n+    log(log &other,\n+        const uint8_t *in_sp,\n+        const type_param *in_params,\n+        const rust_shape_tables *in_tables,\n+        ptr in_dp)\n+    : data<log,ptr>(other.task, in_sp, in_params, in_tables, in_dp),\n+      out(other.out) {}\n+\n     log(log &other, ptr in_dp)\n     : data<log,ptr>(other.task, other.sp, other.params, other.tables, in_dp),\n       out(other.out) {}\n@@ -928,7 +955,6 @@ class log : public data<log,ptr> {\n     }\n \n     void walk_fn(bool align) { out << \"fn\"; }\n-    void walk_obj(bool align) { out << \"obj\"; }\n     void walk_port(bool align) { out << \"port\"; }\n     void walk_chan(bool align) { out << \"chan\"; }\n     void walk_task(bool align) { out << \"task\"; }\n@@ -949,6 +975,7 @@ class log : public data<log,ptr> {\n \n     void walk_struct(bool align, const uint8_t *end_sp);\n     void walk_vec(bool align, bool is_pod, const std::pair<ptr,ptr> &data);\n+    void walk_obj(bool align);\n     void walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);"}]}