{"sha": "c56c5a861a83cd72ceda6590194506daa91fad33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NmM1YTg2MWE4M2NkNzJjZWRhNjU5MDE5NDUwNmRhYTkxZmFkMzM=", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2019-07-18T06:30:51Z"}, "committer": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2019-07-18T06:30:51Z"}, "message": "Self-referencial type renamed to recursive type.", "tree": {"sha": "c97c8c89b1e07be2135b5a76070d27847a7a8f0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c97c8c89b1e07be2135b5a76070d27847a7a8f0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c56c5a861a83cd72ceda6590194506daa91fad33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c56c5a861a83cd72ceda6590194506daa91fad33", "html_url": "https://github.com/rust-lang/rust/commit/c56c5a861a83cd72ceda6590194506daa91fad33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c56c5a861a83cd72ceda6590194506daa91fad33/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "387b6c3e782e61f979083ff960e6e18fcaa1fe2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/387b6c3e782e61f979083ff960e6e18fcaa1fe2c", "html_url": "https://github.com/rust-lang/rust/commit/387b6c3e782e61f979083ff960e6e18fcaa1fe2c"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "ededcf9f83ffe38cc12b7be3a34b2907bcb4b3dc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c56c5a861a83cd72ceda6590194506daa91fad33/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56c5a861a83cd72ceda6590194506daa91fad33/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c56c5a861a83cd72ceda6590194506daa91fad33", "patch": "@@ -1320,7 +1320,7 @@ fn check_opaque<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, substs: SubstsRef<'tcx>,\n             tcx.sess, span, E0720,\n             \"opaque type expands to a recursive type\",\n         );\n-        err.span_label(span, \"expands to self-referential type\");\n+        err.span_label(span, \"expands to a recursive type\");\n         if let ty::Opaque(..) = partially_expanded_type.sty {\n             err.note(\"type resolves to itself\");\n         } else {"}, {"sha": "69914b6a7910fc42ee9468fc3eee0b9c7cf72c9a", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c56c5a861a83cd72ceda6590194506daa91fad33/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c56c5a861a83cd72ceda6590194506daa91fad33/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=c56c5a861a83cd72ceda6590194506daa91fad33", "patch": "@@ -2,7 +2,7 @@ error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-async-impl-trait-type.rs:7:40\n    |\n LL | async fn recursive_async_function() -> () {\n-   |                                        ^^ expands to self-referential type\n+   |                                        ^^ expands to a recursive type\n    |\n    = note: expanded type is `std::future::GenFuture<[static generator@$DIR/recursive-async-impl-trait-type.rs:7:43: 9:2 {impl std::future::Future, ()}]>`\n "}, {"sha": "d10001e8a8e53429225f2d0e7ae64a69cc0ca0cd", "filename": "src/test/ui/impl-trait/issues/infinite-impl-trait-issue-38064.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c56c5a861a83cd72ceda6590194506daa91fad33/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c56c5a861a83cd72ceda6590194506daa91fad33/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr?ref=c56c5a861a83cd72ceda6590194506daa91fad33", "patch": "@@ -2,15 +2,15 @@ error[E0720]: opaque type expands to a recursive type\n   --> $DIR/infinite-impl-trait-issue-38064.rs:8:13\n    |\n LL | fn foo() -> impl Quux {\n-   |             ^^^^^^^^^ expands to self-referential type\n+   |             ^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `foo::Foo<bar::Bar<impl Quux>>`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/infinite-impl-trait-issue-38064.rs:14:13\n    |\n LL | fn bar() -> impl Quux {\n-   |             ^^^^^^^^^ expands to self-referential type\n+   |             ^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `bar::Bar<foo::Foo<impl Quux>>`\n "}, {"sha": "324607117dc50046f8d46ac54e825c0d4275777b", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c56c5a861a83cd72ceda6590194506daa91fad33/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c56c5a861a83cd72ceda6590194506daa91fad33/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr?ref=c56c5a861a83cd72ceda6590194506daa91fad33", "patch": "@@ -2,111 +2,111 @@ error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:6:22\n    |\n LL | fn option(i: i32) -> impl Sized {\n-   |                      ^^^^^^^^^^ expands to self-referential type\n+   |                      ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `std::option::Option<(impl Sized, i32)>`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:14:15\n    |\n LL | fn tuple() -> impl Sized {\n-   |               ^^^^^^^^^^ expands to self-referential type\n+   |               ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `(impl Sized,)`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:18:15\n    |\n LL | fn array() -> impl Sized {\n-   |               ^^^^^^^^^^ expands to self-referential type\n+   |               ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[impl Sized; 1]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:22:13\n    |\n LL | fn ptr() -> impl Sized {\n-   |             ^^^^^^^^^^ expands to self-referential type\n+   |             ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `*const impl Sized`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:26:16\n    |\n LL | fn fn_ptr() -> impl Sized {\n-   |                ^^^^^^^^^^ expands to self-referential type\n+   |                ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `fn() -> impl Sized`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:30:25\n    |\n LL | fn closure_capture() -> impl Sized {\n-   |                         ^^^^^^^^^^ expands to self-referential type\n+   |                         ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:32:5: 32:19 x:impl Sized]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:35:29\n    |\n LL | fn closure_ref_capture() -> impl Sized {\n-   |                             ^^^^^^^^^^ expands to self-referential type\n+   |                             ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:37:5: 37:20 x:impl Sized]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:40:21\n    |\n LL | fn closure_sig() -> impl Sized {\n-   |                     ^^^^^^^^^^ expands to self-referential type\n+   |                     ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:41:5: 41:21]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:44:23\n    |\n LL | fn generator_sig() -> impl Sized {\n-   |                       ^^^^^^^^^^ expands to self-referential type\n+   |                       ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:45:5: 45:23]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:48:27\n    |\n LL | fn generator_capture() -> impl Sized {\n-   |                           ^^^^^^^^^^ expands to self-referential type\n+   |                           ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[generator@$DIR/recursive-impl-trait-type.rs:50:5: 50:26 x:impl Sized {()}]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:53:26\n    |\n LL | fn substs_change<T>() -> impl Sized {\n-   |                          ^^^^^^^^^^ expands to self-referential type\n+   |                          ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `(impl Sized,)`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:57:24\n    |\n LL | fn generator_hold() -> impl Sized {\n-   |                        ^^^^^^^^^^ expands to self-referential type\n+   |                        ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[generator@$DIR/recursive-impl-trait-type.rs:58:5: 62:6 {impl Sized, ()}]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:69:26\n    |\n LL | fn mutual_recursion() -> impl Sync {\n-   |                          ^^^^^^^^^ expands to self-referential type\n+   |                          ^^^^^^^^^ expands to a recursive type\n    |\n    = note: type resolves to itself\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:73:28\n    |\n LL | fn mutual_recursion_b() -> impl Sized {\n-   |                            ^^^^^^^^^^ expands to self-referential type\n+   |                            ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: type resolves to itself\n "}]}