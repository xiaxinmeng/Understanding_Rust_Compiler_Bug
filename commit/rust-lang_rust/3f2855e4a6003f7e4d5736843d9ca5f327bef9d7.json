{"sha": "3f2855e4a6003f7e4d5736843d9ca5f327bef9d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMjg1NWU0YTYwMDNmN2U0ZDU3MzY4NDNkOWNhNWYzMjdiZWY5ZDc=", "commit": {"author": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-09-22T05:24:09Z"}, "committer": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-09-22T05:24:09Z"}, "message": "Infer consts consistently. Moved some logic into super_combined_consts,\nalso removed some duplicated logic from TypeRelation methods.", "tree": {"sha": "b740ca3e77e0dd2ced36a3e287eed5f303f269f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b740ca3e77e0dd2ced36a3e287eed5f303f269f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7", "html_url": "https://github.com/rust-lang/rust/commit/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "528379121ceb5fca5382b4337be7ac064890ec8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/528379121ceb5fca5382b4337be7ac064890ec8c", "html_url": "https://github.com/rust-lang/rust/commit/528379121ceb5fca5382b4337be7ac064890ec8c"}], "stats": {"total": 128, "additions": 42, "deletions": 86}, "files": [{"sha": "966c5810171af34535fbe00e289ae9486bf45b05", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=3f2855e4a6003f7e4d5736843d9ca5f327bef9d7", "patch": "@@ -30,6 +30,7 @@ use super::sub::Sub;\n use super::type_variable::TypeVariableValue;\n use super::unify_key::{ConstVarValue, ConstVariableValue};\n use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n+use super::unify_key::replace_if_possible;\n \n use crate::hir::def_id::DefId;\n use crate::mir::interpret::ConstValue;\n@@ -127,6 +128,12 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n     where\n         R: TypeRelation<'tcx>,\n     {\n+        debug!(\"{}.consts({:?}, {:?})\", relation.tag(), a, b);\n+        if a == b { return Ok(a); }\n+\n+        let a = replace_if_possible(self.const_unification_table.borrow_mut(), a);\n+        let b = replace_if_possible(self.const_unification_table.borrow_mut(), b);\n+\n         let a_is_expected = relation.a_is_expected();\n \n         match (a.val, b.val) {"}, {"sha": "6065387647fa758ae3a7f9b5c0e25245c0f29395", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=3f2855e4a6003f7e4d5736843d9ca5f327bef9d7", "patch": "@@ -1,14 +1,12 @@\n-use super::combine::{CombineFields, RelationDir, const_unification_error};\n+use super::combine::{CombineFields, RelationDir};\n use super::Subtype;\n \n use crate::hir::def_id::DefId;\n \n-use crate::ty::{self, Ty, TyCtxt, InferConst};\n+use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::TyVar;\n use crate::ty::subst::SubstsRef;\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use crate::mir::interpret::ConstValue;\n-use crate::infer::unify_key::replace_if_possible;\n \n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n pub struct Equate<'combine, 'infcx, 'tcx> {\n@@ -108,39 +106,7 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n-        if a == b { return Ok(a); }\n-\n-        let infcx = self.fields.infcx;\n-        let a = replace_if_possible(infcx.const_unification_table.borrow_mut(), a);\n-        let b = replace_if_possible(infcx.const_unification_table.borrow_mut(), b);\n-        let a_is_expected = self.a_is_expected();\n-\n-        match (a.val, b.val) {\n-            (ConstValue::Infer(InferConst::Var(a_vid)),\n-                ConstValue::Infer(InferConst::Var(b_vid))) => {\n-                infcx.const_unification_table\n-                    .borrow_mut()\n-                    .unify_var_var(a_vid, b_vid)\n-                    .map_err(|e| const_unification_error(a_is_expected, e))?;\n-                return Ok(a);\n-            }\n-\n-            (ConstValue::Infer(InferConst::Var(a_id)), _) => {\n-                self.fields.infcx.unify_const_variable(a_is_expected, a_id, b)?;\n-                return Ok(a);\n-            }\n-\n-            (_, ConstValue::Infer(InferConst::Var(b_id))) => {\n-                self.fields.infcx.unify_const_variable(!a_is_expected, b_id, a)?;\n-                return Ok(a);\n-            }\n-\n-            _ => {}\n-        }\n-\n-        self.fields.infcx.super_combine_consts(self, a, b)?;\n-        Ok(a)\n+        self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)"}, {"sha": "37de54a7e8558c520983e904a636fb46e360cfee", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=3f2855e4a6003f7e4d5736843d9ca5f327bef9d7", "patch": "@@ -66,11 +66,6 @@ impl TypeRelation<'tcx> for Glb<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n-        if a == b {\n-            return Ok(a);\n-        }\n-\n         self.fields.infcx.super_combine_consts(self, a, b)\n     }\n "}, {"sha": "a1a94865e74e3fd680b435839c4597a2473280ce", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=3f2855e4a6003f7e4d5736843d9ca5f327bef9d7", "patch": "@@ -66,11 +66,6 @@ impl TypeRelation<'tcx> for Lub<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n-        if a == b {\n-            return Ok(a);\n-        }\n-\n         self.fields.infcx.super_combine_consts(self, a, b)\n     }\n "}, {"sha": "67c97ef5d8b295d68650eaf40c4440e7baf02ea6", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=3f2855e4a6003f7e4d5736843d9ca5f327bef9d7", "patch": "@@ -1,13 +1,11 @@\n use super::SubregionOrigin;\n-use super::combine::{CombineFields, RelationDir, const_unification_error};\n+use super::combine::{CombineFields, RelationDir};\n \n use crate::traits::Obligation;\n-use crate::ty::{self, Ty, TyCtxt, InferConst};\n+use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::TyVar;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n-use crate::infer::unify_key::replace_if_possible;\n-use crate::mir::interpret::ConstValue;\n use std::mem;\n \n /// Ensures `a` is made a subtype of `b`. Returns `a` on success.\n@@ -142,41 +140,7 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n-        if a == b { return Ok(a); }\n-\n-        let infcx = self.fields.infcx;\n-        let a = replace_if_possible(infcx.const_unification_table.borrow_mut(), a);\n-        let b = replace_if_possible(infcx.const_unification_table.borrow_mut(), b);\n-\n-        // Consts can only be equal or unequal to each other: there's no subtyping\n-        // relation, so we're just going to perform equating here instead.\n-        let a_is_expected = self.a_is_expected();\n-        match (a.val, b.val) {\n-            (ConstValue::Infer(InferConst::Var(a_vid)),\n-                ConstValue::Infer(InferConst::Var(b_vid))) => {\n-                infcx.const_unification_table\n-                    .borrow_mut()\n-                    .unify_var_var(a_vid, b_vid)\n-                    .map_err(|e| const_unification_error(a_is_expected, e))?;\n-                return Ok(a);\n-            }\n-\n-            (ConstValue::Infer(InferConst::Var(a_id)), _) => {\n-                self.fields.infcx.unify_const_variable(a_is_expected, a_id, b)?;\n-                return Ok(a);\n-            }\n-\n-            (_, ConstValue::Infer(InferConst::Var(b_id))) => {\n-                self.fields.infcx.unify_const_variable(!a_is_expected, b_id, a)?;\n-                return Ok(a);\n-            }\n-\n-            _ => {}\n-        }\n-\n-        self.fields.infcx.super_combine_consts(self, a, b)?;\n-        Ok(a)\n+        self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)"}, {"sha": "72cce9b4843d77547446467016555fa124f9f384", "filename": "src/test/ui/const-generics/issue-64519.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.rs?ref=3f2855e4a6003f7e4d5736843d9ca5f327bef9d7", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Foo<const D: usize> {\n+    state: Option<[u8; D]>,\n+}\n+\n+impl<const D: usize> Iterator for Foo<{D}> {\n+    type Item = [u8; D];\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if true {\n+            return Some(self.state.unwrap().clone());\n+        } else {\n+            return Some(self.state.unwrap().clone());\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d368f39d903a0107d78caa05b437a723763a43b7", "filename": "src/test/ui/const-generics/issue-64519.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f2855e4a6003f7e4d5736843d9ca5f327bef9d7/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.stderr?ref=3f2855e4a6003f7e4d5736843d9ca5f327bef9d7", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-64519.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}