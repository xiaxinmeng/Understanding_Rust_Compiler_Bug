{"sha": "21cb46a6e94906c2fdfda4df33c822ba28422b7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxY2I0NmE2ZTk0OTA2YzJmZGZkYTRkZjMzYzgyMmJhMjg0MjJiN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-05T07:16:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-05T07:16:17Z"}, "message": "Auto merge of #55922 - oli-obk:slice_pat_ice, r=zackmdavis\n\nFix ICE in `const` slice patterns\n\nfixes #55911\n\nbased on https://github.com/rust-lang/rust/pull/55915\n\nNew commits start at eabc1551e0d0953f1951020afb5919ab4c129cf5", "tree": {"sha": "2c5c5bb9f43e4f46bb49b50d130e36a0aaf5ea03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c5c5bb9f43e4f46bb49b50d130e36a0aaf5ea03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21cb46a6e94906c2fdfda4df33c822ba28422b7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21cb46a6e94906c2fdfda4df33c822ba28422b7f", "html_url": "https://github.com/rust-lang/rust/commit/21cb46a6e94906c2fdfda4df33c822ba28422b7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21cb46a6e94906c2fdfda4df33c822ba28422b7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8046ed51a366315ec467af144a258e0f76c30dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8046ed51a366315ec467af144a258e0f76c30dc", "html_url": "https://github.com/rust-lang/rust/commit/d8046ed51a366315ec467af144a258e0f76c30dc"}, {"sha": "8f9a093f5299a8fe24e3ce220d87ccd9c4ea7881", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9a093f5299a8fe24e3ce220d87ccd9c4ea7881", "html_url": "https://github.com/rust-lang/rust/commit/8f9a093f5299a8fe24e3ce220d87ccd9c4ea7881"}], "stats": {"total": 198, "additions": 132, "deletions": 66}, "files": [{"sha": "0570cd278f3af59b6ec359c626080096ff4ce837", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 58, "deletions": 64, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=21cb46a6e94906c2fdfda4df33c822ba28422b7f", "patch": "@@ -309,13 +309,15 @@ pub struct MatchCheckCtxt<'a, 'tcx: 'a> {\n     /// outside it's module and should not be matchable with an empty match\n     /// statement.\n     pub module: DefId,\n+    param_env: ty::ParamEnv<'tcx>,\n     pub pattern_arena: &'a TypedArena<Pattern<'tcx>>,\n     pub byte_array_map: FxHashMap<*const Pattern<'tcx>, Vec<&'a Pattern<'tcx>>>,\n }\n \n impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n     pub fn create_and_enter<F, R>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n         module: DefId,\n         f: F) -> R\n         where F: for<'b> FnOnce(MatchCheckCtxt<'b, 'tcx>) -> R\n@@ -324,53 +326,13 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n \n         f(MatchCheckCtxt {\n             tcx,\n+            param_env,\n             module,\n             pattern_arena: &pattern_arena,\n             byte_array_map: FxHashMap::default(),\n         })\n     }\n \n-    // convert a byte-string pattern to a list of u8 patterns.\n-    fn lower_byte_str_pattern<'p>(&mut self, pat: &'p Pattern<'tcx>) -> Vec<&'p Pattern<'tcx>>\n-            where 'a: 'p\n-    {\n-        let pattern_arena = &*self.pattern_arena;\n-        let tcx = self.tcx;\n-        self.byte_array_map.entry(pat).or_insert_with(|| {\n-            match pat.kind {\n-                box PatternKind::Constant {\n-                    value: const_val\n-                } => {\n-                    if let Some(ptr) = const_val.to_ptr() {\n-                        let is_array_ptr = const_val.ty\n-                            .builtin_deref(true)\n-                            .and_then(|t| t.ty.builtin_index())\n-                            .map_or(false, |t| t == tcx.types.u8);\n-                        assert!(is_array_ptr);\n-                        let alloc = tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n-                        assert_eq!(ptr.offset.bytes(), 0);\n-                        // FIXME: check length\n-                        alloc.bytes.iter().map(|b| {\n-                            &*pattern_arena.alloc(Pattern {\n-                                ty: tcx.types.u8,\n-                                span: pat.span,\n-                                kind: box PatternKind::Constant {\n-                                    value: ty::Const::from_bits(\n-                                        tcx,\n-                                        *b as u128,\n-                                        ty::ParamEnv::empty().and(tcx.types.u8))\n-                                }\n-                            })\n-                        }).collect()\n-                    } else {\n-                        bug!(\"not a byte str: {:?}\", const_val)\n-                    }\n-                }\n-                _ => span_bug!(pat.span, \"unexpected byte array pattern {:?}\", pat)\n-            }\n-        }).clone()\n-    }\n-\n     fn is_uninhabited(&self, ty: Ty<'tcx>) -> bool {\n         if self.tcx.features().exhaustive_patterns {\n             self.tcx.is_ty_uninhabited_from(self.module, ty)\n@@ -1393,11 +1355,6 @@ fn slice_pat_covered_by_constructor<'tcx>(\n                 ConstValue::Scalar(val) | ConstValue::ScalarPair(val, _) => val,\n             };\n             if let Ok(ptr) = val.to_ptr() {\n-                let is_array_ptr = const_val.ty\n-                    .builtin_deref(true)\n-                    .and_then(|t| t.ty.builtin_index())\n-                    .map_or(false, |t| t == tcx.types.u8);\n-                assert!(is_array_ptr);\n                 tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id).bytes.as_ref()\n             } else {\n                 bug!(\"unexpected non-ptr ConstantValue\")\n@@ -1705,26 +1662,63 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n         PatternKind::Constant { value } => {\n             match *constructor {\n                 Slice(..) => {\n-                    if let Some(ptr) = value.to_ptr() {\n-                        let is_array_ptr = value.ty\n-                            .builtin_deref(true)\n-                            .and_then(|t| t.ty.builtin_index())\n-                            .map_or(false, |t| t == cx.tcx.types.u8);\n-                        assert!(is_array_ptr);\n-                        let data_len = cx.tcx\n-                            .alloc_map\n-                            .lock()\n-                            .unwrap_memory(ptr.alloc_id)\n-                            .bytes\n-                            .len();\n-                        if wild_patterns.len() == data_len {\n-                            Some(cx.lower_byte_str_pattern(pat))\n-                        } else {\n-                            None\n+                    // we extract an `Option` for the pointer because slices of zero elements don't\n+                    // necessarily point to memory, they are usually just integers. The only time\n+                    // they should be pointing to memory is when they are subslices of nonzero\n+                    // slices\n+                    let (opt_ptr, n, ty) = match value.ty.builtin_deref(false).unwrap().ty.sty {\n+                        ty::TyKind::Array(t, n) => (value.to_ptr(), n.unwrap_usize(cx.tcx), t),\n+                        ty::TyKind::Slice(t) => {\n+                            match value.val {\n+                                ConstValue::ScalarPair(ptr, n) => (\n+                                    ptr.to_ptr().ok(),\n+                                    n.to_bits(cx.tcx.data_layout.pointer_size).unwrap() as u64,\n+                                    t,\n+                                ),\n+                                _ => span_bug!(\n+                                    pat.span,\n+                                    \"slice pattern constant must be scalar pair but is {:?}\",\n+                                    value,\n+                                ),\n+                            }\n+                        },\n+                        _ => span_bug!(\n+                            pat.span,\n+                            \"unexpected const-val {:?} with ctor {:?}\",\n+                            value,\n+                            constructor,\n+                        ),\n+                    };\n+                    if wild_patterns.len() as u64 == n {\n+                        // convert a constant slice/array pattern to a list of patterns.\n+                        match (n, opt_ptr) {\n+                            (0, _) => Some(Vec::new()),\n+                            (_, Some(ptr)) => {\n+                                let alloc = cx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n+                                let layout = cx.tcx.layout_of(cx.param_env.and(ty)).ok()?;\n+                                (0..n).map(|i| {\n+                                    let ptr = ptr.offset(layout.size * i, &cx.tcx).ok()?;\n+                                    let scalar = alloc.read_scalar(\n+                                        &cx.tcx, ptr, layout.size,\n+                                    ).ok()?;\n+                                    let scalar = scalar.not_undef().ok()?;\n+                                    let value = ty::Const::from_scalar(cx.tcx, scalar, ty);\n+                                    let pattern = Pattern {\n+                                        ty,\n+                                        span: pat.span,\n+                                        kind: box PatternKind::Constant { value },\n+                                    };\n+                                    Some(&*cx.pattern_arena.alloc(pattern))\n+                                }).collect()\n+                            },\n+                            (_, None) => span_bug!(\n+                                pat.span,\n+                                \"non zero length slice with const-val {:?}\",\n+                                value,\n+                            ),\n                         }\n                     } else {\n-                        span_bug!(pat.span,\n-                        \"unexpected const-val {:?} with ctor {:?}\", value, constructor)\n+                        None\n                     }\n                 }\n                 _ => {"}, {"sha": "db6d9b6a427f79cb65b8db4c791f14d7679472b6", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=21cb46a6e94906c2fdfda4df33c822ba28422b7f", "patch": "@@ -193,7 +193,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n         }\n \n         let module = self.tcx.hir.get_module_parent(scrut.id);\n-        MatchCheckCtxt::create_and_enter(self.tcx, module, |ref mut cx| {\n+        MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |ref mut cx| {\n             let mut have_errors = false;\n \n             let inlined_arms : Vec<(Vec<_>, _)> = arms.iter().map(|arm| (\n@@ -268,7 +268,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n \n     fn check_irrefutable(&self, pat: &'tcx Pat, origin: &str) {\n         let module = self.tcx.hir.get_module_parent(pat.id);\n-        MatchCheckCtxt::create_and_enter(self.tcx, module, |ref mut cx| {\n+        MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |ref mut cx| {\n             let mut patcx = PatternContext::new(self.tcx,\n                                                 self.param_env.and(self.identity_substs),\n                                                 self.tables);"}, {"sha": "6f9501d025c26c53cde04b87e1b1fd18f2692c6e", "filename": "src/test/ui/pattern/slice-pattern-const-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const-2.rs?ref=21cb46a6e94906c2fdfda4df33c822ba28422b7f", "patch": "@@ -0,0 +1,24 @@\n+// compile-pass\n+\n+fn main() {\n+    let s = &[0x00; 4][..]; //Slice of any value\n+    const MAGIC_TEST: &[u32] = &[4, 5, 6, 7]; //Const slice to pattern match with\n+    match s {\n+        MAGIC_TEST => (),\n+        [0x00, 0x00, 0x00, 0x00] => (),\n+        [4, 5, 6, 7] => (), // this should warn\n+        _ => (),\n+    }\n+    match s {\n+        [0x00, 0x00, 0x00, 0x00] => (),\n+        MAGIC_TEST => (),\n+        [4, 5, 6, 7] => (), // this should warn\n+        _ => (),\n+    }\n+    match s {\n+        [0x00, 0x00, 0x00, 0x00] => (),\n+        [4, 5, 6, 7] => (),\n+        MAGIC_TEST => (), // this should warn\n+        _ => (),\n+    }\n+}"}, {"sha": "e7a30cef57a8ee3af0a8650f739616459eade95e", "filename": "src/test/ui/pattern/slice-pattern-const-3.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const-3.rs?ref=21cb46a6e94906c2fdfda4df33c822ba28422b7f", "patch": "@@ -0,0 +1,24 @@\n+// compile-pass\n+\n+fn main() {\n+    let s = &[\"0x00\"; 4][..]; //Slice of any value\n+    const MAGIC_TEST: &[&str] = &[\"4\", \"5\", \"6\", \"7\"]; //Const slice to pattern match with\n+    match s {\n+        MAGIC_TEST => (),\n+        [\"0x00\", \"0x00\", \"0x00\", \"0x00\"] => (),\n+        [\"4\", \"5\", \"6\", \"7\"] => (), // this should warn\n+        _ => (),\n+    }\n+    match s {\n+        [\"0x00\", \"0x00\", \"0x00\", \"0x00\"] => (),\n+        MAGIC_TEST => (),\n+        [\"4\", \"5\", \"6\", \"7\"] => (), // this should warn\n+        _ => (),\n+    }\n+    match s {\n+        [\"0x00\", \"0x00\", \"0x00\", \"0x00\"] => (),\n+        [\"4\", \"5\", \"6\", \"7\"] => (),\n+        MAGIC_TEST => (), // this should warn\n+        _ => (),\n+    }\n+}"}, {"sha": "d353f6cddbd0d05e8d27eda568c0daaf18b7a164", "filename": "src/test/ui/pattern/slice-pattern-const.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const.rs?ref=21cb46a6e94906c2fdfda4df33c822ba28422b7f", "patch": "@@ -0,0 +1,24 @@\n+//compile-pass\n+\n+fn main() {\n+    let s = &[0x00; 4][..]; //Slice of any value\n+    const MAGIC_TEST: &[u8] = b\"TEST\"; //Const slice to pattern match with\n+    match s {\n+        MAGIC_TEST => (),\n+        [0x00, 0x00, 0x00, 0x00] => (),\n+        [84, 69, 83, 84] => (), // this should warn\n+        _ => (),\n+    }\n+    match s {\n+        [0x00, 0x00, 0x00, 0x00] => (),\n+        MAGIC_TEST => (),\n+        [84, 69, 83, 84] => (), // this should warn\n+        _ => (),\n+    }\n+    match s {\n+        [0x00, 0x00, 0x00, 0x00] => (),\n+        [84, 69, 83, 84] => (),\n+        MAGIC_TEST => (), // this should warn\n+        _ => (),\n+    }\n+}"}]}