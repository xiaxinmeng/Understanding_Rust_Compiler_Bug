{"sha": "b101e26d92aa246271fcee3d66ea34f569e78cf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMDFlMjZkOTJhYTI0NjI3MWZjZWUzZDY2ZWEzNGY1NjllNzhjZjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-30T02:19:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-30T02:19:54Z"}, "message": "rustc: Run scope cleanups in the implicit block created by log statements. Fixes a leak.", "tree": {"sha": "a5706d021e14c198d455683ef055326a6f3a490e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5706d021e14c198d455683ef055326a6f3a490e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b101e26d92aa246271fcee3d66ea34f569e78cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b101e26d92aa246271fcee3d66ea34f569e78cf8", "html_url": "https://github.com/rust-lang/rust/commit/b101e26d92aa246271fcee3d66ea34f569e78cf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b101e26d92aa246271fcee3d66ea34f569e78cf8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a5afadf320de5a3f49160bb97f62a06311ba3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a5afadf320de5a3f49160bb97f62a06311ba3a", "html_url": "https://github.com/rust-lang/rust/commit/64a5afadf320de5a3f49160bb97f62a06311ba3a"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "93cc0b4903b457254486d769de0556df57452986", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b101e26d92aa246271fcee3d66ea34f569e78cf8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b101e26d92aa246271fcee3d66ea34f569e78cf8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b101e26d92aa246271fcee3d66ea34f569e78cf8", "patch": "@@ -5294,6 +5294,7 @@ fn trans_log(int lvl, @block_ctxt cx, @ast.expr e) -> result {\n     auto sub = trans_expr(log_cx, e);\n     auto e_ty = ty.expr_ty(cx.fcx.lcx.ccx.tcx, e);\n \n+    auto log_bcx = sub.bcx;\n     if (ty.type_is_fp(cx.fcx.lcx.ccx.tcx, e_ty)) {\n         let TypeRef tr;\n         let bool is32bit = false;\n@@ -5310,38 +5311,41 @@ fn trans_log(int lvl, @block_ctxt cx, @ast.expr e) -> result {\n             }\n         }\n         if (is32bit) {\n-            auto uval = trans_upcall(sub.bcx,\n+            auto uval = trans_upcall(log_bcx,\n                                      \"upcall_log_float\",\n                                      vec(C_int(lvl), sub.val),\n                                      false);\n-            uval.bcx.build.Br(after_cx.llbb);\n+            log_bcx = uval.bcx;\n         } else {\n-            auto tmp = alloca(sub.bcx, tr);\n+            auto tmp = alloca(log_bcx, tr);\n             sub.bcx.build.Store(sub.val, tmp);\n-            auto uval = trans_upcall(sub.bcx,\n+            auto uval = trans_upcall(log_bcx,\n                                      \"upcall_log_double\",\n-                                     vec(C_int(lvl), vp2i(sub.bcx, tmp)),\n+                                     vec(C_int(lvl), vp2i(log_bcx, tmp)),\n                                      false);\n-            uval.bcx.build.Br(after_cx.llbb);\n+            log_bcx = uval.bcx;\n         }\n     } else {\n         alt (ty.struct(cx.fcx.lcx.ccx.tcx, e_ty)) {\n             case (ty.ty_str) {\n-                auto v = vp2i(sub.bcx, sub.val);\n-                trans_upcall(sub.bcx,\n-                             \"upcall_log_str\",\n-                             vec(C_int(lvl), v),\n-                             false).bcx.build.Br(after_cx.llbb);\n+                auto v = vp2i(log_bcx, sub.val);\n+                log_bcx = trans_upcall(log_bcx,\n+                                       \"upcall_log_str\",\n+                                       vec(C_int(lvl), v),\n+                                       false).bcx;\n             }\n             case (_) {\n                 auto v = vec(C_int(lvl), sub.val);\n-                trans_upcall(sub.bcx,\n-                             \"upcall_log_int\",\n-                             v, false).bcx.build.Br(after_cx.llbb);\n+                log_bcx = trans_upcall(log_bcx,\n+                                       \"upcall_log_int\",\n+                                       v, false).bcx;\n             }\n         }\n     }\n \n+    log_bcx = trans_block_cleanups(log_bcx, log_cx);\n+    log_bcx.build.Br(after_cx.llbb);\n+\n     ret res(after_cx, C_nil());\n }\n "}]}