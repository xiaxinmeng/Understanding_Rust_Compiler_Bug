{"sha": "c20657c1ece5b600bcfa87fba48b41923a7595d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMDY1N2MxZWNlNWI2MDBiY2ZhODdmYmE0OGI0MTkyM2E3NTk1ZDM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-21T18:44:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-21T18:44:18Z"}, "message": "Rollup merge of #79264 - jyn514:less-doctree, r=GuillaumeGomez\n\nGet rid of some doctree items\n\nThey can be derived directly from the `hir::Item`, there's no special logic.\n\n- TypeDef\n- OpaqueTy\n- Constant\n- Static\n- TraitAlias\n- Enum\n- Union\n- Struct\n\nPart of #78082 (the easiest part, I'm still debugging some other changes).\nr? `@GuillaumeGomez`", "tree": {"sha": "66837ceecc8d7060dc28c1740a44bd3efa8ea67d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66837ceecc8d7060dc28c1740a44bd3efa8ea67d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c20657c1ece5b600bcfa87fba48b41923a7595d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfuWACCRBK7hj4Ov3rIwAAdHIIAEc6Nfl8TxuKbU00L3SoiWqX\nE+NL50SGOu/Sp8d+V9a2gmI4u4A3X1nXnkh6fz7H3v28EaGVq+3OcR9d/CMdzO36\nFUMBDjixmpwMe/HTjZscYKz6XEqm0KSd9L7S8V3V8P4iJz8CukzqbBlZJB9Gt20f\nVbv+NUgi2voLqPt1LPsk+m+KaArbxc8B56H2pZ+n6nIA3YaAqeP50lrpTlg+9dsk\nfQlMnTuc3D8rCDrBqttPU0o6UqvKJ1IWhpZzGm1ueCscVuK7778DzdZELopPFodn\n1S5wXG4/H+ehlz+vxWQaMHlh9db7w4dARhE4xriquO5tzj6v9wEIc05CAjA+75k=\n=FIV4\n-----END PGP SIGNATURE-----\n", "payload": "tree 66837ceecc8d7060dc28c1740a44bd3efa8ea67d\nparent 96ec5d299b81e8ffdff4b14bd8d382c96a06820b\nparent e280ae862c735a0bc74b7f4f479459eefb9f9b65\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605984258 +0100\ncommitter GitHub <noreply@github.com> 1605984258 +0100\n\nRollup merge of #79264 - jyn514:less-doctree, r=GuillaumeGomez\n\nGet rid of some doctree items\n\nThey can be derived directly from the `hir::Item`, there's no special logic.\n\n- TypeDef\n- OpaqueTy\n- Constant\n- Static\n- TraitAlias\n- Enum\n- Union\n- Struct\n\nPart of #78082 (the easiest part, I'm still debugging some other changes).\nr? `@GuillaumeGomez`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c20657c1ece5b600bcfa87fba48b41923a7595d3", "html_url": "https://github.com/rust-lang/rust/commit/c20657c1ece5b600bcfa87fba48b41923a7595d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c20657c1ece5b600bcfa87fba48b41923a7595d3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96ec5d299b81e8ffdff4b14bd8d382c96a06820b", "url": "https://api.github.com/repos/rust-lang/rust/commits/96ec5d299b81e8ffdff4b14bd8d382c96a06820b", "html_url": "https://github.com/rust-lang/rust/commit/96ec5d299b81e8ffdff4b14bd8d382c96a06820b"}, {"sha": "e280ae862c735a0bc74b7f4f479459eefb9f9b65", "url": "https://api.github.com/repos/rust-lang/rust/commits/e280ae862c735a0bc74b7f4f479459eefb9f9b65", "html_url": "https://github.com/rust-lang/rust/commit/e280ae862c735a0bc74b7f4f479459eefb9f9b65"}], "stats": {"total": 557, "additions": 182, "deletions": 375}, "files": [{"sha": "d58a88957df22294e2021cf39f1fce04e03c8284", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 64, "deletions": 121, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c20657c1ece5b600bcfa87fba48b41923a7595d3", "patch": "@@ -231,21 +231,14 @@ impl Clean<Item> for doctree::Module<'_> {\n         let mut items: Vec<Item> = vec![];\n         items.extend(self.extern_crates.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.imports.iter().flat_map(|x| x.clean(cx)));\n-        items.extend(self.structs.iter().map(|x| x.clean(cx)));\n-        items.extend(self.unions.iter().map(|x| x.clean(cx)));\n-        items.extend(self.enums.iter().map(|x| x.clean(cx)));\n         items.extend(self.fns.iter().map(|x| x.clean(cx)));\n         items.extend(self.foreigns.iter().map(|x| x.clean(cx)));\n         items.extend(self.mods.iter().map(|x| x.clean(cx)));\n-        items.extend(self.typedefs.iter().map(|x| x.clean(cx)));\n-        items.extend(self.opaque_tys.iter().map(|x| x.clean(cx)));\n-        items.extend(self.statics.iter().map(|x| x.clean(cx)));\n-        items.extend(self.constants.iter().map(|x| x.clean(cx)));\n+        items.extend(self.items.iter().map(|x| x.clean(cx)));\n         items.extend(self.traits.iter().map(|x| x.clean(cx)));\n         items.extend(self.impls.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.macros.iter().map(|x| x.clean(cx)));\n         items.extend(self.proc_macros.iter().map(|x| x.clean(cx)));\n-        items.extend(self.trait_aliases.iter().map(|x| x.clean(cx)));\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n@@ -1020,20 +1013,6 @@ impl Clean<Item> for doctree::Trait<'_> {\n     }\n }\n \n-impl Clean<Item> for doctree::TraitAlias<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        Item::from_hir_id_and_parts(\n-            self.id,\n-            Some(self.name),\n-            TraitAliasItem(TraitAlias {\n-                generics: self.generics.clean(cx),\n-                bounds: self.bounds.clean(cx),\n-            }),\n-            cx,\n-        )\n-    }\n-}\n-\n impl Clean<bool> for hir::IsAuto {\n     fn clean(&self, _: &DocContext<'_>) -> bool {\n         match *self {\n@@ -1777,38 +1756,6 @@ impl Clean<Visibility> for ty::Visibility {\n     }\n }\n \n-impl Clean<Item> for doctree::Struct<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        Item::from_hir_id_and_parts(\n-            self.id,\n-            Some(self.name),\n-            StructItem(Struct {\n-                struct_type: self.struct_type,\n-                generics: self.generics.clean(cx),\n-                fields: self.fields.clean(cx),\n-                fields_stripped: false,\n-            }),\n-            cx,\n-        )\n-    }\n-}\n-\n-impl Clean<Item> for doctree::Union<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        Item::from_hir_id_and_parts(\n-            self.id,\n-            Some(self.name),\n-            UnionItem(Union {\n-                struct_type: self.struct_type,\n-                generics: self.generics.clean(cx),\n-                fields: self.fields.clean(cx),\n-                fields_stripped: false,\n-            }),\n-            cx,\n-        )\n-    }\n-}\n-\n impl Clean<VariantStruct> for rustc_hir::VariantData<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> VariantStruct {\n         VariantStruct {\n@@ -1819,21 +1766,6 @@ impl Clean<VariantStruct> for rustc_hir::VariantData<'_> {\n     }\n }\n \n-impl Clean<Item> for doctree::Enum<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        Item::from_hir_id_and_parts(\n-            self.id,\n-            Some(self.name),\n-            EnumItem(Enum {\n-                variants: self.variants.iter().map(|v| v.clean(cx)).collect(),\n-                generics: self.generics.clean(cx),\n-                variants_stripped: false,\n-            }),\n-            cx,\n-        )\n-    }\n-}\n-\n impl Clean<Item> for doctree::Variant<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let what_rustc_thinks = Item::from_hir_id_and_parts(\n@@ -1981,33 +1913,6 @@ impl Clean<String> for Symbol {\n     }\n }\n \n-impl Clean<Item> for doctree::Typedef<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let type_ = self.ty.clean(cx);\n-        let item_type = type_.def_id().and_then(|did| inline::build_ty(cx, did));\n-        Item::from_hir_id_and_parts(\n-            self.id,\n-            Some(self.name),\n-            TypedefItem(Typedef { type_, generics: self.gen.clean(cx), item_type }, false),\n-            cx,\n-        )\n-    }\n-}\n-\n-impl Clean<Item> for doctree::OpaqueTy<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        Item::from_hir_id_and_parts(\n-            self.id,\n-            Some(self.name),\n-            OpaqueTyItem(OpaqueTy {\n-                bounds: self.opaque_ty.bounds.clean(cx),\n-                generics: self.opaque_ty.generics.clean(cx),\n-            }),\n-            cx,\n-        )\n-    }\n-}\n-\n impl Clean<BareFunctionDecl> for hir::BareFnTy<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> BareFunctionDecl {\n         let (generic_params, decl) = enter_impl_trait(cx, || {\n@@ -2017,37 +1922,75 @@ impl Clean<BareFunctionDecl> for hir::BareFnTy<'_> {\n     }\n }\n \n-impl Clean<Item> for doctree::Static<'_> {\n+impl Clean<Item> for (&hir::Item<'_>, Option<Ident>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        debug!(\"cleaning static {}: {:?}\", self.name.clean(cx), self);\n-        Item::from_hir_id_and_parts(\n-            self.id,\n-            Some(self.name),\n-            StaticItem(Static {\n-                type_: self.type_.clean(cx),\n-                mutability: self.mutability,\n-                expr: print_const_expr(cx, self.expr),\n+        use hir::ItemKind;\n+\n+        let (item, renamed) = self;\n+        let def_id = cx.tcx.hir().local_def_id(item.hir_id).to_def_id();\n+        let name = match renamed {\n+            Some(ident) => ident.name,\n+            None => cx.tcx.hir().name(item.hir_id),\n+        };\n+        let kind = match item.kind {\n+            ItemKind::Static(ty, mutability, body_id) => StaticItem(Static {\n+                type_: ty.clean(cx),\n+                mutability,\n+                expr: print_const_expr(cx, body_id),\n             }),\n-            cx,\n-        )\n+            ItemKind::Const(ty, body_id) => ConstantItem(Constant {\n+                type_: ty.clean(cx),\n+                expr: print_const_expr(cx, body_id),\n+                value: print_evaluated_const(cx, def_id),\n+                is_literal: is_literal_expr(cx, body_id.hir_id),\n+            }),\n+            ItemKind::OpaqueTy(ref ty) => OpaqueTyItem(OpaqueTy {\n+                bounds: ty.bounds.clean(cx),\n+                generics: ty.generics.clean(cx),\n+            }),\n+            ItemKind::TyAlias(ty, ref generics) => {\n+                let rustdoc_ty = ty.clean(cx);\n+                let item_type = rustdoc_ty.def_id().and_then(|did| inline::build_ty(cx, did));\n+                TypedefItem(\n+                    Typedef { type_: rustdoc_ty, generics: generics.clean(cx), item_type },\n+                    false,\n+                )\n+            }\n+            ItemKind::Enum(ref def, ref generics) => EnumItem(Enum {\n+                variants: def.variants.iter().map(|v| v.clean(cx)).collect(),\n+                generics: generics.clean(cx),\n+                variants_stripped: false,\n+            }),\n+            ItemKind::TraitAlias(ref generics, bounds) => TraitAliasItem(TraitAlias {\n+                generics: generics.clean(cx),\n+                bounds: bounds.clean(cx),\n+            }),\n+            ItemKind::Union(ref variant_data, ref generics) => UnionItem(Union {\n+                struct_type: doctree::struct_type_from_def(&variant_data),\n+                generics: generics.clean(cx),\n+                fields: variant_data.fields().clean(cx),\n+                fields_stripped: false,\n+            }),\n+            ItemKind::Struct(ref variant_data, ref generics) => StructItem(Struct {\n+                struct_type: doctree::struct_type_from_def(&variant_data),\n+                generics: generics.clean(cx),\n+                fields: variant_data.fields().clean(cx),\n+                fields_stripped: false,\n+            }),\n+            _ => unreachable!(\"not yet converted\"),\n+        };\n+\n+        Item::from_def_id_and_parts(def_id, Some(name), kind, cx)\n     }\n }\n \n-impl Clean<Item> for doctree::Constant<'_> {\n+impl Clean<Item> for hir::Variant<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let def_id = cx.tcx.hir().local_def_id(self.id).to_def_id();\n-\n-        Item::from_def_id_and_parts(\n-            def_id,\n-            Some(self.name),\n-            ConstantItem(Constant {\n-                type_: self.type_.clean(cx),\n-                expr: print_const_expr(cx, self.expr),\n-                value: print_evaluated_const(cx, def_id),\n-                is_literal: is_literal_expr(cx, self.expr.hir_id),\n-            }),\n-            cx,\n-        )\n+        let kind = VariantItem(Variant { kind: self.data.clean(cx) });\n+        let what_rustc_thinks =\n+            Item::from_hir_id_and_parts(self.id, Some(self.ident.name), kind, cx);\n+        // don't show `pub` for variants, which are always public\n+        Item { visibility: Inherited, ..what_rustc_thinks }\n     }\n }\n "}, {"sha": "d56328cc2aa08743c4f711335f2237142aba5128", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 4, "deletions": 79, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=c20657c1ece5b600bcfa87fba48b41923a7595d3", "patch": "@@ -4,7 +4,7 @@ crate use self::StructType::*;\n \n use rustc_ast as ast;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::{self, Span, Symbol};\n+use rustc_span::{self, symbol::Ident, Span, Symbol};\n \n use rustc_hir as hir;\n use rustc_hir::def_id::CrateNum;\n@@ -17,22 +17,16 @@ crate struct Module<'hir> {\n     crate where_inner: Span,\n     crate extern_crates: Vec<ExternCrate<'hir>>,\n     crate imports: Vec<Import<'hir>>,\n-    crate structs: Vec<Struct<'hir>>,\n-    crate unions: Vec<Union<'hir>>,\n-    crate enums: Vec<Enum<'hir>>,\n     crate fns: Vec<Function<'hir>>,\n     crate mods: Vec<Module<'hir>>,\n     crate id: hir::HirId,\n-    crate typedefs: Vec<Typedef<'hir>>,\n-    crate opaque_tys: Vec<OpaqueTy<'hir>>,\n-    crate statics: Vec<Static<'hir>>,\n-    crate constants: Vec<Constant<'hir>>,\n+    // (item, renamed)\n+    crate items: Vec<(&'hir hir::Item<'hir>, Option<Ident>)>,\n     crate traits: Vec<Trait<'hir>>,\n     crate impls: Vec<Impl<'hir>>,\n     crate foreigns: Vec<ForeignItem<'hir>>,\n     crate macros: Vec<Macro>,\n     crate proc_macros: Vec<ProcMacro>,\n-    crate trait_aliases: Vec<TraitAlias<'hir>>,\n     crate is_crate: bool,\n }\n \n@@ -46,21 +40,14 @@ impl Module<'hir> {\n             attrs,\n             extern_crates: Vec::new(),\n             imports: Vec::new(),\n-            structs: Vec::new(),\n-            unions: Vec::new(),\n-            enums: Vec::new(),\n             fns: Vec::new(),\n             mods: Vec::new(),\n-            typedefs: Vec::new(),\n-            opaque_tys: Vec::new(),\n-            statics: Vec::new(),\n-            constants: Vec::new(),\n+            items: Vec::new(),\n             traits: Vec::new(),\n             impls: Vec::new(),\n             foreigns: Vec::new(),\n             macros: Vec::new(),\n             proc_macros: Vec::new(),\n-            trait_aliases: Vec::new(),\n             is_crate: false,\n         }\n     }\n@@ -76,29 +63,6 @@ crate enum StructType {\n     Unit,\n }\n \n-crate struct Struct<'hir> {\n-    crate id: hir::HirId,\n-    crate struct_type: StructType,\n-    crate name: Symbol,\n-    crate generics: &'hir hir::Generics<'hir>,\n-    crate fields: &'hir [hir::StructField<'hir>],\n-}\n-\n-crate struct Union<'hir> {\n-    crate id: hir::HirId,\n-    crate struct_type: StructType,\n-    crate name: Symbol,\n-    crate generics: &'hir hir::Generics<'hir>,\n-    crate fields: &'hir [hir::StructField<'hir>],\n-}\n-\n-crate struct Enum<'hir> {\n-    crate variants: Vec<Variant<'hir>>,\n-    crate generics: &'hir hir::Generics<'hir>,\n-    crate id: hir::HirId,\n-    crate name: Symbol,\n-}\n-\n crate struct Variant<'hir> {\n     crate name: Symbol,\n     crate id: hir::HirId,\n@@ -114,38 +78,6 @@ crate struct Function<'hir> {\n     crate body: hir::BodyId,\n }\n \n-crate struct Typedef<'hir> {\n-    crate ty: &'hir hir::Ty<'hir>,\n-    crate gen: &'hir hir::Generics<'hir>,\n-    crate name: Symbol,\n-    crate id: hir::HirId,\n-}\n-\n-crate struct OpaqueTy<'hir> {\n-    crate opaque_ty: &'hir hir::OpaqueTy<'hir>,\n-    crate name: Symbol,\n-    crate id: hir::HirId,\n-}\n-\n-#[derive(Debug)]\n-crate struct Static<'hir> {\n-    crate type_: &'hir hir::Ty<'hir>,\n-    crate mutability: hir::Mutability,\n-    crate expr: hir::BodyId,\n-    crate name: Symbol,\n-    crate attrs: &'hir [ast::Attribute],\n-    crate vis: &'hir hir::Visibility<'hir>,\n-    crate id: hir::HirId,\n-    crate span: Span,\n-}\n-\n-crate struct Constant<'hir> {\n-    crate type_: &'hir hir::Ty<'hir>,\n-    crate expr: hir::BodyId,\n-    crate name: Symbol,\n-    crate id: hir::HirId,\n-}\n-\n crate struct Trait<'hir> {\n     crate is_auto: hir::IsAuto,\n     crate unsafety: hir::Unsafety,\n@@ -157,13 +89,6 @@ crate struct Trait<'hir> {\n     crate id: hir::HirId,\n }\n \n-crate struct TraitAlias<'hir> {\n-    crate name: Symbol,\n-    crate generics: &'hir hir::Generics<'hir>,\n-    crate bounds: &'hir [hir::GenericBound<'hir>],\n-    crate id: hir::HirId,\n-}\n-\n #[derive(Debug)]\n crate struct Impl<'hir> {\n     crate unsafety: hir::Unsafety,"}, {"sha": "c55e5f7690c14da2a4e8310ed258f6f8f15f1139", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 9, "deletions": 82, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c20657c1ece5b600bcfa87fba48b41923a7595d3", "patch": "@@ -82,50 +82,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         module\n     }\n \n-    fn visit_variant_data(\n-        &mut self,\n-        item: &'tcx hir::Item<'_>,\n-        name: Symbol,\n-        sd: &'tcx hir::VariantData<'_>,\n-        generics: &'tcx hir::Generics<'_>,\n-    ) -> Struct<'tcx> {\n-        debug!(\"visiting struct\");\n-        let struct_type = struct_type_from_def(&*sd);\n-        Struct { id: item.hir_id, struct_type, name, generics, fields: sd.fields() }\n-    }\n-\n-    fn visit_union_data(\n-        &mut self,\n-        item: &'tcx hir::Item<'_>,\n-        name: Symbol,\n-        sd: &'tcx hir::VariantData<'_>,\n-        generics: &'tcx hir::Generics<'_>,\n-    ) -> Union<'tcx> {\n-        debug!(\"visiting union\");\n-        let struct_type = struct_type_from_def(&*sd);\n-        Union { id: item.hir_id, struct_type, name, generics, fields: sd.fields() }\n-    }\n-\n-    fn visit_enum_def(\n-        &mut self,\n-        it: &'tcx hir::Item<'_>,\n-        name: Symbol,\n-        def: &'tcx hir::EnumDef<'_>,\n-        generics: &'tcx hir::Generics<'_>,\n-    ) -> Enum<'tcx> {\n-        debug!(\"visiting enum\");\n-        Enum {\n-            name,\n-            variants: def\n-                .variants\n-                .iter()\n-                .map(|v| Variant { name: v.ident.name, id: v.id, def: &v.data })\n-                .collect(),\n-            generics,\n-            id: it.hir_id,\n-        }\n-    }\n-\n     fn visit_fn(\n         &mut self,\n         om: &mut Module<'tcx>,\n@@ -414,45 +370,21 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     Some(ident.name),\n                 ));\n             }\n-            hir::ItemKind::Enum(ref ed, ref gen) => {\n-                om.enums.push(self.visit_enum_def(item, ident.name, ed, gen))\n-            }\n-            hir::ItemKind::Struct(ref sd, ref gen) => {\n-                om.structs.push(self.visit_variant_data(item, ident.name, sd, gen))\n-            }\n-            hir::ItemKind::Union(ref sd, ref gen) => {\n-                om.unions.push(self.visit_union_data(item, ident.name, sd, gen))\n-            }\n             hir::ItemKind::Fn(ref sig, ref gen, body) => {\n                 self.visit_fn(om, item, ident.name, &sig.decl, sig.header, gen, body)\n             }\n-            hir::ItemKind::TyAlias(ty, ref gen) => {\n-                let t = Typedef { ty, gen, name: ident.name, id: item.hir_id };\n-                om.typedefs.push(t);\n-            }\n-            hir::ItemKind::OpaqueTy(ref opaque_ty) => {\n-                let t = OpaqueTy { opaque_ty, name: ident.name, id: item.hir_id };\n-                om.opaque_tys.push(t);\n-            }\n-            hir::ItemKind::Static(type_, mutability, expr) => {\n-                let s = Static {\n-                    type_,\n-                    mutability,\n-                    expr,\n-                    id: item.hir_id,\n-                    name: ident.name,\n-                    attrs: &item.attrs,\n-                    span: item.span,\n-                    vis: &item.vis,\n-                };\n-                om.statics.push(s);\n-            }\n-            hir::ItemKind::Const(type_, expr) => {\n+            hir::ItemKind::Enum(..)\n+            | hir::ItemKind::Struct(..)\n+            | hir::ItemKind::Union(..)\n+            | hir::ItemKind::TyAlias(..)\n+            | hir::ItemKind::OpaqueTy(..)\n+            | hir::ItemKind::Static(..)\n+            | hir::ItemKind::TraitAlias(..) => om.items.push((item, renamed)),\n+            hir::ItemKind::Const(..) => {\n                 // Underscore constants do not correspond to a nameable item and\n                 // so are never useful in documentation.\n                 if ident.name != kw::Underscore {\n-                    let s = Constant { type_, expr, id: item.hir_id, name: ident.name };\n-                    om.constants.push(s);\n+                    om.items.push((item, renamed));\n                 }\n             }\n             hir::ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref item_ids) => {\n@@ -469,11 +401,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.traits.push(t);\n             }\n-            hir::ItemKind::TraitAlias(ref generics, ref bounds) => {\n-                let t = TraitAlias { name: ident.name, generics, bounds, id: item.hir_id };\n-                om.trait_aliases.push(t);\n-            }\n-\n             hir::ItemKind::Impl {\n                 unsafety,\n                 polarity,"}, {"sha": "3372304f44a3dc72c916957910e823f3d817bb2f", "filename": "src/test/rustdoc-ui/doc-without-codeblock.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr?ref=c20657c1ece5b600bcfa87fba48b41923a7595d3", "patch": "@@ -16,12 +16,6 @@ note: the lint level is defined here\n LL | #![deny(missing_doc_code_examples)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: missing code example in this documentation\n-  --> $DIR/doc-without-codeblock.rs:3:1\n-   |\n-LL | /// Some docs.\n-   | ^^^^^^^^^^^^^^\n-\n error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:7:1\n    |\n@@ -34,5 +28,11 @@ error: missing code example in this documentation\n LL |     /// Or maybe not because she saved herself!\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: missing code example in this documentation\n+  --> $DIR/doc-without-codeblock.rs:3:1\n+   |\n+LL | /// Some docs.\n+   | ^^^^^^^^^^^^^^\n+\n error: aborting due to 4 previous errors\n "}, {"sha": "936055da01cf741be71a7e3e0455cc60c2581d9e", "filename": "src/test/rustdoc-ui/intra-links-ambiguity.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr?ref=c20657c1ece5b600bcfa87fba48b41923a7595d3", "patch": "@@ -1,14 +1,29 @@\n-error: `ambiguous` is both a struct and a function\n-  --> $DIR/intra-links-ambiguity.rs:27:6\n+error: `true` is both a module and a builtin type\n+  --> $DIR/intra-links-ambiguity.rs:38:6\n    |\n-LL | /// [`ambiguous`] is ambiguous.\n-   |      ^^^^^^^^^^^ ambiguous link\n+LL | /// [true]\n+   |      ^^^^ ambiguous link\n    |\n note: the lint level is defined here\n   --> $DIR/intra-links-ambiguity.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n+help: to link to the module, prefix with `mod@`\n+   |\n+LL | /// [mod@true]\n+   |      ^^^^^^^^\n+help: to link to the builtin type, prefix with `prim@`\n+   |\n+LL | /// [prim@true]\n+   |      ^^^^^^^^^\n+\n+error: `ambiguous` is both a struct and a function\n+  --> $DIR/intra-links-ambiguity.rs:27:6\n+   |\n+LL | /// [`ambiguous`] is ambiguous.\n+   |      ^^^^^^^^^^^ ambiguous link\n+   |\n help: to link to the struct, prefix with `struct@`\n    |\n LL | /// [`struct@ambiguous`] is ambiguous.\n@@ -82,20 +97,5 @@ help: to link to the function, add parentheses\n LL | /// Ambiguous non-implied shortcut link [`foo::bar()`].\n    |                                          ^^^^^^^^^^^^\n \n-error: `true` is both a module and a builtin type\n-  --> $DIR/intra-links-ambiguity.rs:38:6\n-   |\n-LL | /// [true]\n-   |      ^^^^ ambiguous link\n-   |\n-help: to link to the module, prefix with `mod@`\n-   |\n-LL | /// [mod@true]\n-   |      ^^^^^^^^\n-help: to link to the builtin type, prefix with `prim@`\n-   |\n-LL | /// [prim@true]\n-   |      ^^^^^^^^^\n-\n error: aborting due to 6 previous errors\n "}, {"sha": "bf437a7cf4674bf931ac3acb3f2ae601775a5978", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=c20657c1ece5b600bcfa87fba48b41923a7595d3", "patch": "@@ -36,6 +36,60 @@ warning: unresolved link to `Qux::Z`\n LL |       //! , [Uniooon::X] and [Qux::Z].\n    |                               ^^^^^^ no item named `Qux` in scope\n \n+warning: unresolved link to `BarA`\n+  --> $DIR/intra-links-warning.rs:21:10\n+   |\n+LL | /// bar [BarA] bar\n+   |          ^^^^ no item named `BarA` in scope\n+   |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+\n+warning: unresolved link to `BarB`\n+  --> $DIR/intra-links-warning.rs:27:9\n+   |\n+LL |  * bar [BarB] bar\n+   |         ^^^^ no item named `BarB` in scope\n+   |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+\n+warning: unresolved link to `BarC`\n+  --> $DIR/intra-links-warning.rs:34:6\n+   |\n+LL | bar [BarC] bar\n+   |      ^^^^ no item named `BarC` in scope\n+   |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+\n+warning: unresolved link to `BarD`\n+  --> $DIR/intra-links-warning.rs:45:1\n+   |\n+LL | #[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the link appears in this line:\n+           \n+           bar [BarD] bar\n+                ^^^^\n+   = note: no item named `BarD` in scope\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+\n+warning: unresolved link to `BarF`\n+  --> $DIR/intra-links-warning.rs:50:9\n+   |\n+LL |         #[doc = $f]\n+   |         ^^^^^^^^^^^\n+...\n+LL | f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n+   | ------------------------------- in this macro invocation\n+   |\n+   = note: the link appears in this line:\n+           \n+           bar [BarF] bar\n+                ^^^^\n+   = note: no item named `BarF` in scope\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n warning: unresolved link to `Qux:Y`\n   --> $DIR/intra-links-warning.rs:14:13\n    |\n@@ -117,59 +171,5 @@ LL | /// docs [error2]\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: unresolved link to `BarA`\n-  --> $DIR/intra-links-warning.rs:21:10\n-   |\n-LL | /// bar [BarA] bar\n-   |          ^^^^ no item named `BarA` in scope\n-   |\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n-\n-warning: unresolved link to `BarB`\n-  --> $DIR/intra-links-warning.rs:27:9\n-   |\n-LL |  * bar [BarB] bar\n-   |         ^^^^ no item named `BarB` in scope\n-   |\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n-\n-warning: unresolved link to `BarC`\n-  --> $DIR/intra-links-warning.rs:34:6\n-   |\n-LL | bar [BarC] bar\n-   |      ^^^^ no item named `BarC` in scope\n-   |\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n-\n-warning: unresolved link to `BarD`\n-  --> $DIR/intra-links-warning.rs:45:1\n-   |\n-LL | #[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: the link appears in this line:\n-           \n-           bar [BarD] bar\n-                ^^^^\n-   = note: no item named `BarD` in scope\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n-\n-warning: unresolved link to `BarF`\n-  --> $DIR/intra-links-warning.rs:50:9\n-   |\n-LL |         #[doc = $f]\n-   |         ^^^^^^^^^^^\n-...\n-LL | f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n-   | ------------------------------- in this macro invocation\n-   |\n-   = note: the link appears in this line:\n-           \n-           bar [BarF] bar\n-                ^^^^\n-   = note: no item named `BarF` in scope\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n warning: 19 warnings emitted\n "}, {"sha": "e02ed4a056c128503dec0c5b2af88067fe8d2eae", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr?ref=c20657c1ece5b600bcfa87fba48b41923a7595d3", "patch": "@@ -1,8 +1,9 @@\n error: missing code example in this documentation\n-  --> $DIR/lint-missing-doc-code-example.rs:49:1\n+  --> $DIR/lint-missing-doc-code-example.rs:19:1\n    |\n-LL | /// Doc\n-   | ^^^^^^^\n+LL | / mod module1 {\n+LL | | }\n+   | |_^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-missing-doc-code-example.rs:2:9\n@@ -11,29 +12,28 @@ LL | #![deny(missing_doc_code_examples)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/lint-missing-doc-code-example.rs:63:1\n+  --> $DIR/lint-missing-doc-code-example.rs:37:3\n    |\n-LL | /// Doc\n-   | ^^^^^^^\n+LL |   /// doc\n+   |   ^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/lint-missing-doc-code-example.rs:56:1\n+  --> $DIR/lint-missing-doc-code-example.rs:49:1\n    |\n LL | /// Doc\n    | ^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/lint-missing-doc-code-example.rs:19:1\n+  --> $DIR/lint-missing-doc-code-example.rs:56:1\n    |\n-LL | / mod module1 {\n-LL | | }\n-   | |_^\n+LL | /// Doc\n+   | ^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/lint-missing-doc-code-example.rs:37:3\n+  --> $DIR/lint-missing-doc-code-example.rs:63:1\n    |\n-LL |   /// doc\n-   |   ^^^^^^^\n+LL | /// Doc\n+   | ^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "504c0687c8dc299a6dc1580308c12a246947c795", "filename": "src/test/rustdoc/redirect-rename.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Ftest%2Frustdoc%2Fredirect-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20657c1ece5b600bcfa87fba48b41923a7595d3/src%2Ftest%2Frustdoc%2Fredirect-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fredirect-rename.rs?ref=c20657c1ece5b600bcfa87fba48b41923a7595d3", "patch": "@@ -4,6 +4,10 @@ mod hidden {\n     // @has foo/hidden/struct.Foo.html\n     // @has - '//p/a' '../../foo/struct.FooBar.html'\n     pub struct Foo {}\n+    pub union U { a: usize }\n+    pub enum Empty {}\n+    pub const C: usize = 1;\n+    pub static S: usize = 1;\n \n     // @has foo/hidden/bar/index.html\n     // @has - '//p/a' '../../foo/baz/index.html'\n@@ -16,6 +20,14 @@ mod hidden {\n \n // @has foo/struct.FooBar.html\n pub use hidden::Foo as FooBar;\n+// @has foo/union.FooU.html\n+pub use hidden::U as FooU;\n+// @has foo/enum.FooEmpty.html\n+pub use hidden::Empty as FooEmpty;\n+// @has foo/constant.FooC.html\n+pub use hidden::C as FooC;\n+// @has foo/static.FooS.html\n+pub use hidden::S as FooS;\n \n // @has foo/baz/index.html\n // @has foo/baz/struct.Thing.html"}]}