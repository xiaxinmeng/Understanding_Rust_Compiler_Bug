{"sha": "3659502816134b45448799acf428055e40fdf4fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NTk1MDI4MTYxMzRiNDU0NDg3OTlhY2Y0MjgwNTVlNDBmZGY0ZmM=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-03-27T13:50:08Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-04-05T17:23:18Z"}, "message": "Upgrade Chalk", "tree": {"sha": "4a6e1c8e489f5aa61361cc336f719b4d19739eac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a6e1c8e489f5aa61361cc336f719b4d19739eac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3659502816134b45448799acf428055e40fdf4fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3659502816134b45448799acf428055e40fdf4fc", "html_url": "https://github.com/rust-lang/rust/commit/3659502816134b45448799acf428055e40fdf4fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3659502816134b45448799acf428055e40fdf4fc/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3431312418ea255e98d3f94536344d396b9b07d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3431312418ea255e98d3f94536344d396b9b07d6", "html_url": "https://github.com/rust-lang/rust/commit/3431312418ea255e98d3f94536344d396b9b07d6"}], "stats": {"total": 170, "additions": 118, "deletions": 52}, "files": [{"sha": "c46bf944834d535cdd921986a90b19c2cf38cdff", "filename": "Cargo.lock", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3659502816134b45448799acf428055e40fdf4fc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3659502816134b45448799acf428055e40fdf4fc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3659502816134b45448799acf428055e40fdf4fc", "patch": "@@ -114,7 +114,7 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n [[package]]\n name = \"chalk-derive\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=177d71340acc7a7204a33115fc63075d86452179#177d71340acc7a7204a33115fc63075d86452179\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -124,7 +124,7 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.9.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=177d71340acc7a7204a33115fc63075d86452179#177d71340acc7a7204a33115fc63075d86452179\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n dependencies = [\n  \"chalk-macros\",\n  \"rustc-hash\",\n@@ -133,7 +133,7 @@ dependencies = [\n [[package]]\n name = \"chalk-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=177d71340acc7a7204a33115fc63075d86452179#177d71340acc7a7204a33115fc63075d86452179\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -143,15 +143,15 @@ dependencies = [\n [[package]]\n name = \"chalk-macros\"\n version = \"0.1.1\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=177d71340acc7a7204a33115fc63075d86452179#177d71340acc7a7204a33115fc63075d86452179\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n dependencies = [\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=177d71340acc7a7204a33115fc63075d86452179#177d71340acc7a7204a33115fc63075d86452179\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -162,15 +162,15 @@ dependencies = [\n [[package]]\n name = \"chalk-solve\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=177d71340acc7a7204a33115fc63075d86452179#177d71340acc7a7204a33115fc63075d86452179\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=d383af7333cc6014e9d9e3e77668b5d5b0a5b40e#d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n  \"chalk-ir\",\n  \"chalk-macros\",\n  \"chalk-rust-ir\",\n  \"ena\",\n- \"itertools 0.8.2\",\n+ \"itertools\",\n  \"petgraph\",\n  \"rustc-hash\",\n ]\n@@ -505,15 +505,6 @@ dependencies = [\n  \"libc\",\n ]\n \n-[[package]]\n-name = \"itertools\"\n-version = \"0.8.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f56a2d0bc861f9165be4eb3442afd3c236d8a98afd426f65d92324ae1091a484\"\n-dependencies = [\n- \"either\",\n-]\n-\n [[package]]\n name = \"itertools\"\n version = \"0.9.0\"\n@@ -873,7 +864,7 @@ name = \"ra_assists\"\n version = \"0.1.0\"\n dependencies = [\n  \"either\",\n- \"itertools 0.9.0\",\n+ \"itertools\",\n  \"ra_db\",\n  \"ra_fmt\",\n  \"ra_hir\",\n@@ -927,7 +918,7 @@ dependencies = [\n name = \"ra_fmt\"\n version = \"0.1.0\"\n dependencies = [\n- \"itertools 0.9.0\",\n+ \"itertools\",\n  \"ra_syntax\",\n ]\n \n@@ -937,7 +928,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"arrayvec\",\n  \"either\",\n- \"itertools 0.9.0\",\n+ \"itertools\",\n  \"log\",\n  \"ra_db\",\n  \"ra_hir_def\",\n@@ -1015,7 +1006,7 @@ dependencies = [\n  \"either\",\n  \"indexmap\",\n  \"insta\",\n- \"itertools 0.9.0\",\n+ \"itertools\",\n  \"log\",\n  \"ra_assists\",\n  \"ra_cfg\",\n@@ -1127,7 +1118,7 @@ name = \"ra_syntax\"\n version = \"0.1.0\"\n dependencies = [\n  \"arrayvec\",\n- \"itertools 0.9.0\",\n+ \"itertools\",\n  \"once_cell\",\n  \"ra_parser\",\n  \"ra_text_edit\",\n@@ -1305,7 +1296,7 @@ dependencies = [\n  \"crossbeam-channel\",\n  \"env_logger\",\n  \"globset\",\n- \"itertools 0.9.0\",\n+ \"itertools\",\n  \"jod-thread\",\n  \"log\",\n  \"lsp-server\","}, {"sha": "2cbab800dff8481f740d211538b9e4b2ca275f80", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3659502816134b45448799acf428055e40fdf4fc/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3659502816134b45448799acf428055e40fdf4fc/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=3659502816134b45448799acf428055e40fdf4fc", "patch": "@@ -23,9 +23,9 @@ ra_prof = { path = \"../ra_prof\" }\n ra_syntax = { path = \"../ra_syntax\" }\n test_utils = { path = \"../test_utils\" }\n \n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"177d71340acc7a7204a33115fc63075d86452179\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"177d71340acc7a7204a33115fc63075d86452179\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"177d71340acc7a7204a33115fc63075d86452179\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\" }\n+chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"d383af7333cc6014e9d9e3e77668b5d5b0a5b40e\" }\n \n [dev-dependencies]\n insta = \"0.15.0\""}, {"sha": "80eae4eca570d508877420a2d93577ef3b432f96", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3659502816134b45448799acf428055e40fdf4fc/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3659502816134b45448799acf428055e40fdf4fc/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=3659502816134b45448799acf428055e40fdf4fc", "patch": "@@ -153,7 +153,7 @@ pub(crate) fn trait_solve_query(\n         }\n     }\n \n-    let canonical = goal.to_chalk(db).cast();\n+    let canonical = goal.to_chalk(db).cast(&Interner);\n \n     // We currently don't deal with universes (I think / hope they're not yet\n     // relevant for our use cases?)\n@@ -194,8 +194,8 @@ fn solution_from_chalk(\n     let convert_subst = |subst: chalk_ir::Canonical<chalk_ir::Substitution<Interner>>| {\n         let value = subst\n             .value\n-            .into_iter()\n-            .map(|p| match p.ty() {\n+            .iter(&Interner)\n+            .map(|p| match p.ty(&Interner) {\n                 Some(ty) => from_chalk(db, ty.clone()),\n                 None => unimplemented!(),\n             })"}, {"sha": "ab4cb33b4aacd5a1cfd68ffeb7b4e5df18a149b2", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 99, "deletions": 24, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/3659502816134b45448799acf428055e40fdf4fc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3659502816134b45448799acf428055e40fdf4fc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=3659502816134b45448799acf428055e40fdf4fc", "patch": "@@ -59,53 +59,126 @@ impl chalk_ir::interner::Interner for Interner {\n         None\n     }\n \n+    fn debug_ty(_ty: &chalk_ir::Ty<Self>, _fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+        None\n+    }\n+\n+    fn debug_lifetime(\n+        _lifetime: &chalk_ir::Lifetime<Self>,\n+        _fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        None\n+    }\n+\n+    fn debug_parameter(\n+        _parameter: &Parameter<Self>,\n+        _fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        None\n+    }\n+\n+    fn debug_goal(_goal: &Goal<Self>, _fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+        None\n+    }\n+\n+    fn debug_goals(\n+        _goals: &chalk_ir::Goals<Self>,\n+        _fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        None\n+    }\n+\n+    fn debug_program_clause_implication(\n+        _pci: &chalk_ir::ProgramClauseImplication<Self>,\n+        _fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        None\n+    }\n+\n+    fn debug_application_ty(\n+        _application_ty: &chalk_ir::ApplicationTy<Self>,\n+        _fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        None\n+    }\n+\n+    fn debug_substitution(\n+        _substitution: &chalk_ir::Substitution<Self>,\n+        _fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        None\n+    }\n+\n+    fn debug_separator_trait_ref(\n+        _separator_trait_ref: &chalk_ir::SeparatorTraitRef<Self>,\n+        _fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        None\n+    }\n+\n     fn intern_ty(&self, ty: chalk_ir::TyData<Self>) -> Box<chalk_ir::TyData<Self>> {\n         Box::new(ty)\n     }\n \n-    fn ty_data(ty: &Box<chalk_ir::TyData<Self>>) -> &chalk_ir::TyData<Self> {\n+    fn ty_data<'a>(&self, ty: &'a Box<chalk_ir::TyData<Self>>) -> &'a chalk_ir::TyData<Self> {\n         ty\n     }\n \n-    fn intern_lifetime(lifetime: chalk_ir::LifetimeData<Self>) -> chalk_ir::LifetimeData<Self> {\n+    fn intern_lifetime(\n+        &self,\n+        lifetime: chalk_ir::LifetimeData<Self>,\n+    ) -> chalk_ir::LifetimeData<Self> {\n         lifetime\n     }\n \n-    fn lifetime_data(lifetime: &chalk_ir::LifetimeData<Self>) -> &chalk_ir::LifetimeData<Self> {\n+    fn lifetime_data<'a>(\n+        &self,\n+        lifetime: &'a chalk_ir::LifetimeData<Self>,\n+    ) -> &'a chalk_ir::LifetimeData<Self> {\n         lifetime\n     }\n \n-    fn intern_parameter(parameter: chalk_ir::ParameterData<Self>) -> chalk_ir::ParameterData<Self> {\n+    fn intern_parameter(\n+        &self,\n+        parameter: chalk_ir::ParameterData<Self>,\n+    ) -> chalk_ir::ParameterData<Self> {\n         parameter\n     }\n \n-    fn parameter_data(parameter: &chalk_ir::ParameterData<Self>) -> &chalk_ir::ParameterData<Self> {\n+    fn parameter_data<'a>(\n+        &self,\n+        parameter: &'a chalk_ir::ParameterData<Self>,\n+    ) -> &'a chalk_ir::ParameterData<Self> {\n         parameter\n     }\n \n-    fn intern_goal(goal: GoalData<Self>) -> Arc<GoalData<Self>> {\n+    fn intern_goal(&self, goal: GoalData<Self>) -> Arc<GoalData<Self>> {\n         Arc::new(goal)\n     }\n \n-    fn intern_goals(data: impl IntoIterator<Item = Goal<Self>>) -> Self::InternedGoals {\n+    fn intern_goals(&self, data: impl IntoIterator<Item = Goal<Self>>) -> Self::InternedGoals {\n         data.into_iter().collect()\n     }\n \n-    fn goal_data(goal: &Arc<GoalData<Self>>) -> &GoalData<Self> {\n+    fn goal_data<'a>(&self, goal: &'a Arc<GoalData<Self>>) -> &'a GoalData<Self> {\n         goal\n     }\n \n-    fn goals_data(goals: &Vec<Goal<Interner>>) -> &[Goal<Interner>] {\n+    fn goals_data<'a>(&self, goals: &'a Vec<Goal<Interner>>) -> &'a [Goal<Interner>] {\n         goals\n     }\n \n     fn intern_substitution<E>(\n+        &self,\n         data: impl IntoIterator<Item = Result<Parameter<Self>, E>>,\n     ) -> Result<Vec<Parameter<Self>>, E> {\n         data.into_iter().collect()\n     }\n \n-    fn substitution_data(substitution: &Vec<Parameter<Self>>) -> &[Parameter<Self>] {\n+    fn substitution_data<'a>(\n+        &self,\n+        substitution: &'a Vec<Parameter<Self>>,\n+    ) -> &'a [Parameter<Self>] {\n         substitution\n     }\n }\n@@ -145,12 +218,14 @@ impl ToChalk for Ty {\n             Ty::Apply(apply_ty) => {\n                 let name = apply_ty.ctor.to_chalk(db);\n                 let substitution = apply_ty.parameters.to_chalk(db);\n-                chalk_ir::ApplicationTy { name, substitution }.cast().intern(&Interner)\n+                chalk_ir::ApplicationTy { name, substitution }.cast(&Interner).intern(&Interner)\n             }\n             Ty::Projection(proj_ty) => {\n                 let associated_ty_id = proj_ty.associated_ty.to_chalk(db);\n                 let substitution = proj_ty.parameters.to_chalk(db);\n-                chalk_ir::AliasTy { associated_ty_id, substitution }.cast().intern(&Interner)\n+                chalk_ir::AliasTy { associated_ty_id, substitution }\n+                    .cast(&Interner)\n+                    .intern(&Interner)\n             }\n             Ty::Placeholder(id) => {\n                 let interned_id = db.intern_type_param_id(id);\n@@ -173,14 +248,14 @@ impl ToChalk for Ty {\n                 chalk_ir::TyData::Dyn(bounded_ty).intern(&Interner)\n             }\n             Ty::Opaque(_) | Ty::Unknown => {\n-                let substitution = chalk_ir::Substitution::empty();\n+                let substitution = chalk_ir::Substitution::empty(&Interner);\n                 let name = TypeName::Error;\n-                chalk_ir::ApplicationTy { name, substitution }.cast().intern(&Interner)\n+                chalk_ir::ApplicationTy { name, substitution }.cast(&Interner).intern(&Interner)\n             }\n         }\n     }\n     fn from_chalk(db: &dyn HirDatabase, chalk: chalk_ir::Ty<Interner>) -> Self {\n-        match chalk.data().clone() {\n+        match chalk.data(&Interner).clone() {\n             chalk_ir::TyData::Apply(apply_ty) => match apply_ty.name {\n                 TypeName::Error => Ty::Unknown,\n                 _ => {\n@@ -218,13 +293,13 @@ impl ToChalk for Substs {\n     type Chalk = chalk_ir::Substitution<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Substitution<Interner> {\n-        chalk_ir::Substitution::from(self.iter().map(|ty| ty.clone().to_chalk(db)))\n+        chalk_ir::Substitution::from(&Interner, self.iter().map(|ty| ty.clone().to_chalk(db)))\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, parameters: chalk_ir::Substitution<Interner>) -> Substs {\n         let tys = parameters\n-            .into_iter()\n-            .map(|p| match p.ty() {\n+            .iter(&Interner)\n+            .map(|p| match p.ty(&Interner) {\n                 Some(ty) => from_chalk(db, ty.clone()),\n                 None => unimplemented!(),\n             })\n@@ -400,8 +475,8 @@ impl ToChalk for Obligation {\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::DomainGoal<Interner> {\n         match self {\n-            Obligation::Trait(tr) => tr.to_chalk(db).cast(),\n-            Obligation::Projection(pr) => pr.to_chalk(db).cast(),\n+            Obligation::Trait(tr) => tr.to_chalk(db).cast(&Interner),\n+            Obligation::Projection(pr) => pr.to_chalk(db).cast(&Interner),\n         }\n     }\n \n@@ -438,8 +513,8 @@ impl ToChalk for Arc<super::TraitEnvironment> {\n                 continue;\n             }\n             let program_clause: chalk_ir::ProgramClause<Interner> =\n-                pred.clone().to_chalk(db).cast();\n-            clauses.push(program_clause.into_from_env_clause());\n+                pred.clone().to_chalk(db).cast(&Interner);\n+            clauses.push(program_clause.into_from_env_clause(&Interner));\n         }\n         chalk_ir::Environment::new().add_clauses(clauses)\n     }\n@@ -578,9 +653,9 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n             .map(|impl_| impl_.to_chalk(self.db))\n             .collect();\n \n-        let ty: Ty = from_chalk(self.db, parameters[0].assert_ty_ref().clone());\n+        let ty: Ty = from_chalk(self.db, parameters[0].assert_ty_ref(&Interner).clone());\n         let arg: Option<Ty> =\n-            parameters.get(1).map(|p| from_chalk(self.db, p.assert_ty_ref().clone()));\n+            parameters.get(1).map(|p| from_chalk(self.db, p.assert_ty_ref(&Interner).clone()));\n \n         builtin::get_builtin_impls(self.db, self.krate, &ty, &arg, trait_, |i| {\n             result.push(i.to_chalk(self.db))"}]}