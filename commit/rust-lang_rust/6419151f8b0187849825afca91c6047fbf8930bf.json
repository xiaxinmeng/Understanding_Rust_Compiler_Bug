{"sha": "6419151f8b0187849825afca91c6047fbf8930bf", "node_id": "C_kwDOAAsO6NoAKDY0MTkxNTFmOGIwMTg3ODQ5ODI1YWZjYTkxYzYwNDdmYmY4OTMwYmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-18T13:13:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-18T13:13:36Z"}, "message": "Rollup merge of #103594 - maniwani:fix-issue-91417, r=thomcc\n\nFix non-associativity of `Instant` math on `aarch64-apple-darwin` targets\n\nThis is a duplicate of #94100 (since the original author is unresponsive), which resolves #91417.\n\nOn `aarch64-apple-darwin` targets, the internal resolution of `Instant` is lower than that of `Duration`, so math between them becomes non-associative with small-enough durations.\n\nThis PR makes this target use the standard Unix implementation (where `Instant` has 1ns resolution), but with `CLOCK_UPTIME_RAW` so it still returns the same values as `mach_absolute_time`[^1].\n\n(Edit: I need someone to confirm that this still works, I do not have access to an M1 device.)\n\n[^1]: https://www.manpagez.com/man/3/clock_gettime/", "tree": {"sha": "5dd5e5432defd361b715a6a9c1d1d41a1aeda7a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd5e5432defd361b715a6a9c1d1d41a1aeda7a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6419151f8b0187849825afca91c6047fbf8930bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjd4UACRBK7hj4Ov3rIwAA56sIADKSdTimeVa5td8uYSKKRaGK\nE3xAnbBIe+9nNjeh0QJc22rFGM2rkIsuOeKSBtauH+cNXlAu7proZFPvqzucrFTO\neAolgx1fz1P/VQmlkZOXz2/ltKLy8WBe4CDCrLtxERaxWum11Z3u5p8/ZQOKRyHz\nitg34lS5qBj7cziQbBY+Y2XTn14U/cG7bEqOtGc0ROkdSTgq9zyXcD5UuCC4ihMb\n0iWRokQ6Td5pa8wlleraG9T8xsPOWgWMv3CBrqQUSM6OlsTo6+rBORRnp3cGhJpk\nnLj8iv4IPIKSSowaAoOdjF8xl+S3yibkqH0eV4zKW/mlp69wEnlbHYb0gwub3/E=\n=KVWr\n-----END PGP SIGNATURE-----\n", "payload": "tree 5dd5e5432defd361b715a6a9c1d1d41a1aeda7a9\nparent 3efbf3022012f3dbebd6743bf8e53f50cb1d0488\nparent f4f515973ecc689029b64759ff43dbba0e207be2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668777216 +0100\ncommitter GitHub <noreply@github.com> 1668777216 +0100\n\nRollup merge of #103594 - maniwani:fix-issue-91417, r=thomcc\n\nFix non-associativity of `Instant` math on `aarch64-apple-darwin` targets\n\nThis is a duplicate of #94100 (since the original author is unresponsive), which resolves #91417.\n\nOn `aarch64-apple-darwin` targets, the internal resolution of `Instant` is lower than that of `Duration`, so math between them becomes non-associative with small-enough durations.\n\nThis PR makes this target use the standard Unix implementation (where `Instant` has 1ns resolution), but with `CLOCK_UPTIME_RAW` so it still returns the same values as `mach_absolute_time`[^1].\n\n(Edit: I need someone to confirm that this still works, I do not have access to an M1 device.)\n\n[^1]: https://www.manpagez.com/man/3/clock_gettime/\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6419151f8b0187849825afca91c6047fbf8930bf", "html_url": "https://github.com/rust-lang/rust/commit/6419151f8b0187849825afca91c6047fbf8930bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6419151f8b0187849825afca91c6047fbf8930bf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3efbf3022012f3dbebd6743bf8e53f50cb1d0488", "url": "https://api.github.com/repos/rust-lang/rust/commits/3efbf3022012f3dbebd6743bf8e53f50cb1d0488", "html_url": "https://github.com/rust-lang/rust/commit/3efbf3022012f3dbebd6743bf8e53f50cb1d0488"}, {"sha": "f4f515973ecc689029b64759ff43dbba0e207be2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f515973ecc689029b64759ff43dbba0e207be2", "html_url": "https://github.com/rust-lang/rust/commit/f4f515973ecc689029b64759ff43dbba0e207be2"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "ffcc507d2a763f9a430d99af59c098caa5b79892", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6419151f8b0187849825afca91c6047fbf8930bf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6419151f8b0187849825afca91c6047fbf8930bf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=6419151f8b0187849825afca91c6047fbf8930bf", "patch": "@@ -149,7 +149,11 @@ impl From<libc::timespec> for Timespec {\n     }\n }\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+#[cfg(any(\n+    all(target_os = \"macos\", any(not(target_arch = \"aarch64\"), miri)),\n+    target_os = \"ios\",\n+    target_os = \"watchos\"\n+))]\n mod inner {\n     use crate::sync::atomic::{AtomicU64, Ordering};\n     use crate::sys::cvt;\n@@ -265,7 +269,11 @@ mod inner {\n     }\n }\n \n-#[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\")))]\n+#[cfg(not(any(\n+    all(target_os = \"macos\", any(not(target_arch = \"aarch64\"), miri)),\n+    target_os = \"ios\",\n+    target_os = \"watchos\"\n+)))]\n mod inner {\n     use crate::fmt;\n     use crate::mem::MaybeUninit;\n@@ -281,7 +289,11 @@ mod inner {\n \n     impl Instant {\n         pub fn now() -> Instant {\n-            Instant { t: Timespec::now(libc::CLOCK_MONOTONIC) }\n+            #[cfg(target_os = \"macos\")]\n+            const clock_id: libc::clockid_t = libc::CLOCK_UPTIME_RAW;\n+            #[cfg(not(target_os = \"macos\"))]\n+            const clock_id: libc::clockid_t = libc::CLOCK_MONOTONIC;\n+            Instant { t: Timespec::now(clock_id) }\n         }\n \n         pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n@@ -312,13 +324,8 @@ mod inner {\n         }\n     }\n \n-    #[cfg(not(any(target_os = \"dragonfly\", target_os = \"espidf\", target_os = \"horizon\")))]\n-    pub type clock_t = libc::c_int;\n-    #[cfg(any(target_os = \"dragonfly\", target_os = \"espidf\", target_os = \"horizon\"))]\n-    pub type clock_t = libc::c_ulong;\n-\n     impl Timespec {\n-        pub fn now(clock: clock_t) -> Timespec {\n+        pub fn now(clock: libc::clockid_t) -> Timespec {\n             // Try to use 64-bit time in preparation for Y2038.\n             #[cfg(all(target_os = \"linux\", target_env = \"gnu\", target_pointer_width = \"32\"))]\n             {"}, {"sha": "2e64ae59aff24422cf1862c2e18b863b8201efe1", "filename": "library/std/src/time/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6419151f8b0187849825afca91c6047fbf8930bf/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6419151f8b0187849825afca91c6047fbf8930bf/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs?ref=6419151f8b0187849825afca91c6047fbf8930bf", "patch": "@@ -88,6 +88,14 @@ fn instant_math_is_associative() {\n     // Changing the order of instant math shouldn't change the results,\n     // especially when the expression reduces to X + identity.\n     assert_eq!((now + offset) - now, (now - now) + offset);\n+\n+    // On any platform, `Instant` should have the same resolution as `Duration` (e.g. 1 nanosecond)\n+    // or better. Otherwise, math will be non-associative (see #91417).\n+    let now = Instant::now();\n+    let provided_offset = Duration::from_nanos(1);\n+    let later = now + provided_offset;\n+    let measured_offset = later - now;\n+    assert_eq!(measured_offset, provided_offset);\n }\n \n #[test]"}]}