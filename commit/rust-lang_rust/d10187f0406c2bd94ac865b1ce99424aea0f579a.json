{"sha": "d10187f0406c2bd94ac865b1ce99424aea0f579a", "node_id": "C_kwDOAAsO6NoAKGQxMDE4N2YwNDA2YzJiZDk0YWM4NjViMWNlOTk0MjRhZWEwZjU3OWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-04T11:18:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-04T11:18:01Z"}, "message": "Rollup merge of #103780 - compiler-errors:bound-closure-lifetimes, r=jackh726\n\nFix late-bound lifetime closure ICEs in HIR typeck and MIR borrowck\n\nDuring HIR typeck, we need to teach astconv to treat late-bound regions within a closure body as free, fixing escaping bound vars ICEs in both of the issues below.\n\nHowever, this then gets us to MIR borrowck, which itself needs to be taught how to instantiate free region vids for late-bound regions that come from items that _aren't_ the typeck root (for now, just closures).\n\nFixes #103771\nFixes #103736", "tree": {"sha": "d3ffb954a86243196c4864103b0ae8db13a5db21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3ffb954a86243196c4864103b0ae8db13a5db21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d10187f0406c2bd94ac865b1ce99424aea0f579a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZPTpCRBK7hj4Ov3rIwAAT/MIAIODHbnnriWHfO9O+cMJA26e\ncudAA7uFPspDEenwlmK24/BvIR3YY+O3RH+Niy642Vn301JmB5iX9M0rC1CimCCk\nUAbRu01cBYLg5Pjq7jLwk1krZ8oVaegdGPw1ik3SG9BUpW6IhIaqu4IIy2HoJKwW\n0neTm5wkyz6CabXd3TsZFjfs5YES08xRirVfGhkTtbJYH2pOAlzKmGp4B9KsbyK5\nz6ovlJXLiPN0dhYJbeyxYT6XNYr6ll6PmAgGOLpGqWWgnbHhlEt+Z9AXo/u2tI9S\nYEx+NrtPPCaGkX48OcrIZSsfH79/Y+Cu8utMjdm3aFMUx/c5AYVMJKUl2yU8YG0=\n=heIv\n-----END PGP SIGNATURE-----\n", "payload": "tree d3ffb954a86243196c4864103b0ae8db13a5db21\nparent 428dd011cab8e6cca8f807e76105fd40d411e34b\nparent 2768c2fb257fccc692712d5f38d979f4a8f127dd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667560681 +0100\ncommitter GitHub <noreply@github.com> 1667560681 +0100\n\nRollup merge of #103780 - compiler-errors:bound-closure-lifetimes, r=jackh726\n\nFix late-bound lifetime closure ICEs in HIR typeck and MIR borrowck\n\nDuring HIR typeck, we need to teach astconv to treat late-bound regions within a closure body as free, fixing escaping bound vars ICEs in both of the issues below.\n\nHowever, this then gets us to MIR borrowck, which itself needs to be taught how to instantiate free region vids for late-bound regions that come from items that _aren't_ the typeck root (for now, just closures).\n\nFixes #103771\nFixes #103736\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d10187f0406c2bd94ac865b1ce99424aea0f579a", "html_url": "https://github.com/rust-lang/rust/commit/d10187f0406c2bd94ac865b1ce99424aea0f579a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d10187f0406c2bd94ac865b1ce99424aea0f579a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "428dd011cab8e6cca8f807e76105fd40d411e34b", "url": "https://api.github.com/repos/rust-lang/rust/commits/428dd011cab8e6cca8f807e76105fd40d411e34b", "html_url": "https://github.com/rust-lang/rust/commit/428dd011cab8e6cca8f807e76105fd40d411e34b"}, {"sha": "2768c2fb257fccc692712d5f38d979f4a8f127dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2768c2fb257fccc692712d5f38d979f4a8f127dd", "html_url": "https://github.com/rust-lang/rust/commit/2768c2fb257fccc692712d5f38d979f4a8f127dd"}], "stats": {"total": 199, "additions": 161, "deletions": 38}, "files": [{"sha": "0e7f243bcf36ced6c9a1889d797b98839f0d8a8a", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10187f0406c2bd94ac865b1ce99424aea0f579a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10187f0406c2bd94ac865b1ce99424aea0f579a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=d10187f0406c2bd94ac865b1ce99424aea0f579a", "patch": "@@ -2314,7 +2314,7 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n             tcx,\n             closure_substs,\n             self.num_external_vids,\n-            tcx.typeck_root_def_id(closure_def_id),\n+            closure_def_id.expect_local(),\n         );\n         debug!(\"apply_requirements: closure_mapping={:?}\", closure_mapping);\n "}, {"sha": "618da9e3253252886807c2413eb32a57a5d55af4", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 93, "deletions": 34, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/d10187f0406c2bd94ac865b1ce99424aea0f579a/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10187f0406c2bd94ac865b1ce99424aea0f579a/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=d10187f0406c2bd94ac865b1ce99424aea0f579a", "patch": "@@ -22,7 +22,9 @@ use rustc_hir::{BodyOwnerKind, HirId};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::{self, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt};\n+use rustc_middle::ty::{\n+    self, DefIdTree, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt,\n+};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use std::iter;\n \n@@ -241,15 +243,15 @@ impl<'tcx> UniversalRegions<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         closure_substs: SubstsRef<'tcx>,\n         expected_num_vars: usize,\n-        typeck_root_def_id: DefId,\n+        closure_def_id: LocalDefId,\n     ) -> IndexVec<RegionVid, ty::Region<'tcx>> {\n         let mut region_mapping = IndexVec::with_capacity(expected_num_vars);\n         region_mapping.push(tcx.lifetimes.re_static);\n         tcx.for_each_free_region(&closure_substs, |fr| {\n             region_mapping.push(fr);\n         });\n \n-        for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n+        for_each_late_bound_region_in_recursive_scope(tcx, tcx.local_parent(closure_def_id), |r| {\n             region_mapping.push(r);\n         });\n \n@@ -339,9 +341,8 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // tests, and the resulting print-outs include def-ids\n                 // and other things that are not stable across tests!\n                 // So we just include the region-vid. Annoying.\n-                let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n-                for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n-                    err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r),));\n+                for_each_late_bound_region_in_recursive_scope(tcx, def_id.expect_local(), |r| {\n+                    err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r)));\n                 });\n             }\n             DefiningTy::Generator(def_id, substs, _) => {\n@@ -354,9 +355,8 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // FIXME: As above, we'd like to print out the region\n                 // `r` but doing so is not stable across architectures\n                 // and so forth.\n-                let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n-                for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n-                    err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r),));\n+                for_each_late_bound_region_in_recursive_scope(tcx, def_id.expect_local(), |r| {\n+                    err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r)));\n                 });\n             }\n             DefiningTy::FnDef(def_id, substs) => {\n@@ -421,13 +421,24 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             first_extern_index\n         } else {\n             // If this is a closure, generator, or inline-const, then the late-bound regions from the enclosing\n-            // function are actually external regions to us. For example, here, 'a is not local\n+            // function/closures are actually external regions to us. For example, here, 'a is not local\n             // to the closure c (although it is local to the fn foo):\n             // fn foo<'a>() {\n             //     let c = || { let x: &'a u32 = ...; }\n             // }\n-            self.infcx\n-                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices);\n+            for_each_late_bound_region_in_recursive_scope(\n+                self.infcx.tcx,\n+                self.infcx.tcx.local_parent(self.mir_def.did),\n+                |r| {\n+                    debug!(?r);\n+                    if !indices.indices.contains_key(&r) {\n+                        let region_vid = self.infcx.next_nll_region_var(FR);\n+                        debug!(?region_vid);\n+                        indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+                    }\n+                },\n+            );\n+\n             // Any regions created during the execution of `defining_ty` or during the above\n             // late-bound region replacement are all considered 'extern' regions\n             self.infcx.num_region_vars()\n@@ -444,12 +455,16 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             bound_inputs_and_output,\n             &mut indices,\n         );\n-        // Converse of above, if this is a function then the late-bound regions declared on its\n-        // signature are local to the fn.\n-        if self.mir_def.did.to_def_id() == typeck_root_def_id {\n-            self.infcx\n-                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices);\n-        }\n+        // Converse of above, if this is a function/closure then the late-bound regions declared on its\n+        // signature are local.\n+        for_each_late_bound_region_in_item(self.infcx.tcx, self.mir_def.did, |r| {\n+            debug!(?r);\n+            if !indices.indices.contains_key(&r) {\n+                let region_vid = self.infcx.next_nll_region_var(FR);\n+                debug!(?region_vid);\n+                indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+            }\n+        });\n \n         let (unnormalized_output_ty, mut unnormalized_input_tys) =\n             inputs_and_output.split_last().unwrap();\n@@ -692,7 +707,13 @@ trait InferCtxtExt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>;\n \n-    fn replace_late_bound_regions_with_nll_infer_vars(\n+    fn replace_late_bound_regions_with_nll_infer_vars_in_recursive_scope(\n+        &self,\n+        mir_def_id: LocalDefId,\n+        indices: &mut UniversalRegionIndices<'tcx>,\n+    );\n+\n+    fn replace_late_bound_regions_with_nll_infer_vars_in_item(\n         &self,\n         mir_def_id: LocalDefId,\n         indices: &mut UniversalRegionIndices<'tcx>,\n@@ -746,13 +767,28 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     /// set of late-bound regions and checks for any that we have not yet seen, adding them to the\n     /// inputs vector.\n     #[instrument(skip(self, indices))]\n-    fn replace_late_bound_regions_with_nll_infer_vars(\n+    fn replace_late_bound_regions_with_nll_infer_vars_in_recursive_scope(\n+        &self,\n+        mir_def_id: LocalDefId,\n+        indices: &mut UniversalRegionIndices<'tcx>,\n+    ) {\n+        for_each_late_bound_region_in_recursive_scope(self.tcx, mir_def_id, |r| {\n+            debug!(?r);\n+            if !indices.indices.contains_key(&r) {\n+                let region_vid = self.next_nll_region_var(FR);\n+                debug!(?region_vid);\n+                indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+            }\n+        });\n+    }\n+\n+    #[instrument(skip(self, indices))]\n+    fn replace_late_bound_regions_with_nll_infer_vars_in_item(\n         &self,\n         mir_def_id: LocalDefId,\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) {\n-        let typeck_root_def_id = self.tcx.typeck_root_def_id(mir_def_id.to_def_id());\n-        for_each_late_bound_region_defined_on(self.tcx, typeck_root_def_id, |r| {\n+        for_each_late_bound_region_in_item(self.tcx, mir_def_id, |r| {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = self.next_nll_region_var(FR);\n@@ -803,21 +839,44 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     }\n }\n \n-/// Iterates over the late-bound regions defined on fn_def_id and\n-/// invokes `f` with the liberated form of each one.\n-fn for_each_late_bound_region_defined_on<'tcx>(\n+/// Iterates over the late-bound regions defined on `mir_def_id` and all of its\n+/// parents, up to the typeck root, and invokes `f` with the liberated form\n+/// of each one.\n+fn for_each_late_bound_region_in_recursive_scope<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    fn_def_id: DefId,\n+    mut mir_def_id: LocalDefId,\n     mut f: impl FnMut(ty::Region<'tcx>),\n ) {\n-    if let Some(late_bounds) = tcx.is_late_bound_map(fn_def_id.expect_local()) {\n-        for &region_def_id in late_bounds.iter() {\n-            let name = tcx.item_name(region_def_id.to_def_id());\n-            let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n-                scope: fn_def_id,\n-                bound_region: ty::BoundRegionKind::BrNamed(region_def_id.to_def_id(), name),\n-            }));\n-            f(liberated_region);\n+    let typeck_root_def_id = tcx.typeck_root_def_id(mir_def_id.to_def_id());\n+\n+    // Walk up the tree, collecting late-bound regions until we hit the typeck root\n+    loop {\n+        for_each_late_bound_region_in_item(tcx, mir_def_id, &mut f);\n+\n+        if mir_def_id.to_def_id() == typeck_root_def_id {\n+            break;\n+        } else {\n+            mir_def_id = tcx.local_parent(mir_def_id);\n         }\n     }\n }\n+\n+/// Iterates over the late-bound regions defined on `mir_def_id` and all of its\n+/// parents, up to the typeck root, and invokes `f` with the liberated form\n+/// of each one.\n+fn for_each_late_bound_region_in_item<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    mir_def_id: LocalDefId,\n+    mut f: impl FnMut(ty::Region<'tcx>),\n+) {\n+    if !tcx.def_kind(mir_def_id).is_fn_like() {\n+        return;\n+    }\n+\n+    for bound_var in tcx.late_bound_vars(tcx.hir().local_def_id_to_hir_id(mir_def_id)) {\n+        let ty::BoundVariableKind::Region(bound_region) = bound_var else { continue; };\n+        let liberated_region = tcx\n+            .mk_region(ty::ReFree(ty::FreeRegion { scope: mir_def_id.to_def_id(), bound_region }));\n+        f(liberated_region);\n+    }\n+}"}, {"sha": "3d07f3fbc674dbb3d32ba541a95cf0c5c0309698", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d10187f0406c2bd94ac865b1ce99424aea0f579a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10187f0406c2bd94ac865b1ce99424aea0f579a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=d10187f0406c2bd94ac865b1ce99424aea0f579a", "patch": "@@ -1377,11 +1377,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             } else if let Some(body_id) = outermost_body {\n                 let fn_id = self.tcx.hir().body_owner(body_id);\n                 match self.tcx.hir().get(fn_id) {\n-                    Node::Item(&hir::Item { kind: hir::ItemKind::Fn(..), .. })\n-                    | Node::TraitItem(&hir::TraitItem {\n+                    Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. })\n+                    | Node::TraitItem(hir::TraitItem {\n                         kind: hir::TraitItemKind::Fn(..), ..\n                     })\n-                    | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }) => {\n+                    | Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. })\n+                    | Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {\n                         let scope = self.tcx.hir().local_def_id(fn_id);\n                         def = Region::Free(scope.to_def_id(), def.id().unwrap());\n                     }"}, {"sha": "bb5c7552fdaa8530d002e15c560b71f102538218", "filename": "src/test/ui/closures/binder/late-bound-in-body.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d10187f0406c2bd94ac865b1ce99424aea0f579a/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Flate-bound-in-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10187f0406c2bd94ac865b1ce99424aea0f579a/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Flate-bound-in-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Flate-bound-in-body.rs?ref=d10187f0406c2bd94ac865b1ce99424aea0f579a", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(closure_lifetime_binder)]\n+\n+fn main() {\n+    let _ = for<'a> || -> () {\n+        let _: &'a bool = &true;\n+    };\n+}"}, {"sha": "6bfc6c80b78822ad06ebea3ac9cb07a4fe60766d", "filename": "src/test/ui/closures/binder/nested-closures-regions.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d10187f0406c2bd94ac865b1ce99424aea0f579a/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10187f0406c2bd94ac865b1ce99424aea0f579a/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.rs?ref=d10187f0406c2bd94ac865b1ce99424aea0f579a", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(closure_lifetime_binder)]\n+#![feature(rustc_attrs)]\n+\n+#[rustc_regions]\n+fn main() {\n+    for<'a> || -> () { for<'c> |_: &'a ()| -> () {}; };\n+}"}, {"sha": "b385e0ed6e0a5a0fef103a79ee5818ab83257572", "filename": "src/test/ui/closures/binder/nested-closures-regions.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d10187f0406c2bd94ac865b1ce99424aea0f579a/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d10187f0406c2bd94ac865b1ce99424aea0f579a/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.stderr?ref=d10187f0406c2bd94ac865b1ce99424aea0f579a", "patch": "@@ -0,0 +1,38 @@\n+note: external requirements\n+  --> $DIR/nested-closures-regions.rs:8:24\n+   |\n+LL |     for<'a> || -> () { for<'c> |_: &'a ()| -> () {}; };\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: main::{closure#0}::{closure#0} with closure substs [\n+               i8,\n+               extern \"rust-call\" fn((&(),)),\n+               (),\n+           ]\n+   = note: late-bound region is '_#4r\n+   = note: late-bound region is '_#2r\n+   = note: number of external vids: 3\n+   = note: where '_#1r: '_#2r\n+   = note: where '_#2r: '_#1r\n+\n+note: no external requirements\n+  --> $DIR/nested-closures-regions.rs:8:5\n+   |\n+LL |     for<'a> || -> () { for<'c> |_: &'a ()| -> () {}; };\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: main::{closure#0} with closure substs [\n+               i8,\n+               extern \"rust-call\" fn(()),\n+               (),\n+           ]\n+   = note: late-bound region is '_#2r\n+\n+note: no external requirements\n+  --> $DIR/nested-closures-regions.rs:7:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^\n+   |\n+   = note: defining type: main\n+"}, {"sha": "b3c36e7eebb7aa37ccd8963a501be6a961d2a5e1", "filename": "src/test/ui/closures/binder/nested-closures.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d10187f0406c2bd94ac865b1ce99424aea0f579a/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10187f0406c2bd94ac865b1ce99424aea0f579a/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures.rs?ref=d10187f0406c2bd94ac865b1ce99424aea0f579a", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+#![feature(closure_lifetime_binder)]\n+\n+fn main() {\n+    for<'a> || -> () { for<'c> |_: &'a ()| -> () {}; };\n+}"}]}