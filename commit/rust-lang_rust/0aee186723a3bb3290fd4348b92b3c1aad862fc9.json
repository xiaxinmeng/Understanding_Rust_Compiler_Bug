{"sha": "0aee186723a3bb3290fd4348b92b3c1aad862fc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZWUxODY3MjNhM2JiMzI5MGZkNDM0OGI5MmIzYzFhYWQ4NjJmYzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-07T10:24:28Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-07T10:24:28Z"}, "message": "make MaybeUninit::as_(mut_)ptr const", "tree": {"sha": "e8d13b62ed6956dfa6434a4f12833a416b4aed90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8d13b62ed6956dfa6434a4f12833a416b4aed90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aee186723a3bb3290fd4348b92b3c1aad862fc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aee186723a3bb3290fd4348b92b3c1aad862fc9", "html_url": "https://github.com/rust-lang/rust/commit/0aee186723a3bb3290fd4348b92b3c1aad862fc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aee186723a3bb3290fd4348b92b3c1aad862fc9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4c940f0821754a98491b2d23fbb5323c14a2bf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c940f0821754a98491b2d23fbb5323c14a2bf5", "html_url": "https://github.com/rust-lang/rust/commit/d4c940f0821754a98491b2d23fbb5323c14a2bf5"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "132b9db19ce08aed31d85a32be3c1c505dba2236", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0aee186723a3bb3290fd4348b92b3c1aad862fc9/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aee186723a3bb3290fd4348b92b3c1aad862fc9/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=0aee186723a3bb3290fd4348b92b3c1aad862fc9", "patch": "@@ -405,9 +405,11 @@ impl<T> MaybeUninit<T> {\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n     /// until they are, it is advisable to avoid them.)\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+    #[rustc_const_unstable(feature=\"maybe_uninit_as_ptr\", issue = \"none\")]\n     #[inline(always)]\n-    pub fn as_ptr(&self) -> *const T {\n-        unsafe { &*self.value as *const T }\n+    pub const fn as_ptr(&self) -> *const T {\n+        // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.\n+        self as *const _ as *const T\n     }\n \n     /// Gets a mutable pointer to the contained value. Reading from this pointer or turning it\n@@ -442,9 +444,11 @@ impl<T> MaybeUninit<T> {\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n     /// until they are, it is advisable to avoid them.)\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+    #[rustc_const_unstable(feature=\"maybe_uninit_as_ptr\", issue = \"none\")]\n     #[inline(always)]\n-    pub fn as_mut_ptr(&mut self) -> *mut T {\n-        unsafe { &mut *self.value as *mut T }\n+    pub const fn as_mut_ptr(&mut self) -> *mut T {\n+        // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.\n+        self as *mut _ as *mut T\n     }\n \n     /// Extracts the value from the `MaybeUninit<T>` container. This is a great way"}]}