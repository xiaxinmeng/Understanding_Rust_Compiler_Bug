{"sha": "2b313b1d321797e7c161c40b102c963cf53dd7ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMzEzYjFkMzIxNzk3ZTdjMTYxYzQwYjEwMmM5NjNjZjUzZGQ3YWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-30T19:57:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-30T19:57:28Z"}, "message": "Rollup merge of #62235 - varkor:must_use-adt-components, r=Centril\n\nExtend the `#[must_use]` lint to arrays\n\nBased on top of https://github.com/rust-lang/rust/pull/62228.\n\nr? @Centril", "tree": {"sha": "272ea627ebd4991252d799390669e20d9e10bb59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/272ea627ebd4991252d799390669e20d9e10bb59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b313b1d321797e7c161c40b102c963cf53dd7ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdGRQoCRBK7hj4Ov3rIwAAdHIIAF7PvFRpLG1AHkD978W5uv67\nAPmULMMJf/EX3BFO2JGGuOjiUQdspqvaYucmqla/Ekqq6k+pg5Y/HEmOfSocDegH\nRNtWRVlYmhYNwhdn4bQPECRzrqmgOBgv6sWNTDAsL8UfFTjHeLFBOC83S1uIKXnF\n8GgjExzUP612Q08iB+J9goH+WT5TI2Byr59wOLQlKdx3hTTwjhXTZjSMImp1hVrK\nZp/8i13CPJvZ4GIsA/JY4uYyvoLHYRCdBMcn39q5o7E8Hgi/jAuHOWSB3M+bdv1d\nHxyPtnImKGZwuZORXAVbYKW1R9vDjBK3FSUAva1mUBevjy/k1EGVSO9u/GXb620=\n=+Jz8\n-----END PGP SIGNATURE-----\n", "payload": "tree 272ea627ebd4991252d799390669e20d9e10bb59\nparent c779f4e89c0abe949195a28418be11fddf77b5a3\nparent 76f5b50716d609d09e53cf537be54a42bd0f007d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561924648 +0200\ncommitter GitHub <noreply@github.com> 1561924648 +0200\n\nRollup merge of #62235 - varkor:must_use-adt-components, r=Centril\n\nExtend the `#[must_use]` lint to arrays\n\nBased on top of https://github.com/rust-lang/rust/pull/62228.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b313b1d321797e7c161c40b102c963cf53dd7ac", "html_url": "https://github.com/rust-lang/rust/commit/2b313b1d321797e7c161c40b102c963cf53dd7ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b313b1d321797e7c161c40b102c963cf53dd7ac/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c779f4e89c0abe949195a28418be11fddf77b5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c779f4e89c0abe949195a28418be11fddf77b5a3", "html_url": "https://github.com/rust-lang/rust/commit/c779f4e89c0abe949195a28418be11fddf77b5a3"}, {"sha": "76f5b50716d609d09e53cf537be54a42bd0f007d", "url": "https://api.github.com/repos/rust-lang/rust/commits/76f5b50716d609d09e53cf537be54a42bd0f007d", "html_url": "https://github.com/rust-lang/rust/commit/76f5b50716d609d09e53cf537be54a42bd0f007d"}], "stats": {"total": 139, "additions": 127, "deletions": 12}, "files": [{"sha": "2db2e0bc0da96b5b0100e41ce5526556bdfd455f", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2b313b1d321797e7c161c40b102c963cf53dd7ac/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b313b1d321797e7c161c40b102c963cf53dd7ac/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=2b313b1d321797e7c161c40b102c963cf53dd7ac", "patch": "@@ -48,7 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         let ty = cx.tables.expr_ty(&expr);\n-        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\");\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\", false);\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -133,32 +133,39 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             ty: Ty<'tcx>,\n             expr: &hir::Expr,\n             span: Span,\n-            descr_pre_path: &str,\n-            descr_post_path: &str,\n+            descr_pre: &str,\n+            descr_post: &str,\n+            plural: bool,\n         ) -> bool {\n             if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(\n                 cx.tcx.hir().get_module_parent(expr.hir_id), ty)\n             {\n                 return true;\n             }\n \n+            let plural_suffix = if plural { \"s\" } else { \"\" };\n+\n             match ty.sty {\n                 ty::Adt(..) if ty.is_box() => {\n                     let boxed_ty = ty.boxed_ty();\n-                    let descr_pre_path = &format!(\"{}boxed \", descr_pre_path);\n-                    check_must_use_ty(cx, boxed_ty, expr, span, descr_pre_path, descr_post_path)\n+                    let descr_pre = &format!(\"{}boxed \", descr_pre);\n+                    check_must_use_ty(cx, boxed_ty, expr, span, descr_pre, descr_post, plural)\n                 }\n                 ty::Adt(def, _) => {\n-                    check_must_use_def(cx, def.did, span, descr_pre_path, descr_post_path)\n+                    check_must_use_def(cx, def.did, span, descr_pre, descr_post)\n                 }\n                 ty::Opaque(def, _) => {\n                     let mut has_emitted = false;\n                     for (predicate, _) in &cx.tcx.predicates_of(def).predicates {\n                         if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n                             let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n                             let def_id = trait_ref.def_id;\n-                            let descr_pre = &format!(\"{}implementer of \", descr_pre_path);\n-                            if check_must_use_def(cx, def_id, span, descr_pre, descr_post_path) {\n+                            let descr_pre = &format!(\n+                                \"{}implementer{} of \",\n+                                descr_pre,\n+                                plural_suffix,\n+                            );\n+                            if check_must_use_def(cx, def_id, span, descr_pre, descr_post) {\n                                 has_emitted = true;\n                                 break;\n                             }\n@@ -171,8 +178,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                     for predicate in binder.skip_binder().iter() {\n                         if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n                             let def_id = trait_ref.def_id;\n-                            let descr_post = &format!(\" trait object{}\", descr_post_path);\n-                            if check_must_use_def(cx, def_id, span, descr_pre_path, descr_post) {\n+                            let descr_post = &format!(\n+                                \" trait object{}{}\",\n+                                plural_suffix,\n+                                descr_post,\n+                            );\n+                            if check_must_use_def(cx, def_id, span, descr_pre, descr_post) {\n                                 has_emitted = true;\n                                 break;\n                             }\n@@ -189,14 +200,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                         vec![]\n                     };\n                     for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n-                        let descr_post_path = &format!(\" in tuple element {}\", i);\n+                        let descr_post = &format!(\" in tuple element {}\", i);\n                         let span = *spans.get(i).unwrap_or(&span);\n-                        if check_must_use_ty(cx, ty, expr, span, descr_pre_path, descr_post_path) {\n+                        if check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, plural) {\n                             has_emitted = true;\n                         }\n                     }\n                     has_emitted\n                 }\n+                ty::Array(ty, len) => match len.assert_usize(cx.tcx) {\n+                    // If the array is definitely non-empty, we can do `#[must_use]` checking.\n+                    Some(n) if n != 0 => {\n+                        let descr_pre = &format!(\n+                            \"{}array{} of \",\n+                            descr_pre,\n+                            plural_suffix,\n+                        );\n+                        check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, true)\n+                    }\n+                    // Otherwise, we don't lint, to avoid false positives.\n+                    _ => false,\n+                }\n                 _ => false,\n             }\n         }"}, {"sha": "97825dd2f6c43d5c17993bcbbf8083557ccc6f7c", "filename": "src/test/ui/lint/must_use-array.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2b313b1d321797e7c161c40b102c963cf53dd7ac/src%2Ftest%2Fui%2Flint%2Fmust_use-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b313b1d321797e7c161c40b102c963cf53dd7ac/src%2Ftest%2Fui%2Flint%2Fmust_use-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-array.rs?ref=2b313b1d321797e7c161c40b102c963cf53dd7ac", "patch": "@@ -0,0 +1,47 @@\n+#![deny(unused_must_use)]\n+\n+#[must_use]\n+struct S;\n+\n+struct A;\n+\n+#[must_use]\n+trait T {}\n+\n+impl T for A {}\n+\n+fn empty() -> [S; 0] {\n+    []\n+}\n+\n+fn singleton() -> [S; 1] {\n+    [S]\n+}\n+\n+fn many() -> [S; 4] {\n+    [S, S, S, S]\n+}\n+\n+fn array_of_impl_trait() -> [impl T; 2] {\n+    [A, A]\n+}\n+\n+fn impl_array() -> [(u8, Box<dyn T>); 2] {\n+    [(0, Box::new(A)), (0, Box::new(A))]\n+}\n+\n+fn array_of_arrays_of_arrays() -> [[[S; 1]; 2]; 1] {\n+    [[[S], [S]]]\n+}\n+\n+fn main() {\n+    empty(); // ok\n+    singleton(); //~ ERROR unused array of `S` that must be used\n+    many(); //~ ERROR unused array of `S` that must be used\n+    ([S], 0, ()); //~ ERROR unused array of `S` in tuple element 0 that must be used\n+    array_of_impl_trait(); //~ ERROR unused array of implementers of `T` that must be used\n+    impl_array();\n+    //~^ ERROR unused array of boxed `T` trait objects in tuple element 1 that must be used\n+    array_of_arrays_of_arrays();\n+    //~^ ERROR unused array of arrays of arrays of `S` that must be used\n+}"}, {"sha": "a6dbd8e93d4d323f071c51a0d3928c6b10f3a04d", "filename": "src/test/ui/lint/must_use-array.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2b313b1d321797e7c161c40b102c963cf53dd7ac/src%2Ftest%2Fui%2Flint%2Fmust_use-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b313b1d321797e7c161c40b102c963cf53dd7ac/src%2Ftest%2Fui%2Flint%2Fmust_use-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-array.stderr?ref=2b313b1d321797e7c161c40b102c963cf53dd7ac", "patch": "@@ -0,0 +1,44 @@\n+error: unused array of `S` that must be used\n+  --> $DIR/must_use-array.rs:39:5\n+   |\n+LL |     singleton();\n+   |     ^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/must_use-array.rs:1:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: unused array of `S` that must be used\n+  --> $DIR/must_use-array.rs:40:5\n+   |\n+LL |     many();\n+   |     ^^^^^^^\n+\n+error: unused array of `S` in tuple element 0 that must be used\n+  --> $DIR/must_use-array.rs:41:6\n+   |\n+LL |     ([S], 0, ());\n+   |      ^^^\n+\n+error: unused array of implementers of `T` that must be used\n+  --> $DIR/must_use-array.rs:42:5\n+   |\n+LL |     array_of_impl_trait();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused array of boxed `T` trait objects in tuple element 1 that must be used\n+  --> $DIR/must_use-array.rs:43:5\n+   |\n+LL |     impl_array();\n+   |     ^^^^^^^^^^^^^\n+\n+error: unused array of arrays of arrays of `S` that must be used\n+  --> $DIR/must_use-array.rs:45:5\n+   |\n+LL |     array_of_arrays_of_arrays();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}