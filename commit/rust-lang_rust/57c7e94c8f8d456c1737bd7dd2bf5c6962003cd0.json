{"sha": "57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YzdlOTRjOGY4ZDQ1NmMxNzM3YmQ3ZGQyYmY1YzY5NjIwMDNjZDA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-16T05:09:09Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-16T05:09:09Z"}, "message": "Encode and decode tag types in dwarf properly. Add list module to std. Shift rustc to use std.util.option. Fix various dependent bugs. Closes #73.", "tree": {"sha": "3eea63d46aa8f01562bf02c33eca1e243df26470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eea63d46aa8f01562bf02c33eca1e243df26470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "html_url": "https://github.com/rust-lang/rust/commit/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc2d4828e7d15e7c1203520e158d12c82915bf32", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2d4828e7d15e7c1203520e158d12c82915bf32", "html_url": "https://github.com/rust-lang/rust/commit/fc2d4828e7d15e7c1203520e158d12c82915bf32"}], "stats": {"total": 357, "additions": 243, "deletions": 114}, "files": [{"sha": "08f8c3478f8f14aa78bd7368dd29e674b588bd1a", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 130, "deletions": 35, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "patch": "@@ -1211,6 +1211,19 @@ let (abbrev_subprogram:abbrev) =\n    |])\n ;;\n \n+let (abbrev_tag_constructor_subprogram:abbrev) =\n+  (DW_TAG_subprogram, DW_CHILDREN_yes,\n+   [|\n+     (DW_AT_name, DW_FORM_string);\n+     (DW_AT_rust_tag_type_id, DW_FORM_data4);\n+     (DW_AT_discr_value, DW_FORM_data4);\n+     (DW_AT_low_pc, DW_FORM_addr);\n+     (DW_AT_high_pc, DW_FORM_addr);\n+     (DW_AT_frame_base, DW_FORM_block1);\n+     (DW_AT_return_addr, DW_FORM_block1);\n+   |])\n+;;\n+\n let (abbrev_typedef:abbrev) =\n   (DW_TAG_typedef, DW_CHILDREN_yes,\n    [|\n@@ -1233,7 +1246,7 @@ let (abbrev_variable:abbrev) =\n   (DW_TAG_variable, DW_CHILDREN_no,\n    [|\n      (DW_AT_name, DW_FORM_string);\n-     (DW_AT_location, DW_FORM_block1);\n+     (DW_AT_location, DW_FORM_block4);\n      (DW_AT_type, DW_FORM_ref_addr)\n    |])\n ;;\n@@ -1243,7 +1256,7 @@ let (abbrev_formal:abbrev) =\n   (DW_TAG_formal_parameter, DW_CHILDREN_no,\n    [|\n      (DW_AT_name, DW_FORM_string);\n-     (DW_AT_location, DW_FORM_block1);\n+     (DW_AT_location, DW_FORM_block4);\n      (DW_AT_type, DW_FORM_ref_addr)\n    |])\n ;;\n@@ -1572,7 +1585,7 @@ let dwarf_visitor\n                 ref_addr_for_fix fix\n \n \n-  and size_block4 (sz:size) (add_to_base:bool) : frag =\n+  and size_block4 (sz:size) (push_fbreg:bool) (add_to_base:bool) : frag =\n     (* NB: typarams = \"words following implicit args\" by convention in\n      * ABI/x86.\n      *)\n@@ -1656,7 +1669,12 @@ let dwarf_visitor\n                 DW_OP_and;            (* ... aligned          *)\n               ]\n     in\n-    let ops = sz_ops sz in\n+    let ops =\n+      if push_fbreg\n+      then [ DW_OP_reg abi.Abi.abi_dwarf_fp_reg ]\n+      else []\n+    in\n+    let ops = ops @ (sz_ops sz) in\n     let ops =\n       if add_to_base\n       then ops @ [ DW_OP_plus ]\n@@ -1685,7 +1703,7 @@ let dwarf_visitor\n         let die = DEF (fix, SEQ [|\n                          uleb (get_abbrev_code abbrev_struct_type);\n                          (* DW_AT_byte_size: DW_FORM_block4 *)\n-                         size_block4 (rty_sz rty) false\n+                         size_block4 (rty_sz rty) false false\n                        |]);\n         in\n         let rtys =\n@@ -1706,9 +1724,9 @@ let dwarf_visitor\n                             (* DW_AT_data_member_location: DW_FORM_block4 *)\n                             size_block4\n                               (Il.get_element_offset word_bits rtys i)\n-                              true;\n+                              false true;\n                             (* DW_AT_byte_size: DW_FORM_block4 *)\n-                            size_block4 (rty_sz rtys.(i)) false |]);\n+                            size_block4 (rty_sz rtys.(i)) false false |]);\n             end\n             trec;\n           emit_null_die ()\n@@ -1908,6 +1926,7 @@ let dwarf_visitor\n          *)\n \n         let n_variants = get_n_tag_tups cx ttag in\n+        let n_args = Array.length ttag.Ast.tag_args in\n         let tinfo = Hashtbl.find cx.ctxt_all_tag_info ttag.Ast.tag_id in\n         let rty = referent_type cx (Ast.TY_tag ttag) in\n         let rty_sz = Il.referent_ty_size abi.Abi.abi_word_bits in\n@@ -1921,7 +1940,7 @@ let dwarf_visitor\n           DEF (fix, SEQ [|\n                  uleb (get_abbrev_code abbrev_struct_type);\n                  (* DW_AT_byte_size: DW_FORM_block4 *)\n-                 size_block4 (rty_sz rty) false\n+                 size_block4 (rty_sz rty) false false\n                |])\n         in\n \n@@ -1936,9 +1955,9 @@ let dwarf_visitor\n                  (* DW_AT_data_member_location: DW_FORM_block4 *)\n                  size_block4\n                    (Il.get_element_offset word_bits rtys 0)\n-                   true;\n+                   false true;\n                  (* DW_AT_byte_size: DW_FORM_block4 *)\n-                 size_block4 (rty_sz rtys.(0)) false |]);\n+                 size_block4 (rty_sz rtys.(0)) false false |]);\n         in\n \n         let variant_part_die =\n@@ -1952,6 +1971,7 @@ let dwarf_visitor\n           |]\n         in\n \n+\n         let emit_variant i =\n           let (name, _, _) = Hashtbl.find tinfo.tag_nums i in\n           let ttup = get_nth_tag_tup cx ttag i in\n@@ -1963,9 +1983,19 @@ let dwarf_visitor\n                         (* DW_AT_name: DW_FORM_string *)\n                         ZSTRING name\n                       |]);\n-            ignore (tup ttup);\n+            ignore (ref_type_die (Ast.TY_tup ttup));\n             emit_null_die ();\n         in\n+\n+        let emit_arg i =\n+          let arg = ttag.Ast.tag_args.(i) in\n+          emit_die (SEQ [|\n+                      uleb (get_abbrev_code abbrev_formal_type);\n+                      (* DW_AT_type: DW_FORM_ref_addr *)\n+                      (ref_type_die arg)\n+                    |]);\n+        in\n+\n           emit_die outer_structure_die;\n           emit_die discr_die;\n           emit_die variant_part_die;\n@@ -1974,6 +2004,10 @@ let dwarf_visitor\n             emit_variant i\n           done;\n           emit_null_die (); (* end variant-part *)\n+          for i = 0 to n_args - 1\n+          do\n+            emit_arg i\n+          done;\n           emit_null_die (); (* end outer struct *)\n       in\n \n@@ -2024,9 +2058,7 @@ let dwarf_visitor\n             | Ast.TY_str -> string_type ()\n             | Ast.TY_rec trec -> record trec\n             | Ast.TY_tup ttup -> tup ttup\n-            | Ast.TY_tag ttag ->\n-                let _ = fun _ -> tag_type ttag in\n-                  unspecified_struct DW_RUST_nil\n+            | Ast.TY_tag ttag -> tag_type ttag\n             | Ast.TY_vec t -> unspecified_ptr_with_ref_ty DW_RUST_vec t\n             | Ast.TY_chan t -> unspecified_ptr_with_ref_ty DW_RUST_chan t\n             | Ast.TY_port t -> unspecified_ptr_with_ref_ty DW_RUST_port t\n@@ -2276,6 +2308,41 @@ let dwarf_visitor\n       emit_die subprogram_die\n   in\n \n+  let emit_tag_constructor_die\n+      (id:Ast.ident)\n+      (tid:opaque_id)\n+      (n_slots:int)\n+      (tag_num:int)\n+      (fix:fixup)\n+      : unit =\n+    (* NB: retpc = \"top word of frame-base\" by convention in ABI/x86. *)\n+    let abi = cx.ctxt_abi in\n+    let retpc = Int64.sub abi.Abi.abi_frame_base_sz abi.Abi.abi_word_sz in\n+    let abbrev_code = get_abbrev_code abbrev_tag_constructor_subprogram in\n+    let subprogram_die =\n+      (SEQ [|\n+         uleb abbrev_code;\n+         (* DW_AT_name *)\n+         ZSTRING id;\n+         (* DW_AT_tag_type_id *)\n+         WORD (word_ty_mach, IMM (Int64.of_int (int_of_opaque tid)));\n+         (* DW_AT_discr_value *)\n+         WORD (word_ty_mach, IMM (Int64.of_int tag_num));\n+         if n_slots = 0\n+         then\n+           SEQ [| WORD (word_ty_mach, IMM 0L);\n+                  WORD (word_ty_mach, IMM 0L); |]\n+         else\n+           addr_ranges fix;\n+         (* DW_AT_frame_base *)\n+         dw_form_block1 [| DW_OP_reg abi.Abi.abi_dwarf_fp_reg |];\n+         (* DW_AT_return_addr *)\n+         dw_form_block1 [| DW_OP_fbreg (Asm.IMM retpc); |];\n+       |])\n+    in\n+      emit_die subprogram_die\n+  in\n+\n   let emit_typedef_die\n       (id:Ast.ident)\n       (e:Ast.effect)\n@@ -2331,6 +2398,7 @@ let dwarf_visitor\n               emit_module_die id;\n               emit_type_param_decl_dies item.node.Ast.decl_params;\n             end\n+\n         | Ast.MOD_ITEM_fn _ ->\n             begin\n               let ty = Hashtbl.find cx.ctxt_all_item_types item.id in\n@@ -2350,6 +2418,7 @@ let dwarf_visitor\n                   (Hashtbl.find cx.ctxt_fn_fixups item.id);\n                 emit_type_param_decl_dies item.node.Ast.decl_params;\n             end\n+\n         | Ast.MOD_ITEM_type (e, _) ->\n             begin\n               log cx \"walking typedef '%s' with %d type params\"\n@@ -2359,6 +2428,15 @@ let dwarf_visitor\n                 id e (Hashtbl.find cx.ctxt_all_type_items item.id);\n               emit_type_param_decl_dies item.node.Ast.decl_params;\n             end\n+\n+        | Ast.MOD_ITEM_tag (hslots, tid, n) ->\n+            log cx \"walking tag constructor '%s' with %d type params\"\n+              (path_name())\n+              (Array.length item.node.Ast.decl_params);\n+            emit_tag_constructor_die id tid (Array.length hslots) n\n+              (Hashtbl.find cx.ctxt_fn_fixups item.id);\n+            emit_type_param_decl_dies item.node.Ast.decl_params;\n+\n         | _ -> ()\n     end;\n     inner.Walk.visit_mod_item_pre id params item\n@@ -2386,6 +2464,7 @@ let dwarf_visitor\n       match item.node.Ast.decl_item with\n           Ast.MOD_ITEM_mod _\n         | Ast.MOD_ITEM_fn _\n+        | Ast.MOD_ITEM_tag _\n         | Ast.MOD_ITEM_type _ -> emit_null_die ()\n         | _ -> ()\n     end;\n@@ -2432,8 +2511,8 @@ let dwarf_visitor\n                     uleb abbrev_code;\n                     (* DW_AT_name: DW_FORM_string *)\n                     ZSTRING ident;\n-                    (* DW_AT_location:  DW_FORM_block1 *)\n-                    dw_form_block1 slot_loc;\n+                    (* DW_AT_location:  DW_FORM_block4 *)\n+                    slot_loc;\n                     (* DW_AT_type: DW_FORM_ref_addr *)\n                     ref_slot_die resolved_slot\n                   |]\n@@ -2442,16 +2521,8 @@ let dwarf_visitor\n               in\n                 match htab_search cx.ctxt_slot_offsets s.id with\n                     Some off ->\n-                      begin\n-                        match Il.size_to_expr64 off with\n-                            (* FIXME (issue #73): handle dynamic-size\n-                             * slots.\n-                             *)\n-                            None -> ()\n-                          | Some off ->\n-                              emit_var_die\n-                                [| DW_OP_fbreg off |]\n-                      end\n+                      emit_var_die (size_block4 off true true)\n+\n                   | None ->\n                       (* FIXME (issue #28): handle slots assigned to\n                        * vregs.\n@@ -2791,6 +2862,10 @@ let rec extract_mod_items\n     atab_find die.die_attrs attr\n   in\n \n+  let has_attr die attr =\n+    atab_mem die.die_attrs attr\n+  in\n+\n   let get_str die attr  =\n     match get_attr die attr with\n         (_, DATA_str s) -> s\n@@ -2831,6 +2906,10 @@ let rec extract_mod_items\n     get_num die DW_AT_rust_native_type_id\n   in\n \n+  let get_tag_id die =\n+    get_num die DW_AT_rust_tag_type_id\n+  in\n+\n   let get_type_param_decl die =\n     ((get_str die DW_AT_name), (get_type_param die))\n   in\n@@ -2843,9 +2922,9 @@ let rec extract_mod_items\n \n   let rec get_ty die : Ast.ty =\n \n-    let is_tagged_variant =\n-      Array.length die.die_children == 2 &&\n-        die.die_children.(1).die_tag = DW_TAG_variant\n+    let is_tagged_variant die =\n+      Array.length die.die_children >= 2 &&\n+      die.die_children.(1).die_tag = DW_TAG_variant_part\n     in\n \n       match die.die_tag with\n@@ -2913,13 +2992,19 @@ let rec extract_mod_items\n                 | _ -> bug () \"unexpected type of DW_TAG_base_type\"\n             end\n \n-        | DW_TAG_structure_type when is_tagged_variant ->\n+        | DW_TAG_structure_type when is_tagged_variant die ->\n             Ast.TY_tag\n-              { Ast.tag_id = Opaque (get_num\n-                                       (die.die_children.(1))\n-                                       DW_AT_rust_tag_type_id);\n-                (* FIXME: encode and decode tag args. *)\n-                Ast.tag_args = [| |] }\n+              { Ast.tag_id = get_opaque_of (get_tag_id die.die_children.(1));\n+                Ast.tag_args =\n+                  let n_children = Array.length die.die_children in\n+                    if n_children > 2\n+                    then\n+                      Array.map\n+                        get_referenced_ty\n+                        (Array.sub die.die_children 2 (n_children - 2))\n+                    else\n+                      [| |]\n+              }\n \n         | DW_TAG_structure_type ->\n             begin\n@@ -3100,6 +3185,16 @@ let rec extract_mod_items\n           let mi = Ast.MOD_ITEM_mod (view, sub_mis) in\n             htab_put mis ident (decl [||] mi)\n \n+      | DW_TAG_subprogram\n+          when has_attr die DW_AT_rust_tag_type_id ->\n+          let ident = get_name die in\n+          let tid = get_opaque_of (get_tag_id die) in\n+          let n = get_num die DW_AT_discr_value in\n+          let (params, islots) = get_formals die in\n+          let hslots = form_header_slots islots in\n+          let ctor = Ast.MOD_ITEM_tag (hslots, tid, n) in\n+            htab_put mis ident (decl params ctor)\n+\n       | DW_TAG_subprogram ->\n           (* FIXME (issue #74): finish this. *)\n           let ident = get_name die in"}, {"sha": "d0b54a743c9193e6b13655b2d700e418d25c5418", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "patch": "@@ -445,8 +445,12 @@ let type_resolving_visitor\n                   (fun (s,_) -> (slot_ty (resolve_slot_identified s).node))\n                   slots\n               in\n-                htab_put tinfo.tag_idents id (n, item.id, ttup);\n-                htab_put tinfo.tag_nums n (id, item.id, ttup);\n+                if not (Hashtbl.mem tinfo.tag_idents id)\n+                then\n+                  begin\n+                    htab_put tinfo.tag_idents id (n, item.id, ttup);\n+                    htab_put tinfo.tag_nums n (id, item.id, ttup);\n+                  end\n \n           | _ -> resolve_and_store_type ()\n       with"}, {"sha": "051050bb4f2c30da45f12c930f8f94fa35e0cac8", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 78, "deletions": 55, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "patch": "@@ -1415,16 +1415,49 @@ let trans_visitor\n                  (sorted_htab_keys obj.Ast.obj_fns))\n         end\n \n+  and copy_loop\n+      (dst:Il.cell)\n+      (src:Il.cell)\n+      (sz:Il.operand)\n+      (elt_sz:Il.operand)\n+      (elt_copy:Il.cell -> Il.cell -> unit)\n+      : unit =\n+    let eltp_sty = Il.AddrTy (Il.ScalarTy (Il.ValTy Il.Bits8)) in\n+    let dptr = next_vreg_cell eltp_sty in\n+    let sptr = next_vreg_cell eltp_sty in\n+    let dlim = next_vreg_cell eltp_sty in\n+      lea dptr (fst (need_mem_cell dst));\n+      lea sptr (fst (need_mem_cell src));\n+      mov dlim (Il.Cell dptr);\n+      add_to dlim sz;\n+\n+      let fwd_jmp = mark () in\n+        emit (Il.jmp Il.JMP Il.CodeNone);\n+        let back_jmp_targ = mark () in\n+\n+          elt_copy dptr sptr;\n+\n+          add_to dptr elt_sz;\n+          add_to sptr elt_sz;\n+\n+          patch fwd_jmp;\n+          let back_jmp =\n+            trans_compare_simple Il.JB (Il.Cell dptr) (Il.Cell dlim)\n+          in\n+            List.iter\n+              (fun j -> patch_existing j back_jmp_targ) back_jmp;\n+\n \n   and trans_copy_forward_args (args_rty:Il.referent_ty) : unit =\n     let caller_args_cell = caller_args_cell args_rty in\n     let callee_args_cell = callee_args_cell false args_rty in\n-    let (dst_reg, _) = force_to_reg (Il.Cell (alias callee_args_cell)) in\n-    let (src_reg, _) = force_to_reg (Il.Cell (alias caller_args_cell)) in\n-    let tmp_reg = next_vreg () in\n-    let nbytes = force_sz (Il.referent_ty_size word_bits args_rty) in\n-      abi.Abi.abi_emit_inline_memcpy (emitter())\n-        nbytes dst_reg src_reg tmp_reg false;\n+    let nbytes = Il.referent_ty_size word_bits args_rty in\n+    let nbytes = calculate_sz_in_current_frame nbytes in\n+      copy_loop callee_args_cell caller_args_cell nbytes one\n+        begin\n+          fun dptr sptr ->\n+            mov (deref dptr) (Il.Cell (deref sptr))\n+        end\n \n \n   and get_forwarding_obj_fn\n@@ -2126,55 +2159,34 @@ let trans_visitor\n               get_element_ptr_dyn ty_params_cell src_vec Abi.vec_elt_data\n             in\n \n-            (* Copy loop: *)\n-            let eltp_sty = Il.AddrTy (Il.OpaqueTy) in\n-            let dptr = next_vreg_cell eltp_sty in\n-            let sptr = next_vreg_cell eltp_sty in\n-            let dlim = next_vreg_cell eltp_sty in\n-\n-              lea dptr (fst (need_mem_cell dst_buf));\n-              lea sptr (fst (need_mem_cell src_buf));\n-              mov dlim (Il.Cell dptr);\n-              add_to dlim (Il.Cell fill);\n-\n-              (* Copy loop body: *)\n-              let fwd_jmp = mark () in\n-                emit (Il.jmp Il.JMP Il.CodeNone);\n-                let back_jmp_targ = mark () in\n-\n-                (* Copy *)\n-                let ty_params_ptr =\n-                  get_tydesc_params ty_params_cell elt_td_ptr_cell\n-                in\n-                let initflag = Il.Reg (force_to_reg one) in\n-                  trans_call_dynamic_glue\n-                    elt_td_ptr_cell\n-                    Abi.tydesc_field_copy_glue\n-                    (Some (deref dptr))\n-                    [| ty_params_ptr; sptr; initflag |]\n-                    None;\n-\n-                  add_to dptr (Il.Cell elt_sz);\n-                  add_to sptr (Il.Cell elt_sz);\n-\n-                  patch fwd_jmp;\n-                  let back_jmp =\n-                    trans_compare_simple Il.JB (Il.Cell dptr) (Il.Cell dlim)\n-                  in\n-                    List.iter\n-                      (fun j -> patch_existing j back_jmp_targ) back_jmp;\n+            let ty_params_ptr =\n+              get_tydesc_params ty_params_cell elt_td_ptr_cell\n+            in\n+\n+            let initflag = Il.Reg (force_to_reg one) in\n+\n+              copy_loop dst_buf src_buf (Il.Cell fill) (Il.Cell elt_sz)\n+                begin\n+                  fun dptr sptr ->\n+                    trans_call_dynamic_glue\n+                      elt_td_ptr_cell\n+                      Abi.tydesc_field_copy_glue\n+                      (Some (deref dptr))\n+                      [| ty_params_ptr; sptr; initflag |]\n+                      None\n+                end;\n \n-                    (* Set the new vec's fill to the original vec's fill *)\n-                    let dst_fill = get_element_ptr dst_vec Abi.vec_elt_fill in\n-                    let v = next_vreg_cell word_sty in\n-                      mov v (Il.Cell fill);\n-                      mov dst_fill (Il.Cell v);\n+              (* Set the new vec's fill to the original vec's fill *)\n+              let dst_fill = get_element_ptr dst_vec Abi.vec_elt_fill in\n+              let v = next_vreg_cell word_sty in\n+                mov v (Il.Cell fill);\n+                mov dst_fill (Il.Cell v);\n \n-                      List.iter patch no_copy_jmps;\n+                List.iter patch no_copy_jmps;\n \n-                      mov vec_cell (Il.Cell new_vec_cell);\n+                mov vec_cell (Il.Cell new_vec_cell);\n \n-                      trans_glue_frame_exit fix spill g\n+                trans_glue_frame_exit fix spill g\n \n \n   and get_vec_grow_glue _\n@@ -5737,9 +5749,14 @@ let trans_visitor\n                              [| Asm.WORD (word_ty_mach, Asm.IMM 0L) |]))\n   in\n \n-  let trans_required_fn (fnid:node_id) (blockid:node_id) : unit =\n+  let trans_required_fn (fnid:node_id) (blockid:node_id option) : unit =\n     trans_frame_entry fnid false false;\n-    emit (Il.Enter (Hashtbl.find cx.ctxt_block_fixups blockid));\n+    begin\n+      match blockid with\n+          None -> ()\n+        | Some blockid ->\n+            emit (Il.Enter (Hashtbl.find cx.ctxt_block_fixups blockid));\n+    end;\n     let (ilib, conv) = Hashtbl.find cx.ctxt_required_items fnid in\n     let lib_num =\n       htab_search_or_add cx.ctxt_required_lib_num ilib\n@@ -5862,7 +5879,8 @@ let trans_visitor\n           | _ -> bug ()\n               \"Trans.required_rust_fn on unexpected form of require library\"\n       end;\n-      emit Il.Leave;\n+      if blockid <> None\n+      then emit Il.Leave;\n       match ilib with\n           REQUIRED_LIB_rust _ ->\n             trans_frame_exit fnid false;\n@@ -5956,7 +5974,12 @@ let trans_visitor\n     iflog (fun _ -> log cx \"translating required item #%d = %s\"\n              (int_of_node i.id) (path_name()));\n     match i.node.Ast.decl_item with\n-        Ast.MOD_ITEM_fn f -> trans_required_fn i.id f.Ast.fn_body.id\n+        Ast.MOD_ITEM_fn f ->\n+          trans_required_fn i.id (Some f.Ast.fn_body.id)\n+      | Ast.MOD_ITEM_tag (hslots, _, _) ->\n+          if Array.length hslots = 0\n+          then ()\n+          else trans_required_fn i.id None\n       | Ast.MOD_ITEM_mod _ -> ()\n       | Ast.MOD_ITEM_type _ -> ()\n       | _ -> unimpl (Some i.id)"}, {"sha": "c89bba969a763d47369e09552ebbb5b864039e71", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "patch": "@@ -1,11 +1,9 @@\n \n import util.common.option;\n import std.map.hashmap;\n+import std.util.option;\n import util.common.span;\n import util.common.spanned;\n-import util.common.option;\n-import util.common.some;\n-import util.common.none;\n \n type ident = str;\n "}, {"sha": "733e61ea93cd1f44643494c941d8f962ac5a00ed", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "patch": "@@ -1,11 +1,12 @@\n import std._io;\n+import std.util.option;\n+import std.util.some;\n+import std.util.none;\n+\n import driver.session;\n import util.common;\n import util.common.span;\n import util.common.new_str_hash;\n-import util.common.option;\n-import util.common.some;\n-import util.common.none;\n \n state type parser =\n     state obj {"}, {"sha": "ed8cf99847f3e1682bed0c876bf5b9cd1b835c2f", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "patch": "@@ -1,13 +1,13 @@\n import std.map.hashmap;\n+import std.util.option;\n+import std.util.some;\n+import std.util.none;\n+\n import util.common.new_str_hash;\n import util.common.spanned;\n import util.common.span;\n-import util.common.option;\n-import util.common.some;\n-import util.common.none;\n import util.common.ty_mach;\n \n-\n import front.ast;\n import front.ast.ident;\n import front.ast.name;"}, {"sha": "b43dff0ea5ad93ea7fa0d17551b57224bd804016", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "patch": "@@ -3,6 +3,9 @@ import std._vec;\n import std._str.rustrt.sbuf;\n import std._vec.rustrt.vbuf;\n import std.map.hashmap;\n+import std.util.option;\n+import std.util.some;\n+import std.util.none;\n \n import front.ast;\n import driver.session;\n@@ -11,9 +14,6 @@ import back.abi;\n \n import util.common.istr;\n import util.common.new_str_hash;\n-import util.common.option;\n-import util.common.some;\n-import util.common.none;\n \n import lib.llvm.llvm;\n import lib.llvm.builder;"}, {"sha": "cbf7aadfa51beaec6bcd0660adefcd2ed1933894", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "patch": "@@ -5,14 +5,6 @@ type pos = rec(uint line, uint col);\n type span = rec(str filename, pos lo, pos hi);\n type spanned[T] = rec(T node, span span);\n \n-// FIXME: import std.util.option and use it here.\n-// import std.util.option;\n-\n-tag option[T] {\n-  none;\n-  some(T);\n-}\n-\n tag ty_mach {\n     ty_i8;\n     ty_i16;"}, {"sha": "e73d26255fba67fd21eeea9372cbc157775c23e2", "filename": "src/lib/list.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "patch": "@@ -0,0 +1,15 @@\n+\n+tag list[T] {\n+    cons(T, @list[T]);\n+    nil;\n+}\n+\n+\n+// Local Variables:\n+// mode: rust;\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "3b7440c1dabc1076bbcc6284053b9a2a8c81aaba", "filename": "src/lib/std.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "patch": "@@ -47,9 +47,10 @@ alt (target_os) {\n     }\n  }\n \n-// FIXME: parametric \n+// FIXME: parametric\n mod map;\n mod deque;\n+mod list;\n mod rand;\n mod dbg;\n "}]}