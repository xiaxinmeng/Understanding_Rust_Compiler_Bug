{"sha": "af3c6e733a40e671550e0f0f5aeecaa13772ba56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmM2M2ZTczM2E0MGU2NzE1NTBlMGYwZjVhZWVjYWExMzc3MmJhNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-03T23:27:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-03T23:27:45Z"}, "message": "Auto merge of #73996 - da-x:short-unique-paths, r=petrochenkov\n\ndiagnostics: shorten paths of unique symbols\n\nThis is a step towards implementing a fix for #50310, and continuation of the discussion in [Pre-RFC: Nicer Types In Diagnostics - compiler - Rust Internals](https://internals.rust-lang.org/t/pre-rfc-nicer-types-in-diagnostics/11139). Impressed upon me from previous discussion in #21934 that an RFC for this is not needed, and I should just come up with code.\n\nThe recent improvements to `use` suggestions that I've contributed have given rise to this implementation. Contrary to previous suggestions, it's rather simple logic, and I believe it only reduces the amount of cognitive load that a developer would need when reading type errors.\n\n-----\n\nIf a symbol name can only be imported from one place, and as long as it was not glob-imported anywhere in the current crate, we can trim its printed path to the last component.\n\nThis has wide implications on error messages with types, for example, shortening `std::vec::Vec` to just `Vec`, as long as there is no other `Vec` importable from anywhere.", "tree": {"sha": "6234193bc514a97e899369463b0937774a4b159d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6234193bc514a97e899369463b0937774a4b159d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af3c6e733a40e671550e0f0f5aeecaa13772ba56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af3c6e733a40e671550e0f0f5aeecaa13772ba56", "html_url": "https://github.com/rust-lang/rust/commit/af3c6e733a40e671550e0f0f5aeecaa13772ba56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af3c6e733a40e671550e0f0f5aeecaa13772ba56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d0f6b113047b2cf9afbde990cee30fd5b866469", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0f6b113047b2cf9afbde990cee30fd5b866469", "html_url": "https://github.com/rust-lang/rust/commit/0d0f6b113047b2cf9afbde990cee30fd5b866469"}, {"sha": "e7d7615105332f269a27cbd7273029377a96ccdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d7615105332f269a27cbd7273029377a96ccdf", "html_url": "https://github.com/rust-lang/rust/commit/e7d7615105332f269a27cbd7273029377a96ccdf"}], "stats": {"total": 9321, "additions": 4822, "deletions": 4499}, "files": [{"sha": "5df78e253d4fe757f553272aa7f8de3faa09c101", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,6 +4,7 @@ use crate::type_::Type;\n use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n use rustc_middle::ty::layout::{FnAbiExt, TyAndLayout};\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_target::abi::{Abi, AddressSpace, Align, FieldsShape};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n@@ -57,7 +58,7 @@ fn uncached_llvm_type<'a, 'tcx>(\n         ty::Adt(..) | ty::Closure(..) | ty::Foreign(..) | ty::Generator(..) | ty::Str\n             if !cx.sess().fewer_names() =>\n         {\n-            let mut name = layout.ty.to_string();\n+            let mut name = with_no_trimmed_paths(|| layout.ty.to_string());\n             if let (&ty::Adt(def, _), &Variants::Single { index }) =\n                 (&layout.ty.kind, &layout.variants)\n             {"}, {"sha": "d448fa165e0f4a4a54578cc3f1ff803a3ab55e16", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -16,6 +16,7 @@ use rustc_middle::mir;\n use rustc_middle::mir::interpret::{AllocId, ConstValue, Pointer, Scalar};\n use rustc_middle::mir::AssertKind;\n use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n@@ -479,14 +480,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 UninitValid => !layout.might_permit_raw_init(bx, /*zero:*/ false).unwrap(),\n             };\n             if do_panic {\n-                let msg_str = if layout.abi.is_uninhabited() {\n-                    // Use this error even for the other intrinsics as it is more precise.\n-                    format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n-                } else if intrinsic == ZeroValid {\n-                    format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n-                } else {\n-                    format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty)\n-                };\n+                let msg_str = with_no_trimmed_paths(|| {\n+                    if layout.abi.is_uninhabited() {\n+                        // Use this error even for the other intrinsics as it is more precise.\n+                        format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n+                    } else if intrinsic == ZeroValid {\n+                        format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n+                    } else {\n+                        format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty)\n+                    }\n+                });\n                 let msg = bx.const_str(Symbol::intern(&msg_str));\n                 let location = self.get_caller_location(bx, span).immediate();\n "}, {"sha": "972e04fd101f01263810c448814ffe4845cb4d29", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -32,7 +32,7 @@ use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n use rustc_serialize::json::{self, ToJson};\n use rustc_session::config::nightly_options;\n-use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest};\n+use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, TrimmedDefPaths};\n use rustc_session::getopts;\n use rustc_session::lint::{Lint, LintId};\n use rustc_session::{config, DiagnosticOutput, Session};\n@@ -126,6 +126,7 @@ impl Callbacks for TimePassesCallbacks {\n         // time because it will mess up the --prints output. See #64339.\n         self.time_passes = config.opts.prints.is_empty()\n             && (config.opts.debugging_opts.time_passes || config.opts.debugging_opts.time);\n+        config.opts.trimmed_def_paths = TrimmedDefPaths::GoodPath;\n     }\n }\n "}, {"sha": "2abd20869aecf0e66341ada087654164f1973c32", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,6 +4,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(crate_visibility_modifier)]\n+#![feature(backtrace)]\n #![feature(nll)]\n \n #[macro_use]\n@@ -296,9 +297,11 @@ struct HandlerInner {\n     /// This is not necessarily the count that's reported to the user once\n     /// compilation ends.\n     err_count: usize,\n+    warn_count: usize,\n     deduplicated_err_count: usize,\n     emitter: Box<dyn Emitter + sync::Send>,\n     delayed_span_bugs: Vec<Diagnostic>,\n+    delayed_good_path_bugs: Vec<Diagnostic>,\n \n     /// This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n     /// emitting the same diagnostic with extended help (`--teach`) twice, which\n@@ -361,13 +364,15 @@ impl Drop for HandlerInner {\n \n         if !self.has_errors() {\n             let bugs = std::mem::replace(&mut self.delayed_span_bugs, Vec::new());\n-            let has_bugs = !bugs.is_empty();\n-            for bug in bugs {\n-                self.emit_diagnostic(&bug);\n-            }\n-            if has_bugs {\n-                panic!(\"no errors encountered even though `delay_span_bug` issued\");\n-            }\n+            self.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n+        }\n+\n+        if !self.has_any_message() {\n+            let bugs = std::mem::replace(&mut self.delayed_good_path_bugs, Vec::new());\n+            self.flush_delayed(\n+                bugs,\n+                \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n+            );\n         }\n     }\n }\n@@ -422,10 +427,12 @@ impl Handler {\n             inner: Lock::new(HandlerInner {\n                 flags,\n                 err_count: 0,\n+                warn_count: 0,\n                 deduplicated_err_count: 0,\n                 deduplicated_warn_count: 0,\n                 emitter,\n                 delayed_span_bugs: Vec::new(),\n+                delayed_good_path_bugs: Vec::new(),\n                 taught_diagnostics: Default::default(),\n                 emitted_diagnostic_codes: Default::default(),\n                 emitted_diagnostics: Default::default(),\n@@ -448,11 +455,13 @@ impl Handler {\n     pub fn reset_err_count(&self) {\n         let mut inner = self.inner.borrow_mut();\n         inner.err_count = 0;\n+        inner.warn_count = 0;\n         inner.deduplicated_err_count = 0;\n         inner.deduplicated_warn_count = 0;\n \n         // actually free the underlying memory (which `clear` would not do)\n         inner.delayed_span_bugs = Default::default();\n+        inner.delayed_good_path_bugs = Default::default();\n         inner.taught_diagnostics = Default::default();\n         inner.emitted_diagnostic_codes = Default::default();\n         inner.emitted_diagnostics = Default::default();\n@@ -629,6 +638,10 @@ impl Handler {\n         self.inner.borrow_mut().delay_span_bug(span, msg)\n     }\n \n+    pub fn delay_good_path_bug(&self, msg: &str) {\n+        self.inner.borrow_mut().delay_good_path_bug(msg)\n+    }\n+\n     pub fn span_bug_no_panic(&self, span: impl Into<MultiSpan>, msg: &str) {\n         self.emit_diag_at_span(Diagnostic::new(Bug, msg), span);\n     }\n@@ -768,6 +781,8 @@ impl HandlerInner {\n         }\n         if diagnostic.is_error() {\n             self.bump_err_count();\n+        } else {\n+            self.bump_warn_count();\n         }\n     }\n \n@@ -859,6 +874,9 @@ impl HandlerInner {\n     fn has_errors_or_delayed_span_bugs(&self) -> bool {\n         self.has_errors() || !self.delayed_span_bugs.is_empty()\n     }\n+    fn has_any_message(&self) -> bool {\n+        self.err_count() > 0 || self.warn_count > 0\n+    }\n \n     fn abort_if_errors(&mut self) {\n         self.emit_stashed_diagnostics();\n@@ -892,6 +910,15 @@ impl HandlerInner {\n         self.delay_as_bug(diagnostic)\n     }\n \n+    fn delay_good_path_bug(&mut self, msg: &str) {\n+        let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n+        if self.flags.report_delayed_bugs {\n+            self.emit_diagnostic(&diagnostic);\n+        }\n+        diagnostic.note(&format!(\"delayed at {}\", std::backtrace::Backtrace::force_capture()));\n+        self.delayed_good_path_bugs.push(diagnostic);\n+    }\n+\n     fn failure(&mut self, msg: &str) {\n         self.emit_diagnostic(&Diagnostic::new(FailureNote, msg));\n     }\n@@ -925,11 +952,25 @@ impl HandlerInner {\n         self.delayed_span_bugs.push(diagnostic);\n     }\n \n+    fn flush_delayed(&mut self, bugs: Vec<Diagnostic>, explanation: &str) {\n+        let has_bugs = !bugs.is_empty();\n+        for bug in bugs {\n+            self.emit_diagnostic(&bug);\n+        }\n+        if has_bugs {\n+            panic!(\"{}\", explanation);\n+        }\n+    }\n+\n     fn bump_err_count(&mut self) {\n         self.err_count += 1;\n         self.panic_if_treat_err_as_bug();\n     }\n \n+    fn bump_warn_count(&mut self) {\n+        self.warn_count += 1;\n+    }\n+\n     fn panic_if_treat_err_as_bug(&self) {\n         if self.treat_err_as_bug() {\n             let s = match (self.err_count(), self.flags.treat_err_as_bug.unwrap_or(0)) {"}, {"sha": "00f7fead72f3a4d12a5fa24df4f5c755bc262146", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -611,11 +611,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let sig = self.tcx.fn_sig(did);\n                     let bound_output = sig.output();\n                     let output = bound_output.skip_binder();\n-                    err.span_label(e.span, &format!(\"this method call resolves to `{:?}`\", output));\n+                    err.span_label(e.span, &format!(\"this method call resolves to `{}`\", output));\n                     let kind = &output.kind;\n                     if let ty::Projection(proj) = kind {\n                         if let Some(span) = self.tcx.hir().span_if_local(proj.item_def_id) {\n-                            err.span_label(span, &format!(\"`{:?}` defined here\", output));\n+                            err.span_label(span, &format!(\"`{}` defined here\", output));\n                         }\n                     }\n                 }"}, {"sha": "c061f485c1cf33d9c19ce0824a5eb267510eb0a4", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -58,8 +58,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             .tcx()\n             .sess\n             .struct_span_err(sp, \"`impl` item signature doesn't match `trait` item signature\");\n-        err.span_label(sp, &format!(\"found `{:?}`\", found));\n-        err.span_label(trait_sp, &format!(\"expected `{:?}`\", expected));\n+        err.span_label(sp, &format!(\"found `{}`\", found));\n+        err.span_label(trait_sp, &format!(\"expected `{}`\", expected));\n \n         // Get the span of all the used type parameters in the method.\n         let assoc_item = self.tcx().associated_item(trait_def_id);\n@@ -92,7 +92,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             err.note_expected_found(&\"\", expected, &\"\", found);\n         } else {\n             // This fallback shouldn't be necessary, but let's keep it in just in case.\n-            err.note(&format!(\"expected `{:?}`\\n   found `{:?}`\", expected, found));\n+            err.note(&format!(\"expected `{}`\\n   found `{}`\", expected, found));\n         }\n         err.span_help(\n             type_param_span,"}, {"sha": "dc4fa807f7868b1c390bfa5c07d8156a1979f7b2", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -518,6 +518,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(time_llvm_passes, true);\n     untracked!(time_passes, true);\n     untracked!(trace_macros, true);\n+    untracked!(trim_diagnostic_paths, false);\n     untracked!(ui_testing, true);\n     untracked!(unpretty, Some(\"expanded\".to_string()));\n     untracked!(unstable_options, true);"}, {"sha": "2b14d09671e26600baa64c58aeef4cf97a1e37b9", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -40,6 +40,7 @@ use rustc_hir::{ForeignItemKind, GenericParamKind, PatKind};\n use rustc_hir::{HirId, HirIdSet, Node};\n use rustc_index::vec::Idx;\n use rustc_middle::lint::LintDiagnosticBuilder;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{self, layout::LayoutError, Ty, TyCtxt};\n use rustc_session::lint::FutureIncompatibleInfo;\n@@ -2040,7 +2041,9 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n             // using zeroed or uninitialized memory.\n             // We are extremely conservative with what we warn about.\n             let conjured_ty = cx.typeck_results().expr_ty(expr);\n-            if let Some((msg, span)) = ty_find_init_error(cx.tcx, conjured_ty, init) {\n+            if let Some((msg, span)) =\n+                with_no_trimmed_paths(|| ty_find_init_error(cx.tcx, conjured_ty, init))\n+            {\n                 cx.struct_span_lint(INVALID_VALUE, expr.span, |lint| {\n                     let mut err = lint.build(&format!(\n                         \"the type `{}` does not permit {}\","}, {"sha": "d1f50e1e84ddd6a1ce7ec0bb536923c96e39d12f", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -31,6 +31,7 @@ use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::layout::{LayoutError, TyAndLayout};\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n use rustc_session::lint::{add_elided_lifetime_in_path_suggestion, BuiltinLintDiagnostics};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n@@ -795,10 +796,12 @@ impl<'tcx> LateContext<'tcx> {\n                 }\n \n                 // This shouldn't ever be needed, but just in case:\n-                Ok(vec![match trait_ref {\n-                    Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)),\n-                    None => Symbol::intern(&format!(\"<{}>\", self_ty)),\n-                }])\n+                with_no_trimmed_paths(|| {\n+                    Ok(vec![match trait_ref {\n+                        Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)),\n+                        None => Symbol::intern(&format!(\"<{}>\", self_ty)),\n+                    }])\n+                })\n             }\n \n             fn path_append_impl(\n@@ -812,12 +815,16 @@ impl<'tcx> LateContext<'tcx> {\n \n                 // This shouldn't ever be needed, but just in case:\n                 path.push(match trait_ref {\n-                    Some(trait_ref) => Symbol::intern(&format!(\n-                        \"<impl {} for {}>\",\n-                        trait_ref.print_only_trait_path(),\n-                        self_ty\n-                    )),\n-                    None => Symbol::intern(&format!(\"<impl {}>\", self_ty)),\n+                    Some(trait_ref) => with_no_trimmed_paths(|| {\n+                        Symbol::intern(&format!(\n+                            \"<impl {} for {}>\",\n+                            trait_ref.print_only_trait_path(),\n+                            self_ty\n+                        ))\n+                    }),\n+                    None => {\n+                        with_no_trimmed_paths(|| Symbol::intern(&format!(\"<impl {}>\", self_ty)))\n+                    }\n                 });\n \n                 Ok(path)"}, {"sha": "95096ef3fc4cfa13e1f5e79b18a61131341d661a", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -392,7 +392,7 @@ fn add_query_description_impl(\n             #tcx: TyCtxt<'tcx>,\n             #key: #arg,\n         ) -> Cow<'static, str> {\n-            format!(#desc).into()\n+            ::rustc_middle::ty::print::with_no_trimmed_paths(|| format!(#desc).into())\n         }\n     };\n "}, {"sha": "27658d50d45829ee69dbb6d65f2e19743fe257a9", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -13,6 +13,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, HirId};\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_session::lint::builtin::{DEPRECATED, DEPRECATED_IN_FUTURE, SOFT_UNSTABLE};\n use rustc_session::lint::{BuiltinLintDiagnostics, Lint, LintBuffer};\n use rustc_session::parse::feature_err_issue;\n@@ -308,7 +309,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 // #[rustc_deprecated] however wants to emit down the whole\n                 // hierarchy.\n                 if !skip || depr_entry.attr.is_since_rustc_version {\n-                    let path = &self.def_path_str(def_id);\n+                    let path = &with_no_trimmed_paths(|| self.def_path_str(def_id));\n                     let kind = self.def_kind(def_id).descr(def_id);\n                     let (message, lint) = deprecation_message(&depr_entry.attr, kind, path);\n                     late_report_deprecation("}, {"sha": "c7e32dd07082bd576b2ce88cf14270cbe28a907e", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -108,6 +108,7 @@ use rustc_data_structures::sync::{HashMapExt, Lock};\n use rustc_data_structures::tiny_list::TinyList;\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_serialize::{Decodable, Encodable};\n use rustc_target::abi::{Endian, Size};\n \n@@ -145,7 +146,7 @@ pub struct GlobalId<'tcx> {\n \n impl GlobalId<'tcx> {\n     pub fn display(self, tcx: TyCtxt<'tcx>) -> String {\n-        let instance_name = tcx.def_path_str(self.instance.def.def_id());\n+        let instance_name = with_no_trimmed_paths(|| tcx.def_path_str(self.instance.def.def_id()));\n         if let Some(promoted) = self.promoted {\n             format!(\"{}::{:?}\", instance_name, promoted)\n         } else {"}, {"sha": "719f0322fd72cf610ae2bf560f035820f37bf2ab", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1255,6 +1255,11 @@ rustc_queries! {\n             storage(ArenaCacheSelector<'tcx>)\n             desc { \"calculating the visible parent map\" }\n         }\n+        query trimmed_def_paths(_: CrateNum)\n+            -> FxHashMap<DefId, Symbol> {\n+            storage(ArenaCacheSelector<'tcx>)\n+            desc { \"calculating trimmed def paths\" }\n+        }\n         query missing_extern_crate_item(_: CrateNum) -> bool {\n             eval_always\n             desc { \"seeing if we're missing an `extern crate` item for this crate\" }"}, {"sha": "6b165c3d657dff0a592c89d5f2189fff3f3c6e2d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -944,7 +944,7 @@ pub struct GlobalCtxt<'tcx> {\n     maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n     /// A map of glob use to a set of names it actually imports. Currently only\n     /// used in save-analysis.\n-    glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n+    pub(crate) glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<Symbol, bool>,"}, {"sha": "c8b6705b35f363b6f6fe36fba152e9c16e77aae8", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -260,10 +260,11 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n             InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n             InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n             InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n-            InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({:?})\", ty),\n+            InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({})\", ty),\n             InstanceDef::ClosureOnceShim { .. } => write!(f, \" - shim\"),\n-            InstanceDef::DropGlue(_, ty) => write!(f, \" - shim({:?})\", ty),\n-            InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({:?})\", ty),\n+            InstanceDef::DropGlue(_, None) => write!(f, \" - shim(None)\"),\n+            InstanceDef::DropGlue(_, Some(ty)) => write!(f, \" - shim(Some({}))\", ty),\n+            InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({})\", ty),\n         }\n     }\n }"}, {"sha": "7d98922a59bf49f7926819bf397cb53ccab2819c", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -174,9 +174,9 @@ pub enum LayoutError<'tcx> {\n impl<'tcx> fmt::Display for LayoutError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n-            LayoutError::Unknown(ty) => write!(f, \"the type `{:?}` has an unknown layout\", ty),\n+            LayoutError::Unknown(ty) => write!(f, \"the type `{}` has an unknown layout\", ty),\n             LayoutError::SizeOverflow(ty) => {\n-                write!(f, \"the type `{:?}` is too big for the current architecture\", ty)\n+                write!(f, \"the type `{}` is too big for the current architecture\", ty)\n             }\n         }\n     }"}, {"sha": "8cad54396108606bd9d2d1f322cfda69b669e82e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -3101,6 +3101,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     erase_regions::provide(providers);\n     layout::provide(providers);\n     util::provide(providers);\n+    print::provide(providers);\n     super::util::bug::provide(providers);\n     *providers = ty::query::Providers {\n         trait_impls_of: trait_def::trait_impls_of_provider,"}, {"sha": "50ce80cc9fc42fe7f9b09811fc7c4b1cc1a1cb0b", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 176, "deletions": 2, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,10 +7,13 @@ use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_ast as ast;\n use rustc_attr::{SignedInt, UnsignedInt};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorKind, DefKind, Namespace};\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n+use rustc_hir::ItemKind;\n+use rustc_session::config::TrimmedDefPaths;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_target::abi::{Integer, Size};\n use rustc_target::spec::abi::Abi;\n@@ -52,6 +55,7 @@ macro_rules! define_scoped_cx {\n thread_local! {\n     static FORCE_IMPL_FILENAME_LINE: Cell<bool> = Cell::new(false);\n     static SHOULD_PREFIX_WITH_CRATE: Cell<bool> = Cell::new(false);\n+    static NO_TRIMMED_PATH: Cell<bool> = Cell::new(false);\n     static NO_QUERIES: Cell<bool> = Cell::new(false);\n }\n \n@@ -94,6 +98,18 @@ pub fn with_crate_prefix<F: FnOnce() -> R, R>(f: F) -> R {\n     })\n }\n \n+/// Prevent path trimming if it is turned on. Path trimming affects `Display` impl\n+/// of various rustc types, for example `std::vec::Vec` would be trimmed to `Vec`,\n+/// if no other `Vec` is found.\n+pub fn with_no_trimmed_paths<F: FnOnce() -> R, R>(f: F) -> R {\n+    NO_TRIMMED_PATH.with(|flag| {\n+        let old = flag.replace(true);\n+        let result = f();\n+        flag.set(old);\n+        result\n+    })\n+}\n+\n /// The \"region highlights\" are used to control region printing during\n /// specific error messages. When a \"region highlight\" is enabled, it\n /// gives an alternate way to print specific regions. For now, we\n@@ -243,6 +259,28 @@ pub trait PrettyPrinter<'tcx>:\n         self.try_print_visible_def_path_recur(def_id, &mut callers)\n     }\n \n+    /// Try to see if this path can be trimmed to a unique symbol name.\n+    fn try_print_trimmed_def_path(\n+        mut self,\n+        def_id: DefId,\n+    ) -> Result<(Self::Path, bool), Self::Error> {\n+        if !self.tcx().sess.opts.debugging_opts.trim_diagnostic_paths\n+            || matches!(self.tcx().sess.opts.trimmed_def_paths, TrimmedDefPaths::Never)\n+            || NO_TRIMMED_PATH.with(|flag| flag.get())\n+            || SHOULD_PREFIX_WITH_CRATE.with(|flag| flag.get())\n+        {\n+            return Ok((self, false));\n+        }\n+\n+        match self.tcx().trimmed_def_paths(LOCAL_CRATE).get(&def_id) {\n+            None => return Ok((self, false)),\n+            Some(symbol) => {\n+                self.write_str(&symbol.as_str())?;\n+                return Ok((self, true));\n+            }\n+        }\n+    }\n+\n     /// Does the work of `try_print_visible_def_path`, building the\n     /// full definition path recursively before attempting to\n     /// post-process it into the valid and visible version that\n@@ -1324,6 +1362,11 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         define_scoped_cx!(self);\n \n         if substs.is_empty() {\n+            match self.try_print_trimmed_def_path(def_id)? {\n+                (cx, true) => return Ok(cx),\n+                (cx, false) => self = cx,\n+            }\n+\n             match self.try_print_visible_def_path(def_id)? {\n                 (cx, true) => return Ok(cx),\n                 (cx, false) => self = cx,\n@@ -2064,3 +2107,134 @@ define_print_and_forward_display! {\n         }\n     }\n }\n+\n+fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, Namespace, DefId)) {\n+    // Iterate all local crate items no matter where they are defined.\n+    let hir = tcx.hir();\n+    for item in hir.krate().items.values() {\n+        if item.ident.name.as_str().is_empty() {\n+            continue;\n+        }\n+\n+        match item.kind {\n+            ItemKind::Use(_, _) => {\n+                continue;\n+            }\n+            _ => {}\n+        }\n+\n+        if let Some(local_def_id) = hir.definitions().opt_hir_id_to_local_def_id(item.hir_id) {\n+            let def_id = local_def_id.to_def_id();\n+            let ns = tcx.def_kind(def_id).ns().unwrap_or(Namespace::TypeNS);\n+            collect_fn(&item.ident, ns, def_id);\n+        }\n+    }\n+\n+    // Now take care of extern crate items.\n+    let queue = &mut Vec::new();\n+    let mut seen_defs: DefIdSet = Default::default();\n+\n+    for &cnum in tcx.crates().iter() {\n+        let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+\n+        // Ignore crates that are not direct dependencies.\n+        match tcx.extern_crate(def_id) {\n+            None => continue,\n+            Some(extern_crate) => {\n+                if !extern_crate.is_direct() {\n+                    continue;\n+                }\n+            }\n+        }\n+\n+        queue.push(def_id);\n+    }\n+\n+    // Iterate external crate defs but be mindful about visibility\n+    while let Some(def) = queue.pop() {\n+        for child in tcx.item_children(def).iter() {\n+            if child.vis != ty::Visibility::Public {\n+                continue;\n+            }\n+\n+            match child.res {\n+                def::Res::Def(DefKind::AssocTy, _) => {}\n+                def::Res::Def(defkind, def_id) => {\n+                    if let Some(ns) = defkind.ns() {\n+                        collect_fn(&child.ident, ns, def_id);\n+                    }\n+\n+                    if seen_defs.insert(def_id) {\n+                        queue.push(def_id);\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+}\n+\n+/// The purpose of this function is to collect public symbols names that are unique across all\n+/// crates in the build. Later, when printing about types we can use those names instead of the\n+/// full exported path to them.\n+///\n+/// So essentially, if a symbol name can only be imported from one place for a type, and as\n+/// long as it was not glob-imported anywhere in the current crate, we can trim its printed\n+/// path and print only the name.\n+///\n+/// This has wide implications on error messages with types, for example, shortening\n+/// `std::vec::Vec` to just `Vec`, as long as there is no other `Vec` importable anywhere.\n+///\n+/// The implementation uses similar import discovery logic to that of 'use' suggestions.\n+fn trimmed_def_paths(tcx: TyCtxt<'_>, crate_num: CrateNum) -> FxHashMap<DefId, Symbol> {\n+    assert_eq!(crate_num, LOCAL_CRATE);\n+\n+    let mut map = FxHashMap::default();\n+\n+    if let TrimmedDefPaths::GoodPath = tcx.sess.opts.trimmed_def_paths {\n+        // For good paths causing this bug, the `rustc_middle::ty::print::with_no_trimmed_paths`\n+        // wrapper can be used to suppress this query, in exchange for full paths being formatted.\n+        tcx.sess.delay_good_path_bug(\"trimmed_def_paths constructed\");\n+    }\n+\n+    let unique_symbols_rev: &mut FxHashMap<(Namespace, Symbol), Option<DefId>> =\n+        &mut FxHashMap::default();\n+\n+    for symbol_set in tcx.glob_map.values() {\n+        for symbol in symbol_set {\n+            unique_symbols_rev.insert((Namespace::TypeNS, *symbol), None);\n+            unique_symbols_rev.insert((Namespace::ValueNS, *symbol), None);\n+            unique_symbols_rev.insert((Namespace::MacroNS, *symbol), None);\n+        }\n+    }\n+\n+    for_each_def(tcx, |ident, ns, def_id| {\n+        use std::collections::hash_map::Entry::{Occupied, Vacant};\n+\n+        match unique_symbols_rev.entry((ns, ident.name)) {\n+            Occupied(mut v) => match v.get() {\n+                None => {}\n+                Some(existing) => {\n+                    if *existing != def_id {\n+                        v.insert(None);\n+                    }\n+                }\n+            },\n+            Vacant(v) => {\n+                v.insert(Some(def_id));\n+            }\n+        }\n+    });\n+\n+    for ((_, symbol), opt_def_id) in unique_symbols_rev.drain() {\n+        if let Some(def_id) = opt_def_id {\n+            map.insert(def_id, symbol);\n+        }\n+    }\n+\n+    map\n+}\n+\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers { trimmed_def_paths, ..*providers };\n+}"}, {"sha": "bfe97cb7a02ab7993d981f017ed077197a52c316", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@\n use crate::mir::interpret;\n use crate::mir::ProjectionKind;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use crate::ty::print::{FmtPrinter, Printer};\n+use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::{self, InferConst, Lift, Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n@@ -20,7 +20,9 @@ use std::sync::Arc;\n impl fmt::Debug for ty::TraitDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| {\n-            FmtPrinter::new(tcx, f, Namespace::TypeNS).print_def_path(self.def_id, &[])?;\n+            with_no_trimmed_paths(|| {\n+                FmtPrinter::new(tcx, f, Namespace::TypeNS).print_def_path(self.def_id, &[])\n+            })?;\n             Ok(())\n         })\n     }\n@@ -29,7 +31,9 @@ impl fmt::Debug for ty::TraitDef {\n impl fmt::Debug for ty::AdtDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| {\n-            FmtPrinter::new(tcx, f, Namespace::TypeNS).print_def_path(self.did, &[])?;\n+            with_no_trimmed_paths(|| {\n+                FmtPrinter::new(tcx, f, Namespace::TypeNS).print_def_path(self.did, &[])\n+            })?;\n             Ok(())\n         })\n     }\n@@ -50,7 +54,7 @@ impl fmt::Debug for ty::UpvarBorrow<'tcx> {\n \n impl fmt::Debug for ty::ExistentialTraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n+        with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n     }\n }\n \n@@ -183,13 +187,13 @@ impl fmt::Debug for ty::FloatVarValue {\n \n impl fmt::Debug for ty::TraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n+        with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n     }\n }\n \n impl fmt::Debug for Ty<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n+        with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n     }\n }\n "}, {"sha": "c8a68b9793273e0c85c0aa8d53afab730a22160c", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::traits::Reveal;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, subst::Subst, TyCtxt};\n use rustc_span::source_map::Span;\n use rustc_target::abi::{Abi, LayoutOf};\n@@ -33,7 +34,8 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     assert!(!layout.is_unsized());\n     let ret = ecx.allocate(layout, MemoryKind::Stack);\n \n-    let name = ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id()));\n+    let name =\n+        with_no_trimmed_paths(|| ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id())));\n     let prom = cid.promoted.map_or(String::new(), |p| format!(\"::promoted[{:?}]\", p));\n     trace!(\"eval_body_using_ecx: pushing stack frame for global: {}{}\", name, prom);\n \n@@ -290,7 +292,7 @@ pub fn const_eval_raw_provider<'tcx>(\n         // The next two lines concatenated contain some discussion:\n         // https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/\n         // subject/anon_const_instance_printing/near/135980032\n-        let instance = key.value.instance.to_string();\n+        let instance = with_no_trimmed_paths(|| key.value.instance.to_string());\n         trace!(\"const eval: {:?} ({})\", key, instance);\n     }\n "}, {"sha": "4220483608d07ad9a429bb62b09858288e67860e", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -26,18 +26,22 @@ use super::{\n \n macro_rules! throw_validation_failure {\n     ($where:expr, { $( $what_fmt:expr ),+ } $( expected { $( $expected_fmt:expr ),+ } )?) => {{\n-        let mut msg = String::new();\n-        msg.push_str(\"encountered \");\n-        write!(&mut msg, $($what_fmt),+).unwrap();\n-        let where_ = &$where;\n-        if !where_.is_empty() {\n-            msg.push_str(\" at \");\n-            write_path(&mut msg, where_);\n-        }\n-        $(\n-            msg.push_str(\", but expected \");\n-            write!(&mut msg, $($expected_fmt),+).unwrap();\n-        )?\n+        let msg = rustc_middle::ty::print::with_no_trimmed_paths(|| {\n+            let mut msg = String::new();\n+            msg.push_str(\"encountered \");\n+            write!(&mut msg, $($what_fmt),+).unwrap();\n+            let where_ = &$where;\n+            if !where_.is_empty() {\n+                msg.push_str(\" at \");\n+                write_path(&mut msg, where_);\n+            }\n+            $(\n+                msg.push_str(\", but expected \");\n+                write!(&mut msg, $($expected_fmt),+).unwrap();\n+            )?\n+\n+            msg\n+        });\n         throw_ub!(ValidationFailure(msg))\n     }};\n }"}, {"sha": "e96af77bbb8e01cb37178282c6b03202d8bf709e", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -100,6 +100,7 @@ use rustc_data_structures::sync;\n use rustc_hir::def_id::{CrateNum, DefIdSet, LOCAL_CRATE};\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{CodegenUnit, Linkage};\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n@@ -374,7 +375,7 @@ fn collect_and_partition_mono_items<'tcx>(\n         let mut item_keys: Vec<_> = items\n             .iter()\n             .map(|i| {\n-                let mut output = i.to_string();\n+                let mut output = with_no_trimmed_paths(|| i.to_string());\n                 output.push_str(\" @@\");\n                 let mut empty = Vec::new();\n                 let cgus = item_to_cgus.get_mut(i).unwrap_or(&mut empty);"}, {"sha": "e7ddf38719c39bc70e24126eb2a27f625a989b27", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,6 +2,7 @@ use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::mir::Field;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint;\n use rustc_span::Span;\n@@ -118,7 +119,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             }\n \n             if let Some(non_sm_ty) = structural {\n-                let msg = match non_sm_ty {\n+                let msg = with_no_trimmed_paths(|| match non_sm_ty {\n                     traits::NonStructuralMatchTy::Adt(adt_def) => {\n                         let path = self.tcx().def_path_str(adt_def.did);\n                         format!(\n@@ -148,7 +149,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     traits::NonStructuralMatchTy::Foreign => {\n                         bug!(\"use of a value of a foreign type inside a pattern\")\n                     }\n-                };\n+                });\n \n                 // double-check there even *is* a semantic `PartialEq` to dispatch to.\n                 //"}, {"sha": "a12eb2640651719dd943fb3bc821a264898c4414", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -21,7 +21,7 @@ use rustc_hir_pretty::{enum_def_to_string, fn_to_string, ty_to_string};\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::cstore::ExternCrate;\n use rustc_middle::middle::privacy::AccessLevels;\n-use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n+use rustc_middle::ty::{self, print::with_no_trimmed_paths, DefIdTree, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_session::config::{CrateType, Input, OutputType};\n use rustc_session::output::{filename_for_metadata, out_filename};\n@@ -989,32 +989,34 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n     config: Option<Config>,\n     mut handler: H,\n ) {\n-    tcx.dep_graph.with_ignore(|| {\n-        info!(\"Dumping crate {}\", cratename);\n-\n-        // Privacy checking requires and is done after type checking; use a\n-        // fallback in case the access levels couldn't have been correctly computed.\n-        let access_levels = match tcx.sess.compile_status() {\n-            Ok(..) => tcx.privacy_access_levels(LOCAL_CRATE),\n-            Err(..) => tcx.arena.alloc(AccessLevels::default()),\n-        };\n+    with_no_trimmed_paths(|| {\n+        tcx.dep_graph.with_ignore(|| {\n+            info!(\"Dumping crate {}\", cratename);\n+\n+            // Privacy checking requires and is done after type checking; use a\n+            // fallback in case the access levels couldn't have been correctly computed.\n+            let access_levels = match tcx.sess.compile_status() {\n+                Ok(..) => tcx.privacy_access_levels(LOCAL_CRATE),\n+                Err(..) => tcx.arena.alloc(AccessLevels::default()),\n+            };\n \n-        let save_ctxt = SaveContext {\n-            tcx,\n-            maybe_typeck_results: None,\n-            access_levels: &access_levels,\n-            span_utils: SpanUtils::new(&tcx.sess),\n-            config: find_config(config),\n-            impl_counter: Cell::new(0),\n-        };\n+            let save_ctxt = SaveContext {\n+                tcx,\n+                maybe_typeck_results: None,\n+                access_levels: &access_levels,\n+                span_utils: SpanUtils::new(&tcx.sess),\n+                config: find_config(config),\n+                impl_counter: Cell::new(0),\n+            };\n \n-        let mut visitor = DumpVisitor::new(save_ctxt);\n+            let mut visitor = DumpVisitor::new(save_ctxt);\n \n-        visitor.dump_crate_info(cratename, tcx.hir().krate());\n-        visitor.dump_compilation_options(input, cratename);\n-        visitor.process_crate(tcx.hir().krate());\n+            visitor.dump_crate_info(cratename, tcx.hir().krate());\n+            visitor.dump_compilation_options(input, cratename);\n+            visitor.process_crate(tcx.hir().krate());\n \n-        handler.save(&visitor.save_ctxt, &visitor.analysis())\n+            handler.save(&visitor.save_ctxt, &visitor.analysis())\n+        })\n     })\n }\n "}, {"sha": "65377b08820ca78b376d82eacb8f900d0d3aa1c0", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -328,6 +328,23 @@ impl Default for ErrorOutputType {\n     }\n }\n \n+/// Parameter to control path trimming.\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum TrimmedDefPaths {\n+    /// `try_print_trimmed_def_path` never prints a trimmed path and never calls the expensive query\n+    Never,\n+    /// `try_print_trimmed_def_path` calls the expensive query, the query doesn't call `delay_good_path_bug`\n+    Always,\n+    /// `try_print_trimmed_def_path` calls the expensive query, the query calls `delay_good_path_bug`\n+    GoodPath,\n+}\n+\n+impl Default for TrimmedDefPaths {\n+    fn default() -> Self {\n+        Self::Never\n+    }\n+}\n+\n /// Use tree-based collections to cheaply get a deterministic `Hash` implementation.\n /// *Do not* switch `BTreeMap` out for an unsorted container type! That would break\n /// dependency tracking for command-line arguments.\n@@ -621,6 +638,7 @@ impl Default for Options {\n             unstable_features: UnstableFeatures::Disallow,\n             debug_assertions: true,\n             actually_rustdoc: false,\n+            trimmed_def_paths: TrimmedDefPaths::default(),\n             cli_forced_codegen_units: None,\n             cli_forced_thinlto_off: false,\n             remap_path_prefix: Vec::new(),\n@@ -1811,6 +1829,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         unstable_features: UnstableFeatures::from_environment(),\n         debug_assertions,\n         actually_rustdoc: false,\n+        trimmed_def_paths: TrimmedDefPaths::default(),\n         cli_forced_codegen_units: codegen_units,\n         cli_forced_thinlto_off: disable_thinlto,\n         remap_path_prefix,\n@@ -2057,7 +2076,7 @@ crate mod dep_tracking {\n     use super::{\n         CFGuard, CrateType, DebugInfo, ErrorOutputType, LinkerPluginLto, LtoCli, OptLevel,\n         OutputTypes, Passes, SanitizerSet, SourceFileHashAlgorithm, SwitchWithOptPath,\n-        SymbolManglingVersion,\n+        SymbolManglingVersion, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::utils::NativeLibKind;\n@@ -2138,6 +2157,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(SwitchWithOptPath);\n     impl_dep_tracking_hash_via_hash!(SymbolManglingVersion);\n     impl_dep_tracking_hash_via_hash!(Option<SourceFileHashAlgorithm>);\n+    impl_dep_tracking_hash_via_hash!(TrimmedDefPaths);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);"}, {"sha": "f502d43a0e0ebe0534654f3d3d11cf270228ba58", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -125,6 +125,9 @@ top_level_options!(\n         // try to not rely on this too much.\n         actually_rustdoc: bool [TRACKED],\n \n+        // Control path trimming.\n+        trimmed_def_paths: TrimmedDefPaths [TRACKED],\n+\n         // Specifications of codegen units / ThinLTO which are forced as a\n         // result of parsing command line options. These are not necessarily\n         // what rustc was invoked with, but massaged a bit to agree with\n@@ -1084,6 +1087,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n     treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n         \"treat error number `val` that occurs as bug\"),\n+    trim_diagnostic_paths: bool = (true, parse_bool, [UNTRACKED],\n+        \"in diagnostics, use heuristics to shorten paths referring to items\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n         \"emit compiler diagnostics in a form suitable for UI testing (default: no)\"),\n     unleash_the_miri_inside_of_you: bool = (false, parse_bool, [TRACKED],"}, {"sha": "ff22b4ce4ad9fb89f53503862e7451936969c0fd", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -442,6 +442,24 @@ impl Session {\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().delay_span_bug(sp, msg)\n     }\n+\n+    /// Used for code paths of expensive computations that should only take place when\n+    /// warnings or errors are emitted. If no messages are emitted (\"good path\"), then\n+    /// it's likely a bug.\n+    pub fn delay_good_path_bug(&self, msg: &str) {\n+        if self.opts.debugging_opts.print_type_sizes\n+            || self.opts.debugging_opts.query_dep_graph\n+            || self.opts.debugging_opts.dump_mir.is_some()\n+            || self.opts.debugging_opts.unpretty.is_some()\n+            || self.opts.output_types.contains_key(&OutputType::Mir)\n+            || std::env::var_os(\"RUSTC_LOG\").is_some()\n+        {\n+            return;\n+        }\n+\n+        self.diagnostic().delay_good_path_bug(msg)\n+    }\n+\n     pub fn note_without_error(&self, msg: &str) {\n         self.diagnostic().note_without_error(msg)\n     }"}, {"sha": "3a3bc080b9e14755813f5109b8f5f4a395e5efa3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1342,8 +1342,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     .normalize(candidate)\n                     .ok();\n                 match normalized {\n-                    Some(normalized) => format!(\"\\n  {:?}\", normalized.value),\n-                    None => format!(\"\\n  {:?}\", candidate),\n+                    Some(normalized) => format!(\"\\n  {}\", normalized.value),\n+                    None => format!(\"\\n  {}\", candidate),\n                 }\n             })\n         };"}, {"sha": "dbceb998371b12a1e952d6000495cee7113502e8", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -32,6 +32,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::fast_reject;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef};\n use rustc_middle::ty::{\n@@ -778,14 +779,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     if !candidate_set.ambiguous && candidate_set.vec.is_empty() {\n                         let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n                         let self_ty = trait_ref.self_ty();\n-                        let cause = IntercrateAmbiguityCause::DownstreamCrate {\n-                            trait_desc: trait_ref.print_only_trait_path().to_string(),\n-                            self_desc: if self_ty.has_concrete_skeleton() {\n-                                Some(self_ty.to_string())\n-                            } else {\n-                                None\n-                            },\n-                        };\n+                        let cause =\n+                            with_no_trimmed_paths(|| IntercrateAmbiguityCause::DownstreamCrate {\n+                                trait_desc: trait_ref.print_only_trait_path().to_string(),\n+                                self_desc: if self_ty.has_concrete_skeleton() {\n+                                    Some(self_ty.to_string())\n+                                } else {\n+                                    None\n+                                },\n+                            });\n+\n                         debug!(\"evaluate_stack: pushing cause = {:?}\", cause);\n                         self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);\n                     }\n@@ -1030,12 +1033,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     if !candidate_set.ambiguous && no_candidates_apply {\n                         let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n                         let self_ty = trait_ref.self_ty();\n-                        let trait_desc = trait_ref.print_only_trait_path().to_string();\n-                        let self_desc = if self_ty.has_concrete_skeleton() {\n-                            Some(self_ty.to_string())\n-                        } else {\n-                            None\n-                        };\n+                        let (trait_desc, self_desc) = with_no_trimmed_paths(|| {\n+                            let trait_desc = trait_ref.print_only_trait_path().to_string();\n+                            let self_desc = if self_ty.has_concrete_skeleton() {\n+                                Some(self_ty.to_string())\n+                            } else {\n+                                None\n+                            };\n+                            (trait_desc, self_desc)\n+                        });\n                         let cause = if let Conflict::Upstream = conflict {\n                             IntercrateAmbiguityCause::UpstreamCrateUpdate { trait_desc, self_desc }\n                         } else {"}, {"sha": "c8bcab6efd7ca4cac621368a8e59036b8a0c799a", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -3,6 +3,7 @@ use super::OverlapError;\n use crate::traits;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType};\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n \n pub use rustc_middle::traits::specialization_graph::*;\n@@ -102,7 +103,8 @@ impl ChildrenExt for Children {\n                 let trait_ref = overlap.impl_header.trait_ref.unwrap();\n                 let self_ty = trait_ref.self_ty();\n \n-                OverlapError {\n+                // FIXME: should postpone string formatting until we decide to actually emit.\n+                with_no_trimmed_paths(|| OverlapError {\n                     with_impl: possible_sibling,\n                     trait_desc: trait_ref.print_only_trait_path().to_string(),\n                     // Only report the `Self` type if it has at least\n@@ -115,7 +117,7 @@ impl ChildrenExt for Children {\n                     },\n                     intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,\n                     involves_placeholder: overlap.involves_placeholder,\n-                }\n+                })\n             };\n \n             let report_overlap_error = |overlap: traits::coherence::OverlapResult<'_>,"}, {"sha": "2c51eda6d639e8d9bb6abba19bacdf7ec83ae57a", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2487,14 +2487,14 @@ fn fn_sig_suggestion<'tcx>(\n                             _ => format!(\"self: {}\", ty),\n                         }\n                     } else {\n-                        format!(\"_: {:?}\", ty)\n+                        format!(\"_: {}\", ty)\n                     }\n                 }\n                 _ => {\n                     if assoc.fn_has_self_parameter && i == 0 {\n-                        format!(\"self: {:?}\", ty)\n+                        format!(\"self: {}\", ty)\n                     } else {\n-                        format!(\"_: {:?}\", ty)\n+                        format!(\"_: {}\", ty)\n                     }\n                 }\n             })\n@@ -2504,7 +2504,7 @@ fn fn_sig_suggestion<'tcx>(\n         .collect::<Vec<String>>()\n         .join(\", \");\n     let output = sig.output();\n-    let output = if !output.is_unit() { format!(\" -> {:?}\", output) } else { String::new() };\n+    let output = if !output.is_unit() { format!(\" -> {}\", output) } else { String::new() };\n \n     let unsafety = sig.unsafety.prefix_str();\n     let (generics, where_clauses) = bounds_from_generic_predicates(tcx, predicates);\n@@ -2542,7 +2542,7 @@ fn suggestion_signature(assoc: &ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n         ty::AssocKind::Const => {\n             let ty = tcx.type_of(assoc.def_id);\n             let val = expr::ty_kind_suggestion(ty).unwrap_or(\"value\");\n-            format!(\"const {}: {:?} = {};\", assoc.ident, ty, val)\n+            format!(\"const {}: {} = {};\", assoc.ident, ty, val)\n         }\n     }\n }"}, {"sha": "835b70180a5ec257f679d1c3b4d897f106568e27", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1177,7 +1177,7 @@ fn e0307(fcx: &FnCtxt<'fcx, 'tcx>, span: Span, receiver_ty: Ty<'_>) {\n         fcx.tcx.sess.diagnostic(),\n         span,\n         E0307,\n-        \"invalid `self` parameter type: {:?}\",\n+        \"invalid `self` parameter type: {}\",\n         receiver_ty,\n     )\n     .note(\"type of `self` must be `Self` or a type that dereferences to it\")"}, {"sha": "61dd3a923f265c9be63a2023bb41205e7d5abc38", "filename": "src/test/compile-fail/issue-43733-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -22,7 +22,7 @@ impl<T> Key<T> {\n use std::thread::__FastLocalKeyInner as Key;\n \n static __KEY: Key<()> = Key::new();\n-//~^ ERROR `std::cell::UnsafeCell<std::option::Option<()>>` cannot be shared between threads\n+//~^ ERROR `UnsafeCell<Option<()>>` cannot be shared between threads\n //~| ERROR cannot be shared between threads safely [E0277]\n \n fn main() {}"}, {"sha": "70dddf61fb7d89a0f94273551f7ee7ee000a90cb", "filename": "src/test/compile-fail/must_use-in-stdlib-traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -39,9 +39,9 @@ fn square_fn() -> impl Fn(u32) -> u32 {\n }\n \n fn main() {\n-   iterator(); //~ ERROR unused implementer of `std::iter::Iterator` that must be used\n-   future(); //~ ERROR unused implementer of `std::future::Future` that must be used\n-   square_fn_once(); //~ ERROR unused implementer of `std::ops::FnOnce` that must be used\n-   square_fn_mut(); //~ ERROR unused implementer of `std::ops::FnMut` that must be used\n-   square_fn(); //~ ERROR unused implementer of `std::ops::Fn` that must be used\n+   iterator(); //~ ERROR unused implementer of `Iterator` that must be used\n+   future(); //~ ERROR unused implementer of `Future` that must be used\n+   square_fn_once(); //~ ERROR unused implementer of `FnOnce` that must be used\n+   square_fn_mut(); //~ ERROR unused implementer of `FnMut` that must be used\n+   square_fn(); //~ ERROR unused implementer of `Fn` that must be used\n }"}, {"sha": "02c9a0c579887f51765128cd6346490c450c8330", "filename": "src/test/incremental/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fdirty_clean.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -27,14 +27,14 @@ mod y {\n \n     #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n     pub fn y() {\n-        //[cfail2]~^ ERROR `typeck(y::y)` should be clean but is not\n+        //[cfail2]~^ ERROR `typeck(y)` should be clean but is not\n         x::x();\n     }\n }\n \n mod z {\n     #[rustc_dirty(label=\"typeck\", cfg=\"cfail2\")]\n     pub fn z() {\n-        //[cfail2]~^ ERROR `typeck(z::z)` should be dirty but is not\n+        //[cfail2]~^ ERROR `typeck(z)` should be dirty but is not\n     }\n }"}, {"sha": "50326253ce4978e8c3e04d27a2f1db4c5d954c78", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -35,7 +35,7 @@ fn main() -> () {\n         _2 = move _3;                    // scope 2 at $DIR/basic_assignment.rs:16:5: 16:24\n         StorageDead(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:23: 16:24\n         StorageLive(_4);                 // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n-        _4 = std::option::Option::<std::boxed::Box<u32>>::None; // scope 2 at $DIR/basic_assignment.rs:18:36: 18:40\n+        _4 = Option::<Box<u32>>::None;   // scope 2 at $DIR/basic_assignment.rs:18:36: 18:40\n         FakeRead(ForLet, _4);            // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n         AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/basic_assignment.rs:18:17: 18:33\n         StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15"}, {"sha": "408efb4cadecb846cb6a6810b0309d44db6d6552", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -38,7 +38,7 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n         StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n         _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _3 = std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        _3 = std::mem::drop::<Box<S>>(move _4) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n                                          // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "a137d7fadba107948f1ea1d6e8729f533ca67f75", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.mir.32bit", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.32bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -8,7 +8,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc0: &&[(std::option::Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        _2 = const {alloc0: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&str])]\n                                          // + val: Value(Scalar(alloc0))"}, {"sha": "ef98cf9c091481d9b9a53474bff539a6db130005", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.mir.64bit", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.64bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -8,7 +8,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc0: &&[(std::option::Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        _2 = const {alloc0: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&str])]\n                                          // + val: Value(Scalar(alloc0))"}, {"sha": "c4f10064890a7e5a77871927e38e1778dfd31ef5", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.mir.32bit", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.32bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -8,7 +8,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc0: &&[(std::option::Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        _2 = const {alloc0: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&u8])]\n                                          // + val: Value(Scalar(alloc0))"}, {"sha": "b16b85c4e95ac1486c00cbdfd78ae19700e0171e", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.mir.64bit", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.64bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -8,7 +8,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc0: &&[(std::option::Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        _2 = const {alloc0: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&u8])]\n                                          // + val: Value(Scalar(alloc0))"}, {"sha": "916a876b58288f80719ff16bb12c86d13eb525de", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -16,7 +16,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:9: 7:10\n           StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:30\n           StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-          _3 = const main::FOO;            // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n+          _3 = const FOO;                  // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // ty::Const\n                                            // + ty: &i32\n                                            // + val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), const_param_did: None }, [], None)"}, {"sha": "80b7e7ecddab92c6c307c077511a114076dad771", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -22,7 +22,7 @@\n   \n       bb2: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          std::rt::begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "0db0f8349bb73ed58787201f2a86db7e73c51362", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,6 +1,6 @@\n // MIR for `match_tuple` after SimplifyCfg-initial\n \n-fn match_tuple(_1: (u32, bool, std::option::Option<i32>, u32)) -> u32 {\n+fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n     debug x => _1;                       // in scope 0 at $DIR/exponential-or.rs:6:16: 6:17\n     let mut _0: u32;                     // return place in scope 0 at $DIR/exponential-or.rs:6:53: 6:56\n     let mut _2: isize;                   // in scope 0 at $DIR/exponential-or.rs:8:37: 8:48"}, {"sha": "d3f92d389f5b2f72eb445f7f32d54f9bec0684b9", "filename": "src/test/mir-opt/fn_ptr_shim.core.ops-function-Fn-call.AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Ffn_ptr_shim.core.ops-function-Fn-call.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Ffn_ptr_shim.core.ops-function-Fn-call.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffn_ptr_shim.core.ops-function-Fn-call.AddMovesForPackedDrops.before.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,6 +1,6 @@\n // MIR for `std::ops::Fn::call` before AddMovesForPackedDrops\n \n-fn std::ops::Fn::call(_1: *const fn(), _2: Args) -> <Self as std::ops::FnOnce<Args>>::Output {\n+fn std::ops::Fn::call(_1: *const fn(), _2: Args) -> <Self as FnOnce<Args>>::Output {\n     let mut _0: <Self as std::ops::FnOnce<Args>>::Output; // return place in scope 0 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n \n     bb0: {"}, {"sha": "bb79cd80e51b648351731ec15aafeac9e98fe22f", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `float_to_exponential_common` before ConstProp\n + // MIR for `float_to_exponential_common` after ConstProp\n   \n-  fn float_to_exponential_common(_1: &mut std::fmt::Formatter, _2: &T, _3: bool) -> std::result::Result<(), std::fmt::Error> {\n+  fn float_to_exponential_common(_1: &mut Formatter, _2: &T, _3: bool) -> std::result::Result<(), std::fmt::Error> {\n       debug fmt => _1;                     // in scope 0 at $DIR/funky_arms.rs:11:35: 11:38\n       debug num => _2;                     // in scope 0 at $DIR/funky_arms.rs:11:60: 11:63\n       debug upper => _3;                   // in scope 0 at $DIR/funky_arms.rs:11:69: 11:74\n@@ -38,7 +38,7 @@\n           StorageLive(_4);                 // scope 0 at $DIR/funky_arms.rs:15:9: 15:19\n           StorageLive(_5);                 // scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n           _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n-          _4 = std::fmt::Formatter::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n+          _4 = Formatter::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:15:26: 15:35\n                                            // + literal: Const { ty: for<'r> fn(&'r std::fmt::Formatter) -> bool {std::fmt::Formatter::sign_plus}, val: Value(Scalar(<ZST>)) }\n@@ -64,7 +64,7 @@\n           StorageLive(_7);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n           StorageLive(_8);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:33\n           _8 = &(*_1);                     // scope 2 at $DIR/funky_arms.rs:24:30: 24:33\n-          _7 = std::fmt::Formatter::precision(move _8) -> bb5; // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n+          _7 = Formatter::precision(move _8) -> bb5; // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:24:34: 24:43\n                                            // + literal: Const { ty: for<'r> fn(&'r std::fmt::Formatter) -> std::option::Option<usize> {std::fmt::Formatter::precision}, val: Value(Scalar(<ZST>)) }"}, {"sha": "89396b64fce43a1f809df64511397e63c893d633", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{{closure}}.generator_drop.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -14,7 +14,7 @@\n     },\n } */\n \n-fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 13:6 {std::string::String, ()}]) -> () {\n+fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 13:6 {String, ()}]) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:11:13: 11:15"}, {"sha": "87889460e7eec516e5353d51208bbee3126c6f3e", "filename": "src/test/mir-opt/generator_tiny.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -10,7 +10,7 @@\n     storage_conflicts: BitMatrix(0x0) {},\n } */\n \n-fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]>, _2: u8) -> std::ops::GeneratorState<(), ()> {\n+fn main::{{closure}}#0(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]>, _2: u8) -> GeneratorState<(), ()> {\n     debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n     let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n     let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:20:13: 20:15"}, {"sha": "2d52f034e52fa067eaeeb7c06df6b3355d83d7ce", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff.32bit", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -17,9 +17,9 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n           StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+-         (*_2) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n@@ -54,7 +54,7 @@\n -     }\n - \n -     bb4 (cleanup): {\n--         _3 = alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = alloc::alloc::box_free::<Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "d4e2df6fbfa1824d96ad9a6dcd06bc9e2cac22d8", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff.64bit", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -17,9 +17,9 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n           StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+-         (*_2) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n@@ -54,7 +54,7 @@\n -     }\n - \n -     bb4 (cleanup): {\n--         _3 = alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = alloc::alloc::box_free::<Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "2ffc02523596e50854b57296c7bb4cf7303603e3", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -12,7 +12,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-specialization.rs:5:9: 5:10\n--         _1 = <std::vec::Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline-specialization.rs:5:13: 5:38\n+-         _1 = <Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline-specialization.rs:5:13: 5:38\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-specialization.rs:5:13: 5:36\n -                                          // + literal: Const { ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}, val: Value(Scalar(<ZST>)) }"}, {"sha": "c9a6aed3d4ab3c739a0743f8db1fca75fe44b0e5", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,6 +1,6 @@\n // MIR for `b` after Inline\n \n-fn b(_1: &mut std::boxed::Box<T>) -> &mut T {\n+fn b(_1: &mut Box<T>) -> &mut T {\n     debug x => _1;                       // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:7:13: 7:14\n     let mut _0: &mut T;                  // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:7:32: 7:38\n     let mut _2: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15"}, {"sha": "89f8aae73cd318563b4d713bf813375b8622dd21", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,6 +1,6 @@\n // MIR for `d` after Inline\n \n-fn d(_1: &std::boxed::Box<T>) -> &T {\n+fn d(_1: &Box<T>) -> &T {\n     debug x => _1;                       // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:17:13: 17:14\n     let mut _0: &T;                      // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:17:28: 17:30\n     let _2: &T;                          // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15"}, {"sha": "137d9a8247f00273314f6a1ccfc4caa1ce348e5d", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,6 +1,6 @@\n // MIR for `test` before ElaborateDrops\n \n-fn test() -> std::option::Option<std::boxed::Box<u32>> {\n+fn test() -> Option<Box<u32>> {\n     let mut _0: std::option::Option<std::boxed::Box<u32>>; // return place in scope 0 at $DIR/issue-62289.rs:8:14: 8:30\n     let mut _1: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n     let mut _2: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n@@ -29,8 +29,8 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n         _2 = Box(u32);                   // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n         StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _4 = std::option::Option::<u32>::None; // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = <std::option::Option<u32> as std::ops::Try>::into_result(move _4) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _4 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+        _3 = <Option<u32> as Try>::into_result(move _4) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n@@ -69,7 +69,7 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n         StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb8, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = <NoneError as From<NoneError>>::from(move _9) -> [return: bb8, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:19: 9:20\n                                          // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n@@ -81,7 +81,7 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n \n     bb8: {\n         StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb9, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb9, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n@@ -106,7 +106,7 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n \n     bb12: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        _0 = std::option::Option::<std::boxed::Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n         drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n "}, {"sha": "d9e5d2c389298916f4cc2d4104aab48c0a7457b5", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -21,7 +21,7 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n         StorageLive(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n         _3 = ();                         // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n-        _2 = std::intrinsics::transmute::<(), Void>(move _3) -> [return: bb2, unwind: bb1]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n+        _2 = transmute::<(), Void>(move _3) -> [return: bb2, unwind: bb1]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "f86755cfa7f70a34bdc046832707c28ef24d11c7", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.diff.32bit", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -140,20 +140,20 @@\n           _22 = (_18.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _23 = (_18.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_24);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _25 = <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _25 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _28 = std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _25) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _28 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _25) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb3: {\n           StorageLive(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _29 = std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _22) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _29 = transmute::<&&i32, &core::fmt::Opaque>(move _22) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -165,20 +165,20 @@\n           StorageDead(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageDead(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _27 = <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _27 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_30);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _30 = std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _30 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n           StorageLive(_31);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _31 = std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _23) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _31 = transmute::<&&i32, &core::fmt::Opaque>(move _23) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -201,7 +201,7 @@\n           (_13.2: &[std::fmt::ArgumentV1]) = move _15; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageDead(_32);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          std::rt::begin_panic_fmt(move _12); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          begin_panic_fmt(move _12);       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "f86755cfa7f70a34bdc046832707c28ef24d11c7", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.diff.64bit", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -140,20 +140,20 @@\n           _22 = (_18.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _23 = (_18.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_24);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _25 = <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _25 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _28 = std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _25) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _28 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _25) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb3: {\n           StorageLive(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _29 = std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _22) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _29 = transmute::<&&i32, &core::fmt::Opaque>(move _22) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -165,20 +165,20 @@\n           StorageDead(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageDead(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _27 = <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _27 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_30);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _30 = std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _30 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n           StorageLive(_31);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _31 = std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _23) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _31 = transmute::<&&i32, &core::fmt::Opaque>(move _23) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -201,7 +201,7 @@\n           (_13.2: &[std::fmt::ArgumentV1]) = move _15; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageDead(_32);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          std::rt::begin_panic_fmt(move _12); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          begin_panic_fmt(move _12);       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "302612f5a0a288190fc4b4726efcfca34f7aa785", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff.32bit", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -217,14 +217,14 @@\n           StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _39 = _36;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _40 = <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _40 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _47 = _40;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _46 = std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _46 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -235,7 +235,7 @@\n           StorageLive(_48);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_49);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _49 = _39;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _48 = std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb7; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _48 = transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb7; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -253,14 +253,14 @@\n           StorageLive(_42);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _42 = _37;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_43);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _43 = <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _43 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _51 = _43;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _50 = std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _50 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -271,7 +271,7 @@\n           StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_53);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _53 = _42;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _52 = std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb9; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _52 = transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb9; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -310,7 +310,7 @@\n           StorageDead(_23);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _21 = &_22;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _20 = _21;                       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          std::rt::begin_panic_fmt(move _20); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          begin_panic_fmt(move _20);       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "302612f5a0a288190fc4b4726efcfca34f7aa785", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff.64bit", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -217,14 +217,14 @@\n           StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _39 = _36;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _40 = <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _40 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _47 = _40;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _46 = std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _46 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -235,7 +235,7 @@\n           StorageLive(_48);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_49);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _49 = _39;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _48 = std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb7; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _48 = transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb7; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -253,14 +253,14 @@\n           StorageLive(_42);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _42 = _37;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_43);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _43 = <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _43 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _51 = _43;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _50 = std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _50 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -271,7 +271,7 @@\n           StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_53);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _53 = _42;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _52 = std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb9; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _52 = transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb9; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -310,7 +310,7 @@\n           StorageDead(_23);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _21 = &_22;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _20 = _21;                       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          std::rt::begin_panic_fmt(move _20); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          begin_panic_fmt(move _20);       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "8062f33a86614deedd187dd3ddd75c9c687636c8", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `complicated_match` after SimplifyCfg-initial\n + // MIR for `complicated_match` after ElaborateDrops\n   \n-  fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n+  fn complicated_match(_1: bool, _2: (bool, bool, String)) -> i32 {\n       debug cond => _1;                    // in scope 0 at $DIR/match-arm-scopes.rs:13:22: 13:26\n       debug items => _2;                   // in scope 0 at $DIR/match-arm-scopes.rs:13:34: 13:39\n       let mut _0: i32;                     // return place in scope 0 at $DIR/match-arm-scopes.rs:13:66: 13:69"}, {"sha": "14b1508f60827c0186f5ecbcad4c67a9d20be6fe", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -26,7 +26,7 @@ fn full_tested_match() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        _2 = std::option::Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n         switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16"}, {"sha": "a6c492581feb01add272199d86a7374d4c6adf47", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -25,7 +25,7 @@ fn full_tested_match2() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        _2 = std::option::Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n         switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16"}, {"sha": "1d451cef2a0620719034bc591f1e0106fc788ac7", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -36,7 +36,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        _2 = std::option::Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        _2 = Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n         switchInt(move _4) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17"}, {"sha": "41f36036a18b9a54065ab65b7df72ecb73b085bb", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `foo` before MatchBranchSimplification\n + // MIR for `foo` after MatchBranchSimplification\n   \n-  fn foo(_1: std::option::Option<()>) -> () {\n+  fn foo(_1: Option<()>) -> () {\n       debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:5:8: 5:11\n       let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:5:25: 5:25\n       let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "41f36036a18b9a54065ab65b7df72ecb73b085bb", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `foo` before MatchBranchSimplification\n + // MIR for `foo` after MatchBranchSimplification\n   \n-  fn foo(_1: std::option::Option<()>) -> () {\n+  fn foo(_1: Option<()>) -> () {\n       debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:5:8: 5:11\n       let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:5:25: 5:25\n       let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "5de8e98ced46fa2d19fa120aa5fb6e20f83796a6", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,6 +1,6 @@\n // MIR for `unwrap` after SimplifyCfg-elaborate-drops\n \n-fn unwrap(_1: std::option::Option<T>) -> T {\n+fn unwrap(_1: Option<T>) -> T {\n     debug opt => _1;                     // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:14: 7:17\n     let mut _0: T;                       // return place in scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:33: 7:34\n     let mut _2: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n@@ -20,7 +20,7 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n \n     bb1: {\n         StorageLive(_4);                 // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-        std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+        begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                          // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "495c7f24c8c1d60bb6c72d4866dfe3a6278555fb", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -20,7 +20,7 @@ fn main() -> () {\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n         _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-        _2 = <str as std::string::ToString>::to_string(move _3) -> bb2; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n+        _2 = <str as ToString>::to_string(move _3) -> bb2; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:23: 9:32\n                                          // + literal: Const { ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}, val: Value(Scalar(<ZST>)) }\n@@ -32,7 +32,7 @@ fn main() -> () {\n \n     bb2: {\n         StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n-        _1 = std::mem::drop::<std::string::String>(move _2) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n+        _1 = std::mem::drop::<String>(move _2) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:5: 9:19\n                                          // + literal: Const { ty: fn(std::string::String) {std::mem::drop::<std::string::String>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "47027311b475981626589f36c1a50aab0ff79787", "filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `match_guard` before CleanupNonCodegenStatements\n + // MIR for `match_guard` after CleanupNonCodegenStatements\n   \n-  fn match_guard(_1: std::option::Option<&&i32>, _2: bool) -> i32 {\n+  fn match_guard(_1: Option<&&i32>, _2: bool) -> i32 {\n       debug x => _1;                       // in scope 0 at $DIR/remove_fake_borrows.rs:6:16: 6:17\n       debug c => _2;                       // in scope 0 at $DIR/remove_fake_borrows.rs:6:34: 6:35\n       let mut _0: i32;                     // return place in scope 0 at $DIR/remove_fake_borrows.rs:6:46: 6:49"}, {"sha": "d0268cf207b42f7588ef3e6989b2e99e92365447", "filename": "src/test/mir-opt/retag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,14 +1,14 @@\n-// MIR for `std::intrinsics::drop_in_place` after SimplifyCfg-make_shim\n+// MIR for `drop_in_place` after SimplifyCfg-make_shim\n \n-fn std::intrinsics::drop_in_place(_1: *mut Test) -> () {\n+fn drop_in_place(_1: *mut Test) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _2: &mut Test;               // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n \n     bb0: {\n         Retag([raw] _1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        _3 = <Test as std::ops::Drop>::drop(move _2) -> bb1; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _3 = <Test as Drop>::drop(move _2) -> bb1; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut Test) {<Test as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "e390662307e04824f79809b9088b499765465f41", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `id` before SimplifyArmIdentity\n + // MIR for `id` after SimplifyArmIdentity\n   \n-  fn id(_1: std::option::Option<u8>) -> std::option::Option<u8> {\n+  fn id(_1: Option<u8>) -> Option<u8> {\n       debug o => _1;                       // in scope 0 at $DIR/simplify-arm.rs:9:7: 9:8\n       let mut _0: std::option::Option<u8>; // return place in scope 0 at $DIR/simplify-arm.rs:9:25: 9:35\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:11:9: 11:16"}, {"sha": "81a0e6ba0b4eeb91e6eaad55080564845e5a1979", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyBranchSame.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `id` before SimplifyBranchSame\n + // MIR for `id` after SimplifyBranchSame\n   \n-  fn id(_1: std::option::Option<u8>) -> std::option::Option<u8> {\n+  fn id(_1: Option<u8>) -> Option<u8> {\n       debug o => _1;                       // in scope 0 at $DIR/simplify-arm.rs:9:7: 9:8\n       let mut _0: std::option::Option<u8>; // return place in scope 0 at $DIR/simplify-arm.rs:9:25: 9:35\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:11:9: 11:16"}, {"sha": "68a113f94efdaed487ed0d390ca660c1f06cc7dc", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `map` before SimplifyLocals\n + // MIR for `map` after SimplifyLocals\n   \n-  fn map(_1: std::option::Option<std::boxed::Box<()>>) -> std::option::Option<std::boxed::Box<()>> {\n+  fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n -     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13"}, {"sha": "68a113f94efdaed487ed0d390ca660c1f06cc7dc", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `map` before SimplifyLocals\n + // MIR for `map` after SimplifyLocals\n   \n-  fn map(_1: std::option::Option<std::boxed::Box<()>>) -> std::option::Option<std::boxed::Box<()>> {\n+  fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n -     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13"}, {"sha": "869e3647f45087d38b4a8d3144acf4c42e2f5fa7", "filename": "src/test/mir-opt/simplify_try_if_let.{{impl}}-append.SimplifyArmIdentity.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -35,7 +35,7 @@\n           StorageLive(_5);                 // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:60\n           StorageLive(_6);                 // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:53\n           _6 = &mut ((*_2).0: std::option::Option<std::ptr::NonNull<Node>>); // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:53\n-          _5 = std::option::Option::<std::ptr::NonNull<Node>>::take(move _6) -> bb4; // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:60\n+          _5 = Option::<NonNull<Node>>::take(move _6) -> bb4; // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:60\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_try_if_let.rs:26:54: 26:58\n                                            // + literal: Const { ty: for<'r> fn(&'r mut std::option::Option<std::ptr::NonNull<Node>>) -> std::option::Option<std::ptr::NonNull<Node>> {std::option::Option::<std::ptr::NonNull<Node>>::take}, val: Value(Scalar(<ZST>)) }\n@@ -73,7 +73,7 @@\n           StorageLive(_11);                // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:38\n           StorageLive(_12);                // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:29\n           _12 = &mut _4;                   // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:29\n-          _11 = std::ptr::NonNull::<Node>::as_mut(move _12) -> bb7; // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:38\n+          _11 = NonNull::<Node>::as_mut(move _12) -> bb7; // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:38\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_try_if_let.rs:28:30: 28:36\n                                            // + literal: Const { ty: for<'r> unsafe fn(&'r mut std::ptr::NonNull<Node>) -> &'r mut Node {std::ptr::NonNull::<Node>::as_mut}, val: Value(Scalar(<ZST>)) }"}, {"sha": "0fd32906db6be56536e6d51e65bf26864e4daf1d", "filename": "src/test/mir-opt/slice-drop-shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Zmir-opt-level=0\n \n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n-// EMIT_MIR core.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir\n+// EMIT_MIR core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir\n fn main() {\n     let _fn = std::ptr::drop_in_place::<[String]> as unsafe fn(_);\n }"}, {"sha": "8051c61bce904cb97f4d56fae5b34a8552706bbd", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir.32bit", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir.32bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `std::intrinsics::drop_in_place` before AddMovesForPackedDrops\n+// MIR for `drop_in_place` before AddMovesForPackedDrops\n \n-fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n+fn drop_in_place(_1: *mut [String]) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _2: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _3: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL", "previous_filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir.32bit"}, {"sha": "8051c61bce904cb97f4d56fae5b34a8552706bbd", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir.64bit", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir.64bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `std::intrinsics::drop_in_place` before AddMovesForPackedDrops\n+// MIR for `drop_in_place` before AddMovesForPackedDrops\n \n-fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n+fn drop_in_place(_1: *mut [String]) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _2: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _3: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL", "previous_filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir.64bit"}, {"sha": "6fa83d3de6253f80515c9863596a57939453f818", "filename": "src/test/mir-opt/storage_ranges.main.nll.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -45,7 +45,7 @@ fn main() -> () {\n         StorageLive(_4);                 // scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n         StorageLive(_5);                 // scope 1 at $DIR/storage_ranges.rs:6:23: 6:24\n         _5 = _1;                         // scope 1 at $DIR/storage_ranges.rs:6:23: 6:24\n-        _4 = std::option::Option::<i32>::Some(move _5); // scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n+        _4 = Option::<i32>::Some(move _5); // scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n         StorageDead(_5);                 // scope 1 at $DIR/storage_ranges.rs:6:24: 6:25\n         _3 = &_4;                        // scope 1 at $DIR/storage_ranges.rs:6:17: 6:25\n         FakeRead(ForLet, _3);            // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14"}, {"sha": "9a6b82272391ea1b138660df5784076446928cee", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -24,6 +24,6 @@ enum E {\n \n fn main() {\n     let f = Test::X as fn(usize) -> Test;\n-// EMIT_MIR core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir\n+// EMIT_MIR core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir\n     let v = Vec::<i32>::new();\n }"}, {"sha": "2d96f64aeb41f8c4b117289d0818935ee34f2592", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir.32bit", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir.32bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `std::intrinsics::drop_in_place` before AddMovesForPackedDrops\n+// MIR for `drop_in_place` before AddMovesForPackedDrops\n \n-fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n+fn drop_in_place(_1: *mut Vec<i32>) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _2: &mut std::vec::Vec<i32>; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n@@ -35,7 +35,7 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n \n     bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        _3 = <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }", "previous_filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.32bit"}, {"sha": "2d96f64aeb41f8c4b117289d0818935ee34f2592", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir.64bit", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir.64bit?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `std::intrinsics::drop_in_place` before AddMovesForPackedDrops\n+// MIR for `drop_in_place` before AddMovesForPackedDrops\n \n-fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n+fn drop_in_place(_1: *mut Vec<i32>) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _2: &mut std::vec::Vec<i32>; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n@@ -35,7 +35,7 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n \n     bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        _3 = <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }", "previous_filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.64bit"}, {"sha": "7b0a00282fbb01adf418d24e22f8dd15c5820898", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -32,34 +32,34 @@\n                   ({\n                        let res =\n                            ((::alloc::fmt::format as\n-                                for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((::core::fmt::Arguments::new_v1\n-                                                                                                                    as\n-                                                                                                                    fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([(\"test\"\n-                                                                                                                                                                                                                               as\n-                                                                                                                                                                                                                               &str)]\n-                                                                                                                                                                                                                             as\n-                                                                                                                                                                                                                             [&str; 1])\n-                                                                                                                                                                                                                           as\n-                                                                                                                                                                                                                           &[&str; 1]),\n-                                                                                                                                                                                                                       (&(match (()\n-                                                                                                                                                                                                                                    as\n-                                                                                                                                                                                                                                    ())\n-                                                                                                                                                                                                                              {\n-                                                                                                                                                                                                                              ()\n-                                                                                                                                                                                                                              =>\n-                                                                                                                                                                                                                              ([]\n-                                                                                                                                                                                                                                  as\n-                                                                                                                                                                                                                                  [std::fmt::ArgumentV1; 0]),\n-                                                                                                                                                                                                                          }\n-                                                                                                                                                                                                                             as\n-                                                                                                                                                                                                                             [std::fmt::ArgumentV1; 0])\n-                                                                                                                                                                                                                           as\n-                                                                                                                                                                                                                           &[std::fmt::ArgumentV1; 0]))\n-                                                                                                                   as\n-                                                                                                                   std::fmt::Arguments))\n-                               as std::string::String);\n-                       (res as std::string::String)\n-                   } as std::string::String);\n+                                for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n+                                                                                   as\n+                                                                                   fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n+                                                                                                                                                                as\n+                                                                                                                                                                &str)]\n+                                                                                                                                                              as\n+                                                                                                                                                              [&str; 1])\n+                                                                                                                                                            as\n+                                                                                                                                                            &[&str; 1]),\n+                                                                                                                                                        (&(match (()\n+                                                                                                                                                                     as\n+                                                                                                                                                                     ())\n+                                                                                                                                                               {\n+                                                                                                                                                               ()\n+                                                                                                                                                               =>\n+                                                                                                                                                               ([]\n+                                                                                                                                                                   as\n+                                                                                                                                                                   [ArgumentV1; 0]),\n+                                                                                                                                                           }\n+                                                                                                                                                              as\n+                                                                                                                                                              [ArgumentV1; 0])\n+                                                                                                                                                            as\n+                                                                                                                                                            &[ArgumentV1; 0]))\n+                                                                                  as\n+                                                                                  Arguments))\n+                               as String);\n+                       (res as String)\n+                   } as String);\n               } as ())\n pub type Foo = [i32; (3 as usize)];\n pub struct Bar {"}, {"sha": "802b3df460a79dc73b8c9682189abccdb0e71264", "filename": "src/test/run-make-fulldeps/type-mismatch-same-crate-name/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -11,9 +11,9 @@ all:\n \t\ttr -d '\\r\\n' | $(CGREP) -e \\\n \t\"mismatched types.*\\\n \tcrateB::try_foo\\(foo2\\);.*\\\n-\texpected struct \\`crateA::foo::Foo\\`, found struct \\`crateA::Foo\\`.*\\\n+\texpected struct \\`crateA::foo::Foo\\`, found struct \\`Foo\\`.*\\\n \tdifferent versions of crate \\`crateA\\`.*\\\n \tmismatched types.*\\\n \tcrateB::try_bar\\(bar2\\);.*\\\n-\texpected trait \\`crateA::bar::Bar\\`, found trait \\`crateA::Bar\\`.*\\\n+\texpected trait \\`crateA::bar::Bar\\`, found trait \\`Bar\\`.*\\\n \tdifferent versions of crate \\`crateA\\`\""}, {"sha": "4299688221a8b3d1498f18a2719b8ac75d26c123", "filename": "src/test/ui-fulldeps/dropck-tarena-cycle-checked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-cycle-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-cycle-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-cycle-checked.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `arena` dropped here while still borrowed\n-   | borrow might be used here, when `arena` is dropped and runs the `Drop` code for type `rustc_arena::TypedArena`\n+   | borrow might be used here, when `arena` is dropped and runs the `Drop` code for type `TypedArena`\n \n error: aborting due to previous error\n "}, {"sha": "ccffee9cdbda97c9270914bf91c553266b6e72d8", "filename": "src/test/ui-fulldeps/dropck-tarena-unsound-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-unsound-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-unsound-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-unsound-drop.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `arena` dropped here while still borrowed\n-   | borrow might be used here, when `arena` is dropped and runs the `Drop` code for type `rustc_arena::TypedArena`\n+   | borrow might be used here, when `arena` is dropped and runs the `Drop` code for type `TypedArena`\n \n error: aborting due to previous error\n "}, {"sha": "c32e944afe36c0a30ad47af96784181c0b6dbf51", "filename": "src/test/ui/access-mode-in-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL |         match *s { S(v) => v }\n    |               ^^     -\n    |               |      |\n    |               |      data moved here\n-   |               |      move occurs because `v` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n+   |               |      move occurs because `v` has type `Vec<isize>`, which does not implement the `Copy` trait\n    |               help: consider borrowing here: `&*s`\n \n error: aborting due to previous error"}, {"sha": "c0ea8ff47e85b1e8143d1570a15d250b67c21939", "filename": "src/test/ui/allocator/not-an-allocator.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,35 +1,35 @@\n-error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n+error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n    |\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n+   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::alloc`\n    = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n+error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n    |\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n+   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::dealloc`\n    = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n+error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n    |\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n+   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::realloc`\n    = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n+error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n    |\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n+   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::alloc_zeroed`\n    = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "576fcc6fade64d3b2091e35f676350375e0a0a6b", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -59,7 +59,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     g1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n-   |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>) -> _`\n+   |     expected signature of `for<'r> fn(&'r (), Box<(dyn for<'s> Fn(&'s ()) + 'static)>) -> _`\n ...\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n    |                         ------------------------- required by this bound in `g1`\n@@ -81,7 +81,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     g3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n-   |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n+   |     expected signature of `for<'s> fn(&'s (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n ...\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n    |                         ------------------------------------ required by this bound in `g3`\n@@ -103,7 +103,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n-   |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<(dyn for<'t0> std::ops::Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n+   |     expected signature of `for<'r, 's> fn(&'r (), Box<(dyn for<'t0> Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n ...\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n    |                         -------------------------------------------- required by this bound in `h1`\n@@ -114,7 +114,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n-   |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n+   |     expected signature of `for<'r, 't0> fn(&'r (), Box<(dyn for<'s> Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n ...\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n    |                         --------------------------------------------------------- required by this bound in `h2`"}, {"sha": "521b898e7fe4b47d6af7672c297d1d5b5c184ead", "filename": "src/test/ui/array-slice-vec/slice-pat-type-mismatches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     match \"foo\".to_string() {\n         ['f', 'o', ..] => {}\n-        //~^ ERROR expected an array or slice, found `std::string::String`\n+        //~^ ERROR expected an array or slice, found `String`\n         _ => { }\n     };\n "}, {"sha": "20a5b99845bbcb5022f9929c539be5dcec248f1a", "filename": "src/test/ui/array-slice-vec/slice-pat-type-mismatches.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,11 +4,11 @@ error[E0425]: cannot find value `does_not_exist` in this scope\n LL |     match does_not_exist {\n    |           ^^^^^^^^^^^^^^ not found in this scope\n \n-error[E0529]: expected an array or slice, found `std::string::String`\n+error[E0529]: expected an array or slice, found `String`\n   --> $DIR/slice-pat-type-mismatches.rs:3:9\n    |\n LL |         ['f', 'o', ..] => {}\n-   |         ^^^^^^^^^^^^^^ pattern cannot match with input type `std::string::String`\n+   |         ^^^^^^^^^^^^^^ pattern cannot match with input type `String`\n \n error[E0527]: pattern requires 1 element but array has 3\n   --> $DIR/slice-pat-type-mismatches.rs:18:9"}, {"sha": "556e83fdb0d4231d90668b0d23aadb2f40e36b54", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -16,7 +16,7 @@ error[E0277]: the size for values of type `[u64]` cannot be known at compilation\n LL |         asm!(\"{}\", in(reg) v[..]);\n    |                            ^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n+   = help: the trait `Sized` is not implemented for `[u64]`\n    = note: all inline asm arguments must have a statically known size\n \n error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n@@ -25,7 +25,7 @@ error[E0277]: the size for values of type `[u64]` cannot be known at compilation\n LL |         asm!(\"{}\", out(reg) v[..]);\n    |                             ^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n+   = help: the trait `Sized` is not implemented for `[u64]`\n    = note: all inline asm arguments must have a statically known size\n \n error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n@@ -34,7 +34,7 @@ error[E0277]: the size for values of type `[u64]` cannot be known at compilation\n LL |         asm!(\"{}\", inout(reg) v[..]);\n    |                               ^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n+   = help: the trait `Sized` is not implemented for `[u64]`\n    = note: all inline asm arguments must have a statically known size\n \n error: aborting due to 5 previous errors"}, {"sha": "01c8b4eb6540aefccb4612e84e3975fe8adc070b", "filename": "src/test/ui/asm/type-check-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -78,7 +78,7 @@ fn main() {\n         asm!(\"{}\", in(reg) |x: i32| x);\n         //~^ ERROR cannot use value of type\n         asm!(\"{}\", in(reg) vec![0]);\n-        //~^ ERROR cannot use value of type `std::vec::Vec<i32>` for inline assembly\n+        //~^ ERROR cannot use value of type `Vec<i32>` for inline assembly\n         asm!(\"{}\", in(reg) (1, 2, 3));\n         //~^ ERROR cannot use value of type `(i32, i32, i32)` for inline assembly\n         asm!(\"{}\", in(reg) [1, 2, 3]);"}, {"sha": "a520bea8f1da2ebb6ad72a4363817de84ab8e9c9", "filename": "src/test/ui/asm/type-check-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -26,7 +26,7 @@ LL |         asm!(\"{}\", in(reg) |x: i32| x);\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n-error: cannot use value of type `std::vec::Vec<i32>` for inline assembly\n+error: cannot use value of type `Vec<i32>` for inline assembly\n   --> $DIR/type-check-2.rs:80:28\n    |\n LL |         asm!(\"{}\", in(reg) vec![0]);"}, {"sha": "6890baead8119b341c61fea5e418d9afa860f3f1", "filename": "src/test/ui/asm/type-check-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -12,9 +12,9 @@ fn main() {\n         asm!(\"{}\", in(reg) 0i128);\n         //~^ ERROR type `i128` cannot be used with this register class\n         asm!(\"{}\", in(reg) _mm_setzero_ps());\n-        //~^ ERROR type `std::arch::x86_64::__m128` cannot be used with this register class\n+        //~^ ERROR type `__m128` cannot be used with this register class\n         asm!(\"{}\", in(reg) _mm256_setzero_ps());\n-        //~^ ERROR type `std::arch::x86_64::__m256` cannot be used with this register class\n+        //~^ ERROR type `__m256` cannot be used with this register class\n         asm!(\"{}\", in(xmm_reg) 0u8);\n         //~^ ERROR type `u8` cannot be used with this register class\n         asm!(\"{:e}\", in(reg) 0i32);"}, {"sha": "42497456ac31ccd4641d908c6c97865cca7a9b4c", "filename": "src/test/ui/asm/type-check-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -6,15 +6,15 @@ LL |         asm!(\"{}\", in(reg) 0i128);\n    |\n    = note: register class `reg` supports these types: i16, i32, i64, f32, f64\n \n-error: type `std::arch::x86_64::__m128` cannot be used with this register class\n+error: type `__m128` cannot be used with this register class\n   --> $DIR/type-check-3.rs:14:28\n    |\n LL |         asm!(\"{}\", in(reg) _mm_setzero_ps());\n    |                            ^^^^^^^^^^^^^^^^\n    |\n    = note: register class `reg` supports these types: i16, i32, i64, f32, f64\n \n-error: type `std::arch::x86_64::__m256` cannot be used with this register class\n+error: type `__m256` cannot be used with this register class\n   --> $DIR/type-check-3.rs:16:28\n    |\n LL |         asm!(\"{}\", in(reg) _mm256_setzero_ps());"}, {"sha": "498a555c441b8f19312a0aad3fc74de94544022b", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -24,7 +24,7 @@ impl Bar for AssocNoCopy { type Assoc = String; }\n \n impl Thing for AssocNoCopy {\n     type Out = Box<dyn Bar<Assoc: Copy>>;\n-    //~^ ERROR the trait bound `std::string::String: std::marker::Copy` is not satisfied\n+    //~^ ERROR the trait bound `String: Copy` is not satisfied\n \n     fn func() -> Self::Out {\n         Box::new(AssocNoCopy)"}, {"sha": "5236f0efa869ecfb66da40b1d9ae5cfab7ecaf00", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:26:28\n    |\n LL |     type Out = Box<dyn Bar<Assoc: Copy>>;\n-   |                            ^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   |                            ^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "556d8900d1a2e88369c9bf4d6cd281c1199fbf06", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // NOTE: rustc cannot currently handle bounds of the form `for<'a> <Foo as Bar<'a>>::Assoc: Baz`.\n // This should hopefully be fixed with Chalk.\n \n@@ -29,15 +27,15 @@ trait Case1 {\n \n pub struct S1;\n impl Case1 for S1 {\n-//~^ ERROR `<L1 as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug` [E0277]\n+//~^ ERROR `<L1 as Lam<&'a u8>>::App` doesn't implement `Debug` [E0277]\n     type C = Once<Once<L1>>;\n }\n \n fn assume_case1<T: Case1>() {\n-//~^ ERROR `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug` [E0277]\n-//~| ERROR `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator [E0277]\n-//~| ERROR `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely [E0277]\n-//~| ERROR `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely [E0277]\n+//~^ ERROR `<_ as Lam<&'a u8>>::App` doesn't implement `Debug` [E0277]\n+//~| ERROR `<<T as Case1>::C as Iterator>::Item` is not an iterator [E0277]\n+//~| ERROR `<<T as Case1>::C as Iterator>::Item` cannot be sent between threads safely [E0277]\n+//~| ERROR `<<T as Case1>::C as Iterator>::Item` cannot be shared between threads safely [E0277]\n     fn assert_a<_0, A>() where A: Iterator<Item = _0>, _0: Debug {}\n     assert_a::<_, T::A>();\n "}, {"sha": "49b5e7fbb89a972f55ba334c535274d24e8fd3bf", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,5 +1,5 @@\n-error[E0277]: `<L1 as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:31:6\n+error[E0277]: `<L1 as Lam<&'a u8>>::App` doesn't implement `Debug`\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:29:6\n    |\n LL | trait Case1 {\n    |       ----- required by a bound in this\n@@ -8,24 +8,24 @@ LL |                 Debug\n    |                 ----- required by this bound in `Case1`\n ...\n LL | impl Case1 for S1 {\n-   |      ^^^^^ `<L1 as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |      ^^^^^ `<L1 as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = help: the trait `for<'a> std::fmt::Debug` is not implemented for `<L1 as Lam<&'a u8>>::App`\n+   = help: the trait `for<'a> Debug` is not implemented for `<L1 as Lam<&'a u8>>::App`\n \n-error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n+error[E0277]: `<<T as Case1>::C as Iterator>::Item` is not an iterator\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:34:20\n    |\n LL | fn assume_case1<T: Case1>() {\n-   |                    ^^^^^ `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n+   |                    ^^^^^ `<<T as Case1>::C as Iterator>::Item` is not an iterator\n    |\n-   = help: the trait `std::iter::Iterator` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n+   = help: the trait `Iterator` is not implemented for `<<T as Case1>::C as Iterator>::Item`\n help: consider further restricting the associated type\n    |\n-LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator {\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as Iterator>::Item: Iterator {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n+error[E0277]: `<<T as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:34:20\n    |\n LL | trait Case1 {\n    |       ----- required by a bound in this\n@@ -34,16 +34,16 @@ LL |         Send + Iterator<Item:\n    |         ---- required by this bound in `Case1`\n ...\n LL | fn assume_case1<T: Case1>() {\n-   |                    ^^^^^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n+   |                    ^^^^^ `<<T as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n+   = help: the trait `Send` is not implemented for `<<T as Case1>::C as Iterator>::Item`\n help: consider further restricting the associated type\n    |\n-LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send {\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as Iterator>::Item: Send {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n+error[E0277]: `<<T as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:34:20\n    |\n LL | trait Case1 {\n    |       ----- required by a bound in this\n@@ -52,16 +52,16 @@ LL |         > + Sync>;\n    |             ---- required by this bound in `Case1`\n ...\n LL | fn assume_case1<T: Case1>() {\n-   |                    ^^^^^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n+   |                    ^^^^^ `<<T as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n+   = help: the trait `Sync` is not implemented for `<<T as Case1>::C as Iterator>::Item`\n help: consider further restricting the associated type\n    |\n-LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync {\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as Iterator>::Item: Sync {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n+error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `Debug`\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:34:20\n    |\n LL | trait Case1 {\n    |       ----- required by a bound in this\n@@ -70,9 +70,9 @@ LL |                 Debug\n    |                 ----- required by this bound in `Case1`\n ...\n LL | fn assume_case1<T: Case1>() {\n-   |                    ^^^^^ `<_ as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |                    ^^^^^ `<_ as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = help: the trait `for<'a> std::fmt::Debug` is not implemented for `<_ as Lam<&'a u8>>::App`\n+   = help: the trait `for<'a> Debug` is not implemented for `<_ as Lam<&'a u8>>::App`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "6c8605308322937e026b0b304d662c4fcf40710b", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -8,172 +8,172 @@\n use std::iter;\n \n struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n \n trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS1: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n-//~| ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n-//~| ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n-//~| ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n-//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n "}, {"sha": "ac59e1f2fba24c891e87545257dfb1896a4ab0f3", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,367 +7,367 @@ LL | #![feature(impl_trait_in_bindings)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:10:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:12:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:14:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:16:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:18:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:20:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:23:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:25:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:27:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:29:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:31:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:33:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:36:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:38:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:40:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:42:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:44:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:46:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:49:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:51:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:53:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:55:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:57:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:59:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:68:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:70:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:72:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:75:39\n    |\n LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:77:39\n    |\n LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:79:42\n    |\n LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                           -------------  ^^^^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:81:40\n    |\n LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:83:40\n    |\n LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:85:43\n    |\n LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:88:46\n    |\n LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:90:46\n    |\n LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:92:49\n    |\n LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:95:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:97:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:99:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:101:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:103:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:105:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:108:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:62:42\n    |\n LL | fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n    |                              ----------  ^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:64:42\n    |\n LL | fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n    |                              ----------  ^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:66:45\n    |\n LL | fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n@@ -381,7 +381,7 @@ error: could not find defining uses\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                                                   ^^^^^^^^^\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:111:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n@@ -395,7 +395,7 @@ error: could not find defining uses\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                                                   ^^^^^^^^^\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:114:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n@@ -415,7 +415,7 @@ error: could not find defining uses\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:117:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n@@ -429,7 +429,7 @@ error: could not find defining uses\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:122:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n@@ -443,175 +443,175 @@ error: could not find defining uses\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:127:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:133:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:135:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:137:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:139:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:141:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:143:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:145:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:147:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:149:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:151:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:151:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:154:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:154:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:157:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:157:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:160:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:162:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:164:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:167:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:171:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n   --> $DIR/duplicate.rs:175:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;"}, {"sha": "289911779ff710a3800504d021a025c382049c12", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -14,7 +14,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/associated-types-in-ambiguous-context.rs:25:10\n    |\n LL | type X = std::ops::Deref::Target;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as std::ops::Deref>::Target`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Deref>::Target`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/associated-types-in-ambiguous-context.rs:11:23"}, {"sha": "7193d4163b9cec12ac33cf7a1d205c36db50857b", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == std::option::Option<T>`\n+error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == Option<T>`\n   --> $DIR/associated-types-issue-20346.rs:34:5\n    |\n LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n@@ -8,9 +8,9 @@ LL | fn test_adapter<T, I: Iterator<Item=Option<T>>>(it: I) {\n    |                 - this type parameter\n ...\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found type parameter `T`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found type parameter `T`\n    |\n-   = note: expected enum `std::option::Option<T>`\n+   = note: expected enum `Option<T>`\n               found type `T`\n \n error: aborting due to previous error"}, {"sha": "9f1abf2a6c4b60a3990d6c63c353e9877797ef2c", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,10 +1,10 @@\n-error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as std::iter::Iterator>::Item == i32`\n+error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding-2.rs:6:43\n    |\n LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n    |                                           ^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `u32`\n    |\n-   = note: required for the cast to the object type `dyn std::iter::Iterator<Item = u32, Item = i32>`\n+   = note: required for the cast to the object type `dyn Iterator<Item = u32, Item = i32>`\n \n error: aborting due to previous error\n "}, {"sha": "87612679af6b0a7ea9594a0bb55a2871169f3801", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,18 +1,18 @@\n-error[E0284]: type annotations needed: cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n+error[E0284]: type annotations needed: cannot satisfy `<Self as Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding.rs:4:12\n    |\n LL | trait Foo: Iterator<Item = i32> {}\n    |                     ---------- required by this bound in `Foo`\n LL | trait Bar: Foo<Item = u32> {}\n-   |            ^^^^^^^^^^^^^^^ cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n+   |            ^^^^^^^^^^^^^^^ cannot satisfy `<Self as Iterator>::Item == i32`\n \n-error[E0284]: type annotations needed: cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n+error[E0284]: type annotations needed: cannot satisfy `<Self as Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding.rs:7:21\n    |\n LL | trait I32Iterator = Iterator<Item = i32>;\n    |                              ---------- required by this bound in `I32Iterator`\n LL | trait U32Iterator = I32Iterator<Item = u32>;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot satisfy `<Self as Iterator>::Item == i32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "328c8f944e2e0568b7ecaa42975524165a281c50", "filename": "src/test/ui/associated-types/associated-types-unsized.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -6,7 +6,7 @@ trait Get {\n     fn get(&self) -> <Self as Get>::Value;\n }\n \n-fn foo<T:Get>(t: T) where <T as Get>::Value: std::marker::Sized {\n+fn foo<T:Get>(t: T) where <T as Get>::Value: Sized {\n     let x = t.get(); //~ ERROR the size for values of type\n }\n "}, {"sha": "c2af5483003e282220aaffe4d731cd0d839b0748", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,13 +4,13 @@ error[E0277]: the size for values of type `<T as Get>::Value` cannot be known at\n LL |     let x = t.get();\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `<T as Get>::Value`\n+   = help: the trait `Sized` is not implemented for `<T as Get>::Value`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n help: consider further restricting the associated type\n    |\n-LL | fn foo<T:Get>(t: T) where <T as Get>::Value: std::marker::Sized {\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn foo<T:Get>(t: T) where <T as Get>::Value: Sized {\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "30c2555df8bb924c620090723f5b67edc020bbc1", "filename": "src/test/ui/associated-types/defaults-suitability.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -13,12 +13,12 @@ struct NotClone;\n // Assoc. type bounds must hold for the default type\n trait Tr {\n     type Ty: Clone = NotClone;\n-    //~^ ERROR the trait bound `NotClone: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `NotClone: Clone` is not satisfied\n }\n \n // Where-clauses defined on the trait must also be considered\n trait Tr2 where Self::Ty: Clone {\n-    //~^ ERROR the trait bound `NotClone: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `NotClone: Clone` is not satisfied\n     type Ty = NotClone;\n }\n \n@@ -31,7 +31,7 @@ trait Tr3 {\n // Involved type parameters must fulfill all bounds required by defaults that mention them\n trait Foo<T> {\n     type Bar: Clone = Vec<T>;\n-    //~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `T: Clone` is not satisfied\n }\n \n trait Bar: Sized {\n@@ -55,7 +55,7 @@ trait C where\n // Test that we get all expected errors if that default is unsuitable\n trait D where\n     Vec<Self::Assoc>: Clone,\n-    //~^ ERROR the trait bound `NotClone: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `NotClone: Clone` is not satisfied\n     Self::Assoc: IsU8<Self::Assoc>,\n     //~^ ERROR the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n     bool: IsU8<Self::Assoc>,\n@@ -70,7 +70,7 @@ trait D where\n // `Clone`.\n trait Foo2<T> {\n     type Bar: Clone = Vec<Self::Baz>;\n-    //~^ ERROR the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `<Self as Foo2<T>>::Baz: Clone` is not satisfied\n     type Baz = T;\n }\n \n@@ -79,7 +79,7 @@ trait Foo2<T> {\n // this would be accepted.\n trait Foo25<T: Clone> {\n     type Bar: Clone = Vec<Self::Baz>;\n-    //~^ ERROR the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `<Self as Foo25<T>>::Baz: Clone` is not satisfied\n     type Baz = T;\n }\n \n@@ -88,7 +88,7 @@ trait Foo25<T: Clone> {\n trait Foo3<T> where\n     Self::Bar: Clone,\n     Self::Baz: Clone,\n-    //~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `T: Clone` is not satisfied\n {\n     type Bar = Vec<Self::Baz>;\n     type Baz = T;"}, {"sha": "c2ad4c5824ea9d65463fae93bdecb5f8e9b30564", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,33 +1,33 @@\n-error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:15:14\n    |\n LL | trait Tr {\n    | -------- required by `Tr`\n LL |     type Ty: Clone = NotClone;\n-   |              ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n+   |              ^^^^^ the trait `Clone` is not implemented for `NotClone`\n \n-error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:20:27\n    |\n LL | trait Tr2 where Self::Ty: Clone {\n    | --------------------------^^^^^\n    | |                         |\n-   | |                         the trait `std::clone::Clone` is not implemented for `NotClone`\n+   | |                         the trait `Clone` is not implemented for `NotClone`\n    | required by `Tr2`\n \n-error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:33:15\n    |\n LL | trait Foo<T> {\n    | ------------ required by `Foo`\n LL |     type Bar: Clone = Vec<T>;\n-   |               ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n+   |               ^^^^^ the trait `Clone` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<T>`\n+   = note: required because of the requirements on the impl of `Clone` for `Vec<T>`\n help: consider restricting type parameter `T`\n    |\n-LL | trait Foo<T: std::clone::Clone> {\n-   |            ^^^^^^^^^^^^^^^^^^^\n+LL | trait Foo<T: Clone> {\n+   |            ^^^^^^^\n \n error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n   --> $DIR/defaults-suitability.rs:39:17\n@@ -66,56 +66,56 @@ LL | |     type Assoc = NotClone;\n LL | | }\n    | |_- required by `D`\n \n-error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:57:23\n    |\n LL | / trait D where\n LL | |     Vec<Self::Assoc>: Clone,\n-   | |                       ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n+   | |                       ^^^^^ the trait `Clone` is not implemented for `NotClone`\n LL | |\n LL | |     Self::Assoc: IsU8<Self::Assoc>,\n ...  |\n LL | |     type Assoc = NotClone;\n LL | | }\n    | |_- required by `D`\n    |\n-   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<NotClone>`\n+   = note: required because of the requirements on the impl of `Clone` for `Vec<NotClone>`\n \n-error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:72:15\n    |\n LL | trait Foo2<T> {\n    | ------------- required by `Foo2`\n LL |     type Bar: Clone = Vec<Self::Baz>;\n-   |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n+   |               ^^^^^ the trait `Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n    |\n-   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo2<T>>::Baz>`\n+   = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo2<T>>::Baz>`\n help: consider further restricting the associated type\n    |\n-LL | trait Foo2<T> where <Self as Foo2<T>>::Baz: std::clone::Clone {\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait Foo2<T> where <Self as Foo2<T>>::Baz: Clone {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:81:15\n    |\n LL | trait Foo25<T: Clone> {\n    | --------------------- required by `Foo25`\n LL |     type Bar: Clone = Vec<Self::Baz>;\n-   |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n+   |               ^^^^^ the trait `Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n    |\n-   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo25<T>>::Baz>`\n+   = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo25<T>>::Baz>`\n help: consider further restricting the associated type\n    |\n-LL | trait Foo25<T: Clone> where <Self as Foo25<T>>::Baz: std::clone::Clone {\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait Foo25<T: Clone> where <Self as Foo25<T>>::Baz: Clone {\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:90:16\n    |\n LL | / trait Foo3<T> where\n LL | |     Self::Bar: Clone,\n LL | |     Self::Baz: Clone,\n-   | |                ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n+   | |                ^^^^^ the trait `Clone` is not implemented for `T`\n LL | |\n ...  |\n LL | |     type Baz = T;\n@@ -124,8 +124,8 @@ LL | | }\n    |\n help: consider further restricting type parameter `T`\n    |\n-LL |     Self::Baz: Clone, T: std::clone::Clone\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^\n+LL |     Self::Baz: Clone, T: Clone\n+   |                     ^^^^^^^^^^\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/defaults-suitability.rs:27:5\n@@ -136,9 +136,9 @@ LL |     type Ty = Vec<[u8]>;\n   ::: $SRC_DIR/alloc/src/vec.rs:LL:COL\n    |\n LL | pub struct Vec<T> {\n-   |                - required by this bound in `std::vec::Vec`\n+   |                - required by this bound in `Vec`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = help: the trait `Sized` is not implemented for `[u8]`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "f283d22b3c7eb9eecb0dbb5d64f3af45234fa52d", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -19,9 +19,9 @@ trait UncheckedCopy: Sized {\n     // This Output is said to be Copy. Yet we default to Self\n     // and it's accepted, not knowing if Self ineed is Copy\n     type Output: Copy\n-    //~^ ERROR the trait bound `Self: std::marker::Copy` is not satisfied\n+    //~^ ERROR the trait bound `Self: Copy` is not satisfied\n     + Deref<Target = str>\n-    //~^ ERROR the trait bound `Self: std::ops::Deref` is not satisfied\n+    //~^ ERROR the trait bound `Self: Deref` is not satisfied\n     + AddAssign<&'static str>\n     //~^ ERROR cannot add-assign `&'static str` to `Self`\n     + From<Self>\n@@ -40,9 +40,9 @@ trait UncheckedCopy: Sized {\n \n impl<T> UncheckedCopy for T {}\n //~^ ERROR `T` doesn't implement `std::fmt::Display`\n-//~| ERROR the trait bound `T: std::ops::Deref` is not satisfied\n+//~| ERROR the trait bound `T: Deref` is not satisfied\n //~| ERROR cannot add-assign `&'static str` to `T`\n-//~| ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+//~| ERROR the trait bound `T: Copy` is not satisfied\n \n fn bug<T: UncheckedCopy>(origin: T) {\n     let origin = T::make_origin(origin);"}, {"sha": "29a7c2eab41d5d4a6679db3ac93e1cae19559df2", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,16 +1,16 @@\n-error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `Self: Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:21:18\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n ...\n LL |     type Output: Copy\n-   |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n+   |                  ^^^^ the trait `Copy` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait UncheckedCopy: Sized + std::marker::Copy {\n-   |                            ^^^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + Copy {\n+   |                            ^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-1.rs:25:7\n@@ -23,22 +23,22 @@ LL |     + AddAssign<&'static str>\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n+error[E0277]: the trait bound `Self: Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:23:7\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n ...\n LL |     + Deref<Target = str>\n-   |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n+   |       ^^^^^^^^^^^^^^^^^^^ the trait `Deref` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait UncheckedCopy: Sized + std::ops::Deref {\n-   |                            ^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + Deref {\n+   |                            ^^^^^^^\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-1.rs:28:7\n@@ -73,7 +73,7 @@ help: consider restricting type parameter `T`\n LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n    |       ^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n+error[E0277]: the trait bound `T: Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n LL | trait UncheckedCopy: Sized {\n@@ -83,12 +83,12 @@ LL |     + Deref<Target = str>\n    |       ------------------- required by this bound in `UncheckedCopy`\n ...\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n+   |         ^^^^^^^^^^^^^ the trait `Deref` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n-   |       ^^^^^^^^^^^^^^^^^\n+LL | impl<T: Deref> UncheckedCopy for T {}\n+   |       ^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `T`\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n@@ -104,10 +104,10 @@ LL | impl<T> UncheckedCopy for T {}\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T: AddAssign<&'static str>> UncheckedCopy for T {}\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n LL | trait UncheckedCopy: Sized {\n@@ -117,12 +117,12 @@ LL |     type Output: Copy\n    |                  ---- required by this bound in `UncheckedCopy`\n ...\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |         ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: std::marker::Copy> UncheckedCopy for T {}\n-   |       ^^^^^^^^^^^^^^^^^^^\n+LL | impl<T: Copy> UncheckedCopy for T {}\n+   |       ^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "5518cda37087cd44aeb415d3479b77ccae4a99a0", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -19,9 +19,9 @@ trait UncheckedCopy: Sized {\n     // This Output is said to be Copy. Yet we default to Self\n     // and it's accepted, not knowing if Self ineed is Copy\n     type Output: Copy\n-    //~^ ERROR the trait bound `Self: std::marker::Copy` is not satisfied\n+    //~^ ERROR the trait bound `Self: Copy` is not satisfied\n     + Deref<Target = str>\n-    //~^ ERROR the trait bound `Self: std::ops::Deref` is not satisfied\n+    //~^ ERROR the trait bound `Self: Deref` is not satisfied\n     + AddAssign<&'static str>\n     //~^ ERROR cannot add-assign `&'static str` to `Self`\n     + From<Self>\n@@ -40,9 +40,9 @@ trait UncheckedCopy: Sized {\n \n impl<T> UncheckedCopy for T {}\n //~^ ERROR `T` doesn't implement `std::fmt::Display`\n-//~| ERROR the trait bound `T: std::ops::Deref` is not satisfied\n+//~| ERROR the trait bound `T: Deref` is not satisfied\n //~| ERROR cannot add-assign `&'static str` to `T`\n-//~| ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+//~| ERROR the trait bound `T: Copy` is not satisfied\n \n fn bug<T: UncheckedCopy>(origin: T) {\n     let origin = T::make_origin(origin);"}, {"sha": "49c66093bf039d7b355f82892298d0cde608488f", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,16 +1,16 @@\n-error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `Self: Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:21:18\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n ...\n LL |     type Output: Copy\n-   |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n+   |                  ^^^^ the trait `Copy` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait UncheckedCopy: Sized + std::marker::Copy {\n-   |                            ^^^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + Copy {\n+   |                            ^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-2.rs:25:7\n@@ -23,22 +23,22 @@ LL |     + AddAssign<&'static str>\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n+error[E0277]: the trait bound `Self: Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:23:7\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n ...\n LL |     + Deref<Target = str>\n-   |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n+   |       ^^^^^^^^^^^^^^^^^^^ the trait `Deref` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait UncheckedCopy: Sized + std::ops::Deref {\n-   |                            ^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + Deref {\n+   |                            ^^^^^^^\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-2.rs:28:7\n@@ -73,7 +73,7 @@ help: consider restricting type parameter `T`\n LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n    |       ^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n+error[E0277]: the trait bound `T: Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n LL | trait UncheckedCopy: Sized {\n@@ -83,12 +83,12 @@ LL |     + Deref<Target = str>\n    |       ------------------- required by this bound in `UncheckedCopy`\n ...\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n+   |         ^^^^^^^^^^^^^ the trait `Deref` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n-   |       ^^^^^^^^^^^^^^^^^\n+LL | impl<T: Deref> UncheckedCopy for T {}\n+   |       ^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `T`\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n@@ -104,10 +104,10 @@ LL | impl<T> UncheckedCopy for T {}\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T: AddAssign<&'static str>> UncheckedCopy for T {}\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n LL | trait UncheckedCopy: Sized {\n@@ -117,12 +117,12 @@ LL |     type Output: Copy\n    |                  ---- required by this bound in `UncheckedCopy`\n ...\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |         ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: std::marker::Copy> UncheckedCopy for T {}\n-   |       ^^^^^^^^^^^^^^^^^^^\n+LL | impl<T: Copy> UncheckedCopy for T {}\n+   |       ^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "cdf32dd82a6a909181bc8a1bd09f0a34ae172c6a", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -10,7 +10,7 @@ where\n \n impl X<'_> for i32 {\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <i32 as X<'b>>::U: std::clone::Clone`\n+    //~^ ERROR the trait bound `for<'b> <i32 as X<'b>>::U: Clone`\n }\n \n fn main() {"}, {"sha": "c9255c91d2d020bb87aaadd5f35d81a3bb084c02", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `for<'b> <i32 as X<'b>>::U: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `for<'b> <i32 as X<'b>>::U: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-1.rs:12:14\n    |\n LL | trait X<'a>\n@@ -8,11 +8,11 @@ LL |     for<'b> <Self as X<'b>>::U: Clone,\n    |                                 ----- required by this bound in `X`\n ...\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<i32 as X<'b>>::U`\n+   |              ^^^ the trait `for<'b> Clone` is not implemented for `<i32 as X<'b>>::U`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n error: aborting due to previous error\n "}, {"sha": "20b6659bbc19b028684ffd04cf59a5ab81932917", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL |     1u32.f(\"abc\");\n    |          ^ method not found in `u32`\n    |\n    = note: the method `f` exists but the following trait bounds were not satisfied:\n-           `<u32 as X<'b>>::U: std::clone::Clone`\n+           `<u32 as X<'b>>::U: Clone`\n            which is required by `u32: X`\n \n error: aborting due to previous error"}, {"sha": "e19c918c3dfe219c0a95c26e95161e41813edcf1", "filename": "src/test/ui/associated-types/hr-associated-type-bound-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ where\n     type U: ?Sized;\n }\n fn f<'a, T: X<'a> + ?Sized>(x: &<T as X<'a>>::U) {\n-    //~^ ERROR the trait bound `for<'b> <T as X<'b>>::U: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `for<'b> <T as X<'b>>::U: Clone` is not satisfied\n     <<T as X<'_>>::U>::clone(x);\n }\n "}, {"sha": "225b18a3b0454b1fff62ce9d50949ca61447af8a", "filename": "src/test/ui/associated-types/hr-associated-type-bound-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `for<'b> <T as X<'b>>::U: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `for<'b> <T as X<'b>>::U: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-object.rs:7:13\n    |\n LL | trait X<'a>\n@@ -8,11 +8,11 @@ LL |     for<'b> <Self as X<'b>>::U: Clone,\n    |                                 ----- required by this bound in `X`\n ...\n LL | fn f<'a, T: X<'a> + ?Sized>(x: &<T as X<'a>>::U) {\n-   |             ^^^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<T as X<'b>>::U`\n+   |             ^^^^^ the trait `for<'b> Clone` is not implemented for `<T as X<'b>>::U`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n error: aborting due to previous error\n "}, {"sha": "0a81f373ad4c5a654db3e7177df546ac7e5fcb10", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -12,7 +12,7 @@ where\n \n impl<'a> Y<'a, u8> for u8 {\n     type V = str;\n-    //~^ ERROR the trait bound `for<'b> <u8 as Y<'b, u8>>::V: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `for<'b> <u8 as Y<'b, u8>>::V: Clone` is not satisfied\n }\n \n fn main() {"}, {"sha": "7af261e4b3d4f691d1777ca7bb080a2da24aa05b", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `for<'b> <u8 as Y<'b, u8>>::V: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `for<'b> <u8 as Y<'b, u8>>::V: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-1.rs:14:14\n    |\n LL | trait Y<'a, T: ?Sized>\n@@ -8,11 +8,11 @@ LL |     for<'b> <Self as Y<'b, T>>::V: Clone,\n    |                                    ----- required by this bound in `Y`\n ...\n LL |     type V = str;\n-   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u8 as Y<'b, u8>>::V`\n+   |              ^^^ the trait `for<'b> Clone` is not implemented for `<u8 as Y<'b, u8>>::V`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n error: aborting due to previous error\n "}, {"sha": "5db619dc98f30da4590565fd6888d37d70a0a281", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,8 +1,8 @@\n trait Z<'a, T: ?Sized>\n where\n     T: Z<'a, u16>,\n-    //~^ the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n-    //~| the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+    //~^ the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n+    //~| the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n     for<'b> <T as Z<'b, u16>>::W: Clone,\n {\n     type W: ?Sized;\n@@ -13,7 +13,7 @@ where\n \n impl<'a> Z<'a, u16> for u16 {\n     type W = str;\n-    //~^ ERROR the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone\n+    //~^ ERROR the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone\n }\n \n fn main() {"}, {"sha": "9a70194379612a8c9fed180d0fc0c5038f26baa6", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,20 +1,20 @@\n-error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this\n LL | where\n LL |     T: Z<'a, u16>,\n-   |        ^^^^^^^^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+   |        ^^^^^^^^^^ the trait `for<'b> Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n ...\n LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ----- required by this bound in `Z`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n-error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-2.rs:15:14\n    |\n LL | trait Z<'a, T: ?Sized>\n@@ -24,27 +24,27 @@ LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ----- required by this bound in `Z`\n ...\n LL |     type W = str;\n-   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+   |              ^^^ the trait `for<'b> Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n-error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this\n LL | where\n LL |     T: Z<'a, u16>,\n-   |        ^^^^^^^^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+   |        ^^^^^^^^^^ the trait `for<'b> Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n ...\n LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ----- required by this bound in `Z`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1af63bf9070a1c2ed906e1f96382e9b8281a1d4f", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n trait X<'a, T>\n where\n     for<'b> T: X<'b, T>,\n@@ -13,7 +11,7 @@ where\n \n impl<S, T> X<'_, (T,)> for (S,) {\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <(T,) as X<'b, (T,)>>::U: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `for<'b> <(T,) as X<'b, (T,)>>::U: Clone` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "48c4d77dcc7d408e0d4178e79466e097f67c4aa6", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,5 +1,5 @@\n-error[E0277]: the trait bound `for<'b> <(T,) as X<'b, (T,)>>::U: std::clone::Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-3.rs:15:14\n+error[E0277]: the trait bound `for<'b> <(T,) as X<'b, (T,)>>::U: Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-3.rs:13:14\n    |\n LL | trait X<'a, T>\n    |       - required by a bound in this\n@@ -8,11 +8,11 @@ LL |     for<'b> <T as X<'b, T>>::U: Clone,\n    |                                 ----- required by this bound in `X`\n ...\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<(T,) as X<'b, (T,)>>::U`\n+   |              ^^^ the trait `for<'b> Clone` is not implemented for `<(T,) as X<'b, (T,)>>::U`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n error: aborting due to previous error\n "}, {"sha": "6f06b925bd2e808998ec8b5d326b1e1ba20d9625", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -11,7 +11,7 @@ where\n \n impl<S, T> X<'_, T> for (S,) {\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <(T,) as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `for<'b> <(T,) as X<'b, T>>::U: Clone` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "111ca8566b195b946bcf46e1f0fc4c225df1ff86", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `for<'b> <(T,) as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `for<'b> <(T,) as X<'b, T>>::U: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-4.rs:13:14\n    |\n LL | trait X<'a, T>\n@@ -8,11 +8,11 @@ LL |     for<'b> <(T,) as X<'b, T>>::U: Clone,\n    |                                    ----- required by this bound in `X`\n ...\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<(T,) as X<'b, T>>::U`\n+   |              ^^^ the trait `for<'b> Clone` is not implemented for `<(T,) as X<'b, T>>::U`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n error: aborting due to previous error\n "}, {"sha": "ec627c7f7ea3d88668c7a008ba378fedb616a7a5", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n trait Cycle: Sized {\n     type Next: Cycle<Next = Self>;\n }\n@@ -26,14 +24,14 @@ where\n \n impl<S, T> X<'_, Vec<T>> for S {\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n-    //~| ERROR the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n+    //~| ERROR the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n }\n \n impl<S, T> X<'_, Box<T>> for S {\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n-    //~| ERROR the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n+    //~| ERROR the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "81eceb46667637eb1a6269b8cc0dfeda7f78efd6", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,5 +1,5 @@\n-error[E0277]: the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:28:14\n+error[E0277]: the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:26:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -8,14 +8,14 @@ LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n    |                                             ----- required by this bound in `X`\n ...\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U`\n+   |              ^^^ the trait `for<'b> Clone` is not implemented for `<Box<T> as X<'b, Box<T>>>::U`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n-error[E0277]: the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:28:14\n+error[E0277]: the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:26:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -24,14 +24,14 @@ LL |     for<'b> <T as X<'b, T>>::U: Clone,\n    |                                 ----- required by this bound in `X`\n ...\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U`\n+   |              ^^^ the trait `for<'b> Clone` is not implemented for `<Vec<T> as X<'b, Vec<T>>>::U`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n-error[E0277]: the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:34:14\n+error[E0277]: the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:32:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -40,14 +40,14 @@ LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n    |                                             ----- required by this bound in `X`\n ...\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U`\n+   |              ^^^ the trait `for<'b> Clone` is not implemented for `<Vec<T> as X<'b, Vec<T>>>::U`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n-error[E0277]: the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:34:14\n+error[E0277]: the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:32:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -56,11 +56,11 @@ LL |     for<'b> <T as X<'b, T>>::U: Clone,\n    |                                 ----- required by this bound in `X`\n ...\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U`\n+   |              ^^^ the trait `for<'b> Clone` is not implemented for `<Box<T> as X<'b, Box<T>>>::U`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "04b88c7f4fcb4bf9e0042b2f11f6ad86f55cf460", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -12,7 +12,7 @@ where\n impl<S, T> X<'_, T> for (S,) {\n     //~^ ERROR the trait bound `for<'b> T: X<'b, T>` is not satisfied\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <T as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `for<'b> <T as X<'b, T>>::U: Clone` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "2efdb2445af212db545d23563c27f06348434c85", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-6.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `for<'b> <T as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `for<'b> <T as X<'b, T>>::U: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-6.rs:14:14\n    |\n LL | trait X<'a, T>\n@@ -8,11 +8,11 @@ LL |     for<'b> <T as X<'b, T>>::U: Clone,\n    |                                 ----- required by this bound in `X`\n ...\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<T as X<'b, T>>::U`\n+   |              ^^^ the trait `for<'b> Clone` is not implemented for `<T as X<'b, T>>::U`\n    |\n    = help: the following implementations were found:\n-             <&T as std::clone::Clone>\n-             <&mut T as std::clone::Clone>\n+             <&T as Clone>\n+             <&mut T as Clone>\n \n error[E0277]: the trait bound `for<'b> T: X<'b, T>` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-6.rs:12:12"}, {"sha": "1270cd6706aef85ffd6c3c696c76e2c58802ba01", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -11,9 +11,9 @@ where\n }\n \n impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n-    //~^ ERROR the trait bound `<T as UnsafeCopy<'b, T>>::Item: std::ops::Deref` is not satisfied\n+    //~^ ERROR the trait bound `<T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n     type Item = T;\n-    //~^ ERROR the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: std::ops::Deref\n+    //~^ ERROR the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref\n }\n \n pub fn main() {"}, {"sha": "cf4ec0babfc219a04b89a9b2bdc0af659c068e4b", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: std::ops::Deref` is not satisfied\n+error[E0277]: the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n   --> $DIR/hr-associated-type-projection-1.rs:15:17\n    |\n LL | trait UnsafeCopy<'a, T: Copy>\n@@ -8,22 +8,22 @@ LL |     for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n    |                                                --------------------------- required by this bound in `UnsafeCopy`\n ...\n LL |     type Item = T;\n-   |                 ^ the trait `for<'b> std::ops::Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n+   |                 ^ the trait `for<'b> Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n    |\n    = help: the following implementations were found:\n-             <&T as std::ops::Deref>\n-             <&mut T as std::ops::Deref>\n+             <&T as Deref>\n+             <&mut T as Deref>\n \n-error[E0277]: the trait bound `<T as UnsafeCopy<'b, T>>::Item: std::ops::Deref` is not satisfied\n+error[E0277]: the trait bound `<T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n   --> $DIR/hr-associated-type-projection-1.rs:13:33\n    |\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n-   |                                 ^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n+   |                                 ^^^^^^^^^^^^^^^^^ the trait `Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n    |\n help: consider further restricting the associated type\n    |\n-LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T where <T as UnsafeCopy<'b, T>>::Item: std::ops::Deref {\n-   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T where <T as UnsafeCopy<'b, T>>::Item: Deref {\n+   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "661730bcd757ace8e47333d2ea565fec0a1e4257", "filename": "src/test/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,12 +1,12 @@\n-error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n+error[E0277]: the trait bound `(dyn ToString + 'static): Default` is not satisfied\n   --> $DIR/issue-43924.rs:7:15\n    |\n LL | trait Foo<T: Default + ToString> {\n    | -------------------------------- required by `Foo`\n LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n-   |               ^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+   |               ^^^^^^^ the trait `Default` is not implemented for `(dyn ToString + 'static)`\n \n-error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n+error[E0277]: the trait bound `(dyn ToString + 'static): Default` is not satisfied\n   --> $DIR/issue-43924.rs:10:6\n    |\n LL | trait Foo<T: Default + ToString> {\n@@ -15,9 +15,9 @@ LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n    |               ------- required by this bound in `Foo`\n ...\n LL | impl Foo<u32> for () {}\n-   |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+   |      ^^^^^^^^ the trait `Default` is not implemented for `(dyn ToString + 'static)`\n \n-error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n+error[E0277]: the trait bound `(dyn ToString + 'static): Default` is not satisfied\n   --> $DIR/issue-43924.rs:11:6\n    |\n LL | trait Foo<T: Default + ToString> {\n@@ -26,7 +26,7 @@ LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n    |               ------- required by this bound in `Foo`\n ...\n LL | impl Foo<u64> for () {}\n-   |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+   |      ^^^^^^^^ the trait `Default` is not implemented for `(dyn ToString + 'static)`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ddc0bf436f6d516bb39c0ee93356ad934755e635", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -8,8 +8,8 @@ LL |     type This = Self;\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait MyTrait: std::marker::Sized {\n-   |              ^^^^^^^^^^^^^^^^^^^^\n+LL | trait MyTrait: Sized {\n+   |              ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "63164480a033b3bd1148e85a7d589607831f056d", "filename": "src/test/ui/associated-types/missing-associated-types.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -6,10 +6,10 @@ LL | type Foo<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Y<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: std::ops::Add<Rhs> + std::ops::Sub<Rhs> + X<Rhs> + Y<Rhs> {}`\n+   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + X<Rhs> + Y<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n-error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (from trait `std::ops::Add`), `Output` (from trait `std::ops::Mul`), `Output` (from trait `std::ops::Sub`) must be specified\n+error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (from trait `Add`), `Output` (from trait `Mul`), `Output` (from trait `Sub`) must be specified\n   --> $DIR/missing-associated-types.rs:12:21\n    |\n LL |     type A;\n@@ -35,10 +35,10 @@ LL | type Bar<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: std::ops::Add<Rhs> + std::ops::Sub<Rhs> + X<Rhs> + Z<Rhs> {}`\n+   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n-error[E0191]: the value of the associated types `A` (from trait `Z`), `B` (from trait `Z`), `Output` (from trait `std::ops::Add`), `Output` (from trait `std::ops::Div`), `Output` (from trait `std::ops::Div`), `Output` (from trait `std::ops::Mul`), `Output` (from trait `std::ops::Sub`) must be specified\n+error[E0191]: the value of the associated types `A` (from trait `Z`), `B` (from trait `Z`), `Output` (from trait `Add`), `Output` (from trait `Div`), `Output` (from trait `Div`), `Output` (from trait `Mul`), `Output` (from trait `Sub`) must be specified\n   --> $DIR/missing-associated-types.rs:15:21\n    |\n LL |     type A;\n@@ -49,7 +49,7 @@ LL |     type B;\n LL | type Bar<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs>;\n    |                     ^^^^^^^^   ^^^^^^^^   ^^^^^^   ^^^^^^ associated types `A`, `B`, `Output` must be specified\n    |                     |          |          |\n-   |                     |          |          associated types `Output` (from trait `std::ops::Mul`), `Output` (from trait `std::ops::Div`) must be specified\n+   |                     |          |          associated types `Output` (from trait `Mul`), `Output` (from trait `Div`) must be specified\n    |                     |          associated type `Output` must be specified\n    |                     associated type `Output` must be specified\n    |\n@@ -71,10 +71,10 @@ LL | type Baz<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Y<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: std::ops::Add<Rhs> + std::ops::Sub<Rhs> + Y<Rhs> {}`\n+   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + Y<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n-error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (from trait `std::ops::Add`), `Output` (from trait `std::ops::Sub`) must be specified\n+error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (from trait `Add`), `Output` (from trait `Sub`) must be specified\n   --> $DIR/missing-associated-types.rs:18:21\n    |\n LL |     type A;\n@@ -99,10 +99,10 @@ LL | type Bat<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Fine<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: std::ops::Add<Rhs> + std::ops::Sub<Rhs> + Fine<Rhs> {}`\n+   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + Fine<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n-error[E0191]: the value of the associated types `Output` (from trait `std::ops::Add`), `Output` (from trait `std::ops::Sub`) must be specified\n+error[E0191]: the value of the associated types `Output` (from trait `Add`), `Output` (from trait `Sub`) must be specified\n   --> $DIR/missing-associated-types.rs:21:21\n    |\n LL | type Bat<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Fine<Rhs>;\n@@ -115,11 +115,11 @@ help: specify the associated types\n LL | type Bat<Rhs> = dyn Add<Rhs, Output = Type> + Sub<Rhs, Output = Type> + Fine<Rhs>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0191]: the value of the associated types `Output` (from trait `std::ops::Div`), `Output` (from trait `std::ops::Mul`) must be specified\n+error[E0191]: the value of the associated types `Output` (from trait `Div`), `Output` (from trait `Mul`) must be specified\n   --> $DIR/missing-associated-types.rs:24:21\n    |\n LL | type Bal<Rhs> = dyn X<Rhs>;\n-   |                     ^^^^^^ associated types `Output` (from trait `std::ops::Mul`), `Output` (from trait `std::ops::Div`) must be specified\n+   |                     ^^^^^^ associated types `Output` (from trait `Mul`), `Output` (from trait `Div`) must be specified\n    |\n    = help: consider introducing a new type parameter, adding `where` constraints using the fully-qualified path to the associated types\n "}, {"sha": "8fdca54d2d8b8ab6552b11680f31a3a46feb5b23", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,12 +7,12 @@ LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self>\n   ::: $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n LL | pub trait Add<Rhs = Self> {\n-   |               --- required by this bound in `std::ops::Add`\n+   |               --- required by this bound in `Add`\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + std::marker::Sized {}\n-   |                                                                                                ^^^^^^^^^^^^^^^^^^^^\n+LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + Sized {}\n+   |                                                                                                ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5bc7069ff89e31beebb794fb426c3544eca6d40c", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,6 @@\n // 3. get targeted by `?` and not the parent function.\n //\n // edition:2018\n-// ignore-tidy-linelength\n \n fn main() {}\n \n@@ -16,7 +15,7 @@ fn return_targets_async_block_not_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n+    //~^ ERROR type mismatch resolving `<impl Future as Future>::Output == ()`\n }\n \n async fn return_targets_async_block_not_async_fn() -> u8 {\n@@ -25,7 +24,7 @@ async fn return_targets_async_block_not_async_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n+    //~^ ERROR type mismatch resolving `<impl Future as Future>::Output == ()`\n }\n \n fn no_break_in_async_block() {"}, {"sha": "dbdfb2e71e0cd4d7af382a8e84fec51fb323dd0c", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,5 +1,5 @@\n error[E0267]: `break` inside of an `async` block\n-  --> $DIR/async-block-control-flow-static-semantics.rs:33:9\n+  --> $DIR/async-block-control-flow-static-semantics.rs:32:9\n    |\n LL |       async {\n    |  ___________-\n@@ -9,7 +9,7 @@ LL | |     };\n    | |_____- enclosing `async` block\n \n error[E0267]: `break` inside of an `async` block\n-  --> $DIR/async-block-control-flow-static-semantics.rs:40:13\n+  --> $DIR/async-block-control-flow-static-semantics.rs:39:13\n    |\n LL |           async {\n    |  _______________-\n@@ -19,7 +19,7 @@ LL | |         };\n    | |_________- enclosing `async` block\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:22:58\n+  --> $DIR/async-block-control-flow-static-semantics.rs:21:58\n    |\n LL |   async fn return_targets_async_block_not_async_fn() -> u8 {\n    |  __________________________________________________________^\n@@ -31,32 +31,32 @@ LL | |\n LL | | }\n    | |_^ expected `u8`, found `()`\n \n-error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:27:39\n+error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+  --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n+   = note: required for the cast to the object type `dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:13:43\n+  --> $DIR/async-block-control-flow-static-semantics.rs:12:43\n    |\n LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    ---------------------------------      ^^ expected `u8`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:18:39\n+error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+  --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n+   = note: required for the cast to the object type `dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:48:44\n+  --> $DIR/async-block-control-flow-static-semantics.rs:47:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n@@ -67,7 +67,7 @@ LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:57:50\n+  --> $DIR/async-block-control-flow-static-semantics.rs:56:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`"}, {"sha": "d808a5939bbe79769a5bd4765359c2f8fd027cef", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL |\n LL |     panic!()\n    |     -------- this returned value is of type `!`\n    |\n-   = help: the trait `std::future::Future` is not implemented for `()`\n+   = help: the trait `Future` is not implemented for `()`\n    = note: the return type of a function must have a statically known size\n \n error[E0698]: type inside `async fn` body must be known in this context"}, {"sha": "cd0db4cc01a62dccff75ca1c1b58cf4b6507d245", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,12 +7,12 @@ LL | fn assert_send(_: impl Send) {}\n LL |     assert_send(local_dropped_before_await());\n    |     ^^^^^^^^^^^ future returned by `local_dropped_before_await` is not `Send`\n    |\n-   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:24:5\n    |\n LL |     let x = non_send();\n-   |         - has type `impl std::fmt::Debug` which is not `Send`\n+   |         - has type `impl Debug` which is not `Send`\n LL |     drop(x);\n LL |     fut().await;\n    |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n@@ -28,12 +28,12 @@ LL | fn assert_send(_: impl Send) {}\n LL |     assert_send(non_send_temporary_in_match());\n    |     ^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n    |\n-   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:33:20\n    |\n LL |     match Some(non_send()) {\n-   |                ---------- has type `impl std::fmt::Debug` which is not `Send`\n+   |                ---------- has type `impl Debug` which is not `Send`\n LL |         Some(_) => fut().await,\n    |                    ^^^^^^^^^^^ await occurs here, with `non_send()` maybe used later\n ...\n@@ -49,12 +49,12 @@ LL | fn assert_send(_: impl Send) {}\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `dyn std::fmt::Write`\n+   = help: the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:42:9\n    |\n LL |     let f: &mut std::fmt::Formatter = panic!();\n-   |         - has type `&mut std::fmt::Formatter<'_>` which is not `Send`\n+   |         - has type `&mut Formatter<'_>` which is not `Send`\n LL |     if non_sync().fmt(f).unwrap() == () {\n LL |         fut().await;\n    |         ^^^^^^^^^^^ await occurs here, with `f` maybe used later"}, {"sha": "337487fc80b0e56ffd8e13bddad30c6a4b51ba28", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -14,7 +14,7 @@ async fn foo2() -> Result<(), ()> {\n }\n async fn foo3() -> Result<(), ()> {\n     let _ = await bar()?; //~ ERROR incorrect use of `await`\n-    //~^ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n+    //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n     Ok(())\n }\n async fn foo21() -> Result<(), ()> {\n@@ -62,7 +62,7 @@ fn foo10() -> Result<(), ()> {\n fn foo11() -> Result<(), ()> {\n     let _ = await bar()?; //~ ERROR `await` is only allowed inside `async` functions and blocks\n     //~^ ERROR incorrect use of `await`\n-    //~| ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n+    //~| ERROR the `?` operator can only be applied to values that implement `Try`\n     Ok(())\n }\n fn foo12() -> Result<(), ()> {"}, {"sha": "6a653fc060b1d4ecbf65e2dd4ec90f05fc35e921", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -233,26 +233,26 @@ LL |     let foo = || {\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> $DIR/incorrect-syntax-suggestions.rs:16:19\n    |\n LL |     let _ = await bar()?;\n    |                   ^^^^^^\n    |                   |\n-   |                   the `?` operator cannot be applied to type `impl std::future::Future`\n+   |                   the `?` operator cannot be applied to type `impl Future`\n    |                   help: consider using `.await` here: `bar().await?`\n    |\n-   = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n-   = note: required by `std::ops::Try::into_result`\n+   = help: the trait `Try` is not implemented for `impl Future`\n+   = note: required by `into_result`\n \n-error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> $DIR/incorrect-syntax-suggestions.rs:63:19\n    |\n LL |     let _ = await bar()?;\n-   |                   ^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future`\n+   |                   ^^^^^^ the `?` operator cannot be applied to type `impl Future`\n    |\n-   = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n-   = note: required by `std::ops::Try::into_result`\n+   = help: the trait `Try` is not implemented for `impl Future`\n+   = note: required by `into_result`\n \n error: aborting due to 36 previous errors\n "}, {"sha": "e70ed9badbd33d17d35970966a0596dadf90ce68", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -8,7 +8,7 @@ LL |         take_u32(x)\n    |                  ^ expected `u32`, found opaque type\n    |\n    = note:     expected type `u32`\n-           found opaque type `impl std::future::Future`\n+           found opaque type `impl Future`\n \n error: aborting due to previous error\n "}, {"sha": "b1216ff4c4550f6172ebff87ca73ef1f9d56b0cb", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -39,7 +39,7 @@ async fn foo() -> Result<(), ()> {\n }\n \n async fn bar() -> Result<(), ()> {\n-    foo()?; //~ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n+    foo()?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n     Ok(())\n }\n \n@@ -53,7 +53,7 @@ async fn tuple() -> Tuple {\n \n async fn baz() -> Result<(), ()> {\n     let t = T;\n-    t?; //~ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n+    t?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n \n     let _: i32 = tuple().0; //~ ERROR no field `0`\n "}, {"sha": "f1f1b2d4439ecffe301d90d1445b0b0572e7c73a", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,16 +1,16 @@\n-error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> $DIR/issue-61076.rs:42:5\n    |\n LL |     foo()?;\n    |     ^^^^^^\n    |     |\n-   |     the `?` operator cannot be applied to type `impl std::future::Future`\n+   |     the `?` operator cannot be applied to type `impl Future`\n    |     help: consider using `.await` here: `foo().await?`\n    |\n-   = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n-   = note: required by `std::ops::Try::into_result`\n+   = help: the trait `Try` is not implemented for `impl Future`\n+   = note: required by `into_result`\n \n-error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> $DIR/issue-61076.rs:56:5\n    |\n LL |     t?;\n@@ -19,10 +19,10 @@ LL |     t?;\n    |     the `?` operator cannot be applied to type `T`\n    |     help: consider using `.await` here: `t.await?`\n    |\n-   = help: the trait `std::ops::Try` is not implemented for `T`\n-   = note: required by `std::ops::Try::into_result`\n+   = help: the trait `Try` is not implemented for `T`\n+   = note: required by `into_result`\n \n-error[E0609]: no field `0` on type `impl std::future::Future`\n+error[E0609]: no field `0` on type `impl Future`\n   --> $DIR/issue-61076.rs:58:26\n    |\n LL |     let _: i32 = tuple().0;\n@@ -33,7 +33,7 @@ help: consider awaiting before field access\n LL |     let _: i32 = tuple().await.0;\n    |                         ^^^^^^\n \n-error[E0609]: no field `a` on type `impl std::future::Future`\n+error[E0609]: no field `a` on type `impl Future`\n   --> $DIR/issue-61076.rs:60:28\n    |\n LL |     let _: i32 = struct_().a;\n@@ -44,11 +44,11 @@ help: consider awaiting before field access\n LL |     let _: i32 = struct_().await.a;\n    |                           ^^^^^^\n \n-error[E0599]: no method named `method` found for opaque type `impl std::future::Future` in the current scope\n+error[E0599]: no method named `method` found for opaque type `impl Future` in the current scope\n   --> $DIR/issue-61076.rs:62:15\n    |\n LL |     struct_().method();\n-   |               ^^^^^^ method not found in `impl std::future::Future`\n+   |               ^^^^^^ method not found in `impl Future`\n    |\n help: consider awaiting before this method call\n    |\n@@ -64,7 +64,7 @@ LL | async fn tuple() -> Tuple {\n LL |         Tuple(_) => {}\n    |         ^^^^^^^^ expected opaque type, found struct `Tuple`\n    |\n-   = note: expected opaque type `impl std::future::Future`\n+   = note: expected opaque type `impl Future`\n                    found struct `Tuple`\n help: consider awaiting on the future\n    |"}, {"sha": "ab7323680013f2887e24ee08e94cd9b63e1aa3ea", "filename": "src/test/ui/async-await/issue-64130-1-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL | fn is_sync<T: Sync>(t: T) { }\n LL |     is_sync(bar());\n    |     ^^^^^^^ future returned by `bar` is not `Sync`\n    |\n-   = help: within `impl std::future::Future`, the trait `std::marker::Sync` is not implemented for `Foo`\n+   = help: within `impl Future`, the trait `Sync` is not implemented for `Foo`\n note: future is not `Sync` as this value is used across an await\n   --> $DIR/issue-64130-1-sync.rs:15:5\n    |"}, {"sha": "5f7440a72d230f595f4cf8b30d85f81580f51ca3", "filename": "src/test/ui/async-await/issue-64130-2-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL | fn is_send<T: Send>(t: T) { }\n LL |     is_send(bar());\n    |     ^^^^^^^ future returned by `bar` is not `Send`\n    |\n-   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `Foo`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `Foo`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-2-send.rs:15:5\n    |"}, {"sha": "133152c309a83ef7ba46ae59bfb803ea0d139d66", "filename": "src/test/ui/async-await/issue-64130-3-other.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -22,5 +22,5 @@ async fn baz() { }\n \n fn main() {\n     is_qux(bar());\n-    //~^ ERROR the trait bound `Foo: Qux` is not satisfied in `impl std::future::Future`\n+    //~^ ERROR the trait bound `Foo: Qux` is not satisfied in `impl Future`\n }"}, {"sha": "4bf43f14cc195c652352c2bd4d34460f02044ebd", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,14 +1,14 @@\n-error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl std::future::Future`\n+error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future`\n   --> $DIR/issue-64130-3-other.rs:24:5\n    |\n LL | fn is_qux<T: Qux>(t: T) { }\n    |              --- required by this bound in `is_qux`\n LL | \n LL | async fn bar() {\n-   |                - within this `impl std::future::Future`\n+   |                - within this `impl Future`\n ...\n LL |     is_qux(bar());\n-   |     ^^^^^^ within `impl std::future::Future`, the trait `Qux` is not implemented for `Foo`\n+   |     ^^^^^^ within `impl Future`, the trait `Qux` is not implemented for `Foo`\n    |\n    = help: the following implementations were found:\n              <Foo as Qux>"}, {"sha": "440ea0a38e6b902c440ce7ce2a32d24d3da42a04", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -11,9 +11,9 @@ LL | |                 let _x = get().await;\n ...  |\n LL | |         }\n LL | |     }\n-   | |_____- this returned value is of type `impl std::future::Future`\n+   | |_____- this returned value is of type `impl Future`\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `(dyn std::any::Any + std::marker::Send + 'static)`\n+   = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-4-async-move.rs:21:26\n    |"}, {"sha": "2d6615cd5d34c3fd81c5e512430b67ebfbd7e9b1", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,12 +7,12 @@ LL | fn is_send<T: Send>(t: T) { }\n LL |     is_send(foo());\n    |     ^^^^^^^ future returned by `foo` is not `Send`\n    |\n-   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, u32>`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, u32>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-non-send-future-diags.rs:15:5\n    |\n LL |     let g = x.lock().unwrap();\n-   |         - has type `std::sync::MutexGuard<'_, u32>` which is not `Send`\n+   |         - has type `MutexGuard<'_, u32>` which is not `Send`\n LL |     baz().await;\n    |     ^^^^^^^^^^^ await occurs here, with `g` maybe used later\n LL | }"}, {"sha": "741623040c6472590d82f6bf807a9421e8a70ac1", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL | fn spawn<T: Send>(_: T) {}\n LL |     spawn(async {\n    |     ^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `*mut ()`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:20:9\n    |"}, {"sha": "bfabf81d1f54743526b85525310ab74caff31548", "filename": "src/test/ui/async-await/issue-68112.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -58,7 +58,7 @@ fn test2() {\n         ready(0).await;\n     };\n     require_send(send_fut);\n-    //~^ ERROR `std::cell::RefCell<i32>` cannot be shared between threads safely\n+    //~^ ERROR `RefCell<i32>` cannot be shared between threads safely\n }\n \n fn main() {}"}, {"sha": "07269f70f6bfc7afc28ad874ca4a13ab726061bb", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,12 +7,12 @@ LL | fn require_send(_: impl Send) {}\n LL |     require_send(send_fut);\n    |     ^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:31:17\n    |\n LL |         let _ = non_send_fut.await;\n-   |                 ^^^^^^^^^^^^ await occurs here on type `impl std::future::Future`, which is not `Send`\n+   |                 ^^^^^^^^^^^^ await occurs here on type `impl Future`, which is not `Send`\n \n error: future cannot be sent between threads safely\n   --> $DIR/issue-68112.rs:43:5\n@@ -23,33 +23,33 @@ LL | fn require_send(_: impl Send) {}\n LL |     require_send(send_fut);\n    |     ^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:40:17\n    |\n LL |         let _ = make_non_send_future1().await;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl std::future::Future`, which is not `Send`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future`, which is not `Send`\n \n-error[E0277]: `std::cell::RefCell<i32>` cannot be shared between threads safely\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n   --> $DIR/issue-68112.rs:60:5\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ---- required by this bound in `require_send`\n ...\n LL |     require_send(send_fut);\n-   |     ^^^^^^^^^^^^ `std::cell::RefCell<i32>` cannot be shared between threads safely\n-   |\n-   = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n-   = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<std::cell::RefCell<i32>>`\n-   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36 t:std::sync::Arc<std::cell::RefCell<i32>> {}]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36 t:std::sync::Arc<std::cell::RefCell<i32>> {}]>`\n-   = note: required because it appears within the type `impl std::future::Future`\n-   = note: required because it appears within the type `impl std::future::Future`\n-   = note: required because it appears within the type `impl std::future::Future`\n-   = note: required because it appears within the type `{std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}`\n-   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]>`\n-   = note: required because it appears within the type `impl std::future::Future`\n+   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n+   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36 t:Arc<RefCell<i32>> {}]`\n+   = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36 t:Arc<RefCell<i32>> {}]>`\n+   = note: required because it appears within the type `impl Future`\n+   = note: required because it appears within the type `impl Future`\n+   = note: required because it appears within the type `impl Future`\n+   = note: required because it appears within the type `{ResumeTy, impl Future, (), i32, Ready<i32>}`\n+   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6 {ResumeTy, impl Future, (), i32, Ready<i32>}]`\n+   = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6 {ResumeTy, impl Future, (), i32, Ready<i32>}]>`\n+   = note: required because it appears within the type `impl Future`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "718c597e7129a183b9e17e67028eb8b82d35b380", "filename": "src/test/ui/async-await/issue-68523.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,6 +2,6 @@\n \n async fn main() -> Result<i32, ()> {\n //~^ ERROR `main` function is not allowed to be `async`\n-//~^^ ERROR `main` has invalid return type `impl std::future::Future`\n+//~^^ ERROR `main` has invalid return type `impl Future`\n     Ok(1)\n }"}, {"sha": "6f67af04cd44fc5386665e4cedd5c187819603bf", "filename": "src/test/ui/async-await/issue-68523.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: `main` has invalid return type `impl std::future::Future`\n+error[E0277]: `main` has invalid return type `impl Future`\n   --> $DIR/issue-68523.rs:3:20\n    |\n LL | async fn main() -> Result<i32, ()> {\n-   |                    ^^^^^^^^^^^^^^^ `main` can only return types that implement `std::process::Termination`\n+   |                    ^^^^^^^^^^^^^^^ `main` can only return types that implement `Termination`\n    |\n    = help: consider using `()`, or a `Result`\n "}, {"sha": "fb1f8e4ffd251fed8cae966a820a0177bba95e5a", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -24,8 +24,8 @@ error[E0277]: `()` is not a future\n LL |     [1; ().await];\n    |         ^^^^^^^^ `()` is not a future\n    |\n-   = help: the trait `std::future::Future` is not implemented for `()`\n-   = note: required by `std::future::Future::poll`\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: required by `poll`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "364194bea100e914c2d285a3a68a22976699d1f2", "filename": "src/test/ui/async-await/issue-70818.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n LL |\n LL |     async { (ty, ty1) }\n-   |     ------------------- this returned value is of type `impl std::future::Future`\n+   |     ------------------- this returned value is of type `impl Future`\n    |\n note: captured value is not `Send`\n   --> $DIR/issue-70818.rs:6:18\n@@ -15,8 +15,8 @@ LL |     async { (ty, ty1) }\n    = note: the return type of a function must have a statically known size\n help: consider restricting type parameter `U`\n    |\n-LL | fn foo<T: Send, U: std::marker::Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n-   |                  ^^^^^^^^^^^^^^^^^^^\n+LL | fn foo<T: Send, U: Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                  ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "85cc7069b604d0cd3ff34d7d512fa32d9715bb7c", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,12 +7,12 @@ LL | fn fake_spawn<F: Future + Send + 'static>(f: F) { }\n LL |   fake_spawn(wrong_mutex());\n    |   ^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\n    |\n-   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, i32>`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, i32>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-71137.rs:12:5\n    |\n LL |     let mut guard = m.lock().unwrap();\n-   |         --------- has type `std::sync::MutexGuard<'_, i32>` which is not `Send`\n+   |         --------- has type `MutexGuard<'_, i32>` which is not `Send`\n LL |     (async { \"right\"; }).await;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ await occurs here, with `mut guard` maybe used later\n LL |     *guard += 1;"}, {"sha": "52245b63128abe89d98668ac3616fec3c730c5c2", "filename": "src/test/ui/async-await/issue-72442.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,13 +1,13 @@\n-error[E0277]: the trait bound `std::option::Option<&str>: std::convert::AsRef<std::path::Path>` is not satisfied\n+error[E0277]: the trait bound `Option<&str>: AsRef<Path>` is not satisfied\n   --> $DIR/issue-72442.rs:12:36\n    |\n LL |             let mut f = File::open(path.to_str())?;\n-   |                                    ^^^^^^^^^^^^^ the trait `std::convert::AsRef<std::path::Path>` is not implemented for `std::option::Option<&str>`\n+   |                                    ^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `Option<&str>`\n    | \n   ::: $SRC_DIR/std/src/fs.rs:LL:COL\n    |\n LL |     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {\n-   |                    ----------- required by this bound in `std::fs::File::open`\n+   |                    ----------- required by this bound in `File::open`\n \n error: aborting due to previous error\n "}, {"sha": "785fe21dd31420676bd124dc31834de75a1e98ef", "filename": "src/test/ui/async-await/issue-72590-type-error-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -16,7 +16,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n LL |     async fn frob(self) {}\n    |                   ^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `Foo`, the trait `std::marker::Sized` is not implemented for `str`\n+   = help: within `Foo`, the trait `Sized` is not implemented for `str`\n    = note: required because it appears within the type `Foo`\n    = help: unsized locals are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size"}, {"sha": "c879a65bc7f77008f553ebdfb5155454e8e9b992", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -33,8 +33,8 @@ error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n    |\n-   = help: the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n-   = note: required by `std::future::Future::poll`\n+   = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n+   = note: required by `poll`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e4b2725686a0f5b884d795a617a7051761cf35dd", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL | fn assert_send<T: Send>(_: T) {}\n LL |     assert_send(async {\n    |     ^^^^^^^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `*const u8`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:9\n    |"}, {"sha": "f34ce8081ca02e3f967910067a9d0a840f3c360f", "filename": "src/test/ui/async-await/issues/issue-67893.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,5 +7,5 @@ fn g(_: impl Send) {}\n \n fn main() {\n     g(issue_67893::run())\n-    //~^ ERROR: `std::sync::MutexGuard<'_, ()>` cannot be sent between threads safely\n+    //~^ ERROR: `MutexGuard<'_, ()>` cannot be sent between threads safely\n }"}, {"sha": "a6f50a6657e7cc52704cf1e221fda524f69ec862", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,23 +1,23 @@\n-error[E0277]: `std::sync::MutexGuard<'_, ()>` cannot be sent between threads safely\n+error[E0277]: `MutexGuard<'_, ()>` cannot be sent between threads safely\n   --> $DIR/issue-67893.rs:9:5\n    |\n LL | fn g(_: impl Send) {}\n    |              ---- required by this bound in `g`\n ...\n LL |     g(issue_67893::run())\n-   |     ^ `std::sync::MutexGuard<'_, ()>` cannot be sent between threads safely\n+   |     ^ `MutexGuard<'_, ()>` cannot be sent between threads safely\n    | \n   ::: $DIR/auxiliary/issue_67893.rs:7:20\n    |\n LL | pub async fn run() {\n-   |                    - within this `impl std::future::Future`\n+   |                    - within this `impl Future`\n    |\n-   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, ()>`\n-   = note: required because it appears within the type `for<'r, 's, 't0, 't1, 't2, 't3> {std::future::ResumeTy, std::sync::Arc<std::sync::Mutex<()>>, &'r std::sync::Mutex<()>, std::result::Result<std::sync::MutexGuard<'s, ()>, std::sync::PoisonError<std::sync::MutexGuard<'t0, ()>>>, &'t1 std::sync::MutexGuard<'t2, ()>, std::sync::MutexGuard<'t3, ()>, (), impl std::future::Future}`\n-   = note: required because it appears within the type `[static generator@issue_67893::run::{{closure}}#0 for<'r, 's, 't0, 't1, 't2, 't3> {std::future::ResumeTy, std::sync::Arc<std::sync::Mutex<()>>, &'r std::sync::Mutex<()>, std::result::Result<std::sync::MutexGuard<'s, ()>, std::sync::PoisonError<std::sync::MutexGuard<'t0, ()>>>, &'t1 std::sync::MutexGuard<'t2, ()>, std::sync::MutexGuard<'t3, ()>, (), impl std::future::Future}]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@issue_67893::run::{{closure}}#0 for<'r, 's, 't0, 't1, 't2, 't3> {std::future::ResumeTy, std::sync::Arc<std::sync::Mutex<()>>, &'r std::sync::Mutex<()>, std::result::Result<std::sync::MutexGuard<'s, ()>, std::sync::PoisonError<std::sync::MutexGuard<'t0, ()>>>, &'t1 std::sync::MutexGuard<'t2, ()>, std::sync::MutexGuard<'t3, ()>, (), impl std::future::Future}]>`\n-   = note: required because it appears within the type `impl std::future::Future`\n-   = note: required because it appears within the type `impl std::future::Future`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n+   = note: required because it appears within the type `for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, std::result::Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}`\n+   = note: required because it appears within the type `[static generator@run::{{closure}}#0 for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, std::result::Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}]`\n+   = note: required because it appears within the type `from_generator::GenFuture<[static generator@run::{{closure}}#0 for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, std::result::Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}]>`\n+   = note: required because it appears within the type `impl Future`\n+   = note: required because it appears within the type `impl Future`\n \n error: aborting due to previous error\n "}, {"sha": "4eaed1cf155e99c0ad84267e691781f1e8ca6537", "filename": "src/test/ui/async-await/no-move-across-await-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -6,7 +6,7 @@ LL |     needs_vec(s.x).await;\n LL |     s.x\n    |     ^^^ value used here after move\n    |\n-   = note: move occurs because `s.x` has type `std::vec::Vec<usize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `s.x` has type `Vec<usize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "d750df9918ee040a223e153d5e7fff672ad5eb66", "filename": "src/test/ui/async-await/no-move-across-await-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL |     nothing().await;\n LL |     x.1\n    |     ^^^ value used here after move\n    |\n-   = note: move occurs because `x.1` has type `std::vec::Vec<usize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.1` has type `Vec<usize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "ed2c4cbfccc9866fa710388ecbc00959f6820ea5", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -11,7 +11,7 @@ LL |         take_u32(x)\n    |                  help: consider using `.await` here: `x.await`\n    |\n    = note:     expected type `u32`\n-           found opaque type `impl std::future::Future`\n+           found opaque type `impl Future`\n \n error: aborting due to previous error\n "}, {"sha": "c6355680e253be5392bb24506890e6699497997f", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -11,7 +11,7 @@ LL |     take_u32(x)\n    |              help: consider using `.await` here: `x.await`\n    |\n    = note:     expected type `u32`\n-           found opaque type `impl std::future::Future`\n+           found opaque type `impl Future`\n \n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:23:5\n@@ -23,7 +23,7 @@ LL |     dummy()\n    |     ^^^^^^^ expected `()`, found opaque type\n    |\n    = note: expected unit type `()`\n-            found opaque type `impl std::future::Future`\n+            found opaque type `impl Future`\n help: try adding a semicolon\n    |\n LL |     dummy();"}, {"sha": "695d7dd59fb4fccb28bfe04457209db88492d9d4", "filename": "src/test/ui/async-await/suggest-switching-edition-on-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -18,7 +18,7 @@ LL |     x.await;\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0609]: no field `await` on type `std::pin::Pin<&mut dyn std::future::Future<Output = ()>>`\n+error[E0609]: no field `await` on type `Pin<&mut dyn Future<Output = ()>>`\n   --> $DIR/suggest-switching-edition-on-await.rs:31:7\n    |\n LL |     x.await;"}, {"sha": "8e7823f3571b1a150c02b8e3efc6467de1523d5a", "filename": "src/test/ui/async-await/try-on-option-in-async.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+error[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `Try`)\n   --> $DIR/try-on-option-in-async.rs:8:9\n    |\n LL |       async {\n@@ -10,10 +10,10 @@ LL | |         22\n LL | |     }\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `std::ops::Try` is not implemented for `{integer}`\n-   = note: required by `std::ops::Try::from_error`\n+   = help: the trait `Try` is not implemented for `{integer}`\n+   = note: required by `from_error`\n \n-error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `Try`)\n   --> $DIR/try-on-option-in-async.rs:17:9\n    |\n LL |       let async_closure = async || {\n@@ -25,10 +25,10 @@ LL | |         22_u32\n LL | |     };\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `std::ops::Try` is not implemented for `u32`\n-   = note: required by `std::ops::Try::from_error`\n+   = help: the trait `Try` is not implemented for `u32`\n+   = note: required by `from_error`\n \n-error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `Try`)\n   --> $DIR/try-on-option-in-async.rs:26:5\n    |\n LL |   async fn an_async_function() -> u32 {\n@@ -40,8 +40,8 @@ LL | |     22\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `std::ops::Try` is not implemented for `u32`\n-   = note: required by `std::ops::Try::from_error`\n+   = help: the trait `Try` is not implemented for `u32`\n+   = note: required by `from_error`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "eb8447ff0f3e7c03f7afe7ad963d3afdebf76857", "filename": "src/test/ui/auto-ref-slice-plus-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `test_mut` found for struct `std::vec::Vec<{integer}>` in the current scope\n+error[E0599]: no method named `test_mut` found for struct `Vec<{integer}>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:7:7\n    |\n LL |     a.test_mut();\n@@ -11,11 +11,11 @@ note: `MyIter` defines an item `test_mut`, perhaps you need to implement it\n LL | trait MyIter {\n    | ^^^^^^^^^^^^\n \n-error[E0599]: no method named `test` found for struct `std::vec::Vec<{integer}>` in the current scope\n+error[E0599]: no method named `test` found for struct `Vec<{integer}>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:8:7\n    |\n LL |     a.test();\n-   |       ^^^^ method not found in `std::vec::Vec<{integer}>`\n+   |       ^^^^ method not found in `Vec<{integer}>`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `MyIter` defines an item `test`, perhaps you need to implement it"}, {"sha": "f07a2c107ba457be042a38bfdab532329fb1d635", "filename": "src/test/ui/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -13,13 +13,13 @@ fn main() {\n     let a: Clam = Clam{x: box 1, y: box 2};\n     let b: Clam = Clam{x: box 10, y: box 20};\n     let z: isize = a.x + b.y;\n-    //~^ ERROR cannot add `std::boxed::Box<isize>` to `std::boxed::Box<isize>`\n+    //~^ ERROR cannot add `Box<isize>` to `Box<isize>`\n     println!(\"{}\", z);\n     assert_eq!(z, 21);\n     let forty: Fish = Fish{a: box 40};\n     let two: Fish = Fish{a: box 2};\n     let answer: isize = forty.a + two.a;\n-    //~^ ERROR cannot add `std::boxed::Box<isize>` to `std::boxed::Box<isize>`\n+    //~^ ERROR cannot add `Box<isize>` to `Box<isize>`\n     println!(\"{}\", answer);\n     assert_eq!(answer, 42);\n }"}, {"sha": "9921ce7c154406109f31127072121bcfd4e65e40", "filename": "src/test/ui/autoderef-full-lval.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,18 +1,18 @@\n-error[E0369]: cannot add `std::boxed::Box<isize>` to `std::boxed::Box<isize>`\n+error[E0369]: cannot add `Box<isize>` to `Box<isize>`\n   --> $DIR/autoderef-full-lval.rs:15:24\n    |\n LL |     let z: isize = a.x + b.y;\n-   |                    --- ^ --- std::boxed::Box<isize>\n+   |                    --- ^ --- Box<isize>\n    |                    |\n-   |                    std::boxed::Box<isize>\n+   |                    Box<isize>\n \n-error[E0369]: cannot add `std::boxed::Box<isize>` to `std::boxed::Box<isize>`\n+error[E0369]: cannot add `Box<isize>` to `Box<isize>`\n   --> $DIR/autoderef-full-lval.rs:21:33\n    |\n LL |     let answer: isize = forty.a + two.a;\n-   |                         ------- ^ ----- std::boxed::Box<isize>\n+   |                         ------- ^ ----- Box<isize>\n    |                         |\n-   |                         std::boxed::Box<isize>\n+   |                         Box<isize>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "934ee353da292246340369d6dbea38280454e61d", "filename": "src/test/ui/bad/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n static i: String = 10;\n //~^ ERROR mismatched types\n-//~| expected struct `std::string::String`, found integer\n+//~| expected struct `String`, found integer\n fn main() { println!(\"{}\", i); }"}, {"sha": "a9c84b4b41cc86733612dcd3ab2d082b9e599d86", "filename": "src/test/ui/bad/bad-const-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | static i: String = 10;\n    |                    ^^\n    |                    |\n-   |                    expected struct `std::string::String`, found integer\n+   |                    expected struct `String`, found integer\n    |                    help: try using a conversion method: `10.to_string()`\n \n error: aborting due to previous error"}, {"sha": "77c48c951acae5e00d5b0fdf2e16482b3772eaaa", "filename": "src/test/ui/bad/bad-expr-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -23,7 +23,7 @@ LL | fn main(arguments: Vec<String>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n    = note: expected fn pointer `fn()`\n-              found fn pointer `fn(std::vec::Vec<std::string::String>)`\n+              found fn pointer `fn(Vec<String>)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d06e102717951eb2d2ebd3e4372b9ccb65a5e32d", "filename": "src/test/ui/bad/bad-expr-path2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -23,7 +23,7 @@ LL | fn main(arguments: Vec<String>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n    = note: expected fn pointer `fn()`\n-              found fn pointer `fn(std::vec::Vec<std::string::String>)`\n+              found fn pointer `fn(Vec<String>)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5b68d97a9ea5543875eee53cd9e0614edddef44d", "filename": "src/test/ui/bad/bad-method-typaram-kind.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -6,8 +6,8 @@ LL |     1.bar::<T>();\n    |\n help: consider further restricting this bound\n    |\n-LL | fn foo<T:'static + std::marker::Send>() {\n-   |                  ^^^^^^^^^^^^^^^^^^^\n+LL | fn foo<T:'static + Send>() {\n+   |                  ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b9bce7fb5f49bd46df48b85bc65e0ab20ee1245e", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -6,7 +6,7 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |                    |\n    |                    first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Trait + std::marker::Sized {}`\n+   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Trait + Sized {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n@@ -18,18 +18,18 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n   ::: $SRC_DIR/alloc/src/vec.rs:LL:COL\n    |\n LL | pub struct Vec<T> {\n-   |                - required by this bound in `std::vec::Vec`\n+   |                - required by this bound in `Vec`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n+   = help: the trait `Sized` is not implemented for `dyn Trait`\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:37\n    |\n LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |                                     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n-   = note: required by `std::vec::Vec::<T>::new`\n+   = help: the trait `Sized` is not implemented for `dyn Trait`\n+   = note: required by `Vec::<T>::new`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3085cce3f3ef7206c52017d1ea1791ad206e179f", "filename": "src/test/ui/binop/binop-bitxor-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:no implementation for `std::string::String ^ std::string::String`\n+// error-pattern:no implementation for `String ^ String`\n \n fn main() { let x = \"a\".to_string() ^ \"b\".to_string(); }"}, {"sha": "f236cd61efe5944476c1301288e34f08b1f7df8d", "filename": "src/test/ui/binop/binop-bitxor-str.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,10 +1,10 @@\n-error[E0369]: no implementation for `std::string::String ^ std::string::String`\n+error[E0369]: no implementation for `String ^ String`\n   --> $DIR/binop-bitxor-str.rs:3:37\n    |\n LL | fn main() { let x = \"a\".to_string() ^ \"b\".to_string(); }\n-   |                     --------------- ^ --------------- std::string::String\n+   |                     --------------- ^ --------------- String\n    |                     |\n-   |                     std::string::String\n+   |                     String\n \n error: aborting due to previous error\n "}, {"sha": "9db11cf1590e85baaa846c8247907f8e2e7763af", "filename": "src/test/ui/blind/blind-item-block-middle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL | mod foo { pub struct bar; }\n LL |     let bar = 5;\n    |         ^^^\n    |         |\n-   |         expected integer, found struct `foo::bar`\n+   |         expected integer, found struct `bar`\n    |         `bar` is interpreted as a unit struct, not a new binding\n    |         help: introduce a new binding instead: `other_bar`\n "}, {"sha": "7c3d0165c6d3a50093abcadef92c111ab62c67ce", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:3:15\n    |\n LL | pub fn f() -> String {\n-   |        -      ^^^^^^ expected struct `std::string::String`, found `()`\n+   |        -      ^^^^^^ expected struct `String`, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     0u8;\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:8:15\n    |\n LL | pub fn g() -> String {\n-   |        -      ^^^^^^ expected struct `std::string::String`, found `()`\n+   |        -      ^^^^^^ expected struct `String`, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"this won't work\".to_string();"}, {"sha": "60aa2c5a6b06f07b3a7476ced5e39fae9aba4cdd", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:3:13\n    |\n LL | fn foo() -> String {\n-   |    ---      ^^^^^^ expected struct `std::string::String`, found `()`\n+   |    ---      ^^^^^^ expected struct `String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:11:13\n    |\n LL | fn bar() -> String {\n-   |    ---      ^^^^^^ expected struct `std::string::String`, found `()`\n+   |    ---      ^^^^^^ expected struct `String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"foobar\".to_string()"}, {"sha": "4d2844cc5aec821ae0145c306b553ad1d0645dc2", "filename": "src/test/ui/block-result/issue-13624.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -6,7 +6,7 @@ mod a {\n   pub fn get_enum_struct_variant() -> () {\n     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n     //~^ ERROR mismatched types\n-    //~| expected `()`, found enum `a::Enum`\n+    //~| expected `()`, found enum `Enum`\n   }\n }\n \n@@ -19,7 +19,7 @@ mod b {\n       match enum_struct_variant {\n         a::Enum::EnumStructVariant { x, y, z } => {\n         //~^ ERROR mismatched types\n-        //~| expected `()`, found enum `a::Enum`\n+        //~| expected `()`, found enum `Enum`\n         }\n       }\n     }"}, {"sha": "13070b4e821319ad8b9ee62b9851eb77cc3e7fa6", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL |   pub fn get_enum_struct_variant() -> () {\n    |                                       -- expected `()` because of return type\n LL |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `a::Enum`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `Enum`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:20:9\n    |\n LL |       match enum_struct_variant {\n    |             ------------------- this expression has type `()`\n LL |         a::Enum::EnumStructVariant { x, y, z } => {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `a::Enum`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `Enum`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6649e67a5093c333654c94fcc64535a14a3af85a", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -6,7 +6,7 @@ LL |   b + 3\n    |\n    = help: the following implementations were found:\n              <f64 as Scalar>\n-   = note: required because of the requirements on the impl of `std::ops::Add<{integer}>` for `Bob`\n+   = note: required because of the requirements on the impl of `Add<{integer}>` for `Bob`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-22645.rs:15:3"}, {"sha": "1bf8158927552d580f281141d6aae8f8e6a7e03f", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -20,7 +20,7 @@ error[E0382]: borrow of moved value: `x`\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:22:5\n    |\n LL | fn bindings_after_at_slice_patterns_move_binding(x: [String; 4]) {\n-   |                                                  - move occurs because `x` has type `[std::string::String; 4]`, which does not implement the `Copy` trait\n+   |                                                  - move occurs because `x` has type `[String; 4]`, which does not implement the `Copy` trait\n LL |     match x {\n LL |         a @ [.., _] => (),\n    |         ----------- value moved here\n@@ -68,7 +68,7 @@ error[E0382]: borrow of moved value: `x`\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:80:5\n    |\n LL | fn bindings_after_at_or_patterns_move(x: Option<Test>) {\n-   |                                       - move occurs because `x` has type `std::option::Option<Test>`, which does not implement the `Copy` trait\n+   |                                       - move occurs because `x` has type `Option<Test>`, which does not implement the `Copy` trait\n LL |     match x {\n LL |         foo @ Some(Test::Foo | Test::Bar) => (),\n    |         ---------------------------------\n@@ -119,7 +119,7 @@ error[E0382]: borrow of moved value: `x`\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:138:5\n    |\n LL | fn bindings_after_at_slice_patterns_or_patterns_moves(x: [Option<Test>; 4]) {\n-   |                                                       - move occurs because `x` has type `[std::option::Option<Test>; 4]`, which does not implement the `Copy` trait\n+   |                                                       - move occurs because `x` has type `[Option<Test>; 4]`, which does not implement the `Copy` trait\n LL |     match x {\n LL |         a @ [.., Some(Test::Foo | Test::Bar)] => (),\n    |         -------------------------------------"}, {"sha": "426d5bc4726f582751f111bb306301838c7898ed", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-auto-deref.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,111 +4,111 @@ error[E0596]: cannot borrow data in an `Rc` as mutable\n LL |     let __isize = &mut x.y;\n    |                   ^^^^^^^^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:40:19\n    |\n LL |     let __isize = &mut x.y;\n    |                   ^^^^^^^^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:48:5\n    |\n LL |     &mut x.y\n    |     ^^^^^^^^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:52:5\n    |\n LL |     &mut x.y\n    |     ^^^^^^^^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0594]: cannot assign to data in an `Rc`\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:56:5\n    |\n LL |     x.y = 3;\n    |     ^^^^^^^ cannot assign\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0594]: cannot assign to data in an `Rc`\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:60:5\n    |\n LL |     x.y = 3;\n    |     ^^^^^^^ cannot assign\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0594]: cannot assign to data in an `Rc`\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:64:5\n    |\n LL |     x.y = 3;\n    |     ^^^^^^^ cannot assign\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:72:5\n    |\n LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:76:5\n    |\n LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:84:5\n    |\n LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:88:5\n    |\n LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:92:6\n    |\n LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:96:6\n    |\n LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:100:6\n    |\n LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<Point>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "9ed9d292493c45fda27d3128da9bbe334fffbc25", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-deref.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,55 +4,55 @@ error[E0596]: cannot borrow data in an `Rc` as mutable\n LL |     let __isize = &mut *x;\n    |                   ^^^^^^^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<isize>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<isize>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:16:19\n    |\n LL |     let __isize = &mut *x;\n    |                   ^^^^^^^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<isize>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<isize>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:24:5\n    |\n LL |     &mut **x\n    |     ^^^^^^^^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<isize>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<isize>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:28:5\n    |\n LL |     &mut **x\n    |     ^^^^^^^^ cannot borrow as mutable\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<isize>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<isize>`\n \n error[E0594]: cannot assign to data in an `Rc`\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:32:5\n    |\n LL |     *x = 3;\n    |     ^^^^^^ cannot assign\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<isize>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<isize>`\n \n error[E0594]: cannot assign to data in an `Rc`\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:36:5\n    |\n LL |     **x = 3;\n    |     ^^^^^^^ cannot assign\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<isize>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<isize>`\n \n error[E0594]: cannot assign to data in an `Rc`\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:40:5\n    |\n LL |     **x = 3;\n    |     ^^^^^^^ cannot assign\n    |\n-   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `std::rc::Rc<isize>`\n+   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<isize>`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "7f6c764ec2241d07b3ec6939e5c6cff2bf713942", "filename": "src/test/ui/borrowck/borrowck-closures-slice-patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -30,7 +30,7 @@ error[E0382]: borrow of moved value: `x`\n   --> $DIR/borrowck-closures-slice-patterns.rs:25:5\n    |\n LL | fn arr_by_move(x: [String; 3]) {\n-   |                - move occurs because `x` has type `[std::string::String; 3]`, which does not implement the `Copy` trait\n+   |                - move occurs because `x` has type `[String; 3]`, which does not implement the `Copy` trait\n LL |     let f = || {\n    |             -- value moved into closure here\n LL |         let [y, z @ ..] = x;\n@@ -71,7 +71,7 @@ error[E0382]: borrow of moved value: `x`\n   --> $DIR/borrowck-closures-slice-patterns.rs:51:5\n    |\n LL | fn arr_box_by_move(x: Box<[String; 3]>) {\n-   |                    - move occurs because `x` has type `std::boxed::Box<[std::string::String; 3]>`, which does not implement the `Copy` trait\n+   |                    - move occurs because `x` has type `Box<[String; 3]>`, which does not implement the `Copy` trait\n LL |     let f = || {\n    |             -- value moved into closure here\n LL |         let [y, z @ ..] = *x;"}, {"sha": "17b93106615839d6f004c75c438e3c0dc9c7445d", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `b`\n   --> $DIR/borrowck-consume-unsize-vec.rs:8:13\n    |\n LL | fn foo(b: Box<[i32;5]>) {\n-   |        - move occurs because `b` has type `std::boxed::Box<[i32; 5]>`, which does not implement the `Copy` trait\n+   |        - move occurs because `b` has type `Box<[i32; 5]>`, which does not implement the `Copy` trait\n LL |     consume(b);\n    |             - value moved here\n LL |     consume(b);"}, {"sha": "4e20bbf175770a1263d02310b2bf263e5a9dd8fd", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `b`\n   --> $DIR/borrowck-consume-upcast-box.rs:10:13\n    |\n LL | fn foo(b: Box<dyn Foo + Send>) {\n-   |        - move occurs because `b` has type `std::boxed::Box<dyn Foo + std::marker::Send>`, which does not implement the `Copy` trait\n+   |        - move occurs because `b` has type `Box<dyn Foo + Send>`, which does not implement the `Copy` trait\n LL |     consume(b);\n    |             - value moved here\n LL |     consume(b);"}, {"sha": "e386aa1f1f4d41a287a0d49ef8693fc36ce535ef", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -361,7 +361,7 @@ LL |                 drop(x);\n LL |                 drop(x);\n    |                      ^ value used here after move\n    |\n-   = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x` has type `Vec<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to 32 previous errors\n "}, {"sha": "77dda0a32b321cf52adbf46b84255731d1d4942a", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `my_str`\n   --> $DIR/borrowck-drop-from-guard.rs:11:23\n    |\n LL |     let my_str = \"hello\".to_owned();\n-   |         ------ move occurs because `my_str` has type `std::string::String`, which does not implement the `Copy` trait\n+   |         ------ move occurs because `my_str` has type `String`, which does not implement the `Copy` trait\n LL |     match Some(42) {\n LL |         Some(_) if { drop(my_str); false } => {}\n    |                           ------ value moved here"}, {"sha": "e2c8073241487c805e027e3925b5749ada3d8a23", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.edition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of `foo` in pattern guard\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                  ^^             ---\n    |                  |              |\n-   |                  |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n+   |                  |              move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n    |                  |              move occurs due to use in closure\n    |                  move out of `foo` occurs here\n    |"}, {"sha": "e2c8073241487c805e027e3925b5749ada3d8a23", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.zflag.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of `foo` in pattern guard\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                  ^^             ---\n    |                  |              |\n-   |                  |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n+   |                  |              move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n    |                  |              move occurs due to use in closure\n    |                  move out of `foo` occurs here\n    |"}, {"sha": "f1601336fca9b5e2b49a1d0898e3c9d455243033", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -6,7 +6,7 @@ LL |     drop(x.b);\n LL |     drop(*x.b);\n    |          ^^^^ value used here after move\n    |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.b` has type `Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:14:10\n@@ -16,7 +16,7 @@ LL |     let y = A { a: 3, .. x };\n LL |     drop(*x.b);\n    |          ^^^^ value used here after move\n    |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.b` has type `Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:20:13\n@@ -26,7 +26,7 @@ LL |     drop(x.b);\n LL |     let p = &x.b;\n    |             ^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.b` has type `Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:27:13\n@@ -36,7 +36,7 @@ LL |     let _y = A { a: 3, .. x };\n LL |     let p = &x.b;\n    |             ^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.b` has type `Box<isize>`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `x.b` because it is borrowed\n   --> $DIR/borrowck-field-sensitivity.rs:34:10\n@@ -76,7 +76,7 @@ LL |     drop(x.b);\n LL |     drop(x.b);\n    |          ^^^ value used here after move\n    |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.b` has type `Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:62:10\n@@ -86,7 +86,7 @@ LL |     let _y = A { a: 3, .. x };\n LL |     drop(x.b);\n    |          ^^^ value used here after move\n    |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.b` has type `Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:68:14\n@@ -96,7 +96,7 @@ LL |     drop(x.b);\n LL |     let _z = A { a: 3, .. x };\n    |              ^^^^^^^^^^^^^^^^ value used here after move\n    |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.b` has type `Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:74:14\n@@ -106,7 +106,7 @@ LL |     let _y = A { a: 3, .. x };\n LL |     let _z = A { a: 4, .. x };\n    |              ^^^^^^^^^^^^^^^^ value used here after move\n    |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.b` has type `Box<isize>`, which does not implement the `Copy` trait\n \n error[E0381]: assign to part of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-field-sensitivity.rs:81:5"}, {"sha": "e7491afdad12044572e8f3f7a2e0d208ea6db69d", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0507]: cannot move out of `*x` which is behind a shared reference\n   --> $DIR/borrowck-fn-in-const-a.rs:6:16\n    |\n LL |         return *x\n-   |                ^^ move occurs because `*x` has type `std::string::String`, which does not implement the `Copy` trait\n+   |                ^^ move occurs because `*x` has type `String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "2eabc1f1d9df5844218a35a4640b537ea1e52136", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -15,7 +15,7 @@ LL |     for &a in &f.a {\n    |         --    ^^^^\n    |         ||\n    |         |data moved here\n-   |         |move occurs because `a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |         |move occurs because `a` has type `Box<isize>`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `a`\n \n error[E0507]: cannot move out of a shared reference\n@@ -25,7 +25,7 @@ LL |     for &a in x.iter() {\n    |         --    ^^^^^^^^\n    |         ||\n    |         |data moved here\n-   |         |move occurs because `a` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   |         |move occurs because `a` has type `Box<i32>`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `a`\n \n error: aborting due to 3 previous errors"}, {"sha": "f73c787346d8cfddc97a77a6a4d0533e97589095", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n LL |     let x = Box::new(0);\n    |         - captured outer variable\n LL |     Box::new(|| x)\n-   |                 ^ move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   |                 ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "f9ba2ca416bdde0fe40b542b914bb91b155a8480", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of `*y` which is behind a shared reference\n LL |         let _b = *y;\n    |                  ^^\n    |                  |\n-   |                  move occurs because `*y` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   |                  move occurs because `*y` has type `Box<i32>`, which does not implement the `Copy` trait\n    |                  help: consider borrowing here: `&*y`\n \n error: aborting due to previous error"}, {"sha": "837bd08253b3bab6b207778dc89560c85ab4f384", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL |     let _g = to_fn_mut(|| {\n LL |         let _h = to_fn_once(move || -> isize { *bar });\n    |                             ^^^^^^^^^^^^^^^^    ---\n    |                             |                   |\n-   |                             |                   move occurs because `bar` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |                             |                   move occurs because `bar` has type `Box<isize>`, which does not implement the `Copy` trait\n    |                             |                   move occurs due to use in closure\n    |                             move out of `bar` occurs here\n "}, {"sha": "ead02414a622b065345e7c26a3ada83bffbe28ec", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -34,7 +34,7 @@ LL |         n => {\n    |         -\n    |         |\n    |         data moved here\n-   |         move occurs because `n` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |         move occurs because `n` has type `Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7ac095e808a85a9537696b0e7834b6ca63bd1071", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of `*x` which is behind a raw pointer\n LL |     let y = *x;\n    |             ^^\n    |             |\n-   |             move occurs because `*x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |             move occurs because `*x` has type `Box<isize>`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&*x`\n \n error: aborting due to previous error"}, {"sha": "6b19f9d977efab0f887398bc4a98e1e8e44a3342", "filename": "src/test/ui/borrowck/borrowck-move-in-irrefut-pat.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL | fn arg_item(&_x: &String) {}\n    |             ^--\n    |             ||\n    |             |data moved here\n-   |             |move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n+   |             |move occurs because `_x` has type `String`, which does not implement the `Copy` trait\n    |             help: consider removing the `&`: `_x`\n \n error[E0507]: cannot move out of a shared reference\n@@ -15,7 +15,7 @@ LL |     with(|&_x| ())\n    |           ^--\n    |           ||\n    |           |data moved here\n-   |           |move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n+   |           |move occurs because `_x` has type `String`, which does not implement the `Copy` trait\n    |           help: consider removing the `&`: `_x`\n \n error[E0507]: cannot move out of a shared reference\n@@ -25,7 +25,7 @@ LL |     let &_x = &\"hi\".to_string();\n    |         ---   ^^^^^^^^^^^^^^^^^\n    |         ||\n    |         |data moved here\n-   |         |move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n+   |         |move occurs because `_x` has type `String`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `_x`\n \n error: aborting due to 3 previous errors"}, {"sha": "44f423c2bd9360a34c008b6dae688f4d5564b57c", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `t`\n   --> $DIR/borrowck-move-moved-value-into-closure.rs:11:12\n    |\n LL |     let t: Box<_> = box 3;\n-   |         - move occurs because `t` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |         - move occurs because `t` has type `Box<isize>`, which does not implement the `Copy` trait\n LL | \n LL |     call_f(move|| { *t + 1 });\n    |            ------    - variable moved due to use in closure"}, {"sha": "3249aae8f44a3cfd4937025a51c98f459b8d10cb", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL |         [_, _, _x] => {}\n LL |         [.., _y] => {}\n    |              ^^ value used here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-match.rs:23:14\n@@ -18,7 +18,7 @@ LL |         [_, _, (_x, _)] => {}\n LL |         [.., _y] => {}\n    |              ^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:33:15\n@@ -29,7 +29,7 @@ LL |         [_, _, (_x, _)] => {}\n LL |         [.., (_y, _)] => {}\n    |               ^^ value used here after move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:44:11\n@@ -40,7 +40,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:55:11\n@@ -51,7 +51,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:66:11\n@@ -62,7 +62,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:77:11\n@@ -73,7 +73,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:89:11\n@@ -84,7 +84,7 @@ LL |         [_y @ .., _, _] => {}\n LL |         [(_x, _), _, _] => {}\n    |           ^^ value used here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:99:15\n@@ -95,7 +95,7 @@ LL |         [_, _, _y @ ..] => {}\n LL |         [.., (_x, _)] => {}\n    |               ^^ value used here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:110:11\n@@ -106,7 +106,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error: aborting due to 10 previous errors\n "}, {"sha": "c198002265b730cac8e90df51049210dfa01abde", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:28:11\n@@ -18,7 +18,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:41:11\n@@ -29,7 +29,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:52:11\n@@ -40,7 +40,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:63:11\n@@ -51,7 +51,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:74:11\n@@ -62,7 +62,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:85:11\n@@ -73,7 +73,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:96:11\n@@ -84,7 +84,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:109:11\n@@ -95,7 +95,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error: aborting due to 9 previous errors\n "}, {"sha": "8f2da9d203b0d064ea29bd039c0877a49e34402b", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-match.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL |         [_, _, _x] => {}\n LL |         [.., ref _y] => {}\n    |              ^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:23:14\n@@ -18,7 +18,7 @@ LL |         [_, _, (_x, _)] => {}\n LL |         [.., ref _y] => {}\n    |              ^^^^^^ value borrowed here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:33:15\n@@ -29,7 +29,7 @@ LL |         [_, _, (_x, _)] => {}\n LL |         [.., (ref _y, _)] => {}\n    |               ^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:44:11\n@@ -40,7 +40,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:55:11\n@@ -51,7 +51,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:66:11\n@@ -62,7 +62,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:77:11\n@@ -73,7 +73,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:89:11\n@@ -84,7 +84,7 @@ LL |         [_y @ .., _, _] => {}\n LL |         [(ref _x, _), _, _] => {}\n    |           ^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:99:15\n@@ -95,7 +95,7 @@ LL |         [_, _, _y @ ..] => {}\n LL |         [.., (ref _x, _)] => {}\n    |               ^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:110:11\n@@ -106,7 +106,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:123:5\n@@ -117,7 +117,7 @@ LL |     }\n LL |     a[2] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:131:5\n@@ -128,7 +128,7 @@ LL |     }\n LL |     a[2].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:139:5\n@@ -139,7 +139,7 @@ LL |     }\n LL |     a[0] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:147:5\n@@ -150,7 +150,7 @@ LL |     }\n LL |     a[0].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error: aborting due to 14 previous errors\n "}, {"sha": "4b27f03dc45899631ce865d3c8e41801c6263c94", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:28:11\n@@ -18,7 +18,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:41:11\n@@ -29,7 +29,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:52:11\n@@ -40,7 +40,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:63:11\n@@ -51,7 +51,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:74:11\n@@ -62,7 +62,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:85:11\n@@ -73,7 +73,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:96:11\n@@ -84,7 +84,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:109:11\n@@ -95,7 +95,7 @@ LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error: aborting due to 9 previous errors\n "}, {"sha": "b0bad6e997887007f2bd277a1f7537737f58af44", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -6,7 +6,7 @@ LL |     let [_, _, _x] = a;\n LL |     let [.., ref _y] = a;\n    |              ^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:16:14\n@@ -16,7 +16,7 @@ LL |     let [_, _, (_x, _)] = a;\n LL |     let [.., ref _y] = a;\n    |              ^^^^^^ value borrowed here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-use.rs:22:15\n@@ -26,7 +26,7 @@ LL |     let [_, _, (_x, _)] = a;\n LL |     let [.., (ref _y, _)] = a;\n    |               ^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:30:10\n@@ -36,7 +36,7 @@ LL |     let [_x, _, _] = a;\n LL |     let [ref _y @ .., _, _] = a;\n    |          ^^^^^^^^^^^ value borrowed here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:36:16\n@@ -46,7 +46,7 @@ LL |     let [.., _x] = a;\n LL |     let [_, _, ref _y @ ..] = a;\n    |                ^^^^^^^^^^^ value borrowed here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:42:10\n@@ -56,7 +56,7 @@ LL |     let [(_x, _), _, _] = a;\n LL |     let [ref _y @ .., _, _] = a;\n    |          ^^^^^^^^^^^ value borrowed here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:48:16\n@@ -66,7 +66,7 @@ LL |     let [.., (_x, _)] = a;\n LL |     let [_, _, ref _y @ ..] = a;\n    |                ^^^^^^^^^^^ value borrowed here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:54:11\n@@ -76,7 +76,7 @@ LL |     let [_y @ .., _, _] = a;\n LL |     let [(ref _x, _), _, _] = a;\n    |           ^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:60:15\n@@ -86,7 +86,7 @@ LL |     let [_, _, _y @ ..] = a;\n LL |     let [.., (ref _x, _)] = a;\n    |               ^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:68:13\n@@ -96,7 +96,7 @@ LL |     let [x @ .., _] = a;\n LL |     let [_, ref _y @ ..] = a;\n    |             ^^^^^^^^^^^ value borrowed here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:76:5\n@@ -106,7 +106,7 @@ LL |     let [_, _, _x] = a;\n LL |     a[2] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:82:5\n@@ -116,7 +116,7 @@ LL |     let [_, _, (_x, _)] = a;\n LL |     a[2].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:88:5\n@@ -126,7 +126,7 @@ LL |     let [_, _, _x @ ..] = a;\n LL |     a[0] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:94:5\n@@ -136,7 +136,7 @@ LL |     let [_, _, _x @ ..] = a;\n LL |     a[0].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error: aborting due to 14 previous errors\n "}, {"sha": "1fc2b292b84c7023bb58cbabf42cc8360a823753", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -6,7 +6,7 @@ LL |     let [_, _, _x] = a;\n LL |     let [.., _y] = a;\n    |              ^^ value used here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array.rs:16:14\n@@ -16,7 +16,7 @@ LL |     let [_, _, (_x, _)] = a;\n LL |     let [.., _y] = a;\n    |              ^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:22:15\n@@ -26,7 +26,7 @@ LL |     let [_, _, (_x, _)] = a;\n LL |     let [.., (_y, _)] = a;\n    |               ^^ value used here after move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:30:10\n@@ -36,7 +36,7 @@ LL |     let [_x, _, _] = a;\n LL |     let [_y @ .., _, _] = a;\n    |          ^^^^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:36:16\n@@ -46,7 +46,7 @@ LL |     let [.., _x] = a;\n LL |     let [_, _, _y @ ..] = a;\n    |                ^^^^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:42:10\n@@ -56,7 +56,7 @@ LL |     let [(_x, _), _, _] = a;\n LL |     let [_y @ .., _, _] = a;\n    |          ^^^^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:48:16\n@@ -66,7 +66,7 @@ LL |     let [.., (_x, _)] = a;\n LL |     let [_, _, _y @ ..] = a;\n    |                ^^^^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:54:11\n@@ -76,7 +76,7 @@ LL |     let [_y @ .., _, _] = a;\n LL |     let [(_x, _), _, _] = a;\n    |           ^^ value used here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:60:15\n@@ -86,7 +86,7 @@ LL |     let [_, _, _y @ ..] = a;\n LL |     let [.., (_x, _)] = a;\n    |               ^^ value used here after move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:68:13\n@@ -96,7 +96,7 @@ LL |     let [x @ .., _] = a;\n LL |     let [_, _y @ ..] = a;\n    |             ^^^^^^^ value used here after partial move\n    |\n-   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n error: aborting due to 10 previous errors\n "}, {"sha": "0a29d2bb1d54ec462a5ff0b3f103f72f48fac000", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0507]: cannot move out of an `Rc`\n   --> $DIR/borrowck-move-out-of-overloaded-auto-deref.rs:4:14\n    |\n LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n-   |              ^^^^^^^^^^^^^^^^^^^ move occurs because value has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n+   |              ^^^^^^^^^^^^^^^^^^^ move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "68994c2071bef2abcea6de94504e2b25e64e6933", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of an `Rc`\n LL |     let _x = *Rc::new(\"hi\".to_string());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n-   |              move occurs because value has type `std::string::String`, which does not implement the `Copy` trait\n+   |              move occurs because value has type `String`, which does not implement the `Copy` trait\n    |              help: consider borrowing here: `&*Rc::new(\"hi\".to_string())`\n \n error: aborting due to previous error"}, {"sha": "7b00ac9f1c3a6c5fa7cd9f2f375a1e5c03f26ec3", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -8,7 +8,7 @@ LL |         S {f:_s} => {}\n    |              --\n    |              |\n    |              data moved here\n-   |              move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+   |              move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:14:20\n@@ -17,7 +17,7 @@ LL |     let S {f:_s} = S {f:\"foo\".to_string()};\n    |              --    ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n    |              |\n    |              data moved here\n-   |              move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+   |              move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:18:19\n@@ -26,7 +26,7 @@ LL | fn move_in_fn_arg(S {f:_s}: S) {\n    |                   ^^^^^--^\n    |                   |    |\n    |                   |    data moved here\n-   |                   |    move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+   |                   |    move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n    |                   cannot move out of here\n \n error: aborting due to 3 previous errors"}, {"sha": "f00181b74689bb027c114c66ef02690e5f6b5c45", "filename": "src/test/ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -8,7 +8,7 @@ LL |         S(_s) => {}\n    |           --\n    |           |\n    |           data moved here\n-   |           move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+   |           move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:14:17\n@@ -17,7 +17,7 @@ LL |     let S(_s) = S(\"foo\".to_string());\n    |           --    ^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n    |           |\n    |           data moved here\n-   |           move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+   |           move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:18:19\n@@ -26,7 +26,7 @@ LL | fn move_in_fn_arg(S(_s): S) {\n    |                   ^^--^\n    |                   | |\n    |                   | data moved here\n-   |                   | move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+   |                   | move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n    |                   cannot move out of here\n \n error: aborting due to 3 previous errors"}, {"sha": "e159878619a0bd35b4a9cf4a22226611bc7dbe7e", "filename": "src/test/ui/borrowck/borrowck-multiple-captures.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -31,7 +31,7 @@ error[E0382]: use of moved value: `x1`\n   --> $DIR/borrowck-multiple-captures.rs:27:19\n    |\n LL |     let x1: Box<_> = box 1;\n-   |         -- move occurs because `x1` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   |         -- move occurs because `x1` has type `Box<i32>`, which does not implement the `Copy` trait\n LL |     drop(x1);\n    |          -- value moved here\n ...\n@@ -45,7 +45,7 @@ error[E0382]: use of moved value: `x2`\n   --> $DIR/borrowck-multiple-captures.rs:27:19\n    |\n LL |     let x2: Box<_> = box 2;\n-   |         -- move occurs because `x2` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   |         -- move occurs because `x2` has type `Box<i32>`, which does not implement the `Copy` trait\n LL |     drop(x2);\n    |          -- value moved here\n LL |     thread::spawn(move|| {\n@@ -62,7 +62,7 @@ LL |         drop(x);\n LL |         drop(x);\n    |              ^ value used here after move\n    |\n-   = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/borrowck-multiple-captures.rs:38:19\n@@ -86,13 +86,13 @@ LL |         drop(x);\n LL |         drop(x);\n    |              ^ value used here after move\n    |\n-   = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:49:19\n    |\n LL |     let x: Box<_> = box 1;\n-   |         - move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n LL |     drop(x);\n    |          - value moved here\n LL |     thread::spawn(move|| {"}, {"sha": "ddf6354c97341550025050317f3855ac04804de6", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-from-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let v = MyVec::<Box<_>> { data: vec![box 1, box 2, box 3] };\n     let good = &v[0]; // Shouldn't fail here\n     let bad = v[0];\n-    //~^ ERROR cannot move out of index of `MyVec<std::boxed::Box<i32>>`\n+    //~^ ERROR cannot move out of index of `MyVec<Box<i32>>`\n }"}, {"sha": "2b4293b433e0190c8997f8179af9c1bbe67e5ba0", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-from-vec.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of index of `MyVec<std::boxed::Box<i32>>`\n+error[E0507]: cannot move out of index of `MyVec<Box<i32>>`\n   --> $DIR/borrowck-overloaded-index-move-from-vec.rs:20:15\n    |\n LL |     let bad = v[0];\n    |               ^^^^\n    |               |\n-   |               move occurs because value has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   |               move occurs because value has type `Box<i32>`, which does not implement the `Copy` trait\n    |               help: consider borrowing here: `&v[0]`\n \n error: aborting due to previous error"}, {"sha": "bacad399ebeb5ab98740d24979da6bc6a1e32d85", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -26,7 +26,7 @@ error[E0382]: use of moved value: `s`\n   --> $DIR/borrowck-overloaded-index-move-index.rs:53:7\n    |\n LL |     let mut s = \"hello\".to_string();\n-   |         ----- move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+   |         ----- move occurs because `s` has type `String`, which does not implement the `Copy` trait\n ...\n LL |     println!(\"{}\", f[s]);\n    |                      - value moved here"}, {"sha": "22253cd96f1a6a764190ea60cfa755368a272d97", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-reinit.rs:6:16\n    |\n LL |     let mut x = Box::new(0);\n-   |         ----- move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   |         ----- move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n ...\n LL |     drop(x);\n    |          - value moved here"}, {"sha": "af32f279100767897c526d6aca3a7560e61ab682", "filename": "src/test/ui/borrowck/borrowck-struct-update-with-dtor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-struct-update-with-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-struct-update-with-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-struct-update-with-dtor.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -14,7 +14,7 @@ LL |     let _s2 = T{a: 2, ..s0};\n    |               ^^^^^^^^^^^^^\n    |               |\n    |               cannot move out of here\n-   |               move occurs because `s0.mv` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |               move occurs because `s0.mv` has type `Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b4b3bc1ba2b75720eae89dd4e7fd30f2ae0ddd73", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -22,7 +22,7 @@ LL |\n LL |             _b.use_ref();\n    |             -- borrow later used here\n \n-error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:34:11\n    |\n LL |     match vec {\n@@ -32,7 +32,7 @@ LL |         &mut [_a,\n    |               --\n    |               |\n    |               data moved here\n-   |               move occurs because `_a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |               move occurs because `_a` has type `Box<isize>`, which does not implement the `Copy` trait\n    |\n help: consider removing the `&mut`\n    |\n@@ -44,17 +44,17 @@ LL |             ..\n LL |         ] => {\n    |\n \n-error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:46:13\n    |\n LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n-   |             move occurs because `vec[_]` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |             move occurs because `vec[_]` has type `Box<isize>`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&vec[0]`\n \n-error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:55:11\n    |\n LL |     match vec {\n@@ -64,7 +64,7 @@ LL |          _b] => {}\n    |          --\n    |          |\n    |          data moved here\n-   |          move occurs because `_b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |          move occurs because `_b` has type `Box<isize>`, which does not implement the `Copy` trait\n    |\n help: consider removing the `&mut`\n    |\n@@ -73,17 +73,17 @@ LL |\n LL |          _b] => {}\n    |\n \n-error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:65:13\n    |\n LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n-   |             move occurs because `vec[_]` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |             move occurs because `vec[_]` has type `Box<isize>`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&vec[0]`\n \n-error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:74:11\n    |\n LL |     match vec {\n@@ -99,14 +99,14 @@ LL |         &mut [_a, _b, _c] => {}\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n-error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:85:13\n    |\n LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n-   |             move occurs because `vec[_]` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |             move occurs because `vec[_]` has type `Box<isize>`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&vec[0]`\n \n error: aborting due to 8 previous errors"}, {"sha": "52b9ad496e5f851084f9085ae030c9364e9d7edc", "filename": "src/test/ui/borrowck/index-mut-help.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,26 +1,26 @@\n-error[E0596]: cannot borrow data in an index of `std::collections::HashMap<&str, std::string::String>` as mutable\n+error[E0596]: cannot borrow data in an index of `HashMap<&str, String>` as mutable\n   --> $DIR/index-mut-help.rs:11:5\n    |\n LL |     map[\"peter\"].clear();\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<&str, String>`\n \n-error[E0594]: cannot assign to data in an index of `std::collections::HashMap<&str, std::string::String>`\n+error[E0594]: cannot assign to data in an index of `HashMap<&str, String>`\n   --> $DIR/index-mut-help.rs:12:5\n    |\n LL |     map[\"peter\"] = \"0\".to_string();\n    |     ^^^^^^^^^^^^ cannot assign\n    |\n-   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<&str, String>`\n \n-error[E0596]: cannot borrow data in an index of `std::collections::HashMap<&str, std::string::String>` as mutable\n+error[E0596]: cannot borrow data in an index of `HashMap<&str, String>` as mutable\n   --> $DIR/index-mut-help.rs:13:13\n    |\n LL |     let _ = &mut map[\"peter\"];\n    |             ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<&str, String>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "540f7f8a484776d3b36fcb795999f10f3dd074b4", "filename": "src/test/ui/borrowck/issue-27282-mutation-in-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutation-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutation-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutation-in-guard.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of `foo` in pattern guard\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                  ^^             ---\n    |                  |              |\n-   |                  |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n+   |                  |              move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n    |                  |              move occurs due to use in closure\n    |                  move out of `foo` occurs here\n    |"}, {"sha": "d33115988a9a812ecf931089d9b13546363233ca", "filename": "src/test/ui/borrowck/issue-31287-drop-in-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `a`\n   --> $DIR/issue-31287-drop-in-guard.rs:5:9\n    |\n LL |     let a = Some(\"...\".to_owned());\n-   |         - move occurs because `a` has type `std::option::Option<std::string::String>`, which does not implement the `Copy` trait\n+   |         - move occurs because `a` has type `Option<String>`, which does not implement the `Copy` trait\n LL |     let b = match a {\n LL |         Some(_) if { drop(a); false } => None,\n    |                           - value moved here"}, {"sha": "dd3090b30f01207bfa07c081e5b0a7bc95a23fac", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0382]: use of moved value\n LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here, in previous iteration of loop\n    |\n-   = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+   = note: move occurs because value has type `Vec<bool>`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving `maybe.0`\n    |\n LL |         if let Some(ref thing) = maybe {"}, {"sha": "eb41af1cea80d6b47aed6ff53d6141cde4f92899", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of static item `X`\n LL |         let mut x = X;\n    |                     ^\n    |                     |\n-   |                     move occurs because `X` has type `std::sync::atomic::AtomicUsize`, which does not implement the `Copy` trait\n+   |                     move occurs because `X` has type `AtomicUsize`, which does not implement the `Copy` trait\n    |                     help: consider borrowing here: `&X`\n \n error: aborting due to previous error"}, {"sha": "a88819efcf7989f0fac0ff0c08358e223270ca71", "filename": "src/test/ui/borrowck/issue-51415.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n    |                                          ^^^^^-^\n    |                                               |\n    |                                               data moved here\n-   |                                               move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+   |                                               move occurs because `s` has type `String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "1f9cbdb73425d3455acac1c24aa8dc57f59f94a2", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of `*array` which is behind a shared reference\n LL |             *array\n    |             ^^^^^^\n    |             |\n-   |             move occurs because `*array` has type `std::vec::Vec<Value>`, which does not implement the `Copy` trait\n+   |             move occurs because `*array` has type `Vec<Value>`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&*array`\n \n error: aborting due to previous error"}, {"sha": "fba801983cf4e21296c8fa6a00f29eeca2e6e13d", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0507]: cannot move out of static item `settings_dir`\n   --> $DIR/issue-64453.rs:14:37\n    |\n LL |     let settings_data = from_string(settings_dir);\n-   |                                     ^^^^^^^^^^^^ move occurs because `settings_dir` has type `std::string::String`, which does not implement the `Copy` trait\n+   |                                     ^^^^^^^^^^^^ move occurs because `settings_dir` has type `String`, which does not implement the `Copy` trait\n \n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/issue-64453.rs:4:31"}, {"sha": "82c3fe3b12d1c3dd41e9ebdc5cbd58bb91aca5fb", "filename": "src/test/ui/borrowck/move-from-union-field-issue-66500.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,25 +2,25 @@ error[E0507]: cannot move out of `*u.a` which is behind a shared reference\n   --> $DIR/move-from-union-field-issue-66500.rs:14:5\n    |\n LL |     *u.a\n-   |     ^^^^ move occurs because `*u.a` has type `std::string::String`, which does not implement the `Copy` trait\n+   |     ^^^^ move occurs because `*u.a` has type `String`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `*u.b` which is behind a mutable reference\n   --> $DIR/move-from-union-field-issue-66500.rs:18:5\n    |\n LL |     *u.b\n-   |     ^^^^ move occurs because `*u.b` has type `std::string::String`, which does not implement the `Copy` trait\n+   |     ^^^^ move occurs because `*u.b` has type `String`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `*u.c` which is behind a raw pointer\n   --> $DIR/move-from-union-field-issue-66500.rs:22:5\n    |\n LL |     *u.c\n-   |     ^^^^ move occurs because `*u.c` has type `std::string::String`, which does not implement the `Copy` trait\n+   |     ^^^^ move occurs because `*u.c` has type `String`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `*u.d` which is behind a raw pointer\n   --> $DIR/move-from-union-field-issue-66500.rs:26:5\n    |\n LL |     *u.d\n-   |     ^^^^ move occurs because `*u.d` has type `std::string::String`, which does not implement the `Copy` trait\n+   |     ^^^^ move occurs because `*u.d` has type `String`, which does not implement the `Copy` trait\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9593b94537aea0d99f2f3a854d7a9f12de377faf", "filename": "src/test/ui/borrowck/or-patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL |     }\n LL |     &x.0 .0;\n    |     ^^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `x.0.0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.0.0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x.0.1`\n   --> $DIR/or-patterns.rs:12:5\n@@ -18,7 +18,7 @@ LL |         ((y, _) | (_, y),) => (),\n LL |     &x.0 .1;\n    |     ^^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `x.0.1` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.0.1` has type `String`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `x.0.0` as mutable because it is also borrowed as immutable\n   --> $DIR/or-patterns.rs:20:5\n@@ -76,7 +76,7 @@ LL |     let ((y, _) | (_, y),) = x;\n LL |     &x.0 .0;\n    |     ^^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `x.0.0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.0.0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x.0.1`\n   --> $DIR/or-patterns.rs:42:5\n@@ -87,7 +87,7 @@ LL |     let ((y, _) | (_, y),) = x;\n LL |     &x.0 .1;\n    |     ^^^^^^^ value borrowed here after move\n    |\n-   = note: move occurs because `x.0.1` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.0.1` has type `String`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `x.0.0` as mutable because it is also borrowed as immutable\n   --> $DIR/or-patterns.rs:48:5"}, {"sha": "50d277a12f74fc5b07f66b7fc116a75580eb0c01", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -11,7 +11,7 @@ error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:59:11\n    |\n LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n-   |                                            - move occurs because `f` has type `std::boxed::Box<F>`, which does not implement the `Copy` trait\n+   |                                            - move occurs because `f` has type `Box<F>`, which does not implement the `Copy` trait\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n@@ -30,7 +30,7 @@ error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:73:11\n    |\n LL |     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n-   |                     - move occurs because `f` has type `std::boxed::Box<dyn std::ops::FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n+   |                     - move occurs because `f` has type `Box<dyn FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |"}, {"sha": "dbba33f018397738934faaccf342827c060fc37f", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL |     let y = vec![format!(\"World\")];\n    |         - captured outer variable\n LL |     call(|| {\n LL |         y.into_iter();\n-   |         ^ move occurs because `y` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n+   |         ^ move occurs because `y` has type `Vec<String>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "a3fe67a95954f7c3c7cb51609c5570542fbeaae1", "filename": "src/test/ui/bound-suggestions.fixed", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.fixed?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,37 +1,41 @@\n // run-rustfix\n \n+#[allow(unused)]\n+use std::fmt::Debug;\n+// Rustfix should add this, or use `std::fmt::Debug` instead.\n+\n #[allow(dead_code)]\n-fn test_impl(t: impl Sized + std::fmt::Debug) {\n+fn test_impl(t: impl Sized + Debug) {\n     println!(\"{:?}\", t);\n     //~^ ERROR doesn't implement\n }\n \n #[allow(dead_code)]\n-fn test_no_bounds<T: std::fmt::Debug>(t: T) {\n+fn test_no_bounds<T: Debug>(t: T) {\n     println!(\"{:?}\", t);\n     //~^ ERROR doesn't implement\n }\n \n #[allow(dead_code)]\n-fn test_one_bound<T: Sized + std::fmt::Debug>(t: T) {\n+fn test_one_bound<T: Sized + Debug>(t: T) {\n     println!(\"{:?}\", t);\n     //~^ ERROR doesn't implement\n }\n \n #[allow(dead_code)]\n-fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt::Debug {\n+fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: Debug {\n     println!(\"{:?} {:?}\", x, y);\n     //~^ ERROR doesn't implement\n }\n \n #[allow(dead_code)]\n-fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {\n+fn test_one_bound_where<X>(x: X) where X: Sized + Debug {\n     println!(\"{:?}\", x);\n     //~^ ERROR doesn't implement\n }\n \n #[allow(dead_code)]\n-fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: std::fmt::Debug {\n+fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: Debug {\n     println!(\"{:?}\", x);\n     //~^ ERROR doesn't implement\n }"}, {"sha": "de6133d7f59accd177ea8da6b3d4b7a9c0fb1fce", "filename": "src/test/ui/bound-suggestions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbound-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbound-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,5 +1,9 @@\n // run-rustfix\n \n+#[allow(unused)]\n+use std::fmt::Debug;\n+// Rustfix should add this, or use `std::fmt::Debug` instead.\n+\n #[allow(dead_code)]\n fn test_impl(t: impl Sized) {\n     println!(\"{:?}\", t);"}, {"sha": "010f95d8ad6f00153da147a3c1a43ebe7942c59a", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,80 +1,80 @@\n-error[E0277]: `impl Sized` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:5:22\n+error[E0277]: `impl Sized` doesn't implement `Debug`\n+  --> $DIR/bound-suggestions.rs:9:22\n    |\n LL |     println!(\"{:?}\", t);\n-   |                      ^ `impl Sized` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |                      ^ `impl Sized` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n-LL | fn test_impl(t: impl Sized + std::fmt::Debug) {\n-   |                            ^^^^^^^^^^^^^^^^^\n+LL | fn test_impl(t: impl Sized + Debug) {\n+   |                            ^^^^^^^\n \n-error[E0277]: `T` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:11:22\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/bound-suggestions.rs:15:22\n    |\n LL |     println!(\"{:?}\", t);\n-   |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n-LL | fn test_no_bounds<T: std::fmt::Debug>(t: T) {\n-   |                    ^^^^^^^^^^^^^^^^^\n+LL | fn test_no_bounds<T: Debug>(t: T) {\n+   |                    ^^^^^^^\n \n-error[E0277]: `T` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:17:22\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/bound-suggestions.rs:21:22\n    |\n LL |     println!(\"{:?}\", t);\n-   |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n-LL | fn test_one_bound<T: Sized + std::fmt::Debug>(t: T) {\n-   |                            ^^^^^^^^^^^^^^^^^\n+LL | fn test_one_bound<T: Sized + Debug>(t: T) {\n+   |                            ^^^^^^^\n \n-error[E0277]: `Y` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:23:30\n+error[E0277]: `Y` doesn't implement `Debug`\n+  --> $DIR/bound-suggestions.rs:27:30\n    |\n LL |     println!(\"{:?} {:?}\", x, y);\n-   |                              ^ `Y` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |                              ^ `Y` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `Y`\n    |\n-LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt::Debug {\n-   |                                                                   ^^^^^^^^^^^^^^^^^^^^\n+LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: Debug {\n+   |                                                                   ^^^^^^^^^^\n \n-error[E0277]: `X` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:29:22\n+error[E0277]: `X` doesn't implement `Debug`\n+  --> $DIR/bound-suggestions.rs:33:22\n    |\n LL |     println!(\"{:?}\", x);\n-   |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n-LL | fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {\n-   |                                                 ^^^^^^^^^^^^^^^^^\n+LL | fn test_one_bound_where<X>(x: X) where X: Sized + Debug {\n+   |                                                 ^^^^^^^\n \n-error[E0277]: `X` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:35:22\n+error[E0277]: `X` doesn't implement `Debug`\n+  --> $DIR/bound-suggestions.rs:39:22\n    |\n LL |     println!(\"{:?}\", x);\n-   |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `X`\n    |\n-LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: std::fmt::Debug {\n-   |                                                            ^^^^^^^^^^^^^^^^^^^^\n+LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: Debug {\n+   |                                                            ^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "49dbb170f8e7891a50d12891e33a87f2417e579c", "filename": "src/test/ui/box-into-boxed-slice-fail.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![feature(box_into_boxed_slice)]\n \n use std::boxed::Box;\n@@ -10,6 +9,6 @@ fn main() {\n     //~^^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n     let boxed_trait: Box<dyn Debug> = Box::new(5u8);\n     let _ = Box::into_boxed_slice(boxed_trait);\n-    //~^ ERROR the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n-    //~^^ ERROR the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n+    //~^ ERROR the size for values of type `dyn Debug` cannot be known at compilation time\n+    //~^^ ERROR the size for values of type `dyn Debug` cannot be known at compilation time\n }"}, {"sha": "8cfa3668d92a0eb6bb7edf8009bcacd120341615", "filename": "src/test/ui/box-into-boxed-slice-fail.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,37 +1,37 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/box-into-boxed-slice-fail.rs:8:35\n+  --> $DIR/box-into-boxed-slice-fail.rs:7:35\n    |\n LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: required by `std::boxed::Box::<T>::into_boxed_slice`\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: required by `Box::<T>::into_boxed_slice`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/box-into-boxed-slice-fail.rs:8:13\n+  --> $DIR/box-into-boxed-slice-fail.rs:7:13\n    |\n LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = help: the trait `Sized` is not implemented for `[u8]`\n    = note: slice and array elements must have `Sized` type\n \n-error[E0277]: the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n-  --> $DIR/box-into-boxed-slice-fail.rs:12:35\n+error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n+  --> $DIR/box-into-boxed-slice-fail.rs:11:35\n    |\n LL |     let _ = Box::into_boxed_slice(boxed_trait);\n    |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `dyn std::fmt::Debug`\n-   = note: required by `std::boxed::Box::<T>::into_boxed_slice`\n+   = help: the trait `Sized` is not implemented for `dyn Debug`\n+   = note: required by `Box::<T>::into_boxed_slice`\n \n-error[E0277]: the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n-  --> $DIR/box-into-boxed-slice-fail.rs:12:13\n+error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n+  --> $DIR/box-into-boxed-slice-fail.rs:11:13\n    |\n LL |     let _ = Box::into_boxed_slice(boxed_trait);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `dyn std::fmt::Debug`\n+   = help: the trait `Sized` is not implemented for `dyn Debug`\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to 4 previous errors"}, {"sha": "7e8ac113b4871b74da2743b73db535017477ca8a", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -10,8 +10,8 @@ LL | impl <T: Sync+'static> Foo for (T,) { }\n    = note: required because it appears within the type `(T,)`\n help: consider further restricting this bound\n    |\n-LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+LL | impl <T: Sync+'static + Send> Foo for (T,) { }\n+   |                       ^^^^^^\n \n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n@@ -25,8 +25,8 @@ LL | impl <T: Send> Foo for (T,T) { }\n    = note: required because it appears within the type `(T, T)`\n help: consider further restricting this bound\n    |\n-LL | impl <T: Send + std::marker::Sync> Foo for (T,T) { }\n-   |               ^^^^^^^^^^^^^^^^^^^\n+LL | impl <T: Send + Sync> Foo for (T,T) { }\n+   |               ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2b4b6e548b881721b387a73893533c7917e431e7", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,13 +7,13 @@ LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n   ::: $DIR/auxiliary/trait_superkinds_in_metadata.rs:7:58\n    |\n LL | pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n-   |                                                          ---- required by this bound in `trait_superkinds_in_metadata::RequiresRequiresShareAndSend`\n+   |                                                          ---- required by this bound in `RequiresRequiresShareAndSend`\n    |\n    = note: required because it appears within the type `X<T>`\n help: consider further restricting this bound\n    |\n-LL | impl <T:Sync+'static + std::marker::Send> RequiresRequiresShareAndSend for X<T> { }\n-   |                      ^^^^^^^^^^^^^^^^^^^\n+LL | impl <T:Sync+'static + Send> RequiresRequiresShareAndSend for X<T> { }\n+   |                      ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1620f8d5cf10e48f2db48b932eee11cdf5997081", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,6 +4,6 @@\n trait Foo : Send { }\n \n impl Foo for std::rc::Rc<i8> { }\n-//~^ ERROR `std::rc::Rc<i8>` cannot be sent between threads safely\n+//~^ ERROR `Rc<i8>` cannot be sent between threads safely\n \n fn main() { }"}, {"sha": "0abe2052b215e158a177d70e0806495f1b997eff", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-simple.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,13 +1,13 @@\n-error[E0277]: `std::rc::Rc<i8>` cannot be sent between threads safely\n+error[E0277]: `Rc<i8>` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-simple.rs:6:6\n    |\n LL | trait Foo : Send { }\n    |             ---- required by this bound in `Foo`\n LL | \n LL | impl Foo for std::rc::Rc<i8> { }\n-   |      ^^^ `std::rc::Rc<i8>` cannot be sent between threads safely\n+   |      ^^^ `Rc<i8>` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `std::rc::Rc<i8>`\n+   = help: the trait `Send` is not implemented for `Rc<i8>`\n \n error: aborting due to previous error\n "}, {"sha": "ff2cd1c4c8c7543055beee0e5244cd14c67f3d1b", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -9,8 +9,8 @@ LL | impl <T: Sync+'static> Foo for T { }\n    |\n help: consider further restricting this bound\n    |\n-LL | impl <T: Sync+'static + std::marker::Send> Foo for T { }\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+LL | impl <T: Sync+'static + Send> Foo for T { }\n+   |                       ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0012f67cfa1cd02af3e7c1c8b9e802a0befd5cbc", "filename": "src/test/ui/by-move-pattern-binding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -8,7 +8,7 @@ LL |         &E::Bar(identifier) => f(identifier.clone())\n    |         -------------------\n    |         |       |\n    |         |       data moved here\n-   |         |       move occurs because `identifier` has type `std::string::String`, which does not implement the `Copy` trait\n+   |         |       move occurs because `identifier` has type `String`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `E::Bar(identifier)`\n \n error: aborting due to previous error"}, {"sha": "dd67514d02aa43f617248d24f69717524cc6ba7b", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:8:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n-   |                                     --            -- has type `core::ffi::VaListImpl<'1>`\n+   |                                     --            -- has type `VaListImpl<'1>`\n    |                                     |\n    |                                     lifetime `'f` defined here\n LL |     ap\n@@ -12,7 +12,7 @@ error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:8:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n-   |                                     --            -- has type `core::ffi::VaListImpl<'1>`\n+   |                                     --            -- has type `VaListImpl<'1>`\n    |                                     |\n    |                                     lifetime `'f` defined here\n LL |     ap\n@@ -22,7 +22,7 @@ error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:14:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n-   |                                               -- has type `core::ffi::VaListImpl<'1>`\n+   |                                               -- has type `VaListImpl<'1>`\n LL |     ap\n    |     ^^ returning this value requires that `'1` must outlive `'static`\n \n@@ -32,46 +32,46 @@ error: lifetime may not live long enough\n LL |     let _ = ap.with_copy(|ap| ap);\n    |                           --- ^^ returning this value requires that `'1` must outlive `'2`\n    |                           | |\n-   |                           | return type of closure is core::ffi::VaList<'2, '_>\n-   |                           has type `core::ffi::VaList<'1, '_>`\n+   |                           | return type of closure is VaList<'2, '_>\n+   |                           has type `VaList<'1, '_>`\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:22:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               -------                   ------- has type `VaListImpl<'2>`\n    |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+   |                                               has type `&mut VaListImpl<'1>`\n LL |     *ap0 = ap1;\n    |     ^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:22:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               -------                   ------- has type `VaListImpl<'2>`\n    |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+   |                                               has type `&mut VaListImpl<'1>`\n LL |     *ap0 = ap1;\n    |     ^^^^ assignment requires that `'2` must outlive `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:28:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               -------                   ------- has type `VaListImpl<'2>`\n    |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+   |                                               has type `&mut VaListImpl<'1>`\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:28:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               -------                   ------- has type `VaListImpl<'2>`\n    |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+   |                                               has type `&mut VaListImpl<'1>`\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'2` must outlive `'1`\n \n@@ -93,19 +93,19 @@ error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:35:12\n    |\n LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               -------                   ------- has type `VaListImpl<'2>`\n    |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+   |                                               has type `&mut VaListImpl<'1>`\n LL |     *ap0 = ap1.clone();\n    |            ^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:35:12\n    |\n LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               -------                   ------- has type `VaListImpl<'2>`\n    |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+   |                                               has type `&mut VaListImpl<'1>`\n LL |     *ap0 = ap1.clone();\n    |            ^^^^^^^^^^^ argument requires that `'2` must outlive `'1`\n "}, {"sha": "3b5b8ea69c195e4430b4b65a7131b03355a0ee53", "filename": "src/test/ui/cast/cast-to-unsized-trait-object-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,12 +1,12 @@\n-error[E0620]: cast to unsized type: `&{integer}` as `dyn std::marker::Send`\n+error[E0620]: cast to unsized type: `&{integer}` as `dyn Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:2:5\n    |\n LL |     &1 as dyn Send;\n    |     ^^^^^^--------\n    |           |\n    |           help: try casting to a reference instead: `&dyn Send`\n \n-error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `dyn std::marker::Send`\n+error[E0620]: cast to unsized type: `Box<{integer}>` as `dyn Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:3:5\n    |\n LL |     Box::new(1) as dyn Send;"}, {"sha": "a30e9b35f5cf68ac9a6fe07b2719e130e9fd1b9f", "filename": "src/test/ui/casts-differing-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0606]: casting `*mut impl std::fmt::Debug+?Sized` as `*mut impl std::fmt::Debug+?Sized` is invalid\n+error[E0606]: casting `*mut impl Debug+?Sized` as `*mut impl Debug+?Sized` is invalid\n   --> $DIR/casts-differing-anon.rs:21:13\n    |\n LL |     b_raw = f_raw as *mut _;"}, {"sha": "a6f5d1a6085638e8f0b7cce431ba7fc3a7b04a9b", "filename": "src/test/ui/chalkify/generic_impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,11 +1,11 @@\n-error[E0277]: the trait bound `(std::option::Option<T>, f32): Foo` is not satisfied\n+error[E0277]: the trait bound `(Option<T>, f32): Foo` is not satisfied\n   --> $DIR/generic_impls.rs:12:13\n    |\n LL | fn gimme<F: Foo>() { }\n    |             --- required by this bound in `gimme`\n ...\n LL |     gimme::<(Option<T>, f32)>();\n-   |             ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `(std::option::Option<T>, f32)`\n+   |             ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `(Option<T>, f32)`\n    |\n    = help: the following implementations were found:\n              <(T, u32) as Foo>"}, {"sha": "4ca5ae472f20701a26c9e6e057956de24f21ea2e", "filename": "src/test/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL | trait Foo: Sized { }\n LL | impl Foo for str { }\n    |      ^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = help: the trait `Sized` is not implemented for `str`\n \n error[E0277]: the trait bound `f32: Foo` is not satisfied\n   --> $DIR/impl_wf.rs:27:17"}, {"sha": "50c1b5088e7abeb4af92849b9f75e917a948a510", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -105,7 +105,7 @@ error[E0507]: cannot move out of static item `x`\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^\n    |                                             |\n-   |                                             move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |                                             move occurs because `x` has type `Box<isize>`, which does not implement the `Copy` trait\n    |                                             help: consider borrowing here: `&x`\n \n error[E0010]: allocations are not allowed in statics"}, {"sha": "56d10d88d8b25a68cb0c61d34f47c97efd8804da", "filename": "src/test/ui/class-cast-to-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: no method named `eat` found for struct `std::boxed::Box<dyn Noisy>` in the current scope\n+error[E0599]: no method named `eat` found for struct `Box<dyn Noisy>` in the current scope\n   --> $DIR/class-cast-to-trait.rs:53:8\n    |\n LL |   nyan.eat();\n-   |        ^^^ method not found in `std::boxed::Box<dyn Noisy>`\n+   |        ^^^ method not found in `Box<dyn Noisy>`\n \n error: aborting due to previous error\n "}, {"sha": "68cac3dd85edfa5cae2fd781d05cae4e7d630dbf", "filename": "src/test/ui/closure-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosure-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosure-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let x = Some(1);\n     let y = x.or_else(4);\n-    //~^ ERROR expected a `std::ops::FnOnce<()>` closure, found `{integer}`\n+    //~^ ERROR expected a `FnOnce<()>` closure, found `{integer}`\n }"}, {"sha": "6c77d0809673c4426c406dfb47e4338fdbe7c9ef", "filename": "src/test/ui/closure-expected.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosure-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosure-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: expected a `std::ops::FnOnce<()>` closure, found `{integer}`\n+error[E0277]: expected a `FnOnce<()>` closure, found `{integer}`\n   --> $DIR/closure-expected.rs:3:23\n    |\n LL |     let y = x.or_else(4);\n    |                       ^ expected an `FnOnce<()>` closure, found `{integer}`\n    |\n-   = help: the trait `std::ops::FnOnce<()>` is not implemented for `{integer}`\n+   = help: the trait `FnOnce<()>` is not implemented for `{integer}`\n    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n \n error: aborting due to previous error"}, {"sha": "48f18b1ebe957a7cba6c9b6de79cf9f85414a006", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -9,8 +9,8 @@ LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n    |\n help: consider further restricting this bound\n    |\n-LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static + std::marker::Send {\n-   |                                                       ^^^^^^^^^^^^^^^^^^^\n+LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static + Send {\n+   |                                                       ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d649eeccb8cc977ac2200c344ddc2cde7de52f82", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -9,8 +9,8 @@ LL |     take_const_owned(f);\n    |\n help: consider further restricting this bound\n    |\n-LL | fn give_owned<F>(f: F) where F: FnOnce() + Send + std::marker::Sync {\n-   |                                                 ^^^^^^^^^^^^^^^^^^^\n+LL | fn give_owned<F>(f: F) where F: FnOnce() + Send + Sync {\n+   |                                                 ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ea2d1434c4ae760e79702f77bbb5cdceaa26dff0", "filename": "src/test/ui/closures/closure-move-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -16,7 +16,7 @@ fn bar() {\n fn foo() {\n     let (tx, _rx) = channel();\n     thread::spawn(|| tx.send(()).unwrap());\n-    //~^ ERROR `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n+    //~^ ERROR `Sender<()>` cannot be shared between threads safely\n }\n \n fn main() {}"}, {"sha": "505cae981b08ebcc1544abb12022e9418419bf50", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,26 +7,26 @@ LL |     let t = thread::spawn(|| {\n   ::: $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |\n LL |     F: Send + 'static,\n-   |        ---- required by this bound in `std::thread::spawn`\n+   |        ---- required by this bound in `spawn`\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n-   = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Receiver<()>`\n+   = help: the trait `Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n+   = note: required because of the requirements on the impl of `Send` for `&std::sync::mpsc::Receiver<()>`\n    = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6 recv:&std::sync::mpsc::Receiver<()>]`\n \n-error[E0277]: `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n+error[E0277]: `Sender<()>` cannot be shared between threads safely\n   --> $DIR/closure-move-sync.rs:18:5\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n-   |     ^^^^^^^^^^^^^ `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n+   |     ^^^^^^^^^^^^^ `Sender<()>` cannot be shared between threads safely\n    | \n   ::: $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |\n LL |     F: Send + 'static,\n-   |        ---- required by this bound in `std::thread::spawn`\n+   |        ---- required by this bound in `spawn`\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<()>`\n-   = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Sender<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42 tx:&std::sync::mpsc::Sender<()>]`\n+   = help: the trait `Sync` is not implemented for `Sender<()>`\n+   = note: required because of the requirements on the impl of `Send` for `&Sender<()>`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42 tx:&Sender<()>]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "df0495cdc46434117236956f43d594ff8f79564d", "filename": "src/test/ui/closures/issue-41366.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,7 +7,7 @@ LL |     (&|_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n    |     | found signature of `fn(u16) -> _`\n    |     expected signature of `fn(<u32 as T<'x>>::V) -> _`\n    |\n-   = note: required for the cast to the object type `dyn for<'x> std::ops::Fn(<u32 as T<'x>>::V)`\n+   = note: required for the cast to the object type `dyn for<'x> Fn(<u32 as T<'x>>::V)`\n \n error: aborting due to previous error\n "}, {"sha": "e36f59ee5463bfe65311f542d2b07be2473cafbe", "filename": "src/test/ui/codemap_tests/empty_span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static main::Foo`\n+error[E0321]: cross-crate traits with a default impl, like `Send`, can only be implemented for a struct/enum type, not `&'static Foo`\n   --> $DIR/empty_span.rs:7:5\n    |\n LL |     unsafe impl Send for &'static Foo { }"}, {"sha": "958d54bbb151ff33b8912233ea5ee16cb0a08f4a", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -2,7 +2,7 @@ error[E0382]: borrow of moved value: `some_vec`\n   --> $DIR/tab_3.rs:7:20\n    |\n LL |     let some_vec = vec![\"hi\"];\n-   |         -------- move occurs because `some_vec` has type `std::vec::Vec<&str>`, which does not implement the `Copy` trait\n+   |         -------- move occurs because `some_vec` has type `Vec<&str>`, which does not implement the `Copy` trait\n LL |     some_vec.into_iter();\n    |              ----------- `some_vec` moved due to this method call\n LL |     {"}, {"sha": "f0109f22a2bc1ceef918fe21fb487582aa07617e", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,53 +4,53 @@ error[E0308]: mismatched types\n LL |     let _ = box { [1, 2, 3] }: Box<[i32]>;\n    |             ^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n-   = note: expected struct `std::boxed::Box<[i32]>`\n-              found struct `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `Box<[i32]>`\n+              found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:10:13\n    |\n LL |     let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n-   = note: expected struct `std::boxed::Box<[i32]>`\n-              found struct `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `Box<[i32]>`\n+              found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:11:13\n    |\n LL |     let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[i32]>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n-   = note: expected struct `std::boxed::Box<[i32]>`\n-              found struct `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `Box<[i32]>`\n+              found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:13:13\n    |\n LL |     let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::ops::Fn`, found closure\n+   |             ^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n    |\n-   = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n-              found struct `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:19: 13:32]>`\n+   = note: expected struct `Box<dyn Fn(i32) -> u8>`\n+              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:19: 13:32]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:14:13\n    |\n LL |     let _ = box if true { false } else { true }: Box<dyn Debug>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::fmt::Debug`, found `bool`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `bool`\n    |\n-   = note: expected struct `std::boxed::Box<dyn std::fmt::Debug>`\n-              found struct `std::boxed::Box<bool>`\n+   = note: expected struct `Box<dyn Debug>`\n+              found struct `Box<bool>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:15:13\n    |\n LL |     let _ = box match true { true => 'a', false => 'b' }: Box<dyn Debug>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::fmt::Debug`, found `char`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `char`\n    |\n-   = note: expected struct `std::boxed::Box<dyn std::fmt::Debug>`\n-              found struct `std::boxed::Box<char>`\n+   = note: expected struct `Box<dyn Debug>`\n+              found struct `Box<char>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:17:13\n@@ -83,27 +83,27 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:21:13\n    |\n LL |     let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _;\n-   |             ^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::ops::Fn`, found closure\n+   |             ^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n    |\n-   = note: expected reference `&dyn std::ops::Fn(i32) -> u8`\n+   = note: expected reference `&dyn Fn(i32) -> u8`\n               found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:16: 21:29]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:22:13\n    |\n LL |     let _ = &if true { false } else { true }: &dyn Debug;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::fmt::Debug`, found `bool`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `bool`\n    |\n-   = note: expected reference `&dyn std::fmt::Debug`\n+   = note: expected reference `&dyn Debug`\n               found reference `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:23:13\n    |\n LL |     let _ = &match true { true => 'a', false => 'b' }: &dyn Debug;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::fmt::Debug`, found `char`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `char`\n    |\n-   = note: expected reference `&dyn std::fmt::Debug`\n+   = note: expected reference `&dyn Debug`\n               found reference `&char`\n \n error[E0308]: mismatched types\n@@ -112,17 +112,17 @@ error[E0308]: mismatched types\n LL |     let _ = Box::new([1, 2, 3]): Box<[i32]>;\n    |             ^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n-   = note: expected struct `std::boxed::Box<[i32]>`\n-              found struct `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `Box<[i32]>`\n+              found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:26:13\n    |\n LL |     let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::ops::Fn`, found closure\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n    |\n-   = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n-              found struct `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:35]>`\n+   = note: expected struct `Box<dyn Fn(i32) -> u8>`\n+              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:35]>`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "a2008f04265dcb475292d3e7f3b7ce8bfbfcc489", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,8 +5,8 @@ LL | impl GoMut for MyThingy {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `go_trait`:\n-           - impl<G> go_trait::GoMut for G\n-             where G: go_trait::Go;\n+           - impl<G> GoMut for G\n+             where G: Go;\n \n error: aborting due to previous error\n "}, {"sha": "0cf2a406da443d6c97799f3d10304249e9c8461e", "filename": "src/test/ui/coherence/coherence-cow.re_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T> Remote for Pair<T,Cover<T>> { }\n    | ^^^^^^^^^^^^^^^^^^^----------------\n    | |                  |\n-   | |                  `lib::Pair` is not defined in the current crate\n+   | |                  `Pair` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "b523db4da23eaf0b2ac534ed57e57d7bcd08e3a6", "filename": "src/test/ui/coherence/coherence-cow.re_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T> Remote for Pair<Cover<T>,T> { }\n    | ^^^^^^^^^^^^^^^^^^^----------------\n    | |                  |\n-   | |                  `lib::Pair` is not defined in the current crate\n+   | |                  `Pair` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "bd635fc2e8c29353b8b4bf2673f97d932b821e73", "filename": "src/test/ui/coherence/coherence-cow.re_c.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^----------------\n    | |                    |\n-   | |                    `lib::Pair` is not defined in the current crate\n+   | |                    `Pair` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "5381053979f2686b37740cff839e7de0d2b48067", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL | impl<A> Foo for A {\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `trait_impl_conflict`:\n-           - impl trait_impl_conflict::Foo for isize;\n+           - impl Foo for isize;\n \n error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n   --> $DIR/coherence-cross-crate-conflict.rs:9:6"}, {"sha": "a35a95ef4bfab4db890854f754814be30aa79c13", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Misc for dyn Fundamental<Local> {}\n    | ^^^^^^^^^^^^^^----------------------\n    | |             |\n-   | |             `dyn coherence_fundamental_trait_lib::Fundamental<Local>` is not defined in the current crate\n+   | |             `dyn Fundamental<Local>` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "c364c707ff9eac202517a2a371fc43b01b498760", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -21,13 +21,13 @@ LL | impl !Send for dyn Marker2 {}\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n+error[E0321]: cross-crate traits with a default impl, like `Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n   --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:27:1\n    |\n LL | impl !Send for dyn Object {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n-error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n+error[E0321]: cross-crate traits with a default impl, like `Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n   --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:28:1\n    |\n LL | impl !Send for dyn Object + Marker2 {}"}, {"sha": "b80429794f92cb2b76eddef9a4657600934ad36c", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -21,13 +21,13 @@ LL | unsafe impl Send for dyn Marker2 {}\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n+error[E0321]: cross-crate traits with a default impl, like `Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n   --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:27:1\n    |\n LL | unsafe impl Send for dyn Object {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n-error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n+error[E0321]: cross-crate traits with a default impl, like `Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n   --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:28:1\n    |\n LL | unsafe impl Send for dyn Object + Marker2 {}"}, {"sha": "8cc24f099e382c065ad6fdb34cd3f5376cfda82c", "filename": "src/test/ui/coherence/coherence-impls-copy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL | impl Copy for i32 {}\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n-           - impl std::marker::Copy for i32;\n+           - impl Copy for i32;\n \n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n   --> $DIR/coherence-impls-copy.rs:29:1\n@@ -14,7 +14,7 @@ LL | impl Copy for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n-           - impl<T> std::marker::Copy for &T\n+           - impl<T> Copy for &T\n              where T: ?Sized;\n \n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n@@ -24,7 +24,7 @@ LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n-           - impl<T> std::marker::Copy for &T\n+           - impl<T> Copy for &T\n              where T: ?Sized;\n \n error[E0206]: the trait `Copy` may not be implemented for this type"}, {"sha": "edca31b5daee97bce47a460c910dd64e3e48df2c", "filename": "src/test/ui/coherence/coherence-impls-send.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,8 +5,8 @@ LL | unsafe impl Send for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n-           - impl<T> std::marker::Send for &T\n-             where T: std::marker::Sync, T: ?Sized;\n+           - impl<T> Send for &T\n+             where T: Sync, T: ?Sized;\n    = note: upstream crates may add a new impl of trait `std::marker::Sync` for type `[NotSync]` in future versions\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n@@ -20,7 +20,7 @@ LL | unsafe impl Send for (MyType, MyType) {}\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n+error[E0321]: cross-crate traits with a default impl, like `Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n   --> $DIR/coherence-impls-send.rs:19:1\n    |\n LL | unsafe impl Send for &'static NotSync {}"}, {"sha": "52d2cc88cbe7f2668ad6484b3c829d0053d95668", "filename": "src/test/ui/coherence/coherence-orphan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -16,7 +16,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl !Send for Vec<isize> { }\n    | ^^^^^^^^^^^^^^^----------\n    | |              |\n-   | |              `std::vec::Vec` is not defined in the current crate\n+   | |              `Vec` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "c1a02681c1343f0b79f96e10c930a962303e2959", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T> Remote for lib::Pair<T,Foo> { }\n    | ^^^^^^^^^^^^^^^^^^^----------------\n    | |                  |\n-   | |                  `lib::Pair` is not defined in the current crate\n+   | |                  `Pair` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "b18bf44dbdf2894894a55dfe5760c4527c77843c", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n    | ^^^^^^^^^^^--------------------------^^^^^---\n    | |          |                              |\n    | |          |                              `i32` is not defined in the current crate\n-   | |          `lib::Pair` is not defined in the current crate\n+   | |          `Pair` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "34fdf64ea109f8551b60e55f58bad11aeb319488", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^----------------\n    | |                    |\n-   | |                    `lib::Pair` is not defined in the current crate\n+   | |                    `Pair` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "567b6a6c17fda1e2faba5aef0bfc58a9f023e9e4", "filename": "src/test/ui/coherence/coherence-vec-local-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T> Remote for Vec<Local<T>> { }\n    | ^^^^^^^^^^^^^^^^^^^-------------\n    | |                  |\n-   | |                  `std::vec::Vec` is not defined in the current crate\n+   | |                  `Vec` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "38464f12a21d041c8010013052a2916cf60f92c7", "filename": "src/test/ui/coherence/coherence-vec-local.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Remote for Vec<Local> { }\n    | ^^^^^^^^^^^^^^^^----------\n    | |               |\n-   | |               `std::vec::Vec` is not defined in the current crate\n+   | |               `Vec` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "6f36f2a7510a0ff474554a1ae3ab134b639d1e97", "filename": "src/test/ui/coherence/coherence_inherent.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: no method named `the_fn` found for reference `&Lib::TheStruct` in the current scope\n+error[E0599]: no method named `the_fn` found for reference `&TheStruct` in the current scope\n   --> $DIR/coherence_inherent.rs:31:11\n    |\n LL |         s.the_fn();\n-   |           ^^^^^^ method not found in `&Lib::TheStruct`\n+   |           ^^^^^^ method not found in `&TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "edfe6348d174e5a741e163fdf7b05f5c06e65832", "filename": "src/test/ui/coherence/coherence_inherent_cc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: no method named `the_fn` found for reference `&coherence_inherent_cc_lib::TheStruct` in the current scope\n+error[E0599]: no method named `the_fn` found for reference `&TheStruct` in the current scope\n   --> $DIR/coherence_inherent_cc.rs:23:11\n    |\n LL |         s.the_fn();\n-   |           ^^^^^^ method not found in `&coherence_inherent_cc_lib::TheStruct`\n+   |           ^^^^^^ method not found in `&TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "8c310b318a7af47761cd07084361c68c4cf77095", "filename": "src/test/ui/coherence/coherence_local_err_struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^---------------------\n    | |                    |\n-   | |                    `lib::MyStruct` is not defined in the current crate\n+   | |                    `MyStruct` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "bdf19cf00a7cee35b564d99e8ed538f2b0863ea5", "filename": "src/test/ui/coherence/impl-foreign-for-foreign[foreign].stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL | impl Remote1<Rc<i32>> for i32 {\n    | ^^^^^----------------^^^^^---\n    | |    |                    |\n    | |    |                    `i32` is not defined in the current crate\n-   | |    `std::rc::Rc` is not defined in the current crate\n+   | |    `Rc` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n@@ -17,7 +17,7 @@ LL | impl Remote1<Rc<Local>> for f64 {\n    | ^^^^^------------------^^^^^---\n    | |    |                      |\n    | |    |                      `f64` is not defined in the current crate\n-   | |    `std::rc::Rc` is not defined in the current crate\n+   | |    `Rc` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n@@ -29,7 +29,7 @@ LL | impl<T> Remote1<Rc<T>> for f32 {\n    | ^^^^^^^^--------------^^^^^---\n    | |       |                  |\n    | |       |                  `f32` is not defined in the current crate\n-   | |       `std::rc::Rc` is not defined in the current crate\n+   | |       `Rc` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "0959e155c57b4058706cfd8c5daf979618a08832", "filename": "src/test/ui/coherence/impl-foreign-for-fundamental[foreign].stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -15,7 +15,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T> Remote for Box<Rc<T>> {\n    | ^^^^^^^^^^^^^^^^^^^----------\n    | |                  |\n-   | |                  `std::rc::Rc` is not defined in the current crate\n+   | |                  `Rc` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "b4d559eb1f26b6df9ec580ce691f8e15c4905729", "filename": "src/test/ui/coherence/impl-foreign[fundemental[foreign]]-for-foreign.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL | impl Remote1<Box<String>> for i32 {\n    | ^^^^^--------------------^^^^^---\n    | |    |                        |\n    | |    |                        `i32` is not defined in the current crate\n-   | |    `std::string::String` is not defined in the current crate\n+   | |    `String` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n@@ -17,7 +17,7 @@ LL | impl Remote1<Box<Rc<i32>>> for f64 {\n    | ^^^^^---------------------^^^^^---\n    | |    |                         |\n    | |    |                         `f64` is not defined in the current crate\n-   | |    `std::rc::Rc` is not defined in the current crate\n+   | |    `Rc` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n@@ -29,7 +29,7 @@ LL | impl<T> Remote1<Box<Rc<T>>> for f32 {\n    | ^^^^^^^^-------------------^^^^^---\n    | |       |                       |\n    | |       |                       `f32` is not defined in the current crate\n-   | |       `std::rc::Rc` is not defined in the current crate\n+   | |       `Rc` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "7f8ec83b24a8b9d39798d4204e8df52c2b2ca79c", "filename": "src/test/ui/coherence/impl[t]-foreign-for-foreign[t].stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Remote for Rc<Local> {\n    | ^^^^^^^^^^^^^^^^---------\n    | |               |\n-   | |               `std::rc::Rc` is not defined in the current crate\n+   | |               `Rc` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n@@ -15,7 +15,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T> Remote for Arc<T> {\n    | ^^^^^^^^^^^^^^^^^^^------\n    | |                  |\n-   | |                  `std::sync::Arc` is not defined in the current crate\n+   | |                  `Arc` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "83a2ae6068109b97c8f8532165b30e91711b0385", "filename": "src/test/ui/compare-method/trait-bound-on-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL |   fn b<C,D>(&self, x: C) -> C;\n    |   ---------------------------- definition of `b` from trait\n ...\n LL |     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `F: std::marker::Sync`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `F: Sync`\n \n error: aborting due to previous error\n "}, {"sha": "da94fc658410a02a8537815e2e1cc58c7da0413d", "filename": "src/test/ui/compare-method/traits-misc-mismatch-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -5,7 +5,7 @@ LL |     fn test_error1_fn<T: Eq>(&self);\n    |     -------------------------------- definition of `test_error1_fn` from trait\n ...\n LL |     fn test_error1_fn<T: Ord>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::cmp::Ord`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Ord`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:31:5\n@@ -41,7 +41,7 @@ LL |     fn test_error7_fn<T: A>(&self);\n    |     ------------------------------- definition of `test_error7_fn` from trait\n ...\n LL |     fn test_error7_fn<T: A + Eq>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::cmp::Eq`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Eq`\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/traits-misc-mismatch-1.rs:54:5"}, {"sha": "051940bbe9660282e4ddc9d29d03a22379eba286", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -90,7 +90,7 @@ LL |     w.wrap.not_closure();\n    |            |\n    |            field, not a method\n \n-error[E0599]: no method named `closure` found for struct `Obj<std::boxed::Box<(dyn std::ops::FnOnce() -> u32 + 'static)>>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj<Box<(dyn FnOnce() -> u32 + 'static)>>` in the current scope\n   --> $DIR/issue-2392.rs:58:24\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {"}, {"sha": "fd98a864742ee0faaa5d5c9b06ec75ecccf47d63", "filename": "src/test/ui/confuse-field-and-method/private-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `dog_age` found for struct `animal::Dog` in the current scope\n+error[E0599]: no method named `dog_age` found for struct `Dog` in the current scope\n   --> $DIR/private-field.rs:16:23\n    |\n LL |     pub struct Dog {"}, {"sha": "87058c3c29cf4ffe8ebf2f918cead24ff3d58c64", "filename": "src/test/ui/conservative_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -4,7 +4,7 @@ error[E0277]: `()` is not an iterator\n LL | fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n    |\n-   = help: the trait `std::iter::Iterator` is not implemented for `()`\n+   = help: the trait `Iterator` is not implemented for `()`\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "f860788e778a6f21e8dd7b198106f19edbd842ff", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -10,7 +10,7 @@ error[E0392]: parameter `T` is never used\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                      ^ unused parameter\n    |\n-   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f860788e778a6f21e8dd7b198106f19edbd842ff", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -10,7 +10,7 @@ error[E0392]: parameter `T` is never used\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                      ^ unused parameter\n    |\n-   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ef6e60084a5f090ff328db39cd304bdacef262c6", "filename": "src/test/ui/const-generics/issues/issue-61336-2.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,17 +7,17 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-61336-2.rs:10:5\n    |\n LL |     [x; { N }]\n-   |     ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |     ^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+LL | fn g<T: Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "40863a4f71860bebcb15364e1b8454a03e8bd814", "filename": "src/test/ui/const-generics/issues/issue-61336-2.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,14 +1,14 @@\n-error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-61336-2.rs:10:5\n    |\n LL |     [x; { N }]\n-   |     ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |     ^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+LL | fn g<T: Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "44995157cc91fda6a4ed80d6b2d344925dfb3eca", "filename": "src/test/ui/const-generics/issues/issue-61336-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -8,7 +8,7 @@ fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n \n fn g<T, const N: usize>(x: T) -> [T; N] {\n     [x; { N }]\n-    //~^ ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+    //~^ ERROR the trait bound `T: Copy` is not satisfied\n }\n \n fn main() {"}, {"sha": "bdfdffd941d20ba864855ec67561dc95695f5406", "filename": "src/test/ui/const-generics/issues/issue-61336.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -7,17 +7,17 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-61336.rs:10:5\n    |\n LL |     [x; N]\n-   |     ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |     ^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+LL | fn g<T: Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "6c57f9ccbf511b4c2ac484bc5df1a8ac9122b880", "filename": "src/test/ui/const-generics/issues/issue-61336.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af3c6e733a40e671550e0f0f5aeecaa13772ba56/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr?ref=af3c6e733a40e671550e0f0f5aeecaa13772ba56", "patch": "@@ -1,14 +1,14 @@\n-error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-61336.rs:10:5\n    |\n LL |     [x; N]\n-   |     ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |     ^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+LL | fn g<T: Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^\n \n error: aborting due to previous error\n "}]}