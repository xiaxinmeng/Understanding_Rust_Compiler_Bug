{"sha": "ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZDE0YzkyZjhiMTVmNmQ5Mzg4ZWE5YmY2ZjE5NzkzYTFiNzdhNTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-31T06:39:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-31T21:59:49Z"}, "message": "std: Remove PortSet. Not supported by new scheduler. Replace uses with SharedChan.", "tree": {"sha": "6489fb4bd07f5740e4f6a8dfe1670fe91b064f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6489fb4bd07f5740e4f6a8dfe1670fe91b064f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "html_url": "https://github.com/rust-lang/rust/commit/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "389aba09523f805e3b493a5089c6397749b06b67", "url": "https://api.github.com/repos/rust-lang/rust/commits/389aba09523f805e3b493a5089c6397749b06b67", "html_url": "https://github.com/rust-lang/rust/commit/389aba09523f805e3b493a5089c6397749b06b67"}], "stats": {"total": 157, "additions": 38, "deletions": 119}, "files": [{"sha": "708c8e413d9869efbb297708436f9f20be9c6630", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "patch": "@@ -576,16 +576,12 @@ mod tests {\n         let (p, c) = comm::stream();\n \n         do task::spawn() || {\n-            let p = comm::PortSet::new();\n-            c.send(p.chan());\n-\n             let arc_v : Arc<~[int]> = p.recv();\n \n             let v = (*arc_v.get()).clone();\n             assert_eq!(v[3], 4);\n         };\n \n-        let c = p.recv();\n         c.send(arc_v.clone());\n \n         assert_eq!(arc_v.get()[2], 3);"}, {"sha": "acdf2cee841f4cdc983a931c19a866ea98eec125", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 2, "deletions": 81, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "patch": "@@ -14,14 +14,10 @@ Message passing\n \n #[allow(missing_doc)];\n \n-use cast::{transmute, transmute_mut};\n-use container::Container;\n+use cast::transmute;\n use either::{Either, Left, Right};\n use kinds::Send;\n-use option::{Option, Some, None};\n-use uint;\n-use vec::OwnedVector;\n-use util::replace;\n+use option::{Option, Some};\n use unstable::sync::Exclusive;\n use rtcomm = rt::comm;\n use rt;\n@@ -143,81 +139,6 @@ impl<T: Send> Selectable for Port<T> {\n     }\n }\n \n-/// Treat many ports as one.\n-#[unsafe_mut_field(ports)]\n-pub struct PortSet<T> {\n-    ports: ~[pipesy::Port<T>],\n-}\n-\n-impl<T: Send> PortSet<T> {\n-    pub fn new() -> PortSet<T> {\n-        PortSet {\n-            ports: ~[]\n-        }\n-    }\n-\n-    pub fn add(&self, port: Port<T>) {\n-        let Port { inner } = port;\n-        let port = match inner {\n-            Left(p) => p,\n-            Right(_) => fail!(\"PortSet not implemented\")\n-        };\n-        unsafe {\n-            let self_ports = transmute_mut(&self.ports);\n-            self_ports.push(port)\n-        }\n-    }\n-\n-    pub fn chan(&self) -> Chan<T> {\n-        let (po, ch) = stream();\n-        self.add(po);\n-        ch\n-    }\n-}\n-\n-impl<T:Send> GenericPort<T> for PortSet<T> {\n-    fn try_recv(&self) -> Option<T> {\n-        unsafe {\n-            let self_ports = transmute_mut(&self.ports);\n-            let mut result = None;\n-            // we have to swap the ports array so we aren't borrowing\n-            // aliasable mutable memory.\n-            let mut ports = replace(self_ports, ~[]);\n-            while result.is_none() && ports.len() > 0 {\n-                let i = wait_many(ports);\n-                match ports[i].try_recv() {\n-                    Some(m) => {\n-                        result = Some(m);\n-                    }\n-                    None => {\n-                        // Remove this port.\n-                        let _ = ports.swap_remove(i);\n-                    }\n-                }\n-            }\n-            *self_ports = ports;\n-            result\n-        }\n-    }\n-    fn recv(&self) -> T {\n-        self.try_recv().expect(\"port_set: endpoints closed\")\n-    }\n-}\n-\n-impl<T: Send> Peekable<T> for PortSet<T> {\n-    fn peek(&self) -> bool {\n-        // It'd be nice to use self.port.each, but that version isn't\n-        // pure.\n-        for uint::range(0, self.ports.len()) |i| {\n-            let port: &pipesy::Port<T> = &self.ports[i];\n-            if port.peek() {\n-                return true;\n-            }\n-        }\n-        false\n-    }\n-}\n-\n /// A channel that can be shared between many senders.\n pub struct SharedChan<T> {\n     inner: Either<Exclusive<pipesy::Chan<T>>, rtcomm::SharedChan<T>>"}, {"sha": "561730887edbd8092d487c10cd3e8e27e73c2473", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "patch": "@@ -16,7 +16,7 @@\n \n extern mod extra;\n \n-use std::comm::{PortSet, Chan, stream};\n+use std::comm::{SharedChan, Chan, stream};\n use std::io;\n use std::os;\n use std::task;\n@@ -30,7 +30,7 @@ enum request {\n     stop\n }\n \n-fn server(requests: &PortSet<request>, responses: &Chan<uint>) {\n+fn server(requests: &Port<request>, responses: &Chan<uint>) {\n     let mut count: uint = 0;\n     let mut done = false;\n     while !done {\n@@ -50,18 +50,16 @@ fn server(requests: &PortSet<request>, responses: &Chan<uint>) {\n \n fn run(args: &[~str]) {\n     let (from_child, to_parent) = stream();\n-    let (from_parent_, to_child) = stream();\n-    let from_parent = PortSet::new();\n-    from_parent.add(from_parent_);\n+    let (from_parent, to_child) = stream();\n+    let to_child = SharedChan::new(to_child);\n \n     let size = uint::from_str(args[1]).get();\n     let workers = uint::from_str(args[2]).get();\n     let num_bytes = 100;\n     let start = extra::time::precise_time_s();\n     let mut worker_results = ~[];\n     for uint::range(0, workers) |_i| {\n-        let (from_parent_, to_child) = stream();\n-        from_parent.add(from_parent_);\n+        let to_child = to_child.clone();\n         let mut builder = task::task();\n         builder.future_result(|r| worker_results.push(r));\n         do builder.spawn {"}, {"sha": "e30cd921c4e465c7cc96a088ae80941cf2a25e4e", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "patch": "@@ -33,22 +33,24 @@ use std::u64;\n use std::uint;\n \n fn fib(n: int) -> int {\n-    fn pfib(c: &Chan<int>, n: int) {\n+    fn pfib(c: &SharedChan<int>, n: int) {\n         if n == 0 {\n             c.send(0);\n         } else if n <= 2 {\n             c.send(1);\n         } else {\n-            let p = PortSet::new();\n-            let ch = p.chan();\n+            let (pp, cc) = stream();\n+            let cc = SharedChan::new(cc);\n+            let ch = cc.clone();\n             task::spawn(|| pfib(&ch, n - 1) );\n-            let ch = p.chan();\n+            let ch = cc.clone();\n             task::spawn(|| pfib(&ch, n - 2) );\n-            c.send(p.recv() + p.recv());\n+            c.send(pp.recv() + pp.recv());\n         }\n     }\n \n     let (p, ch) = stream();\n+    let ch = SharedChan::new(ch);\n     let _t = task::spawn(|| pfib(&ch, n) );\n     p.recv()\n }"}, {"sha": "a04e3525d34dd4771a9a90390a9732e42178f5a9", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "patch": "@@ -14,14 +14,14 @@ use std::comm;\n use std::task;\n \n pub fn main() {\n-    let po = comm::PortSet::new();\n+    let (po, ch) = comm::stream();\n+    let ch = comm::SharedChan::new(ch);\n \n     // Spawn 10 tasks each sending us back one int.\n     let mut i = 10;\n     while (i > 0) {\n         info!(i);\n-        let (p, ch) = comm::stream();\n-        po.add(p);\n+        let ch = ch.clone();\n         task::spawn({let i = i; || child(i, &ch)});\n         i = i - 1;\n     }\n@@ -39,7 +39,7 @@ pub fn main() {\n     info!(\"main thread exiting\");\n }\n \n-fn child(x: int, ch: &comm::Chan<int>) {\n+fn child(x: int, ch: &comm::SharedChan<int>) {\n     info!(x);\n     ch.send(x);\n }"}, {"sha": "ab13f8ef1796b6b78e7c2ad13f1edc10d382752c", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "patch": "@@ -12,13 +12,13 @@\n \n extern mod extra;\n \n-use std::comm::Chan;\n+use std::comm::SharedChan;\n use std::comm;\n use std::task;\n \n pub fn main() { info!(\"===== WITHOUT THREADS =====\"); test00(); }\n \n-fn test00_start(ch: &Chan<int>, message: int, count: int) {\n+fn test00_start(ch: &SharedChan<int>, message: int, count: int) {\n     info!(\"Starting test00_start\");\n     let mut i: int = 0;\n     while i < count {\n@@ -35,14 +35,15 @@ fn test00() {\n \n     info!(\"Creating tasks\");\n \n-    let po = comm::PortSet::new();\n+    let (po, ch) = comm::stream();\n+    let ch = comm::SharedChan::new(ch);\n \n     let mut i: int = 0;\n \n     // Create and spawn tasks...\n     let mut results = ~[];\n     while i < number_of_tasks {\n-        let ch = po.chan();\n+        let ch = ch.clone();\n         let mut builder = task::task();\n         builder.future_result(|r| results.push(r));\n         builder.spawn({"}, {"sha": "0da0d5877229d1cc82ce5fbe0efd8c272ae267a2", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "patch": "@@ -8,19 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::comm::Chan;\n+use std::comm::SharedChan;\n use std::comm;\n \n pub fn main() { test00(); }\n \n fn test00() {\n     let mut r: int = 0;\n     let mut sum: int = 0;\n-    let p = comm::PortSet::new();\n-    let c0 = p.chan();\n-    let c1 = p.chan();\n-    let c2 = p.chan();\n-    let c3 = p.chan();\n+    let (p, ch) = comm::stream();\n+    let ch = SharedChan::new(ch);\n+    let c0 = ch.clone();\n+    let c1 = ch.clone();\n+    let c2 = ch.clone();\n+    let c3 = ch.clone();\n     let number_of_messages: int = 1000;\n     let mut i: int = 0;\n     while i < number_of_messages {"}, {"sha": "33d721f5f380646135ca364d84fd1f2bec3b46b7", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "patch": "@@ -17,30 +17,31 @@ use std::task;\n \n pub fn main() { test00(); }\n \n-fn test00_start(c: &comm::Chan<int>, start: int, number_of_messages: int) {\n+fn test00_start(c: &comm::SharedChan<int>, start: int, number_of_messages: int) {\n     let mut i: int = 0;\n     while i < number_of_messages { c.send(start + i); i += 1; }\n }\n \n fn test00() {\n     let mut r: int = 0;\n     let mut sum: int = 0;\n-    let p = comm::PortSet::new();\n+    let (p, ch) = comm::stream();\n+    let ch = comm::SharedChan::new(ch);\n     let number_of_messages: int = 10;\n \n-    let c = p.chan();\n+    let c = ch.clone();\n     do task::spawn || {\n         test00_start(&c, number_of_messages * 0, number_of_messages);\n     }\n-    let c = p.chan();\n+    let c = ch.clone();\n     do task::spawn || {\n         test00_start(&c, number_of_messages * 1, number_of_messages);\n     }\n-    let c = p.chan();\n+    let c = ch.clone();\n     do task::spawn || {\n         test00_start(&c, number_of_messages * 2, number_of_messages);\n     }\n-    let c = p.chan();\n+    let c = ch.clone();\n     do task::spawn || {\n         test00_start(&c, number_of_messages * 3, number_of_messages);\n     }"}, {"sha": "86e3e24a3ee236ee1aab835ec74239a86e27b22c", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=ebd14c92f8b15f6d9388ea9bf6f19793a1b77a59", "patch": "@@ -25,9 +25,8 @@ fn test00_start(c: &comm::Chan<int>, number_of_messages: int) {\n fn test00() {\n     let r: int = 0;\n     let mut sum: int = 0;\n-    let p = comm::PortSet::new();\n+    let (p, ch) = comm::stream();\n     let number_of_messages: int = 10;\n-    let ch = p.chan();\n \n     let mut result = None;\n     let mut builder = task::task();"}]}