{"sha": "dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "node_id": "C_kwDOAAsO6NoAKGRkOGMzYTgwZGQyZTVhMGI2MmMzZWY3NzUxMWYzMjk2MDcwZjc4ZTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-05T08:47:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-05T08:47:56Z"}, "message": "Auto merge of #102691 - notriddle:rollup-tdtyagp, r=notriddle\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #102574 (Make Hash{Set,Map}::with_hasher unstably const)\n - #102650 (Slightly improve no return for returning function error)\n - #102662 (rustdoc: remove no-op CSS `.code-header { display: block }`)\n - #102670 (follow-up fix about 101866 to print the self type.)\n - #102686 (Don't build the compiler before building rls)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2fb2a7d54b8d152dc4eb127539f7793e3649776e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fb2a7d54b8d152dc4eb127539f7793e3649776e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "html_url": "https://github.com/rust-lang/rust/commit/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8613f792c11d6d348b15eee79da561323fa0199", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8613f792c11d6d348b15eee79da561323fa0199", "html_url": "https://github.com/rust-lang/rust/commit/d8613f792c11d6d348b15eee79da561323fa0199"}, {"sha": "40ce4af232e2ede154fec2f7fcaa2417d830b69d", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ce4af232e2ede154fec2f7fcaa2417d830b69d", "html_url": "https://github.com/rust-lang/rust/commit/40ce4af232e2ede154fec2f7fcaa2417d830b69d"}], "stats": {"total": 94, "additions": 52, "deletions": 42}, "files": [{"sha": "3618cfba533fd49905554ddfb804fbd316ddf5be", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -1123,7 +1123,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 err.span_suggestion_short(\n                     span_semi,\n-                    \"remove this semicolon\",\n+                    \"remove this semicolon to return this value\",\n                     \"\",\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "6dcf9c4d26174c926458513db2a4ddd4bea8b940", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -2265,7 +2265,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                             };\n                             let mut suggestions = vec![(\n                                 trait_path_segment.ident.span.shrink_to_lo(),\n-                                format!(\"<{} as \", self.tcx.def_path(impl_def_id).to_string_no_crate_verbose())\n+                                format!(\"<{} as \", self.tcx.type_of(impl_def_id))\n                             )];\n                             if let Some(generic_arg) = trait_path_segment.args {\n                                 let between_span = trait_path_segment.ident.span.between(generic_arg.span_ext);"}, {"sha": "34983b976e3e6d48ac26a3b15030b2b84660e41f", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -280,7 +280,8 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n-    pub fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {\n+    #[rustc_const_unstable(feature = \"const_collections_with_hasher\", issue = \"102575\")]\n+    pub const fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {\n         HashMap { base: base::HashMap::with_hasher(hash_builder) }\n     }\n "}, {"sha": "65634f2063f36da25633548a6be59ce94a7dda21", "filename": "library/std/src/collections/hash/map/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -1115,3 +1115,9 @@ fn from_array() {\n     // that's a problem!\n     let _must_not_require_type_annotation = HashMap::from([(1, 2)]);\n }\n+\n+#[test]\n+fn const_with_hasher() {\n+    const X: HashMap<(), (), ()> = HashMap::with_hasher(());\n+    assert_eq!(X.len(), 0);\n+}"}, {"sha": "c36eeae3388db4a52837e3042e883e5ed3ece6be", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -376,7 +376,8 @@ impl<T, S> HashSet<T, S> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n-    pub fn with_hasher(hasher: S) -> HashSet<T, S> {\n+    #[rustc_const_unstable(feature = \"const_collections_with_hasher\", issue = \"102575\")]\n+    pub const fn with_hasher(hasher: S) -> HashSet<T, S> {\n         HashSet { base: base::HashSet::with_hasher(hasher) }\n     }\n "}, {"sha": "941a0450cc770f9fe4cc96268ee539f560532d1f", "filename": "library/std/src/collections/hash/set/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -496,3 +496,9 @@ fn from_array() {\n     // that's a problem!\n     let _must_not_require_type_annotation = HashSet::from([1, 2]);\n }\n+\n+#[test]\n+fn const_with_hasher() {\n+    const X: HashSet<(), ()> = HashSet::with_hasher(());\n+    assert_eq!(X.len(), 0);\n+}"}, {"sha": "a497acda4f60ccdc9fb191d80e1a0f0edc64e16d", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -351,6 +351,7 @@\n // Only used in tests/benchmarks:\n //\n // Only for const-ness:\n+#![feature(const_collections_with_hasher)]\n #![feature(const_io_structs)]\n #![feature(const_ip)]\n #![feature(const_ipv4)]"}, {"sha": "d6e7f7872703ef7fec158457e48edfb63206ace1", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -870,10 +870,10 @@ tool_extended!((self, builder),\n     Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, in_tree=true, {};\n     Miri, \"src/tools/miri\", \"miri\", stable=false, in_tree=true, {};\n     CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=false, in_tree=true, {};\n-    Rls, \"src/tools/rls\", \"rls\", stable=true, {};\n     // FIXME: tool_std is not quite right, we shouldn't allow nightly features.\n     // But `builder.cargo` doesn't know how to handle ToolBootstrap in stages other than 0,\n     // and this is close enough for now.\n+    Rls, \"src/tools/rls\", \"rls\", stable=true, in_tree=true, tool_std=true, {};\n     RustDemangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, in_tree=true, tool_std=true, {};\n     Rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, in_tree=true, {};\n );"}, {"sha": "96876a30a4e1f766d9c7a1e9a42a74ed72eff88f", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -654,10 +654,6 @@ pre.example-line-numbers {\n \tfont-weight: normal;\n }\n \n-.method > .code-header, .trait-impl > .code-header {\n-\tdisplay: block;\n-}\n-\n .in-band {\n \tflex-grow: 1;\n \tmargin: 0px;"}, {"sha": "9be0367ae383c4b3b7e018df3c33de76d3ad832e", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -7,7 +7,7 @@ LL | pub fn f() -> String {\n    |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     0u8;\n LL |     \"bla\".to_string();\n-   |                      - help: remove this semicolon\n+   |                      - help: remove this semicolon to return this value\n \n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:8:15\n@@ -18,7 +18,7 @@ LL | pub fn g() -> String {\n    |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"this won't work\".to_string();\n LL |     \"removeme\".to_string();\n-   |                           - help: remove this semicolon\n+   |                           - help: remove this semicolon to return this value\n \n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:13:25\n@@ -29,7 +29,7 @@ LL | pub fn macro_tests() -> u32 {\n    |        implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     mac!();\n-   |           - help: remove this semicolon\n+   |           - help: remove this semicolon to return this value\n \n error: aborting due to 3 previous errors\n "}, {"sha": "42fb3d3d43d4bf33c67d61a091f1c21c67a68fc8", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -7,7 +7,7 @@ LL | fn blah() -> i32 {\n    |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     ;\n-   |     - help: remove this semicolon\n+   |     - help: remove this semicolon to return this value\n \n error: aborting due to previous error\n "}, {"sha": "2b386d10c53c42c3a70087585b3e6c17a0a8f0d1", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -15,7 +15,7 @@ LL | fn bar() -> String {\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"foobar\".to_string()\n LL |     ;\n-   |     - help: remove this semicolon\n+   |     - help: remove this semicolon to return this value\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8aa9e952b99018faa3836bf10be4e6c3020c164a", "filename": "src/test/ui/closures/old-closure-expression-remove-semicolon.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.fixed?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -7,6 +7,6 @@ fn foo() -> i32 {\n fn main() {\n     let _x: i32 = {\n         //~^ ERROR mismatched types\n-        foo() //~ HELP remove this semicolon\n+        foo() //~ HELP remove this semicolon to return this value\n     };\n }"}, {"sha": "912c7a3314ac99655c571d0c9f6db8eb289f1641", "filename": "src/test/ui/closures/old-closure-expression-remove-semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.rs?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -7,6 +7,6 @@ fn foo() -> i32 {\n fn main() {\n     let _x: i32 = {\n         //~^ ERROR mismatched types\n-        foo(); //~ HELP remove this semicolon\n+        foo(); //~ HELP remove this semicolon to return this value\n     };\n }"}, {"sha": "bc54ab4d511a5efcbfb27a79eaa6084943f54c44", "filename": "src/test/ui/closures/old-closure-expression-remove-semicolon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -5,7 +5,7 @@ LL |       let _x: i32 = {\n    |  ___________________^\n LL | |\n LL | |         foo();\n-   | |              - help: remove this semicolon\n+   | |              - help: remove this semicolon to return this value\n LL | |     };\n    | |_____^ expected `i32`, found `()`\n "}, {"sha": "4c04bb11351692c81e3db9e01238833c819e977a", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -6,7 +6,7 @@ LL | fn plus_one(x: i32) -> i32 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x + 1;\n-   |          - help: remove this semicolon\n+   |          - help: remove this semicolon to return this value\n \n error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:8:13\n@@ -16,7 +16,7 @@ LL | fn foo() -> Result<u8, u64> {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Ok(1);\n-   |          - help: remove this semicolon\n+   |          - help: remove this semicolon to return this value\n    |\n    = note:   expected enum `Result<u8, u64>`\n            found unit type `()`"}, {"sha": "90316c6e981d8af9b2f350f5414727b88824bf6f", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -9,8 +9,8 @@ LL |     let cont: u32 = Generator::create();\n    |\n help: use a fully-qualified path to a specific available implementation (2 found)\n    |\n-LL |     let cont: u32 = <::Impl as Generator>::create();\n-   |                     ++++++++++          +\n+LL |     let cont: u32 = <Impl as Generator>::create();\n+   |                     ++++++++          +\n \n error[E0283]: type annotations needed\n   --> $DIR/E0283.rs:35:24"}, {"sha": "f68c0e7d220f369d4409d59e26baa99ecd954b7d", "filename": "src/test/ui/error-codes/E0790.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -9,8 +9,8 @@ LL |         MyTrait::my_fn();\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |         <::inner::MyStruct as MyTrait>::my_fn();\n-   |         +++++++++++++++++++++        +\n+LL |         <MyStruct as MyTrait>::my_fn();\n+   |         ++++++++++++        +\n \n error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:21:17\n@@ -23,8 +23,8 @@ LL |         let _ = MyTrait::MY_ASSOC_CONST;\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |         let _ = <::inner::MyStruct as MyTrait>::MY_ASSOC_CONST;\n-   |                 +++++++++++++++++++++        +\n+LL |         let _ = <MyStruct as MyTrait>::MY_ASSOC_CONST;\n+   |                 ++++++++++++        +\n \n error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:26:5\n@@ -37,8 +37,8 @@ LL |     inner::MyTrait::my_fn();\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     inner::<::inner::MyStruct as MyTrait>::my_fn();\n-   |            +++++++++++++++++++++        +\n+LL |     inner::<MyStruct as MyTrait>::my_fn();\n+   |            ++++++++++++        +\n \n error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:30:13\n@@ -51,8 +51,8 @@ LL |     let _ = inner::MyTrait::MY_ASSOC_CONST;\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     let _ = inner::<::inner::MyStruct as MyTrait>::MY_ASSOC_CONST;\n-   |                    +++++++++++++++++++++        +\n+LL |     let _ = inner::<MyStruct as MyTrait>::MY_ASSOC_CONST;\n+   |                    ++++++++++++        +\n \n error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:50:5\n@@ -65,8 +65,8 @@ LL |     MyTrait2::my_fn();\n    |\n help: use a fully-qualified path to a specific available implementation (2 found)\n    |\n-LL |     <::Impl1 as MyTrait2>::my_fn();\n-   |     +++++++++++         +\n+LL |     <Impl1 as MyTrait2>::my_fn();\n+   |     +++++++++         +\n \n error: aborting due to 5 previous errors\n "}, {"sha": "168ececac31ebb05e4ae02b66e631b660c5be1c2", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(b: bool) -> Result<bool,String> {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Err(\"bar\".to_string());\n-   |                           - help: remove this semicolon\n+   |                           - help: remove this semicolon to return this value\n    |\n    = note:   expected enum `Result<bool, String>`\n            found unit type `()`"}, {"sha": "dff859429c9b47b8988ff66178e65205643247db", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.rs?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -1,4 +1,3 @@\n-//\n // regression test for #8005\n \n macro_rules! test { () => { fn foo() -> i32 { 1; } } }"}, {"sha": "de0843aa637f327fe87cd98161270e4516ce1396", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -1,31 +1,31 @@\n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:7:19\n+  --> $DIR/liveness-return-last-stmt-semi.rs:6:19\n    |\n LL | fn no_return() -> i32 {}\n    |    ---------      ^^^ expected `i32`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:9:19\n+  --> $DIR/liveness-return-last-stmt-semi.rs:8:19\n    |\n LL | fn bar(x: u32) -> u32 {\n    |    ---            ^^^ expected `u32`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x * 2;\n-   |          - help: remove this semicolon\n+   |          - help: remove this semicolon to return this value\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:13:19\n+  --> $DIR/liveness-return-last-stmt-semi.rs:12:19\n    |\n LL | fn baz(x: u64) -> u32 {\n    |    ---            ^^^ expected `u32`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:4:41\n+  --> $DIR/liveness-return-last-stmt-semi.rs:3:41\n    |\n LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n    |                                ---      ^^^ expected `i32`, found `()`"}, {"sha": "00aa7d18a968c3ecaa7758bc6a0ecab0e2edbe64", "filename": "src/test/ui/suggestions/match-with-different-arm-types-as-stmt-instead-of-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-with-different-arm-types-as-stmt-instead-of-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-with-different-arm-types-as-stmt-instead-of-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-with-different-arm-types-as-stmt-instead-of-expr.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -7,7 +7,7 @@ LL | fn not_all_paths(a: &str) -> u32 {\n    |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     };\n-   |      - help: remove this semicolon\n+   |      - help: remove this semicolon to return this value\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-with-different-arm-types-as-stmt-instead-of-expr.rs:26:14"}, {"sha": "5f74d0c3b9260e5686593d89852bb77abed05823", "filename": "src/test/ui/traits/static-method-generic-inference.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -9,8 +9,8 @@ LL |     let _f: base::Foo = base::HasNew::new();\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     let _f: base::Foo = base::<::base::Foo as HasNew>::new();\n-   |                               +++++++++++++++       +\n+LL |     let _f: base::Foo = base::<Foo as HasNew>::new();\n+   |                               +++++++       +\n \n error: aborting due to previous error\n "}, {"sha": "fe99821198e205eb00187dca6df4a1439ed45bf5", "filename": "src/test/ui/type/issue-101866.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr?ref=dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "patch": "@@ -10,7 +10,7 @@ LL |     TraitA::<i32>::func();\n help: use the fully-qualified path to the only available implementation\n    |\n LL -     TraitA::<i32>::func();\n-LL +     <::StructA as TraitA<i32>>::func();\n+LL +     <StructA as TraitA<i32>>::func();\n    |\n \n error: aborting due to previous error"}]}