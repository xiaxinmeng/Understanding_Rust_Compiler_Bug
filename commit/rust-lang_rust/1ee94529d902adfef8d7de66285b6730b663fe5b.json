{"sha": "1ee94529d902adfef8d7de66285b6730b663fe5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZTk0NTI5ZDkwMmFkZmVmOGQ3ZGU2NjI4NWI2NzMwYjY2M2ZlNWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-30T21:14:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-31T02:20:45Z"}, "message": "rustdoc: Various bits of modernization", "tree": {"sha": "5b48b85f4a0c2641dad2b7415f9a07233790bc74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b48b85f4a0c2641dad2b7415f9a07233790bc74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee94529d902adfef8d7de66285b6730b663fe5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee94529d902adfef8d7de66285b6730b663fe5b", "html_url": "https://github.com/rust-lang/rust/commit/1ee94529d902adfef8d7de66285b6730b663fe5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee94529d902adfef8d7de66285b6730b663fe5b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49472ec4c9d6564f8ec22d689ccd61528d2dc553", "url": "https://api.github.com/repos/rust-lang/rust/commits/49472ec4c9d6564f8ec22d689ccd61528d2dc553", "html_url": "https://github.com/rust-lang/rust/commit/49472ec4c9d6564f8ec22d689ccd61528d2dc553"}], "stats": {"total": 518, "additions": 259, "deletions": 259}, "files": [{"sha": "27c294510d7d45989e6023aba3f56b6b641d8a34", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -22,6 +22,7 @@ use core::prelude::*;\n use parse;\n use util;\n \n+use core::pipes::stream;\n use core::oldcomm;\n use core::vec;\n use rustc::back::link;\n@@ -62,18 +63,18 @@ impl Srv: Clone {\n }\n \n pub fn from_str<T>(source: ~str, owner: SrvOwner<T>) -> T {\n-    run(owner, source, parse::from_str_sess)\n+    run(owner, copy source, parse::from_str_sess)\n }\n \n pub fn from_file<T>(file: ~str, owner: SrvOwner<T>) -> T {\n-    run(owner, file, |sess, f| parse::from_file_sess(sess, &Path(f)))\n+    run(owner, copy file, |sess, f| parse::from_file_sess(sess, &Path(f)))\n }\n \n fn run<T>(owner: SrvOwner<T>, source: ~str, +parse: Parser) -> T {\n \n     let srv_ = Srv({\n-        ch: do util::spawn_listener |move parse, po| {\n-            act(po, source, parse);\n+        ch: do util::spawn_listener |copy source, move parse, po| {\n+            act(po, copy source, parse);\n         }\n     });\n \n@@ -87,7 +88,7 @@ fn act(po: oldcomm::Port<Msg>, source: ~str, parse: Parser) {\n \n     let ctxt = build_ctxt(\n         sess,\n-        parse(sess, source)\n+        parse(sess, copy source)\n     );\n \n     let mut keep_going = true;\n@@ -107,13 +108,12 @@ pub fn exec<T:Owned>(\n     srv: Srv,\n     +f: fn~(ctxt: Ctxt) -> T\n ) -> T {\n-    let po = oldcomm::Port();\n-    let ch = oldcomm::Chan(&po);\n+    let (po, ch) = stream();\n     let msg = HandleRequest(fn~(move f, ctxt: Ctxt) {\n-        oldcomm::send(ch, f(ctxt))\n+        ch.send(f(ctxt))\n     });\n     oldcomm::send(srv.ch, move msg);\n-    oldcomm::recv(po)\n+    po.recv()\n }\n \n fn build_ctxt(sess: Session,\n@@ -123,7 +123,7 @@ fn build_ctxt(sess: Session,\n \n     let ast = config::strip_unconfigured_items(ast);\n     let ast = syntax::ext::expand::expand_crate(sess.parse_sess,\n-                                                sess.opts.cfg, ast);\n+                                                copy sess.opts.cfg, ast);\n     let ast = front::test::modify_for_testing(sess, ast);\n     let ast_map = ast_map::map_crate(sess.diagnostic(), *ast);\n "}, {"sha": "3fac9ab2733f97663e209686365a60f16c8eccd2", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -65,17 +65,18 @@ fn fold_crate(\n     let doc = fold::default_seq_fold_crate(fold, doc);\n \n     let attrs = do astsrv::exec(srv) |ctxt| {\n-        let attrs = ctxt.ast.node.attrs;\n+        let attrs = copy ctxt.ast.node.attrs;\n         attr_parser::parse_crate(attrs)\n     };\n \n     doc::CrateDoc {\n         topmod: doc::ModDoc {\n             item: doc::ItemDoc {\n-                name: option::get_or_default(attrs.name, doc.topmod.name()),\n-                .. doc.topmod.item\n+                name: option::get_or_default(copy attrs.name,\n+                                             doc.topmod.name()),\n+                .. copy doc.topmod.item\n             },\n-            .. doc.topmod\n+            .. copy doc.topmod\n         }\n     }\n }\n@@ -97,7 +98,7 @@ fn fold_item(\n     let desc = if doc.id == ast::crate_node_id {\n         // This is the top-level mod, use the crate attributes\n         do astsrv::exec(srv) |ctxt| {\n-            attr_parser::parse_desc(ctxt.ast.node.attrs)\n+            attr_parser::parse_desc(copy ctxt.ast.node.attrs)\n         }\n     } else {\n         parse_item_attrs(srv, doc.id, attr_parser::parse_desc)\n@@ -115,8 +116,8 @@ fn parse_item_attrs<T:Owned>(\n     +parse_attrs: fn~(+a: ~[ast::attribute]) -> T) -> T {\n     do astsrv::exec(srv) |move parse_attrs, ctxt| {\n         let attrs = match ctxt.ast_map.get(id) {\n-          ast_map::node_item(item, _) => item.attrs,\n-          ast_map::node_foreign_item(item, _, _) => item.attrs,\n+          ast_map::node_item(item, _) => copy item.attrs,\n+          ast_map::node_foreign_item(item, _, _) => copy item.attrs,\n           _ => fail ~\"parse_item_attrs: not an item\"\n         };\n         parse_attrs(attrs)\n@@ -164,18 +165,18 @@ fn fold_enum(\n \n     doc::EnumDoc {\n         variants: do par::map(doc.variants) |variant| {\n-            let variant = *variant;\n-            let desc = do astsrv::exec(srv) |ctxt| {\n+            let variant = copy *variant;\n+            let desc = do astsrv::exec(srv) |ctxt, copy variant| {\n                 match ctxt.ast_map.get(doc_id) {\n                   ast_map::node_item(@ast::item {\n-                    node: ast::item_enum(enum_definition, _), _\n+                    node: ast::item_enum(ref enum_definition, _), _\n                   }, _) => {\n                     let ast_variant = option::get(\n                         vec::find(enum_definition.variants, |v| {\n                             to_str(v.node.name) == variant.name\n                         }));\n \n-                    attr_parser::parse_desc(ast_variant.node.attrs)\n+                    attr_parser::parse_desc(copy ast_variant.node.attrs)\n                   }\n                   _ => fail fmt!(\"Enum variant %s has id that's not bound \\\n                          to an enum item\", variant.name)\n@@ -212,7 +213,7 @@ fn fold_trait(\n     let doc = fold::default_seq_fold_trait(fold, doc);\n \n     doc::TraitDoc {\n-        methods: merge_method_attrs(srv, doc.id(), doc.methods),\n+        methods: merge_method_attrs(srv, doc.id(), copy doc.methods),\n         .. doc\n     }\n }\n@@ -227,25 +228,26 @@ fn merge_method_attrs(\n     let attrs: ~[(~str, Option<~str>)] = do astsrv::exec(srv) |ctxt| {\n         match ctxt.ast_map.get(item_id) {\n           ast_map::node_item(@ast::item {\n-            node: ast::item_trait(_, _, methods), _\n+            node: ast::item_trait(_, _, ref methods), _\n           }, _) => {\n-            vec::map(methods, |method| {\n-                match *method {\n+            vec::map(*methods, |method| {\n+                match copy *method {\n                   ast::required(ty_m) => {\n-                    (to_str(ty_m.ident), attr_parser::parse_desc(ty_m.attrs))\n+                    (to_str(ty_m.ident),\n+                     attr_parser::parse_desc(copy ty_m.attrs))\n                   }\n                   ast::provided(m) => {\n-                    (to_str(m.ident), attr_parser::parse_desc(m.attrs))\n+                    (to_str(m.ident), attr_parser::parse_desc(copy m.attrs))\n                   }\n                 }\n             })\n           }\n           ast_map::node_item(@ast::item {\n-            node: ast::item_impl(_, _, _, methods), _\n+            node: ast::item_impl(_, _, _, ref methods), _\n           }, _) => {\n-            vec::map(methods, |method| {\n+            vec::map(*methods, |method| {\n                 (to_str(method.ident),\n-                 attr_parser::parse_desc(method.attrs))\n+                 attr_parser::parse_desc(copy method.attrs))\n             })\n           }\n           _ => fail ~\"unexpected item\"\n@@ -258,7 +260,7 @@ fn merge_method_attrs(\n \n         doc::MethodDoc {\n             desc: desc,\n-            ..*doc\n+            .. copy *doc\n         }\n     }\n }\n@@ -288,7 +290,7 @@ fn fold_impl(\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     doc::ImplDoc {\n-        methods: merge_method_attrs(srv, doc.id(), doc.methods),\n+        methods: merge_method_attrs(srv, doc.id(), copy doc.methods),\n         .. doc\n     }\n }\n@@ -318,7 +320,7 @@ mod test {\n     use extract;\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n-        do astsrv::from_str(source) |srv| {\n+        do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)\n         }"}, {"sha": "12d7109c10686ea74be539eb9d0813adaea7f593", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -96,7 +96,7 @@ pub fn usage() {\n \n pub fn default_config(input_crate: &Path) -> Config {\n     Config {\n-        input_crate: *input_crate,\n+        input_crate: copy *input_crate,\n         output_dir: Path(\".\"),\n         output_format: PandocHtml,\n         output_style: DocPerMod,\n@@ -156,35 +156,35 @@ fn config_from_opts(\n         let output_dir = getopts::opt_maybe_str(matches, opt_output_dir());\n         let output_dir = output_dir.map(|s| Path(*s));\n         result::Ok(Config {\n-            output_dir: output_dir.get_or_default(config.output_dir),\n+            output_dir: output_dir.get_or_default(copy config.output_dir),\n             .. config\n         })\n     };\n     let result = do result::chain(result) |config| {\n         let output_format = getopts::opt_maybe_str(\n             matches, opt_output_format());\n-        do output_format.map_default(result::Ok(config))\n+        do output_format.map_default(result::Ok(copy config))\n             |output_format| {\n             do result::chain(parse_output_format(*output_format))\n                 |output_format| {\n \n                 result::Ok(Config {\n                     output_format: output_format,\n-                    .. config\n+                    .. copy config\n                 })\n             }\n         }\n     };\n     let result = do result::chain(result) |config| {\n         let output_style =\n             getopts::opt_maybe_str(matches, opt_output_style());\n-        do output_style.map_default(result::Ok(config))\n+        do output_style.map_default(result::Ok(copy config))\n             |output_style| {\n             do result::chain(parse_output_style(*output_style))\n                 |output_style| {\n                 result::Ok(Config {\n                     output_style: output_style,\n-                    .. config\n+                    .. copy config\n                 })\n             }\n         }\n@@ -197,7 +197,7 @@ fn config_from_opts(\n         do result::chain(pandoc_cmd) |pandoc_cmd| {\n             result::Ok(Config {\n                 pandoc_cmd: pandoc_cmd,\n-                .. config\n+                .. copy config\n             })\n         }\n     };"}, {"sha": "6d608c9ef7a4f6ba5a04c31eb1458c32778152e9", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -63,7 +63,7 @@ fn fold_trait(fold: &fold::Fold<()>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n     doc::TraitDoc {\n         methods: par::map(doc.methods, |doc| doc::MethodDoc {\n             brief: extract(doc.desc),\n-            .. *doc\n+            .. copy *doc\n         }),\n         .. doc\n     }\n@@ -75,7 +75,7 @@ fn fold_impl(fold: &fold::Fold<()>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n     doc::ImplDoc {\n         methods: par::map(doc.methods, |doc| doc::MethodDoc {\n             brief: extract(doc.desc),\n-            .. *doc\n+            .. copy *doc\n         }),\n         .. doc\n     }\n@@ -109,7 +109,7 @@ pub mod test {\n     use extract;\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n-        do astsrv::from_str(source) |srv| {\n+        do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);\n             run(srv, doc)\n@@ -122,14 +122,14 @@ fn extract(desc: Option<~str>) -> Option<~str> {\n         return None\n     }\n \n-    parse_desc(desc.get())\n+    parse_desc((copy desc).get())\n }\n \n fn parse_desc(desc: ~str) -> Option<~str> {\n \n     const max_brief_len: uint = 120u;\n \n-    match first_sentence(desc) {\n+    match first_sentence(copy desc) {\n       Some(first_sentence) => {\n         if str::len(first_sentence) <= max_brief_len {\n             Some(first_sentence)\n@@ -142,7 +142,7 @@ fn parse_desc(desc: ~str) -> Option<~str> {\n }\n \n fn first_sentence(s: ~str) -> Option<~str> {\n-    let paras = paragraphs(s);\n+    let paras = paragraphs(copy s);\n     if !paras.is_empty() {\n         let first_para = vec::head(paras);\n         Some(str::replace(first_sentence_(first_para), ~\"\\n\", ~\" \"))\n@@ -176,7 +176,7 @@ fn first_sentence_(s: ~str) -> ~str {\n         if str::ends_with(s, ~\".\") {\n             str::slice(s, 0u, str::len(s))\n         } else {\n-            s\n+            copy s\n         }\n       }\n     }\n@@ -202,7 +202,7 @@ fn paragraphs(s: ~str) -> ~[~str] {\n             whitespace_lines = 0;\n \n             accum = if str::is_empty(accum) {\n-                *line\n+                copy *line\n             } else {\n                 accum + ~\"\\n\" + *line\n             }"}, {"sha": "19e88625949e2427bc869f8f0997d849278f3709", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -177,23 +177,23 @@ pub struct IndexEntry {\n impl Doc {\n     fn CrateDoc() -> CrateDoc {\n         option::get(vec::foldl(None, self.pages, |_m, page| {\n-            match *page {\n+            match copy *page {\n               doc::CratePage(doc) => Some(doc),\n               _ => None\n             }\n         }))\n     }\n \n     fn cratemod() -> ModDoc {\n-        self.CrateDoc().topmod\n+        copy self.CrateDoc().topmod\n     }\n }\n \n /// Some helper methods on ModDoc, mostly for testing\n impl ModDoc {\n     fn mods() -> ~[ModDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n-            match *itemtag {\n+            match copy *itemtag {\n               ModTag(ModDoc) => Some(ModDoc),\n               _ => None\n             }\n@@ -202,7 +202,7 @@ impl ModDoc {\n \n     fn nmods() -> ~[NmodDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n-            match *itemtag {\n+            match copy *itemtag {\n               NmodTag(nModDoc) => Some(nModDoc),\n               _ => None\n             }\n@@ -211,7 +211,7 @@ impl ModDoc {\n \n     fn fns() -> ~[FnDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n-            match *itemtag {\n+            match copy *itemtag {\n               FnTag(FnDoc) => Some(FnDoc),\n               _ => None\n             }\n@@ -220,7 +220,7 @@ impl ModDoc {\n \n     fn consts() -> ~[ConstDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n-            match *itemtag {\n+            match copy *itemtag {\n               ConstTag(ConstDoc) => Some(ConstDoc),\n               _ => None\n             }\n@@ -229,7 +229,7 @@ impl ModDoc {\n \n     fn enums() -> ~[EnumDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n-            match *itemtag {\n+            match copy *itemtag {\n               EnumTag(EnumDoc) => Some(EnumDoc),\n               _ => None\n             }\n@@ -238,7 +238,7 @@ impl ModDoc {\n \n     fn traits() -> ~[TraitDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n-            match *itemtag {\n+            match copy *itemtag {\n               TraitTag(TraitDoc) => Some(TraitDoc),\n               _ => None\n             }\n@@ -247,7 +247,7 @@ impl ModDoc {\n \n     fn impls() -> ~[ImplDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n-            match *itemtag {\n+            match copy *itemtag {\n               ImplTag(ImplDoc) => Some(ImplDoc),\n               _ => None\n             }\n@@ -256,7 +256,7 @@ impl ModDoc {\n \n     fn types() -> ~[TyDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n-            match *itemtag {\n+            match copy *itemtag {\n               TyTag(TyDoc) => Some(TyDoc),\n               _ => None\n             }\n@@ -265,7 +265,7 @@ impl ModDoc {\n \n     fn structs() -> ~[StructDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n-            match *itemtag {\n+            match copy *itemtag {\n                 StructTag(StructDoc) => Some(StructDoc),\n                 _ => None\n             }\n@@ -288,7 +288,7 @@ impl ~[Page]: PageUtils {\n \n     fn mods(&self) -> ~[ModDoc] {\n         do vec::filter_map(*self) |page| {\n-            match *page {\n+            match copy *page {\n               ItemPage(ModTag(ModDoc)) => Some(ModDoc),\n               _ => None\n             }\n@@ -297,7 +297,7 @@ impl ~[Page]: PageUtils {\n \n     fn nmods(&self) -> ~[NmodDoc] {\n         do vec::filter_map(*self) |page| {\n-            match *page {\n+            match copy *page {\n               ItemPage(NmodTag(nModDoc)) => Some(nModDoc),\n               _ => None\n             }\n@@ -306,7 +306,7 @@ impl ~[Page]: PageUtils {\n \n     fn fns(&self) -> ~[FnDoc] {\n         do vec::filter_map(*self) |page| {\n-            match *page {\n+            match copy *page {\n               ItemPage(FnTag(FnDoc)) => Some(FnDoc),\n               _ => None\n             }\n@@ -315,7 +315,7 @@ impl ~[Page]: PageUtils {\n \n     fn consts(&self) -> ~[ConstDoc] {\n         do vec::filter_map(*self) |page| {\n-            match *page {\n+            match copy *page {\n               ItemPage(ConstTag(ConstDoc)) => Some(ConstDoc),\n               _ => None\n             }\n@@ -324,7 +324,7 @@ impl ~[Page]: PageUtils {\n \n     fn enums(&self) -> ~[EnumDoc] {\n         do vec::filter_map(*self) |page| {\n-            match *page {\n+            match copy *page {\n               ItemPage(EnumTag(EnumDoc)) => Some(EnumDoc),\n               _ => None\n             }\n@@ -333,7 +333,7 @@ impl ~[Page]: PageUtils {\n \n     fn traits(&self) -> ~[TraitDoc] {\n         do vec::filter_map(*self) |page| {\n-            match *page {\n+            match copy *page {\n               ItemPage(TraitTag(TraitDoc)) => Some(TraitDoc),\n               _ => None\n             }\n@@ -342,7 +342,7 @@ impl ~[Page]: PageUtils {\n \n     fn impls(&self) -> ~[ImplDoc] {\n         do vec::filter_map(*self) |page| {\n-            match *page {\n+            match copy *page {\n               ItemPage(ImplTag(ImplDoc)) => Some(ImplDoc),\n               _ => None\n             }\n@@ -351,7 +351,7 @@ impl ~[Page]: PageUtils {\n \n     fn types(&self) -> ~[TyDoc] {\n         do vec::filter_map(*self) |page| {\n-            match *page {\n+            match copy *page {\n               ItemPage(TyTag(TyDoc)) => Some(TyDoc),\n               _ => None\n             }\n@@ -365,46 +365,46 @@ pub trait Item {\n \n impl ItemTag: Item {\n     pure fn item(&self) -> ItemDoc {\n-        match *self {\n-          doc::ModTag(doc) => doc.item,\n-          doc::NmodTag(doc) => doc.item,\n-          doc::FnTag(doc) => doc.item,\n-          doc::ConstTag(doc) => doc.item,\n-          doc::EnumTag(doc) => doc.item,\n-          doc::TraitTag(doc) => doc.item,\n-          doc::ImplTag(doc) => doc.item,\n-          doc::TyTag(doc) => doc.item,\n-          doc::StructTag(doc) => doc.item\n+        match self {\n+          &doc::ModTag(ref doc) => copy doc.item,\n+          &doc::NmodTag(ref doc) => copy doc.item,\n+          &doc::FnTag(ref doc) => copy doc.item,\n+          &doc::ConstTag(ref doc) => copy doc.item,\n+          &doc::EnumTag(ref doc) => copy doc.item,\n+          &doc::TraitTag(ref doc) => copy doc.item,\n+          &doc::ImplTag(ref doc) => copy doc.item,\n+          &doc::TyTag(ref doc) => copy doc.item,\n+          &doc::StructTag(ref doc) => copy doc.item\n         }\n     }\n }\n \n impl SimpleItemDoc: Item {\n-    pure fn item(&self) -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl ModDoc: Item {\n-    pure fn item(&self) -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl NmodDoc: Item {\n-    pure fn item(&self) -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl EnumDoc: Item {\n-    pure fn item(&self) -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl TraitDoc: Item {\n-    pure fn item(&self) -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl ImplDoc: Item {\n-    pure fn item(&self) -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl StructDoc: Item {\n-    pure fn item(&self) -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n pub trait ItemUtils {\n@@ -422,22 +422,22 @@ impl<A:Item> A: ItemUtils {\n     }\n \n     pure fn name(&self) -> ~str {\n-        self.item().name\n+        copy self.item().name\n     }\n \n     pure fn path(&self) -> ~[~str] {\n-        self.item().path\n+        copy self.item().path\n     }\n \n     pure fn brief(&self) -> Option<~str> {\n-        self.item().brief\n+        copy self.item().brief\n     }\n \n     pure fn desc(&self) -> Option<~str> {\n-        self.item().desc\n+        copy self.item().desc\n     }\n \n     pure fn sections(&self) -> ~[Section] {\n-        self.item().sections\n+        copy self.item().sections\n     }\n }"}, {"sha": "593023ae467a9caa65dfa1aa1332a0dc8c766c31", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -34,7 +34,7 @@ macro_rules! interner_key (\n pub fn to_str(id: ast::ident) -> ~str {\n     let intr = unsafe{ local_data_get(interner_key!()) };\n \n-    return *(*intr.get()).get(id);\n+    return copy *(*intr.get()).get(id);\n }\n \n pub fn interner() -> @syntax::parse::token::ident_interner {\n@@ -49,7 +49,7 @@ pub fn from_srv(\n     //! Use the AST service to create a document tree\n \n     do astsrv::exec(srv) |ctxt| {\n-        extract(ctxt.ast, default_name)\n+        extract(ctxt.ast, copy default_name)\n     }\n }\n \n@@ -94,7 +94,7 @@ fn moddoc_from_mod(\n         item: itemdoc,\n         items: do vec::filter_map(module_.items) |item| {\n             let ItemDoc = mk_itemdoc(item.id, to_str(item.ident));\n-            match item.node {\n+            match copy item.node {\n               ast::item_mod(m) => {\n                 Some(doc::ModTag(\n                     moddoc_from_mod(ItemDoc, m)\n@@ -117,7 +117,7 @@ fn moddoc_from_mod(\n               }\n               ast::item_enum(enum_definition, _) => {\n                 Some(doc::EnumTag(\n-                    enumdoc_from_enum(ItemDoc, enum_definition.variants)\n+                    enumdoc_from_enum(ItemDoc, copy enum_definition.variants)\n                 ))\n               }\n               ast::item_trait(_, _, methods) => {\n@@ -233,7 +233,7 @@ fn traitdoc_from_trait(\n     doc::TraitDoc {\n         item: itemdoc,\n         methods: do vec::map(methods) |method| {\n-            match *method {\n+            match copy *method {\n               ast::required(ty_m) => {\n                 doc::MethodDoc {\n                     name: to_str(ty_m.ident),\n@@ -398,7 +398,7 @@ mod test {\n     pub fn extract_fns() {\n         let doc = mk_doc(\n             ~\"fn a() { } \\\n-             mod b {\n+              mod b { fn c() {\n              } }\");\n         assert doc.cratemod().fns()[0].name() == ~\"a\";\n         assert doc.cratemod().mods()[0].fns()[0].name() == ~\"c\";"}, {"sha": "2f1dbdf3f502e80f849adcb069617c15798c62c9", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -160,7 +160,7 @@ pub fn default_par_fold<T:Owned Clone>(+ctxt: T) -> Fold<T> {\n pub fn default_seq_fold_doc<T>(fold: &Fold<T>, +doc: doc::Doc) -> doc::Doc {\n     doc::Doc {\n         pages: do vec::map(doc.pages) |page| {\n-            match *page {\n+            match copy *page {\n               doc::CratePage(doc) => {\n                 doc::CratePage((fold.fold_crate)(fold, doc))\n               }\n@@ -178,7 +178,7 @@ pub fn default_seq_fold_crate<T>(\n     +doc: doc::CrateDoc\n ) -> doc::CrateDoc {\n     doc::CrateDoc {\n-        topmod: (fold.fold_mod)(fold, doc.topmod)\n+        topmod: (fold.fold_mod)(fold, copy doc.topmod)\n     }\n }\n \n@@ -195,9 +195,9 @@ pub fn default_any_fold_mod<T:Owned Clone>(\n ) -> doc::ModDoc {\n     let fold_copy = fold.clone();\n     doc::ModDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         items: par::map(doc.items, |ItemTag, move fold_copy| {\n-            fold_ItemTag(&fold_copy, *ItemTag)\n+            fold_ItemTag(&fold_copy, copy *ItemTag)\n         }),\n         .. doc\n     }\n@@ -208,9 +208,9 @@ pub fn default_seq_fold_mod<T>(\n     +doc: doc::ModDoc\n ) -> doc::ModDoc {\n     doc::ModDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         items: vec::map(doc.items, |ItemTag| {\n-            fold_ItemTag(fold, *ItemTag)\n+            fold_ItemTag(fold, copy *ItemTag)\n         }),\n         .. doc\n     }\n@@ -222,9 +222,9 @@ pub fn default_par_fold_mod<T:Owned Clone>(\n ) -> doc::ModDoc {\n     let fold_copy = fold.clone();\n     doc::ModDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         items: par::map(doc.items, |ItemTag, move fold_copy| {\n-            fold_ItemTag(&fold_copy, *ItemTag)\n+            fold_ItemTag(&fold_copy, copy *ItemTag)\n         }),\n         .. doc\n     }\n@@ -236,9 +236,9 @@ pub fn default_any_fold_nmod<T:Owned Clone>(\n ) -> doc::NmodDoc {\n     let fold_copy = fold.clone();\n     doc::NmodDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         fns: par::map(doc.fns, |FnDoc, move fold_copy| {\n-            (fold_copy.fold_fn)(&fold_copy, *FnDoc)\n+            (fold_copy.fold_fn)(&fold_copy, copy *FnDoc)\n         }),\n         .. doc\n     }\n@@ -249,9 +249,9 @@ pub fn default_seq_fold_nmod<T>(\n     +doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n     doc::NmodDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         fns: vec::map(doc.fns, |FnDoc| {\n-            (fold.fold_fn)(fold, *FnDoc)\n+            (fold.fold_fn)(fold, copy *FnDoc)\n         }),\n         .. doc\n     }\n@@ -263,9 +263,9 @@ pub fn default_par_fold_nmod<T:Owned Clone>(\n ) -> doc::NmodDoc {\n     let fold_copy = fold.clone();\n     doc::NmodDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         fns: par::map(doc.fns, |FnDoc, move fold_copy| {\n-            (fold_copy.fold_fn)(&fold_copy, *FnDoc)\n+            (fold_copy.fold_fn)(&fold_copy, copy *FnDoc)\n         }),\n         .. doc\n     }\n@@ -308,7 +308,7 @@ pub fn default_seq_fold_fn<T>(\n     +doc: doc::FnDoc\n ) -> doc::FnDoc {\n     doc::SimpleItemDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         .. doc\n     }\n }\n@@ -318,7 +318,7 @@ pub fn default_seq_fold_const<T>(\n     +doc: doc::ConstDoc\n ) -> doc::ConstDoc {\n     doc::SimpleItemDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         .. doc\n     }\n }\n@@ -328,7 +328,7 @@ pub fn default_seq_fold_enum<T>(\n     +doc: doc::EnumDoc\n ) -> doc::EnumDoc {\n     doc::EnumDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         .. doc\n     }\n }\n@@ -338,7 +338,7 @@ pub fn default_seq_fold_trait<T>(\n     +doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n     doc::TraitDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         .. doc\n     }\n }\n@@ -348,7 +348,7 @@ pub fn default_seq_fold_impl<T>(\n     +doc: doc::ImplDoc\n ) -> doc::ImplDoc {\n     doc::ImplDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         .. doc\n     }\n }\n@@ -358,7 +358,7 @@ pub fn default_seq_fold_type<T>(\n     +doc: doc::TyDoc\n ) -> doc::TyDoc {\n     doc::SimpleItemDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         .. doc\n     }\n }\n@@ -368,7 +368,7 @@ pub fn default_seq_fold_struct<T>(\n     +doc: doc::StructDoc\n ) -> doc::StructDoc {\n     doc::StructDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         .. doc\n     }\n }\n@@ -379,7 +379,7 @@ fn default_fold_should_produce_same_doc() {\n     let ast = parse::from_str(source);\n     let doc = extract::extract(ast, ~\"\");\n     let fld = default_seq_fold(());\n-    let folded = (fld.fold_doc)(&fld, doc);\n+    let folded = (fld.fold_doc)(&fld, copy doc);\n     assert doc == folded;\n }\n \n@@ -389,7 +389,7 @@ fn default_fold_should_produce_same_consts() {\n     let ast = parse::from_str(source);\n     let doc = extract::extract(ast, ~\"\");\n     let fld = default_seq_fold(());\n-    let folded = (fld.fold_doc)(&fld, doc);\n+    let folded = (fld.fold_doc)(&fld, copy doc);\n     assert doc == folded;\n }\n \n@@ -399,7 +399,7 @@ fn default_fold_should_produce_same_enums() {\n     let ast = parse::from_str(source);\n     let doc = extract::extract(ast, ~\"\");\n     let fld = default_seq_fold(());\n-    let folded = (fld.fold_doc)(&fld, doc);\n+    let folded = (fld.fold_doc)(&fld, copy doc);\n     assert doc == folded;\n }\n \n@@ -409,6 +409,6 @@ fn default_parallel_fold_should_produce_same_doc() {\n     let ast = parse::from_str(source);\n     let doc = extract::extract(ast, ~\"\");\n     let fld = default_par_fold(());\n-    let folded = (fld.fold_doc)(&fld, doc);\n+    let folded = (fld.fold_doc)(&fld, copy doc);\n     assert doc == folded;\n }"}, {"sha": "61da26b568d3e717af335a0e086e373a1a085956", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -29,7 +29,7 @@ pub fn mk_pass(+config: config::Config) -> Pass {\n     Pass {\n         name: ~\"markdown_index\",\n         f: fn~(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n-            run(srv, doc, config)\n+            run(srv, doc, copy config)\n         }\n     }\n }\n@@ -55,7 +55,7 @@ fn fold_mod(\n     let doc = fold::default_any_fold_mod(fold, doc);\n \n     doc::ModDoc {\n-        index: Some(build_mod_index(doc, fold.ctxt)),\n+        index: Some(build_mod_index(copy doc, copy fold.ctxt)),\n         .. doc\n     }\n }\n@@ -68,7 +68,7 @@ fn fold_nmod(\n     let doc = fold::default_any_fold_nmod(fold, doc);\n \n     doc::NmodDoc {\n-        index: Some(build_nmod_index(doc, fold.ctxt)),\n+        index: Some(build_nmod_index(copy doc, copy fold.ctxt)),\n         .. doc\n     }\n }\n@@ -79,7 +79,7 @@ fn build_mod_index(\n ) -> doc::Index {\n     doc::Index {\n         entries: par::map(doc.items, |doc| {\n-            item_to_entry(*doc, config)\n+            item_to_entry(copy *doc, copy config)\n         })\n     }\n }\n@@ -90,7 +90,7 @@ fn build_nmod_index(\n ) -> doc::Index {\n     doc::Index {\n         entries: par::map(doc.fns, |doc| {\n-            item_to_entry(doc::FnTag(*doc), config)\n+            item_to_entry(doc::FnTag(copy *doc), copy config)\n         })\n     }\n }\n@@ -110,8 +110,8 @@ fn item_to_entry(\n     };\n \n     doc::IndexEntry {\n-        kind: markdown_pass::header_kind(doc),\n-        name: markdown_pass::header_name(doc),\n+        kind: markdown_pass::header_kind(copy doc),\n+        name: markdown_pass::header_name(copy doc),\n         brief: doc.brief(),\n         link: link\n     }\n@@ -180,13 +180,13 @@ fn should_index_mod_contents() {\n         config::DocPerCrate,\n         ~\"mod a { } fn b() { }\"\n     );\n-    assert doc.cratemod().index.get().entries[0] == doc::IndexEntry {\n+    assert (&doc.cratemod().index).get().entries[0] == doc::IndexEntry {\n         kind: ~\"Module\",\n         name: ~\"a\",\n         brief: None,\n         link: ~\"#module-a\"\n     };\n-    assert doc.cratemod().index.get().entries[1] == doc::IndexEntry {\n+    assert (&doc.cratemod().index).get().entries[1] == doc::IndexEntry {\n         kind: ~\"Function\",\n         name: ~\"b\",\n         brief: None,\n@@ -200,13 +200,13 @@ fn should_index_mod_contents_multi_page() {\n         config::DocPerMod,\n         ~\"mod a { } fn b() { }\"\n     );\n-    assert doc.cratemod().index.get().entries[0] == doc::IndexEntry {\n+    assert (&doc.cratemod().index).get().entries[0] == doc::IndexEntry {\n         kind: ~\"Module\",\n         name: ~\"a\",\n         brief: None,\n         link: ~\"a.html\"\n     };\n-    assert doc.cratemod().index.get().entries[1] == doc::IndexEntry {\n+    assert (&doc.cratemod().index).get().entries[1] == doc::IndexEntry {\n         kind: ~\"Function\",\n         name: ~\"b\",\n         brief: None,\n@@ -220,7 +220,7 @@ fn should_index_foreign_mod_pages() {\n         config::DocPerMod,\n         ~\"extern mod a { }\"\n     );\n-    assert doc.cratemod().index.get().entries[0] == doc::IndexEntry {\n+    assert (&doc.cratemod().index).get().entries[0] == doc::IndexEntry {\n         kind: ~\"Foreign module\",\n         name: ~\"a\",\n         brief: None,\n@@ -234,7 +234,7 @@ fn should_add_brief_desc_to_index() {\n         config::DocPerMod,\n         ~\"#[doc = \\\"test\\\"] mod a { }\"\n     );\n-    assert doc.cratemod().index.get().entries[0].brief\n+    assert (&doc.cratemod().index).get().entries[0].brief\n         == Some(~\"test\");\n }\n \n@@ -244,7 +244,7 @@ fn should_index_foreign_mod_contents() {\n         config::DocPerCrate,\n         ~\"extern mod a { fn b(); }\"\n     );\n-    assert doc.cratemod().nmods()[0].index.get().entries[0]\n+    assert (&doc.cratemod().nmods()[0].index).get().entries[0]\n         == doc::IndexEntry {\n         kind: ~\"Function\",\n         name: ~\"b\","}, {"sha": "d1ae5d4ecf36928ca5e308c0189dc2fb4fd35cce", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -76,7 +76,7 @@ fn run(\n     // makes the headers come out nested correctly.\n     let sorted_doc = (sort_pass::mk_pass(\n         ~\"mods last\", mods_last\n-    ).f)(srv, doc);\n+    ).f)(srv, copy doc);\n \n     write_markdown(sorted_doc, move writer_factory);\n \n@@ -123,15 +123,15 @@ pub fn write_markdown(\n     // (See #2484, which is closed.)\n     do doc.pages.map |page| {\n         let ctxt = {\n-            w: writer_factory(*page)\n+            w: writer_factory(copy *page)\n         };\n         write_page(&ctxt, page)\n     };\n }\n \n fn write_page(ctxt: &Ctxt, page: &doc::Page) {\n-    write_title(ctxt, *page);\n-    match *page {\n+    write_title(ctxt, copy *page);\n+    match copy *page {\n       doc::CratePage(doc) => {\n         write_crate(ctxt, doc);\n       }\n@@ -167,7 +167,7 @@ fn write_title(ctxt: &Ctxt, +page: doc::Page) {\n fn make_title(+page: doc::Page) -> ~str {\n     let item = match page {\n       doc::CratePage(CrateDoc) => {\n-        doc::ModTag(CrateDoc.topmod)\n+        doc::ModTag(copy CrateDoc.topmod)\n       }\n       doc::ItemPage(ItemTag) => {\n         ItemTag\n@@ -254,16 +254,16 @@ pub fn header_kind(+doc: doc::ItemTag) -> ~str {\n \n pub fn header_name(+doc: doc::ItemTag) -> ~str {\n     let fullpath = str::connect(doc.path() + ~[doc.name()], ~\"::\");\n-    match doc {\n-      doc::ModTag(_) if doc.id() != syntax::ast::crate_node_id => {\n+    match &doc {\n+      &doc::ModTag(_) if doc.id() != syntax::ast::crate_node_id => {\n         fullpath\n       }\n-      doc::NmodTag(_) => {\n+      &doc::NmodTag(_) => {\n         fullpath\n       }\n-      doc::ImplTag(doc) => {\n+      &doc::ImplTag(ref doc) => {\n         assert doc.self_ty.is_some();\n-        let self_ty = doc.self_ty.get();\n+        let self_ty = (&doc.self_ty).get();\n         let mut trait_part = ~\"\";\n         for doc.trait_types.eachi |i, trait_type| {\n             if i == 0 {\n@@ -282,14 +282,14 @@ pub fn header_name(+doc: doc::ItemTag) -> ~str {\n }\n \n pub fn header_text(+doc: doc::ItemTag) -> ~str {\n-    match doc {\n-      doc::ImplTag(ImplDoc) => {\n-        let header_kind = header_kind(doc);\n+    match &doc {\n+      &doc::ImplTag(ref ImplDoc) => {\n+        let header_kind = header_kind(copy doc);\n         let desc = if ImplDoc.trait_types.is_empty() {\n-            fmt!(\"for `%s`\", ImplDoc.self_ty.get())\n+            fmt!(\"for `%s`\", (&ImplDoc.self_ty).get())\n         } else {\n             fmt!(\"of `%s` for `%s`\", ImplDoc.trait_types[0],\n-                 ImplDoc.self_ty.get())\n+                 (&ImplDoc.self_ty).get())\n         };\n         fmt!(\"%s %s\", header_kind, desc)\n       }\n@@ -307,7 +307,7 @@ fn write_crate(\n     ctxt: &Ctxt,\n     +doc: doc::CrateDoc\n ) {\n-    write_top_module(ctxt, doc.topmod);\n+    write_top_module(ctxt, copy doc.topmod);\n }\n \n fn write_top_module(\n@@ -354,13 +354,13 @@ fn write_desc(\n \n fn write_sections(ctxt: &Ctxt, sections: &[doc::Section]) {\n     for vec::each(sections) |section| {\n-        write_section(ctxt, *section);\n+        write_section(ctxt, copy *section);\n     }\n }\n \n fn write_section(ctxt: &Ctxt, +section: doc::Section) {\n-    write_header_(ctxt, H4, section.header);\n-    ctxt.w.write_line(section.body);\n+    write_header_(ctxt, H4, copy section.header);\n+    ctxt.w.write_line(copy section.body);\n     ctxt.w.write_line(~\"\");\n }\n \n@@ -381,11 +381,11 @@ fn write_mod_contents(\n ) {\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n     if doc.index.is_some() {\n-        write_index(ctxt, doc.index.get());\n+        write_index(ctxt, (&doc.index).get());\n     }\n \n     for doc.items.each |itemTag| {\n-        write_item(ctxt, *itemTag);\n+        write_item(ctxt, copy *itemTag);\n     }\n }\n \n@@ -399,7 +399,7 @@ fn write_item_no_header(ctxt: &Ctxt, +doc: doc::ItemTag) {\n \n fn write_item_(ctxt: &Ctxt, +doc: doc::ItemTag, write_header: bool) {\n     if write_header {\n-        write_item_header(ctxt, doc);\n+        write_item_header(ctxt, copy doc);\n     }\n \n     match doc {\n@@ -439,10 +439,10 @@ fn write_index(ctxt: &Ctxt, +index: doc::Index) {\n \n     for index.entries.each |entry| {\n         let header = header_text_(entry.kind, entry.name);\n-        let id = entry.link;\n+        let id = copy entry.link;\n         if entry.brief.is_some() {\n             ctxt.w.write_line(fmt!(\"* [%s](%s) - %s\",\n-                                   header, id, entry.brief.get()));\n+                                   header, id, (&entry.brief).get()));\n         } else {\n             ctxt.w.write_line(fmt!(\"* [%s](%s)\", header, id));\n         }\n@@ -484,12 +484,12 @@ fn should_write_index_for_foreign_mods() {\n fn write_nmod(ctxt: &Ctxt, +doc: doc::NmodDoc) {\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n     if doc.index.is_some() {\n-        write_index(ctxt, doc.index.get());\n+        write_index(ctxt, (&doc.index).get());\n     }\n \n     for doc.fns.each |FnDoc| {\n-        write_item_header(ctxt, doc::FnTag(*FnDoc));\n-        write_fn(ctxt, *FnDoc);\n+        write_item_header(ctxt, doc::FnTag(copy *FnDoc));\n+        write_fn(ctxt, copy *FnDoc);\n     }\n }\n \n@@ -520,7 +520,7 @@ fn write_fn(\n ) {\n     write_fnlike(\n         ctxt,\n-        doc.sig,\n+        copy doc.sig,\n         doc.desc(),\n         doc.sections()\n     );\n@@ -579,7 +579,7 @@ fn should_correctly_indent_fn_signature() {\n                 topmod: doc::ModDoc{\n                     items: ~[doc::FnTag(doc::SimpleItemDoc{\n                         sig: Some(~\"line 1\\nline 2\"),\n-                        .. doc.cratemod().fns()[0]\n+                        .. copy doc.cratemod().fns()[0]\n                     })],\n                     .. doc.cratemod()\n                 },\n@@ -601,7 +601,7 @@ fn write_const(\n     ctxt: &Ctxt,\n     +doc: doc::ConstDoc\n ) {\n-    write_sig(ctxt, doc.sig);\n+    write_sig(ctxt, copy doc.sig);\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n }\n \n@@ -651,16 +651,16 @@ fn write_variants(\n     write_header_(ctxt, H4, ~\"Variants\");\n \n     for vec::each(docs) |variant| {\n-        write_variant(ctxt, *variant);\n+        write_variant(ctxt, copy *variant);\n     }\n \n     ctxt.w.write_line(~\"\");\n }\n \n fn write_variant(ctxt: &Ctxt, +doc: doc::VariantDoc) {\n     assert doc.sig.is_some();\n-    let sig = doc.sig.get();\n-    match doc.desc {\n+    let sig = (&doc.sig).get();\n+    match copy doc.desc {\n       Some(desc) => {\n         ctxt.w.write_line(fmt!(\"* `%s` - %s\", sig, desc));\n       }\n@@ -710,16 +710,16 @@ fn write_trait(ctxt: &Ctxt, +doc: doc::TraitDoc) {\n \n fn write_methods(ctxt: &Ctxt, docs: &[doc::MethodDoc]) {\n     for vec::each(docs) |doc| {\n-        write_method(ctxt, *doc);\n+        write_method(ctxt, copy *doc);\n     }\n }\n \n fn write_method(ctxt: &Ctxt, +doc: doc::MethodDoc) {\n     write_header_(ctxt, H3, header_text_(~\"Method\", doc.name));\n     write_fnlike(\n         ctxt,\n-        doc.sig,\n-        doc.desc,\n+        copy doc.sig,\n+        copy doc.desc,\n         doc.sections\n     );\n }\n@@ -793,7 +793,7 @@ fn write_type(\n     ctxt: &Ctxt,\n     +doc: doc::TyDoc\n ) {\n-    write_sig(ctxt, doc.sig);\n+    write_sig(ctxt, copy doc.sig);\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n }\n \n@@ -820,7 +820,7 @@ fn write_struct(\n     ctxt: &Ctxt,\n     +doc: doc::StructDoc\n ) {\n-    write_sig(ctxt, doc.sig);\n+    write_sig(ctxt, copy doc.sig);\n     write_oldcommon(ctxt, doc.desc(), doc.sections());\n }\n "}, {"sha": "406ff5d0604a1420dcf3c3037c8ea1d1096b7b1e", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -70,13 +70,13 @@ pub fn make_writer_factory(+config: config::Config) -> WriterFactory {\n \n fn markdown_writer_factory(+config: config::Config) -> WriterFactory {\n     fn~(+page: doc::Page) -> Writer {\n-        markdown_writer(config, page)\n+        markdown_writer(copy config, page)\n     }\n }\n \n fn pandoc_writer_factory(+config: config::Config) -> WriterFactory {\n     fn~(+page: doc::Page) -> Writer {\n-        pandoc_writer(config, page)\n+        pandoc_writer(copy config, page)\n     }\n }\n \n@@ -95,7 +95,7 @@ fn pandoc_writer(\n     +page: doc::Page\n ) -> Writer {\n     assert config.pandoc_cmd.is_some();\n-    let pandoc_cmd = config.pandoc_cmd.get();\n+    let pandoc_cmd = (&config.pandoc_cmd).get();\n     let filename = make_local_filename(config, page);\n \n     let pandoc_args = ~[\n@@ -195,7 +195,7 @@ fn make_local_filename(\n     +config: config::Config,\n     +page: doc::Page\n ) -> Path {\n-    let filename = make_filename(config, page);\n+    let filename = make_filename(copy config, page);\n     config.output_dir.push_rel(&filename)\n }\n \n@@ -264,7 +264,7 @@ fn should_name_mod_file_names_by_path() {\n         .. config::default_config(&Path(\"input/test.rc\"))\n     };\n     let doc = test::mk_doc(~\"\", ~\"mod a { mod b { } }\");\n-    let modb = doc.cratemod().mods()[0].mods()[0];\n+    let modb = copy doc.cratemod().mods()[0].mods()[0];\n     let page = doc::ItemPage(doc::ModTag(modb));\n     let filename = make_local_filename(config, page);\n     assert  filename == Path(\"output/dir/a_b.html\");\n@@ -279,7 +279,7 @@ mod test {\n \n     pub fn mk_doc(+name: ~str, +source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n-            let doc = extract::from_srv(srv, name);\n+            let doc = extract::from_srv(srv, copy name);\n             let doc = (path_pass::mk_pass().f)(srv, doc);\n             doc\n         }\n@@ -307,7 +307,7 @@ pub fn future_writer_factory(\n             let (writer, future) = future_writer();\n             writer_ch.send(move writer);\n             let s = future.get();\n-            oldcomm::send(markdown_ch, (page, s));\n+            oldcomm::send(markdown_ch, (copy page, s));\n         }\n         writer_po.recv()\n     };"}, {"sha": "3597a2d1e6b398699c48ed3dca13a0b7d0b41afb", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -88,7 +88,7 @@ fn find_pages(doc: doc::Doc, page_chan: PageChan) {\n         fold_nmod: fold_nmod,\n         .. fold::default_any_fold(NominalOp { op: page_chan })\n     };\n-    (fold.fold_doc)(&fold, doc);\n+    (fold.fold_doc)(&fold, copy doc);\n \n     oldcomm::send(page_chan, None);\n }\n@@ -102,7 +102,7 @@ fn fold_crate(\n \n     let page = doc::CratePage(doc::CrateDoc {\n         topmod: strip_mod(doc.topmod),\n-        .. doc\n+        .. copy doc\n     });\n \n     oldcomm::send(fold.ctxt.op, Some(page));\n@@ -136,7 +136,7 @@ fn strip_mod(doc: doc::ModDoc) -> doc::ModDoc {\n               _ => true\n             }\n         },\n-        .. doc\n+        .. copy doc\n     }\n }\n \n@@ -145,7 +145,7 @@ fn fold_nmod(\n     +doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n     let doc = fold::default_seq_fold_nmod(fold, doc);\n-    let page = doc::ItemPage(doc::NmodTag(doc));\n+    let page = doc::ItemPage(doc::NmodTag(copy doc));\n     oldcomm::send(fold.ctxt.op, Some(page));\n     return doc;\n }\n@@ -195,13 +195,13 @@ mod test {\n         output_style: config::OutputStyle,\n         source: ~str\n     ) -> doc::Doc {\n-        do astsrv::from_str(source) |srv| {\n+        do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc, output_style)\n         }\n     }\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n-        mk_doc_(config::DocPerMod, source)\n+        mk_doc_(config::DocPerMod, copy source)\n     }\n }"}, {"sha": "6648a3a49830e4aa33ec362dbb1ded3736ac3ebe", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -32,12 +32,12 @@ pub fn from_str(+source: ~str) -> @ast::crate {\n \n pub fn from_file_sess(sess: session::Session, file: &Path) -> @ast::crate {\n     parse::parse_crate_from_file(\n-        file, cfg(sess, file_input(*file)), sess.parse_sess)\n+        file, cfg(sess, file_input(copy *file)), sess.parse_sess)\n }\n \n pub fn from_str_sess(sess: session::Session, +source: ~str) -> @ast::crate {\n     parse::parse_crate_from_source_str(\n-        ~\"-\", @source, cfg(sess, str_input(source)), sess.parse_sess)\n+        ~\"-\", @copy source, cfg(sess, str_input(source)), sess.parse_sess)\n }\n \n fn cfg(sess: session::Session, +input: driver::input) -> ast::crate_cfg {"}, {"sha": "2ed937ee41206272ddc05a10a3af26ed304bd53b", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -32,9 +32,8 @@ pub fn run_passes(\n     do vec::foldl(doc, passes) |doc, pass| {\n         log(debug, fmt!(\"pass #%d\", passno));\n         passno += 1;\n-        log(debug, doc);\n-        do time(pass.name) {\n-            (pass.f)(srv, doc)\n+        do time(copy pass.name) {\n+            (pass.f)(srv, copy doc)\n         }\n     }\n }\n@@ -51,7 +50,7 @@ fn test_run_passes() {\n                     topmod: doc::ModDoc{\n                         item: doc::ItemDoc {\n                             name: doc.cratemod().name() + ~\"two\",\n-                            .. doc.cratemod().item\n+                            .. copy doc.cratemod().item\n                         },\n                         items: ~[],\n                         index: None\n@@ -70,7 +69,7 @@ fn test_run_passes() {\n                     topmod: doc::ModDoc{\n                         item: doc::ItemDoc {\n                             name: doc.cratemod().name() + ~\"three\",\n-                            .. doc.cratemod().item\n+                            .. copy doc.cratemod().item\n                         },\n                         items: ~[],\n                         index: None"}, {"sha": "a69999b36fe989e5ad45a39bb50ca2ab5da99338", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -55,7 +55,7 @@ fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n \n fn fold_item(fold: &fold::Fold<Ctxt>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n     doc::ItemDoc {\n-        path: fold.ctxt.path,\n+        path: copy fold.ctxt.path,\n         .. doc\n     }\n }\n@@ -69,7 +69,7 @@ fn fold_mod(fold: &fold::Fold<Ctxt>, +doc: doc::ModDoc) -> doc::ModDoc {\n     if !is_topmod { fold.ctxt.path.pop(); }\n \n     doc::ModDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         .. doc\n     }\n }\n@@ -80,7 +80,7 @@ fn fold_nmod(fold: &fold::Fold<Ctxt>, +doc: doc::NmodDoc) -> doc::NmodDoc {\n     fold.ctxt.path.pop();\n \n     doc::NmodDoc {\n-        item: (fold.fold_item)(fold, doc.item),\n+        item: (fold.fold_item)(fold, copy doc.item),\n         .. doc\n     }\n }"}, {"sha": "40141542250b4e745ee9fe3f4c63b27bdf84adab", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -56,7 +56,7 @@ fn is_hidden(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n     let id = doc.id;\n     do astsrv::exec(srv) |ctxt| {\n         let attrs = match ctxt.ast_map.get(id) {\n-          ast_map::node_item(item, _) => item.attrs,\n+          ast_map::node_item(item, _) => copy item.attrs,\n           _ => ~[]\n         };\n         attr_parser::parse_hidden(attrs)\n@@ -77,7 +77,7 @@ pub mod test {\n     use prune_hidden_pass::run;\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n-        do astsrv::from_str(source) |srv| {\n+        do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)\n         }"}, {"sha": "1cf984e5fc517000f452c551c83e500f1da8d897", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -81,7 +81,7 @@ pub mod test {\n     use prune_private_pass::run;\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n-        do astsrv::from_str(source) |srv| {\n+        do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)\n         }"}, {"sha": "50147e000a1e33aabcd4ad8e6b5b34201cdbdc2e", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -23,10 +23,8 @@\n #[legacy_modes];\n #[legacy_records];\n \n-#[allow(vecs_implicitly_copyable)];\n #[allow(non_implicitly_copyable_typarams)];\n #[allow(deprecated_mode)];\n-#[allow(deprecated_pattern)];\n #[allow(deprecated_self)];\n \n extern mod core(vers = \"0.6\");\n@@ -93,7 +91,7 @@ fn main() {\n /// Runs rustdoc over the given file\n fn run(config: Config) {\n \n-    let source_file = config.input_crate;\n+    let source_file = copy config.input_crate;\n \n     // Create an AST service from the source code\n     do astsrv::from_file(source_file.to_str()) |srv| {\n@@ -106,7 +104,7 @@ fn run(config: Config) {\n         // Extract the initial doc tree from the AST. This contains\n         // just names and node ids.\n         let doc = time(~\"extract\", || {\n-            let default_name = source_file;\n+            let default_name = copy source_file;\n             extract::from_srv(srv, default_name.to_str())\n         });\n \n@@ -138,13 +136,13 @@ fn run(config: Config) {\n             // Sort items again by kind\n             sort_item_type_pass::mk_pass(),\n             // Create indexes appropriate for markdown\n-            markdown_index_pass::mk_pass(config),\n+            markdown_index_pass::mk_pass(copy config),\n             // Break the document into pages if required by the\n             // output format\n             page_pass::mk_pass(config.output_style),\n             // Render\n             markdown_pass::mk_pass(\n-                markdown_writer::make_writer_factory(config)\n+                markdown_writer::make_writer_factory(copy config)\n             )\n         ]);\n     }"}, {"sha": "d448ea63326b11bb8f40f1c69487b06e4f10eef0", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -63,7 +63,7 @@ fn fold_trait(fold: &fold::Fold<()>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n             doc::MethodDoc {\n                 desc: desc,\n                 sections: sections,\n-                .. *method\n+                .. copy *method\n             }\n         },\n         .. doc\n@@ -80,7 +80,7 @@ fn fold_impl(fold: &fold::Fold<()>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n             doc::MethodDoc {\n                 desc: desc,\n                 sections: sections,\n-                .. *method\n+                .. copy *method\n             }\n         },\n         .. doc\n@@ -109,17 +109,17 @@ fn sectionalize(desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n         return (None, ~[]);\n     }\n \n-    let lines = str::lines(desc.get());\n+    let lines = str::lines((copy desc).get());\n \n     let mut new_desc = None::<~str>;\n     let mut current_section = None;\n     let mut sections = ~[];\n \n     for lines.each |line| {\n-        match parse_header(*line) {\n+        match parse_header(copy *line) {\n           Some(header) => {\n             if current_section.is_some() {\n-                sections += ~[current_section.get()];\n+                sections += ~[(&current_section).get()];\n             }\n             current_section = Some(doc::Section {\n                 header: header,\n@@ -135,12 +135,12 @@ fn sectionalize(desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n                 });\n               }\n               None => {\n-                new_desc = match new_desc {\n+                new_desc = match copy new_desc {\n                   Some(desc) => {\n                     Some(desc + ~\"\\n\" + *line)\n                   }\n                   None => {\n-                    Some(*line)\n+                    Some(copy *line)\n                   }\n                 };\n               }\n@@ -260,7 +260,7 @@ pub mod test {\n     use sectionalize_pass::run;\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n-        do astsrv::from_str(source) |srv| {\n+        do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);\n             run(srv, doc)"}, {"sha": "9f4a8c8b4984485a1a621ef8794fe28d8a14a07f", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -29,7 +29,7 @@ type ItemLtEq = NominalOp<ItemLtEqOp>;\n \n pub fn mk_pass(name: ~str, +lteq: ItemLtEqOp) -> Pass {\n     Pass {\n-        name: name,\n+        name: copy name,\n         f: fn~(move lteq, srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, NominalOp { op: copy lteq })\n         }"}, {"sha": "8d9df6d4c504824178bfde532f7dceaef45dee8f", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -24,7 +24,7 @@ use std::par;\n \n pub fn mk_pass(name: ~str, +op: fn~(~str) -> ~str) -> Pass {\n     Pass {\n-        name: name,\n+        name: copy name,\n         f: fn~(move op, srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, copy op)\n         }\n@@ -53,7 +53,7 @@ fn run(\n }\n \n fn maybe_apply_op(op: NominalOp<Op>, s: Option<~str>) -> Option<~str> {\n-    s.map(|s| (op.op)(*s) )\n+    s.map(|s| (op.op)(copy *s) )\n }\n \n fn fold_item(\n@@ -65,7 +65,7 @@ fn fold_item(\n     doc::ItemDoc {\n         brief: maybe_apply_op(fold.ctxt, doc.brief),\n         desc: maybe_apply_op(fold.ctxt, doc.desc),\n-        sections: apply_to_sections(fold.ctxt, doc.sections),\n+        sections: apply_to_sections(fold.ctxt, copy doc.sections),\n         .. doc\n     }\n }\n@@ -75,8 +75,8 @@ fn apply_to_sections(\n     sections: ~[doc::Section]\n ) -> ~[doc::Section] {\n     par::map(sections, |section, copy op| doc::Section {\n-        header: (op.op)(section.header),\n-        body: (op.op)(section.body)\n+        header: (op.op)(copy section.header),\n+        body: (op.op)(copy section.body)\n     })\n }\n \n@@ -90,7 +90,7 @@ fn fold_enum(\n         variants: do par::map(doc.variants) |variant, copy fold_copy| {\n             doc::VariantDoc {\n                 desc: maybe_apply_op(fold_copy.ctxt, variant.desc),\n-                .. *variant\n+                .. copy *variant\n             }\n         },\n         .. doc\n@@ -104,7 +104,7 @@ fn fold_trait(\n     let doc = fold::default_seq_fold_trait(fold, doc);\n \n     doc::TraitDoc {\n-        methods: apply_to_methods(fold.ctxt, doc.methods),\n+        methods: apply_to_methods(fold.ctxt, copy doc.methods),\n         .. doc\n     }\n }\n@@ -117,8 +117,8 @@ fn apply_to_methods(\n         doc::MethodDoc {\n             brief: maybe_apply_op(op, doc.brief),\n             desc: maybe_apply_op(op, doc.desc),\n-            sections: apply_to_sections(op, doc.sections),\n-            .. *doc\n+            sections: apply_to_sections(op, copy doc.sections),\n+            .. copy *doc\n         }\n     }\n }\n@@ -130,7 +130,7 @@ fn fold_impl(\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     doc::ImplDoc {\n-        methods: apply_to_methods(fold.ctxt, doc.methods),\n+        methods: apply_to_methods(fold.ctxt, copy doc.methods),\n         .. doc\n     }\n }\n@@ -302,7 +302,7 @@ mod test {\n     use core::str;\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n-        do astsrv::from_str(source) |srv| {\n+        do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);\n             let doc = (desc_to_brief_pass::mk_pass().f)(srv, doc);"}, {"sha": "bac69e328481c125bdb0c508dc45ace3458112bd", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -44,7 +44,7 @@ mod test {\n     use trim_pass::mk_pass;\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n-        do astsrv::from_str(source) |srv| {\n+        do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);\n             (mk_pass().f)(srv, doc)"}, {"sha": "44fc994ed4b1000f8e7e380cef89305c5c92b376", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -70,13 +70,14 @@ fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n         match ctxt.ast_map.get(fn_id) {\n           ast_map::node_item(@ast::item {\n             ident: ident,\n-            node: ast::item_fn(decl, _, tys, _), _\n+            node: ast::item_fn(ref decl, _, ref tys, _), _\n           }, _) |\n           ast_map::node_foreign_item(@ast::foreign_item {\n             ident: ident,\n-            node: ast::foreign_item_fn(decl, _, tys), _\n+            node: ast::foreign_item_fn(ref decl, _, ref tys), _\n           }, _, _) => {\n-            Some(pprust::fun_to_str(decl, ident, tys, extract::interner()))\n+            Some(pprust::fun_to_str(*decl, ident, copy *tys,\n+                                    extract::interner()))\n           }\n           _ => fail ~\"get_fn_sig: fn_id not bound to a fn item\"\n         }\n@@ -102,7 +103,7 @@ fn fold_const(\n     let srv = fold.ctxt;\n \n     doc::SimpleItemDoc {\n-        sig: Some(do astsrv::exec(srv) |ctxt| {\n+        sig: Some(do astsrv::exec(srv) |copy doc, ctxt| {\n             match ctxt.ast_map.get(doc.id()) {\n               ast_map::node_item(@ast::item {\n                 node: ast::item_const(ty, _), _\n@@ -131,11 +132,11 @@ fn fold_enum(\n \n     doc::EnumDoc {\n         variants: do par::map(doc.variants) |variant| {\n-            let variant = *variant;\n-            let sig = do astsrv::exec(srv) |ctxt| {\n+            let variant = copy *variant;\n+            let sig = do astsrv::exec(srv) |copy variant, ctxt| {\n                 match ctxt.ast_map.get(doc_id) {\n                   ast_map::node_item(@ast::item {\n-                    node: ast::item_enum(enum_definition, _), _\n+                    node: ast::item_enum(ref enum_definition, _), _\n                   }, _) => {\n                     let ast_variant =\n                         do vec::find(enum_definition.variants) |v| {\n@@ -168,7 +169,7 @@ fn fold_trait(\n     +doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n     doc::TraitDoc {\n-        methods: merge_methods(fold.ctxt, doc.id(), doc.methods),\n+        methods: merge_methods(fold.ctxt, doc.id(), copy doc.methods),\n         .. doc\n     }\n }\n@@ -180,8 +181,8 @@ fn merge_methods(\n ) -> ~[doc::MethodDoc] {\n     do par::map(docs) |doc| {\n         doc::MethodDoc {\n-            sig: get_method_sig(srv, item_id, doc.name),\n-            .. *doc\n+            sig: get_method_sig(srv, item_id, copy doc.name),\n+            .. copy *doc\n         }\n     }\n }\n@@ -191,13 +192,13 @@ fn get_method_sig(\n     item_id: doc::AstId,\n     method_name: ~str\n ) -> Option<~str> {\n-    do astsrv::exec(srv) |ctxt| {\n+    do astsrv::exec(srv) |copy method_name, ctxt| {\n         match ctxt.ast_map.get(item_id) {\n           ast_map::node_item(@ast::item {\n-            node: ast::item_trait(_, _, methods), _\n+            node: ast::item_trait(_, _, ref methods), _\n           }, _) => {\n-            match vec::find(methods, |method| {\n-                match *method {\n+            match vec::find(*methods, |method| {\n+                match copy *method {\n                   ast::required(ty_m) => to_str(ty_m.ident) == method_name,\n                   ast::provided(m) => to_str(m.ident) == method_name,\n                 }\n@@ -208,15 +209,15 @@ fn get_method_sig(\n                       Some(pprust::fun_to_str(\n                           ty_m.decl,\n                           ty_m.ident,\n-                          ty_m.tps,\n+                          copy ty_m.tps,\n                           extract::interner()\n                       ))\n                     }\n                     ast::provided(m) => {\n                       Some(pprust::fun_to_str(\n                           m.decl,\n                           m.ident,\n-                          m.tps,\n+                          copy m.tps,\n                           extract::interner()\n                       ))\n                     }\n@@ -226,16 +227,16 @@ fn get_method_sig(\n             }\n           }\n           ast_map::node_item(@ast::item {\n-            node: ast::item_impl(_, _, _, methods), _\n+            node: ast::item_impl(_, _, _, ref methods), _\n           }, _) => {\n-            match vec::find(methods, |method| {\n+            match vec::find(*methods, |method| {\n                 to_str(method.ident) == method_name\n             }) {\n                 Some(method) => {\n                     Some(pprust::fun_to_str(\n                         method.decl,\n                         method.ident,\n-                        method.tps,\n+                        copy method.tps,\n                         extract::interner()\n                     ))\n                 }\n@@ -261,7 +262,7 @@ fn fold_impl(\n \n     let srv = fold.ctxt;\n \n-    let (trait_types, self_ty) = do astsrv::exec(srv) |ctxt| {\n+    let (trait_types, self_ty) = do astsrv::exec(srv) |copy doc, ctxt| {\n         match ctxt.ast_map.get(doc.id()) {\n           ast_map::node_item(@ast::item {\n             node: ast::item_impl(_, opt_trait_type, self_ty, _), _\n@@ -279,7 +280,7 @@ fn fold_impl(\n     doc::ImplDoc {\n         trait_types: trait_types,\n         self_ty: self_ty,\n-        methods: merge_methods(fold.ctxt, doc.id(), doc.methods),\n+        methods: merge_methods(fold.ctxt, doc.id(), copy doc.methods),\n         .. doc\n     }\n }\n@@ -317,16 +318,16 @@ fn fold_type(\n     let srv = fold.ctxt;\n \n     doc::SimpleItemDoc {\n-        sig: do astsrv::exec(srv) |ctxt| {\n+        sig: do astsrv::exec(srv) |copy doc, ctxt| {\n             match ctxt.ast_map.get(doc.id()) {\n               ast_map::node_item(@ast::item {\n                 ident: ident,\n-                node: ast::item_ty(ty, params), _\n+                node: ast::item_ty(ty, ref params), _\n               }, _) => {\n                 Some(fmt!(\n                     \"type %s%s = %s\",\n                     to_str(ident),\n-                    pprust::typarams_to_str(params, extract::interner()),\n+                    pprust::typarams_to_str(*params, extract::interner()),\n                     pprust::ty_to_str(ty, extract::interner())\n                 ))\n               }\n@@ -350,7 +351,7 @@ fn fold_struct(\n     let srv = fold.ctxt;\n \n     doc::StructDoc {\n-        sig: do astsrv::exec(srv) |ctxt| {\n+        sig: do astsrv::exec(srv) |copy doc, ctxt| {\n             match ctxt.ast_map.get(doc.id()) {\n                 ast_map::node_item(item, _) => {\n                     let item = strip_struct_extra_stuff(item);\n@@ -369,11 +370,11 @@ fn fold_struct(\n /// should be a simple pprust::struct_to_str function that does\n /// what I actually want\n fn strip_struct_extra_stuff(item: @ast::item) -> @ast::item {\n-    let node = match item.node {\n+    let node = match copy item.node {\n         ast::item_struct(def, tys) => {\n             let def = @ast::struct_def {\n                 dtor: None, // Remove the drop { } block\n-                .. *def\n+                .. copy *def\n             };\n             ast::item_struct(def, tys)\n         }\n@@ -383,28 +384,28 @@ fn strip_struct_extra_stuff(item: @ast::item) -> @ast::item {\n     @ast::item {\n         attrs: ~[], // Remove the attributes\n         node: node,\n-        .. *item\n+        .. copy *item\n     }\n }\n \n #[test]\n fn should_add_struct_defs() {\n     let doc = test::mk_doc(~\"struct S { field: () }\");\n-    assert doc.cratemod().structs()[0].sig.get().contains(\"struct S {\");\n+    assert (&doc.cratemod().structs()[0].sig).get().contains(\"struct S {\");\n }\n \n #[test]\n fn should_not_serialize_struct_drop_blocks() {\n     // All we care about are the fields\n     let doc = test::mk_doc(~\"struct S { field: (), drop { } }\");\n-    assert !doc.cratemod().structs()[0].sig.get().contains(\"drop\");\n+    assert !(&doc.cratemod().structs()[0].sig).get().contains(\"drop\");\n }\n \n #[test]\n fn should_not_serialize_struct_attrs() {\n     // All we care about are the fields\n     let doc = test::mk_doc(~\"#[wut] struct S { field: () }\");\n-    assert !doc.cratemod().structs()[0].sig.get().contains(\"wut\");\n+    assert !(&doc.cratemod().structs()[0].sig).get().contains(\"wut\");\n }\n \n #[cfg(test)]\n@@ -415,7 +416,7 @@ pub mod test {\n     use tystr_pass::run;\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n-        do astsrv::from_str(source) |srv| {\n+        do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)\n         }"}, {"sha": "f86c371c20cb212aaf971f2f5c7e4beef2946648", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94529d902adfef8d7de66285b6730b663fe5b/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=1ee94529d902adfef8d7de66285b6730b663fe5b", "patch": "@@ -82,15 +82,15 @@ fn unindent(s: ~str) -> ~str {\n         let unindented = ~[str::trim(vec::head(lines))]\n             + do par::map(vec::tail(lines)) |line| {\n             if str::is_whitespace(*line) {\n-                *line\n+                copy *line\n             } else {\n                 assert str::len(*line) >= min_indent;\n                 str::slice(*line, min_indent, str::len(*line))\n             }\n         };\n         str::connect(unindented, ~\"\\n\")\n     } else {\n-        s\n+        copy s\n     }\n }\n "}]}