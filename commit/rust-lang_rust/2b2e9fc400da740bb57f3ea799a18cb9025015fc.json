{"sha": "2b2e9fc400da740bb57f3ea799a18cb9025015fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMmU5ZmM0MDBkYTc0MGJiNTdmM2VhNzk5YTE4Y2I5MDI1MDE1ZmM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-11-08T21:20:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-08T21:20:56Z"}, "message": "Rollup merge of #37483 - xfix:patch-1, r=steveklabnik\n\nMatch guessing game output to newest language version\n\nCargo now informs that it has finished, and there is new error format.", "tree": {"sha": "58fab11516aea41f0bac267d5cc414c9908b38e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58fab11516aea41f0bac267d5cc414c9908b38e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b2e9fc400da740bb57f3ea799a18cb9025015fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2e9fc400da740bb57f3ea799a18cb9025015fc", "html_url": "https://github.com/rust-lang/rust/commit/2b2e9fc400da740bb57f3ea799a18cb9025015fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b2e9fc400da740bb57f3ea799a18cb9025015fc/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2db5b9ffa87cffc28a53ac9d029f476758db039", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2db5b9ffa87cffc28a53ac9d029f476758db039", "html_url": "https://github.com/rust-lang/rust/commit/b2db5b9ffa87cffc28a53ac9d029f476758db039"}, {"sha": "5704a531fda14e108a95f16f5685afaebee95899", "url": "https://api.github.com/repos/rust-lang/rust/commits/5704a531fda14e108a95f16f5685afaebee95899", "html_url": "https://github.com/rust-lang/rust/commit/5704a531fda14e108a95f16f5685afaebee95899"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "e2a23979a819a0c637695ce5892c39d12142f250", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 43, "deletions": 23, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2b2e9fc400da740bb57f3ea799a18cb9025015fc/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/2b2e9fc400da740bb57f3ea799a18cb9025015fc/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=2b2e9fc400da740bb57f3ea799a18cb9025015fc", "patch": "@@ -19,6 +19,7 @@ has a command that does that for us. Let\u2019s give it a shot:\n ```bash\n $ cd ~/projects\n $ cargo new guessing_game --bin\n+     Created binary (application) `guessing_game` project\n $ cd guessing_game\n ```\n \n@@ -51,6 +52,7 @@ Let\u2019s try compiling what Cargo gave us:\n ```{bash}\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.53 secs\n ```\n \n Excellent! Open up your `src/main.rs` again. We\u2019ll be writing all of\n@@ -61,6 +63,7 @@ Remember the `run` command from last chapter? Try it out again here:\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n      Running `target/debug/guessing_game`\n Hello, world!\n ```\n@@ -282,10 +285,13 @@ we\u2019ll get a warning:\n ```bash\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-src/main.rs:10:5: 10:39 warning: unused result which must be used,\n-#[warn(unused_must_use)] on by default\n-src/main.rs:10     io::stdin().read_line(&mut guess);\n-                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+warning: unused result which must be used, #[warn(unused_must_use)] on by default\n+  --> src/main.rs:10:5\n+   |\n+10 |     io::stdin().read_line(&mut guess);\n+   |     ^\n+\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.42 secs\n ```\n \n Rust warns us that we haven\u2019t used the `Result` value. This warning comes from\n@@ -321,6 +327,7 @@ Anyway, that\u2019s the tour. We can run what we have with `cargo run`:\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.44 secs\n      Running `target/debug/guessing_game`\n Guess the number!\n Please input your guess.\n@@ -373,11 +380,12 @@ Now, without changing any of our code, let\u2019s build our project:\n ```bash\n $ cargo build\n     Updating registry `https://github.com/rust-lang/crates.io-index`\n- Downloading rand v0.3.8\n- Downloading libc v0.1.6\n-   Compiling libc v0.1.6\n-   Compiling rand v0.3.8\n+ Downloading rand v0.3.14\n+ Downloading libc v0.2.17\n+   Compiling libc v0.2.17\n+   Compiling rand v0.3.14\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 5.88 secs\n ```\n \n (You may see different versions, of course.)\n@@ -399,22 +407,24 @@ If we run `cargo build` again, we\u2019ll get different output:\n \n ```bash\n $ cargo build\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n ```\n \n-That\u2019s right, no output! Cargo knows that our project has been built, and that\n+That\u2019s right, nothing was done! Cargo knows that our project has been built, and that\n all of its dependencies are built, and so there\u2019s no reason to do all that\n stuff. With nothing to do, it simply exits. If we open up `src/main.rs` again,\n-make a trivial change, and then save it again, we\u2019ll only see one line:\n+make a trivial change, and then save it again, we\u2019ll only see two lines:\n \n ```bash\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.45 secs\n ```\n \n So, we told Cargo we wanted any `0.3.x` version of `rand`, and so it fetched the latest\n-version at the time this was written, `v0.3.8`. But what happens when next\n-week, version `v0.3.9` comes out, with an important bugfix? While getting\n-bugfixes is important, what if `0.3.9` contains a regression that breaks our\n+version at the time this was written, `v0.3.14`. But what happens when next\n+week, version `v0.3.15` comes out, with an important bugfix? While getting\n+bugfixes is important, what if `0.3.15` contains a regression that breaks our\n code?\n \n The answer to this problem is the `Cargo.lock` file you\u2019ll now find in your\n@@ -423,11 +433,11 @@ figures out all of the versions that fit your criteria, and then writes them\n to the `Cargo.lock` file. When you build your project in the future, Cargo\n will see that the `Cargo.lock` file exists, and then use that specific version\n rather than do all the work of figuring out versions again. This lets you\n-have a repeatable build automatically. In other words, we\u2019ll stay at `0.3.8`\n+have a repeatable build automatically. In other words, we\u2019ll stay at `0.3.14`\n until we explicitly upgrade, and so will anyone who we share our code with,\n thanks to the lock file.\n \n-What about when we _do_ want to use `v0.3.9`? Cargo has another command,\n+What about when we _do_ want to use `v0.3.15`? Cargo has another command,\n `update`, which says \u2018ignore the lock, figure out all the latest versions that\n fit what we\u2019ve specified. If that works, write those versions out to the lock\n file\u2019. But, by default, Cargo will only look for versions larger than `0.3.0`\n@@ -510,13 +520,15 @@ Try running our new program a few times:\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.55 secs\n      Running `target/debug/guessing_game`\n Guess the number!\n The secret number is: 7\n Please input your guess.\n 4\n You guessed: 4\n $ cargo run\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n      Running `target/debug/guessing_game`\n Guess the number!\n The secret number is: 83\n@@ -618,15 +630,20 @@ I did mention that this won\u2019t quite compile yet, though. Let\u2019s try it:\n ```bash\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-src/main.rs:28:21: 28:35 error: mismatched types:\n- expected `&collections::string::String`,\n-    found `&_`\n-(expected struct `collections::string::String`,\n-    found integral variable) [E0308]\n-src/main.rs:28     match guess.cmp(&secret_number) {\n-                                   ^~~~~~~~~~~~~~\n+error[E0308]: mismatched types\n+  --> src/main.rs:23:21\n+   |\n+23 |     match guess.cmp(&secret_number) {\n+   |                     ^^^^^^^^^^^^^^ expected struct `std::string::String`, found integral variable\n+   |\n+   = note: expected type `&std::string::String`\n+   = note:    found type `&{integer}`\n+\n error: aborting due to previous error\n-Could not compile `guessing_game`.\n+\n+error: Could not compile `guessing_game`.\n+\n+To learn more, run the command again with --verbose.\n ```\n \n Whew! This is a big error. The core of it is that we have \u2018mismatched types\u2019.\n@@ -722,6 +739,7 @@ Let\u2019s try our program out!\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.57 secs\n      Running `target/guessing_game`\n Guess the number!\n The secret number is: 58\n@@ -785,6 +803,7 @@ and quit. Observe:\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.58 secs\n      Running `target/guessing_game`\n Guess the number!\n The secret number is: 59\n@@ -919,6 +938,7 @@ Now we should be good! Let\u2019s try:\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.57 secs\n      Running `target/guessing_game`\n Guess the number!\n The secret number is: 61"}]}