{"sha": "86b4658c569d59452863b3161acd78aaa30abb86", "node_id": "C_kwDOAAsO6NoAKDg2YjQ2NThjNTY5ZDU5NDUyODYzYjMxNjFhY2Q3OGFhYTMwYWJiODY", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-03-03T22:41:10Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-03-04T00:20:13Z"}, "message": "Generalize `get_nullable_type` to allow types where null is all-ones.\n\nGeneralize get_nullable_type to accept types that have an all-ones bit\npattern as their sentry \"null\" value.\n\nThis will allow [`OwnedFd`], [`BorrowedFd`], [`OwnedSocket`], and\n[`BorrowedSocket`] to be marked with\n`#[rustc_nonnull_optimization_guaranteed]`, which will allow\n`Option<OwnedFd>`, `Option<BorrowedFd>`, `Option<OwnedSocket>`, and\n`Option<BorrowedSocket>` to be used in FFI declarations, as described\nin the [I/O safety RFC].\n\nFor example, it will allow a function like `open` on Unix and `WSASocketW`\non Windows to be declared using `Option<OwnedFd>` and `Option<OwnedSocket>`\nreturn types, respectively.\n\nThe actual change to add `#[rustc_nonnull_optimization_guaranteed]`\nto the abovementioned types will be a separate PR, as it'll depend on\nhaving this patch in the stage0 compiler.\n\nAlso, update the diagnostics to mention that \"niche optimizations\" are\nused in libstd as well as libcore, as `rustc_layout_scalar_valid_range_start`\nand `rustc_layout_scalar_valid_range_end` are already in use in libstd.\n\n[`OwnedFd`]: https://github.com/rust-lang/rust/blob/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library/std/src/os/fd/owned.rs#L49\n[`BorrowedFd`]: https://github.com/rust-lang/rust/blob/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library/std/src/os/fd/owned.rs#L29\n[`OwnedSocket`]: https://github.com/rust-lang/rust/blob/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library/std/src/os/windows/io/socket.rs#L51\n[`BorrowedSocket`]: https://github.com/rust-lang/rust/blob/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library/std/src/os/windows/io/socket.rs#L29\n[I/O safety RFC]: https://github.com/rust-lang/rfcs/blob/master/text/3128-io-safety.md#ownedfd-and-borrowedfdfd-1", "tree": {"sha": "9698c043f50ed795756d928e5377a313f8bddc3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9698c043f50ed795756d928e5377a313f8bddc3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86b4658c569d59452863b3161acd78aaa30abb86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86b4658c569d59452863b3161acd78aaa30abb86", "html_url": "https://github.com/rust-lang/rust/commit/86b4658c569d59452863b3161acd78aaa30abb86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86b4658c569d59452863b3161acd78aaa30abb86/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10913c00018c76103b2fd4260d8c02ec728fd244", "url": "https://api.github.com/repos/rust-lang/rust/commits/10913c00018c76103b2fd4260d8c02ec728fd244", "html_url": "https://github.com/rust-lang/rust/commit/10913c00018c76103b2fd4260d8c02ec728fd244"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "bb51f880099a6da051c93216125f4cb7c50fc497", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86b4658c569d59452863b3161acd78aaa30abb86/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b4658c569d59452863b3161acd78aaa30abb86/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=86b4658c569d59452863b3161acd78aaa30abb86", "patch": "@@ -606,17 +606,17 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(\n         rustc_layout_scalar_valid_range_start, Normal, template!(List: \"value\"), ErrorFollowing,\n         \"the `#[rustc_layout_scalar_valid_range_start]` attribute is just used to enable \\\n-        niche optimizations in libcore and will never be stable\",\n+        niche optimizations in libcore and libstd and will never be stable\",\n     ),\n     rustc_attr!(\n         rustc_layout_scalar_valid_range_end, Normal, template!(List: \"value\"), ErrorFollowing,\n         \"the `#[rustc_layout_scalar_valid_range_end]` attribute is just used to enable \\\n-        niche optimizations in libcore and will never be stable\",\n+        niche optimizations in libcore and libstd and will never be stable\",\n     ),\n     rustc_attr!(\n         rustc_nonnull_optimization_guaranteed, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable \\\n-        niche optimizations in libcore and will never be stable\",\n+        niche optimizations in libcore and libstd and will never be stable\",\n     ),\n \n     // =========================================================================="}, {"sha": "cb26f91f0e83e54b1ccbfa5e373cf6461d3898c1", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86b4658c569d59452863b3161acd78aaa30abb86/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b4658c569d59452863b3161acd78aaa30abb86/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=86b4658c569d59452863b3161acd78aaa30abb86", "patch": "@@ -795,7 +795,9 @@ crate fn repr_nullable_ptr<'tcx>(\n         let field_ty_abi = &cx.layout_of(field_ty).unwrap().abi;\n         if let Abi::Scalar(field_ty_scalar) = field_ty_abi {\n             match (field_ty_scalar.valid_range.start, field_ty_scalar.valid_range.end) {\n-                (0, _) => unreachable!(\"Non-null optimisation extended to a non-zero value.\"),\n+                (0, x) if x == field_ty_scalar.value.size(&cx.tcx).unsigned_int_max() - 1 => {\n+                    return Some(get_nullable_type(cx, field_ty).unwrap());\n+                }\n                 (1, _) => {\n                     return Some(get_nullable_type(cx, field_ty).unwrap());\n                 }"}, {"sha": "667bc9f8ddf182905e5a8f9f725cc4f24f39f73c", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b4658c569d59452863b3161acd78aaa30abb86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b4658c569d59452863b3161acd78aaa30abb86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs?ref=86b4658c569d59452863b3161acd78aaa30abb86", "patch": "@@ -2,6 +2,6 @@\n \n #[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n-#[rustc_nonnull_optimization_guaranteed] //~ ERROR the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable niche optimizations in libcore and will never be stable\n+#[rustc_nonnull_optimization_guaranteed] //~ ERROR the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable niche optimizations in libcore and libstd and will never be stable\n \n fn main() {}"}, {"sha": "45a095903d2a7b59a39b9cabb9a0a2b6bee67558", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b4658c569d59452863b3161acd78aaa30abb86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b4658c569d59452863b3161acd78aaa30abb86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr?ref=86b4658c569d59452863b3161acd78aaa30abb86", "patch": "@@ -14,7 +14,7 @@ LL | #[rustc_error]\n    |\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n-error[E0658]: the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable niche optimizations in libcore and will never be stable\n+error[E0658]: the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable niche optimizations in libcore and libstd and will never be stable\n   --> $DIR/feature-gate-rustc-attrs-1.rs:5:1\n    |\n LL | #[rustc_nonnull_optimization_guaranteed]"}]}