{"sha": "da865095cf378fbfd07145c25fe5837ea091efeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhODY1MDk1Y2YzNzhmYmZkMDcxNDVjMjVmZTU4MzdlYTA5MWVmZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-02T23:11:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-02T23:11:41Z"}, "message": "Auto merge of #84703 - GuillaumeGomez:cleanup-dom, r=jsha\n\nClean up dom\n\nThe commits come from #84480.\n\nThey were errors reported by the `tidy` script that we will use to ensure that the HTML generated by rustdoc is valid.\n\nI checked carefully that there were no difference so in principle it should be exactly the same rendering but a double-check would be very appreciated in case I missed something.\n\nExtra note: `<h4>` and some `<h3>` tags were replaced by `<div>` because they're not supposed to contain tags as they currently do.\n\nr? `@jsha`", "tree": {"sha": "2c0a9ac6fa9c261f83ec9ef4333a29d33c5e9757", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c0a9ac6fa9c261f83ec9ef4333a29d33c5e9757"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da865095cf378fbfd07145c25fe5837ea091efeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da865095cf378fbfd07145c25fe5837ea091efeb", "html_url": "https://github.com/rust-lang/rust/commit/da865095cf378fbfd07145c25fe5837ea091efeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da865095cf378fbfd07145c25fe5837ea091efeb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbe459dedd33470f2cb28101157de316caaffa66", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe459dedd33470f2cb28101157de316caaffa66", "html_url": "https://github.com/rust-lang/rust/commit/dbe459dedd33470f2cb28101157de316caaffa66"}, {"sha": "0daf8ac41f438ba338051e18a56ef8ae64951748", "url": "https://api.github.com/repos/rust-lang/rust/commits/0daf8ac41f438ba338051e18a56ef8ae64951748", "html_url": "https://github.com/rust-lang/rust/commit/0daf8ac41f438ba338051e18a56ef8ae64951748"}], "stats": {"total": 497, "additions": 256, "deletions": 241}, "files": [{"sha": "7c2be0fd6faacaae304e249df180223a7dc6c139", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -235,6 +235,7 @@ crate fn redirect(url: &str) -> String {\n <html lang=\"en\">\n <head>\n     <meta http-equiv=\"refresh\" content=\"0;URL={url}\">\n+    <title>Redirection</title>\n </head>\n <body>\n     <p>Redirecting to <a href=\"{url}\">{url}</a>...</p>"}, {"sha": "21d588e42f8747a95f8df698f91cf6f909009703", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -1369,7 +1369,11 @@ fn render_impl(\n                             })\n                         })\n                         .map(|item| format!(\"{}.{}\", item.type_(), name));\n-                    write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class,);\n+                    write!(\n+                        w,\n+                        \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n+                        id, item_type, in_trait_class,\n+                    );\n                     w.write_str(\"<code>\");\n                     render_assoc_item(\n                         w,\n@@ -1388,13 +1392,17 @@ fn render_impl(\n                     );\n                     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                     write_srclink(cx, item, w);\n-                    w.write_str(\"</h4>\");\n+                    w.write_str(\"</div>\");\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n                 let source_id = format!(\"{}.{}\", ItemType::AssocType, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, in_trait_class);\n+                write!(\n+                    w,\n+                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\"><code>\",\n+                    id, item_type, in_trait_class\n+                );\n                 assoc_type(\n                     w,\n                     item,\n@@ -1406,12 +1414,16 @@ fn render_impl(\n                 );\n                 w.write_str(\"</code>\");\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                w.write_str(\"</h4>\");\n+                w.write_str(\"</div>\");\n             }\n             clean::AssocConstItem(ref ty, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, in_trait_class);\n+                write!(\n+                    w,\n+                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\"><code>\",\n+                    id, item_type, in_trait_class\n+                );\n                 assoc_const(\n                     w,\n                     item,\n@@ -1431,12 +1443,12 @@ fn render_impl(\n                 );\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                 write_srclink(cx, item, w);\n-                w.write_str(\"</h4>\");\n+                w.write_str(\"</div>\");\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, in_trait_class);\n+                write!(w, \"<div id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, in_trait_class,);\n                 assoc_type(\n                     w,\n                     item,\n@@ -1448,7 +1460,7 @@ fn render_impl(\n                 );\n                 w.write_str(\"</code>\");\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                w.write_str(\"</h4>\");\n+                w.write_str(\"</div>\");\n             }\n             clean::StrippedItem(..) => return,\n             _ => panic!(\"can't make docs for trait item with name {:?}\", item.name),\n@@ -1577,7 +1589,8 @@ fn render_impl(\n         if let Some(use_absolute) = use_absolute {\n             write!(\n                 w,\n-                \"{}<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">\",\n+                \"{}<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n+                     <code class=\\\"in-band\\\">\",\n                 open_details(&mut close_tags, is_implementing_trait),\n                 id,\n                 aliases\n@@ -1604,7 +1617,8 @@ fn render_impl(\n         } else {\n             write!(\n                 w,\n-                \"{}<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">{}</code>\",\n+                \"{}<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n+                     <code class=\\\"in-band\\\">{}</code>\",\n                 open_details(&mut close_tags, is_implementing_trait),\n                 id,\n                 aliases,\n@@ -1621,9 +1635,9 @@ fn render_impl(\n         );\n         write_srclink(cx, &i.impl_item, w);\n         if !toggled {\n-            w.write_str(\"</h3>\");\n+            w.write_str(\"</div>\");\n         } else {\n-            w.write_str(\"</h3></summary>\");\n+            w.write_str(\"</div></summary>\");\n         }\n \n         if trait_.is_some() {\n@@ -1649,10 +1663,12 @@ fn render_impl(\n             );\n         }\n     }\n-    w.write_str(\"<div class=\\\"impl-items\\\">\");\n-    w.push_buffer(default_impl_items);\n-    w.push_buffer(impl_items);\n-    close_tags.insert_str(0, \"</div>\");\n+    if !default_impl_items.is_empty() || !impl_items.is_empty() {\n+        w.write_str(\"<div class=\\\"impl-items\\\">\");\n+        w.push_buffer(default_impl_items);\n+        w.push_buffer(impl_items);\n+        close_tags.insert_str(0, \"</div>\");\n+    }\n     w.write_str(&close_tags);\n }\n "}, {"sha": "61b6833c2b2197e9944398e2ebfdbaff3fa45de2", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -75,7 +75,7 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer,\n             );\n         }\n     }\n-    write!(buf, \"<a class=\\\"{}\\\" href=\\\"\\\">{}</a>\", item.type_(), item.name.as_ref().unwrap());\n+    write!(buf, \"<a class=\\\"{}\\\" href=\\\"#\\\">{}</a>\", item.type_(), item.name.as_ref().unwrap());\n     write!(\n         buf,\n         \"<button id=\\\"copy-path\\\" onclick=\\\"copy_path(this)\\\">\\\n@@ -585,12 +585,12 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         if toggled {\n             write!(w, \"<details class=\\\"rustdoc-toggle\\\" open><summary>\");\n         }\n-        write!(w, \"<h3 id=\\\"{id}\\\" class=\\\"method\\\"><code>\", id = id);\n+        write!(w, \"<div id=\\\"{}\\\" class=\\\"method has-srclink\\\"><code>\", id);\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl, cx);\n         w.write_str(\"</code>\");\n         render_stability_since(w, m, t, cx.tcx());\n         write_srclink(cx, m, w);\n-        w.write_str(\"</h3>\");\n+        w.write_str(\"</div>\");\n         if toggled {\n             write!(w, \"</summary>\");\n             w.push_buffer(content);"}, {"sha": "aee10a7b06fdd3ed59e58a99c8a349b946159a97", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 30, "deletions": 46, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -117,8 +117,7 @@ h2 {\n h3 {\n \tfont-size: 1.3em;\n }\n-h1, h2, h3:not(.impl):not(.method):not(.type):not(.tymethod):not(.notable),\n-h4:not(.method):not(.type):not(.tymethod):not(.associatedconstant):not(.associatedtype) {\n+h1, h2, h3, h4 {\n \tfont-weight: 500;\n \tmargin: 20px 0 15px 0;\n \tpadding-bottom: 6px;\n@@ -135,30 +134,38 @@ h1.fqn {\n h1.fqn > .in-band > a:hover {\n \ttext-decoration: underline;\n }\n-h2, h3:not(.impl):not(.method):not(.type):not(.tymethod),\n-h4:not(.method):not(.type):not(.tymethod):not(.associatedconstant):not(.associatedtype) {\n+h2, h3, h4 {\n \tborder-bottom: 1px solid;\n }\n-h3.impl, h3.method, h4.method, h3.type, h4.type, h4.associatedconstant, h4.associatedtype {\n+.impl, .method,\n+.type, .associatedconstant,\n+.associatedtype {\n \tflex-basis: 100%;\n \tfont-weight: 600;\n \tmargin-top: 16px;\n \tmargin-bottom: 10px;\n \tposition: relative;\n }\n-h3.impl, h3.method, h4.method.trait-impl, h3.type,\n-h4.type.trait-impl, h4.associatedconstant.trait-impl, h4.associatedtype.trait-impl {\n+.impl, .method.trait-impl,\n+.type.trait-impl,\n+.associatedconstant.trait-impl,\n+.associatedtype.trait-impl {\n \tpadding-left: 15px;\n }\n \n+div.impl-items > div {\n+\tpadding-left: 0;\n+}\n+\n h1, h2, h3, h4,\n .sidebar, a.source, .search-input, .search-results .result-name,\n .content table td:first-child > a,\n-div.item-list .out-of-band,\n+div.item-list .out-of-band, span.since,\n #source-sidebar, #sidebar-toggle,\n details.rustdoc-toggle > summary::before,\n details.undocumented > summary::before,\n-.content ul.crate a.crate,\n+div.impl-items > div:not(.docblock):not(.item-info),\n+.content ul.crate a.crate, a.srclink,\n /* This selector is for the items listed in the \"all items\" page. */\n #main > ul.docblock > li > a {\n \tfont-family: \"Fira Sans\", Arial, sans-serif;\n@@ -313,8 +320,6 @@ nav.sub {\n \tmargin-bottom: 14px;\n }\n .block h2, .block h3 {\n-\tmargin-top: 0;\n-\tmargin-bottom: 8px;\n \ttext-align: center;\n }\n .block ul, .block li {\n@@ -462,15 +467,7 @@ nav.sub {\n \tfont-weight: normal;\n }\n \n-h3.impl > .out-of-band {\n-\tfont-size: 21px;\n-}\n-\n-h4.method > .out-of-band {\n-\tfont-size: 19px;\n-}\n-\n-h4 > code, h3 > code, .invisible > code {\n+.method > code, .trait-impl > code, .invisible > code {\n \tmax-width: calc(100% - 41px);\n \tdisplay: block;\n }\n@@ -543,7 +540,7 @@ h4 > code, h3 > code, .invisible > code {\n }\n .content .multi-column li { width: 100%; display: inline-block; }\n \n-.content .method {\n+.content > .methods > .method {\n \tfont-size: 1em;\n \tposition: relative;\n }\n@@ -555,7 +552,7 @@ h4 > code, h3 > code, .invisible > code {\n \tfont-size: 0.8em;\n }\n \n-.content .methods > div:not(.notable-traits):not(.methods) {\n+.content .methods > div:not(.notable-traits):not(.method) {\n \tmargin-left: 40px;\n \tmargin-bottom: 15px;\n }\n@@ -564,9 +561,6 @@ h4 > code, h3 > code, .invisible > code {\n \tmargin-left: 20px;\n \tmargin-top: -34px;\n }\n-.content .docblock > .impl-items > h4 {\n-\tborder-bottom: 0;\n-}\n .content .docblock >.impl-items .table-display {\n \tmargin: 0;\n }\n@@ -688,7 +682,8 @@ a {\n \ttext-decoration: underline;\n }\n \n-.invisible > .srclink, h4 > code + .srclink, h3 > code + .srclink {\n+.invisible > .srclink,\n+.method > code + .srclink {\n \tposition: absolute;\n \ttop: 0;\n \tright: 0;\n@@ -923,7 +918,7 @@ body.blur > :not(#help) {\n \tflex-grow: 1;\n }\n \n-.impl-items h4, h4.impl, h3.impl, .methods h3 {\n+.has-srclink {\n \tdisplay: flex;\n \tflex-basis: 100%;\n \tfont-size: 16px;\n@@ -1134,6 +1129,13 @@ a.test-arrow:hover{\n \tmargin: 0;\n }\n \n+.notable-traits .notable {\n+\tmargin: 0;\n+\tmargin-bottom: 13px;\n+\tfont-size: 19px;\n+\tfont-weight: 600;\n+}\n+\n .notable-traits .docblock code.content{\n \tmargin: 0;\n \tpadding: 0;\n@@ -1197,12 +1199,6 @@ pre.rust {\n \tmargin-left: 5px;\n }\n \n-h4 > .notable-traits {\n-\tposition: absolute;\n-\tleft: -44px;\n-\ttop: 2px;\n-}\n-\n #all-types {\n \ttext-align: center;\n \tborder: 1px solid;\n@@ -1316,14 +1312,6 @@ h4 > .notable-traits {\n \tborder-top: 1px solid;\n }\n \n-\n-\n-h3.notable {\n-\tmargin: 0;\n-\tmargin-bottom: 13px;\n-\tfont-size: 19px;\n-}\n-\n kbd {\n \tdisplay: inline-block;\n \tpadding: 3px 5px;\n@@ -1615,10 +1603,6 @@ details.undocumented[open] > summary::before {\n \t\tpadding: 0;\n \t}\n \n-\t.content h4 > .out-of-band {\n-\t\tposition: inherit;\n-\t}\n-\n \t#search {\n \t\tmargin-left: 0;\n \t}\n@@ -1638,7 +1622,7 @@ details.undocumented[open] > summary::before {\n \t\tz-index: 1;\n \t}\n \n-\th4 > .notable-traits {\n+\t.notable-traits {\n \t\tposition: absolute;\n \t\tleft: -22px;\n \t\ttop: 24px;"}, {"sha": "d220d8708a123fcba8a15e2bb3cb2528bfd619a7", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -10,8 +10,7 @@ body {\n \tcolor: #c5c5c5;\n }\n \n-h1, h2, h3:not(.impl):not(.method):not(.type):not(.tymethod),\n-h4:not(.method):not(.type):not(.tymethod) {\n+h1, h2, h3, h4 {\n \tcolor: white;\n }\n h1.fqn {\n@@ -20,10 +19,10 @@ h1.fqn {\n h1.fqn  a {\n \tcolor: #fff;\n }\n-h2, h3:not(.impl):not(.method):not(.type):not(.tymethod) {\n+h2, h3, h4 {\n \tborder-bottom-color: #5c6773;\n }\n-h4:not(.method):not(.type):not(.tymethod):not(.associatedconstant) {\n+h4 {\n \tborder: none;\n }\n \n@@ -407,6 +406,10 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: #5c6773;\n }\n \n+.notable-traits-tooltiptext .notable {\n+\tborder-bottom-color: #5c6773;\n+}\n+\n #titles > button.selected {\n \tbackground-color: #141920 !important;\n \tborder-bottom: 1px solid #ffb44c !important;"}, {"sha": "6385a763f2ef71d047895228b1e8a6b1a6b9f6c1", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -3,15 +3,13 @@ body {\n \tcolor: #ddd;\n }\n \n-h1, h2, h3:not(.impl):not(.method):not(.type):not(.tymethod),\n-h4:not(.method):not(.type):not(.tymethod) {\n+h1, h2, h3, h4 {\n \tcolor: #ddd;\n }\n h1.fqn {\n \tborder-bottom-color: #d2d2d2;\n }\n-h2, h3:not(.impl):not(.method):not(.type):not(.tymethod),\n-h4:not(.method):not(.type):not(.tymethod) {\n+h2, h3, h4 {\n \tborder-bottom-color: #d2d2d2;\n }\n \n@@ -356,6 +354,10 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: #777;\n }\n \n+.notable-traits-tooltiptext .notable {\n+\tborder-bottom-color: #d2d2d2;\n+}\n+\n #titles > button:not(.selected) {\n \tbackground-color: #252525;\n \tborder-top-color: #252525;"}, {"sha": "c19d5bfc317f765c938a7e884cb6971aa8d3e6b2", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -5,15 +5,13 @@ body {\n \tcolor: black;\n }\n \n-h1, h2, h3:not(.impl):not(.method):not(.type):not(.tymethod),\n-h4:not(.method):not(.type):not(.tymethod) {\n+h1, h2, h3, h4 {\n \tcolor: black;\n }\n h1.fqn {\n \tborder-bottom-color: #D5D5D5;\n }\n-h2, h3:not(.impl):not(.method):not(.type):not(.tymethod),\n-h4:not(.method):not(.type):not(.tymethod) {\n+h2, h3, h4 {\n \tborder-bottom-color: #DDDDDD;\n }\n \n@@ -348,6 +346,10 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: #999;\n }\n \n+.notable-traits-tooltiptext .notable {\n+\tborder-bottom-color: #DDDDDD;\n+}\n+\n #titles > button:not(.selected) {\n \tbackground-color: #e6e6e6;\n \tborder-top-color: #e6e6e6;"}, {"sha": "9f95d9a994b17c93a1ef7e746caba2327db6ebb9", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -77,12 +77,12 @@ struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n \n impl Foo {\n     // @has async_fn/struct.Foo.html\n-    // @has - '//h4[@class=\"method\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n+    // @has - '//div[@class=\"method has-srclink\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n     pub async fn complicated_lifetimes(&self, context: &impl Bar) -> impl Iterator<Item = &usize> {}\n     // taken from `tokio` as an example of a method that was particularly bad before\n-    // @has - '//h4[@class=\"method\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n+    // @has - '//div[@class=\"method has-srclink\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n     pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()> {}\n-    // @has - '//h4[@class=\"method\"]' \"pub async fn mut_self(&mut self)\"\n+    // @has - '//div[@class=\"method has-srclink\"]' \"pub async fn mut_self(&mut self)\"\n     pub async fn mut_self(&mut self) {}\n }\n "}, {"sha": "01ea09a94614a71be37d2c9b463bdf2bc32cb43e", "filename": "src/test/rustdoc/auto_aliases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fauto_aliases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fauto_aliases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauto_aliases.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -1,6 +1,6 @@\n #![feature(auto_traits)]\n \n-// @has auto_aliases/trait.Bar.html '//h3[@data-aliases=\"auto_aliases::Foo\"]' 'impl Bar for Foo'\n+// @has auto_aliases/trait.Bar.html '//div[@data-aliases=\"auto_aliases::Foo\"]' 'impl Bar for Foo'\n pub struct Foo;\n \n pub auto trait Bar {}"}, {"sha": "6f0c15cb5aca6c2ad37a6d910ce50450ed2cf779", "filename": "src/test/rustdoc/blanket-reexport-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/struct.S.html '//h3[@id=\"impl-Into%3CU%3E\"]//code' 'impl<T, U> Into<U> for T'\n+// @has foo/struct.S.html '//div[@id=\"impl-Into%3CU%3E\"]//code' 'impl<T, U> Into<U> for T'\n pub struct S2 {}\n mod m {\n     pub struct S {}"}, {"sha": "2761f92ef5712f8650707277636840021db02482", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -38,12 +38,12 @@ pub const unsafe fn bar_not_gated() -> u32 { 42 }\n pub struct Foo;\n \n impl Foo {\n-    // @has 'foo/struct.Foo.html' '//h4[@id=\"method.gated\"]/code' 'pub unsafe fn gated() -> u32'\n+    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated\"]/code' 'pub unsafe fn gated() -> u32'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n     pub const unsafe fn gated() -> u32 { 42 }\n \n-    // @has 'foo/struct.Foo.html' '//h4[@id=\"method.stable_impl\"]/code' 'pub const fn stable_impl() -> u32'\n+    // @has 'foo/struct.Foo.html' '//div[@id=\"method.stable_impl\"]/code' 'pub const fn stable_impl() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.2.0)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"rust1\", since = \"1.2.0\")]"}, {"sha": "28eba849ace072df369e2abdccd1556b1da4fec9", "filename": "src/test/rustdoc/const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-fn.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -8,7 +8,7 @@ pub const fn bar() -> usize {\n }\n \n // @has foo/struct.Foo.html\n-// @has - '//*[@class=\"method\"]' 'const fn new()'\n+// @has - '//*[@class=\"method has-srclink\"]' 'const fn new()'\n pub struct Foo(usize);\n \n impl Foo {"}, {"sha": "8f412aa8c402681e707bc85d7f5b83adfd81135a", "filename": "src/test/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -8,7 +8,7 @@ pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }\n \n-// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]//h3/code' 'impl Add<Simd<u8, 16_usize>> for Simd<u8, 16>'\n+// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]//div/code' 'impl Add<Simd<u8, 16_usize>> for Simd<u8, 16>'\n impl Add for Simd<u8, 16> {\n     type Output = Self;\n "}, {"sha": "626a9e2b2109e86b03c9b5d3f87c15ad0667fc8a", "filename": "src/test/rustdoc/const-generics/const-generic-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -6,7 +6,7 @@ pub trait Array {\n }\n \n // @has foo/trait.Array.html\n-// @has - '//h3[@class=\"impl\"]' 'impl<T, const N: usize> Array for [T; N]'\n+// @has - '//div[@class=\"impl has-srclink\"]' 'impl<T, const N: usize> Array for [T; N]'\n impl <T, const N: usize> Array for [T; N] {\n     type Item = T;\n }"}, {"sha": "7c4c70432c762267c383ca1694a1f0b613edf633", "filename": "src/test/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -36,7 +36,7 @@ pub struct Foo<const N: usize> where u8: Trait<N>;\n // @has foo/struct.Bar.html '//pre[@class=\"rust struct\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);\n \n-// @has foo/struct.Foo.html '//h3[@id=\"impl\"]/code' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n+// @has foo/struct.Foo.html '//div[@id=\"impl\"]/code' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n impl<const M: usize> Foo<M> where u8: Trait<M> {\n     // @has - '//*[@id=\"associatedconstant.FOO_ASSOC\"]' 'pub const FOO_ASSOC: usize'\n     pub const FOO_ASSOC: usize = M + 13;\n@@ -47,7 +47,7 @@ impl<const M: usize> Foo<M> where u8: Trait<M> {\n     }\n }\n \n-// @has foo/struct.Bar.html '//h3[@id=\"impl\"]/code' 'impl<const M: usize> Bar<u8, M>'\n+// @has foo/struct.Bar.html '//div[@id=\"impl\"]/code' 'impl<const M: usize> Bar<u8, M>'\n impl<const M: usize> Bar<u8, M> {\n     // @has - '//*[@id=\"method.hey\"]' \\\n     //      'pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N>'"}, {"sha": "e4e504dd83b5b6cfc5d48ea42db91a1e89144050", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -9,20 +9,20 @@ pub enum Order {\n }\n \n // @has foo/struct.VSet.html '//pre[@class=\"rust struct\"]' 'pub struct VSet<T, const ORDER: Order>'\n-// @has foo/struct.VSet.html '//h3[@id=\"impl-Send\"]/code' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n-// @has foo/struct.VSet.html '//h3[@id=\"impl-Sync\"]/code' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//div[@id=\"impl-Send\"]/code' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//div[@id=\"impl-Sync\"]/code' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {\n     inner: Vec<T>,\n }\n \n-// @has foo/struct.VSet.html '//h3[@id=\"impl\"]/code' 'impl<T> VSet<T, {Order::Sorted}>'\n+// @has foo/struct.VSet.html '//div[@id=\"impl\"]/code' 'impl<T> VSet<T, {Order::Sorted}>'\n impl <T> VSet<T, {Order::Sorted}> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n     }\n }\n \n-// @has foo/struct.VSet.html '//h3[@id=\"impl-1\"]/code' 'impl<T> VSet<T, {Order::Unsorted}>'\n+// @has foo/struct.VSet.html '//div[@id=\"impl-1\"]/code' 'impl<T> VSet<T, {Order::Unsorted}>'\n impl <T> VSet<T, {Order::Unsorted}> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n@@ -31,7 +31,7 @@ impl <T> VSet<T, {Order::Unsorted}> {\n \n pub struct Escape<const S: &'static str>;\n \n-// @has foo/struct.Escape.html '//h3[@id=\"impl\"]/code' 'impl Escape<{ r#\"<script>alert(\"Escape\");</script>\"# }>'\n+// @has foo/struct.Escape.html '//div[@id=\"impl\"]/code' 'impl Escape<{ r#\"<script>alert(\"Escape\");</script>\"# }>'\n impl Escape<{ r#\"<script>alert(\"Escape\");</script>\"# }> {\n     pub fn f() {}\n }"}, {"sha": "4f15418650c2d69b49ec2f71f1d235b92e50de62", "filename": "src/test/rustdoc/doc-assoc-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fdoc-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fdoc-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-assoc-item.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -8,7 +8,7 @@ pub trait Bar {\n     fn foo(foo: Self::Fuu);\n }\n \n-// @has doc_assoc_item/struct.Foo.html '//*[@class=\"impl\"]' 'impl<T: Bar<Fuu = u32>> Foo<T>'\n+// @has doc_assoc_item/struct.Foo.html '//*[@class=\"impl has-srclink\"]' 'impl<T: Bar<Fuu = u32>> Foo<T>'\n impl<T: Bar<Fuu = u32>> Foo<T> {\n     pub fn new(t: T) -> Foo<T> {\n         Foo {"}, {"sha": "15c3444606c158f13edc549c47edee2be004b821", "filename": "src/test/rustdoc/duplicate_impls/issue-33054.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -1,8 +1,8 @@\n // @has issue_33054/impls/struct.Foo.html\n // @has - '//code' 'impl Foo'\n // @has - '//code' 'impl Bar for Foo'\n-// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n-// @count - '//*[@id=\"main\"]/details/summary/*[@class=\"impl\"]' 1\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n+// @count - '//*[@id=\"main\"]/details/summary/*[@class=\"impl has-srclink\"]' 1\n // @has issue_33054/impls/bar/trait.Bar.html\n // @has - '//code' 'impl Bar for Foo'\n // @count - '//*[@class=\"struct\"]' 1"}, {"sha": "2eed1cc9d7450bf1eae5ade2f736f559f1e7412f", "filename": "src/test/rustdoc/empty-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fempty-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fempty-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-impls.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -1,19 +1,19 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Foo.html\n-// @has - '//div[@id=\"synthetic-implementations-list\"]/h3[@id=\"impl-Send\"]' 'impl Send for Foo'\n+// @has - '//div[@id=\"synthetic-implementations-list\"]/div[@id=\"impl-Send\"]' 'impl Send for Foo'\n pub struct Foo;\n \n pub trait EmptyTrait {}\n \n-// @has - '//div[@id=\"trait-implementations-list\"]/h3[@id=\"impl-EmptyTrait\"]' 'impl EmptyTrait for Foo'\n+// @has - '//div[@id=\"trait-implementations-list\"]/div[@id=\"impl-EmptyTrait\"]' 'impl EmptyTrait for Foo'\n impl EmptyTrait for Foo {}\n \n pub trait NotEmpty {\n     fn foo(&self);\n }\n \n-// @has - '//div[@id=\"trait-implementations-list\"]/details/summary/h3[@id=\"impl-NotEmpty\"]' 'impl NotEmpty for Foo'\n+// @has - '//div[@id=\"trait-implementations-list\"]/details/summary/div[@id=\"impl-NotEmpty\"]' 'impl NotEmpty for Foo'\n impl NotEmpty for Foo {\n     fn foo(&self) {}\n }"}, {"sha": "4b6270b26da276fe122d7955317aa3a308323aff", "filename": "src/test/rustdoc/ensure-src-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fensure-src-link.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -2,5 +2,5 @@\n \n // This test ensures that the [src] link is present on traits items.\n \n-// @has foo/trait.Iterator.html '//h3[@id=\"method.zip\"]/a[@class=\"srclink\"]' \"[src]\"\n+// @has foo/trait.Iterator.html '//div[@id=\"method.zip\"]/a[@class=\"srclink\"]' \"[src]\"\n pub use std::iter::Iterator;"}, {"sha": "96ced021041ff174c91e995796ce7df9d1460ca0", "filename": "src/test/rustdoc/generic-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -2,10 +2,10 @@\n \n use std::fmt;\n \n-// @!has foo/struct.Bar.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n+// @!has foo/struct.Bar.html '//div[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n pub struct Bar;\n \n-// @has foo/struct.Foo.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n+// @has foo/struct.Foo.html '//div[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n pub struct Foo;\n // @has foo/struct.Foo.html '//div[@class=\"sidebar-links\"]/a[@href=\"#impl-ToString\"]' 'ToString'\n "}, {"sha": "e4039eecb71323f8e1e30861604b3967cf5d4d47", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -5,7 +5,7 @@ pub auto trait AnAutoTrait {}\n \n pub struct Foo<T> { field: T }\n \n-// @has impl_parts/struct.Foo.html '//*[@class=\"impl\"]//code' \\\n+// @has impl_parts/struct.Foo.html '//*[@class=\"impl has-srclink\"]//code' \\\n //     \"impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync,\"\n // @has impl_parts/trait.AnAutoTrait.html '//*[@class=\"item-list\"]//code' \\\n //     \"impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync,\""}, {"sha": "390f0b845e00b905e552283a6accb7c214d3589b", "filename": "src/test/rustdoc/inline_cross/issue-31948-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -5,8 +5,8 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948_1/struct.Wobble.html\n-// @has - '//*[@class=\"impl\"]//code' 'Bark for'\n-// @has - '//*[@class=\"impl\"]//code' 'Woof for'\n+// @has - '//*[@class=\"impl has-srclink\"]//code' 'Bark for'\n+// @has - '//*[@class=\"impl has-srclink\"]//code' 'Woof for'\n // @!has - '//*[@class=\"impl\"]//code' 'Bar for'\n // @!has - '//*[@class=\"impl\"]//code' 'Qux for'\n pub use rustdoc_nonreachable_impls::hidden::Wobble;"}, {"sha": "013e777440f1a83bbb3ca8459f67c9f2f91ccc87", "filename": "src/test/rustdoc/inline_cross/issue-31948-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -5,9 +5,9 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948_2/struct.Wobble.html\n-// @has - '//*[@class=\"impl\"]//code' 'Qux for'\n-// @has - '//*[@class=\"impl\"]//code' 'Bark for'\n-// @has - '//*[@class=\"impl\"]//code' 'Woof for'\n+// @has - '//*[@class=\"impl has-srclink\"]//code' 'Qux for'\n+// @has - '//*[@class=\"impl has-srclink\"]//code' 'Bark for'\n+// @has - '//*[@class=\"impl has-srclink\"]//code' 'Woof for'\n // @!has - '//*[@class=\"impl\"]//code' 'Bar for'\n pub use rustdoc_nonreachable_impls::hidden::Wobble;\n "}, {"sha": "82dcc2d2cc3efcdd3e692221a7a441626604349d", "filename": "src/test/rustdoc/inline_cross/issue-31948.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -5,9 +5,9 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948/struct.Foo.html\n-// @has - '//*[@class=\"impl\"]//code' 'Bark for'\n-// @has - '//*[@class=\"impl\"]//code' 'Woof for'\n-// @!has - '//*[@class=\"impl\"]//code' 'Bar for'\n+// @has - '//*[@class=\"impl has-srclink\"]//code' 'Bark for'\n+// @has - '//*[@class=\"impl has-srclink\"]//code' 'Woof for'\n+// @!has - '//*[@class=\"impl has-srclink\"]//code' 'Bar for'\n // @!has - '//*[@class=\"impl\"]//code' 'Qux for'\n pub use rustdoc_nonreachable_impls::Foo;\n "}, {"sha": "43ce13fd9b18524e2033b8e5d6b6d2e76bfdb76b", "filename": "src/test/rustdoc/issue-21474.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-21474.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-21474.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-21474.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -7,5 +7,5 @@ mod inner {\n pub trait Blah { }\n \n // @count issue_21474/struct.What.html \\\n-//        '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n+//        '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n pub struct What;"}, {"sha": "23d9e73b567d0a9174b577a9e7da4ab36e877425", "filename": "src/test/rustdoc/issue-29503.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29503.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -5,7 +5,7 @@ pub trait MyTrait {\n     fn my_string(&self) -> String;\n }\n \n-// @has - \"//div[@id='implementors-list']//h3[@id='impl-MyTrait']//code\" \"impl<T> MyTrait for T where T: Debug\"\n+// @has - \"//div[@id='implementors-list']//div[@id='impl-MyTrait']//code\" \"impl<T> MyTrait for T where T: Debug\"\n impl<T> MyTrait for T where T: fmt::Debug {\n     fn my_string(&self) -> String {\n         format!(\"{:?}\", self)"}, {"sha": "1777744c0fcb608a12d124dad91a91b3efc0ebe9", "filename": "src/test/rustdoc/issue-33302.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-33302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-33302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-33302.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -23,23 +23,23 @@ macro_rules! make {\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//h3[@class=\"impl\"]' 'impl T<[i32; 16]> for S'\n+        //        '//div[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n         // @has - '//*[@id=\"associatedconstant.C\"]' 'const C: [i32; 16]'\n         // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32'\n         impl T<[i32; ($n * $n)]> for S {\n             const C: [i32; ($n * $n)] = [0; ($n * $n)];\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//h3[@class=\"impl\"]' 'impl T<[i32; 16]> for S'\n+        //        '//div[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n         // @has - '//*[@id=\"associatedconstant.C-1\"]' 'const C: (i32,)'\n         // @has - '//*[@id=\"associatedconstant.D-1\"]' 'const D: i32'\n         impl T<(i32,)> for S {\n             const C: (i32,) = ($n,);\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//h3[@class=\"impl\"]' 'impl T<(i32, i32)> for S'\n+        //        '//div[@class=\"impl has-srclink\"]' 'impl T<(i32, i32)> for S'\n         // @has - '//*[@id=\"associatedconstant.C-2\"]' 'const C: (i32, i32)'\n         // @has - '//*[@id=\"associatedconstant.D-2\"]' 'const D: i32'\n         impl T<(i32, i32)> for S {"}, {"sha": "86479e6fb2e51a67ef6f2143e67dc8930c3822cf", "filename": "src/test/rustdoc/issue-45584.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-45584.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-45584.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-45584.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -4,12 +4,12 @@ pub trait Bar<T, U> {}\n \n // @has 'foo/struct.Foo1.html'\n pub struct Foo1;\n-// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n-// @has - '//*[@class=\"impl\"]' \"impl Bar<Foo1, &'static Foo1> for Foo1\"\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n+// @has - '//*[@class=\"impl has-srclink\"]' \"impl Bar<Foo1, &'static Foo1> for Foo1\"\n impl Bar<Foo1, &'static Foo1> for Foo1 {}\n \n // @has 'foo/struct.Foo2.html'\n pub struct Foo2;\n-// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n-// @has - '//*[@class=\"impl\"]' \"impl Bar<&'static Foo2, Foo2> for u8\"\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n+// @has - '//*[@class=\"impl has-srclink\"]' \"impl Bar<&'static Foo2, Foo2> for u8\"\n impl Bar<&'static Foo2, Foo2> for u8 {}"}, {"sha": "69774aa351f173fc5e395d246fc44e8ff7aabc72", "filename": "src/test/rustdoc/issue-50159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-50159.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -14,7 +14,7 @@ impl<B, C> Signal2 for B where B: Signal<Item = C> {\n // @has - '//code' 'impl<B> Send for Switch<B> where <B as Signal>::Item: Send'\n // @has - '//code' 'impl<B> Sync for Switch<B> where <B as Signal>::Item: Sync'\n // @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl\"]' 0\n-// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]' 5\n+// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n pub struct Switch<B: Signal> {\n     pub inner: <B as Signal2>::Item2,\n }"}, {"sha": "e01dae6c7f183ca81782a7d0721873de1355002d", "filename": "src/test/rustdoc/issue-51236.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-51236.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -7,8 +7,8 @@ pub mod traits {\n }\n \n // @has issue_51236/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> Send for \\\n-// Owned<T> where <T as Owned<'static>>::Reader: Send\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<T> Send for Owned<T> where <T as Owned<'static>>::Reader: Send\"\n pub struct Owned<T> where T: for<'a> ::traits::Owned<'a> {\n     marker: PhantomData<<T as ::traits::Owned<'static>>::Reader>,\n }"}, {"sha": "0b1f2f2c93f19eda621672dc73d2bfbf0726481f", "filename": "src/test/rustdoc/issue-53812.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-53812.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -12,9 +12,10 @@ macro_rules! array_impls {\n     }\n }\n \n-// @has issue_53812/trait.MyIterator.html '//*[@id=\"implementors-list\"]/h3[1]' 'MyStruct<[T; 0]>'\n-// @has - '//*[@id=\"implementors-list\"]/h3[2]' 'MyStruct<[T; 1]>'\n-// @has - '//*[@id=\"implementors-list\"]/h3[3]' 'MyStruct<[T; 2]>'\n-// @has - '//*[@id=\"implementors-list\"]/h3[4]' 'MyStruct<[T; 3]>'\n-// @has - '//*[@id=\"implementors-list\"]/h3[5]' 'MyStruct<[T; 10]>'\n+// @has issue_53812/trait.MyIterator.html\n+// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][1]' 'MyStruct<[T; 0]>'\n+// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][2]' 'MyStruct<[T; 1]>'\n+// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][3]' 'MyStruct<[T; 2]>'\n+// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][4]' 'MyStruct<[T; 3]>'\n+// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][5]' 'MyStruct<[T; 10]>'\n array_impls! { 10 3 2 1 0 }"}, {"sha": "5a94d36ed70d067f3acacc10111cccd6f4daf324", "filename": "src/test/rustdoc/issue-54705.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-54705.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -3,11 +3,11 @@ pub trait ScopeHandle<'scope> {}\n \n \n // @has issue_54705/struct.ScopeFutureContents.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'scope, S> \\\n-// Send for ScopeFutureContents<'scope, S> where S: Sync\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<'scope, S> Send for ScopeFutureContents<'scope, S> where S: Sync\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'scope, S> \\\n-// Sync for ScopeFutureContents<'scope, S> where S: Sync\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<'scope, S> Sync for ScopeFutureContents<'scope, S> where S: Sync\"\n pub struct ScopeFutureContents<'scope, S>\n     where S: ScopeHandle<'scope>,\n {"}, {"sha": "b664733487b3defb952ec1ce4658ca6f3f1ab14d", "filename": "src/test/rustdoc/issue-55321.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-55321.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -1,16 +1,18 @@\n #![feature(negative_impls)]\n \n // @has issue_55321/struct.A.html\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]//code' \"impl !Send for A\"\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]//code' \"impl !Sync for A\"\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl !Send for A\"\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl !Sync for A\"\n pub struct A();\n \n impl !Send for A {}\n impl !Sync for A {}\n \n // @has issue_55321/struct.B.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> !Send for \\\n-// B<T>\"\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> !Sync for \\\n-// B<T>\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<T> !Send for B<T>\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<T> !Sync for B<T>\"\n pub struct B<T: ?Sized>(A, Box<T>);"}, {"sha": "977596e0b90884e6bcfa622ee77fff74e0558180", "filename": "src/test/rustdoc/issue-56822.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-56822.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -17,8 +17,8 @@ impl<'a, T> MyTrait for Inner<'a, T> {\n }\n \n // @has issue_56822/struct.Parser.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'a> Send for \\\n-// Parser<'a>\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<'a> Send for Parser<'a>\"\n pub struct Parser<'a> {\n     field: <Wrapper<Inner<'a, u8>> as MyTrait>::Output\n }"}, {"sha": "e0417f1a4f4b8c9df243d30e126e8d2f1d10e45b", "filename": "src/test/rustdoc/issue-60726.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-60726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-60726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-60726.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -26,10 +26,10 @@ where\n {}\n \n // @has issue_60726/struct.IntoIter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> !Send for \\\n-// IntoIter<T>\"\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> !Sync for \\\n-// IntoIter<T>\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<T> !Send for IntoIter<T>\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<T> !Sync for IntoIter<T>\"\n pub struct IntoIter<T>{\n     hello:DynTrait<FooInterface<T>>,\n }"}, {"sha": "a90e0fea09223064332aa8a094898249a7e9308a", "filename": "src/test/rustdoc/issue-76501.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-76501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-76501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-76501.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -8,7 +8,8 @@ pub const fn bloop() -> i32 {\n pub struct Struct {}\n \n impl Struct {\n-    // @has 'issue_76501/struct.Struct.html' '//*[@class=\"method\"]' 'pub const fn blurp() -> i32'\n+    // @has 'issue_76501/struct.Struct.html' '//*[@class=\"method has-srclink\"]' \\\n+    // 'pub const fn blurp() -> i32'\n     /// A useless function that always returns 1.\n     pub const fn blurp() -> i32 {\n         1"}, {"sha": "2e4bec2544c9d6fd3a655f8de100293487bc63da", "filename": "src/test/rustdoc/issue-78673.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-78673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fissue-78673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-78673.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -7,17 +7,17 @@ pub trait AnAmazingTrait {}\n impl<T: Something> AnAmazingTrait for T {}\n \n // @has 'issue_78673/struct.MyStruct.html'\n-// @has  - '//*[@class=\"impl\"]' 'AnAmazingTrait for MyStruct'\n-// @!has - '//*[@class=\"impl\"]' 'AnAmazingTrait for T'\n+// @has  - '//*[@class=\"impl has-srclink\"]' 'AnAmazingTrait for MyStruct'\n+// @!has - '//*[@class=\"impl has-srclink\"]' 'AnAmazingTrait for T'\n pub struct MyStruct;\n \n impl AnAmazingTrait for MyStruct {}\n \n // generic structs may have _both_ specific and blanket impls that apply\n \n // @has 'issue_78673/struct.AnotherStruct.html'\n-// @has - '//*[@class=\"impl\"]' 'AnAmazingTrait for AnotherStruct<()>'\n-// @has - '//*[@class=\"impl\"]' 'AnAmazingTrait for T'\n+// @has - '//*[@class=\"impl has-srclink\"]' 'AnAmazingTrait for AnotherStruct<()>'\n+// @has - '//*[@class=\"impl has-srclink\"]' 'AnAmazingTrait for T'\n pub struct AnotherStruct<T>(T);\n \n impl<T: Something> Something for AnotherStruct<T> {}"}, {"sha": "f3ea6995839174fce43e40925fd7a4dd2a64ee09", "filename": "src/test/rustdoc/mut-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fmut-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fmut-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmut-params.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -5,7 +5,7 @@\n \n pub struct Foo;\n \n-// @count foo/struct.Foo.html '//*[@class=\"impl-items\"]//*[@class=\"method\"]' 2\n+// @count foo/struct.Foo.html '//*[@class=\"impl-items\"]//*[@class=\"method has-srclink\"]' 2\n // @!has - '//*[@class=\"impl-items\"]//*[@class=\"method\"]' 'mut'\n impl Foo {\n     pub fn foo(mut self) {}"}, {"sha": "ee65a7d5f3902a0ecb07555c44ea6a5e4cf15df0", "filename": "src/test/rustdoc/negative-impl.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -5,8 +5,10 @@ pub struct Alpha;\n // @matches negative_impl/struct.Bravo.html '//pre' \"pub struct Bravo<B>\"\n pub struct Bravo<B>(B);\n \n-// @matches negative_impl/struct.Alpha.html '//*[@class=\"impl\"]//code' \"impl !Send for Alpha\"\n+// @matches negative_impl/struct.Alpha.html '//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl !Send for Alpha\"\n impl !Send for Alpha {}\n \n-// @matches negative_impl/struct.Bravo.html '//*[@class=\"impl\"]//code' \"impl<B> !Send for Bravo<B>\"\n+// @matches negative_impl/struct.Bravo.html '//*[@class=\"impl has-srclink\"]//code' \"\\\n+// impl<B> !Send for Bravo<B>\"\n impl<B> !Send for Bravo<B> {}"}, {"sha": "2951f5128e07402229b190d5fef9a64b4324d575", "filename": "src/test/rustdoc/primitive-generic-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fprimitive-generic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fprimitive-generic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-generic-impl.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -2,4 +2,4 @@\n \n include!(\"primitive/primitive-generic-impl.rs\");\n \n-// @has foo/primitive.i32.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n+// @has foo/primitive.i32.html '//div[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'"}, {"sha": "fa7de0aff6a228fdff94fec796f9424e467ae6a9", "filename": "src/test/rustdoc/pub-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fpub-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fpub-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-method.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -10,8 +10,8 @@ pub fn bar() -> usize {\n }\n \n // @has foo/struct.Foo.html\n-// @has - '//*[@class=\"method\"]' 'pub fn new()'\n-// @has - '//*[@class=\"method\"]' 'fn not_pub()'\n+// @has - '//*[@class=\"method has-srclink\"]' 'pub fn new()'\n+// @has - '//*[@class=\"method has-srclink\"]' 'fn not_pub()'\n pub struct Foo(usize);\n \n impl Foo {"}, {"sha": "d256fbe8de08a941b0700994e8787f1799092c7d", "filename": "src/test/rustdoc/sidebar-links-to-foreign-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -6,9 +6,9 @@\n // @has - '//*[@class=\"sidebar-title\"][@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//h2[@id=\"foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n-// @has - '//h3[@id=\"impl-Foo-for-u32\"]//code' 'impl Foo for u32'\n+// @has - '//div[@id=\"impl-Foo-for-u32\"]//code' 'impl Foo for u32'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-%26%27a%20str\"]' \"&'a str\"\n-// @has - '//h3[@id=\"impl-Foo-for-%26%27a%20str\"]//code' \"impl<'a> Foo for &'a str\"\n+// @has - '//div[@id=\"impl-Foo-for-%26%27a%20str\"]//code' \"impl<'a> Foo for &'a str\"\n pub trait Foo {}\n \n impl Foo for u32 {}"}, {"sha": "6730c71e90f885318ac8155570f8355e9730f940", "filename": "src/test/rustdoc/sized_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsized_trait.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -1,17 +1,17 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Bar.html\n-// @!has - '//h3[@id=\"impl-Sized\"]'\n+// @!has - '//div[@id=\"impl-Sized\"]'\n pub struct Bar {\n     a: u16,\n }\n \n // @has foo/struct.Foo.html\n-// @!has - '//h3[@id=\"impl-Sized\"]'\n+// @!has - '//div[@id=\"impl-Sized\"]'\n pub struct Foo<T: ?Sized>(T);\n \n // @has foo/struct.Unsized.html\n-// @has - '//h3[@id=\"impl-Sized\"]/code' 'impl !Sized for Unsized'\n+// @has - '//div[@id=\"impl-Sized\"]/code' 'impl !Sized for Unsized'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "864cb0c400b64dc86dca67de432e9e9dad62eb09", "filename": "src/test/rustdoc/spotlight-from-dependency.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -3,7 +3,7 @@\n use std::iter::Iterator;\n \n // @has foo/struct.Odd.html\n-// @has - '//h4[@id=\"method.new\"]//span[@class=\"notable-traits\"]//code/span' 'impl Iterator for Odd'\n+// @has - '//div[@id=\"method.new\"]//span[@class=\"notable-traits\"]//code/span' 'impl Iterator for Odd'\n pub struct Odd {\n     current: usize,\n }"}, {"sha": "6f609e080d3dd0065e7204a64624ace689b782fd", "filename": "src/test/rustdoc/src-links-auto-impls.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -1,12 +1,12 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Unsized.html\n-// @has - '//h3[@id=\"impl-Sized\"]/code' 'impl !Sized for Unsized'\n-// @!has - '//h3[@id=\"impl-Sized\"]/a[@class=\"srclink\"]' '[src]'\n-// @has - '//h3[@id=\"impl-Sync\"]/code' 'impl Sync for Unsized'\n-// @!has - '//h3[@id=\"impl-Sync\"]/a[@class=\"srclink\"]' '[src]'\n-// @has - '//h3[@id=\"impl-Any\"]/code' 'impl<T> Any for T'\n-// @has - '//h3[@id=\"impl-Any\"]/a[@class=\"srclink\"]' '[src]'\n+// @has - '//div[@id=\"impl-Sized\"]/code' 'impl !Sized for Unsized'\n+// @!has - '//div[@id=\"impl-Sized\"]/a[@class=\"srclink\"]' '[src]'\n+// @has - '//div[@id=\"impl-Sync\"]/code' 'impl Sync for Unsized'\n+// @!has - '//div[@id=\"impl-Sync\"]/a[@class=\"srclink\"]' '[src]'\n+// @has - '//div[@id=\"impl-Any\"]/code' 'impl<T> Any for T'\n+// @has - '//div[@id=\"impl-Any\"]/a[@class=\"srclink\"]' '[src]'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "943596a0c851815959646259adedf269d2dab269", "filename": "src/test/rustdoc/synthetic_auto/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -1,8 +1,8 @@\n // @has basic/struct.Foo.html\n // @has - '//code' 'impl<T> Send for Foo<T> where T: Send'\n // @has - '//code' 'impl<T> Sync for Foo<T> where T: Sync'\n-// @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl\"]' 0\n-// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]' 5\n+// @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl has-srclink\"]' 0\n+// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n pub struct Foo<T> {\n     field: T,\n }"}, {"sha": "0213142266feb4d9caa367b9d607a46fe3f96e37", "filename": "src/test/rustdoc/synthetic_auto/complex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -20,8 +20,8 @@ mod foo {\n }\n \n // @has complex/struct.NotOuter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'a, T, K: \\\n-// ?Sized> Send for Outer<'a, T, K> where K: for<'b> Fn((&'b bool, &'a u8)) \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<'a, T, K: ?Sized> Send for Outer<'a, T, K> where K: for<'b> Fn((&'b bool, &'a u8)) \\\n // -> &'b i8, T: MyTrait<'a>, <T as MyTrait<'a>>::MyItem: Copy, 'a: 'static\"\n \n pub use foo::{Foo, Inner as NotInner, MyTrait as NotMyTrait, Outer as NotOuter};"}, {"sha": "c2e9b6f404677442129cb83a49e44c64d1a29557", "filename": "src/test/rustdoc/synthetic_auto/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -9,11 +9,11 @@ where\n {}\n \n // @has lifetimes/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'c, K> Send \\\n-// for Foo<'c, K> where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<'c, K> Send for Foo<'c, K> where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'c, K> Sync \\\n-// for Foo<'c, K> where K: Sync\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<'c, K> Sync for Foo<'c, K> where K: Sync\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,\n }"}, {"sha": "91fe6c351c5fcaf07c7268ddabeef7819983f6fb", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -1,12 +1,12 @@\n // @has manual/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' 'impl<T> Sync for \\\n-// Foo<T> where T: Sync'\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// 'impl<T> Sync for Foo<T> where T: Sync'\n //\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]//code' \\\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n // 'impl<T> Send for Foo<T>'\n //\n-// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n-// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]' 4\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n+// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 4\n pub struct Foo<T> {\n     field: T,\n }"}, {"sha": "16b36b56b68076058d7df5eb04f9df9531ac2d43", "filename": "src/test/rustdoc/synthetic_auto/negative.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -3,11 +3,11 @@ pub struct Inner<T: Copy> {\n }\n \n // @has negative/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> !Send for \\\n-// Outer<T>\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<T> !Send for Outer<T>\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> \\\n-// !Sync for Outer<T>\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<T> !Sync for Outer<T>\"\n pub struct Outer<T: Copy> {\n     inner_field: Inner<T>,\n }"}, {"sha": "a6cf5890dcab458c41465d2c9aeabb71d1caff05", "filename": "src/test/rustdoc/synthetic_auto/nested.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -9,10 +9,10 @@ where\n }\n \n // @has nested/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' 'impl<T> Send for \\\n-// Foo<T> where T: Copy'\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// 'impl<T> Send for Foo<T> where T: Copy'\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n // 'impl<T> Sync for Foo<T> where T: Sync'\n pub struct Foo<T> {\n     inner_field: Inner<T>,"}, {"sha": "5c744e3eb3c9423a98672c61acfd16ec393e827b", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -9,8 +9,8 @@ where\n }\n \n // @has no_redundancy/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> Send for \\\n-// Outer<T> where T: Copy + Send\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<T> Send for Outer<T> where T: Copy + Send\"\n pub struct Outer<T> {\n     inner_field: Inner<T>,\n }"}, {"sha": "baf9924b1ae66465fc954790596ca8f99e47cb29", "filename": "src/test/rustdoc/synthetic_auto/project.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -23,11 +23,12 @@ where\n }\n \n // @has project/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'c, K> Send \\\n-// for Foo<'c, K> where K: MyTrait<MyItem = bool>, 'c: 'static\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<'c, K> Send for Foo<'c, K> where K: MyTrait<MyItem = bool>, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'c, K> Sync \\\n-// for Foo<'c, K> where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, 'c: 'static,\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<'c, K> Sync for Foo<'c, K> where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, \\\n+// 'c: 'static,\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,\n }"}, {"sha": "e96187e2c9632a3d1c15731b914258413b386d0a", "filename": "src/test/rustdoc/synthetic_auto/self-referential.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -23,7 +23,7 @@ impl<T> Pattern for Wrapper<T> {\n \n \n // @has self_referential/struct.WriteAndThen.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<P1> Send for \\\n-// WriteAndThen<P1>  where  <P1 as Pattern>::Value: Send\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<P1> Send for WriteAndThen<P1>  where  <P1 as Pattern>::Value: Send\"\n pub struct WriteAndThen<P1>(pub P1::Value,pub <Constrain<P1, Wrapper<P1::Value>> as Pattern>::Value)\n     where P1: Pattern;"}, {"sha": "fc732a08ed404732984e8c74dd574f71e32297c8", "filename": "src/test/rustdoc/synthetic_auto/static-region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -3,8 +3,8 @@ pub trait OwnedTrait<'a> {\n }\n \n // @has static_region/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> Send for \\\n-// Owned<T> where <T as OwnedTrait<'static>>::Reader: Send\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// \"impl<T> Send for Owned<T> where <T as OwnedTrait<'static>>::Reader: Send\"\n pub struct Owned<T> where T: OwnedTrait<'static> {\n     marker: <T as OwnedTrait<'static>>::Reader,\n }"}, {"sha": "d0dfb8759e66531284c6d371bad083c301afa305", "filename": "src/test/rustdoc/trait-attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -2,7 +2,7 @@\n \n \n pub trait Foo {\n-    // @has foo/trait.Foo.html '//h3[@id=\"tymethod.foo\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n+    // @has foo/trait.Foo.html '//div[@id=\"tymethod.foo\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n     #[must_use]\n     fn foo();\n }\n@@ -11,11 +11,11 @@ pub trait Foo {\n pub struct Bar;\n \n impl Bar {\n-    // @has foo/struct.Bar.html '//h4[@id=\"method.bar\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n+    // @has foo/struct.Bar.html '//div[@id=\"method.bar\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n     #[must_use]\n     pub fn bar() {}\n \n-    // @has foo/struct.Bar.html '//h4[@id=\"method.bar2\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n+    // @has foo/struct.Bar.html '//div[@id=\"method.bar2\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n     #[must_use]\n     pub fn bar2() {}\n }"}, {"sha": "5b7c04c0d4445a185a2df8607907b08bca42244d", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -8,58 +8,58 @@ pub trait MyTrait {\n \n \n impl MyTrait for String {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-1\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-1\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-1\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-1\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-1\n     type Assoc = ();\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-1\n     const VALUE: u32 = 5;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-1\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-1\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-1\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-1\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-1\n     fn defaulted_override(&self) {}\n }\n \n impl MyTrait for Vec<u8> {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-2\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-2\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-2\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-2\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-2\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-2\n     type Assoc = ();\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-2\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-2\n     const VALUE: u32 = 5;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function-1\"]//a[@class=\"anchor\"]/@href' #method.trait_function-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function-1\"]//a[@class=\"anchor\"]/@href' #method.trait_function-1\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-2\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-2\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-2\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-2\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-2\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-2\n     fn defaulted_override(&self) {}\n }\n \n impl MyTrait for MyStruct {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-3\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"associatedtype.Assoc\"]//a[@class=\"type\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"type\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n     type Assoc = bool;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' trait.MyTrait.html#associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' trait.MyTrait.html#associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n     const VALUE: u32 = 20;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function-2\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function-2\"]//a[@class=\"anchor\"]/@href' #method.trait_function-2\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function-2\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function-2\"]//a[@class=\"anchor\"]/@href' #method.trait_function-2\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-3\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-3\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-3\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.defaulted_override\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.defaulted_override\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-3\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-3\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-3\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override\n     fn defaulted_override(&self) {}\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.defaulted\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.defaulted\"]//a[@class=\"anchor\"]/@href' #method.defaulted\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted\"]//a[@class=\"anchor\"]/@href' #method.defaulted\n }\n \n pub struct MyStruct;"}, {"sha": "21a7fdda7691df8e833723f325823ae118b407d0", "filename": "src/test/rustdoc/typedef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Ftypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Ftypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftypedef.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -9,8 +9,8 @@ impl MyStruct {\n }\n \n // @has typedef/type.MyAlias.html\n-// @has - '//*[@class=\"impl\"]//code' 'impl MyAlias'\n-// @has - '//*[@class=\"impl\"]//code' 'impl MyTrait for MyAlias'\n+// @has - '//*[@class=\"impl has-srclink\"]//code' 'impl MyAlias'\n+// @has - '//*[@class=\"impl has-srclink\"]//code' 'impl MyTrait for MyAlias'\n // @has - 'Alias docstring'\n // @has - '//*[@class=\"sidebar\"]//p[@class=\"location\"]' 'Type Definition MyAlias'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#implementations\"]' 'Methods'"}, {"sha": "f204a27d7d3c1908d0b576021f3bbe5086a45565", "filename": "src/test/rustdoc/where.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftest%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -11,23 +11,23 @@ pub fn charlie<C>() where C: MyTrait {}\n \n pub struct Delta<D>(D);\n \n-// @has foo/struct.Delta.html '//*[@class=\"impl\"]//code' \\\n+// @has foo/struct.Delta.html '//*[@class=\"impl has-srclink\"]//code' \\\n //          \"impl<D> Delta<D> where D: MyTrait\"\n impl<D> Delta<D> where D: MyTrait {\n     pub fn delta() {}\n }\n \n pub struct Echo<E>(E);\n \n-// @has foo/struct.Echo.html '//*[@class=\"impl\"]//code' \\\n+// @has foo/struct.Echo.html '//*[@class=\"impl has-srclink\"]//code' \\\n //          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n // @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//code' \\\n //          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n impl<E> MyTrait for Echo<E> where E: MyTrait {}\n \n pub enum Foxtrot<F> { Foxtrot1(F) }\n \n-// @has foo/enum.Foxtrot.html '//*[@class=\"impl\"]//code' \\\n+// @has foo/enum.Foxtrot.html '//*[@class=\"impl has-srclink\"]//code' \\\n //          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\"\n // @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//code' \\\n //          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\""}, {"sha": "47960c3f6cc2b596d9977cae1c7116ff173381ca", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da865095cf378fbfd07145c25fe5837ea091efeb/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=da865095cf378fbfd07145c25fe5837ea091efeb", "patch": "@@ -463,7 +463,7 @@ fn maybe_redirect(source: &str) -> Option<String> {\n     const REDIRECT: &str = \"<p>Redirecting to <a href=\";\n \n     let mut lines = source.lines();\n-    let redirect_line = lines.nth(6)?;\n+    let redirect_line = lines.nth(7)?;\n \n     redirect_line.find(REDIRECT).map(|i| {\n         let rest = &redirect_line[(i + REDIRECT.len() + 1)..];"}]}