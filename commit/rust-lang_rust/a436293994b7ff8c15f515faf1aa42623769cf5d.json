{"sha": "a436293994b7ff8c15f515faf1aa42623769cf5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MzYyOTM5OTRiN2ZmOGMxNWY1MTVmYWYxYWE0MjYyMzc2OWNmNWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-04T01:19:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-04T01:19:44Z"}, "message": "Rollup merge of #66913 - VirrageS:help-self, r=varkor,Centril\n\nSuggest calling method when first argument is `self`\n\nCloses: #66782\n\nI've explored different approaches for this MR but I think the most straightforward is the best one.\n\nI've tried to find out if the methods for given type exist (to maybe have a better suggestion), but we don't collect them anywhere and collecting them is quite problematic. Moreover, collecting all the methods would require rewriting big part of the code and also could potentially include performance degradation, which I don't think is necessary for this simple case.", "tree": {"sha": "b27f43db717b9ef14634dac8aa26e44ef516c8c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b27f43db717b9ef14634dac8aa26e44ef516c8c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a436293994b7ff8c15f515faf1aa42623769cf5d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeD+gwCRBK7hj4Ov3rIwAAdHIIACSZRzSueqsSGZwpsyNbxUxr\nU2WcgTw/h5Z9Vfg34Hrbw8z/U6Una/KXEDcgYDcHEUhenrXo1oBcWzN54EUVTcsI\nPFtDk2mb6oruk6HFbBrIWjId3akGcJtGXdjKqE8Te2QbyQAiiZOIMlEZVGxv7QTL\n/OD5nhnLVoOXt4dbNXkSgHjXEfb0DYokz6pt8vZa/pg3RAGyCSf0dyewEm3XcSXp\nAScpMF7nPmSJCEbHSB39nPJVkYO7kis3FQ6t9VoKleIny6SpofeqhA7Ht1VI8BK2\nsHUKbjmz2OnZ50BNqNJvnp2YHKezloJt9A5QQQzV0gN3qCNx9iTDc6AwZzShcu0=\n=3Cjg\n-----END PGP SIGNATURE-----\n", "payload": "tree b27f43db717b9ef14634dac8aa26e44ef516c8c6\nparent e845e691c988303ea54cb9de9639a8577b5a9d6b\nparent 7b91ef8837cb5e926418aeb4a675313ba928c877\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578100784 +0100\ncommitter GitHub <noreply@github.com> 1578100784 +0100\n\nRollup merge of #66913 - VirrageS:help-self, r=varkor,Centril\n\nSuggest calling method when first argument is `self`\n\nCloses: #66782\n\nI've explored different approaches for this MR but I think the most straightforward is the best one.\n\nI've tried to find out if the methods for given type exist (to maybe have a better suggestion), but we don't collect them anywhere and collecting them is quite problematic. Moreover, collecting all the methods would require rewriting big part of the code and also could potentially include performance degradation, which I don't think is necessary for this simple case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a436293994b7ff8c15f515faf1aa42623769cf5d", "html_url": "https://github.com/rust-lang/rust/commit/a436293994b7ff8c15f515faf1aa42623769cf5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a436293994b7ff8c15f515faf1aa42623769cf5d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e845e691c988303ea54cb9de9639a8577b5a9d6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e845e691c988303ea54cb9de9639a8577b5a9d6b", "html_url": "https://github.com/rust-lang/rust/commit/e845e691c988303ea54cb9de9639a8577b5a9d6b"}, {"sha": "7b91ef8837cb5e926418aeb4a675313ba928c877", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b91ef8837cb5e926418aeb4a675313ba928c877", "html_url": "https://github.com/rust-lang/rust/commit/7b91ef8837cb5e926418aeb4a675313ba928c877"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "325921b59823a7b61faba14c76d809c8f9d2874f", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a436293994b7ff8c15f515faf1aa42623769cf5d/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a436293994b7ff8c15f515faf1aa42623769cf5d/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=a436293994b7ff8c15f515faf1aa42623769cf5d", "patch": "@@ -345,7 +345,7 @@ struct DiagnosticMetadata {\n     /// The current self item if inside an ADT (used for better errors).\n     current_self_item: Option<NodeId>,\n \n-    /// The current enclosing funciton (used for better errors).\n+    /// The current enclosing function (used for better errors).\n     current_function: Option<Span>,\n \n     /// A list of labels as of yet unused. Labels will be removed from this map when"}, {"sha": "3a6bb37269ff05f94fe1967c110e25876b4bb6f0", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a436293994b7ff8c15f515faf1aa42623769cf5d/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a436293994b7ff8c15f515faf1aa42623769cf5d/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=a436293994b7ff8c15f515faf1aa42623769cf5d", "patch": "@@ -259,6 +259,24 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                 }\n                 return (err, candidates);\n             }\n+\n+            // If the first argument in call is `self` suggest calling a method.\n+            if let Some((call_span, args_span)) = self.call_has_self_arg(source) {\n+                let mut args_snippet = String::new();\n+                if let Some(args_span) = args_span {\n+                    if let Ok(snippet) = self.r.session.source_map().span_to_snippet(args_span) {\n+                        args_snippet = snippet;\n+                    }\n+                }\n+\n+                err.span_suggestion(\n+                    call_span,\n+                    &format!(\"try calling `{}` as a method\", ident),\n+                    format!(\"self.{}({})\", path_str, args_snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+                return (err, candidates);\n+            }\n         }\n \n         // Try Levenshtein algorithm.\n@@ -298,6 +316,43 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         (err, candidates)\n     }\n \n+    /// Check if the source is call expression and the first argument is `self`. If true,\n+    /// return the span of whole call and the span for all arguments expect the first one (`self`).\n+    fn call_has_self_arg(&self, source: PathSource<'_>) -> Option<(Span, Option<Span>)> {\n+        let mut has_self_arg = None;\n+        if let PathSource::Expr(parent) = source {\n+            match &parent?.kind {\n+                ExprKind::Call(_, args) if args.len() > 0 => {\n+                    let mut expr_kind = &args[0].kind;\n+                    loop {\n+                        match expr_kind {\n+                            ExprKind::Path(_, arg_name) if arg_name.segments.len() == 1 => {\n+                                if arg_name.segments[0].ident.name == kw::SelfLower {\n+                                    let call_span = parent.unwrap().span;\n+                                    let tail_args_span = if args.len() > 1 {\n+                                        Some(Span::new(\n+                                            args[1].span.lo(),\n+                                            args.last().unwrap().span.hi(),\n+                                            call_span.ctxt(),\n+                                        ))\n+                                    } else {\n+                                        None\n+                                    };\n+                                    has_self_arg = Some((call_span, tail_args_span));\n+                                }\n+                                break;\n+                            }\n+                            ExprKind::AddrOf(_, _, expr) => expr_kind = &expr.kind,\n+                            _ => break,\n+                        }\n+                    }\n+                }\n+                _ => (),\n+            }\n+        };\n+        return has_self_arg;\n+    }\n+\n     fn followed_by_brace(&self, span: Span) -> (bool, Option<(Span, String)>) {\n         // HACK(estebank): find a better way to figure out that this was a\n         // parser issue where a struct literal is being used on an expression"}, {"sha": "d6bf543352701befc89fd10daca01e6bf4eb9281", "filename": "src/test/ui/self/suggest-self-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a436293994b7ff8c15f515faf1aa42623769cf5d/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a436293994b7ff8c15f515faf1aa42623769cf5d/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.rs?ref=a436293994b7ff8c15f515faf1aa42623769cf5d", "patch": "@@ -0,0 +1,25 @@\n+struct Foo {}\n+\n+impl Foo {\n+    fn foo(&self) {\n+        bar(self);\n+        //~^ ERROR cannot find function `bar` in this scope\n+        //~| HELP try calling `bar` as a method\n+\n+        bar(&&self, 102);\n+        //~^ ERROR cannot find function `bar` in this scope\n+        //~| HELP try calling `bar` as a method\n+\n+        bar(&mut self, 102, &\"str\");\n+        //~^ ERROR cannot find function `bar` in this scope\n+        //~| HELP try calling `bar` as a method\n+\n+        bar();\n+        //~^ ERROR cannot find function `bar` in this scope\n+\n+        self.bar();\n+        //~^ ERROR no method named `bar` found for type\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "452c31275153a88a4fe6a62bc0a0c4f005fb0ea7", "filename": "src/test/ui/self/suggest-self-2.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a436293994b7ff8c15f515faf1aa42623769cf5d/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a436293994b7ff8c15f515faf1aa42623769cf5d/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.stderr?ref=a436293994b7ff8c15f515faf1aa42623769cf5d", "patch": "@@ -0,0 +1,40 @@\n+error[E0425]: cannot find function `bar` in this scope\n+  --> $DIR/suggest-self-2.rs:5:9\n+   |\n+LL |         bar(self);\n+   |         ^^^------\n+   |         |\n+   |         help: try calling `bar` as a method: `self.bar()`\n+\n+error[E0425]: cannot find function `bar` in this scope\n+  --> $DIR/suggest-self-2.rs:9:9\n+   |\n+LL |         bar(&&self, 102);\n+   |         ^^^-------------\n+   |         |\n+   |         help: try calling `bar` as a method: `self.bar(102)`\n+\n+error[E0425]: cannot find function `bar` in this scope\n+  --> $DIR/suggest-self-2.rs:13:9\n+   |\n+LL |         bar(&mut self, 102, &\"str\");\n+   |         ^^^------------------------\n+   |         |\n+   |         help: try calling `bar` as a method: `self.bar(102, &\"str\")`\n+\n+error[E0425]: cannot find function `bar` in this scope\n+  --> $DIR/suggest-self-2.rs:17:9\n+   |\n+LL |         bar();\n+   |         ^^^ not found in this scope\n+\n+error[E0599]: no method named `bar` found for type `&Foo` in the current scope\n+  --> $DIR/suggest-self-2.rs:20:14\n+   |\n+LL |         self.bar();\n+   |              ^^^ method not found in `&Foo`\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0425, E0599.\n+For more information about an error, try `rustc --explain E0425`."}]}