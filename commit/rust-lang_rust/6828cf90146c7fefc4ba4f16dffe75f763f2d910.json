{"sha": "6828cf90146c7fefc4ba4f16dffe75f763f2d910", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MjhjZjkwMTQ2YzdmZWZjNGJhNGYxNmRmZmU3NWY3NjNmMmQ5MTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-06T20:41:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-06T20:41:33Z"}, "message": "Auto merge of #47235 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\n- Successful merges: #46947, #47170, #47190, #47205, #47217, #47220, #47230\n- Failed merges: #47233", "tree": {"sha": "44e745909b8c8bfc2808bacc08f5aeee4916e65e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44e745909b8c8bfc2808bacc08f5aeee4916e65e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6828cf90146c7fefc4ba4f16dffe75f763f2d910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6828cf90146c7fefc4ba4f16dffe75f763f2d910", "html_url": "https://github.com/rust-lang/rust/commit/6828cf90146c7fefc4ba4f16dffe75f763f2d910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6828cf90146c7fefc4ba4f16dffe75f763f2d910/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72176cf96cb79a0ebf62972b76dbe68c933bef4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/72176cf96cb79a0ebf62972b76dbe68c933bef4d", "html_url": "https://github.com/rust-lang/rust/commit/72176cf96cb79a0ebf62972b76dbe68c933bef4d"}, {"sha": "ce701061384bae7c3b9873460c1c5df8204431fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce701061384bae7c3b9873460c1c5df8204431fc", "html_url": "https://github.com/rust-lang/rust/commit/ce701061384bae7c3b9873460c1c5df8204431fc"}], "stats": {"total": 470, "additions": 278, "deletions": 192}, "files": [{"sha": "e094070fc3dd10cb864e31e49cb142005ed8d00a", "filename": "src/liballoc/btree/set.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Fliballoc%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Fliballoc%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fset.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -415,6 +415,16 @@ impl<T: Ord> BTreeSet<T> {\n     /// The value may be any borrowed form of the set's value type,\n     /// but the ordering on the borrowed form *must* match the\n     /// ordering on the value type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.get(&2), Some(&2));\n+    /// assert_eq!(set.get(&4), None);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>\n         where T: Borrow<Q>,\n@@ -540,6 +550,19 @@ impl<T: Ord> BTreeSet<T> {\n \n     /// Adds a value to the set, replacing the existing value, if any, that is equal to the given\n     /// one. Returns the replaced value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut set = BTreeSet::new();\n+    /// set.insert(Vec::<i32>::new());\n+    ///\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\n+    /// set.replace(Vec::with_capacity(10));\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn replace(&mut self, value: T) -> Option<T> {\n         Recover::replace(&mut self.map, value)\n@@ -576,6 +599,16 @@ impl<T: Ord> BTreeSet<T> {\n     /// The value may be any borrowed form of the set's value type,\n     /// but the ordering on the borrowed form *must* match the\n     /// ordering on the value type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.take(&2), Some(2));\n+    /// assert_eq!(set.take(&2), None);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T>\n         where T: Borrow<Q>,"}, {"sha": "b5d24203b5e8182c615e889640c77fb4d782e659", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -439,7 +439,7 @@ macro_rules! int_impl {\n         }\n \n         /// Checked integer division. Computes `self / rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in overflow.\n+        /// if `rhs == 0` or the division results in overflow.\n         ///\n         /// # Examples\n         ///\n@@ -461,7 +461,7 @@ macro_rules! int_impl {\n         }\n \n         /// Checked integer remainder. Computes `self % rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in overflow.\n+        /// if `rhs == 0` or the division results in overflow.\n         ///\n         /// # Examples\n         ///\n@@ -1607,7 +1607,7 @@ macro_rules! uint_impl {\n         }\n \n         /// Checked integer division. Computes `self / rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in overflow.\n+        /// if `rhs == 0`.\n         ///\n         /// # Examples\n         ///\n@@ -1627,7 +1627,7 @@ macro_rules! uint_impl {\n         }\n \n         /// Checked integer remainder. Computes `self % rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in overflow.\n+        /// if `rhs == 0`.\n         ///\n         /// # Examples\n         ///"}, {"sha": "c3bd6a2bc187d38cdd176fa19c4df2f369f9c2be", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -53,7 +53,7 @@ pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n pub unsafe extern fn __rust_start_panic(_data: usize, _vtable: usize) -> u32 {\n     abort();\n \n-    #[cfg(unix)]\n+    #[cfg(any(unix, target_os = \"cloudabi\"))]\n     unsafe fn abort() -> ! {\n         extern crate libc;\n         libc::abort();"}, {"sha": "92e40e8f26d40d646221b720edc1af9035ac35f2", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -68,6 +68,7 @@ mod imp;\n \n // i686-pc-windows-gnu and all others\n #[cfg(any(all(unix, not(target_os = \"emscripten\")),\n+          target_os = \"cloudabi\",\n           target_os = \"redox\",\n           all(windows, target_arch = \"x86\", target_env = \"gnu\")))]\n #[path = \"gcc.rs\"]"}, {"sha": "c31a5c9d86d7763c19d554c1f2d7b4fd7aaf4a71", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -155,8 +155,8 @@ impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n     Bool(value)\n });\n \n-impl_stable_hash_for!(enum ::syntax::ast::IntTy { Is, I8, I16, I32, I64, I128 });\n-impl_stable_hash_for!(enum ::syntax::ast::UintTy { Us, U8, U16, U32, U64, U128 });\n+impl_stable_hash_for!(enum ::syntax::ast::IntTy { Isize, I8, I16, I32, I64, I128 });\n+impl_stable_hash_for!(enum ::syntax::ast::UintTy { Usize, U8, U16, U32, U64, U128 });\n impl_stable_hash_for!(enum ::syntax::ast::FloatTy { F32, F64 });\n impl_stable_hash_for!(enum ::syntax::ast::Unsafety { Unsafe, Normal });\n impl_stable_hash_for!(enum ::syntax::ast::Constness { Const, NotConst });"}, {"sha": "8ffea62f6be51a16cf2fbaa2a515a46c24135be1", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -145,7 +145,7 @@ impl<'tcx> MemoryPointer {\n }\n \n \n-#[derive(Copy, Clone, Eq, Hash, Ord, PartialEq, PartialOrd, Debug)]\n+#[derive(Copy, Clone, Default, Eq, Hash, Ord, PartialEq, PartialOrd, Debug)]\n pub struct AllocId(pub u64);\n \n impl fmt::Display for AllocId {"}, {"sha": "05b1d584e9c4e2c08cb4fb006aced0b99f88a20a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -1082,6 +1082,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"gather borrowck statistics\"),\n     no_landing_pads: bool = (false, parse_bool, [TRACKED],\n         \"omit landing pads for unwinding\"),\n+    fewer_names: bool = (false, parse_bool, [TRACKED],\n+        \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR)\"),\n     debug_llvm: bool = (false, parse_bool, [UNTRACKED],\n         \"enable debug output from LLVM\"),\n     meta_stats: bool = (false, parse_bool, [UNTRACKED],\n@@ -2811,6 +2813,10 @@ mod tests {\n         opts.debugging_opts.no_landing_pads = true;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+        opts = reference.clone();\n+        opts.debugging_opts.fewer_names = true;\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n         opts = reference.clone();\n         opts.debugging_opts.no_trans = true;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "43dbb8d7e1375862e896ea8381b6fce0716d6d8c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -18,7 +18,7 @@ use lint;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::{BorrowckMode, DebugInfoLevel};\n+use session::config::{BorrowckMode, DebugInfoLevel, OutputType};\n use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n@@ -504,6 +504,13 @@ impl Session {\n     pub fn linker_flavor(&self) -> LinkerFlavor {\n         self.opts.debugging_opts.linker_flavor.unwrap_or(self.target.target.linker_flavor)\n     }\n+\n+    pub fn fewer_names(&self) -> bool {\n+        let more_names = self.opts.output_types.contains_key(&OutputType::LlvmAssembly) ||\n+                         self.opts.output_types.contains_key(&OutputType::Bitcode);\n+        self.opts.debugging_opts.fewer_names || !more_names\n+    }\n+\n     pub fn no_landing_pads(&self) -> bool {\n         self.opts.debugging_opts.no_landing_pads || self.panic_strategy() == PanicStrategy::Abort\n     }"}, {"sha": "87742fe91627e4340cd555929058cb5b1d18f305", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -754,13 +754,13 @@ impl<'tcx> CommonTypes<'tcx> {\n             char: mk(TyChar),\n             never: mk(TyNever),\n             err: mk(TyError),\n-            isize: mk(TyInt(ast::IntTy::Is)),\n+            isize: mk(TyInt(ast::IntTy::Isize)),\n             i8: mk(TyInt(ast::IntTy::I8)),\n             i16: mk(TyInt(ast::IntTy::I16)),\n             i32: mk(TyInt(ast::IntTy::I32)),\n             i64: mk(TyInt(ast::IntTy::I64)),\n             i128: mk(TyInt(ast::IntTy::I128)),\n-            usize: mk(TyUint(ast::UintTy::Us)),\n+            usize: mk(TyUint(ast::UintTy::Usize)),\n             u8: mk(TyUint(ast::UintTy::U8)),\n             u16: mk(TyUint(ast::UintTy::U16)),\n             u32: mk(TyUint(ast::UintTy::U32)),\n@@ -895,31 +895,29 @@ pub struct InterpretInterner<'tcx> {\n     allocs: FxHashSet<&'tcx interpret::Allocation>,\n \n     /// Allows obtaining function instance handles via a unique identifier\n-    functions: FxHashMap<u64, Instance<'tcx>>,\n+    functions: FxHashMap<interpret::AllocId, Instance<'tcx>>,\n \n     /// Inverse map of `interpret_functions`.\n     /// Used so we don't allocate a new pointer every time we need one\n-    function_cache: FxHashMap<Instance<'tcx>, u64>,\n+    function_cache: FxHashMap<Instance<'tcx>, interpret::AllocId>,\n \n     /// Allows obtaining const allocs via a unique identifier\n-    alloc_by_id: FxHashMap<u64, &'tcx interpret::Allocation>,\n+    alloc_by_id: FxHashMap<interpret::AllocId, &'tcx interpret::Allocation>,\n \n     /// The AllocId to assign to the next new regular allocation.\n     /// Always incremented, never gets smaller.\n-    next_id: u64,\n+    next_id: interpret::AllocId,\n \n     /// Allows checking whether a constant already has an allocation\n-    ///\n-    /// The pointers are to the beginning of an `alloc_by_id` allocation\n-    alloc_cache: FxHashMap<interpret::GlobalId<'tcx>, interpret::Pointer>,\n+    alloc_cache: FxHashMap<interpret::GlobalId<'tcx>, interpret::AllocId>,\n \n     /// A cache for basic byte allocations keyed by their contents. This is used to deduplicate\n     /// allocations for string and bytestring literals.\n-    literal_alloc_cache: FxHashMap<Vec<u8>, u64>,\n+    literal_alloc_cache: FxHashMap<Vec<u8>, interpret::AllocId>,\n }\n \n impl<'tcx> InterpretInterner<'tcx> {\n-    pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> u64 {\n+    pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> interpret::AllocId {\n         if let Some(&alloc_id) = self.function_cache.get(&instance) {\n             return alloc_id;\n         }\n@@ -932,29 +930,29 @@ impl<'tcx> InterpretInterner<'tcx> {\n \n     pub fn get_fn(\n         &self,\n-        id: u64,\n+        id: interpret::AllocId,\n     ) -> Option<Instance<'tcx>> {\n         self.functions.get(&id).cloned()\n     }\n \n     pub fn get_alloc(\n         &self,\n-        id: u64,\n+        id: interpret::AllocId,\n     ) -> Option<&'tcx interpret::Allocation> {\n         self.alloc_by_id.get(&id).cloned()\n     }\n \n     pub fn get_cached(\n         &self,\n         global_id: interpret::GlobalId<'tcx>,\n-    ) -> Option<interpret::Pointer> {\n+    ) -> Option<interpret::AllocId> {\n         self.alloc_cache.get(&global_id).cloned()\n     }\n \n     pub fn cache(\n         &mut self,\n         global_id: interpret::GlobalId<'tcx>,\n-        ptr: interpret::Pointer,\n+        ptr: interpret::AllocId,\n     ) {\n         if let Some(old) = self.alloc_cache.insert(global_id, ptr) {\n             bug!(\"tried to cache {:?}, but was already existing as {:#?}\", global_id, old);\n@@ -963,7 +961,7 @@ impl<'tcx> InterpretInterner<'tcx> {\n \n     pub fn intern_at_reserved(\n         &mut self,\n-        id: u64,\n+        id: interpret::AllocId,\n         alloc: &'tcx interpret::Allocation,\n     ) {\n         if let Some(old) = self.alloc_by_id.insert(id, alloc) {\n@@ -975,9 +973,9 @@ impl<'tcx> InterpretInterner<'tcx> {\n     /// yet have an allocation backing it.\n     pub fn reserve(\n         &mut self,\n-    ) -> u64 {\n+    ) -> interpret::AllocId {\n         let next = self.next_id;\n-        self.next_id = self.next_id\n+        self.next_id.0 = self.next_id.0\n             .checked_add(1)\n             .expect(\"You overflowed a u64 by incrementing by 1... \\\n                      You've just earned yourself a free drink if we ever meet. \\\n@@ -1069,7 +1067,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Allocates a byte or string literal for `mir::interpret`\n-    pub fn allocate_cached(self, bytes: &[u8]) -> u64 {\n+    pub fn allocate_cached(self, bytes: &[u8]) -> interpret::AllocId {\n         // check whether we already allocated this literal or a constant with the same memory\n         if let Some(&alloc_id) = self.interpret_interner.borrow().literal_alloc_cache.get(bytes) {\n             return alloc_id;\n@@ -1912,7 +1910,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn mk_mach_int(self, tm: ast::IntTy) -> Ty<'tcx> {\n         match tm {\n-            ast::IntTy::Is   => self.types.isize,\n+            ast::IntTy::Isize   => self.types.isize,\n             ast::IntTy::I8   => self.types.i8,\n             ast::IntTy::I16  => self.types.i16,\n             ast::IntTy::I32  => self.types.i32,\n@@ -1923,7 +1921,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn mk_mach_uint(self, tm: ast::UintTy) -> Ty<'tcx> {\n         match tm {\n-            ast::UintTy::Us   => self.types.usize,\n+            ast::UintTy::Usize   => self.types.usize,\n             ast::UintTy::U8   => self.types.u8,\n             ast::UintTy::U16  => self.types.u16,\n             ast::UintTy::U32  => self.types.u32,"}, {"sha": "34a7d4ad7cfd03b7bd951c832e2f6ec1aba7c08e", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -520,7 +520,7 @@ impl<'a, 'tcx> Integer {\n             attr::SignedInt(IntTy::I32) | attr::UnsignedInt(UintTy::U32) => I32,\n             attr::SignedInt(IntTy::I64) | attr::UnsignedInt(UintTy::U64) => I64,\n             attr::SignedInt(IntTy::I128) | attr::UnsignedInt(UintTy::U128) => I128,\n-            attr::SignedInt(IntTy::Is) | attr::UnsignedInt(UintTy::Us) => {\n+            attr::SignedInt(IntTy::Isize) | attr::UnsignedInt(UintTy::Usize) => {\n                 dl.ptr_sized_integer()\n             }\n         }"}, {"sha": "e5f6ac88530675a762624255e708172d8cdc6241", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -1575,7 +1575,7 @@ impl ReprOptions {\n     pub fn linear(&self) -> bool { self.flags.contains(ReprFlags::IS_LINEAR) }\n \n     pub fn discr_type(&self) -> attr::IntType {\n-        self.int.unwrap_or(attr::SignedInt(ast::IntTy::Is))\n+        self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))\n     }\n \n     /// Returns true if this `#[repr()]` should inhabit \"smart enum"}, {"sha": "cf784b7cafb870513d35ee8de6195815a390b9dd", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -1478,13 +1478,6 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn is_uint(&self) -> bool {\n-        match self.sty {\n-            TyInfer(IntVar(_)) | TyUint(ast::UintTy::Us) => true,\n-            _ => false\n-        }\n-    }\n-\n     pub fn is_char(&self) -> bool {\n         match self.sty {\n             TyChar => true,\n@@ -1512,7 +1505,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn is_machine(&self) -> bool {\n         match self.sty {\n-            TyInt(ast::IntTy::Is) | TyUint(ast::UintTy::Us) => false,\n+            TyInt(ast::IntTy::Isize) | TyUint(ast::UintTy::Usize) => false,\n             TyInt(..) | TyUint(..) | TyFloat(..) => true,\n             _ => false,\n         }"}, {"sha": "638859af0f7d3909f53143d7901d6a1dabf35157", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -55,7 +55,7 @@ macro_rules! typed_literal {\n             SignedInt(ast::IntTy::I32)   => ConstInt::I32($lit),\n             SignedInt(ast::IntTy::I64)   => ConstInt::I64($lit),\n             SignedInt(ast::IntTy::I128)   => ConstInt::I128($lit),\n-            SignedInt(ast::IntTy::Is) => match $tcx.sess.target.isize_ty {\n+            SignedInt(ast::IntTy::Isize) => match $tcx.sess.target.isize_ty {\n                 ast::IntTy::I16 => ConstInt::Isize(ConstIsize::Is16($lit)),\n                 ast::IntTy::I32 => ConstInt::Isize(ConstIsize::Is32($lit)),\n                 ast::IntTy::I64 => ConstInt::Isize(ConstIsize::Is64($lit)),\n@@ -66,7 +66,7 @@ macro_rules! typed_literal {\n             UnsignedInt(ast::UintTy::U32) => ConstInt::U32($lit),\n             UnsignedInt(ast::UintTy::U64) => ConstInt::U64($lit),\n             UnsignedInt(ast::UintTy::U128) => ConstInt::U128($lit),\n-            UnsignedInt(ast::UintTy::Us) => match $tcx.sess.target.usize_ty {\n+            UnsignedInt(ast::UintTy::Usize) => match $tcx.sess.target.usize_ty {\n                 ast::UintTy::U16 => ConstInt::Usize(ConstUsize::Us16($lit)),\n                 ast::UintTy::U32 => ConstInt::Usize(ConstUsize::Us32($lit)),\n                 ast::UintTy::U64 => ConstInt::Usize(ConstUsize::Us64($lit)),\n@@ -84,13 +84,13 @@ impl IntTypeExt for attr::IntType {\n             SignedInt(ast::IntTy::I32)     => tcx.types.i32,\n             SignedInt(ast::IntTy::I64)     => tcx.types.i64,\n             SignedInt(ast::IntTy::I128)     => tcx.types.i128,\n-            SignedInt(ast::IntTy::Is)   => tcx.types.isize,\n+            SignedInt(ast::IntTy::Isize)   => tcx.types.isize,\n             UnsignedInt(ast::UintTy::U8)    => tcx.types.u8,\n             UnsignedInt(ast::UintTy::U16)   => tcx.types.u16,\n             UnsignedInt(ast::UintTy::U32)   => tcx.types.u32,\n             UnsignedInt(ast::UintTy::U64)   => tcx.types.u64,\n             UnsignedInt(ast::UintTy::U128)   => tcx.types.u128,\n-            UnsignedInt(ast::UintTy::Us) => tcx.types.usize,\n+            UnsignedInt(ast::UintTy::Usize) => tcx.types.usize,\n         }\n     }\n \n@@ -105,13 +105,13 @@ impl IntTypeExt for attr::IntType {\n             (SignedInt(ast::IntTy::I32), ConstInt::I32(_)) => {},\n             (SignedInt(ast::IntTy::I64), ConstInt::I64(_)) => {},\n             (SignedInt(ast::IntTy::I128), ConstInt::I128(_)) => {},\n-            (SignedInt(ast::IntTy::Is), ConstInt::Isize(_)) => {},\n+            (SignedInt(ast::IntTy::Isize), ConstInt::Isize(_)) => {},\n             (UnsignedInt(ast::UintTy::U8), ConstInt::U8(_)) => {},\n             (UnsignedInt(ast::UintTy::U16), ConstInt::U16(_)) => {},\n             (UnsignedInt(ast::UintTy::U32), ConstInt::U32(_)) => {},\n             (UnsignedInt(ast::UintTy::U64), ConstInt::U64(_)) => {},\n             (UnsignedInt(ast::UintTy::U128), ConstInt::U128(_)) => {},\n-            (UnsignedInt(ast::UintTy::Us), ConstInt::Usize(_)) => {},\n+            (UnsignedInt(ast::UintTy::Usize), ConstInt::Usize(_)) => {},\n             _ => bug!(\"disr type mismatch: {:?} vs {:?}\", self, val),\n         }\n     }"}, {"sha": "418bd4b5effc6b08ba01d3a50dc4e4313fbad51a", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -133,8 +133,8 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n                 (&LitKind::Int(I128_OVERFLOW, Signed(IntTy::I128)), _) => {\n                     Some(I128(i128::min_value()))\n                 },\n-                (&LitKind::Int(n, _), &ty::TyInt(IntTy::Is)) |\n-                (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n+                (&LitKind::Int(n, _), &ty::TyInt(IntTy::Isize)) |\n+                (&LitKind::Int(n, Signed(IntTy::Isize)), _) => {\n                     match tcx.sess.target.isize_ty {\n                         IntTy::I16 => if n == I16_OVERFLOW {\n                             Some(Isize(Is16(i16::min_value())))\n@@ -478,15 +478,15 @@ fn cast_const_int<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty::TyInt(ast::IntTy::I32) => Ok(Integral(I32(v as i128 as i32))),\n         ty::TyInt(ast::IntTy::I64) => Ok(Integral(I64(v as i128 as i64))),\n         ty::TyInt(ast::IntTy::I128) => Ok(Integral(I128(v as i128))),\n-        ty::TyInt(ast::IntTy::Is) => {\n+        ty::TyInt(ast::IntTy::Isize) => {\n             Ok(Integral(Isize(ConstIsize::new_truncating(v as i128, tcx.sess.target.isize_ty))))\n         },\n         ty::TyUint(ast::UintTy::U8) => Ok(Integral(U8(v as u8))),\n         ty::TyUint(ast::UintTy::U16) => Ok(Integral(U16(v as u16))),\n         ty::TyUint(ast::UintTy::U32) => Ok(Integral(U32(v as u32))),\n         ty::TyUint(ast::UintTy::U64) => Ok(Integral(U64(v as u64))),\n         ty::TyUint(ast::UintTy::U128) => Ok(Integral(U128(v as u128))),\n-        ty::TyUint(ast::UintTy::Us) => {\n+        ty::TyUint(ast::UintTy::Usize) => {\n             Ok(Integral(Usize(ConstUsize::new_truncating(v, tcx.sess.target.usize_ty))))\n         },\n         ty::TyFloat(fty) => {"}, {"sha": "bd0a332436e6427c945ed803ff270e88da5487be", "filename": "src/librustc_const_math/err.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_math%2Ferr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_math%2Ferr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Ferr.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -75,13 +75,13 @@ impl ConstMathErr {\n             ULitOutOfRange(ast::UintTy::U32) => \"literal out of range for u32\",\n             ULitOutOfRange(ast::UintTy::U64) => \"literal out of range for u64\",\n             ULitOutOfRange(ast::UintTy::U128) => \"literal out of range for u128\",\n-            ULitOutOfRange(ast::UintTy::Us) => \"literal out of range for usize\",\n+            ULitOutOfRange(ast::UintTy::Usize) => \"literal out of range for usize\",\n             LitOutOfRange(ast::IntTy::I8) => \"literal out of range for i8\",\n             LitOutOfRange(ast::IntTy::I16) => \"literal out of range for i16\",\n             LitOutOfRange(ast::IntTy::I32) => \"literal out of range for i32\",\n             LitOutOfRange(ast::IntTy::I64) => \"literal out of range for i64\",\n             LitOutOfRange(ast::IntTy::I128) => \"literal out of range for i128\",\n-            LitOutOfRange(ast::IntTy::Is) => \"literal out of range for isize\",\n+            LitOutOfRange(ast::IntTy::Isize) => \"literal out of range for isize\",\n         }\n     }\n }"}, {"sha": "4ec27d7ade560ce620f5560d429a134cff929e52", "filename": "src/librustc_const_math/int.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_math%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_math%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fint.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -12,8 +12,8 @@ use std::cmp::Ordering;\n use syntax::attr::IntType;\n use syntax::ast::{IntTy, UintTy};\n \n-use super::is::*;\n-use super::us::*;\n+use super::isize::*;\n+use super::usize::*;\n use super::err::*;\n \n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, Hash, Eq, PartialEq)]\n@@ -83,7 +83,7 @@ impl ConstInt {\n             UintTy::U16 if val <= ubounds::U16MAX => Some(U16(val as u16)),\n             UintTy::U32 if val <= ubounds::U32MAX => Some(U32(val as u32)),\n             UintTy::U64 if val <= ubounds::U64MAX => Some(U64(val as u64)),\n-            UintTy::Us if val <= ubounds::U64MAX => ConstUsize::new(val as u64, usize_ty).ok()\n+            UintTy::Usize if val <= ubounds::U64MAX => ConstUsize::new(val as u64, usize_ty).ok()\n                 .map(Usize),\n             UintTy::U128 => Some(U128(val)),\n             _ => None\n@@ -98,7 +98,7 @@ impl ConstInt {\n             IntTy::I16 if val <= ibounds::I16MAX => Some(I16(val as i16)),\n             IntTy::I32 if val <= ibounds::I32MAX => Some(I32(val as i32)),\n             IntTy::I64 if val <= ibounds::I64MAX => Some(I64(val as i64)),\n-            IntTy::Is if val <= ibounds::I64MAX => ConstIsize::new(val as i64, isize_ty).ok()\n+            IntTy::Isize if val <= ibounds::I64MAX => ConstIsize::new(val as i64, isize_ty).ok()\n                 .map(Isize),\n             IntTy::I128 => Some(I128(val)),\n             _ => None\n@@ -112,7 +112,7 @@ impl ConstInt {\n             UintTy::U16 => U16(val as u16),\n             UintTy::U32 => U32(val as u32),\n             UintTy::U64 => U64(val as u64),\n-            UintTy::Us => Usize(ConstUsize::new_truncating(val, usize_ty)),\n+            UintTy::Usize => Usize(ConstUsize::new_truncating(val, usize_ty)),\n             UintTy::U128 => U128(val)\n         }\n     }\n@@ -124,7 +124,7 @@ impl ConstInt {\n             IntTy::I16 => I16(val as i16),\n             IntTy::I32 => I32(val as i32),\n             IntTy::I64 => I64(val as i64),\n-            IntTy::Is => Isize(ConstIsize::new_truncating(val, isize_ty)),\n+            IntTy::Isize => Isize(ConstIsize::new_truncating(val, isize_ty)),\n             IntTy::I128 => I128(val)\n         }\n     }\n@@ -280,13 +280,13 @@ impl ConstInt {\n             ConstInt::I32(_) => IntType::SignedInt(IntTy::I32),\n             ConstInt::I64(_) => IntType::SignedInt(IntTy::I64),\n             ConstInt::I128(_) => IntType::SignedInt(IntTy::I128),\n-            ConstInt::Isize(_) => IntType::SignedInt(IntTy::Is),\n+            ConstInt::Isize(_) => IntType::SignedInt(IntTy::Isize),\n             ConstInt::U8(_) => IntType::UnsignedInt(UintTy::U8),\n             ConstInt::U16(_) => IntType::UnsignedInt(UintTy::U16),\n             ConstInt::U32(_) => IntType::UnsignedInt(UintTy::U32),\n             ConstInt::U64(_) => IntType::UnsignedInt(UintTy::U64),\n             ConstInt::U128(_) => IntType::UnsignedInt(UintTy::U128),\n-            ConstInt::Usize(_) => IntType::UnsignedInt(UintTy::Us),\n+            ConstInt::Usize(_) => IntType::UnsignedInt(UintTy::Usize),\n         }\n     }\n }"}, {"sha": "18acc782775d8adb2b2c6c0f6755782ae5282548", "filename": "src/librustc_const_math/isize.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_math%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_math%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fisize.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -38,9 +38,9 @@ impl ConstIsize {\n     pub fn new(i: i64, isize_ty: ast::IntTy) -> Result<Self, ConstMathErr> {\n         match isize_ty {\n             ast::IntTy::I16 if i as i16 as i64 == i => Ok(Is16(i as i16)),\n-            ast::IntTy::I16 => Err(LitOutOfRange(ast::IntTy::Is)),\n+            ast::IntTy::I16 => Err(LitOutOfRange(ast::IntTy::Isize)),\n             ast::IntTy::I32 if i as i32 as i64 == i => Ok(Is32(i as i32)),\n-            ast::IntTy::I32 => Err(LitOutOfRange(ast::IntTy::Is)),\n+            ast::IntTy::I32 => Err(LitOutOfRange(ast::IntTy::Isize)),\n             ast::IntTy::I64 => Ok(Is64(i)),\n             _ => unreachable!(),\n         }", "previous_filename": "src/librustc_const_math/is.rs"}, {"sha": "2d98bc48d28163acc6aab2eb4ecb4ad305855de9", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -30,12 +30,12 @@ extern crate serialize as rustc_serialize; // used by deriving\n \n mod float;\n mod int;\n-mod us;\n-mod is;\n+mod usize;\n+mod isize;\n mod err;\n \n pub use float::*;\n pub use int::*;\n-pub use us::*;\n-pub use is::*;\n+pub use usize::*;\n+pub use isize::*;\n pub use err::{ConstMathErr, Op};"}, {"sha": "56995f08f05b855d9c339baffbb8d9a8a6cb1c5e", "filename": "src/librustc_const_math/usize.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_math%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_const_math%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fusize.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -38,9 +38,9 @@ impl ConstUsize {\n     pub fn new(i: u64, usize_ty: ast::UintTy) -> Result<Self, ConstMathErr> {\n         match usize_ty {\n             ast::UintTy::U16 if i as u16 as u64 == i => Ok(Us16(i as u16)),\n-            ast::UintTy::U16 => Err(ULitOutOfRange(ast::UintTy::Us)),\n+            ast::UintTy::U16 => Err(ULitOutOfRange(ast::UintTy::Usize)),\n             ast::UintTy::U32 if i as u32 as u64 == i => Ok(Us32(i as u32)),\n-            ast::UintTy::U32 => Err(ULitOutOfRange(ast::UintTy::Us)),\n+            ast::UintTy::U32 => Err(ULitOutOfRange(ast::UintTy::Usize)),\n             ast::UintTy::U64 => Ok(Us64(i)),\n             _ => unreachable!(),\n         }", "previous_filename": "src/librustc_const_math/us.rs"}, {"sha": "5456b0d252b67283931c4d6a7d700671074303f2", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -140,7 +140,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                         match lit.node {\n                             ast::LitKind::Int(v, ast::LitIntType::Signed(_)) |\n                             ast::LitKind::Int(v, ast::LitIntType::Unsuffixed) => {\n-                                let int_type = if let ast::IntTy::Is = t {\n+                                let int_type = if let ast::IntTy::Isize = t {\n                                     cx.sess().target.isize_ty\n                                 } else {\n                                     t\n@@ -163,7 +163,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                         };\n                     }\n                     ty::TyUint(t) => {\n-                        let uint_type = if let ast::UintTy::Us = t {\n+                        let uint_type = if let ast::UintTy::Usize = t {\n                             cx.sess().target.usize_ty\n                         } else {\n                             t\n@@ -230,7 +230,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         // warnings are consistent between 32- and 64-bit platforms\n         fn int_ty_range(int_ty: ast::IntTy) -> (i128, i128) {\n             match int_ty {\n-                ast::IntTy::Is => (i64::min_value() as i128, i64::max_value() as i128),\n+                ast::IntTy::Isize => (i64::min_value() as i128, i64::max_value() as i128),\n                 ast::IntTy::I8 => (i8::min_value() as i64 as i128, i8::max_value() as i128),\n                 ast::IntTy::I16 => (i16::min_value() as i64 as i128, i16::max_value() as i128),\n                 ast::IntTy::I32 => (i32::min_value() as i64 as i128, i32::max_value() as i128),\n@@ -241,7 +241,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n \n         fn uint_ty_range(uint_ty: ast::UintTy) -> (u128, u128) {\n             match uint_ty {\n-                ast::UintTy::Us => (u64::min_value() as u128, u64::max_value() as u128),\n+                ast::UintTy::Usize => (u64::min_value() as u128, u64::max_value() as u128),\n                 ast::UintTy::U8 => (u8::min_value() as u128, u8::max_value() as u128),\n                 ast::UintTy::U16 => (u16::min_value() as u128, u16::max_value() as u128),\n                 ast::UintTy::U32 => (u32::min_value() as u128, u32::max_value() as u128),\n@@ -252,7 +252,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n \n         fn int_ty_bits(int_ty: ast::IntTy, isize_ty: ast::IntTy) -> u64 {\n             match int_ty {\n-                ast::IntTy::Is => int_ty_bits(isize_ty, isize_ty),\n+                ast::IntTy::Isize => int_ty_bits(isize_ty, isize_ty),\n                 ast::IntTy::I8 => 8,\n                 ast::IntTy::I16 => 16 as u64,\n                 ast::IntTy::I32 => 32,\n@@ -263,7 +263,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n \n         fn uint_ty_bits(uint_ty: ast::UintTy, usize_ty: ast::UintTy) -> u64 {\n             match uint_ty {\n-                ast::UintTy::Us => uint_ty_bits(usize_ty, usize_ty),\n+                ast::UintTy::Usize => uint_ty_bits(usize_ty, usize_ty),\n                 ast::UintTy::U8 => 8,\n                 ast::UintTy::U16 => 16,\n                 ast::UintTy::U32 => 32,\n@@ -387,7 +387,7 @@ fn is_ffi_safe(ty: attr::IntType) -> bool {\n         attr::SignedInt(ast::IntTy::I32) | attr::UnsignedInt(ast::UintTy::U32) |\n         attr::SignedInt(ast::IntTy::I64) | attr::UnsignedInt(ast::UintTy::U64) |\n         attr::SignedInt(ast::IntTy::I128) | attr::UnsignedInt(ast::UintTy::U128) => true,\n-        attr::SignedInt(ast::IntTy::Is) | attr::UnsignedInt(ast::UintTy::Us) => false\n+        attr::SignedInt(ast::IntTy::Isize) | attr::UnsignedInt(ast::UintTy::Usize) => false\n     }\n }\n "}, {"sha": "6cb1a2b53342bd2b05bd2e9dde66ea40bd68f9fe", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -514,7 +514,7 @@ pub enum ModuleBuffer {}\n #[link(name = \"rustllvm\", kind = \"static\")]\n extern \"C\" {\n     // Create and destroy contexts.\n-    pub fn LLVMContextCreate() -> ContextRef;\n+    pub fn LLVMRustContextCreate(shouldDiscardNames: bool) -> ContextRef;\n     pub fn LLVMContextDispose(C: ContextRef);\n     pub fn LLVMGetMDKindIDInContext(C: ContextRef, Name: *const c_char, SLen: c_uint) -> c_uint;\n "}, {"sha": "d3cc952759058981826a5f504714aac17437967f", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -392,7 +392,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ast::IntTy::I32 => ConstInt::I32(-1),\n                     ast::IntTy::I64 => ConstInt::I64(-1),\n                     ast::IntTy::I128 => ConstInt::I128(-1),\n-                    ast::IntTy::Is => {\n+                    ast::IntTy::Isize => {\n                         let int_ty = self.hir.tcx().sess.target.isize_ty;\n                         let val = ConstIsize::new(-1, int_ty).unwrap();\n                         ConstInt::Isize(val)\n@@ -424,7 +424,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ast::IntTy::I32 => ConstInt::I32(i32::min_value()),\n                     ast::IntTy::I64 => ConstInt::I64(i64::min_value()),\n                     ast::IntTy::I128 => ConstInt::I128(i128::min_value()),\n-                    ast::IntTy::Is => {\n+                    ast::IntTy::Isize => {\n                         let int_ty = self.hir.tcx().sess.target.isize_ty;\n                         let min = match int_ty {\n                             ast::IntTy::I16 => std::i16::MIN as i64,"}, {"sha": "a3350cb1671d26e94a41cb97670d8ac3a8d6e41f", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ast::UintTy::U32 => ConstInt::U32(0),\n                     ast::UintTy::U64 => ConstInt::U64(0),\n                     ast::UintTy::U128 => ConstInt::U128(0),\n-                    ast::UintTy::Us => {\n+                    ast::UintTy::Usize => {\n                         let uint_ty = self.hir.tcx().sess.target.usize_ty;\n                         let val = ConstUsize::new(0, uint_ty).unwrap();\n                         ConstInt::Usize(val)\n@@ -95,7 +95,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ast::IntTy::I32 => ConstInt::I32(0),\n                     ast::IntTy::I64 => ConstInt::I64(0),\n                     ast::IntTy::I128 => ConstInt::I128(0),\n-                    ast::IntTy::Is => {\n+                    ast::IntTy::Isize => {\n                         let int_ty = self.hir.tcx().sess.target.isize_ty;\n                         let val = ConstIsize::new(0, int_ty).unwrap();\n                         ConstInt::Isize(val)"}, {"sha": "b476ea56852292efdbb932fe46a16bc0cc0d5993", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -49,7 +49,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             IntTy::I32 => v as i32 as u128,\n             IntTy::I64 => v as i64 as u128,\n             IntTy::I128 => v as u128,\n-            IntTy::Is => {\n+            IntTy::Isize => {\n                 let ty = self.tcx.sess.target.isize_ty;\n                 self.int_to_int(v, ty)\n             }\n@@ -62,7 +62,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             UintTy::U32 => v as u32 as u128,\n             UintTy::U64 => v as u64 as u128,\n             UintTy::U128 => v,\n-            UintTy::Us => {\n+            UintTy::Usize => {\n                 let ty = self.tcx.sess.target.usize_ty;\n                 self.int_to_uint(v, ty)\n             }\n@@ -124,8 +124,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         match ty.sty {\n             // Casting to a reference or fn pointer is not permitted by rustc, no need to support it here.\n             TyRawPtr(_) |\n-            TyInt(IntTy::Is) |\n-            TyUint(UintTy::Us) => Ok(PrimVal::Ptr(ptr)),\n+            TyInt(IntTy::Isize) |\n+            TyUint(UintTy::Usize) => Ok(PrimVal::Ptr(ptr)),\n             TyInt(_) | TyUint(_) => err!(ReadPointerAsBytes),\n             _ => err!(Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n         }"}, {"sha": "ef27c636ce08c0bdb88428df848b191d14cce553", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use syntax::ast::Mutability;\n use syntax::codemap::Span;\n \n-use rustc::mir::interpret::{EvalResult, EvalError, EvalErrorKind, GlobalId, Value, Pointer, PrimVal};\n+use rustc::mir::interpret::{EvalResult, EvalError, EvalErrorKind, GlobalId, Value, MemoryPointer, Pointer, PrimVal};\n use super::{Place, EvalContext, StackPopCleanup, ValTy};\n \n use rustc_const_math::ConstInt;\n@@ -67,7 +67,7 @@ pub fn eval_body<'a, 'tcx>(\n             layout.align,\n             None,\n         )?;\n-        tcx.interpret_interner.borrow_mut().cache(cid, ptr.into());\n+        tcx.interpret_interner.borrow_mut().cache(cid, ptr.alloc_id);\n         let cleanup = StackPopCleanup::MarkStatic(Mutability::Immutable);\n         let name = ty::tls::with(|tcx| tcx.item_path_str(instance.def_id()));\n         trace!(\"const_eval: pushing stack frame for global: {}\", name);\n@@ -81,8 +81,8 @@ pub fn eval_body<'a, 'tcx>(\n \n         while ecx.step()? {}\n     }\n-    let value = tcx.interpret_interner.borrow().get_cached(cid).expect(\"global not cached\");\n-    Ok((value, instance_ty))\n+    let alloc = tcx.interpret_interner.borrow().get_cached(cid).expect(\"global not cached\");\n+    Ok((MemoryPointer::new(alloc, 0).into(), instance_ty))\n }\n \n pub fn eval_body_as_integer<'a, 'tcx>(\n@@ -106,7 +106,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n         TyInt(IntTy::I32) => ConstInt::I32(prim as i128 as i32),\n         TyInt(IntTy::I64) => ConstInt::I64(prim as i128 as i64),\n         TyInt(IntTy::I128) => ConstInt::I128(prim as i128),\n-        TyInt(IntTy::Is) => ConstInt::Isize(\n+        TyInt(IntTy::Isize) => ConstInt::Isize(\n             ConstIsize::new(prim as i128 as i64, tcx.sess.target.isize_ty)\n                 .expect(\"miri should already have errored\"),\n         ),\n@@ -115,7 +115,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n         TyUint(UintTy::U32) => ConstInt::U32(prim as u32),\n         TyUint(UintTy::U64) => ConstInt::U64(prim as u64),\n         TyUint(UintTy::U128) => ConstInt::U128(prim),\n-        TyUint(UintTy::Us) => ConstInt::Usize(\n+        TyUint(UintTy::Usize) => ConstInt::Usize(\n             ConstUsize::new(prim as u64, tcx.sess.target.usize_ty)\n                 .expect(\"miri should already have errored\"),\n         ),"}, {"sha": "3af914a6c13602d76cb4412a0a30633f18b76fe3", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -950,8 +950,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     }\n \n     pub fn read_global_as_value(&self, gid: GlobalId, layout: TyLayout) -> Value {\n-        Value::ByRef(self.tcx.interpret_interner.borrow().get_cached(gid).expect(\"global not cached\"),\n-                     layout.align)\n+        let alloc = self.tcx.interpret_interner.borrow().get_cached(gid).expect(\"global not cached\");\n+        Value::ByRef(MemoryPointer::new(alloc, 0).into(), layout.align)\n     }\n \n     pub fn force_allocation(&mut self, place: Place) -> EvalResult<'tcx, Place> {\n@@ -1165,7 +1165,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     I32 => 4,\n                     I64 => 8,\n                     I128 => 16,\n-                    Is => self.memory.pointer_size(),\n+                    Isize => self.memory.pointer_size(),\n                 };\n                 PrimValKind::from_int_size(size)\n             }\n@@ -1178,7 +1178,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     U32 => 4,\n                     U64 => 8,\n                     U128 => 16,\n-                    Us => self.memory.pointer_size(),\n+                    Usize => self.memory.pointer_size(),\n                 };\n                 PrimValKind::from_uint_size(size)\n             }\n@@ -1292,7 +1292,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     I32 => 4,\n                     I64 => 8,\n                     I128 => 16,\n-                    Is => self.memory.pointer_size(),\n+                    Isize => self.memory.pointer_size(),\n                 };\n                 self.memory.read_primval(ptr, ptr_align, size, true)?\n             }\n@@ -1305,7 +1305,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     U32 => 4,\n                     U64 => 8,\n                     U128 => 16,\n-                    Us => self.memory.pointer_size(),\n+                    Usize => self.memory.pointer_size(),\n                 };\n                 self.memory.read_primval(ptr, ptr_align, size, false)?\n             }"}, {"sha": "c2989dbaaf11fb7f3fc50f447caaf579cd2bbbeb", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -2,7 +2,7 @@\n //! This separation exists to ensure that no fancy miri features like\n //! interpreting common C functions leak into CTFE.\n \n-use rustc::mir::interpret::{EvalResult, PrimVal, MemoryPointer, AccessKind};\n+use rustc::mir::interpret::{AllocId, EvalResult, PrimVal, MemoryPointer, AccessKind};\n use super::{EvalContext, Place, ValTy, Memory};\n \n use rustc::mir;\n@@ -89,12 +89,12 @@ pub trait Machine<'tcx>: Sized {\n \n     fn add_lock<'a>(\n         _mem: &mut Memory<'a, 'tcx, Self>,\n-        _id: u64,\n+        _id: AllocId,\n     ) {}\n \n     fn free_lock<'a>(\n         _mem: &mut Memory<'a, 'tcx, Self>,\n-        _id: u64,\n+        _id: AllocId,\n         _len: u64,\n     ) -> EvalResult<'tcx> {\n         Ok(())"}, {"sha": "3a28eae2d1c49e502773a5d8e505a7137ff1cb76", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -34,15 +34,15 @@ pub struct Memory<'a, 'tcx: 'a, M: Machine<'tcx>> {\n     pub data: M::MemoryData,\n \n     /// Helps guarantee that stack allocations aren't deallocated via `rust_deallocate`\n-    alloc_kind: HashMap<u64, MemoryKind<M::MemoryKinds>>,\n+    alloc_kind: HashMap<AllocId, MemoryKind<M::MemoryKinds>>,\n \n     /// Actual memory allocations (arbitrary bytes, may contain pointers into other allocations).\n-    alloc_map: HashMap<u64, Allocation>,\n+    alloc_map: HashMap<AllocId, Allocation>,\n \n     /// Actual memory allocations (arbitrary bytes, may contain pointers into other allocations).\n     ///\n     /// Stores statics while they are being processed, before they are interned and thus frozen\n-    uninitialized_statics: HashMap<u64, Allocation>,\n+    uninitialized_statics: HashMap<AllocId, Allocation>,\n \n     /// Number of virtual bytes allocated.\n     memory_usage: u64,\n@@ -73,17 +73,17 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n     pub fn allocations<'x>(\n         &'x self,\n     ) -> impl Iterator<Item = (AllocId, &'x Allocation)> {\n-        self.alloc_map.iter().map(|(&id, alloc)| (AllocId(id), alloc))\n+        self.alloc_map.iter().map(|(&id, alloc)| (id, alloc))\n     }\n \n     pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> MemoryPointer {\n         let id = self.tcx.interpret_interner.borrow_mut().create_fn_alloc(instance);\n-        MemoryPointer::new(AllocId(id), 0)\n+        MemoryPointer::new(id, 0)\n     }\n \n     pub fn allocate_cached(&mut self, bytes: &[u8]) -> MemoryPointer {\n         let id = self.tcx.allocate_cached(bytes);\n-        MemoryPointer::new(AllocId(id), 0)\n+        MemoryPointer::new(id, 0)\n     }\n \n     /// kind is `None` for statics\n@@ -121,7 +121,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n             },\n             Some(MemoryKind::MutableStatic) => bug!(\"don't allocate mutable statics directly\")\n         }\n-        Ok(MemoryPointer::new(AllocId(id), 0))\n+        Ok(MemoryPointer::new(id, 0))\n     }\n \n     pub fn reallocate(\n@@ -136,8 +136,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         if ptr.offset != 0 {\n             return err!(ReallocateNonBasePtr);\n         }\n-        if self.alloc_map.contains_key(&ptr.alloc_id.0) {\n-            let alloc_kind = self.alloc_kind[&ptr.alloc_id.0];\n+        if self.alloc_map.contains_key(&ptr.alloc_id) {\n+            let alloc_kind = self.alloc_kind[&ptr.alloc_id];\n             if alloc_kind != kind {\n                 return err!(ReallocatedWrongMemoryKind(\n                     format!(\"{:?}\", alloc_kind),\n@@ -163,7 +163,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n     }\n \n     pub fn deallocate_local(&mut self, ptr: MemoryPointer) -> EvalResult<'tcx> {\n-        match self.alloc_kind.get(&ptr.alloc_id.0).cloned() {\n+        match self.alloc_kind.get(&ptr.alloc_id).cloned() {\n             // for a constant like `const FOO: &i32 = &1;` the local containing\n             // the `1` is referred to by the global. We transitively marked everything\n             // the global refers to as static itself, so we don't free it here\n@@ -185,19 +185,19 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n             return err!(DeallocateNonBasePtr);\n         }\n \n-        let alloc = match self.alloc_map.remove(&ptr.alloc_id.0) {\n+        let alloc = match self.alloc_map.remove(&ptr.alloc_id) {\n             Some(alloc) => alloc,\n-            None => if self.uninitialized_statics.contains_key(&ptr.alloc_id.0) {\n+            None => if self.uninitialized_statics.contains_key(&ptr.alloc_id) {\n                 return err!(DeallocatedWrongMemoryKind(\n                     \"uninitializedstatic\".to_string(),\n                     format!(\"{:?}\", kind),\n                 ))\n-            } else if self.tcx.interpret_interner.borrow().get_fn(ptr.alloc_id.0).is_some() {\n+            } else if self.tcx.interpret_interner.borrow().get_fn(ptr.alloc_id).is_some() {\n                 return err!(DeallocatedWrongMemoryKind(\n                     \"function\".to_string(),\n                     format!(\"{:?}\", kind),\n                 ))\n-            } else if self.tcx.interpret_interner.borrow().get_alloc(ptr.alloc_id.0).is_some() {\n+            } else if self.tcx.interpret_interner.borrow().get_alloc(ptr.alloc_id).is_some() {\n                 return err!(DeallocatedWrongMemoryKind(\n                     \"static\".to_string(),\n                     format!(\"{:?}\", kind),\n@@ -207,14 +207,14 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n             },\n         };\n \n-        let alloc_kind = self.alloc_kind.remove(&ptr.alloc_id.0).expect(\"alloc_map out of sync with alloc_kind\");\n+        let alloc_kind = self.alloc_kind.remove(&ptr.alloc_id).expect(\"alloc_map out of sync with alloc_kind\");\n \n         // It is okay for us to still holds locks on deallocation -- for example, we could store data we own\n         // in a local, and the local could be deallocated (from StorageDead) before the function returns.\n         // However, we should check *something*.  For now, we make sure that there is no conflicting write\n         // lock by another frame.  We *have* to permit deallocation if we hold a read lock.\n         // TODO: Figure out the exact rules here.\n-        M::free_lock(self, ptr.alloc_id.0, alloc.bytes.len() as u64)?;\n+        M::free_lock(self, ptr.alloc_id, alloc.bytes.len() as u64)?;\n \n         if alloc_kind != kind {\n             return err!(DeallocatedWrongMemoryKind(\n@@ -295,17 +295,17 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n     pub fn get(&self, id: AllocId) -> EvalResult<'tcx, &Allocation> {\n         // normal alloc?\n-        match self.alloc_map.get(&id.0) {\n+        match self.alloc_map.get(&id) {\n                     Some(alloc) => Ok(alloc),\n             // uninitialized static alloc?\n-            None => match self.uninitialized_statics.get(&id.0) {\n+            None => match self.uninitialized_statics.get(&id) {\n                 Some(alloc) => Ok(alloc),\n                 None => {\n                     let int = self.tcx.interpret_interner.borrow();\n                     // static alloc?\n-                    int.get_alloc(id.0)\n+                    int.get_alloc(id)\n                         // no alloc? produce an error\n-                        .ok_or_else(|| if int.get_fn(id.0).is_some() {\n+                        .ok_or_else(|| if int.get_fn(id).is_some() {\n                             EvalErrorKind::DerefFunctionPointer.into()\n                         } else {\n                             EvalErrorKind::DanglingPointerDeref.into()\n@@ -320,17 +320,17 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         id: AllocId,\n     ) -> EvalResult<'tcx, &mut Allocation> {\n         // normal alloc?\n-        match self.alloc_map.get_mut(&id.0) {\n+        match self.alloc_map.get_mut(&id) {\n             Some(alloc) => Ok(alloc),\n             // uninitialized static alloc?\n-            None => match self.uninitialized_statics.get_mut(&id.0) {\n+            None => match self.uninitialized_statics.get_mut(&id) {\n                 Some(alloc) => Ok(alloc),\n                 None => {\n                     let int = self.tcx.interpret_interner.borrow();\n                     // no alloc or immutable alloc? produce an error\n-                    if int.get_alloc(id.0).is_some() {\n+                    if int.get_alloc(id).is_some() {\n                         err!(ModifiedConstantMemory)\n-                    } else if int.get_fn(id.0).is_some() {\n+                    } else if int.get_fn(id).is_some() {\n                         err!(DerefFunctionPointer)\n                     } else {\n                         err!(DanglingPointerDeref)\n@@ -348,7 +348,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         self.tcx\n             .interpret_interner\n             .borrow()\n-            .get_fn(ptr.alloc_id.0)\n+            .get_fn(ptr.alloc_id)\n             .ok_or(EvalErrorKind::ExecuteMemory.into())\n     }\n \n@@ -372,21 +372,21 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n \n             let (alloc, immutable) =\n                 // normal alloc?\n-                match self.alloc_map.get(&id.0) {\n-                    Some(a) => (a, match self.alloc_kind[&id.0] {\n+                match self.alloc_map.get(&id) {\n+                    Some(a) => (a, match self.alloc_kind[&id] {\n                         MemoryKind::Stack => \" (stack)\".to_owned(),\n                         MemoryKind::Machine(m) => format!(\" ({:?})\", m),\n                         MemoryKind::MutableStatic => \" (static mut)\".to_owned(),\n                     }),\n                     // uninitialized static alloc?\n-                    None => match self.uninitialized_statics.get(&id.0) {\n+                    None => match self.uninitialized_statics.get(&id) {\n                         Some(a) => (a, \" (static in the process of initialization)\".to_owned()),\n                         None => {\n                             let int = self.tcx.interpret_interner.borrow();\n                             // static alloc?\n-                            match int.get_alloc(id.0) {\n+                            match int.get_alloc(id) {\n                                 Some(a) => (a, \"(immutable)\".to_owned()),\n-                                None => if let Some(func) = int.get_fn(id.0) {\n+                                None => if let Some(func) = int.get_fn(id) {\n                                     trace!(\"{} {}\", msg, func);\n                     continue;\n                                 } else {\n@@ -445,7 +445,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         let leaks: Vec<_> = self.alloc_map\n             .keys()\n             .filter_map(|key| if kinds[key] != MemoryKind::MutableStatic {\n-                Some(AllocId(*key))\n+                Some(*key)\n             } else {\n                 None\n             })\n@@ -528,7 +528,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         alloc: AllocId,\n         mutability: Mutability,\n     ) -> EvalResult<'tcx> {\n-        match self.alloc_kind.get(&alloc.0) {\n+        match self.alloc_kind.get(&alloc) {\n             // do not go into immutable statics\n             None |\n             // or mutable statics\n@@ -550,13 +550,13 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n             mutability\n         );\n         if mutability == Mutability::Immutable {\n-            let alloc = self.alloc_map.remove(&alloc_id.0);\n-            let kind = self.alloc_kind.remove(&alloc_id.0);\n+            let alloc = self.alloc_map.remove(&alloc_id);\n+            let kind = self.alloc_kind.remove(&alloc_id);\n             assert_ne!(kind, Some(MemoryKind::MutableStatic));\n-            let uninit = self.uninitialized_statics.remove(&alloc_id.0);\n+            let uninit = self.uninitialized_statics.remove(&alloc_id);\n             if let Some(alloc) = alloc.or(uninit) {\n                 let alloc = self.tcx.intern_const_alloc(alloc);\n-                self.tcx.interpret_interner.borrow_mut().intern_at_reserved(alloc_id.0, alloc);\n+                self.tcx.interpret_interner.borrow_mut().intern_at_reserved(alloc_id, alloc);\n                 // recurse into inner allocations\n                 for &alloc in alloc.relocations.values() {\n                     self.mark_inner_allocation_initialized(alloc, mutability)?;\n@@ -565,17 +565,17 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n             return Ok(());\n         }\n         // We are marking the static as initialized, so move it out of the uninit map\n-        if let Some(uninit) = self.uninitialized_statics.remove(&alloc_id.0) {\n-            self.alloc_map.insert(alloc_id.0, uninit);\n+        if let Some(uninit) = self.uninitialized_statics.remove(&alloc_id) {\n+            self.alloc_map.insert(alloc_id, uninit);\n         }\n         // do not use `self.get_mut(alloc_id)` here, because we might have already marked a\n         // sub-element or have circular pointers (e.g. `Rc`-cycles)\n-        let relocations = match self.alloc_map.get_mut(&alloc_id.0) {\n+        let relocations = match self.alloc_map.get_mut(&alloc_id) {\n             Some(&mut Allocation {\n                      ref mut relocations,\n                      ..\n                  }) => {\n-                match self.alloc_kind.get(&alloc_id.0) {\n+                match self.alloc_kind.get(&alloc_id) {\n                     // const eval results can refer to \"locals\".\n                     // E.g. `const Foo: &u32 = &1;` refers to the temp local that stores the `1`\n                     None |\n@@ -587,7 +587,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n                     },\n                 }\n                 // overwrite or insert\n-                self.alloc_kind.insert(alloc_id.0, MemoryKind::MutableStatic);\n+                self.alloc_kind.insert(alloc_id, MemoryKind::MutableStatic);\n                 // take out the relocations vector to free the borrow on self, so we can call\n                 // mark recursively\n                 mem::replace(relocations, Default::default())\n@@ -600,7 +600,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         }\n         // put back the relocations\n         self.alloc_map\n-            .get_mut(&alloc_id.0)\n+            .get_mut(&alloc_id)\n             .expect(\"checked above\")\n             .relocations = relocations;\n         Ok(())"}, {"sha": "ac16118c7afd70d72ac311a8a9fa50948413d3f8", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -194,8 +194,9 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     promoted: None,\n                 };\n                 let layout = self.layout_of(self.place_ty(mir_place))?;\n+                let alloc = self.tcx.interpret_interner.borrow().get_cached(gid).expect(\"uncached global\");\n                 Place::Ptr {\n-                    ptr: self.tcx.interpret_interner.borrow().get_cached(gid).expect(\"uncached global\"),\n+                    ptr: MemoryPointer::new(alloc, 0).into(),\n                     align: layout.align,\n                     extra: PlaceExtra::None,\n                 }"}, {"sha": "2b0f9041d511573e2ba4662aee5e5acb5c84ecfb", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -180,7 +180,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             layout.align,\n             None,\n         )?;\n-        self.tcx.interpret_interner.borrow_mut().cache(cid, ptr.into());\n+        self.tcx.interpret_interner.borrow_mut().cache(cid, ptr.alloc_id);\n         let internally_mutable = !layout.ty.is_freeze(self.tcx, self.param_env, span);\n         let mutability = if mutability == Mutability::Mutable || internally_mutable {\n             Mutability::Mutable\n@@ -265,7 +265,7 @@ impl<'a, 'b, 'tcx, M: Machine<'tcx>> Visitor<'tcx> for ConstantExtractor<'a, 'b,\n                         layout.align,\n                         None,\n                     )?;\n-                    this.ecx.tcx.interpret_interner.borrow_mut().cache(cid, ptr.into());\n+                    this.ecx.tcx.interpret_interner.borrow_mut().cache(cid, ptr.alloc_id);\n                     trace!(\"pushing stack frame for {:?}\", index);\n                     this.ecx.push_stack_frame(\n                         this.instance,"}, {"sha": "9e547285b16badd6950cf899be3576481bec1fdf", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -292,13 +292,13 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::TyChar              => output.push_str(\"char\"),\n             ty::TyStr               => output.push_str(\"str\"),\n             ty::TyNever             => output.push_str(\"!\"),\n-            ty::TyInt(ast::IntTy::Is)    => output.push_str(\"isize\"),\n+            ty::TyInt(ast::IntTy::Isize)    => output.push_str(\"isize\"),\n             ty::TyInt(ast::IntTy::I8)    => output.push_str(\"i8\"),\n             ty::TyInt(ast::IntTy::I16)   => output.push_str(\"i16\"),\n             ty::TyInt(ast::IntTy::I32)   => output.push_str(\"i32\"),\n             ty::TyInt(ast::IntTy::I64)   => output.push_str(\"i64\"),\n             ty::TyInt(ast::IntTy::I128)   => output.push_str(\"i128\"),\n-            ty::TyUint(ast::UintTy::Us)   => output.push_str(\"usize\"),\n+            ty::TyUint(ast::UintTy::Usize)   => output.push_str(\"usize\"),\n             ty::TyUint(ast::UintTy::U8)   => output.push_str(\"u8\"),\n             ty::TyUint(ast::UintTy::U16)  => output.push_str(\"u16\"),\n             ty::TyUint(ast::UintTy::U32)  => output.push_str(\"u32\"),"}, {"sha": "9f00bf97deba1f0301a6e7a73b8c503b39e3a8b5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -1204,14 +1204,14 @@ impl PrimitiveTypeTable {\n         table.intern(\"char\", TyChar);\n         table.intern(\"f32\", TyFloat(FloatTy::F32));\n         table.intern(\"f64\", TyFloat(FloatTy::F64));\n-        table.intern(\"isize\", TyInt(IntTy::Is));\n+        table.intern(\"isize\", TyInt(IntTy::Isize));\n         table.intern(\"i8\", TyInt(IntTy::I8));\n         table.intern(\"i16\", TyInt(IntTy::I16));\n         table.intern(\"i32\", TyInt(IntTy::I32));\n         table.intern(\"i64\", TyInt(IntTy::I64));\n         table.intern(\"i128\", TyInt(IntTy::I128));\n         table.intern(\"str\", TyStr);\n-        table.intern(\"usize\", TyUint(UintTy::Us));\n+        table.intern(\"usize\", TyUint(UintTy::Usize));\n         table.intern(\"u8\", TyUint(UintTy::U8));\n         table.intern(\"u16\", TyUint(UintTy::U16));\n         table.intern(\"u32\", TyUint(UintTy::U32));"}, {"sha": "60b24a578c6b0052b77fce68a8043530d5ce3a65", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -607,7 +607,7 @@ impl ThinModule {\n         // into that context. One day, however, we may do this for upstream\n         // crates but for locally translated modules we may be able to reuse\n         // that LLVM Context and Module.\n-        let llcx = llvm::LLVMContextCreate();\n+        let llcx = llvm::LLVMRustContextCreate(cgcx.fewer_names);\n         let llmod = llvm::LLVMRustParseBitcodeForThinLTO(\n             llcx,\n             self.data().as_ptr(),"}, {"sha": "4d1bcd9bf467d8d046acfc8d49f210e17622fcde", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -323,6 +323,7 @@ pub struct CodegenContext {\n     pub thinlto: bool,\n     pub no_landing_pads: bool,\n     pub save_temps: bool,\n+    pub fewer_names: bool,\n     pub exported_symbols: Arc<ExportedSymbols>,\n     pub opts: Arc<config::Options>,\n     pub crate_types: Vec<config::CrateType>,\n@@ -1407,6 +1408,7 @@ fn start_executing_work(tcx: TyCtxt,\n             unsafe { llvm::LLVMRustThinLTOAvailable() },\n \n         no_landing_pads: sess.no_landing_pads(),\n+        fewer_names: sess.fewer_names(),\n         save_temps: sess.opts.cg.save_temps,\n         opts: Arc::new(sess.opts.clone()),\n         time_passes: sess.time_passes(),"}, {"sha": "248b37c43b42e2cb4991ac0a5c5d7daa2affc0a4", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -197,7 +197,7 @@ pub fn is_pie_binary(sess: &Session) -> bool {\n }\n \n pub unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextRef, ModuleRef) {\n-    let llcx = llvm::LLVMContextCreate();\n+    let llcx = llvm::LLVMRustContextCreate(sess.fewer_names());\n     let mod_name = CString::new(mod_name).unwrap();\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n "}, {"sha": "23f7d47e722a75531d2e5b380afa41e9173197c6", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -1246,7 +1246,7 @@ fn generic_simd_intrinsic<'a, 'tcx>(\n fn int_type_width_signed(ty: Ty, ccx: &CrateContext) -> Option<(u64, bool)> {\n     match ty.sty {\n         ty::TyInt(t) => Some((match t {\n-            ast::IntTy::Is => {\n+            ast::IntTy::Isize => {\n                 match &ccx.tcx().sess.target.target.target_pointer_width[..] {\n                     \"16\" => 16,\n                     \"32\" => 32,\n@@ -1261,7 +1261,7 @@ fn int_type_width_signed(ty: Ty, ccx: &CrateContext) -> Option<(u64, bool)> {\n             ast::IntTy::I128 => 128,\n         }, true)),\n         ty::TyUint(t) => Some((match t {\n-            ast::UintTy::Us => {\n+            ast::UintTy::Usize => {\n                 match &ccx.tcx().sess.target.target.target_pointer_width[..] {\n                     \"16\" => 16,\n                     \"32\" => 32,"}, {"sha": "56309f20dc12ea0f3fd6ae92a7f150431ed7ba7e", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -720,13 +720,13 @@ fn get_overflow_intrinsic(oop: OverflowOp, bcx: &Builder, ty: Ty) -> ValueRef {\n     let tcx = bcx.tcx();\n \n     let new_sty = match ty.sty {\n-        TyInt(Is) => match &tcx.sess.target.target.target_pointer_width[..] {\n+        TyInt(Isize) => match &tcx.sess.target.target.target_pointer_width[..] {\n             \"16\" => TyInt(I16),\n             \"32\" => TyInt(I32),\n             \"64\" => TyInt(I64),\n             _ => panic!(\"unsupported target word size\")\n         },\n-        TyUint(Us) => match &tcx.sess.target.target.target_pointer_width[..] {\n+        TyUint(Usize) => match &tcx.sess.target.target.target_pointer_width[..] {\n             \"16\" => TyUint(U16),\n             \"32\" => TyUint(U32),\n             \"64\" => TyUint(U64),"}, {"sha": "6cbe175d4d8d5b8e627b44ece1f2d00a9132559c", "filename": "src/librustc_trans/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_trans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -147,7 +147,7 @@ impl Type {\n \n     pub fn int_from_ty(ccx: &CrateContext, t: ast::IntTy) -> Type {\n         match t {\n-            ast::IntTy::Is => ccx.isize_ty(),\n+            ast::IntTy::Isize => ccx.isize_ty(),\n             ast::IntTy::I8 => Type::i8(ccx),\n             ast::IntTy::I16 => Type::i16(ccx),\n             ast::IntTy::I32 => Type::i32(ccx),\n@@ -158,7 +158,7 @@ impl Type {\n \n     pub fn uint_from_ty(ccx: &CrateContext, t: ast::UintTy) -> Type {\n         match t {\n-            ast::UintTy::Us => ccx.isize_ty(),\n+            ast::UintTy::Usize => ccx.isize_ty(),\n             ast::UintTy::U8 => Type::i8(ccx),\n             ast::UintTy::U16 => Type::i16(ccx),\n             ast::UintTy::U32 => Type::i32(ccx),"}, {"sha": "201997a74b73f3b6e4561645d2dfc84630137678", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -233,7 +233,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             CastError::NeedViaPtr => {\n                 let mut err = make_invalid_casting_error(fcx.tcx.sess, self.span, self.expr_ty,\n                                                          self.cast_ty, fcx);\n-                if self.cast_ty.is_uint() {\n+                if self.cast_ty.is_integral() {\n                     err.help(&format!(\"cast through {} first\",\n                                       match e {\n                                           CastError::NeedViaPtr => \"a raw pointer\","}, {"sha": "6f83ecab01a1c799a06a2eb0096148018fdc3cdd", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -494,7 +494,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 let lang_def_id = lang_items.i128_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::IntTy::Is) => {\n+            ty::TyInt(ast::IntTy::Isize) => {\n                 let lang_def_id = lang_items.isize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n@@ -518,7 +518,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 let lang_def_id = lang_items.u128_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::UintTy::Us) => {\n+            ty::TyUint(ast::UintTy::Usize) => {\n                 let lang_def_id = lang_items.usize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }"}, {"sha": "6d68824980b6af0a36f03d30336791b012d0defb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -2219,7 +2219,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // First, try built-in indexing.\n         match (adjusted_ty.builtin_index(), &index_ty.sty) {\n-            (Some(ty), &ty::TyUint(ast::UintTy::Us)) | (Some(ty), &ty::TyInfer(ty::IntVar(_))) => {\n+            (Some(ty), &ty::TyUint(ast::UintTy::Usize)) |\n+            (Some(ty), &ty::TyInfer(ty::IntVar(_))) => {\n                 debug!(\"try_index_step: success, using built-in indexing\");\n                 let adjustments = autoderef.adjust_steps(lvalue_pref);\n                 self.apply_adjustments(base_expr, adjustments);"}, {"sha": "4256a1fe12b60a70bfa9a7246123409f4401fbec", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -200,7 +200,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n                                           \"i128\",\n                                           item.span);\n             }\n-            ty::TyInt(ast::IntTy::Is) => {\n+            ty::TyInt(ast::IntTy::Isize) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.isize_impl(),\n                                           \"isize\",\n@@ -242,7 +242,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n                                           \"u128\",\n                                           item.span);\n             }\n-            ty::TyUint(ast::UintTy::Us) => {\n+            ty::TyUint(ast::UintTy::Usize) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.usize_impl(),\n                                           \"usize\","}, {"sha": "265114ae826f48d9e86145b602c2da4cf208cbb4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -2011,7 +2011,7 @@ impl PrimitiveType {\n impl From<ast::IntTy> for PrimitiveType {\n     fn from(int_ty: ast::IntTy) -> PrimitiveType {\n         match int_ty {\n-            ast::IntTy::Is => PrimitiveType::Isize,\n+            ast::IntTy::Isize => PrimitiveType::Isize,\n             ast::IntTy::I8 => PrimitiveType::I8,\n             ast::IntTy::I16 => PrimitiveType::I16,\n             ast::IntTy::I32 => PrimitiveType::I32,\n@@ -2024,7 +2024,7 @@ impl From<ast::IntTy> for PrimitiveType {\n impl From<ast::UintTy> for PrimitiveType {\n     fn from(uint_ty: ast::UintTy) -> PrimitiveType {\n         match uint_ty {\n-            ast::UintTy::Us => PrimitiveType::Usize,\n+            ast::UintTy::Usize => PrimitiveType::Usize,\n             ast::UintTy::U8 => PrimitiveType::U8,\n             ast::UintTy::U16 => PrimitiveType::U16,\n             ast::UintTy::U32 => PrimitiveType::U32,"}, {"sha": "e9427fb40a0165d79738dc4343288f1e22684a2e", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -527,6 +527,16 @@ impl<T, S> HashSet<T, S>\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the value type.\n     ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.get(&2), Some(&2));\n+    /// assert_eq!(set.get(&4), None);\n+    /// ```\n+    ///\n     /// [`Eq`]: ../../std/cmp/trait.Eq.html\n     /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n@@ -631,6 +641,19 @@ impl<T, S> HashSet<T, S>\n \n     /// Adds a value to the set, replacing the existing value, if any, that is equal to the given\n     /// one. Returns the replaced value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set = HashSet::new();\n+    /// set.insert(Vec::<i32>::new());\n+    ///\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\n+    /// set.replace(Vec::with_capacity(10));\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn replace(&mut self, value: T) -> Option<T> {\n         Recover::replace(&mut self.map, value)\n@@ -671,6 +694,16 @@ impl<T, S> HashSet<T, S>\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the value type.\n     ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.take(&2), Some(2));\n+    /// assert_eq!(set.take(&2), None);\n+    /// ```\n+    ///\n     /// [`Eq`]: ../../std/cmp/trait.Eq.html\n     /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]"}, {"sha": "e08a2cbfd0846792d6a159ef6c589f33f200b24b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -1324,7 +1324,7 @@ pub enum ImplItemKind {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy,\n          PartialOrd, Ord)]\n pub enum IntTy {\n-    Is,\n+    Isize,\n     I8,\n     I16,\n     I32,\n@@ -1347,7 +1347,7 @@ impl fmt::Display for IntTy {\n impl IntTy {\n     pub fn ty_to_string(&self) -> &'static str {\n         match *self {\n-            IntTy::Is => \"isize\",\n+            IntTy::Isize => \"isize\",\n             IntTy::I8 => \"i8\",\n             IntTy::I16 => \"i16\",\n             IntTy::I32 => \"i32\",\n@@ -1365,7 +1365,7 @@ impl IntTy {\n \n     pub fn bit_width(&self) -> Option<usize> {\n         Some(match *self {\n-            IntTy::Is => return None,\n+            IntTy::Isize => return None,\n             IntTy::I8 => 8,\n             IntTy::I16 => 16,\n             IntTy::I32 => 32,\n@@ -1378,7 +1378,7 @@ impl IntTy {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy,\n          PartialOrd, Ord)]\n pub enum UintTy {\n-    Us,\n+    Usize,\n     U8,\n     U16,\n     U32,\n@@ -1389,7 +1389,7 @@ pub enum UintTy {\n impl UintTy {\n     pub fn ty_to_string(&self) -> &'static str {\n         match *self {\n-            UintTy::Us => \"usize\",\n+            UintTy::Usize => \"usize\",\n             UintTy::U8 => \"u8\",\n             UintTy::U16 => \"u16\",\n             UintTy::U32 => \"u32\",\n@@ -1404,7 +1404,7 @@ impl UintTy {\n \n     pub fn bit_width(&self) -> Option<usize> {\n         Some(match *self {\n-            UintTy::Us => return None,\n+            UintTy::Usize => return None,\n             UintTy::U8 => 8,\n             UintTy::U16 => 16,\n             UintTy::U32 => 32,"}, {"sha": "0b868b514fe960a09552365bb103ffb81dda6ca2", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -1071,8 +1071,8 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n         \"u64\" => Some(UnsignedInt(ast::UintTy::U64)),\n         \"i128\" => Some(SignedInt(ast::IntTy::I128)),\n         \"u128\" => Some(UnsignedInt(ast::UintTy::U128)),\n-        \"isize\" => Some(SignedInt(ast::IntTy::Is)),\n-        \"usize\" => Some(UnsignedInt(ast::UintTy::Us)),\n+        \"isize\" => Some(SignedInt(ast::IntTy::Isize)),\n+        \"usize\" => Some(UnsignedInt(ast::UintTy::Usize)),\n         _ => None\n     }\n }"}, {"sha": "be0bfd6677bd80134ff7d767d8d3ad2cf0879921", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -694,17 +694,17 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n         self.expr_lit(span, ast::LitKind::Int(i as u128,\n-                                              ast::LitIntType::Unsigned(ast::UintTy::Us)))\n+                                              ast::LitIntType::Unsigned(ast::UintTy::Usize)))\n     }\n     fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr> {\n         if i < 0 {\n             let i = (-i) as u128;\n-            let lit_ty = ast::LitIntType::Signed(ast::IntTy::Is);\n+            let lit_ty = ast::LitIntType::Signed(ast::IntTy::Isize);\n             let lit = self.expr_lit(sp, ast::LitKind::Int(i, lit_ty));\n             self.expr_unary(sp, ast::UnOp::Neg, lit)\n         } else {\n             self.expr_lit(sp, ast::LitKind::Int(i as u128,\n-                                                ast::LitIntType::Signed(ast::IntTy::Is)))\n+                                                ast::LitIntType::Signed(ast::IntTy::Isize)))\n         }\n     }\n     fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {"}, {"sha": "7fcd88c94ca6f3ea7df98149a01844c7cc9863f8", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -326,13 +326,13 @@ pub mod rt {\n         );\n     }\n \n-    impl_to_tokens_int! { signed, isize, ast::IntTy::Is }\n+    impl_to_tokens_int! { signed, isize, ast::IntTy::Isize }\n     impl_to_tokens_int! { signed, i8,  ast::IntTy::I8 }\n     impl_to_tokens_int! { signed, i16, ast::IntTy::I16 }\n     impl_to_tokens_int! { signed, i32, ast::IntTy::I32 }\n     impl_to_tokens_int! { signed, i64, ast::IntTy::I64 }\n \n-    impl_to_tokens_int! { unsigned, usize, ast::UintTy::Us }\n+    impl_to_tokens_int! { unsigned, usize, ast::UintTy::Usize }\n     impl_to_tokens_int! { unsigned, u8,   ast::UintTy::U8 }\n     impl_to_tokens_int! { unsigned, u16,  ast::UintTy::U16 }\n     impl_to_tokens_int! { unsigned, u32,  ast::UintTy::U32 }"}, {"sha": "a9b1e4aaa60068edd658e8b00b5c015d66ceb11e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -603,13 +603,13 @@ pub fn integer_lit(s: &str, suffix: Option<Symbol>, diag: Option<(Span, &Handler\n             err!(diag, |span, diag| diag.span_bug(span, \"found empty literal suffix in Some\"));\n         }\n         ty = match &*suf.as_str() {\n-            \"isize\" => ast::LitIntType::Signed(ast::IntTy::Is),\n+            \"isize\" => ast::LitIntType::Signed(ast::IntTy::Isize),\n             \"i8\"  => ast::LitIntType::Signed(ast::IntTy::I8),\n             \"i16\" => ast::LitIntType::Signed(ast::IntTy::I16),\n             \"i32\" => ast::LitIntType::Signed(ast::IntTy::I32),\n             \"i64\" => ast::LitIntType::Signed(ast::IntTy::I64),\n             \"i128\" => ast::LitIntType::Signed(ast::IntTy::I128),\n-            \"usize\" => ast::LitIntType::Unsigned(ast::UintTy::Us),\n+            \"usize\" => ast::LitIntType::Unsigned(ast::UintTy::Usize),\n             \"u8\"  => ast::LitIntType::Unsigned(ast::UintTy::U8),\n             \"u16\" => ast::LitIntType::Unsigned(ast::UintTy::U16),\n             \"u32\" => ast::LitIntType::Unsigned(ast::UintTy::U32),"}, {"sha": "48872cb1313d727d0884303b80014c76927ff1cd", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -833,14 +833,14 @@ fn find_repr_type_name(diagnostic: &Handler, type_attrs: &[ast::Attribute]) -> &\n                 attr::ReprPacked | attr::ReprSimd | attr::ReprAlign(_) => continue,\n                 attr::ReprExtern => \"i32\",\n \n-                attr::ReprInt(attr::SignedInt(ast::IntTy::Is)) => \"isize\",\n+                attr::ReprInt(attr::SignedInt(ast::IntTy::Isize)) => \"isize\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I8)) => \"i8\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I16)) => \"i16\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I32)) => \"i32\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I64)) => \"i64\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I128)) => \"i128\",\n \n-                attr::ReprInt(attr::UnsignedInt(ast::UintTy::Us)) => \"usize\",\n+                attr::ReprInt(attr::UnsignedInt(ast::UintTy::Usize)) => \"usize\",\n                 attr::ReprInt(attr::UnsignedInt(ast::UintTy::U8)) => \"u8\",\n                 attr::ReprInt(attr::UnsignedInt(ast::UintTy::U16)) => \"u16\",\n                 attr::ReprInt(attr::UnsignedInt(ast::UintTy::U32)) => \"u32\","}, {"sha": "0fac7f7bf28b121d5cbdeead03aae6e6f65bb2a9", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -76,11 +76,17 @@ extern \"C\" char *LLVMRustGetLastError(void) {\n   return Ret;\n }\n \n-void LLVMRustSetLastError(const char *Err) {\n+extern \"C\" void LLVMRustSetLastError(const char *Err) {\n   free((void *)LastError);\n   LastError = strdup(Err);\n }\n \n+extern \"C\" LLVMContextRef LLVMRustContextCreate(bool shouldDiscardNames) {\n+  auto ctx = new LLVMContext();\n+  ctx->setDiscardValueNames(shouldDiscardNames);\n+  return wrap(ctx);\n+}\n+\n extern \"C\" void LLVMRustSetNormalizedTarget(LLVMModuleRef M,\n                                             const char *Triple) {\n   unwrap(M)->setTargetTriple(Triple::normalize(Triple));"}, {"sha": "714173f86020da25c53cc3648fa5adf075d35106", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -71,7 +71,7 @@\n #include \"llvm/IR/IRPrintingPasses.h\"\n #include \"llvm/Linker/Linker.h\"\n \n-void LLVMRustSetLastError(const char *);\n+extern \"C\" void LLVMRustSetLastError(const char *);\n \n enum class LLVMRustResult { Success, Failure };\n "}, {"sha": "6e4d94d26cdeb0a66889e6df60ea48f15de5cb8d", "filename": "src/test/debuginfo/shadowed-variable.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // min-lldb-version: 310\n-// ignore-test // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n // compile-flags:-g\n \n // === GDB TESTS ===================================================================================\n@@ -35,15 +34,15 @@\n // gdb-command:continue\n \n // gdb-command:print x\n-// gdb-check:$5 = 10.5\n+// gdb-check:$7 = 10.5\n // gdb-command:print y\n-// gdb-check:$6 = 20\n+// gdb-check:$8 = 20\n // gdb-command:continue\n \n // gdb-command:print x\n-// gdb-check:$5 = 11.5\n+// gdb-check:$9 = 11.5\n // gdb-command:print y\n-// gdb-check:$6 = 20\n+// gdb-check:$10 = 20\n // gdb-command:continue\n \n // === LLDB TESTS ==================================================================================\n@@ -69,15 +68,15 @@\n // lldb-command:continue\n \n // lldb-command:print x\n-// lldb-check:[...]$4 = 10.5\n+// lldb-check:[...]$6 = 10.5\n // lldb-command:print y\n-// lldb-check:[...]$5 = 20\n+// lldb-check:[...]$7 = 20\n // lldb-command:continue\n \n // lldb-command:print x\n-// lldb-check:[...]$4 = 11.5\n+// lldb-check:[...]$8 = 11.5\n // lldb-command:print y\n-// lldb-check:[...]$5 = 20\n+// lldb-check:[...]$9 = 20\n // lldb-command:continue\n \n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "b3c2b23cd3272fdca6b4a38c14f1523fa1bc2869", "filename": "src/test/ui/fat-ptr-cast.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6828cf90146c7fefc4ba4f16dffe75f763f2d910/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr?ref=6828cf90146c7fefc4ba4f16dffe75f763f2d910", "patch": "@@ -11,18 +11,24 @@ error[E0606]: casting `&[i32]` as `isize` is invalid\n    |\n 21 |     a as isize; //~ ERROR casting\n    |     ^^^^^^^^^^\n+   |\n+   = help: cast through a raw pointer first\n \n error[E0606]: casting `&[i32]` as `i16` is invalid\n   --> $DIR/fat-ptr-cast.rs:22:5\n    |\n 22 |     a as i16; //~ ERROR casting `&[i32]` as `i16` is invalid\n    |     ^^^^^^^^\n+   |\n+   = help: cast through a raw pointer first\n \n error[E0606]: casting `&[i32]` as `u32` is invalid\n   --> $DIR/fat-ptr-cast.rs:23:5\n    |\n 23 |     a as u32; //~ ERROR casting `&[i32]` as `u32` is invalid\n    |     ^^^^^^^^\n+   |\n+   = help: cast through a raw pointer first\n \n error[E0605]: non-primitive cast: `std::boxed::Box<[i32]>` as `usize`\n   --> $DIR/fat-ptr-cast.rs:24:5"}]}