{"sha": "be983fbf52c581bfa51e8b5dd95fb9f599a67639", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOTgzZmJmNTJjNTgxYmZhNTFlOGI1ZGQ5NWZiOWY1OTlhNjc2Mzk=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-10-08T00:07:10Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-10-08T00:09:32Z"}, "message": "Fix items_after_statements for sub-functions", "tree": {"sha": "62d5b8ce66d2d1c917afc2943e5f2320b080e32a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62d5b8ce66d2d1c917afc2943e5f2320b080e32a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be983fbf52c581bfa51e8b5dd95fb9f599a67639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be983fbf52c581bfa51e8b5dd95fb9f599a67639", "html_url": "https://github.com/rust-lang/rust/commit/be983fbf52c581bfa51e8b5dd95fb9f599a67639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be983fbf52c581bfa51e8b5dd95fb9f599a67639/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6528749083bb64a28aca6a8be2bf67458ce62147", "url": "https://api.github.com/repos/rust-lang/rust/commits/6528749083bb64a28aca6a8be2bf67458ce62147", "html_url": "https://github.com/rust-lang/rust/commit/6528749083bb64a28aca6a8be2bf67458ce62147"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "01cd6f258324d4af3eab218c57340b8357524265", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/be983fbf52c581bfa51e8b5dd95fb9f599a67639/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be983fbf52c581bfa51e8b5dd95fb9f599a67639/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=be983fbf52c581bfa51e8b5dd95fb9f599a67639", "patch": "@@ -1081,18 +1081,6 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n         arg: &hir::Expr,\n         span: Span,\n     ) {\n-        if name != \"expect\" {\n-            return;\n-        }\n-\n-        let self_type = cx.tables.expr_ty(self_expr);\n-        let known_types = &[&paths::OPTION, &paths::RESULT];\n-\n-        // if not a known type, return early\n-        if known_types.iter().all(|&k| !match_type(cx, self_type, k)) {\n-            return;\n-        }\n-\n         fn is_call(node: &hir::ExprKind) -> bool {\n             match node {\n                 hir::ExprKind::AddrOf(_, expr) => {\n@@ -1107,6 +1095,18 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n             }\n         }\n \n+        if name != \"expect\" {\n+            return;\n+        }\n+\n+        let self_type = cx.tables.expr_ty(self_expr);\n+        let known_types = &[&paths::OPTION, &paths::RESULT];\n+\n+        // if not a known type, return early\n+        if known_types.iter().all(|&k| !match_type(cx, self_type, k)) {\n+            return;\n+        }\n+\n         if !is_call(&arg.node) {\n             return;\n         }\n@@ -1338,14 +1338,6 @@ fn lint_iter_cloned_collect(cx: &LateContext<'_, '_>, expr: &hir::Expr, iter_arg\n }\n \n fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n-    // Check that this is a call to Iterator::fold rather than just some function called fold\n-    if !match_trait_method(cx, expr, &paths::ITERATOR) {\n-        return;\n-    }\n-\n-    assert!(fold_args.len() == 3,\n-        \"Expected fold_args to have three entries - the receiver, the initial value and the closure\");\n-\n     fn check_fold_with_op(\n         cx: &LateContext<'_, '_>,\n         fold_args: &[hir::Expr],\n@@ -1402,6 +1394,14 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n         }\n     }\n \n+    // Check that this is a call to Iterator::fold rather than just some function called fold\n+    if !match_trait_method(cx, expr, &paths::ITERATOR) {\n+        return;\n+    }\n+\n+    assert!(fold_args.len() == 3,\n+        \"Expected fold_args to have three entries - the receiver, the initial value and the closure\");\n+\n     // Check if the first argument to .fold is a suitable literal\n     match fold_args[1].node {\n         hir::ExprKind::Lit(ref lit) => {"}, {"sha": "88c875c31022fb75a6f226b23c2f14599c3cacc7", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be983fbf52c581bfa51e8b5dd95fb9f599a67639/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be983fbf52c581bfa51e8b5dd95fb9f599a67639/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=be983fbf52c581bfa51e8b5dd95fb9f599a67639", "patch": "@@ -46,6 +46,14 @@ pub struct Range<'a> {\n \n /// Higher a `hir` range to something similar to `ast::ExprKind::Range`.\n pub fn range<'a, 'b, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'b hir::Expr) -> Option<Range<'b>> {\n+    /// Find the field named `name` in the field. Always return `Some` for\n+    /// convenience.\n+    fn get_field<'a>(name: &str, fields: &'a [hir::Field]) -> Option<&'a hir::Expr> {\n+        let expr = &fields.iter().find(|field| field.ident.name == name)?.expr;\n+\n+        Some(expr)\n+    }\n+\n \n     let def_path = match cx.tables.expr_ty(expr).sty {\n         ty::Adt(def, _) => cx.tcx.def_path(def.did),\n@@ -75,14 +83,6 @@ pub fn range<'a, 'b, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'b hir::Expr) -> O\n         return None;\n     }\n \n-    /// Find the field named `name` in the field. Always return `Some` for\n-    /// convenience.\n-    fn get_field<'a>(name: &str, fields: &'a [hir::Field]) -> Option<&'a hir::Expr> {\n-        let expr = &fields.iter().find(|field| field.ident.name == name)?.expr;\n-\n-        Some(expr)\n-    }\n-\n     // The range syntax is expanded to literal paths starting with `core` or `std`\n     // depending on\n     // `#[no_std]`. Testing both instead of resolving the paths."}]}