{"sha": "dbfa05411bad5d31cb594a02ddbf5333dcb0ad5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZmEwNTQxMWJhZDVkMzFjYjU5NGEwMmRkYmY1MzMzZGNiMGFkNWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-04T12:23:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-04T22:03:09Z"}, "message": "Cleanup type-checking of constants, but do not try to fix #20489.", "tree": {"sha": "a7153f5a2c25d57e84f427c886351ecea8f11412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7153f5a2c25d57e84f427c886351ecea8f11412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbfa05411bad5d31cb594a02ddbf5333dcb0ad5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbfa05411bad5d31cb594a02ddbf5333dcb0ad5a", "html_url": "https://github.com/rust-lang/rust/commit/dbfa05411bad5d31cb594a02ddbf5333dcb0ad5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbfa05411bad5d31cb594a02ddbf5333dcb0ad5a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17a7c9f7572685df59e287c48450ccb09e8313a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17a7c9f7572685df59e287c48450ccb09e8313a", "html_url": "https://github.com/rust-lang/rust/commit/a17a7c9f7572685df59e287c48450ccb09e8313a"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "0d853295502dc9c0520a62e3ffd3953df9a6a293", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfa05411bad5d31cb594a02ddbf5333dcb0ad5a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfa05411bad5d31cb594a02ddbf5333dcb0ad5a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=dbfa05411bad5d31cb594a02ddbf5333dcb0ad5a", "patch": "@@ -1779,6 +1779,10 @@ impl<'tcx> Generics<'tcx> {\n         !self.regions.is_empty_in(space)\n     }\n \n+    pub fn is_empty(&self) -> bool {\n+        self.types.is_empty() && self.regions.is_empty()\n+    }\n+\n     pub fn to_bounds(&self, tcx: &ty::ctxt<'tcx>, substs: &Substs<'tcx>)\n                      -> GenericBounds<'tcx> {\n         GenericBounds {"}, {"sha": "49627120d2291a5536a02ca58e27cbd8fde89f7b", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbfa05411bad5d31cb594a02ddbf5333dcb0ad5a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfa05411bad5d31cb594a02ddbf5333dcb0ad5a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=dbfa05411bad5d31cb594a02ddbf5333dcb0ad5a", "patch": "@@ -103,8 +103,18 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         ast::PatEnum(..) | ast::PatIdent(..) if pat_is_const(&tcx.def_map, pat) => {\n             let const_did = tcx.def_map.borrow()[pat.id].clone().def_id();\n             let const_scheme = ty::lookup_item_type(tcx, const_did);\n-            fcx.write_ty(pat.id, const_scheme.ty);\n-            demand::suptype(fcx, pat.span, expected, const_scheme.ty);\n+            assert!(const_scheme.generics.is_empty());\n+            let const_ty = pcx.fcx.instantiate_type_scheme(pat.span,\n+                                                           &Substs::empty(),\n+                                                           &const_scheme.ty);\n+            fcx.write_ty(pat.id, const_ty);\n+\n+            // FIXME(#20489) -- we should limit the types here to scalars or something!\n+\n+            // As with PatLit, what we really want here is that there\n+            // exist a LUB, but for the cases that can occur, subtype\n+            // is good enough.\n+            demand::suptype(fcx, pat.span, expected, const_ty);\n         }\n         ast::PatIdent(bm, ref path, ref sub) if pat_is_binding(&tcx.def_map, pat) => {\n             let typ = fcx.local_ty(pat.span, pat.id);"}]}