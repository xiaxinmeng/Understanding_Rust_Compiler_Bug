{"sha": "8485d40a3264b15b92d391e99cb3d1abf8f25025", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ODVkNDBhMzI2NGIxNWI5MmQzOTFlOTljYjNkMWFiZjhmMjUwMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T20:22:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T20:22:31Z"}, "message": "Auto merge of #5304 - sinkuu:redundant_clone_not_consumed, r=flip1995\n\nExtend `redundant_clone` to the case that cloned value is not consumed\n\nFixes #5303.\n\n---\n\nchangelog: Extend `redundant_clone` to the case that cloned value is not consumed", "tree": {"sha": "897dece5f97d12b9f7834c19a188b65b9174b4e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/897dece5f97d12b9f7834c19a188b65b9174b4e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8485d40a3264b15b92d391e99cb3d1abf8f25025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8485d40a3264b15b92d391e99cb3d1abf8f25025", "html_url": "https://github.com/rust-lang/rust/commit/8485d40a3264b15b92d391e99cb3d1abf8f25025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8485d40a3264b15b92d391e99cb3d1abf8f25025/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "html_url": "https://github.com/rust-lang/rust/commit/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d"}, {"sha": "d9ad33852c1e0179fc9b22ac2324ab18455879f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ad33852c1e0179fc9b22ac2324ab18455879f1", "html_url": "https://github.com/rust-lang/rust/commit/d9ad33852c1e0179fc9b22ac2324ab18455879f1"}], "stats": {"total": 190, "additions": 136, "deletions": 54}, "files": [{"sha": "b63bb371c4f399374a48a1f29e446f3cf72bf8d8", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 65, "deletions": 43, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/8485d40a3264b15b92d391e99cb3d1abf8f25025/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485d40a3264b15b92d391e99cb3d1abf8f25025/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=8485d40a3264b15b92d391e99cb3d1abf8f25025", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use matches::matches;\n use rustc::mir::{\n     self, traversal,\n-    visit::{MutatingUseContext, PlaceContext, Visitor as _},\n+    visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n };\n use rustc::ty::{self, fold::TypeVisitor, Ty};\n use rustc_data_structures::{fx::FxHashMap, transitive_relation::TransitiveRelation};\n@@ -110,7 +110,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 continue;\n             }\n \n-            let (fn_def_id, arg, arg_ty, _) = unwrap_or_continue!(is_call_with_ref_arg(cx, mir, &terminator.kind));\n+            let (fn_def_id, arg, arg_ty, clone_ret) =\n+                unwrap_or_continue!(is_call_with_ref_arg(cx, mir, &terminator.kind));\n \n             let from_borrow = match_def_path(cx, fn_def_id, &paths::CLONE_TRAIT_METHOD)\n                 || match_def_path(cx, fn_def_id, &paths::TO_OWNED_METHOD)\n@@ -132,16 +133,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 statement_index: bbdata.statements.len(),\n             };\n \n-            // Cloned local\n-            let local = if from_borrow {\n+            // `Local` to be cloned, and a local of `clone` call's destination\n+            let (local, ret_local) = if from_borrow {\n                 // `res = clone(arg)` can be turned into `res = move arg;`\n                 // if `arg` is the only borrow of `cloned` at this point.\n \n                 if cannot_move_out || !possible_borrower.only_borrowers(&[arg], cloned, loc) {\n                     continue;\n                 }\n \n-                cloned\n+                (cloned, clone_ret)\n             } else {\n                 // `arg` is a reference as it is `.deref()`ed in the previous block.\n                 // Look into the predecessor block and find out the source of deref.\n@@ -153,15 +154,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 let pred_terminator = mir[ps[0]].terminator();\n \n                 // receiver of the `deref()` call\n-                let pred_arg = if_chain! {\n-                    if let Some((pred_fn_def_id, pred_arg, pred_arg_ty, Some(res))) =\n+                let (pred_arg, deref_clone_ret) = if_chain! {\n+                    if let Some((pred_fn_def_id, pred_arg, pred_arg_ty, res)) =\n                         is_call_with_ref_arg(cx, mir, &pred_terminator.kind);\n-                    if res.local == cloned;\n+                    if res == cloned;\n                     if match_def_path(cx, pred_fn_def_id, &paths::DEREF_TRAIT_METHOD);\n                     if match_type(cx, pred_arg_ty, &paths::PATH_BUF)\n                         || match_type(cx, pred_arg_ty, &paths::OS_STRING);\n                     then {\n-                        pred_arg\n+                        (pred_arg, res)\n                     } else {\n                         continue;\n                     }\n@@ -188,25 +189,35 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                     continue;\n                 }\n \n-                local\n+                (local, deref_clone_ret)\n             };\n \n-            // `local` cannot be moved out if it is used later\n-            let used_later = traversal::ReversePostorder::new(&mir, bb).skip(1).any(|(tbb, tdata)| {\n-                // Give up on loops\n-                if tdata.terminator().successors().any(|s| *s == bb) {\n-                    return true;\n-                }\n+            let is_temp = mir_read_only.local_kind(ret_local) == mir::LocalKind::Temp;\n+\n+            // 1. `local` can be moved out if it is not used later.\n+            // 2. If `ret_local` is a temporary and is neither consumed nor mutated, we can remove this `clone`\n+            // call anyway.\n+            let (used, consumed_or_mutated) = traversal::ReversePostorder::new(&mir, bb).skip(1).fold(\n+                (false, !is_temp),\n+                |(used, consumed), (tbb, tdata)| {\n+                    // Short-circuit\n+                    if (used && consumed) ||\n+                        // Give up on loops\n+                        tdata.terminator().successors().any(|s| *s == bb)\n+                    {\n+                        return (true, true);\n+                    }\n \n-                let mut vis = LocalUseVisitor {\n-                    local,\n-                    used_other_than_drop: false,\n-                };\n-                vis.visit_basic_block_data(tbb, tdata);\n-                vis.used_other_than_drop\n-            });\n+                    let mut vis = LocalUseVisitor {\n+                        used: (local, false),\n+                        consumed_or_mutated: (ret_local, false),\n+                    };\n+                    vis.visit_basic_block_data(tbb, tdata);\n+                    (used || vis.used.1, consumed || vis.consumed_or_mutated.1)\n+                },\n+            );\n \n-            if !used_later {\n+            if !used || !consumed_or_mutated {\n                 let span = terminator.source_info.span;\n                 let scope = terminator.source_info.scope;\n                 let node = mir.source_scopes[scope]\n@@ -240,10 +251,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                                 String::new(),\n                                 app,\n                             );\n-                            db.span_note(\n-                                span.with_hi(span.lo() + BytePos(u32::try_from(dot).unwrap())),\n-                                \"this value is dropped without further use\",\n-                            );\n+                            if used {\n+                                db.span_note(\n+                                    span,\n+                                    \"cloned value is neither consumed nor mutated\",\n+                                );\n+                            } else {\n+                                db.span_note(\n+                                    span.with_hi(span.lo() + BytePos(u32::try_from(dot).unwrap())),\n+                                    \"this value is dropped without further use\",\n+                                );\n+                            }\n                         });\n                     } else {\n                         span_lint_hir(cx, REDUNDANT_CLONE, node, span, \"redundant clone\");\n@@ -259,7 +277,7 @@ fn is_call_with_ref_arg<'tcx>(\n     cx: &LateContext<'_, 'tcx>,\n     mir: &'tcx mir::Body<'tcx>,\n     kind: &'tcx mir::TerminatorKind<'tcx>,\n-) -> Option<(def_id::DefId, mir::Local, Ty<'tcx>, Option<&'tcx mir::Place<'tcx>>)> {\n+) -> Option<(def_id::DefId, mir::Local, Ty<'tcx>, mir::Local)> {\n     if_chain! {\n         if let mir::TerminatorKind::Call { func, args, destination, .. } = kind;\n         if args.len() == 1;\n@@ -268,7 +286,7 @@ fn is_call_with_ref_arg<'tcx>(\n         if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(&*mir, cx.tcx));\n         if !is_copy(cx, inner_ty);\n         then {\n-            Some((def_id, *local, inner_ty, destination.as_ref().map(|(dest, _)| dest)))\n+            Some((def_id, *local, inner_ty, destination.as_ref().map(|(dest, _)| dest)?.as_local()?))\n         } else {\n             None\n         }\n@@ -337,20 +355,15 @@ fn base_local_and_movability<'tcx>(\n }\n \n struct LocalUseVisitor {\n-    local: mir::Local,\n-    used_other_than_drop: bool,\n+    used: (mir::Local, bool),\n+    consumed_or_mutated: (mir::Local, bool),\n }\n \n impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n     fn visit_basic_block_data(&mut self, block: mir::BasicBlock, data: &mir::BasicBlockData<'tcx>) {\n         let statements = &data.statements;\n         for (statement_index, statement) in statements.iter().enumerate() {\n             self.visit_statement(statement, mir::Location { block, statement_index });\n-\n-            // Once flagged, skip remaining statements\n-            if self.used_other_than_drop {\n-                return;\n-            }\n         }\n \n         self.visit_terminator(\n@@ -362,14 +375,23 @@ impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n         );\n     }\n \n-    fn visit_local(&mut self, local: &mir::Local, ctx: PlaceContext, _: mir::Location) {\n-        match ctx {\n-            PlaceContext::MutatingUse(MutatingUseContext::Drop) | PlaceContext::NonUse(_) => return,\n-            _ => {},\n+    fn visit_place(&mut self, place: &mir::Place<'tcx>, ctx: PlaceContext, _: mir::Location) {\n+        let local = place.local;\n+\n+        if local == self.used.0\n+            && !matches!(ctx, PlaceContext::MutatingUse(MutatingUseContext::Drop) | PlaceContext::NonUse(_))\n+        {\n+            self.used.1 = true;\n         }\n \n-        if *local == self.local {\n-            self.used_other_than_drop = true;\n+        if local == self.consumed_or_mutated.0 {\n+            match ctx {\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::Move)\n+                | PlaceContext::MutatingUse(MutatingUseContext::Borrow) => {\n+                    self.consumed_or_mutated.1 = true;\n+                },\n+                _ => {},\n+            }\n         }\n     }\n }"}, {"sha": "306514769990d82edde8ff07ebe1780c625cb061", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485d40a3264b15b92d391e99cb3d1abf8f25025/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8485d40a3264b15b92d391e99cb3d1abf8f25025/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=8485d40a3264b15b92d391e99cb3d1abf8f25025", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(clippy::print_literal)]\n+#![allow(clippy::print_literal, clippy::redundant_clone)]\n #![warn(clippy::useless_format)]\n \n struct Foo(pub String);"}, {"sha": "b604d79cca373119935232370d9cee658c540f5c", "filename": "tests/ui/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485d40a3264b15b92d391e99cb3d1abf8f25025/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485d40a3264b15b92d391e99cb3d1abf8f25025/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=8485d40a3264b15b92d391e99cb3d1abf8f25025", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(clippy::print_literal)]\n+#![allow(clippy::print_literal, clippy::redundant_clone)]\n #![warn(clippy::useless_format)]\n \n struct Foo(pub String);"}, {"sha": "54815603c6de91657bee82caea373a5c104b1bba", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8485d40a3264b15b92d391e99cb3d1abf8f25025/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8485d40a3264b15b92d391e99cb3d1abf8f25025/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=8485d40a3264b15b92d391e99cb3d1abf8f25025", "patch": "@@ -50,6 +50,7 @@ fn main() {\n     cannot_double_move(Alpha);\n     cannot_move_from_type_with_drop();\n     borrower_propagation();\n+    not_consumed();\n }\n \n #[derive(Clone)]\n@@ -136,3 +137,26 @@ fn borrower_propagation() {\n         let _f = f.clone(); // ok\n     }\n }\n+\n+fn not_consumed() {\n+    let x = std::path::PathBuf::from(\"home\");\n+    let y = x.join(\"matthias\");\n+    // join() creates a new owned PathBuf, does not take a &mut to x variable, thus the .clone() is\n+    // redundant. (It also does not consume the PathBuf)\n+\n+    println!(\"x: {:?}, y: {:?}\", x, y);\n+\n+    let mut s = String::new();\n+    s.clone().push_str(\"foo\"); // OK, removing this `clone()` will change the behavior.\n+    s.push_str(\"bar\");\n+    assert_eq!(s, \"bar\");\n+\n+    let t = Some(s);\n+    // OK\n+    if let Some(x) = t.clone() {\n+        println!(\"{}\", x);\n+    }\n+    if let Some(x) = t {\n+        println!(\"{}\", x);\n+    }\n+}"}, {"sha": "a9b31183adc86b20095cc3d2b62c82bf865f8000", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8485d40a3264b15b92d391e99cb3d1abf8f25025/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485d40a3264b15b92d391e99cb3d1abf8f25025/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=8485d40a3264b15b92d391e99cb3d1abf8f25025", "patch": "@@ -50,6 +50,7 @@ fn main() {\n     cannot_double_move(Alpha);\n     cannot_move_from_type_with_drop();\n     borrower_propagation();\n+    not_consumed();\n }\n \n #[derive(Clone)]\n@@ -136,3 +137,26 @@ fn borrower_propagation() {\n         let _f = f.clone(); // ok\n     }\n }\n+\n+fn not_consumed() {\n+    let x = std::path::PathBuf::from(\"home\");\n+    let y = x.clone().join(\"matthias\");\n+    // join() creates a new owned PathBuf, does not take a &mut to x variable, thus the .clone() is\n+    // redundant. (It also does not consume the PathBuf)\n+\n+    println!(\"x: {:?}, y: {:?}\", x, y);\n+\n+    let mut s = String::new();\n+    s.clone().push_str(\"foo\"); // OK, removing this `clone()` will change the behavior.\n+    s.push_str(\"bar\");\n+    assert_eq!(s, \"bar\");\n+\n+    let t = Some(s);\n+    // OK\n+    if let Some(x) = t.clone() {\n+        println!(\"{}\", x);\n+    }\n+    if let Some(x) = t {\n+        println!(\"{}\", x);\n+    }\n+}"}, {"sha": "9c27812b9cdceea4e881fd6ebf81f2192dfe11b0", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8485d40a3264b15b92d391e99cb3d1abf8f25025/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8485d40a3264b15b92d391e99cb3d1abf8f25025/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=8485d40a3264b15b92d391e99cb3d1abf8f25025", "patch": "@@ -108,52 +108,64 @@ LL |     let _t = tup.0.clone();\n    |              ^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:59:22\n+  --> $DIR/redundant_clone.rs:60:22\n    |\n LL |         (a.clone(), a.clone())\n    |                      ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:59:21\n+  --> $DIR/redundant_clone.rs:60:21\n    |\n LL |         (a.clone(), a.clone())\n    |                     ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:119:15\n+  --> $DIR/redundant_clone.rs:120:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:119:14\n+  --> $DIR/redundant_clone.rs:120:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:120:15\n+  --> $DIR/redundant_clone.rs:121:15\n    |\n LL |     let _t = t.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:120:14\n+  --> $DIR/redundant_clone.rs:121:14\n    |\n LL |     let _t = t.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:130:19\n+  --> $DIR/redundant_clone.rs:131:19\n    |\n LL |         let _f = f.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:130:18\n+  --> $DIR/redundant_clone.rs:131:18\n    |\n LL |         let _f = f.clone();\n    |                  ^\n \n-error: aborting due to 13 previous errors\n+error: redundant clone\n+  --> $DIR/redundant_clone.rs:143:14\n+   |\n+LL |     let y = x.clone().join(\"matthias\");\n+   |              ^^^^^^^^ help: remove this\n+   |\n+note: cloned value is neither consumed nor mutated\n+  --> $DIR/redundant_clone.rs:143:13\n+   |\n+LL |     let y = x.clone().join(\"matthias\");\n+   |             ^^^^^^^^^\n+\n+error: aborting due to 14 previous errors\n "}]}