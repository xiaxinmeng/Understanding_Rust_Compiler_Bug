{"sha": "18e5b2f98c7768f0342333e7b6bb6c506f663515", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZTViMmY5OGM3NzY4ZjAzNDIzMzNlN2I2YmI2YzUwNmY2NjM1MTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T10:04:26Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "functionalize parse_generic_bound", "tree": {"sha": "96a31526f5ab6f07b1204770d4c919731f126600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96a31526f5ab6f07b1204770d4c919731f126600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18e5b2f98c7768f0342333e7b6bb6c506f663515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18e5b2f98c7768f0342333e7b6bb6c506f663515", "html_url": "https://github.com/rust-lang/rust/commit/18e5b2f98c7768f0342333e7b6bb6c506f663515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18e5b2f98c7768f0342333e7b6bb6c506f663515/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9a992a6430371cb71a8abddd6839f6f1dde699", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9a992a6430371cb71a8abddd6839f6f1dde699", "html_url": "https://github.com/rust-lang/rust/commit/8a9a992a6430371cb71a8abddd6839f6f1dde699"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "72f831aab0678952e7afcbd0bafb1f765d5917ce", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/18e5b2f98c7768f0342333e7b6bb6c506f663515/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18e5b2f98c7768f0342333e7b6bb6c506f663515/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=18e5b2f98c7768f0342333e7b6bb6c506f663515", "patch": "@@ -363,13 +363,15 @@ impl<'a> Parser<'a> {\n         let mut last_plus_span = None;\n         let mut was_negative = false;\n         while self.can_begin_bound() {\n-            self.parse_generic_bound(\n-                colon_span,\n-                last_plus_span,\n-                &mut bounds,\n-                &mut negative_bounds,\n-                &mut was_negative,\n-            )?;\n+            match self.parse_generic_bound(colon_span, last_plus_span)? {\n+                Ok(bound) => bounds.push(bound),\n+                Err(neg_sp) => {\n+                    was_negative = true;\n+                    if let Some(neg_sp) = neg_sp {\n+                        negative_bounds.push(neg_sp);\n+                    }\n+                }\n+            }\n \n             if !allow_plus || !self.eat_plus() {\n                 break\n@@ -436,21 +438,19 @@ impl<'a> Parser<'a> {\n         &mut self,\n         colon_span: Option<Span>,\n         last_plus_span: Option<Span>,\n-        bounds: &mut Vec<GenericBound>,\n-        negative_bounds: &mut Vec<Span>,\n-        was_negative: &mut bool,\n-    ) -> PResult<'a, ()> {\n+    ) -> PResult<'a, Result<GenericBound, Option<Span>>> {\n         let lo = self.token.span;\n         let has_parens = self.eat(&token::OpenDelim(token::Paren));\n         let inner_lo = self.token.span;\n         let is_negative = self.eat(&token::Not);\n         let question = if self.eat(&token::Question) { Some(self.prev_span) } else { None };\n         if self.token.is_lifetime() {\n             self.error_opt_out_lifetime(question);\n-            bounds.push(GenericBound::Outlives(self.expect_lifetime()));\n+            let bound = GenericBound::Outlives(self.expect_lifetime());\n             if has_parens {\n                 self.recover_paren_lifetime(lo, inner_lo)?;\n             }\n+            Ok(Ok(bound))\n         } else {\n             let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n             let path = self.parse_path(PathStyle::Type)?;\n@@ -459,21 +459,17 @@ impl<'a> Parser<'a> {\n             }\n             let poly_span = lo.to(self.prev_span);\n             if is_negative {\n-                *was_negative = true;\n-                if let Some(sp) = last_plus_span.or(colon_span) {\n-                    negative_bounds.push(sp.to(poly_span));\n-                }\n+                Ok(Err(last_plus_span.or(colon_span).map(|sp| sp.to(poly_span))))\n             } else {\n                 let poly_trait = PolyTraitRef::new(lifetime_defs, path, poly_span);\n                 let modifier = if question.is_some() {\n                     TraitBoundModifier::Maybe\n                 } else {\n                     TraitBoundModifier::None\n                 };\n-                bounds.push(GenericBound::Trait(poly_trait, modifier));\n+                Ok(Ok(GenericBound::Trait(poly_trait, modifier)))\n             }\n         }\n-        Ok(())\n     }\n \n     fn error_opt_out_lifetime(&self, question: Option<Span>) {"}]}