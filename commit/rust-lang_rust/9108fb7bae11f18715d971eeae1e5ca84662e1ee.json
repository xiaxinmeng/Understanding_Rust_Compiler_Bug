{"sha": "9108fb7bae11f18715d971eeae1e5ca84662e1ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMDhmYjdiYWUxMWYxODcxNWQ5NzFlZWFlMWU1Y2E4NDY2MmUxZWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-04-22T20:43:14Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-04-24T18:04:09Z"}, "message": "Remove some old code from libsyntax", "tree": {"sha": "a1a4f5f13a8e0d409d6077796e46afbec162ff34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1a4f5f13a8e0d409d6077796e46afbec162ff34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9108fb7bae11f18715d971eeae1e5ca84662e1ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9108fb7bae11f18715d971eeae1e5ca84662e1ee", "html_url": "https://github.com/rust-lang/rust/commit/9108fb7bae11f18715d971eeae1e5ca84662e1ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9108fb7bae11f18715d971eeae1e5ca84662e1ee/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "html_url": "https://github.com/rust-lang/rust/commit/a97f60ee8618fde7bafe49d79a3ea670758e6a0c"}], "stats": {"total": 88, "additions": 21, "deletions": 67}, "files": [{"sha": "5064bcba4c36f00939266fe384a2c6a90a7578c1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9108fb7bae11f18715d971eeae1e5ca84662e1ee", "patch": "@@ -248,8 +248,8 @@ impl PathParameters {\n     pub fn none() -> PathParameters {\n         PathParameters::AngleBracketed(AngleBracketedParameterData {\n             lifetimes: Vec::new(),\n-            types: P::empty(),\n-            bindings: P::empty(),\n+            types: P::new(),\n+            bindings: P::new(),\n         })\n     }\n \n@@ -421,7 +421,7 @@ impl Default for Generics {\n     fn default() ->  Generics {\n         Generics {\n             lifetimes: Vec::new(),\n-            ty_params: P::empty(),\n+            ty_params: P::new(),\n             where_clause: WhereClause {\n                 id: DUMMY_NODE_ID,\n                 predicates: Vec::new(),"}, {"sha": "6cfa1e9847b88cbe3670d3821839148ff0770de0", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=9108fb7bae11f18715d971eeae1e5ca84662e1ee", "patch": "@@ -97,7 +97,6 @@ pub mod config;\n pub mod entry;\n pub mod feature_gate;\n pub mod fold;\n-pub mod owned_slice;\n pub mod parse;\n pub mod ptr;\n pub mod show_span;"}, {"sha": "33a3d5785981ae50f55b9708fecef54b0e9331f2", "filename": "src/libsyntax/owned_slice.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/// A non-growable owned slice.\n-#[unstable(feature = \"rustc_private\", issue = \"0\")]\n-#[rustc_deprecated(since = \"1.7.0\", reason = \"use `ptr::P<[T]>` instead\")]\n-pub type OwnedSlice<T> = ::ptr::P<[T]>;"}, {"sha": "c2050d2a8f48b38eecbdd4c366f70226c65c029e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=9108fb7bae11f18715d971eeae1e5ca84662e1ee", "patch": "@@ -925,7 +925,7 @@ mod tests {\n                                     Abi::Rust,\n                                     ast::Generics{ // no idea on either of these:\n                                         lifetimes: Vec::new(),\n-                                        ty_params: P::empty(),\n+                                        ty_params: P::new(),\n                                         where_clause: ast::WhereClause {\n                                             id: ast::DUMMY_NODE_ID,\n                                             predicates: Vec::new(),"}, {"sha": "4fb423f787e636a72a1adde3752c10ac60616bcf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9108fb7bae11f18715d971eeae1e5ca84662e1ee", "patch": "@@ -1160,7 +1160,7 @@ impl<'a> Parser<'a> {\n             let other_bounds = if self.eat(&token::BinOp(token::Plus)) {\n                 self.parse_ty_param_bounds(BoundParsingMode::Bare)?\n             } else {\n-                P::empty()\n+                P::new()\n             };\n             let all_bounds =\n                 Some(TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)).into_iter()\n@@ -4239,7 +4239,7 @@ impl<'a> Parser<'a> {\n                                         -> PResult<'a, TyParamBounds>\n     {\n         if !self.eat(&token::Colon) {\n-            Ok(P::empty())\n+            Ok(P::new())\n         } else {\n             self.parse_ty_param_bounds(mode)\n         }"}, {"sha": "1c6ecbd3b5afdaa037650c1d3a387c9901b86440", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9108fb7bae11f18715d971eeae1e5ca84662e1ee", "patch": "@@ -995,7 +995,7 @@ impl<'a> State<'a> {\n             ast::TyKind::BareFn(ref f) => {\n                 let generics = ast::Generics {\n                     lifetimes: f.lifetimes.clone(),\n-                    ty_params: P::empty(),\n+                    ty_params: P::new(),\n                     where_clause: ast::WhereClause {\n                         id: ast::DUMMY_NODE_ID,\n                         predicates: Vec::new(),\n@@ -3011,7 +3011,7 @@ impl<'a> State<'a> {\n         }\n         let generics = ast::Generics {\n             lifetimes: Vec::new(),\n-            ty_params: P::empty(),\n+            ty_params: P::new(),\n             where_clause: ast::WhereClause {\n                 id: ast::DUMMY_NODE_ID,\n                 predicates: Vec::new(),"}, {"sha": "9d04cb75daa0e7c3318d804961a89b65ddaf2c85", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=9108fb7bae11f18715d971eeae1e5ca84662e1ee", "patch": "@@ -83,10 +83,10 @@ impl<T: 'static> P<T> {\n     }\n }\n \n-impl<T> Deref for P<T> {\n+impl<T: ?Sized> Deref for P<T> {\n     type Target = T;\n \n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         &self.ptr\n     }\n }\n@@ -97,11 +97,12 @@ impl<T: 'static + Clone> Clone for P<T> {\n     }\n }\n \n-impl<T: Debug> Debug for P<T> {\n+impl<T: ?Sized + Debug> Debug for P<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        Debug::fmt(&**self, f)\n+        Debug::fmt(&self.ptr, f)\n     }\n }\n+\n impl<T: Display> Display for P<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         Display::fmt(&**self, f)\n@@ -126,19 +127,8 @@ impl<T: Encodable> Encodable for P<T> {\n     }\n }\n \n-\n-impl<T:fmt::Debug> fmt::Debug for P<[T]> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        self.ptr.fmt(fmt)\n-    }\n-}\n-\n impl<T> P<[T]> {\n     pub fn new() -> P<[T]> {\n-        P::empty()\n-    }\n-\n-    pub fn empty() -> P<[T]> {\n         P { ptr: Default::default() }\n     }\n \n@@ -151,31 +141,11 @@ impl<T> P<[T]> {\n     pub fn into_vec(self) -> Vec<T> {\n         self.ptr.into_vec()\n     }\n-\n-    pub fn as_slice<'a>(&'a self) -> &'a [T] {\n-        &self.ptr\n-    }\n-\n-    pub fn move_iter(self) -> vec::IntoIter<T> {\n-        self.into_vec().into_iter()\n-    }\n-\n-    pub fn map<U, F: FnMut(&T) -> U>(&self, f: F) -> P<[U]> {\n-        self.iter().map(f).collect()\n-    }\n-}\n-\n-impl<T> Deref for P<[T]> {\n-    type Target = [T];\n-\n-    fn deref(&self) -> &[T] {\n-        self.as_slice()\n-    }\n }\n \n impl<T> Default for P<[T]> {\n     fn default() -> P<[T]> {\n-        P::empty()\n+        P::new()\n     }\n }\n "}, {"sha": "5251b0d08d4497abd09794ed32a62b3a55c6c28c", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=9108fb7bae11f18715d971eeae1e5ca84662e1ee", "patch": "@@ -525,7 +525,7 @@ impl<'a> TraitDef<'a> {\n                         span: self.span,\n                         bound_lifetimes: wb.bound_lifetimes.clone(),\n                         bounded_ty: wb.bounded_ty.clone(),\n-                        bounds: P::from_vec(wb.bounds.iter().cloned().collect())\n+                        bounds: wb.bounds.iter().cloned().collect(),\n                     })\n                 }\n                 ast::WherePredicate::RegionPredicate(ref rb) => {\n@@ -595,9 +595,9 @@ impl<'a> TraitDef<'a> {\n         let trait_ref = cx.trait_ref(trait_path);\n \n         // Create the type parameters on the `self` path.\n-        let self_ty_params = generics.ty_params.map(|ty_param| {\n+        let self_ty_params = generics.ty_params.iter().map(|ty_param| {\n             cx.ty_ident(self.span, ty_param.ident)\n-        });\n+        }).collect();\n \n         let self_lifetimes: Vec<ast::Lifetime> =\n             generics.lifetimes\n@@ -608,7 +608,7 @@ impl<'a> TraitDef<'a> {\n         // Create the type of `self`.\n         let self_type = cx.ty_path(\n             cx.path_all(self.span, false, vec!( type_ident ), self_lifetimes,\n-                        self_ty_params.into_vec(), Vec::new()));\n+                        self_ty_params, Vec::new()));\n \n         let attr = cx.attribute(\n             self.span,"}, {"sha": "e31d45d91a59f4ef8baf5feb1dad48180ed11b0a", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9108fb7bae11f18715d971eeae1e5ca84662e1ee/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=9108fb7bae11f18715d971eeae1e5ca84662e1ee", "patch": "@@ -169,15 +169,14 @@ impl<'a> Ty<'a> {\n                    -> ast::Path {\n         match *self {\n             Self_ => {\n-                let self_params = self_generics.ty_params.map(|ty_param| {\n+                let self_params = self_generics.ty_params.iter().map(|ty_param| {\n                     cx.ty_ident(span, ty_param.ident)\n-                });\n+                }).collect();\n                 let lifetimes = self_generics.lifetimes.iter()\n                                                        .map(|d| d.lifetime)\n                                                        .collect();\n \n-                cx.path_all(span, false, vec!(self_ty), lifetimes,\n-                            self_params.into_vec(), Vec::new())\n+                cx.path_all(span, false, vec![self_ty], lifetimes, self_params, Vec::new())\n             }\n             Literal(ref p) => {\n                 p.to_path(cx, span, self_ty, self_generics)"}]}