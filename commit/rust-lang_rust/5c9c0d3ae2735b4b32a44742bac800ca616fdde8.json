{"sha": "5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjOWMwZDNhZTI3MzViNGIzMmE0NDc0MmJhYzgwMGNhNjE2ZmRkZTg=", "commit": {"author": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-02-11T17:07:21Z"}, "committer": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-02-11T17:07:21Z"}, "message": "ra_assists: assist \"providers\" can produce multiple assists", "tree": {"sha": "8ad5dc9a548915729bcc87085a1a145d4ba2a00a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ad5dc9a548915729bcc87085a1a145d4ba2a00a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "html_url": "https://github.com/rust-lang/rust/commit/5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/comments", "author": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af62fde57fe58f4aa06608568dc26535731800a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/af62fde57fe58f4aa06608568dc26535731800a0", "html_url": "https://github.com/rust-lang/rust/commit/af62fde57fe58f4aa06608568dc26535731800a0"}], "stats": {"total": 210, "additions": 146, "deletions": 64}, "files": [{"sha": "ff24b9dc84d67b030aeacbf48816779dc73b7518", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -921,6 +921,7 @@ version = \"0.1.0\"\n name = \"ra_assists\"\n version = \"0.1.0\"\n dependencies = [\n+ \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_db 0.1.0\",\n  \"ra_fmt 0.1.0\","}, {"sha": "880bc4b189752cb34f10d7ed1f6cd2da27b70a66", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -6,6 +6,7 @@ authors = [\"rust-analyzer developers\"]\n \n [dependencies]\n join_to_string = \"0.1.3\"\n+itertools = \"0.8.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "0556dd69cfb3b8dcbae365bb3deeb353919f0290", "filename": "crates/ra_assists/src/add_derive.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -7,10 +7,10 @@ use ra_syntax::{\n \n use crate::{AssistCtx, Assist};\n \n-pub(crate) fn add_derive(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_derive(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(nominal)?;\n-    ctx.build(\"add `#[derive]`\", |edit| {\n+    ctx.add_action(\"add `#[derive]`\", |edit| {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_call())\n@@ -26,7 +26,9 @@ pub(crate) fn add_derive(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         };\n         edit.target(nominal.syntax().range());\n         edit.set_cursor(offset)\n-    })\n+    });\n+\n+    ctx.build()\n }\n \n // Insert `derive` after doc comments."}, {"sha": "b40b9cc0c2f9a9ac0c910ca7cb3a581cb65df245", "filename": "crates/ra_assists/src/add_impl.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -7,10 +7,10 @@ use ra_syntax::{\n \n use crate::{AssistCtx, Assist};\n \n-pub(crate) fn add_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_impl(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n-    ctx.build(\"add impl\", |edit| {\n+    ctx.add_action(\"add impl\", |edit| {\n         edit.target(nominal.syntax().range());\n         let type_params = nominal.type_param_list();\n         let start_offset = nominal.syntax().range().end();\n@@ -32,7 +32,9 @@ pub(crate) fn add_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         edit.set_cursor(start_offset + TextUnit::of_str(&buf));\n         buf.push_str(\"\\n}\");\n         edit.insert(start_offset, buf);\n-    })\n+    });\n+\n+    ctx.build()\n }\n \n #[cfg(test)]"}, {"sha": "e9c4f0a23889495ae82c13abc46ec6ba67c3c7ea", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -9,9 +9,10 @@ use ra_fmt::{leading_indent, reindent};\n \n use crate::{AssistLabel, AssistAction};\n \n+#[derive(Clone, Debug)]\n pub(crate) enum Assist {\n-    Unresolved(AssistLabel),\n-    Resolved(AssistLabel, AssistAction),\n+    Unresolved(Vec<AssistLabel>),\n+    Resolved(Vec<(AssistLabel, AssistAction)>),\n }\n \n /// `AssistCtx` allows to apply an assist or check if it could be applied.\n@@ -50,6 +51,7 @@ pub(crate) struct AssistCtx<'a, DB> {\n     pub(crate) frange: FileRange,\n     source_file: &'a SourceFile,\n     should_compute_edit: bool,\n+    assist: Assist,\n }\n \n impl<'a, DB> Clone for AssistCtx<'a, DB> {\n@@ -59,6 +61,7 @@ impl<'a, DB> Clone for AssistCtx<'a, DB> {\n             frange: self.frange,\n             source_file: self.source_file,\n             should_compute_edit: self.should_compute_edit,\n+            assist: self.assist.clone(),\n         }\n     }\n }\n@@ -69,25 +72,35 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n         F: FnOnce(AssistCtx<DB>) -> T,\n     {\n         let source_file = &db.parse(frange.file_id);\n-        let ctx = AssistCtx { db, frange, source_file, should_compute_edit };\n+        let assist =\n+            if should_compute_edit { Assist::Resolved(vec![]) } else { Assist::Unresolved(vec![]) };\n+\n+        let ctx = AssistCtx { db, frange, source_file, should_compute_edit, assist };\n         f(ctx)\n     }\n \n-    pub(crate) fn build(\n-        self,\n+    pub(crate) fn add_action(\n+        &mut self,\n         label: impl Into<String>,\n         f: impl FnOnce(&mut AssistBuilder),\n-    ) -> Option<Assist> {\n+    ) -> &mut Self {\n         let label = AssistLabel { label: label.into() };\n-        if !self.should_compute_edit {\n-            return Some(Assist::Unresolved(label));\n+        match &mut self.assist {\n+            Assist::Unresolved(labels) => labels.push(label),\n+            Assist::Resolved(labels_actions) => {\n+                let action = {\n+                    let mut edit = AssistBuilder::default();\n+                    f(&mut edit);\n+                    edit.build()\n+                };\n+                labels_actions.push((label, action));\n+            }\n         }\n-        let action = {\n-            let mut edit = AssistBuilder::default();\n-            f(&mut edit);\n-            edit.build()\n-        };\n-        Some(Assist::Resolved(label, action))\n+        self\n+    }\n+\n+    pub(crate) fn build(self) -> Option<Assist> {\n+        Some(self.assist)\n     }\n \n     pub(crate) fn leaf_at_offset(&self) -> LeafAtOffset<&'a SyntaxNode> {"}, {"sha": "b251c936948ea5ed15767a8fc42cf6b3be83a741", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -480,7 +480,7 @@ fn make_assist_add_nested_import(\n     }\n }\n \n-pub(crate) fn auto_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let node = ctx.covering_node();\n     let current_file = node.ancestors().find_map(ast::SourceFile::cast)?;\n \n@@ -495,7 +495,7 @@ pub(crate) fn auto_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         return None;\n     }\n \n-    ctx.build(format!(\"import {} in the current file\", fmt_segments(&segments)), |edit| {\n+    ctx.add_action(format!(\"import {} in the current file\", fmt_segments(&segments)), |edit| {\n         let action = best_action_for_target(current_file.syntax(), path, &segments);\n         make_assist(&action, segments.as_slice(), edit);\n         if let Some(last_segment) = path.segment() {\n@@ -506,7 +506,9 @@ pub(crate) fn auto_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n                 last_segment.syntax().range().start(),\n             ));\n         }\n-    })\n+    });\n+\n+    ctx.build()\n }\n \n #[cfg(test)]"}, {"sha": "c2ba897a4bd563f1281151359d03879aa1f68329", "filename": "crates/ra_assists/src/change_visibility.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -14,7 +14,7 @@ pub(crate) fn change_visibility(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n     add_vis(ctx)\n }\n \n-fn add_vis(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+fn add_vis(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let item_keyword = ctx.leaf_at_offset().find(|leaf| match leaf.kind() {\n         FN_KW | MOD_KW | STRUCT_KW | ENUM_KW | TRAIT_KW => true,\n         _ => false,\n@@ -41,11 +41,13 @@ fn add_vis(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         (vis_offset(field.syntax()), ident.range())\n     };\n \n-    ctx.build(\"make pub(crate)\", |edit| {\n+    ctx.add_action(\"make pub(crate)\", |edit| {\n         edit.target(target);\n         edit.insert(offset, \"pub(crate) \");\n         edit.set_cursor(offset);\n-    })\n+    });\n+\n+    ctx.build()\n }\n \n fn vis_offset(node: &SyntaxNode) -> TextUnit {\n@@ -59,20 +61,24 @@ fn vis_offset(node: &SyntaxNode) -> TextUnit {\n         .unwrap_or(node.range().start())\n }\n \n-fn change_vis(ctx: AssistCtx<impl HirDatabase>, vis: &ast::Visibility) -> Option<Assist> {\n+fn change_vis(mut ctx: AssistCtx<impl HirDatabase>, vis: &ast::Visibility) -> Option<Assist> {\n     if vis.syntax().text() == \"pub\" {\n-        return ctx.build(\"change to pub(crate)\", |edit| {\n+        ctx.add_action(\"change to pub(crate)\", |edit| {\n             edit.target(vis.syntax().range());\n             edit.replace(vis.syntax().range(), \"pub(crate)\");\n-            edit.set_cursor(vis.syntax().range().start());\n+            edit.set_cursor(vis.syntax().range().start())\n         });\n+\n+        return ctx.build();\n     }\n     if vis.syntax().text() == \"pub(crate)\" {\n-        return ctx.build(\"change to pub\", |edit| {\n+        ctx.add_action(\"change to pub\", |edit| {\n             edit.target(vis.syntax().range());\n             edit.replace(vis.syntax().range(), \"pub\");\n             edit.set_cursor(vis.syntax().range().start());\n         });\n+\n+        return ctx.build();\n     }\n     None\n }"}, {"sha": "d8e40b4b7b23f7eb07b9d09b622d3a411fffc259", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::ast::{self, AstNode};\n \n use crate::{AssistCtx, Assist};\n \n-pub(crate) fn fill_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_expr = ctx.node_at_offset::<ast::MatchExpr>()?;\n \n     // We already have some match arms, so we don't provide any assists.\n@@ -33,7 +33,7 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n     let enum_name = enum_def.name(ctx.db)?;\n     let db = ctx.db;\n \n-    ctx.build(\"fill match arms\", |edit| {\n+    ctx.add_action(\"fill match arms\", |edit| {\n         let mut buf = format!(\"match {} {{\\n\", expr.syntax().text().to_string());\n         let variants = enum_def.variants(db);\n         for variant in variants {\n@@ -68,7 +68,9 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n         edit.target(match_expr.syntax().range());\n         edit.set_cursor(expr.syntax().range().start());\n         edit.replace_node_and_indent(match_expr.syntax(), buf);\n-    })\n+    });\n+\n+    ctx.build()\n }\n \n #[cfg(test)]"}, {"sha": "08644d720c9595c0b741679502d38cc30bae950c", "filename": "crates/ra_assists/src/flip_comma.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -6,15 +6,17 @@ use ra_syntax::{\n \n use crate::{AssistCtx, Assist, non_trivia_sibling};\n \n-pub(crate) fn flip_comma(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn flip_comma(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let comma = ctx.leaf_at_offset().find(|leaf| leaf.kind() == COMMA)?;\n     let prev = non_trivia_sibling(comma, Direction::Prev)?;\n     let next = non_trivia_sibling(comma, Direction::Next)?;\n-    ctx.build(\"flip comma\", |edit| {\n+    ctx.add_action(\"flip comma\", |edit| {\n         edit.target(comma.range());\n         edit.replace(prev.range(), next.text());\n         edit.replace(next.range(), prev.text());\n-    })\n+    });\n+\n+    ctx.build()\n }\n \n #[cfg(test)]"}, {"sha": "f0e012105f5ecb5008756fac6397eb208f631dfc", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n \n use crate::{AssistCtx, Assist};\n \n-pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let node = ctx.covering_node();\n     if !valid_covering_node(node) {\n         return None;\n@@ -19,7 +19,7 @@ pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Ass\n     if indent.kind() != WHITESPACE {\n         return None;\n     }\n-    ctx.build(\"introduce variable\", move |edit| {\n+    ctx.add_action(\"introduce variable\", move |edit| {\n         let mut buf = String::new();\n \n         let cursor_offset = if wrap_in_block {\n@@ -68,7 +68,9 @@ pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Ass\n             }\n         }\n         edit.set_cursor(anchor_stmt.range().start() + cursor_offset);\n-    })\n+    });\n+\n+    ctx.build()\n }\n \n fn valid_covering_node(node: &SyntaxNode) -> bool {"}, {"sha": "c607a5142be136bbae38864f232217c428f1c6ee", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 59, "deletions": 16, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -7,19 +7,22 @@\n \n mod assist_ctx;\n \n+use itertools::Itertools;\n+\n use ra_text_edit::TextEdit;\n use ra_syntax::{TextRange, TextUnit, SyntaxNode, Direction};\n use ra_db::FileRange;\n use hir::db::HirDatabase;\n \n pub(crate) use crate::assist_ctx::{AssistCtx, Assist};\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct AssistLabel {\n     /// Short description of the assist, as shown in the UI.\n     pub label: String,\n }\n \n+#[derive(Debug, Clone)]\n pub struct AssistAction {\n     pub edit: TextEdit,\n     pub cursor_position: Option<TextUnit>,\n@@ -39,10 +42,10 @@ where\n             .iter()\n             .filter_map(|f| f(ctx.clone()))\n             .map(|a| match a {\n-                Assist::Unresolved(label) => label,\n+                Assist::Unresolved(labels) => labels,\n                 Assist::Resolved(..) => unreachable!(),\n             })\n-            .collect()\n+            .concat()\n     })\n }\n \n@@ -61,10 +64,10 @@ where\n             .iter()\n             .filter_map(|f| f(ctx.clone()))\n             .map(|a| match a {\n-                Assist::Resolved(label, action) => (label, action),\n+                Assist::Resolved(labels_actions) => labels_actions,\n                 Assist::Unresolved(..) => unreachable!(),\n             })\n-            .collect::<Vec<(AssistLabel, AssistAction)>>();\n+            .concat();\n         a.sort_by(|a, b| match (a.1.target, b.1.target) {\n             (Some(a), Some(b)) => a.len().cmp(&b.len()),\n             (Some(_), None) => Ordering::Less,\n@@ -118,18 +121,52 @@ mod helpers {\n         assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n         before: &str,\n         after: &str,\n+    ) {\n+        check_assist_nth_action(assist, before, after, 0)\n+    }\n+\n+    pub(crate) fn check_assist_range(\n+        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        before: &str,\n+        after: &str,\n+    ) {\n+        check_assist_range_nth_action(assist, before, after, 0)\n+    }\n+\n+    pub(crate) fn check_assist_target(\n+        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        before: &str,\n+        target: &str,\n+    ) {\n+        check_assist_target_nth_action(assist, before, target, 0)\n+    }\n+\n+    pub(crate) fn check_assist_range_target(\n+        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        before: &str,\n+        target: &str,\n+    ) {\n+        check_assist_range_target_nth_action(assist, before, target, 0)\n+    }\n+\n+    pub(crate) fn check_assist_nth_action(\n+        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        before: &str,\n+        after: &str,\n+        index: usize,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n         let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n-        let action = match assist {\n+        let labels_actions = match assist {\n             Assist::Unresolved(_) => unreachable!(),\n-            Assist::Resolved(_, it) => it,\n+            Assist::Resolved(labels_actions) => labels_actions,\n         };\n \n+        let (_, action) = labels_actions.get(index).expect(\"expect assist action at index\");\n         let actual = action.edit.apply(&before);\n         let actual_cursor_pos = match action.cursor_position {\n             None => action\n@@ -142,63 +179,69 @@ mod helpers {\n         assert_eq_text!(after, &actual);\n     }\n \n-    pub(crate) fn check_assist_range(\n+    pub(crate) fn check_assist_range_nth_action(\n         assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n         before: &str,\n         after: &str,\n+        index: usize,\n     ) {\n         let (range, before) = extract_range(before);\n         let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n-        let action = match assist {\n+        let labels_actions = match assist {\n             Assist::Unresolved(_) => unreachable!(),\n-            Assist::Resolved(_, it) => it,\n+            Assist::Resolved(labels_actions) => labels_actions,\n         };\n \n+        let (_, action) = labels_actions.get(index).expect(\"expect assist action at index\");\n         let mut actual = action.edit.apply(&before);\n         if let Some(pos) = action.cursor_position {\n             actual = add_cursor(&actual, pos);\n         }\n         assert_eq_text!(after, &actual);\n     }\n \n-    pub(crate) fn check_assist_target(\n+    pub(crate) fn check_assist_target_nth_action(\n         assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n         before: &str,\n         target: &str,\n+        index: usize,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n         let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n-        let action = match assist {\n+        let labels_actions = match assist {\n             Assist::Unresolved(_) => unreachable!(),\n-            Assist::Resolved(_, it) => it,\n+            Assist::Resolved(labels_actions) => labels_actions,\n         };\n \n+        let (_, action) = labels_actions.get(index).expect(\"expect assist action at index\");\n         let range = action.target.expect(\"expected target on action\");\n         assert_eq_text!(&before[range.start().to_usize()..range.end().to_usize()], target);\n     }\n \n-    pub(crate) fn check_assist_range_target(\n+    pub(crate) fn check_assist_range_target_nth_action(\n         assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n         before: &str,\n         target: &str,\n+        index: usize,\n     ) {\n         let (range, before) = extract_range(before);\n         let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n-        let action = match assist {\n+        let labels_actions = match assist {\n             Assist::Unresolved(_) => unreachable!(),\n-            Assist::Resolved(_, it) => it,\n+            Assist::Resolved(labels_actions) => labels_actions,\n         };\n \n+        let (_, action) = labels_actions.get(index).expect(\"expect assist action at index\");\n         let range = action.target.expect(\"expected target on action\");\n         assert_eq_text!(&before[range.start().to_usize()..range.end().to_usize()], target);\n     }"}, {"sha": "db260c6caf5aa646af15908f7e47ca7cb4a966cd", "filename": "crates/ra_assists/src/remove_dbg.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n };\n use crate::{AssistCtx, Assist};\n \n-pub(crate) fn remove_dbg(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn remove_dbg(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let macro_call = ctx.node_at_offset::<ast::MacroCall>()?;\n \n     if !is_valid_macrocall(macro_call, \"dbg\")? {\n@@ -46,11 +46,13 @@ pub(crate) fn remove_dbg(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         macro_args.text().slice(start..end).to_string()\n     };\n \n-    ctx.build(\"remove dbg!()\", |edit| {\n+    ctx.add_action(\"remove dbg!()\", |edit| {\n         edit.target(macro_call.syntax().range());\n         edit.replace(macro_range, macro_content);\n         edit.set_cursor(cursor_pos);\n-    })\n+    });\n+\n+    ctx.build()\n }\n \n /// Verifies that the given macro_call actually matches the given name"}, {"sha": "87a2c11859bafd21f35c1f79f6a0a6b59a7de95e", "filename": "crates/ra_assists/src/replace_if_let_with_match.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -4,7 +4,7 @@ use hir::db::HirDatabase;\n \n use crate::{AssistCtx, Assist};\n \n-pub(crate) fn replace_if_let_with_match(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn replace_if_let_with_match(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let if_expr: &ast::IfExpr = ctx.node_at_offset()?;\n     let cond = if_expr.condition()?;\n     let pat = cond.pat()?;\n@@ -15,12 +15,14 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx<impl HirDatabase>) -> Opt\n         ast::ElseBranchFlavor::IfExpr(_) => return None,\n     };\n \n-    ctx.build(\"replace with match\", |edit| {\n+    ctx.add_action(\"replace with match\", |edit| {\n         let match_expr = build_match_expr(expr, pat, then_block, else_block);\n         edit.target(if_expr.syntax().range());\n         edit.replace_node_and_indent(if_expr.syntax(), match_expr);\n         edit.set_cursor(if_expr.syntax().range().start())\n-    })\n+    });\n+\n+    ctx.build()\n }\n \n fn build_match_expr("}, {"sha": "f043be6369ffac5b95cd8632087232b7880a3ed2", "filename": "crates/ra_assists/src/split_import.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9c0d3ae2735b4b32a44742bac800ca616fdde8/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs?ref=5c9c0d3ae2735b4b32a44742bac800ca616fdde8", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n \n use crate::{AssistCtx, Assist};\n \n-pub(crate) fn split_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn split_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let colon_colon = ctx.leaf_at_offset().find(|leaf| leaf.kind() == COLONCOLON)?;\n     let path = colon_colon.parent().and_then(ast::Path::cast)?;\n     let top_path = generate(Some(path), |it| it.parent_path()).last()?;\n@@ -23,12 +23,14 @@ pub(crate) fn split_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         None => top_path.syntax().range().end(),\n     };\n \n-    ctx.build(\"split import\", |edit| {\n+    ctx.add_action(\"split import\", |edit| {\n         edit.target(colon_colon.range());\n         edit.insert(l_curly, \"{\");\n         edit.insert(r_curly, \"}\");\n         edit.set_cursor(l_curly + TextUnit::of_str(\"{\"));\n-    })\n+    });\n+\n+    ctx.build()\n }\n \n #[cfg(test)]"}]}