{"sha": "89d2061c8f1cc2bcd5e9bb8a97e214f482d5ff2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZDIwNjFjOGYxY2MyYmNkNWU5YmI4YTk3ZTIxNGY0ODJkNWZmMmM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T21:34:36Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:16:34Z"}, "message": "libcollections: convert `BTreeSet` binops to by value", "tree": {"sha": "580df453825bc5fd18624e8de6bf5d94b36f9206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/580df453825bc5fd18624e8de6bf5d94b36f9206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89d2061c8f1cc2bcd5e9bb8a97e214f482d5ff2c", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89d2061c8f1cc2bcd5e9bb8a97e214f482d5ff2c", "html_url": "https://github.com/rust-lang/rust/commit/89d2061c8f1cc2bcd5e9bb8a97e214f482d5ff2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89d2061c8f1cc2bcd5e9bb8a97e214f482d5ff2c/comments", "author": null, "committer": null, "parents": [{"sha": "e00e4611a82641c61dd694ce9aa675b9d8ecf9a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e00e4611a82641c61dd694ce9aa675b9d8ecf9a8", "html_url": "https://github.com/rust-lang/rust/commit/e00e4611a82641c61dd694ce9aa675b9d8ecf9a8"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "d4c05e4b7d39c327281689ec7632b14d15b4d3ea", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/89d2061c8f1cc2bcd5e9bb8a97e214f482d5ff2c/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d2061c8f1cc2bcd5e9bb8a97e214f482d5ff2c/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=89d2061c8f1cc2bcd5e9bb8a97e214f482d5ff2c", "patch": "@@ -409,6 +409,8 @@ impl<T: Ord> Default for BTreeSet<T> {\n }\n \n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T: Ord + Clone> Sub<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n     /// Returns the difference of `self` and `rhs` as a new `BTreeSet<T>`.\n     ///\n@@ -430,6 +432,30 @@ impl<T: Ord + Clone> Sub<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n }\n \n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl<'a, 'b, T: Ord + Clone> Sub<&'b BTreeSet<T>, BTreeSet<T>> for &'a BTreeSet<T> {\n+    /// Returns the difference of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = &a - &b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![1, 2]);\n+    /// ```\n+    fn sub(self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.difference(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T: Ord + Clone> BitXor<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n     /// Returns the symmetric difference of `self` and `rhs` as a new `BTreeSet<T>`.\n     ///\n@@ -451,6 +477,30 @@ impl<T: Ord + Clone> BitXor<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n }\n \n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl<'a, 'b, T: Ord + Clone> BitXor<&'b BTreeSet<T>, BTreeSet<T>> for &'a BTreeSet<T> {\n+    /// Returns the symmetric difference of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![2, 3, 4].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = &a ^ &b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![1, 4]);\n+    /// ```\n+    fn bitxor(self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.symmetric_difference(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T: Ord + Clone> BitAnd<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n     /// Returns the intersection of `self` and `rhs` as a new `BTreeSet<T>`.\n     ///\n@@ -472,6 +522,30 @@ impl<T: Ord + Clone> BitAnd<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n }\n \n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl<'a, 'b, T: Ord + Clone> BitAnd<&'b BTreeSet<T>, BTreeSet<T>> for &'a BTreeSet<T> {\n+    /// Returns the intersection of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![2, 3, 4].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = &a & &b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![2, 3]);\n+    /// ```\n+    fn bitand(self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.intersection(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T: Ord + Clone> BitOr<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n     /// Returns the union of `self` and `rhs` as a new `BTreeSet<T>`.\n     ///\n@@ -492,6 +566,28 @@ impl<T: Ord + Clone> BitOr<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n     }\n }\n \n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>, BTreeSet<T>> for &'a BTreeSet<T> {\n+    /// Returns the union of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = &a | &b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![1, 2, 3, 4, 5]);\n+    /// ```\n+    fn bitor(self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.union(rhs).cloned().collect()\n+    }\n+}\n+\n impl<T: Show> Show for BTreeSet<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));"}]}