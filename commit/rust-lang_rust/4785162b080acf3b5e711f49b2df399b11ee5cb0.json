{"sha": "4785162b080acf3b5e711f49b2df399b11ee5cb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ODUxNjJiMDgwYWNmM2I1ZTcxMWY0OWIyZGYzOTliMTFlZTVjYjA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-16T13:47:58Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-16T15:26:51Z"}, "message": "Track import sources and emit diagnostics", "tree": {"sha": "16be6d4263e49a13c583c4276f112c3c284992fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16be6d4263e49a13c583c4276f112c3c284992fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4785162b080acf3b5e711f49b2df399b11ee5cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4785162b080acf3b5e711f49b2df399b11ee5cb0", "html_url": "https://github.com/rust-lang/rust/commit/4785162b080acf3b5e711f49b2df399b11ee5cb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4785162b080acf3b5e711f49b2df399b11ee5cb0/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac9a2e5d3c43401450b812786ab1551d535420c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac9a2e5d3c43401450b812786ab1551d535420c", "html_url": "https://github.com/rust-lang/rust/commit/4ac9a2e5d3c43401450b812786ab1551d535420c"}], "stats": {"total": 81, "additions": 60, "deletions": 21}, "files": [{"sha": "deb3885f929dc928e41ed890ab5f3ec550b8c9a4", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 49, "deletions": 12, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4785162b080acf3b5e711f49b2df399b11ee5cb0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4785162b080acf3b5e711f49b2df399b11ee5cb0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4785162b080acf3b5e711f49b2df399b11ee5cb0", "patch": "@@ -5,6 +5,7 @@\n \n use base_db::{CrateId, FileId, ProcMacroId};\n use cfg::CfgOptions;\n+use hir_expand::InFile;\n use hir_expand::{\n     ast_id_map::FileAstId,\n     builtin_derive::find_builtin_derive,\n@@ -21,9 +22,7 @@ use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n     item_scope::{ImportType, PerNsGlobImports},\n-    item_tree::{\n-        self, FileItemTreeId, ItemTree, ItemTreeId, MacroCall, Mod, ModItem, ModKind, StructDefKind,\n-    },\n+    item_tree::{self, ItemTree, ItemTreeId, MacroCall, Mod, ModItem, ModKind, StructDefKind},\n     nameres::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n         BuiltinShadowMode, CrateDefMap, ModuleData, ModuleOrigin, ResolveMode,\n@@ -111,6 +110,12 @@ impl PartialResolvedImport {\n     }\n }\n \n+#[derive(Clone, Debug, Eq, PartialEq)]\n+enum ImportSource {\n+    Import(ItemTreeId<item_tree::Import>),\n+    ExternCrate(ItemTreeId<item_tree::ExternCrate>),\n+}\n+\n #[derive(Clone, Debug, Eq, PartialEq)]\n struct Import {\n     pub path: ModPath,\n@@ -120,11 +125,12 @@ struct Import {\n     pub is_prelude: bool,\n     pub is_extern_crate: bool,\n     pub is_macro_use: bool,\n+    source: ImportSource,\n }\n \n impl Import {\n-    fn from_use(tree: &ItemTree, id: FileItemTreeId<item_tree::Import>) -> Self {\n-        let it = &tree[id];\n+    fn from_use(tree: &ItemTree, id: ItemTreeId<item_tree::Import>) -> Self {\n+        let it = &tree[id.value];\n         let visibility = &tree[it.visibility];\n         Self {\n             path: it.path.clone(),\n@@ -134,11 +140,12 @@ impl Import {\n             is_prelude: it.is_prelude,\n             is_extern_crate: false,\n             is_macro_use: false,\n+            source: ImportSource::Import(id),\n         }\n     }\n \n-    fn from_extern_crate(tree: &ItemTree, id: FileItemTreeId<item_tree::ExternCrate>) -> Self {\n-        let it = &tree[id];\n+    fn from_extern_crate(tree: &ItemTree, id: ItemTreeId<item_tree::ExternCrate>) -> Self {\n+        let it = &tree[id.value];\n         let visibility = &tree[it.visibility];\n         Self {\n             path: it.path.clone(),\n@@ -148,6 +155,7 @@ impl Import {\n             is_prelude: false,\n             is_extern_crate: true,\n             is_macro_use: it.is_macro_use,\n+            source: ImportSource::ExternCrate(id),\n         }\n     }\n }\n@@ -245,9 +253,10 @@ impl DefCollector<'_> {\n \n         let unresolved_imports = std::mem::replace(&mut self.unresolved_imports, Vec::new());\n         // show unresolved imports in completion, etc\n-        for directive in unresolved_imports {\n-            self.record_resolved_import(&directive)\n+        for directive in &unresolved_imports {\n+            self.record_resolved_import(directive)\n         }\n+        self.unresolved_imports = unresolved_imports;\n \n         // Record proc-macros\n         self.collect_proc_macro();\n@@ -778,7 +787,29 @@ impl DefCollector<'_> {\n         .collect(item_tree.top_level_items());\n     }\n \n-    fn finish(self) -> CrateDefMap {\n+    fn finish(mut self) -> CrateDefMap {\n+        for directive in &self.unresolved_imports {\n+            match directive.import.source {\n+                ImportSource::Import(import) => {\n+                    let item_tree = self.db.item_tree(import.file_id);\n+                    let import_data = &item_tree[import.value];\n+                    self.def_map.diagnostics.push(DefDiagnostic::unresolved_import(\n+                        directive.module_id,\n+                        InFile::new(import.file_id, import_data.ast_id),\n+                        import_data.index,\n+                    ));\n+                }\n+                ImportSource::ExternCrate(krate) => {\n+                    let item_tree = self.db.item_tree(krate.file_id);\n+                    let extern_crate = &item_tree[krate.value];\n+                    self.def_map.diagnostics.push(DefDiagnostic::unresolved_extern_crate(\n+                        directive.module_id,\n+                        InFile::new(krate.file_id, extern_crate.ast_id),\n+                    ));\n+                }\n+            }\n+        }\n+\n         self.def_map\n     }\n }\n@@ -834,14 +865,20 @@ impl ModCollector<'_, '_> {\n                     ModItem::Import(import_id) => {\n                         self.def_collector.unresolved_imports.push(ImportDirective {\n                             module_id: self.module_id,\n-                            import: Import::from_use(&self.item_tree, import_id),\n+                            import: Import::from_use(\n+                                &self.item_tree,\n+                                InFile::new(self.file_id, import_id),\n+                            ),\n                             status: PartialResolvedImport::Unresolved,\n                         })\n                     }\n                     ModItem::ExternCrate(import_id) => {\n                         self.def_collector.unresolved_imports.push(ImportDirective {\n                             module_id: self.module_id,\n-                            import: Import::from_extern_crate(&self.item_tree, import_id),\n+                            import: Import::from_extern_crate(\n+                                &self.item_tree,\n+                                InFile::new(self.file_id, import_id),\n+                            ),\n                             status: PartialResolvedImport::Unresolved,\n                         })\n                     }"}, {"sha": "3b9f79544f6d6aa32879990b201c610111cfe1d8", "filename": "crates/hir_def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4785162b080acf3b5e711f49b2df399b11ee5cb0/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4785162b080acf3b5e711f49b2df399b11ee5cb0/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=4785162b080acf3b5e711f49b2df399b11ee5cb0", "patch": "@@ -688,19 +688,21 @@ fn unresolved_module_diagnostics() {\n \n     expect![[r#\"\n         [\n-            UnresolvedModule {\n-                module: Idx::<ModuleData>(0),\n-                declaration: InFile {\n-                    file_id: HirFileId(\n-                        FileId(\n+            DefDiagnostic {\n+                in_module: Idx::<ModuleData>(0),\n+                kind: UnresolvedModule {\n+                    declaration: InFile {\n+                        file_id: HirFileId(\n                             FileId(\n-                                0,\n+                                FileId(\n+                                    0,\n+                                ),\n                             ),\n                         ),\n-                    ),\n-                    value: FileAstId::<syntax::ast::generated::nodes::Module>(1),\n+                        value: FileAstId::<syntax::ast::generated::nodes::Module>(1),\n+                    },\n+                    candidate: \"bar.rs\",\n                 },\n-                candidate: \"bar.rs\",\n             },\n         ]\n     \"#]]"}]}