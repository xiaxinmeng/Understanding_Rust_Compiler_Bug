{"sha": "5947c1f8b52deb4fcfd97970ba6eb473f092cb94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NDdjMWY4YjUyZGViNGZjZmQ5Nzk3MGJhNmViNDczZjA5MmNiOTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-06T13:09:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-06T13:09:56Z"}, "message": "Merge #3487\n\n3487: Rerail split_import API onto AST r=matklad a=matklad\n\nThe code is more verbose and less efficient now, but should be\nreusable in add_import context as well\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "18d0c7a15da29214a6387f0880135fdf7f738df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d0c7a15da29214a6387f0880135fdf7f738df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5947c1f8b52deb4fcfd97970ba6eb473f092cb94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeYkukCRBK7hj4Ov3rIwAAdHIIABbMNo7RR8Gt+g8CDTQfEUXA\nGbawY8/zrHSorD5DEuZOvEgDl531j+cc5usB0uFwU0xIXyeXq7ZupHQVTLDirVTX\nFSVp5DznyVNHEdaUiogYdcLrcZTO0R8ttfAskGOYN526DrTAnztkYSyOwSY+bje1\n0ZSp7ZBQYUGxiF+ZW/d2s1mCKlb77HSsLaP+XnqIueqtyRdsiEXdK9FTo1+W9LmU\n7pmyKL5vVumuFi75t4HwEDGnaKEVoCnr0NKxVJxEMfC42y5Ly0j8nvf9Awgm+ifP\nuQ+cg+VqkidKMmOvBhLAnK8NSZtMpOkgu09VVijlQql3CYPjUqj3xrvhrAYkRDo=\n=F/6D\n-----END PGP SIGNATURE-----\n", "payload": "tree 18d0c7a15da29214a6387f0880135fdf7f738df1\nparent d75577fcee79aac06bdddb01fde431f26432c36c\nparent ea0c124219da33462b9d0be93f7abe0478cc7af2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583500196 +0000\ncommitter GitHub <noreply@github.com> 1583500196 +0000\n\nMerge #3487\n\n3487: Rerail split_import API onto AST r=matklad a=matklad\n\nThe code is more verbose and less efficient now, but should be\nreusable in add_import context as well\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5947c1f8b52deb4fcfd97970ba6eb473f092cb94", "html_url": "https://github.com/rust-lang/rust/commit/5947c1f8b52deb4fcfd97970ba6eb473f092cb94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5947c1f8b52deb4fcfd97970ba6eb473f092cb94/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d75577fcee79aac06bdddb01fde431f26432c36c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d75577fcee79aac06bdddb01fde431f26432c36c", "html_url": "https://github.com/rust-lang/rust/commit/d75577fcee79aac06bdddb01fde431f26432c36c"}, {"sha": "ea0c124219da33462b9d0be93f7abe0478cc7af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0c124219da33462b9d0be93f7abe0478cc7af2", "html_url": "https://github.com/rust-lang/rust/commit/ea0c124219da33462b9d0be93f7abe0478cc7af2"}], "stats": {"total": 91, "additions": 72, "deletions": 19}, "files": [{"sha": "292c39f59b135c24689b9469b3b5edb088e14717", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5947c1f8b52deb4fcfd97970ba6eb473f092cb94/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5947c1f8b52deb4fcfd97970ba6eb473f092cb94/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=5947c1f8b52deb4fcfd97970ba6eb473f092cb94", "patch": "@@ -1,6 +1,9 @@\n-use std::iter::successors;\n+use std::iter::{once, successors};\n \n-use ra_syntax::{ast, AstNode, TextUnit, T};\n+use ra_syntax::{\n+    ast::{self, make},\n+    AstNode, T,\n+};\n \n use crate::{Assist, AssistCtx, AssistId};\n \n@@ -17,39 +20,50 @@ use crate::{Assist, AssistCtx, AssistId};\n // ```\n pub(crate) fn split_import(ctx: AssistCtx) -> Option<Assist> {\n     let colon_colon = ctx.find_token_at_offset(T![::])?;\n-    let path = ast::Path::cast(colon_colon.parent())?;\n-    let top_path = successors(Some(path), |it| it.parent_path()).last()?;\n+    let path = ast::Path::cast(colon_colon.parent())?.qualifier()?;\n+    let top_path = successors(Some(path.clone()), |it| it.parent_path()).last()?;\n \n-    let use_tree = top_path.syntax().ancestors().find_map(ast::UseTree::cast);\n-    if use_tree.is_none() {\n-        return None;\n-    }\n+    let use_tree = top_path.syntax().ancestors().find_map(ast::UseTree::cast)?;\n \n-    let l_curly = colon_colon.text_range().end();\n-    let r_curly = match top_path.syntax().parent().and_then(ast::UseTree::cast) {\n-        Some(tree) => tree.syntax().text_range().end(),\n-        None => top_path.syntax().text_range().end(),\n-    };\n+    let new_tree = split_use_tree_prefix(&use_tree, &path)?;\n+    let cursor = ctx.frange.range.start();\n \n     ctx.add_assist(AssistId(\"split_import\"), \"Split import\", |edit| {\n         edit.target(colon_colon.text_range());\n-        edit.insert(l_curly, \"{\");\n-        edit.insert(r_curly, \"}\");\n-        edit.set_cursor(l_curly + TextUnit::of_str(\"{\"));\n+        edit.replace_ast(use_tree, new_tree);\n+        edit.set_cursor(cursor);\n     })\n }\n \n+fn split_use_tree_prefix(use_tree: &ast::UseTree, prefix: &ast::Path) -> Option<ast::UseTree> {\n+    let suffix = split_path_prefix(&prefix)?;\n+    let use_tree = make::use_tree(suffix.clone(), use_tree.use_tree_list(), use_tree.alias());\n+    let nested = make::use_tree_list(once(use_tree));\n+    let res = make::use_tree(prefix.clone(), Some(nested), None);\n+    Some(res)\n+}\n+\n+fn split_path_prefix(prefix: &ast::Path) -> Option<ast::Path> {\n+    let parent = prefix.parent_path()?;\n+    let mut res = make::path_unqualified(parent.segment()?);\n+    for p in successors(parent.parent_path(), |it| it.parent_path()) {\n+        res = make::path_qualified(res, p.segment()?);\n+    }\n+    Some(res)\n+}\n+\n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::helpers::{check_assist, check_assist_target};\n \n+    use super::*;\n+\n     #[test]\n     fn test_split_import() {\n         check_assist(\n             split_import,\n             \"use crate::<|>db::RootDatabase;\",\n-            \"use crate::{<|>db::RootDatabase};\",\n+            \"use crate::<|>{db::RootDatabase};\",\n         )\n     }\n \n@@ -58,7 +72,7 @@ mod tests {\n         check_assist(\n             split_import,\n             \"use crate:<|>:db::{RootDatabase, FileSymbol}\",\n-            \"use crate::{<|>db::{RootDatabase, FileSymbol}}\",\n+            \"use crate:<|>:{db::{RootDatabase, FileSymbol}}\",\n         )\n     }\n "}, {"sha": "e4cdccdb439c74ee19707a2221bcb19d660e14ae", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5947c1f8b52deb4fcfd97970ba6eb473f092cb94/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5947c1f8b52deb4fcfd97970ba6eb473f092cb94/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=5947c1f8b52deb4fcfd97970ba6eb473f092cb94", "patch": "@@ -259,6 +259,24 @@ impl ast::UseItem {\n     }\n }\n \n+impl ast::UseTree {\n+    #[must_use]\n+    pub fn with_path(&self, path: ast::Path) -> ast::UseTree {\n+        if let Some(old) = self.path() {\n+            return replace_descendants(self, iter::once((old, path)));\n+        }\n+        self.clone()\n+    }\n+\n+    #[must_use]\n+    pub fn with_use_tree_list(&self, use_tree_list: ast::UseTreeList) -> ast::UseTree {\n+        if let Some(old) = self.use_tree_list() {\n+            return replace_descendants(self, iter::once((old, use_tree_list)));\n+        }\n+        self.clone()\n+    }\n+}\n+\n #[must_use]\n pub fn strip_attrs_and_docs<N: ast::AttrsOwner>(node: &N) -> N {\n     N::cast(strip_attrs_and_docs_inner(node.syntax().clone())).unwrap()"}, {"sha": "22c54f363e4d0161026af9516a3e5c9d27ef3e69", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5947c1f8b52deb4fcfd97970ba6eb473f092cb94/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5947c1f8b52deb4fcfd97970ba6eb473f092cb94/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=5947c1f8b52deb4fcfd97970ba6eb473f092cb94", "patch": "@@ -25,6 +25,27 @@ fn path_from_text(text: &str) -> ast::Path {\n     ast_from_text(text)\n }\n \n+pub fn use_tree(\n+    path: ast::Path,\n+    use_tree_list: Option<ast::UseTreeList>,\n+    alias: Option<ast::Alias>,\n+) -> ast::UseTree {\n+    let mut buf = \"use \".to_string();\n+    buf += &path.syntax().to_string();\n+    if let Some(use_tree_list) = use_tree_list {\n+        buf += &format!(\"::{}\", use_tree_list.syntax());\n+    }\n+    if let Some(alias) = alias {\n+        buf += &format!(\" {}\", alias.syntax());\n+    }\n+    ast_from_text(&buf)\n+}\n+\n+pub fn use_tree_list(use_trees: impl IntoIterator<Item = ast::UseTree>) -> ast::UseTreeList {\n+    let use_trees = use_trees.into_iter().map(|it| it.syntax().clone()).join(\", \");\n+    ast_from_text(&format!(\"use {{{}}};\", use_trees))\n+}\n+\n pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordField {\n     return match expr {\n         Some(expr) => from_text(&format!(\"{}: {}\", name.syntax(), expr.syntax())),"}]}