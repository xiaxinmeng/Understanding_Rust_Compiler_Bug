{"sha": "a422d480a188a28c6b5e7862fbf07817eb2c7447", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MjJkNDgwYTE4OGEyOGM2YjVlNzg2MmZiZjA3ODE3ZWIyYzc0NDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-18T13:38:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T09:15:38Z"}, "message": "implement vfs events handling", "tree": {"sha": "d2a1945e49d1728f210c29ae8e88bffef19d22b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a1945e49d1728f210c29ae8e88bffef19d22b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a422d480a188a28c6b5e7862fbf07817eb2c7447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a422d480a188a28c6b5e7862fbf07817eb2c7447", "html_url": "https://github.com/rust-lang/rust/commit/a422d480a188a28c6b5e7862fbf07817eb2c7447", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a422d480a188a28c6b5e7862fbf07817eb2c7447/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7", "html_url": "https://github.com/rust-lang/rust/commit/e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7"}], "stats": {"total": 392, "additions": 349, "deletions": 43}, "files": [{"sha": "aac4d91b36a54d80bc2b717afd5955b69cbc94ab", "filename": "Cargo.lock", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a422d480a188a28c6b5e7862fbf07817eb2c7447/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a422d480a188a28c6b5e7862fbf07817eb2c7447/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a422d480a188a28c6b5e7862fbf07817eb2c7447", "patch": "@@ -752,6 +752,7 @@ dependencies = [\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_worker 0.1.0\",\n  \"walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -778,6 +779,33 @@ dependencies = [\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rand\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_chacha 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_pcg 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_xorshift 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_chacha\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rand_core\"\n version = \"0.2.2\"\n@@ -791,6 +819,39 @@ name = \"rand_core\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"rand_hc\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_isaac\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_pcg\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_xorshift\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rayon\"\n version = \"1.0.3\"\n@@ -1068,6 +1129,19 @@ dependencies = [\n  \"remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"tempfile\"\n+version = \"3.0.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"tera\"\n version = \"0.11.20\"\n@@ -1431,8 +1505,14 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quote 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"53fa22a1994bd0f9372d7a816207d8a2677ad0325b073f5c5332760f0fb62b5c\"\n \"checksum rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8356f47b32624fef5b3301c1be97e5944ecdd595409cc5da11d05f211db6cfbd\"\n \"checksum rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e464cd887e869cddcae8792a4ee31d23c7edd516700695608f5b98c67ee0131c\"\n+\"checksum rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae9d223d52ae411a33cf7e54ec6034ec165df296ccd23533d671a28252b6f66a\"\n+\"checksum rand_chacha 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"771b009e3a508cb67e8823dda454aaa5368c7bc1c16829fb77d3e980440dd34a\"\n \"checksum rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1961a422c4d189dfb50ffa9320bf1f2a9bd54ecb92792fb9477f99a1045f3372\"\n \"checksum rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0905b6b7079ec73b314d4c748701f6931eb79fd97c668caa3f1899b22b32c6db\"\n+\"checksum rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n+\"checksum rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\n+\"checksum rand_pcg 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"086bd09a33c7044e56bb44d5bdde5a60e7f119a9e95b0775f545de759a32fe05\"\n+\"checksum rand_xorshift 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"effa3fcaa47e18db002bdde6060944b6d2f9cfd8db471c30e873448ad9187be3\"\n \"checksum rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"373814f27745b2686b350dd261bfd24576a6fb0e2c5919b3a2b6005f820b0473\"\n \"checksum rayon-core 1.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b055d1e92aba6877574d8fe604a63c8b5df60f60e5982bf7ccbb1338ea527356\"\n \"checksum redox_syscall 0.1.44 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a84bcd297b87a545980a2d25a0beb72a1f490c31f0a9fde52fca35bfbb1ceb70\"\n@@ -1467,6 +1547,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum syn 0.15.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9545a6a093a3f0bd59adb472700acc08cad3776f860f16a897dfce8c88721cbc\"\n \"checksum synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73687139bf99285483c96ac0add482c3776528beac1d97d444f6e91f203a2015\"\n \"checksum tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8\"\n+\"checksum tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e91405c14320e5c79b3d148e1c86f40749a36e490642202a31689cb1a3452b2\"\n \"checksum tera 0.11.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b505279e19d8f7d24b1a9dc58327c9c36174b1a2c7ebdeac70792d017cb64f3\"\n \"checksum teraron 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d89ad4617d1dec55331067fadaa041e813479e1779616f3d3ce9308bf46184e\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\""}, {"sha": "c14d287cac2a5b85f1c1033face68479813b594d", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=a422d480a188a28c6b5e7862fbf07817eb2c7447", "patch": "@@ -174,11 +174,11 @@ impl Server {\n impl Drop for Server {\n     fn drop(&mut self) {\n         self.send_request::<Shutdown>(666, ());\n-        let receiver = self.worker.take().unwrap().stop();\n+        let receiver = self.worker.take().unwrap().shutdown();\n         while let Some(msg) = recv_timeout(&receiver) {\n             drop(msg);\n         }\n-        self.watcher.take().unwrap().stop().unwrap();\n+        self.watcher.take().unwrap().shutdown().unwrap();\n     }\n }\n "}, {"sha": "ccea8a866fbb3d463f2b694fe217bb3890ecca73", "filename": "crates/ra_vfs/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_vfs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_vfs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2FCargo.toml?ref=a422d480a188a28c6b5e7862fbf07817eb2c7447", "patch": "@@ -12,3 +12,6 @@ crossbeam-channel = \"0.2.4\"\n log = \"0.4.6\"\n \n thread_worker = { path = \"../thread_worker\" }\n+\n+[dev-dependencies]\n+tempfile = \"3\""}, {"sha": "6b42ae26d22d432d188aa459de45c8ddfc9ac42b", "filename": "crates/ra_vfs/src/arena.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_vfs%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_vfs%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Farena.rs?ref=a422d480a188a28c6b5e7862fbf07817eb2c7447", "patch": "@@ -1,5 +1,4 @@\n use std::{\n-    hash::{Hash, Hasher},\n     marker::PhantomData,\n     ops::{Index, IndexMut},\n };\n@@ -21,6 +20,12 @@ impl<ID: ArenaId, T> Arena<ID, T> {\n         self.data.push(value);\n         ID::from_u32(id)\n     }\n+    pub fn iter<'a>(&'a self) -> impl Iterator<Item = (ID, &'a T)> {\n+        self.data\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, value)| (ID::from_u32(idx as u32), value))\n+    }\n }\n \n impl<ID: ArenaId, T> Default for Arena<ID, T> {"}, {"sha": "178c9beff4318cf1c7297900286abf19f7d076e3", "filename": "crates/ra_vfs/src/io.rs", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_vfs%2Fsrc%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_vfs%2Fsrc%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio.rs?ref=a422d480a188a28c6b5e7862fbf07817eb2c7447", "patch": "@@ -1,35 +1,26 @@\n use std::{\n     fs,\n     path::{Path, PathBuf},\n-    thread::JoinHandle,\n };\n \n use walkdir::{DirEntry, WalkDir};\n-use crossbeam_channel::{Sender, Receiver};\n use thread_worker::{WorkerHandle};\n+use relative_path::RelativePathBuf;\n \n use crate::VfsRoot;\n \n-pub(crate) enum Task {\n-    ScanRoot {\n-        root: VfsRoot,\n-        path: PathBuf,\n-        filter: Box<FnMut(&DirEntry) -> bool + Send>,\n-    },\n-}\n-\n-#[derive(Debug)]\n-pub(crate) struct FileEvent {\n+pub(crate) struct Task {\n+    pub(crate) root: VfsRoot,\n     pub(crate) path: PathBuf,\n-    pub(crate) kind: FileEventKind,\n+    pub(crate) filter: Box<Fn(&DirEntry) -> bool + Send>,\n }\n \n-#[derive(Debug)]\n-pub(crate) enum FileEventKind {\n-    Add(String),\n+pub struct TaskResult {\n+    pub(crate) root: VfsRoot,\n+    pub(crate) files: Vec<(RelativePathBuf, String)>,\n }\n \n-pub(crate) type Worker = thread_worker::Worker<Task, (PathBuf, Vec<FileEvent>)>;\n+pub(crate) type Worker = thread_worker::Worker<Task, TaskResult>;\n \n pub(crate) fn start() -> (Worker, WorkerHandle) {\n     thread_worker::spawn(\"vfs\", 128, |input_receiver, output_sender| {\n@@ -39,17 +30,17 @@ pub(crate) fn start() -> (Worker, WorkerHandle) {\n     })\n }\n \n-fn handle_task(task: Task) -> (PathBuf, Vec<FileEvent>) {\n-    let Task::ScanRoot { path, .. } = task;\n+fn handle_task(task: Task) -> TaskResult {\n+    let Task { root, path, filter } = task;\n     log::debug!(\"loading {} ...\", path.as_path().display());\n-    let events = load_root(path.as_path());\n+    let files = load_root(path.as_path(), &*filter);\n     log::debug!(\"... loaded {}\", path.as_path().display());\n-    (path, events)\n+    TaskResult { root, files }\n }\n \n-fn load_root(path: &Path) -> Vec<FileEvent> {\n+fn load_root(root: &Path, filter: &dyn Fn(&DirEntry) -> bool) -> Vec<(RelativePathBuf, String)> {\n     let mut res = Vec::new();\n-    for entry in WalkDir::new(path) {\n+    for entry in WalkDir::new(root).into_iter().filter_entry(filter) {\n         let entry = match entry {\n             Ok(entry) => entry,\n             Err(e) => {\n@@ -71,10 +62,8 @@ fn load_root(path: &Path) -> Vec<FileEvent> {\n                 continue;\n             }\n         };\n-        res.push(FileEvent {\n-            path: path.to_owned(),\n-            kind: FileEventKind::Add(text),\n-        })\n+        let path = RelativePathBuf::from_path(path.strip_prefix(root).unwrap()).unwrap();\n+        res.push((path.to_owned(), text))\n     }\n     res\n }"}, {"sha": "792f722a7f9d4c002344b23e3394ef6f3de7baa4", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 140, "deletions": 13, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=a422d480a188a28c6b5e7862fbf07817eb2c7447", "patch": "@@ -15,14 +15,19 @@ mod arena;\n mod io;\n \n use std::{\n+    mem,\n     thread,\n     cmp::Reverse,\n     path::{Path, PathBuf},\n     ffi::OsStr,\n     sync::Arc,\n+    fs,\n };\n \n+use rustc_hash::{FxHashMap, FxHashSet};\n use relative_path::RelativePathBuf;\n+use crossbeam_channel::Receiver;\n+use walkdir::DirEntry;\n use thread_worker::{WorkerHandle};\n \n use crate::{\n@@ -40,15 +45,25 @@ impl RootFilter {\n     fn new(root: PathBuf) -> RootFilter {\n         RootFilter {\n             root,\n-            file_filter: rs_extension_filter,\n+            file_filter: has_rs_extension,\n         }\n     }\n-    fn can_contain(&self, path: &Path) -> bool {\n-        (self.file_filter)(path) && path.starts_with(&self.root)\n+    /// Check if this root can contain `path`. NB: even if this returns\n+    /// true, the `path` might actually be conained in some nested root.\n+    fn can_contain(&self, path: &Path) -> Option<RelativePathBuf> {\n+        if !(self.file_filter)(path) {\n+            return None;\n+        }\n+        if !(path.starts_with(&self.root)) {\n+            return None;\n+        }\n+        let path = path.strip_prefix(&self.root).unwrap();\n+        let path = RelativePathBuf::from_path(path).unwrap();\n+        Some(path)\n     }\n }\n \n-fn rs_extension_filter(p: &Path) -> bool {\n+fn has_rs_extension(p: &Path) -> bool {\n     p.extension() == Some(OsStr::new(\"rs\"))\n }\n \n@@ -82,10 +97,11 @@ struct VfsFileData {\n     text: Arc<String>,\n }\n \n-struct Vfs {\n+pub struct Vfs {\n     roots: Arena<VfsRoot, RootFilter>,\n     files: Arena<VfsFile, VfsFileData>,\n-    // pending_changes: Vec<PendingChange>,\n+    root2files: FxHashMap<VfsRoot, FxHashSet<VfsFile>>,\n+    pending_changes: Vec<VfsChange>,\n     worker: io::Worker,\n     worker_handle: WorkerHandle,\n }\n@@ -97,33 +113,144 @@ impl Vfs {\n         let mut res = Vfs {\n             roots: Arena::default(),\n             files: Arena::default(),\n+            root2files: FxHashMap::default(),\n             worker,\n             worker_handle,\n+            pending_changes: Vec::new(),\n         };\n \n         // A hack to make nesting work.\n         roots.sort_by_key(|it| Reverse(it.as_os_str().len()));\n-\n-        for path in roots {\n-            res.roots.alloc(RootFilter::new(path));\n+        for (i, path) in roots.iter().enumerate() {\n+            let root = res.roots.alloc(RootFilter::new(path.clone()));\n+            let nested = roots[..i]\n+                .iter()\n+                .filter(|it| it.starts_with(path))\n+                .map(|it| it.clone())\n+                .collect::<Vec<_>>();\n+            let filter = move |entry: &DirEntry| {\n+                if entry.file_type().is_file() {\n+                    has_rs_extension(entry.path())\n+                } else {\n+                    nested.iter().all(|it| it != entry.path())\n+                }\n+            };\n+            let task = io::Task {\n+                root,\n+                path: path.clone(),\n+                filter: Box::new(filter),\n+            };\n+            res.worker.inp.send(task);\n         }\n         res\n     }\n \n-    pub fn add_file_overlay(&mut self, path: &Path, content: String) {}\n+    pub fn task_receiver(&self) -> &Receiver<io::TaskResult> {\n+        &self.worker.out\n+    }\n+\n+    pub fn handle_task(&mut self, task: io::TaskResult) {\n+        let mut files = Vec::new();\n+        for (path, text) in task.files {\n+            let text = Arc::new(text);\n+            let file = self.add_file(task.root, path.clone(), Arc::clone(&text));\n+            files.push((file, path, text));\n+        }\n+        let change = VfsChange::AddRoot {\n+            root: task.root,\n+            files,\n+        };\n+        self.pending_changes.push(change);\n+    }\n \n-    pub fn change_file_overlay(&mut self, path: &Path, new_content: String) {}\n+    pub fn add_file_overlay(&mut self, path: &Path, text: String) {\n+        if let Some((root, path, file)) = self.find_root(path) {\n+            let text = Arc::new(text);\n+            let change = if let Some(file) = file {\n+                self.change_file(file, Arc::clone(&text));\n+                VfsChange::ChangeFile { file, text }\n+            } else {\n+                let file = self.add_file(root, path.clone(), Arc::clone(&text));\n+                VfsChange::AddFile {\n+                    file,\n+                    text,\n+                    root,\n+                    path,\n+                }\n+            };\n+            self.pending_changes.push(change);\n+        }\n+    }\n \n-    pub fn remove_file_overlay(&mut self, path: &Path) {}\n+    pub fn change_file_overlay(&mut self, path: &Path, new_text: String) {\n+        if let Some((_root, _path, file)) = self.find_root(path) {\n+            let file = file.expect(\"can't change a file which wasn't added\");\n+            let text = Arc::new(new_text);\n+            self.change_file(file, Arc::clone(&text));\n+            let change = VfsChange::ChangeFile { file, text };\n+            self.pending_changes.push(change);\n+        }\n+    }\n+\n+    pub fn remove_file_overlay(&mut self, path: &Path) {\n+        if let Some((root, path, file)) = self.find_root(path) {\n+            let file = file.expect(\"can't remove a file which wasn't added\");\n+            let full_path = path.to_path(&self.roots[root].root);\n+            let change = if let Ok(text) = fs::read_to_string(&full_path) {\n+                let text = Arc::new(text);\n+                self.change_file(file, Arc::clone(&text));\n+                VfsChange::ChangeFile { file, text }\n+            } else {\n+                self.remove_file(file);\n+                VfsChange::RemoveFile { file }\n+            };\n+            self.pending_changes.push(change);\n+        }\n+    }\n \n     pub fn commit_changes(&mut self) -> Vec<VfsChange> {\n-        unimplemented!()\n+        mem::replace(&mut self.pending_changes, Vec::new())\n     }\n \n     pub fn shutdown(self) -> thread::Result<()> {\n         let _ = self.worker.shutdown();\n         self.worker_handle.shutdown()\n     }\n+\n+    fn add_file(&mut self, root: VfsRoot, path: RelativePathBuf, text: Arc<String>) -> VfsFile {\n+        let data = VfsFileData { root, path, text };\n+        let file = self.files.alloc(data);\n+        self.root2files\n+            .entry(root)\n+            .or_insert_with(FxHashSet::default)\n+            .insert(file);\n+        file\n+    }\n+\n+    fn change_file(&mut self, file: VfsFile, new_text: Arc<String>) {\n+        self.files[file].text = new_text;\n+    }\n+\n+    fn remove_file(&mut self, file: VfsFile) {\n+        //FIXME: use arena with removal\n+        self.files[file].text = Default::default();\n+        self.files[file].path = Default::default();\n+        let root = self.files[file].root;\n+        let removed = self.root2files.get_mut(&root).unwrap().remove(&file);\n+        assert!(removed);\n+    }\n+\n+    fn find_root(&self, path: &Path) -> Option<(VfsRoot, RelativePathBuf, Option<VfsFile>)> {\n+        let (root, path) = self\n+            .roots\n+            .iter()\n+            .find_map(|(root, data)| data.can_contain(path).map(|it| (root, it)))?;\n+        let file = self.root2files[&root]\n+            .iter()\n+            .map(|&it| it)\n+            .find(|&file| self.files[file].path == path);\n+        Some((root, path, file))\n+    }\n }\n \n #[derive(Debug, Clone)]"}, {"sha": "4f44215c8b1be82be34d0151112f9811e6d88103", "filename": "crates/ra_vfs/tests/vfs.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422d480a188a28c6b5e7862fbf07817eb2c7447/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Ftests%2Fvfs.rs?ref=a422d480a188a28c6b5e7862fbf07817eb2c7447", "patch": "@@ -0,0 +1,101 @@\n+use std::{\n+    fs,\n+    collections::HashSet,\n+};\n+\n+use tempfile::tempdir;\n+\n+use ra_vfs::{Vfs, VfsChange};\n+\n+#[test]\n+fn test_vfs_works() -> std::io::Result<()> {\n+    let files = [\n+        (\"a/foo.rs\", \"hello\"),\n+        (\"a/bar.rs\", \"world\"),\n+        (\"a/b/baz.rs\", \"nested hello\"),\n+    ];\n+\n+    let dir = tempdir()?;\n+    for (path, text) in files.iter() {\n+        let file_path = dir.path().join(path);\n+        fs::create_dir_all(file_path.parent().unwrap())?;\n+        fs::write(file_path, text)?\n+    }\n+\n+    let a_root = dir.path().join(\"a\");\n+    let b_root = dir.path().join(\"a/b\");\n+\n+    let mut vfs = Vfs::new(vec![a_root, b_root]);\n+    for _ in 0..2 {\n+        let task = vfs.task_receiver().recv().unwrap();\n+        vfs.handle_task(task);\n+    }\n+    {\n+        let files = vfs\n+            .commit_changes()\n+            .into_iter()\n+            .flat_map(|change| {\n+                let files = match change {\n+                    VfsChange::AddRoot { files, .. } => files,\n+                    _ => panic!(\"unexpected change\"),\n+                };\n+                files.into_iter().map(|(_id, path, text)| {\n+                    let text: String = (&*text).clone();\n+                    (format!(\"{}\", path.display()), text)\n+                })\n+            })\n+            .collect::<HashSet<_>>();\n+\n+        let expected_files = [\n+            (\"foo.rs\", \"hello\"),\n+            (\"bar.rs\", \"world\"),\n+            (\"baz.rs\", \"nested hello\"),\n+        ]\n+        .iter()\n+        .map(|(path, text)| (path.to_string(), text.to_string()))\n+        .collect::<HashSet<_>>();\n+\n+        assert_eq!(files, expected_files);\n+    }\n+\n+    vfs.add_file_overlay(&dir.path().join(\"a/b/baz.rs\"), \"quux\".to_string());\n+    let change = vfs.commit_changes().pop().unwrap();\n+    match change {\n+        VfsChange::ChangeFile { text, .. } => assert_eq!(&*text, \"quux\"),\n+        _ => panic!(\"unexpected change\"),\n+    }\n+\n+    vfs.change_file_overlay(&dir.path().join(\"a/b/baz.rs\"), \"m\".to_string());\n+    let change = vfs.commit_changes().pop().unwrap();\n+    match change {\n+        VfsChange::ChangeFile { text, .. } => assert_eq!(&*text, \"m\"),\n+        _ => panic!(\"unexpected change\"),\n+    }\n+\n+    vfs.remove_file_overlay(&dir.path().join(\"a/b/baz.rs\"));\n+    let change = vfs.commit_changes().pop().unwrap();\n+    match change {\n+        VfsChange::ChangeFile { text, .. } => assert_eq!(&*text, \"nested hello\"),\n+        _ => panic!(\"unexpected change\"),\n+    }\n+\n+    vfs.add_file_overlay(&dir.path().join(\"a/b/spam.rs\"), \"spam\".to_string());\n+    let change = vfs.commit_changes().pop().unwrap();\n+    match change {\n+        VfsChange::AddFile { text, path, .. } => {\n+            assert_eq!(&*text, \"spam\");\n+            assert_eq!(path, \"spam.rs\");\n+        }\n+        _ => panic!(\"unexpected change\"),\n+    }\n+\n+    vfs.remove_file_overlay(&dir.path().join(\"a/b/spam.rs\"));\n+    let change = vfs.commit_changes().pop().unwrap();\n+    match change {\n+        VfsChange::RemoveFile { .. } => (),\n+        _ => panic!(\"unexpected change\"),\n+    }\n+\n+    vfs.shutdown().unwrap();\n+    Ok(())\n+}"}]}