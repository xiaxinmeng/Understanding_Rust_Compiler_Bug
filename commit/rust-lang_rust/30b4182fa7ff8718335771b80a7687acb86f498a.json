{"sha": "30b4182fa7ff8718335771b80a7687acb86f498a", "node_id": "C_kwDOAAsO6NoAKDMwYjQxODJmYTdmZjg3MTgzMzU3NzFiODBhNzY4N2FjYjg2ZjQ5OGE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-19T01:02:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-19T01:02:02Z"}, "message": "Rollup merge of #94984 - ericseppanen:cstr_from_bytes, r=Mark-Simulacrum\n\nadd `CStr` method that accepts any slice containing a nul-terminated string\n\nI haven't created an issue (tracking or otherwise) for this yet; apologies if my approach isn't correct. This is my first code contribution.\n\nThis change adds a member fn that converts a slice into a `CStr`; it is intended to be safer than `from_ptr` (which is unsafe and may read out of bounds), and more useful than `from_bytes_with_nul` (which requires that the caller already know where the nul byte is).\n\nThe reason I find this useful is for situations like this:\n```rust\nlet mut buffer = [0u8; 32];\nunsafe {\n    some_c_function(buffer.as_mut_ptr(), buffer.len());\n}\nlet result = CStr::from_bytes_with_nul(&buffer).unwrap();\n```\n\nThis code above returns an error with `kind = InteriorNul`, because `from_bytes_with_nul` expects that the caller has passed in a slice with the NUL byte at the end of the slice. But if I just got back a nul-terminated string from some FFI function, I probably don't know where the NUL byte is.\n\nI would wish for a `CStr` constructor with the following properties:\n- Accept `&[u8]` as input\n- Scan for the first NUL byte and return the `CStr` that spans the correct sub-slice (see [future note below](https://github.com/rust-lang/rust/pull/94984#issuecomment-1070754281)).\n- Return an error if no NUL byte is found within the input slice\n\nI asked on [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/CStr.20from.20.26.5Bu8.5D.20without.20knowing.20the.20NUL.20location.3F) whether this sounded like a good idea, and got a couple of positive-sounding responses from ``@joshtriplett`` and ``@AzureMarker.``\n\nThis is my first draft, so feedback is welcome.\n\nA few issues that definitely need feedback:\n\n1. Naming. ``@joshtriplett`` called this `from_bytes_with_internal_nul` on Zulip, but after staring at all of the available methods, I believe that this function is probably what end users want (rather than the existing fn `from_bytes_with_nul`). Giving it a simpler name (**`from_bytes`**) implies that this should be their first choice.\n2. Should I add a similar method on `CString` that accepts `Vec<u8>`? I'd assume the answer is probably yes, but I figured I'd try to get early feedback before making this change bigger.\n3. What should the error type look like? I made a unit struct since `CStr::from_bytes` can only fail in one obvious way, but if I need to do this for `CString` as well then that one may want to return `FromVecWithNulError`. And maybe that should dictate the shape of the `CStr` error type also?\n\nAlso, cc ``@poliorcetics`` who wrote #73139 containing similar fns.", "tree": {"sha": "e7324ba6fe7594fb039b2a4cd064ed457f43f57e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7324ba6fe7594fb039b2a4cd064ed457f43f57e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30b4182fa7ff8718335771b80a7687acb86f498a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiNSuLCRBK7hj4Ov3rIwAAeRMIAAP3PP9wXZNST4WXvCFhqbsX\nVZXIUVyEf7hp5GAt90ENhnoOUIVvTMp04GsdfBbOKqE/k9ggAnPuoPptZ92PAfp7\n9uO0Xs+JXx/kVMFeSQ8GqIld+xjJbllovLoCw1EyLkIXP7cjHGWBTgW9RIm5Yhpy\nlPGr7YvuYToniyugHIxapC4u/BvRpcCJqxJqnnW2IG8nxM0NXaQc1a2P9Zr3PiQq\nnf/JJI9bPadjMq0+0mbzyr6PzD7GsNhEQhXmW/ezH/t4SF0Cb6LFnuI+WR6ixMb2\n2trFo4j5QZclN78EtkE5OWVfROlx4zQU1vPsP/Pbg95c2GO/Aaxf/XAQU1OaQAM=\n=OMWp\n-----END PGP SIGNATURE-----\n", "payload": "tree e7324ba6fe7594fb039b2a4cd064ed457f43f57e\nparent 463e516b0c53683fc8f5c3d2b4d1341b2b69e0fe\nparent d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647651722 +0100\ncommitter GitHub <noreply@github.com> 1647651722 +0100\n\nRollup merge of #94984 - ericseppanen:cstr_from_bytes, r=Mark-Simulacrum\n\nadd `CStr` method that accepts any slice containing a nul-terminated string\n\nI haven't created an issue (tracking or otherwise) for this yet; apologies if my approach isn't correct. This is my first code contribution.\n\nThis change adds a member fn that converts a slice into a `CStr`; it is intended to be safer than `from_ptr` (which is unsafe and may read out of bounds), and more useful than `from_bytes_with_nul` (which requires that the caller already know where the nul byte is).\n\nThe reason I find this useful is for situations like this:\n```rust\nlet mut buffer = [0u8; 32];\nunsafe {\n    some_c_function(buffer.as_mut_ptr(), buffer.len());\n}\nlet result = CStr::from_bytes_with_nul(&buffer).unwrap();\n```\n\nThis code above returns an error with `kind = InteriorNul`, because `from_bytes_with_nul` expects that the caller has passed in a slice with the NUL byte at the end of the slice. But if I just got back a nul-terminated string from some FFI function, I probably don't know where the NUL byte is.\n\nI would wish for a `CStr` constructor with the following properties:\n- Accept `&[u8]` as input\n- Scan for the first NUL byte and return the `CStr` that spans the correct sub-slice (see [future note below](https://github.com/rust-lang/rust/pull/94984#issuecomment-1070754281)).\n- Return an error if no NUL byte is found within the input slice\n\nI asked on [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/CStr.20from.20.26.5Bu8.5D.20without.20knowing.20the.20NUL.20location.3F) whether this sounded like a good idea, and got a couple of positive-sounding responses from ``@joshtriplett`` and ``@AzureMarker.``\n\nThis is my first draft, so feedback is welcome.\n\nA few issues that definitely need feedback:\n\n1. Naming. ``@joshtriplett`` called this `from_bytes_with_internal_nul` on Zulip, but after staring at all of the available methods, I believe that this function is probably what end users want (rather than the existing fn `from_bytes_with_nul`). Giving it a simpler name (**`from_bytes`**) implies that this should be their first choice.\n2. Should I add a similar method on `CString` that accepts `Vec<u8>`? I'd assume the answer is probably yes, but I figured I'd try to get early feedback before making this change bigger.\n3. What should the error type look like? I made a unit struct since `CStr::from_bytes` can only fail in one obvious way, but if I need to do this for `CString` as well then that one may want to return `FromVecWithNulError`. And maybe that should dictate the shape of the `CStr` error type also?\n\nAlso, cc ``@poliorcetics`` who wrote #73139 containing similar fns.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30b4182fa7ff8718335771b80a7687acb86f498a", "html_url": "https://github.com/rust-lang/rust/commit/30b4182fa7ff8718335771b80a7687acb86f498a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30b4182fa7ff8718335771b80a7687acb86f498a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463e516b0c53683fc8f5c3d2b4d1341b2b69e0fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/463e516b0c53683fc8f5c3d2b4d1341b2b69e0fe", "html_url": "https://github.com/rust-lang/rust/commit/463e516b0c53683fc8f5c3d2b4d1341b2b69e0fe"}, {"sha": "d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9", "html_url": "https://github.com/rust-lang/rust/commit/d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "a68def1e83dbb42c7435f3360c261013b91ecf5f", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/30b4182fa7ff8718335771b80a7687acb86f498a/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b4182fa7ff8718335771b80a7687acb86f498a/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=30b4182fa7ff8718335771b80a7687acb86f498a", "patch": "@@ -328,6 +328,27 @@ impl FromVecWithNulError {\n     }\n }\n \n+/// An error indicating that no nul byte was present.\n+///\n+/// A slice used to create a [`CStr`] must contain a nul byte somewhere\n+/// within the slice.\n+///\n+/// This error is created by the [`CStr::from_bytes_until_nul`] method.\n+///\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+pub struct FromBytesUntilNulError(());\n+\n+#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+impl Error for FromBytesUntilNulError {}\n+\n+#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+impl fmt::Display for FromBytesUntilNulError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"data provided does not contain a nul\")\n+    }\n+}\n+\n /// An error indicating invalid UTF-8 when converting a [`CString`] into a [`String`].\n ///\n /// `CString` is just a wrapper over a buffer of bytes with a nul terminator;\n@@ -1239,12 +1260,60 @@ impl CStr {\n         }\n     }\n \n+    /// Creates a C string wrapper from a byte slice.\n+    ///\n+    /// This method will create a `CStr` from any byte slice that contains at\n+    /// least one nul byte. The caller does not need to know or specify where\n+    /// the nul byte is located.\n+    ///\n+    /// If the first byte is a nul character, this method will return an\n+    /// empty `CStr`. If multiple nul characters are present, the `CStr` will\n+    /// end at the first one.\n+    ///\n+    /// If the slice only has a single nul byte at the end, this method is\n+    /// equivalent to [`CStr::from_bytes_with_nul`].\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(cstr_from_bytes_until_nul)]\n+    ///\n+    /// use std::ffi::CStr;\n+    ///\n+    /// let mut buffer = [0u8; 16];\n+    /// unsafe {\n+    ///     // Here we might call an unsafe C function that writes a string\n+    ///     // into the buffer.\n+    ///     let buf_ptr = buffer.as_mut_ptr();\n+    ///     buf_ptr.write_bytes(b'A', 8);\n+    /// }\n+    /// // Attempt to extract a C nul-terminated string from the buffer.\n+    /// let c_str = CStr::from_bytes_until_nul(&buffer[..]).unwrap();\n+    /// assert_eq!(c_str.to_str().unwrap(), \"AAAAAAAA\");\n+    /// ```\n+    ///\n+    #[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+    pub fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n+        let nul_pos = memchr::memchr(0, bytes);\n+        match nul_pos {\n+            Some(nul_pos) => {\n+                // SAFETY: We know there is a nul byte at nul_pos, so this slice\n+                // (ending at the nul byte) is a well-formed C string.\n+                let subslice = &bytes[..nul_pos + 1];\n+                Ok(unsafe { CStr::from_bytes_with_nul_unchecked(subslice) })\n+            }\n+            None => Err(FromBytesUntilNulError(())),\n+        }\n+    }\n+\n     /// Creates a C string wrapper from a byte slice.\n     ///\n     /// This function will cast the provided `bytes` to a `CStr`\n     /// wrapper after ensuring that the byte slice is nul-terminated\n     /// and does not contain any interior nul bytes.\n     ///\n+    /// If the nul byte may not be at the end,\n+    /// [`CStr::from_bytes_until_nul`] can be used instead.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "c20da138a18d074d24548335e38a3e6f5e455472", "filename": "library/std/src/ffi/c_str/tests.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/30b4182fa7ff8718335771b80a7687acb86f498a/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b4182fa7ff8718335771b80a7687acb86f498a/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs?ref=30b4182fa7ff8718335771b80a7687acb86f498a", "patch": "@@ -117,6 +117,43 @@ fn from_bytes_with_nul_interior() {\n     assert!(cstr.is_err());\n }\n \n+#[test]\n+fn cstr_from_bytes_until_nul() {\n+    // Test an empty slice. This should fail because it\n+    // does not contain a nul byte.\n+    let b = b\"\";\n+    assert_eq!(CStr::from_bytes_until_nul(&b[..]), Err(FromBytesUntilNulError(())));\n+\n+    // Test a non-empty slice, that does not contain a nul byte.\n+    let b = b\"hello\";\n+    assert_eq!(CStr::from_bytes_until_nul(&b[..]), Err(FromBytesUntilNulError(())));\n+\n+    // Test an empty nul-terminated string\n+    let b = b\"\\0\";\n+    let r = CStr::from_bytes_until_nul(&b[..]).unwrap();\n+    assert_eq!(r.to_bytes(), b\"\");\n+\n+    // Test a slice with the nul byte in the middle\n+    let b = b\"hello\\0world!\";\n+    let r = CStr::from_bytes_until_nul(&b[..]).unwrap();\n+    assert_eq!(r.to_bytes(), b\"hello\");\n+\n+    // Test a slice with the nul byte at the end\n+    let b = b\"hello\\0\";\n+    let r = CStr::from_bytes_until_nul(&b[..]).unwrap();\n+    assert_eq!(r.to_bytes(), b\"hello\");\n+\n+    // Test a slice with two nul bytes at the end\n+    let b = b\"hello\\0\\0\";\n+    let r = CStr::from_bytes_until_nul(&b[..]).unwrap();\n+    assert_eq!(r.to_bytes(), b\"hello\");\n+\n+    // Test a slice containing lots of nul bytes\n+    let b = b\"\\0\\0\\0\\0\";\n+    let r = CStr::from_bytes_until_nul(&b[..]).unwrap();\n+    assert_eq!(r.to_bytes(), b\"\");\n+}\n+\n #[test]\n fn into_boxed() {\n     let orig: &[u8] = b\"Hello, world!\\0\";"}]}