{"sha": "13d53273f81142cbea70e63730f0adc199723153", "node_id": "C_kwDOAAsO6NoAKDEzZDUzMjczZjgxMTQyY2JlYTcwZTYzNzMwZjBhZGMxOTk3MjMxNTM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-08-10T20:13:18Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-08-13T04:37:13Z"}, "message": "Rename `@hastext` to `@hasraw` (same for `matches`)\n\nI think `@hasraw` is slightly clearer than `@hastext` since it is\nactually matching against the raw HTML, not the text nodes.", "tree": {"sha": "988729a8d16ed64cc13a0d309ed11069894ae1ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/988729a8d16ed64cc13a0d309ed11069894ae1ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13d53273f81142cbea70e63730f0adc199723153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13d53273f81142cbea70e63730f0adc199723153", "html_url": "https://github.com/rust-lang/rust/commit/13d53273f81142cbea70e63730f0adc199723153", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13d53273f81142cbea70e63730f0adc199723153/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37eed1d1ff3f433b4d6af02e65f6550d10b568f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/37eed1d1ff3f433b4d6af02e65f6550d10b568f8", "html_url": "https://github.com/rust-lang/rust/commit/37eed1d1ff3f433b4d6af02e65f6550d10b568f8"}], "stats": {"total": 350, "additions": 175, "deletions": 175}, "files": [{"sha": "e0cd089ac5e873f7b79ee8072437db1ab271d8da", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -41,15 +41,15 @@\n   `PATH` is relative to the output directory. It can be given as `-`\n   which repeats the most recently used `PATH`.\n \n-* `@hastext PATH PATTERN` and `@matchestext PATH PATTERN` checks\n+* `@hasraw PATH PATTERN` and `@matchesraw PATH PATTERN` checks\n   for the occurrence of the given pattern `PATTERN` in the specified file.\n   Only one occurrence of the pattern is enough.\n \n-  For `@hastext`, `PATTERN` is a whitespace-normalized (every consecutive\n+  For `@hasraw`, `PATTERN` is a whitespace-normalized (every consecutive\n   whitespace being replaced by one single space character) string.\n   The entire file is also whitespace-normalized including newlines.\n \n-  For `@matchestext`, `PATTERN` is a Python-supported regular expression.\n+  For `@matchesraw`, `PATTERN` is a Python-supported regular expression.\n   The file remains intact but the regexp is matched without the `MULTILINE`\n   and `IGNORECASE` options. You can still use a prefix `(?m)` or `(?i)`\n   to override them, and `\\A` and `\\Z` for definitely matching\n@@ -542,19 +542,19 @@ def get_nb_matching_elements(cache, c, regexp, stop_at_first):\n def check_command(c, cache):\n     try:\n         cerr = \"\"\n-        if c.cmd in ['has', 'hastext', 'matches', 'matchestext']:  # string test\n+        if c.cmd in ['has', 'hasraw', 'matches', 'matchesraw']:  # string test\n             regexp = c.cmd.startswith('matches')\n-            if len(c.args) == 1 and not regexp and 'text' not in c.cmd:  # @has <path> = file existence\n+            if len(c.args) == 1 and not regexp and 'raw' not in c.cmd:  # @has <path> = file existence\n                 try:\n                     cache.get_file(c.args[0])\n                     ret = True\n                 except FailedCheck as err:\n                     cerr = str(err)\n                     ret = False\n-            elif len(c.args) == 2 and 'text' in c.cmd:  # @hastext/matchestext <path> <pat> = string test\n+            elif len(c.args) == 2 and 'raw' in c.cmd:  # @hasraw/matchesraw <path> <pat> = string test\n                 cerr = \"`PATTERN` did not match\"\n                 ret = check_string(cache.get_file(c.args[0]), c.args[1], regexp)\n-            elif len(c.args) == 3 and 'text' not in c.cmd:  # @has/matches <path> <pat> <match> = XML tree test\n+            elif len(c.args) == 3 and 'raw' not in c.cmd:  # @has/matches <path> <pat> <match> = XML tree test\n                 cerr = \"`XPATH PATTERN` did not match\"\n                 ret = get_nb_matching_elements(cache, c, regexp, True) != 0\n             else:"}, {"sha": "76c1e880ae79dd7e7ba10676a478d645d0f0c542", "filename": "src/test/rustdoc/deprecated-impls.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fdeprecated-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fdeprecated-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdeprecated-impls.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -5,8 +5,8 @@ pub struct Foo0;\n \n impl Foo0 {\n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.1: fn_with_doc'\n-    // @hastext - 'fn_with_doc short'\n-    // @hastext - 'fn_with_doc full'\n+    // @hasraw - 'fn_with_doc short'\n+    // @hasraw - 'fn_with_doc full'\n     /// fn_with_doc short\n     ///\n     /// fn_with_doc full\n@@ -52,8 +52,8 @@ pub struct Foo1;\n \n impl Bar for Foo1 {\n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.3: fn_empty_with_doc'\n-    // @hastext - 'fn_empty_with_doc_impl short'\n-    // @hastext - 'fn_empty_with_doc_impl full'\n+    // @hasraw - 'fn_empty_with_doc_impl short'\n+    // @hasraw - 'fn_empty_with_doc_impl full'\n     /// fn_empty_with_doc_impl short\n     ///\n     /// fn_empty_with_doc_impl full\n@@ -63,8 +63,8 @@ impl Bar for Foo1 {\n     fn fn_empty_without_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.5: fn_def_with_doc'\n-    // @hastext - 'fn_def_with_doc_impl short'\n-    // @hastext - 'fn_def_with_doc_impl full'\n+    // @hasraw - 'fn_def_with_doc_impl short'\n+    // @hasraw - 'fn_def_with_doc_impl full'\n     /// fn_def_with_doc_impl short\n     ///\n     /// fn_def_with_doc_impl full\n@@ -74,7 +74,7 @@ impl Bar for Foo1 {\n     fn fn_def_without_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.7: fn_def_def_with_doc'\n-    // @hastext - 'fn_def_def_with_doc short'\n+    // @hasraw - 'fn_def_def_with_doc short'\n     // @!has - 'fn_def_def_with_doc full'\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.8: fn_def_def_without_doc'\n@@ -85,33 +85,33 @@ pub struct Foo2;\n \n impl Bar for Foo2 {\n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.3: fn_empty_with_doc'\n-    // @hastext - 'fn_empty_with_doc short'\n+    // @hasraw - 'fn_empty_with_doc short'\n     // @!has - 'fn_empty_with_doc full'\n     fn fn_empty_with_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.4: fn_empty_without_doc'\n-    // @hastext - 'fn_empty_without_doc_impl short'\n-    // @hastext - 'fn_empty_without_doc_impl full'\n+    // @hasraw - 'fn_empty_without_doc_impl short'\n+    // @hasraw - 'fn_empty_without_doc_impl full'\n     /// fn_empty_without_doc_impl short\n     ///\n     /// fn_empty_without_doc_impl full\n     fn fn_empty_without_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.5: fn_def_with_doc'\n-    // @hastext - 'fn_def_with_doc short'\n+    // @hasraw - 'fn_def_with_doc short'\n     // @!has - 'fn_def_with_doc full'\n     fn fn_def_with_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.6: fn_def_without_doc'\n-    // @hastext - 'fn_def_without_doc_impl short'\n-    // @hastext - 'fn_def_without_doc_impl full'\n+    // @hasraw - 'fn_def_without_doc_impl short'\n+    // @hasraw - 'fn_def_without_doc_impl full'\n     /// fn_def_without_doc_impl short\n     ///\n     /// fn_def_without_doc_impl full\n     fn fn_def_without_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.7: fn_def_def_with_doc'\n-    // @hastext - 'fn_def_def_with_doc short'\n+    // @hasraw - 'fn_def_def_with_doc short'\n     // @!has - 'fn_def_def_with_doc full'\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.8: fn_def_def_without_doc'"}, {"sha": "9b4ceb4f9cd86bbd29c0eb55840e718dc423a040", "filename": "src/test/rustdoc/elided-lifetime.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Felided-lifetime.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -11,33 +11,33 @@ pub struct Ref<'a>(&'a u32);\n type ARef<'a> = Ref<'a>;\n \n // @has foo/fn.test1.html\n-// @matchestext - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n pub fn test1(a: &u32) -> Ref {\n     Ref(a)\n }\n \n // @has foo/fn.test2.html\n-// @matchestext - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n pub fn test2(a: &u32) -> Ref<'_> {\n     Ref(a)\n }\n \n // @has foo/fn.test3.html\n-// @matchestext - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n pub fn test3(a: &u32) -> ARef {\n     Ref(a)\n }\n \n // @has foo/fn.test4.html\n-// @matchestext - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n pub fn test4(a: &u32) -> ARef<'_> {\n     Ref(a)\n }\n \n // Ensure external paths in inlined docs also display elided lifetime\n // @has foo/bar/fn.test5.html\n-// @matchestext - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n // @has foo/bar/fn.test6.html\n-// @matchestext - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n #[doc(inline)]\n pub extern crate bar;"}, {"sha": "147e11e5882e09c5ce4c0ba190794564bf44d94d", "filename": "src/test/rustdoc/empty-mod-private.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -1,16 +1,16 @@\n // compile-flags: --document-private-items\n \n // @has 'empty_mod_private/index.html' '//a[@href=\"foo/index.html\"]' 'foo'\n-// @hastext 'empty_mod_private/sidebar-items.js' 'foo'\n+// @hasraw 'empty_mod_private/sidebar-items.js' 'foo'\n // @matches 'empty_mod_private/foo/index.html' '//h1' 'Module empty_mod_private::foo'\n mod foo {}\n \n // @has 'empty_mod_private/index.html' '//a[@href=\"bar/index.html\"]' 'bar'\n-// @hastext 'empty_mod_private/sidebar-items.js' 'bar'\n+// @hasraw 'empty_mod_private/sidebar-items.js' 'bar'\n // @matches 'empty_mod_private/bar/index.html' '//h1' 'Module empty_mod_private::bar'\n mod bar {\n     // @has 'empty_mod_private/bar/index.html' '//a[@href=\"baz/index.html\"]' 'baz'\n-    // @hastext 'empty_mod_private/bar/sidebar-items.js' 'baz'\n+    // @hasraw 'empty_mod_private/bar/sidebar-items.js' 'baz'\n     // @matches 'empty_mod_private/bar/baz/index.html' '//h1' 'Module empty_mod_private::bar::baz'\n     mod baz {}\n }"}, {"sha": "c0bac40212c90a8218b0d3a7d86d2399a603ecbd", "filename": "src/test/rustdoc/empty-mod-public.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fempty-mod-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fempty-mod-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-mod-public.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -1,14 +1,14 @@\n // @has 'empty_mod_public/index.html' '//a[@href=\"foo/index.html\"]' 'foo'\n-// @hastext 'empty_mod_public/sidebar-items.js' 'foo'\n+// @hasraw 'empty_mod_public/sidebar-items.js' 'foo'\n // @matches 'empty_mod_public/foo/index.html' '//h1' 'Module empty_mod_public::foo'\n pub mod foo {}\n \n // @has 'empty_mod_public/index.html' '//a[@href=\"bar/index.html\"]' 'bar'\n-// @hastext 'empty_mod_public/sidebar-items.js' 'bar'\n+// @hasraw 'empty_mod_public/sidebar-items.js' 'bar'\n // @matches 'empty_mod_public/bar/index.html' '//h1' 'Module empty_mod_public::bar'\n pub mod bar {\n     // @has 'empty_mod_public/bar/index.html' '//a[@href=\"baz/index.html\"]' 'baz'\n-    // @hastext 'empty_mod_public/bar/sidebar-items.js' 'baz'\n+    // @hasraw 'empty_mod_public/bar/sidebar-items.js' 'baz'\n     // @matches 'empty_mod_public/bar/baz/index.html' '//h1' 'Module empty_mod_public::bar::baz'\n     pub mod baz {}\n }"}, {"sha": "91499100ec6872fd32734eb6140026c6a8009a1a", "filename": "src/test/rustdoc/generic-associated-types/issue-94683.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -8,6 +8,6 @@ pub trait Trait {\n // Make sure that the elided lifetime shows up\n \n // @has foo/type.T.html\n-// @hastext - \"pub type T = \"\n-// @hastext - \"&lt;'_&gt;\"\n+// @hasraw - \"pub type T = \"\n+// @hasraw - \"&lt;'_&gt;\"\n pub type T = fn(&<() as Trait>::Gat<'_>);"}, {"sha": "0bf7cabc43b2401a29df1e752b054b7d0609603d", "filename": "src/test/rustdoc/hide-unstable-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fhide-unstable-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fhide-unstable-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhide-unstable-trait.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -5,7 +5,7 @@\n \n extern crate unstable_trait;\n \n-// @hastext foo/struct.Foo.html 'bar'\n-// @hastext foo/struct.Foo.html 'bar2'\n+// @hasraw foo/struct.Foo.html 'bar'\n+// @hasraw foo/struct.Foo.html 'bar2'\n #[doc(inline)]\n pub use unstable_trait::Foo;"}, {"sha": "34733f1f8ccb8518cf7d722599ef08099da30f06", "filename": "src/test/rustdoc/impl-parts-crosscrate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -12,9 +12,9 @@ pub struct Bar<T> { t: T }\n // full impl string.  Instead, just make sure something from each part\n // is mentioned.\n \n-// @hastext implementors/rustdoc_impl_parts_crosscrate/trait.AnAutoTrait.js Bar\n-// @hastext - Send\n-// @hastext - !AnAutoTrait\n-// @hastext - Copy\n+// @hasraw implementors/rustdoc_impl_parts_crosscrate/trait.AnAutoTrait.js Bar\n+// @hasraw - Send\n+// @hasraw - !AnAutoTrait\n+// @hasraw - Copy\n impl<T: Send> !rustdoc_impl_parts_crosscrate::AnAutoTrait for Bar<T>\n     where T: Copy {}"}, {"sha": "4f681c78ee1171ae4fdcc861d0b88a2c410e27f3", "filename": "src/test/rustdoc/impl-trait-alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -3,11 +3,11 @@\n trait MyTrait {}\n impl MyTrait for i32 {}\n \n-// @hastext impl_trait_alias/type.Foo.html 'Foo'\n+// @hasraw impl_trait_alias/type.Foo.html 'Foo'\n /// debug type\n pub type Foo = impl MyTrait;\n \n-// @hastext impl_trait_alias/fn.foo.html 'foo'\n+// @hasraw impl_trait_alias/fn.foo.html 'foo'\n /// debug function\n pub fn foo() -> Foo {\n     1"}, {"sha": "a1124d2094c0fb6177d555c54fe0a5e8d24aee9e", "filename": "src/test/rustdoc/inline_cross/add-docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -4,6 +4,6 @@ extern crate inner;\n \n \n // @has add_docs/struct.MyStruct.html\n-// @hastext add_docs/struct.MyStruct.html \"Doc comment from \u2018pub use\u2019, Doc comment from definition\"\n+// @hasraw add_docs/struct.MyStruct.html \"Doc comment from \u2018pub use\u2019, Doc comment from definition\"\n /// Doc comment from 'pub use',\n pub use inner::MyStruct;"}, {"sha": "a46550865c8b1e930374a44a26bc5cdb0b4498d0", "filename": "src/test/rustdoc/inline_cross/proc_macro.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -12,25 +12,25 @@ extern crate some_macros;\n // @has proc_macro/derive.SomeDerive.html\n \n // @has proc_macro/macro.some_proc_macro.html\n-// @hastext - 'a proc-macro that swallows its input and does nothing.'\n+// @hasraw - 'a proc-macro that swallows its input and does nothing.'\n pub use some_macros::some_proc_macro;\n \n // @has proc_macro/macro.reexported_macro.html\n-// @hastext - 'Doc comment from the original crate'\n+// @hasraw - 'Doc comment from the original crate'\n pub use some_macros::reexported_macro;\n \n // @has proc_macro/attr.some_proc_attr.html\n-// @hastext - 'a proc-macro attribute that passes its item through verbatim.'\n+// @hasraw - 'a proc-macro attribute that passes its item through verbatim.'\n pub use some_macros::some_proc_attr;\n \n // @has proc_macro/derive.SomeDerive.html\n-// @hastext - 'a derive attribute that adds nothing to its input.'\n+// @hasraw - 'a derive attribute that adds nothing to its input.'\n pub use some_macros::SomeDerive;\n \n // @has proc_macro/attr.first_attr.html\n-// @hastext - 'Generated doc comment'\n+// @hasraw - 'Generated doc comment'\n pub use some_macros::first_attr;\n \n // @has proc_macro/attr.second_attr.html\n-// @hastext - 'Generated doc comment'\n+// @hasraw - 'Generated doc comment'\n pub use some_macros::second_attr;"}, {"sha": "8526cbde7df36af3fe1ccf49f4c222c89129bf07", "filename": "src/test/rustdoc/inline_local/glob-extern-document-private-items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern-document-private-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern-document-private-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern-document-private-items.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -12,14 +12,14 @@ mod mod1 {\n pub use mod1::*;\n \n // @has foo/index.html\n-// @hastext - \"mod1\"\n-// @hastext - \"public_fn\"\n+// @hasraw - \"mod1\"\n+// @hasraw - \"public_fn\"\n // @!has - \"private_fn\"\n // @has foo/fn.public_fn.html\n // @!has foo/fn.private_fn.html\n \n // @has foo/mod1/index.html\n-// @hastext - \"public_fn\"\n-// @hastext - \"private_fn\"\n+// @hasraw - \"public_fn\"\n+// @hasraw - \"private_fn\"\n // @has foo/mod1/fn.public_fn.html\n // @has foo/mod1/fn.private_fn.html"}, {"sha": "c465fcf35cac63b528931f13cc694b04de2f8acf", "filename": "src/test/rustdoc/inline_local/glob-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -11,7 +11,7 @@ pub use mod1::*;\n \n // @has foo/index.html\n // @!has - \"mod1\"\n-// @hastext - \"public_fn\"\n+// @hasraw - \"public_fn\"\n // @!has - \"private_fn\"\n // @has foo/fn.public_fn.html\n // @!has foo/fn.private_fn.html"}, {"sha": "adbd53f912e49f56f0476239c09566636614c3b4", "filename": "src/test/rustdoc/inline_local/glob-private-document-private-items.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private-document-private-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private-document-private-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private-document-private-items.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -15,21 +15,21 @@ mod mod1 {\n pub use mod1::*;\n \n // @has foo/index.html\n-// @hastext - \"mod1\"\n-// @hastext - \"Mod1Public\"\n+// @hasraw - \"mod1\"\n+// @hasraw - \"Mod1Public\"\n // @!has - \"Mod1Private\"\n // @!has - \"mod2\"\n-// @hastext - \"Mod2Public\"\n+// @hasraw - \"Mod2Public\"\n // @!has - \"Mod2Private\"\n // @has foo/struct.Mod1Public.html\n // @!has foo/struct.Mod1Private.html\n // @has foo/struct.Mod2Public.html\n // @!has foo/struct.Mod2Private.html\n \n // @has foo/mod1/index.html\n-// @hastext - \"mod2\"\n-// @hastext - \"Mod1Public\"\n-// @hastext - \"Mod1Private\"\n+// @hasraw - \"mod2\"\n+// @hasraw - \"Mod1Public\"\n+// @hasraw - \"Mod1Private\"\n // @!has - \"Mod2Public\"\n // @!has - \"Mod2Private\"\n // @has foo/mod1/struct.Mod1Public.html\n@@ -38,8 +38,8 @@ pub use mod1::*;\n // @!has foo/mod1/struct.Mod2Private.html\n \n // @has foo/mod1/mod2/index.html\n-// @hastext - \"Mod2Public\"\n-// @hastext - \"Mod2Private\"\n+// @hasraw - \"Mod2Public\"\n+// @hasraw - \"Mod2Private\"\n // @has foo/mod1/mod2/struct.Mod2Public.html\n // @has foo/mod1/mod2/struct.Mod2Private.html\n "}, {"sha": "d1d15ae2b0eaaf5a6dacde70aa5156f1d0ac6493", "filename": "src/test/rustdoc/inline_local/glob-private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -14,10 +14,10 @@ pub use mod1::*;\n \n // @has foo/index.html\n // @!has - \"mod1\"\n-// @hastext - \"Mod1Public\"\n+// @hasraw - \"Mod1Public\"\n // @!has - \"Mod1Private\"\n // @!has - \"mod2\"\n-// @hastext - \"Mod2Public\"\n+// @hasraw - \"Mod2Public\"\n // @!has - \"Mod2Private\"\n // @has foo/struct.Mod1Public.html\n // @!has foo/struct.Mod1Private.html"}, {"sha": "03db2386d9d7e7052b0e8d4dfbd3da85be879945", "filename": "src/test/rustdoc/inline_local/please_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_local%2Fplease_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Finline_local%2Fplease_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fplease_inline.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -12,7 +12,7 @@ pub mod a {\n \n // @has please_inline/b/index.html\n pub mod b {\n-    // @hastext - 'pub use foo::'\n+    // @hasraw - 'pub use foo::'\n     // @!has please_inline/b/struct.Foo.html\n     #[feature(inline)]\n     pub use foo::Foo;"}, {"sha": "5440f582dff7e3360502b2f3b67674c0ff96965a", "filename": "src/test/rustdoc/intra-doc/extern-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -25,11 +25,11 @@ impl G<usize> for ExternType {\n }\n \n // @has 'extern_type/foreigntype.ExternType.html'\n-// @hastext 'extern_type/fn.links_to_extern_type.html' \\\n+// @hasraw 'extern_type/fn.links_to_extern_type.html' \\\n // 'href=\"foreigntype.ExternType.html#method.f\"'\n-// @hastext 'extern_type/fn.links_to_extern_type.html' \\\n+// @hasraw 'extern_type/fn.links_to_extern_type.html' \\\n // 'href=\"foreigntype.ExternType.html#method.test\"'\n-// @hastext 'extern_type/fn.links_to_extern_type.html' \\\n+// @hasraw 'extern_type/fn.links_to_extern_type.html' \\\n // 'href=\"foreigntype.ExternType.html#method.g\"'\n /// See also [ExternType::f]\n /// See also [ExternType::test]"}, {"sha": "2fda637a64131f6d9b6299df8418a4db46f7f858", "filename": "src/test/rustdoc/issue-16265-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -1,6 +1,6 @@\n pub struct Foo;\n \n-// @hastext issue_16265_1/traits/index.html 'source'\n+// @hasraw issue_16265_1/traits/index.html 'source'\n pub mod traits {\n     impl PartialEq for super::Foo {\n         fn eq(&self, _: &super::Foo) -> bool {"}, {"sha": "c3eb356171e856e7f36b96d6c3bb51f3c2eb8fc2", "filename": "src/test/rustdoc/issue-16265-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -1,4 +1,4 @@\n-// @hastext issue_16265_2/index.html 'source'\n+// @hasraw issue_16265_2/index.html 'source'\n \n trait Y {}\n impl Y for Option<u32> {}"}, {"sha": "7576ebb0305aaa5604cd2566397466e7c00ebea6", "filename": "src/test/rustdoc/issue-23511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23511.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -6,7 +6,7 @@ pub mod str {\n     #![doc(primitive = \"str\")]\n \n     impl str {\n-        // @hastext search-index.js foo\n+        // @hasraw search-index.js foo\n         #[rustc_allow_incoherent_impl]\n         pub fn foo(&self) {}\n     }"}, {"sha": "a52a4f56a4c6305090bb510cbc72979302b43295", "filename": "src/test/rustdoc/issue-23812.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-23812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-23812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23812.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -16,9 +16,9 @@ doc! {\n }\n \n // @has issue_23812/Foo/index.html\n-// @hastext - 'Outer comment'\n+// @hasraw - 'Outer comment'\n // @!has - '/// Outer comment'\n-// @hastext - 'Inner comment'\n+// @hasraw - 'Inner comment'\n // @!has - '//! Inner comment'\n \n \n@@ -30,7 +30,7 @@ doc! {\n }\n \n // @has issue_23812/Bar/index.html\n-// @hastext - 'Outer block comment'\n+// @hasraw - 'Outer block comment'\n // @!has - '/** Outer block comment */'\n-// @hastext - 'Inner block comment'\n+// @hasraw - 'Inner block comment'\n // @!has - '/*! Inner block comment */'"}, {"sha": "a5b0441ac7669370430114f2dc23a0a1249ba693", "filename": "src/test/rustdoc/issue-27104.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-27104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-27104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-27104.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -6,5 +6,5 @@\n // @!has - 'extern crate std'\n // @!has - 'use std::prelude::'\n \n-// @hastext - 'pub extern crate empty'\n+// @hasraw - 'pub extern crate empty'\n pub extern crate empty;"}, {"sha": "65e0f7cb87b0c5f41b7fe3e3375453191f29d528", "filename": "src/test/rustdoc/issue-27759.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-27759.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-27759.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-27759.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -4,11 +4,11 @@\n #![unstable(feature=\"test\", issue=\"27759\")]\n \n // @has issue_27759/unstable/index.html\n-// @hastext - '<code>test</code>&nbsp;<a href=\"http://issue_url/27759\">#27759</a>'\n+// @hasraw - '<code>test</code>&nbsp;<a href=\"http://issue_url/27759\">#27759</a>'\n #[unstable(feature=\"test\", issue=\"27759\")]\n pub mod unstable {\n     // @has issue_27759/unstable/fn.issue.html\n-    // @hastext - '<code>test_function</code>&nbsp;<a href=\"http://issue_url/12345\">#12345</a>'\n+    // @hasraw - '<code>test_function</code>&nbsp;<a href=\"http://issue_url/12345\">#12345</a>'\n     #[unstable(feature=\"test_function\", issue=\"12345\")]\n     pub fn issue() {}\n }"}, {"sha": "09fe77d89260ae7edb012caddcff2e8e3d858319", "filename": "src/test/rustdoc/issue-31899.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-31899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-31899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-31899.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -1,5 +1,5 @@\n // @has issue_31899/index.html\n-// @hastext - 'Make this line a bit longer.'\n+// @hasraw - 'Make this line a bit longer.'\n // @!has - 'rust rust-example-rendered'\n // @!has - 'use ndarray::arr2'\n // @!has - 'prohibited'"}, {"sha": "9c585497d354faaefa8213a546164b1bba29c573", "filename": "src/test/rustdoc/issue-32374.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32374.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -10,7 +10,7 @@\n \n // @has issue_32374/struct.T.html '//*[@class=\"stab deprecated\"]' \\\n //      '\ud83d\udc4e Deprecated since 1.0.0: text'\n-// @hastext - '<code>test</code>&nbsp;<a href=\"https://issue_url/32374\">#32374</a>'\n+// @hasraw - '<code>test</code>&nbsp;<a href=\"https://issue_url/32374\">#32374</a>'\n // @matches issue_32374/struct.T.html '//*[@class=\"stab unstable\"]' \\\n //      '\ud83d\udd2c This is a nightly-only experimental API. \\(test\\s#32374\\)$'\n /// Docs"}, {"sha": "ebdfe0488a1665314dc191b986873571581eea7d", "filename": "src/test/rustdoc/issue-41783.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-41783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-41783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-41783.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -1,11 +1,11 @@\n // @has issue_41783/struct.Foo.html\n // @!has - 'space'\n // @!has - 'comment'\n-// @hastext - '# <span class=\"ident\">single'\n-// @hastext - '## <span class=\"ident\">double</span>'\n-// @hastext - '### <span class=\"ident\">triple</span>'\n-// @hastext - '<span class=\"attribute\">#[<span class=\"ident\">outer</span>]</span>'\n-// @hastext - '<span class=\"attribute\">#![<span class=\"ident\">inner</span>]</span>'\n+// @hasraw - '# <span class=\"ident\">single'\n+// @hasraw - '## <span class=\"ident\">double</span>'\n+// @hasraw - '### <span class=\"ident\">triple</span>'\n+// @hasraw - '<span class=\"attribute\">#[<span class=\"ident\">outer</span>]</span>'\n+// @hasraw - '<span class=\"attribute\">#![<span class=\"ident\">inner</span>]</span>'\n \n /// ```no_run\n /// # # space"}, {"sha": "0cd397dc463a503a5d9127a0ca2e755dbbb43058", "filename": "src/test/rustdoc/issue-89852.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-89852.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fissue-89852.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-89852.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -3,7 +3,7 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @matchestext 'issue_89852/sidebar-items.js' '\"repro\"'\n+// @matchesraw 'issue_89852/sidebar-items.js' '\"repro\"'\n // @!matches 'issue_89852/sidebar-items.js' '\"repro\".*\"repro\"'\n \n #[macro_export]"}, {"sha": "7a322ea6d3414ddc61eb816704f98e59616224f5", "filename": "src/test/rustdoc/link-title-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Flink-title-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Flink-title-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Flink-title-escape.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -6,4 +6,4 @@\n //!\n //! [foo]: url 'title & <stuff> & \"things\"'\n \n-// @hastext 'foo/index.html' 'title &amp; &lt;stuff&gt; &amp; &quot;things&quot;'\n+// @hasraw 'foo/index.html' 'title &amp; &lt;stuff&gt; &amp; &quot;things&quot;'"}, {"sha": "21a2ed9b3449e841617f702d54b66f5821c4e060", "filename": "src/test/rustdoc/macro-document-private-duplicate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fmacro-document-private-duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fmacro-document-private-duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro-document-private-duplicate.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -10,14 +10,14 @@\n //\n // compile-flags: --document-private-items\n \n-// @hastext macro_document_private_duplicate/index.html 'Doc 1.'\n-// @hastext macro_document_private_duplicate/macro.a_macro.html 'Doc 1.'\n+// @hasraw macro_document_private_duplicate/index.html 'Doc 1.'\n+// @hasraw macro_document_private_duplicate/macro.a_macro.html 'Doc 1.'\n /// Doc 1.\n macro_rules! a_macro {\n     () => ()\n }\n \n-// @hastext macro_document_private_duplicate/index.html 'Doc 2.'\n+// @hasraw macro_document_private_duplicate/index.html 'Doc 2.'\n // @!has macro_document_private_duplicate/macro.a_macro.html 'Doc 2.'\n /// Doc 2.\n macro_rules! a_macro {"}, {"sha": "98026663e5a7a9b9c1b36cb4cb18aae68bd27e9b", "filename": "src/test/rustdoc/macro_rules-matchers.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -7,27 +7,27 @@\n // @has - '//span[@class=\"macro\"]' 'macro_rules!'\n // @has - '//span[@class=\"ident\"]' 'todo'\n \n-// @hastext - '{ () =&gt; { ... }; ($('\n+// @hasraw - '{ () =&gt; { ... }; ($('\n // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n-// @hastext - ':'\n+// @hasraw - ':'\n // @has - '//span[@class=\"ident\"]' 'tt'\n-// @hastext - ')+'\n-// @hastext - ') =&gt; { ... }; }'\n+// @hasraw - ')+'\n+// @hasraw - ') =&gt; { ... }; }'\n pub use std::todo;\n \n mod mod1 {\n     // @has 'foo/macro.macro1.html'\n-    // @hastext - 'macro_rules!'\n-    // @hastext - 'macro1'\n-    // @hastext - '{ () =&gt; { ... }; ($('\n+    // @hasraw - 'macro_rules!'\n+    // @hasraw - 'macro1'\n+    // @hasraw - '{ () =&gt; { ... }; ($('\n     // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n     // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n-    // @hastext - ':'\n-    // @hastext - 'expr'\n-    // @hastext - '),'\n-    // @hastext - '+'\n-    // @hastext - ') =&gt; { ... }; }'\n+    // @hasraw - ':'\n+    // @hasraw - 'expr'\n+    // @hasraw - '),'\n+    // @hasraw - '+'\n+    // @hasraw - ') =&gt; { ... }; }'\n     #[macro_export]\n     macro_rules! macro1 {\n         () => {};"}, {"sha": "8f54953ed6640762e15cbcc21c97d02253bc5f76", "filename": "src/test/rustdoc/markdown-summaries.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -7,16 +7,16 @@\n //!\n //! [link]: https://example.com\n \n-// @hastext search-index.js 'This <em>summary</em> has a link and <code>code</code>.'\n+// @hasraw search-index.js 'This <em>summary</em> has a link and <code>code</code>.'\n // @!has - 'second paragraph'\n \n /// This `code` will be rendered in a code tag.\n ///\n /// This text should not be rendered.\n pub struct Sidebar;\n \n-// @hastext search-index.js 'This <code>code</code> will be rendered in a code tag.'\n-// @hastext summaries/sidebar-items.js 'This `code` will be rendered in a code tag.'\n+// @hasraw search-index.js 'This <code>code</code> will be rendered in a code tag.'\n+// @hasraw summaries/sidebar-items.js 'This `code` will be rendered in a code tag.'\n // @!has - 'text should not be rendered'\n \n /// ```text"}, {"sha": "29f317d054611c5d4e7a180bea5e651e8f7be237", "filename": "src/test/rustdoc/nested-modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fnested-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fnested-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnested-modules.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -7,11 +7,11 @@ mod a_module {\n \n     pub mod a_nested_module {\n         // @has aCrate/a_nested_module/index.html '//a[@href=\"fn.a_nested_public_function.html\"]' 'a_nested_public_function'\n-        // @hastext aCrate/a_nested_module/fn.a_nested_public_function.html 'pub fn a_nested_public_function()'\n+        // @hasraw aCrate/a_nested_module/fn.a_nested_public_function.html 'pub fn a_nested_public_function()'\n         pub fn a_nested_public_function() {}\n \n         // @has aCrate/a_nested_module/index.html '//a[@href=\"fn.another_nested_public_function.html\"]' 'another_nested_public_function'\n-        // @hastext aCrate/a_nested_module/fn.another_nested_public_function.html 'pub fn another_nested_public_function()'\n+        // @hasraw aCrate/a_nested_module/fn.another_nested_public_function.html 'pub fn another_nested_public_function()'\n         pub use a_nested_module::a_nested_public_function as another_nested_public_function;\n     }\n "}, {"sha": "09b3683054d600efc1aab9f738128e3ce1e9f090", "filename": "src/test/rustdoc/search-index-summaries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fsearch-index-summaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fsearch-index-summaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsearch-index-summaries.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-// @hastext 'search-index.js' 'Foo short link.'\n+// @hasraw 'search-index.js' 'Foo short link.'\n // @!has - 'www.example.com'\n // @!has - 'More Foo.'\n "}, {"sha": "db625f7a31fd99486e488c6cee03bec5f19de89a", "filename": "src/test/rustdoc/search-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fsearch-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fsearch-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsearch-index.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -2,13 +2,13 @@\n \n use std::ops::Deref;\n \n-// @hastext search-index.js Foo\n+// @hasraw search-index.js Foo\n pub use private::Foo;\n \n mod private {\n     pub struct Foo;\n     impl Foo {\n-        pub fn test_method() {} // @hastext - test_method\n+        pub fn test_method() {} // @hasraw - test_method\n         fn priv_method() {} // @!has - priv_method\n     }\n "}, {"sha": "d70827ec29010700127e67d87feb21db258319c3", "filename": "src/test/rustdoc/show-const-contents.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -1,34 +1,34 @@\n // Test that the contents of constants are displayed as part of the\n // documentation.\n \n-// @hastext show_const_contents/constant.CONST_S.html 'show this'\n+// @hasraw show_const_contents/constant.CONST_S.html 'show this'\n // @!has show_const_contents/constant.CONST_S.html '; //'\n pub const CONST_S: &'static str = \"show this\";\n \n-// @hastext show_const_contents/constant.CONST_I32.html '= 42;'\n+// @hasraw show_const_contents/constant.CONST_I32.html '= 42;'\n // @!has show_const_contents/constant.CONST_I32.html '; //'\n pub const CONST_I32: i32 = 42;\n \n-// @hastext show_const_contents/constant.CONST_I32_HEX.html '= 0x42;'\n+// @hasraw show_const_contents/constant.CONST_I32_HEX.html '= 0x42;'\n // @!has show_const_contents/constant.CONST_I32_HEX.html '; //'\n pub const CONST_I32_HEX: i32 = 0x42;\n \n-// @hastext show_const_contents/constant.CONST_NEG_I32.html '= -42;'\n+// @hasraw show_const_contents/constant.CONST_NEG_I32.html '= -42;'\n // @!has show_const_contents/constant.CONST_NEG_I32.html '; //'\n pub const CONST_NEG_I32: i32 = -42;\n \n-// @hastext show_const_contents/constant.CONST_EQ_TO_VALUE_I32.html '= 42i32;'\n+// @hasraw show_const_contents/constant.CONST_EQ_TO_VALUE_I32.html '= 42i32;'\n // @!has show_const_contents/constant.CONST_EQ_TO_VALUE_I32.html '// 42i32'\n pub const CONST_EQ_TO_VALUE_I32: i32 = 42i32;\n \n-// @hastext show_const_contents/constant.CONST_CALC_I32.html '= _; // 43i32'\n+// @hasraw show_const_contents/constant.CONST_CALC_I32.html '= _; // 43i32'\n pub const CONST_CALC_I32: i32 = 42 + 1;\n \n // @!has show_const_contents/constant.CONST_REF_I32.html '= &42;'\n // @!has show_const_contents/constant.CONST_REF_I32.html '; //'\n pub const CONST_REF_I32: &'static i32 = &42;\n \n-// @hastext show_const_contents/constant.CONST_I32_MAX.html '= i32::MAX; // 2_147_483_647i32'\n+// @hasraw show_const_contents/constant.CONST_I32_MAX.html '= i32::MAX; // 2_147_483_647i32'\n pub const CONST_I32_MAX: i32 = i32::MAX;\n \n // @!has show_const_contents/constant.UNIT.html '= ();'\n@@ -47,11 +47,11 @@ pub struct MyTypeWithStr(&'static str);\n // @!has show_const_contents/constant.MY_TYPE_WITH_STR.html '; //'\n pub const MY_TYPE_WITH_STR: MyTypeWithStr = MyTypeWithStr(\"show this\");\n \n-// @hastext show_const_contents/constant.PI.html '= 3.14159265358979323846264338327950288f32;'\n-// @hastext show_const_contents/constant.PI.html '; // 3.14159274f32'\n+// @hasraw show_const_contents/constant.PI.html '= 3.14159265358979323846264338327950288f32;'\n+// @hasraw show_const_contents/constant.PI.html '; // 3.14159274f32'\n pub use std::f32::consts::PI;\n \n-// @hastext show_const_contents/constant.MAX.html '= i32::MAX; // 2_147_483_647i32'\n+// @hasraw show_const_contents/constant.MAX.html '= i32::MAX; // 2_147_483_647i32'\n #[allow(deprecated, deprecated_in_future)]\n pub use std::i32::MAX;\n \n@@ -61,7 +61,7 @@ macro_rules! int_module {\n     )\n }\n \n-// @hastext show_const_contents/constant.MIN.html '= i16::MIN; // -32_768i16'\n+// @hasraw show_const_contents/constant.MIN.html '= i16::MIN; // -32_768i16'\n int_module!(i16);\n \n // @has show_const_contents/constant.ESCAPE.html //pre '= r#\"<script>alert(\"ESCAPE\");</script>\"#;'"}, {"sha": "b5cc8bc8304e8d4d3dbeec28d00dd70118ca9696", "filename": "src/test/rustdoc/sort-modules-by-appearance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fsort-modules-by-appearance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fsort-modules-by-appearance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsort-modules-by-appearance.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -9,5 +9,5 @@ pub mod module_c {}\n \n pub mod module_a {}\n \n-// @matchestext 'sort_modules_by_appearance/index.html' '(?s)module_b.*module_c.*module_a'\n-// @matchestext 'sort_modules_by_appearance/sidebar-items.js' '\"module_b\".*\"module_c\".*\"module_a\"'\n+// @matchesraw 'sort_modules_by_appearance/index.html' '(?s)module_b.*module_c.*module_a'\n+// @matchesraw 'sort_modules_by_appearance/sidebar-items.js' '\"module_b\".*\"module_c\".*\"module_a\"'"}, {"sha": "4e166479063cc072c55a37d5d12857aa5a693e6f", "filename": "src/test/rustdoc/source-file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fsource-file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fsource-file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsource-file.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// @hastext source-files.js source-file.rs\n+// @hasraw source-files.js source-file.rs\n \n pub struct Foo;"}, {"sha": "ac11445d459aae7e1ae90267881814d8deb1db9a", "filename": "src/test/rustdoc/static-root-path.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -1,18 +1,18 @@\n // compile-flags:-Z unstable-options --static-root-path /cache/\n \n // @has static_root_path/struct.SomeStruct.html\n-// @matchestext - '\"/cache/main\\.js\"'\n+// @matchesraw - '\"/cache/main\\.js\"'\n // @!matches - '\"\\.\\./main\\.js\"'\n-// @matchestext - 'data-root-path=\"\\.\\./\"'\n+// @matchesraw - 'data-root-path=\"\\.\\./\"'\n // @!matches - '\"/cache/search-index\\.js\"'\n pub struct SomeStruct;\n \n // @has src/static_root_path/static-root-path.rs.html\n-// @matchestext - '\"/cache/source-script\\.js\"'\n+// @matchesraw - '\"/cache/source-script\\.js\"'\n // @!matches - '\"\\.\\./\\.\\./source-script\\.js\"'\n-// @matchestext - '\"\\.\\./\\.\\./source-files.js\"'\n+// @matchesraw - '\"\\.\\./\\.\\./source-files.js\"'\n // @!matches - '\"/cache/source-files\\.js\"'\n \n // @has settings.html\n-// @matchestext - '/cache/settings\\.js'\n+// @matchesraw - '/cache/settings\\.js'\n // @!matches - '\\./settings\\.js'"}, {"sha": "bfcdfec69f25984b59a0cadc15bc66006bac7809", "filename": "src/test/rustdoc/type-layout.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftype-layout.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -1,84 +1,84 @@\n // compile-flags: --show-type-layout -Z unstable-options\n \n-// @hastext type_layout/struct.Foo.html 'Size: '\n-// @hastext - ' bytes'\n+// @hasraw type_layout/struct.Foo.html 'Size: '\n+// @hasraw - ' bytes'\n // @has - '//*[@id=\"layout\"]/a[@href=\"#layout\"]' ''\n pub struct Foo {\n     pub a: usize,\n     b: Vec<String>,\n }\n \n-// @hastext type_layout/enum.Bar.html 'Size: '\n-// @hastext - ' bytes'\n+// @hasraw type_layout/enum.Bar.html 'Size: '\n+// @hasraw - ' bytes'\n pub enum Bar<'a> {\n     A(String),\n     B(&'a str, (std::collections::HashMap<String, usize>, Foo)),\n }\n \n-// @hastext type_layout/union.Baz.html 'Size: '\n-// @hastext - ' bytes'\n+// @hasraw type_layout/union.Baz.html 'Size: '\n+// @hasraw - ' bytes'\n pub union Baz {\n     a: &'static str,\n     b: usize,\n     c: &'static [u8],\n }\n \n-// @hastext type_layout/struct.X.html 'Size: '\n-// @hastext - ' bytes'\n+// @hasraw type_layout/struct.X.html 'Size: '\n+// @hasraw - ' bytes'\n pub struct X(usize);\n \n-// @hastext type_layout/struct.Y.html 'Size: '\n-// @hastext - '1 byte'\n+// @hasraw type_layout/struct.Y.html 'Size: '\n+// @hasraw - '1 byte'\n // @!has - ' bytes'\n pub struct Y(u8);\n \n-// @hastext type_layout/struct.Z.html 'Size: '\n-// @hastext - '0 bytes'\n+// @hasraw type_layout/struct.Z.html 'Size: '\n+// @hasraw - '0 bytes'\n pub struct Z;\n \n // We can't compute layout for generic types.\n-// @hastext type_layout/struct.Generic.html 'Unable to compute type layout, possibly due to this type having generic parameters'\n+// @hasraw type_layout/struct.Generic.html 'Unable to compute type layout, possibly due to this type having generic parameters'\n // @!has - 'Size: '\n pub struct Generic<T>(T);\n \n // We *can*, however, compute layout for types that are only generic over lifetimes,\n // because lifetimes are a type-system construct.\n-// @hastext type_layout/struct.GenericLifetimes.html 'Size: '\n-// @hastext - ' bytes'\n+// @hasraw type_layout/struct.GenericLifetimes.html 'Size: '\n+// @hasraw - ' bytes'\n pub struct GenericLifetimes<'a>(&'a str);\n \n-// @hastext type_layout/struct.Unsized.html 'Size: '\n-// @hastext - '(unsized)'\n+// @hasraw type_layout/struct.Unsized.html 'Size: '\n+// @hasraw - '(unsized)'\n pub struct Unsized([u8]);\n \n-// @hastext type_layout/type.TypeAlias.html 'Size: '\n-// @hastext - ' bytes'\n+// @hasraw type_layout/type.TypeAlias.html 'Size: '\n+// @hasraw - ' bytes'\n pub type TypeAlias = X;\n \n-// @hastext type_layout/type.GenericTypeAlias.html 'Size: '\n-// @hastext - '8 bytes'\n+// @hasraw type_layout/type.GenericTypeAlias.html 'Size: '\n+// @hasraw - '8 bytes'\n pub type GenericTypeAlias = (Generic<(u32, ())>, Generic<u32>);\n \n // Regression test for the rustdoc equivalent of #85103.\n-// @hastext type_layout/type.Edges.html 'Encountered an error during type layout; the type failed to be normalized.'\n+// @hasraw type_layout/type.Edges.html 'Encountered an error during type layout; the type failed to be normalized.'\n pub type Edges<'a, E> = std::borrow::Cow<'a, [E]>;\n \n // @!has type_layout/trait.MyTrait.html 'Size: '\n pub trait MyTrait {}\n \n-// @hastext type_layout/enum.Variants.html 'Size: '\n-// @hastext - '2 bytes'\n-// @hastext - '<code>A</code>: 0 bytes'\n-// @hastext - '<code>B</code>: 1 byte'\n+// @hasraw type_layout/enum.Variants.html 'Size: '\n+// @hasraw - '2 bytes'\n+// @hasraw - '<code>A</code>: 0 bytes'\n+// @hasraw - '<code>B</code>: 1 byte'\n pub enum Variants {\n     A,\n     B(u8),\n }\n \n-// @hastext type_layout/enum.WithNiche.html 'Size: '\n+// @hasraw type_layout/enum.WithNiche.html 'Size: '\n // @has - //p '4 bytes'\n-// @hastext - '<code>None</code>: 0 bytes'\n-// @hastext - '<code>Some</code>: 4 bytes'\n+// @hasraw - '<code>None</code>: 0 bytes'\n+// @hasraw - '<code>Some</code>: 4 bytes'\n pub enum WithNiche {\n     None,\n     Some(std::num::NonZeroU32),"}, {"sha": "b68ec4557ad55c7baf3adac783ad4f6f2358ba67", "filename": "src/test/rustdoc/typedef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Ftypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Ftypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftypedef.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -11,7 +11,7 @@ impl MyStruct {\n // @has typedef/type.MyAlias.html\n // @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'impl MyAlias'\n // @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'impl MyTrait for MyAlias'\n-// @hastext - 'Alias docstring'\n+// @hasraw - 'Alias docstring'\n // @has - '//*[@class=\"sidebar\"]//*[@class=\"location\"]' 'MyAlias'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#implementations\"]' 'Methods'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#trait-implementations\"]' 'Trait Implementations'"}, {"sha": "f5eabda59b7820e3bde8fe45e65493de2128d67f", "filename": "src/test/rustdoc/universal-impl-trait.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d53273f81142cbea70e63730f0adc199723153/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs?ref=13d53273f81142cbea70e63730f0adc199723153", "patch": "@@ -5,15 +5,15 @@ use std::borrow::Borrow;\n \n // @has foo/fn.foo.html\n // @has - //pre 'foo('\n-// @matchestext - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Clone\\.html\"'\n-// @matchestext - '_z: .+impl.+trait\\.Copy\\.html.+, impl.+trait\\.Clone\\.html'\n+// @matchesraw - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Clone\\.html\"'\n+// @matchesraw - '_z: .+impl.+trait\\.Copy\\.html.+, impl.+trait\\.Clone\\.html'\n pub fn foo(_x: impl Clone, _y: i32, _z: (impl Copy, impl Clone)) {\n }\n \n pub trait Trait {\n     // @has foo/trait.Trait.html\n-    // @hastext - 'method</a>('\n-    // @matchestext - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n+    // @hasraw - 'method</a>('\n+    // @matchesraw - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n     fn method(&self, _x: impl std::fmt::Debug) {\n     }\n }\n@@ -22,30 +22,30 @@ pub struct S<T>(T);\n \n impl<T> S<T> {\n     // @has foo/struct.S.html\n-    // @hastext - 'bar</a>('\n-    // @matchestext - '_bar: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Copy\\.html\"'\n+    // @hasraw - 'bar</a>('\n+    // @matchesraw - '_bar: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Copy\\.html\"'\n     pub fn bar(_bar: impl Copy) {\n     }\n \n-    // @hastext - 'baz</a>('\n-    // @matchestext - '_baz:.+struct\\.S\\.html.+impl .+trait\\.Clone\\.html'\n+    // @hasraw - 'baz</a>('\n+    // @matchesraw - '_baz:.+struct\\.S\\.html.+impl .+trait\\.Clone\\.html'\n     pub fn baz(_baz: S<impl Clone>) {\n     }\n \n-    // @hastext - 'qux</a>('\n-    // @matchestext - 'trait\\.Read\\.html'\n+    // @hasraw - 'qux</a>('\n+    // @matchesraw - 'trait\\.Read\\.html'\n     pub fn qux(_qux: impl IntoIterator<Item = S<impl Read>>) {\n     }\n }\n \n-// @hastext - 'method</a>('\n-// @matchestext - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n+// @hasraw - 'method</a>('\n+// @matchesraw - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n impl<T> Trait for S<T> {}\n \n // @has foo/fn.much_universe.html\n-// @matchestext - 'T:.+Borrow.+impl .+trait\\.Trait\\.html'\n-// @matchestext - 'U:.+IntoIterator.+= impl.+Iterator\\.html.+= impl.+Clone\\.html'\n-// @matchestext - '_: impl .+trait\\.Read\\.html.+ \\+ .+trait\\.Clone\\.html'\n+// @matchesraw - 'T:.+Borrow.+impl .+trait\\.Trait\\.html'\n+// @matchesraw - 'U:.+IntoIterator.+= impl.+Iterator\\.html.+= impl.+Clone\\.html'\n+// @matchesraw - '_: impl .+trait\\.Read\\.html.+ \\+ .+trait\\.Clone\\.html'\n pub fn much_universe<\n     T: Borrow<impl Trait>,\n     U: IntoIterator<Item = impl Iterator<Item = impl Clone>>,"}]}