{"sha": "5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMDE5N2YxM2EyOGQyYjNkOWFhZGJjNmM1ZDQ4NTA2YWI0ZDY5NmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-01-18T10:47:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-02-06T20:58:01Z"}, "message": "apply various formatting nits", "tree": {"sha": "b65f8f11410d803704a3029bf1237f8ece4fa28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b65f8f11410d803704a3029bf1237f8ece4fa28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f", "html_url": "https://github.com/rust-lang/rust/commit/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bc79c9cf36538a724994db228f94aafb4d4fb53", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc79c9cf36538a724994db228f94aafb4d4fb53", "html_url": "https://github.com/rust-lang/rust/commit/6bc79c9cf36538a724994db228f94aafb4d4fb53"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "e0a8c3b4e654a6f4eae4d9a796776425d644e1f8", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f", "patch": "@@ -83,7 +83,7 @@ pub enum RegionResolutionError<'tcx> {\n     ),\n \n     /// Indicates a `'b: 'a` constraint where `'a` is in a universe that\n-    /// cannot name the placeholder `'b`\n+    /// cannot name the placeholder `'b`.\n     UpperBoundUniverseConflict(\n         RegionVid,\n         RegionVariableOrigin,\n@@ -449,7 +449,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             return true;\n         }\n \n-        // If both a and b are free, consult the declared\n+        // If both `a` and `b` are free, consult the declared\n         // relationships.  Note that this can be more precise than the\n         // `lub` relationship defined below, since sometimes the \"lub\"\n         // is actually the `postdom_upper_bound` (see\n@@ -460,7 +460,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         }\n \n         // For other cases, leverage the LUB code to find the LUB and\n-        // check if it is equal to b.\n+        // check if it is equal to `b`.\n         self.lub_concrete_regions(a, b) == b\n     }\n \n@@ -491,7 +491,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n \n             (&ReStatic, _) | (_, &ReStatic) => {\n-                // nothing lives longer than static\n+                // nothing lives longer than `'static`\n                 self.tcx().lifetimes.re_static\n             }\n \n@@ -501,14 +501,14 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             | (r @ ReFree(_), &ReEmpty(_))\n             | (&ReEmpty(_), r @ ReScope(_))\n             | (r @ ReScope(_), &ReEmpty(_)) => {\n-                // all empty regions are less than early-bound, free,\n-                // and scope regions\n+                // All empty regions are less than early-bound, free,\n+                // and scope regions.\n                 r\n             }\n \n             (&ReEmpty(a_ui), &ReEmpty(b_ui)) => {\n-                // empty regions are ordered according to the universe\n-                // they are associated with\n+                // Empty regions are ordered according to the universe\n+                // they are associated with.\n                 let ui = a_ui.min(b_ui);\n                 self.tcx().mk_region(ReEmpty(ui))\n             }"}, {"sha": "a2c99064caa4e0c6b0e4ee79d70bb039789b41f2", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f", "patch": "@@ -68,7 +68,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n             // being tested is `'empty`.\n             VerifyBound::IsEmpty\n         } else {\n-            // If we can find any other bound R such that `T: R`, then\n+            // If we can find any other bound `R` such that `T: R`, then\n             // we don't need to check for `'empty`, because `R: 'empty`.\n             VerifyBound::AnyBound(any_bounds)\n         }"}, {"sha": "f104cb084e65ec097fda4fb1c84d294302d4d0b1", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f", "patch": "@@ -173,10 +173,10 @@ pub struct CommonTypes<'tcx> {\n }\n \n pub struct CommonLifetimes<'tcx> {\n-    /// ReEmpty in the root universe\n+    /// `ReEmpty` in the root universe.\n     pub re_root_empty: Region<'tcx>,\n \n-    /// ReStatic\n+    /// `ReStatic`\n     pub re_static: Region<'tcx>,\n \n     /// Erased region, used after type-checking"}, {"sha": "2ab12a4acbfa4affd6c5658da0a614b352f1c9e7", "filename": "src/librustc/ty/free_region_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f/src%2Flibrustc%2Fty%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f/src%2Flibrustc%2Fty%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffree_region_map.rs?ref=5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> FreeRegionMap<'tcx> {\n         }\n     }\n \n-    /// Check whether `r_a <= r_b` is found in the relation\n+    /// Check whether `r_a <= r_b` is found in the relation.\n     fn check_relation(&self, r_a: Region<'tcx>, r_b: Region<'tcx>) -> bool {\n         r_a == r_b || self.relation.contains(&r_a, &r_b)\n     }"}, {"sha": "9414c78c781d6ccae3115c1a716a3296d12da0bb", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5e0197f13a28d2b3d9aadbc6c5d48506ab4d696f", "patch": "@@ -1415,9 +1415,9 @@ pub enum RegionKind {\n     /// Empty lifetime is for data that is never accessed.  We tag the\n     /// empty lifetime with a universe -- the idea is that we don't\n     /// want `exists<'a> { forall<'b> { 'b: 'a } }` to be satisfiable.\n-    /// Therefore, the `'empty` in a universe U is less than all\n-    /// regions visible from U, but not less than regions not visible\n-    /// from U.\n+    /// Therefore, the `'empty` in a universe `U` is less than all\n+    /// regions visible from `U`, but not less than regions not visible\n+    /// from `U`.\n     ReEmpty(ty::UniverseIndex),\n \n     /// Erased region, used by trait selection, in MIR and during codegen."}]}