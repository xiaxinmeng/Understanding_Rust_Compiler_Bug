{"sha": "57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YzBlZDA5N2NlMTUwZmExZDY4NGI1YjNiNTQ3OWE1ZGVkZDJiN2I=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-14T12:42:00Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-17T08:17:28Z"}, "message": "Avoid interpolated token trees.", "tree": {"sha": "5415d467292eac15b8ef9472834d53ec5fb2f479", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5415d467292eac15b8ef9472834d53ec5fb2f479"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b", "html_url": "https://github.com/rust-lang/rust/commit/57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a9248fc1525e619d4ffb2b895a8d15c4bf90de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9248fc1525e619d4ffb2b895a8d15c4bf90de8", "html_url": "https://github.com/rust-lang/rust/commit/6a9248fc1525e619d4ffb2b895a8d15c4bf90de8"}], "stats": {"total": 46, "additions": 9, "deletions": 37}, "files": [{"sha": "834ece97af544176a6ff38c518a6ac17078d3a80", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b", "patch": "@@ -480,23 +480,8 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n     match name {\n         \"tt\" => {\n             p.quote_depth += 1; //but in theory, non-quoted tts might be useful\n-            let mut tt = panictry!(p.parse_token_tree());\n+            let tt = panictry!(p.parse_token_tree());\n             p.quote_depth -= 1;\n-            while let TokenTree::Token(sp, token::Interpolated(nt)) = tt {\n-                if let token::NtTT(..) = *nt {\n-                    match Rc::try_unwrap(nt) {\n-                        Ok(token::NtTT(sub_tt)) => tt = sub_tt,\n-                        Ok(_) => unreachable!(),\n-                        Err(nt_rc) => match *nt_rc {\n-                            token::NtTT(ref sub_tt) => tt = sub_tt.clone(),\n-                            _ => unreachable!(),\n-                        },\n-                    }\n-                } else {\n-                    tt = TokenTree::Token(sp, token::Interpolated(nt.clone()));\n-                    break\n-                }\n-            }\n             return token::NtTT(tt);\n         }\n         _ => {}"}, {"sha": "38becbe7b1d30a31a5ba0869f065adfd1fcad786", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b", "patch": "@@ -12,7 +12,7 @@ use self::LockstepIterSize::*;\n use ast::Ident;\n use errors::Handler;\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n-use parse::token::{self, MatchNt, SubstNt, Token, NtIdent};\n+use parse::token::{self, MatchNt, SubstNt, Token, NtIdent, NtTT};\n use syntax_pos::{Span, DUMMY_SP};\n use tokenstream::{self, TokenTree};\n use util::small_vector::SmallVector;\n@@ -241,6 +241,7 @@ fn tt_next_token(r: &mut TtReader, prev_span: Span) -> Option<TokenTree> {\n                             NtIdent(ref sn) => {\n                                 return Some(TokenTree::Token(sn.span, token::Ident(sn.node)));\n                             }\n+                            NtTT(ref tt) => return Some(tt.clone()),\n                             _ => {\n                                 // FIXME(pcwalton): Bad copy\n                                 return Some(TokenTree::Token(sp, token::Interpolated(nt.clone())));"}, {"sha": "f958cedd286f3ef964d1f938fb3d4485d3b13c1a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=57c0ed097ce150fa1d684b5b3b5479a5dedd2b7b", "patch": "@@ -306,8 +306,8 @@ impl<'a> Parser<'a> {\n     }\n \n     fn next_tok(&mut self) -> TokenAndSpan {\n-        'outer: loop {\n-            let mut tok = if let Some((tts, i)) = self.tts.pop() {\n+        loop {\n+            let tok = if let Some((tts, i)) = self.tts.pop() {\n                 let tt = tts.get_tt(i);\n                 if i + 1 < tts.len() {\n                     self.tts.push((tts, i + 1));\n@@ -322,25 +322,11 @@ impl<'a> Parser<'a> {\n                 TokenAndSpan { tok: token::Eof, sp: self.span }\n             };\n \n-            loop {\n-                let nt = match tok.tok {\n-                    token::Interpolated(ref nt) => nt.clone(),\n-                    token::DocComment(name) if self.desugar_doc_comments => {\n-                        self.tts.push((TokenTree::Token(tok.sp, token::DocComment(name)), 0));\n-                        continue 'outer\n-                    }\n-                    _ => return tok,\n-                };\n-                match *nt {\n-                    token::NtTT(TokenTree::Token(sp, ref t)) => {\n-                        tok = TokenAndSpan { tok: t.clone(), sp: sp };\n-                    }\n-                    token::NtTT(ref tt) => {\n-                        self.tts.push((tt.clone(), 0));\n-                        continue 'outer\n-                    }\n-                    _ => return tok,\n+            match tok.tok {\n+                token::DocComment(name) if self.desugar_doc_comments => {\n+                    self.tts.push((TokenTree::Token(tok.sp, token::DocComment(name)), 0));\n                 }\n+                _ => return tok,\n             }\n         }\n     }"}]}