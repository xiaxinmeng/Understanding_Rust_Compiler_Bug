{"sha": "9635d8bc44cf58875e97e9e77c3426f746ab7007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MzVkOGJjNDRjZjU4ODc1ZTk3ZTllNzdjMzQyNmY3NDZhYjcwMDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-09T18:07:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-09T18:07:28Z"}, "message": "Merge #3901\n\n3901: Add more heuristics for hiding obvious param hints r=matklad a=IceSentry\n\nThis will now hide `value`, `pat`, `rhs` and `other`. These words were selected from the std because they are used in commonly used functions with only a single param and are obvious by their use.\r\n\r\nIt will also hide the hint if the passed param **starts** or end with the param_name. Maybe we could also split on '_' and check if one of the string is the param_name.\r\n\r\nI think it would be good to also hide `bytes` if the type is `[u8; n]` but I'm not sure how to get the param type signature.\r\n\r\nCloses #3900 \r\n\r\n\n\nCo-authored-by: IceSentry <c.giguere42@gmail.com>", "tree": {"sha": "09c5242d219f8a289936318d85b4daad8d2ae50b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09c5242d219f8a289936318d85b4daad8d2ae50b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9635d8bc44cf58875e97e9e77c3426f746ab7007", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJej2RgCRBK7hj4Ov3rIwAAdHIIAGGYDJXfbH/PmS7SY+vC6N40\nQcfSsW2EXWhjQuJetMDXl5/aXx+TvQZwD837PetqC3Xl2/XgwhHMeID6LEyd410B\nC+JIq/azIWtk+xf/qqpjbx0ExvCn4GKso1kvLZXtl0uFDobbV3vt7kZTsh+U3ZwD\nNFB96RnflofiX3C9HJHsTenI6mvJAtneLttpatJDpcd8z2h55mAxQuxwZoim2rrS\n0lVyhR06VNKiOdNIQo5G04GB2wAcAzfTX67VjZ53k50Pj3tUbimT/DW1Attn7UEE\nK6utq8KARsrKSOtbpSttjBQB8Bk8C+9zaWLwDyQdRQ+Q4W4lxG1p1Lmb0HGOD1M=\n=IZ5x\n-----END PGP SIGNATURE-----\n", "payload": "tree 09c5242d219f8a289936318d85b4daad8d2ae50b\nparent dde9488559514e7d039cec9407e1f8627f665cd0\nparent ebc61709c86a9bfceafecc0b6ed9cc4f4624e0fe\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586455648 +0000\ncommitter GitHub <noreply@github.com> 1586455648 +0000\n\nMerge #3901\n\n3901: Add more heuristics for hiding obvious param hints r=matklad a=IceSentry\n\nThis will now hide `value`, `pat`, `rhs` and `other`. These words were selected from the std because they are used in commonly used functions with only a single param and are obvious by their use.\r\n\r\nIt will also hide the hint if the passed param **starts** or end with the param_name. Maybe we could also split on '_' and check if one of the string is the param_name.\r\n\r\nI think it would be good to also hide `bytes` if the type is `[u8; n]` but I'm not sure how to get the param type signature.\r\n\r\nCloses #3900 \r\n\r\n\n\nCo-authored-by: IceSentry <c.giguere42@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9635d8bc44cf58875e97e9e77c3426f746ab7007", "html_url": "https://github.com/rust-lang/rust/commit/9635d8bc44cf58875e97e9e77c3426f746ab7007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9635d8bc44cf58875e97e9e77c3426f746ab7007/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dde9488559514e7d039cec9407e1f8627f665cd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dde9488559514e7d039cec9407e1f8627f665cd0", "html_url": "https://github.com/rust-lang/rust/commit/dde9488559514e7d039cec9407e1f8627f665cd0"}, {"sha": "ebc61709c86a9bfceafecc0b6ed9cc4f4624e0fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc61709c86a9bfceafecc0b6ed9cc4f4624e0fe", "html_url": "https://github.com/rust-lang/rust/commit/ebc61709c86a9bfceafecc0b6ed9cc4f4624e0fe"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "da9f55a6965f8201e3990941d82537c82bde6025", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9635d8bc44cf58875e97e9e77c3426f746ab7007/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635d8bc44cf58875e97e9e77c3426f746ab7007/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=9635d8bc44cf58875e97e9e77c3426f746ab7007", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! This module defines multiple types of inlay hints and their visibility\n \n use hir::{Adt, HirDisplay, Semantics, Type};\n use ra_ide_db::RootDatabase;\n@@ -235,8 +235,7 @@ fn should_show_param_hint(\n     param_name: &str,\n     argument: &ast::Expr,\n ) -> bool {\n-    let argument_string = argument.syntax().to_string();\n-    if param_name.is_empty() || argument_string.ends_with(param_name) {\n+    if param_name.is_empty() || is_argument_similar_to_param(argument, param_name) {\n         return false;\n     }\n \n@@ -245,14 +244,37 @@ fn should_show_param_hint(\n     } else {\n         fn_signature.parameters.len()\n     };\n+\n     // avoid displaying hints for common functions like map, filter, etc.\n-    if parameters_len == 1 && (param_name.len() == 1 || param_name == \"predicate\") {\n+    // or other obvious words used in std\n+    if parameters_len == 1 && is_obvious_param(param_name) {\n         return false;\n     }\n-\n     true\n }\n \n+fn is_argument_similar_to_param(argument: &ast::Expr, param_name: &str) -> bool {\n+    let argument_string = remove_ref(argument.clone()).syntax().to_string();\n+    argument_string.starts_with(&param_name) || argument_string.ends_with(&param_name)\n+}\n+\n+fn remove_ref(expr: ast::Expr) -> ast::Expr {\n+    if let ast::Expr::RefExpr(ref_expr) = &expr {\n+        if let Some(inner) = ref_expr.expr() {\n+            return inner;\n+        }\n+    }\n+    expr\n+}\n+\n+fn is_obvious_param(param_name: &str) -> bool {\n+    let is_obvious_param_name = match param_name {\n+        \"predicate\" | \"value\" | \"pat\" | \"rhs\" | \"other\" => true,\n+        _ => false,\n+    };\n+    param_name.len() == 1 || is_obvious_param_name\n+}\n+\n fn get_fn_signature(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<FunctionSignature> {\n     match expr {\n         ast::Expr::CallExpr(expr) => {\n@@ -1059,21 +1081,39 @@ impl Test {\n         self\n     }\n \n+    fn field(self, value: i32) -> Self {\n+        self\n+    }\n+\n     fn no_hints_expected(&self, _: i32, test_var: i32) {}\n }\n \n+struct Param {}\n+\n+fn different_order(param: &Param) {}\n+fn different_order_mut(param: &mut Param) {}\n+\n fn main() {\n     let container: TestVarContainer = TestVarContainer { test_var: 42 };\n     let test: Test = Test {};\n \n     map(22);\n     filter(33);\n \n-    let test_processed: Test = test.map(1).filter(2);\n+    let test_processed: Test = test.map(1).filter(2).field(3);\n \n     let test_var: i32 = 55;\n     test_processed.no_hints_expected(22, test_var);\n     test_processed.no_hints_expected(33, container.test_var);\n+\n+    let param_begin: Param = Param {};\n+    different_order(&param_begin);\n+    different_order(&mut param_begin);\n+\n+    let a: f64 = 7.0;\n+    let b: f64 = 4.0;\n+    let _: f64 = a.div_euclid(b);\n+    let _: f64 = a.abs_sub(b);\n }\"#,\n         );\n "}]}