{"sha": "4b577e2bc847a791d87634b011856cd835d75947", "node_id": "C_kwDOAAsO6NoAKDRiNTc3ZTJiYzg0N2E3OTFkODc2MzRiMDExODU2Y2Q4MzVkNzU5NDc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-18T09:06:05Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-18T09:06:05Z"}, "message": "Support c string literals", "tree": {"sha": "26fa9ac22fa64dbc7319c9e2ef57807e3c65e86f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26fa9ac22fa64dbc7319c9e2ef57807e3c65e86f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b577e2bc847a791d87634b011856cd835d75947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b577e2bc847a791d87634b011856cd835d75947", "html_url": "https://github.com/rust-lang/rust/commit/4b577e2bc847a791d87634b011856cd835d75947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b577e2bc847a791d87634b011856cd835d75947/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099b5b3b150a6cca3faffcf854d0ff798beed610", "url": "https://api.github.com/repos/rust-lang/rust/commits/099b5b3b150a6cca3faffcf854d0ff798beed610", "html_url": "https://github.com/rust-lang/rust/commit/099b5b3b150a6cca3faffcf854d0ff798beed610"}], "stats": {"total": 210, "additions": 176, "deletions": 34}, "files": [{"sha": "8f1e6c3bbdccddef2b5f5fcd0210324dc6710281", "filename": "crates/hir-def/src/body/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -611,6 +611,7 @@ impl<'a> Printer<'a> {\n         match literal {\n             Literal::String(it) => w!(self, \"{:?}\", it),\n             Literal::ByteString(it) => w!(self, \"\\\"{}\\\"\", it.escape_ascii()),\n+            Literal::CString(it) => w!(self, \"\\\"{}\\\\0\\\"\", it),\n             Literal::Char(it) => w!(self, \"'{}'\", it.escape_debug()),\n             Literal::Bool(it) => w!(self, \"{}\", it),\n             Literal::Int(i, suffix) => {"}, {"sha": "27150d8623cd7f1b221e71d77e460bd412970482", "filename": "crates/hir-def/src/hir.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fhir-def%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fhir-def%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fhir.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -85,6 +85,7 @@ impl fmt::Display for FloatTypeWrapper {\n pub enum Literal {\n     String(Box<str>),\n     ByteString(Box<[u8]>),\n+    CString(Box<str>),\n     Char(char),\n     Bool(bool),\n     Int(i128, Option<BuiltinInt>),\n@@ -135,6 +136,10 @@ impl From<ast::LiteralKind> for Literal {\n                 let text = s.value().map(Box::from).unwrap_or_else(Default::default);\n                 Literal::String(text)\n             }\n+            LiteralKind::CString(s) => {\n+                let text = s.value().map(Box::from).unwrap_or_else(Default::default);\n+                Literal::CString(text)\n+            }\n             LiteralKind::Byte(b) => {\n                 Literal::Uint(b.value().unwrap_or_default() as u128, Some(BuiltinUint::U8))\n             }"}, {"sha": "385766fdad0bfbcb4dfb4c11e28b9fdc6a21c3d2", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -815,7 +815,7 @@ impl<'a> InferenceContext<'a> {\n             Expr::Array(array) => self.infer_expr_array(array, expected),\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => self.result.standard_types.bool_.clone(),\n-                Literal::String(..) => {\n+                Literal::String(..) | Literal::CString(..) => {\n                     TyKind::Ref(Mutability::Not, static_lifetime(), TyKind::Str.intern(Interner))\n                         .intern(Interner)\n                 }"}, {"sha": "18b05fcf3c7ef054abb486038c92557504502b6f", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -428,9 +428,10 @@ fn is_non_ref_pat(body: &hir_def::body::Body, pat: PatId) -> bool {\n         // FIXME: ConstBlock/Path/Lit might actually evaluate to ref, but inference is unimplemented.\n         Pat::Path(..) => true,\n         Pat::ConstBlock(..) => true,\n-        Pat::Lit(expr) => {\n-            !matches!(body[*expr], Expr::Literal(Literal::String(..) | Literal::ByteString(..)))\n-        }\n+        Pat::Lit(expr) => !matches!(\n+            body[*expr],\n+            Expr::Literal(Literal::String(..) | Literal::CString(..) | Literal::ByteString(..))\n+        ),\n         Pat::Wild | Pat::Bind { .. } | Pat::Ref { .. } | Pat::Box { .. } | Pat::Missing => false,\n     }\n }"}, {"sha": "051ae228e22f96cd10665cadde5524751f6d8f48", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -1112,15 +1112,24 @@ impl<'ctx> MirLowerCtx<'ctx> {\n         let bytes = match l {\n             hir_def::hir::Literal::String(b) => {\n                 let b = b.as_bytes();\n-                let mut data = vec![];\n+                let mut data = Vec::with_capacity(mem::size_of::<usize>() * 2);\n                 data.extend(0usize.to_le_bytes());\n                 data.extend(b.len().to_le_bytes());\n                 let mut mm = MemoryMap::default();\n                 mm.insert(0, b.to_vec());\n                 return Ok(Operand::from_concrete_const(data, mm, ty));\n             }\n+            hir_def::hir::Literal::CString(b) => {\n+                let b = b.as_bytes();\n+                let mut data = Vec::with_capacity(mem::size_of::<usize>() * 2);\n+                data.extend(0usize.to_le_bytes());\n+                data.extend(b.len().to_le_bytes());\n+                let mut mm = MemoryMap::default();\n+                mm.insert(0, b.iter().copied().chain(iter::once(0)).collect::<Vec<_>>());\n+                return Ok(Operand::from_concrete_const(data, mm, ty));\n+            }\n             hir_def::hir::Literal::ByteString(b) => {\n-                let mut data = vec![];\n+                let mut data = Vec::with_capacity(mem::size_of::<usize>() * 2);\n                 data.extend(0usize.to_le_bytes());\n                 data.extend(b.len().to_le_bytes());\n                 let mut mm = MemoryMap::default();"}, {"sha": "40ee4771d170760e5bf421ac0bc62d66729f7cf4", "filename": "crates/ide-assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -20,6 +20,7 @@ use crate::{utils::required_hashes, AssistContext, AssistId, AssistKind, Assists\n // }\n // ```\n pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    // FIXME: This should support byte and c strings as well.\n     let token = ctx.find_token_at_offset::<ast::String>()?;\n     if token.is_raw() {\n         return None;"}, {"sha": "f906182224468be44c703e2689df141ebe6c304c", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -39,7 +39,7 @@ fn try_extend_selection(\n ) -> Option<TextRange> {\n     let range = frange.range;\n \n-    let string_kinds = [COMMENT, STRING, BYTE_STRING];\n+    let string_kinds = [COMMENT, STRING, BYTE_STRING, C_STRING];\n     let list_kinds = [\n         RECORD_PAT_FIELD_LIST,\n         MATCH_ARM_LIST,"}, {"sha": "8c02fe81648a536694d1412abdeefd855d5df26a", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -16,7 +16,10 @@ mod tests;\n use hir::{Name, Semantics};\n use ide_db::{FxHashMap, RootDatabase, SymbolKind};\n use syntax::{\n-    ast, AstNode, AstToken, NodeOrToken, SyntaxKind::*, SyntaxNode, TextRange, WalkEvent, T,\n+    ast::{self, IsString},\n+    AstNode, AstToken, NodeOrToken,\n+    SyntaxKind::*,\n+    SyntaxNode, TextRange, WalkEvent, T,\n };\n \n use crate::{\n@@ -440,7 +443,17 @@ fn traverse(\n                 && ast::ByteString::can_cast(descended_token.kind())\n             {\n                 if let Some(byte_string) = ast::ByteString::cast(token) {\n-                    highlight_escape_string(hl, &byte_string, range.start());\n+                    if !byte_string.is_raw() {\n+                        highlight_escape_string(hl, &byte_string, range.start());\n+                    }\n+                }\n+            } else if ast::CString::can_cast(token.kind())\n+                && ast::CString::can_cast(descended_token.kind())\n+            {\n+                if let Some(c_string) = ast::CString::cast(token) {\n+                    if !c_string.is_raw() {\n+                        highlight_escape_string(hl, &c_string, range.start());\n+                    }\n                 }\n             } else if ast::Char::can_cast(token.kind())\n                 && ast::Char::can_cast(descended_token.kind())"}, {"sha": "925057ffaa090330be9244b1760d2e34a393d02d", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -26,7 +26,7 @@ pub(super) fn token(sema: &Semantics<'_, RootDatabase>, token: SyntaxToken) -> O\n     }\n \n     let highlight: Highlight = match token.kind() {\n-        STRING | BYTE_STRING => HlTag::StringLiteral.into(),\n+        STRING | BYTE_STRING | C_STRING => HlTag::StringLiteral.into(),\n         INT_NUMBER if token.parent_ancestors().nth(1).map(|it| it.kind()) == Some(FIELD_EXPR) => {\n             SymbolKind::Field.into()\n         }"}, {"sha": "df1971242657d0917d7a71bc311b8793f04fa562", "filename": "crates/ide/src/syntax_tree.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -1,5 +1,7 @@\n-use ide_db::base_db::{FileId, SourceDatabase};\n-use ide_db::RootDatabase;\n+use ide_db::{\n+    base_db::{FileId, SourceDatabase},\n+    RootDatabase,\n+};\n use syntax::{\n     AstNode, NodeOrToken, SourceFile, SyntaxKind::STRING, SyntaxToken, TextRange, TextSize,\n };"}, {"sha": "3cf9c4dd4b07afc2f35d7943a2bf5186190a5e92", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -12,6 +12,8 @@ use super::*;\n //     let _ = r\"d\";\n //     let _ = b\"e\";\n //     let _ = br\"f\";\n+//     let _ = c\"g\";\n+//     let _ = cr\"h\";\n // }\n pub(crate) const LITERAL_FIRST: TokenSet = TokenSet::new(&[\n     T![true],\n@@ -22,6 +24,7 @@ pub(crate) const LITERAL_FIRST: TokenSet = TokenSet::new(&[\n     CHAR,\n     STRING,\n     BYTE_STRING,\n+    C_STRING,\n ]);\n \n pub(crate) fn literal(p: &mut Parser<'_>) -> Option<CompletedMarker> {"}, {"sha": "e589b69934d23d0f701120cfa0dce54d3700d85e", "filename": "crates/parser/src/grammar/generic_args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -28,6 +28,7 @@ const GENERIC_ARG_FIRST: TokenSet = TokenSet::new(&[\n     BYTE,\n     STRING,\n     BYTE_STRING,\n+    C_STRING,\n ])\n .union(types::TYPE_FIRST);\n "}, {"sha": "e4dce21f32abebdc44ea35154c32f9c877a7b22f", "filename": "crates/parser/src/lexed_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fparser%2Fsrc%2Flexed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fparser%2Fsrc%2Flexed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flexed_str.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -277,7 +277,7 @@ impl<'a> Converter<'a> {\n                 if !terminated {\n                     err = \"Missing trailing `\\\"` symbol to terminate the string literal\";\n                 }\n-                STRING\n+                C_STRING\n             }\n             rustc_lexer::LiteralKind::RawStr { n_hashes } => {\n                 if n_hashes.is_none() {\n@@ -295,7 +295,7 @@ impl<'a> Converter<'a> {\n                 if n_hashes.is_none() {\n                     err = \"Invalid raw string literal\";\n                 }\n-                STRING\n+                C_STRING\n             }\n         };\n "}, {"sha": "fe73d9dfe4a750f4a753e5342a86bf73d31c9730", "filename": "crates/parser/test_data/parser/inline/ok/0085_expr_literals.rast", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -131,6 +131,30 @@ SOURCE_FILE\n           LITERAL\n             BYTE_STRING \"br\\\"f\\\"\"\n           SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          WILDCARD_PAT\n+            UNDERSCORE \"_\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          LITERAL\n+            C_STRING \"c\\\"g\\\"\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          WILDCARD_PAT\n+            UNDERSCORE \"_\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          LITERAL\n+            C_STRING \"cr\\\"h\\\"\"\n+          SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}, {"sha": "e7f235a83b92c54c9eb37f2c83d3cb947f482430", "filename": "crates/parser/test_data/parser/inline/ok/0085_expr_literals.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -9,4 +9,6 @@ fn foo() {\n     let _ = r\"d\";\n     let _ = b\"e\";\n     let _ = br\"f\";\n+    let _ = c\"g\";\n+    let _ = cr\"h\";\n }"}, {"sha": "1eef28611652fc89c5af56533afe033fbbd55103", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -288,6 +288,7 @@ impl ast::ArrayExpr {\n pub enum LiteralKind {\n     String(ast::String),\n     ByteString(ast::ByteString),\n+    CString(ast::CString),\n     IntNumber(ast::IntNumber),\n     FloatNumber(ast::FloatNumber),\n     Char(ast::Char),\n@@ -319,6 +320,9 @@ impl ast::Literal {\n         if let Some(t) = ast::ByteString::cast(token.clone()) {\n             return LiteralKind::ByteString(t);\n         }\n+        if let Some(t) = ast::CString::cast(token.clone()) {\n+            return LiteralKind::CString(t);\n+        }\n         if let Some(t) = ast::Char::cast(token.clone()) {\n             return LiteralKind::Char(t);\n         }"}, {"sha": "f5863e9efe0da609e685af2df6a5c004d41373ad", "filename": "crates/syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -90,6 +90,27 @@ impl AstToken for ByteString {\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct CString {\n+    pub(crate) syntax: SyntaxToken,\n+}\n+impl std::fmt::Display for CString {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(&self.syntax, f)\n+    }\n+}\n+impl AstToken for CString {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == C_STRING }\n+    fn cast(syntax: SyntaxToken) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct IntNumber {\n     pub(crate) syntax: SyntaxToken,"}, {"sha": "090eb89f4704017432994538eaa53a905295f42f", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 57, "deletions": 14, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -145,6 +145,10 @@ impl QuoteOffsets {\n }\n \n pub trait IsString: AstToken {\n+    const RAW_PREFIX: &'static str;\n+    fn is_raw(&self) -> bool {\n+        self.text().starts_with(Self::RAW_PREFIX)\n+    }\n     fn quote_offsets(&self) -> Option<QuoteOffsets> {\n         let text = self.text();\n         let offsets = QuoteOffsets::new(text)?;\n@@ -183,20 +187,18 @@ pub trait IsString: AstToken {\n             cb(text_range + offset, unescaped_char);\n         });\n     }\n-}\n-\n-impl IsString for ast::String {}\n-\n-impl ast::String {\n-    pub fn is_raw(&self) -> bool {\n-        self.text().starts_with('r')\n-    }\n-    pub fn map_range_up(&self, range: TextRange) -> Option<TextRange> {\n+    fn map_range_up(&self, range: TextRange) -> Option<TextRange> {\n         let contents_range = self.text_range_between_quotes()?;\n         assert!(TextRange::up_to(contents_range.len()).contains_range(range));\n         Some(range + contents_range.start())\n     }\n+}\n \n+impl IsString for ast::String {\n+    const RAW_PREFIX: &'static str = \"r\";\n+}\n+\n+impl ast::String {\n     pub fn value(&self) -> Option<Cow<'_, str>> {\n         if self.is_raw() {\n             let text = self.text();\n@@ -235,13 +237,11 @@ impl ast::String {\n     }\n }\n \n-impl IsString for ast::ByteString {}\n+impl IsString for ast::ByteString {\n+    const RAW_PREFIX: &'static str = \"br\";\n+}\n \n impl ast::ByteString {\n-    pub fn is_raw(&self) -> bool {\n-        self.text().starts_with(\"br\")\n-    }\n-\n     pub fn value(&self) -> Option<Cow<'_, [u8]>> {\n         if self.is_raw() {\n             let text = self.text();\n@@ -280,6 +280,49 @@ impl ast::ByteString {\n     }\n }\n \n+impl IsString for ast::CString {\n+    const RAW_PREFIX: &'static str = \"cr\";\n+}\n+\n+impl ast::CString {\n+    pub fn value(&self) -> Option<Cow<'_, str>> {\n+        if self.is_raw() {\n+            let text = self.text();\n+            let text =\n+                &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n+            return Some(Cow::Borrowed(text));\n+        }\n+\n+        let text = self.text();\n+        let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n+\n+        let mut buf = String::new();\n+        let mut prev_end = 0;\n+        let mut has_error = false;\n+        unescape_literal(text, Mode::Str, &mut |char_range, unescaped_char| match (\n+            unescaped_char,\n+            buf.capacity() == 0,\n+        ) {\n+            (Ok(c), false) => buf.push(c),\n+            (Ok(_), true) if char_range.len() == 1 && char_range.start == prev_end => {\n+                prev_end = char_range.end\n+            }\n+            (Ok(c), true) => {\n+                buf.reserve_exact(text.len());\n+                buf.push_str(&text[..prev_end]);\n+                buf.push(c);\n+            }\n+            (Err(_), _) => has_error = true,\n+        });\n+\n+        match (has_error, buf.capacity() == 0) {\n+            (true, _) => None,\n+            (false, true) => Some(Cow::Borrowed(text)),\n+            (false, false) => Some(Cow::Owned(buf)),\n+        }\n+    }\n+}\n+\n impl ast::IntNumber {\n     pub fn radix(&self) -> Radix {\n         match self.text().get(..2).unwrap_or_default() {"}, {"sha": "45e5916098282e8216ff8dc5a208e8518fdd3c86", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -39,7 +39,7 @@ fn reparse_token(\n     let prev_token = root.covering_element(edit.delete).as_token()?.clone();\n     let prev_token_kind = prev_token.kind();\n     match prev_token_kind {\n-        WHITESPACE | COMMENT | IDENT | STRING => {\n+        WHITESPACE | COMMENT | IDENT | STRING | BYTE_STRING | C_STRING => {\n             if prev_token_kind == WHITESPACE || prev_token_kind == COMMENT {\n                 // removing a new line may extends previous token\n                 let deleted_range = edit.delete - prev_token.text_range().start();"}, {"sha": "c49c5fa108b6268e67feb7bd47233b151e3909fa", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -573,10 +573,11 @@ impl Field {\n \n fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc {\n-        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumber Char Byte Ident\"\n-            .split_ascii_whitespace()\n-            .map(|it| it.to_string())\n-            .collect::<Vec<_>>(),\n+        tokens:\n+            \"Whitespace Comment String ByteString CString IntNumber FloatNumber Char Byte Ident\"\n+                .split_ascii_whitespace()\n+                .map(|it| it.to_string())\n+                .collect::<Vec<_>>(),\n         ..Default::default()\n     };\n "}, {"sha": "e0ec6a242ffa76176cb2182860ce1e4c695e1e17", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b577e2bc847a791d87634b011856cd835d75947/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=4b577e2bc847a791d87634b011856cd835d75947", "patch": "@@ -9,7 +9,7 @@ use rustc_lexer::unescape::{self, unescape_literal, Mode};\n \n use crate::{\n     algo,\n-    ast::{self, HasAttrs, HasVisibility},\n+    ast::{self, HasAttrs, HasVisibility, IsString},\n     match_ast, AstNode, SyntaxError,\n     SyntaxKind::{CONST, FN, INT_NUMBER, TYPE_ALIAS},\n     SyntaxNode, SyntaxToken, TextSize, T,\n@@ -156,6 +156,17 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                 }\n             }\n         }\n+        ast::LiteralKind::CString(s) => {\n+            if !s.is_raw() {\n+                if let Some(without_quotes) = unquote(text, 2, '\"') {\n+                    unescape_literal(without_quotes, Mode::ByteStr, &mut |range, char| {\n+                        if let Err(err) = char {\n+                            push_err(1, range.start, err);\n+                        }\n+                    });\n+                }\n+            }\n+        }\n         ast::LiteralKind::Char(_) => {\n             if let Some(without_quotes) = unquote(text, 1, '\\'') {\n                 unescape_literal(without_quotes, Mode::Char, &mut |range, char| {"}]}