{"sha": "fffbcc8d2995987823dfcda341f4102818d508d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZmJjYzhkMjk5NTk4NzgyM2RmY2RhMzQxZjQxMDI4MThkNTA4ZDI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-02T20:46:51Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-02T20:58:23Z"}, "message": "Place TLS initializers with relocations in .tdata", "tree": {"sha": "ea91a70ebf91832dfe96f903d7fbf8381a8351db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea91a70ebf91832dfe96f903d7fbf8381a8351db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fffbcc8d2995987823dfcda341f4102818d508d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fffbcc8d2995987823dfcda341f4102818d508d2", "html_url": "https://github.com/rust-lang/rust/commit/fffbcc8d2995987823dfcda341f4102818d508d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fffbcc8d2995987823dfcda341f4102818d508d2/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f72ce1b271b40a5652049362e6aab5914f7b1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f72ce1b271b40a5652049362e6aab5914f7b1d3", "html_url": "https://github.com/rust-lang/rust/commit/0f72ce1b271b40a5652049362e6aab5914f7b1d3"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "6fe5ad37f30ab35167db840b7f667e5fd72e8e90", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fffbcc8d2995987823dfcda341f4102818d508d2/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffbcc8d2995987823dfcda341f4102818d508d2/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=fffbcc8d2995987823dfcda341f4102818d508d2", "patch": "@@ -437,24 +437,21 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                 //\n                 // We could remove this hack whenever we decide to drop macOS 10.10 support.\n                 if self.tcx.sess.target.target.options.is_like_osx {\n-                    assert_eq!(alloc.relocations().len(), 0);\n-\n-                    let is_zeroed = {\n-                        // Treats undefined bytes as if they were defined with the byte value that\n-                        // happens to be currently assigned in mir. This is valid since reading\n-                        // undef bytes may yield arbitrary values.\n-                        //\n-                        // FIXME: ignore undef bytes even with representation `!= 0`.\n-                        //\n-                        // The `inspect` method is okay here because we checked relocations, and\n-                        // because we are doing this access to inspect the final interpreter state\n-                        // (not as part of the interpreter execution).\n-                        alloc\n+                    // The `inspect` method is okay here because we checked relocations, and\n+                    // because we are doing this access to inspect the final interpreter state\n+                    // (not as part of the interpreter execution).\n+                    //\n+                    // FIXME: This check requires that the (arbitrary) value of undefined bytes\n+                    // happens to be zero. Instead, we should only check the value of defined bytes\n+                    // and set all undefined bytes to zero if this allocation is headed for the\n+                    // BSS.\n+                    let all_bytes_are_zero = alloc.relocations().is_empty()\n+                        && alloc\n                             .inspect_with_undef_and_ptr_outside_interpreter(0..alloc.len())\n                             .iter()\n-                            .all(|b| *b == 0)\n-                    };\n-                    let sect_name = if is_zeroed {\n+                            .all(|&byte| byte == 0);\n+\n+                    let sect_name = if all_bytes_are_zero {\n                         CStr::from_bytes_with_nul_unchecked(b\"__DATA,__thread_bss\\0\")\n                     } else {\n                         CStr::from_bytes_with_nul_unchecked(b\"__DATA,__thread_data\\0\")"}]}