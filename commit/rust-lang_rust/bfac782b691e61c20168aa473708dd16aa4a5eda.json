{"sha": "bfac782b691e61c20168aa473708dd16aa4a5eda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYWM3ODJiNjkxZTYxYzIwMTY4YWE0NzM3MDhkZDE2YWE0YTVlZGE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-10T20:56:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-10T20:56:38Z"}, "message": "Rollup merge of #52064 - Valloric:patch-1, r=cramertj\n\nClarifying how the alignment of the struct works\n\nThe docs were not specifying how to compute the alignment of the struct, so I had to spend some time trying to figure out how that works. Found the answer [on this page](http://camlorn.net/posts/April%202017/rust-struct-field-reordering.html):\n\n> The total size of this struct is 5, but the most-aligned field is b with alignment 2, so we round up to 6 and give the struct an alignment of 2 bytes.", "tree": {"sha": "2d36c028915669939703cae890ce1b86b84d3b73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d36c028915669939703cae890ce1b86b84d3b73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfac782b691e61c20168aa473708dd16aa4a5eda", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbRR2GCRBK7hj4Ov3rIwAAdHIIAFa98L3qDHTS+U/1sFieWzlG\n+O1VukccMV/glN+p/VRJ7mrGynGx3Pz3y3+kai81cFY3Qs8EQG9MGmf1CWc9xJX5\nfxq2JTZCrfUd/M2whBhLhO3chjbF6FSNEF6ViXPLyVT3iD0rI/6jv4CBtEg3IMcP\n1DYqLacpBhxPvzpIUxtKF+Ux2ZrVsqdKItNKT+13mwS+LRr4bOkZ5G4icJMwa5mz\n/0b2GranNZVrV+lVrc0jykFa28nm4uhMzdL8Iwe13C2/SsG9qerilXouhX6ZaKM5\nBYV5YiIGLqyjf3kNWJIIRTpWtPeaSKRiRIbGOSaPRzYpqYtlEpm5OFgWz1DpsNg=\n=8T02\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d36c028915669939703cae890ce1b86b84d3b73\nparent 2d0bbfcaed310879ba66e1728a029929773b0f39\nparent dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1531256198 +0200\ncommitter GitHub <noreply@github.com> 1531256198 +0200\n\nRollup merge of #52064 - Valloric:patch-1, r=cramertj\n\nClarifying how the alignment of the struct works\n\nThe docs were not specifying how to compute the alignment of the struct, so I had to spend some time trying to figure out how that works. Found the answer [on this page](http://camlorn.net/posts/April%202017/rust-struct-field-reordering.html):\n\n> The total size of this struct is 5, but the most-aligned field is b with alignment 2, so we round up to 6 and give the struct an alignment of 2 bytes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfac782b691e61c20168aa473708dd16aa4a5eda", "html_url": "https://github.com/rust-lang/rust/commit/bfac782b691e61c20168aa473708dd16aa4a5eda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfac782b691e61c20168aa473708dd16aa4a5eda/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d0bbfcaed310879ba66e1728a029929773b0f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d0bbfcaed310879ba66e1728a029929773b0f39", "html_url": "https://github.com/rust-lang/rust/commit/2d0bbfcaed310879ba66e1728a029929773b0f39"}, {"sha": "dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558", "html_url": "https://github.com/rust-lang/rust/commit/dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "8fb4e0d6a02e35cb0e13a7e58851281fc58df04f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfac782b691e61c20168aa473708dd16aa4a5eda/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfac782b691e61c20168aa473708dd16aa4a5eda/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=bfac782b691e61c20168aa473708dd16aa4a5eda", "patch": "@@ -229,6 +229,8 @@ pub fn forget<T>(t: T) {\n /// 2. Round up the current size to the nearest multiple of the next field's [alignment].\n ///\n /// Finally, round the size of the struct to the nearest multiple of its [alignment].\n+/// The alignment of the struct is usually the largest alignment of all its\n+/// fields; this can be changed with the use of `repr(align(N))`.\n ///\n /// Unlike `C`, zero sized structs are not rounded up to one byte in size.\n ///\n@@ -283,7 +285,8 @@ pub fn forget<T>(t: T) {\n /// // The size of the second field is 2, so add 2 to the size. Size is 4.\n /// // The alignment of the third field is 1, so add 0 to the size for padding. Size is 4.\n /// // The size of the third field is 1, so add 1 to the size. Size is 5.\n-/// // Finally, the alignment of the struct is 2, so add 1 to the size for padding. Size is 6.\n+/// // Finally, the alignment of the struct is 2 (because the largest alignment amongst its\n+/// // fields is 2), so add 1 to the size for padding. Size is 6.\n /// assert_eq!(6, mem::size_of::<FieldStruct>());\n ///\n /// #[repr(C)]"}]}