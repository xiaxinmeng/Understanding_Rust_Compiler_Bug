{"sha": "3762cc7465e485948b426857b265f274688dedea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NjJjYzc0NjVlNDg1OTQ4YjQyNjg1N2IyNjVmMjc0Njg4ZGVkZWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T20:56:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T20:59:47Z"}, "message": "minor: use minicore", "tree": {"sha": "680a9bc7a1d2fbd755bca0ffd12d256c33cf1063", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/680a9bc7a1d2fbd755bca0ffd12d256c33cf1063"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3762cc7465e485948b426857b265f274688dedea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3762cc7465e485948b426857b265f274688dedea", "html_url": "https://github.com/rust-lang/rust/commit/3762cc7465e485948b426857b265f274688dedea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3762cc7465e485948b426857b265f274688dedea/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90da9fc9b302de46097065f0d6428ad33c292217", "url": "https://api.github.com/repos/rust-lang/rust/commits/90da9fc9b302de46097065f0d6428ad33c292217", "html_url": "https://github.com/rust-lang/rust/commit/90da9fc9b302de46097065f0d6428ad33c292217"}], "stats": {"total": 54, "additions": 18, "deletions": 36}, "files": [{"sha": "2d8b936cd6901767eaeae24d9f2dfc04389dd335", "filename": "crates/ide_assists/src/handlers/convert_into_to_from.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3762cc7465e485948b426857b265f274688dedea/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3762cc7465e485948b426857b265f274688dedea/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs?ref=3762cc7465e485948b426857b265f274688dedea", "patch": "@@ -13,10 +13,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Converts an Into impl to an equivalent From impl.\n //\n // ```\n-// # //- /lib.rs crate:core\n-// # pub mod convert { pub trait Into<T> { pub fn into(self) -> T; } }\n-// # //- /lib.rs crate:main deps:core\n-// # use core::convert::Into;\n+// # //- minicore: from\n // impl $0Into<Thing> for usize {\n //     fn into(self) -> Thing {\n //         Thing {\n@@ -28,7 +25,6 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n // ->\n // ```\n-// # use core::convert::Into;\n // impl From<usize> for Thing {\n //     fn from(val: usize) -> Self {\n //         Thing {"}, {"sha": "70754adf9a5702ca5a609a968422341e4a8b1e40", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3762cc7465e485948b426857b265f274688dedea/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3762cc7465e485948b426857b265f274688dedea/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=3762cc7465e485948b426857b265f274688dedea", "patch": "@@ -11,24 +11,20 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Converts an Iterator::for_each function into a for loop.\n //\n // ```\n-// # //- /lib.rs crate:core\n-// # pub mod iter { pub mod traits { pub mod iterator { pub trait Iterator {} } } }\n-// # pub struct SomeIter;\n-// # impl self::iter::traits::iterator::Iterator for SomeIter {}\n-// # //- /lib.rs crate:main deps:core\n-// # use core::SomeIter;\n+// # //- minicore: iterators\n+// # use core::iter;\n // fn main() {\n-//     let iter = SomeIter;\n+//     let iter = iter::repeat((9, 2));\n //     iter.for_each$0(|(x, y)| {\n //         println!(\"x: {}, y: {}\", x, y);\n //     });\n // }\n // ```\n // ->\n // ```\n-// # use core::SomeIter;\n+// # use core::iter;\n // fn main() {\n-//     let iter = SomeIter;\n+//     let iter = iter::repeat((9, 2));\n //     for (x, y) in iter {\n //         println!(\"x: {}, y: {}\", x, y);\n //     }"}, {"sha": "f39c48d8f7b1abb7b26b6af7eba6637b8d6c5e87", "filename": "crates/ide_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3762cc7465e485948b426857b265f274688dedea/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3762cc7465e485948b426857b265f274688dedea/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=3762cc7465e485948b426857b265f274688dedea", "patch": "@@ -20,17 +20,16 @@ use ide_db::ty_filter::TryEnum;\n // Replaces `unwrap` with a `match` expression. Works for Result and Option.\n //\n // ```\n-// enum Result<T, E> { Ok(T), Err(E) }\n+// # //- minicore: result\n // fn main() {\n-//     let x: Result<i32, i32> = Result::Ok(92);\n+//     let x: Result<i32, i32> = Ok(92);\n //     let y = x.$0unwrap();\n // }\n // ```\n // ->\n // ```\n-// enum Result<T, E> { Ok(T), Err(E) }\n // fn main() {\n-//     let x: Result<i32, i32> = Result::Ok(92);\n+//     let x: Result<i32, i32> = Ok(92);\n //     let y = match x {\n //         Ok(it) => it,\n //         $0_ => unreachable!(),"}, {"sha": "1509c3c63395af2452d1ba58b99527177d748b9d", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3762cc7465e485948b426857b265f274688dedea/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3762cc7465e485948b426857b265f274688dedea/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=3762cc7465e485948b426857b265f274688dedea", "patch": "@@ -209,10 +209,7 @@ fn doctest_convert_into_to_from() {\n     check_doc_test(\n         \"convert_into_to_from\",\n         r#####\"\n-//- /lib.rs crate:core\n-pub mod convert { pub trait Into<T> { pub fn into(self) -> T; } }\n-//- /lib.rs crate:main deps:core\n-use core::convert::Into;\n+//- minicore: from\n impl $0Into<Thing> for usize {\n     fn into(self) -> Thing {\n         Thing {\n@@ -223,7 +220,6 @@ impl $0Into<Thing> for usize {\n }\n \"#####,\n         r#####\"\n-use core::convert::Into;\n impl From<usize> for Thing {\n     fn from(val: usize) -> Self {\n         Thing {\n@@ -241,23 +237,19 @@ fn doctest_convert_iter_for_each_to_for() {\n     check_doc_test(\n         \"convert_iter_for_each_to_for\",\n         r#####\"\n-//- /lib.rs crate:core\n-pub mod iter { pub mod traits { pub mod iterator { pub trait Iterator {} } } }\n-pub struct SomeIter;\n-impl self::iter::traits::iterator::Iterator for SomeIter {}\n-//- /lib.rs crate:main deps:core\n-use core::SomeIter;\n+//- minicore: iterators\n+use core::iter;\n fn main() {\n-    let iter = SomeIter;\n+    let iter = iter::repeat((9, 2));\n     iter.for_each$0(|(x, y)| {\n         println!(\"x: {}, y: {}\", x, y);\n     });\n }\n \"#####,\n         r#####\"\n-use core::SomeIter;\n+use core::iter;\n fn main() {\n-    let iter = SomeIter;\n+    let iter = iter::repeat((9, 2));\n     for (x, y) in iter {\n         println!(\"x: {}, y: {}\", x, y);\n     }\n@@ -1519,16 +1511,15 @@ fn doctest_replace_unwrap_with_match() {\n     check_doc_test(\n         \"replace_unwrap_with_match\",\n         r#####\"\n-enum Result<T, E> { Ok(T), Err(E) }\n+//- minicore: result\n fn main() {\n-    let x: Result<i32, i32> = Result::Ok(92);\n+    let x: Result<i32, i32> = Ok(92);\n     let y = x.$0unwrap();\n }\n \"#####,\n         r#####\"\n-enum Result<T, E> { Ok(T), Err(E) }\n fn main() {\n-    let x: Result<i32, i32> = Result::Ok(92);\n+    let x: Result<i32, i32> = Ok(92);\n     let y = match x {\n         Ok(it) => it,\n         $0_ => unreachable!(),"}]}