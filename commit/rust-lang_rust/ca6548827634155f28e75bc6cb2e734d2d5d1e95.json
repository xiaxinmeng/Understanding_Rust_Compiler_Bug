{"sha": "ca6548827634155f28e75bc6cb2e734d2d5d1e95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNjU0ODgyNzYzNDE1NWYyOGU3NWJjNmNiMmU3MzRkMmQ1ZDFlOTU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-01-18T23:08:59Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-01-18T23:08:59Z"}, "message": "Show deprecated completions for deprecated traits", "tree": {"sha": "49e2050fb27937c02768954e94bcd3b4006ed3d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49e2050fb27937c02768954e94bcd3b4006ed3d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca6548827634155f28e75bc6cb2e734d2d5d1e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6548827634155f28e75bc6cb2e734d2d5d1e95", "html_url": "https://github.com/rust-lang/rust/commit/ca6548827634155f28e75bc6cb2e734d2d5d1e95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca6548827634155f28e75bc6cb2e734d2d5d1e95/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc663a7b0c1fc813c58be8b8d84772c52f736d26", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc663a7b0c1fc813c58be8b8d84772c52f736d26", "html_url": "https://github.com/rust-lang/rust/commit/cc663a7b0c1fc813c58be8b8d84772c52f736d26"}], "stats": {"total": 97, "additions": 69, "deletions": 28}, "files": [{"sha": "b0b0d31b449d706c093ab59fd9641d79fc267b62", "filename": "crates/assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=ca6548827634155f28e75bc6cb2e734d2d5d1e95", "patch": "@@ -1,6 +1,6 @@\n use std::iter;\n \n-use hir::AsName;\n+use hir::{AsAssocItem, AsName};\n use ide_db::helpers::{import_assets::ImportCandidate, mod_path_to_ast};\n use ide_db::RootDatabase;\n use syntax::{"}, {"sha": "dc0b38a165def8b1fb5b53d47762af950e6f9c15", "filename": "crates/completion/src/completions/flyimport.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=ca6548827634155f28e75bc6cb2e734d2d5d1e95", "patch": "@@ -48,7 +48,7 @@\n //! Note that having this flag set to `true` does not guarantee that the feature is enabled: your client needs to have the corredponding\n //! capability enabled.\n \n-use hir::{ModPath, ScopeDef};\n+use hir::{AsAssocItem, ModPath, ScopeDef};\n use ide_db::helpers::{\n     import_assets::{ImportAssets, ImportCandidate},\n     insert_use::ImportScope,\n@@ -601,11 +601,12 @@ fn main() {\n     }\n \n     #[test]\n-    fn zero_input_assoc_item_completion() {\n+    fn zero_input_deprecated_assoc_item_completion() {\n         check(\n             r#\"\n //- /lib.rs crate:dep\n pub mod test_mod {\n+    #[deprecated]\n     pub trait TestTrait {\n         const SPECIAL_CONST: u8;\n         type HumbleType;\n@@ -628,14 +629,15 @@ fn main() {\n }\n         \"#,\n             expect![[r#\"\n-                        me random_method() (dep::test_mod::TestTrait) fn random_method(&self)\n+                        me random_method() (dep::test_mod::TestTrait) fn random_method(&self) DEPRECATED\n                 \"#]],\n         );\n \n         check(\n             r#\"\n //- /lib.rs crate:dep\n pub mod test_mod {\n+    #[deprecated]\n     pub trait TestTrait {\n         const SPECIAL_CONST: u8;\n         type HumbleType;\n@@ -657,8 +659,8 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                ct SPECIAL_CONST (dep::test_mod::TestTrait)\n-                fn weird_function() (dep::test_mod::TestTrait) fn weird_function()\n+                ct SPECIAL_CONST (dep::test_mod::TestTrait) DEPRECATED\n+                fn weird_function() (dep::test_mod::TestTrait) fn weird_function() DEPRECATED\n         \"#]],\n         );\n     }"}, {"sha": "4f622d28aea7235be2a5a60a28af53a06003f8fb", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=ca6548827634155f28e75bc6cb2e734d2d5d1e95", "patch": "@@ -10,7 +10,9 @@ pub(crate) mod type_alias;\n \n mod builder_ext;\n \n-use hir::{Documentation, HasAttrs, HirDisplay, ModuleDef, Mutability, ScopeDef, Type};\n+use hir::{\n+    AsAssocItem, Documentation, HasAttrs, HirDisplay, ModuleDef, Mutability, ScopeDef, Type,\n+};\n use ide_db::{helpers::SnippetCap, RootDatabase};\n use syntax::TextRange;\n use test_utils::mark;\n@@ -91,6 +93,22 @@ impl<'a> RenderContext<'a> {\n         attrs.by_key(\"deprecated\").exists() || attrs.by_key(\"rustc_deprecated\").exists()\n     }\n \n+    fn is_deprecated_assoc_item(&self, as_assoc_item: impl AsAssocItem) -> bool {\n+        let db = self.db();\n+        let assoc = match as_assoc_item.as_assoc_item(db) {\n+            Some(assoc) => assoc,\n+            None => return false,\n+        };\n+\n+        let is_assoc_deprecated = match assoc {\n+            hir::AssocItem::Function(it) => self.is_deprecated(it),\n+            hir::AssocItem::Const(it) => self.is_deprecated(it),\n+            hir::AssocItem::TypeAlias(it) => self.is_deprecated(it),\n+        };\n+        is_assoc_deprecated\n+            || assoc.containing_trait(db).map(|trait_| self.is_deprecated(trait_)).unwrap_or(false)\n+    }\n+\n     fn docs(&self, node: impl HasAttrs) -> Option<Documentation> {\n         node.docs(self.db())\n     }\n@@ -207,8 +225,6 @@ impl<'a> Render<'a> {\n             }\n         };\n \n-        let docs = self.docs(resolution);\n-\n         let mut item =\n             CompletionItem::new(completion_kind, self.ctx.source_range(), local_name.clone());\n         if let ScopeDef::Local(local) = resolution {\n@@ -254,13 +270,14 @@ impl<'a> Render<'a> {\n             }\n         }\n \n-        let item = item\n-            .kind(kind)\n-            .add_import(import_to_add)\n-            .set_documentation(docs)\n-            .set_ref_match(ref_match)\n-            .build();\n-        Some(item)\n+        Some(\n+            item.kind(kind)\n+                .add_import(import_to_add)\n+                .set_ref_match(ref_match)\n+                .set_documentation(self.docs(resolution))\n+                .set_deprecated(self.is_deprecated(resolution))\n+                .build(),\n+        )\n     }\n \n     fn docs(&self, resolution: &ScopeDef) -> Option<Documentation> {\n@@ -276,6 +293,16 @@ impl<'a> Render<'a> {\n             _ => None,\n         }\n     }\n+\n+    fn is_deprecated(&self, resolution: &ScopeDef) -> bool {\n+        match resolution {\n+            ScopeDef::ModuleDef(it) => self.ctx.is_deprecated_assoc_item(*it),\n+            ScopeDef::MacroDef(it) => self.ctx.is_deprecated(*it),\n+            ScopeDef::GenericParam(it) => self.ctx.is_deprecated(*it),\n+            ScopeDef::AdtSelfType(it) => self.ctx.is_deprecated(*it),\n+            _ => false,\n+        }\n+    }\n }\n \n fn compute_score_from_active("}, {"sha": "e46452d4e4b6aad9c31b264adfcb29265febcfc5", "filename": "crates/completion/src/render/const_.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs?ref=ca6548827634155f28e75bc6cb2e734d2d5d1e95", "patch": "@@ -38,7 +38,10 @@ impl<'a> ConstRender<'a> {\n         let item = CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name)\n             .kind(CompletionItemKind::Const)\n             .set_documentation(self.ctx.docs(self.const_))\n-            .set_deprecated(self.ctx.is_deprecated(self.const_))\n+            .set_deprecated(\n+                self.ctx.is_deprecated(self.const_)\n+                    || self.ctx.is_deprecated_assoc_item(self.const_),\n+            )\n             .detail(detail)\n             .build();\n "}, {"sha": "8f4c6621146063a823ddf9ead6e4b639b82e2994", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=ca6548827634155f28e75bc6cb2e734d2d5d1e95", "patch": "@@ -44,7 +44,9 @@ impl<'a> FunctionRender<'a> {\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), self.name.clone())\n             .kind(self.kind())\n             .set_documentation(self.ctx.docs(self.func))\n-            .set_deprecated(self.ctx.is_deprecated(self.func))\n+            .set_deprecated(\n+                self.ctx.is_deprecated(self.func) || self.ctx.is_deprecated_assoc_item(self.func),\n+            )\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n             .add_import(import_to_add)"}, {"sha": "29287143a511ea198b79e20a8e9d826e9aeb3b5d", "filename": "crates/completion/src/render/type_alias.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs?ref=ca6548827634155f28e75bc6cb2e734d2d5d1e95", "patch": "@@ -38,7 +38,10 @@ impl<'a> TypeAliasRender<'a> {\n         let item = CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name)\n             .kind(CompletionItemKind::TypeAlias)\n             .set_documentation(self.ctx.docs(self.type_alias))\n-            .set_deprecated(self.ctx.is_deprecated(self.type_alias))\n+            .set_deprecated(\n+                self.ctx.is_deprecated(self.type_alias)\n+                    || self.ctx.is_deprecated_assoc_item(self.type_alias),\n+            )\n             .detail(detail)\n             .build();\n "}, {"sha": "baff833051b0e4948206abad65df7b58a6c1202b", "filename": "crates/completion/src/test_utils.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs?ref=ca6548827634155f28e75bc6cb2e734d2d5d1e95", "patch": "@@ -83,6 +83,9 @@ pub(crate) fn completion_list_with_config(\n                 let width = label_width.saturating_sub(monospace_width(it.label()));\n                 format_to!(buf, \"{:width$} {}\", \"\", detail, width = width);\n             }\n+            if it.deprecated() {\n+                format_to!(buf, \" DEPRECATED\");\n+            }\n             format_to!(buf, \"\\n\");\n             buf\n         })"}, {"sha": "5a4c2790612ebeae777c9f26a93cd57d0c3941c6", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6548827634155f28e75bc6cb2e734d2d5d1e95/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=ca6548827634155f28e75bc6cb2e734d2d5d1e95", "patch": "@@ -272,15 +272,6 @@ impl ModuleDef {\n \n         hir_ty::diagnostics::validate_module_item(db, module.id.krate, id, sink)\n     }\n-\n-    pub fn as_assoc_item(self, db: &dyn HirDatabase) -> Option<AssocItem> {\n-        match self {\n-            ModuleDef::Function(f) => f.as_assoc_item(db),\n-            ModuleDef::Const(c) => c.as_assoc_item(db),\n-            ModuleDef::TypeAlias(t) => t.as_assoc_item(db),\n-            _ => None,\n-        }\n-    }\n }\n \n impl Module {\n@@ -1060,6 +1051,16 @@ impl AsAssocItem for TypeAlias {\n         as_assoc_item(db, AssocItem::TypeAlias, self.id)\n     }\n }\n+impl AsAssocItem for ModuleDef {\n+    fn as_assoc_item(self, db: &dyn HirDatabase) -> Option<AssocItem> {\n+        match self {\n+            ModuleDef::Function(it) => it.as_assoc_item(db),\n+            ModuleDef::Const(it) => it.as_assoc_item(db),\n+            ModuleDef::TypeAlias(it) => it.as_assoc_item(db),\n+            _ => None,\n+        }\n+    }\n+}\n fn as_assoc_item<ID, DEF, CTOR, AST>(db: &dyn HirDatabase, ctor: CTOR, id: ID) -> Option<AssocItem>\n where\n     ID: Lookup<Data = AssocItemLoc<AST>>,"}]}