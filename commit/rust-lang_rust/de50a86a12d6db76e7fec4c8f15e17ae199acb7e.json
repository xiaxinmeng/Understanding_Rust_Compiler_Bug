{"sha": "de50a86a12d6db76e7fec4c8f15e17ae199acb7e", "node_id": "C_kwDOAAsO6NoAKGRlNTBhODZhMTJkNmRiNzZlN2ZlYzRjOGYxNWUxN2FlMTk5YWNiN2U", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2023-02-01T16:13:57Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2023-02-01T16:15:12Z"}, "message": "Simplify discriminant_kind goal using new helper function", "tree": {"sha": "cd9553b3d0ad07cd1ad6425d1e79ae964401a352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd9553b3d0ad07cd1ad6425d1e79ae964401a352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de50a86a12d6db76e7fec4c8f15e17ae199acb7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de50a86a12d6db76e7fec4c8f15e17ae199acb7e", "html_url": "https://github.com/rust-lang/rust/commit/de50a86a12d6db76e7fec4c8f15e17ae199acb7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de50a86a12d6db76e7fec4c8f15e17ae199acb7e/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd4f5bceb456bd3681381bb390562466fdc4356", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd4f5bceb456bd3681381bb390562466fdc4356", "html_url": "https://github.com/rust-lang/rust/commit/5fd4f5bceb456bd3681381bb390562466fdc4356"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "170b560d7b6a131d95305327c46f46c7be09177a", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de50a86a12d6db76e7fec4c8f15e17ae199acb7e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de50a86a12d6db76e7fec4c8f15e17ae199acb7e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=de50a86a12d6db76e7fec4c8f15e17ae199acb7e", "patch": "@@ -586,20 +586,13 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        let self_ty = goal.predicate.self_ty();\n-\n-        let tcx = ecx.tcx();\n-        let term = self_ty.discriminant_ty(tcx).into();\n-\n-        Self::consider_assumption(\n-            ecx,\n-            goal,\n-            ty::Binder::dummy(ty::ProjectionPredicate {\n-                projection_ty: tcx.mk_alias_ty(goal.predicate.def_id(), [self_ty]),\n-                term,\n-            })\n-            .to_predicate(tcx),\n-        )\n+        let discriminant = goal.predicate.self_ty().discriminant_ty(ecx.tcx());\n+        let nested_goals = ecx.infcx.eq(\n+            goal.param_env,\n+            goal.predicate.term.ty().expect(\"expected ty goal\"),\n+            discriminant,\n+        )?;\n+        ecx.evaluate_all_and_make_canonical_response(nested_goals)\n     }\n }\n "}]}