{"sha": "cd45c73b660f85acc9b564e536bc407f0836891d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDVjNzNiNjYwZjg1YWNjOWI1NjRlNTM2YmM0MDdmMDgzNjg5MWQ=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-16T14:25:12Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-16T14:27:23Z"}, "message": "JFF, ra_fixture arg name for a code  highlighting", "tree": {"sha": "47fc05ab69ac4a23e9de6fb4d05c3c5cbf997850", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47fc05ab69ac4a23e9de6fb4d05c3c5cbf997850"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd45c73b660f85acc9b564e536bc407f0836891d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd45c73b660f85acc9b564e536bc407f0836891d", "html_url": "https://github.com/rust-lang/rust/commit/cd45c73b660f85acc9b564e536bc407f0836891d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd45c73b660f85acc9b564e536bc407f0836891d/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9c7ac4ee5c9295d811670277bc1aeb9775998c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9c7ac4ee5c9295d811670277bc1aeb9775998c", "html_url": "https://github.com/rust-lang/rust/commit/7e9c7ac4ee5c9295d811670277bc1aeb9775998c"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "45abfead99c834b633eb2c3c59ab27506b011902", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd45c73b660f85acc9b564e536bc407f0836891d/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd45c73b660f85acc9b564e536bc407f0836891d/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=cd45c73b660f85acc9b564e536bc407f0836891d", "patch": "@@ -245,8 +245,8 @@ impl FixtureMeta {\n ///  line 2\n ///  // - other meta\n ///  ```\n-pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n-    let fixture = indent_first_line(fixture);\n+pub fn parse_fixture(ra_fixture: &str) -> Vec<FixtureEntry> {\n+    let fixture = indent_first_line(ra_fixture);\n     let margin = fixture_margin(&fixture);\n \n     let mut lines = fixture\n@@ -418,14 +418,16 @@ struct Bar;\n \n #[test]\n fn parse_fixture_gets_full_meta() {\n-    let fixture = r\"\n+    let parsed = parse_fixture(\n+        r\"\n     //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b,atom env:OUTDIR=path/to,OTHER=foo\n-    \";\n-    let parsed = parse_fixture(fixture);\n+    mod m;\n+    \",\n+    );\n     assert_eq!(1, parsed.len());\n \n     let parsed = &parsed[0];\n-    assert_eq!(\"\\n\", parsed.text);\n+    assert_eq!(\"mod m;\\n\\n\", parsed.text);\n \n     let meta = &parsed.meta;\n     assert_eq!(\"foo\", meta.crate_name().unwrap());\n@@ -435,12 +437,12 @@ fn parse_fixture_gets_full_meta() {\n }\n \n /// Same as `parse_fixture`, except it allow empty fixture\n-pub fn parse_single_fixture(fixture: &str) -> Option<FixtureEntry> {\n-    if !fixture.lines().any(|it| it.trim_start().starts_with(\"//-\")) {\n+pub fn parse_single_fixture(ra_fixture: &str) -> Option<FixtureEntry> {\n+    if !ra_fixture.lines().any(|it| it.trim_start().starts_with(\"//-\")) {\n         return None;\n     }\n \n-    let fixtures = parse_fixture(fixture);\n+    let fixtures = parse_fixture(ra_fixture);\n     if fixtures.len() > 1 {\n         panic!(\"too many fixtures\");\n     }"}]}