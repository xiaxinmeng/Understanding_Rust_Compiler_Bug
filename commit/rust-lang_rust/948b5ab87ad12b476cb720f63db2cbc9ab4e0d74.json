{"sha": "948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OGI1YWI4N2FkMTJiNDc2Y2I3MjBmNjNkYjJjYmM5YWI0ZTBkNzQ=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-30T17:37:17Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-30T17:37:17Z"}, "message": "trans: Change @ast::Expr -> &ast::Expr where possible", "tree": {"sha": "835e51ec7d1e690a05bb99a2275419ac1b9a7515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/835e51ec7d1e690a05bb99a2275419ac1b9a7515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "html_url": "https://github.com/rust-lang/rust/commit/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/comments", "author": null, "committer": null, "parents": [{"sha": "92e7bb67a8038ff73ad9dc88d8be3d3df4777282", "url": "https://api.github.com/repos/rust-lang/rust/commits/92e7bb67a8038ff73ad9dc88d8be3d3df4777282", "html_url": "https://github.com/rust-lang/rust/commit/92e7bb67a8038ff73ad9dc88d8be3d3df4777282"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "0e4d2bcd9103fc62684cc215f6816d3bb0fb0bac", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "patch": "@@ -422,7 +422,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n     }\n \n     fn walk_expr(&mut self,\n-                 expr: @ast::Expr,\n+                 expr: &ast::Expr,\n                  in_out: &mut [uint],\n                  loop_scopes: &mut ~[LoopScope]) {\n         debug!(\"DataFlowContext::walk_expr(expr=%s, in_out=%s)\",\n@@ -744,7 +744,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n     }\n \n     fn pop_scopes(&mut self,\n-                  from_expr: @ast::Expr,\n+                  from_expr: &ast::Expr,\n                   to_scope: &mut LoopScope,\n                   in_out: &mut [uint]) {\n         //! Whenever you have a `break` or a `loop` statement, flow\n@@ -778,7 +778,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n     }\n \n     fn break_from_to(&mut self,\n-                     from_expr: @ast::Expr,\n+                     from_expr: &ast::Expr,\n                      to_scope: &mut LoopScope,\n                      in_out: &mut [uint]) {\n         self.pop_scopes(from_expr, to_scope, in_out);\n@@ -811,7 +811,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n     fn walk_call(&mut self,\n                  _callee_id: ast::NodeId,\n                  call_id: ast::NodeId,\n-                 arg0: @ast::Expr,\n+                 arg0: &ast::Expr,\n                  args: &[@ast::Expr],\n                  in_out: &mut [uint],\n                  loop_scopes: &mut ~[LoopScope]) {\n@@ -865,7 +865,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n     }\n \n     fn find_scope<'a>(&self,\n-                      expr: @ast::Expr,\n+                      expr: &ast::Expr,\n                       label: Option<ast::Name>,\n                       loop_scopes: &'a mut ~[LoopScope]) -> &'a mut LoopScope {\n         let index = match label {\n@@ -899,7 +899,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n         &mut loop_scopes[index]\n     }\n \n-    fn is_method_call(&self, expr: @ast::Expr) -> bool {\n+    fn is_method_call(&self, expr: &ast::Expr) -> bool {\n         self.dfcx.method_map.contains_key(&expr.id)\n     }\n "}, {"sha": "c2dbcfa3b57d69d9b795bd9b68ee2c04036953af", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "patch": "@@ -1398,7 +1398,7 @@ fn insert_lllocals(bcx: @mut Block,\n }\n \n fn compile_guard(bcx: @mut Block,\n-                     guard_expr: @ast::Expr,\n+                     guard_expr: &ast::Expr,\n                      data: &ArmData,\n                      m: &[Match],\n                      vals: &[ValueRef],\n@@ -1826,7 +1826,7 @@ fn compile_submatch_continue(mut bcx: @mut Block,\n \n pub fn trans_match(bcx: @mut Block,\n                    match_expr: &ast::Expr,\n-                   discr_expr: @ast::Expr,\n+                   discr_expr: &ast::Expr,\n                    arms: &[ast::Arm],\n                    dest: Dest) -> @mut Block {\n     let _icx = push_ctxt(\"match::trans_match\");\n@@ -1876,7 +1876,7 @@ fn create_bindings_map(bcx: @mut Block, pat: @ast::Pat) -> BindingsMap {\n }\n \n fn trans_match_inner(scope_cx: @mut Block,\n-                         discr_expr: @ast::Expr,\n+                         discr_expr: &ast::Expr,\n                          arms: &[ast::Arm],\n                          dest: Dest) -> @mut Block {\n     let _icx = push_ctxt(\"match::trans_match_inner\");"}, {"sha": "a3788d7cbdef46add349ca3c87442590f56384ba", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "patch": "@@ -77,7 +77,7 @@ pub struct Callee {\n     data: CalleeData\n }\n \n-pub fn trans(bcx: @mut Block, expr: @ast::Expr) -> Callee {\n+pub fn trans(bcx: @mut Block, expr: &ast::Expr) -> Callee {\n     let _icx = push_ctxt(\"trans_callee\");\n     debug!(\"callee::trans(expr=%s)\", expr.repr(bcx.tcx()));\n \n@@ -92,7 +92,7 @@ pub fn trans(bcx: @mut Block, expr: @ast::Expr) -> Callee {\n     // any other expressions are closures:\n     return datum_callee(bcx, expr);\n \n-    fn datum_callee(bcx: @mut Block, expr: @ast::Expr) -> Callee {\n+    fn datum_callee(bcx: @mut Block, expr: &ast::Expr) -> Callee {\n         let DatumBlock {bcx, datum} = expr::trans_to_datum(bcx, expr);\n         match ty::get(datum.ty).sty {\n             ty::ty_bare_fn(*) => {\n@@ -115,7 +115,7 @@ pub fn trans(bcx: @mut Block, expr: @ast::Expr) -> Callee {\n         return Callee {bcx: bcx, data: Fn(fd)};\n     }\n \n-    fn trans_def(bcx: @mut Block, def: ast::Def, ref_expr: @ast::Expr) -> Callee {\n+    fn trans_def(bcx: @mut Block, def: ast::Def, ref_expr: &ast::Expr) -> Callee {\n         match def {\n             ast::DefFn(did, _) |\n             ast::DefStaticMethod(did, ast::FromImpl(_), _) => {\n@@ -447,8 +447,8 @@ pub fn trans_fn_ref_with_vtables(\n // Translating calls\n \n pub fn trans_call(in_cx: @mut Block,\n-                  call_ex: @ast::Expr,\n-                  f: @ast::Expr,\n+                  call_ex: &ast::Expr,\n+                  f: &ast::Expr,\n                   args: CallArgs,\n                   id: ast::NodeId,\n                   dest: expr::Dest)\n@@ -465,9 +465,9 @@ pub fn trans_call(in_cx: @mut Block,\n }\n \n pub fn trans_method_call(in_cx: @mut Block,\n-                         call_ex: @ast::Expr,\n+                         call_ex: &ast::Expr,\n                          callee_id: ast::NodeId,\n-                         rcvr: @ast::Expr,\n+                         rcvr: &ast::Expr,\n                          args: CallArgs,\n                          dest: expr::Dest)\n                          -> @mut Block {\n@@ -834,7 +834,7 @@ pub enum AutorefArg {\n pub fn trans_arg_expr(bcx: @mut Block,\n                       formal_arg_ty: ty::t,\n                       self_mode: ty::SelfMode,\n-                      arg_expr: @ast::Expr,\n+                      arg_expr: &ast::Expr,\n                       temp_cleanups: &mut ~[ValueRef],\n                       autoref_arg: AutorefArg) -> Result {\n     let _icx = push_ctxt(\"trans_arg_expr\");"}, {"sha": "5f85a4f9385a5156883f6ebf35b6b7d2520f5cd0", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "patch": "@@ -670,7 +670,7 @@ impl Block {\n         ast_map::node_id_to_str(self.tcx().items, id, self.sess().intr())\n     }\n \n-    pub fn expr_to_str(&self, e: @ast::Expr) -> ~str {\n+    pub fn expr_to_str(&self, e: &ast::Expr) -> ~str {\n         e.repr(self.tcx())\n     }\n "}, {"sha": "7d208c896b7cadd1d7f83fd6bac6e9b28f112a46", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "patch": "@@ -177,7 +177,7 @@ pub fn get_const_val(cx: @mut CrateContext,\n      !cx.non_inlineable_statics.contains(&def_id.node))\n }\n \n-pub fn const_expr(cx: @mut CrateContext, e: @ast::Expr) -> (ValueRef, bool) {\n+pub fn const_expr(cx: @mut CrateContext, e: &ast::Expr) -> (ValueRef, bool) {\n     let (llconst, inlineable) = const_expr_unadjusted(cx, e);\n     let mut llconst = llconst;\n     let mut inlineable = inlineable;"}, {"sha": "73e7a6745fb3c829b081ed328fac3ba50844228f", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "patch": "@@ -45,7 +45,7 @@ pub fn trans_block(bcx: @mut Block, b: &ast::Block, dest: expr::Dest) -> @mut Bl\n }\n \n pub fn trans_if(bcx: @mut Block,\n-            cond: @ast::Expr,\n+            cond: &ast::Expr,\n             thn: &ast::Block,\n             els: Option<@ast::Expr>,\n             dest: expr::Dest)\n@@ -158,7 +158,7 @@ pub fn join_blocks(parent_bcx: @mut Block, in_cxs: &[@mut Block]) -> @mut Block\n     return out;\n }\n \n-pub fn trans_while(bcx: @mut Block, cond: @ast::Expr, body: &ast::Block) -> @mut Block {\n+pub fn trans_while(bcx: @mut Block, cond: &ast::Expr, body: &ast::Block) -> @mut Block {\n     let _icx = push_ctxt(\"trans_while\");\n     let next_bcx = sub_block(bcx, \"while next\");\n "}, {"sha": "56677167f0e00ffbba9a06b4a932eeffb1f8fde7", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "patch": "@@ -181,7 +181,7 @@ fn drop_and_cancel_clean(bcx: @mut Block, dat: Datum) -> @mut Block {\n     return bcx;\n }\n \n-pub fn trans_to_datum(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n+pub fn trans_to_datum(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n     debug!(\"trans_to_datum(expr=%s)\", bcx.expr_to_str(expr));\n \n     let mut bcx = bcx;\n@@ -307,7 +307,7 @@ pub fn trans_to_datum(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n \n     fn auto_borrow_obj(mut bcx: @mut Block,\n                        autoderefs: uint,\n-                       expr: @ast::Expr,\n+                       expr: &ast::Expr,\n                        source_datum: Datum) -> DatumBlock {\n         let tcx = bcx.tcx();\n         let target_obj_ty = expr_ty_adjusted(bcx, expr);\n@@ -419,7 +419,7 @@ pub fn trans_to_datum(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n     }\n }\n \n-pub fn trans_into(bcx: @mut Block, expr: @ast::Expr, dest: Dest) -> @mut Block {\n+pub fn trans_into(bcx: @mut Block, expr: &ast::Expr, dest: Dest) -> @mut Block {\n     if bcx.tcx().adjustments.contains_key(&expr.id) {\n         // use trans_to_datum, which is mildly less efficient but\n         // which will perform the adjustments:\n@@ -477,7 +477,7 @@ pub fn trans_into(bcx: @mut Block, expr: @ast::Expr, dest: Dest) -> @mut Block {\n     };\n }\n \n-fn trans_lvalue(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n+fn trans_lvalue(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n     /*!\n      *\n      * Translates an lvalue expression, always yielding a by-ref\n@@ -496,7 +496,7 @@ fn trans_lvalue(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n     };\n }\n \n-fn trans_to_datum_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n+fn trans_to_datum_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n     /*!\n      * Translates an expression into a datum.  If this expression\n      * is an rvalue, this will result in a temporary value being\n@@ -562,7 +562,7 @@ fn trans_to_datum_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n     }\n }\n \n-fn trans_rvalue_datum_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n+fn trans_rvalue_datum_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n     let _icx = push_ctxt(\"trans_rvalue_datum_unadjusted\");\n \n     trace_span!(bcx, expr.span, shorten(bcx.expr_to_str(expr)));\n@@ -615,7 +615,7 @@ fn trans_rvalue_datum_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> DatumBloc\n     }\n }\n \n-fn trans_rvalue_stmt_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> @mut Block {\n+fn trans_rvalue_stmt_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> @mut Block {\n     let mut bcx = bcx;\n     let _icx = push_ctxt(\"trans_rvalue_stmt\");\n \n@@ -669,7 +669,7 @@ fn trans_rvalue_stmt_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> @mut Block\n     };\n }\n \n-fn trans_rvalue_dps_unadjusted(bcx: @mut Block, expr: @ast::Expr,\n+fn trans_rvalue_dps_unadjusted(bcx: @mut Block, expr: &ast::Expr,\n                                dest: Dest) -> @mut Block {\n     let _icx = push_ctxt(\"trans_rvalue_dps_unadjusted\");\n     let tcx = bcx.tcx();\n@@ -878,7 +878,7 @@ fn trans_def_datum_unadjusted(bcx: @mut Block,\n     }\n }\n \n-fn trans_lvalue_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n+fn trans_lvalue_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n     /*!\n      *\n      * Translates an lvalue expression, always yielding a by-ref\n@@ -918,7 +918,7 @@ fn trans_lvalue_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n     };\n \n     fn trans_rec_field(bcx: @mut Block,\n-                       base: @ast::Expr,\n+                       base: &ast::Expr,\n                        field: ast::Ident) -> DatumBlock {\n         //! Translates `base.field`.\n \n@@ -942,8 +942,8 @@ fn trans_lvalue_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n \n     fn trans_index(bcx: @mut Block,\n                    index_expr: &ast::Expr,\n-                   base: @ast::Expr,\n-                   idx: @ast::Expr) -> DatumBlock {\n+                   base: &ast::Expr,\n+                   idx: &ast::Expr) -> DatumBlock {\n         //! Translates `base[idx]`.\n \n         let _icx = push_ctxt(\"trans_index\");\n@@ -1321,7 +1321,7 @@ fn trans_adt(bcx: @mut Block, repr: &adt::Repr, discr: ty::Disr,\n }\n \n \n-fn trans_immediate_lit(bcx: @mut Block, expr: @ast::Expr,\n+fn trans_immediate_lit(bcx: @mut Block, expr: &ast::Expr,\n                        lit: ast::lit) -> DatumBlock {\n     // must not be a string constant, that is a RvalueDpsExpr\n     let _icx = push_ctxt(\"trans_immediate_lit\");\n@@ -1332,7 +1332,7 @@ fn trans_immediate_lit(bcx: @mut Block, expr: @ast::Expr,\n fn trans_unary_datum(bcx: @mut Block,\n                      un_expr: &ast::Expr,\n                      op: ast::UnOp,\n-                     sub_expr: @ast::Expr) -> DatumBlock {\n+                     sub_expr: &ast::Expr) -> DatumBlock {\n     let _icx = push_ctxt(\"trans_unary_datum\");\n \n     // if deref, would be LvalueExpr\n@@ -1391,7 +1391,7 @@ fn trans_unary_datum(bcx: @mut Block,\n \n     fn trans_boxed_expr(bcx: @mut Block,\n                         box_ty: ty::t,\n-                        contents: @ast::Expr,\n+                        contents: &ast::Expr,\n                         contents_ty: ty::t,\n                         heap: heap) -> DatumBlock {\n         let _icx = push_ctxt(\"trans_boxed_expr\");\n@@ -1416,7 +1416,7 @@ fn trans_unary_datum(bcx: @mut Block,\n }\n \n fn trans_addr_of(bcx: @mut Block, expr: &ast::Expr,\n-                 subexpr: @ast::Expr) -> DatumBlock {\n+                 subexpr: &ast::Expr) -> DatumBlock {\n     let _icx = push_ctxt(\"trans_addr_of\");\n     let mut bcx = bcx;\n     let sub_datum = unpack_datum!(bcx, trans_to_datum(bcx, subexpr));\n@@ -1532,8 +1532,8 @@ enum lazy_binop_ty { lazy_and, lazy_or }\n fn trans_lazy_binop(bcx: @mut Block,\n                     binop_expr: &ast::Expr,\n                     op: lazy_binop_ty,\n-                    a: @ast::Expr,\n-                    b: @ast::Expr) -> DatumBlock {\n+                    a: &ast::Expr,\n+                    b: &ast::Expr) -> DatumBlock {\n     let _icx = push_ctxt(\"trans_lazy_binop\");\n     let binop_ty = expr_ty(bcx, binop_expr);\n     let bcx = bcx;\n@@ -1577,8 +1577,8 @@ fn trans_lazy_binop(bcx: @mut Block,\n fn trans_binary(bcx: @mut Block,\n                 binop_expr: &ast::Expr,\n                 op: ast::BinOp,\n-                lhs: @ast::Expr,\n-                rhs: @ast::Expr) -> DatumBlock\n+                lhs: &ast::Expr,\n+                rhs: &ast::Expr) -> DatumBlock\n {\n     let _icx = push_ctxt(\"trans_binary\");\n \n@@ -1603,7 +1603,7 @@ fn trans_binary(bcx: @mut Block,\n fn trans_overloaded_op(bcx: @mut Block,\n                        expr: &ast::Expr,\n                        callee_id: ast::NodeId,\n-                       rcvr: @ast::Expr,\n+                       rcvr: &ast::Expr,\n                        args: ~[@ast::Expr],\n                        ret_ty: ty::t,\n                        dest: Dest)\n@@ -1679,7 +1679,7 @@ pub fn cast_type_kind(t: ty::t) -> cast_kind {\n     }\n }\n \n-fn trans_imm_cast(bcx: @mut Block, expr: @ast::Expr,\n+fn trans_imm_cast(bcx: @mut Block, expr: &ast::Expr,\n                   id: ast::NodeId) -> DatumBlock {\n     let _icx = push_ctxt(\"trans_cast\");\n     let ccx = bcx.ccx();\n@@ -1748,10 +1748,10 @@ fn trans_imm_cast(bcx: @mut Block, expr: @ast::Expr,\n }\n \n fn trans_assign_op(bcx: @mut Block,\n-                   expr: @ast::Expr,\n+                   expr: &ast::Expr,\n                    callee_id: ast::NodeId,\n                    op: ast::BinOp,\n-                   dst: @ast::Expr,\n+                   dst: &ast::Expr,\n                    src: @ast::Expr) -> @mut Block\n {\n     let _icx = push_ctxt(\"trans_assign_op\");"}, {"sha": "19e2e1d00f646413476db4e93ca4fe828299235c", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "patch": "@@ -139,7 +139,7 @@ pub fn trans_method(ccx: @mut CrateContext,\n }\n \n pub fn trans_self_arg(bcx: @mut Block,\n-                      base: @ast::Expr,\n+                      base: &ast::Expr,\n                       temp_cleanups: &mut ~[ValueRef],\n                       mentry: typeck::method_map_entry) -> Result {\n     let _icx = push_ctxt(\"impl::trans_self_arg\");\n@@ -156,7 +156,7 @@ pub fn trans_self_arg(bcx: @mut Block,\n \n pub fn trans_method_callee(bcx: @mut Block,\n                            callee_id: ast::NodeId,\n-                           this: @ast::Expr,\n+                           this: &ast::Expr,\n                            mentry: typeck::method_map_entry)\n                            -> Callee {\n     let _icx = push_ctxt(\"impl::trans_method_callee\");\n@@ -313,7 +313,7 @@ pub fn method_with_name(ccx: &mut CrateContext,\n \n pub fn trans_monomorphized_callee(bcx: @mut Block,\n                                   callee_id: ast::NodeId,\n-                                  base: @ast::Expr,\n+                                  base: &ast::Expr,\n                                   mentry: typeck::method_map_entry,\n                                   trait_id: ast::DefId,\n                                   n_method: uint,\n@@ -420,7 +420,7 @@ pub fn combine_impl_and_methods_tps(bcx: @mut Block,\n pub fn trans_trait_callee(bcx: @mut Block,\n                           callee_id: ast::NodeId,\n                           n_method: uint,\n-                          self_expr: @ast::Expr)\n+                          self_expr: &ast::Expr)\n                           -> Callee {\n     /*!\n      * Create a method callee where the method is coming from a trait\n@@ -630,7 +630,7 @@ fn emit_vtable_methods(bcx: @mut Block,\n }\n \n pub fn trans_trait_cast(bcx: @mut Block,\n-                        val: @ast::Expr,\n+                        val: &ast::Expr,\n                         id: ast::NodeId,\n                         dest: expr::Dest,\n                         _store: ty::TraitStore)"}, {"sha": "6a9b221726603680025797446322218d3572d927", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948b5ab87ad12b476cb720f63db2cbc9ab4e0d74/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=948b5ab87ad12b476cb720f63db2cbc9ab4e0d74", "patch": "@@ -158,7 +158,7 @@ impl VecTypes {\n }\n \n pub fn trans_fixed_vstore(bcx: @mut Block,\n-                          vstore_expr: @ast::Expr,\n+                          vstore_expr: &ast::Expr,\n                           content_expr: &ast::Expr,\n                           dest: expr::Dest)\n                        -> @mut Block {\n@@ -187,8 +187,8 @@ pub fn trans_fixed_vstore(bcx: @mut Block,\n }\n \n pub fn trans_slice_vstore(bcx: @mut Block,\n-                          vstore_expr: @ast::Expr,\n-                          content_expr: @ast::Expr,\n+                          vstore_expr: &ast::Expr,\n+                          content_expr: &ast::Expr,\n                           dest: expr::Dest)\n                        -> @mut Block {\n     //!\n@@ -246,7 +246,7 @@ pub fn trans_slice_vstore(bcx: @mut Block,\n }\n \n pub fn trans_lit_str(bcx: @mut Block,\n-                     lit_expr: @ast::Expr,\n+                     lit_expr: &ast::Expr,\n                      str_lit: @str,\n                      dest: Dest)\n                   -> @mut Block {\n@@ -280,7 +280,7 @@ pub fn trans_lit_str(bcx: @mut Block,\n }\n \n \n-pub fn trans_uniq_or_managed_vstore(bcx: @mut Block, heap: heap, vstore_expr: @ast::Expr,\n+pub fn trans_uniq_or_managed_vstore(bcx: @mut Block, heap: heap, vstore_expr: &ast::Expr,\n                                     content_expr: &ast::Expr) -> DatumBlock {\n     //!\n     //\n@@ -343,7 +343,7 @@ pub fn trans_uniq_or_managed_vstore(bcx: @mut Block, heap: heap, vstore_expr: @a\n \n pub fn write_content(bcx: @mut Block,\n                      vt: &VecTypes,\n-                     vstore_expr: @ast::Expr,\n+                     vstore_expr: &ast::Expr,\n                      content_expr: &ast::Expr,\n                      dest: Dest)\n                   -> @mut Block {"}]}