{"sha": "27fc0f21c48ad9a8788044467c14611b41afeab3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZmMwZjIxYzQ4YWQ5YTg3ODgwNDQ0NjdjMTQ2MTFiNDFhZmVhYjM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-20T17:16:57Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-20T17:16:57Z"}, "message": "Document iterators in std::io\n\nMake them all consistent and link up the documentation.", "tree": {"sha": "1b4dd91e507f7eea78bad6f7dc8f60af7ca66cab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b4dd91e507f7eea78bad6f7dc8f60af7ca66cab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27fc0f21c48ad9a8788044467c14611b41afeab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27fc0f21c48ad9a8788044467c14611b41afeab3", "html_url": "https://github.com/rust-lang/rust/commit/27fc0f21c48ad9a8788044467c14611b41afeab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27fc0f21c48ad9a8788044467c14611b41afeab3/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e51763e6428580f2b3275cd7076492376801a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e51763e6428580f2b3275cd7076492376801a1e", "html_url": "https://github.com/rust-lang/rust/commit/4e51763e6428580f2b3275cd7076492376801a1e"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "2a0efb9d8a28ca1ad109d8e0dcca2e507dbffe19", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/27fc0f21c48ad9a8788044467c14611b41afeab3/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fc0f21c48ad9a8788044467c14611b41afeab3/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=27fc0f21c48ad9a8788044467c14611b41afeab3", "patch": "@@ -1188,9 +1188,12 @@ impl<T: Write, U: Write> Write for Broadcast<T, U> {\n     }\n }\n \n-/// Adaptor to chain together two instances of `Read`.\n+/// Adaptor to chain together two readers.\n ///\n-/// For more information, see `Read::chain`.\n+/// This struct is generally created by calling [`chain()`][chain] on a reader.\n+/// Please see the documentation of `chain()` for more details.\n+///\n+/// [chain]: trait.Read.html#method.chain\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chain<T, U> {\n     first: T,\n@@ -1266,7 +1269,10 @@ impl<T: BufRead> BufRead for Take<T> {\n \n /// An adaptor which will emit all read data to a specified writer as well.\n ///\n-/// For more information see `Read::tee`\n+/// This struct is generally created by calling [`tee()`][tee] on a reader.\n+/// Please see the documentation of `tee()` for more details.\n+///\n+/// [tee]: trait.Read.html#method.tee\n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\")]\n pub struct Tee<R, W> {\n     reader: R,\n@@ -1283,9 +1289,12 @@ impl<R: Read, W: Write> Read for Tee<R, W> {\n     }\n }\n \n-/// A bridge from implementations of `Read` to an `Iterator` of `u8`.\n+/// An iterator over `u8` values of a reader.\n+///\n+/// This struct is generally created by calling [`bytes()`][bytes] on a reader.\n+/// Please see the documentation of `bytes()` for more details.\n ///\n-/// See `Read::bytes` for more information.\n+/// [bytes]: trait.Read.html#method.bytes\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Bytes<R> {\n     inner: R,\n@@ -1305,9 +1314,12 @@ impl<R: Read> Iterator for Bytes<R> {\n     }\n }\n \n-/// A bridge from implementations of `Read` to an `Iterator` of `char`.\n+/// An iterator over the `char`s of a reader.\n ///\n-/// See `Read::chars` for more information.\n+/// This struct is generally created by calling [`chars()`][chars] on a reader.\n+/// Please see the documentation of `chars()` for more details.\n+///\n+/// [chars]: trait.Read.html#method.chars\n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n pub struct Chars<R> {\n     inner: R,\n@@ -1389,7 +1401,10 @@ impl fmt::Display for CharsError {\n /// An iterator over the contents of an instance of `BufRead` split on a\n /// particular byte.\n ///\n-/// See `BufRead::split` for more information.\n+/// This struct is generally created by calling [`split()`][split] on a\n+/// `BufRead`. Please see the documentation of `split()` for more details.\n+///\n+/// [split]: trait.BufRead.html#method.split\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Split<B> {\n     buf: B,\n@@ -1415,10 +1430,12 @@ impl<B: BufRead> Iterator for Split<B> {\n     }\n }\n \n-/// An iterator over the lines of an instance of `BufRead` split on a newline\n-/// byte.\n+/// An iterator over the lines of an instance of `BufRead`.\n+///\n+/// This struct is generally created by calling [`lines()`][lines] on a\n+/// `BufRead`. Please see the documentation of `lines()` for more details.\n ///\n-/// See `BufRead::lines` for more information.\n+/// [lines]: trait.BufRead.html#method.lines\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Lines<B> {\n     buf: B,"}]}