{"sha": "79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZjhhN2ZlZTVjODJkNmI1ZDEwOGY5OTMwZDk0NDVmYjBlNmM5NGE=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-22T23:40:31Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-24T00:06:33Z"}, "message": "Properly track and export information about vtables for impls in metadata.\n\nPartially rework how vtables are handled in default method calls.\nCloses #7460.", "tree": {"sha": "ab2d44f30b8a8ea5c9b4921c9e7f6df5ae1c3049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab2d44f30b8a8ea5c9b4921c9e7f6df5ae1c3049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "html_url": "https://github.com/rust-lang/rust/commit/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "304a5f07867cff4cb6a558d320efafd7c6da56c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/304a5f07867cff4cb6a558d320efafd7c6da56c3", "html_url": "https://github.com/rust-lang/rust/commit/304a5f07867cff4cb6a558d320efafd7c6da56c3"}], "stats": {"total": 282, "additions": 202, "deletions": 80}, "files": [{"sha": "1c5d202d4d953644fee972fefc12522dcf4731a6", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -180,6 +180,7 @@ pub static tag_misc_info: uint = 0x7f;\n pub static tag_misc_info_crate_items: uint = 0x80;\n \n pub static tag_item_method_provided_source: uint = 0x81;\n+pub static tag_item_impl_vtables: uint = 0x82;\n \n pub struct LinkMeta {\n     name: @str,"}, {"sha": "6f7feae4479b98d5b2de29b85d2761a3e5f4dda8", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -16,6 +16,7 @@ use metadata::cstore;\n use metadata::decoder;\n use metadata;\n use middle::ty;\n+use middle::typeck;\n \n use std::vec;\n use reader = extra::ebml::reader;\n@@ -216,6 +217,14 @@ pub fn get_impl_trait(tcx: ty::ctxt,\n     decoder::get_impl_trait(cdata, def.node, tcx)\n }\n \n+// Given a def_id for an impl, return information about its vtables\n+pub fn get_impl_vtables(tcx: ty::ctxt,\n+                        def: ast::def_id) -> typeck::impl_res {\n+    let cstore = tcx.cstore;\n+    let cdata = cstore::get_crate_data(cstore, def.crate);\n+    decoder::get_impl_vtables(cdata, def.node, tcx)\n+}\n+\n pub fn get_impl_method(cstore: @mut cstore::CStore,\n                        def: ast::def_id,\n                        mname: ast::ident)"}, {"sha": "0f6a912b917ab507238236cf8be7710488b06e9b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -21,6 +21,9 @@ use metadata::tydecode::{parse_ty_data, parse_def_id,\n                          parse_type_param_def_data,\n                          parse_bare_fn_ty_data, parse_trait_ref_data};\n use middle::ty;\n+use middle::typeck;\n+use middle::astencode::vtable_decoder_helpers;\n+\n \n use std::hash::HashUtil;\n use std::int;\n@@ -410,6 +413,21 @@ pub fn get_impl_trait(cdata: cmd,\n     }\n }\n \n+pub fn get_impl_vtables(cdata: cmd,\n+                        id: ast::node_id,\n+                        tcx: ty::ctxt) -> typeck::impl_res\n+{\n+    let item_doc = lookup_item(id, cdata.data);\n+    let vtables_doc = reader::get_doc(item_doc, tag_item_impl_vtables);\n+    let mut decoder = reader::Decoder(vtables_doc);\n+\n+    typeck::impl_res {\n+        trait_vtables: decoder.read_vtable_res(tcx, cdata),\n+        self_vtables: decoder.read_vtable_param_res(tcx, cdata)\n+    }\n+}\n+\n+\n pub fn get_impl_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n                        name: ast::ident) -> Option<ast::def_id> {\n     let items = reader::get_doc(reader::Doc(cdata.data), tag_items);"}, {"sha": "2af8e84cd3e96969ff00d6dc470e32180435a16b", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -17,6 +17,8 @@ use metadata::decoder;\n use metadata::tyencode;\n use middle::ty::{node_id_to_type, lookup_item_type};\n use middle::ty;\n+use middle::typeck;\n+use middle::astencode;\n use middle;\n \n use std::hash::HashUtil;\n@@ -162,6 +164,15 @@ fn encode_trait_ref(ebml_w: &mut writer::Encoder,\n     ebml_w.end_tag();\n }\n \n+fn encode_impl_vtables(ebml_w: &mut writer::Encoder,\n+                       ecx: &EncodeContext,\n+                       vtables: &typeck::impl_res) {\n+    ebml_w.start_tag(tag_item_impl_vtables);\n+    astencode::encode_vtable_res(ecx, ebml_w, vtables.trait_vtables);\n+    astencode::encode_vtable_param_res(ecx, ebml_w, vtables.self_vtables);\n+    ebml_w.end_tag();\n+}\n+\n // Item info table encoding\n fn encode_family(ebml_w: &mut writer::Encoder, c: char) {\n     ebml_w.start_tag(tag_items_data_item_family);\n@@ -1009,6 +1020,8 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             let trait_ref = ty::node_id_to_trait_ref(\n                 tcx, ast_trait_ref.ref_id);\n             encode_trait_ref(ebml_w, ecx, trait_ref, tag_item_trait_ref);\n+            let impl_vtables = ty::lookup_impl_vtables(tcx, def_id);\n+            encode_impl_vtables(ebml_w, ecx, &impl_vtables);\n         }\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n         ebml_w.end_tag();"}, {"sha": "447f7315f94c8ce4fa9554949c53a79536a2e94b", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 73, "deletions": 18, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -250,13 +250,21 @@ impl<S:serialize::Encoder> def_id_encoder_helpers for S {\n \n trait def_id_decoder_helpers {\n     fn read_def_id(&mut self, xcx: @ExtendedDecodeContext) -> ast::def_id;\n+    fn read_def_id_noxcx(&mut self,\n+                         cdata: @cstore::crate_metadata) -> ast::def_id;\n }\n \n impl<D:serialize::Decoder> def_id_decoder_helpers for D {\n     fn read_def_id(&mut self, xcx: @ExtendedDecodeContext) -> ast::def_id {\n         let did: ast::def_id = Decodable::decode(self);\n         did.tr(xcx)\n     }\n+\n+    fn read_def_id_noxcx(&mut self,\n+                         cdata: @cstore::crate_metadata) -> ast::def_id {\n+        let did: ast::def_id = Decodable::decode(self);\n+        decoder::translate_def_id(cdata, did)\n+    }\n }\n \n // ______________________________________________________________________\n@@ -595,21 +603,28 @@ impl tr for method_origin {\n // ______________________________________________________________________\n // Encoding and decoding vtable_res\n \n-fn encode_vtable_res(ecx: &e::EncodeContext,\n+pub fn encode_vtable_res(ecx: &e::EncodeContext,\n                      ebml_w: &mut writer::Encoder,\n                      dr: typeck::vtable_res) {\n     // can't autogenerate this code because automatic code of\n     // ty::t doesn't work, and there is no way (atm) to have\n     // hand-written encoding routines combine with auto-generated\n     // ones.  perhaps we should fix this.\n     do ebml_w.emit_from_vec(*dr) |ebml_w, param_tables| {\n-        do ebml_w.emit_from_vec(**param_tables) |ebml_w, vtable_origin| {\n-            encode_vtable_origin(ecx, ebml_w, vtable_origin)\n-        }\n+        encode_vtable_param_res(ecx, ebml_w, *param_tables);\n     }\n }\n \n-fn encode_vtable_origin(ecx: &e::EncodeContext,\n+pub fn encode_vtable_param_res(ecx: &e::EncodeContext,\n+                     ebml_w: &mut writer::Encoder,\n+                     param_tables: typeck::vtable_param_res) {\n+    do ebml_w.emit_from_vec(*param_tables) |ebml_w, vtable_origin| {\n+        encode_vtable_origin(ecx, ebml_w, vtable_origin)\n+    }\n+}\n+\n+\n+pub fn encode_vtable_origin(ecx: &e::EncodeContext,\n                         ebml_w: &mut writer::Encoder,\n                         vtable_origin: &typeck::vtable_origin) {\n     do ebml_w.emit_enum(\"vtable_origin\") |ebml_w| {\n@@ -648,22 +663,35 @@ fn encode_vtable_origin(ecx: &e::EncodeContext,\n     }\n }\n \n-trait vtable_decoder_helpers {\n-    fn read_vtable_res(&mut self, xcx: @ExtendedDecodeContext)\n+pub trait vtable_decoder_helpers {\n+    fn read_vtable_res(&mut self,\n+                       tcx: ty::ctxt, cdata: @cstore::crate_metadata)\n                       -> typeck::vtable_res;\n-    fn read_vtable_origin(&mut self, xcx: @ExtendedDecodeContext)\n+    fn read_vtable_param_res(&mut self,\n+                       tcx: ty::ctxt, cdata: @cstore::crate_metadata)\n+                      -> typeck::vtable_param_res;\n+    fn read_vtable_origin(&mut self,\n+                          tcx: ty::ctxt, cdata: @cstore::crate_metadata)\n                           -> typeck::vtable_origin;\n }\n \n impl vtable_decoder_helpers for reader::Decoder {\n-    fn read_vtable_res(&mut self, xcx: @ExtendedDecodeContext)\n+    fn read_vtable_res(&mut self,\n+                       tcx: ty::ctxt, cdata: @cstore::crate_metadata)\n                       -> typeck::vtable_res {\n         @self.read_to_vec(|this|\n-           @this.read_to_vec(|this|\n-               this.read_vtable_origin(xcx)))\n+                          this.read_vtable_param_res(tcx, cdata))\n     }\n \n-    fn read_vtable_origin(&mut self, xcx: @ExtendedDecodeContext)\n+    fn read_vtable_param_res(&mut self,\n+                             tcx: ty::ctxt, cdata: @cstore::crate_metadata)\n+                      -> typeck::vtable_param_res {\n+        @self.read_to_vec(|this|\n+                          this.read_vtable_origin(tcx, cdata))\n+    }\n+\n+    fn read_vtable_origin(&mut self,\n+                          tcx: ty::ctxt, cdata: @cstore::crate_metadata)\n         -> typeck::vtable_origin {\n         do self.read_enum(\"vtable_origin\") |this| {\n             do this.read_enum_variant([\"vtable_static\",\n@@ -674,13 +702,13 @@ impl vtable_decoder_helpers for reader::Decoder {\n                   0 => {\n                     typeck::vtable_static(\n                         do this.read_enum_variant_arg(0u) |this| {\n-                            this.read_def_id(xcx)\n+                            this.read_def_id_noxcx(cdata)\n                         },\n                         do this.read_enum_variant_arg(1u) |this| {\n-                            this.read_tys(xcx)\n+                            this.read_tys_noxcx(tcx, cdata)\n                         },\n                         do this.read_enum_variant_arg(2u) |this| {\n-                            this.read_vtable_res(xcx)\n+                            this.read_vtable_res(tcx, cdata)\n                         }\n                     )\n                   }\n@@ -697,7 +725,7 @@ impl vtable_decoder_helpers for reader::Decoder {\n                   2 => {\n                     typeck::vtable_self(\n                         do this.read_enum_variant_arg(0u) |this| {\n-                            this.read_def_id(xcx)\n+                            this.read_def_id_noxcx(cdata)\n                         }\n                     )\n                   }\n@@ -995,9 +1023,35 @@ trait ebml_decoder_decoder_helpers {\n                       source: DefIdSource,\n                       did: ast::def_id)\n                       -> ast::def_id;\n+\n+    // Versions of the type reading functions that don't need the full\n+    // ExtendedDecodeContext.\n+    fn read_ty_noxcx(&mut self,\n+                     tcx: ty::ctxt, cdata: @cstore::crate_metadata) -> ty::t;\n+    fn read_tys_noxcx(&mut self,\n+                      tcx: ty::ctxt,\n+                      cdata: @cstore::crate_metadata) -> ~[ty::t];\n }\n \n impl ebml_decoder_decoder_helpers for reader::Decoder {\n+    fn read_ty_noxcx(&mut self,\n+                     tcx: ty::ctxt, cdata: @cstore::crate_metadata) -> ty::t {\n+        do self.read_opaque |_, doc| {\n+            tydecode::parse_ty_data(\n+                *doc.data,\n+                cdata.cnum,\n+                doc.start,\n+                tcx,\n+                |_, id| decoder::translate_def_id(cdata, id))\n+        }\n+    }\n+\n+    fn read_tys_noxcx(&mut self,\n+                      tcx: ty::ctxt,\n+                      cdata: @cstore::crate_metadata) -> ~[ty::t] {\n+        self.read_to_vec(|this| this.read_ty_noxcx(tcx, cdata) )\n+    }\n+\n     fn read_ty(&mut self, xcx: @ExtendedDecodeContext) -> ty::t {\n         // Note: regions types embed local node ids.  In principle, we\n         // should translate these node ids into the new decode\n@@ -1160,8 +1214,9 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                             val_dsr.read_method_map_entry(xcx));\n                     }\n                     c::tag_table_vtable_map => {\n-                        dcx.maps.vtable_map.insert(id,\n-                                                   val_dsr.read_vtable_res(xcx));\n+                        dcx.maps.vtable_map.insert(\n+                            id,\n+                            val_dsr.read_vtable_res(xcx.dcx.tcx, xcx.dcx.cdata));\n                     }\n                     c::tag_table_adjustments => {\n                         let adj: @ty::AutoAdjustment = @Decodable::decode(val_dsr);"}, {"sha": "858294a9ffadabe9dac10f6e1f2ad03d0f98c072", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 18, "deletions": 40, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -193,42 +193,27 @@ pub fn trans_fn_ref_with_vtables_to_callee(\n                                                type_params, vtables))}\n }\n \n-fn get_impl_resolutions(bcx: @mut Block,\n-                        impl_id: ast::def_id)\n-                         -> typeck::vtable_res {\n-    if impl_id.crate == ast::local_crate {\n-        bcx.ccx().maps.vtable_map.get_copy(&impl_id.node)\n-    } else {\n-        // XXX: This is a temporary hack to work around not properly\n-        // exporting information about resolutions for impls.\n-        // This doesn't actually work if the trait has param bounds,\n-        // but it does allow us to survive the case when it does not.\n-        let trait_ref = ty::impl_trait_ref(bcx.tcx(), impl_id).get();\n-        @vec::from_elem(trait_ref.substs.tps.len(), @~[])\n-    }\n-}\n-\n fn resolve_default_method_vtables(bcx: @mut Block,\n                                   impl_id: ast::def_id,\n                                   method: &ty::Method,\n                                   substs: &ty::substs,\n                                   impl_vtables: Option<typeck::vtable_res>)\n-                                 -> typeck::vtable_res {\n+                          -> (typeck::vtable_res, typeck::vtable_param_res) {\n \n     // Get the vtables that the impl implements the trait at\n-    let trait_vtables = get_impl_resolutions(bcx, impl_id);\n+    let impl_res = ty::lookup_impl_vtables(bcx.tcx(), impl_id);\n \n     // Build up a param_substs that we are going to resolve the\n     // trait_vtables under.\n     let param_substs = Some(@param_substs {\n         tys: substs.tps.clone(),\n         self_ty: substs.self_ty,\n         vtables: impl_vtables,\n-        self_vtable: None\n+        self_vtables: None\n     });\n \n     let trait_vtables_fixed = resolve_vtables_under_param_substs(\n-        bcx.tcx(), param_substs, trait_vtables);\n+        bcx.tcx(), param_substs, impl_res.trait_vtables);\n \n     // Now we pull any vtables for parameters on the actual method.\n     let num_method_vtables = method.generics.type_param_defs.len();\n@@ -241,7 +226,12 @@ fn resolve_default_method_vtables(bcx: @mut Block,\n         None => vec::from_elem(num_method_vtables, @~[])\n     };\n \n-    @(*trait_vtables_fixed + method_vtables)\n+    let param_vtables = @(*trait_vtables_fixed + method_vtables);\n+\n+    let self_vtables = resolve_param_vtables_under_param_substs(\n+        bcx.tcx(), param_substs, impl_res.self_vtables);\n+\n+    (param_vtables, self_vtables)\n }\n \n \n@@ -296,7 +286,7 @@ pub fn trans_fn_ref_with_vtables(\n     // We need to do a bunch of special handling for default methods.\n     // We need to modify the def_id and our substs in order to monomorphize\n     // the function.\n-    let (is_default, def_id, substs, self_vtable, vtables) =\n+    let (is_default, def_id, substs, self_vtables, vtables) =\n         match ty::provided_source(tcx, def_id) {\n         None => (false, def_id, substs, None, vtables),\n         Some(source_id) => {\n@@ -319,20 +309,6 @@ pub fn trans_fn_ref_with_vtables(\n                 .expect(\"could not find trait_ref for impl with \\\n                          default methods\");\n \n-            // Get all of the type params for the receiver\n-            let param_defs = method.generics.type_param_defs;\n-            let receiver_substs =\n-                type_params.initn(param_defs.len()).to_owned();\n-            let receiver_vtables = match vtables {\n-                None => @~[],\n-                Some(call_vtables) => {\n-                    @call_vtables.initn(param_defs.len()).to_owned()\n-                }\n-            };\n-\n-            let self_vtable =\n-                typeck::vtable_static(impl_id, receiver_substs,\n-                                      receiver_vtables);\n             // Compute the first substitution\n             let first_subst = make_substs_for_receiver_types(\n                 tcx, impl_id, trait_ref, method);\n@@ -341,20 +317,22 @@ pub fn trans_fn_ref_with_vtables(\n             let new_substs = first_subst.subst(tcx, &substs);\n \n \n-            let vtables =\n+            let (param_vtables, self_vtables) =\n                 resolve_default_method_vtables(bcx, impl_id,\n                                                method, &substs, vtables);\n \n             debug!(\"trans_fn_with_vtables - default method: \\\n                     substs = %s, trait_subst = %s, \\\n                     first_subst = %s, new_subst = %s, \\\n-                    self_vtable = %s, vtables = %s\",\n+                    vtables = %s, \\\n+                    self_vtable = %s, param_vtables = %s\",\n                    substs.repr(tcx), trait_ref.substs.repr(tcx),\n                    first_subst.repr(tcx), new_substs.repr(tcx),\n-                   self_vtable.repr(tcx), vtables.repr(tcx));\n+                   vtables.repr(tcx),\n+                   self_vtables.repr(tcx), param_vtables.repr(tcx));\n \n             (true, source_id,\n-             new_substs, Some(self_vtable), Some(vtables))\n+             new_substs, Some(self_vtables), Some(param_vtables))\n         }\n     };\n \n@@ -400,7 +378,7 @@ pub fn trans_fn_ref_with_vtables(\n \n         let (val, must_cast) =\n             monomorphize::monomorphic_fn(ccx, def_id, &substs,\n-                                         vtables, self_vtable,\n+                                         vtables, self_vtables,\n                                          Some(ref_id));\n         let mut val = val;\n         if must_cast && ref_id != 0 {"}, {"sha": "5d9c44b85e18336ba8895eee1aab318a13ad3451", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -133,7 +133,7 @@ pub struct param_substs {\n     tys: ~[ty::t],\n     self_ty: Option<ty::t>,\n     vtables: Option<typeck::vtable_res>,\n-    self_vtable: Option<typeck::vtable_origin>\n+    self_vtables: Option<typeck::vtable_param_res>\n }\n \n impl param_substs {\n@@ -1037,14 +1037,25 @@ pub fn resolve_vtables_under_param_substs(tcx: ty::ctxt,\n                                           vts: typeck::vtable_res)\n     -> typeck::vtable_res {\n     @vts.iter().transform(|ds|\n-      @ds.iter().transform(\n-          |d| resolve_vtable_under_param_substs(tcx,\n-                                                param_substs,\n-                                                d))\n-                          .collect::<~[typeck::vtable_origin]>())\n-        .collect::<~[typeck::vtable_param_res]>()\n+      resolve_param_vtables_under_param_substs(tcx,\n+                                               param_substs,\n+                                               *ds))\n+        .collect()\n }\n \n+pub fn resolve_param_vtables_under_param_substs(\n+    tcx: ty::ctxt,\n+    param_substs: Option<@param_substs>,\n+    ds: typeck::vtable_param_res)\n+    -> typeck::vtable_param_res {\n+    @ds.iter().transform(\n+        |d| resolve_vtable_under_param_substs(tcx,\n+                                              param_substs,\n+                                              d))\n+        .collect()\n+}\n+\n+\n \n // Apply the typaram substitutions in the FunctionContext to a vtable. This should\n // eliminate any vtable_params.\n@@ -1088,8 +1099,8 @@ pub fn resolve_vtable_under_param_substs(tcx: ty::ctxt,\n         typeck::vtable_self(_trait_id) => {\n             match param_substs {\n                 Some(@param_substs\n-                     {self_vtable: Some(ref self_vtable), _}) => {\n-                    (*self_vtable).clone()\n+                     {self_vtables: Some(self_vtables), _}) => {\n+                    self_vtables[0].clone()\n                 }\n                 _ => {\n                     tcx.sess.bug(fmt!("}, {"sha": "1ee4cd5d2cbb8235b3101ce85204dd8f204669c9", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -222,14 +222,15 @@ pub fn trans_method_callee(bcx: @mut Block,\n         typeck::method_self(trait_id, method_index) => {\n             match bcx.fcx.param_substs {\n                 Some(@param_substs\n-                     {self_vtable: Some(ref vtbl), _}) => {\n+                     {self_vtables: Some(vtbls), _}) => {\n+                    let vtbl = vtbls[0].clone();\n                     trans_monomorphized_callee(bcx,\n                                                callee_id,\n                                                this,\n                                                mentry,\n                                                trait_id,\n                                                method_index,\n-                                               (*vtbl).clone())\n+                                               vtbl)\n                 }\n                 _ => {\n                     fail!(\"trans_method_callee: missing self_vtable\")\n@@ -611,7 +612,7 @@ pub fn vtable_id(ccx: @mut CrateContext,\n                 tys: (*substs).clone(),\n                 vtables: Some(sub_vtables),\n                 self_ty: None,\n-                self_vtable: None\n+                self_vtables: None\n             };\n \n             monomorphize::make_mono_id("}, {"sha": "9852e6b09b76763b36994ec9bf8a978052c5c77c", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -41,7 +41,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n                       fn_id: ast::def_id,\n                       real_substs: &ty::substs,\n                       vtables: Option<typeck::vtable_res>,\n-                      self_vtable: Option<typeck::vtable_origin>,\n+                      self_vtables: Option<typeck::vtable_param_res>,\n                       ref_id: Option<ast::node_id>)\n     -> (ValueRef, bool)\n {\n@@ -54,7 +54,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n            fn_id.repr(ccx.tcx),\n            real_substs.repr(ccx.tcx),\n            vtables.repr(ccx.tcx),\n-           self_vtable.repr(ccx.tcx),\n+           self_vtables.repr(ccx.tcx),\n            ref_id);\n \n     assert!(real_substs.tps.iter().all(|t| !ty::type_needs_infer(*t)));\n@@ -72,7 +72,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n         tys: real_substs.tps.map(|x| do_normalize(x)),\n         vtables: vtables,\n         self_ty: real_substs.self_ty.map(|x| do_normalize(x)),\n-        self_vtable: self_vtable\n+        self_vtables: self_vtables\n     };\n \n     for real_substs.tps.iter().advance |s| { assert!(!ty::type_has_params(*s)); }\n@@ -371,8 +371,7 @@ pub fn make_mono_id(ccx: @mut CrateContext,\n       Some(vts) => {\n         debug!(\"make_mono_id vtables=%s substs=%s\",\n                vts.repr(ccx.tcx), substs.tys.repr(ccx.tcx));\n-        let self_vtables = substs.self_vtable.map(|vtbl| @~[(*vtbl).clone()]);\n-        let vts_iter = self_vtables.iter().chain_(vts.iter());\n+        let vts_iter = substs.self_vtables.iter().chain_(vts.iter());\n         vts_iter.zip(substs_iter).transform(|(vtable, subst)| {\n             let v = vtable.map(|vt| meth::vtable_id(ccx, vt));\n             (*subst, if !v.is_empty() { Some(@v) } else { None })"}, {"sha": "3e0b7552ba044860a8233e93a9152266b0fd60b3", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -317,6 +317,9 @@ struct ctxt_ {\n     // some point. Local variable definitions not in this set can be warned\n     // about.\n     used_mut_nodes: @mut HashSet<ast::node_id>,\n+\n+    // vtable resolution information for impl declarations\n+    impl_vtables: typeck::impl_vtable_map\n }\n \n pub enum tbox_flag {\n@@ -911,6 +914,7 @@ pub fn mk_ctxt(s: session::Session,\n         impls:  @mut HashMap::new(),\n         used_unsafe: @mut HashSet::new(),\n         used_mut_nodes: @mut HashSet::new(),\n+        impl_vtables: @mut HashMap::new(),\n      }\n }\n \n@@ -3955,6 +3959,14 @@ pub fn lookup_item_type(cx: ctxt,\n         || csearch::get_type(cx, did))\n }\n \n+pub fn lookup_impl_vtables(cx: ctxt,\n+                           did: ast::def_id)\n+                     -> typeck::impl_res {\n+    lookup_locally_or_in_crate_store(\n+        \"impl_vtables\", did, cx.impl_vtables,\n+        || csearch::get_impl_vtables(cx, did) )\n+}\n+\n /// Given the did of a trait, returns its canonical trait ref.\n pub fn lookup_trait_def(cx: ctxt, did: ast::def_id) -> @ty::TraitDef {\n     match cx.trait_defs.find(&did) {"}, {"sha": "406e4f5b30daf0b4d7f01f3a44cbb7374083af52", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -17,7 +17,7 @@ use middle::typeck::infer::fixup_err_to_str;\n use middle::typeck::infer::{resolve_and_force_all_but_regions, resolve_type};\n use middle::typeck::infer;\n use middle::typeck::{CrateCtxt, vtable_origin, vtable_res, vtable_param_res};\n-use middle::typeck::{vtable_static, vtable_param, vtable_self};\n+use middle::typeck::{vtable_static, vtable_param, vtable_self, impl_res};\n use middle::subst::Subst;\n use util::common::indenter;\n use util::ppaux;\n@@ -725,9 +725,6 @@ pub fn resolve_impl(ccx: @mut CrateCtxt, impl_item: @ast::item) {\n                                        &trait_ref.substs,\n                                        false);\n \n-            // FIXME(#7450): Doesn't work cross crate\n-            ccx.vtable_map.insert(impl_item.id, vtbls);\n-\n             // Now, locate the vtable for the impl itself. The real\n             // purpose of this is to check for supertrait impls,\n             // but that falls out of doing this.\n@@ -740,10 +737,16 @@ pub fn resolve_impl(ccx: @mut CrateCtxt, impl_item: @ast::item) {\n             // Right now, we don't have any place to store this.\n             // We will need to make one so we can use this information\n             // for compiling default methods that refer to supertraits.\n-            let _self_vtable_res =\n+            let self_vtable_res =\n                 lookup_vtables_for_param(&vcx, &loc_info, None,\n                                          &param_bounds, t, false);\n \n+\n+            let res = impl_res {\n+                trait_vtables: vtbls,\n+                self_vtables: self_vtable_res\n+            };\n+            ccx.tcx.impl_vtables.insert(def_id, res);\n         }\n     }\n }"}, {"sha": "261f266711464072e5c10e4f50acfb93c3250347", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=79f8a7fee5c82d6b5d108f9930d9445fb0e6c94a", "patch": "@@ -187,6 +187,28 @@ impl Repr for vtable_origin {\n \n pub type vtable_map = @mut HashMap<ast::node_id, vtable_res>;\n \n+\n+// Information about the vtable resolutions for for a trait impl.\n+// Mostly the information is important for implementing default\n+// methods.\n+#[deriving(Clone)]\n+pub struct impl_res {\n+    // resolutions for any bounded params on the trait definition\n+    trait_vtables: vtable_res,\n+    // resolutions for the trait /itself/ (and for supertraits)\n+    self_vtables: vtable_param_res\n+}\n+\n+impl Repr for impl_res {\n+    fn repr(&self, tcx: ty::ctxt) -> ~str {\n+        fmt!(\"impl_res {trait_vtables=%s, self_vtables=%s}\",\n+             self.trait_vtables.repr(tcx),\n+             self.self_vtables.repr(tcx))\n+    }\n+}\n+\n+pub type impl_vtable_map = @mut HashMap<ast::def_id, impl_res>;\n+\n pub struct CrateCtxt {\n     // A mapping from method call sites to traits that have that method.\n     trait_map: resolve::TraitMap,"}]}