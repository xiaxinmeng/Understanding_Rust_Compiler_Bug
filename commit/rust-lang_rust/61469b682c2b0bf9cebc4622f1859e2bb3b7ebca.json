{"sha": "61469b682c2b0bf9cebc4622f1859e2bb3b7ebca", "node_id": "C_kwDOAAsO6NoAKDYxNDY5YjY4MmMyYjBiZjljZWJjNDYyMmYxODU5ZTJiYjNiN2ViY2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T03:18:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T03:18:53Z"}, "message": "Auto merge of #96490 - dtolnay:writetmpbackport, r=Mark-Simulacrum\n\nMake [e]println macros eagerly drop temporaries (for backport)\n\nThis PR extracts the subset of #96455 which is only the parts necessary for fixing the 1.61-beta regressions in #96434.\n\nMy larger PR #96455 contains a few other changes relative to the pre-#94868 behavior; those are not necessary to backport into 1.61.\n\nargument position | before #94868 | after #94868 | after this PR\n--- |:---:|:---:|:---:\n`write!($tmp, \"\u2026\", \u2026)` | :rage: | :rage: | :rage:\n`write!(\u2026, \"\u2026\", $tmp)` | :rage: | :rage: | :rage:\n`writeln!($tmp, \"\u2026\", \u2026)` | :rage: | :rage: | :rage:\n`writeln!(\u2026, \"\u2026\", $tmp)` | :rage: | :rage: | :rage:\n`print!(\"\u2026\", $tmp)` | :rage: | :rage: | :rage:\n`println!(\"\u2026\", $tmp)` | :smiley_cat: | :rage: | :smiley_cat:\n`eprint!(\"\u2026\", $tmp)` | :rage: | :rage: | :rage:\n`eprintln!(\"\u2026\", $tmp)` | :smiley_cat: | :rage: | :smiley_cat:\n`panic!(\"\u2026\", $tmp)` | :smiley_cat: | :smiley_cat: | :smiley_cat:", "tree": {"sha": "26e9db131d3485e710f899604878d11101cd05c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e9db131d3485e710f899604878d11101cd05c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca", "html_url": "https://github.com/rust-lang/rust/commit/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf611439e3239ad3f74bd76cc46a4e89b87d8219", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf611439e3239ad3f74bd76cc46a4e89b87d8219", "html_url": "https://github.com/rust-lang/rust/commit/bf611439e3239ad3f74bd76cc46a4e89b87d8219"}, {"sha": "e2d4c7b7c8c28d0b6ed55dc2f8f1aee05e7673d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d4c7b7c8c28d0b6ed55dc2f8f1aee05e7673d0", "html_url": "https://github.com/rust-lang/rust/commit/e2d4c7b7c8c28d0b6ed55dc2f8f1aee05e7673d0"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "732acaa4186e8341adb9d3450b4d62ff004df614", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=61469b682c2b0bf9cebc4622f1859e2bb3b7ebca", "patch": "@@ -99,9 +99,9 @@ macro_rules! println {\n     () => {\n         $crate::print!(\"\\n\")\n     };\n-    ($($arg:tt)*) => {\n-        $crate::io::_print($crate::format_args_nl!($($arg)*))\n-    };\n+    ($($arg:tt)*) => {{\n+        $crate::io::_print($crate::format_args_nl!($($arg)*));\n+    }};\n }\n \n /// Prints to the standard error.\n@@ -164,9 +164,9 @@ macro_rules! eprintln {\n     () => {\n         $crate::eprint!(\"\\n\")\n     };\n-    ($($arg:tt)*) => {\n-        $crate::io::_eprint($crate::format_args_nl!($($arg)*))\n-    };\n+    ($($arg:tt)*) => {{\n+        $crate::io::_eprint($crate::format_args_nl!($($arg)*));\n+    }};\n }\n \n /// Prints and returns the value of a given expression for quick and dirty"}, {"sha": "3af37955f238079de77ae656b08b2694d33ba5ba", "filename": "src/test/pretty/dollar-crate.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "raw_url": "https://github.com/rust-lang/rust/raw/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdollar-crate.pp?ref=61469b682c2b0bf9cebc4622f1859e2bb3b7ebca", "patch": "@@ -9,5 +9,5 @@\n // pp-exact:dollar-crate.pp\n \n fn main() {\n-    ::std::io::_print(::core::fmt::Arguments::new_v1(&[\"rust\\n\"], &[]));\n+    { ::std::io::_print(::core::fmt::Arguments::new_v1(&[\"rust\\n\"], &[])); };\n }"}, {"sha": "e463099a5ee4795186d28aab4710755993fabb4e", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.closure.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt", "raw_url": "https://github.com/rust-lang/rust/raw/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt?ref=61469b682c2b0bf9cebc4622f1859e2bb3b7ebca", "patch": "@@ -116,8 +116,8 @@\n   116|      1|\n   117|      1|    let\n   118|      1|        _unused_closure\n-  119|      1|    =\n-  120|      1|        |\n+  119|       |    =\n+  120|       |        |\n   121|       |            mut countdown\n   122|       |        |\n   123|      0|    {\n@@ -173,7 +173,7 @@\n   169|       |    ;\n   170|       |\n   171|      1|    let short_used_not_covered_closure_line_break_no_block_embedded_branch =\n-  172|      1|        | _unused_arg: u8 |\n+  172|       |        | _unused_arg: u8 |\n   173|      0|            println!(\n   174|      0|                \"not called: {}\",\n   175|      0|                if is_true { \"check\" } else { \"me\" }\n@@ -191,7 +191,7 @@\n   187|       |    ;\n   188|       |\n   189|      1|    let short_used_covered_closure_line_break_no_block_embedded_branch =\n-  190|       |        | _unused_arg: u8 |\n+  190|      1|        | _unused_arg: u8 |\n   191|      1|            println!(\n   192|      1|                \"not called: {}\",\n   193|      1|                if is_true { \"check\" } else { \"me\" }"}, {"sha": "43272248c280eb5d6a6555efbb14695b29c1d392", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=61469b682c2b0bf9cebc4622f1859e2bb3b7ebca", "patch": "@@ -5,5 +5,5 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `$crate :: io :: _print($crate :: format_args_nl! (\"Hello, World!\"))`\n+   = note: to `{ $crate :: io :: _print($crate :: format_args_nl! (\"Hello, World!\")) ; }`\n "}, {"sha": "fc0430d06fa1c03354a6875b6040d6793548f9b2", "filename": "src/test/ui/pattern/usefulness/tuple-struct-nonexhaustive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr?ref=61469b682c2b0bf9cebc4622f1859e2bb3b7ebca", "patch": "@@ -12,7 +12,7 @@ LL | struct Foo(isize, isize);\n    = note: the matched value is of type `Foo`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         Foo(2, b) => println!(\"{}\", b),\n+LL ~         Foo(2, b) => println!(\"{}\", b)\n LL +         Foo(_, _) => todo!()\n    |\n "}]}