{"sha": "5458b651b1ecad5cc334b494209352ac935360ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NThiNjUxYjFlY2FkNWNjMzM0YjQ5NDIwOTM1MmFjOTM1MzYwY2U=", "commit": {"author": {"name": "Marcel Hellwig", "email": "git@cookiesoft.de", "date": "2019-05-06T13:40:34Z"}, "committer": {"name": "Marcel Hellwig", "email": "git@cookiesoft.de", "date": "2019-05-06T13:40:34Z"}, "message": "use exhaustive_patterns to be able to use `?`", "tree": {"sha": "c408f0e83bd223d18ba433403b5f8183f003d0db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c408f0e83bd223d18ba433403b5f8183f003d0db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5458b651b1ecad5cc334b494209352ac935360ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5458b651b1ecad5cc334b494209352ac935360ce", "html_url": "https://github.com/rust-lang/rust/commit/5458b651b1ecad5cc334b494209352ac935360ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5458b651b1ecad5cc334b494209352ac935360ce/comments", "author": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af6ace62090aa03617fee2ef185363702634cff0", "url": "https://api.github.com/repos/rust-lang/rust/commits/af6ace62090aa03617fee2ef185363702634cff0", "html_url": "https://github.com/rust-lang/rust/commit/af6ace62090aa03617fee2ef185363702634cff0"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "2a553b2c93bd3939b0b270d534a85555de7783a3", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5458b651b1ecad5cc334b494209352ac935360ce/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5458b651b1ecad5cc334b494209352ac935360ce/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=5458b651b1ecad5cc334b494209352ac935360ce", "patch": "@@ -150,7 +150,7 @@ impl Command {\n              match cvt(syscall::clone(0))? {\n                  0 => {\n                      drop(input);\n-                     let err = self.do_exec(theirs);\n+                     let Err(err) = self.do_exec(theirs);\n                      let errno = err.raw_os_error().unwrap_or(syscall::EINVAL) as u32;\n                      let bytes = [\n                          (errno >> 24) as u8,\n@@ -218,7 +218,10 @@ impl Command {\n         }\n \n         match self.setup_io(default, true) {\n-            Ok((_, theirs)) => unsafe { self.do_exec(theirs) },\n+            Ok((_, theirs)) => unsafe {\n+                let Err(e) = self.do_exec(theirs);\n+                e\n+            },\n             Err(e) => e,\n         }\n     }\n@@ -253,7 +256,7 @@ impl Command {\n     // allocation). Instead we just close it manually. This will never\n     // have the drop glue anyway because this code never returns (the\n     // child will either exec() or invoke syscall::exit)\n-    unsafe fn do_exec(&mut self, stdio: ChildPipes) -> io::Error {\n+    unsafe fn do_exec(&mut self, stdio: ChildPipes) -> Result<!, io::Error> {\n         if let Some(fd) = stdio.stderr.fd() {\n             cvt(syscall::dup2(fd, 2, &[]))?;\n             let mut flags = cvt(syscall::fcntl(2, syscall::F_GETFD, 0))?;\n@@ -308,7 +311,7 @@ impl Command {\n         let mut file = if let Some(program) = program {\n             File::open(program.as_os_str())?\n         } else {\n-            return io::Error::from_raw_os_error(syscall::ENOENT);\n+            return Err(io::Error::from_raw_os_error(syscall::ENOENT));\n         };\n \n         // Push all the arguments\n@@ -343,7 +346,7 @@ impl Command {\n                     meta.mode() & 0o7\n                 };\n                 if mode & 1 == 0 {\n-                    return io::Error::from_raw_os_error(syscall::EPERM);\n+                    return Err(io::Error::from_raw_os_error(syscall::EPERM));\n                 }\n \n                 // Second of all, we need to actually read which interpreter it wants\n@@ -389,13 +392,12 @@ impl Command {\n         }\n \n         if let Err(err) = syscall::fexec(file.as_raw_fd(), &args, &vars) {\n-            io::Error::from_raw_os_error(err.errno as i32)\n+            Err(io::Error::from_raw_os_error(err.errno as i32))\n         } else {\n             panic!(\"return from exec without err\");\n         }\n     }\n \n-\n     fn setup_io(&self, default: Stdio, needs_stdin: bool)\n                 -> io::Result<(StdioPipes, ChildPipes)> {\n         let null = Stdio::Null;"}, {"sha": "80fe763aecc888266398d400e8ce0feb87895349", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5458b651b1ecad5cc334b494209352ac935360ce/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5458b651b1ecad5cc334b494209352ac935360ce/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=5458b651b1ecad5cc334b494209352ac935360ce", "patch": "@@ -47,7 +47,7 @@ impl Command {\n             match result {\n                 0 => {\n                     drop(input);\n-                    let err = self.do_exec(theirs, envp.as_ref());\n+                    let Err(err) = self.do_exec(theirs, envp.as_ref());\n                     let errno = err.raw_os_error().unwrap_or(libc::EINVAL) as u32;\n                     let bytes = [\n                         (errno >> 24) as u8,\n@@ -123,7 +123,8 @@ impl Command {\n                     // environment lock before we try to exec.\n                     let _lock = sys::os::env_lock();\n \n-                    self.do_exec(theirs, envp.as_ref())\n+                    let Err(e) = self.do_exec(theirs, envp.as_ref());\n+                    e\n                 }\n             }\n             Err(e) => e,\n@@ -164,7 +165,7 @@ impl Command {\n         &mut self,\n         stdio: ChildPipes,\n         maybe_envp: Option<&CStringArray>\n-    ) -> io::Error {\n+    ) -> Result<!, io::Error> {\n         use crate::sys::{self, cvt_r};\n \n         if let Some(fd) = stdio.stdin.fd() {\n@@ -224,7 +225,7 @@ impl Command {\n                                          ptr::null_mut()))?;\n             let ret = sys::signal(libc::SIGPIPE, libc::SIG_DFL);\n             if ret == libc::SIG_ERR {\n-                return io::Error::last_os_error()\n+                return Err(io::Error::last_os_error())\n             }\n         }\n \n@@ -254,7 +255,7 @@ impl Command {\n         }\n \n         libc::execvp(self.get_argv()[0], self.get_argv().as_ptr());\n-        io::Error::last_os_error()\n+        Err(io::Error::last_os_error())\n     }\n \n     #[cfg(not(any(target_os = \"macos\", target_os = \"freebsd\","}]}