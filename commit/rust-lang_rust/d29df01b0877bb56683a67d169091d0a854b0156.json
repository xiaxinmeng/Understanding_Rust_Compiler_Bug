{"sha": "d29df01b0877bb56683a67d169091d0a854b0156", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOWRmMDFiMDg3N2JiNTY2ODNhNjdkMTY5MDkxZDBhODU0YjAxNTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-14T20:16:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-14T20:16:05Z"}, "message": "Rollup merge of #64290 - Mark-Simulacrum:span-no-main, r=estebank\n\nProvide a span if main function is not present in crate\n\nUnfortunately, the diagnostic machinery does not cope well with an empty\nspan which can happen if the crate is empty, in which case we merely set\na spanless note.\n\nTests are already updated for this change, so a dedicated test is not added.\n\nResolves #36561.", "tree": {"sha": "5f0e93a69ad528bb7192d18656052c014f0f51f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f0e93a69ad528bb7192d18656052c014f0f51f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d29df01b0877bb56683a67d169091d0a854b0156", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdfUqFCRBK7hj4Ov3rIwAAdHIIACOzsNw1WtMVXL/+wZstEio5\nOGFKpjmKhJ96cgAtYk2oFQQJ65v3E85eL6gDrJxGT8quRT1iNFktBXa/qfmEPydO\n9GTzIK/eIG76ZczKeE7edGQd0dze/A8QmHdpXrd2fxTCq4ao/1bLS18eYKQSEMVV\nbeSByZ2QAF92nrvEU9fa/BJRNoKkVDCGNr2xJ6xncYfVsWuiOZEBpSmQ4yH+zSTj\nkvhyznQoWnQxm1MLyrZjR7mhvgj4ezpbG3E3LWyO2hXWhckpaOQhvVH6Xhl1X3cf\nk/Tz0Io8VD8AE3SCk/Shu3MqjJ2RZT93qNvWU/lHjiQeRgbnFuGRVE1QLReDxNY=\n=pS60\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f0e93a69ad528bb7192d18656052c014f0f51f2\nparent dee08ba55accecc13ed600e0fb6559fb28e7f480\nparent b7f20d06ea40d13834bd04ad32d098d3626f11c7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568492165 +0200\ncommitter GitHub <noreply@github.com> 1568492165 +0200\n\nRollup merge of #64290 - Mark-Simulacrum:span-no-main, r=estebank\n\nProvide a span if main function is not present in crate\n\nUnfortunately, the diagnostic machinery does not cope well with an empty\nspan which can happen if the crate is empty, in which case we merely set\na spanless note.\n\nTests are already updated for this change, so a dedicated test is not added.\n\nResolves #36561.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d29df01b0877bb56683a67d169091d0a854b0156", "html_url": "https://github.com/rust-lang/rust/commit/d29df01b0877bb56683a67d169091d0a854b0156", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d29df01b0877bb56683a67d169091d0a854b0156/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee08ba55accecc13ed600e0fb6559fb28e7f480", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee08ba55accecc13ed600e0fb6559fb28e7f480", "html_url": "https://github.com/rust-lang/rust/commit/dee08ba55accecc13ed600e0fb6559fb28e7f480"}, {"sha": "b7f20d06ea40d13834bd04ad32d098d3626f11c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f20d06ea40d13834bd04ad32d098d3626f11c7", "html_url": "https://github.com/rust-lang/rust/commit/b7f20d06ea40d13834bd04ad32d098d3626f11c7"}], "stats": {"total": 302, "additions": 176, "deletions": 126}, "files": [{"sha": "ba27d332e43f784d08084de10aa3843858fce99e", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 44, "deletions": 30, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -16,16 +16,16 @@ struct EntryContext<'a, 'tcx> {\n \n     map: &'a hir_map::Map<'tcx>,\n \n-    /// The top-level function called 'main'.\n+    /// The top-level function called `main`.\n     main_fn: Option<(HirId, Span)>,\n \n-    /// The function that has attribute named 'main'.\n+    /// The function that has attribute named `main`.\n     attr_main_fn: Option<(HirId, Span)>,\n \n     /// The function that has the attribute 'start' on it.\n     start_fn: Option<(HirId, Span)>,\n \n-    /// The functions that one might think are 'main' but aren't, e.g.\n+    /// The functions that one might think are `main` but aren't, e.g.\n     /// main functions not defined at the top level. For diagnostics.\n     non_main_fns: Vec<(HirId, Span)> ,\n }\n@@ -88,7 +88,7 @@ fn entry_point_type(item: &Item, at_root: bool) -> EntryPointType {\n                 EntryPointType::MainAttr\n             } else if item.ident.name == sym::main {\n                 if at_root {\n-                    // This is a top-level function so can be 'main'.\n+                    // This is a top-level function so can be `main`.\n                     EntryPointType::MainNamed\n                 } else {\n                     EntryPointType::OtherMain\n@@ -109,7 +109,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n                 ctxt.main_fn = Some((item.hir_id, item.span));\n             } else {\n                 span_err!(ctxt.session, item.span, E0136,\n-                          \"multiple 'main' functions\");\n+                          \"multiple `main` functions\");\n             }\n         },\n         EntryPointType::OtherMain => {\n@@ -130,7 +130,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n             if ctxt.start_fn.is_none() {\n                 ctxt.start_fn = Some((item.hir_id, item.span));\n             } else {\n-                struct_span_err!(ctxt.session, item.span, E0138, \"multiple 'start' functions\")\n+                struct_span_err!(ctxt.session, item.span, E0138, \"multiple `start` functions\")\n                     .span_label(ctxt.start_fn.unwrap().1, \"previous `start` function here\")\n                     .span_label(item.span, \"multiple `start` functions\")\n                     .emit();\n@@ -148,34 +148,48 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(De\n     } else if let Some((hir_id, _)) = visitor.main_fn {\n         Some((tcx.hir().local_def_id(hir_id), EntryFnType::Main))\n     } else {\n-        // There is no main function.\n-        let mut err = struct_err!(tcx.sess, E0601,\n-            \"`main` function not found in crate `{}`\", tcx.crate_name(LOCAL_CRATE));\n-        if !visitor.non_main_fns.is_empty() {\n-            // There were some functions named 'main' though. Try to give the user a hint.\n-            err.note(\"the main function must be defined at the crate level \\\n-                      but you have one or more functions named 'main' that are not \\\n-                      defined at the crate level. Either move the definition or \\\n-                      attach the `#[main]` attribute to override this behavior.\");\n-            for &(_, span) in &visitor.non_main_fns {\n-                err.span_note(span, \"here is a function named 'main'\");\n-            }\n-            err.emit();\n-        } else {\n-            if let Some(ref filename) = tcx.sess.local_crate_source_file {\n-                err.note(&format!(\"consider adding a `main` function to `{}`\", filename.display()));\n-            }\n-            if tcx.sess.teach(&err.get_code().unwrap()) {\n-                err.note(\"If you don't know the basics of Rust, you can go look to the Rust Book \\\n-                          to get started: https://doc.rust-lang.org/book/\");\n-            }\n-            err.emit();\n-        }\n-\n+        no_main_err(tcx, visitor);\n         None\n     }\n }\n \n+fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n+    // There is no main function.\n+    let mut err = struct_err!(tcx.sess, E0601,\n+        \"`main` function not found in crate `{}`\", tcx.crate_name(LOCAL_CRATE));\n+    let filename = &tcx.sess.local_crate_source_file;\n+    let note = if !visitor.non_main_fns.is_empty() {\n+        for &(_, span) in &visitor.non_main_fns {\n+            err.span_note(span, \"here is a function named `main`\");\n+        }\n+        err.note(\"you have one or more functions named `main` not defined at the crate level\");\n+        err.help(\"either move the `main` function definitions or attach the `#[main]` attribute \\\n+                  to one of them\");\n+        // There were some functions named `main` though. Try to give the user a hint.\n+        format!(\"the main function must be defined at the crate level{}\",\n+                 filename.as_ref().map(|f| format!(\" (in `{}`)\", f.display())).unwrap_or_default())\n+    } else if let Some(filename) = filename {\n+        format!(\"consider adding a `main` function to `{}`\", filename.display())\n+    } else {\n+        String::from(\"consider adding a `main` function at the crate level\")\n+    };\n+    let sp = tcx.hir().krate().span;\n+    // The file may be empty, which leads to the diagnostic machinery not emitting this\n+    // note. This is a relatively simple way to detect that case and emit a span-less\n+    // note instead.\n+    if let Ok(_) = tcx.sess.source_map().lookup_line(sp.lo()) {\n+        err.set_span(sp);\n+        err.span_label(sp, &note);\n+    } else {\n+        err.note(&note);\n+    }\n+    if tcx.sess.teach(&err.get_code().unwrap()) {\n+        err.note(\"If you don't know the basics of Rust, you can go look to the Rust Book \\\n+                  to get started: https://doc.rust-lang.org/book/\");\n+    }\n+    err.emit();\n+}\n+\n pub fn find_entry_point(tcx: TyCtxt<'_>) -> Option<(DefId, EntryFnType)> {\n     tcx.entry_fn(LOCAL_CRATE)\n }"}, {"sha": "d79ef62c312079881886b218413359d75856f6e5", "filename": "src/test/ui-fulldeps/hash-stable-is-unstable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -13,3 +13,5 @@ use rustc_macros::HashStable;\n #[derive(HashStable)]\n //~^ use of unstable library feature 'rustc_private'\n struct Test;\n+\n+fn main() {}"}, {"sha": "e2dc0c3be725fa13f867a7f5343bc4e2aea34e79", "filename": "src/test/ui-fulldeps/hash-stable-is-unstable.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `hash_stable_is_unstable`\n-   |\n-   = note: consider adding a `main` function to `$DIR/hash-stable-is-unstable.rs`\n-\n error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n   --> $DIR/hash-stable-is-unstable.rs:3:1\n    |\n@@ -47,7 +43,6 @@ LL | #[derive(HashStable)]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0601, E0658.\n-For more information about an error, try `rustc --explain E0601`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "59ce9496d28f0bd340141ebb819ca478b5e42adf", "filename": "src/test/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -31,3 +31,5 @@ union U2 { f: Box<dyn Iterator<Item: Copy>> }\n union U3 { f: dyn Iterator<Item: 'static> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n //~| ERROR could not find defining uses\n+\n+fn main() {}"}, {"sha": "9c4d03e900940f0af1cd4b65b0db483a98f4b139", "filename": "src/test/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -52,10 +52,6 @@ error: associated type bounds are not allowed within structs, enums, or unions\n LL | union U3 { f: dyn Iterator<Item: 'static> }\n    |                            ^^^^^^^^^^^^^\n \n-error[E0601]: `main` function not found in crate `inside_adt`\n-   |\n-   = note: consider adding a `main` function to `$DIR/inside-adt.rs`\n-\n error: could not find defining uses\n   --> $DIR/inside-adt.rs:5:29\n    |\n@@ -110,6 +106,5 @@ error: could not find defining uses\n LL | union U3 { f: dyn Iterator<Item: 'static> }\n    |                            ^^^^^^^^^^^^^\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 18 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "e9df780def5dfa0e9dc018e98f0713f3d0a5bd0d", "filename": "src/test/ui/conditional-compilation/cfg-attr-cfg-2.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,6 +1,9 @@\n error[E0601]: `main` function not found in crate `cfg_attr_cfg_2`\n+  --> $DIR/cfg-attr-cfg-2.rs:8:1\n    |\n-   = note: consider adding a `main` function to `$DIR/cfg-attr-cfg-2.rs`\n+LL | / #[cfg_attr(foo, cfg(bar))]\n+LL | | fn main() { }\n+   | |_____________^ consider adding a `main` function to `$DIR/cfg-attr-cfg-2.rs`\n \n error: aborting due to previous error\n "}, {"sha": "0b5c3e0335586d65a94a5199b9596b76830eb919", "filename": "src/test/ui/conditional-compilation/cfg-in-crate-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,6 +1,8 @@\n error[E0601]: `main` function not found in crate `cfg_in_crate_1`\n+  --> $DIR/cfg-in-crate-1.rs:3:1\n    |\n-   = note: consider adding a `main` function to `$DIR/cfg-in-crate-1.rs`\n+LL | #![cfg(bar)]\n+   | ^^^^^^^^^^^^ consider adding a `main` function to `$DIR/cfg-in-crate-1.rs`\n \n error: aborting due to previous error\n "}, {"sha": "b94c365f2539a904269473532e6928c6800c9823", "filename": "src/test/ui/continue-after-missing-main.nll.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,6 +1,14 @@\n error[E0601]: `main` function not found in crate `continue_after_missing_main`\n+  --> $DIR/continue-after-missing-main.rs:1:1\n    |\n-   = note: consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n+LL | / #![allow(dead_code)]\n+LL | |\n+LL | | // error-pattern:`main` function not found in crate\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_^ consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n \n error: aborting due to previous error\n "}, {"sha": "d764e7d860af678b4432349223b0ac3f802804d2", "filename": "src/test/ui/continue-after-missing-main.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,6 +1,14 @@\n error[E0601]: `main` function not found in crate `continue_after_missing_main`\n+  --> $DIR/continue-after-missing-main.rs:1:1\n    |\n-   = note: consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n+LL | / #![allow(dead_code)]\n+LL | |\n+LL | | // error-pattern:`main` function not found in crate\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_^ consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n \n error[E0623]: lifetime mismatch\n   --> $DIR/continue-after-missing-main.rs:30:56"}, {"sha": "175bd033067bc61ea606e29b814dcc5699f1b3b3", "filename": "src/test/ui/elided-test.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Felided-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Felided-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Felided-test.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,6 +1,10 @@\n error[E0601]: `main` function not found in crate `elided_test`\n+  --> $DIR/elided-test.rs:5:1\n    |\n-   = note: consider adding a `main` function to `$DIR/elided-test.rs`\n+LL | / #[test]\n+LL | | fn main() {\n+LL | | }\n+   | |_^ consider adding a `main` function to `$DIR/elided-test.rs`\n \n error: aborting due to previous error\n "}, {"sha": "445053a4a89e3f9adaad7e234e497ef007a29354", "filename": "src/test/ui/error-codes/E0138.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,4 +1,4 @@\n-error[E0138]: multiple 'start' functions\n+error[E0138]: multiple `start` functions\n   --> $DIR/E0138.rs:7:1\n    |\n LL | fn foo(argc: isize, argv: *const *const u8) -> isize { 0 }"}, {"sha": "4380ddeac0aacce1e0bb4d24a77225b074b553da", "filename": "src/test/ui/error-codes/E0601.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ferror-codes%2FE0601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ferror-codes%2FE0601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0601.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1 +1 @@\n-// Test for main function not found.\n+//~ ERROR `main` function not found"}, {"sha": "a687f575615d76c933b128c8651d4f4c7189bb02", "filename": "src/test/ui/error-codes/E0601.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ferror-codes%2FE0601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ferror-codes%2FE0601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0601.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,6 +1,8 @@\n error[E0601]: `main` function not found in crate `E0601`\n+  --> $DIR/E0601.rs:1:37\n    |\n-   = note: consider adding a `main` function to `$DIR/E0601.rs`\n+LL |\n+   |                                     ^ consider adding a `main` function to `$DIR/E0601.rs`\n \n error: aborting due to previous error\n "}, {"sha": "8b1343b1326b455d507daf43033cee04150b627c", "filename": "src/test/ui/issues/issue-46101.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -2,3 +2,5 @@\n trait Foo {}\n #[derive(Foo::Anything)] //~ ERROR failed to resolve: partially resolved path in a derive macro\n struct S;\n+\n+fn main() {}"}, {"sha": "9c88d3b87c907c64a7281f5df649b3362e652b77", "filename": "src/test/ui/issues/issue-46101.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -4,11 +4,6 @@ error[E0433]: failed to resolve: partially resolved path in a derive macro\n LL | #[derive(Foo::Anything)]\n    |          ^^^^^^^^^^^^^ partially resolved path in a derive macro\n \n-error[E0601]: `main` function not found in crate `issue_46101`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-46101.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0433, E0601.\n-For more information about an error, try `rustc --explain E0433`.\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "b7a541dd6642a763aa7411e086ac949de13696c5", "filename": "src/test/ui/issues/issue-49040.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,2 +1,3 @@\n #![allow(unused_variables)]; //~ ERROR expected item, found `;`\n+//~^ ERROR `main` function\n fn foo() {}"}, {"sha": "4134d6aa5446898b8a7c6d7776dadce199002886", "filename": "src/test/ui/issues/issue-49040.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -5,8 +5,12 @@ LL | #![allow(unused_variables)];\n    |                            ^ help: remove this semicolon\n \n error[E0601]: `main` function not found in crate `issue_49040`\n+  --> $DIR/issue-49040.rs:1:1\n    |\n-   = note: consider adding a `main` function to `$DIR/issue-49040.rs`\n+LL | / #![allow(unused_variables)];\n+LL | |\n+LL | | fn foo() {}\n+   | |__^ consider adding a `main` function to `$DIR/issue-49040.rs`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b52343adaee7108d37023ed50299abc5ab7a37ca", "filename": "src/test/ui/issues/issue-60057.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-60057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-60057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60057.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -15,3 +15,5 @@ impl A {\n         }\n     }\n }\n+\n+fn main() {}"}, {"sha": "4d915fcd9fe3d0c7f09f04866e6f5ab0c3b98fee", "filename": "src/test/ui/issues/issue-60057.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-60057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fissues%2Fissue-60057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60057.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -10,11 +10,6 @@ error[E0425]: cannot find value `banana` in this scope\n LL |             banana: banana\n    |                     ^^^^^^ help: you might have meant to use the available field: `self.banana`\n \n-error[E0601]: `main` function not found in crate `issue_60057`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-60057.rs`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0425, E0601.\n-For more information about an error, try `rustc --explain E0425`.\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "86cb2f0a3a8136418e084d786d345fbf68cac9e1", "filename": "src/test/ui/json-short.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fjson-short.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fjson-short.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-short.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -11,7 +11,7 @@ fn main() {\n \n If you don't know the basics of Rust, you can go look to the Rust Book to get\n started: https://doc.rust-lang.org/book/\n-\"},\"level\":\"error\",\"spans\":[],\"children\":[{\"message\":\"consider adding a `main` function to `$DIR/json-short.rs`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"error[E0601]: `main` function not found in crate `json_short`\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-short.rs\",\"byte_start\":76,\"byte_end\":76,\"line_start\":2,\"line_end\":2,\"column_start\":63,\"column_end\":63,\"is_primary\":true,\"text\":[{\"text\":\"// compile-flags: --json=diagnostic-short --error-format=json\",\"highlight_start\":63,\"highlight_end\":63}],\"label\":\"consider adding a `main` function to `$DIR/json-short.rs`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-short.rs:2:63: error[E0601]: `main` function not found in crate `json_short`\n \"}\n {\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to previous error\n \"}"}, {"sha": "5a71d6efeda62bb81e836fd23e4b2ec61575a04f", "filename": "src/test/ui/lifetime-before-type-params.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Flifetime-before-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Flifetime-before-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-before-type-params.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -7,3 +7,5 @@ fn third<T, U, 'a>() {}\n //~^ ERROR lifetime parameters must be declared prior to type parameters\n fn fourth<'a, T, 'b, U, 'c, V>() {}\n //~^ ERROR lifetime parameters must be declared prior to type parameters\n+\n+fn main() {}"}, {"sha": "76d7d0f024d65ce7d2f63b044ededc19d9fcf5c5", "filename": "src/test/ui/lifetime-before-type-params.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -22,10 +22,5 @@ error: lifetime parameters must be declared prior to type parameters\n LL | fn fourth<'a, T, 'b, U, 'c, V>() {}\n    |          --------^^-----^^---- help: reorder the parameters: lifetimes, then types: `<'a, 'b, 'c, T, U, V>`\n \n-error[E0601]: `main` function not found in crate `lifetime_before_type_params`\n-   |\n-   = note: consider adding a `main` function to `$DIR/lifetime-before-type-params.rs`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "f75d08813cdcd99c08af1909ca05efe7f2d89f14", "filename": "src/test/ui/main-wrong-location.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fmain-wrong-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fmain-wrong-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-location.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,4 +1,5 @@\n mod m {\n+//~^ ERROR `main` function not found\n     // An inferred main entry point (that doesn't use #[main])\n     // must appear at the top of the crate\n     fn main() { }"}, {"sha": "e301c2ff09ad75151a4b7024db910a4489ce5854", "filename": "src/test/ui/main-wrong-location.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fmain-wrong-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fmain-wrong-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-location.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,11 +1,21 @@\n error[E0601]: `main` function not found in crate `main_wrong_location`\n+  --> $DIR/main-wrong-location.rs:1:1\n    |\n-   = note: the main function must be defined at the crate level but you have one or more functions named 'main' that are not defined at the crate level. Either move the definition or attach the `#[main]` attribute to override this behavior.\n-note: here is a function named 'main'\n-  --> $DIR/main-wrong-location.rs:4:5\n+LL | / mod m {\n+LL | |\n+LL | |     // An inferred main entry point (that doesn't use #[main])\n+LL | |     // must appear at the top of the crate\n+LL | |     fn main() { }\n+LL | | }\n+   | |_^ the main function must be defined at the crate level (in `$DIR/main-wrong-location.rs`)\n+   |\n+note: here is a function named `main`\n+  --> $DIR/main-wrong-location.rs:5:5\n    |\n LL |     fn main() { }\n    |     ^^^^^^^^^^^^^\n+   = note: you have one or more functions named `main` not defined at the crate level\n+   = help: either move the `main` function definitions or attach the `#[main]` attribute to one of them\n \n error: aborting due to previous error\n "}, {"sha": "6a35f5117efd66cb34430617489f69a2ba29624f", "filename": "src/test/ui/missing/missing-main.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fmissing%2Fmissing-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fmissing%2Fmissing-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-main.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,6 +1,8 @@\n error[E0601]: `main` function not found in crate `missing_main`\n+  --> $DIR/missing-main.rs:2:1\n    |\n-   = note: consider adding a `main` function to `$DIR/missing-main.rs`\n+LL | fn mian() { }\n+   | ^^^^^^^^^^^^^ consider adding a `main` function to `$DIR/missing-main.rs`\n \n error: aborting due to previous error\n "}, {"sha": "8126525c34f959af0a7c681fd9a41af619805c47", "filename": "src/test/ui/parser-recovery-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser-recovery-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser-recovery-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-1.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -3,6 +3,7 @@\n // Test that we can recover from missing braces in the parser.\n \n trait Foo {\n+//~^ ERROR `main` function not found\n     fn bar() {\n         let x = foo();\n         //~^ ERROR cannot find function `foo` in this scope"}, {"sha": "ffe2b3322fc81ebbd236eab4094f996598888b72", "filename": "src/test/ui/parser-recovery-1.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-1.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,8 +1,9 @@\n error: this file contains an un-closed delimiter\n-  --> $DIR/parser-recovery-1.rs:15:55\n+  --> $DIR/parser-recovery-1.rs:16:55\n    |\n LL | trait Foo {\n    |           - un-closed delimiter\n+LL |\n LL |     fn bar() {\n    |              - this delimiter might not be properly closed...\n ...\n@@ -13,26 +14,34 @@ LL | }\n    |                                                       ^\n \n error: unexpected token: `;`\n-  --> $DIR/parser-recovery-1.rs:12:15\n+  --> $DIR/parser-recovery-1.rs:13:15\n    |\n LL |     let x = y.;\n    |               ^\n \n error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/parser-recovery-1.rs:7:17\n+  --> $DIR/parser-recovery-1.rs:8:17\n    |\n LL |         let x = foo();\n    |                 ^^^ not found in this scope\n \n error[E0425]: cannot find value `y` in this scope\n-  --> $DIR/parser-recovery-1.rs:12:13\n+  --> $DIR/parser-recovery-1.rs:13:13\n    |\n LL |     let x = y.;\n    |             ^ not found in this scope\n \n error[E0601]: `main` function not found in crate `parser_recovery_1`\n+  --> $DIR/parser-recovery-1.rs:5:1\n    |\n-   = note: consider adding a `main` function to `$DIR/parser-recovery-1.rs`\n+LL | / trait Foo {\n+LL | |\n+LL | |     fn bar() {\n+LL | |         let x = foo();\n+...  |\n+LL | |\n+LL | | }\n+   | |______________________________________________________^ consider adding a `main` function to `$DIR/parser-recovery-1.rs`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "a14eb6e32fc91cf9db73893d784fafc43fe3fd23", "filename": "src/test/ui/parser/issue-2354.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Fissue-2354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Fissue-2354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-2354.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,4 +1,7 @@\n fn foo() { //~ NOTE un-closed delimiter\n+//~^ ERROR `main` function not found\n+//~^^ NOTE main function must be defined\n+//~^^^ NOTE you have one or more functions\n   match Some(10) {\n   //~^ NOTE this delimiter might not be properly closed...\n       Some(y) => { panic!(); }\n@@ -11,5 +14,5 @@ fn bar() {\n     while (i < 1000) {}\n }\n \n-fn main() {} //~ NOTE here is a function named 'main'\n+fn main() {} //~ NOTE here is a function named `main`\n              //~ ERROR this file contains an un-closed delimiter"}, {"sha": "038e3dcfa40a90c4f53e5b005450e85491cf2336", "filename": "src/test/ui/parser/issue-2354.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Fissue-2354.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Fissue-2354.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-2354.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,8 +1,9 @@\n error: this file contains an un-closed delimiter\n-  --> $DIR/issue-2354.rs:15:66\n+  --> $DIR/issue-2354.rs:18:66\n    |\n LL | fn foo() {\n    |          - un-closed delimiter\n+...\n LL |   match Some(10) {\n    |                  - this delimiter might not be properly closed...\n ...\n@@ -13,13 +14,24 @@ LL |\n    |                                                                  ^\n \n error[E0601]: `main` function not found in crate `issue_2354`\n+  --> $DIR/issue-2354.rs:1:1\n+   |\n+LL | / fn foo() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | | fn main() {}\n+LL | |\n+   | |_________________________________________________________________^ the main function must be defined at the crate level (in `$DIR/issue-2354.rs`)\n    |\n-   = note: the main function must be defined at the crate level but you have one or more functions named 'main' that are not defined at the crate level. Either move the definition or attach the `#[main]` attribute to override this behavior.\n-note: here is a function named 'main'\n-  --> $DIR/issue-2354.rs:14:1\n+note: here is a function named `main`\n+  --> $DIR/issue-2354.rs:17:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^^^^\n+   = note: you have one or more functions named `main` not defined at the crate level\n+   = help: either move the `main` function definitions or attach the `#[main]` attribute to one of them\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d35dafd9a3443b6786151fde77ba5ff4774fccce", "filename": "src/test/ui/parser/lex-bad-char-literals-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -2,3 +2,5 @@\n static c: char =\n     'nope' //~ ERROR: character literal may only contain one codepoint\n ;\n+\n+fn main() {}"}, {"sha": "5653d4ea672af668115e1b484cfa0b927f455683", "filename": "src/test/ui/parser/lex-bad-char-literals-2.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -8,10 +8,5 @@ help: if you meant to write a `str` literal, use double quotes\n LL |     \"nope\"\n    |     ^^^^^^\n \n-error[E0601]: `main` function not found in crate `lex_bad_char_literals_2`\n-   |\n-   = note: consider adding a `main` function to `$DIR/lex-bad-char-literals-2.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "818f61b4d2229e74c73749f5aa4048784dd78e3d", "filename": "src/test/ui/parser/unclosed-delimiter-in-dep.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,5 +1,5 @@\n error: incorrect close delimiter: `}`\n-  --> $DIR/unclosed_delim_mod.rs:5:1\n+  --> $DIR/unclosed_delim_mod.rs:7:1\n    |\n LL | pub fn new() -> Result<Value, ()> {\n    |                                   - close delimiter possibly meant for this"}, {"sha": "486e23312819d49cee3a7d2047170e2297fa0af3", "filename": "src/test/ui/parser/unclosed_delim_mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,3 +1,5 @@\n+fn main() {}\n+\n pub struct Value {}\n pub fn new() -> Result<Value, ()> {\n     Ok(Value {"}, {"sha": "fe2d968af0f326ade9450a9bdf21d6f5f69d2420", "filename": "src/test/ui/parser/unclosed_delim_mod.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,5 +1,5 @@\n error: incorrect close delimiter: `}`\n-  --> $DIR/unclosed_delim_mod.rs:5:1\n+  --> $DIR/unclosed_delim_mod.rs:7:1\n    |\n LL | pub fn new() -> Result<Value, ()> {\n    |                                   - close delimiter possibly meant for this\n@@ -9,10 +9,5 @@ LL |     }\n LL | }\n    | ^ incorrect close delimiter\n \n-error[E0601]: `main` function not found in crate `unclosed_delim_mod`\n-   |\n-   = note: consider adding a `main` function to `$DIR/unclosed_delim_mod.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "198ea752881f1779a8a81dd29bb10f1ebfcd7ee6", "filename": "src/test/ui/resolve/visibility-indeterminate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -3,3 +3,5 @@\n foo!(); //~ ERROR cannot find macro `foo!` in this scope\n \n pub(in ::bar) struct Baz {} //~ ERROR cannot determine resolution for the visibility\n+\n+fn main() {}"}, {"sha": "17927a5967dcb7af90afa551fbdddff4fbf52a95", "filename": "src/test/ui/resolve/visibility-indeterminate.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -10,10 +10,5 @@ error: cannot find macro `foo!` in this scope\n LL | foo!();\n    | ^^^\n \n-error[E0601]: `main` function not found in crate `visibility_indeterminate`\n-   |\n-   = note: consider adding a `main` function to `$DIR/visibility-indeterminate.rs`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "26a52ce60cfd8b1c63d3f755bcf4ef929f102e66", "filename": "src/test/ui/tool-attributes/diagnostic_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,2 +1,3 @@\n #[rustc_diagnostic_item = \"foomp\"] //~ ERROR compiler internal support for linting\n struct Foomp;\n+fn main() {}"}, {"sha": "5432f8dea8606208dd8b623ecf354b6a311d9e2b", "filename": "src/test/ui/tool-attributes/diagnostic_item.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -7,11 +7,6 @@ LL | #[rustc_diagnostic_item = \"foomp\"]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n-error[E0601]: `main` function not found in crate `diagnostic_item`\n-   |\n-   = note: consider adding a `main` function to `$DIR/diagnostic_item.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0601, E0658.\n-For more information about an error, try `rustc --explain E0601`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9e96b1cf7b05fccde5812b007d2bb5c96c2bf6a5", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -24,3 +24,5 @@ where\n             .map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n     }\n }\n+\n+fn main() {}"}, {"sha": "b838c06cadee34337f41096d7f76eb248fba24a1", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `issue_60564`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-60564.rs`\n-\n error: type parameter `E` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-60564.rs:20:49\n    |\n@@ -20,6 +16,5 @@ error: could not find defining uses\n LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "c21d9f3d97cbb330eb9fbb17a4435be06f40c4e3", "filename": "src/test/ui/type/ascription/issue-34255-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -13,3 +13,4 @@ impl Reactor {\n }\n \n // This case isn't currently being handled gracefully, including for completeness.\n+fn main() {}"}, {"sha": "195b393b2f609a7d5fe5ba26551ba53aebc67922", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29df01b0877bb56683a67d169091d0a854b0156/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=d29df01b0877bb56683a67d169091d0a854b0156", "patch": "@@ -14,17 +14,13 @@ LL |         input_cells: Vec::new()\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error[E0601]: `main` function not found in crate `issue_34255_1`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-34255-1.rs`\n-\n error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/issue-34255-1.rs:7:22\n    |\n LL |         input_cells: Vec::new()\n    |                      ^^^^^^^^^^ expected 1 type argument\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0107, E0425, E0601.\n+Some errors have detailed explanations: E0107, E0425.\n For more information about an error, try `rustc --explain E0107`."}]}