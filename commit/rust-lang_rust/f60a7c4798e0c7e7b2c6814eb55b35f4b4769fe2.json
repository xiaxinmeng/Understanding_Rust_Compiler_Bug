{"sha": "f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MGE3YzQ3OThlMGM3ZTdiMmM2ODE0ZWI1NWIzNWY0YjQ3NjlmZTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-07-22T09:27:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-08-28T18:15:32Z"}, "message": "Fix regionck to consider bounds on a proc when capturing variables", "tree": {"sha": "eacce78b70d64ad1d0d4d9bee9830fc41452346c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eacce78b70d64ad1d0d4d9bee9830fc41452346c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2", "html_url": "https://github.com/rust-lang/rust/commit/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5165321e48c1fd8422803fb40693afab7939c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5165321e48c1fd8422803fb40693afab7939c8c", "html_url": "https://github.com/rust-lang/rust/commit/b5165321e48c1fd8422803fb40693afab7939c8c"}], "stats": {"total": 100, "additions": 96, "deletions": 4}, "files": [{"sha": "e7676301946d578f69c25927a32b6d80071f74cb", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2", "patch": "@@ -1534,6 +1534,12 @@ fn adjust_borrow_kind_for_assignment_lhs(rcx: &Rcx,\n \n fn adjust_upvar_borrow_kind_for_mut(rcx: &Rcx,\n                                     cmt: mc::cmt) {\n+    /*!\n+     * Indicates that `cmt` is being directly mutated (e.g., assigned\n+     * to).  If cmt contains any by-ref upvars, this implies that\n+     * those upvars must be borrowed using an `&mut` borow.\n+     */\n+\n     let mut cmt = cmt;\n     loop {\n         debug!(\"adjust_upvar_borrow_kind_for_mut(cmt={})\","}, {"sha": "bd355d2f580b9dbc79087742d2d764b9a299d52f", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2", "patch": "@@ -583,6 +583,19 @@ impl<'a> ErrorReporting for InferCtxt<'a> {\n                     sub,\n                     \"\");\n             }\n+            infer::ProcCapture(span, id) => {\n+                self.tcx.sess.span_err(\n+                    span,\n+                    format!(\"captured variable `{}` must be 'static \\\n+                             to be captured in a proc\",\n+                            ty::local_var_name_str(self.tcx, id).get())\n+                        .as_slice());\n+                note_and_explain_region(\n+                    self.tcx,\n+                    \"captured variable is only valid for \",\n+                    sup,\n+                    \"\");\n+            }\n             infer::IndexSlice(span) => {\n                 self.tcx.sess.span_err(span,\n                                        \"index of slice outside its lifetime\");\n@@ -1423,11 +1436,11 @@ impl<'a> ErrorReportingHelpers for InferCtxt<'a> {\n                         bound_region_to_string(self.tcx, \"lifetime parameter \", true, br))\n             }\n             infer::EarlyBoundRegion(_, name) => {\n-                format!(\" for lifetime parameter `{}\",\n+                format!(\" for lifetime parameter `{}`\",\n                         token::get_name(name).get())\n             }\n             infer::BoundRegionInCoherence(name) => {\n-                format!(\" for lifetime parameter `{} in coherence check\",\n+                format!(\" for lifetime parameter `{}` in coherence check\",\n                         token::get_name(name).get())\n             }\n             infer::UpvarRegion(ref upvar_id, _) => {\n@@ -1528,6 +1541,15 @@ impl<'a> ErrorReportingHelpers for InferCtxt<'a> {\n                                 self.tcx,\n                                 id).get().to_string()).as_slice());\n             }\n+            infer::ProcCapture(span, id) => {\n+                self.tcx.sess.span_note(\n+                    span,\n+                    format!(\"...so that captured variable `{}` \\\n+                            is 'static\",\n+                            ty::local_var_name_str(\n+                                self.tcx,\n+                                id).get()).as_slice());\n+            }\n             infer::IndexSlice(span) => {\n                 self.tcx.sess.span_note(\n                     span,\n@@ -1571,8 +1593,8 @@ impl<'a> ErrorReportingHelpers for InferCtxt<'a> {\n             infer::AutoBorrow(span) => {\n                 self.tcx.sess.span_note(\n                     span,\n-                    \"...so that reference is valid \\\n-                     at the time of implicit borrow\");\n+                    \"...so that auto-reference is valid \\\n+                     at the time of borrow\");\n             }\n             infer::ExprTypeIsNotInScope(t, span) => {\n                 self.tcx.sess.span_note("}, {"sha": "c6312ec4663d62d177da244bf353687d030cc842", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2", "patch": "@@ -161,6 +161,9 @@ pub enum SubregionOrigin {\n     // Closure bound must not outlive captured free variables\n     FreeVariable(Span, ast::NodeId),\n \n+    // Proc upvars must be 'static\n+    ProcCapture(Span, ast::NodeId),\n+\n     // Index into slice must be within its lifetime\n     IndexSlice(Span),\n \n@@ -933,6 +936,7 @@ impl SubregionOrigin {\n             InvokeClosure(a) => a,\n             DerefPointer(a) => a,\n             FreeVariable(a, _) => a,\n+            ProcCapture(a, _) => a,\n             IndexSlice(a) => a,\n             RelateObjectBound(a) => a,\n             RelateProcBound(a, _, _) => a,\n@@ -972,6 +976,9 @@ impl Repr for SubregionOrigin {\n             FreeVariable(a, b) => {\n                 format!(\"FreeVariable({}, {})\", a.repr(tcx), b)\n             }\n+            ProcCapture(a, b) => {\n+                format!(\"ProcCapture({}, {})\", a.repr(tcx), b)\n+            }\n             IndexSlice(a) => {\n                 format!(\"IndexSlice({})\", a.repr(tcx))\n             }"}, {"sha": "7fe85290da0ecf5355f3f2e866de52f07654fdc2", "filename": "src/test/compile-fail/regions-infer-proc-static-upvar.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2/src%2Ftest%2Fcompile-fail%2Fregions-infer-proc-static-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2/src%2Ftest%2Fcompile-fail%2Fregions-infer-proc-static-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-proc-static-upvar.rs?ref=f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that, when a variable of type `&T` is captured inside a proc,\n+// we correctly infer/require that its lifetime is 'static.\n+\n+fn foo(_p: proc():'static) { }\n+\n+static i: int = 3;\n+\n+fn capture_local() {\n+    let x = 3i;\n+    let y = &x; //~ ERROR `x` does not live long enough\n+    foo(proc() {\n+        let _a = *y;\n+    });\n+}\n+\n+fn capture_static() {\n+    // Legal because &i can have static lifetime:\n+    let y = &i;\n+    foo(proc() {\n+        let _a = *y;\n+    });\n+}\n+\n+fn main() { }"}, {"sha": "823644ddfb51954bf79dab420014872869042e0c", "filename": "src/test/run-pass/regions-infer-static-from-proc.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2/src%2Ftest%2Frun-pass%2Fregions-infer-static-from-proc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2/src%2Ftest%2Frun-pass%2Fregions-infer-static-from-proc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-static-from-proc.rs?ref=f60a7c4798e0c7e7b2c6814eb55b35f4b4769fe2", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that the 'static bound on a proc influences lifetimes of\n+// region variables contained within (otherwise, region inference will\n+// give `x` a very short lifetime).\n+\n+static i: uint = 3;\n+fn foo(_: proc():'static) {}\n+fn read(_: uint) { }\n+pub fn main() {\n+    let x = &i;\n+    foo(proc() {\n+        read(*x);\n+    });\n+}"}]}