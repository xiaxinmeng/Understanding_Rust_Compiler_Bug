{"sha": "dc8254c6abdfcd273cb49475e798048558dcf4db", "node_id": "C_kwDOAAsO6NoAKGRjODI1NGM2YWJkZmNkMjczY2I0OTQ3NWU3OTgwNDg1NThkY2Y0ZGI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-19T09:32:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-19T09:32:32Z"}, "message": "fix: Fix nested macro diagnostics pointing at macro expansion files", "tree": {"sha": "6e84d88eadfa0428580d3c270dec5dec48c64c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e84d88eadfa0428580d3c270dec5dec48c64c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc8254c6abdfcd273cb49475e798048558dcf4db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8254c6abdfcd273cb49475e798048558dcf4db", "html_url": "https://github.com/rust-lang/rust/commit/dc8254c6abdfcd273cb49475e798048558dcf4db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc8254c6abdfcd273cb49475e798048558dcf4db/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52bc15fc1fe763f5e7a91cb70c71a00997bb52ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab", "html_url": "https://github.com/rust-lang/rust/commit/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "870c78d1f1eb729277df8d71da89ecab3e675f48", "filename": "crates/ide-diagnostics/src/handlers/macro_error.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc8254c6abdfcd273cb49475e798048558dcf4db/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc8254c6abdfcd273cb49475e798048558dcf4db/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs?ref=dc8254c6abdfcd273cb49475e798048558dcf4db", "patch": "@@ -5,10 +5,7 @@ use crate::{Diagnostic, DiagnosticsContext};\n // This diagnostic is shown for macro expansion errors.\n pub(crate) fn macro_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroError) -> Diagnostic {\n     // Use more accurate position if available.\n-    let display_range = d\n-        .precise_location\n-        .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.node.clone()).range);\n-\n+    let display_range = ctx.resolve_precise_location(&d.node, d.precise_location);\n     Diagnostic::new(\"macro-error\", d.message.clone(), display_range).experimental()\n }\n "}, {"sha": "87531f4acfb753b0feb68c58caf76b3518bc6c5d", "filename": "crates/ide-diagnostics/src/handlers/unresolved_macro_call.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc8254c6abdfcd273cb49475e798048558dcf4db/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc8254c6abdfcd273cb49475e798048558dcf4db/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs?ref=dc8254c6abdfcd273cb49475e798048558dcf4db", "patch": "@@ -9,10 +9,7 @@ pub(crate) fn unresolved_macro_call(\n     d: &hir::UnresolvedMacroCall,\n ) -> Diagnostic {\n     // Use more accurate position if available.\n-    let display_range = d\n-        .precise_location\n-        .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.macro_call.clone()).range);\n-\n+    let display_range = ctx.resolve_precise_location(&d.macro_call, d.precise_location);\n     let bang = if d.is_bang { \"!\" } else { \"\" };\n     Diagnostic::new(\n         \"unresolved-macro-call\","}, {"sha": "23818d883f73181d7c684523d21637cda93b1085", "filename": "crates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc8254c6abdfcd273cb49475e798048558dcf4db/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc8254c6abdfcd273cb49475e798048558dcf4db/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=dc8254c6abdfcd273cb49475e798048558dcf4db", "patch": "@@ -1,5 +1,4 @@\n use hir::db::DefDatabase;\n-use syntax::NodeOrToken;\n \n use crate::{Diagnostic, DiagnosticsContext, Severity};\n \n@@ -19,16 +18,7 @@ pub(crate) fn unresolved_proc_macro(\n     proc_attr_macros_enabled: bool,\n ) -> Diagnostic {\n     // Use more accurate position if available.\n-    let display_range = (|| {\n-        let precise_location = d.precise_location?;\n-        let root = ctx.sema.parse_or_expand(d.node.file_id)?;\n-        match root.covering_element(precise_location) {\n-            NodeOrToken::Node(it) => Some(ctx.sema.original_range(&it)),\n-            NodeOrToken::Token(it) => d.node.with_value(it).original_file_range_opt(ctx.sema.db),\n-        }\n-    })()\n-    .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.node.clone()))\n-    .range;\n+    let display_range = ctx.resolve_precise_location(&d.node, d.precise_location);\n \n     let config_enabled = match d.kind {\n         hir::MacroKind::Attr => proc_macros_enabled && proc_attr_macros_enabled,"}, {"sha": "d81e36a1f86321428d55f3f99fbb229e7dc0d0a2", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dc8254c6abdfcd273cb49475e798048558dcf4db/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc8254c6abdfcd273cb49475e798048558dcf4db/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=dc8254c6abdfcd273cb49475e798048558dcf4db", "patch": "@@ -182,6 +182,28 @@ struct DiagnosticsContext<'a> {\n     resolve: &'a AssistResolveStrategy,\n }\n \n+impl<'a> DiagnosticsContext<'a> {\n+    fn resolve_precise_location(\n+        &self,\n+        node: &InFile<SyntaxNodePtr>,\n+        precise_location: Option<TextRange>,\n+    ) -> TextRange {\n+        let sema = &self.sema;\n+        (|| {\n+            let precise_location = precise_location?;\n+            let root = sema.parse_or_expand(node.file_id)?;\n+            match root.covering_element(precise_location) {\n+                syntax::NodeOrToken::Node(it) => Some(sema.original_range(&it)),\n+                syntax::NodeOrToken::Token(it) => {\n+                    node.with_value(it).original_file_range_opt(sema.db)\n+                }\n+            }\n+        })()\n+        .unwrap_or_else(|| sema.diagnostics_display_range(node.clone()))\n+        .range\n+    }\n+}\n+\n pub fn diagnostics(\n     db: &RootDatabase,\n     config: &DiagnosticsConfig,"}]}