{"sha": "d64b72f6ec26ddac775046191dca2d3659d6fb87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NGI3MmY2ZWMyNmRkYWM3NzUwNDYxOTFkY2EyZDM2NTlkNmZiODc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-04-05T00:33:38Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-04-05T00:35:10Z"}, "message": "More statement-to-expression edits", "tree": {"sha": "a7d3facb178b6707507a98e64a3a603d12922b66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7d3facb178b6707507a98e64a3a603d12922b66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d64b72f6ec26ddac775046191dca2d3659d6fb87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d64b72f6ec26ddac775046191dca2d3659d6fb87", "html_url": "https://github.com/rust-lang/rust/commit/d64b72f6ec26ddac775046191dca2d3659d6fb87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d64b72f6ec26ddac775046191dca2d3659d6fb87/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5de3f441d02e1539df26b3afcfb9b02226a0cace", "url": "https://api.github.com/repos/rust-lang/rust/commits/5de3f441d02e1539df26b3afcfb9b02226a0cace", "html_url": "https://github.com/rust-lang/rust/commit/5de3f441d02e1539df26b3afcfb9b02226a0cace"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "36e973d69cf7d68c9b14506389cc2895aaa93e11", "filename": "doc/rust.texi", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d64b72f6ec26ddac775046191dca2d3659d6fb87/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/d64b72f6ec26ddac775046191dca2d3659d6fb87/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=d64b72f6ec26ddac775046191dca2d3659d6fb87", "patch": "@@ -1804,8 +1804,8 @@ otherwise exactly as a function item (with a minor additional cost of calling\n the function, as such a call is indirect). @xref{Ref.Type.Fn}.\n \n Every control path in a function ends with either a @code{ret} or @code{be}\n-statement. If a control path lacks a @code{ret} statement in source code, an\n-implicit @code{ret} statement is appended to the end of the control path\n+expression. If a control path lacks a @code{ret} expression in source code, an\n+implicit @code{ret} expression is appended to the end of the control path\n during compilation, returning the implicit @code{()} value.\n \n A function may have an @emph{effect}, which may be either @code{impure} or\n@@ -1827,9 +1827,9 @@ fn add(int x, int y) -> int @{\n @c * Ref.Item.Iter::          Items defining iterators.\n \n @cindex Iterators\n-@cindex Put statement\n-@cindex Put each statement\n-@cindex Foreach statement\n+@cindex Put expression\n+@cindex Put each expression\n+@cindex Foreach expression\n \n Iterators are function-like items that can @code{put} multiple values during\n their execution before returning or tail-calling.\n@@ -1841,11 +1841,11 @@ but the iterator frame is only @emph{suspended} during the put, and will be\n the caller's loop.\n \n The output type of an iterator is the type of value that the function will\n-@code{put}, before it eventually executes a @code{ret} or @code{be} statement\n+@code{put}, before it eventually evaluates a @code{ret} or @code{be} expression\n of type @code{()} and completes its execution.\n \n An iterator can only be called in the loop header of a matching @code{for\n-each} loop or as the argument in a @code{put each} statement.\n+each} loop or as the argument in a @code{put each} expression.\n @xref{Ref.Stmt.Foreach}.\n \n An example of an iterator:\n@@ -2052,13 +2052,13 @@ Rust; they cannot be used as user-defined identifiers in any context.\n @cindex Any type\n @cindex Dynamic type, see @i{Any type}\n @cindex Reflection\n-@cindex Alt type statement\n+@cindex Alt type expression\n \n The type @code{any} is the union of all possible Rust types. A value of type\n @code{any} is represented in memory as a pair consisting of a boxed value of\n some non-@code{any} type @var{T} and a reflection of the type @var{T}.\n \n-Values of type @code{any} can be used in an @code{alt type} statement, in\n+Values of type @code{any} can be used in an @code{alt type} expression, in\n which the reflection is used to select a block corresponding to a particular\n type extraction. @xref{Ref.Stmt.Alt}.\n \n@@ -2549,7 +2549,7 @@ right hand side of copy statements, @xref{Ref.Stmt.Copy}.\n @c * Ref.Stmt::               Executable statements.\n @cindex Statements\n \n-A @dfn{statement} is a component of a block, which is in turn a components of\n+A @dfn{statement} is a component of a block, which is in turn a component of\n an outer block, a function or an iterator. When a function is spawned into a\n task, the task @emph{executes} statements in an order determined by the body\n of the enclosing structure. Each statement causes the task to perform certain"}]}