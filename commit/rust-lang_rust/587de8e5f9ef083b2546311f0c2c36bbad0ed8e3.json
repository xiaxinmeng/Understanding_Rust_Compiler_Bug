{"sha": "587de8e5f9ef083b2546311f0c2c36bbad0ed8e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4N2RlOGU1ZjllZjA4M2IyNTQ2MzExZjBjMmMzNmJiYWQwZWQ4ZTM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-05-26T04:31:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-26T04:31:02Z"}, "message": "Rollup merge of #85645 - scottmcm:demote-from-into-try, r=yaahc\n\nDemote `ControlFlow::{from|into}_try` to `pub(crate)`\n\nThey have mediocre names and non-obvious semantics, so personally I don't think they're worth trying to stabilize, and thus might as well just be internal (they're used for convenience in iterator adapters), not something shown in the rustdocs.\n\nI don't think anyone actually wanted to use them outside `core` -- they just got made public-but-unstable along with the whole type in https://github.com/rust-lang/rust/pull/76204 that promoted `LoopState` from an internal type to the exposed `ControlFlow` type.\n\ncc https://github.com/rust-lang/rust/issues/75744, the tracking issue they mention.\ncc https://github.com/rust-lang/rust/pull/85608, the PR where I'm proposing stabilizing the type.", "tree": {"sha": "1ebba7f31a8086dac48e4dac2533f2153f2af4e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ebba7f31a8086dac48e4dac2533f2153f2af4e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/587de8e5f9ef083b2546311f0c2c36bbad0ed8e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrc8HCRBK7hj4Ov3rIwAAX38IAIw++H9E5fitrratoiMaWw0B\n9iJevczXYe3+RZfkMXidAd1RP38Ef71JzL/I7T+zLFqaDyTgTuwFwjgEkFrjqfDp\nrMw2yGjdYRn9TR6t9u4leeKzFXHI7SZ//lwcYKm3kDdyRGicUL+Lv4KWNfSXJH4V\n6RKJ36JZ16uOrFIo64wqqlIMGAVgPbz6rM8DGg5/tWjXkL8qlfvSn8rtcrv9Prnx\nbLdRhKe96eUK3NowrT7kFIf0lzO5J8xt9h85UOXPykHTRoJZBGtWGOFbgd0qv698\n7ZoWk6a4UY7Q6rgF9dEGaEvTJQ5hWK8MHGQ+heW87GRpe3U1dDOJpNHVSbjfFH4=\n=cDGa\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ebba7f31a8086dac48e4dac2533f2153f2af4e5\nparent 0bc3066f4d8a779b780cc08ae0db1d84c9bdc95c\nparent b63f7f9965c88314e3a83a2fcd57685c48fbade4\nauthor Yuki Okushi <jtitor@2k36.org> 1622003462 +0900\ncommitter GitHub <noreply@github.com> 1622003462 +0900\n\nRollup merge of #85645 - scottmcm:demote-from-into-try, r=yaahc\n\nDemote `ControlFlow::{from|into}_try` to `pub(crate)`\n\nThey have mediocre names and non-obvious semantics, so personally I don't think they're worth trying to stabilize, and thus might as well just be internal (they're used for convenience in iterator adapters), not something shown in the rustdocs.\n\nI don't think anyone actually wanted to use them outside `core` -- they just got made public-but-unstable along with the whole type in https://github.com/rust-lang/rust/pull/76204 that promoted `LoopState` from an internal type to the exposed `ControlFlow` type.\n\ncc https://github.com/rust-lang/rust/issues/75744, the tracking issue they mention.\ncc https://github.com/rust-lang/rust/pull/85608, the PR where I'm proposing stabilizing the type.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/587de8e5f9ef083b2546311f0c2c36bbad0ed8e3", "html_url": "https://github.com/rust-lang/rust/commit/587de8e5f9ef083b2546311f0c2c36bbad0ed8e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/587de8e5f9ef083b2546311f0c2c36bbad0ed8e3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bc3066f4d8a779b780cc08ae0db1d84c9bdc95c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc3066f4d8a779b780cc08ae0db1d84c9bdc95c", "html_url": "https://github.com/rust-lang/rust/commit/0bc3066f4d8a779b780cc08ae0db1d84c9bdc95c"}, {"sha": "b63f7f9965c88314e3a83a2fcd57685c48fbade4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b63f7f9965c88314e3a83a2fcd57685c48fbade4", "html_url": "https://github.com/rust-lang/rust/commit/b63f7f9965c88314e3a83a2fcd57685c48fbade4"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "9d9398fb56d8a46d61a6f43b6fd7bcb6f899c11d", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/587de8e5f9ef083b2546311f0c2c36bbad0ed8e3/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/587de8e5f9ef083b2546311f0c2c36bbad0ed8e3/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=587de8e5f9ef083b2546311f0c2c36bbad0ed8e3", "patch": "@@ -187,42 +187,41 @@ impl<B, C> ControlFlow<B, C> {\n #[cfg(bootstrap)]\n impl<R: ops::TryV1> ControlFlow<R, R::Output> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n-    pub fn from_try(r: R) -> Self {\n+    pub(crate) fn from_try(r: R) -> Self {\n         match R::into_result(r) {\n             Ok(v) => ControlFlow::Continue(v),\n             Err(v) => ControlFlow::Break(R::from_error(v)),\n         }\n     }\n \n     /// Convert a `ControlFlow` into any type implementing `Try`;\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n-    pub fn into_try(self) -> R {\n+    pub(crate) fn into_try(self) -> R {\n         match self {\n             ControlFlow::Continue(v) => R::from_ok(v),\n             ControlFlow::Break(v) => v,\n         }\n     }\n }\n \n+/// These are used only as part of implementing the iterator adapters.\n+/// They have mediocre names and non-obvious semantics, so aren't\n+/// currently on a path to potential stabilization.\n #[cfg(not(bootstrap))]\n impl<R: ops::TryV2> ControlFlow<R, R::Output> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n-    pub fn from_try(r: R) -> Self {\n+    pub(crate) fn from_try(r: R) -> Self {\n         match R::branch(r) {\n             ControlFlow::Continue(v) => ControlFlow::Continue(v),\n             ControlFlow::Break(v) => ControlFlow::Break(R::from_residual(v)),\n         }\n     }\n \n     /// Convert a `ControlFlow` into any type implementing `Try`;\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n-    pub fn into_try(self) -> R {\n+    pub(crate) fn into_try(self) -> R {\n         match self {\n             ControlFlow::Continue(v) => R::from_output(v),\n             ControlFlow::Break(v) => v,"}]}