{"sha": "57c3cee8c34562e543a744c66651c01e6ff794c2", "node_id": "C_kwDOAAsO6NoAKDU3YzNjZWU4YzM0NTYyZTU0M2E3NDRjNjY2NTFjMDFlNmZmNzk0YzI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-29T04:58:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-29T04:58:21Z"}, "message": "Rollup merge of #98277 - compiler-errors:issue-93596, r=estebank\n\nFix trait object reborrow suggestion\n\nFixes #93596\n\nSlightly generalizes the logic we use to suggest fix first implemented in #95609, specifically when we have a `Sized` obligation that comes from a struct's unsized tail.", "tree": {"sha": "cbc395172d55ca86e8406495c473aec761c70927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbc395172d55ca86e8406495c473aec761c70927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c3cee8c34562e543a744c66651c01e6ff794c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiu9vtCRBK7hj4Ov3rIwAAARcIAIKrtFWa2EG6daKXKbBGY418\n5NrYE8gptU6b1+rw625KUrUVzShnIwywD/OT8OLJ17agZ4Mrp4c5bfYlP0wA7VDF\nCV+g7CyzjZx5PpryCYxlV1oB0OhJI391KgTj0R4eIhNrwCh1CcpgeNNIKbmQr6Mk\nk/05WBAaSYescl675LiQfr1ptE3dD5iiiBGoTAh9r++Q1ChtvY2jfNwYYv1rBLeI\nwQqTbohz59xUyTWDuYVM0mbay3Ryf1nco7vg2+ZMfgcYB+hp9z2j+kg13FceBSZQ\nTN41FxfdvVFzMQj0IJ9JEM7PCWWEjQzbZxKoJkPHjrGPcNLeJhbhTdA4KV+PKXc=\n=9vjo\n-----END PGP SIGNATURE-----\n", "payload": "tree cbc395172d55ca86e8406495c473aec761c70927\nparent c23add778c2aca1fc8b764464fe2a8aa7446f413\nparent 862873d20bb40c9f9331b36fc05c53288960d3aa\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1656478701 +0530\ncommitter GitHub <noreply@github.com> 1656478701 +0530\n\nRollup merge of #98277 - compiler-errors:issue-93596, r=estebank\n\nFix trait object reborrow suggestion\n\nFixes #93596\n\nSlightly generalizes the logic we use to suggest fix first implemented in #95609, specifically when we have a `Sized` obligation that comes from a struct's unsized tail.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c3cee8c34562e543a744c66651c01e6ff794c2", "html_url": "https://github.com/rust-lang/rust/commit/57c3cee8c34562e543a744c66651c01e6ff794c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c3cee8c34562e543a744c66651c01e6ff794c2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c23add778c2aca1fc8b764464fe2a8aa7446f413", "url": "https://api.github.com/repos/rust-lang/rust/commits/c23add778c2aca1fc8b764464fe2a8aa7446f413", "html_url": "https://github.com/rust-lang/rust/commit/c23add778c2aca1fc8b764464fe2a8aa7446f413"}, {"sha": "862873d20bb40c9f9331b36fc05c53288960d3aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/862873d20bb40c9f9331b36fc05c53288960d3aa", "html_url": "https://github.com/rust-lang/rust/commit/862873d20bb40c9f9331b36fc05c53288960d3aa"}], "stats": {"total": 151, "additions": 93, "deletions": 58}, "files": [{"sha": "7f913faf86058674556590620db0e944721d7798", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -253,7 +253,7 @@ pub enum ObligationCauseCode<'tcx> {\n     ObjectTypeBound(Ty<'tcx>, ty::Region<'tcx>),\n \n     /// Obligation incurred due to an object cast.\n-    ObjectCastObligation(/* Object type */ Ty<'tcx>),\n+    ObjectCastObligation(/* Concrete type */ Ty<'tcx>, /* Object type */ Ty<'tcx>),\n \n     /// Obligation incurred due to a coercion.\n     Coercion {"}, {"sha": "debb9e8295122ad06bc8d0c929f8b9429d824b12", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -484,10 +484,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             err.span_label(span, explanation);\n                         }\n \n-                        if let ObligationCauseCode::ObjectCastObligation(obj_ty) = obligation.cause.code().peel_derives() &&\n-                           let Some(self_ty) = trait_predicate.self_ty().no_bound_vars() &&\n+                        if let ObligationCauseCode::ObjectCastObligation(concrete_ty, obj_ty) = obligation.cause.code().peel_derives() &&\n                            Some(trait_ref.def_id()) == self.tcx.lang_items().sized_trait() {\n-                            self.suggest_borrowing_for_object_cast(&mut err, &obligation, self_ty, *obj_ty);\n+                            self.suggest_borrowing_for_object_cast(&mut err, &root_obligation, *concrete_ty, *obj_ty);\n                         }\n \n                         if trait_predicate.is_const_if_const() && obligation.param_env.is_const() {\n@@ -1560,7 +1559,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     obligation.cause.code().peel_derives(),\n                     ObligationCauseCode::ItemObligation(_)\n                         | ObligationCauseCode::BindingObligation(_, _)\n-                        | ObligationCauseCode::ObjectCastObligation(_)\n+                        | ObligationCauseCode::ObjectCastObligation(..)\n                         | ObligationCauseCode::OpaqueType\n                 );\n                 if let Err(error) = self.at(&obligation.cause, obligation.param_env).eq_exp("}, {"sha": "12858172ee554288d8ca6198b3216f622ab7ca92", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -2217,9 +2217,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     err.span_note(tcx.def_span(item_def_id), &descr);\n                 }\n             }\n-            ObligationCauseCode::ObjectCastObligation(object_ty) => {\n+            ObligationCauseCode::ObjectCastObligation(concrete_ty, object_ty) => {\n                 err.note(&format!(\n-                    \"required for the cast to the object type `{}`\",\n+                    \"required for the cast from `{}` to the object type `{}`\",\n+                    self.ty_to_string(concrete_ty),\n                     self.ty_to_string(object_ty)\n                 ));\n             }"}, {"sha": "e1131140c39e881618139d2b1ecf491669ef19f5", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -813,7 +813,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let cause = ObligationCause::new(\n                     obligation.cause.span,\n                     obligation.cause.body_id,\n-                    ObjectCastObligation(target),\n+                    ObjectCastObligation(source, target),\n                 );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n@@ -910,7 +910,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let cause = ObligationCause::new(\n                     obligation.cause.span,\n                     obligation.cause.body_id,\n-                    ObjectCastObligation(target),\n+                    ObjectCastObligation(source, target),\n                 );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n@@ -931,7 +931,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let cause = ObligationCause::new(\n                     obligation.cause.span,\n                     obligation.cause.body_id,\n-                    ObjectCastObligation(target),\n+                    ObjectCastObligation(source, target),\n                 );\n \n                 let predicate_to_obligation = |predicate| {"}, {"sha": "f40e6585b38b1e4fd9356378b0c5a30ab7a4c17d", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n LL |         Box::new(AssocNoCopy)\n    |         ^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n-   = note: required for the cast to the object type `dyn Bar<Assoc = <AssocNoCopy as Thing>::Out::{opaque#0}>`\n+   = note: required for the cast from `AssocNoCopy` to the object type `dyn Bar<Assoc = <AssocNoCopy as Thing>::Out::{opaque#0}>`\n \n error: aborting due to previous error\n "}, {"sha": "bed63a5e6df03d20aabd3eaa00a673777e137d8d", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -41,7 +41,7 @@ note: expected this to be `Bar`\n    |\n LL |     type A = usize;\n    |              ^^^^^\n-   = note: required for the cast to the object type `dyn Foo<A = Bar>`\n+   = note: required for the cast from `isize` to the object type `dyn Foo<A = Bar>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "dbd9a44ed97743769c32d37bb19b086f0be6ecb6", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as Iterator>::It\n LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n    |                                           ^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `u32`\n    |\n-   = note: required for the cast to the object type `dyn Iterator<Item = u32, Item = i32>`\n+   = note: required for the cast from `std::vec::IntoIter<u32>` to the object type `dyn Iterator<Item = u32, Item = i32>`\n \n error: aborting due to previous error\n "}, {"sha": "419de689c52da9206a8ae88da10ee81ef3134cc5", "filename": "src/test/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -23,7 +23,7 @@ note: required because of the requirements on the impl of `MyDisplay` for `&mut\n    |\n LL | impl<'a, T: MyDisplay> MyDisplay for &'a mut T { }\n    |                        ^^^^^^^^^     ^^^^^^^^^\n-   = note: required for the cast to the object type `dyn MyDisplay`\n+   = note: required for the cast from `&mut T` to the object type `dyn MyDisplay`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c22302cdc2626b502646d8cf5cc2ff9d0101e1e8", "filename": "src/test/ui/associated-types/issue-65774-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -18,7 +18,7 @@ LL |         writer.my_write(valref)\n    |                         ^^^^^^ the trait `MyDisplay` is not implemented for `T`\n    |\n    = help: the trait `MyDisplay` is implemented for `&'a mut T`\n-   = note: required for the cast to the object type `dyn MyDisplay`\n+   = note: required for the cast from `T` to the object type `dyn MyDisplay`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e5887689690e76fd5066d2193ae5613782cfe0b2", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -37,7 +37,7 @@ error[E0271]: type mismatch resolving `<impl Future<Output = u8> as Future>::Out\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `impl Future<Output = u8>` to the object type `dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:12:43\n@@ -53,7 +53,7 @@ error[E0271]: type mismatch resolving `<impl Future<Output = u8> as Future>::Out\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `impl Future<Output = u8>` to the object type `dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:47:44"}, {"sha": "0e21dba980debf96e87594ac89a2370198a9619b", "filename": "src/test/ui/async-await/issue-86507.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `impl Future<Output = ()>` to the object type `dyn Future<Output = ()> + Send`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "980da536034327a835894f851eca4c78250aec07", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never-windows.nofallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -4,15 +4,15 @@ error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast to the object type `dyn std::error::Error`\n+   = note: required for the cast from `()` to the object type `dyn std::error::Error`\n \n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n   --> $DIR/coerce-issue-49593-box-never-windows.rs:23:49\n    |\n LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast to the object type `(dyn std::error::Error + 'static)`\n+   = note: required for the cast from `()` to the object type `(dyn std::error::Error + 'static)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "322681b97bccb0c516d5140ebca68dba8be503b3", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never.nofallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -4,15 +4,15 @@ error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast to the object type `dyn std::error::Error`\n+   = note: required for the cast from `()` to the object type `dyn std::error::Error`\n \n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n   --> $DIR/coerce-issue-49593-box-never.rs:23:49\n    |\n LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast to the object type `(dyn std::error::Error + 'static)`\n+   = note: required for the cast from `()` to the object type `(dyn std::error::Error + 'static)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "da85b2059f0a390d6d2e401bf2f6a4021c73cc6d", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -7,7 +7,7 @@ LL |     foo(&10_u32);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Trait<2_u8>` is implemented for `u32`\n-   = note: required for the cast to the object type `dyn Trait`\n+   = note: required for the cast from `u32` to the object type `dyn Trait`\n \n error[E0277]: the trait bound `bool: Traitor<{_: u8}>` is not satisfied\n   --> $DIR/trait_objects_fail.rs:28:9\n@@ -18,7 +18,7 @@ LL |     bar(&true);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Traitor<2_u8, 3_u8>` is implemented for `bool`\n-   = note: required for the cast to the object type `dyn Traitor<{_: u8}>`\n+   = note: required for the cast from `bool` to the object type `dyn Traitor<{_: u8}>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "61061ae529d1275939a7870d33751aec94c34e40", "filename": "src/test/ui/custom_test_frameworks/mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -6,7 +6,7 @@ LL | #[test]\n LL | fn wrong_kind(){}\n    | ^^^^^^^^^^^^^^^^^ the trait `Testable` is not implemented for `TestDescAndFn`\n    |\n-   = note: required for the cast to the object type `dyn Testable`\n+   = note: required for the cast from `TestDescAndFn` to the object type `dyn Testable`\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "594acff853a0eb5b805917f162ffa8f0c489aff6", "filename": "src/test/ui/dst/dst-bad-coerce1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `Foo: Bar` is not satisfied\n LL |     let f3: &Fat<dyn Bar> = f2;\n    |                             ^^ the trait `Bar` is not implemented for `Foo`\n    |\n-   = note: required for the cast to the object type `dyn Bar`\n+   = note: required for the cast from `Foo` to the object type `dyn Bar`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:28:27\n@@ -34,7 +34,7 @@ error[E0277]: the trait bound `Foo: Bar` is not satisfied\n LL |     let f3: &(dyn Bar,) = f2;\n    |                           ^^ the trait `Bar` is not implemented for `Foo`\n    |\n-   = note: required for the cast to the object type `dyn Bar`\n+   = note: required for the cast from `Foo` to the object type `dyn Bar`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e24c96ebed63354936d9684b11dd0eede763d84e", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -6,7 +6,7 @@ LL | fn test1<T: ?Sized + Foo>(t: &T) {\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = note: required for the cast to the object type `dyn Foo`\n+   = note: required for the cast from `T` to the object type `dyn Foo`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn test1<T: ?Sized + Foo>(t: &T) {\n@@ -21,7 +21,7 @@ LL | fn test2<T: ?Sized + Foo>(t: &T) {\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = note: required for the cast to the object type `dyn Foo`\n+   = note: required for the cast from `T` to the object type `dyn Foo`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn test2<T: ?Sized + Foo>(t: &T) {\n@@ -35,7 +35,7 @@ LL |     let _: &[&dyn Foo] = &[\"hi\"];\n    |                            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast to the object type `dyn Foo`\n+   = note: required for the cast from `str` to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:23:23\n@@ -44,7 +44,7 @@ LL |     let _: &dyn Foo = x as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-   = note: required for the cast to the object type `dyn Foo`\n+   = note: required for the cast from `[u8]` to the object type `dyn Foo`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9bcbd74716845fcac8462c76c3538e64037f52cf", "filename": "src/test/ui/generic-associated-types/issue-79422.extended.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -27,7 +27,7 @@ LL |     type VRefCont<'a> = &'a V where Self: 'a;\n    |                         ^^^^^\n    = note: expected trait object `(dyn RefCont<'_, u8> + 'static)`\n                  found reference `&u8`\n-   = note: required for the cast to the object type `dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>`\n+   = note: required for the cast from `BTreeMap<u8, u8>` to the object type `dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "10a73b245ac570e6b40854f8a04b91cdbda78823", "filename": "src/test/ui/issues/issue-14366.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -5,7 +5,7 @@ LL |     let _x = \"test\" as &dyn (::std::any::Any);\n    |              ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast to the object type `dyn Any`\n+   = note: required for the cast from `str` to the object type `dyn Any`\n help: consider borrowing the value, since `&str` can be coerced into `dyn Any`\n    |\n LL |     let _x = &\"test\" as &dyn (::std::any::Any);"}, {"sha": "b32de5b24b924f7eb74e8be819b28684c1353aec", "filename": "src/test/ui/issues/issue-22034.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -6,7 +6,7 @@ LL |         &mut *(ptr as *mut dyn Fn())\n    |\n    = help: the trait `Fn<()>` is not implemented for `()`\n    = note: wrap the `()` in a closure with no arguments: `|| { /* code */ }`\n-   = note: required for the cast to the object type `dyn Fn()`\n+   = note: required for the cast from `()` to the object type `dyn Fn()`\n \n error: aborting due to previous error\n "}, {"sha": "a84cb7d8c5922a4f75ee1c9dc7c4cb473966abb3", "filename": "src/test/ui/issues/issue-22872.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -10,7 +10,7 @@ note: required because of the requirements on the impl of `for<'b> Wrap<'b>` for\n    |\n LL | impl<'b, P> Wrap<'b> for Wrapper<P>\n    |             ^^^^^^^^     ^^^^^^^^^^\n-   = note: required for the cast to the object type `dyn for<'b> Wrap<'b>`\n+   = note: required for the cast from `Wrapper<P>` to the object type `dyn for<'b> Wrap<'b>`\n help: consider further restricting the associated type\n    |\n LL | fn push_process<P>(process: P) where P: Process<'static>, <P as Process<'_>>::Item: Iterator {"}, {"sha": "f6cb1cbdc11c677df8fd6d9616a7e7c72c73ac71", "filename": "src/test/ui/issues/issue-7013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -11,7 +11,7 @@ note: required because it appears within the type `B`\n    |\n LL | struct B {\n    |        ^\n-   = note: required for the cast to the object type `dyn Foo + Send`\n+   = note: required for the cast from `B` to the object type `dyn Foo + Send`\n \n error: aborting due to previous error\n "}, {"sha": "902349135c549f1718ccdb6425ebd2bb7fc8fb5d", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -9,7 +9,7 @@ note: required because of the requirements on the impl of `Gettable<T>` for `S<T\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n-   = note: required for the cast to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn f<T: std::marker::Send>(val: T) {\n@@ -26,7 +26,7 @@ note: required because of the requirements on the impl of `Gettable<T>` for `S<T\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n-   = note: required for the cast to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn f<T: std::marker::Copy>(val: T) {\n@@ -43,7 +43,7 @@ note: required because of the requirements on the impl of `Gettable<T>` for `S<T\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n-   = note: required for the cast to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Send>(val: T) {\n@@ -60,7 +60,7 @@ note: required because of the requirements on the impl of `Gettable<T>` for `S<T\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n-   = note: required for the cast to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy>(val: T) {\n@@ -78,7 +78,7 @@ note: required because of the requirements on the impl of `Gettable<String>` for\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n-   = note: required for the cast to the object type `dyn Gettable<String>`\n+   = note: required for the cast from `S<String>` to the object type `dyn Gettable<String>`\n \n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:43:37\n@@ -92,7 +92,7 @@ note: required because of the requirements on the impl of `Gettable<Foo>` for `S\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n-   = note: required for the cast to the object type `dyn Gettable<Foo>`\n+   = note: required for the cast from `S<Foo>` to the object type `dyn Gettable<Foo>`\n help: consider annotating `Foo` with `#[derive(Copy)]`\n    |\n LL |     #[derive(Copy)]"}, {"sha": "eab8e8e80c424234eea1b862ab531d227cb9cafd", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -220,7 +220,7 @@ LL |     let _ = fat_v as *const dyn Foo;\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-   = note: required for the cast to the object type `dyn Foo`\n+   = note: required for the cast from `[u8]` to the object type `dyn Foo`\n help: consider borrowing the value, since `&[u8]` can be coerced into `dyn Foo`\n    |\n LL |     let _ = &fat_v as *const dyn Foo;\n@@ -233,7 +233,7 @@ LL |     let _ = a as *const dyn Foo;\n    |             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast to the object type `dyn Foo`\n+   = note: required for the cast from `str` to the object type `dyn Foo`\n help: consider borrowing the value, since `&str` can be coerced into `dyn Foo`\n    |\n LL |     let _ = &a as *const dyn Foo;"}, {"sha": "6b9635d4a60bcd889b794d08db7625fbf898b597", "filename": "src/test/ui/never_type/fallback-closure-wrap.fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -10,7 +10,7 @@ LL | |     }) as Box<dyn FnMut()>);\n    |\n    = note: expected unit type `()`\n                    found type `!`\n-   = note: required for the cast to the object type `dyn FnMut()`\n+   = note: required for the cast from `[closure@$DIR/fallback-closure-wrap.rs:18:40: 21:6]` to the object type `dyn FnMut()`\n \n error: aborting due to previous error\n "}, {"sha": "4186dc7cb35ae51a349ddb7af70931217a157d84", "filename": "src/test/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -33,7 +33,7 @@ LL |     impl<T: Debug + Trait> Debug for Inner<T> {\n    |                            ^^^^^     ^^^^^^^^\n    = note: 1 redundant requirement hidden\n    = note: required because of the requirements on the impl of `Debug` for `&c::Inner<T>`\n-   = note: required for the cast to the object type `dyn Debug`\n+   = note: required for the cast from `&c::Inner<T>` to the object type `dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -55,7 +55,7 @@ LL |     impl<T> Debug for Inner<T> where T: Debug, T: Trait {\n    |             ^^^^^     ^^^^^^^^\n    = note: 1 redundant requirement hidden\n    = note: required because of the requirements on the impl of `Debug` for `&d::Inner<T>`\n-   = note: required for the cast to the object type `dyn Debug`\n+   = note: required for the cast from `&d::Inner<T>` to the object type `dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -77,7 +77,7 @@ LL |     impl<T> Debug for Inner<T> where T: Debug + Trait {\n    |             ^^^^^     ^^^^^^^^\n    = note: 1 redundant requirement hidden\n    = note: required because of the requirements on the impl of `Debug` for `&e::Inner<T>`\n-   = note: required for the cast to the object type `dyn Debug`\n+   = note: required for the cast from `&e::Inner<T>` to the object type `dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -99,7 +99,7 @@ LL |     impl<T: Debug> Debug for Inner<T> where T: Trait {\n    |                    ^^^^^     ^^^^^^^^\n    = note: 1 redundant requirement hidden\n    = note: required because of the requirements on the impl of `Debug` for `&f::Inner<T>`\n-   = note: required for the cast to the object type `dyn Debug`\n+   = note: required for the cast from `&f::Inner<T>` to the object type `dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |"}, {"sha": "120fc538307a7ac85b7b0a27e5a03766db900610", "filename": "src/test/ui/suggestions/suggest-borrow-to-dyn-object.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -0,0 +1,16 @@\n+use std::ffi::{OsStr, OsString};\n+use std::path::Path;\n+\n+fn check(p: &dyn AsRef<Path>) {\n+    let m = std::fs::metadata(&p);\n+    println!(\"{:?}\", &m);\n+}\n+\n+fn main() {\n+    let s: OsString = \".\".into();\n+    let s: &OsStr = &s;\n+    check(s);\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+    //~| HELP within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n+    //~| HELP consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n+}"}, {"sha": "6b6e406130ec2934120b565060f719dca06aa87f", "filename": "src/test/ui/suggestions/suggest-borrow-to-dyn-object.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/suggest-borrow-to-dyn-object.rs:12:11\n+   |\n+LL |     check(s);\n+   |     ----- ^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n+   = note: required because it appears within the type `OsStr`\n+   = note: required for the cast from `OsStr` to the object type `dyn AsRef<Path>`\n+help: consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n+   |\n+LL |     check(&s);\n+   |           +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "93d6770eb47d177975bbd96a67cba312575fa406", "filename": "src/test/ui/traits/coercion-generic-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -5,7 +5,7 @@ LL |     let s: Box<dyn Trait<isize>> = Box::new(Struct { person: \"Fred\" });\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<isize>` is not implemented for `Struct`\n    |\n    = help: the trait `Trait<&'static str>` is implemented for `Struct`\n-   = note: required for the cast to the object type `dyn Trait<isize>`\n+   = note: required for the cast from `Struct` to the object type `dyn Trait<isize>`\n \n error: aborting due to previous error\n "}, {"sha": "f685c50b07d5b439e8a7542ec26618df141d877c", "filename": "src/test/ui/traits/map-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -5,7 +5,7 @@ LL |     let y: Box<dyn Map<usize, isize>> = Box::new(x);\n    |                                         ^^^^^^^^^^^ the trait `Map<usize, isize>` is not implemented for `Box<dyn Map<isize, isize>>`\n    |\n    = help: the trait `Map<K, V>` is implemented for `HashMap<K, V>`\n-   = note: required for the cast to the object type `dyn Map<usize, isize>`\n+   = note: required for the cast from `Box<dyn Map<isize, isize>>` to the object type `dyn Map<usize, isize>`\n \n error: aborting due to previous error\n "}, {"sha": "3985372119e886a98443f00bc890f08aa370f8bc", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `&dyn Foo: Bar<_>` is not satisfied\n LL |     let _ = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo`\n    |\n-   = note: required for the cast to the object type `dyn Bar<_>`\n+   = note: required for the cast from `&dyn Foo` to the object type `dyn Bar<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "93c71f54eb53a6b6ddad16edff44b18ea83144eb", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `&dyn Foo<i32>: Bar<u32>` is not satisfied\n LL |     let _ = x as &dyn Bar<u32>; // Error\n    |             ^ the trait `Bar<u32>` is not implemented for `&dyn Foo<i32>`\n    |\n-   = note: required for the cast to the object type `dyn Bar<u32>`\n+   = note: required for the cast from `&dyn Foo<i32>` to the object type `dyn Bar<u32>`\n \n error[E0605]: non-primitive cast: `&dyn Foo<u32>` as `&dyn Bar<_>`\n   --> $DIR/type-checking-test-2.rs:26:13\n@@ -34,7 +34,7 @@ error[E0277]: the trait bound `&dyn Foo<u32>: Bar<_>` is not satisfied\n LL |     let a = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo<u32>`\n    |\n-   = note: required for the cast to the object type `dyn Bar<_>`\n+   = note: required for the cast from `&dyn Foo<u32>` to the object type `dyn Bar<_>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b4772605432584914fb79fa5a6ec9f6a8fdeeca6", "filename": "src/test/ui/unsized/unsized-fn-param.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c3cee8c34562e543a744c66651c01e6ff794c2/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=57c3cee8c34562e543a744c66651c01e6ff794c2", "patch": "@@ -5,7 +5,7 @@ LL |     foo11(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast to the object type `dyn AsRef<Path>`\n+   = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n    |\n LL |     foo11(&\"bar\", &\"baz\");\n@@ -18,7 +18,7 @@ LL |     foo12(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast to the object type `dyn AsRef<Path>`\n+   = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n    |\n LL |     foo12(&\"bar\", &\"baz\");\n@@ -31,7 +31,7 @@ LL |     foo21(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast to the object type `dyn AsRef<str>`\n+   = note: required for the cast from `str` to the object type `dyn AsRef<str>`\n help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n    |\n LL |     foo21(&\"bar\", &\"baz\");\n@@ -44,7 +44,7 @@ LL |     foo22(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast to the object type `dyn AsRef<str>`\n+   = note: required for the cast from `str` to the object type `dyn AsRef<str>`\n help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n    |\n LL |     foo22(&\"bar\", &\"baz\");"}]}