{"sha": "c9010bff6c5d8ccc8d3009d377f1cb5826b25d69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MDEwYmZmNmM1ZDhjY2M4ZDMwMDlkMzc3ZjFjYjU4MjZiMjVkNjk=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-20T20:28:49Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-21T01:20:54Z"}, "message": "Fix error message on invalid field names for a struct variant\n\nFixes #19922.", "tree": {"sha": "6c51fc2e831922f322f311df259334d1447da593", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c51fc2e831922f322f311df259334d1447da593"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9010bff6c5d8ccc8d3009d377f1cb5826b25d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9010bff6c5d8ccc8d3009d377f1cb5826b25d69", "html_url": "https://github.com/rust-lang/rust/commit/c9010bff6c5d8ccc8d3009d377f1cb5826b25d69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9010bff6c5d8ccc8d3009d377f1cb5826b25d69/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc19e3380b4b7c63b6f1f79d1dfc213ea00e16cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc19e3380b4b7c63b6f1f79d1dfc213ea00e16cf", "html_url": "https://github.com/rust-lang/rust/commit/cc19e3380b4b7c63b6f1f79d1dfc213ea00e16cf"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "01819aff20681e3fb12a4789da496ffe4004e111", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c9010bff6c5d8ccc8d3009d377f1cb5826b25d69/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9010bff6c5d8ccc8d3009d377f1cb5826b25d69/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c9010bff6c5d8ccc8d3009d377f1cb5826b25d69", "patch": "@@ -3419,7 +3419,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                                 substitutions: subst::Substs<'tcx>,\n                                                 field_types: &[ty::field_ty],\n                                                 ast_fields: &[ast::Field],\n-                                                check_completeness: bool)  {\n+                                                check_completeness: bool,\n+                                                enum_id_opt: Option<ast::DefId>)  {\n         let tcx = fcx.ccx.tcx;\n \n         let mut class_field_map = FnvHashMap::new();\n@@ -3438,13 +3439,24 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             match pair {\n                 None => {\n                     fcx.type_error_message(\n-                      field.ident.span,\n-                      |actual| {\n-                          format!(\"structure `{}` has no field named `{}`\",\n-                                  actual, token::get_ident(field.ident.node))\n-                      },\n-                      struct_ty,\n-                      None);\n+                        field.ident.span,\n+                        |actual| match enum_id_opt {\n+                            Some(enum_id) => {\n+                                let variant_type = ty::enum_variant_with_id(tcx,\n+                                                                            enum_id,\n+                                                                            class_id);\n+                                format!(\"struct variant `{}::{}` has no field named `{}`\",\n+                                        actual, variant_type.name.as_str(),\n+                                        token::get_ident(field.ident.node))\n+                            }\n+                            None => {\n+                                format!(\"structure `{}` has no field named `{}`\",\n+                                        actual,\n+                                        token::get_ident(field.ident.node))\n+                            }\n+                        },\n+                        struct_ty,\n+                        None);\n                     error_happened = true;\n                 }\n                 Some((_, true)) => {\n@@ -3525,7 +3537,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                        struct_substs,\n                                        class_fields.as_slice(),\n                                        fields,\n-                                       base_expr.is_none());\n+                                       base_expr.is_none(),\n+                                       None);\n         if ty::type_is_error(fcx.node_ty(id)) {\n             struct_type = ty::mk_err();\n         }\n@@ -3567,7 +3580,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                        substitutions,\n                                        variant_fields.as_slice(),\n                                        fields,\n-                                       true);\n+                                       true,\n+                                       Some(enum_id));\n         fcx.write_ty(id, enum_type);\n     }\n "}, {"sha": "e3ced3028098bf08e27006a140d40a6ff00405d8", "filename": "src/test/compile-fail/issue-19922.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c9010bff6c5d8ccc8d3009d377f1cb5826b25d69/src%2Ftest%2Fcompile-fail%2Fissue-19922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9010bff6c5d8ccc8d3009d377f1cb5826b25d69/src%2Ftest%2Fcompile-fail%2Fissue-19922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19922.rs?ref=c9010bff6c5d8ccc8d3009d377f1cb5826b25d69", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Homura {\n+    Akemi { madoka: () }\n+}\n+\n+fn main() {\n+    let homura = Homura::Akemi { kaname: () };\n+    //~^ ERROR struct variant `Homura::Akemi` has no field named `kaname`\n+}"}]}