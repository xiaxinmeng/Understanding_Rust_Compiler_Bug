{"sha": "2fc573945afe6b1ea4846f5e8fbeb7d18be45e9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYzU3Mzk0NWFmZTZiMWVhNDg0NmY1ZThmYmViN2QxOGJlNDVlOWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-01-26T22:21:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-01-30T19:00:25Z"}, "message": "track intercrate ambiguity only when there is a coherence error", "tree": {"sha": "dda6edf40fd8c706ff8df078606d5494f07252eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda6edf40fd8c706ff8df078606d5494f07252eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fc573945afe6b1ea4846f5e8fbeb7d18be45e9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc573945afe6b1ea4846f5e8fbeb7d18be45e9d", "html_url": "https://github.com/rust-lang/rust/commit/2fc573945afe6b1ea4846f5e8fbeb7d18be45e9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fc573945afe6b1ea4846f5e8fbeb7d18be45e9d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "514ae7d917538fd20015e85be36d156c7db74dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/514ae7d917538fd20015e85be36d156c7db74dff", "html_url": "https://github.com/rust-lang/rust/commit/514ae7d917538fd20015e85be36d156c7db74dff"}], "stats": {"total": 131, "additions": 82, "deletions": 49}, "files": [{"sha": "81bec308a8981849cc210f4e34442bff680b78b9", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2fc573945afe6b1ea4846f5e8fbeb7d18be45e9d/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc573945afe6b1ea4846f5e8fbeb7d18be45e9d/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=2fc573945afe6b1ea4846f5e8fbeb7d18be45e9d", "patch": "@@ -63,13 +63,22 @@ where\n            impl2_def_id,\n            intercrate_mode);\n \n+    let overlaps = tcx.infer_ctxt().enter(|infcx| {\n+        let selcx = &mut SelectionContext::intercrate(&infcx, intercrate_mode);\n+        overlap(selcx, impl1_def_id, impl2_def_id).is_some()\n+    });\n+\n+    if !overlaps {\n+        return no_overlap();\n+    }\n+\n+    // In the case where we detect an error, run the check again, but\n+    // this time tracking intercrate ambuiguity causes for better\n+    // diagnostics. (These take time and can lead to false errors.)\n     tcx.infer_ctxt().enter(|infcx| {\n         let selcx = &mut SelectionContext::intercrate(&infcx, intercrate_mode);\n-        if let Some(r) = overlap(selcx, impl1_def_id, impl2_def_id) {\n-            on_overlap(r)\n-        } else {\n-            no_overlap()\n-        }\n+        selcx.enable_tracking_intercrate_ambiguity_causes();\n+        on_overlap(overlap(selcx, impl1_def_id, impl2_def_id).unwrap())\n     })\n }\n \n@@ -148,10 +157,10 @@ fn overlap<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n         return None\n     }\n \n-    Some(OverlapResult {\n-        impl_header: selcx.infcx().resolve_type_vars_if_possible(&a_impl_header),\n-        intercrate_ambiguity_causes: selcx.intercrate_ambiguity_causes().to_vec(),\n-    })\n+    let impl_header =  selcx.infcx().resolve_type_vars_if_possible(&a_impl_header);\n+    let intercrate_ambiguity_causes = selcx.take_intercrate_ambiguity_causes();\n+    debug!(\"overlap: intercrate_ambiguity_causes={:#?}\", intercrate_ambiguity_causes);\n+    Some(OverlapResult { impl_header, intercrate_ambiguity_causes })\n }\n \n pub fn trait_ref_is_knowable<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,"}, {"sha": "87fc2356908ed45765eb7edbcfe6ac4c241bdc9a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 64, "deletions": 40, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/2fc573945afe6b1ea4846f5e8fbeb7d18be45e9d/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc573945afe6b1ea4846f5e8fbeb7d18be45e9d/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=2fc573945afe6b1ea4846f5e8fbeb7d18be45e9d", "patch": "@@ -92,10 +92,10 @@ pub struct SelectionContext<'cx, 'gcx: 'cx+'tcx, 'tcx: 'cx> {\n \n     inferred_obligations: SnapshotVec<InferredObligationsSnapshotVecDelegate<'tcx>>,\n \n-    intercrate_ambiguity_causes: Vec<IntercrateAmbiguityCause>,\n+    intercrate_ambiguity_causes: Option<Vec<IntercrateAmbiguityCause>>,\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub enum IntercrateAmbiguityCause {\n     DownstreamCrate {\n         trait_desc: String,\n@@ -423,7 +423,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             freshener: infcx.freshener(),\n             intercrate: None,\n             inferred_obligations: SnapshotVec::new(),\n-            intercrate_ambiguity_causes: Vec::new(),\n+            intercrate_ambiguity_causes: None,\n         }\n     }\n \n@@ -435,10 +435,30 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             freshener: infcx.freshener(),\n             intercrate: Some(mode),\n             inferred_obligations: SnapshotVec::new(),\n-            intercrate_ambiguity_causes: Vec::new(),\n+            intercrate_ambiguity_causes: None,\n         }\n     }\n \n+    /// Enables tracking of intercrate ambiguity causes. These are\n+    /// used in coherence to give improved diagnostics. We don't do\n+    /// this until we detect a coherence error because it can lead to\n+    /// false overflow results (#47139) and because it costs\n+    /// computation time.\n+    pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {\n+        assert!(self.intercrate.is_some());\n+        assert!(self.intercrate_ambiguity_causes.is_none());\n+        self.intercrate_ambiguity_causes = Some(vec![]);\n+        debug!(\"selcx: enable_tracking_intercrate_ambiguity_causes\");\n+    }\n+\n+    /// Gets the intercrate ambiguity causes collected since tracking\n+    /// was enabled and disables tracking at the same time. If\n+    /// tracking is not enabled, just returns an empty vector.\n+    pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {\n+        assert!(self.intercrate.is_some());\n+        self.intercrate_ambiguity_causes.take().unwrap_or(vec![])\n+    }\n+\n     pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'gcx, 'tcx> {\n         self.infcx\n     }\n@@ -451,10 +471,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         self.infcx\n     }\n \n-    pub fn intercrate_ambiguity_causes(&self) -> &[IntercrateAmbiguityCause] {\n-        &self.intercrate_ambiguity_causes\n-    }\n-\n     /// Wraps the inference context's in_snapshot s.t. snapshot handling is only from the selection\n     /// context's self.\n     fn in_snapshot<R, F>(&mut self, f: F) -> R\n@@ -828,19 +844,23 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             debug!(\"evaluate_stack({:?}) --> unbound argument, intercrate -->  ambiguous\",\n                    stack.fresh_trait_ref);\n             // Heuristics: show the diagnostics when there are no candidates in crate.\n-            if let Ok(candidate_set) = self.assemble_candidates(stack) {\n-                if !candidate_set.ambiguous && candidate_set.vec.is_empty() {\n-                    let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n-                    let self_ty = trait_ref.self_ty();\n-                    let cause = IntercrateAmbiguityCause::DownstreamCrate {\n-                        trait_desc: trait_ref.to_string(),\n-                        self_desc: if self_ty.has_concrete_skeleton() {\n-                            Some(self_ty.to_string())\n-                        } else {\n-                            None\n-                        },\n-                    };\n-                    self.intercrate_ambiguity_causes.push(cause);\n+            if self.intercrate_ambiguity_causes.is_some() {\n+                debug!(\"evaluate_stack: intercrate_ambiguity_causes is some\");\n+                if let Ok(candidate_set) = self.assemble_candidates(stack) {\n+                    if !candidate_set.ambiguous && candidate_set.vec.is_empty() {\n+                        let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n+                        let self_ty = trait_ref.self_ty();\n+                        let cause = IntercrateAmbiguityCause::DownstreamCrate {\n+                            trait_desc: trait_ref.to_string(),\n+                            self_desc: if self_ty.has_concrete_skeleton() {\n+                                Some(self_ty.to_string())\n+                            } else {\n+                                None\n+                            },\n+                        };\n+                        debug!(\"evaluate_stack: pushing cause = {:?}\", cause);\n+                        self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);\n+                    }\n                 }\n             }\n             return EvaluatedToAmbig;\n@@ -1092,25 +1112,29 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             None => {}\n             Some(conflict) => {\n                 debug!(\"coherence stage: not knowable\");\n-                // Heuristics: show the diagnostics when there are no candidates in crate.\n-                let candidate_set = self.assemble_candidates(stack)?;\n-                if !candidate_set.ambiguous && candidate_set.vec.iter().all(|c| {\n-                    !self.evaluate_candidate(stack, &c).may_apply()\n-                }) {\n-                    let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n-                    let self_ty = trait_ref.self_ty();\n-                    let trait_desc = trait_ref.to_string();\n-                    let self_desc = if self_ty.has_concrete_skeleton() {\n-                        Some(self_ty.to_string())\n-                    } else {\n-                        None\n-                    };\n-                    let cause = if let Conflict::Upstream = conflict {\n-                        IntercrateAmbiguityCause::UpstreamCrateUpdate { trait_desc, self_desc }\n-                    } else {\n-                        IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }\n-                    };\n-                    self.intercrate_ambiguity_causes.push(cause);\n+                if self.intercrate_ambiguity_causes.is_some() {\n+                    debug!(\"evaluate_stack: intercrate_ambiguity_causes is some\");\n+                    // Heuristics: show the diagnostics when there are no candidates in crate.\n+                    let candidate_set = self.assemble_candidates(stack)?;\n+                    if !candidate_set.ambiguous && candidate_set.vec.iter().all(|c| {\n+                        !self.evaluate_candidate(stack, &c).may_apply()\n+                    }) {\n+                        let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n+                        let self_ty = trait_ref.self_ty();\n+                        let trait_desc = trait_ref.to_string();\n+                        let self_desc = if self_ty.has_concrete_skeleton() {\n+                            Some(self_ty.to_string())\n+                        } else {\n+                            None\n+                        };\n+                        let cause = if let Conflict::Upstream = conflict {\n+                            IntercrateAmbiguityCause::UpstreamCrateUpdate { trait_desc, self_desc }\n+                        } else {\n+                            IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }\n+                        };\n+                        debug!(\"evaluate_stack: pushing cause = {:?}\", cause);\n+                        self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);\n+                    }\n                 }\n                 return Ok(None);\n             }"}]}