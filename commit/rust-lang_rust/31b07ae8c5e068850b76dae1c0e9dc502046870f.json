{"sha": "31b07ae8c5e068850b76dae1c0e9dc502046870f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYjA3YWU4YzVlMDY4ODUwYjc2ZGFlMWMwZTlkYzUwMjA0Njg3MGY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-29T01:32:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-29T01:32:42Z"}, "message": "test: Fix test/run-pass/pipe-pingpong-bounded. rs=bustage", "tree": {"sha": "6c93e8aa6a7d9a03989835fcd769a17c93f4a926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c93e8aa6a7d9a03989835fcd769a17c93f4a926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31b07ae8c5e068850b76dae1c0e9dc502046870f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31b07ae8c5e068850b76dae1c0e9dc502046870f", "html_url": "https://github.com/rust-lang/rust/commit/31b07ae8c5e068850b76dae1c0e9dc502046870f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31b07ae8c5e068850b76dae1c0e9dc502046870f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f67c37263e9dd625ab7f91c661464b5f14a584af", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67c37263e9dd625ab7f91c661464b5f14a584af", "html_url": "https://github.com/rust-lang/rust/commit/f67c37263e9dd625ab7f91c661464b5f14a584af"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "803f7f06b512ccf6ec2448d78aa6e08813d06497", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/31b07ae8c5e068850b76dae1c0e9dc502046870f/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b07ae8c5e068850b76dae1c0e9dc502046870f/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=31b07ae8c5e068850b76dae1c0e9dc502046870f", "patch": "@@ -19,15 +19,14 @@\n // modified in hopefully straightforward ways.\n mod pingpong {\n     use core::pipes::*;\n+    use core::ptr;\n \n-    type packets = {\n-        // This is probably a resolve bug, I forgot to export packet,\n-        // but since I didn't import pipes::*, it worked anyway.\n+    pub type packets = {\n         ping: Packet<ping>,\n         pong: Packet<pong>,\n     };\n \n-    fn init() -> (client::ping, server::ping) {\n+    pub fn init() -> (client::ping, server::ping) {\n         let buffer = ~{\n             header: BufferHeader(),\n             data: {\n@@ -44,44 +43,48 @@ mod pingpong {\n     pub enum ping = server::pong;\n     pub enum pong = client::ping;\n     pub mod client {\n+        use core::ptr;\n+\n         pub fn ping(+pipe: ping) -> pong {\n             {\n                 let b = pipe.reuse_buffer();\n                 let s = SendPacketBuffered(ptr::addr_of(&(b.buffer.data.pong)));\n                 let c = RecvPacketBuffered(ptr::addr_of(&(b.buffer.data.pong)));\n-                let message = pingpong::ping(move s);\n-                pipes::send(move pipe, move message);\n+                let message = ::pingpong::ping(move s);\n+                ::pipes::send(move pipe, move message);\n                 move c\n             }\n         }\n-        pub type ping = pipes::SendPacketBuffered<pingpong::ping,\n-        pingpong::packets>;\n-        pub type pong = pipes::RecvPacketBuffered<pingpong::pong,\n-        pingpong::packets>;\n+        pub type ping = pipes::SendPacketBuffered<::pingpong::ping,\n+                                                  ::pingpong::packets>;\n+        pub type pong = pipes::RecvPacketBuffered<::pingpong::pong,\n+                                                  ::pingpong::packets>;\n     }\n     pub mod server {\n-        pub type ping = pipes::RecvPacketBuffered<pingpong::ping,\n-        pingpong::packets>;\n+        use core::ptr;\n+\n+        pub type ping = pipes::RecvPacketBuffered<::pingpong::ping,\n+        ::pingpong::packets>;\n         pub fn pong(+pipe: pong) -> ping {\n             {\n                 let b = pipe.reuse_buffer();\n                 let s = SendPacketBuffered(ptr::addr_of(&(b.buffer.data.ping)));\n                 let c = RecvPacketBuffered(ptr::addr_of(&(b.buffer.data.ping)));\n-                let message = pingpong::pong(move s);\n-                pipes::send(move pipe, move message);\n+                let message = ::pingpong::pong(move s);\n+                ::pipes::send(move pipe, move message);\n                 move c\n             }\n         }\n-        pub type pong = pipes::SendPacketBuffered<pingpong::pong,\n-        pingpong::packets>;\n+        pub type pong = pipes::SendPacketBuffered<::pingpong::pong,\n+                                                  ::pingpong::packets>;\n     }\n }\n \n mod test {\n     use pipes::recv;\n     use pingpong::{ping, pong};\n \n-    pub fn client(-chan: pingpong::client::ping) {\n+    pub fn client(-chan: ::pingpong::client::ping) {\n         use pingpong::client;\n \n         let chan = client::ping(move chan); return;\n@@ -90,7 +93,7 @@ mod test {\n         log(error, \"Received pong\");\n     }\n     \n-    pub fn server(-chan: pingpong::server::ping) {\n+    pub fn server(-chan: ::pingpong::server::ping) {\n         use pingpong::server;\n \n         let ping(chan) = recv(move chan); return;\n@@ -101,7 +104,7 @@ mod test {\n }\n \n fn main() {\n-    let (client_, server_) = pingpong::init();\n+    let (client_, server_) = ::pingpong::init();\n     let client_ = ~mut Some(move client_);\n     let server_ = ~mut Some(move server_);\n     do task::spawn |move client_| {"}]}