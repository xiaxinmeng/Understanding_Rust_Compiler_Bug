{"sha": "c062f3dddda6c6d334ae3753c6afdf04f2472877", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNjJmM2RkZGRhNmM2ZDMzNGFlMzc1M2M2YWZkZjA0ZjI0NzI4Nzc=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-17T12:56:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T12:56:43Z"}, "message": "Rollup merge of #86340 - Smittyvb:ctfe-hard-error-message, r=RalfJung\n\nUse better error message for hard errors in CTFE\n\nI noticed this while working on #86255: currently the same message is used for hard errors and soft errors in CTFE. This changes the error messages to make hard errors use a message that indicates the reality of the situation correctly, since usage of the constant is never allowed when there was a hard error evaluating it. This doesn't affect the behaviour of these error messages, only the content.\n\nThis changes the error logic to check if the error should be hard or soft where it is generated, instead of where it is emitted, to allow this distinction in error messages.", "tree": {"sha": "691e4f9684384800a5564948d831aad22a6382cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/691e4f9684384800a5564948d831aad22a6382cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c062f3dddda6c6d334ae3753c6afdf04f2472877", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgy0aLCRBK7hj4Ov3rIwAA+IwIAAHxdVhwLuHewQmzkji0JxB7\nSHvMcQmkbp6mNG4MrLO2cpHAOMZLv5x2OWAQFrFs9u0dmeZncJ59ZMkD2KJs3ywm\nf8JOSGTZnHyQJhNIPcBeKR0bw1UYINDf2fy3swc1yK0ceY1XHaQAeNWLt9EYUiWN\nnvh/Gu5ls7n/IFIofPG1BCOzkTPWLKYqHJlha/epXGVeolnxmpiBFlWs/CC2dDPg\nhDGgq4BgoUeOc8dJgCSHnruflou2b3+0nqWR5hMJ6R5qX4o2N4GJSe2ST1cmeOIz\nZTnuFC6QU25cC6wFNSbnAipWcYXp2gAHT8g6i9M8ZMA8liF3Kgrgm+keJoSn0Qk=\n=fVja\n-----END PGP SIGNATURE-----\n", "payload": "tree 691e4f9684384800a5564948d831aad22a6382cb\nparent 9521da71793805a87c4b8525c34b19f58eed498f\nparent 044b3620e7f3d495e859113ecc6aa55e37ddc228\nauthor Yuki Okushi <jtitor@2k36.org> 1623934603 +0900\ncommitter GitHub <noreply@github.com> 1623934603 +0900\n\nRollup merge of #86340 - Smittyvb:ctfe-hard-error-message, r=RalfJung\n\nUse better error message for hard errors in CTFE\n\nI noticed this while working on #86255: currently the same message is used for hard errors and soft errors in CTFE. This changes the error messages to make hard errors use a message that indicates the reality of the situation correctly, since usage of the constant is never allowed when there was a hard error evaluating it. This doesn't affect the behaviour of these error messages, only the content.\n\nThis changes the error logic to check if the error should be hard or soft where it is generated, instead of where it is emitted, to allow this distinction in error messages.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c062f3dddda6c6d334ae3753c6afdf04f2472877", "html_url": "https://github.com/rust-lang/rust/commit/c062f3dddda6c6d334ae3753c6afdf04f2472877", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c062f3dddda6c6d334ae3753c6afdf04f2472877/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9521da71793805a87c4b8525c34b19f58eed498f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9521da71793805a87c4b8525c34b19f58eed498f", "html_url": "https://github.com/rust-lang/rust/commit/9521da71793805a87c4b8525c34b19f58eed498f"}, {"sha": "044b3620e7f3d495e859113ecc6aa55e37ddc228", "url": "https://api.github.com/repos/rust-lang/rust/commits/044b3620e7f3d495e859113ecc6aa55e37ddc228", "html_url": "https://github.com/rust-lang/rust/commit/044b3620e7f3d495e859113ecc6aa55e37ddc228"}], "stats": {"total": 187, "additions": 80, "deletions": 107}, "files": [{"sha": "9d1b3e101a92ea654f14c527972d7c22337090bc", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -518,4 +518,14 @@ impl InterpError<'_> {\n             _ => false,\n         }\n     }\n+\n+    /// Should this error be reported as a hard error, preventing compilation, or a soft error,\n+    /// causing a deny-by-default lint?\n+    pub fn is_hard_err(&self) -> bool {\n+        use InterpError::*;\n+        match *self {\n+            MachineStop(ref err) => err.is_hard_err(),\n+            _ => false,\n+        }\n+    }\n }"}, {"sha": "17e8ab2a4da63ede2a11d7e048f74d1181dc5d72", "filename": "compiler/rustc_mir/src/const_eval/error.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -157,7 +157,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         tcx: TyCtxtAt<'tcx>,\n         message: &str,\n         emit: impl FnOnce(DiagnosticBuilder<'_>),\n-        mut lint_root: Option<hir::HirId>,\n+        lint_root: Option<hir::HirId>,\n     ) -> ErrorHandled {\n         let finish = |mut err: DiagnosticBuilder<'_>, span_msg: Option<String>| {\n             trace!(\"reporting const eval failure at {:?}\", self.span);\n@@ -194,12 +194,6 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             _ => {}\n         };\n \n-        // If we have a 'hard error', then set `lint_root` to `None` so that we don't\n-        // emit a lint.\n-        if matches!(&self.error, InterpError::MachineStop(err) if err.is_hard_err()) {\n-            lint_root = None;\n-        }\n-\n         let err_msg = self.error.to_string();\n \n         // Regular case - emit a lint."}, {"sha": "536dbad4f764d9d20853b49768775e32699f9ccd", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -312,22 +312,17 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n             let err = ConstEvalErr::new(&ecx, error, None);\n             // Some CTFE errors raise just a lint, not a hard error; see\n             // <https://github.com/rust-lang/rust/issues/71800>.\n-            let emit_as_lint = if let Some(def) = def.as_local() {\n+            let is_hard_err = if let Some(def) = def.as_local() {\n                 // (Associated) consts only emit a lint, since they might be unused.\n-                matches!(tcx.def_kind(def.did.to_def_id()), DefKind::Const | DefKind::AssocConst)\n+                !matches!(tcx.def_kind(def.did.to_def_id()), DefKind::Const | DefKind::AssocConst)\n+                    // check if the inner InterpError is hard\n+                    || err.error.is_hard_err()\n             } else {\n                 // use of broken constant from other crate: always an error\n-                false\n+                true\n             };\n-            if emit_as_lint {\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(def.as_local().unwrap().did);\n-                Err(err.report_as_lint(\n-                    tcx.at(tcx.def_span(def.did)),\n-                    \"any use of this value will cause an error\",\n-                    hir_id,\n-                    Some(err.span),\n-                ))\n-            } else {\n+\n+            if is_hard_err {\n                 let msg = if is_static {\n                     Cow::from(\"could not evaluate static initializer\")\n                 } else {\n@@ -345,6 +340,14 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                 };\n \n                 Err(err.report_as_error(ecx.tcx.at(ecx.cur_span()), &msg))\n+            } else {\n+                let hir_id = tcx.hir().local_def_id_to_hir_id(def.as_local().unwrap().did);\n+                Err(err.report_as_lint(\n+                    tcx.at(tcx.def_span(def.did)),\n+                    \"any use of this value will cause an error\",\n+                    hir_id,\n+                    Some(err.span),\n+                ))\n             }\n         }\n         Ok(mplace) => {"}, {"sha": "5807c5659b6155fd12c7f6e9f17b9c62dcc1ece9", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -5,31 +5,31 @@\n const MSG: &str = \"hello\";\n \n const Z: () = std::panic!(\"cheese\");\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Z2: () = std::panic!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Y: () = std::unreachable!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const X: () = std::unimplemented!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n //\n const W: () = std::panic!(MSG);\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Z_CORE: () = core::panic!(\"cheese\");\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Z2_CORE: () = core::panic!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Y_CORE: () = core::unreachable!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const X_CORE: () = core::unimplemented!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const W_CORE: () = core::panic!(MSG);\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed"}, {"sha": "c0c749ede56126084186ec71a2b79d34283794b8", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 20, "deletions": 40, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -1,100 +1,80 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:7:15\n    |\n LL | const Z: () = std::panic!(\"cheese\");\n-   | --------------^^^^^^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:10:16\n    |\n LL | const Z2: () = std::panic!();\n-   | ---------------^^^^^^^^^^^^^-\n-   |                |\n-   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n+   |                ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:13:15\n    |\n LL | const Y: () = std::unreachable!();\n-   | --------------^^^^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:13:15\n+   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:13:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:16:15\n    |\n LL | const X: () = std::unimplemented!();\n-   | --------------^^^^^^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:16:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:16:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:19:15\n    |\n LL | const W: () = std::panic!(MSG);\n-   | --------------^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:19:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:19:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:22:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n-   | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:22:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:22:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:25:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n-   | --------------------^^^^^^^^^^^^^^-\n-   |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:25:21\n+   |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:25:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:28:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n-   | -------------------^^^^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:28:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:28:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:31:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n-   | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:31:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:31:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:34:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n-   | -------------------^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:34:20\n+   |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:34:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "1ea0845c968c6fcaa50a88e7341628e3667efdfa", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -7,13 +7,13 @@\n use core::panic::PanicInfo;\n \n const Z: () = panic!(\"cheese\");\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Y: () = unreachable!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const X: () = unimplemented!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n #[lang = \"eh_personality\"]\n fn eh() {}"}, {"sha": "9abf8a20b8a35e769e56ae8f413cd512d7b34bb9", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -1,30 +1,24 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:9:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n-   | --------------^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:12:15\n    |\n LL | const Y: () = unreachable!();\n-   | --------------^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n+   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:15:15\n    |\n LL | const X: () = unimplemented!();\n-   | --------------^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "78cf25308fff9e637dd3f8cd8d8470e36876a057", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -9,7 +9,7 @@ struct PrintName;\n \n impl PrintName {\n     const VOID: ! = panic!();\n-    //~^ ERROR any use of this value will cause an error\n+    //~^ ERROR evaluation of constant value failed\n }\n \n fn main() {"}, {"sha": "085609483098b73e8b3182828352331b76bc43ee", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -1,10 +1,8 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/panic-assoc-never-type.rs:11:21\n    |\n LL |     const VOID: ! = panic!();\n-   |     ----------------^^^^^^^^-\n-   |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:11:21\n+   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:11:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "dd875768b168faa9ec9bad7c595a250670e32a87", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -4,7 +4,7 @@\n #![feature(never_type)]\n \n const VOID: ! = panic!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {\n     let _ = VOID;"}, {"sha": "9b7f2181c166258d6b00584cf497585a96e6a047", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -1,10 +1,8 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/panic-never-type.rs:6:17\n    |\n LL | const VOID: ! = panic!();\n-   | ----------------^^^^^^^^-\n-   |                 |\n-   |                 the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:6:17\n+   |                 ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:6:17\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "766a0c49be68afcf9fc85d3f2481faabf17bd2ce", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -2,7 +2,7 @@\n \n #[unwind(aborts)]\n const fn foo() {\n-    panic!() //~ ERROR any use of this value will cause an error\n+    panic!() //~ ERROR evaluation of constant value failed\n }\n \n const _: () = foo();"}, {"sha": "e3b871ee529bef3a7f3d58cf68581a464e43c6be", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -1,15 +1,14 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/unwind-abort.rs:5:5\n    |\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:5:5\n    |     inside `foo` at $SRC_DIR/std/src/panic.rs:LL:COL\n-   |     inside `_` at $DIR/unwind-abort.rs:8:15\n ...\n LL | const _: () = foo();\n-   | --------------------\n+   |               ----- inside `_` at $DIR/unwind-abort.rs:8:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "9a820ff72171921063c9a2fca4d9273d7476a78c", "filename": "src/test/ui/consts/const-unwrap.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -1,17 +1,16 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |             None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                     |\n    |                     the evaluated program panicked at 'called `Option::unwrap()` on a `None` value', $DIR/const-unwrap.rs:9:38\n    |                     inside `Option::<i32>::unwrap` at $SRC_DIR/core/src/panic.rs:LL:COL\n-   |                     inside `BAR` at $DIR/const-unwrap.rs:9:18\n    | \n-  ::: $DIR/const-unwrap.rs:9:1\n+  ::: $DIR/const-unwrap.rs:9:18\n    |\n LL | const BAR: i32 = Option::<i32>::None.unwrap();\n-   | ----------------------------------------------\n+   |                  ---------------------------- inside `BAR` at $DIR/const-unwrap.rs:9:18\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "1deaa937edb37db94501895bc46db9da4c7cedbb", "filename": "src/test/ui/consts/control-flow/assert.const_panic.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -1,10 +1,8 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/assert.rs:10:15\n    |\n LL | const _: () = assert!(false);\n-   | --------------^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n+   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n    |\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b311cb140ccf69d03b45863c0fcd651b74ed3ccd", "filename": "src/test/ui/consts/control-flow/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c062f3dddda6c6d334ae3753c6afdf04f2472877/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs?ref=c062f3dddda6c6d334ae3753c6afdf04f2472877", "patch": "@@ -9,6 +9,6 @@ const _: () = assert!(true);\n \n const _: () = assert!(false);\n //[stock]~^ ERROR panicking in constants is unstable\n-//[const_panic]~^^ ERROR any use of this value will cause an error\n+//[const_panic]~^^ ERROR evaluation of constant value failed\n \n fn main() {}"}]}