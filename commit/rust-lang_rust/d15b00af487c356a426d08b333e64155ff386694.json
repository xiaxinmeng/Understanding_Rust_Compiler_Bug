{"sha": "d15b00af487c356a426d08b333e64155ff386694", "node_id": "C_kwDOAAsO6NoAKGQxNWIwMGFmNDg3YzM1NmE0MjZkMDhiMzMzZTY0MTU1ZmYzODY2OTQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T16:38:35Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-08T09:41:00Z"}, "message": "don't evaluate with escaping bound vars", "tree": {"sha": "9feb7a8bf9f777759bad6d46a55dbbb609f30d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9feb7a8bf9f777759bad6d46a55dbbb609f30d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d15b00af487c356a426d08b333e64155ff386694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d15b00af487c356a426d08b333e64155ff386694", "html_url": "https://github.com/rust-lang/rust/commit/d15b00af487c356a426d08b333e64155ff386694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d15b00af487c356a426d08b333e64155ff386694/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01adb7e98d5656c06497f33dd2747df144e78356", "url": "https://api.github.com/repos/rust-lang/rust/commits/01adb7e98d5656c06497f33dd2747df144e78356", "html_url": "https://github.com/rust-lang/rust/commit/01adb7e98d5656c06497f33dd2747df144e78356"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "c1fb59009d369ef5e85463ac42fe5654287721ad", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d15b00af487c356a426d08b333e64155ff386694/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15b00af487c356a426d08b333e64155ff386694/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=d15b00af487c356a426d08b333e64155ff386694", "patch": "@@ -743,9 +743,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n-                if self.tcx().lazy_normalization() =>\n-            {\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n                 assert_eq!(promoted, None);\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n@@ -967,9 +965,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n-                if self.tcx().lazy_normalization() =>\n-            {\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n                 assert_eq!(promoted, None);\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,"}, {"sha": "ff20da65c016de18341a4352e1fd8f1e8fc37e5c", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d15b00af487c356a426d08b333e64155ff386694/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15b00af487c356a426d08b333e64155ff386694/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=d15b00af487c356a426d08b333e64155ff386694", "patch": "@@ -180,6 +180,7 @@ impl<'tcx> ConstKind<'tcx> {\n         param_env: ParamEnv<'tcx>,\n         eval_mode: EvalMode,\n     ) -> Option<Result<EvalResult<'tcx>, ErrorGuaranteed>> {\n+        assert!(!self.has_escaping_bound_vars(), \"escaping vars in {self:?}\");\n         if let ConstKind::Unevaluated(unevaluated) = self {\n             use crate::mir::interpret::ErrorHandled;\n "}, {"sha": "8a093bf4281cb751b7a32556587611beabe8dc80", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d15b00af487c356a426d08b333e64155ff386694/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15b00af487c356a426d08b333e64155ff386694/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d15b00af487c356a426d08b333e64155ff386694", "patch": "@@ -635,13 +635,18 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn fold_const(&mut self, constant: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if self.selcx.tcx().lazy_normalization() {\n+        let tcx = self.selcx.tcx();\n+        if tcx.lazy_normalization() {\n             constant\n         } else {\n             let constant = constant.super_fold_with(self);\n-            debug!(?constant);\n-            debug!(\"self.param_env: {:?}\", self.param_env);\n-            constant.eval(self.selcx.tcx(), self.param_env)\n+            debug!(?constant, ?self.param_env);\n+            with_replaced_escaping_bound_vars(\n+                self.selcx.infcx(),\n+                &mut self.universes,\n+                constant,\n+                |constant| constant.eval(tcx, self.param_env),\n+            )\n         }\n     }\n \n@@ -671,6 +676,41 @@ pub struct BoundVarReplacer<'me, 'tcx> {\n     universe_indices: &'me mut Vec<Option<ty::UniverseIndex>>,\n }\n \n+/// Executes `f` on `value` after replacing all escaping bound variables with placeholders\n+/// and then replaces these placeholders with the original bound variables in the result.\n+///\n+/// In most places, bound variables should be replaced right when entering a binder, making\n+/// this function unnecessary. However, normalization currently does not do that, so we have\n+/// to do this lazily.\n+///\n+/// You should not add any additional uses of this function, at least not without first\n+/// discussing it with t-types.\n+///\n+/// FIXME(@lcnr): We may even consider experimenting with eagerly replacing bound vars during\n+/// normalization as well, at which point this function will be unnecessary and can be removed.\n+pub fn with_replaced_escaping_bound_vars<'a, 'tcx, T: TypeFoldable<'tcx>, R: TypeFoldable<'tcx>>(\n+    infcx: &'a InferCtxt<'a, 'tcx>,\n+    universe_indices: &'a mut Vec<Option<ty::UniverseIndex>>,\n+    value: T,\n+    f: impl FnOnce(T) -> R,\n+) -> R {\n+    if value.has_escaping_bound_vars() {\n+        let (value, mapped_regions, mapped_types, mapped_consts) =\n+            BoundVarReplacer::replace_bound_vars(infcx, universe_indices, value);\n+        let result = f(value);\n+        PlaceholderReplacer::replace_placeholders(\n+            infcx,\n+            mapped_regions,\n+            mapped_types,\n+            mapped_consts,\n+            universe_indices,\n+            result,\n+        )\n+    } else {\n+        f(value)\n+    }\n+}\n+\n impl<'me, 'tcx> BoundVarReplacer<'me, 'tcx> {\n     /// Returns `Some` if we *were* able to replace bound vars. If there are any bound vars that\n     /// use a binding level above `universe_indices.len()`, we fail."}, {"sha": "f65fc5bad0d9184144b37fa1fe0a3a41d2f6611d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d15b00af487c356a426d08b333e64155ff386694/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15b00af487c356a426d08b333e64155ff386694/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=d15b00af487c356a426d08b333e64155ff386694", "patch": "@@ -6,7 +6,7 @@ use crate::infer::at::At;\n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::error_reporting::InferCtxtExt;\n-use crate::traits::project::needs_normalization;\n+use crate::traits::project::{needs_normalization, BoundVarReplacer, PlaceholderReplacer};\n use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n@@ -283,11 +283,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 let tcx = self.infcx.tcx;\n                 let infcx = self.infcx;\n                 let (data, mapped_regions, mapped_types, mapped_consts) =\n-                    crate::traits::project::BoundVarReplacer::replace_bound_vars(\n-                        infcx,\n-                        &mut self.universes,\n-                        data,\n-                    );\n+                    BoundVarReplacer::replace_bound_vars(infcx, &mut self.universes, data);\n                 let data = data.try_fold_with(self)?;\n \n                 let mut orig_values = OriginalQueryValues::default();\n@@ -313,8 +309,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 debug!(\"QueryNormalizer: result = {:#?}\", result);\n                 debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n                 self.obligations.extend(obligations);\n-\n-                let res = crate::traits::project::PlaceholderReplacer::replace_placeholders(\n+                let res = PlaceholderReplacer::replace_placeholders(\n                     infcx,\n                     mapped_regions,\n                     mapped_types,\n@@ -343,7 +338,13 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         constant: ty::Const<'tcx>,\n     ) -> Result<ty::Const<'tcx>, Self::Error> {\n         let constant = constant.try_super_fold_with(self)?;\n-        Ok(constant.eval(self.infcx.tcx, self.param_env))\n+        debug!(?constant, ?self.param_env);\n+        Ok(crate::traits::project::with_replaced_escaping_bound_vars(\n+            self.infcx,\n+            &mut self.universes,\n+            constant,\n+            |constant| constant.eval(self.infcx.tcx, self.param_env),\n+        ))\n     }\n \n     fn try_fold_mir_const("}]}