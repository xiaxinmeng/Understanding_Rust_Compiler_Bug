{"sha": "041f890cfe943741112232d394875f37a1659a07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MWY4OTBjZmU5NDM3NDExMTIyMzJkMzk0ODc1ZjM3YTE2NTlhMDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-04T23:49:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-05T17:50:22Z"}, "message": "Rollup merge of #37422 - bluss:wrapping-offset, r=alexcrichton\n\nAdd .wrapping_offset() methods\n\n.wrapping_offset() exposes the arith_offset intrinsic in the core\nmodule (as methods on raw pointers, next to offset). This is the\nfirst step in making it possible to stabilize the interface later.\n\n`arith_offset` is a useful tool for developing iterators for two\nreasons:\n1. `arith_offset` is used by the slice's iterator, the most important\n   iterator in libcore, and it is natural that Rust users need the same\n   power available to implement similar iterators.\n2. It is a good way to implement raw pointer iterations with step\n   greater than one.\n\nThe name seems to fit the style of methods like \"wrapping_add\".", "tree": {"sha": "1644f5a320f548f049f1b872c9d97122ea5932a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1644f5a320f548f049f1b872c9d97122ea5932a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/041f890cfe943741112232d394875f37a1659a07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/041f890cfe943741112232d394875f37a1659a07", "html_url": "https://github.com/rust-lang/rust/commit/041f890cfe943741112232d394875f37a1659a07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/041f890cfe943741112232d394875f37a1659a07/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a0963292aa6d78a4de05dbee853d0efe6cefe8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a0963292aa6d78a4de05dbee853d0efe6cefe8a", "html_url": "https://github.com/rust-lang/rust/commit/1a0963292aa6d78a4de05dbee853d0efe6cefe8a"}, {"sha": "67626e0cc30e07fe8763d344e855d7b4750b0b33", "url": "https://api.github.com/repos/rust-lang/rust/commits/67626e0cc30e07fe8763d344e855d7b4750b0b33", "html_url": "https://github.com/rust-lang/rust/commit/67626e0cc30e07fe8763d344e855d7b4750b0b33"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "2ad38de72b1b95140ea35472449181e8e0c98670", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/041f890cfe943741112232d394875f37a1659a07/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041f890cfe943741112232d394875f37a1659a07/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=041f890cfe943741112232d394875f37a1659a07", "patch": "@@ -344,6 +344,46 @@ impl<T: ?Sized> *const T {\n     pub unsafe fn offset(self, count: isize) -> *const T where T: Sized {\n         intrinsics::offset(self, count)\n     }\n+\n+    /// Calculates the offset from a pointer using wrapping arithmetic.\n+    /// `count` is in units of T; e.g. a `count` of 3 represents a pointer\n+    /// offset of `3 * sizeof::<T>()` bytes.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The resulting pointer does not need to be in bounds, but it is\n+    /// potentially hazardous to dereference (which requires `unsafe`).\n+    ///\n+    /// Always use `.offset(count)` instead when possible, because `offset`\n+    /// allows the compiler to optimize better.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(ptr_wrapping_offset)]\n+    /// // Iterate using a raw pointer in increments of two elements\n+    /// let data = [1u8, 2, 3, 4, 5];\n+    /// let mut ptr: *const u8 = data.as_ptr();\n+    /// let step = 2;\n+    /// let end_rounded_up = ptr.wrapping_offset(6);\n+    ///\n+    /// // This loop prints \"1, 3, 5, \"\n+    /// while ptr != end_rounded_up {\n+    ///     unsafe {\n+    ///         print!(\"{}, \", *ptr);\n+    ///     }\n+    ///     ptr = ptr.wrapping_offset(step);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"ptr_wrapping_offset\", issue = \"37570\")]\n+    #[inline]\n+    pub fn wrapping_offset(self, count: isize) -> *const T where T: Sized {\n+        unsafe {\n+            intrinsics::arith_offset(self, count)\n+        }\n+    }\n }\n \n #[lang = \"mut_ptr\"]\n@@ -429,6 +469,46 @@ impl<T: ?Sized> *mut T {\n         intrinsics::offset(self, count) as *mut T\n     }\n \n+    /// Calculates the offset from a pointer using wrapping arithmetic.\n+    /// `count` is in units of T; e.g. a `count` of 3 represents a pointer\n+    /// offset of `3 * sizeof::<T>()` bytes.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The resulting pointer does not need to be in bounds, but it is\n+    /// potentially hazardous to dereference (which requires `unsafe`).\n+    ///\n+    /// Always use `.offset(count)` instead when possible, because `offset`\n+    /// allows the compiler to optimize better.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(ptr_wrapping_offset)]\n+    /// // Iterate using a raw pointer in increments of two elements\n+    /// let mut data = [1u8, 2, 3, 4, 5];\n+    /// let mut ptr: *mut u8 = data.as_mut_ptr();\n+    /// let step = 2;\n+    /// let end_rounded_up = ptr.wrapping_offset(6);\n+    ///\n+    /// while ptr != end_rounded_up {\n+    ///     unsafe {\n+    ///         *ptr = 0;\n+    ///     }\n+    ///     ptr = ptr.wrapping_offset(step);\n+    /// }\n+    /// assert_eq!(&data, &[0, 2, 0, 4, 0]);\n+    /// ```\n+    #[unstable(feature = \"ptr_wrapping_offset\", issue = \"37570\")]\n+    #[inline]\n+    pub fn wrapping_offset(self, count: isize) -> *mut T where T: Sized {\n+        unsafe {\n+            intrinsics::arith_offset(self, count) as *mut T\n+        }\n+    }\n+\n     /// Returns `None` if the pointer is null, or else returns a mutable\n     /// reference to the value wrapped in `Some`.\n     ///"}]}