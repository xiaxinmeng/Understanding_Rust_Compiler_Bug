{"sha": "55f2164bcdbf2748aca988d867ab2b767fb83547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZjIxNjRiY2RiZjI3NDhhY2E5ODhkODY3YWIyYjc2N2ZiODM1NDc=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T08:57:59Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T08:57:59Z"}, "message": "Do not force_allocate Deref base.\n\nThis makes `eval_lvalue` a bit less DRY for now, but it will be easier\nto remove force_allocate in more places piecewise.", "tree": {"sha": "d98980bed3eef4f0bd5ae77a51997515a320adaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d98980bed3eef4f0bd5ae77a51997515a320adaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55f2164bcdbf2748aca988d867ab2b767fb83547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55f2164bcdbf2748aca988d867ab2b767fb83547", "html_url": "https://github.com/rust-lang/rust/commit/55f2164bcdbf2748aca988d867ab2b767fb83547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55f2164bcdbf2748aca988d867ab2b767fb83547/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4f5b4b39a3cbbf87ecd639a9966fba9d0f71c3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f5b4b39a3cbbf87ecd639a9966fba9d0f71c3c", "html_url": "https://github.com/rust-lang/rust/commit/e4f5b4b39a3cbbf87ecd639a9966fba9d0f71c3c"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "a681e64d32c0a8361df2f322b2e18854740d833e", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55f2164bcdbf2748aca988d867ab2b767fb83547/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f2164bcdbf2748aca988d867ab2b767fb83547/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=55f2164bcdbf2748aca988d867ab2b767fb83547", "patch": "@@ -889,17 +889,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         proj: &mir::LvalueProjection<'tcx>,\n     ) -> EvalResult<'tcx, Lvalue> {\n         let base = self.eval_lvalue(&proj.base)?;\n-\n-        // FIXME(solson): Is this always necessary?\n-        let base = self.force_allocation(base)?;\n-\n-        let (base_ptr, base_extra) = base.to_ptr_and_extra();\n         let base_ty = self.lvalue_ty(&proj.base);\n         let base_layout = self.type_layout(base_ty);\n \n         use rustc::mir::repr::ProjectionElem::*;\n         let (ptr, extra) = match proj.elem {\n             Field(field, field_ty) => {\n+                // FIXME(solson)\n+                let base = self.force_allocation(base)?;\n+                let (base_ptr, base_extra) = base.to_ptr_and_extra();\n+\n                 let field_ty = self.monomorphize(field_ty, self.substs());\n                 let field = field.index();\n \n@@ -946,6 +945,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Downcast(_, variant) => {\n+                // FIXME(solson)\n+                let base = self.force_allocation(base)?;\n+                let (base_ptr, base_extra) = base.to_ptr_and_extra();\n+\n                 use rustc::ty::layout::Layout::*;\n                 let extra = match *base_layout {\n                     General { .. } => LvalueExtra::DowncastVariant(variant),\n@@ -958,7 +961,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Deref => {\n                 use primval::PrimVal::*;\n                 use interpreter::value::Value::*;\n-                match self.read_value(base_ptr, base_ty)? {\n+\n+                let val = match self.eval_and_read_lvalue(&proj.base)? {\n+                    ByRef(ptr) => self.read_value(ptr, base_ty)?,\n+                    v => v,\n+                };\n+\n+                match val {\n                     ByValPair(Ptr(ptr), Ptr(vptr)) => (ptr, LvalueExtra::Vtable(vptr)),\n                     ByValPair(Ptr(ptr), n) =>\n                         (ptr, LvalueExtra::Length(n.expect_uint(\"slice length\"))),\n@@ -968,6 +977,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Index(ref operand) => {\n+                // FIXME(solson)\n+                let base = self.force_allocation(base)?;\n+                let (base_ptr, _) = base.to_ptr_and_extra();\n+\n                 let (elem_ty, len) = base.elem_ty_and_len(base_ty);\n                 let elem_size = self.type_size(elem_ty);\n                 let n_ptr = self.eval_operand(operand)?;\n@@ -980,6 +993,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             ConstantIndex { offset, min_length, from_end } => {\n+                // FIXME(solson)\n+                let base = self.force_allocation(base)?;\n+                let (base_ptr, _) = base.to_ptr_and_extra();\n+\n                 let (elem_ty, n) = base.elem_ty_and_len(base_ty);\n                 let elem_size = self.type_size(elem_ty);\n                 assert!(n >= min_length as u64);\n@@ -995,6 +1012,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Subslice { from, to } => {\n+                // FIXME(solson)\n+                let base = self.force_allocation(base)?;\n+                let (base_ptr, _) = base.to_ptr_and_extra();\n+\n                 let (elem_ty, n) = base.elem_ty_and_len(base_ty);\n                 let elem_size = self.type_size(elem_ty);\n                 assert!((from as u64) <= n - (to as u64));"}]}