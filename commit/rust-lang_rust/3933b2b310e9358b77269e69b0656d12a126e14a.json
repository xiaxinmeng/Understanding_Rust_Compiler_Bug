{"sha": "3933b2b310e9358b77269e69b0656d12a126e14a", "node_id": "C_kwDOAAsO6NoAKDM5MzNiMmIzMTBlOTM1OGI3NzI2OWU2OWIwNjU2ZDEyYTEyNmUxNGE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-13T14:02:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-13T14:02:37Z"}, "message": "Rollup merge of #99199 - TaKO8Ki:remove-unnecessary-span-to-snippet, r=cjgillot\n\nRefactor: remove an unnecessary `span_to_snippet`\n\n`span_suggestion_hidden` does not show the suggested code and the suggestion is used just for rustfix, so `span_to_snippet` is unnecessary here.", "tree": {"sha": "7dc57711a7079cace5cc74fee1977798642c8d96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dc57711a7079cace5cc74fee1977798642c8d96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3933b2b310e9358b77269e69b0656d12a126e14a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiztB+CRBK7hj4Ov3rIwAARV4IAKvG4I07mGXL//5wlrkpzVEr\nSY4vZjutaJ+ZTcUxLaIfMRCp2F5YzR15PscahrJpYqeVRuGlWNLtaxSmSZIp3FL2\nJ6wSfiRZIIJfSkj5Ix8sJbewcxWGLlMSD2Qu2jOfBcYBMmAdiG0hGjw3SLIOtWav\nX7S6sxU+Xa3/K33qp/Jk3/XEOjbOxaT7gqzP6rfil+yMZUHjyn4sdH8Dg0npARbn\nqmNjM7xUN2EaTnyK9uyn6JbEbkLK5WHIZzZL1NkXdkZ45lGaRTM6Qe0eNncZH6vW\nSHyAIt46U215J0fFou1n5FCGlMRz/46yij4wo+uFgTS1yi+EDJAL4X51d9TErsE=\n=0SUN\n-----END PGP SIGNATURE-----\n", "payload": "tree 7dc57711a7079cace5cc74fee1977798642c8d96\nparent 68cfdbb5c1a6f5c7d796df65701edfd0abee89f4\nparent f65bf0b2bb1a99f73095c01a118f3c37d3ee614c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657720957 +0530\ncommitter GitHub <noreply@github.com> 1657720957 +0530\n\nRollup merge of #99199 - TaKO8Ki:remove-unnecessary-span-to-snippet, r=cjgillot\n\nRefactor: remove an unnecessary `span_to_snippet`\n\n`span_suggestion_hidden` does not show the suggested code and the suggestion is used just for rustfix, so `span_to_snippet` is unnecessary here.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3933b2b310e9358b77269e69b0656d12a126e14a", "html_url": "https://github.com/rust-lang/rust/commit/3933b2b310e9358b77269e69b0656d12a126e14a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3933b2b310e9358b77269e69b0656d12a126e14a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68cfdbb5c1a6f5c7d796df65701edfd0abee89f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/68cfdbb5c1a6f5c7d796df65701edfd0abee89f4", "html_url": "https://github.com/rust-lang/rust/commit/68cfdbb5c1a6f5c7d796df65701edfd0abee89f4"}, {"sha": "f65bf0b2bb1a99f73095c01a118f3c37d3ee614c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f65bf0b2bb1a99f73095c01a118f3c37d3ee614c", "html_url": "https://github.com/rust-lang/rust/commit/f65bf0b2bb1a99f73095c01a118f3c37d3ee614c"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "0ceb63477c80961df33fab6236fecf9361afdbbe", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3933b2b310e9358b77269e69b0656d12a126e14a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3933b2b310e9358b77269e69b0656d12a126e14a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=3933b2b310e9358b77269e69b0656d12a126e14a", "patch": "@@ -1598,21 +1598,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let return_ty = tcx.erase_regions(return_ty);\n \n             // to avoid panics\n-            if let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator) {\n-                if self\n+            if let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator)\n+                && self\n                     .infcx\n                     .type_implements_trait(iter_trait, return_ty, ty_params, self.param_env)\n                     .must_apply_modulo_regions()\n-                {\n-                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(return_span) {\n-                        err.span_suggestion_hidden(\n-                            return_span,\n-                            \"use `.collect()` to allocate the iterator\",\n-                            format!(\"{snippet}.collect::<Vec<_>>()\"),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                }\n+            {\n+                err.span_suggestion_hidden(\n+                    return_span.shrink_to_hi(),\n+                    \"use `.collect()` to allocate the iterator\",\n+                    \".collect::<Vec<_>>()\",\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n         }\n "}, {"sha": "a820f700869b211ef7b6e0ef63386cc36656025c", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3933b2b310e9358b77269e69b0656d12a126e14a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3933b2b310e9358b77269e69b0656d12a126e14a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=3933b2b310e9358b77269e69b0656d12a126e14a", "patch": "@@ -508,7 +508,7 @@ impl<'a> Resolver<'a> {\n                     E0401,\n                     \"can't use generic parameters from outer function\",\n                 );\n-                err.span_label(span, \"use of generic parameter from outer function\".to_string());\n+                err.span_label(span, \"use of generic parameter from outer function\");\n \n                 let sm = self.session.source_map();\n                 match outer_res {\n@@ -990,7 +990,7 @@ impl<'a> Resolver<'a> {\n                     E0735,\n                     \"generic parameters cannot use `Self` in their defaults\"\n                 );\n-                err.span_label(span, \"`Self` in generic parameter default\".to_string());\n+                err.span_label(span, \"`Self` in generic parameter default\");\n                 err\n             }\n             ResolutionError::UnreachableLabel { name, definition_span, suggestion } => {"}]}