{"sha": "e9d072ee89bb0b41c84801670ad02201b054d16b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZDA3MmVlODliYjBiNDFjODQ4MDE2NzBhZDAyMjAxYjA1NGQxNmI=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-21T01:51:08Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-21T18:16:36Z"}, "message": "Consolidate \"make sure types are the same\" fns.  Issue #2644.", "tree": {"sha": "df79bfef7af61997645d71a35af25ca483d14f7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df79bfef7af61997645d71a35af25ca483d14f7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9d072ee89bb0b41c84801670ad02201b054d16b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d072ee89bb0b41c84801670ad02201b054d16b", "html_url": "https://github.com/rust-lang/rust/commit/e9d072ee89bb0b41c84801670ad02201b054d16b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9d072ee89bb0b41c84801670ad02201b054d16b/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "393f739990240914a6b147d6b642adc7ab9a939b", "url": "https://api.github.com/repos/rust-lang/rust/commits/393f739990240914a6b147d6b642adc7ab9a939b", "html_url": "https://github.com/rust-lang/rust/commit/393f739990240914a6b147d6b642adc7ab9a939b"}], "stats": {"total": 63, "additions": 21, "deletions": 42}, "files": [{"sha": "3c7bddc9022c0b7fa1b5262498ad0605897ceb4e", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e9d072ee89bb0b41c84801670ad02201b054d16b/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d072ee89bb0b41c84801670ad02201b054d16b/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=e9d072ee89bb0b41c84801670ad02201b054d16b", "patch": "@@ -188,33 +188,29 @@ fn no_params(t: ty::t) -> ty::ty_param_bounds_and_ty {\n \n fn require_same_types(\n     tcx: ty::ctxt,\n+    maybe_infcx: option<infer::infer_ctxt>,\n     span: span,\n     t1: ty::t,\n     t2: ty::t,\n     msg: fn() -> str) -> bool {\n \n-    alt infer::compare_tys(tcx, t1, t2) {\n-      result::ok(()) { true }\n-      result::err(terr) {\n-        tcx.sess.span_err(span, msg() + \": \" +\n-            ty::type_err_to_str(tcx, terr));\n-        false\n+    let l_tcx, l_infcx;\n+    alt maybe_infcx {\n+      none {\n+        l_tcx = tcx;\n+        l_infcx = infer::new_infer_ctxt(tcx);\n+      }\n+      some(i) {\n+        l_tcx = i.tcx;\n+        l_infcx = i;\n       }\n     }\n-}\n-\n-fn require_same_types_in_infcx(\n-    infcx: infer::infer_ctxt,\n-    span: span,\n-    t1: ty::t,\n-    t2: ty::t,\n-    msg: fn() -> str) -> bool {\n \n-    alt infer::compare_tys_in_infcx(infcx, t1, t2) {\n+    alt infer::mk_eqty(l_infcx, t1, t2) {\n       result::ok(()) { true }\n       result::err(terr) {\n-        infcx.tcx.sess.span_err(span, msg() + \": \" +\n-            ty::type_err_to_str(infcx.tcx, terr));\n+        l_tcx.sess.span_err(span, msg() + \": \" +\n+            ty::type_err_to_str(l_tcx, terr));\n         false\n       }\n     }"}, {"sha": "93fcfca31ea8c310fab2264bf515100bbdb843f2", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9d072ee89bb0b41c84801670ad02201b054d16b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d072ee89bb0b41c84801670ad02201b054d16b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=e9d072ee89bb0b41c84801670ad02201b054d16b", "patch": "@@ -606,14 +606,6 @@ fn do_autoderef(fcx: @fn_ctxt, sp: span, t: ty::t) -> ty::t {\n     };\n }\n \n-// Returns true if the two types unify and false if they don't.\n-fn are_compatible(fcx: @fn_ctxt, expected: ty::t, actual: ty::t) -> bool {\n-    alt fcx.mk_eqty(expected, actual) {\n-      result::ok(_) { ret true; }\n-      result::err(_) { ret false; }\n-    }\n-}\n-\n // AST fragment checking\n fn check_lit(fcx: @fn_ctxt, lit: @ast::lit) -> ty::t {\n     let tcx = fcx.ccx.tcx;\n@@ -1248,9 +1240,11 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         };\n         alt expr_opt {\n           none {\n-            if !are_compatible(fcx, ret_ty, ty::mk_nil(tcx)) {\n+            alt fcx.mk_eqty(ret_ty, ty::mk_nil(tcx)) {\n+              result::ok(_) { /* fall through */ }\n+              result::err(_) {\n                 tcx.sess.span_err(expr.span,\n-                                  \"ret; in function returning non-nil\");\n+                                  \"ret; in function returning non-nil\"); }\n             }\n           }\n           some(e) { check_expr_with(fcx, e, ret_ty); }\n@@ -2305,7 +2299,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::native_item) {\n                                          expected %u\", i_n_tps, n_tps));\n     } else {\n         require_same_types(\n-            tcx, it.span, i_ty.ty, fty,\n+            tcx, none, it.span, i_ty.ty, fty,\n             {|| #fmt[\"intrinsic has wrong type. \\\n                       expected %s\",\n                      ty_to_str(ccx.tcx, fty)]});"}, {"sha": "7a1eca4fc257dab576a88494f1e5a8b0139d4410", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9d072ee89bb0b41c84801670ad02201b054d16b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d072ee89bb0b41c84801670ad02201b054d16b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=e9d072ee89bb0b41c84801670ad02201b054d16b", "patch": "@@ -141,8 +141,8 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n             fcx.infcx.resolve_type_vars_if_possible(fcx.expr_ty(end));\n         #debug[\"pat_range beginning type: %?\", b_ty];\n         #debug[\"pat_range ending type: %?\", e_ty];\n-        if !require_same_types_in_infcx(\n-            fcx.infcx, pat.span, b_ty, e_ty,\n+        if !require_same_types(\n+            tcx, some(fcx.infcx), pat.span, b_ty, e_ty,\n             {|| \"mismatched types in range\" }) {\n             // no-op\n         } else if !ty::type_is_numeric(b_ty) {"}, {"sha": "249c0105beac52314b6388dfa5bb02ba87d95f86", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9d072ee89bb0b41c84801670ad02201b054d16b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d072ee89bb0b41c84801670ad02201b054d16b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=e9d072ee89bb0b41c84801670ad02201b054d16b", "patch": "@@ -210,7 +210,7 @@ fn compare_impl_method(tcx: ty::ctxt, sp: span,\n         ty::subst(tcx, substs, if_fty)\n     };\n     require_same_types(\n-        tcx, sp, impl_fty, if_fty,\n+        tcx, none, sp, impl_fty, if_fty,\n         {|| \"method `\" + *if_m.ident + \"` has an incompatible type\"});\n     ret;\n "}, {"sha": "2a1f136048703ae0dd354dafa97c41c4886dd08c", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9d072ee89bb0b41c84801670ad02201b054d16b/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d072ee89bb0b41c84801670ad02201b054d16b/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=e9d072ee89bb0b41c84801670ad02201b054d16b", "patch": "@@ -193,8 +193,6 @@ export resolve_deep;\n export resolve_deep_var;\n export methods; // for infer_ctxt\n export unify_methods; // for infer_ctxt\n-export compare_tys;\n-export compare_tys_in_infcx;\n export fixup_err, fixup_err_to_str;\n export assignment;\n export root, to_str;\n@@ -399,15 +397,6 @@ fn can_mk_assignty(cx: infer_ctxt, anmnt: assignment,\n     } }.to_ures()\n }\n \n-fn compare_tys(tcx: ty::ctxt, a: ty::t, b: ty::t) -> ures {\n-    let infcx = new_infer_ctxt(tcx);\n-    mk_eqty(infcx, a, b)\n-}\n-\n-fn compare_tys_in_infcx(infcx: infer_ctxt, a: ty::t, b: ty::t) -> ures {\n-    mk_eqty(infcx, a, b)\n-}\n-\n // See comment on the type `resolve_state` below\n fn resolve_shallow(cx: infer_ctxt, a: ty::t,\n                    force_vars: force_level) -> fres<ty::t> {"}]}