{"sha": "465ed5bd46116e55d801a42a34659d558d00b0d7", "node_id": "C_kwDOAAsO6NoAKDQ2NWVkNWJkNDYxMTZlNTVkODAxYTQyYTM0NjU5ZDU1OGQwMGIwZDc", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-01-17T11:05:01Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-01-19T09:40:47Z"}, "message": "Use UnordMap instead of FxHashMap in define_id_collections!().", "tree": {"sha": "83448c759d004c1c2e5cdeb89471888acb46feb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83448c759d004c1c2e5cdeb89471888acb46feb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/465ed5bd46116e55d801a42a34659d558d00b0d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/465ed5bd46116e55d801a42a34659d558d00b0d7", "html_url": "https://github.com/rust-lang/rust/commit/465ed5bd46116e55d801a42a34659d558d00b0d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/465ed5bd46116e55d801a42a34659d558d00b0d7/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31a053059e773f08bddca53bbc3c7ca204daaf40", "url": "https://api.github.com/repos/rust-lang/rust/commits/31a053059e773f08bddca53bbc3c7ca204daaf40", "html_url": "https://github.com/rust-lang/rust/commit/31a053059e773f08bddca53bbc3c7ca204daaf40"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "81b37ce5dfc2d2da44b43acafc19401737cbec14", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/465ed5bd46116e55d801a42a34659d558d00b0d7/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465ed5bd46116e55d801a42a34659d558d00b0d7/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=465ed5bd46116e55d801a42a34659d558d00b0d7", "patch": "@@ -52,21 +52,19 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n         // List of spans to lint. (lint_span, first_span)\n         let mut lint_spans = Vec::new();\n \n-        for (_, impl_ids) in cx\n+        let inherent_impls = cx\n             .tcx\n-            .crate_inherent_impls(())\n-            .inherent_impls\n-            .iter()\n-            .filter(|(&id, impls)| {\n-                impls.len() > 1\n-                    // Check for `#[allow]` on the type definition\n-                    && !is_lint_allowed(\n-                        cx,\n-                        MULTIPLE_INHERENT_IMPL,\n-                        cx.tcx.hir().local_def_id_to_hir_id(id),\n-                    )\n-            })\n-        {\n+            .with_stable_hashing_context(|hcx| cx.tcx.crate_inherent_impls(()).inherent_impls.to_sorted(&hcx));\n+\n+        for (_, impl_ids) in inherent_impls.into_iter().filter(|(&id, impls)| {\n+            impls.len() > 1\n+            // Check for `#[allow]` on the type definition\n+            && !is_lint_allowed(\n+                cx,\n+                MULTIPLE_INHERENT_IMPL,\n+                cx.tcx.hir().local_def_id_to_hir_id(id),\n+            )\n+        }) {\n             for impl_id in impl_ids.iter().map(|id| id.expect_local()) {\n                 match type_map.entry(cx.tcx.type_of(impl_id)) {\n                     Entry::Vacant(e) => {"}, {"sha": "d1a1f773f87b3b0878b83ab05a261a8ea89ab4c9", "filename": "clippy_lints/src/loops/while_immutable_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/465ed5bd46116e55d801a42a34659d558d00b0d7/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465ed5bd46116e55d801a42a34659d558d00b0d7/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs?ref=465ed5bd46116e55d801a42a34659d558d00b0d7", "patch": "@@ -35,7 +35,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, expr: &'\n         } else {\n             return;\n         };\n-    let mutable_static_in_cond = var_visitor.def_ids.iter().any(|(_, v)| *v);\n+    let mutable_static_in_cond = var_visitor.def_ids.items().any(|(_, v)| *v);\n \n     let mut has_break_or_return_visitor = HasBreakOrReturnVisitor {\n         has_break_or_return: false,"}, {"sha": "1c61c6e551c35c785a1d2b553b125247713e3965", "filename": "clippy_lints/src/missing_trait_methods.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/465ed5bd46116e55d801a42a34659d558d00b0d7/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465ed5bd46116e55d801a42a34659d558d00b0d7/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs?ref=465ed5bd46116e55d801a42a34659d558d00b0d7", "patch": "@@ -80,19 +80,21 @@ impl<'tcx> LateLintPass<'tcx> for MissingTraitMethods {\n                 }\n             }\n \n-            for assoc in provided.values() {\n-                let source_map = cx.tcx.sess.source_map();\n-                let definition_span = source_map.guess_head_span(cx.tcx.def_span(assoc.def_id));\n+            cx.tcx.with_stable_hashing_context(|hcx| {\n+                for assoc in provided.values_sorted(&hcx) {\n+                    let source_map = cx.tcx.sess.source_map();\n+                    let definition_span = source_map.guess_head_span(cx.tcx.def_span(assoc.def_id));\n \n-                span_lint_and_help(\n-                    cx,\n-                    MISSING_TRAIT_METHODS,\n-                    source_map.guess_head_span(item.span),\n-                    &format!(\"missing trait method provided by default: `{}`\", assoc.name),\n-                    Some(definition_span),\n-                    \"implement the method\",\n-                );\n-            }\n+                    span_lint_and_help(\n+                        cx,\n+                        MISSING_TRAIT_METHODS,\n+                        source_map.guess_head_span(item.span),\n+                        &format!(\"missing trait method provided by default: `{}`\", assoc.name),\n+                        Some(definition_span),\n+                        \"implement the method\",\n+                    );\n+                }\n+            })\n         }\n     }\n }"}, {"sha": "2d21aaa4f7fdb5606f560763c8e00dcac0a8ab93", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/465ed5bd46116e55d801a42a34659d558d00b0d7/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465ed5bd46116e55d801a42a34659d558d00b0d7/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=465ed5bd46116e55d801a42a34659d558d00b0d7", "patch": "@@ -190,10 +190,10 @@ impl<'tcx> PassByRefOrValue {\n                             // Don't lint if an unsafe pointer is created.\n                             // TODO: Limit the check only to unsafe pointers to the argument (or part of the argument)\n                             //       which escape the current function.\n-                            if typeck.node_types().iter().any(|(_, &ty)| ty.is_unsafe_ptr())\n+                            if typeck.node_types().items().any(|(_, &ty)| ty.is_unsafe_ptr())\n                                 || typeck\n                                     .adjustments()\n-                                    .iter()\n+                                    .items()\n                                     .flat_map(|(_, a)| a)\n                                     .any(|a| matches!(a.kind, Adjust::Pointer(PointerCast::UnsafeFnPointer)))\n                             {"}]}