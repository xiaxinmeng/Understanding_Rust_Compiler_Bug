{"sha": "25e5a7198640eaf36949a3ca0babf8f75c8a89a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZTVhNzE5ODY0MGVhZjM2OTQ5YTNjYTBiYWJmOGY3NWM4YTg5YTk=", "commit": {"author": {"name": "Deadbeef", "email": "fee1-dead-beef@protonmail.com", "date": "2021-05-26T08:24:06Z"}, "committer": {"name": "Deadbeef", "email": "fee1-dead-beef@protonmail.com", "date": "2021-05-26T08:28:39Z"}, "message": "Document `From` impls in string.rs", "tree": {"sha": "c31f2d589acbfe59f8573a08b31a6bccb82fbe78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c31f2d589acbfe59f8573a08b31a6bccb82fbe78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e5a7198640eaf36949a3ca0babf8f75c8a89a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEErZiERmmtiO2FTkTyyGmC8u3gwSgFAmCuBrkACgkQyGmC8u3g\nwSj4xA/7Brx3wv3QfhLWn2D7pKNTsUAgUUJbJDOM8VtvgRWnXbnrxs571iZ7lF2R\n5hSVdx1SFQbuewna527uy52kwYU1dhcPRjQ1CIcgQvICEX1m013rRmlFUqgly8Up\nsauRuyrJiar+SsOyfjMEQf2L96WHrnCTjqspNnasuUQ5EFNN+QQ0Bu6q5a/zOQIq\nzLsHW2+BChngvOgZ5NUlu1k6QEIQT4UU/uprYY1xUpnfV24Cyq+qPHo19xRUrFN/\nkfBIfMVZKAFFV12nla60150R9LFwzedrQZjereq8jmBnrJyrXlysNsKGIjsl6OVT\nsXQtsD0ZV2G8gF6W+S5Yh2ktiSuJuinZkAvFyR2AwQALn/4MVdHbYi84fR2o8xmV\nIjhDP2dOhUUqxZdXbmoJYZMmMn9IMY06eW+GoXAGW9wshNL/p+ZPAqoLmzMK9Oe1\nq1NSE3XNDwU/fP0flR3zpxamNJdx55yMqxJzC4f7Yxbn2eIG0h7u8/QIKs19DPNS\nkGp5diCfs89fv/4CO8ojPIfUUVmBGo4FXLOOtTHA3PF4Hq4/Y4+9Y5qYiwFXphGi\njdAtEHOrJb+NvvehKDFQExeAlEYg67Ib1nEAiLzxsW0KHBVR/C2hKHMJcpuWNk1m\nSYokG62K7WJQmMGYE9ulOOroJEKRnvc0PikYq4v3GylxHvf5o6c=\n=oJJb\n-----END PGP SIGNATURE-----", "payload": "tree c31f2d589acbfe59f8573a08b31a6bccb82fbe78\nparent 54bdfa125722c9ee6fadb61818f861b1102fd300\nauthor Deadbeef <fee1-dead-beef@protonmail.com> 1622017446 +0000\ncommitter Deadbeef <fee1-dead-beef@protonmail.com> 1622017719 +0000\n\nDocument `From` impls in string.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e5a7198640eaf36949a3ca0babf8f75c8a89a9", "html_url": "https://github.com/rust-lang/rust/commit/25e5a7198640eaf36949a3ca0babf8f75c8a89a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e5a7198640eaf36949a3ca0babf8f75c8a89a9/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54bdfa125722c9ee6fadb61818f861b1102fd300", "url": "https://api.github.com/repos/rust-lang/rust/commits/54bdfa125722c9ee6fadb61818f861b1102fd300", "html_url": "https://github.com/rust-lang/rust/commit/54bdfa125722c9ee6fadb61818f861b1102fd300"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "1d9e3f59bc2a7248c51b861f350345928de579c6", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/25e5a7198640eaf36949a3ca0babf8f75c8a89a9/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e5a7198640eaf36949a3ca0babf8f75c8a89a9/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=25e5a7198640eaf36949a3ca0babf8f75c8a89a9", "patch": "@@ -2438,6 +2438,9 @@ impl AsRef<[u8]> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<&str> for String {\n+    /// Converts a `&str` into a [`String`].\n+    ///\n+    /// The result is allocated on the heap.\n     #[inline]\n     fn from(s: &str) -> String {\n         s.to_owned()\n@@ -2447,7 +2450,7 @@ impl From<&str> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_mut_str_for_string\", since = \"1.44.0\")]\n impl From<&mut str> for String {\n-    /// Converts a `&mut str` into a `String`.\n+    /// Converts a `&mut str` into a [`String`].\n     ///\n     /// The result is allocated on the heap.\n     #[inline]\n@@ -2459,6 +2462,9 @@ impl From<&mut str> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_ref_string\", since = \"1.35.0\")]\n impl From<&String> for String {\n+    /// Converts a `&String` into a [`String`].\n+    ///\n+    /// This clones `s` and returns the clone.\n     #[inline]\n     fn from(s: &String) -> String {\n         s.clone()\n@@ -2469,7 +2475,7 @@ impl From<&String> for String {\n #[cfg(not(test))]\n #[stable(feature = \"string_from_box\", since = \"1.18.0\")]\n impl From<Box<str>> for String {\n-    /// Converts the given boxed `str` slice to a `String`.\n+    /// Converts the given boxed `str` slice to a [`String`].\n     /// It is notable that the `str` slice is owned.\n     ///\n     /// # Examples\n@@ -2491,7 +2497,7 @@ impl From<Box<str>> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_str\", since = \"1.20.0\")]\n impl From<String> for Box<str> {\n-    /// Converts the given `String` to a boxed `str` slice that is owned.\n+    /// Converts the given [`String`] to a boxed `str` slice that is owned.\n     ///\n     /// # Examples\n     ///\n@@ -2512,6 +2518,22 @@ impl From<String> for Box<str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"string_from_cow_str\", since = \"1.14.0\")]\n impl<'a> From<Cow<'a, str>> for String {\n+    /// Converts a clone-on-write string to an owned\n+    /// instance of [`String`].\n+    ///\n+    /// This extracts the owned string,\n+    /// clones the string if it is not already owned.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::borrow::Cow;\n+    /// // If the string is not owned...\n+    /// let cow: Cow<str> = Cow::Borrowed(\"eggplant\");\n+    /// // It will allocate on the heap and copy the string.\n+    /// let owned: String = String::from(cow);\n+    /// assert_eq!(&owned[..], \"eggplant\");\n+    /// ```\n     fn from(s: Cow<'a, str>) -> String {\n         s.into_owned()\n     }\n@@ -2520,7 +2542,7 @@ impl<'a> From<Cow<'a, str>> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<&'a str> for Cow<'a, str> {\n-    /// Converts a string slice into a Borrowed variant.\n+    /// Converts a string slice into a [`Borrowed`] variant.\n     /// No heap allocation is performed, and the string\n     /// is not copied.\n     ///\n@@ -2530,6 +2552,8 @@ impl<'a> From<&'a str> for Cow<'a, str> {\n     /// # use std::borrow::Cow;\n     /// assert_eq!(Cow::from(\"eggplant\"), Cow::Borrowed(\"eggplant\"));\n     /// ```\n+    ///\n+    /// [`Borrowed`]: crate::borrow::Cow::Borrowed\n     #[inline]\n     fn from(s: &'a str) -> Cow<'a, str> {\n         Cow::Borrowed(s)\n@@ -2539,7 +2563,7 @@ impl<'a> From<&'a str> for Cow<'a, str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<String> for Cow<'a, str> {\n-    /// Converts a String into an Owned variant.\n+    /// Converts a [`String`] into an [`Owned`] variant.\n     /// No heap allocation is performed, and the string\n     /// is not copied.\n     ///\n@@ -2551,6 +2575,8 @@ impl<'a> From<String> for Cow<'a, str> {\n     /// let s2 = \"eggplant\".to_string();\n     /// assert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));\n     /// ```\n+    ///\n+    /// [`Owned`]: crate::borrow::Cow::Owned\n     #[inline]\n     fn from(s: String) -> Cow<'a, str> {\n         Cow::Owned(s)\n@@ -2560,7 +2586,7 @@ impl<'a> From<String> for Cow<'a, str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"cow_from_string_ref\", since = \"1.28.0\")]\n impl<'a> From<&'a String> for Cow<'a, str> {\n-    /// Converts a String reference into a Borrowed variant.\n+    /// Converts a [`String`] reference into a [`Borrowed`] variant.\n     /// No heap allocation is performed, and the string\n     /// is not copied.\n     ///\n@@ -2571,6 +2597,8 @@ impl<'a> From<&'a String> for Cow<'a, str> {\n     /// let s = \"eggplant\".to_string();\n     /// assert_eq!(Cow::from(&s), Cow::Borrowed(\"eggplant\"));\n     /// ```\n+    ///\n+    /// [`Borrowed`]: crate::borrow::Cow::Borrowed\n     #[inline]\n     fn from(s: &'a String) -> Cow<'a, str> {\n         Cow::Borrowed(s.as_str())\n@@ -2603,7 +2631,7 @@ impl<'a> FromIterator<String> for Cow<'a, str> {\n \n #[stable(feature = \"from_string_for_vec_u8\", since = \"1.14.0\")]\n impl From<String> for Vec<u8> {\n-    /// Converts the given `String` to a vector `Vec` that holds values of type `u8`.\n+    /// Converts the given [`String`] to a vector [`Vec`] that holds values of type [`u8`].\n     ///\n     /// # Examples\n     ///\n@@ -2749,6 +2777,14 @@ impl FusedIterator for Drain<'_> {}\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_char_for_string\", since = \"1.46.0\")]\n impl From<char> for String {\n+    /// Allocates an owned [`String`] from a single character.\n+    ///\n+    /// # Example\n+    /// ```rust\n+    /// let c: char = 'a';\n+    /// let s: String = String::from(c);\n+    /// assert_eq!(\"a\", &s[..]);\n+    /// ```\n     #[inline]\n     fn from(c: char) -> Self {\n         c.to_string()"}]}