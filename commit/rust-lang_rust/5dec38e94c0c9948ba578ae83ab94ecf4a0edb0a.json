{"sha": "5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZWMzOGU5NGMwYzk5NDhiYTU3OGFlODNhYjk0ZWNmNGEwZWRiMGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-25T16:31:59Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-25T16:32:16Z"}, "message": "Avoid temporary stack slot in drop codegen\n\ncc #322", "tree": {"sha": "660c15a4a5865e721ee7b4c6cbedac50cd2523f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/660c15a4a5865e721ee7b4c6cbedac50cd2523f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a", "html_url": "https://github.com/rust-lang/rust/commit/5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a262ad5a27d7fb06b3fc306331ab60d00c2afc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc", "html_url": "https://github.com/rust-lang/rust/commit/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "1d1aec3f91de48c3d09f5ef15b3f874c2bc8d049", "filename": "src/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a", "patch": "@@ -700,18 +700,13 @@ pub(crate) fn codegen_drop<'tcx>(\n             _ => {\n                 assert!(!matches!(drop_fn.def, InstanceDef::Virtual(_, _)));\n \n-                let arg_place = CPlace::new_stack_slot(\n-                    fx,\n-                    fx.layout_of(fx.tcx.mk_ref(\n-                        &ty::RegionKind::ReErased,\n-                        TypeAndMut {\n-                            ty,\n-                            mutbl: crate::rustc_hir::Mutability::Mut,\n-                        },\n-                    )),\n-                );\n-                drop_place.write_place_ref(fx, arg_place);\n-                let arg_value = arg_place.to_cvalue(fx);\n+                let arg_value = drop_place.place_ref(fx, fx.layout_of(fx.tcx.mk_ref(\n+                    &ty::RegionKind::ReErased,\n+                    TypeAndMut {\n+                        ty,\n+                        mutbl: crate::rustc_hir::Mutability::Mut,\n+                    },\n+                )));\n                 let arg_value = adjust_arg_for_abi(fx, arg_value);\n \n                 let mut call_args: Vec<Value> = arg_value.into_iter().collect::<Vec<_>>();"}, {"sha": "2179c637e3a95f6a38d247586d961824126e0aa8", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a", "patch": "@@ -405,7 +405,8 @@ fn trans_stmt<'tcx>(\n                 }\n                 Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n                     let place = trans_place(fx, *place);\n-                    place.write_place_ref(fx, lval);\n+                    let ref_ = place.place_ref(fx, lval.layout());\n+                    lval.write_cvalue(fx, ref_);\n                 }\n                 Rvalue::ThreadLocalRef(def_id) => {\n                     let val = crate::constant::codegen_tls_ref(fx, *def_id, lval.layout());"}, {"sha": "a48cc6600b4a6493ddedb5b58552eed4dc9efb63", "filename": "src/value_and_place.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=5dec38e94c0c9948ba578ae83ab94ecf4a0edb0a", "patch": "@@ -681,18 +681,20 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub(crate) fn write_place_ref(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n+    pub(crate) fn place_ref(\n+        self,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        layout: TyAndLayout<'tcx>,\n+    ) -> CValue<'tcx> {\n         if has_ptr_meta(fx.tcx, self.layout().ty) {\n             let (ptr, extra) = self.to_ptr_maybe_unsized();\n-            let ptr = CValue::by_val_pair(\n+            CValue::by_val_pair(\n                 ptr.get_addr(fx),\n                 extra.expect(\"unsized type without metadata\"),\n-                dest.layout(),\n-            );\n-            dest.write_cvalue(fx, ptr);\n+                layout,\n+            )\n         } else {\n-            let ptr = CValue::by_val(self.to_ptr().get_addr(fx), dest.layout());\n-            dest.write_cvalue(fx, ptr);\n+            CValue::by_val(self.to_ptr().get_addr(fx), layout)\n         }\n     }\n "}]}