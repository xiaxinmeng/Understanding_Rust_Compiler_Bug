{"sha": "9edc7deb8d7278735758426fb1b323c0b96cca2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZGM3ZGViOGQ3Mjc4NzM1NzU4NDI2ZmIxYjMyM2MwYjk2Y2NhMmU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-03-27T01:07:49Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-04-16T02:49:25Z"}, "message": "syntax: Change deriving methods to take a `&mut FnMut(P<Item>)`\n\nThis allows #[derive(...)]` to create more than one impl", "tree": {"sha": "7d40fa25b46188e340873e42bffa5f01cad5e136", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d40fa25b46188e340873e42bffa5f01cad5e136"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9edc7deb8d7278735758426fb1b323c0b96cca2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9edc7deb8d7278735758426fb1b323c0b96cca2e", "html_url": "https://github.com/rust-lang/rust/commit/9edc7deb8d7278735758426fb1b323c0b96cca2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9edc7deb8d7278735758426fb1b323c0b96cca2e/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6557f4b2693af38910a9469a5a038f6a116419b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6557f4b2693af38910a9469a5a038f6a116419b2", "html_url": "https://github.com/rust-lang/rust/commit/6557f4b2693af38910a9469a5a038f6a116419b2"}], "stats": {"total": 214, "additions": 98, "deletions": 116}, "files": [{"sha": "eb3debeac99012945f3a4b2b32d8081116af132e", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -15,22 +15,20 @@ use ext::deriving::generic::*;\n use ext::deriving::generic::ty::*;\n use ptr::P;\n \n-pub fn expand_deriving_unsafe_bound<F>(cx: &mut ExtCtxt,\n-                                       span: Span,\n-                                       _: &MetaItem,\n-                                       _: &Item,\n-                                       _: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_unsafe_bound(cx: &mut ExtCtxt,\n+                                    span: Span,\n+                                    _: &MetaItem,\n+                                    _: &Item,\n+                                    _: &mut FnMut(P<Item>))\n {\n     cx.span_err(span, \"this unsafe trait should be implemented explicitly\");\n }\n \n-pub fn expand_deriving_copy<F>(cx: &mut ExtCtxt,\n-                               span: Span,\n-                               mitem: &MetaItem,\n-                               item: &Item,\n-                               push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_copy(cx: &mut ExtCtxt,\n+                            span: Span,\n+                            mitem: &MetaItem,\n+                            item: &Item,\n+                            push: &mut FnMut(P<Item>))\n {\n     let path = Path::new(vec![\n         if cx.use_std { \"std\" } else { \"core\" },\n@@ -48,5 +46,5 @@ pub fn expand_deriving_copy<F>(cx: &mut ExtCtxt,\n         associated_types: Vec::new(),\n     };\n \n-    trait_def.expand(cx, mitem, item, push)\n+    trait_def.expand(cx, mitem, item, push);\n }"}, {"sha": "b6922d1bb32fe69a1f92c67d143b0e2b3507982f", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -17,12 +17,11 @@ use ext::deriving::generic::ty::*;\n use parse::token::InternedString;\n use ptr::P;\n \n-pub fn expand_deriving_clone<F>(cx: &mut ExtCtxt,\n-                                span: Span,\n-                                mitem: &MetaItem,\n-                                item: &Item,\n-                                push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n+                             span: Span,\n+                             mitem: &MetaItem,\n+                             item: &Item,\n+                             push: &mut FnMut(P<Item>))\n {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n     let attrs = vec!(cx.attribute(span, inline));"}, {"sha": "6f4811976567cf4aa25202a221662288ccfe5695", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -17,12 +17,11 @@ use ext::deriving::generic::ty::*;\n use parse::token::InternedString;\n use ptr::P;\n \n-pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n-                             span: Span,\n-                             mitem: &MetaItem,\n-                             item: &Item,\n-                             push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n+                          span: Span,\n+                          mitem: &MetaItem,\n+                          item: &Item,\n+                          push: &mut FnMut(P<Item>))\n {\n     fn cs_total_eq_assert(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n         cs_same_method(|cx, span, exprs| {"}, {"sha": "b2a4ef1dafbc8ee7415e499e562122684b72cfd3", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -18,12 +18,11 @@ use ext::deriving::generic::ty::*;\n use parse::token::InternedString;\n use ptr::P;\n \n-pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n-                                   span: Span,\n-                                   mitem: &MetaItem,\n-                                   item: &Item,\n-                                   push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n+                           span: Span,\n+                           mitem: &MetaItem,\n+                           item: &Item,\n+                           push: &mut FnMut(P<Item>))\n {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n     let attrs = vec!(cx.attribute(span, inline));"}, {"sha": "f02e5ee14126d57c77ff5eff8e83920a07d7d97d", "filename": "src/libsyntax/ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -17,12 +17,11 @@ use ext::deriving::generic::ty::*;\n use parse::token::InternedString;\n use ptr::P;\n \n-pub fn expand_deriving_partial_eq<F>(cx: &mut ExtCtxt,\n-                                     span: Span,\n-                                     mitem: &MetaItem,\n-                                     item: &Item,\n-                                     push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n+                                  span: Span,\n+                                  mitem: &MetaItem,\n+                                  item: &Item,\n+                                  push: &mut FnMut(P<Item>))\n {\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different"}, {"sha": "9da2db25f7ea2d94e1741b88397848e39f221414", "filename": "src/libsyntax/ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -20,12 +20,11 @@ use ext::deriving::generic::ty::*;\n use parse::token::InternedString;\n use ptr::P;\n \n-pub fn expand_deriving_partial_ord<F>(cx: &mut ExtCtxt,\n-                                      span: Span,\n-                                      mitem: &MetaItem,\n-                                      item: &Item,\n-                                      push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n+                                   span: Span,\n+                                   mitem: &MetaItem,\n+                                   item: &Item,\n+                                   push: &mut FnMut(P<Item>))\n {\n     macro_rules! md {\n         ($name:expr, $op:expr, $equal:expr) => { {"}, {"sha": "14f0004101c818cfd31cb420f357633284739271", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -21,33 +21,30 @@ use parse::token::InternedString;\n use parse::token;\n use ptr::P;\n \n-pub fn expand_deriving_rustc_decodable<F>(cx: &mut ExtCtxt,\n-                                          span: Span,\n-                                          mitem: &MetaItem,\n-                                          item: &Item,\n-                                          push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_rustc_decodable(cx: &mut ExtCtxt,\n+                                       span: Span,\n+                                       mitem: &MetaItem,\n+                                       item: &Item,\n+                                       push: &mut FnMut(P<Item>))\n {\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n }\n \n-pub fn expand_deriving_decodable<F>(cx: &mut ExtCtxt,\n-                                    span: Span,\n-                                    mitem: &MetaItem,\n-                                    item: &Item,\n-                                    push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n+                                 span: Span,\n+                                 mitem: &MetaItem,\n+                                 item: &Item,\n+                                 push: &mut FnMut(P<Item>))\n {\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n \n-fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n-                                    span: Span,\n-                                    mitem: &MetaItem,\n-                                    item: &Item,\n-                                    push: F,\n-                                    krate: &'static str) where\n-    F: FnOnce(P<Item>),\n+fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n+                                 span: Span,\n+                                 mitem: &MetaItem,\n+                                 item: &Item,\n+                                 push: &mut FnMut(P<Item>),\n+                                 krate: &'static str)\n {\n     if !cx.use_std {\n         // FIXME(#21880): lift this requirement."}, {"sha": "f04eaa08dead14824df2f09531f65bc1feb61b75", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -17,12 +17,11 @@ use ext::deriving::generic::ty::*;\n use parse::token::InternedString;\n use ptr::P;\n \n-pub fn expand_deriving_default<F>(cx: &mut ExtCtxt,\n-                                  span: Span,\n-                                  mitem: &MetaItem,\n-                                  item: &Item,\n-                                  push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_default(cx: &mut ExtCtxt,\n+                               span: Span,\n+                               mitem: &MetaItem,\n+                               item: &Item,\n+                               push: &mut FnMut(P<Item>))\n {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n     let attrs = vec!(cx.attribute(span, inline));"}, {"sha": "877a90714d9e0bca9c4e5810c52f675abe91892d", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -97,33 +97,30 @@ use ext::deriving::generic::ty::*;\n use parse::token;\n use ptr::P;\n \n-pub fn expand_deriving_rustc_encodable<F>(cx: &mut ExtCtxt,\n-                                          span: Span,\n-                                          mitem: &MetaItem,\n-                                          item: &Item,\n-                                          push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_rustc_encodable(cx: &mut ExtCtxt,\n+                                       span: Span,\n+                                       mitem: &MetaItem,\n+                                       item: &Item,\n+                                       push: &mut FnMut(P<Item>))\n {\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n }\n \n-pub fn expand_deriving_encodable<F>(cx: &mut ExtCtxt,\n-                                    span: Span,\n-                                    mitem: &MetaItem,\n-                                    item: &Item,\n-                                    push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n+                                 span: Span,\n+                                 mitem: &MetaItem,\n+                                 item: &Item,\n+                                 push: &mut FnMut(P<Item>))\n {\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n \n-fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n-                                    span: Span,\n-                                    mitem: &MetaItem,\n-                                    item: &Item,\n-                                    push: F,\n-                                    krate: &'static str) where\n-    F: FnOnce(P<Item>),\n+fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n+                                 span: Span,\n+                                 mitem: &MetaItem,\n+                                 item: &Item,\n+                                 push: &mut FnMut(P<Item>),\n+                                 krate: &'static str)\n {\n     if !cx.use_std {\n         // FIXME(#21880): lift this requirement."}, {"sha": "3a6f790980f0103c9f9e3e7bf830e9a4e6fca50e", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -375,12 +375,11 @@ fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name]) -> Vec<P<ast\n }\n \n impl<'a> TraitDef<'a> {\n-    pub fn expand<F>(&self,\n-                     cx: &mut ExtCtxt,\n-                     mitem: &ast::MetaItem,\n-                     item: &ast::Item,\n-                     push: F) where\n-        F: FnOnce(P<ast::Item>),\n+    pub fn expand(&self,\n+                  cx: &mut ExtCtxt,\n+                  mitem: &ast::MetaItem,\n+                  item: &ast::Item,\n+                  push: &mut FnMut(P<ast::Item>))\n     {\n         let newitem = match item.node {\n             ast::ItemStruct(ref struct_def, ref generics) => {"}, {"sha": "2f6734b1a1433d6bbe9a3a34e4e93cca566fc05e", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -16,12 +16,11 @@ use ext::deriving::generic::*;\n use ext::deriving::generic::ty::*;\n use ptr::P;\n \n-pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n-                               span: Span,\n-                               mitem: &MetaItem,\n-                               item: &Item,\n-                               push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n+                            span: Span,\n+                            mitem: &MetaItem,\n+                            item: &Item,\n+                            push: &mut FnMut(P<Item>))\n {\n \n     let path = Path::new_(pathvec_std!(cx, core::hash::Hash), None,"}, {"sha": "a37253558405f811581b975a2a98b0e714dfc605", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -118,7 +118,7 @@ fn expand_derive(cx: &mut ExtCtxt,\n }\n \n macro_rules! derive_traits {\n-    ($( $name:expr => $func:path, )*) => {\n+    ($( $name:expr => $func:path, )+) => {\n         pub fn register_all(env: &mut SyntaxEnv) {\n             // Define the #[derive_*] extensions.\n             $({\n@@ -132,21 +132,21 @@ macro_rules! derive_traits {\n                               item: &Item,\n                               push: &mut FnMut(P<Item>)) {\n                         warn_if_deprecated(ecx, sp, $name);\n-                        $func(ecx, sp, mitem, item, |i| push(i));\n+                        $func(ecx, sp, mitem, item, push);\n                     }\n                 }\n \n                 env.insert(intern(concat!(\"derive_\", $name)),\n                            Decorator(Box::new(DeriveExtension)));\n-            })*\n+            })+\n \n             env.insert(intern(\"derive\"),\n                        Modifier(Box::new(expand_derive)));\n         }\n \n         fn is_builtin_trait(name: &str) -> bool {\n             match name {\n-                $( $name )|* => true,\n+                $( $name )|+ => true,\n                 _ => false,\n             }\n         }"}, {"sha": "625f759fcedf8e12eed0a4bb5a79ec43bc11247c", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -18,12 +18,11 @@ use ext::deriving::generic::ty::*;\n use parse::token::InternedString;\n use ptr::P;\n \n-pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n-                                         span: Span,\n-                                         mitem: &MetaItem,\n-                                         item: &Item,\n-                                         push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n+                                      span: Span,\n+                                      mitem: &MetaItem,\n+                                      item: &Item,\n+                                      push: &mut FnMut(P<Item>))\n {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n     let attrs = vec!(cx.attribute(span, inline));"}, {"sha": "f3b0e8a768126fa7752180df7dd7b8e28a07b330", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -18,12 +18,11 @@ use ext::deriving::generic::ty::*;\n use parse::token;\n use ptr::P;\n \n-pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n-                               span: Span,\n-                               mitem: &MetaItem,\n-                               item: &Item,\n-                               push: F) where\n-    F: FnOnce(P<Item>),\n+pub fn expand_deriving_show(cx: &mut ExtCtxt,\n+                            span: Span,\n+                            mitem: &MetaItem,\n+                            item: &Item,\n+                            push: &mut FnMut(P<Item>))\n {\n     // &mut ::std::fmt::Formatter\n     let fmtr = Ptr(box Literal(path_std!(cx, core::fmt::Formatter)),"}, {"sha": "17d3f6a46ef57162b10132a2810caec04f7a616b", "filename": "src/test/auxiliary/custom_derive_plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edc7deb8d7278735758426fb1b323c0b96cca2e/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=9edc7deb8d7278735758426fb1b323c0b96cca2e", "patch": "@@ -70,5 +70,5 @@ fn expand(cx: &mut ExtCtxt,\n         ],\n     };\n \n-    trait_def.expand(cx, mitem, item, |i| push(i))\n+    trait_def.expand(cx, mitem, item, push)\n }"}]}