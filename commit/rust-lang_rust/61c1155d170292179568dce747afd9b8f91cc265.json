{"sha": "61c1155d170292179568dce747afd9b8f91cc265", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYzExNTVkMTcwMjkyMTc5NTY4ZGNlNzQ3YWZkOWI4ZjkxY2MyNjU=", "commit": {"author": {"name": "12101111", "email": "w12101111@gmail.com", "date": "2021-05-17T03:22:07Z"}, "committer": {"name": "12101111", "email": "w12101111@gmail.com", "date": "2021-05-31T03:11:38Z"}, "message": "Build crtbengin.o/crtend.o from source code", "tree": {"sha": "1a5f59180882c3b6a271b74941880695bf80aa7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a5f59180882c3b6a271b74941880695bf80aa7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61c1155d170292179568dce747afd9b8f91cc265", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEERq7VLWSlisBf3CZ8l3hfrfOKl9wFAmC0U+wACgkQl3hfrfOK\nl9w2hRAA0oMGNGxUWoZa8Bju5BdLCcoTBPMNO3+78cgOL/gwTg/DCmGewAhLYjtj\njuzrUIA7yNi0slCHbvu0Vj0FpYpfID5wlwdRvIzyw0Hidq8YzWmLaF9dK/qokTZL\n99Nf8Uajc+W0tx7iIRiWD1p4HPRrFRWLqYHSzRXprDW/J9LEnNU10472tqBP25K2\nXPZqV7ELOZRhcyBj/GC+yPh2XjjcfQPvUCwVMGwFuT0yNsWpAAmgrGbCfvBtStXQ\ne/Olbx+dXD64cD/kw8ZShD39HzqQVrRQTHWdcy3r2UlN9ZtWvYzyUn5SlxP2RCYg\n2sttwG0YTYrpkhIP6FaQusXMK0fCmjsndPRihbVvRmGyOXjm1+ORUA8gW6P9t3jb\n939k4cBv/0TSxT7ayMkJS954BMWN8UUsDm7SqQVLO4Et4q8Ttu1JHHhRl4nPLkNe\nCIUIlFV5VY50Ty8NGYZ/wTixhtIZWUU/XzIzFcwxM9zSV5X4gbuLYOyDScMsOGt2\nAUC9mBJYvi5YpFiThM22aiuJtwo30WDI2kSjBBP+x1DHkJNTQUYdELUpsQqt5IcX\n3dKEtfIqScGdU+EJitzW+61NT1xf9te0tUCc6te1HlMN/5PruOOVSGeKLRY68Bw9\nQTPKIZTiMBcqeoE6Bf1g6rGXhpCuDmH9IHsS7vUh8iLKWBtVDT4=\n=M67r\n-----END PGP SIGNATURE-----", "payload": "tree 1a5f59180882c3b6a271b74941880695bf80aa7c\nparent 9f75dbfa69ba8508fa7765305f75cd96dff06078\nauthor 12101111 <w12101111@gmail.com> 1621221727 +0800\ncommitter 12101111 <w12101111@gmail.com> 1622430698 +0800\n\nBuild crtbengin.o/crtend.o from source code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61c1155d170292179568dce747afd9b8f91cc265", "html_url": "https://github.com/rust-lang/rust/commit/61c1155d170292179568dce747afd9b8f91cc265", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61c1155d170292179568dce747afd9b8f91cc265/comments", "author": {"login": "12101111", "id": 8438475, "node_id": "MDQ6VXNlcjg0Mzg0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/8438475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/12101111", "html_url": "https://github.com/12101111", "followers_url": "https://api.github.com/users/12101111/followers", "following_url": "https://api.github.com/users/12101111/following{/other_user}", "gists_url": "https://api.github.com/users/12101111/gists{/gist_id}", "starred_url": "https://api.github.com/users/12101111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/12101111/subscriptions", "organizations_url": "https://api.github.com/users/12101111/orgs", "repos_url": "https://api.github.com/users/12101111/repos", "events_url": "https://api.github.com/users/12101111/events{/privacy}", "received_events_url": "https://api.github.com/users/12101111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "12101111", "id": 8438475, "node_id": "MDQ6VXNlcjg0Mzg0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/8438475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/12101111", "html_url": "https://github.com/12101111", "followers_url": "https://api.github.com/users/12101111/followers", "following_url": "https://api.github.com/users/12101111/following{/other_user}", "gists_url": "https://api.github.com/users/12101111/gists{/gist_id}", "starred_url": "https://api.github.com/users/12101111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/12101111/subscriptions", "organizations_url": "https://api.github.com/users/12101111/orgs", "repos_url": "https://api.github.com/users/12101111/repos", "events_url": "https://api.github.com/users/12101111/events{/privacy}", "received_events_url": "https://api.github.com/users/12101111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f75dbfa69ba8508fa7765305f75cd96dff06078", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f75dbfa69ba8508fa7765305f75cd96dff06078", "html_url": "https://github.com/rust-lang/rust/commit/9f75dbfa69ba8508fa7765305f75cd96dff06078"}], "stats": {"total": 110, "additions": 107, "deletions": 3}, "files": [{"sha": "f3049a747579a91fd4f65bf5bc435518d1c2cabb", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61c1155d170292179568dce747afd9b8f91cc265/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c1155d170292179568dce747afd9b8f91cc265/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=61c1155d170292179568dce747afd9b8f91cc265", "patch": "@@ -369,7 +369,8 @@ impl<'a> Builder<'a> {\n                 tool::Rustfmt,\n                 tool::Miri,\n                 tool::CargoMiri,\n-                native::Lld\n+                native::Lld,\n+                native::CrtBeginEnd\n             ),\n             Kind::Check | Kind::Clippy { .. } | Kind::Fix | Kind::Format => describe!(\n                 check::Std,"}, {"sha": "e5258d08956f6bbbce497dd0baf68df713bd88f1", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61c1155d170292179568dce747afd9b8f91cc265/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c1155d170292179568dce747afd9b8f91cc265/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=61c1155d170292179568dce747afd9b8f91cc265", "patch": "@@ -199,8 +199,9 @@ fn copy_self_contained_objects(\n                 DependencyType::TargetSelfContained,\n             );\n         }\n+        let crt_path = builder.ensure(native::CrtBeginEnd { target });\n         for &obj in &[\"crtbegin.o\", \"crtbeginS.o\", \"crtend.o\", \"crtendS.o\"] {\n-            let src = compiler_file(builder, builder.cc(target), target, obj);\n+            let src = crt_path.join(obj);\n             let target = libdir_self_contained.join(obj);\n             builder.copy(&src, &target);\n             target_deps.push((target, DependencyType::TargetSelfContained));"}, {"sha": "156e8dd53d50db558e89bee038a0b30a1e7ca88c", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/61c1155d170292179568dce747afd9b8f91cc265/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c1155d170292179568dce747afd9b8f91cc265/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=61c1155d170292179568dce747afd9b8f91cc265", "patch": "@@ -858,3 +858,69 @@ impl HashStamp {\n         fs::write(&self.path, self.hash.as_deref().unwrap_or(b\"\"))\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct CrtBeginEnd {\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for CrtBeginEnd {\n+    type Output = PathBuf;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/llvm-project/compiler-rt/lib/crt\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(CrtBeginEnd { target: run.target });\n+    }\n+\n+    /// Build crtbegin.o/crtend.o for musl target.\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let out_dir = builder.native_dir(self.target).join(\"crt\");\n+\n+        if builder.config.dry_run {\n+            return out_dir;\n+        }\n+\n+        let crtbegin_src = builder.src.join(\"src/llvm-project/compiler-rt/lib/crt/crtbegin.c\");\n+        let crtend_src = builder.src.join(\"src/llvm-project/compiler-rt/lib/crt/crtend.c\");\n+        if up_to_date(&crtbegin_src, &out_dir.join(\"crtbegin.o\"))\n+            && up_to_date(&crtend_src, &out_dir.join(\"crtendS.o\"))\n+        {\n+            return out_dir;\n+        }\n+\n+        builder.info(\"Building crtbegin.o and crtend.o\");\n+        t!(fs::create_dir_all(&out_dir));\n+\n+        let mut cfg = cc::Build::new();\n+\n+        if let Some(ar) = builder.ar(self.target) {\n+            cfg.archiver(ar);\n+        }\n+        cfg.compiler(builder.cc(self.target));\n+        cfg.cargo_metadata(false)\n+            .out_dir(&out_dir)\n+            .target(&self.target.triple)\n+            .host(&builder.config.build.triple)\n+            .warnings(false)\n+            .debug(false)\n+            .opt_level(3)\n+            .file(crtbegin_src)\n+            .file(crtend_src);\n+\n+        // Those flags are defined in src/llvm-project/compiler-rt/lib/crt/CMakeLists.txt\n+        // Currently only consumer of those objects is musl, which use .init_array/.fini_array\n+        // instead of .ctors/.dtors\n+        cfg.flag(\"-std=c11\")\n+            .define(\"CRT_HAS_INITFINI_ARRAY\", None)\n+            .define(\"EH_USE_FRAME_REGISTRY\", None);\n+\n+        cfg.compile(\"crt\");\n+\n+        t!(fs::copy(out_dir.join(\"crtbegin.o\"), out_dir.join(\"crtbeginS.o\")));\n+        t!(fs::copy(out_dir.join(\"crtend.o\"), out_dir.join(\"crtendS.o\")));\n+        out_dir\n+    }\n+}"}, {"sha": "cd0f01faa1bfa1870a5545bdff58245f8468b638", "filename": "src/ci/docker/host-x86_64/dist-various-1/Dockerfile", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61c1155d170292179568dce747afd9b8f91cc265/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/61c1155d170292179568dce747afd9b8f91cc265/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile?ref=61c1155d170292179568dce747afd9b8f91cc265", "patch": "@@ -144,7 +144,11 @@ ENV TARGETS=$TARGETS,armv7a-none-eabi\n # riscv targets currently do not need a C compiler, as compiler_builtins\n # doesn't currently have it enabled, and the riscv gcc compiler is not\n # installed.\n-ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n+ENV CFLAGS_armv5te_unknown_linux_musleabi=\"-march=armv5te -marm -mfloat-abi=soft\" \\\n+    CFLAGS_arm_unknown_linux_musleabi=\"-march=armv6 -marm\" \\\n+    CFLAGS_arm_unknown_linux_musleabihf=\"-march=armv6 -marm -mfpu=vfp\" \\\n+    CFLAGS_armv7_unknown_linux_musleabihf=\"-march=armv7-a\" \\\n+    CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n     CC_mips_unknown_linux_musl=mips-openwrt-linux-gcc \\\n     CC_mips64el_unknown_linux_muslabi64=mips64el-linux-gnuabi64-gcc \\\n     CC_mips64_unknown_linux_muslabi64=mips64-linux-gnuabi64-gcc \\"}, {"sha": "f4495e6b671d7302e6e2dc2a1f73d7a954242927", "filename": "src/test/run-make-fulldeps/issue-47551/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61c1155d170292179568dce747afd9b8f91cc265/src%2Ftest%2Frun-make-fulldeps%2Fissue-47551%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/61c1155d170292179568dce747afd9b8f91cc265/src%2Ftest%2Frun-make-fulldeps%2Fissue-47551%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-47551%2FMakefile?ref=61c1155d170292179568dce747afd9b8f91cc265", "patch": "@@ -0,0 +1,9 @@\n+# only-linux\n+# ignore-32bit\n+\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) eh_frame-terminator.rs\n+\t$(call RUN,eh_frame-terminator) | $(CGREP) '1122334455667788'\n+\tobjdump --dwarf=frames $(TMPDIR)/eh_frame-terminator | $(CGREP) 'ZERO terminator'"}, {"sha": "2f740dc4fac38ae74ad6010782f00bac4fea77c7", "filename": "src/test/run-make-fulldeps/issue-47551/eh_frame-terminator.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/61c1155d170292179568dce747afd9b8f91cc265/src%2Ftest%2Frun-make-fulldeps%2Fissue-47551%2Feh_frame-terminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c1155d170292179568dce747afd9b8f91cc265/src%2Ftest%2Frun-make-fulldeps%2Fissue-47551%2Feh_frame-terminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-47551%2Feh_frame-terminator.rs?ref=61c1155d170292179568dce747afd9b8f91cc265", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+#![feature(backtrace)]\n+#[derive(Clone, Copy)]\n+struct Foo {\n+    array: [u64; 10240],\n+}\n+\n+impl Foo {\n+    const fn new() -> Self {\n+        Self {\n+            array: [0x1122_3344_5566_7788; 10240]\n+        }\n+    }\n+}\n+\n+static BAR: [Foo; 10240] = [Foo::new(); 10240];\n+\n+fn main() {\n+    let bt = std::backtrace::Backtrace::force_capture();\n+    println!(\"Hello, world! {:?}\", bt);\n+    println!(\"{:x}\", BAR[0].array[0]);\n+}"}]}