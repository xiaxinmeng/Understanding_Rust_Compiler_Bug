{"sha": "00303284b5cc3a82e32dc3ecbbcfeb2f99de6818", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMzAzMjg0YjVjYzNhODJlMzJkYzNlY2JiY2ZlYjJmOTlkZTY4MTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T15:41:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T15:41:04Z"}, "message": "internal: refactor macro error", "tree": {"sha": "685e3f21289eaeb25df597413528f25c6239813f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/685e3f21289eaeb25df597413528f25c6239813f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818", "html_url": "https://github.com/rust-lang/rust/commit/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e4aaee7bbc1d56698e70158aa35f578422623d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4aaee7bbc1d56698e70158aa35f578422623d9", "html_url": "https://github.com/rust-lang/rust/commit/1e4aaee7bbc1d56698e70158aa35f578422623d9"}], "stats": {"total": 376, "additions": 178, "deletions": 198}, "files": [{"sha": "28580eeb453eb80d5c1f91b8ac6f2c18c93442f4", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=00303284b5cc3a82e32dc3ecbbcfeb2f99de6818", "patch": "@@ -37,6 +37,7 @@ diagnostics![\n     UnresolvedImport,\n     UnresolvedMacroCall,\n     UnresolvedProcMacro,\n+    MacroError,\n     MissingFields,\n     InactiveCode,\n ];\n@@ -79,35 +80,12 @@ pub struct UnresolvedProcMacro {\n     pub macro_name: Option<String>,\n }\n \n-// Diagnostic: macro-error\n-//\n-// This diagnostic is shown for macro expansion errors.\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MacroError {\n-    pub file: HirFileId,\n-    pub node: SyntaxNodePtr,\n+    pub node: InFile<SyntaxNodePtr>,\n     pub message: String,\n }\n \n-impl Diagnostic for MacroError {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"macro-error\")\n-    }\n-    fn message(&self) -> String {\n-        self.message.clone()\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile::new(self.file, self.node.clone())\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-    fn is_experimental(&self) -> bool {\n-        // Newly added and not very well-tested, might contain false positives.\n-        true\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct UnimplementedBuiltinMacro {\n     pub file: HirFileId,"}, {"sha": "d891d0ec1cc850296ec81e450ac28e9640804e9b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=00303284b5cc3a82e32dc3ecbbcfeb2f99de6818", "patch": "@@ -587,19 +587,19 @@ impl Module {\n                 }\n \n                 DefDiagnosticKind::MacroError { ast, message } => {\n-                    let (file, ast) = match ast {\n+                    let node = match ast {\n                         MacroCallKind::FnLike { ast_id, .. } => {\n                             let node = ast_id.to_node(db.upcast());\n-                            (ast_id.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n+                            ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node)))\n                         }\n                         MacroCallKind::Derive { ast_id, .. }\n                         | MacroCallKind::Attr { ast_id, .. } => {\n                             // FIXME: point to the attribute instead, this creates very large diagnostics\n                             let node = ast_id.to_node(db.upcast());\n-                            (ast_id.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n+                            ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node)))\n                         }\n                     };\n-                    sink.push(MacroError { file, node: ast, message: message.clone() });\n+                    acc.push(MacroError { node, message: message.clone() }.into());\n                 }\n \n                 DefDiagnosticKind::UnimplementedBuiltinMacro { ast } => {\n@@ -1046,11 +1046,13 @@ impl Function {\n                     InactiveCode { node: node.clone(), cfg: cfg.clone(), opts: opts.clone() }\n                         .into(),\n                 ),\n-                BodyDiagnostic::MacroError { node, message } => sink.push(MacroError {\n-                    file: node.file_id,\n-                    node: node.value.clone().into(),\n-                    message: message.to_string(),\n-                }),\n+                BodyDiagnostic::MacroError { node, message } => acc.push(\n+                    MacroError {\n+                        node: node.clone().map(|it| it.into()),\n+                        message: message.to_string(),\n+                    }\n+                    .into(),\n+                ),\n                 BodyDiagnostic::UnresolvedProcMacro { node } => acc.push(\n                     UnresolvedProcMacro {\n                         node: node.clone().map(|it| it.into()),"}, {"sha": "0dccabcfd27d9f97b04cdfa205e26bfe201e02d1", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=00303284b5cc3a82e32dc3ecbbcfeb2f99de6818", "patch": "@@ -88,67 +88,6 @@ mod m {\n     );\n }\n \n-#[test]\n-fn macro_diag_builtin() {\n-    check_diagnostics(\n-        r#\"\n-#[rustc_builtin_macro]\n-macro_rules! env {}\n-\n-#[rustc_builtin_macro]\n-macro_rules! include {}\n-\n-#[rustc_builtin_macro]\n-macro_rules! compile_error {}\n-\n-#[rustc_builtin_macro]\n-macro_rules! format_args {\n-    () => {}\n-}\n-\n-fn f() {\n-    // Test a handful of built-in (eager) macros:\n-\n-    include!(invalid);\n-  //^^^^^^^^^^^^^^^^^ could not convert tokens\n-    include!(\"does not exist\");\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^ failed to load file `does not exist`\n-\n-    env!(invalid);\n-  //^^^^^^^^^^^^^ could not convert tokens\n-\n-    env!(\"OUT_DIR\");\n-  //^^^^^^^^^^^^^^^ `OUT_DIR` not set, enable \"run build scripts\" to fix\n-\n-    compile_error!(\"compile_error works\");\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ compile_error works\n-\n-    // Lazy:\n-\n-    format_args!();\n-  //^^^^^^^^^^^^^^ no rule matches input tokens\n-}\n-        \"#,\n-    );\n-}\n-\n-#[test]\n-fn macro_rules_diag() {\n-    check_diagnostics(\n-        r#\"\n-macro_rules! m {\n-    () => {};\n-}\n-fn f() {\n-    m!();\n-\n-    m!(hi);\n-  //^^^^^^ leftover tokens\n-}\n-      \"#,\n-    );\n-}\n-\n #[test]\n fn unresolved_macro_diag() {\n     check_diagnostics(\n@@ -161,30 +100,3 @@ fn f() {\n     );\n }\n \n-#[test]\n-fn dollar_crate_in_builtin_macro() {\n-    check_diagnostics(\n-        r#\"\n-#[macro_export]\n-#[rustc_builtin_macro]\n-macro_rules! format_args {}\n-\n-#[macro_export]\n-macro_rules! arg {\n-    () => {}\n-}\n-\n-#[macro_export]\n-macro_rules! outer {\n-    () => {\n-        $crate::format_args!( \"\", $crate::arg!(1) )\n-    };\n-}\n-\n-fn f() {\n-    outer!();\n-  //^^^^^^^^ leftover tokens\n-}\n-        \"#,\n-    )\n-}"}, {"sha": "cf43f2a9652a56dd52b2cb1ce1adfc592cc8df3e", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=00303284b5cc3a82e32dc3ecbbcfeb2f99de6818", "patch": "@@ -2,7 +2,6 @@ mod globs;\n mod incremental;\n mod macros;\n mod mod_resolution;\n-mod diagnostics;\n mod primitives;\n \n use std::sync::Arc;"}, {"sha": "f1ee03d4ddd1b93491df7ae44ccd7507a6ad720c", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=1e4aaee7bbc1d56698e70158aa35f578422623d9", "patch": "@@ -1,76 +0,0 @@\n-use base_db::fixture::WithFixture;\n-\n-use crate::test_db::TestDB;\n-\n-fn check_diagnostics(ra_fixture: &str) {\n-    let db: TestDB = TestDB::with_files(ra_fixture);\n-    db.check_diagnostics();\n-}\n-\n-fn check_no_diagnostics(ra_fixture: &str) {\n-    let db: TestDB = TestDB::with_files(ra_fixture);\n-    db.check_no_diagnostics();\n-}\n-\n-#[test]\n-fn builtin_macro_fails_expansion() {\n-    check_diagnostics(\n-        r#\"\n-        //- /lib.rs\n-          #[rustc_builtin_macro]\n-          macro_rules! include { () => {} }\n-\n-          include!(\"doesntexist\");\n-        //^^^^^^^^^^^^^^^^^^^^^^^^ failed to load file `doesntexist`\n-        \"#,\n-    );\n-}\n-\n-#[test]\n-fn include_macro_should_allow_empty_content() {\n-    check_no_diagnostics(\n-        r#\"\n-        //- /lib.rs\n-          #[rustc_builtin_macro]\n-          macro_rules! include { () => {} }\n-\n-          include!(\"bar.rs\");\n-        //- /bar.rs\n-          // empty\n-        \"#,\n-    );\n-}\n-\n-#[test]\n-fn good_out_dir_diagnostic() {\n-    check_diagnostics(\n-        r#\"\n-        #[rustc_builtin_macro]\n-        macro_rules! include { () => {} }\n-        #[rustc_builtin_macro]\n-        macro_rules! env { () => {} }\n-        #[rustc_builtin_macro]\n-        macro_rules! concat { () => {} }\n-\n-        include!(concat!(env!(\"OUT_DIR\"), \"/out.rs\"));\n-      //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `OUT_DIR` not set, enable \"run build scripts\" to fix\n-        \"#,\n-    );\n-}\n-\n-#[test]\n-fn register_attr_and_tool() {\n-    cov_mark::check!(register_attr);\n-    cov_mark::check!(register_tool);\n-    check_no_diagnostics(\n-        r#\"\n-#![register_tool(tool)]\n-#![register_attr(attr)]\n-\n-#[tool::path]\n-#[attr]\n-struct S;\n-        \"#,\n-    );\n-    // NB: we don't currently emit diagnostics here\n-}"}, {"sha": "c257ea8e717a393508b1f9d9d5233beda334bb0c", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=00303284b5cc3a82e32dc3ecbbcfeb2f99de6818", "patch": "@@ -9,6 +9,7 @@ mod unresolved_extern_crate;\n mod unresolved_import;\n mod unresolved_macro_call;\n mod unresolved_proc_macro;\n+mod macro_error;\n mod inactive_code;\n mod missing_fields;\n \n@@ -229,6 +230,7 @@ pub(crate) fn diagnostics(\n             AnyDiagnostic::UnresolvedMacroCall(d) => unresolved_macro_call::unresolved_macro_call(&ctx, &d),\n             AnyDiagnostic::UnresolvedProcMacro(d) => unresolved_proc_macro::unresolved_proc_macro(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n+            AnyDiagnostic::MacroError(d) => macro_error::macro_error(&ctx, &d),\n \n             AnyDiagnostic::InactiveCode(d) => match inactive_code::inactive_code(&ctx, &d) {\n                 Some(it) => it,"}, {"sha": "8cc8cfb48e9139862e4aca112c0abfbcd1415ba8", "filename": "crates/ide/src/diagnostics/macro_error.rs", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00303284b5cc3a82e32dc3ecbbcfeb2f99de6818/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs?ref=00303284b5cc3a82e32dc3ecbbcfeb2f99de6818", "patch": "@@ -0,0 +1,163 @@\n+use crate::diagnostics::{Diagnostic, DiagnosticsContext};\n+\n+// Diagnostic: macro-error\n+//\n+// This diagnostic is shown for macro expansion errors.\n+pub(super) fn macro_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroError) -> Diagnostic {\n+    Diagnostic::new(\n+        \"macro-error\",\n+        d.message.clone(),\n+        ctx.sema.diagnostics_display_range(d.node.clone()).range,\n+    )\n+    .experimental()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::diagnostics::tests::{check_diagnostics, check_no_diagnostics};\n+\n+    #[test]\n+    fn builtin_macro_fails_expansion() {\n+        check_diagnostics(\n+            r#\"\n+#[rustc_builtin_macro]\n+macro_rules! include { () => {} }\n+\n+  include!(\"doesntexist\");\n+//^^^^^^^^^^^^^^^^^^^^^^^^ failed to load file `doesntexist`\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn include_macro_should_allow_empty_content() {\n+        check_diagnostics(\n+            r#\"\n+//- /lib.rs\n+#[rustc_builtin_macro]\n+macro_rules! include { () => {} }\n+\n+include!(\"foo/bar.rs\");\n+//- /foo/bar.rs\n+// empty\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn good_out_dir_diagnostic() {\n+        check_diagnostics(\n+            r#\"\n+#[rustc_builtin_macro]\n+macro_rules! include { () => {} }\n+#[rustc_builtin_macro]\n+macro_rules! env { () => {} }\n+#[rustc_builtin_macro]\n+macro_rules! concat { () => {} }\n+\n+  include!(concat!(env!(\"OUT_DIR\"), \"/out.rs\"));\n+//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `OUT_DIR` not set, enable \"run build scripts\" to fix\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn register_attr_and_tool() {\n+        cov_mark::check!(register_attr);\n+        cov_mark::check!(register_tool);\n+        check_no_diagnostics(\n+            r#\"\n+#![register_tool(tool)]\n+#![register_attr(attr)]\n+\n+#[tool::path]\n+#[attr]\n+struct S;\n+\"#,\n+        );\n+        // NB: we don't currently emit diagnostics here\n+    }\n+\n+    #[test]\n+    fn macro_diag_builtin() {\n+        check_diagnostics(\n+            r#\"\n+#[rustc_builtin_macro]\n+macro_rules! env {}\n+\n+#[rustc_builtin_macro]\n+macro_rules! include {}\n+\n+#[rustc_builtin_macro]\n+macro_rules! compile_error {}\n+\n+#[rustc_builtin_macro]\n+macro_rules! format_args { () => {} }\n+\n+fn main() {\n+    // Test a handful of built-in (eager) macros:\n+\n+    include!(invalid);\n+  //^^^^^^^^^^^^^^^^^ could not convert tokens\n+    include!(\"does not exist\");\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^ failed to load file `does not exist`\n+\n+    env!(invalid);\n+  //^^^^^^^^^^^^^ could not convert tokens\n+\n+    env!(\"OUT_DIR\");\n+  //^^^^^^^^^^^^^^^ `OUT_DIR` not set, enable \"run build scripts\" to fix\n+\n+    compile_error!(\"compile_error works\");\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ compile_error works\n+\n+    // Lazy:\n+\n+    format_args!();\n+  //^^^^^^^^^^^^^^ no rule matches input tokens\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn macro_rules_diag() {\n+        check_diagnostics(\n+            r#\"\n+macro_rules! m {\n+    () => {};\n+}\n+fn f() {\n+    m!();\n+\n+    m!(hi);\n+  //^^^^^^ leftover tokens\n+}\n+      \"#,\n+        );\n+    }\n+    #[test]\n+    fn dollar_crate_in_builtin_macro() {\n+        check_diagnostics(\n+            r#\"\n+#[macro_export]\n+#[rustc_builtin_macro]\n+macro_rules! format_args {}\n+\n+#[macro_export]\n+macro_rules! arg { () => {} }\n+\n+#[macro_export]\n+macro_rules! outer {\n+    () => {\n+        $crate::format_args!( \"\", $crate::arg!(1) )\n+    };\n+}\n+\n+fn f() {\n+    outer!();\n+} //^^^^^^^^ leftover tokens\n+\"#,\n+        )\n+    }\n+}"}]}