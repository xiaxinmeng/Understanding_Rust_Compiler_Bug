{"sha": "aca64b8df77670c6661b7174d7edc16133442162", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYTY0YjhkZjc3NjcwYzY2NjFiNzE3NGQ3ZWRjMTYxMzM0NDIxNjI=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-03-12T16:25:18Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-03-12T16:25:18Z"}, "message": "Check for mutation", "tree": {"sha": "2a3e49ac8d0c3e8cf5f181d7b23018b5c5cf6d27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a3e49ac8d0c3e8cf5f181d7b23018b5c5cf6d27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aca64b8df77670c6661b7174d7edc16133442162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aca64b8df77670c6661b7174d7edc16133442162", "html_url": "https://github.com/rust-lang/rust/commit/aca64b8df77670c6661b7174d7edc16133442162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aca64b8df77670c6661b7174d7edc16133442162/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3773785288e71fde264b9264a142a662aace5ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3773785288e71fde264b9264a142a662aace5ee", "html_url": "https://github.com/rust-lang/rust/commit/a3773785288e71fde264b9264a142a662aace5ee"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "624fe227ca3d4d8f89196238973257c113988eb1", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aca64b8df77670c6661b7174d7edc16133442162/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca64b8df77670c6661b7174d7edc16133442162/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=aca64b8df77670c6661b7174d7edc16133442162", "patch": "@@ -195,8 +195,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n             let is_temp = mir_read_only.local_kind(ret_local) == mir::LocalKind::Temp;\n \n             // 1. `local` can be moved out if it is not used later.\n-            // 2. If `ret_local` is a temporary and is not consumed, we can remove this `clone` call anyway.\n-            let (used, consumed) = traversal::ReversePostorder::new(&mir, bb).skip(1).fold(\n+            // 2. If `ret_local` is a temporary and is neither consumed nor mutated, we can remove this `clone`\n+            // call anyway.\n+            let (used, consumed_or_mutated) = traversal::ReversePostorder::new(&mir, bb).skip(1).fold(\n                 (false, !is_temp),\n                 |(used, consumed), (tbb, tdata)| {\n                     // Short-circuit\n@@ -209,14 +210,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n \n                     let mut vis = LocalUseVisitor {\n                         used: (local, false),\n-                        consumed: (ret_local, false),\n+                        consumed_or_mutated: (ret_local, false),\n                     };\n                     vis.visit_basic_block_data(tbb, tdata);\n-                    (used || vis.used.1, consumed || vis.consumed.1)\n+                    (used || vis.used.1, consumed || vis.consumed_or_mutated.1)\n                 },\n             );\n \n-            if !used || !consumed {\n+            if !used || !consumed_or_mutated {\n                 let span = terminator.source_info.span;\n                 let scope = terminator.source_info.scope;\n                 let node = mir.source_scopes[scope]\n@@ -253,7 +254,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                             if used {\n                                 db.span_note(\n                                     span,\n-                                    \"cloned value is not consumed\",\n+                                    \"cloned value is neither consumed nor mutated\",\n                                 );\n                             } else {\n                                 db.span_note(\n@@ -355,7 +356,7 @@ fn base_local_and_movability<'tcx>(\n \n struct LocalUseVisitor {\n     used: (mir::Local, bool),\n-    consumed: (mir::Local, bool),\n+    consumed_or_mutated: (mir::Local, bool),\n }\n \n impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n@@ -381,8 +382,14 @@ impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n             self.used.1 = true;\n         }\n \n-        if *local == self.consumed.0 && matches!(ctx, PlaceContext::NonMutatingUse(NonMutatingUseContext::Move)) {\n-            self.consumed.1 = true;\n+        if *local == self.consumed_or_mutated.0 {\n+            match ctx {\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::Move)\n+                | PlaceContext::MutatingUse(MutatingUseContext::Borrow) => {\n+                    self.consumed_or_mutated.1 = true;\n+                },\n+                _ => {},\n+            }\n         }\n     }\n }"}, {"sha": "17734b04aba49599697dff36bcabd18eefdd40cb", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aca64b8df77670c6661b7174d7edc16133442162/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/aca64b8df77670c6661b7174d7edc16133442162/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=aca64b8df77670c6661b7174d7edc16133442162", "patch": "@@ -145,4 +145,9 @@ fn not_consumed() {\n     // redundant. (It also does not consume the PathBuf)\n \n     println!(\"x: {:?}, y: {:?}\", x, y);\n+\n+    let mut s = String::new();\n+    s.clone().push_str(\"foo\"); // OK, removing this `clone()` will change the behavior.\n+    s.push_str(\"bar\");\n+    assert_eq!(s, \"bar\");\n }"}, {"sha": "aee6855eea94bd3bf633e51d4bc55d9581d7f9a1", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aca64b8df77670c6661b7174d7edc16133442162/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca64b8df77670c6661b7174d7edc16133442162/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=aca64b8df77670c6661b7174d7edc16133442162", "patch": "@@ -145,4 +145,9 @@ fn not_consumed() {\n     // redundant. (It also does not consume the PathBuf)\n \n     println!(\"x: {:?}, y: {:?}\", x, y);\n+\n+    let mut s = String::new();\n+    s.clone().push_str(\"foo\"); // OK, removing this `clone()` will change the behavior.\n+    s.push_str(\"bar\");\n+    assert_eq!(s, \"bar\");\n }"}, {"sha": "9c27812b9cdceea4e881fd6ebf81f2192dfe11b0", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca64b8df77670c6661b7174d7edc16133442162/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aca64b8df77670c6661b7174d7edc16133442162/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=aca64b8df77670c6661b7174d7edc16133442162", "patch": "@@ -161,7 +161,7 @@ error: redundant clone\n LL |     let y = x.clone().join(\"matthias\");\n    |              ^^^^^^^^ help: remove this\n    |\n-note: cloned value is not consumed\n+note: cloned value is neither consumed nor mutated\n   --> $DIR/redundant_clone.rs:143:13\n    |\n LL |     let y = x.clone().join(\"matthias\");"}]}