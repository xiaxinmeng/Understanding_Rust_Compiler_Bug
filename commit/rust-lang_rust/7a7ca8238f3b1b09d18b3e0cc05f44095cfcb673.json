{"sha": "7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhN2NhODIzOGYzYjFiMDlkMThiM2UwY2MwNWY0NDA5NWNmY2I2NzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T11:16:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-17T11:16:16Z"}, "message": "Rollup merge of #69922 - RalfJung:less-intrinsic, r=oli-obk\n\nimplement zeroed and uninitialized with MaybeUninit\n\nThis is the second attempt of doing such a change (first PR: https://github.com/rust-lang/rust/pull/62150). The last change [got reverted](https://github.com/rust-lang/rust/pull/63343) because it [caused](https://github.com/rust-lang/rust/issues/62825) some [issues](https://github.com/rust-lang/rust/issues/52898#issuecomment-512182438) in [code that incorrectly used these functions](https://github.com/erlepereira/x11-rs/issues/99).\n\nSince then, the [problematic code has been fixed](https://github.com/erlepereira/x11-rs/pull/101), and rustc [gained a lint](https://github.com/rust-lang/rust/pull/63346) that is able to detect many misuses of these functions statically and a [dynamic check that panics](https://github.com/rust-lang/rust/pull/66059) instead of causing UB for some incorrect uses.\n\nFixes https://github.com/rust-lang/rust/issues/62825", "tree": {"sha": "766e94663afcb8faeee7912ec9980a973e322fda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/766e94663afcb8faeee7912ec9980a973e322fda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJecLGBCRBK7hj4Ov3rIwAAdHIIAKBC6vlVlfwngqdrMiLU4KWc\nj5z7tbPuew3h49sMuwBdLHF0JbNgAQjMU9e7tEV7BDGwpwrw7UivsRwCXwxp+3iG\nfxI6LIPZhQMr8e6mp9KPV9TqVVlDHwlEsmHzamo0hy+UCf3/QwLIiTBkSl+hTmVB\naDOA7FrIHQMC6Jxn6T4Sifh55+mMTQUE4u9QAK0muvhEFTv3tQPOiaw5MbQ8+G8m\neNIeEBe0P7N1gRGT/e7mDRoHV/W3rZeSqhz+mj4YllawFxpzCgL4hsCSkAYU4KFK\naYuM3dAEjRhGnWnF8jpowq1jqJTxjolWf3KevPLh0lmnHvnByeaFGjg/eZ8GseI=\n=gZ0u\n-----END PGP SIGNATURE-----\n", "payload": "tree 766e94663afcb8faeee7912ec9980a973e322fda\nparent c4a900f57c13a6624a048708af15cc2e7fddae28\nparent a2160e6a4a91490117b9f0469c49b6f86d0d20d2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584443776 +0100\ncommitter GitHub <noreply@github.com> 1584443776 +0100\n\nRollup merge of #69922 - RalfJung:less-intrinsic, r=oli-obk\n\nimplement zeroed and uninitialized with MaybeUninit\n\nThis is the second attempt of doing such a change (first PR: https://github.com/rust-lang/rust/pull/62150). The last change [got reverted](https://github.com/rust-lang/rust/pull/63343) because it [caused](https://github.com/rust-lang/rust/issues/62825) some [issues](https://github.com/rust-lang/rust/issues/52898#issuecomment-512182438) in [code that incorrectly used these functions](https://github.com/erlepereira/x11-rs/issues/99).\n\nSince then, the [problematic code has been fixed](https://github.com/erlepereira/x11-rs/pull/101), and rustc [gained a lint](https://github.com/rust-lang/rust/pull/63346) that is able to detect many misuses of these functions statically and a [dynamic check that panics](https://github.com/rust-lang/rust/pull/66059) instead of causing UB for some incorrect uses.\n\nFixes https://github.com/rust-lang/rust/issues/62825\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "html_url": "https://github.com/rust-lang/rust/commit/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4a900f57c13a6624a048708af15cc2e7fddae28", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a900f57c13a6624a048708af15cc2e7fddae28", "html_url": "https://github.com/rust-lang/rust/commit/c4a900f57c13a6624a048708af15cc2e7fddae28"}, {"sha": "a2160e6a4a91490117b9f0469c49b6f86d0d20d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2160e6a4a91490117b9f0469c49b6f86d0d20d2", "html_url": "https://github.com/rust-lang/rust/commit/a2160e6a4a91490117b9f0469c49b6f86d0d20d2"}], "stats": {"total": 131, "additions": 18, "deletions": 113}, "files": [{"sha": "f7ecbd80cbcdce94c02d257938d19260e37bb6ef", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "patch": "@@ -1027,46 +1027,8 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"47809\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n \n-    /// Creates a value initialized to zero.\n-    ///\n-    /// `init` is unsafe because it returns a zeroed-out datum,\n-    /// which is unsafe unless `T` is `Copy`. Also, even if T is\n-    /// `Copy`, an all-zero value may not correspond to any legitimate\n-    /// state for the type in question.\n-    ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::mem::zeroed`](../../std/mem/fn.zeroed.html).\n-    #[unstable(\n-        feature = \"core_intrinsics\",\n-        reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n-                         they should be used through stabilized interfaces \\\n-                         in the rest of the standard library\",\n-        issue = \"none\"\n-    )]\n-    #[rustc_deprecated(reason = \"superseded by MaybeUninit, removal planned\", since = \"1.38.0\")]\n-    pub fn init<T>() -> T;\n-\n-    /// Creates an uninitialized value.\n-    ///\n-    /// `uninit` is unsafe because there is no guarantee of what its\n-    /// contents are. In particular its drop-flag may be set to any\n-    /// state, which means it may claim either dropped or\n-    /// undropped. In the general case one must use `ptr::write` to\n-    /// initialize memory previous set to the result of `uninit`.\n-    ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::mem::MaybeUninit`](../../std/mem/union.MaybeUninit.html).\n-    #[unstable(\n-        feature = \"core_intrinsics\",\n-        reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n-                         they should be used through stabilized interfaces \\\n-                         in the rest of the standard library\",\n-        issue = \"none\"\n-    )]\n-    #[rustc_deprecated(reason = \"superseded by MaybeUninit, removal planned\", since = \"1.38.0\")]\n-    pub fn uninit<T>() -> T;\n-\n     /// Moves a value out of scope without running drop glue.\n+    /// This exists solely for `mem::forget_unsized`; normal `forget` uses `ManuallyDrop` instead.\n     pub fn forget<T: ?Sized>(_: T);\n \n     /// Reinterprets the bits of a value of one type as another type."}, {"sha": "1cf2b40e930684defa1637666a01937287eb4665", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "patch": "@@ -490,7 +490,7 @@ pub const fn needs_drop<T>() -> bool {\n ///\n /// let _x: &i32 = unsafe { mem::zeroed() }; // Undefined behavior!\n /// ```\n-#[inline]\n+#[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]\n@@ -500,7 +500,7 @@ pub unsafe fn zeroed<T>() -> T {\n     intrinsics::assert_zero_valid::<T>();\n     #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n-    intrinsics::init()\n+    MaybeUninit::zeroed().assume_init()\n }\n \n /// Bypasses Rust's normal memory-initialization checks by pretending to\n@@ -525,7 +525,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// [uninit]: union.MaybeUninit.html#method.uninit\n /// [assume_init]: union.MaybeUninit.html#method.assume_init\n /// [inv]: union.MaybeUninit.html#initialization-invariant\n-#[inline]\n+#[inline(always)]\n #[rustc_deprecated(since = \"1.39.0\", reason = \"use `mem::MaybeUninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n@@ -536,7 +536,7 @@ pub unsafe fn uninitialized<T>() -> T {\n     intrinsics::assert_uninit_valid::<T>();\n     #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n-    intrinsics::uninit()\n+    MaybeUninit::uninit().assume_init()\n }\n \n /// Swaps the values at two mutable locations, without deinitializing either one."}, {"sha": "1ddfde526fabde55d0804af63fad2ccde0044fa2", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "patch": "@@ -195,26 +195,8 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                     .unwrap();\n                 OperandRef::from_const(self, ty_name, ret_ty).immediate_or_packed_pair(self)\n             }\n-            \"init\" => {\n-                let ty = substs.type_at(0);\n-                if !self.layout_of(ty).is_zst() {\n-                    // Just zero out the stack slot.\n-                    // If we store a zero constant, LLVM will drown in vreg allocation for large\n-                    // data structures, and the generated code will be awful. (A telltale sign of\n-                    // this is large quantities of `mov [byte ptr foo],0` in the generated code.)\n-                    memset_intrinsic(\n-                        self,\n-                        false,\n-                        ty,\n-                        llresult,\n-                        self.const_u8(0),\n-                        self.const_usize(1),\n-                    );\n-                }\n-                return;\n-            }\n-            // Effectively no-ops\n-            \"uninit\" | \"forget\" => {\n+            // Effectively no-op\n+            \"forget\" => {\n                 return;\n             }\n             \"offset\" => {"}, {"sha": "dd5e5726e83677b520bcebb14c77046e983bde65", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "patch": "@@ -150,8 +150,6 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             \"assert_inhabited\" | \"assert_zero_valid\" | \"assert_uninit_valid\" => {\n                 (1, Vec::new(), tcx.mk_unit())\n             }\n-            \"init\" => (1, Vec::new(), param(0)),\n-            \"uninit\" => (1, Vec::new(), param(0)),\n             \"forget\" => (1, vec![param(0)], tcx.mk_unit()),\n             \"transmute\" => (2, vec![param(0)], param(1)),\n             \"move_val_init\" => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)], tcx.mk_unit()),"}, {"sha": "ce905572f2a8cee736a5e33f3e30514097e5bb50", "filename": "src/test/ui/init-large-type.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Ftest%2Fui%2Finit-large-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Ftest%2Fui%2Finit-large-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finit-large-type.rs?ref=7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -O\n // run-pass\n \n #![allow(unused_must_use)]\n@@ -10,17 +11,13 @@\n \n #![feature(intrinsics)]\n \n-use std::thread;\n-\n-extern \"rust-intrinsic\" {\n-    pub fn init<T>() -> T;\n-}\n+use std::{mem, thread};\n \n const SIZE: usize = 1024 * 1024;\n \n fn main() {\n     // do the test in a new thread to avoid (spurious?) stack overflows\n     thread::spawn(|| {\n-        let _memory: [u8; SIZE] = unsafe { init() };\n+        let _memory: [u8; SIZE] = unsafe { mem::zeroed() };\n     }).join();\n }"}, {"sha": "3d65cfc2340926f6b7e07a08c4d23a6b24b15245", "filename": "src/test/ui/init-unsafe.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4a900f57c13a6624a048708af15cc2e7fddae28/src%2Ftest%2Fui%2Finit-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a900f57c13a6624a048708af15cc2e7fddae28/src%2Ftest%2Fui%2Finit-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finit-unsafe.rs?ref=c4a900f57c13a6624a048708af15cc2e7fddae28", "patch": "@@ -1,9 +0,0 @@\n-#![allow(deprecated)]\n-#![feature(core_intrinsics)]\n-\n-use std::intrinsics::{init};\n-\n-// Test that the `init` intrinsic is really unsafe\n-pub fn main() {\n-    let stuff = init::<isize>(); //~ ERROR call to unsafe function is unsafe\n-}"}, {"sha": "e1126316af34ee3ab4f0839bc18f80a663d3e47e", "filename": "src/test/ui/init-unsafe.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c4a900f57c13a6624a048708af15cc2e7fddae28/src%2Ftest%2Fui%2Finit-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4a900f57c13a6624a048708af15cc2e7fddae28/src%2Ftest%2Fui%2Finit-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finit-unsafe.stderr?ref=c4a900f57c13a6624a048708af15cc2e7fddae28", "patch": "@@ -1,11 +0,0 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/init-unsafe.rs:8:17\n-   |\n-LL |     let stuff = init::<isize>();\n-   |                 ^^^^^^^^^^^^^^^ call to unsafe function\n-   |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0133`."}, {"sha": "b672f1ed26e8d8d1dfdd81f57fa2cf929fa5f42b", "filename": "src/test/ui/intrinsics/intrinsic-move-val.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-move-val.rs?ref=7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "patch": "@@ -5,7 +5,6 @@\n \n mod rusti {\n     extern \"rust-intrinsic\" {\n-        pub fn init<T>() -> T;\n         pub fn move_val_init<T>(dst: *mut T, src: T);\n     }\n }\n@@ -15,17 +14,17 @@ pub fn main() {\n         // sanity check\n         check_drops_state(0, None);\n \n-        let mut x: Box<D> = box D(1);\n-        assert_eq!(x.0, 1);\n+        let mut x: Option<Box<D>> = Some(box D(1));\n+        assert_eq!(x.as_ref().unwrap().0, 1);\n \n         // A normal overwrite, to demonstrate `check_drops_state`.\n-        x = box D(2);\n+        x = Some(box D(2));\n \n         // At this point, one destructor has run, because the\n         // overwrite of `x` drops its initial value.\n         check_drops_state(1, Some(1));\n \n-        let mut y: Box<D> = rusti::init();\n+        let mut y: Option<Box<D>> = std::mem::zeroed();\n \n         // An initial binding does not overwrite anything.\n         check_drops_state(1, Some(1));\n@@ -51,9 +50,9 @@ pub fn main() {\n         // during such a destructor call. We do so after the end of\n         // this scope.\n \n-        assert_eq!(y.0, 2);\n-        y.0 = 3;\n-        assert_eq!(y.0, 3);\n+        assert_eq!(y.as_ref().unwrap().0, 2);\n+        y.as_mut().unwrap().0 = 3;\n+        assert_eq!(y.as_ref().unwrap().0, 3);\n \n         check_drops_state(1, Some(1));\n     }"}, {"sha": "9555efb639b50480e93a11db16d009cd23fa1f64", "filename": "src/test/ui/intrinsics/intrinsic-uninit.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4a900f57c13a6624a048708af15cc2e7fddae28/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a900f57c13a6624a048708af15cc2e7fddae28/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-uninit.rs?ref=c4a900f57c13a6624a048708af15cc2e7fddae28", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-// pretty-expanded FIXME #23616\n-\n-#![feature(intrinsics)]\n-\n-mod rusti {\n-    extern \"rust-intrinsic\" {\n-        pub fn uninit<T>() -> T;\n-    }\n-}\n-pub fn main() {\n-    let _a : isize = unsafe {rusti::uninit()};\n-}"}, {"sha": "2ccd3f88200e340259b982ca652dc7749c35522f", "filename": "src/test/ui/proc-macro/auxiliary/derive-unstable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-unstable.rs?ref=7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "patch": "@@ -10,5 +10,5 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(Unstable)]\n pub fn derive(_input: TokenStream) -> TokenStream {\n \n-    \"unsafe fn foo() -> u32 { ::std::intrinsics::init() }\".parse().unwrap()\n+    \"unsafe fn foo() -> u32 { ::std::intrinsics::abort() }\".parse().unwrap()\n }"}]}