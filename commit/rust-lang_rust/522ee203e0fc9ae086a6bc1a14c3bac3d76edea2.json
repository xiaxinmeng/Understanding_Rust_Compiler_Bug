{"sha": "522ee203e0fc9ae086a6bc1a14c3bac3d76edea2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMmVlMjAzZTBmYzlhZTA4NmE2YmMxYTE0YzNiYWMzZDc2ZWRlYTI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-13T20:51:28Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-13T20:51:28Z"}, "message": "Rollup merge of #25308 - nham:audit_ref_traits, r=alexcrichton\n\ncc #16676", "tree": {"sha": "15576ba4ca4d6cfa03983e10391ee35b0be6c59a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15576ba4ca4d6cfa03983e10391ee35b0be6c59a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/522ee203e0fc9ae086a6bc1a14c3bac3d76edea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/522ee203e0fc9ae086a6bc1a14c3bac3d76edea2", "html_url": "https://github.com/rust-lang/rust/commit/522ee203e0fc9ae086a6bc1a14c3bac3d76edea2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/522ee203e0fc9ae086a6bc1a14c3bac3d76edea2/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222cd73b8a422d2c4124375f6aaffd2663bb9718", "url": "https://api.github.com/repos/rust-lang/rust/commits/222cd73b8a422d2c4124375f6aaffd2663bb9718", "html_url": "https://github.com/rust-lang/rust/commit/222cd73b8a422d2c4124375f6aaffd2663bb9718"}, {"sha": "b2f486feafa99124479d1b5e74c9acc6ed7cc233", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f486feafa99124479d1b5e74c9acc6ed7cc233", "html_url": "https://github.com/rust-lang/rust/commit/b2f486feafa99124479d1b5e74c9acc6ed7cc233"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "764468761607aa7aed5b3794ce3d26f2e21efbb1", "filename": "src/doc/reference.md", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/522ee203e0fc9ae086a6bc1a14c3bac3d76edea2/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/522ee203e0fc9ae086a6bc1a14c3bac3d76edea2/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=522ee203e0fc9ae086a6bc1a14c3bac3d76edea2", "patch": "@@ -1346,6 +1346,8 @@ vtable when the trait is used as a [trait object](#trait-objects).\n Traits are implemented for specific types through separate\n [implementations](#implementations).\n \n+Consider the following trait:\n+\n ```\n # type Surface = i32;\n # type BoundingBox = i32;\n@@ -1360,6 +1362,20 @@ This defines a trait with two methods. All values that have\n `draw` and `bounding_box` methods called, using `value.bounding_box()`\n [syntax](#method-call-expressions).\n \n+Traits can include default implementations of methods, as in:\n+\n+```\n+trait Foo {\n+    fn bar(&self);\n+\n+    fn baz(&self) { println!(\"We called baz.\"); }\n+}\n+```\n+\n+Here the `baz` method has a default implementation, so types that implement\n+`Foo` need only implement `bar`. It is also possible for implementing types\n+to override a method that has a default implementation.\n+\n Type parameters can be specified for a trait to make it generic. These appear\n after the trait name, using the same syntax used in [generic\n functions](#generic-functions).\n@@ -1372,6 +1388,30 @@ trait Seq<T> {\n }\n ```\n \n+It is also possible to define associated types for a trait. Consider the\n+following example of a `Container` trait. Notice how the type is available\n+for use in the method signatures:\n+\n+```\n+trait Container {\n+    type E;\n+    fn empty() -> Self;\n+    fn insert(&mut self, Self::E);\n+}\n+```\n+\n+In order for a type to implement this trait, it must not only provide\n+implementations for every method, but it must specify the type `E`. Here's\n+an implementation of `Container` for the standard library type `Vec`:\n+\n+```\n+impl<T> Container for Vec<T> {\n+    type E = T;\n+    fn empty() -> Vec<T> { Vec::new() }\n+    fn insert(&mut self, x: T) { self.push(x); }\n+}\n+```\n+\n Generic functions may use traits as _bounds_ on their type parameters. This\n will have two effects: only types that have the trait may instantiate the\n parameter, and within the generic function, the methods of the trait can be\n@@ -3470,13 +3510,21 @@ more of the closure traits:\n \n ### Trait objects\n \n-Every trait item (see [traits](#traits)) defines a type with the same name as\n-the trait. This type is called the _trait object_ of the trait. Trait objects\n-permit \"late binding\" of methods, dispatched using _virtual method tables_\n-(\"vtables\"). Whereas most calls to trait methods are \"early bound\" (statically\n-resolved) to specific implementations at compile time, a call to a method on an\n-trait objects is only resolved to a vtable entry at compile time. The actual\n-implementation for each vtable entry can vary on an object-by-object basis.\n+In Rust, a type like `&SomeTrait` or `Box<SomeTrait>` is called a _trait object_.\n+Each instance of a trait object includes:\n+\n+ - a pointer to an instance of a type `T` that implements `SomeTrait`\n+ - a _virtual method table_, often just called a _vtable_, which contains, for\n+   each method of `SomeTrait` that `T` implements, a pointer to `T`'s\n+   implementation (i.e. a function pointer).\n+\n+The purpose of trait objects is to permit \"late binding\" of methods. A call to\n+a method on a trait object is only resolved to a vtable entry at compile time.\n+The actual implementation for each vtable entry can vary on an object-by-object\n+basis.\n+\n+Note that for a trait object to be instantiated, the trait must be\n+_object-safe_. Object safety rules are defined in [RFC 255][rfc255].\n \n Given a pointer-typed expression `E` of type `&T` or `Box<T>`, where `T`\n implements trait `R`, casting `E` to the corresponding pointer type `&R` or"}]}