{"sha": "ce7676829e4786a44e8199e5df6e0cf9035a6d0f", "node_id": "C_kwDOAAsO6NoAKGNlNzY3NjgyOWU0Nzg2YTQ0ZTgxOTllNWRmNmUwY2Y5MDM1YTZkMGY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-30T06:43:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-03T00:42:29Z"}, "message": "Merge `parse_token_trees_until_close_delim` and `parse_all_token_trees`.\n\nBecause they're very similar, and this will allow some follow-up\nchanges.", "tree": {"sha": "15a44fc5796f9c1d44b4d0f92383d0ee5b4b319f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15a44fc5796f9c1d44b4d0f92383d0ee5b4b319f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce7676829e4786a44e8199e5df6e0cf9035a6d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7676829e4786a44e8199e5df6e0cf9035a6d0f", "html_url": "https://github.com/rust-lang/rust/commit/ce7676829e4786a44e8199e5df6e0cf9035a6d0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce7676829e4786a44e8199e5df6e0cf9035a6d0f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9de9cf19d7da502e08b93c32d89aa9850e70a595", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de9cf19d7da502e08b93c32d89aa9850e70a595", "html_url": "https://github.com/rust-lang/rust/commit/9de9cf19d7da502e08b93c32d89aa9850e70a595"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "88540e13ef2434708ad4bc9d40d77ccb1438658f", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7676829e4786a44e8199e5df6e0cf9035a6d0f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7676829e4786a44e8199e5df6e0cf9035a6d0f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=ce7676829e4786a44e8199e5df6e0cf9035a6d0f", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn parse_token_trees<'a>(\n     let cursor = Cursor::new(src);\n     let string_reader =\n         StringReader { sess, start_pos, pos: start_pos, src, cursor, override_span };\n-    tokentrees::TokenTreesReader::parse_token_trees(string_reader)\n+    tokentrees::TokenTreesReader::parse_all_token_trees(string_reader)\n }\n \n struct StringReader<'a> {"}, {"sha": "b06f23d7c7b4f9ac37463145bce2aac1ea065c27", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ce7676829e4786a44e8199e5df6e0cf9035a6d0f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7676829e4786a44e8199e5df6e0cf9035a6d0f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=ce7676829e4786a44e8199e5df6e0cf9035a6d0f", "patch": "@@ -27,7 +27,7 @@ pub(super) struct TokenTreesReader<'a> {\n }\n \n impl<'a> TokenTreesReader<'a> {\n-    pub(super) fn parse_token_trees(\n+    pub(super) fn parse_all_token_trees(\n         string_reader: StringReader<'a>,\n     ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {\n         let mut tt_reader = TokenTreesReader {\n@@ -40,34 +40,29 @@ impl<'a> TokenTreesReader<'a> {\n             last_delim_empty_block_spans: FxHashMap::default(),\n             matching_block_spans: Vec::new(),\n         };\n-        let res = tt_reader.parse_all_token_trees();\n+        let res = tt_reader.parse_token_trees(/* is_top_level */ true);\n         (res, tt_reader.unmatched_braces)\n     }\n \n-    // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.\n-    fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {\n+    // Parse a stream of tokens into a list of `TokenTree`s.\n+    fn parse_token_trees(&mut self, is_top_level: bool) -> PResult<'a, TokenStream> {\n         self.token = self.string_reader.next_token().0;\n         let mut buf = TokenStreamBuilder::default();\n         loop {\n             match self.token.kind {\n                 token::OpenDelim(delim) => buf.push(self.parse_token_tree_open_delim(delim)),\n-                token::CloseDelim(delim) => return Err(self.close_delim_err(delim)),\n-                token::Eof => return Ok(buf.into_token_stream()),\n-                _ => buf.push(self.parse_token_tree_non_delim_non_eof()),\n-            }\n-        }\n-    }\n-\n-    // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.\n-    fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {\n-        let mut buf = TokenStreamBuilder::default();\n-        loop {\n-            match self.token.kind {\n-                token::OpenDelim(delim) => buf.push(self.parse_token_tree_open_delim(delim)),\n-                token::CloseDelim(..) => return buf.into_token_stream(),\n+                token::CloseDelim(delim) => {\n+                    return if !is_top_level {\n+                        Ok(buf.into_token_stream())\n+                    } else {\n+                        Err(self.close_delim_err(delim))\n+                    };\n+                }\n                 token::Eof => {\n-                    self.eof_err().emit();\n-                    return buf.into_token_stream();\n+                    if !is_top_level {\n+                        self.eof_err().emit();\n+                    }\n+                    return Ok(buf.into_token_stream());\n                 }\n                 _ => buf.push(self.parse_token_tree_non_delim_non_eof()),\n             }\n@@ -113,14 +108,12 @@ impl<'a> TokenTreesReader<'a> {\n         // The span for beginning of the delimited section\n         let pre_span = self.token.span;\n \n-        // Move past the open delimiter.\n         self.open_braces.push((open_delim, self.token.span));\n-        self.token = self.string_reader.next_token().0;\n \n         // Parse the token trees within the delimiters.\n         // We stop at any delimiter so we can try to recover if the user\n         // uses an incorrect delimiter.\n-        let tts = self.parse_token_trees_until_close_delim();\n+        let tts = self.parse_token_trees(/* is_top_level */ false).unwrap();\n \n         // Expand to cover the entire delimited token tree\n         let delim_span = DelimSpan::from_pair(pre_span, self.token.span);"}]}