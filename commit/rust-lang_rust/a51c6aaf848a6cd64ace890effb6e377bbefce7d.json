{"sha": "a51c6aaf848a6cd64ace890effb6e377bbefce7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MWM2YWFmODQ4YTZjZDY0YWNlODkwZWZmYjZlMzc3YmJlZmNlN2Q=", "commit": {"author": {"name": "Dawid Ci\u0119\u017carkiewicz", "email": "dpc@dpc.pw", "date": "2017-03-14T05:29:00Z"}, "committer": {"name": "Dawid Ci\u0119\u017carkiewicz", "email": "dpc@dpc.pw", "date": "2017-03-18T03:15:05Z"}, "message": "Break line longer than 100 characters", "tree": {"sha": "09b72208fb246d0ea4aaf464e138dde1faf02170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09b72208fb246d0ea4aaf464e138dde1faf02170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a51c6aaf848a6cd64ace890effb6e377bbefce7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a51c6aaf848a6cd64ace890effb6e377bbefce7d", "html_url": "https://github.com/rust-lang/rust/commit/a51c6aaf848a6cd64ace890effb6e377bbefce7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a51c6aaf848a6cd64ace890effb6e377bbefce7d/comments", "author": {"login": "dpc", "id": 9209, "node_id": "MDQ6VXNlcjkyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/9209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpc", "html_url": "https://github.com/dpc", "followers_url": "https://api.github.com/users/dpc/followers", "following_url": "https://api.github.com/users/dpc/following{/other_user}", "gists_url": "https://api.github.com/users/dpc/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpc/subscriptions", "organizations_url": "https://api.github.com/users/dpc/orgs", "repos_url": "https://api.github.com/users/dpc/repos", "events_url": "https://api.github.com/users/dpc/events{/privacy}", "received_events_url": "https://api.github.com/users/dpc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dpc", "id": 9209, "node_id": "MDQ6VXNlcjkyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/9209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpc", "html_url": "https://github.com/dpc", "followers_url": "https://api.github.com/users/dpc/followers", "following_url": "https://api.github.com/users/dpc/following{/other_user}", "gists_url": "https://api.github.com/users/dpc/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpc/subscriptions", "organizations_url": "https://api.github.com/users/dpc/orgs", "repos_url": "https://api.github.com/users/dpc/repos", "events_url": "https://api.github.com/users/dpc/events{/privacy}", "received_events_url": "https://api.github.com/users/dpc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2adee74a318503334c07290ca767fd609aebf1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2adee74a318503334c07290ca767fd609aebf1f", "html_url": "https://github.com/rust-lang/rust/commit/f2adee74a318503334c07290ca767fd609aebf1f"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "e26b84d6b0786d57d3e452a054d8434762696f42", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a51c6aaf848a6cd64ace890effb6e377bbefce7d/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a51c6aaf848a6cd64ace890effb6e377bbefce7d/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=a51c6aaf848a6cd64ace890effb6e377bbefce7d", "patch": "@@ -1777,7 +1777,8 @@ impl DirBuilder {\n     fn create_dir_all(&self, path: &Path) -> io::Result<()> {\n         match self.inner.mkdir(path) {\n             Ok(()) => return Ok(()),\n-            Err(ref e) if e.kind() == io::ErrorKind::AlreadyExists && path.is_dir() => return Ok(()),\n+            Err(ref e)\n+                if e.kind() == io::ErrorKind::AlreadyExists && path.is_dir() => return Ok(()),\n             Err(ref e) if e.kind() == io::ErrorKind::NotFound => {}\n             Err(e) => return Err(e),\n         }"}]}