{"sha": "41883fd19a174b8c2d23494a24edd5b92b959fc6", "node_id": "C_kwDOAAsO6NoAKDQxODgzZmQxOWExNzRiOGMyZDIzNDk0YTI0ZWRkNWI5MmI5NTlmYzY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-03T02:29:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-03T21:36:59Z"}, "message": "intern external constraints", "tree": {"sha": "72af940d3784e18c6c342bbf8c870bdbb51349be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72af940d3784e18c6c342bbf8c870bdbb51349be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41883fd19a174b8c2d23494a24edd5b92b959fc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41883fd19a174b8c2d23494a24edd5b92b959fc6", "html_url": "https://github.com/rust-lang/rust/commit/41883fd19a174b8c2d23494a24edd5b92b959fc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41883fd19a174b8c2d23494a24edd5b92b959fc6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "658fad6c5506f41c35b64fb1a22ceb0992697ff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/658fad6c5506f41c35b64fb1a22ceb0992697ff3", "html_url": "https://github.com/rust-lang/rust/commit/658fad6c5506f41c35b64fb1a22ceb0992697ff3"}], "stats": {"total": 102, "additions": 80, "deletions": 22}, "files": [{"sha": "2ba7ec5b151929ebd00d96a0f2d7355778f43f0a", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=41883fd19a174b8c2d23494a24edd5b92b959fc6", "patch": "@@ -112,6 +112,7 @@ macro_rules! arena_types {\n \n             [decode] trait_impl_trait_tys: rustc_data_structures::fx::FxHashMap<rustc_hir::def_id::DefId, rustc_middle::ty::Ty<'tcx>>,\n             [] bit_set_u32: rustc_index::bit_set::BitSet<u32>,\n+            [] external_constraints: rustc_middle::traits::solve::ExternalConstraintsData<'tcx>,\n         ]);\n     )\n }"}, {"sha": "75525059e90de739e50f6737626fc42877c4c853", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=41883fd19a174b8c2d23494a24edd5b92b959fc6", "patch": "@@ -5,6 +5,7 @@\n mod chalk;\n pub mod query;\n pub mod select;\n+pub mod solve;\n pub mod specialization_graph;\n mod structural_impls;\n pub mod util;"}, {"sha": "63f9c32f0a74b2ff4c5bfa8d7e4817947015e2e1", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=41883fd19a174b8c2d23494a24edd5b92b959fc6", "patch": "@@ -0,0 +1,55 @@\n+use std::ops::ControlFlow;\n+\n+use rustc_data_structures::intern::Interned;\n+\n+use crate::ty::{FallibleTypeFolder, Ty, TypeFoldable, TypeFolder, TypeVisitable, TypeVisitor};\n+\n+#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n+pub struct ExternalConstraints<'tcx>(pub(crate) Interned<'tcx, ExternalConstraintsData<'tcx>>);\n+\n+impl<'tcx> std::ops::Deref for ExternalConstraints<'tcx> {\n+    type Target = ExternalConstraintsData<'tcx>;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &*self.0\n+    }\n+}\n+\n+/// Additional constraints returned on success.\n+#[derive(Debug, PartialEq, Eq, Clone, Hash, Default)]\n+pub struct ExternalConstraintsData<'tcx> {\n+    // FIXME: implement this.\n+    pub regions: (),\n+    pub opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for ExternalConstraints<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        Ok(FallibleTypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n+            regions: (),\n+            opaque_types: self\n+                .opaque_types\n+                .iter()\n+                .map(|opaque| opaque.try_fold_with(folder))\n+                .collect::<Result<_, F::Error>>()?,\n+        }))\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n+        TypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n+            regions: (),\n+            opaque_types: self.opaque_types.iter().map(|opaque| opaque.fold_with(folder)).collect(),\n+        })\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for ExternalConstraints<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(\n+        &self,\n+        visitor: &mut V,\n+    ) -> std::ops::ControlFlow<V::BreakTy> {\n+        self.regions.visit_with(visitor)?;\n+        self.opaque_types.visit_with(visitor)?;\n+        ControlFlow::Continue(())\n+    }\n+}"}, {"sha": "9205a8a0ffed801859efae523f76cceaa6aa4b60", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=41883fd19a174b8c2d23494a24edd5b92b959fc6", "patch": "@@ -17,6 +17,7 @@ use crate::mir::{\n };\n use crate::thir::Thir;\n use crate::traits;\n+use crate::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, Const, ConstData, DefIdTree, FloatTy, FloatVar,\n@@ -148,6 +149,7 @@ pub struct CtxtInterners<'tcx> {\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n     layout: InternedSet<'tcx, LayoutS<VariantIdx>>,\n     adt_def: InternedSet<'tcx, AdtDefData>,\n+    external_constraints: InternedSet<'tcx, ExternalConstraintsData<'tcx>>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -169,6 +171,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n             bound_variable_kinds: Default::default(),\n             layout: Default::default(),\n             adt_def: Default::default(),\n+            external_constraints: Default::default(),\n         }\n     }\n \n@@ -1449,6 +1452,7 @@ direct_interners! {\n     const_allocation: intern_const_alloc(Allocation): ConstAllocation -> ConstAllocation<'tcx>,\n     layout: intern_layout(LayoutS<VariantIdx>): Layout -> Layout<'tcx>,\n     adt_def: intern_adt_def(AdtDefData): AdtDef -> AdtDef<'tcx>,\n+    external_constraints: intern_external_constraints(ExternalConstraintsData<'tcx>): ExternalConstraints -> ExternalConstraints<'tcx>,\n }\n \n macro_rules! slice_interners {"}, {"sha": "e4725c0a1b7326895344eeb0a31dcefe967ca4e7", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=41883fd19a174b8c2d23494a24edd5b92b959fc6", "patch": "@@ -24,7 +24,8 @@ use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::Obligation;\n use rustc_middle::infer::canonical::Certainty as OldCertainty;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_middle::ty::{\n     CoercePredicate, RegionOutlivesPredicate, SubtypePredicate, ToPredicate, TypeOutlivesPredicate,\n };\n@@ -72,8 +73,7 @@ impl<'tcx, P> From<Obligation<'tcx, P>> for Goal<'tcx, P> {\n         Goal { param_env: obligation.param_env, predicate: obligation.predicate }\n     }\n }\n-\n-#[derive(Debug, PartialEq, Eq, Clone, Hash, TypeFoldable, TypeVisitable)]\n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n pub struct Response<'tcx> {\n     pub var_values: CanonicalVarValues<'tcx>,\n     /// Additional constraints returned by this query.\n@@ -121,14 +121,6 @@ pub enum MaybeCause {\n     Overflow,\n }\n \n-/// Additional constraints returned on success.\n-#[derive(Debug, PartialEq, Eq, Clone, Hash, TypeFoldable, TypeVisitable, Default)]\n-pub struct ExternalConstraints<'tcx> {\n-    // FIXME: implement this.\n-    regions: (),\n-    opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n-}\n-\n type CanonicalGoal<'tcx, T = ty::Predicate<'tcx>> = Canonical<'tcx, Goal<'tcx, T>>;\n type CanonicalResponse<'tcx> = Canonical<'tcx, Response<'tcx>>;\n /// The result of evaluating a canonical query.\n@@ -218,15 +210,14 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 EvalCtxt { infcx, var_values, search_graph, in_projection_eq_hack: false };\n             let result = ecx.compute_goal(goal);\n \n-            // FIXME: `Response` should be `Copy`\n-            if search_graph.try_finalize_goal(tcx, canonical_goal, result.clone()) {\n+            if search_graph.try_finalize_goal(tcx, canonical_goal, result) {\n                 return result;\n             }\n         }\n     }\n \n     fn make_canonical_response(&self, certainty: Certainty) -> QueryResult<'tcx> {\n-        let external_constraints = take_external_constraints(self.infcx)?;\n+        let external_constraints = compute_external_query_constraints(self.infcx)?;\n \n         Ok(self.infcx.canonicalize_response(Response {\n             var_values: self.var_values,\n@@ -461,18 +452,18 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n }\n \n #[instrument(level = \"debug\", skip(infcx), ret)]\n-fn take_external_constraints<'tcx>(\n+fn compute_external_query_constraints<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n ) -> Result<ExternalConstraints<'tcx>, NoSolution> {\n     let region_obligations = infcx.take_registered_region_obligations();\n     let opaque_types = infcx.take_opaque_types_for_query_response();\n-    Ok(ExternalConstraints {\n+    Ok(infcx.tcx.intern_external_constraints(ExternalConstraintsData {\n         // FIXME: Now that's definitely wrong :)\n         //\n         // Should also do the leak check here I think\n         regions: drop(region_obligations),\n         opaque_types,\n-    })\n+    }))\n }\n \n fn instantiate_canonical_query_response<'tcx>(\n@@ -492,7 +483,10 @@ fn instantiate_canonical_query_response<'tcx>(\n                     Certainty::Yes => OldCertainty::Proven,\n                     Certainty::Maybe(_) => OldCertainty::Ambiguous,\n                 },\n-                opaque_types: resp.external_constraints.opaque_types,\n+                // FIXME: This to_owned makes me sad, but we should eventually impl\n+                // `instantiate_query_response_and_region_obligations` separately\n+                // instead of piggybacking off of the old implementation.\n+                opaque_types: resp.external_constraints.opaque_types.to_owned(),\n                 value: resp.certainty,\n             }),\n         ) else { bug!(); };\n@@ -510,7 +504,10 @@ pub(super) fn response_no_constraints<'tcx>(\n         variables: goal.variables,\n         value: Response {\n             var_values: CanonicalVarValues::make_identity(tcx, goal.variables),\n-            external_constraints: Default::default(),\n+            // FIXME: maybe we should store the \"no response\" version in tcx, like\n+            // we do for tcx.types and stuff.\n+            external_constraints: tcx\n+                .intern_external_constraints(ExternalConstraintsData::default()),\n             certainty,\n         },\n     })"}, {"sha": "86b13c05f76aa16a7706601514b6dd1ea5327ce9", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/cache.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41883fd19a174b8c2d23494a24edd5b92b959fc6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs?ref=41883fd19a174b8c2d23494a24edd5b92b959fc6", "patch": "@@ -95,8 +95,7 @@ impl<'tcx> ProvisionalCache<'tcx> {\n     }\n \n     pub(super) fn provisional_result(&self, entry_index: EntryIndex) -> QueryResult<'tcx> {\n-        // FIXME: Responses should probably be `Copy` as well\n-        self.entries[entry_index].response.clone()\n+        self.entries[entry_index].response\n     }\n }\n "}, {"sha": "9e37eccb6d3206b399b6b183c50a768a4f04c0ed", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41883fd19a174b8c2d23494a24edd5b92b959fc6/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/41883fd19a174b8c2d23494a24edd5b92b959fc6/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=41883fd19a174b8c2d23494a24edd5b92b959fc6", "patch": "@@ -250,7 +250,8 @@ new_pr = true\n \n [autolabel.\"WG-trait-system-refactor\"]\n trigger_files = [\n-    \"compiler/rustc_trait_selection/src/solve\"\n+    \"compiler/rustc_trait_selection/src/solve\",\n+    \"compiler/rustc_middle/src/traits/solve.rs\"\n ]\n \n [notify-zulip.\"I-prioritize\"]"}]}