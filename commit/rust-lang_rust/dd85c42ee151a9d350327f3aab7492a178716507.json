{"sha": "dd85c42ee151a9d350327f3aab7492a178716507", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkODVjNDJlZTE1MWE5ZDM1MDMyN2YzYWFiNzQ5MmExNzg3MTY1MDc=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-03T22:13:42Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-03T22:13:42Z"}, "message": "Unwrap address values in Debug implementations for TcpStream/TcpListener/UdpSocket.\n\nThis now omits address fields in Debug implementations when a proper address value\ncannot be unwrapped.", "tree": {"sha": "2c88fc1acb71157d504cbb879d2c1d402c793e04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c88fc1acb71157d504cbb879d2c1d402c793e04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd85c42ee151a9d350327f3aab7492a178716507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd85c42ee151a9d350327f3aab7492a178716507", "html_url": "https://github.com/rust-lang/rust/commit/dd85c42ee151a9d350327f3aab7492a178716507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd85c42ee151a9d350327f3aab7492a178716507/comments", "author": null, "committer": null, "parents": [{"sha": "3a4a1e5f386137514b91c76ad06d909789bcd549", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a4a1e5f386137514b91c76ad06d909789bcd549", "html_url": "https://github.com/rust-lang/rust/commit/3a4a1e5f386137514b91c76ad06d909789bcd549"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "688d0edcff1c7d1fdd59b92b80c14d4339136799", "filename": "src/libstd/sys/common/net2.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dd85c42ee151a9d350327f3aab7492a178716507/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd85c42ee151a9d350327f3aab7492a178716507/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs?ref=dd85c42ee151a9d350327f3aab7492a178716507", "patch": "@@ -271,11 +271,18 @@ impl FromInner<Socket> for TcpStream {\n \n impl fmt::Debug for TcpStream {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"TcpStream\")\n-        .field(\"addr\", &self.socket_addr())\n-        .field(\"peer\", &self.peer_addr())\n-        .field(\"inner\", &self.inner.as_inner())\n-        .finish()\n+        let mut res = f.debug_struct(\"TcpStream\");\n+\n+        if let Ok(addr) = self.socket_addr() {\n+            res = res.field(\"addr\", &addr);\n+        }\n+\n+        if let Ok(peer) = self.peer_addr() {\n+            res = res.field(\"peer\", &peer);\n+        }\n+\n+        res = res.field(\"inner\", &self.inner.as_inner());\n+        res.finish()\n     }\n }\n \n@@ -340,10 +347,14 @@ impl FromInner<Socket> for TcpListener {\n \n impl fmt::Debug for TcpListener {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"TcpListener\")\n-        .field(\"addr\", &self.socket_addr())\n-        .field(\"inner\", &self.inner.as_inner())\n-        .finish()\n+        let mut res = f.debug_struct(\"TcpListener\");\n+\n+        if let Ok(addr) = self.socket_addr() {\n+            res = res.field(\"addr\", &addr);\n+        }\n+\n+        res = res.field(\"inner\", &self.inner.as_inner());\n+        res.finish()\n     }\n }\n \n@@ -468,9 +479,13 @@ impl FromInner<Socket> for UdpSocket {\n \n impl fmt::Debug for UdpSocket {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"UdpSocket\")\n-        .field(\"addr\", &self.socket_addr())\n-        .field(\"inner\", &self.inner.as_inner())\n-        .finish()\n+        let mut res = f.debug_struct(\"UdpSocket\");\n+\n+        if let Ok(addr) = self.socket_addr() {\n+            res = res.field(\"addr\", &addr);\n+        }\n+\n+        res = res.field(\"inner\", &self.inner.as_inner());\n+        res.finish()\n     }\n }"}]}