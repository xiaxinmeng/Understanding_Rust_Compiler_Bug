{"sha": "8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOWZiOTdlYjY0YTRhOWZkMTRmMjQ2NzI0ZTBiNDQ2ZGQxY2VmMmU=", "commit": {"author": {"name": "Enrico Schmitz", "email": "enrico@schmitz.link", "date": "2017-03-31T17:23:35Z"}, "committer": {"name": "Enrico Schmitz", "email": "es@mdtm.de", "date": "2017-03-31T17:23:35Z"}, "message": "First try for a fix for rustc 1.18.0-nightly (5c94997b6 2017-03-30", "tree": {"sha": "59b4b2c4b3f4246c101331a443b36633d03af7bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59b4b2c4b3f4246c101331a443b36633d03af7bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "html_url": "https://github.com/rust-lang/rust/commit/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/comments", "author": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c3c9387613823493726a064f9c15dd09f3d30e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3c9387613823493726a064f9c15dd09f3d30e5", "html_url": "https://github.com/rust-lang/rust/commit/9c3c9387613823493726a064f9c15dd09f3d30e5"}], "stats": {"total": 133, "additions": 61, "deletions": 72}, "files": [{"sha": "33aaf5fcb0ab131d8e3d4642d83b9f6a03184d16", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -125,7 +125,7 @@ fn check_collapsible_no_if_let(cx: &EarlyContext, expr: &ast::Expr, check: &ast:\n         let Some(inner) = expr_block(then),\n         let ast::ExprKind::If(ref check_inner, ref content, None) = inner.node,\n     ], {\n-        if expr.span.expn_id != inner.span.expn_id {\n+        if expr.span.ctxt != inner.span.ctxt {\n             return;\n         }\n         span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this if statement can be collapsed\", |db| {"}, {"sha": "316a7afdc3afc838efb8f6862f12bf8bbc042533", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -313,10 +313,10 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         }\n     }\n \n-    fn ifthenelse(&mut self, cond: &Expr, then: &Block, otherwise: &Option<P<Expr>>) -> Option<Constant> {\n+    fn ifthenelse(&mut self, cond: &Expr, then: &P<Expr>, otherwise: &Option<P<Expr>>) -> Option<Constant> {\n         if let Some(Constant::Bool(b)) = self.expr(cond) {\n             if b {\n-                self.block(then)\n+                self.expr(&**then)\n             } else {\n                 otherwise.as_ref().and_then(|expr| self.expr(expr))\n             }"}, {"sha": "034ce24d6ea92c5aca73855aa51054f83850baf8", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -225,9 +225,11 @@ fn if_sequence(mut expr: &Expr) -> (SmallVector<&Expr>, SmallVector<&Block>) {\n     let mut conds = SmallVector::new();\n     let mut blocks = SmallVector::new();\n \n-    while let ExprIf(ref cond, ref then_block, ref else_expr) = expr.node {\n+    while let ExprIf(ref cond, ref then_expr, ref else_expr) = expr.node {\n         conds.push(&**cond);\n-        blocks.push(&**then_block);\n+        //FIXME\n+        //blocks.push(&**then_expr);\n+        //FIXME\n \n         if let Some(ref else_expr) = *else_expr {\n             expr = else_expr;\n@@ -239,7 +241,9 @@ fn if_sequence(mut expr: &Expr) -> (SmallVector<&Expr>, SmallVector<&Block>) {\n     // final `else {..}`\n     if !blocks.is_empty() {\n         if let ExprBlock(ref block) = expr.node {\n-            blocks.push(&**block);\n+            //FIXME\n+            //blocks.push(&**block);\n+            //FIXME\n         }\n     }\n "}, {"sha": "2f5707be5c02e641285eb6cc2bd45a8464699048", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -1,5 +1,5 @@\n use rustc::hir::*;\n-use rustc::hir::intravisit::{Visitor, walk_expr, walk_block, NestedVisitorMap};\n+use rustc::hir::intravisit::{Visitor, walk_expr, NestedVisitorMap};\n use rustc::lint::*;\n use syntax::codemap::Span;\n use utils::SpanlessEq;\n@@ -46,8 +46,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapLint {\n                 if let Some((ty, map, key)) = check_cond(cx, check) {\n                     // in case of `if !m.contains_key(&k) { m.insert(k, v); }`\n                     // we can give a better error message\n-                    let sole_expr = else_block.is_none() &&\n-                                    ((then_block.expr.is_some() as usize) + then_block.stmts.len() == 1);\n+                    let sole_expr = else_block.is_none();\n \n                     let mut visitor = InsertVisitor {\n                         cx: cx,\n@@ -58,7 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapLint {\n                         sole_expr: sole_expr,\n                     };\n \n-                    walk_block(&mut visitor, then_block);\n+                    walk_expr(&mut visitor, &**then_block);\n                 }\n             } else if let Some(ref else_block) = *else_block {\n                 if let Some((ty, map, key)) = check_cond(cx, check) {"}, {"sha": "8b5c35d0996f344f394c06f331de23ab31b1de2e", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n-use syntax::codemap::mk_sp;\n use syntax::ast;\n+use syntax_pos::{Span, NO_EXPANSION};\n use utils::{differing_macro_contexts, in_macro, snippet_opt, span_note_and_lint};\n use syntax::ptr::P;\n \n@@ -100,12 +100,11 @@ impl EarlyLintPass for Formatting {\n fn check_assign(cx: &EarlyContext, expr: &ast::Expr) {\n     if let ast::ExprKind::Assign(ref lhs, ref rhs) = expr.node {\n         if !differing_macro_contexts(lhs.span, rhs.span) && !in_macro(cx, lhs.span) {\n-            let eq_span = mk_sp(lhs.span.hi, rhs.span.lo);\n-\n+            let eq_span = Span { lo: lhs.span.hi, hi: rhs.span.lo, ctxt: NO_EXPANSION };\n             if let ast::ExprKind::Unary(op, ref sub_rhs) = rhs.node {\n                 if let Some(eq_snippet) = snippet_opt(cx, eq_span) {\n                     let op = ast::UnOp::to_string(op);\n-                    let eqop_span = mk_sp(lhs.span.hi, sub_rhs.span.lo);\n+                    let eqop_span= Span { lo: lhs.span.hi, hi: sub_rhs.span.lo, ctxt: NO_EXPANSION };\n                     if eq_snippet.ends_with('=') {\n                         span_note_and_lint(cx,\n                                            SUSPICIOUS_ASSIGNMENT_FORMATTING,\n@@ -128,7 +127,7 @@ fn check_else_if(cx: &EarlyContext, expr: &ast::Expr) {\n         if unsugar_if(else_).is_some() && !differing_macro_contexts(then.span, else_.span) && !in_macro(cx, then.span) {\n             // this will be a span from the closing \u2018}\u2019 of the \u201cthen\u201d block (excluding) to the\n             // \u201cif\u201d of the \u201celse if\u201d block (excluding)\n-            let else_span = mk_sp(then.span.hi, else_.span.lo);\n+            let else_span = Span { lo: then.span.hi, hi: else_.span.lo, ctxt: NO_EXPANSION };\n \n             // the snippet should look like \" else \\n    \" with maybe comments anywhere\n             // it\u2019s bad when there is a \u2018\\n\u2019 after the \u201celse\u201d\n@@ -155,9 +154,9 @@ fn check_array(cx: &EarlyContext, expr: &ast::Expr) {\n         for element in array {\n             if let ast::ExprKind::Binary(ref op, ref lhs, _) = element.node {\n                 if !differing_macro_contexts(lhs.span, op.span) {\n-                    let space_span = mk_sp(lhs.span.hi, op.span.lo);\n+                    let space_span = Span { lo: lhs.span.hi, hi: op.span.lo, ctxt: NO_EXPANSION };\n                     if let Some(space_snippet) = snippet_opt(cx, space_span) {\n-                        let lint_span = mk_sp(lhs.span.hi, lhs.span.hi);\n+                        let lint_span = Span { lo: lhs.span.hi, hi: lhs.span.hi, ctxt: NO_EXPANSION };\n                         if space_snippet.contains('\\n') {\n                             span_note_and_lint(cx,\n                                                POSSIBLE_MISSING_COMMA,\n@@ -178,7 +177,7 @@ fn check_consecutive_ifs(cx: &EarlyContext, first: &ast::Expr, second: &ast::Exp\n     if !differing_macro_contexts(first.span, second.span) && !in_macro(cx, first.span) &&\n        unsugar_if(first).is_some() && unsugar_if(second).is_some() {\n         // where the else would be\n-        let else_span = mk_sp(first.span.hi, second.span.lo);\n+        let else_span = Span { lo: first.span.hi, hi: second.span.lo, ctxt: NO_EXPANSION };\n \n         if let Some(else_snippet) = snippet_opt(cx, else_span) {\n             if !else_snippet.contains('\\n') {"}, {"sha": "8d6a28e62dbc0f34ba95cd4873d6ac9e3fa65726", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     let span = Span {\n                         lo: expr.span.lo,\n                         hi: op.span.hi,\n-                        expn_id: expr.span.expn_id,\n+                        ctxt: expr.span.ctxt,\n                     };\n                     db.span_suggestion(span, \"try this\", format!(\"if {}.{}\", snippet(cx, op.span, \"_\"), good_method));\n                 });"}, {"sha": "1b25a5cbda2f1325bb091b880149b6916765961d", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir;\n-use syntax::codemap;\n+use syntax_pos::{Span, NO_EXPANSION};\n use utils::{snippet, span_lint_and_then};\n \n /// **What it does:** Checks for variable declarations immediately followed by a\n@@ -69,10 +69,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                 let hir::StmtExpr(ref if_, _) = expr.node,\n                 let hir::ExprIf(ref cond, ref then, ref else_) = if_.node,\n                 !used_in_expr(cx, def_id, cond),\n-                let Some(value) = check_assign(cx, def_id, then),\n-                !used_in_expr(cx, def_id, value),\n+                !used_in_expr(cx, def_id, &**then),\n             ], {\n-                let span = codemap::mk_sp(stmt.span.lo, if_.span.hi);\n+                let span = Span { lo: stmt.span.lo, hi: if_.span.hi, ctxt: NO_EXPANSION };\n \n                 let (default_multi_stmts, default) = if let Some(ref else_) = *else_ {\n                     if let hir::ExprBlock(ref else_) = else_.node {\n@@ -105,9 +104,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                     mut=mutability,\n                     name=name.node,\n                     cond=snippet(cx, cond.span, \"_\"),\n-                    then=if then.stmts.len() > 1 { \" ..;\" } else { \"\" },\n+                    then={ \"\" },\n                     else=if default_multi_stmts { \" ..;\" } else { \"\" },\n-                    value=snippet(cx, value.span, \"<value>\"),\n+                    value=snippet(cx, then.span, \"<value>\"),\n                     default=snippet(cx, default.span, \"<default>\"),\n                 );\n                 span_lint_and_then(cx,"}, {"sha": "c54755a433281148675dac88f96253c907475e98", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -1065,7 +1065,7 @@ fn lint_map_unwrap_or(cx: &LateContext, expr: &hir::Expr, map_args: &[hir::Expr]\n         // lint, with note if neither arg is > 1 line and both map() and\n         // unwrap_or() have the same span\n         let multiline = map_snippet.lines().count() > 1 || unwrap_snippet.lines().count() > 1;\n-        let same_span = map_args[1].span.expn_id == unwrap_args[1].span.expn_id;\n+        let same_span = map_args[1].span.ctxt == unwrap_args[1].span.ctxt;\n         if same_span && !multiline {\n             span_note_and_lint(cx,\n                                OPTION_MAP_UNWRAP_OR,\n@@ -1094,7 +1094,7 @@ fn lint_map_unwrap_or_else(cx: &LateContext, expr: &hir::Expr, map_args: &[hir::\n         // lint, with note if neither arg is > 1 line and both map() and\n         // unwrap_or_else() have the same span\n         let multiline = map_snippet.lines().count() > 1 || unwrap_snippet.lines().count() > 1;\n-        let same_span = map_args[1].span.expn_id == unwrap_args[1].span.expn_id;\n+        let same_span = map_args[1].span.ctxt == unwrap_args[1].span.ctxt;\n         if same_span && !multiline {\n             span_note_and_lint(cx,\n                                OPTION_MAP_UNWRAP_OR_ELSE,"}, {"sha": "001bb3f4261f781cb6368ac9fb1cfd31c76b773d", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -499,9 +499,9 @@ fn is_used(cx: &LateContext, expr: &Expr) -> bool {\n /// Test whether an expression is in a macro expansion (e.g. something generated by\n /// `#[derive(...)`] or the like).\n fn in_attributes_expansion(cx: &LateContext, expr: &Expr) -> bool {\n-    cx.sess().codemap().with_expn_info(expr.span.expn_id, |info_opt| {\n-        info_opt.map_or(false, |info| matches!(info.callee.format, ExpnFormat::MacroAttribute(_)))\n-    })\n+    expr.span.ctxt.outer().expn_info().map(|info| {\n+        matches!(info.callee.format, ExpnFormat::MacroAttribute(_))\n+    }).unwrap_or(false)\n }\n \n /// Test whether `def` is a variable defined outside a macro."}, {"sha": "c546cf5bd0ec9c60238b502465b976c33671f1a4", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n                                    \"this if-then-else expression returns a bool literal\",\n                                    |db| { db.span_suggestion(e.span, \"you can reduce it to\", hint); });\n             };\n-            match (fetch_bool_block(then_block), fetch_bool_expr(else_expr)) {\n+            match (fetch_bool_expr(&**then_block), fetch_bool_expr(else_expr)) {\n                 (RetBool(true), RetBool(true)) |\n                 (Bool(true), Bool(true)) => {\n                     span_lint(cx,"}, {"sha": "58eb4aafa2be8cc3c398265515cb2318185e9243", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -305,7 +305,7 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings:\n         },\n         ExprIf(ref cond, ref then, ref otherwise) => {\n             check_expr(cx, cond, bindings);\n-            check_block(cx, then, bindings);\n+            check_expr(cx, &**then, bindings);\n             if let Some(ref o) = *otherwise {\n                 check_expr(cx, o, bindings);\n             }"}, {"sha": "d17b8987d2ca85e065f6863c4286226565123493", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -1,9 +1,9 @@\n use rustc::hir::*;\n use rustc::lint::*;\n use rustc::ty;\n-use syntax::codemap::mk_sp;\n use utils::{differing_macro_contexts, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n use utils::sugg::Sugg;\n+use syntax_pos::{Span, NO_EXPANSION};\n \n /// **What it does:** Checks for manual swapping.\n ///\n@@ -124,7 +124,7 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n                 }\n             };\n \n-            let span = mk_sp(w[0].span.lo, second.span.hi);\n+            let span = Span { lo: w[0].span.lo, hi: second.span.hi, ctxt: NO_EXPANSION};\n \n             span_lint_and_then(cx,\n                                MANUAL_SWAP,\n@@ -163,7 +163,7 @@ fn check_suspicious_swap(cx: &LateContext, block: &Block) {\n                 (\"\".to_owned(), \"\".to_owned(), \"\".to_owned())\n             };\n \n-            let span = mk_sp(first.span.lo, second.span.hi);\n+            let span = Span{ lo: first.span.lo, hi: second.span.hi, ctxt: NO_EXPANSION};\n \n             span_lint_and_then(cx,\n                                ALMOST_SWAPPED,"}, {"sha": "a818f99fec4154b4789d660f702feeac35589ce1", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             },\n             (&ExprIndex(ref la, ref li), &ExprIndex(ref ra, ref ri)) => self.eq_expr(la, ra) && self.eq_expr(li, ri),\n             (&ExprIf(ref lc, ref lt, ref le), &ExprIf(ref rc, ref rt, ref re)) => {\n-                self.eq_expr(lc, rc) && self.eq_block(lt, rt) && both(le, re, |l, r| self.eq_expr(l, r))\n+                    self.eq_expr(lc, rc) && self.eq_expr(&**lt, &**rt) && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n             (&ExprLit(ref l), &ExprLit(ref r)) => l.node == r.node,\n             (&ExprLoop(ref lb, ref ll, ref lls), &ExprLoop(ref rb, ref rl, ref rls)) => {\n@@ -395,7 +395,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 let c: fn(_, _, _) -> _ = ExprIf;\n                 c.hash(&mut self.s);\n                 self.hash_expr(cond);\n-                self.hash_block(t);\n+                self.hash_expr(&**t);\n                 if let Some(ref e) = *e {\n                     self.hash_expr(e);\n                 }"}, {"sha": "038dfc01d134275b93179749f74def99e9319a22", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n             // not able to capture the error.\n             // Therefore, we need to climb the macro expansion tree and find the\n             // actual span that invoked `declare_lint!`:\n-            let lint_span = cx.sess().codemap().source_callsite(lint_span);\n+            let lint_span = lint_span.ctxt.outer().expn_info().map(|ei| ei.call_site).expect(\"unable to get call_site\");\n \n             if !self.registered_lints.contains(lint_name) {\n                 span_lint(cx,"}, {"sha": "a3d3c05d0387d22e6628ce3c97448cec02d493e6", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -97,7 +97,7 @@ pub mod higher;\n /// Returns true if the two spans come from differing expansions (i.e. one is from a macro and one\n /// isn't).\n pub fn differing_macro_contexts(lhs: Span, rhs: Span) -> bool {\n-    rhs.expn_id != lhs.expn_id\n+    rhs.ctxt != lhs.ctxt\n }\n \n pub fn in_constant(cx: &LateContext, id: NodeId) -> bool {\n@@ -112,41 +112,33 @@ pub fn in_constant(cx: &LateContext, id: NodeId) -> bool {\n \n /// Returns true if this `expn_info` was expanded by any macro.\n pub fn in_macro<'a, T: LintContext<'a>>(cx: &T, span: Span) -> bool {\n-    cx.sess().codemap().with_expn_info(span.expn_id, |info| {\n-        match info {\n-            Some(info) => {\n-                match info.callee.format {\n-                    // don't treat range expressions desugared to structs as \"in_macro\"\n-                    ExpnFormat::CompilerDesugaring(name) => name != \"...\",\n-                    _ => true,\n-                }\n-            },\n-            None => false,\n+    span.ctxt.outer().expn_info().map(|info| {\n+        match info.callee.format {// don't treat range expressions desugared to structs as \"in_macro\"\n+            ExpnFormat::CompilerDesugaring(name) => name != \"...\",\n+            _ => true,\n         }\n-    })\n+    }).unwrap_or(false)\n }\n \n /// Returns true if the macro that expanded the crate was outside of the current crate or was a\n /// compiler plugin.\n pub fn in_external_macro<'a, T: LintContext<'a>>(cx: &T, span: Span) -> bool {\n     /// Invokes `in_macro` with the expansion info of the given span slightly heavy, try to use\n     /// this after other checks have already happened.\n-    fn in_macro_ext<'a, T: LintContext<'a>>(cx: &T, opt_info: Option<&ExpnInfo>) -> bool {\n+    fn in_macro_ext<'a, T: LintContext<'a>>(cx: &T, info: &ExpnInfo) -> bool {\n         // no ExpnInfo = no macro\n-        opt_info.map_or(false, |info| {\n-            if let ExpnFormat::MacroAttribute(..) = info.callee.format {\n-                // these are all plugins\n-                return true;\n-            }\n-            // no span for the callee = external macro\n-            info.callee.span.map_or(true, |span| {\n-                // no snippet = external macro or compiler-builtin expansion\n-                cx.sess().codemap().span_to_snippet(span).ok().map_or(true, |code| !code.starts_with(\"macro_rules\"))\n-            })\n+        if let ExpnFormat::MacroAttribute(..) = info.callee.format {\n+            // these are all plugins\n+            return true;\n+        }\n+        // no span for the callee = external macro\n+        info.callee.span.map_or(true, |span| {\n+            // no snippet = external macro or compiler-builtin expansion\n+            cx.sess().codemap().span_to_snippet(span).ok().map_or(true, |code| !code.starts_with(\"macro_rules\"))\n         })\n     }\n \n-    cx.sess().codemap().with_expn_info(span.expn_id, |info| in_macro_ext(cx, info))\n+    span.ctxt.outer().expn_info().map(|info| in_macro_ext(cx, &info)).unwrap_or(false)\n }\n \n /// Check if a `DefId`'s path matches the given absolute type path usage.\n@@ -695,10 +687,8 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n /// See also `is_direct_expn_of`.\n pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span> {\n     loop {\n-        let span_name_span = cx.tcx\n-            .sess\n-            .codemap()\n-            .with_expn_info(span.expn_id, |expn| expn.map(|ei| (ei.callee.name(), ei.call_site)));\n+        let span_name_span = span.ctxt.outer()\n+            .expn_info().map(|ei| (ei.callee.name(), ei.call_site));\n \n         match span_name_span {\n             Some((mac_name, new_span)) if mac_name == name => return Some(new_span),\n@@ -716,10 +706,8 @@ pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span>\n /// `42` is considered expanded from `foo!` and `bar!` by `is_expn_of` but only `bar!` by\n /// `is_direct_expn_of`.\n pub fn is_direct_expn_of(cx: &LateContext, span: Span, name: &str) -> Option<Span> {\n-    let span_name_span = cx.tcx\n-        .sess\n-        .codemap()\n-        .with_expn_info(span.expn_id, |expn| expn.map(|ei| (ei.callee.name(), ei.call_site)));\n+    let span_name_span = span.ctxt.outer()\n+        .expn_info().map(|ei| (ei.callee.name(), ei.call_site));\n \n     match span_name_span {\n         Some((mac_name, new_span)) if mac_name == name => Some(new_span),"}, {"sha": "da65474ed968a6dc4aacc0dbf73cbd3a3e3c9c3a", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             is_copy(cx, vec_type(cx.tables.expr_ty_adjusted(arg)), cx.tcx.hir.get_parent(expr.id)),\n         ], {\n             // report the error around the `vec!` not inside `<std macros>:`\n-            let span = cx.sess().codemap().source_callsite(arg.span);\n+            let span = arg.span.ctxt.outer().expn_info().map(|info| info.call_site).expect(\"unable to get call_site\");\n             check_vec_macro(cx, &vec_args, span);\n         }}\n     }\n@@ -70,7 +70,7 @@ fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n                 let span = Span {\n                     lo: args[0].span.lo,\n                     hi: last.span.hi,\n-                    expn_id: args[0].span.expn_id,\n+                    ctxt: args[0].span.ctxt,\n                 };\n \n                 format!(\"&[{}]\", snippet(cx, span, \"..\")).into()"}, {"sha": "9f63a6b2d73223f2fc78e1e4a92c88ec445b5ce1", "filename": "tests/run-pass/mut_mut_macro.rs.FIXME", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/tests%2Frun-pass%2Fmut_mut_macro.rs.FIXME", "raw_url": "https://github.com/rust-lang/rust/raw/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e/tests%2Frun-pass%2Fmut_mut_macro.rs.FIXME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmut_mut_macro.rs.FIXME?ref=8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "previous_filename": "tests/run-pass/mut_mut_macro.rs"}]}