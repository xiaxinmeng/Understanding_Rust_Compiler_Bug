{"sha": "9e75b39115180db27888a0a742baba77d0273971", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNzViMzkxMTUxODBkYjI3ODg4YTBhNzQyYmFiYTc3ZDAyNzM5NzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-11T10:57:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T10:57:21Z"}, "message": "Merge #5312\n\n5312: Make slow test parallel r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "cbb53fbb18f6df4925636e3cdd0c68e07c832336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbb53fbb18f6df4925636e3cdd0c68e07c832336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e75b39115180db27888a0a742baba77d0273971", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCZsRCRBK7hj4Ov3rIwAAdHIIAABuunw94RI8tWpFrWE1W8Or\nmmQzF1XOxKzCWHXsPUcTNN5QPvFgynXBbZvRyPbpacC+4bKSL+qeWjvTx8JYRgNC\n3eJMJlmTAX1QDcbEJUEG4TIWOWQ5WseeZZUIJ7S2Zfz86rN4ASsdDMM6Q5rcmp62\nt6/WRpKKGGf3NBSetPOnD9YFU8hzgip1MP6yn+qjztWaxL9d9UNQN6PHE6RMguIH\nGuDKJN9zami3f+NrqWLuXGHEmDXoyPFG+5miiICx37+IKStQNQiFp/RNBBOGz7v0\nTNPo2hS4yRjzcHdRyN01IhGosjEOUMsQRkeWG8sZTM06m+RhDglQQpHh/60Bs0Y=\n=j06t\n-----END PGP SIGNATURE-----\n", "payload": "tree cbb53fbb18f6df4925636e3cdd0c68e07c832336\nparent ba48c6548c4e9a1fa6a4c12372c64d41781c1559\nparent 9a3c22bbfd823601acd39473bea154be14c82770\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594465041 +0000\ncommitter GitHub <noreply@github.com> 1594465041 +0000\n\nMerge #5312\n\n5312: Make slow test parallel r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e75b39115180db27888a0a742baba77d0273971", "html_url": "https://github.com/rust-lang/rust/commit/9e75b39115180db27888a0a742baba77d0273971", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e75b39115180db27888a0a742baba77d0273971/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba48c6548c4e9a1fa6a4c12372c64d41781c1559", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba48c6548c4e9a1fa6a4c12372c64d41781c1559", "html_url": "https://github.com/rust-lang/rust/commit/ba48c6548c4e9a1fa6a4c12372c64d41781c1559"}, {"sha": "9a3c22bbfd823601acd39473bea154be14c82770", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3c22bbfd823601acd39473bea154be14c82770", "html_url": "https://github.com/rust-lang/rust/commit/9a3c22bbfd823601acd39473bea154be14c82770"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "09909b60a881690abd8c24e97a0b332333b6470f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e75b39115180db27888a0a742baba77d0273971/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9e75b39115180db27888a0a742baba77d0273971/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9e75b39115180db27888a0a742baba77d0273971", "patch": "@@ -1267,6 +1267,7 @@ dependencies = [\n  \"once_cell\",\n  \"ra_parser\",\n  \"ra_text_edit\",\n+ \"rayon\",\n  \"rowan\",\n  \"rustc-ap-rustc_lexer\",\n  \"rustc-hash\","}, {"sha": "57cc09854b55a6537cc2674eb94df7d6a0fdba97", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e75b39115180db27888a0a742baba77d0273971/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9e75b39115180db27888a0a742baba77d0273971/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=9e75b39115180db27888a0a742baba77d0273971", "patch": "@@ -33,3 +33,4 @@ serde = { version = \"1.0.106\", features = [\"derive\"] }\n test_utils = { path = \"../test_utils\" }\n expect = { path = \"../expect\" }\n walkdir = \"2.3.1\"\n+rayon = \"1\""}, {"sha": "8447dcad70591d6c1b23804e001c61f4abed50dd", "filename": "crates/ra_syntax/src/tests.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9e75b39115180db27888a0a742baba77d0273971/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e75b39115180db27888a0a742baba77d0273971/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftests.rs?ref=9e75b39115180db27888a0a742baba77d0273971", "patch": "@@ -1,10 +1,11 @@\n use std::{\n     fmt::Write,\n     fs,\n-    path::{Component, Path, PathBuf},\n+    path::{Path, PathBuf},\n };\n \n use expect::expect_file;\n+use rayon::prelude::*;\n use test_utils::project_dir;\n \n use crate::{fuzz, tokenize, SourceFile, SyntaxError, TextRange, TextSize, Token};\n@@ -121,33 +122,43 @@ fn reparse_fuzz_tests() {\n /// FIXME: Use this as a benchmark\n #[test]\n fn self_hosting_parsing() {\n-    use std::ffi::OsStr;\n     let dir = project_dir().join(\"crates\");\n-    let mut count = 0;\n-    for entry in walkdir::WalkDir::new(dir)\n+    let files = walkdir::WalkDir::new(dir)\n         .into_iter()\n         .filter_entry(|entry| {\n-            !entry.path().components().any(|component| {\n-                // Get all files which are not in the crates/ra_syntax/test_data folder\n-                component == Component::Normal(OsStr::new(\"test_data\"))\n-            })\n+            // Get all files which are not in the crates/ra_syntax/test_data folder\n+            !entry.path().components().any(|component| component.as_os_str() == \"test_data\")\n         })\n         .map(|e| e.unwrap())\n         .filter(|entry| {\n             // Get all `.rs ` files\n-            !entry.path().is_dir() && (entry.path().extension() == Some(OsStr::new(\"rs\")))\n+            !entry.path().is_dir() && (entry.path().extension().unwrap_or_default() == \"rs\")\n         })\n-    {\n-        count += 1;\n-        let text = read_text(entry.path());\n-        if let Err(errors) = SourceFile::parse(&text).ok() {\n-            panic!(\"Parsing errors:\\n{:?}\\n{}\\n\", errors, entry.path().display());\n-        }\n-    }\n+        .map(|entry| entry.into_path())\n+        .collect::<Vec<_>>();\n     assert!(\n-        count > 30,\n+        files.len() > 100,\n         \"self_hosting_parsing found too few files - is it running in the right directory?\"\n-    )\n+    );\n+\n+    let errors = files\n+        .into_par_iter()\n+        .filter_map(|file| {\n+            let text = read_text(&file);\n+            match SourceFile::parse(&text).ok() {\n+                Ok(_) => None,\n+                Err(err) => Some((file, err)),\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    if !errors.is_empty() {\n+        let errors = errors\n+            .into_iter()\n+            .map(|(path, err)| format!(\"{}: {:?}\\n\", path.display(), err))\n+            .collect::<String>();\n+        panic!(\"Parsing errors:\\n{}\\n\", errors);\n+    }\n }\n \n fn test_data_dir() -> PathBuf {"}]}