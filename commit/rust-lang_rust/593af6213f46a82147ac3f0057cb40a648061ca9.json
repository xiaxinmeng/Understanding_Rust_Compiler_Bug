{"sha": "593af6213f46a82147ac3f0057cb40a648061ca9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5M2FmNjIxM2Y0NmE4MjE0N2FjM2YwMDU3Y2I0MGE2NDgwNjFjYTk=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-23T19:12:01Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-23T19:12:01Z"}, "message": "rollup merge of #19234: P1start/rustdoc-misc\n\nThis PR:\n\n- makes rustdoc colour trait methods like other functions in search results;\n- makes rustdoc display `extern crate` statements with the new `as` syntax instead of the old `=` syntax;\n- changes rustdoc to list constants and statics in a way that is more similar to functions and modules and show their full definition and documentation on their own page, fixing #19046:\n\n  ![Constant listing](https://i.imgur.com/L4ZTOCN.png)\n\n  ![Constant page](https://i.imgur.com/RcjZfCv.png)", "tree": {"sha": "146363c80a39fadf3d9392b5a97238996de47c70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/146363c80a39fadf3d9392b5a97238996de47c70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/593af6213f46a82147ac3f0057cb40a648061ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/593af6213f46a82147ac3f0057cb40a648061ca9", "html_url": "https://github.com/rust-lang/rust/commit/593af6213f46a82147ac3f0057cb40a648061ca9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/593af6213f46a82147ac3f0057cb40a648061ca9/comments", "author": null, "committer": null, "parents": [{"sha": "e9fcfe6a914a0de82bf5e1e8e2b0186569566f37", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9fcfe6a914a0de82bf5e1e8e2b0186569566f37", "html_url": "https://github.com/rust-lang/rust/commit/e9fcfe6a914a0de82bf5e1e8e2b0186569566f37"}, {"sha": "55af4aff5641232e5c08ecf2402b1c795a24e50b", "url": "https://api.github.com/repos/rust-lang/rust/commits/55af4aff5641232e5c08ecf2402b1c795a24e50b", "html_url": "https://github.com/rust-lang/rust/commit/55af4aff5641232e5c08ecf2402b1c795a24e50b"}], "stats": {"total": 108, "additions": 45, "deletions": 63}, "files": [{"sha": "f9c509cce1461179afdb232231f1a8824cf1bfcb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/593af6213f46a82147ac3f0057cb40a648061ca9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/593af6213f46a82147ac3f0057cb40a648061ca9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=593af6213f46a82147ac3f0057cb40a648061ca9", "patch": "@@ -1923,7 +1923,7 @@ impl Clean<ViewItemInner> for ast::ViewItem_ {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub enum ViewPath {\n-    // use str = source;\n+    // use source as str;\n     SimpleImport(String, ImportSource),\n     // use source::*;\n     GlobImport(ImportSource),"}, {"sha": "9e3c336a7a06cc3f5c4619fb22c3efaf0bbf4f64", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 42, "deletions": 62, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/593af6213f46a82147ac3f0057cb40a648061ca9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/593af6213f46a82147ac3f0057cb40a648061ca9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=593af6213f46a82147ac3f0057cb40a648061ca9", "patch": "@@ -1428,6 +1428,8 @@ impl<'a> fmt::Show for Item<'a> {\n             clean::TypedefItem(ref t) => item_typedef(fmt, self.item, t),\n             clean::MacroItem(ref m) => item_macro(fmt, self.item, m),\n             clean::PrimitiveItem(ref p) => item_primitive(fmt, self.item, p),\n+            clean::StaticItem(ref i) => item_static(fmt, self.item, i),\n+            clean::ConstantItem(ref c) => item_constant(fmt, self.item, c),\n             _ => Ok(())\n         }\n     }\n@@ -1453,13 +1455,6 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     return s\n }\n \n-fn blank<'a>(s: Option<&'a str>) -> &'a str {\n-    match s {\n-        Some(s) => s,\n-        None => \"\"\n-    }\n-}\n-\n fn shorter<'a>(s: Option<&'a str>) -> &'a str {\n     match s {\n         Some(s) => match s.find_str(\"\\n\\n\") {\n@@ -1570,66 +1565,18 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                         id = short, name = name));\n         }\n \n-        struct Initializer<'a>(&'a str, Item<'a>);\n-        impl<'a> fmt::Show for Initializer<'a> {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                let Initializer(s, item) = *self;\n-                if s.len() == 0 { return Ok(()); }\n-                try!(write!(f, \"<code> = </code>\"));\n-                if s.contains(\"\\n\") {\n-                    match item.href() {\n-                        Some(url) => {\n-                            write!(f, \"<a href='{}'>[definition]</a>\",\n-                                   url)\n-                        }\n-                        None => Ok(()),\n-                    }\n-                } else {\n-                    write!(f, \"<code>{}</code>\", s.as_slice())\n-                }\n-            }\n-        }\n-\n         match myitem.inner {\n-            clean::StaticItem(ref s) | clean::ForeignStaticItem(ref s) => {\n-                try!(write!(w, \"\n-                    <tr>\n-                        <td>{}<code>{}static {}{}: {}</code>{}</td>\n-                        <td class='docblock'>{}&nbsp;</td>\n-                    </tr>\n-                \",\n-                ConciseStability(&myitem.stability),\n-                VisSpace(myitem.visibility),\n-                MutableSpace(s.mutability),\n-                *myitem.name.as_ref().unwrap(),\n-                s.type_,\n-                Initializer(s.expr.as_slice(), Item { cx: cx, item: myitem }),\n-                Markdown(blank(myitem.doc_value()))));\n-            }\n-            clean::ConstantItem(ref s) => {\n-                try!(write!(w, \"\n-                    <tr>\n-                        <td>{}<code>{}const {}: {}</code>{}</td>\n-                        <td class='docblock'>{}&nbsp;</td>\n-                    </tr>\n-                \",\n-                ConciseStability(&myitem.stability),\n-                VisSpace(myitem.visibility),\n-                *myitem.name.as_ref().unwrap(),\n-                s.type_,\n-                Initializer(s.expr.as_slice(), Item { cx: cx, item: myitem }),\n-                Markdown(blank(myitem.doc_value()))));\n-            }\n-\n             clean::ViewItemItem(ref item) => {\n                 match item.inner {\n                     clean::ExternCrate(ref name, ref src, _) => {\n-                        try!(write!(w, \"<tr><td><code>extern crate {}\",\n-                                      name.as_slice()));\n                         match *src {\n-                            Some(ref src) => try!(write!(w, \" = \\\"{}\\\"\",\n-                                                           src.as_slice())),\n-                            None => {}\n+                            Some(ref src) =>\n+                                try!(write!(w, \"<tr><td><code>extern crate \\\"{}\\\" as {}\",\n+                                            src.as_slice(),\n+                                            name.as_slice())),\n+                            None =>\n+                                try!(write!(w, \"<tr><td><code>extern crate {}\",\n+                                            name.as_slice())),\n                         }\n                         try!(write!(w, \";</code></td></tr>\"));\n                     }\n@@ -1665,6 +1612,39 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     write!(w, \"</table>\")\n }\n \n+struct Initializer<'a>(&'a str);\n+impl<'a> fmt::Show for Initializer<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let Initializer(s) = *self;\n+        if s.len() == 0 { return Ok(()); }\n+        try!(write!(f, \"<code> = </code>\"));\n+        write!(f, \"<code>{}</code>\", s.as_slice())\n+    }\n+}\n+\n+fn item_constant(w: &mut fmt::Formatter, it: &clean::Item,\n+                 c: &clean::Constant) -> fmt::Result {\n+    try!(write!(w, \"<pre class='rust const'>{vis}const \\\n+                    {name}: {typ}{init}</pre>\",\n+           vis = VisSpace(it.visibility),\n+           name = it.name.as_ref().unwrap().as_slice(),\n+           typ = c.type_,\n+           init = Initializer(c.expr.as_slice())));\n+    document(w, it)\n+}\n+\n+fn item_static(w: &mut fmt::Formatter, it: &clean::Item,\n+               s: &clean::Static) -> fmt::Result {\n+    try!(write!(w, \"<pre class='rust static'>{vis}static {mutability}\\\n+                    {name}: {typ}{init}</pre>\",\n+           vis = VisSpace(it.visibility),\n+           mutability = MutableSpace(s.mutability),\n+           name = it.name.as_ref().unwrap().as_slice(),\n+           typ = s.type_,\n+           init = Initializer(s.expr.as_slice())));\n+    document(w, it)\n+}\n+\n fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n     try!(write!(w, \"<pre class='rust fn'>{vis}{fn_style}fn \\"}, {"sha": "4c019550395474c2ff6fa0d8066c4869655a6166", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/593af6213f46a82147ac3f0057cb40a648061ca9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/593af6213f46a82147ac3f0057cb40a648061ca9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=593af6213f46a82147ac3f0057cb40a648061ca9", "patch": "@@ -234,6 +234,7 @@ nav.sub {\n .content .highlighted.struct { background-color: #e7b1a0; }\n .content .highlighted.fn { background-color: #c6afb3; }\n .content .highlighted.method { background-color: #c6afb3; }\n+.content .highlighted.tymethod { background-color: #c6afb3; }\n .content .highlighted.ffi { background-color: #c6afb3; }\n \n .docblock.short.nowrap {\n@@ -348,6 +349,7 @@ p a:hover { text-decoration: underline; }\n .content span.struct, .content a.struct, .block a.current.struct { color: #e53700; }\n .content span.fn, .content a.fn, .block a.current.fn { color: #8c6067; }\n .content span.method, .content a.method, .block a.current.method { color: #8c6067; }\n+.content span.tymethod, .content a.tymethod, .block a.current.tymethod { color: #8c6067; }\n .content span.ffi, .content a.ffi, .block a.current.ffi { color: #8c6067; }\n .content .fnname { color: #8c6067; }\n "}]}