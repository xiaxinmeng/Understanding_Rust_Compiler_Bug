{"sha": "daeb844e0ccddb9e058128974b290f2022e88be7", "node_id": "C_kwDOAAsO6NoAKGRhZWI4NDRlMGNjZGRiOWUwNTgxMjg5NzRiMjkwZjIwMjJlODhiZTc", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-10-08T22:47:59Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-04-06T08:34:16Z"}, "message": "Refactor unwind from Option to a new enum", "tree": {"sha": "2d0be78154d1f2748841b79cded649158b2a012a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d0be78154d1f2748841b79cded649158b2a012a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daeb844e0ccddb9e058128974b290f2022e88be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daeb844e0ccddb9e058128974b290f2022e88be7", "html_url": "https://github.com/rust-lang/rust/commit/daeb844e0ccddb9e058128974b290f2022e88be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daeb844e0ccddb9e058128974b290f2022e88be7/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f6edd3f15f75f0df70027edee2a520820d14217", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6edd3f15f75f0df70027edee2a520820d14217", "html_url": "https://github.com/rust-lang/rust/commit/7f6edd3f15f75f0df70027edee2a520820d14217"}], "stats": {"total": 578, "additions": 328, "deletions": 250}, "files": [{"sha": "e2d04324f3b62a7c2bf7d03457b39b022dbe7297", "filename": "compiler/rustc_borrowck/src/diagnostics/find_use.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -11,7 +11,7 @@ use crate::{\n };\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_middle::mir::visit::{MirVisitable, PlaceContext, Visitor};\n-use rustc_middle::mir::{Body, Local, Location};\n+use rustc_middle::mir::{self, Body, Local, Location};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n \n pub(crate) fn find<'tcx>(\n@@ -70,7 +70,10 @@ impl<'cx, 'tcx> UseFinder<'cx, 'tcx> {\n                             block_data\n                                 .terminator()\n                                 .successors()\n-                                .filter(|&bb| Some(&Some(bb)) != block_data.terminator().unwind())\n+                                .filter(|&bb| {\n+                                    Some(&mir::UnwindAction::Cleanup(bb))\n+                                        != block_data.terminator().unwind()\n+                                })\n                                 .map(|bb| Location { statement_index: 0, block: bb }),\n                         );\n                     }"}, {"sha": "f69b35549b41c8f7cbac616716f29fbdc9665518", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -125,7 +125,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 args,\n                 destination,\n                 target: _,\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n@@ -135,7 +135,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 }\n                 self.mutate_place(location, *destination, Deep);\n             }\n-            TerminatorKind::Assert { cond, expected: _, msg, target: _, cleanup: _ } => {\n+            TerminatorKind::Assert { cond, expected: _, msg, target: _, unwind: _ } => {\n                 self.consume_operand(location, cond);\n                 use rustc_middle::mir::AssertKind;\n                 if let AssertKind::BoundsCheck { len, index } = msg {\n@@ -173,7 +173,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 options: _,\n                 line_spans: _,\n                 destination: _,\n-                cleanup: _,\n+                unwind: _,\n             } => {\n                 for op in operands {\n                     match op {"}, {"sha": "4787b0ea4e9d03e97d4304949f794293027b3212", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -740,7 +740,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 args,\n                 destination,\n                 target: _,\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n@@ -750,7 +750,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 }\n                 self.mutate_place(loc, (*destination, span), Deep, flow_state);\n             }\n-            TerminatorKind::Assert { cond, expected: _, msg, target: _, cleanup: _ } => {\n+            TerminatorKind::Assert { cond, expected: _, msg, target: _, unwind: _ } => {\n                 self.consume_operand(loc, (cond, span), flow_state);\n                 use rustc_middle::mir::AssertKind;\n                 if let AssertKind::BoundsCheck { len, index } = msg {\n@@ -770,7 +770,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 options: _,\n                 line_spans: _,\n                 destination: _,\n-                cleanup: _,\n+                unwind: _,\n             } => {\n                 for op in operands {\n                     match op {"}, {"sha": "10332c6d9b5f90c791b16be5b389df73902b8e95", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -1610,20 +1610,20 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::Unreachable => {}\n             TerminatorKind::Drop { target, unwind, .. }\n-            | TerminatorKind::Assert { target, cleanup: unwind, .. } => {\n+            | TerminatorKind::Assert { target, unwind, .. } => {\n                 self.assert_iscleanup(body, block_data, target, is_cleanup);\n-                if let Some(unwind) = unwind {\n+                if let UnwindAction::Cleanup(unwind) = unwind {\n                     if is_cleanup {\n                         span_mirbug!(self, block_data, \"unwind on cleanup block\")\n                     }\n                     self.assert_iscleanup(body, block_data, unwind, true);\n                 }\n             }\n-            TerminatorKind::Call { ref target, cleanup, .. } => {\n+            TerminatorKind::Call { ref target, unwind, .. } => {\n                 if let &Some(target) = target {\n                     self.assert_iscleanup(body, block_data, target, is_cleanup);\n                 }\n-                if let Some(cleanup) = cleanup {\n+                if let UnwindAction::Cleanup(cleanup) = unwind {\n                     if is_cleanup {\n                         span_mirbug!(self, block_data, \"cleanup on cleanup block\")\n                     }\n@@ -1636,18 +1636,18 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::FalseUnwind { real_target, unwind } => {\n                 self.assert_iscleanup(body, block_data, real_target, is_cleanup);\n-                if let Some(unwind) = unwind {\n+                if let UnwindAction::Cleanup(unwind) = unwind {\n                     if is_cleanup {\n                         span_mirbug!(self, block_data, \"cleanup in cleanup block via false unwind\");\n                     }\n                     self.assert_iscleanup(body, block_data, unwind, true);\n                 }\n             }\n-            TerminatorKind::InlineAsm { destination, cleanup, .. } => {\n+            TerminatorKind::InlineAsm { destination, unwind, .. } => {\n                 if let Some(target) = destination {\n                     self.assert_iscleanup(body, block_data, target, is_cleanup);\n                 }\n-                if let Some(cleanup) = cleanup {\n+                if let UnwindAction::Cleanup(cleanup) = unwind {\n                     if is_cleanup {\n                         span_mirbug!(self, block_data, \"cleanup on cleanup block\")\n                     }"}, {"sha": "94413318492f1cb50d29c8f79986276b50e3c22e", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -345,7 +345,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n             TerminatorKind::Return => {\n                 crate::abi::codegen_return(fx);\n             }\n-            TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n+            TerminatorKind::Assert { cond, expected, msg, target, unwind: _ } => {\n                 if !fx.tcx.sess.overflow_checks() && msg.is_optional_overflow_check() {\n                     let target = fx.get_block(*target);\n                     fx.bcx.ins().jump(target, &[]);\n@@ -450,7 +450,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 destination,\n                 target,\n                 fn_span,\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n             } => {\n                 fx.tcx.prof.generic_activity(\"codegen call\").run(|| {\n@@ -470,7 +470,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 options,\n                 destination,\n                 line_spans: _,\n-                cleanup: _,\n+                unwind: _,\n             } => {\n                 if options.contains(InlineAsmOptions::MAY_UNWIND) {\n                     fx.tcx.sess.span_fatal("}, {"sha": "7d1c80ba88f844d4ada74a6e92f1323f9357eaae", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -292,11 +292,11 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n                 | TerminatorKind::Yield { .. }\n                 | TerminatorKind::FalseEdge { .. }\n                 | TerminatorKind::FalseUnwind { .. } => { /* nothing to do */ }\n-                TerminatorKind::Call { cleanup: unwind, .. }\n-                | TerminatorKind::InlineAsm { cleanup: unwind, .. }\n-                | TerminatorKind::Assert { cleanup: unwind, .. }\n+                TerminatorKind::Call { unwind, .. }\n+                | TerminatorKind::InlineAsm { unwind, .. }\n+                | TerminatorKind::Assert { unwind, .. }\n                 | TerminatorKind::Drop { unwind, .. } => {\n-                    if let Some(unwind) = unwind {\n+                    if let mir::UnwindAction::Cleanup(unwind) = unwind {\n                         debug!(\n                             \"cleanup_kinds: {:?}/{:?} registering {:?} as funclet\",\n                             bb, data, unwind"}, {"sha": "a6891a8ff2f950db712ade807fb81aac189e2fe5", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -156,14 +156,18 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         fn_ptr: Bx::Value,\n         llargs: &[Bx::Value],\n         destination: Option<(ReturnDest<'tcx, Bx::Value>, mir::BasicBlock)>,\n-        cleanup: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         copied_constant_arguments: &[PlaceRef<'tcx, <Bx as BackendTypes>::Value>],\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n         // If there is a cleanup block and the function we're calling can unwind, then\n         // do an invoke, otherwise do a call.\n         let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n \n+        let cleanup = match unwind {\n+            mir::UnwindAction::Cleanup(cleanup) => Some(cleanup),\n+            mir::UnwindAction::Continue => None,\n+        };\n         let unwind_block = if let Some(cleanup) = cleanup.filter(|_| fn_abi.can_unwind) {\n             Some(self.llbb_with_cleanup(fx, cleanup))\n         } else if fx.mir[self.bb].is_cleanup\n@@ -244,11 +248,11 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         options: InlineAsmOptions,\n         line_spans: &[Span],\n         destination: Option<mir::BasicBlock>,\n-        cleanup: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         instance: Instance<'_>,\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n-        if let Some(cleanup) = cleanup {\n+        if let mir::UnwindAction::Cleanup(cleanup) = unwind {\n             let ret_llbb = if let Some(target) = destination {\n                 fx.llbb(target)\n             } else {\n@@ -431,7 +435,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &mut Bx,\n         location: mir::Place<'tcx>,\n         target: mir::BasicBlock,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n         let ty = location.ty(self.mir, bx.tcx()).ty;\n@@ -552,7 +556,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         expected: bool,\n         msg: &mir::AssertMessage<'tcx>,\n         target: mir::BasicBlock,\n-        cleanup: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n         let span = terminator.source_info.span;\n@@ -618,7 +622,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let (fn_abi, llfn) = common::build_langcall(bx, Some(span), lang_item);\n \n         // Codegen the actual panic invoke/call.\n-        let merging_succ = helper.do_call(self, bx, fn_abi, llfn, &args, None, cleanup, &[], false);\n+        let merging_succ = helper.do_call(self, bx, fn_abi, llfn, &args, None, unwind, &[], false);\n         assert_eq!(merging_succ, MergingSucc::False);\n         MergingSucc::False\n     }\n@@ -636,7 +640,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let (fn_abi, llfn) = common::build_langcall(bx, Some(span), LangItem::PanicCannotUnwind);\n \n         // Codegen the actual panic invoke/call.\n-        let merging_succ = helper.do_call(self, bx, fn_abi, llfn, &[], None, None, &[], false);\n+        let merging_succ = helper.do_call(self, bx, fn_abi, llfn, &[], None, mir::UnwindAction::Continue, &[], false);\n         assert_eq!(merging_succ, MergingSucc::False);\n     }\n \n@@ -649,7 +653,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         instance: Option<Instance<'tcx>>,\n         source_info: mir::SourceInfo,\n         target: Option<mir::BasicBlock>,\n-        cleanup: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         mergeable_succ: bool,\n     ) -> Option<MergingSucc> {\n         // Emit a panic or a no-op for `assert_*` intrinsics.\n@@ -696,7 +700,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     llfn,\n                     &[msg.0, msg.1],\n                     target.as_ref().map(|bb| (ReturnDest::Nothing, *bb)),\n-                    cleanup,\n+                    unwind,\n                     &[],\n                     mergeable_succ,\n                 )\n@@ -719,7 +723,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         args: &[mir::Operand<'tcx>],\n         destination: mir::Place<'tcx>,\n         target: Option<mir::BasicBlock>,\n-        cleanup: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         fn_span: Span,\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n@@ -783,7 +787,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             instance,\n             source_info,\n             target,\n-            cleanup,\n+            unwind,\n             mergeable_succ,\n         ) {\n             return merging_succ;\n@@ -1064,7 +1068,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 fn_ptr,\n                 &llargs,\n                 target.as_ref().map(|&target| (ret_dest, target)),\n-                cleanup,\n+                unwind,\n                 &copied_constant_arguments,\n                 false,\n             );\n@@ -1084,7 +1088,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             fn_ptr,\n             &llargs,\n             target.as_ref().map(|&target| (ret_dest, target)),\n-            cleanup,\n+            unwind,\n             &copied_constant_arguments,\n             mergeable_succ,\n         )\n@@ -1100,7 +1104,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         options: ast::InlineAsmOptions,\n         line_spans: &[Span],\n         destination: Option<mir::BasicBlock>,\n-        cleanup: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n         instance: Instance<'_>,\n         mergeable_succ: bool,\n     ) -> MergingSucc {\n@@ -1164,7 +1168,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             options,\n             line_spans,\n             destination,\n-            cleanup,\n+            unwind,\n             instance,\n             mergeable_succ,\n         )\n@@ -1274,7 +1278,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.codegen_drop_terminator(helper, bx, place, target, unwind, mergeable_succ())\n             }\n \n-            mir::TerminatorKind::Assert { ref cond, expected, ref msg, target, cleanup } => self\n+            mir::TerminatorKind::Assert { ref cond, expected, ref msg, target, unwind } => self\n                 .codegen_assert_terminator(\n                     helper,\n                     bx,\n@@ -1283,7 +1287,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     expected,\n                     msg,\n                     target,\n-                    cleanup,\n+                    unwind,\n                     mergeable_succ(),\n                 ),\n \n@@ -1292,7 +1296,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 ref args,\n                 destination,\n                 target,\n-                cleanup,\n+                unwind,\n                 from_hir_call: _,\n                 fn_span,\n             } => self.codegen_call_terminator(\n@@ -1303,7 +1307,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 args,\n                 destination,\n                 target,\n-                cleanup,\n+                unwind,\n                 fn_span,\n                 mergeable_succ(),\n             ),\n@@ -1320,7 +1324,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 options,\n                 line_spans,\n                 destination,\n-                cleanup,\n+                unwind,\n             } => self.codegen_asm_terminator(\n                 helper,\n                 bx,\n@@ -1330,7 +1334,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 options,\n                 line_spans,\n                 destination,\n-                cleanup,\n+                unwind,\n                 self.instance,\n                 mergeable_succ(),\n             ),"}, {"sha": "5fd99a9a84ac783953f03b8bb17a2928390bc08e", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -526,7 +526,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     fn assert_panic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         msg: &AssertMessage<'tcx>,\n-        _unwind: Option<mir::BasicBlock>,\n+        _unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         use rustc_middle::mir::AssertKind::*;\n         // Convert `AssertKind<Operand>` to `AssertKind<Scalar>`."}, {"sha": "ca4da29ebbd3980a9650e2881817fa90932171a2", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -215,7 +215,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn assert_panic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         msg: &mir::AssertMessage<'tcx>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx>;\n \n     /// Called to evaluate `Abort` MIR terminator."}, {"sha": "2546423d4cce91adb3cbfe38347b21680764f638", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -60,7 +60,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 ref args,\n                 destination,\n                 target,\n-                ref cleanup,\n+                ref unwind,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n@@ -106,9 +106,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     with_caller_location,\n                     &destination,\n                     target,\n-                    match (cleanup, fn_abi.can_unwind) {\n-                        (Some(cleanup), true) => StackPopUnwind::Cleanup(*cleanup),\n-                        (None, true) => StackPopUnwind::Skip,\n+                    match (unwind, fn_abi.can_unwind) {\n+                        (mir::UnwindAction::Cleanup(cleanup), true) => {\n+                            StackPopUnwind::Cleanup(*cleanup)\n+                        }\n+                        (mir::UnwindAction::Continue, true) => StackPopUnwind::Skip,\n                         (_, false) => StackPopUnwind::NotAllowed,\n                     },\n                 )?;\n@@ -137,14 +139,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.drop_in_place(&place, instance, target, unwind)?;\n             }\n \n-            Assert { ref cond, expected, ref msg, target, cleanup } => {\n+            Assert { ref cond, expected, ref msg, target, unwind } => {\n                 let ignored =\n                     M::ignore_optional_overflow_checks(self) && msg.is_optional_overflow_check();\n                 let cond_val = self.read_scalar(&self.eval_operand(cond, None)?)?.to_bool()?;\n                 if ignored || expected == cond_val {\n                     self.go_to_block(target);\n                 } else {\n-                    M::assert_panic(self, msg, cleanup)?;\n+                    M::assert_panic(self, msg, unwind)?;\n                 }\n             }\n \n@@ -676,7 +678,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         place: &PlaceTy<'tcx, M::Provenance>,\n         instance: ty::Instance<'tcx>,\n         target: mir::BasicBlock,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         trace!(\"drop_in_place: {:?},\\n  {:?}, {:?}\", *place, place.layout.ty, instance);\n         // We take the address of the object. This may well be unaligned, which is fine\n@@ -718,8 +720,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             &ret.into(),\n             Some(target),\n             match unwind {\n-                Some(cleanup) => StackPopUnwind::Cleanup(cleanup),\n-                None => StackPopUnwind::Skip,\n+                mir::UnwindAction::Cleanup(cleanup) => StackPopUnwind::Cleanup(cleanup),\n+                mir::UnwindAction::Continue => StackPopUnwind::Skip,\n             },\n         )\n     }"}, {"sha": "7919aed097a452dc19479bbc734b6704cafee068", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -807,7 +807,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         kind: TerminatorKind::Call {\n                             func,\n                             args,\n-                            cleanup: None,\n+                            unwind: UnwindAction::Continue,\n                             destination: Place::from(new_temp),\n                             target: Some(new_target),\n                             from_hir_call,"}, {"sha": "be840ef6f7f73cc4ad13767fef7ba1c4fedd3135", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::{\n     traversal, BasicBlock, BinOp, Body, BorrowKind, CastKind, CopyNonOverlapping, Local, Location,\n     MirPass, MirPhase, NonDivergingIntrinsic, Operand, Place, PlaceElem, PlaceRef, ProjectionElem,\n     RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n-    TerminatorKind, UnOp, VarDebugInfo, VarDebugInfoContents, START_BLOCK,\n+    TerminatorKind, UnOp, UnwindAction, VarDebugInfo, VarDebugInfoContents, START_BLOCK,\n };\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n@@ -902,11 +902,11 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::Drop { target, unwind, .. } => {\n                 self.check_edge(location, *target, EdgeKind::Normal);\n-                if let Some(unwind) = unwind {\n+                if let UnwindAction::Cleanup(unwind) = unwind {\n                     self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n-            TerminatorKind::Call { func, args, destination, target, cleanup, .. } => {\n+            TerminatorKind::Call { func, args, destination, target, unwind, .. } => {\n                 let func_ty = func.ty(&self.body.local_decls, self.tcx);\n                 match func_ty.kind() {\n                     ty::FnPtr(..) | ty::FnDef(..) => {}\n@@ -918,7 +918,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 if let Some(target) = target {\n                     self.check_edge(location, *target, EdgeKind::Normal);\n                 }\n-                if let Some(cleanup) = cleanup {\n+                if let UnwindAction::Cleanup(cleanup) = unwind {\n                     self.check_edge(location, *cleanup, EdgeKind::Unwind);\n                 }\n \n@@ -946,7 +946,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            TerminatorKind::Assert { cond, target, cleanup, .. } => {\n+            TerminatorKind::Assert { cond, target, unwind, .. } => {\n                 let cond_ty = cond.ty(&self.body.local_decls, self.tcx);\n                 if cond_ty != self.tcx.types.bool {\n                     self.fail(\n@@ -958,7 +958,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 self.check_edge(location, *target, EdgeKind::Normal);\n-                if let Some(cleanup) = cleanup {\n+                if let UnwindAction::Cleanup(cleanup) = unwind {\n                     self.check_edge(location, *cleanup, EdgeKind::Unwind);\n                 }\n             }\n@@ -992,15 +992,15 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 self.check_edge(location, *real_target, EdgeKind::Normal);\n-                if let Some(unwind) = unwind {\n+                if let UnwindAction::Cleanup(unwind) = unwind {\n                     self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n-            TerminatorKind::InlineAsm { destination, cleanup, .. } => {\n+            TerminatorKind::InlineAsm { destination, unwind, .. } => {\n                 if let Some(destination) = destination {\n                     self.check_edge(location, *destination, EdgeKind::Normal);\n                 }\n-                if let Some(cleanup) = cleanup {\n+                if let UnwindAction::Cleanup(cleanup) = unwind {\n                     self.check_edge(location, *cleanup, EdgeKind::Unwind);\n                 }\n             }"}, {"sha": "c2a12bb3b662aa18b579f81f4e87bc83a38120f6", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -515,14 +515,14 @@ pub struct CopyNonOverlapping<'tcx> {\n ///\n /// A note on unwinding: Panics may occur during the execution of some terminators. Depending on the\n /// `-C panic` flag, this may either cause the program to abort or the call stack to unwind. Such\n-/// terminators have a `cleanup: Option<BasicBlock>` field on them. If stack unwinding occurs, then\n-/// once the current function is reached, execution continues at the given basic block, if any. If\n-/// `cleanup` is `None` then no cleanup is performed, and the stack continues unwinding. This is\n-/// equivalent to the execution of a `Resume` terminator.\n+/// terminators have a `unwind: UnwindAction` field on them. If stack unwinding occurs, then\n+/// once the current function is reached, an action will be taken based on the `unwind` field.\n+/// If the action is `Cleanup`, then the execution continues at the given basic block. If the\n+/// action is `Continue` then no cleanup is performed, and the stack continues unwinding.\n ///\n-/// The basic block pointed to by a `cleanup` field must have its `cleanup` flag set. `cleanup`\n-/// basic blocks have a couple restrictions:\n-///  1. All `cleanup` fields in them must be `None`.\n+/// The basic block pointed to by a `Cleanup` unwind action must have its `cleanup` flag set.\n+/// `cleanup` basic blocks have a couple restrictions:\n+///  1. All `unwind` fields in them must be `UnwindAction::Continue`.\n ///  2. `Return` terminators are not allowed in them. `Abort` and `Unwind` terminators are.\n ///  3. All other basic blocks (in the current body) that are reachable from `cleanup` basic blocks\n ///     must also be `cleanup`. This is a part of the type system and checked statically, so it is\n@@ -604,7 +604,7 @@ pub enum TerminatorKind<'tcx> {\n     /// > The drop glue is executed if, among all statements executed within this `Body`, an assignment to\n     /// > the place or one of its \"parents\" occurred more recently than a move out of it. This does not\n     /// > consider indirect assignments.\n-    Drop { place: Place<'tcx>, target: BasicBlock, unwind: Option<BasicBlock> },\n+    Drop { place: Place<'tcx>, target: BasicBlock, unwind: UnwindAction },\n \n     /// Roughly speaking, evaluates the `func` operand and the arguments, and starts execution of\n     /// the referred to function. The operand types must match the argument types of the function.\n@@ -628,8 +628,8 @@ pub enum TerminatorKind<'tcx> {\n         destination: Place<'tcx>,\n         /// Where to go after this call returns. If none, the call necessarily diverges.\n         target: Option<BasicBlock>,\n-        /// Cleanups to be done if the call unwinds.\n-        cleanup: Option<BasicBlock>,\n+        /// Action to be taken if the call unwinds.\n+        unwind: UnwindAction,\n         /// `true` if this is from a call in HIR rather than from an overloaded\n         /// operator. True for overloaded function call.\n         from_hir_call: bool,\n@@ -654,7 +654,7 @@ pub enum TerminatorKind<'tcx> {\n         expected: bool,\n         msg: AssertMessage<'tcx>,\n         target: BasicBlock,\n-        cleanup: Option<BasicBlock>,\n+        unwind: UnwindAction,\n     },\n \n     /// Marks a suspend point.\n@@ -720,9 +720,10 @@ pub enum TerminatorKind<'tcx> {\n         /// in practice, but in order to avoid fragility we want to always\n         /// consider it in borrowck. We don't want to accept programs which\n         /// pass borrowck only when `panic=abort` or some assertions are disabled\n-        /// due to release vs. debug mode builds. This needs to be an `Option` because\n+        /// due to release vs. debug mode builds.\n+        /// This field does not necessary have to be `UnwindAction::Cleanup` because\n         /// of the `remove_noop_landing_pads` and `abort_unwinding_calls` passes.\n-        unwind: Option<BasicBlock>,\n+        unwind: UnwindAction,\n     },\n \n     /// Block ends with an inline assembly block. This is a terminator since\n@@ -745,12 +746,22 @@ pub enum TerminatorKind<'tcx> {\n         /// diverging (InlineAsmOptions::NORETURN).\n         destination: Option<BasicBlock>,\n \n-        /// Cleanup to be done if the inline assembly unwinds. This is present\n+        /// Action to be taken if the inline assembly unwinds. This is present\n         /// if and only if InlineAsmOptions::MAY_UNWIND is set.\n-        cleanup: Option<BasicBlock>,\n+        unwind: UnwindAction,\n     },\n }\n \n+/// Action to be taken when a stack unwind happens.\n+#[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n+pub enum UnwindAction {\n+    // No action is to be taken. Continue unwinding.\n+    Continue,\n+    // Cleanups to be done.\n+    Cleanup(BasicBlock),\n+}\n+\n /// Information about an assertion failure.\n #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, TypeFoldable, TypeVisitable)]\n pub enum AssertKind<O> {"}, {"sha": "19aa01c12bd4088742302ede1cc451790b7b15ec", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 74, "deletions": 70, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -1,6 +1,6 @@\n use smallvec::SmallVec;\n \n-use super::{BasicBlock, InlineAsmOperand, Operand, SourceInfo, TerminatorKind};\n+use super::{BasicBlock, InlineAsmOperand, Operand, SourceInfo, TerminatorKind, UnwindAction};\n use rustc_ast::InlineAsmTemplatePiece;\n pub use rustc_ast::Mutability;\n use rustc_macros::HashStable;\n@@ -118,11 +118,11 @@ impl<'tcx> Terminator<'tcx> {\n         self.kind.successors_mut()\n     }\n \n-    pub fn unwind(&self) -> Option<&Option<BasicBlock>> {\n+    pub fn unwind(&self) -> Option<&UnwindAction> {\n         self.kind.unwind()\n     }\n \n-    pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {\n+    pub fn unwind_mut(&mut self) -> Option<&mut UnwindAction> {\n         self.kind.unwind_mut()\n     }\n }\n@@ -135,34 +135,34 @@ impl<'tcx> TerminatorKind<'tcx> {\n     pub fn successors(&self) -> Successors<'_> {\n         use self::TerminatorKind::*;\n         match *self {\n+            Call { target: Some(t), unwind: UnwindAction::Cleanup(ref u), .. }\n+            | Yield { resume: t, drop: Some(ref u), .. }\n+            | Drop { target: t, unwind: UnwindAction::Cleanup(ref u), .. }\n+            | Assert { target: t, unwind: UnwindAction::Cleanup(ref u), .. }\n+            | FalseUnwind { real_target: t, unwind: UnwindAction::Cleanup(ref u) }\n+            | InlineAsm { destination: Some(t), unwind: UnwindAction::Cleanup(ref u), .. } => {\n+                Some(t).into_iter().chain(slice::from_ref(u).into_iter().copied())\n+            }\n+            Goto { target: t }\n+            | Call { target: None, unwind: UnwindAction::Cleanup(t), .. }\n+            | Call { target: Some(t), unwind: _, .. }\n+            | Yield { resume: t, drop: None, .. }\n+            | Drop { target: t, unwind: _, .. }\n+            | Assert { target: t, unwind: _, .. }\n+            | FalseUnwind { real_target: t, unwind: _ }\n+            | InlineAsm { destination: None, unwind: UnwindAction::Cleanup(t), .. }\n+            | InlineAsm { destination: Some(t), unwind: _, .. } => {\n+                Some(t).into_iter().chain((&[]).into_iter().copied())\n+            }\n             Resume\n             | Abort\n             | GeneratorDrop\n             | Return\n             | Unreachable\n-            | Call { target: None, cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: None, .. } => {\n+            | Call { target: None, unwind: _, .. }\n+            | InlineAsm { destination: None, unwind: _, .. } => {\n                 None.into_iter().chain((&[]).into_iter().copied())\n             }\n-            Goto { target: t }\n-            | Call { target: None, cleanup: Some(t), .. }\n-            | Call { target: Some(t), cleanup: None, .. }\n-            | Yield { resume: t, drop: None, .. }\n-            | Drop { target: t, unwind: None, .. }\n-            | Assert { target: t, cleanup: None, .. }\n-            | FalseUnwind { real_target: t, unwind: None }\n-            | InlineAsm { destination: Some(t), cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: Some(t), .. } => {\n-                Some(t).into_iter().chain((&[]).into_iter().copied())\n-            }\n-            Call { target: Some(t), cleanup: Some(ref u), .. }\n-            | Yield { resume: t, drop: Some(ref u), .. }\n-            | Drop { target: t, unwind: Some(ref u), .. }\n-            | Assert { target: t, cleanup: Some(ref u), .. }\n-            | FalseUnwind { real_target: t, unwind: Some(ref u) }\n-            | InlineAsm { destination: Some(t), cleanup: Some(ref u), .. } => {\n-                Some(t).into_iter().chain(slice::from_ref(u).into_iter().copied())\n-            }\n             SwitchInt { ref targets, .. } => {\n                 None.into_iter().chain(targets.targets.iter().copied())\n             }\n@@ -175,40 +175,42 @@ impl<'tcx> TerminatorKind<'tcx> {\n     pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {\n         use self::TerminatorKind::*;\n         match *self {\n+            Call { target: Some(ref mut t), unwind: UnwindAction::Cleanup(ref mut u), .. }\n+            | Yield { resume: ref mut t, drop: Some(ref mut u), .. }\n+            | Drop { target: ref mut t, unwind: UnwindAction::Cleanup(ref mut u), .. }\n+            | Assert { target: ref mut t, unwind: UnwindAction::Cleanup(ref mut u), .. }\n+            | FalseUnwind { real_target: ref mut t, unwind: UnwindAction::Cleanup(ref mut u) }\n+            | InlineAsm {\n+                destination: Some(ref mut t),\n+                unwind: UnwindAction::Cleanup(ref mut u),\n+                ..\n+            } => Some(t).into_iter().chain(slice::from_mut(u)),\n+            Goto { target: ref mut t }\n+            | Call { target: None, unwind: UnwindAction::Cleanup(ref mut t), .. }\n+            | Call { target: Some(ref mut t), unwind: _, .. }\n+            | Yield { resume: ref mut t, drop: None, .. }\n+            | Drop { target: ref mut t, unwind: _, .. }\n+            | Assert { target: ref mut t, unwind: _, .. }\n+            | FalseUnwind { real_target: ref mut t, unwind: _ }\n+            | InlineAsm { destination: None, unwind: UnwindAction::Cleanup(ref mut t), .. }\n+            | InlineAsm { destination: Some(ref mut t), unwind: _, .. } => {\n+                Some(t).into_iter().chain(&mut [])\n+            }\n             Resume\n             | Abort\n             | GeneratorDrop\n             | Return\n             | Unreachable\n-            | Call { target: None, cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&mut []),\n-            Goto { target: ref mut t }\n-            | Call { target: None, cleanup: Some(ref mut t), .. }\n-            | Call { target: Some(ref mut t), cleanup: None, .. }\n-            | Yield { resume: ref mut t, drop: None, .. }\n-            | Drop { target: ref mut t, unwind: None, .. }\n-            | Assert { target: ref mut t, cleanup: None, .. }\n-            | FalseUnwind { real_target: ref mut t, unwind: None }\n-            | InlineAsm { destination: Some(ref mut t), cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: Some(ref mut t), .. } => {\n-                Some(t).into_iter().chain(&mut [])\n-            }\n-            Call { target: Some(ref mut t), cleanup: Some(ref mut u), .. }\n-            | Yield { resume: ref mut t, drop: Some(ref mut u), .. }\n-            | Drop { target: ref mut t, unwind: Some(ref mut u), .. }\n-            | Assert { target: ref mut t, cleanup: Some(ref mut u), .. }\n-            | FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) }\n-            | InlineAsm { destination: Some(ref mut t), cleanup: Some(ref mut u), .. } => {\n-                Some(t).into_iter().chain(slice::from_mut(u))\n-            }\n+            | Call { target: None, unwind: _, .. }\n+            | InlineAsm { destination: None, unwind: _, .. } => None.into_iter().chain(&mut []),\n             SwitchInt { ref mut targets, .. } => None.into_iter().chain(&mut targets.targets),\n             FalseEdge { ref mut real_target, ref mut imaginary_target } => {\n                 Some(real_target).into_iter().chain(slice::from_mut(imaginary_target))\n             }\n         }\n     }\n \n-    pub fn unwind(&self) -> Option<&Option<BasicBlock>> {\n+    pub fn unwind(&self) -> Option<&UnwindAction> {\n         match *self {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n@@ -219,15 +221,15 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::FalseEdge { .. } => None,\n-            TerminatorKind::Call { cleanup: ref unwind, .. }\n-            | TerminatorKind::Assert { cleanup: ref unwind, .. }\n+            TerminatorKind::Call { ref unwind, .. }\n+            | TerminatorKind::Assert { ref unwind, .. }\n             | TerminatorKind::Drop { ref unwind, .. }\n             | TerminatorKind::FalseUnwind { ref unwind, .. }\n-            | TerminatorKind::InlineAsm { cleanup: ref unwind, .. } => Some(unwind),\n+            | TerminatorKind::InlineAsm { ref unwind, .. } => Some(unwind),\n         }\n     }\n \n-    pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {\n+    pub fn unwind_mut(&mut self) -> Option<&mut UnwindAction> {\n         match *self {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n@@ -238,11 +240,11 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::FalseEdge { .. } => None,\n-            TerminatorKind::Call { cleanup: ref mut unwind, .. }\n-            | TerminatorKind::Assert { cleanup: ref mut unwind, .. }\n+            TerminatorKind::Call { ref mut unwind, .. }\n+            | TerminatorKind::Assert { ref mut unwind, .. }\n             | TerminatorKind::Drop { ref mut unwind, .. }\n             | TerminatorKind::FalseUnwind { ref mut unwind, .. }\n-            | TerminatorKind::InlineAsm { cleanup: ref mut unwind, .. } => Some(unwind),\n+            | TerminatorKind::InlineAsm { ref mut unwind, .. } => Some(unwind),\n         }\n     }\n \n@@ -386,31 +388,33 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 .map(|&u| Cow::Owned(u.to_string()))\n                 .chain(iter::once(\"otherwise\".into()))\n                 .collect(),\n-            Call { target: Some(_), cleanup: Some(_), .. } => {\n+            Call { target: Some(_), unwind: UnwindAction::Cleanup(_), .. } => {\n                 vec![\"return\".into(), \"unwind\".into()]\n             }\n-            Call { target: Some(_), cleanup: None, .. } => vec![\"return\".into()],\n-            Call { target: None, cleanup: Some(_), .. } => vec![\"unwind\".into()],\n-            Call { target: None, cleanup: None, .. } => vec![],\n+            Call { target: Some(_), unwind: UnwindAction::Continue, .. } => vec![\"return\".into()],\n+            Call { target: None, unwind: UnwindAction::Cleanup(_), .. } => vec![\"unwind\".into()],\n+            Call { target: None, unwind: UnwindAction::Continue, .. } => vec![],\n             Yield { drop: Some(_), .. } => vec![\"resume\".into(), \"drop\".into()],\n             Yield { drop: None, .. } => vec![\"resume\".into()],\n-            Drop { unwind: None, .. } => {\n-                vec![\"return\".into()]\n-            }\n-            Drop { unwind: Some(_), .. } => {\n-                vec![\"return\".into(), \"unwind\".into()]\n-            }\n-            Assert { cleanup: None, .. } => vec![\"\".into()],\n+            Drop { unwind: UnwindAction::Continue, .. } => vec![\"return\".into()],\n+            Drop { unwind: UnwindAction::Cleanup(_), .. } => vec![\"return\".into(), \"unwind\".into()],\n+            Assert { unwind: UnwindAction::Continue, .. } => vec![\"\".into()],\n             Assert { .. } => vec![\"success\".into(), \"unwind\".into()],\n             FalseEdge { .. } => vec![\"real\".into(), \"imaginary\".into()],\n-            FalseUnwind { unwind: Some(_), .. } => vec![\"real\".into(), \"cleanup\".into()],\n-            FalseUnwind { unwind: None, .. } => vec![\"real\".into()],\n-            InlineAsm { destination: Some(_), cleanup: Some(_), .. } => {\n+            FalseUnwind { unwind: UnwindAction::Cleanup(_), .. } => {\n+                vec![\"real\".into(), \"cleanup\".into()]\n+            }\n+            FalseUnwind { unwind: UnwindAction::Continue, .. } => vec![\"real\".into()],\n+            InlineAsm { destination: Some(_), unwind: UnwindAction::Cleanup(_), .. } => {\n                 vec![\"return\".into(), \"unwind\".into()]\n             }\n-            InlineAsm { destination: Some(_), cleanup: None, .. } => vec![\"return\".into()],\n-            InlineAsm { destination: None, cleanup: Some(_), .. } => vec![\"unwind\".into()],\n-            InlineAsm { destination: None, cleanup: None, .. } => vec![],\n+            InlineAsm { destination: Some(_), unwind: UnwindAction::Continue, .. } => {\n+                vec![\"return\".into()]\n+            }\n+            InlineAsm { destination: None, unwind: UnwindAction::Cleanup(_), .. } => {\n+                vec![\"unwind\".into()]\n+            }\n+            InlineAsm { destination: None, unwind: UnwindAction::Continue, .. } => vec![],\n         }\n     }\n }"}, {"sha": "243c62f4a9c2b0be04510f47258b9d7a525c8fd2", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -509,7 +509,7 @@ macro_rules! make_mir_visitor {\n                         args,\n                         destination,\n                         target: _,\n-                        cleanup: _,\n+                        unwind: _,\n                         from_hir_call: _,\n                         fn_span: _\n                     } => {\n@@ -529,7 +529,7 @@ macro_rules! make_mir_visitor {\n                         expected: _,\n                         msg,\n                         target: _,\n-                        cleanup: _,\n+                        unwind: _,\n                     } => {\n                         self.visit_operand(cond, location);\n                         self.visit_assert_message(msg, location);\n@@ -555,7 +555,7 @@ macro_rules! make_mir_visitor {\n                         options: _,\n                         line_spans: _,\n                         destination: _,\n-                        cleanup: _,\n+                        unwind: _,\n                     } => {\n                         for op in operands {\n                             match op {"}, {"sha": "8631749a524be379c24650f9740f763b3d399c25", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         args: vec![Operand::Move(size), Operand::Move(align)],\n                         destination: storage,\n                         target: Some(success),\n-                        cleanup: None,\n+                        unwind: UnwindAction::Continue,\n                         from_hir_call: false,\n                         fn_span: expr_span,\n                     },\n@@ -702,7 +702,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 this.cfg.terminate(\n                     block,\n                     outer_source_info,\n-                    TerminatorKind::Drop { place: to_drop, target: success, unwind: None },\n+                    TerminatorKind::Drop {\n+                        place: to_drop,\n+                        target: success,\n+                        unwind: UnwindAction::Continue,\n+                    },\n                 );\n                 this.diverge_from(block);\n                 block = success;"}, {"sha": "bafe7ede3d9057fc3f213d7c83e6c32837ee8033", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -228,7 +228,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     this.cfg.terminate(\n                         loop_block,\n                         source_info,\n-                        TerminatorKind::FalseUnwind { real_target: body_block, unwind: None },\n+                        TerminatorKind::FalseUnwind {\n+                            real_target: body_block,\n+                            unwind: UnwindAction::Continue,\n+                        },\n                     );\n                     this.diverge_from(loop_block);\n \n@@ -264,7 +267,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     TerminatorKind::Call {\n                         func: fun,\n                         args,\n-                        cleanup: None,\n+                        unwind: UnwindAction::Continue,\n                         destination,\n                         // The presence or absence of a return edge affects control-flow sensitive\n                         // MIR checks and ultimately whether code is accepted or not. We can only\n@@ -466,7 +469,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         } else {\n                             Some(destination_block)\n                         },\n-                        cleanup: None,\n+                        unwind: UnwindAction::Continue,\n                     },\n                 );\n                 if options.contains(InlineAsmOptions::MAY_UNWIND) {"}, {"sha": "8a03ea7e2cc7fdc78cf1b9727bbe847233eabf9e", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             args: vec![Operand::Move(ref_string)],\n                             destination: ref_str,\n                             target: Some(eq_block),\n-                            cleanup: None,\n+                            unwind: UnwindAction::Continue,\n                             from_hir_call: false,\n                             fn_span: source_info.span\n                         }\n@@ -466,7 +466,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 args: vec![val, expect],\n                 destination: eq_result,\n                 target: Some(eq_block),\n-                cleanup: None,\n+                unwind: UnwindAction::Continue,\n                 from_hir_call: false,\n                 fn_span: source_info.span,\n             },"}, {"sha": "f67659ac6bf09d2771e14ddee9701c95d2a5c2f6", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -369,7 +369,7 @@ impl DropTree {\n                     let terminator = TerminatorKind::Drop {\n                         target: blocks[drop_data.1].unwrap(),\n                         // The caller will handle this if needed.\n-                        unwind: None,\n+                        unwind: UnwindAction::Continue,\n                         place: drop_data.0.local.into(),\n                     };\n                     cfg.terminate(block, drop_data.0.source_info, terminator);\n@@ -1141,7 +1141,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.terminate(\n             block,\n             source_info,\n-            TerminatorKind::Drop { place, target: assign, unwind: Some(assign_unwind) },\n+            TerminatorKind::Drop {\n+                place,\n+                target: assign,\n+                unwind: UnwindAction::Cleanup(assign_unwind),\n+            },\n         );\n         self.diverge_from(block);\n \n@@ -1165,7 +1169,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.terminate(\n             block,\n             source_info,\n-            TerminatorKind::Assert { cond, expected, msg, target: success_block, cleanup: None },\n+            TerminatorKind::Assert {\n+                cond,\n+                expected,\n+                msg,\n+                target: success_block,\n+                unwind: UnwindAction::Continue,\n+            },\n         );\n         self.diverge_from(block);\n \n@@ -1244,7 +1254,11 @@ fn build_scope_drops<'tcx>(\n                 cfg.terminate(\n                     block,\n                     source_info,\n-                    TerminatorKind::Drop { place: local.into(), target: next, unwind: None },\n+                    TerminatorKind::Drop {\n+                        place: local.into(),\n+                        target: next,\n+                        unwind: UnwindAction::Continue,\n+                    },\n                 );\n                 block = next;\n             }\n@@ -1432,10 +1446,10 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n                 }\n             }\n             TerminatorKind::FalseUnwind { unwind, .. }\n-            | TerminatorKind::Call { cleanup: unwind, .. }\n-            | TerminatorKind::Assert { cleanup: unwind, .. }\n-            | TerminatorKind::InlineAsm { cleanup: unwind, .. } => {\n-                *unwind = Some(to);\n+            | TerminatorKind::Call { unwind, .. }\n+            | TerminatorKind::Assert { unwind, .. }\n+            | TerminatorKind::InlineAsm { unwind, .. } => {\n+                *unwind = UnwindAction::Cleanup(to);\n             }\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::SwitchInt { .. }"}, {"sha": "910db7f676d7cab91c97b7cb516d324b252b68b8", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::graph::iterate::{\n     NodeStatus, TriColorDepthFirstSearch, TriColorVisitor,\n };\n use rustc_hir::def::DefKind;\n-use rustc_middle::mir::{BasicBlock, BasicBlocks, Body, Operand, TerminatorKind};\n+use rustc_middle::mir::{self, BasicBlock, BasicBlocks, Body, Operand, TerminatorKind};\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{self, Instance, TyCtxt};\n use rustc_session::lint::builtin::UNCONDITIONAL_RECURSION;\n@@ -149,7 +149,9 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n \n     fn ignore_edge(&mut self, bb: BasicBlock, target: BasicBlock) -> bool {\n         let terminator = self.body[bb].terminator();\n-        if terminator.unwind() == Some(&Some(target)) && terminator.successors().count() > 1 {\n+        if terminator.unwind() == Some(&mir::UnwindAction::Cleanup(target))\n+            && terminator.successors().count() > 1\n+        {\n             return true;\n         }\n         // Don't traverse successors of recursive calls or false CFG edges."}, {"sha": "70ed0c226404371089b8a2a8177d39b2ac66b064", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -77,10 +77,10 @@ impl Unwind {\n         }\n     }\n \n-    fn into_option(self) -> Option<BasicBlock> {\n+    fn into_action(self) -> UnwindAction {\n         match self {\n-            Unwind::To(bb) => Some(bb),\n-            Unwind::InCleanup => None,\n+            Unwind::To(bb) => UnwindAction::Cleanup(bb),\n+            Unwind::InCleanup => UnwindAction::Continue,\n         }\n     }\n \n@@ -236,7 +236,7 @@ where\n                     TerminatorKind::Drop {\n                         place: self.place,\n                         target: self.succ,\n-                        unwind: self.unwind.into_option(),\n+                        unwind: self.unwind.into_action(),\n                     },\n                 );\n             }\n@@ -640,7 +640,7 @@ where\n                     args: vec![Operand::Move(Place::from(ref_place))],\n                     destination: unit_temp,\n                     target: Some(succ),\n-                    cleanup: unwind.into_option(),\n+                    unwind: unwind.into_action(),\n                     from_hir_call: true,\n                     fn_span: self.source_info.span,\n                 },\n@@ -717,7 +717,7 @@ where\n             TerminatorKind::Drop {\n                 place: tcx.mk_place_deref(ptr),\n                 target: loop_block,\n-                unwind: unwind.into_option(),\n+                unwind: unwind.into_action(),\n             },\n         );\n \n@@ -946,7 +946,7 @@ where\n             args,\n             destination: unit_temp,\n             target: Some(target),\n-            cleanup: None,\n+            unwind: UnwindAction::Continue,\n             from_hir_call: false,\n             fn_span: self.source_info.span,\n         }; // FIXME(#43234)\n@@ -959,7 +959,7 @@ where\n \n     fn drop_block(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n         let block =\n-            TerminatorKind::Drop { place: self.place, target, unwind: unwind.into_option() };\n+            TerminatorKind::Drop { place: self.place, target, unwind: unwind.into_action() };\n         self.new_block(unwind, block)\n     }\n "}, {"sha": "a078c6b550e19341a7eb27b74cd7b78ee1780e15", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::mir::{self, BasicBlock, Location, SwitchTargets};\n+use rustc_middle::mir::{self, BasicBlock, Location, SwitchTargets, UnwindAction};\n use rustc_middle::ty::TyCtxt;\n use std::ops::RangeInclusive;\n \n@@ -478,10 +478,10 @@ impl Direction for Forward {\n \n             Goto { target } => propagate(target, exit_state),\n \n-            Assert { target, cleanup: unwind, expected: _, msg: _, cond: _ }\n+            Assert { target, unwind, expected: _, msg: _, cond: _ }\n             | Drop { target, unwind, place: _ }\n             | FalseUnwind { real_target: target, unwind } => {\n-                if let Some(unwind) = unwind {\n+                if let UnwindAction::Cleanup(unwind) = unwind {\n                     propagate(unwind, exit_state);\n                 }\n \n@@ -503,15 +503,15 @@ impl Direction for Forward {\n             }\n \n             Call {\n-                cleanup,\n+                unwind,\n                 destination,\n                 target,\n                 func: _,\n                 args: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n-                if let Some(unwind) = cleanup {\n+                if let UnwindAction::Cleanup(unwind) = unwind {\n                     propagate(unwind, exit_state);\n                 }\n \n@@ -533,9 +533,9 @@ impl Direction for Forward {\n                 options: _,\n                 line_spans: _,\n                 destination,\n-                cleanup,\n+                unwind,\n             } => {\n-                if let Some(unwind) = cleanup {\n+                if let UnwindAction::Cleanup(unwind) = unwind {\n                     propagate(unwind, exit_state);\n                 }\n "}, {"sha": "60679b17d6c496dd9b8dfb95fe3270f7b2f429e5", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -39,7 +39,7 @@ fn mock_body<'tcx>() -> mir::Body<'tcx> {\n             args: vec![],\n             destination: dummy_place.clone(),\n             target: Some(mir::START_BLOCK),\n-            cleanup: None,\n+            unwind: mir::UnwindAction::Continue,\n             from_hir_call: false,\n             fn_span: DUMMY_SP,\n         },\n@@ -53,7 +53,7 @@ fn mock_body<'tcx>() -> mir::Body<'tcx> {\n             args: vec![],\n             destination: dummy_place.clone(),\n             target: Some(mir::START_BLOCK),\n-            cleanup: None,\n+            unwind: mir::UnwindAction::Continue,\n             from_hir_call: false,\n             fn_span: DUMMY_SP,\n         },"}, {"sha": "9f9a5c94b56055c04eb449c71560bc6ca6d0c7b3", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -398,7 +398,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 ref args,\n                 destination,\n                 target,\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n@@ -417,7 +417,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 options: _,\n                 line_spans: _,\n                 destination: _,\n-                cleanup: _,\n+                unwind: _,\n             } => {\n                 for op in operands {\n                     match *op {"}, {"sha": "8fddbe4ad9f4a6f2603b8ea10ae2a65b091554d8", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -125,13 +125,13 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n \n             for bb in calls_to_terminate {\n                 let cleanup = body.basic_blocks_mut()[bb].terminator_mut().unwind_mut().unwrap();\n-                *cleanup = Some(abort_bb);\n+                *cleanup = UnwindAction::Cleanup(abort_bb);\n             }\n         }\n \n         for id in cleanups_to_remove {\n             let cleanup = body.basic_blocks_mut()[id].terminator_mut().unwind_mut().unwrap();\n-            *cleanup = None;\n+            *cleanup = UnwindAction::Continue;\n         }\n \n         // We may have invalidated some `cleanup` blocks so clean those up now."}, {"sha": "ea7ccb512e09307f74b8d425d58495ef001c98fb", "filename": "compiler/rustc_mir_transform/src/add_call_guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -50,10 +50,10 @@ impl AddCallGuards {\n         for block in body.basic_blocks_mut() {\n             match block.terminator {\n                 Some(Terminator {\n-                    kind: TerminatorKind::Call { target: Some(ref mut destination), cleanup, .. },\n+                    kind: TerminatorKind::Call { target: Some(ref mut destination), unwind, .. },\n                     source_info,\n                 }) if pred_count[*destination] > 1\n-                    && (cleanup.is_some() || self == &AllCallEdges) =>\n+                    && (matches!(unwind, UnwindAction::Cleanup(_)) || self == &AllCallEdges) =>\n                 {\n                     // It's a critical edge, break it\n                     let call_guard = BasicBlockData {"}, {"sha": "b9af74a2061d8bf31ca3be8da334c06ca47f8b20", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -228,7 +228,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     fn assert_panic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _msg: &rustc_middle::mir::AssertMessage<'tcx>,\n-        _unwind: Option<rustc_middle::mir::BasicBlock>,\n+        _unwind: rustc_middle::mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         bug!(\"panics terminators are not evaluated in ConstProp\")\n     }"}, {"sha": "0f6c06e370ba4e6e9b50f15af3487f6439630506", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> MockBlocks<'tcx> {\n                 args: vec![],\n                 destination: self.dummy_place.clone(),\n                 target: Some(TEMP_BLOCK),\n-                cleanup: None,\n+                unwind: UnwindAction::Continue,\n                 from_hir_call: false,\n                 fn_span: DUMMY_SP,\n             },"}, {"sha": "9217c2dc81cc7a961397ba0d51200b87fc236c3d", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -120,7 +120,7 @@ fn remove_dead_unwinds<'tcx>(\n         .into_results_cursor(body);\n     for (bb, bb_data) in body.basic_blocks.iter_enumerated() {\n         let place = match bb_data.terminator().kind {\n-            TerminatorKind::Drop { ref place, unwind: Some(_), .. } => {\n+            TerminatorKind::Drop { ref place, unwind: UnwindAction::Cleanup(_), .. } => {\n                 und.derefer(place.as_ref(), body).unwrap_or(*place)\n             }\n             _ => continue,\n@@ -417,7 +417,10 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                             if data.is_cleanup {\n                                 Unwind::InCleanup\n                             } else {\n-                                Unwind::To(Option::unwrap_or(unwind, resume_block))\n+                                match unwind {\n+                                    UnwindAction::Cleanup(cleanup) => Unwind::To(cleanup),\n+                                    UnwindAction::Continue => Unwind::To(resume_block),\n+                                }\n                             },\n                             bb,\n                         ),\n@@ -474,7 +477,10 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 continue;\n             }\n             if let TerminatorKind::Call {\n-                destination, target: Some(tgt), cleanup: Some(_), ..\n+                destination,\n+                target: Some(tgt),\n+                unwind: UnwindAction::Cleanup(_),\n+                ..\n             } = data.terminator().kind\n             {\n                 assert!(!self.patch.is_patched(bb));\n@@ -543,8 +549,12 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             // There may be a critical edge after this call,\n             // so mark the return as initialized *before* the\n             // call.\n-            if let TerminatorKind::Call { destination, target: Some(_), cleanup: None, .. } =\n-                data.terminator().kind\n+            if let TerminatorKind::Call {\n+                destination,\n+                target: Some(_),\n+                unwind: UnwindAction::Continue,\n+                ..\n+            } = data.terminator().kind\n             {\n                 assert!(!self.patch.is_patched(bb));\n "}, {"sha": "8601c1b2d71a11366b73fa12298673c513635a4e", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -34,7 +34,7 @@ impl<'tcx> Visitor<'tcx> for FunctionItemRefChecker<'_, 'tcx> {\n             args,\n             destination: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n             from_hir_call: _,\n             fn_span: _,\n         } = &terminator.kind"}, {"sha": "a83e6a5b6807e02af26cfb7e9f5b10ec35275edd", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -1060,7 +1060,10 @@ fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let unwind = if block_data.is_cleanup {\n             Unwind::InCleanup\n         } else {\n-            Unwind::To(unwind.unwrap_or_else(|| elaborator.patch.resume_block()))\n+            Unwind::To(match *unwind {\n+                UnwindAction::Cleanup(tgt) => tgt,\n+                UnwindAction::Continue => elaborator.patch.resume_block(),\n+            })\n         };\n         elaborate_drop(\n             &mut elaborator,\n@@ -1147,7 +1150,7 @@ fn insert_panic_block<'tcx>(\n         expected: true,\n         msg: message,\n         target: assert_block,\n-        cleanup: None,\n+        unwind: UnwindAction::Continue,\n     };\n \n     let source_info = SourceInfo::outermost(body.span);\n@@ -1248,8 +1251,8 @@ fn create_generator_resume_function<'tcx>(\n             } else if !block.is_cleanup {\n                 // Any terminators that *can* unwind but don't have an unwind target set are also\n                 // pointed at our poisoning block (unless they're part of the cleanup path).\n-                if let Some(unwind @ None) = block.terminator_mut().unwind_mut() {\n-                    *unwind = Some(poison_block);\n+                if let Some(unwind @ UnwindAction::Continue) = block.terminator_mut().unwind_mut() {\n+                    *unwind = UnwindAction::Cleanup(poison_block);\n                 }\n             }\n         }\n@@ -1294,8 +1297,11 @@ fn create_generator_resume_function<'tcx>(\n fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n     let return_block = insert_term_block(body, TerminatorKind::Return);\n \n-    let term =\n-        TerminatorKind::Drop { place: Place::from(SELF_ARG), target: return_block, unwind: None };\n+    let term = TerminatorKind::Drop {\n+        place: Place::from(SELF_ARG),\n+        target: return_block,\n+        unwind: UnwindAction::Continue,\n+    };\n     let source_info = SourceInfo::outermost(body.span);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n@@ -1670,7 +1676,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n                 args,\n                 destination,\n                 target: Some(_),\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {"}, {"sha": "c46cb5e98df64cb88755b8e518fafa0a46896e3b", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -453,7 +453,7 @@ impl<'tcx> Inliner<'tcx> {\n \n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n                 let ty = callsite.callee.subst_mir(self.tcx, &place.ty(callee_body, tcx).ty);\n-                if ty.needs_drop(tcx, self.param_env) && let Some(unwind) = unwind {\n+                if ty.needs_drop(tcx, self.param_env) && let UnwindAction::Cleanup(unwind) = unwind {\n                         work_list.push(unwind);\n                     }\n             } else if callee_attrs.instruction_set != self.codegen_fn_attrs.instruction_set\n@@ -500,7 +500,7 @@ impl<'tcx> Inliner<'tcx> {\n     ) {\n         let terminator = caller_body[callsite.block].terminator.take().unwrap();\n         match terminator.kind {\n-            TerminatorKind::Call { args, destination, cleanup, .. } => {\n+            TerminatorKind::Call { args, destination, unwind, .. } => {\n                 // If the call is something like `a[*i] = f(i)`, where\n                 // `i : &mut usize`, then just duplicating the `a[*i]`\n                 // Place could result in two different locations if `f`\n@@ -571,7 +571,7 @@ impl<'tcx> Inliner<'tcx> {\n                     destination: destination_local,\n                     callsite_scope: caller_body.source_scopes[callsite.source_info.scope].clone(),\n                     callsite,\n-                    cleanup_block: cleanup,\n+                    cleanup_block: unwind,\n                     in_cleanup_block: false,\n                     tcx: self.tcx,\n                     expn_data,\n@@ -813,35 +813,35 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                 let ty = self.instance.subst_mir(tcx, &place.ty(self.callee_body, tcx).ty);\n                 if ty.needs_drop(tcx, self.param_env) {\n                     self.cost += CALL_PENALTY;\n-                    if unwind.is_some() {\n+                    if let UnwindAction::Cleanup(_) = unwind {\n                         self.cost += LANDINGPAD_PENALTY;\n                     }\n                 } else {\n                     self.cost += INSTR_COST;\n                 }\n             }\n-            TerminatorKind::Call { func: Operand::Constant(ref f), cleanup, .. } => {\n+            TerminatorKind::Call { func: Operand::Constant(ref f), unwind, .. } => {\n                 let fn_ty = self.instance.subst_mir(tcx, &f.literal.ty());\n                 self.cost += if let ty::FnDef(def_id, _) = *fn_ty.kind() && tcx.is_intrinsic(def_id) {\n                     // Don't give intrinsics the extra penalty for calls\n                     INSTR_COST\n                 } else {\n                     CALL_PENALTY\n                 };\n-                if cleanup.is_some() {\n+                if let UnwindAction::Cleanup(_) = unwind {\n                     self.cost += LANDINGPAD_PENALTY;\n                 }\n             }\n-            TerminatorKind::Assert { cleanup, .. } => {\n+            TerminatorKind::Assert { unwind, .. } => {\n                 self.cost += CALL_PENALTY;\n-                if cleanup.is_some() {\n+                if let UnwindAction::Cleanup(_) = unwind {\n                     self.cost += LANDINGPAD_PENALTY;\n                 }\n             }\n             TerminatorKind::Resume => self.cost += RESUME_PENALTY,\n-            TerminatorKind::InlineAsm { cleanup, .. } => {\n+            TerminatorKind::InlineAsm { unwind, .. } => {\n                 self.cost += INSTR_COST;\n-                if cleanup.is_some() {\n+                if let UnwindAction::Cleanup(_) = unwind {\n                     self.cost += LANDINGPAD_PENALTY;\n                 }\n             }\n@@ -979,7 +979,7 @@ struct Integrator<'a, 'tcx> {\n     destination: Local,\n     callsite_scope: SourceScopeData<'tcx>,\n     callsite: &'a CallSite<'tcx>,\n-    cleanup_block: Option<BasicBlock>,\n+    cleanup_block: UnwindAction,\n     in_cleanup_block: bool,\n     tcx: TyCtxt<'tcx>,\n     expn_data: LocalExpnId,\n@@ -1014,18 +1014,20 @@ impl Integrator<'_, '_> {\n         new\n     }\n \n-    fn map_unwind(&self, unwind: Option<BasicBlock>) -> Option<BasicBlock> {\n+    fn map_unwind(&self, unwind: UnwindAction) -> UnwindAction {\n         if self.in_cleanup_block {\n-            if unwind.is_some() {\n-                bug!(\"cleanup on cleanup block\");\n+            match unwind {\n+                UnwindAction::Cleanup(_) => {\n+                    bug!(\"cleanup on cleanup block\");\n+                }\n+                UnwindAction::Continue => return unwind,\n             }\n-            return unwind;\n         }\n \n         match unwind {\n-            Some(target) => Some(self.map_block(target)),\n+            UnwindAction::Cleanup(target) => UnwindAction::Cleanup(self.map_block(target)),\n             // Add an unwind edge to the original call's cleanup block\n-            None => self.cleanup_block,\n+            UnwindAction::Continue => self.cleanup_block,\n         }\n     }\n }\n@@ -1116,15 +1118,15 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n                 *target = self.map_block(*target);\n                 *unwind = self.map_unwind(*unwind);\n             }\n-            TerminatorKind::Call { ref mut target, ref mut cleanup, .. } => {\n+            TerminatorKind::Call { ref mut target, ref mut unwind, .. } => {\n                 if let Some(ref mut tgt) = *target {\n                     *tgt = self.map_block(*tgt);\n                 }\n-                *cleanup = self.map_unwind(*cleanup);\n+                *unwind = self.map_unwind(*unwind);\n             }\n-            TerminatorKind::Assert { ref mut target, ref mut cleanup, .. } => {\n+            TerminatorKind::Assert { ref mut target, ref mut unwind, .. } => {\n                 *target = self.map_block(*target);\n-                *cleanup = self.map_unwind(*cleanup);\n+                *unwind = self.map_unwind(*unwind);\n             }\n             TerminatorKind::Return => {\n                 terminator.kind = if let Some(tgt) = self.callsite.target {\n@@ -1133,11 +1135,12 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n                     TerminatorKind::Unreachable\n                 }\n             }\n-            TerminatorKind::Resume => {\n-                if let Some(tgt) = self.cleanup_block {\n-                    terminator.kind = TerminatorKind::Goto { target: tgt }\n+            TerminatorKind::Resume => match self.cleanup_block {\n+                UnwindAction::Cleanup(tgt) => {\n+                    terminator.kind = TerminatorKind::Goto { target: tgt };\n                 }\n-            }\n+                UnwindAction::Continue => (),\n+            },\n             TerminatorKind::Abort => {}\n             TerminatorKind::Unreachable => {}\n             TerminatorKind::FalseEdge { ref mut real_target, ref mut imaginary_target } => {\n@@ -1149,11 +1152,11 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n             {\n                 bug!(\"False unwinds should have been removed before inlining\")\n             }\n-            TerminatorKind::InlineAsm { ref mut destination, ref mut cleanup, .. } => {\n+            TerminatorKind::InlineAsm { ref mut destination, ref mut unwind, .. } => {\n                 if let Some(ref mut tgt) = *destination {\n                     *tgt = self.map_block(*tgt);\n                 }\n-                *cleanup = self.map_unwind(*cleanup);\n+                *unwind = self.map_unwind(*unwind);\n             }\n         }\n     }"}, {"sha": "2e418c1dafc48618975d792dc62c1e4fba316eeb", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -159,7 +159,7 @@ fn remap_mir_for_const_eval_select<'tcx>(\n                 ref mut args,\n                 destination,\n                 target,\n-                cleanup,\n+                unwind,\n                 fn_span,\n                 ..\n             } if let ty::FnDef(def_id, _) = *literal.ty().kind()\n@@ -196,7 +196,7 @@ fn remap_mir_for_const_eval_select<'tcx>(\n                     };\n                     method(place)\n                 }).collect();\n-                terminator.kind = TerminatorKind::Call { func, args: arguments, destination, target, cleanup, from_hir_call: false, fn_span };\n+                terminator.kind = TerminatorKind::Call { func, args: arguments, destination, target, unwind, from_hir_call: false, fn_span };\n             }\n             _ => {}\n         }"}, {"sha": "75a415d88eefe5a195a8b0ed86dfb76937273adc", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -54,7 +54,7 @@ fn lower_slice_len_call<'tcx>(\n             args,\n             destination,\n             target: Some(bb),\n-            cleanup: None,\n+            unwind: UnwindAction::Continue,\n             from_hir_call: true,\n             ..\n         } => {"}, {"sha": "b4d68f4a322e772779c0270ae6a51f3d9fc65e02", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -103,11 +103,11 @@ impl RemoveNoopLandingPads {\n         for bb in postorder {\n             debug!(\"  processing {:?}\", bb);\n             if let Some(unwind) = body[bb].terminator_mut().unwind_mut() {\n-                if let Some(unwind_bb) = *unwind {\n+                if let UnwindAction::Cleanup(unwind_bb) = *unwind {\n                     if nop_landing_pads.contains(unwind_bb) {\n                         debug!(\"    removing noop landing pad\");\n                         landing_pads_removed += 1;\n-                        *unwind = None;\n+                        *unwind = UnwindAction::Continue;\n                     }\n                 }\n             }"}, {"sha": "f5a65e1270542e7586a54094982d82a7ff0a7584", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -499,7 +499,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n                 args: vec![Operand::Move(ref_loc)],\n                 destination: dest,\n                 target: Some(next),\n-                cleanup: Some(cleanup),\n+                unwind: UnwindAction::Cleanup(cleanup),\n                 from_hir_call: true,\n                 fn_span: self.span,\n             },\n@@ -540,7 +540,11 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n             self.make_clone_call(dest_field, src_field, ity, next_block, unwind);\n             self.block(\n                 vec![],\n-                TerminatorKind::Drop { place: dest_field, target: unwind, unwind: None },\n+                TerminatorKind::Drop {\n+                    place: dest_field,\n+                    target: unwind,\n+                    unwind: UnwindAction::Continue,\n+                },\n                 true,\n             );\n             unwind = next_unwind;\n@@ -776,10 +780,10 @@ fn build_call_shim<'tcx>(\n             args,\n             destination: Place::return_place(),\n             target: Some(BasicBlock::new(1)),\n-            cleanup: if let Some(Adjustment::RefMut) = rcvr_adjustment {\n-                Some(BasicBlock::new(3))\n+            unwind: if let Some(Adjustment::RefMut) = rcvr_adjustment {\n+                UnwindAction::Cleanup(BasicBlock::new(3))\n             } else {\n-                None\n+                UnwindAction::Continue\n             },\n             from_hir_call: true,\n             fn_span: span,\n@@ -792,7 +796,11 @@ fn build_call_shim<'tcx>(\n         block(\n             &mut blocks,\n             vec![],\n-            TerminatorKind::Drop { place: rcvr_place(), target: BasicBlock::new(2), unwind: None },\n+            TerminatorKind::Drop {\n+                place: rcvr_place(),\n+                target: BasicBlock::new(2),\n+                unwind: UnwindAction::Continue,\n+            },\n             false,\n         );\n     }\n@@ -803,7 +811,11 @@ fn build_call_shim<'tcx>(\n         block(\n             &mut blocks,\n             vec![],\n-            TerminatorKind::Drop { place: rcvr_place(), target: BasicBlock::new(4), unwind: None },\n+            TerminatorKind::Drop {\n+                place: rcvr_place(),\n+                target: BasicBlock::new(4),\n+                unwind: UnwindAction::Continue,\n+            },\n             true,\n         );\n "}, {"sha": "ff195cd7288028ec914773c09a8cc5aae1e7a9d6", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -318,7 +318,7 @@ fn check_terminator<'tcx>(\n             from_hir_call: _,\n             destination: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n             fn_span: _,\n         } => {\n             let fn_ty = func.ty(body, tcx);\n@@ -361,7 +361,7 @@ fn check_terminator<'tcx>(\n             expected: _,\n             msg: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n         } => check_operand(tcx, cond, span, body),\n \n         TerminatorKind::InlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),"}, {"sha": "621b90f0e57210c30cbbdf66a35865805a659e09", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -868,7 +868,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n     fn assert_panic(\n         ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         msg: &mir::AssertMessage<'tcx>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         ecx.assert_panic(msg, unwind)\n     }"}, {"sha": "c31194b4b93504703095a97bf468e5e77bb37224", "filename": "src/tools/miri/src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeb844e0ccddb9e058128974b290f2022e88be7/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeb844e0ccddb9e058128974b290f2022e88be7/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs?ref=daeb844e0ccddb9e058128974b290f2022e88be7", "patch": "@@ -189,7 +189,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn assert_panic(\n         &mut self,\n         msg: &mir::AssertMessage<'tcx>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx> {\n         use rustc_middle::mir::AssertKind::*;\n         let this = self.eval_context_mut();"}]}