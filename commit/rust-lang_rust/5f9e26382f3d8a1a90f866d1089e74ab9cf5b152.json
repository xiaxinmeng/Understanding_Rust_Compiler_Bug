{"sha": "5f9e26382f3d8a1a90f866d1089e74ab9cf5b152", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOWUyNjM4MmYzZDhhMWE5MGY4NjZkMTA4OWU3NGFiOWNmNWIxNTI=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-07-08T11:42:45Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-08-19T08:49:54Z"}, "message": "Support nested `impl Trait`", "tree": {"sha": "ce0f0fd1b19d011cdf657d1699fb30855909e2c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce0f0fd1b19d011cdf657d1699fb30855909e2c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f9e26382f3d8a1a90f866d1089e74ab9cf5b152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9e26382f3d8a1a90f866d1089e74ab9cf5b152", "html_url": "https://github.com/rust-lang/rust/commit/5f9e26382f3d8a1a90f866d1089e74ab9cf5b152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f9e26382f3d8a1a90f866d1089e74ab9cf5b152/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9beff38382a88ceafcb6e83636535c07eacad345", "url": "https://api.github.com/repos/rust-lang/rust/commits/9beff38382a88ceafcb6e83636535c07eacad345", "html_url": "https://github.com/rust-lang/rust/commit/9beff38382a88ceafcb6e83636535c07eacad345"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "93e650d6d61ae251c6582ca4d3ddacad9786a3d2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5f9e26382f3d8a1a90f866d1089e74ab9cf5b152/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9e26382f3d8a1a90f866d1089e74ab9cf5b152/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5f9e26382f3d8a1a90f866d1089e74ab9cf5b152", "patch": "@@ -1720,11 +1720,13 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n                 ty::GenericParamDefKind::Const { .. } => None,\n             }).collect::<Vec<GenericParamDef>>();\n \n-        // (param index, def id of trait) -> (name, type)\n-        let mut impl_trait_proj = FxHashMap::<(u32, DefId), Vec<(String, Type)>>::default();\n+        // param index -> [(DefId of trait, associated type name, type)]\n+        let mut impl_trait_proj =\n+            FxHashMap::<u32, Vec<(DefId, String, Ty<'tcx>)>>::default();\n \n         let mut where_predicates = preds.predicates.iter()\n             .flat_map(|(p, _)| {\n+                let mut projection = None;\n                 let param_idx = (|| {\n                     if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n                         if let ty::Param(param) = trait_ref.self_ty().sty {\n@@ -1734,8 +1736,9 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n                         if let ty::Param(param) = outlives.skip_binder().0.sty {\n                             return Some(param.index);\n                         }\n-                    } else if let ty::Predicate::Projection(proj) = p {\n-                        if let ty::Param(param) = proj.skip_binder().projection_ty.self_ty().sty {\n+                    } else if let ty::Predicate::Projection(p) = p {\n+                        if let ty::Param(param) = p.skip_binder().projection_ty.self_ty().sty {\n+                            projection = Some(p);\n                             return Some(param.index);\n                         }\n                     }\n@@ -1755,16 +1758,15 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n                                 .filter(|b| !b.is_sized_bound(cx))\n                         );\n \n-                        let proj = match &p {\n-                            WherePredicate::EqPredicate { lhs, rhs } => Some((lhs, rhs))\n-                                .and_then(|(lhs, rhs)| Some((lhs.projection()?, rhs))),\n-                            _ => None,\n-                        };\n-                        if let Some(((_, trait_did, name), rhs)) = proj {\n+                        let proj = projection\n+                            .map(|p| (p.skip_binder().projection_ty.clean(cx), p.skip_binder().ty));\n+                        if let Some(((_, trait_did, name), rhs)) =\n+                            proj.as_ref().and_then(|(lhs, rhs)| Some((lhs.projection()?, rhs)))\n+                        {\n                             impl_trait_proj\n-                                .entry((param_idx, trait_did))\n+                                .entry(param_idx)\n                                 .or_default()\n-                                .push((name.to_string(), rhs.clone()));\n+                                .push((trait_did, name.to_string(), rhs));\n                         }\n \n                         return None;\n@@ -1775,18 +1777,6 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n             })\n             .collect::<Vec<_>>();\n \n-        for ((param_idx, trait_did), bounds) in impl_trait_proj {\n-            for (name, rhs) in bounds {\n-                simplify::merge_bounds(\n-                    cx,\n-                    impl_trait.get_mut(&param_idx.into()).unwrap(),\n-                    trait_did,\n-                    &name,\n-                    &rhs,\n-                );\n-            }\n-        }\n-\n         // Move `TraitPredicate`s to the front.\n         for (_, bounds) in impl_trait.iter_mut() {\n             bounds.sort_by_key(|b| if let GenericBound::TraitBound(..) = b {\n@@ -1796,7 +1786,25 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n             });\n         }\n \n-        cx.impl_trait_bounds.borrow_mut().extend(impl_trait);\n+        for (param, mut bounds) in impl_trait {\n+            if let crate::core::ImplTraitParam::ParamIndex(idx) = param {\n+                if let Some(proj) = impl_trait_proj.remove(&idx) {\n+                    for (trait_did, name, rhs) in proj {\n+                        simplify::merge_bounds(\n+                            cx,\n+                            &mut bounds,\n+                            trait_did,\n+                            &name,\n+                            &rhs.clean(cx),\n+                        );\n+                    }\n+                }\n+            } else {\n+                unreachable!();\n+            }\n+\n+            cx.impl_trait_bounds.borrow_mut().insert(param, bounds);\n+        }\n \n         // Type parameters and have a Sized bound by default unless removed with\n         // ?Sized. Scan through the predicates and mark any type parameter with"}, {"sha": "e0f7c6d08ce2fa38d7ed61ef1b5833d683dd2c58", "filename": "src/test/rustdoc/inline_cross/auxiliary/impl_trait_aux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f9e26382f3d8a1a90f866d1089e74ab9cf5b152/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9e26382f3d8a1a90f866d1089e74ab9cf5b152/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs?ref=5f9e26382f3d8a1a90f866d1089e74ab9cf5b152", "patch": "@@ -4,6 +4,8 @@ pub fn func<'a>(_x: impl Clone + Into<Vec<u8>> + 'a) {}\n \n pub fn func2<T>(_x: impl Deref<Target = Option<T>> + Iterator<Item = T>, _y: impl Iterator<Item = u8>) {}\n \n+pub fn func3(_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone) {}\n+\n pub struct Foo;\n \n impl Foo {"}, {"sha": "b08a070dcb74d0fd11fbd9998cf129c7a29e14a4", "filename": "src/test/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f9e26382f3d8a1a90f866d1089e74ab9cf5b152/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9e26382f3d8a1a90f866d1089e74ab9cf5b152/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=5f9e26382f3d8a1a90f866d1089e74ab9cf5b152", "patch": "@@ -8,11 +8,17 @@ extern crate impl_trait_aux;\n pub use impl_trait_aux::func;\n \n // @has impl_trait/fn.func2.html\n+// @has - '//pre[@class=\"rust fn\"]' \"func2<T>(\"\n // @has - '//pre[@class=\"rust fn\"]' \"_x: impl Deref<Target = Option<T>> + Iterator<Item = T>,\"\n // @has - '//pre[@class=\"rust fn\"]' \"_y: impl Iterator<Item = u8>)\"\n // @!has - '//pre[@class=\"rust fn\"]' 'where'\n pub use impl_trait_aux::func2;\n \n+// @has impl_trait/fn.func3.html\n+// @has - '//pre[@class=\"rust fn\"]' \"func3(_x: impl Clone + Iterator<Item = impl Iterator<Item = u8>>)\"\n+// @!has - '//pre[@class=\"rust fn\"]' 'where'\n+pub use impl_trait_aux::func3;\n+\n // @has impl_trait/struct.Foo.html\n // @has - '//code[@id=\"method.v\"]' \"pub fn method<'a>(_x: impl Clone + Into<Vec<u8>> + 'a)\"\n // @!has - '//code[@id=\"method.v\"]' 'where'"}]}