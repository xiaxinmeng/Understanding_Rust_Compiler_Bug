{"sha": "a0958048b6b31c3a2ac9242aac699791431955de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOTU4MDQ4YjZiMzFjM2EyYWM5MjQyYWFjNjk5NzkxNDMxOTU1ZGU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-14T00:22:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-17T10:14:26Z"}, "message": "Stabilize `use_extern_macros`", "tree": {"sha": "b25761c49215606ae23c18d5c7ce86e70976116a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b25761c49215606ae23c18d5c7ce86e70976116a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0958048b6b31c3a2ac9242aac699791431955de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0958048b6b31c3a2ac9242aac699791431955de", "html_url": "https://github.com/rust-lang/rust/commit/a0958048b6b31c3a2ac9242aac699791431955de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0958048b6b31c3a2ac9242aac699791431955de/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f34933ba0ab615328de1f7323ad54376c8fa4dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f34933ba0ab615328de1f7323ad54376c8fa4dc1", "html_url": "https://github.com/rust-lang/rust/commit/f34933ba0ab615328de1f7323ad54376c8fa4dc1"}], "stats": {"total": 521, "additions": 85, "deletions": 436}, "files": [{"sha": "19dc35f854eed5bbf6a05f977e11f7b77c0bbfe3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -833,19 +833,12 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                                     -> bool {\n         let allow_shadowing = expansion == Mark::root();\n         let legacy_imports = self.legacy_macro_imports(&item.attrs);\n-        let mut used = legacy_imports != LegacyMacroImports::default();\n+        let used = legacy_imports != LegacyMacroImports::default();\n \n         // `#[macro_use]` is only allowed at the crate root.\n         if self.current_module.parent.is_some() && used {\n             span_err!(self.session, item.span, E0468,\n                       \"an `extern crate` loading macros must be at the crate root\");\n-        } else if !self.use_extern_macros && !used &&\n-                  self.cstore.dep_kind_untracked(module.def_id().unwrap().krate)\n-                      .macros_only() {\n-            let msg = \"proc macro crates and `#[no_link]` crates have no effect without \\\n-                       `#[macro_use]`\";\n-            self.session.span_warn(item.span, msg);\n-            used = true; // Avoid the normal unused extern crate warning\n         }\n \n         let (graph_root, arenas) = (self.graph_root, self.arenas);"}, {"sha": "77005a83e42c3113a6629002efda842c71ef7f04", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -131,7 +131,7 @@ pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n                  directive.vis.get() == ty::Visibility::Public ||\n                  directive.span.is_dummy() => {\n                 if let ImportDirectiveSubclass::MacroUse = directive.subclass {\n-                    if resolver.use_extern_macros && !directive.span.is_dummy() {\n+                    if !directive.span.is_dummy() {\n                         resolver.session.buffer_lint(\n                             lint::builtin::MACRO_USE_EXTERN_CRATE,\n                             directive.id,"}, {"sha": "ba9e8d685d1be56f0853b08181d84efd884207e8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 56, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -80,7 +80,7 @@ use std::mem::replace;\n use rustc_data_structures::sync::Lrc;\n \n use resolve_imports::{ImportDirective, ImportDirectiveSubclass, NameResolution, ImportResolver};\n-use macros::{InvocationData, LegacyBinding, LegacyScope, MacroBinding};\n+use macros::{InvocationData, LegacyBinding, MacroBinding};\n \n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used.\n@@ -1399,23 +1399,18 @@ pub struct Resolver<'a, 'b: 'a> {\n     /// crate-local macro expanded `macro_export` referred to by a module-relative path\n     macro_expanded_macro_export_errors: BTreeSet<(Span, Span)>,\n \n-    gated_errors: FxHashSet<Span>,\n     disallowed_shadowing: Vec<&'a LegacyBinding<'a>>,\n \n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n-    /// true if `#![feature(use_extern_macros)]`\n-    use_extern_macros: bool,\n \n     crate_loader: &'a mut CrateLoader<'b>,\n     macro_names: FxHashSet<Ident>,\n     macro_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n     pub all_macros: FxHashMap<Name, Def>,\n-    lexical_macro_resolutions: Vec<(Ident, &'a Cell<LegacyScope<'a>>)>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n     macro_defs: FxHashMap<Mark, DefId>,\n     local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n-    macro_exports: Vec<Export>, // FIXME: Remove when `use_extern_macros` is stabilized\n     pub whitelisted_legacy_custom_derives: Vec<Name>,\n     pub found_unresolved_macro: bool,\n \n@@ -1657,8 +1652,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         invocations.insert(Mark::root(),\n                            arenas.alloc_invocation_data(InvocationData::root(graph_root)));\n \n-        let features = session.features_untracked();\n-\n         let mut macro_defs = FxHashMap();\n         macro_defs.insert(Mark::root(), root_def_id);\n \n@@ -1717,7 +1710,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             ambiguity_errors: Vec::new(),\n             use_injections: Vec::new(),\n             proc_mac_errors: Vec::new(),\n-            gated_errors: FxHashSet(),\n             disallowed_shadowing: Vec::new(),\n             macro_expanded_macro_export_errors: BTreeSet::new(),\n \n@@ -1729,15 +1721,11 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 vis: ty::Visibility::Public,\n             }),\n \n-            use_extern_macros: features.use_extern_macros(),\n-\n             crate_loader,\n             macro_names: FxHashSet(),\n             macro_prelude: FxHashMap(),\n             all_macros: FxHashMap(),\n-            lexical_macro_resolutions: Vec::new(),\n             macro_map: FxHashMap(),\n-            macro_exports: Vec::new(),\n             invocations,\n             macro_defs,\n             local_macro_def_scopes: FxHashMap(),\n@@ -1770,9 +1758,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n     fn per_ns<F: FnMut(&mut Self, Namespace)>(&mut self, mut f: F) {\n         f(self, TypeNS);\n         f(self, ValueNS);\n-        if self.use_extern_macros {\n-            f(self, MacroNS);\n-        }\n+        f(self, MacroNS);\n     }\n \n     fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {\n@@ -2186,11 +2172,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n     fn resolve_item(&mut self, item: &Item) {\n         let name = item.ident.name;\n-\n         debug!(\"(resolving item) resolving {}\", name);\n \n-        self.check_proc_macro_attrs(&item.attrs);\n-\n         match item.node {\n             ItemKind::Enum(_, ref generics) |\n             ItemKind::Ty(_, ref generics) |\n@@ -2218,8 +2201,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                         walk_list!(this, visit_param_bound, bounds);\n \n                         for trait_item in trait_items {\n-                            this.check_proc_macro_attrs(&trait_item.attrs);\n-\n                             let type_parameters = HasTypeParameters(&trait_item.generics,\n                                                                     TraitOrImplItemRibKind);\n                             this.with_type_parameter_rib(type_parameters, |this| {\n@@ -2498,7 +2479,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                         this.visit_generics(generics);\n                         this.with_current_self_type(self_type, |this| {\n                             for impl_item in impl_items {\n-                                this.check_proc_macro_attrs(&impl_item.attrs);\n                                 this.resolve_visibility(&impl_item.vis);\n \n                                 // We also need a new scope for the impl item type parameters.\n@@ -4495,10 +4475,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n     }\n \n     fn report_shadowing_errors(&mut self) {\n-        for (ident, scope) in replace(&mut self.lexical_macro_resolutions, Vec::new()) {\n-            self.resolve_legacy_scope(scope, ident, true);\n-        }\n-\n         let mut reported_errors = FxHashSet();\n         for binding in replace(&mut self.disallowed_shadowing, Vec::new()) {\n             if self.resolve_legacy_scope(&binding.parent, binding.ident, false).is_some() &&\n@@ -4619,36 +4595,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         err.emit();\n         self.name_already_seen.insert(name, span);\n     }\n-\n-    fn check_proc_macro_attrs(&mut self, attrs: &[ast::Attribute]) {\n-        if self.use_extern_macros { return; }\n-\n-        for attr in attrs {\n-            if attr.path.segments.len() > 1 {\n-                continue\n-            }\n-            let ident = attr.path.segments[0].ident;\n-            let result = self.resolve_lexical_macro_path_segment(ident,\n-                                                                 MacroNS,\n-                                                                 false,\n-                                                                 false,\n-                                                                 true,\n-                                                                 attr.path.span);\n-            if let Ok(binding) = result {\n-                if let SyntaxExtension::AttrProcMacro(..) = *binding.binding().get_macro(self) {\n-                    attr::mark_known(attr);\n-\n-                    let msg = \"attribute procedural macros are experimental\";\n-                    let feature = \"use_extern_macros\";\n-\n-                    feature_err(&self.session.parse_sess, feature,\n-                                attr.span, GateIssue::Language, msg)\n-                        .span_label(binding.span(), \"procedural macro imported here\")\n-                        .emit();\n-                }\n-            }\n-        }\n-    }\n }\n \n fn is_self_type(path: &[Ident], namespace: Namespace) -> bool {"}, {"sha": "8f2e76d8866ddd2fbb18dce796c9a6ff7fdd503c", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 41, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -16,7 +16,7 @@ use build_reduced_graph::{BuildReducedGraphVisitor, IsMacroExport};\n use resolve_imports::ImportResolver;\n use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex,\n                          DefIndexAddressSpace};\n-use rustc::hir::def::{Def, Export, NonMacroAttrKind};\n+use rustc::hir::def::{Def, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint};\n use rustc::middle::cstore::CrateStore;\n@@ -524,21 +524,13 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         self.current_module = if module.is_trait() { module.parent.unwrap() } else { module };\n \n         // Possibly apply the macro helper hack\n-        if self.use_extern_macros && kind == MacroKind::Bang && path.len() == 1 &&\n+        if kind == MacroKind::Bang && path.len() == 1 &&\n            path[0].span.ctxt().outer().expn_info().map_or(false, |info| info.local_inner_macros) {\n             let root = Ident::new(keywords::DollarCrate.name(), path[0].span);\n             path.insert(0, root);\n         }\n \n         if path.len() > 1 {\n-            if !self.use_extern_macros && self.gated_errors.insert(span) {\n-                let msg = \"non-ident macro paths are experimental\";\n-                let feature = \"use_extern_macros\";\n-                emit_feature_err(&self.session.parse_sess, feature, span, GateIssue::Language, msg);\n-                self.found_unresolved_macro = true;\n-                return Err(Determinacy::Determined);\n-            }\n-\n             let res = self.resolve_path(None, &path, Some(MacroNS), false, span, CrateLint::No);\n             let def = match res {\n                 PathResult::NonModule(path_res) => match path_res.base_def() {\n@@ -843,7 +835,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                                 record_used: bool)\n                                 -> Option<MacroBinding<'a>> {\n         let ident = ident.modern();\n-        let mut possible_time_travel = None;\n         let mut relative_depth: u32 = 0;\n         let mut binding = None;\n         loop {\n@@ -853,9 +844,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     match invocation.expansion.get() {\n                         LegacyScope::Invocation(_) => scope.set(invocation.legacy_scope.get()),\n                         LegacyScope::Empty => {\n-                            if possible_time_travel.is_none() {\n-                                possible_time_travel = Some(scope);\n-                            }\n                             scope = &invocation.legacy_scope;\n                         }\n                         _ => {\n@@ -870,7 +858,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 }\n                 LegacyScope::Binding(potential_binding) => {\n                     if potential_binding.ident == ident {\n-                        if (!self.use_extern_macros || record_used) && relative_depth > 0 {\n+                        if record_used && relative_depth > 0 {\n                             self.disallowed_shadowing.push(potential_binding);\n                         }\n                         binding = Some(potential_binding);\n@@ -884,21 +872,11 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         let binding = if let Some(binding) = binding {\n             MacroBinding::Legacy(binding)\n         } else if let Some(binding) = self.macro_prelude.get(&ident.name).cloned() {\n-            if !self.use_extern_macros {\n-                self.record_use(ident, MacroNS, binding, DUMMY_SP);\n-            }\n             MacroBinding::Global(binding)\n         } else {\n             return None;\n         };\n \n-        if !self.use_extern_macros {\n-            if let Some(scope) = possible_time_travel {\n-                // Check for disallowed shadowing later\n-                self.lexical_macro_resolutions.push((ident, scope));\n-            }\n-        }\n-\n         Some(binding)\n     }\n \n@@ -1008,9 +986,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             find_best_match_for_name(names, name, None)\n         // Then check modules.\n         }).or_else(|| {\n-            if !self.use_extern_macros {\n-                return None;\n-            }\n             let is_macro = |def| {\n                 if let Def::Macro(_, def_kind) = def {\n                     def_kind == kind\n@@ -1086,19 +1061,10 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             let def = Def::Macro(def_id, MacroKind::Bang);\n             self.all_macros.insert(ident.name, def);\n             if attr::contains_name(&item.attrs, \"macro_export\") {\n-                if self.use_extern_macros {\n-                    let module = self.graph_root;\n-                    let vis = ty::Visibility::Public;\n-                    self.define(module, ident, MacroNS,\n-                                (def, vis, item.span, expansion, IsMacroExport));\n-                } else {\n-                    self.macro_exports.push(Export {\n-                        ident: ident.modern(),\n-                        def: def,\n-                        vis: ty::Visibility::Public,\n-                        span: item.span,\n-                    });\n-                }\n+                let module = self.graph_root;\n+                let vis = ty::Visibility::Public;\n+                self.define(module, ident, MacroNS,\n+                            (def, vis, item.span, expansion, IsMacroExport));\n             } else {\n                 self.unused_macros.insert(def_id);\n             }"}, {"sha": "e16039bc239c087a9757beb3a5bfc4858dde6ad1", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -24,7 +24,7 @@ use rustc::lint::builtin::{DUPLICATE_MACRO_EXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CR\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc::util::nodemap::FxHashSet;\n \n use syntax::ast::{Ident, Name, NodeId, CRATE_NODE_ID};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n@@ -1142,24 +1142,6 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         *module.globs.borrow_mut() = Vec::new();\n \n         let mut reexports = Vec::new();\n-        let mut exported_macro_names = FxHashMap();\n-        if ptr::eq(module, self.graph_root) {\n-            let macro_exports = mem::replace(&mut self.macro_exports, Vec::new());\n-            for export in macro_exports.into_iter().rev() {\n-                if let Some(later_span) = exported_macro_names.insert(export.ident.modern(),\n-                                                                      export.span) {\n-                    self.session.buffer_lint_with_diagnostic(\n-                        DUPLICATE_MACRO_EXPORTS,\n-                        CRATE_NODE_ID,\n-                        later_span,\n-                        &format!(\"a macro named `{}` has already been exported\", export.ident),\n-                        BuiltinLintDiagnostics::DuplicatedMacroExports(\n-                            export.ident, export.span, later_span));\n-                } else {\n-                    reexports.push(export);\n-                }\n-            }\n-        }\n \n         for (&(ident, ns), resolution) in module.resolutions.borrow().iter() {\n             let resolution = &mut *resolution.borrow_mut();\n@@ -1174,16 +1156,6 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                     if !def.def_id().is_local() {\n                         self.cstore.export_macros_untracked(def.def_id().krate);\n                     }\n-                    if let Def::Macro(..) = def {\n-                        if let Some(&span) = exported_macro_names.get(&ident.modern()) {\n-                            let msg =\n-                                format!(\"a macro named `{}` has already been exported\", ident);\n-                            self.session.struct_span_err(span, &msg)\n-                                .span_label(span, format!(\"`{}` already exported\", ident))\n-                                .span_note(binding.span, \"previous macro export here\")\n-                                .emit();\n-                        }\n-                    }\n                     reexports.push(Export {\n                         ident: ident.modern(),\n                         def: def,"}, {"sha": "b0069f826eefa68bb5b468ea41e1aae13912d71e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -302,7 +302,7 @@\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n-#![feature(use_extern_macros)]\n+#![cfg_attr(stage0, feature(use_extern_macros))]\n #![feature(doc_cfg)]\n #![feature(doc_masked)]\n #![feature(doc_spotlight)]"}, {"sha": "90b46268045e7df77c021a30f06de5aa8a4a2d69", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1124,9 +1124,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                 return attrs;\n             }\n \n-            if self.cx.ecfg.use_extern_macros_enabled() {\n-                attr = find_attr_invoc(&mut attrs);\n-            }\n+            attr = find_attr_invoc(&mut attrs);\n             traits = collect_derives(&mut self.cx, &mut attrs);\n             attrs\n         });\n@@ -1147,9 +1145,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                 return attrs;\n             }\n \n-            if self.cx.ecfg.use_extern_macros_enabled() {\n-                attr = find_attr_invoc(&mut attrs);\n-            }\n+            attr = find_attr_invoc(&mut attrs);\n             attrs\n         });\n \n@@ -1667,10 +1663,6 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn proc_macro_expr = proc_macro_expr,\n         fn proc_macro_non_items = proc_macro_non_items,\n     }\n-\n-    pub fn use_extern_macros_enabled(&self) -> bool {\n-        self.features.map_or(false, |features| features.use_extern_macros())\n-    }\n }\n \n // A Marker adds the given mark to the syntax context."}, {"sha": "6fec1f3b1d500af5d0d97dab4309417a430b8cf3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -81,17 +81,6 @@ macro_rules! declare_features {\n             {\n                 $(f(stringify!($feature), self.$feature);)+\n             }\n-\n-            pub fn use_extern_macros(&self) -> bool {\n-                // A number of \"advanced\" macro features enable\n-                // macro modularization (`use_extern_macros`) implicitly.\n-                self.use_extern_macros || self.decl_macro ||\n-                self.tool_attributes || self.custom_attribute ||\n-                self.macros_in_extern || self.proc_macro_path_invoc ||\n-                self.proc_macro_mod || self.proc_macro_expr ||\n-                self.proc_macro_non_items || self.proc_macro_gen ||\n-                self.stmt_expr_attributes || self.unrestricted_attribute_tokens\n-            }\n         }\n     };\n \n@@ -308,8 +297,6 @@ declare_features! (\n     // Allows #[link(..., cfg(..))]\n     (active, link_cfg, \"1.14.0\", Some(37406), None),\n \n-    (active, use_extern_macros, \"1.15.0\", Some(35896), Some(Edition::Edition2018)),\n-\n     // `extern \"ptx-*\" fn()`\n     (active, abi_ptx, \"1.15.0\", Some(38788), None),\n \n@@ -535,7 +522,7 @@ declare_features! (\n     (removed, advanced_slice_patterns, \"1.0.0\", Some(23121), None,\n      Some(\"merged into `#![feature(slice_patterns)]`\")),\n     (removed, macro_reexport, \"1.0.0\", Some(29638), None,\n-     Some(\"subsumed by `#![feature(use_extern_macros)]` and `pub use`\")),\n+     Some(\"subsumed by `pub use`\")),\n );\n \n declare_features! (\n@@ -652,6 +639,9 @@ declare_features! (\n     (accepted, repr_transparent, \"1.28.0\", Some(43036), None),\n     // Defining procedural macros in `proc-macro` crates\n     (accepted, proc_macro, \"1.29.0\", Some(38356), None),\n+    // Allows importing and reexporting macros with `use`,\n+    // enables macro modularization in general.\n+    (accepted, use_extern_macros, \"1.30.0\", Some(35896), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must"}, {"sha": "3cb565c1ede38efeb2e3a6bb8b63b1a72cbcaaed", "filename": "src/test/compile-fail-fulldeps/proc-macro/attribute-with-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute-with-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute-with-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute-with-error.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -11,8 +11,6 @@\n // aux-build:attribute-with-error.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros)]\n-\n extern crate attribute_with_error;\n \n use attribute_with_error::foo;"}, {"sha": "e941367b08de9ade82c41f03dfef01bcd854ceba", "filename": "src/test/compile-fail-fulldeps/proc-macro/attributes-included.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -12,7 +12,6 @@\n // ignore-stage1\n // compile-pass\n \n-#![feature(use_extern_macros)]\n #![warn(unused)]\n \n extern crate attributes_included;"}, {"sha": "52d7afb26adbab633fa0eb32568c98cb38fd2816", "filename": "src/test/compile-fail-fulldeps/proc-macro/issue-41211.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -13,7 +13,6 @@\n // FIXME: https://github.com/rust-lang/rust/issues/41430\n // This is a temporary regression test for the ICE reported in #41211\n \n-#![feature(use_extern_macros)]\n #![emit_unchanged]\n //~^ ERROR attribute `emit_unchanged` is currently unknown to the compiler\n extern crate issue_41211;"}, {"sha": "0fcb9efc1c95c4f824c7aab2a00a9c63b8641c42", "filename": "src/test/compile-fail-fulldeps/proc-macro/macro-use-attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:attr_proc_macro.rs\n-#![feature(use_extern_macros)]\n \n #[macro_use] extern crate attr_proc_macro;\n "}, {"sha": "f280e74fc90bde4377382249a869627acec6ade1", "filename": "src/test/compile-fail-fulldeps/proc-macro/macros-in-extern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -12,8 +12,6 @@\n // ignore-stage1\n // ignore-wasm32\n \n-#![feature(use_extern_macros)]\n-\n extern crate test_macros;\n \n use test_macros::{nop_attr, no_output, emit_input};"}, {"sha": "b7ab978b8ed0a9714eb61008495091faf1702908", "filename": "src/test/compile-fail-fulldeps/proc-macro/more-gates.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmore-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmore-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmore-gates.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:more-gates.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate more_gates as foo;\n \n use foo::*;"}, {"sha": "ab05ca28386ab0f094db1a05e55c0b4701274b1b", "filename": "src/test/compile-fail-fulldeps/proc-macro/no-macro-use-attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fno-macro-use-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fno-macro-use-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fno-macro-use-attr.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -11,9 +11,10 @@\n // aux-build:derive-a.rs\n \n #![feature(rustc_attrs)]\n+#![warn(unused_extern_crates)]\n \n extern crate derive_a;\n-//~^ WARN proc macro crates and `#[no_link]` crates have no effect without `#[macro_use]`\n+//~^ WARN unused extern crate\n \n #[rustc_error]\n fn main() {} //~ ERROR compilation successful"}, {"sha": "effb3ad5189e1937e617086588b16757a3d90478", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -12,7 +12,6 @@\n // ignore-stage1\n \n #![allow(warnings)]\n-#![feature(use_extern_macros)]\n \n extern crate attr_args;\n use attr_args::{attr_with_args, identity};"}, {"sha": "1a9d9b9ee621d5fd84cdfb953017160c421452fc", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-cfg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-cfg.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -12,8 +12,6 @@\n // ignore-stage1\n // revisions: foo bar\n \n-#![feature(use_extern_macros)]\n-\n extern crate attr_cfg;\n use attr_cfg::attr_cfg;\n "}, {"sha": "698a0eca1734fd0bb038752107b8361c081a0292", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-on-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -11,8 +11,6 @@\n // aux-build:attr-on-trait.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros)]\n-\n extern crate attr_on_trait;\n \n use attr_on_trait::foo;"}, {"sha": "ca88482064bc91ba39659f539d1c13afdf9de50b", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/hygiene_example.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_extern_macros)]\n-\n extern crate hygiene_example_codegen;\n \n pub use hygiene_example_codegen::hello;"}, {"sha": "93023f8f8edfc25e2a982babb5e48a9f86e00091", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-attr-cfg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-attr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-attr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-attr-cfg.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -11,8 +11,6 @@\n // aux-build:derive-attr-cfg.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros)]\n-\n extern crate derive_attr_cfg;\n use derive_attr_cfg::Foo;\n "}, {"sha": "0df0288216eff20bca370b29164fbfd24c59248e", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-two-attrs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-two-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-two-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-two-attrs.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:derive-two-attrs.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate derive_two_attrs as foo;\n \n use foo::A;"}, {"sha": "ce2fed86e46ae86850870b2c9b0b821bfa5cedf6", "filename": "src/test/run-pass-fulldeps/proc-macro/gen-lifetime-token.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fgen-lifetime-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fgen-lifetime-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fgen-lifetime-token.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:gen-lifetime-token.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate gen_lifetime_token as bar;\n \n bar::bar!();"}, {"sha": "3fc7446815eb4cf9dacf5f5dc3a07c66519ee50b", "filename": "src/test/run-pass-fulldeps/proc-macro/issue-39889.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-39889.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-39889.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-39889.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -11,9 +11,6 @@\n // aux-build:issue-39889.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros)]\n-#![allow(unused)]\n-\n extern crate issue_39889;\n use issue_39889::Issue39889;\n "}, {"sha": "c73441e30e6d57b7933f57be500715eb3ed9fd6d", "filename": "src/test/run-pass-fulldeps/proc-macro/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Flifetimes.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -11,8 +11,6 @@\n // aux-build:lifetimes.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros)]\n-\n extern crate lifetimes;\n use lifetimes::*;\n "}, {"sha": "d6f7cc4699adb39c9fb0cbd05918e3667afa5038", "filename": "src/test/run-pass-fulldeps/proc-macro/modify-ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmodify-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmodify-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmodify-ast.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:modify-ast.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate modify_ast;\n \n use modify_ast::*;"}, {"sha": "7a53348f96396ebd3acc270477e7d583f9b0bcd2", "filename": "src/test/run-pass-fulldeps/proc-macro/not-joint.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fnot-joint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fnot-joint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fnot-joint.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:not-joint.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate not_joint as bar;\n use bar::{tokens, nothing};\n "}, {"sha": "415cada265ec7c35da8be1ad174d12fddf3c3b34", "filename": "src/test/run-pass-fulldeps/proc-macro/span-api-tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fspan-api-tests.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -13,8 +13,6 @@\n \n // ignore-pretty\n \n-#![feature(use_extern_macros)]\n-\n #[macro_use]\n extern crate span_test_macros;\n "}, {"sha": "7f14b2c4659c68908cac4669c452da298823abf1", "filename": "src/test/run-pass/auxiliary/issue_38715-modern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715-modern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715-modern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715-modern.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_extern_macros)]\n #![allow(duplicate_macro_exports)]\n \n #[macro_export]"}, {"sha": "e860f7021e5368378f5d0abc1ba1cabe96ecbbfb", "filename": "src/test/run-pass/paths-in-macro-invocations.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass%2Fpaths-in-macro-invocations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass%2Fpaths-in-macro-invocations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpaths-in-macro-invocations.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:two_macros.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate two_macros;\n \n ::two_macros::macro_one!();"}, {"sha": "66ab00da7f4a7b6ea51c10c92365d69af3ca6e89", "filename": "src/test/run-pass/use-macro-self.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass%2Fuse-macro-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frun-pass%2Fuse-macro-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-macro-self.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:use-macro-self.rs\n \n-#![feature(use_extern_macros)]\n-\n #[macro_use]\n extern crate use_macro_self;\n "}, {"sha": "7ccfb3d9da675b744c80566340b6f6db67986cd1", "filename": "src/test/rustdoc/cross-crate-links.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frustdoc%2Fcross-crate-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frustdoc%2Fcross-crate-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcross-crate-links.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -11,8 +11,6 @@\n // aux-build:all-item-types.rs\n // build-aux-docs\n \n-#![feature(use_extern_macros)]\n-\n #![crate_name = \"foo\"]\n \n #[macro_use]"}, {"sha": "5467a210bfd86482c042cf9ff03066425734f460", "filename": "src/test/rustdoc/inline_cross/macro-vis.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacro-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacro-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacro-vis.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -12,8 +12,6 @@\n // build-aux-docs\n // ignore-cross-compile\n \n-#![feature(use_extern_macros)]\n-\n #[macro_use] extern crate qwop;\n \n // @has macro_vis/macro.some_macro.html"}, {"sha": "474a1da1875496383d44f0cca2a42a4350763e50", "filename": "src/test/rustdoc/inline_cross/macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -12,7 +12,6 @@\n // build-aux-docs\n \n #![feature(macro_test)]\n-#![feature(use_extern_macros)]\n \n #![crate_name = \"foo\"]\n "}, {"sha": "48fb9bfd2075ec62c18b8b8f170b0c61cee71d86", "filename": "src/test/rustdoc/pub-use-extern-macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:pub-use-extern-macros.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate macros;\n \n // @has pub_use_extern_macros/macro.bar.html"}, {"sha": "af47dad9e0bd7240fd7b28e9338a434bce5c304f", "filename": "src/test/ui-fulldeps/proc-macro/attribute-spans-preserved.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:attribute-spans-preserved.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate attribute_spans_preserved as foo;\n \n use foo::foo;"}, {"sha": "329e5bea61cd5ba54cd20d50d6f1583e032b664d", "filename": "src/test/ui-fulldeps/proc-macro/attribute-spans-preserved.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/attribute-spans-preserved.rs:19:23\n+  --> $DIR/attribute-spans-preserved.rs:17:23\n    |\n LL | #[ foo ( let y: u32 = \"z\"; ) ] //~ ERROR: mismatched types\n    |                       ^^^ expected u32, found reference\n@@ -8,7 +8,7 @@ LL | #[ foo ( let y: u32 = \"z\"; ) ] //~ ERROR: mismatched types\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/attribute-spans-preserved.rs:20:23\n+  --> $DIR/attribute-spans-preserved.rs:18:23\n    |\n LL | #[ bar { let x: u32 = \"y\"; } ] //~ ERROR: mismatched types\n    |                       ^^^ expected u32, found reference"}, {"sha": "b29f2775201b8baa6feabf560ec444913e4a0573", "filename": "src/test/ui-fulldeps/proc-macro/macro-brackets.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-brackets.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:macro-brackets.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate macro_brackets as bar;\n use bar::doit;\n "}, {"sha": "7c263d38df9714c7329801f9917a6a74158d0e25", "filename": "src/test/ui-fulldeps/proc-macro/macro-brackets.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-brackets.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/macro-brackets.rs:23:21\n+  --> $DIR/macro-brackets.rs:21:21\n    |\n LL | id![static X: u32 = 'a';]; //~ ERROR: mismatched types\n    |                     ^^^ expected u32, found char"}, {"sha": "fa05ad2fc605bed9d436d0c6e0efcc5e33641da5", "filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,7 +10,6 @@\n \n // no-prefer-dynamic\n \n-#![feature(use_extern_macros)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "342d7ddb36cf2660866db1a9ee282b8cfc2bac18", "filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved-2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,53 +1,53 @@\n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:35:5\n+  --> $DIR/macro-namespace-reserved-2.rs:34:5\n    |\n LL |     my_macro!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n    |     ^^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:38:5\n+  --> $DIR/macro-namespace-reserved-2.rs:37:5\n    |\n LL |     my_macro_attr!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n    |     ^^^^^^^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:41:5\n+  --> $DIR/macro-namespace-reserved-2.rs:40:5\n    |\n LL |     MyTrait!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n    |     ^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:44:1\n+  --> $DIR/macro-namespace-reserved-2.rs:43:1\n    |\n LL | #[my_macro] //~ ERROR can't use a procedural macro from the same crate that defines it\n    | ^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:46:1\n+  --> $DIR/macro-namespace-reserved-2.rs:45:1\n    |\n LL | #[my_macro_attr] //~ ERROR can't use a procedural macro from the same crate that defines it\n    | ^^^^^^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:48:1\n+  --> $DIR/macro-namespace-reserved-2.rs:47:1\n    |\n LL | #[MyTrait] //~ ERROR can't use a procedural macro from the same crate that defines it\n    | ^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:51:10\n+  --> $DIR/macro-namespace-reserved-2.rs:50:10\n    |\n LL | #[derive(my_macro)] //~ ERROR can't use a procedural macro from the same crate that defines it\n    |          ^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:53:10\n+  --> $DIR/macro-namespace-reserved-2.rs:52:10\n    |\n LL | #[derive(my_macro_attr)] //~ ERROR can't use a procedural macro from the same crate that defines it\n    |          ^^^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:55:10\n+  --> $DIR/macro-namespace-reserved-2.rs:54:10\n    |\n LL | #[derive(MyTrait)] //~ ERROR can't use a procedural macro from the same crate that defines it\n    |          ^^^^^^^"}, {"sha": "8f059d6344df67bae76a34d748eb27ebd556289b", "filename": "src/test/ui-fulldeps/proc-macro/nested-item-spans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnested-item-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnested-item-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnested-item-spans.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:nested-item-spans.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate nested_item_spans;\n \n use nested_item_spans::foo;"}, {"sha": "75140747e8c76fbe3e7b7d207360edc2e7b8ed6b", "filename": "src/test/ui-fulldeps/proc-macro/nested-item-spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnested-item-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnested-item-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnested-item-spans.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/nested-item-spans.rs:22:22\n+  --> $DIR/nested-item-spans.rs:20:22\n    |\n LL |         let x: u32 = \"x\"; //~ ERROR: mismatched types\n    |                      ^^^ expected u32, found reference\n@@ -8,7 +8,7 @@ LL |         let x: u32 = \"x\"; //~ ERROR: mismatched types\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/nested-item-spans.rs:31:22\n+  --> $DIR/nested-item-spans.rs:29:22\n    |\n LL |         let x: u32 = \"x\"; //~ ERROR: mismatched types\n    |                      ^^^ expected u32, found reference"}, {"sha": "42b2b1d650f763b89fc52087da4d4a66ebd8e48a", "filename": "src/test/ui/duplicate/duplicate-check-macro-exports.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-check-macro-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-check-macro-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-check-macro-exports.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_extern_macros)]\n-\n pub use std::panic;\n \n #[macro_export]"}, {"sha": "e2119efbd3db5b2d572a47195fb0ed2fb1dfcbf1", "filename": "src/test/ui/duplicate/duplicate-check-macro-exports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-check-macro-exports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-check-macro-exports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-check-macro-exports.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,5 +1,5 @@\n error[E0255]: the name `panic` is defined multiple times\n-  --> $DIR/duplicate-check-macro-exports.rs:16:1\n+  --> $DIR/duplicate-check-macro-exports.rs:14:1\n    |\n LL | pub use std::panic;\n    |         ---------- previous import of the macro `panic` here"}, {"sha": "4b1bf7d8f7923ff4438ed51bdddef297bb7a081c", "filename": "src/test/ui/extern/extern-macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fextern%2Fextern-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fextern%2Fextern-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-macro.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // #41719\n \n-#![feature(use_extern_macros)]\n-\n fn main() {\n     enum Foo {}\n     let _ = Foo::bar!(); //~ ERROR fail to resolve non-ident macro path"}, {"sha": "b5515bfcc64232c7c45ea732945ed0db026eaf9b", "filename": "src/test/ui/extern/extern-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fextern%2Fextern-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fextern%2Fextern-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-macro.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,5 +1,5 @@\n error: fail to resolve non-ident macro path\n-  --> $DIR/extern-macro.rs:17:13\n+  --> $DIR/extern-macro.rs:15:13\n    |\n LL |     let _ = Foo::bar!(); //~ ERROR fail to resolve non-ident macro path\n    |             ^^^^^^^^"}, {"sha": "5aa1670b82888f9736776a1ae4b9f36b3248256d", "filename": "src/test/ui/feature-gates/feature-gate-tool_attributes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_attributes.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_extern_macros)]\n-\n fn main() {\n     #[rustfmt::skip] //~ ERROR tool attributes are unstable\n     let x = 3"}, {"sha": "ca9542dcc956acb4893d39c18f5c159437cbd6a1", "filename": "src/test/ui/feature-gates/feature-gate-tool_attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_attributes.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: tool attributes are unstable (see issue #44690)\n-  --> $DIR/feature-gate-tool_attributes.rs:14:5\n+  --> $DIR/feature-gate-tool_attributes.rs:12:5\n    |\n LL |     #[rustfmt::skip] //~ ERROR tool attributes are unstable\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "92e10c190aa058745a3c3ca58585001da0e6c337", "filename": "src/test/ui/hygiene/local_inner_macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -11,8 +11,6 @@\n // compile-pass\n // aux-build:local_inner_macros.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate local_inner_macros;\n \n use local_inner_macros::{public_macro, public_macro_dynamic};"}, {"sha": "0a4bdb74807c73d842bed9e436a51ab0a12bfc27", "filename": "src/test/ui/hygiene/local_inner_macros_disabled.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.rs?ref=f34933ba0ab615328de1f7323ad54376c8fa4dc1", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// `local_inner_macros` has no effect if `feature(use_extern_macros)` is not enabled\n-\n-// aux-build:local_inner_macros.rs\n-\n-#[macro_use(public_macro)]\n-extern crate local_inner_macros;\n-\n-public_macro!(); //~ ERROR cannot find macro `helper2!` in this scope\n-\n-fn main() {}"}, {"sha": "3dcd03b6f42e173592bc14a97408733d49cec299", "filename": "src/test/ui/hygiene/local_inner_macros_disabled.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.stderr?ref=f34933ba0ab615328de1f7323ad54376c8fa4dc1", "patch": "@@ -1,10 +0,0 @@\n-error: cannot find macro `helper2!` in this scope\n-  --> $DIR/local_inner_macros_disabled.rs:18:1\n-   |\n-LL | public_macro!(); //~ ERROR cannot find macro `helper2!` in this scope\n-   | ^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-"}, {"sha": "6691d98c2b7f43332fdfdc050d02a62436d7b08e", "filename": "src/test/ui/imports/local-modularized-tricky-fail-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // Crate-local macro expanded `macro_export` macros cannot be accessed with module-relative paths.\n \n-#![feature(use_extern_macros)]\n-\n macro_rules! define_exported { () => {\n     #[macro_export]\n     macro_rules! exported {"}, {"sha": "34c50e04288e50d8df200f2a54ed85de66830466", "filename": "src/test/ui/imports/local-modularized-tricky-fail-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,11 +1,11 @@\n error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n-  --> $DIR/local-modularized-tricky-fail-3.rs:25:9\n+  --> $DIR/local-modularized-tricky-fail-3.rs:23:9\n    |\n LL |     use exported;\n    |         ^^^^^^^^\n    |\n note: the macro is defined here\n-  --> $DIR/local-modularized-tricky-fail-3.rs:17:5\n+  --> $DIR/local-modularized-tricky-fail-3.rs:15:5\n    |\n LL | /     macro_rules! exported {\n LL | |         () => ()\n@@ -16,13 +16,13 @@ LL |   define_exported!();\n    |   ------------------- in this macro invocation\n \n error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n-  --> $DIR/local-modularized-tricky-fail-3.rs:30:5\n+  --> $DIR/local-modularized-tricky-fail-3.rs:28:5\n    |\n LL |     ::exported!();\n    |     ^^^^^^^^^^\n    |\n note: the macro is defined here\n-  --> $DIR/local-modularized-tricky-fail-3.rs:17:5\n+  --> $DIR/local-modularized-tricky-fail-3.rs:15:5\n    |\n LL | /     macro_rules! exported {\n LL | |         () => ()"}, {"sha": "9392473eace66c45672e2d63a1bafa55ffbb47e4", "filename": "src/test/ui/imports/local-modularized-tricky-pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // compile-pass\n \n-#![feature(use_extern_macros)]\n-\n macro_rules! define_exported { () => {\n     #[macro_export]\n     macro_rules! exported {"}, {"sha": "260a406ef75f9d2c3a32f9aed4f2bc395c1be071", "filename": "src/test/ui/imports/local-modularized.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // compile-pass\n \n-#![feature(use_extern_macros)]\n-\n #[macro_export(local_inner_macros)]\n macro_rules! dollar_crate_exported {\n     (1) => { $crate::exported!(); };"}, {"sha": "50cfd2d2170e82a5155641894dfd8935743fe58c", "filename": "src/test/ui/imports/macro-paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:two_macros.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate two_macros;\n \n mod foo {"}, {"sha": "08f45e1a57530d33881eddf75312e5866a3b148c", "filename": "src/test/ui/imports/macro-paths.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,34 +1,34 @@\n error[E0659]: `bar` is ambiguous\n-  --> $DIR/macro-paths.rs:25:5\n+  --> $DIR/macro-paths.rs:23:5\n    |\n LL |     bar::m! { //~ ERROR ambiguous\n    |     ^^^^^^\n    |\n note: `bar` could refer to the name defined here\n-  --> $DIR/macro-paths.rs:26:9\n+  --> $DIR/macro-paths.rs:24:9\n    |\n LL |         mod bar { pub use two_macros::m; }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: `bar` could also refer to the name imported here\n-  --> $DIR/macro-paths.rs:24:9\n+  --> $DIR/macro-paths.rs:22:9\n    |\n LL |     use foo::*;\n    |         ^^^^^^\n    = note: macro-expanded items do not shadow when used in a macro invocation path\n \n error[E0659]: `baz` is ambiguous\n-  --> $DIR/macro-paths.rs:35:5\n+  --> $DIR/macro-paths.rs:33:5\n    |\n LL |     baz::m! { //~ ERROR ambiguous\n    |     ^^^^^^\n    |\n note: `baz` could refer to the name defined here\n-  --> $DIR/macro-paths.rs:36:9\n+  --> $DIR/macro-paths.rs:34:9\n    |\n LL |         mod baz { pub use two_macros::m; }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: `baz` could also refer to the name defined here\n-  --> $DIR/macro-paths.rs:30:1\n+  --> $DIR/macro-paths.rs:28:1\n    |\n LL | / pub mod baz {\n LL | |     pub use two_macros::m;"}, {"sha": "47ab8fc6c2f75ccbd663fd47f3e99c176f421f67", "filename": "src/test/ui/imports/macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:two_macros.rs\n \n-#![feature(use_extern_macros)]\n-\n extern crate two_macros; // two identity macros `m` and `n`\n \n mod foo {"}, {"sha": "01d1f4fdfad03df261080be2fa31a4b06a28b30c", "filename": "src/test/ui/imports/macros.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,51 +1,51 @@\n error: `m` is ambiguous\n-  --> $DIR/macros.rs:50:5\n+  --> $DIR/macros.rs:48:5\n    |\n LL |     m!(); //~ ERROR ambiguous\n    |     ^\n    |\n note: `m` could refer to the macro defined here\n-  --> $DIR/macros.rs:48:5\n+  --> $DIR/macros.rs:46:5\n    |\n LL |     macro_rules! m { () => {} }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: `m` could also refer to the macro imported here\n-  --> $DIR/macros.rs:49:9\n+  --> $DIR/macros.rs:47:9\n    |\n LL |     use two_macros::m;\n    |         ^^^^^^^^^^^^^\n \n error[E0659]: `m` is ambiguous\n-  --> $DIR/macros.rs:28:5\n+  --> $DIR/macros.rs:26:5\n    |\n LL |     m! { //~ ERROR ambiguous\n    |     ^\n    |\n note: `m` could refer to the name imported here\n-  --> $DIR/macros.rs:29:13\n+  --> $DIR/macros.rs:27:13\n    |\n LL |         use foo::m;\n    |             ^^^^^^\n note: `m` could also refer to the name imported here\n-  --> $DIR/macros.rs:27:9\n+  --> $DIR/macros.rs:25:9\n    |\n LL |     use two_macros::*;\n    |         ^^^^^^^^^^^^^\n    = note: macro-expanded macro imports do not shadow\n \n error[E0659]: `m` is ambiguous\n-  --> $DIR/macros.rs:41:9\n+  --> $DIR/macros.rs:39:9\n    |\n LL |         m! { //~ ERROR ambiguous\n    |         ^\n    |\n note: `m` could refer to the name imported here\n-  --> $DIR/macros.rs:42:17\n+  --> $DIR/macros.rs:40:17\n    |\n LL |             use two_macros::n as m;\n    |                 ^^^^^^^^^^^^^^^^^^\n note: `m` could also refer to the name imported here\n-  --> $DIR/macros.rs:34:9\n+  --> $DIR/macros.rs:32:9\n    |\n LL |     use two_macros::m;\n    |         ^^^^^^^^^^^^^"}, {"sha": "90718abc37b3101ef9aaca11992e63354254cfbf", "filename": "src/test/ui/imports/shadow_builtin_macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:two_macros.rs\n \n-#![feature(use_extern_macros)]\n-\n mod foo {\n     extern crate two_macros;\n     pub use self::two_macros::m as panic;"}, {"sha": "693b7aadeca4e334d8767f269317eb38fcde4d0e", "filename": "src/test/ui/imports/shadow_builtin_macros.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,5 +1,5 @@\n error: `panic` is already in scope\n-  --> $DIR/shadow_builtin_macros.rs:42:9\n+  --> $DIR/shadow_builtin_macros.rs:40:9\n    |\n LL |         macro_rules! panic { () => {} } //~ ERROR `panic` is already in scope\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -10,46 +10,46 @@ LL |     m!();\n    = note: macro-expanded `macro_rules!`s may not shadow existing macros (see RFC 1560)\n \n error[E0659]: `panic` is ambiguous\n-  --> $DIR/shadow_builtin_macros.rs:27:14\n+  --> $DIR/shadow_builtin_macros.rs:25:14\n    |\n LL |     fn f() { panic!(); } //~ ERROR ambiguous\n    |              ^^^^^\n    |\n note: `panic` could refer to the name imported here\n-  --> $DIR/shadow_builtin_macros.rs:26:9\n+  --> $DIR/shadow_builtin_macros.rs:24:9\n    |\n LL |     use foo::*;\n    |         ^^^^^^\n    = note: `panic` is also a builtin macro\n    = note: consider adding an explicit import of `panic` to disambiguate\n \n error[E0659]: `panic` is ambiguous\n-  --> $DIR/shadow_builtin_macros.rs:32:14\n+  --> $DIR/shadow_builtin_macros.rs:30:14\n    |\n LL |     fn f() { panic!(); } //~ ERROR ambiguous\n    |              ^^^^^\n    |\n note: `panic` could refer to the name imported here\n-  --> $DIR/shadow_builtin_macros.rs:31:26\n+  --> $DIR/shadow_builtin_macros.rs:29:26\n    |\n LL |     ::two_macros::m!(use foo::panic;);\n    |                          ^^^^^^^^^^\n    = note: `panic` is also a builtin macro\n    = note: macro-expanded macro imports do not shadow\n \n error[E0659]: `n` is ambiguous\n-  --> $DIR/shadow_builtin_macros.rs:61:5\n+  --> $DIR/shadow_builtin_macros.rs:59:5\n    |\n LL |     n!(); //~ ERROR ambiguous\n    |     ^\n    |\n note: `n` could refer to the name imported here\n-  --> $DIR/shadow_builtin_macros.rs:60:9\n+  --> $DIR/shadow_builtin_macros.rs:58:9\n    |\n LL |     use bar::*;\n    |         ^^^^^^\n note: `n` could also refer to the name imported here\n-  --> $DIR/shadow_builtin_macros.rs:48:13\n+  --> $DIR/shadow_builtin_macros.rs:46:13\n    |\n LL | #[macro_use(n)]\n    |             ^"}, {"sha": "e1181eb741bf9e71fc52c1641506c6ee7db189e7", "filename": "src/test/ui/macros/macro-path-prelude-fail-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-1.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_extern_macros, extern_prelude)]\n+#![feature(extern_prelude)]\n \n mod m {\n     fn check() {"}, {"sha": "82258dac37b86bf9b64cf0b99ebf37fb6041c72a", "filename": "src/test/ui/macros/macro-path-prelude-fail-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-2.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_extern_macros)]\n-\n mod m {\n     fn check() {\n         Result::Ok!(); //~ ERROR fail to resolve non-ident macro path"}, {"sha": "876ee2584e9aa8287f74bb50f93960b3c54e9ab0", "filename": "src/test/ui/macros/macro-path-prelude-fail-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-2.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,5 +1,5 @@\n error: fail to resolve non-ident macro path\n-  --> $DIR/macro-path-prelude-fail-2.rs:15:9\n+  --> $DIR/macro-path-prelude-fail-2.rs:13:9\n    |\n LL |         Result::Ok!(); //~ ERROR fail to resolve non-ident macro path\n    |         ^^^^^^^^^^"}, {"sha": "c706b8f613dd7a78e4c63539b07de81aaead4c2c", "filename": "src/test/ui/macros/macro-path-prelude-fail-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_extern_macros)]\n-\n #[derive(inline)] //~ ERROR cannot find derive macro `inline` in this scope\n struct S;\n "}, {"sha": "a8edf54d2204851045c74700ca826144a2e3cd96", "filename": "src/test/ui/macros/macro-path-prelude-fail-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,11 +1,11 @@\n error: cannot find derive macro `inline` in this scope\n-  --> $DIR/macro-path-prelude-fail-3.rs:13:10\n+  --> $DIR/macro-path-prelude-fail-3.rs:11:10\n    |\n LL | #[derive(inline)] //~ ERROR cannot find derive macro `inline` in this scope\n    |          ^^^^^^\n \n error: cannot find macro `inline!` in this scope\n-  --> $DIR/macro-path-prelude-fail-3.rs:17:5\n+  --> $DIR/macro-path-prelude-fail-3.rs:15:5\n    |\n LL |     inline!(); //~ ERROR cannot find macro `inline!` in this scope\n    |     ^^^^^^ help: you could try the macro: `line`"}, {"sha": "1f281d4a686035802a5458dc97f21071bfc460da", "filename": "src/test/ui/macros/macro-path-prelude-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -10,7 +10,7 @@\n \n // compile-pass\n \n-#![feature(use_extern_macros, extern_prelude)]\n+#![feature(extern_prelude)]\n \n mod m {\n     fn check() {"}, {"sha": "c93c7144f9ebe08bc8165f2ad7f648aaf226cb5f", "filename": "src/test/ui/macros/macro-reexport-removed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -4,7 +4,7 @@ error[E0557]: feature has been removed\n LL | #![feature(macro_reexport)] //~ ERROR feature has been removed\n    |            ^^^^^^^^^^^^^^\n    |\n-note: subsumed by `#![feature(use_extern_macros)]` and `pub use`\n+note: subsumed by `pub use`\n   --> $DIR/macro-reexport-removed.rs:13:12\n    |\n LL | #![feature(macro_reexport)] //~ ERROR feature has been removed"}, {"sha": "1281adce5c58e694e8f55ef274433317c41961bd", "filename": "src/test/ui/macros/macro-with-seps-err-msg.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Fmacros%2Fmacro-with-seps-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Fmacros%2Fmacro-with-seps-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-with-seps-err-msg.rs?ref=f34933ba0ab615328de1f7323ad54376c8fa4dc1", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// gate-test-use_extern_macros\n-\n-fn main() {\n-    globnar::brotz!(); //~ ERROR non-ident macro paths are experimental\n-}"}, {"sha": "0b6d186b2368dfc9fc31f8bdb225046bed78e401", "filename": "src/test/ui/macros/macro-with-seps-err-msg.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Fmacros%2Fmacro-with-seps-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Fmacros%2Fmacro-with-seps-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-with-seps-err-msg.stderr?ref=f34933ba0ab615328de1f7323ad54376c8fa4dc1", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: non-ident macro paths are experimental (see issue #35896)\n-  --> $DIR/macro-with-seps-err-msg.rs:14:5\n-   |\n-LL |     globnar::brotz!(); //~ ERROR non-ident macro paths are experimental\n-   |     ^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(use_extern_macros)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "4a812739a6b26f43163c22d52a1da810242330c6", "filename": "src/test/ui/macros/macro_undefined.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -19,5 +19,5 @@ mod m {\n \n fn main() {\n     k!(); //~ ERROR cannot find\n-    kl!(); //~ ERROR cannot find\n+    kl!();\n }"}, {"sha": "87b039f483485d57d07258279df54ad4d0b6f467", "filename": "src/test/ui/macros/macro_undefined.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,16 +1,8 @@\n-error: cannot find macro `kl!` in this scope\n-  --> $DIR/macro_undefined.rs:22:5\n-   |\n-LL |     kl!(); //~ ERROR cannot find\n-   |     ^^\n-   |\n-   = help: have you added the `#[macro_use]` on the module/import?\n-\n error: cannot find macro `k!` in this scope\n   --> $DIR/macro_undefined.rs:21:5\n    |\n LL |     k!(); //~ ERROR cannot find\n    |     ^ help: you could try the macro: `kl`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "ce2dfb906c5ce3cf648b728576c023a37a7f18cc", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -30,8 +30,6 @@ fn main() {\n     env!(foo, abr, baz); //~ ERROR\n     env!(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\"); //~ ERROR\n \n-    foo::blah!(); //~ ERROR\n-\n     format!(invalid); //~ ERROR\n \n     include!(invalid); //~ ERROR"}, {"sha": "81e250d5ea09e43ee780b4593039ba7f6ccbb514", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -40,16 +40,8 @@ error: environment variable `RUST_HOPEFULLY_THIS_DOESNT_EXIST` not defined\n LL |     env!(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0658]: non-ident macro paths are experimental (see issue #35896)\n-  --> $DIR/macros-nonfatal-errors.rs:33:5\n-   |\n-LL |     foo::blah!(); //~ ERROR\n-   |     ^^^^^^^^^\n-   |\n-   = help: add #![feature(use_extern_macros)] to the crate attributes to enable\n-\n error: format argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:35:13\n+  --> $DIR/macros-nonfatal-errors.rs:33:13\n    |\n LL |     format!(invalid); //~ ERROR\n    |             ^^^^^^^\n@@ -59,42 +51,41 @@ LL |     format!(\"{}\", invalid); //~ ERROR\n    |             ^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:37:14\n+  --> $DIR/macros-nonfatal-errors.rs:35:14\n    |\n LL |     include!(invalid); //~ ERROR\n    |              ^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:39:18\n+  --> $DIR/macros-nonfatal-errors.rs:37:18\n    |\n LL |     include_str!(invalid); //~ ERROR\n    |                  ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: No such file or directory (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:40:5\n+  --> $DIR/macros-nonfatal-errors.rs:38:5\n    |\n LL |     include_str!(\"i'd be quite surprised if a file with this name existed\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:41:20\n+  --> $DIR/macros-nonfatal-errors.rs:39:20\n    |\n LL |     include_bytes!(invalid); //~ ERROR\n    |                    ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: No such file or directory (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:42:5\n+  --> $DIR/macros-nonfatal-errors.rs:40:5\n    |\n LL |     include_bytes!(\"i'd be quite surprised if a file with this name existed\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trace_macros! accepts only `true` or `false`\n-  --> $DIR/macros-nonfatal-errors.rs:44:5\n+  --> $DIR/macros-nonfatal-errors.rs:42:5\n    |\n LL |     trace_macros!(invalid); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 14 previous errors\n \n-Some errors occurred: E0658, E0665.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0665`."}, {"sha": "36efb67cf803264cc9ce96a56afd0c97e5dfa512", "filename": "src/test/ui/no-link.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fno-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fno-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-link.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -12,7 +12,6 @@\n \n #[no_link]\n extern crate empty_struct;\n-//~^ WARN proc macro crates and `#[no_link]` crates have no effect without `#[macro_use]`\n \n fn main() {\n     empty_struct::XEmpty1; //~ ERROR cannot find value `XEmpty1` in module `empty_struct`"}, {"sha": "3f159ddfbd18aa07f388ab9a5811f3e366081c15", "filename": "src/test/ui/no-link.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fno-link.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Fno-link.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-link.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,11 +1,5 @@\n-warning: proc macro crates and `#[no_link]` crates have no effect without `#[macro_use]`\n-  --> $DIR/no-link.rs:14:1\n-   |\n-LL | extern crate empty_struct;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0425]: cannot find value `XEmpty1` in module `empty_struct`\n-  --> $DIR/no-link.rs:18:19\n+  --> $DIR/no-link.rs:17:19\n    |\n LL |     empty_struct::XEmpty1; //~ ERROR cannot find value `XEmpty1` in module `empty_struct`\n    |                   ^^^^^^^ not found in `empty_struct`"}, {"sha": "ce4c6960281801a19f7e92642707a8cca10aec80", "filename": "src/test/ui/rust-2018/macro-use-warned-against.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.rs?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -13,7 +13,6 @@\n // compile-pass\n \n #![warn(macro_use_extern_crate, unused)]\n-#![feature(use_extern_macros)]\n \n #[macro_use] //~ WARN should be replaced at use sites with a `use` statement\n extern crate macro_use_warned_against;"}, {"sha": "da69daf6ba8e7bebf4eccc5b0fcaf9df2ef22427", "filename": "src/test/ui/rust-2018/macro-use-warned-against.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0958048b6b31c3a2ac9242aac699791431955de/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.stderr?ref=a0958048b6b31c3a2ac9242aac699791431955de", "patch": "@@ -1,5 +1,5 @@\n warning: deprecated `#[macro_use]` directive used to import macros should be replaced at use sites with a `use` statement to import the macro instead\n-  --> $DIR/macro-use-warned-against.rs:18:1\n+  --> $DIR/macro-use-warned-against.rs:17:1\n    |\n LL | #[macro_use] //~ WARN should be replaced at use sites with a `use` statement\n    | ^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL | #![warn(macro_use_extern_crate, unused)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused `#[macro_use]` import\n-  --> $DIR/macro-use-warned-against.rs:20:1\n+  --> $DIR/macro-use-warned-against.rs:19:1\n    |\n LL | #[macro_use] //~ WARN unused `#[macro_use]`\n    | ^^^^^^^^^^^^"}, {"sha": "87d47b75607c1735b7aaed7609fe0113afb52268", "filename": "src/test/ui/tool-attributes/tool-attributes-disabled-1.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-1.rs?ref=f34933ba0ab615328de1f7323ad54376c8fa4dc1", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// If macro modularization (`use_extern_macros`) is not enabled,\n-// then tool attributes are treated as custom attributes.\n-\n-#[rustfmt::bar] //~ ERROR The attribute `rustfmt::bar` is currently unknown to the compiler\n-fn main() {}"}, {"sha": "6302c06057aa2bc7894a5dbe0dac6afbc7711c0c", "filename": "src/test/ui/tool-attributes/tool-attributes-disabled-1.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-1.stderr?ref=f34933ba0ab615328de1f7323ad54376c8fa4dc1", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: The attribute `rustfmt::bar` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/tool-attributes-disabled-1.rs:14:1\n-   |\n-LL | #[rustfmt::bar] //~ ERROR The attribute `rustfmt::bar` is currently unknown to the compiler\n-   | ^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "2d97e160f49144a40080c8050082c284858d9c06", "filename": "src/test/ui/tool-attributes/tool-attributes-disabled-2.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-2.rs?ref=f34933ba0ab615328de1f7323ad54376c8fa4dc1", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// If macro modularization (`use_extern_macros`) is not enabled,\n-// then tool attributes are treated as custom attributes.\n-\n-#[rustfmt::bar] //~ ERROR attribute `rustfmt::bar` is currently unknown to the compiler\n-fn main() {}"}, {"sha": "b327773dd6adcf619bcd9313068325e2b1b5957a", "filename": "src/test/ui/tool-attributes/tool-attributes-disabled-2.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34933ba0ab615328de1f7323ad54376c8fa4dc1/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-disabled-2.stderr?ref=f34933ba0ab615328de1f7323ad54376c8fa4dc1", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: The attribute `rustfmt::bar` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/tool-attributes-disabled-2.rs:14:1\n-   |\n-LL | #[rustfmt::bar] //~ ERROR attribute `rustfmt::bar` is currently unknown to the compiler\n-   | ^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}