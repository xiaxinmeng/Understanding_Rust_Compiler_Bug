{"sha": "44e9a9605b2b3916669182ba091599d59653c497", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZTlhOTYwNWIyYjM5MTY2NjkxODJiYTA5MTU5OWQ1OTY1M2M0OTc=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-17T12:40:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:26Z"}, "message": "Fixup annotated bindings", "tree": {"sha": "0bdeef63c2a1523ca69dda856226979f9a78f606", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bdeef63c2a1523ca69dda856226979f9a78f606"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44e9a9605b2b3916669182ba091599d59653c497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44e9a9605b2b3916669182ba091599d59653c497", "html_url": "https://github.com/rust-lang/rust/commit/44e9a9605b2b3916669182ba091599d59653c497", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44e9a9605b2b3916669182ba091599d59653c497/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "html_url": "https://github.com/rust-lang/rust/commit/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d"}], "stats": {"total": 84, "additions": 54, "deletions": 30}, "files": [{"sha": "220c71f741b4d42e80b715c668b9afa99f771d44", "filename": "crates/ra_hir/src/code_model_impl/function/scope.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs?ref=44e9a9605b2b3916669182ba091599d59653c497", "patch": "@@ -88,10 +88,17 @@ impl FnScopes {\n \n     fn add_bindings(&mut self, body: &Body, scope: ScopeId, pat: PatId) {\n         match &body[pat] {\n-            Pat::Bind { name, .. } => self.scopes[scope].entries.push(ScopeEntry {\n-                name: name.clone(),\n-                pat,\n-            }),\n+            Pat::Bind { name, .. } => {\n+                // bind can have a subpattern, but it's actually not allowed\n+                // to bind to things in there\n+                let entry = ScopeEntry {\n+                    name: name.clone(),\n+                    pat,\n+                };\n+                self.scopes[scope].entries.push(entry)\n+            }\n+            // FIXME: isn't every call to add_binding starting an entirely new\n+            // tree walk!?\n             p => p.walk_child_pats(|pat| self.add_bindings(body, scope, pat)),\n         }\n     }"}, {"sha": "c05bbc442baba5d66ec0af8b04d7a3bad5ad4b2d", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=44e9a9605b2b3916669182ba091599d59653c497", "patch": "@@ -398,7 +398,7 @@ pub enum Pat {\n     Bind {\n         mode: BindingAnnotation,\n         name: Name,\n-        sub_pat: Option<PatId>,\n+        subpat: Option<PatId>,\n     },\n     TupleStruct {\n         path: Option<Path>,\n@@ -413,12 +413,10 @@ pub enum Pat {\n impl Pat {\n     pub fn walk_child_pats(&self, mut f: impl FnMut(PatId)) {\n         match self {\n-            Pat::Range { .. }\n-            | Pat::Lit(..)\n-            | Pat::Path(..)\n-            | Pat::Wild\n-            | Pat::Missing\n-            | Pat::Bind { .. } => {}\n+            Pat::Range { .. } | Pat::Lit(..) | Pat::Path(..) | Pat::Wild | Pat::Missing => {}\n+            Pat::Bind { subpat, .. } => {\n+                subpat.iter().map(|pat| *pat).for_each(f);\n+            }\n             Pat::Tuple(args) | Pat::TupleStruct { args, .. } => {\n                 args.iter().map(|pat| *pat).for_each(f);\n             }\n@@ -833,11 +831,11 @@ impl ExprCollector {\n                     .map(|nr| nr.as_name())\n                     .unwrap_or_else(Name::missing);\n                 let annotation = BindingAnnotation::new(bp.is_mutable(), bp.is_ref());\n-                let sub_pat = bp.pat().map(|subpat| self.collect_pat(subpat));\n+                let subpat = bp.pat().map(|subpat| self.collect_pat(subpat));\n                 Pat::Bind {\n                     name,\n                     mode: annotation,\n-                    sub_pat,\n+                    subpat,\n                 }\n             }\n             ast::PatKind::TupleStructPat(p) => {\n@@ -928,7 +926,7 @@ pub(crate) fn collect_fn_body_syntax(node: &ast::FnDef) -> BodySyntaxMapping {\n                 Pat::Bind {\n                     name: Name::self_param(),\n                     mode: BindingAnnotation::Unannotated,\n-                    sub_pat: None,\n+                    subpat: None,\n                 },\n                 self_param,\n             );"}, {"sha": "57fd1ed2ab90f14c0fdfa710c2379f1053d8b89e", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=44e9a9605b2b3916669182ba091599d59653c497", "patch": "@@ -904,39 +904,39 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         }\n     }\n \n-    fn infer_tuple_struct(&mut self, path: Option<&Path>, sub_pats: &[PatId]) -> Ty {\n+    fn infer_tuple_struct(&mut self, path: Option<&Path>, subpats: &[PatId]) -> Ty {\n         let (ty, fields) = if let Some(x) = self.resolve_fields(path) {\n             x\n         } else {\n             return Ty::Unknown;\n         };\n \n-        if fields.len() != sub_pats.len() {\n+        if fields.len() != subpats.len() {\n             return Ty::Unknown;\n         }\n \n-        for (&sub_pat, field) in sub_pats.iter().zip(fields.iter()) {\n+        for (&subpat, field) in subpats.iter().zip(fields.iter()) {\n             let sub_ty = self.make_ty(&field.type_ref);\n-            self.infer_pat(sub_pat, &Expectation::has_type(sub_ty));\n+            self.infer_pat(subpat, &Expectation::has_type(sub_ty));\n         }\n \n         ty\n     }\n \n-    fn infer_struct(&mut self, path: Option<&Path>, sub_pats: &[FieldPat]) -> Ty {\n+    fn infer_struct(&mut self, path: Option<&Path>, subpats: &[FieldPat]) -> Ty {\n         let (ty, fields) = if let Some(x) = self.resolve_fields(path) {\n             x\n         } else {\n             return Ty::Unknown;\n         };\n \n-        for sub_pat in sub_pats {\n-            let matching_field = fields.iter().find(|field| field.name == sub_pat.name);\n+        for subpat in subpats {\n+            let matching_field = fields.iter().find(|field| field.name == subpat.name);\n \n             if let Some(field) = matching_field {\n                 let typeref = &field.type_ref;\n                 let sub_ty = self.make_ty(typeref);\n-                self.infer_pat(sub_pat.pat, &Expectation::has_type(sub_ty));\n+                self.infer_pat(subpat.pat, &Expectation::has_type(sub_ty));\n             }\n         }\n \n@@ -979,8 +979,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Pat::TupleStruct {\n                 path: ref p,\n-                args: ref sub_pats,\n-            } => self.infer_tuple_struct(p.as_ref(), sub_pats),\n+                args: ref subpats,\n+            } => self.infer_tuple_struct(p.as_ref(), subpats),\n             Pat::Struct {\n                 path: ref p,\n                 args: ref fields,\n@@ -995,12 +995,15 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Pat::Bind {\n                 mode,\n                 name: _name,\n-                sub_pat,\n+                subpat,\n             } => {\n-                let subty = if let Some(subpat) = sub_pat {\n+                let subty = if let Some(subpat) = subpat {\n                     self.infer_pat(*subpat, expected)\n                 } else {\n-                    Ty::Unknown\n+                    let ty = self.new_type_var();\n+                    self.unify(&ty, &expected.ty);\n+                    let ty = self.resolve_ty_as_possible(ty);\n+                    ty\n                 };\n \n                 match mode {"}, {"sha": "fc405415934ae42bc9c3bab9d823f6dd5646ccfa", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=44e9a9605b2b3916669182ba091599d59653c497", "patch": "@@ -359,7 +359,7 @@ fn test(x: &str, y: isize) {\n }\n \n #[test]\n-fn infer_simple_pattern() {\n+fn infer_pattern() {\n     check_inference(\n         r#\"\n fn test(x: &i32) {\n@@ -381,6 +381,7 @@ fn test(x: &i32) {\n     let ref ref_to_x = x;\n     let mut mut_x = x;\n     let ref mut mut_ref_to_x = x;\n+    let k = mut_ref_to_x;\n }\n \"#,\n         \"pattern.txt\",\n@@ -408,6 +409,9 @@ fn test() {\n         E::A { x } => x,\n         E::B => 1,\n     };\n+\n+    let ref d @ E::A { .. } = e;\n+    d;\n }\n \"#,\n         \"adt_pattern.txt\","}, {"sha": "2daf9647be2c282b86e3a892472ed20b0d623822", "filename": "crates/ra_hir/src/ty/tests/data/adt_pattern.txt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fadt_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fadt_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fadt_pattern.txt?ref=44e9a9605b2b3916669182ba091599d59653c497", "patch": "@@ -1,4 +1,4 @@\n-[68; 221) '{     ...  }; }': ()\n+[68; 262) '{     ...  d; }': ()\n [78; 79) 'e': E\n [82; 95) 'E::A { x: 3 }': E\n [92; 93) '3': usize\n@@ -16,3 +16,7 @@\n [191; 192) 'x': usize\n [202; 206) 'E::B': E\n [210; 211) '1': usize\n+[229; 248) 'ref d ...{ .. }': &E\n+[237; 248) 'E::A { .. }': E\n+[251; 252) 'e': E\n+[258; 259) 'd': &E"}, {"sha": "966289aafcd1cac01a2ae3bb877f067157543446", "filename": "crates/ra_hir/src/ty/tests/data/pattern.txt", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fpattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/44e9a9605b2b3916669182ba091599d59653c497/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fpattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fpattern.txt?ref=44e9a9605b2b3916669182ba091599d59653c497", "patch": "@@ -1,5 +1,5 @@\n [9; 10) 'x': &i32\n-[18; 259) '{     ...c }; }': ()\n+[18; 369) '{     ...o_x; }': ()\n [28; 29) 'y': &i32\n [32; 33) 'x': &i32\n [43; 45) '&z': &i32\n@@ -37,3 +37,11 @@\n [246; 251) 'a + b': u64\n [250; 251) 'b': u64\n [253; 254) 'c': i32\n+[267; 279) 'ref ref_to_x': &&i32\n+[282; 283) 'x': &i32\n+[293; 302) 'mut mut_x': &i32\n+[305; 306) 'x': &i32\n+[316; 336) 'ref mu...f_to_x': &mut &i32\n+[339; 340) 'x': &i32\n+[350; 351) 'k': &mut &i32\n+[354; 366) 'mut_ref_to_x': &mut &i32"}]}