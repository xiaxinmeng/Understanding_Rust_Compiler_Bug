{"sha": "6a6d5c669e363238abbed050f62658ee6e74cbbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNmQ1YzY2OWUzNjMyMzhhYmJlZDA1MGY2MjY1OGVlNmU3NGNiYmY=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-01T21:28:32Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-01T22:58:39Z"}, "message": "Enabling logging in circular_buffer again.", "tree": {"sha": "1bd9dcc6231cd5b26a7f8989df06650ffa6b2a94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bd9dcc6231cd5b26a7f8989df06650ffa6b2a94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a6d5c669e363238abbed050f62658ee6e74cbbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6d5c669e363238abbed050f62658ee6e74cbbf", "html_url": "https://github.com/rust-lang/rust/commit/6a6d5c669e363238abbed050f62658ee6e74cbbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a6d5c669e363238abbed050f62658ee6e74cbbf/comments", "author": null, "committer": null, "parents": [{"sha": "b3d9d9b73cb9cae6b76e0a040756784112ed88a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d9d9b73cb9cae6b76e0a040756784112ed88a9", "html_url": "https://github.com/rust-lang/rust/commit/b3d9d9b73cb9cae6b76e0a040756784112ed88a9"}], "stats": {"total": 90, "additions": 44, "deletions": 46}, "files": [{"sha": "c334c816f152f8ba1ad0685038cf0f05d5475296", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/6a6d5c669e363238abbed050f62658ee6e74cbbf/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6a6d5c669e363238abbed050f62658ee6e74cbbf/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=6a6d5c669e363238abbed050f62658ee6e74cbbf", "patch": "@@ -12,26 +12,26 @@ circular_buffer::circular_buffer(rust_kernel *kernel, size_t unit_sz) :\n     _unread(0),\n     _buffer((uint8_t *)kernel->malloc(_buffer_sz, \"circular_buffer\")) {\n \n-    // A(sched, unit_sz, \"Unit size must be larger than zero.\");\n+    A(kernel, unit_sz, \"Unit size must be larger than zero.\");\n \n-    // DLOG(sched, mem, \"new circular_buffer(buffer_sz=%d, unread=%d)\"\n-    //      \"-> circular_buffer=0x%\" PRIxPTR,\n-    //      _buffer_sz, _unread, this);\n+    KLOG(kernel, mem, \"new circular_buffer(buffer_sz=%d, unread=%d)\"\n+         \"-> circular_buffer=0x%\" PRIxPTR,\n+         _buffer_sz, _unread, this);\n \n-    // A(sched, _buffer, \"Failed to allocate buffer.\");\n+    A(kernel, _buffer, \"Failed to allocate buffer.\");\n }\n \n circular_buffer::~circular_buffer() {\n-    // DLOG(sched, mem, \"~circular_buffer 0x%\" PRIxPTR, this);\n-    // I(sched, _buffer);\n-    // W(sched, _unread == 0,\n-    //   \"freeing circular_buffer with %d unread bytes\", _unread);\n+    KLOG(kernel, mem, \"~circular_buffer 0x%\" PRIxPTR, this);\n+    I(kernel, _buffer);\n+    W(kernel, _unread == 0,\n+      \"freeing circular_buffer with %d unread bytes\", _unread);\n     kernel->free(_buffer);\n }\n \n size_t\n circular_buffer::initial_size() {\n-    // I(sched, unit_sz > 0);\n+    I(kernel, unit_sz > 0);\n     return INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS * unit_sz;\n }\n \n@@ -40,8 +40,8 @@ circular_buffer::initial_size() {\n  */\n void\n circular_buffer::transfer(void *dst) {\n-    // I(sched, dst);\n-    // I(sched, _unread <= _buffer_sz);\n+    I(kernel, dst);\n+    I(kernel, _unread <= _buffer_sz);\n \n     uint8_t *ptr = (uint8_t *) dst;\n \n@@ -53,13 +53,13 @@ circular_buffer::transfer(void *dst) {\n     } else {\n         head_sz = _buffer_sz - _next;\n     }\n-    // I(sched, _next + head_sz <= _buffer_sz);\n+    I(kernel, _next + head_sz <= _buffer_sz);\n     memcpy(ptr, _buffer + _next, head_sz);\n \n     // Then copy any other items from the beginning of the buffer\n-    // I(sched, _unread >= head_sz);\n+    I(kernel, _unread >= head_sz);\n     size_t tail_sz = _unread - head_sz;\n-    // I(sched, head_sz + tail_sz <= _buffer_sz);\n+    I(kernel, head_sz + tail_sz <= _buffer_sz);\n     memcpy(ptr + head_sz, _buffer, tail_sz);\n }\n \n@@ -69,37 +69,37 @@ circular_buffer::transfer(void *dst) {\n  */\n void\n circular_buffer::enqueue(void *src) {\n-    // I(sched, src);\n-    // I(sched, _unread <= _buffer_sz);\n-    // I(sched, _buffer);\n+    I(kernel, src);\n+    I(kernel, _unread <= _buffer_sz);\n+    I(kernel, _buffer);\n \n     // Grow if necessary.\n     if (_unread == _buffer_sz) {\n         grow();\n     }\n \n-    // DLOG(sched, mem, \"circular_buffer enqueue \"\n-    //      \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n-    //      _unread, _next, _buffer_sz, unit_sz);\n+    KLOG(kernel, mem, \"circular_buffer enqueue \"\n+         \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n+         _unread, _next, _buffer_sz, unit_sz);\n \n-    // I(sched, _unread < _buffer_sz);\n-    // I(sched, _unread + unit_sz <= _buffer_sz);\n+    I(kernel, _unread < _buffer_sz);\n+    I(kernel, _unread + unit_sz <= _buffer_sz);\n \n     // Copy data\n     size_t dst_idx = _next + _unread;\n-    I(sched, dst_idx >= _buffer_sz || dst_idx + unit_sz <= _buffer_sz);\n+    I(kernel, dst_idx >= _buffer_sz || dst_idx + unit_sz <= _buffer_sz);\n     if (dst_idx >= _buffer_sz) {\n         dst_idx -= _buffer_sz;\n \n-        // I(sched, _next >= unit_sz);\n-        // I(sched, dst_idx <= _next - unit_sz);\n+        I(kernel, _next >= unit_sz);\n+        I(kernel, dst_idx <= _next - unit_sz);\n     }\n \n-    // I(sched, dst_idx + unit_sz <= _buffer_sz);\n+    I(kernel, dst_idx + unit_sz <= _buffer_sz);\n     memcpy(&_buffer[dst_idx], src, unit_sz);\n     _unread += unit_sz;\n \n-    // DLOG(sched, mem, \"circular_buffer pushed data at index: %d\", dst_idx);\n+    KLOG(kernel, mem, \"circular_buffer pushed data at index: %d\", dst_idx);\n }\n \n /**\n@@ -109,21 +109,21 @@ circular_buffer::enqueue(void *src) {\n  */\n void\n circular_buffer::dequeue(void *dst) {\n-    // I(sched, unit_sz > 0);\n-    // I(sched, _unread >= unit_sz);\n-    // I(sched, _unread <= _buffer_sz);\n-    // I(sched, _buffer);\n+    I(kernel, unit_sz > 0);\n+    I(kernel, _unread >= unit_sz);\n+    I(kernel, _unread <= _buffer_sz);\n+    I(kernel, _buffer);\n \n-    // DLOG(sched, mem,\n-    //          \"circular_buffer dequeue \"\n-    //          \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n-    //          _unread, _next, _buffer_sz, unit_sz);\n+    KLOG(kernel, mem,\n+             \"circular_buffer dequeue \"\n+             \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n+             _unread, _next, _buffer_sz, unit_sz);\n \n-    // I(sched, _next + unit_sz <= _buffer_sz);\n+    I(kernel, _next + unit_sz <= _buffer_sz);\n     if (dst != NULL) {\n         memcpy(dst, &_buffer[_next], unit_sz);\n     }\n-    //DLOG(sched, mem, \"shifted data from index %d\", _next);\n+    KLOG(kernel, mem, \"shifted data from index %d\", _next);\n     _unread -= unit_sz;\n     _next += unit_sz;\n     if (_next == _buffer_sz) {\n@@ -139,9 +139,9 @@ circular_buffer::dequeue(void *dst) {\n void\n circular_buffer::grow() {\n     size_t new_buffer_sz = _buffer_sz * 2;\n-    // I(sched, new_buffer_sz <= MAX_CIRCULAR_BUFFER_SIZE);\n-    // DLOG(sched, mem, \"circular_buffer is growing to %d bytes\",\n-    //      new_buffer_sz);\n+    I(kernel, new_buffer_sz <= MAX_CIRCULAR_BUFFER_SIZE);\n+    KLOG(kernel, mem, \"circular_buffer is growing to %d bytes\",\n+         new_buffer_sz);\n     void *new_buffer = kernel->malloc(new_buffer_sz,\n                                     \"new circular_buffer (grow)\");\n     transfer(new_buffer);\n@@ -154,9 +154,9 @@ circular_buffer::grow() {\n void\n circular_buffer::shrink() {\n     size_t new_buffer_sz = _buffer_sz / 2;\n-    // I(sched, initial_size() <= new_buffer_sz);\n-    // DLOG(sched, mem, \"circular_buffer is shrinking to %d bytes\",\n-    //      new_buffer_sz);\n+    I(kernel, initial_size() <= new_buffer_sz);\n+    KLOG(kernel, mem, \"circular_buffer is shrinking to %d bytes\",\n+         new_buffer_sz);\n     void *new_buffer = kernel->malloc(new_buffer_sz,\n                                     \"new circular_buffer (shrink)\");\n     transfer(new_buffer);"}, {"sha": "f06e700b2f8cc13c33b56171f78b806258ce1d73", "filename": "src/rt/circular_buffer.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a6d5c669e363238abbed050f62658ee6e74cbbf/src%2Frt%2Fcircular_buffer.h", "raw_url": "https://github.com/rust-lang/rust/raw/6a6d5c669e363238abbed050f62658ee6e74cbbf/src%2Frt%2Fcircular_buffer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.h?ref=6a6d5c669e363238abbed050f62658ee6e74cbbf", "patch": "@@ -10,8 +10,6 @@ circular_buffer : public kernel_owned<circular_buffer> {\n     static const size_t INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS = 8;\n     static const size_t MAX_CIRCULAR_BUFFER_SIZE = 1 << 24;\n \n-    rust_scheduler *sched;\n-\n public:\n     rust_kernel *kernel;\n     // Size of the data unit in bytes."}]}