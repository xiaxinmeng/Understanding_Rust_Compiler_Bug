{"sha": "db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNGQ2MGFmYjBkMTdjOWJmZjcyYmI3YjZjMzc1NGMwZTZkM2YyYjU=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-17T23:23:55Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-17T23:23:55Z"}, "message": "rollup merge of #18911: canndrew/slice_shift_char\n\n`slice_shift_char` splits a `str` into it's leading `char` and the remainder of the `str`. Currently, it returns a `(Option<char>, &str)` such that:\n\n    \"bar\".slice_shift_char() => (Some('b'), \"ar\")\n    \"ar\".slice_shift_char()  => (Some('a'), \"r\")\n    \"r\".slice_shift_char()   => (Some('r'), \"\")\n    \"\".slice_shift_char()    => (None,      \"\")\n\nThis is a little odd. Either a `str` can be split into both a head and a tail or it cannot. So the return type should be `Option<(char, &str)>`. With the current behaviour, in the case of the empty string, the `str` returned is meaningless - it is always the empty string.\n\nThis PR changes `slice_shift_char` so that:\n\n    \"bar\".slice_shift_char() => Some(('b', \"ar\"))\n    \"ar\".slice_shift_char()  => Some(('a', \"r\"))\n    \"r\".slice_shift_char()   => Some(('r', \"\"))\n    \"\".slice_shift_char()    => None", "tree": {"sha": "075f7946fe635b611e4474e4589229a5833be094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/075f7946fe635b611e4474e4589229a5833be094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5", "html_url": "https://github.com/rust-lang/rust/commit/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5/comments", "author": null, "committer": null, "parents": [{"sha": "7137c2cc83526e1f74af472380e625fc7c552826", "url": "https://api.github.com/repos/rust-lang/rust/commits/7137c2cc83526e1f74af472380e625fc7c552826", "html_url": "https://github.com/rust-lang/rust/commit/7137c2cc83526e1f74af472380e625fc7c552826"}, {"sha": "197a0ac481ae6d154c0966b21849432f1b32c28f", "url": "https://api.github.com/repos/rust-lang/rust/commits/197a0ac481ae6d154c0966b21849432f1b32c28f", "html_url": "https://github.com/rust-lang/rust/commit/197a0ac481ae6d154c0966b21849432f1b32c28f"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "aaa7da312f29a2f37420b04eedb9cedff69165af", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5", "patch": "@@ -1263,13 +1263,13 @@ mod tests {\n     #[test]\n     fn test_slice_shift_char() {\n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\";\n-        assert_eq!(data.slice_shift_char(), (Some('\u0e1b'), \"\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\"));\n+        assert_eq!(data.slice_shift_char(), Some(('\u0e1b', \"\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\")));\n     }\n \n     #[test]\n     fn test_slice_shift_char_2() {\n         let empty = \"\";\n-        assert_eq!(empty.slice_shift_char(), (None, \"\"));\n+        assert_eq!(empty.slice_shift_char(), None);\n     }\n \n     #[test]"}, {"sha": "01c9277a20b75d79d96fddfac024a2be868e8b58", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5", "patch": "@@ -1457,10 +1457,10 @@ macro_rules! from_str_radix_float_impl {\n                 }\n \n                 let (is_positive, src) =  match src.slice_shift_char() {\n-                    (None, _)        => return None,\n-                    (Some('-'), \"\")  => return None,\n-                    (Some('-'), src) => (false, src),\n-                    (Some(_), _)     => (true,  src),\n+                    None             => return None,\n+                    Some(('-', \"\"))  => return None,\n+                    Some(('-', src)) => (false, src),\n+                    Some((_, _))     => (true,  src),\n                 };\n \n                 // The significand to accumulate\n@@ -1563,10 +1563,10 @@ macro_rules! from_str_radix_float_impl {\n                         // Parse the exponent as decimal integer\n                         let src = src[offset..];\n                         let (is_positive, exp) = match src.slice_shift_char() {\n-                            (Some('-'), src) => (false, from_str::<uint>(src)),\n-                            (Some('+'), src) => (true,  from_str::<uint>(src)),\n-                            (Some(_), _)     => (true,  from_str::<uint>(src)),\n-                            (None, _)        => return None,\n+                            Some(('-', src)) => (false, from_str::<uint>(src)),\n+                            Some(('+', src)) => (true,  from_str::<uint>(src)),\n+                            Some((_, _))     => (true,  from_str::<uint>(src)),\n+                            None             => return None,\n                         };\n \n                         match (is_positive, exp) {\n@@ -1606,7 +1606,7 @@ macro_rules! from_str_radix_int_impl {\n                 let is_signed_ty = (0 as $T) > Int::min_value();\n \n                 match src.slice_shift_char() {\n-                    (Some('-'), src) if is_signed_ty => {\n+                    Some(('-', src)) if is_signed_ty => {\n                         // The number is negative\n                         let mut result = 0;\n                         for c in src.chars() {\n@@ -1625,7 +1625,7 @@ macro_rules! from_str_radix_int_impl {\n                         }\n                         Some(result)\n                     },\n-                    (Some(_), _) => {\n+                    Some((_, _)) => {\n                         // The number is signed\n                         let mut result = 0;\n                         for c in src.chars() {\n@@ -1644,7 +1644,7 @@ macro_rules! from_str_radix_int_impl {\n                         }\n                         Some(result)\n                     },\n-                    (None, _) => None,\n+                    None => None,\n                 }\n             }\n         }"}, {"sha": "24f26b15f27ac97d4ee9c6b1b2c09034c9234902", "filename": "src/libcore/str.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5", "patch": "@@ -1811,21 +1811,21 @@ pub trait StrPrelude for Sized? {\n     /// it. This does not allocate a new string; instead, it returns a\n     /// slice that point one character beyond the character that was\n     /// shifted. If the string does not contain any characters,\n-    /// a tuple of None and an empty string is returned instead.\n+    /// None is returned instead.\n     ///\n     /// # Example\n     ///\n     /// ```rust\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n-    /// let (c, s1) = s.slice_shift_char();\n-    /// assert_eq!(c, Some('L'));\n+    /// let (c, s1) = s.slice_shift_char().unwrap();\n+    /// assert_eq!(c, 'L');\n     /// assert_eq!(s1, \"\u00f6we \u8001\u864e L\u00e9opard\");\n     ///\n-    /// let (c, s2) = s1.slice_shift_char();\n-    /// assert_eq!(c, Some('\u00f6'));\n+    /// let (c, s2) = s1.slice_shift_char().unwrap();\n+    /// assert_eq!(c, '\u00f6');\n     /// assert_eq!(s2, \"we \u8001\u864e L\u00e9opard\");\n     /// ```\n-    fn slice_shift_char<'a>(&'a self) -> (Option<char>, &'a str);\n+    fn slice_shift_char<'a>(&'a self) -> Option<(char, &'a str)>;\n \n     /// Returns the byte offset of an inner slice relative to an enclosing outer slice.\n     ///\n@@ -2197,13 +2197,13 @@ impl StrPrelude for str {\n     }\n \n     #[inline]\n-    fn slice_shift_char(&self) -> (Option<char>, &str) {\n+    fn slice_shift_char(&self) -> Option<(char, &str)> {\n         if self.is_empty() {\n-            return (None, self);\n+            None\n         } else {\n             let CharRange {ch, next} = self.char_range_at(0u);\n             let next_s = unsafe { raw::slice_bytes(self, next, self.len()) };\n-            return (Some(ch), next_s);\n+            Some((ch, next_s))\n         }\n     }\n "}, {"sha": "d04144ef26e596c121cbd9602eacad23128680ae", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5", "patch": "@@ -97,8 +97,8 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                     // cannot be shared with any other operand (usually when\n                     // a register is clobbered early.)\n                     let output = match constraint.get().slice_shift_char() {\n-                        (Some('='), _) => None,\n-                        (Some('+'), operand) => {\n+                        Some(('=', _)) => None,\n+                        Some(('+', operand)) => {\n                             Some(token::intern_and_get_ident(format!(\n                                         \"={}\",\n                                         operand).as_slice()))"}, {"sha": "81f3d977e13ff7da3085929c7abd65e231db6152", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5", "patch": "@@ -1855,7 +1855,7 @@ impl<'a> State<'a> {\n                 try!(self.commasep(Inconsistent, a.outputs.as_slice(),\n                                    |s, &(ref co, ref o, is_rw)| {\n                     match co.get().slice_shift_char() {\n-                        (Some('='), operand) if is_rw => {\n+                        Some(('=', operand)) if is_rw => {\n                             try!(s.print_string(format!(\"+{}\", operand).as_slice(),\n                                                 ast::CookedStr))\n                         }"}]}