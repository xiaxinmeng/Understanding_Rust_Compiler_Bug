{"sha": "3418b40dac84d124db68a10fb0e17668139751e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MThiNDBkYWM4NGQxMjRkYjY4YTEwZmIwZTE3NjY4MTM5NzUxZTk=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-19T22:28:48Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-19T22:48:16Z"}, "message": "remove syscall shim from macos and move getrandom to linux module", "tree": {"sha": "7e0d7e5bc403e79d826a99efd9bb7588ae8f6cbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e0d7e5bc403e79d826a99efd9bb7588ae8f6cbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3418b40dac84d124db68a10fb0e17668139751e9", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXk27MAAKCRAnUl7150IK\nUCbIAP9WSWhi7725skH0ygcWOBsPKSgx1IkofB3s6gG9DUbPjwD+PVm4GhtQNy0d\nwl7HtYGmUuXfplRvqrJRi8JTSsZj5gk=\n=dFsV\n-----END PGP SIGNATURE-----", "payload": "tree 7e0d7e5bc403e79d826a99efd9bb7588ae8f6cbe\nparent b213f88b58b915097049d0432cbc83114f326959\nauthor Christian Poveda <git@christianpoveda.xyz> 1582151328 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1582152496 -0500\n\nremove syscall shim from macos and move getrandom to linux module\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3418b40dac84d124db68a10fb0e17668139751e9", "html_url": "https://github.com/rust-lang/rust/commit/3418b40dac84d124db68a10fb0e17668139751e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3418b40dac84d124db68a10fb0e17668139751e9/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b213f88b58b915097049d0432cbc83114f326959", "url": "https://api.github.com/repos/rust-lang/rust/commits/b213f88b58b915097049d0432cbc83114f326959", "html_url": "https://github.com/rust-lang/rust/commit/b213f88b58b915097049d0432cbc83114f326959"}], "stats": {"total": 58, "additions": 20, "deletions": 38}, "files": [{"sha": "a391baa0b22c69eea9456236c14bc08830ddc33c", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3418b40dac84d124db68a10fb0e17668139751e9/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3418b40dac84d124db68a10fb0e17668139751e9/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=3418b40dac84d124db68a10fb0e17668139751e9", "patch": "@@ -333,21 +333,3 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(true)\n     }\n }\n-\n-// Shims the posix 'getrandom()' syscall.\n-fn getrandom<'tcx>(\n-    this: &mut MiriEvalContext<'_, 'tcx>,\n-    args: &[OpTy<'tcx, Tag>],\n-    dest: PlaceTy<'tcx, Tag>,\n-) -> InterpResult<'tcx> {\n-    let ptr = this.read_scalar(args[0])?.not_undef()?;\n-    let len = this.read_scalar(args[1])?.to_machine_usize(this)?;\n-\n-    // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n-    // neither of which have any effect on our current PRNG.\n-    let _flags = this.read_scalar(args[2])?.to_i32()?;\n-\n-    this.gen_random(ptr, len as usize)?;\n-    this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n-    Ok(())\n-}"}, {"sha": "8635455b1d7d4e072a23a5c4b07224408e7bdc6d", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3418b40dac84d124db68a10fb0e17668139751e9/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3418b40dac84d124db68a10fb0e17668139751e9/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=3418b40dac84d124db68a10fb0e17668139751e9", "patch": "@@ -52,7 +52,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     id if id == sys_getrandom => {\n                         // The first argument is the syscall id,\n                         // so skip over it.\n-                        super::getrandom(this, &args[1..], dest)?;\n+                        getrandom(this, &args[1..], dest)?;\n                     }\n                     id if id == sys_statx => {\n                         // The first argument is the syscall id,\n@@ -65,7 +65,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             \"getrandom\" => {\n-                super::getrandom(this, args, dest)?;\n+                getrandom(this, args, dest)?;\n             }\n \n             \"sched_getaffinity\" => {\n@@ -79,3 +79,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(true)\n     }\n }\n+\n+// Shims the posix 'getrandom()' syscall.\n+fn getrandom<'tcx>(\n+    this: &mut MiriEvalContext<'_, 'tcx>,\n+    args: &[OpTy<'tcx, Tag>],\n+    dest: PlaceTy<'tcx, Tag>,\n+) -> InterpResult<'tcx> {\n+    let ptr = this.read_scalar(args[0])?.not_undef()?;\n+    let len = this.read_scalar(args[1])?.to_machine_usize(this)?;\n+\n+    // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n+    // neither of which have any effect on our current PRNG.\n+    let _flags = this.read_scalar(args[2])?.to_i32()?;\n+\n+    this.gen_random(ptr, len as usize)?;\n+    this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n+    Ok(())\n+}"}, {"sha": "8cfe959c3938ffd611f0fcba377cb9ea954fc6ee", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3418b40dac84d124db68a10fb0e17668139751e9/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3418b40dac84d124db68a10fb0e17668139751e9/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=3418b40dac84d124db68a10fb0e17668139751e9", "patch": "@@ -79,24 +79,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n-            \"syscall\" => {\n-                let sys_getrandom = this\n-                    .eval_path_scalar(&[\"libc\", \"SYS_getrandom\"])?\n-                    .expect(\"Failed to get libc::SYS_getrandom\")\n-                    .to_machine_usize(this)?;\n-\n-                match this.read_scalar(args[0])?.to_machine_usize(this)? {\n-                    // `libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), GRND_NONBLOCK)`\n-                    // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n-                    id if id == sys_getrandom => {\n-                        // The first argument is the syscall id,\n-                        // so skip over it.\n-                        super::getrandom(this, &args[1..], dest)?;\n-                    }\n-                    id => throw_unsup_format!(\"miri does not support syscall ID {}\", id),\n-                }\n-            }\n-\n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n         };\n "}]}