{"sha": "7b702b92588316adda4992e0ef247176b91a2f07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNzAyYjkyNTg4MzE2YWRkYTQ5OTJlMGVmMjQ3MTc2YjkxYTJmMDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T21:24:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T22:28:31Z"}, "message": "move find_fn (which is not specific to foreign items) out of foreign_items", "tree": {"sha": "ef33875be33822e08bf78be06c1677dabe5f6d02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef33875be33822e08bf78be06c1677dabe5f6d02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b702b92588316adda4992e0ef247176b91a2f07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b702b92588316adda4992e0ef247176b91a2f07", "html_url": "https://github.com/rust-lang/rust/commit/7b702b92588316adda4992e0ef247176b91a2f07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b702b92588316adda4992e0ef247176b91a2f07/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "html_url": "https://github.com/rust-lang/rust/commit/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a"}], "stats": {"total": 89, "additions": 48, "deletions": 41}, "files": [{"sha": "50cf32f852044b7dd2d8c99b2bbdf1932ffcf65a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b702b92588316adda4992e0ef247176b91a2f07/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b702b92588316adda4992e0ef247176b91a2f07/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7b702b92588316adda4992e0ef247176b91a2f07", "patch": "@@ -28,6 +28,7 @@ pub use rustc_mir::interpret::*;\n // Resolve ambiguity.\n pub use rustc_mir::interpret::{self, AllocMap, PlaceTy};\n \n+pub use crate::shims::{EvalContextExt as ShimsEvalContextExt};\n pub use crate::shims::foreign_items::EvalContextExt as ForeignItemsEvalContextExt;\n pub use crate::shims::intrinsics::EvalContextExt as IntrinsicsEvalContextExt;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;"}, {"sha": "aece4d3e1aef19eb5f2fa355c364f526ae1eebaf", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7b702b92588316adda4992e0ef247176b91a2f07/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b702b92588316adda4992e0ef247176b91a2f07/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=7b702b92588316adda4992e0ef247176b91a2f07", "patch": "@@ -1,4 +1,3 @@\n-use rustc::ty;\n use rustc::ty::layout::{Align, LayoutOf, Size};\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n@@ -11,46 +10,6 @@ use crate::*;\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n-    fn find_fn(\n-        &mut self,\n-        instance: ty::Instance<'tcx>,\n-        args: &[OpTy<'tcx, Tag>],\n-        dest: Option<PlaceTy<'tcx, Tag>>,\n-        ret: Option<mir::BasicBlock>,\n-    ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n-        let this = self.eval_context_mut();\n-        trace!(\"eval_fn_call: {:#?}, {:?}\", instance, dest.map(|place| *place));\n-\n-        // First, run the common hooks also supported by CTFE.\n-        if this.hook_fn(instance, args, dest)? {\n-            this.goto_block(ret)?;\n-            return Ok(None);\n-        }\n-        // There are some more lang items we want to hook that CTFE does not hook (yet).\n-        if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n-            // FIXME: return a real value in case the target allocation has an\n-            // alignment bigger than the one requested.\n-            let n = u128::max_value();\n-            let dest = dest.unwrap();\n-            let n = this.truncate(n, dest.layout);\n-            this.write_scalar(Scalar::from_uint(n, dest.layout.size), dest)?;\n-            this.goto_block(ret)?;\n-            return Ok(None);\n-        }\n-\n-        // Try to see if we can do something about foreign items.\n-        if this.tcx.is_foreign_item(instance.def_id()) {\n-            // An external function that we cannot find MIR for, but we can still run enough\n-            // of them to make miri viable.\n-            this.emulate_foreign_item(instance.def_id(), args, dest, ret)?;\n-            // `goto_block` already handled.\n-            return Ok(None);\n-        }\n-\n-        // Otherwise, load the MIR.\n-        Ok(Some(this.load_mir(instance.def)?))\n-    }\n-\n     /// Returns the minimum alignment for the target architecture.\n     fn min_align(&self) -> Align {\n         let this = self.eval_context_ref();"}, {"sha": "0fc23e8119375f0d8c822ab91d1f01a2cfe5d0c8", "filename": "src/shims/mod.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7b702b92588316adda4992e0ef247176b91a2f07/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b702b92588316adda4992e0ef247176b91a2f07/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=7b702b92588316adda4992e0ef247176b91a2f07", "patch": "@@ -1,2 +1,49 @@\n pub mod foreign_items;\n pub mod intrinsics;\n+\n+use rustc::{ty, mir};\n+\n+use crate::*;\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn find_fn(\n+        &mut self,\n+        instance: ty::Instance<'tcx>,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: Option<PlaceTy<'tcx, Tag>>,\n+        ret: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n+        let this = self.eval_context_mut();\n+        trace!(\"eval_fn_call: {:#?}, {:?}\", instance, dest.map(|place| *place));\n+\n+        // First, run the common hooks also supported by CTFE.\n+        if this.hook_fn(instance, args, dest)? {\n+            this.goto_block(ret)?;\n+            return Ok(None);\n+        }\n+        // There are some more lang items we want to hook that CTFE does not hook (yet).\n+        if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n+            // FIXME: return a real value in case the target allocation has an\n+            // alignment bigger than the one requested.\n+            let n = u128::max_value();\n+            let dest = dest.unwrap();\n+            let n = this.truncate(n, dest.layout);\n+            this.write_scalar(Scalar::from_uint(n, dest.layout.size), dest)?;\n+            this.goto_block(ret)?;\n+            return Ok(None);\n+        }\n+\n+        // Try to see if we can do something about foreign items.\n+        if this.tcx.is_foreign_item(instance.def_id()) {\n+            // An external function that we cannot find MIR for, but we can still run enough\n+            // of them to make miri viable.\n+            this.emulate_foreign_item(instance.def_id(), args, dest, ret)?;\n+            // `goto_block` already handled.\n+            return Ok(None);\n+        }\n+\n+        // Otherwise, load the MIR.\n+        Ok(Some(this.load_mir(instance.def)?))\n+    }\n+}"}]}