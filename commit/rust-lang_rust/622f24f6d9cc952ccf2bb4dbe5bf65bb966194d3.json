{"sha": "622f24f6d9cc952ccf2bb4dbe5bf65bb966194d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMmYyNGY2ZDljYzk1MmNjZjJiYjRkYmU1YmY2NWJiOTY2MTk0ZDM=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-10-21T11:51:31Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-10-21T12:06:38Z"}, "message": "vec: Use Vec::extend specializations in extend_from_slice and more\n\nThe new Vec::extend covers the duties of .extend_from_slice() and some\nprevious specializations.", "tree": {"sha": "6ab820fb97d2393fa9afc216c222274c4a1524ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ab820fb97d2393fa9afc216c222274c4a1524ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/622f24f6d9cc952ccf2bb4dbe5bf65bb966194d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/622f24f6d9cc952ccf2bb4dbe5bf65bb966194d3", "html_url": "https://github.com/rust-lang/rust/commit/622f24f6d9cc952ccf2bb4dbe5bf65bb966194d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/622f24f6d9cc952ccf2bb4dbe5bf65bb966194d3/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3cab90fda3b1ccfa4eb952dda49677c8d06c1ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3cab90fda3b1ccfa4eb952dda49677c8d06c1ef", "html_url": "https://github.com/rust-lang/rust/commit/a3cab90fda3b1ccfa4eb952dda49677c8d06c1ef"}], "stats": {"total": 40, "additions": 2, "deletions": 38}, "files": [{"sha": "50ad48567472c9dc40159bd5552295450270fb7f", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/622f24f6d9cc952ccf2bb4dbe5bf65bb966194d3/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622f24f6d9cc952ccf2bb4dbe5bf65bb966194d3/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=622f24f6d9cc952ccf2bb4dbe5bf65bb966194d3", "patch": "@@ -1212,26 +1212,7 @@ impl<T: Clone> Vec<T> {\n     /// ```\n     #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n     pub fn extend_from_slice(&mut self, other: &[T]) {\n-        self.reserve(other.len());\n-\n-        // Unsafe code so this can be optimised to a memcpy (or something\n-        // similarly fast) when T is Copy. LLVM is easily confused, so any\n-        // extra operations during the loop can prevent this optimisation.\n-        unsafe {\n-            let len = self.len();\n-            let ptr = self.get_unchecked_mut(len) as *mut T;\n-            // Use SetLenOnDrop to work around bug where compiler\n-            // may not realize the store through `ptr` trough self.set_len()\n-            // don't alias.\n-            let mut local_len = SetLenOnDrop::new(&mut self.len);\n-\n-            for i in 0..other.len() {\n-                ptr::write(ptr.offset(i as isize), other.get_unchecked(i).clone());\n-                local_len.increment_len(1);\n-            }\n-\n-            // len set by scope guard\n-        }\n+        self.extend(other.iter().cloned())\n     }\n }\n \n@@ -1640,24 +1621,7 @@ impl<T> Vec<T> {\n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n-        <I as SpecExtendVec<T>>::extend_vec(iter, self);\n-    }\n-}\n-\n-// helper trait for specialization of Vec's Extend impl\n-trait SpecExtendVec<T> {\n-    fn extend_vec(self, vec: &mut Vec<T>);\n-}\n-\n-impl <'a, T: 'a + Copy, I: IntoIterator<Item=&'a T>> SpecExtendVec<T> for I {\n-    default fn extend_vec(self, vec: &mut Vec<T>) {\n-        vec.extend(self.into_iter().cloned());\n-    }\n-}\n-\n-impl<'a, T: Copy> SpecExtendVec<T> for &'a [T] {\n-    fn extend_vec(self, vec: &mut Vec<T>) {\n-        vec.extend_from_slice(self);\n+        self.extend(iter.into_iter().map(|&x| x))\n     }\n }\n "}]}