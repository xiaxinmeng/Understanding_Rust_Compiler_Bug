{"sha": "73141337223bfa55d03f2d1097af6a036a6cbbc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMTQxMzM3MjIzYmZhNTVkMDNmMmQxMDk3YWY2YTAzNmE2Y2JiYzU=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-18T19:58:46Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-01-23T01:18:11Z"}, "message": "cargo dev crater: cleanup, don't re-download and reextract crates on every run", "tree": {"sha": "3d46b18f4740e18433c00cddb39bfc895a834711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d46b18f4740e18433c00cddb39bfc895a834711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73141337223bfa55d03f2d1097af6a036a6cbbc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73141337223bfa55d03f2d1097af6a036a6cbbc5", "html_url": "https://github.com/rust-lang/rust/commit/73141337223bfa55d03f2d1097af6a036a6cbbc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73141337223bfa55d03f2d1097af6a036a6cbbc5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734d2052df123db0ed0ff05a7ab0f0d9271d18c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/734d2052df123db0ed0ff05a7ab0f0d9271d18c5", "html_url": "https://github.com/rust-lang/rust/commit/734d2052df123db0ed0ff05a7ab0f0d9271d18c5"}], "stats": {"total": 88, "additions": 52, "deletions": 36}, "files": [{"sha": "63c04f9a1f1967595bc4bfa8bd0010b3d2fd1444", "filename": "clippy_dev/src/crater.rs", "status": "modified", "additions": 52, "deletions": 36, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/73141337223bfa55d03f2d1097af6a036a6cbbc5/clippy_dev%2Fsrc%2Fcrater.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73141337223bfa55d03f2d1097af6a036a6cbbc5/clippy_dev%2Fsrc%2Fcrater.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fcrater.rs?ref=73141337223bfa55d03f2d1097af6a036a6cbbc5", "patch": "@@ -13,6 +13,7 @@ struct KrateSource {\n struct Krate {\n     version: String,\n     name: String,\n+    // path to the extracted sources that clippy can check\n     path: PathBuf,\n }\n \n@@ -23,37 +24,44 @@ impl KrateSource {\n             name: name.into(),\n         }\n     }\n+\n     fn download_and_extract(&self) -> Krate {\n         let extract_dir = PathBuf::from(\"target/crater/crates\");\n-\n-        // download\n         let krate_download_dir = PathBuf::from(\"target/crater/downloads\");\n \n+        // url to download the crate from crates.io\n         let url = format!(\n             \"https://crates.io/api/v1/crates/{}/{}/download\",\n             self.name, self.version\n         );\n-        println!(\"Downloading {}, {} / {}\", self.name, self.version, url);\n+        println!(\"Downloading and extracting {} {} from {}\", self.name, self.version, url);\n         let _ = std::fs::create_dir(\"target/crater/\");\n-\n         let _ = std::fs::create_dir(&krate_download_dir);\n         let _ = std::fs::create_dir(&extract_dir);\n \n-        let krate_name = format!(\"{}-{}.crate.tar.gz\", &self.name, &self.version);\n-        let krate_file_path = krate_download_dir.join(krate_name);\n-        let mut krate_dest = std::fs::File::create(&krate_file_path).unwrap();\n-        let mut krate_req = ureq::get(&url).call().unwrap().into_reader();\n-        std::io::copy(&mut krate_req, &mut krate_dest).unwrap();\n-        // unzip the tarball\n-        let dl = std::fs::File::open(krate_file_path).unwrap();\n-\n-        let ungz_tar = flate2::read::GzDecoder::new(dl);\n-        // extract the tar archive\n-        let mut archiv = tar::Archive::new(ungz_tar);\n-        let extract_path = extract_dir.clone();\n-        archiv.unpack(&extract_path).expect(\"Failed to extract!\");\n-        // extracted\n-        dbg!(&extract_path);\n+        let krate_file_path = krate_download_dir.join(format!(\"{}-{}.crate.tar.gz\", &self.name, &self.version));\n+        // don't download/extract if we already have done so\n+        if !krate_file_path.is_file() {\n+            // create a file path to download and write the crate data into\n+            let mut krate_dest = std::fs::File::create(&krate_file_path).unwrap();\n+            let mut krate_req = ureq::get(&url).call().unwrap().into_reader();\n+            // copy the crate into the file\n+            std::io::copy(&mut krate_req, &mut krate_dest).unwrap();\n+\n+            // unzip the tarball\n+            let ungz_tar = flate2::read::GzDecoder::new(std::fs::File::open(&krate_file_path).unwrap());\n+            // extract the tar archive\n+            let mut archiv = tar::Archive::new(ungz_tar);\n+            archiv.unpack(&extract_dir).expect(\"Failed to extract!\");\n+\n+            // unzip the tarball\n+            let ungz_tar = flate2::read::GzDecoder::new(std::fs::File::open(&krate_file_path).unwrap());\n+            // extract the tar archive\n+            let mut archiv = tar::Archive::new(ungz_tar);\n+            archiv.unpack(&extract_dir).expect(\"Failed to extract!\");\n+        }\n+        // crate is extracted, return a new Krate object which contains the path to the extracted\n+        // sources that clippy can check\n         Krate {\n             version: self.version.clone(),\n             name: self.name.clone(),\n@@ -64,24 +72,37 @@ impl KrateSource {\n \n impl Krate {\n     fn run_clippy_lints(&self, cargo_clippy_path: &PathBuf) -> Vec<String> {\n+        println!(\"Linting {} {}...\", &self.name, &self.version);\n         let cargo_clippy_path = std::fs::canonicalize(cargo_clippy_path).unwrap();\n-        let project_root = &self.path;\n-        dbg!(&cargo_clippy_path);\n-        dbg!(&project_root);\n \n-        let output = std::process::Command::new(cargo_clippy_path)\n+        let all_output = std::process::Command::new(cargo_clippy_path)\n+            // lint warnings will look like this:\n+            // src/cargo/ops/cargo_compile.rs:127:35: warning: usage of `FromIterator::from_iter`\n             .args(&[\"--\", \"--message-format=short\", \"--\", \"--cap-lints=warn\"])\n-            .current_dir(project_root)\n+            .current_dir(&self.path)\n             .output()\n             .unwrap();\n-        let mut output = String::from_utf8_lossy(&output.stderr);\n-        let output: Vec<&str> = output.lines().collect();\n-        let mut output: Vec<String> = output\n+        let stderr = String::from_utf8_lossy(&all_output.stderr);\n+        let output_lines = stderr.lines();\n+        let mut output: Vec<String> = output_lines\n             .into_iter()\n             .filter(|line| line.contains(\": warning: \"))\n-            .map(|l| l.to_string())\n+            // prefix with the crate name and version\n+            // cargo-0.49.0/src/cargo/ops/cargo_compile.rs:127:35: warning: usage of `FromIterator::from_iter`\n+            .map(|line| format!(\"{}-{}/{}\", self.name, self.version, line))\n+            // remove the \"warning: \"\n+            .map(|line| {\n+                let remove_pat = \"warning: \";\n+                let pos = line\n+                    .find(&remove_pat)\n+                    .expect(\"clippy output did not contain \\\"warning: \\\"\");\n+                let mut new = line[0..pos].to_string();\n+                new.push_str(&line[pos + remove_pat.len()..]);\n+                new\n+            })\n             .collect();\n \n+        // sort messages alphabtically to avoid noise in the logs\n         output.sort();\n         output\n     }\n@@ -97,7 +118,6 @@ fn build_clippy() {\n // the main fn\n pub fn run() {\n     let cargo_clippy_path: PathBuf = PathBuf::from(\"target/debug/cargo-clippy\");\n-    let clippy_driver_path: PathBuf = PathBuf::from(\"target/debug/clippy-driver\");\n \n     // crates we want to check:\n     let krates: Vec<KrateSource> = vec![KrateSource::new(\"regex\", \"1.4.2\"), KrateSource::new(\"cargo\", \"0.49.0\")];\n@@ -112,11 +132,6 @@ pub fn run() {\n         \"target/debug/cargo-clippy binary not found! {}\",\n         cargo_clippy_path.display()\n     );\n-    assert!(\n-        clippy_driver_path.is_file(),\n-        \"target/debug/clippy-driver binary not found! {}\",\n-        clippy_driver_path.display()\n-    );\n \n     // download and extract the crates, then run clippy on them and collect clippys warnings\n     let clippy_lint_results: Vec<Vec<String>> = krates\n@@ -125,7 +140,8 @@ pub fn run() {\n         .map(|krate| krate.run_clippy_lints(&cargo_clippy_path))\n         .collect();\n \n-    let results: Vec<String> = clippy_lint_results.into_iter().flatten().collect();\n+    let all_warnings: Vec<String> = clippy_lint_results.into_iter().flatten().collect();\n \n-    results.iter().for_each(|l| println!(\"{}\", l));\n+    // TODO: save these into a file\n+    all_warnings.iter().for_each(|l| println!(\"{}\", l));\n }"}]}