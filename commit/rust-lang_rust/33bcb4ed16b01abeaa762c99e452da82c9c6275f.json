{"sha": "33bcb4ed16b01abeaa762c99e452da82c9c6275f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYmNiNGVkMTZiMDFhYmVhYTc2MmM5OWU0NTJkYTgyYzljNjI3NWY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-18T12:41:29Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-18T13:37:30Z"}, "message": "When running under compare-mode=nll, generate expected output to `foo.nll.stderr`\n\nThis allows easy revision of the update-references.sh script (included\nhere) so that it can update the expected output for nll rather than\nstderr. It also reminds the rustc developer via the filename that they\nare looking at output generated under comapre-mode=nll.\n\nOne could argue that there is still a problem with the strategy encoded here:\nif we reach a scenario where a change to the compiler brings the output\nunder AST and NLL modes back into sync, this code will continue to still\ngenerate output to distinct `foo.stderr` and `foo.nll.stderr` files, and\nwill continue to copy those two files back to corresponding distinct\nfiles in the source tree, even if the *content* of the two files is now the\nsame.\n\n  * Arguably the \"right thing\" to do in that case is to remove the\n    `foo.nll.stderr` file entirely.\n\n  * However, I think the real answer is that we will probably want to\n    double-check such cases by hand anyway. We should be regularly\n    double-checking the diffs between `foo.stderr` and\n    `foo.nll.stderr`, and if we see a zero-diff case, then we should\n    evaluate whether that is correct, and if so, remove the file by\n    hand.)\n\n  * In any case, I think the default behavior encoded here (or at\n    least *intended* to be encoded here) is superior to the\n    alternative of *only* generating a `foo.nll.stderr` file if one\n    already existed in the source tree at the time that `compiletest`\n    was invoked (and otherwise unconditionally generating a\n    `foo.stderr` file, as was the behavior prior to this commit),\n    because that alternative is more likely to cause rustc developers\n    to overwrite a `foo.stderr` file with the stderr output from a\n    compare-mode=nll run, which will then break the *normal*\n    `compiletest` run and probably be much more confusing for the\n    average rustc developer.", "tree": {"sha": "935bd7d77bfa5ef7864abaab680e2d9ac93952c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/935bd7d77bfa5ef7864abaab680e2d9ac93952c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33bcb4ed16b01abeaa762c99e452da82c9c6275f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33bcb4ed16b01abeaa762c99e452da82c9c6275f", "html_url": "https://github.com/rust-lang/rust/commit/33bcb4ed16b01abeaa762c99e452da82c9c6275f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33bcb4ed16b01abeaa762c99e452da82c9c6275f/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4326d3fb83f88f10139ec2f00c3fb5442775d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4326d3fb83f88f10139ec2f00c3fb5442775d7", "html_url": "https://github.com/rust-lang/rust/commit/1a4326d3fb83f88f10139ec2f00c3fb5442775d7"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "cfe9a43707cf614cd7318e004ce30e94d3b5633c", "filename": "src/test/ui/update-references.sh", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33bcb4ed16b01abeaa762c99e452da82c9c6275f/src%2Ftest%2Fui%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/33bcb4ed16b01abeaa762c99e452da82c9c6275f/src%2Ftest%2Fui%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fupdate-references.sh?ref=33bcb4ed16b01abeaa762c99e452da82c9c6275f", "patch": "@@ -33,6 +33,7 @@ shift\n \n while [[ \"$1\" != \"\" ]]; do\n     STDERR_NAME=\"${1/%.rs/.stderr}\"\n+    STDERR_NLL_NAME=\"${1/%.rs/.nll.stderr}\"\n     STDOUT_NAME=\"${1/%.rs/.stdout}\"\n     shift\n     if [ -f $BUILD_DIR/$STDOUT_NAME ] && \\\n@@ -45,4 +46,9 @@ while [[ \"$1\" != \"\" ]]; do\n         echo updating $MYDIR/$STDERR_NAME\n         cp $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME\n     fi\n+    if [ -f $BUILD_DIR/$STDERR_NLL_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDERR_NLL_NAME $MYDIR/$STDERR_NLL_NAME >& /dev/null); then\n+        echo updating $MYDIR/$STDERR_NLL_NAME\n+        cp $BUILD_DIR/$STDERR_NLL_NAME $MYDIR/$STDERR_NLL_NAME\n+    fi\n done"}, {"sha": "c16dbd0272a76830364ff3b7ac99e15da111d2d6", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33bcb4ed16b01abeaa762c99e452da82c9c6275f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bcb4ed16b01abeaa762c99e452da82c9c6275f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=33bcb4ed16b01abeaa762c99e452da82c9c6275f", "patch": "@@ -2811,7 +2811,7 @@ impl<'test> TestCx<'test> {\n         normalized\n     }\n \n-    fn load_expected_output(&self, kind: &str) -> String {\n+    fn expected_output_path(&self, kind: &str) -> PathBuf {\n         let mut path = expected_output_path(&self.testpaths,\n                                             self.revision,\n                                             &self.config.compare_mode,\n@@ -2822,6 +2822,11 @@ impl<'test> TestCx<'test> {\n             path = expected_output_path(&self.testpaths, self.revision, &None, kind);\n         }\n \n+        path\n+    }\n+\n+    fn load_expected_output(&self, kind: &str) -> String {\n+        let path = self.expected_output_path(kind);\n         if path.exists() {\n             match self.load_expected_output_from_path(&path) {\n                 Ok(x) => x,\n@@ -2875,7 +2880,8 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        let output_file = self.output_base_name().with_extension(kind);\n+        let expected_output_path = self.expected_output_path(kind);\n+        let output_file = self.output_base_name().with_file_name(&expected_output_path);\n         match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n             Ok(()) => {}\n             Err(e) => self.fatal(&format!("}]}