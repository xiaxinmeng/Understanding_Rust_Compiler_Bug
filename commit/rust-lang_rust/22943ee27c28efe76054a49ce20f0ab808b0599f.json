{"sha": "22943ee27c28efe76054a49ce20f0ab808b0599f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyOTQzZWUyN2MyOGVmZTc2MDU0YTQ5Y2UyMGYwYWI4MDhiMDU5OWY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-24T09:00:42Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-29T19:23:07Z"}, "message": "Remove unnecessary uses of `ObligationForest::scratch`.\n\nThey don't help performance at all, and just complicate things.", "tree": {"sha": "50a312a5b0511f191af12cea7c5e1b7f16174cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a312a5b0511f191af12cea7c5e1b7f16174cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22943ee27c28efe76054a49ce20f0ab808b0599f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22943ee27c28efe76054a49ce20f0ab808b0599f", "html_url": "https://github.com/rust-lang/rust/commit/22943ee27c28efe76054a49ce20f0ab808b0599f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22943ee27c28efe76054a49ce20f0ab808b0599f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea726501e1b86d8efa5c800a7a218aed7ee1503c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea726501e1b86d8efa5c800a7a218aed7ee1503c", "html_url": "https://github.com/rust-lang/rust/commit/ea726501e1b86d8efa5c800a7a218aed7ee1503c"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "766e1d3fae32dd0a16bc259f81b9782222ea7169", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22943ee27c28efe76054a49ce20f0ab808b0599f/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22943ee27c28efe76054a49ce20f0ab808b0599f/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=22943ee27c28efe76054a49ce20f0ab808b0599f", "patch": "@@ -151,9 +151,8 @@ pub struct ObligationForest<O: ForestObligation> {\n     /// comments in `process_obligation` for details.\n     active_cache: FxHashMap<O::Predicate, usize>,\n \n-    /// A scratch vector reused in various operations, to avoid allocating new\n-    /// vectors.\n-    scratch: RefCell<Vec<usize>>,\n+    /// A vector reused in compress(), to avoid allocating new vectors.\n+    node_rewrites: RefCell<Vec<usize>>,\n \n     obligation_tree_id_generator: ObligationTreeIdGenerator,\n \n@@ -275,7 +274,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             nodes: vec![],\n             done_cache: Default::default(),\n             active_cache: Default::default(),\n-            scratch: RefCell::new(vec![]),\n+            node_rewrites: RefCell::new(vec![]),\n             obligation_tree_id_generator: (0..).map(ObligationTreeId),\n             error_cache: Default::default(),\n         }\n@@ -472,8 +471,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n     fn process_cycles<P>(&self, processor: &mut P)\n         where P: ObligationProcessor<Obligation=O>\n     {\n-        let mut stack = self.scratch.replace(vec![]);\n-        debug_assert!(stack.is_empty());\n+        let mut stack = vec![];\n \n         debug!(\"process_cycles()\");\n \n@@ -493,7 +491,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n         debug!(\"process_cycles: complete\");\n \n         debug_assert!(stack.is_empty());\n-        self.scratch.replace(stack);\n     }\n \n     fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)\n@@ -533,7 +530,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n     /// Returns a vector of obligations for `p` and all of its\n     /// ancestors, putting them into the error state in the process.\n     fn error_at(&self, mut index: usize) -> Vec<O> {\n-        let mut error_stack = self.scratch.replace(vec![]);\n+        let mut error_stack: Vec<usize> = vec![];\n         let mut trace = vec![];\n \n         loop {\n@@ -562,7 +559,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n             error_stack.extend(node.dependents.iter());\n         }\n \n-        self.scratch.replace(error_stack);\n         trace\n     }\n \n@@ -617,7 +613,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n     #[inline(never)]\n     fn compress(&mut self, do_completed: DoCompleted) -> Option<Vec<O>> {\n         let nodes_len = self.nodes.len();\n-        let mut node_rewrites: Vec<_> = self.scratch.replace(vec![]);\n+        let mut node_rewrites: Vec<_> = self.node_rewrites.replace(vec![]);\n         node_rewrites.extend(0..nodes_len);\n         let mut dead_nodes = 0;\n \n@@ -667,7 +663,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         // No compression needed.\n         if dead_nodes == 0 {\n             node_rewrites.truncate(0);\n-            self.scratch.replace(node_rewrites);\n+            self.node_rewrites.replace(node_rewrites);\n             return if do_completed == DoCompleted::Yes { Some(vec![]) } else { None };\n         }\n \n@@ -690,7 +686,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         self.apply_rewrites(&node_rewrites);\n \n         node_rewrites.truncate(0);\n-        self.scratch.replace(node_rewrites);\n+        self.node_rewrites.replace(node_rewrites);\n \n         successful\n     }"}]}