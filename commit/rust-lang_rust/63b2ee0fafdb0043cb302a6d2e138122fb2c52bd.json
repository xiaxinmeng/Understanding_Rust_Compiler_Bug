{"sha": "63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "node_id": "C_kwDOAAsO6NoAKDYzYjJlZTBmYWZkYjAwNDNjYjMwMmE2ZDJlMTM4MTIyZmIyYzUyYmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-15T15:18:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-15T15:18:09Z"}, "message": "Auto merge of #111601 - matthiaskrgr:rollup-e5dguzb, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #108291 (Fix more benchmark test with black_box)\n - #108356 (improve doc test for UnsafeCell::raw_get)\n - #110049 (Don't claim `LocalKey::with` prevents a reference to be sent across threads)\n - #111525 (Stop checking for the absence of something that doesn't exist)\n - #111538 (Make sure the build.rustc version is either the same or 1 apart)\n - #111578 (Move expansion of query macros in rustc_middle to rustc_middle::query)\n - #111584 (Number lexing tweaks)\n - #111587 (Custom MIR: Support `Rvalue::CopyForDeref`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d3f7fe85c1bf630cec573627d33a2ff835001989", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3f7fe85c1bf630cec573627d33a2ff835001989"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "html_url": "https://github.com/rust-lang/rust/commit/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2913ad6db0f72fed5139253faed73200c7af3535", "url": "https://api.github.com/repos/rust-lang/rust/commits/2913ad6db0f72fed5139253faed73200c7af3535", "html_url": "https://github.com/rust-lang/rust/commit/2913ad6db0f72fed5139253faed73200c7af3535"}, {"sha": "eeebb6590aa39148f88e62d019798ccb9e11f6a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeebb6590aa39148f88e62d019798ccb9e11f6a5", "html_url": "https://github.com/rust-lang/rust/commit/eeebb6590aa39148f88e62d019798ccb9e11f6a5"}], "stats": {"total": 705, "additions": 419, "deletions": 286}, "files": [{"sha": "eb25d454339b578e6577a488e2fb7984eecbef9a", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -35,7 +35,7 @@ use rustc_middle::mir::{\n use rustc_middle::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::mir::{ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, CapturedPlace, ParamEnv, RegionVid, TyCtxt};\n use rustc_session::lint::builtin::UNUSED_MUT;\n use rustc_span::{Span, Symbol};"}, {"sha": "442ce0ea542093c268926c4092fe4313f5619639", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -80,8 +80,8 @@ use rustc_errors::{DiagnosticMessage, ErrorGuaranteed, Handler, SubdiagnosticMes\n use rustc_fluent_macro::fluent_messages;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_middle::ty::query::Providers;\n use rustc_session::config::{Lto, OptLevel, OutputFilenames};\n use rustc_session::Session;\n use rustc_span::Symbol;"}, {"sha": "6a86237d79e0726c8b83f64b4e5aeb1c9fc3756c", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -37,7 +37,7 @@ use rustc_errors::{DiagnosticMessage, ErrorGuaranteed, FatalError, Handler, Subd\n use rustc_fluent_macro::fluent_messages;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OptLevel, OutputFilenames, PrintRequest};\n use rustc_session::Session;"}, {"sha": "14460efc1b0514249d4476dda356a4d61eec2178", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportInfo, SymbolExportKind, SymbolExportLevel,\n };\n use rustc_middle::query::LocalCrate;\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{self, SymbolName, TyCtxt};"}, {"sha": "d9b0a1525946555680fe2feb4c3c9aea87a620b2", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -27,8 +27,8 @@ use rustc_middle::middle::exported_symbols;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::middle::lang_items;\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, MonoItem};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, TyAndLayout};\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, CrateType, EntryFnType, OutputType};"}, {"sha": "d6c230127626266eddcd3e4f63922423d2f2b118", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::{lang_items, weak_lang_items::WEAK_LANG_ITEMS, LangItem};\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self as ty, TyCtxt};\n use rustc_session::{lint, parse::feature_err};\n use rustc_span::symbol::Ident;"}, {"sha": "f4b9d1dea581cd8a71329dbadab93437ea70597e", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -30,7 +30,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_serialize::opaque::{FileEncoder, MemDecoder};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};"}, {"sha": "f11d82cb9d365e7aed90bbedd19ca8e93c845d79", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;"}, {"sha": "5c88368bc87563774bf674ca38b54cef870f8512", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -8,8 +8,8 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, LayoutOf, TyAndLayout};\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_session::{\n     config::{self, OutputFilenames, PrintRequest},"}, {"sha": "fa8253d5e49661138024e128534a27cd3cc265ff", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,7 +2,7 @@ use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n "}, {"sha": "c36282d5ed442f0dcd53c5669d386c11274f19ab", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -35,8 +35,8 @@ pub mod util;\n \n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty;\n-use rustc_middle::ty::query::Providers;\n \n fluent_messages! { \"../messages.ftl\" }\n "}, {"sha": "3971a4c01d66116263c7a82f0d76008f0b8e1f18", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -78,7 +78,7 @@ use rustc_errors::{pluralize, struct_span_err, Diagnostic, DiagnosticBuilder};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_index::bit_set::BitSet;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_session::parse::feature_err;"}, {"sha": "8918553e5f9ae7ff2073a39637e146b1f9a625b7", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -12,7 +12,7 @@ use rustc_infer::infer::outlives::env::{OutlivesEnvironment, RegionBoundPairs};\n use rustc_infer::infer::outlives::obligations::TypeOutlives;\n use rustc_infer::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_middle::mir::ConstraintCategory;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n     self, AdtKind, GenericParamDefKind, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,"}, {"sha": "4524b87a418aa18972dd3ad577a3598a17f94c18", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -8,7 +8,7 @@\n use crate::errors;\n use rustc_errors::{error_code, struct_span_err};\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::sym;\n use rustc_trait_selection::traits;"}, {"sha": "9f00dc418eee90fa75ad494ebd127fe92833840f", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -28,7 +28,7 @@ use rustc_hir::{GenericParamKind, Node};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n use rustc_middle::ty::{self, AdtKind, Const, IsSuggestable, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};"}, {"sha": "794812a5ce7d91855cd2d395b48d84c399e4a937", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -17,6 +17,7 @@ use rustc_hir::{GenericArg, GenericParam, GenericParamKind, HirIdMap, LifetimeNa\n use rustc_middle::bug;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_bound_vars::*;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeSuperVisitable, TypeVisitor};\n use rustc_session::lint;\n use rustc_span::def_id::DefId;\n@@ -232,8 +233,8 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n \n type ScopeRef<'a> = &'a Scope<'a>;\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         resolve_bound_vars,\n \n         named_variable_map: |tcx, id| tcx.resolve_bound_vars(id).defs.get(&id),"}, {"sha": "e4c6e6e391a112a2a090bc064cd5e579b4fadbcc", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{ForeignItem, ForeignItemKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{ObligationCause, WellFormedLoc};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Region, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_span::def_id::LocalDefId;\n use rustc_trait_selection::traits::{self, ObligationCtxt};"}, {"sha": "612d4ff3df843d25f774888b1d6cb7ca75b11aba", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::{Span, Symbol};\n "}, {"sha": "5cd2cd50c113cfbf3eb512c6c928dc775b351bb7", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -104,7 +104,7 @@ use rustc_hir as hir;\n use rustc_hir::Node;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::middle;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::util;\n use rustc_session::{config::EntryFnType, parse::feature_err};"}, {"sha": "a8596c707f3a440badad32a766854424302b4f66", "filename": "compiler/rustc_hir_analysis/src/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,7 +1,7 @@\n use hir::Node;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, CratePredicatesMap, TyCtxt};\n use rustc_span::symbol::sym;"}, {"sha": "3ebd9e134bfa2b08cfe7b5caf822d5e2f95d359b", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -6,7 +6,7 @@\n use rustc_arena::DroplessArena;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, CrateVariancesMap, SubstsRef, Ty, TyCtxt};\n use rustc_middle::ty::{TypeSuperVisitable, TypeVisitable};\n use std::ops::ControlFlow;"}, {"sha": "54b222ade03fbf192147f39b1bf39ce6f1e8fabc", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -68,8 +68,8 @@ use rustc_hir::{HirIdMap, Node};\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_hir_analysis::check::check_abi;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_middle::query::Providers;\n use rustc_middle::traits;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::config;\n use rustc_session::Session;"}, {"sha": "cf9290c1a4841e43cf7c1326f27d8d77846cd4c8", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -18,6 +18,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::{self, InferOk};\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{self, GenericParamDefKind, Ty, TypeVisitableExt};\n@@ -28,7 +29,7 @@ use rustc_trait_selection::traits::{self, NormalizeExt};\n \n use self::probe::{IsSuggestion, ProbeScope};\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     probe::provide(providers);\n }\n "}, {"sha": "f91f4f887c6a274ba6e523bf7009d37268fafa7c", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -16,6 +16,7 @@ use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::DefineOpaqueTypes;\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_middle::middle::stability;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::AssocItem;\n use rustc_middle::ty::GenericParamDefKind;\n@@ -495,7 +496,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     providers.method_autoderef_steps = method_autoderef_steps;\n }\n "}, {"sha": "c9e857141c92a427d251c30a04058bbaf714bc03", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -9,6 +9,7 @@ use rustc_data_structures::OnDrop;\n use rustc_errors::registry::Registry;\n use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_lint::LintStore;\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::{bug, ty};\n use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n@@ -37,8 +38,7 @@ pub struct Compiler {\n     pub(crate) sess: Lrc<Session>,\n     codegen_backend: Lrc<Box<dyn CodegenBackend>>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>>,\n-    pub(crate) override_queries:\n-        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::ExternProviders)>,\n+    pub(crate) override_queries: Option<fn(&Session, &mut Providers, &mut ExternProviders)>,\n }\n \n impl Compiler {\n@@ -275,8 +275,7 @@ pub struct Config {\n     /// the list of queries.\n     ///\n     /// The second parameter is local providers and the third parameter is external providers.\n-    pub override_queries:\n-        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::ExternProviders)>,\n+    pub override_queries: Option<fn(&Session, &mut Providers, &mut ExternProviders)>,\n \n     /// This is a callback from the driver that is called to create a codegen backend.\n     pub make_codegen_backend:"}, {"sha": "cb10916abb12b4b4bcd98839ad63f999d8369c44", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -17,7 +17,7 @@ use rustc_lint::{unerased_lint_store, BufferedEarlyLint, EarlyCheckNode, LintSto\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::{self, GlobalCtxt, RegisteredTools, TyCtxt};\n use rustc_mir_build as mir_build;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_attr};"}, {"sha": "2c8014d8b3ab93b32e6f3316031f1971b2356bbc", "filename": "compiler/rustc_interface/src/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::attr;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n "}, {"sha": "d511d2b1280d986c83460e46029f003b8bb8e704", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -582,34 +582,38 @@ impl Cursor<'_> {\n         let mut base = Base::Decimal;\n         if first_digit == '0' {\n             // Attempt to parse encoding base.\n-            let has_digits = match self.first() {\n+            match self.first() {\n                 'b' => {\n                     base = Base::Binary;\n                     self.bump();\n-                    self.eat_decimal_digits()\n+                    if !self.eat_decimal_digits() {\n+                        return Int { base, empty_int: true };\n+                    }\n                 }\n                 'o' => {\n                     base = Base::Octal;\n                     self.bump();\n-                    self.eat_decimal_digits()\n+                    if !self.eat_decimal_digits() {\n+                        return Int { base, empty_int: true };\n+                    }\n                 }\n                 'x' => {\n                     base = Base::Hexadecimal;\n                     self.bump();\n-                    self.eat_hexadecimal_digits()\n+                    if !self.eat_hexadecimal_digits() {\n+                        return Int { base, empty_int: true };\n+                    }\n                 }\n-                // Not a base prefix.\n-                '0'..='9' | '_' | '.' | 'e' | 'E' => {\n+                // Not a base prefix; consume additional digits.\n+                '0'..='9' | '_' => {\n                     self.eat_decimal_digits();\n-                    true\n                 }\n+\n+                // Also not a base prefix; nothing more to do here.\n+                '.' | 'e' | 'E' => {}\n+\n                 // Just a 0.\n                 _ => return Int { base, empty_int: false },\n-            };\n-            // Base prefix was provided, but there were no digits\n-            // after it, e.g. \"0x\".\n-            if !has_digits {\n-                return Int { base, empty_int: true };\n             }\n         } else {\n             // No base prefix, parse number in the usual way."}, {"sha": "b1266b58a61e7b63cfdfba1afa7946bf8e724616", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,5 +1,5 @@\n use crate::lints::{Expectation, ExpectationNote};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::UNFULFILLED_LINT_EXPECTATIONS;\n use rustc_session::lint::LintExpectationId;"}, {"sha": "b92ed11f38a880004851e0bb38776348fec8c6fa", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::lint::{\n     reveal_actual_level, struct_lint_level, LevelAndSource, LintExpectation, LintLevelSource,\n     ShallowLintLevelMap,\n };\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{RegisteredTools, TyCtxt};\n use rustc_session::lint::builtin::{RENAMED_AND_REMOVED_LINTS, UNKNOWN_LINTS, UNUSED_ATTRIBUTES};\n use rustc_session::lint::{"}, {"sha": "dfddfe09ab3c1c9b75386446b091556098005e09", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -86,7 +86,7 @@ use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n     BARE_TRAIT_OBJECTS, ELIDED_LIFETIMES_IN_PATHS, EXPLICIT_OUTLIVES_REQUIREMENTS,"}, {"sha": "001d53b1099ec3889b1ca90608b341526eff32c9", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -253,7 +253,7 @@ fn add_query_desc_cached_impl(\n         quote! {\n             #[allow(unused_variables, unused_braces, rustc::pass_by_value)]\n             #[inline]\n-            pub fn #name<'tcx>(#tcx: TyCtxt<'tcx>, #key: &crate::ty::query::query_keys::#name<'tcx>) -> bool {\n+            pub fn #name<'tcx>(#tcx: TyCtxt<'tcx>, #key: &crate::query::query_keys::#name<'tcx>) -> bool {\n                 #expr\n             }\n         }\n@@ -262,7 +262,7 @@ fn add_query_desc_cached_impl(\n             // we're taking `key` by reference, but some rustc types usually prefer being passed by value\n             #[allow(rustc::pass_by_value)]\n             #[inline]\n-            pub fn #name<'tcx>(_: TyCtxt<'tcx>, _: &crate::ty::query::query_keys::#name<'tcx>) -> bool {\n+            pub fn #name<'tcx>(_: TyCtxt<'tcx>, _: &crate::query::query_keys::#name<'tcx>) -> bool {\n                 false\n             }\n         }\n@@ -273,7 +273,7 @@ fn add_query_desc_cached_impl(\n \n     let desc = quote! {\n         #[allow(unused_variables)]\n-        pub fn #name<'tcx>(tcx: TyCtxt<'tcx>, key: crate::ty::query::query_keys::#name<'tcx>) -> String {\n+        pub fn #name<'tcx>(tcx: TyCtxt<'tcx>, key: crate::query::query_keys::#name<'tcx>) -> String {\n             let (#tcx, #key) = (tcx, key);\n             ::rustc_middle::ty::print::with_no_trimmed_paths!(\n                 format!(#desc)"}, {"sha": "fe880b939ef467fb5d40549f5e5bc90df049174b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -14,8 +14,8 @@ use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::query::LocalCrate;\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::fast_reject::SimplifiedType;\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::cstore::CrateStore;\n use rustc_session::{Session, StableCrateId};\n@@ -114,8 +114,8 @@ macro_rules! provide_one {\n     ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => $compute:block) => {\n         fn $name<'tcx>(\n             $tcx: TyCtxt<'tcx>,\n-            def_id_arg: ty::query::query_keys::$name<'tcx>,\n-        ) -> ty::query::query_provided::$name<'tcx> {\n+            def_id_arg: rustc_middle::query::query_keys::$name<'tcx>,\n+        ) -> rustc_middle::query::query_provided::$name<'tcx> {\n             let _prof_timer =\n                 $tcx.prof.generic_activity(concat!(\"metadata_decode_entry_\", stringify!($name)));\n "}, {"sha": "c1815ae3851d545528dc2a712914999ae9e7afcd", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -25,10 +25,10 @@ use rustc_middle::middle::exported_symbols::{\n };\n use rustc_middle::mir::interpret;\n use rustc_middle::query::LocalCrate;\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::TyEncoder;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_middle::util::common::to_readable_str;\n use rustc_serialize::{opaque, Decodable, Decoder, Encodable, Encoder};"}, {"sha": "9eaf330b536f73b5ccaf93d36b529607718ce482", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -20,8 +20,8 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use rustc_middle::middle::resolve_bound_vars::ObjectLifetimeDefault;\n use rustc_middle::mir;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ReprOptions, Ty, UnusedGenericParams};\n use rustc_middle::ty::{DeducedParamAttrs, GeneratorDiagnosticData, ParameterizedOverTcx, TyCtxt};\n use rustc_serialize::opaque::FileEncoder;"}, {"sha": "61c9e72db2cf5580d664e8699ff2cb8fcf8e4a89", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -6,7 +6,7 @@ pub mod map;\n pub mod nested_filter;\n pub mod place;\n \n-use crate::ty::query::Providers;\n+use crate::query::Providers;\n use crate::ty::{EarlyBinder, ImplSubject, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{par_for_each_in, DynSend, DynSync};"}, {"sha": "dc911c885746c2bd8b3df41c850d0d3888e8b9cd", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -84,13 +84,8 @@ mod tests;\n #[macro_use]\n mod macros;\n \n-#[macro_use]\n-pub mod query;\n-\n #[macro_use]\n pub mod arena;\n-#[macro_use]\n-pub mod dep_graph;\n pub(crate) mod error;\n pub mod hir;\n pub mod infer;\n@@ -100,10 +95,16 @@ pub mod middle;\n pub mod mir;\n pub mod thir;\n pub mod traits;\n+#[macro_use]\n pub mod ty;\n pub mod util;\n mod values;\n \n+#[macro_use]\n+pub mod query;\n+#[macro_use]\n+pub mod dep_graph;\n+\n // Allows macros to refer to this crate as `::rustc_middle`\n extern crate self as rustc_middle;\n "}, {"sha": "bd859d4d61beb982789c66d102644d9afd91492e", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -11,15 +11,15 @@\n \n use crate::bug;\n use crate::error::LimitInvalid;\n-use crate::ty;\n+use crate::query::Providers;\n use rustc_ast::Attribute;\n use rustc_session::Session;\n use rustc_session::{Limit, Limits};\n use rustc_span::symbol::{sym, Symbol};\n \n use std::num::IntErrorKind;\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     providers.limits = |tcx, ()| Limits {\n         recursion_limit: get_recursion_limit(tcx.hir().krate_attrs(), tcx.sess),\n         move_size_limit: get_limit("}, {"sha": "9bb4570ef1484981cc1448500eaf7dd122f85476", "filename": "compiler/rustc_middle/src/middle/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -32,6 +32,6 @@ pub mod region;\n pub mod resolve_bound_vars;\n pub mod stability;\n \n-pub fn provide(providers: &mut crate::ty::query::Providers) {\n+pub fn provide(providers: &mut crate::query::Providers) {\n     limits::provide(providers);\n }"}, {"sha": "ef13a2772077a4d4d8c987c5e40a8b5eb196e8c9", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -4,8 +4,89 @@\n //! [\"Queries: demand-driven compilation\"](https://rustc-dev-guide.rust-lang.org/query.html).\n //! This chapter includes instructions for adding new queries.\n \n-use crate::ty::{self, print::describe_as_module, TyCtxt};\n+#![allow(unused_parens)]\n+\n+use crate::dep_graph;\n+use crate::dep_graph::DepKind;\n+use crate::infer::canonical::{self, Canonical};\n+use crate::lint::LintExpectation;\n+use crate::metadata::ModChild;\n+use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n+use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n+use crate::middle::lib_features::LibFeatures;\n+use crate::middle::privacy::EffectiveVisibilities;\n+use crate::middle::resolve_bound_vars::{ObjectLifetimeDefault, ResolveBoundVars, ResolvedArg};\n+use crate::middle::stability::{self, DeprecationEntry};\n+use crate::mir;\n+use crate::mir::interpret::GlobalId;\n+use crate::mir::interpret::{\n+    ConstValue, EvalToAllocationRawResult, EvalToConstValueResult, EvalToValTreeResult,\n+};\n+use crate::mir::interpret::{LitToConstError, LitToConstInput};\n+use crate::mir::mono::CodegenUnit;\n+use crate::query::erase::{erase, restore, Erase};\n+use crate::thir;\n+use crate::traits::query::{\n+    CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n+    CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n+    CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal, NoSolution,\n+};\n+use crate::traits::query::{\n+    DropckConstraint, DropckOutlivesResult, MethodAutoderefStepsResult, NormalizationResult,\n+    OutlivesBound,\n+};\n+use crate::traits::specialization_graph;\n+use crate::traits::{self, ImplSource};\n+use crate::ty::fast_reject::SimplifiedType;\n+use crate::ty::layout::ValidityRequirement;\n+use crate::ty::query::{\n+    query_ensure, query_get_at, DynamicQuery, IntoQueryParam, TyCtxtAt, TyCtxtEnsure,\n+    TyCtxtEnsureWithValue,\n+};\n+use crate::ty::subst::{GenericArg, SubstsRef};\n+use crate::ty::util::AlwaysRequiresDrop;\n+use crate::ty::GeneratorDiagnosticData;\n+use crate::ty::TyCtxtFeed;\n+use crate::ty::{\n+    self, print::describe_as_module, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt,\n+    UnusedGenericParams,\n+};\n+use rustc_arena::TypedArena;\n+use rustc_ast as ast;\n+use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_attr as attr;\n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap, FxIndexSet};\n+use rustc_data_structures::steal::Steal;\n+use rustc_data_structures::svh::Svh;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::WorkerLocal;\n+use rustc_data_structures::unord::UnordSet;\n+use rustc_errors::ErrorGuaranteed;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, DocLinkResMap};\n+use rustc_hir::def_id::{\n+    CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LocalDefIdMap, LocalDefIdSet,\n+};\n+use rustc_hir::lang_items::{LangItem, LanguageItems};\n+use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n+use rustc_index::IndexVec;\n+use rustc_query_system::ich::StableHashingContext;\n+use rustc_query_system::query::{try_get_cached, CacheSelector, QueryCache, QueryMode, QueryState};\n+use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n+use rustc_session::cstore::{CrateDepKind, CrateSource};\n+use rustc_session::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n+use rustc_session::lint::LintExpectationId;\n+use rustc_session::Limits;\n use rustc_span::def_id::LOCAL_CRATE;\n+use rustc_span::symbol::Symbol;\n+use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::abi;\n+use rustc_target::spec::PanicStrategy;\n+use std::mem;\n+use std::ops::Deref;\n+use std::path::PathBuf;\n+use std::sync::Arc;\n \n pub mod erase;\n mod keys;\n@@ -2102,3 +2183,6 @@ rustc_queries! {\n         desc { \"check whether two const param are definitely not equal to eachother\"}\n     }\n }\n+\n+rustc_query_append! { define_callbacks! }\n+rustc_feedable_queries! { define_feedable! }"}, {"sha": "be7b2b7ec671a4188813adcb0ffcfa5fc0a61650", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -5,6 +5,7 @@ use crate::{mir, ty};\n \n use std::fmt::Write;\n \n+use crate::query::Providers;\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::{self as hir, LangItem};\n@@ -457,6 +458,6 @@ impl BorrowKind {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { closure_typeinfo, ..*providers }\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { closure_typeinfo, ..*providers }\n }"}, {"sha": "097bfb71a6fc8b15d06a7cf7115fe507f1c67620", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -15,6 +15,7 @@ use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstAllocation};\n use crate::mir::{Body, Local, Place, PlaceElem, ProjectionKind, Promoted};\n use crate::query::LocalCrate;\n+use crate::query::Providers;\n use crate::thir::Thir;\n use crate::traits;\n use crate::traits::solve;\n@@ -2454,7 +2455,7 @@ pub struct DeducedParamAttrs {\n     pub read_only: bool,\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     providers.maybe_unused_trait_imports =\n         |tcx, ()| &tcx.resolutions(()).maybe_unused_trait_imports;\n     providers.names_imported_by_glob_use = |tcx, id| {"}, {"sha": "7895993ccffad9cea62fabb6e47e9957996d3f89", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,8 +1,9 @@\n+use crate::query::Providers;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use crate::ty::{self, Ty, TyCtxt, TypeFlags, TypeVisitableExt};\n \n-pub(super) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { erase_regions_ty, ..*providers };\n+pub(super) fn provide(providers: &mut Providers) {\n+    *providers = Providers { erase_regions_ty, ..*providers };\n }\n \n fn erase_regions_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {"}, {"sha": "4223502848ef8f18f621d5ed170a89526375d159", "filename": "compiler/rustc_middle/src/ty/inhabitedness/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -43,6 +43,7 @@\n //! This code should only compile in modules where the uninhabitedness of `Foo`\n //! is visible.\n \n+use crate::query::Providers;\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, DefId, Ty, VariantDef, Visibility};\n \n@@ -52,9 +53,8 @@ pub mod inhabited_predicate;\n \n pub use inhabited_predicate::InhabitedPredicate;\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers) {\n-    *providers =\n-        ty::query::Providers { inhabited_predicate_adt, inhabited_predicate_type, ..*providers };\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers { inhabited_predicate_adt, inhabited_predicate_type, ..*providers };\n }\n \n /// Returns an `InhabitedPredicate` that is generic over type parameters and"}, {"sha": "a497b6a335d9c5d5b0b77d2b89aed56ad4d6b4b7", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -21,6 +21,7 @@ use crate::error::{OpaqueHiddenTypeMismatch, TypeMismatchReason};\n use crate::metadata::ModChild;\n use crate::middle::privacy::EffectiveVisibilities;\n use crate::mir::{Body, GeneratorLayout};\n+use crate::query::Providers;\n use crate::traits::{self, Reveal};\n use crate::ty;\n use crate::ty::fast_reject::SimplifiedType;\n@@ -121,6 +122,7 @@ pub mod inhabitedness;\n pub mod layout;\n pub mod normalize_erasing_regions;\n pub mod print;\n+#[macro_use]\n pub mod query;\n pub mod relate;\n pub mod subst;\n@@ -2590,7 +2592,7 @@ pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     closure::provide(providers);\n     context::provide(providers);\n     erase_regions::provide(providers);\n@@ -2599,7 +2601,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     print::provide(providers);\n     super::util::bug::provide(providers);\n     super::middle::provide(providers);\n-    *providers = ty::query::Providers {\n+    *providers = Providers {\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         incoherent_impls: trait_def::incoherent_impls_provider,\n         const_param_default: consts::const_param_default,"}, {"sha": "385156262c76ac2cde2a6088434d7d9067b416fb", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,4 +1,5 @@\n use crate::mir::interpret::{AllocRange, GlobalAlloc, Pointer, Provenance, Scalar};\n+use crate::query::Providers;\n use crate::ty::query::IntoQueryParam;\n use crate::ty::{\n     self, ConstInt, ParamConst, ScalarInt, Term, TermKind, Ty, TyCtxt, TypeFoldable,\n@@ -3054,8 +3055,8 @@ fn trimmed_def_paths(tcx: TyCtxt<'_>, (): ()) -> FxHashMap<DefId, Symbol> {\n     map\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { trimmed_def_paths, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { trimmed_def_paths, ..*providers };\n }\n \n #[derive(Default)]"}, {"sha": "647f4826876daa700074f11a2860149e824ffc1c", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 8, "deletions": 76, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,91 +1,26 @@\n-#![allow(unused_parens)]\n-\n use crate::dep_graph;\n use crate::dep_graph::DepKind;\n-use crate::infer::canonical::{self, Canonical};\n-use crate::lint::LintExpectation;\n-use crate::metadata::ModChild;\n-use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n-use crate::middle::lib_features::LibFeatures;\n-use crate::middle::privacy::EffectiveVisibilities;\n-use crate::middle::resolve_bound_vars::{ObjectLifetimeDefault, ResolveBoundVars, ResolvedArg};\n-use crate::middle::stability::{self, DeprecationEntry};\n-use crate::mir;\n-use crate::mir::interpret::GlobalId;\n-use crate::mir::interpret::{\n-    ConstValue, EvalToAllocationRawResult, EvalToConstValueResult, EvalToValTreeResult,\n-};\n-use crate::mir::interpret::{LitToConstError, LitToConstInput};\n-use crate::mir::mono::CodegenUnit;\n-\n-use crate::query::erase::{erase, restore, Erase};\n use crate::query::on_disk_cache::CacheEncoder;\n use crate::query::on_disk_cache::EncodedDepNodeIndex;\n use crate::query::on_disk_cache::OnDiskCache;\n-use crate::query::{AsLocalKey, Key};\n-use crate::thir;\n-use crate::traits::query::{\n-    CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n-    CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n-    CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal, NoSolution,\n+use crate::query::{\n+    DynamicQueries, ExternProviders, Providers, QueryArenas, QueryCaches, QueryEngine, QueryStates,\n };\n-use crate::traits::query::{\n-    DropckConstraint, DropckOutlivesResult, MethodAutoderefStepsResult, NormalizationResult,\n-    OutlivesBound,\n-};\n-use crate::traits::specialization_graph;\n-use crate::traits::{self, ImplSource};\n-use crate::ty::context::TyCtxtFeed;\n-use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::layout::ValidityRequirement;\n-use crate::ty::subst::{GenericArg, SubstsRef};\n-use crate::ty::util::AlwaysRequiresDrop;\n-use crate::ty::GeneratorDiagnosticData;\n-use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt, UnusedGenericParams};\n+use crate::ty::TyCtxt;\n use field_offset::FieldOffset;\n use measureme::StringId;\n-use rustc_arena::TypedArena;\n-use rustc_ast as ast;\n-use rustc_ast::expand::allocator::AllocatorKind;\n-use rustc_attr as attr;\n-use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::fx::{FxHashMap, FxIndexMap, FxIndexSet};\n-use rustc_data_structures::steal::Steal;\n-use rustc_data_structures::svh::Svh;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::AtomicU64;\n-use rustc_data_structures::sync::Lrc;\n-use rustc_data_structures::sync::WorkerLocal;\n-use rustc_data_structures::unord::UnordSet;\n-use rustc_errors::ErrorGuaranteed;\n-use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, DocLinkResMap};\n-use rustc_hir::def_id::{\n-    CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LocalDefIdMap, LocalDefIdSet,\n-};\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::hir_id::OwnerId;\n-use rustc_hir::lang_items::{LangItem, LanguageItems};\n-use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n-use rustc_index::IndexVec;\n use rustc_query_system::dep_graph::DepNodeIndex;\n use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n-use rustc_query_system::ich::StableHashingContext;\n pub(crate) use rustc_query_system::query::QueryJobId;\n use rustc_query_system::query::*;\n use rustc_query_system::HandleCycleError;\n-use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n-use rustc_session::cstore::{CrateDepKind, CrateSource};\n-use rustc_session::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n-use rustc_session::lint::LintExpectationId;\n-use rustc_session::Limits;\n-use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::abi;\n-use rustc_target::spec::PanicStrategy;\n-use std::mem;\n use std::ops::Deref;\n-use std::path::PathBuf;\n-use std::sync::Arc;\n \n pub struct QueryKeyStringCache {\n     pub def_id_cache: FxHashMap<DefId, StringId>,\n@@ -214,7 +149,7 @@ impl<'tcx> TyCtxt<'tcx> {\n }\n \n #[inline]\n-fn query_get_at<'tcx, Cache>(\n+pub fn query_get_at<'tcx, Cache>(\n     tcx: TyCtxt<'tcx>,\n     execute_query: fn(TyCtxt<'tcx>, Span, Cache::Key, QueryMode) -> Option<Cache::Value>,\n     query_cache: &Cache,\n@@ -232,7 +167,7 @@ where\n }\n \n #[inline]\n-fn query_ensure<'tcx, Cache>(\n+pub fn query_ensure<'tcx, Cache>(\n     tcx: TyCtxt<'tcx>,\n     execute_query: fn(TyCtxt<'tcx>, Span, Cache::Key, QueryMode) -> Option<Cache::Value>,\n     query_cache: &Cache,\n@@ -639,9 +574,6 @@ macro_rules! define_feedable {\n // Queries marked with `fatal_cycle` do not need the latter implementation,\n // as they will raise an fatal error on query cycles instead.\n \n-rustc_query_append! { define_callbacks! }\n-rustc_feedable_queries! { define_feedable! }\n-\n mod sealed {\n     use super::{DefId, LocalDefId, OwnerId};\n "}, {"sha": "c32ba3edd5c676393c11bd5368451970af650d04", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,6 +2,7 @@\n \n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n+use crate::query::Providers;\n use crate::ty::layout::IntegerExt;\n use crate::ty::{\n     self, FallibleTypeFolder, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n@@ -1484,8 +1485,8 @@ pub fn is_intrinsic(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     matches!(tcx.fn_sig(def_id).skip_binder().abi(), Abi::RustIntrinsic | Abi::PlatformIntrinsic)\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         reveal_opaque_types_in_bounds,\n         is_doc_hidden,\n         is_doc_notable_trait,"}, {"sha": "43ee0343f5aa65e5be4a457eae9f788574971658", "filename": "compiler/rustc_middle/src/util/bug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -48,6 +48,6 @@ pub fn trigger_delay_span_bug(tcx: TyCtxt<'_>, key: rustc_hir::def_id::DefId) {\n     );\n }\n \n-pub fn provide(providers: &mut crate::ty::query::Providers) {\n-    *providers = crate::ty::query::Providers { trigger_delay_span_bug, ..*providers };\n+pub fn provide(providers: &mut crate::query::Providers) {\n+    *providers = crate::query::Providers { trigger_delay_span_bug, ..*providers };\n }"}, {"sha": "b74422708ce5cbf9478317897d4e53a05a747097", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -154,6 +154,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n                 Ok(Rvalue::BinaryOp(BinOp::Offset, Box::new((ptr, offset))))\n             },\n             @call(\"mir_len\", args) => Ok(Rvalue::Len(self.parse_place(args[0])?)),\n+            @call(\"mir_copy_for_deref\", args) => Ok(Rvalue::CopyForDeref(self.parse_place(args[0])?)),\n             ExprKind::Borrow { borrow_kind, arg } => Ok(\n                 Rvalue::Ref(self.tcx.lifetimes.re_erased, *borrow_kind, self.parse_place(*arg)?)\n             ),"}, {"sha": "c964e62c9d0e7bd271ebff8c2c35c3bef1c916d5", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -22,7 +22,7 @@ mod errors;\n mod lints;\n pub mod thir;\n \n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n \n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;"}, {"sha": "069514d8a3bf310a9c3120911bdc9099c1290738", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::intravisit;\n use rustc_hir::{BlockCheckMode, ExprKind, Node};\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;"}, {"sha": "74b4b4a07c55010e9419834d9b220e23efb52463", "filename": "compiler/rustc_mir_transform/src/coverage/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::{self, Body, Coverage, CoverageInfo};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::def_id::DefId;\n "}, {"sha": "58cc161ddcc490a4d82d562cb41f59d151239f87", "filename": "compiler/rustc_mir_transform/src/ffi_unwind_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,8 +1,8 @@\n use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_middle::mir::*;\n use rustc_middle::query::LocalCrate;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::layout;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::FFI_UNWIND_CALLS;\n use rustc_target::spec::abi::Abi;"}, {"sha": "65864dc016f4f38ca8a982f6b9d9e15fc0a519b4", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -34,7 +34,7 @@ use rustc_middle::mir::{\n     MirPhase, Operand, Place, ProjectionElem, Promoted, RuntimePhase, Rvalue, SourceInfo,\n     Statement, StatementKind, TerminatorKind, START_BLOCK,\n };\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::sym;\n use rustc_trait_selection::traits;"}, {"sha": "7c47d8814db838313d864d41e67afa4a07302f05", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,7 +2,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, EarlyBinder, GeneratorSubsts, Ty, TyCtxt};\n use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};"}, {"sha": "1c18e6b0b02d43ac586896faecec52d980a3415a", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -12,9 +12,10 @@ extern crate rustc_middle;\n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n use rustc_hir::lang_items::LangItem;\n+use rustc_middle::query::Providers;\n use rustc_middle::traits;\n use rustc_middle::ty::adjustment::CustomCoerceUnsized;\n-use rustc_middle::ty::query::{Providers, TyCtxtAt};\n+use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::{self, Ty};\n \n mod collector;"}, {"sha": "c10180ee3f489c9040acdf79a0aa86ba9b00704e", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -106,8 +106,8 @@ use rustc_hir::def_id::{DefIdSet, LOCAL_CRATE};\n use rustc_middle::mir;\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{CodegenUnit, Linkage};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{DumpMonoStatsFormat, SwitchWithOptPath};\n use rustc_span::symbol::Symbol;"}, {"sha": "88a3e028527a38e3555ac552dd063c56ec9e1fbe", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -11,9 +11,9 @@ use rustc_middle::mir::{\n     visit::{TyContext, Visitor},\n     Constant, ConstantKind, Local, LocalDecl, Location,\n };\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{\n     self,\n-    query::Providers,\n     subst::SubstsRef,\n     visit::{TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor},\n     Const, Ty, TyCtxt, UnusedGenericParams,"}, {"sha": "455d7b89f9ca125db6cddb20f3bc0bd6ddcd381e", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -19,9 +19,9 @@ use rustc_hir::{\n use rustc_hir::{MethodKind, Target, Unsafety};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_bound_vars::ObjectLifetimeDefault;\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{\n     CONFLICTING_REPR_HINTS, INVALID_DOC_ATTRIBUTES, INVALID_MACRO_EXPORT_ARGUMENTS,"}, {"sha": "2357b0aadefbbf669d277c9aed6d6220da2dbc97", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -12,7 +12,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n use rustc_span::{sym, Span, Symbol};"}, {"sha": "7812dcde44c831793142709f4a6fabd6bfdb077d", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Node, PatKind, TyKind};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::privacy::Level;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "8ea95b3f383cd6f3082786ae06b737c06bb1cd33", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -6,8 +6,8 @@ use rustc_data_structures::sync::Lrc;\n use rustc_expand::base::resolve_path;\n use rustc_hir as hir;\n use rustc_hir::HirId;\n+use rustc_middle::query::{LocalCrate, Providers};\n use rustc_middle::ty::TyCtxt;\n-use rustc_middle::{query::LocalCrate, ty::query::Providers};\n use rustc_span::{sym, DebuggerVisualizerFile, DebuggerVisualizerType};\n \n use crate::errors::DebugVisualizerUnreadable;"}, {"sha": "d8b9f4fae87fed0dd915ec8d8cd3696b51b4578e", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -13,7 +13,7 @@ use rustc_ast as ast;\n use rustc_hir::diagnostic_items::DiagnosticItems;\n use rustc_hir::OwnerId;\n use rustc_middle::query::LocalCrate;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "ffd8f77b78b8f86282cb35b41254be0f31e17d0f", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::error_code;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::{ItemId, Node, CRATE_HIR_ID};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{sigpipe, CrateType, EntryFnType};\n use rustc_session::parse::feature_err;"}, {"sha": "476394f30ccfdf98a976e19e338d0847ab5f2032", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::cstore::ExternCrate;\n use rustc_span::{symbol::kw::Empty, Span};\n \n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n \n pub(crate) enum Duplicate {\n     Plain,"}, {"sha": "0da4b29464862e5127af6342b566512e6ec20766", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -22,7 +22,7 @@ extern crate tracing;\n \n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n \n mod check_attr;\n mod check_const;"}, {"sha": "44174b1b89d110387347f35f124a1cd418c0e41c", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -9,7 +9,7 @@ use rustc_attr::{rust_version_symbol, VERSION_PLACEHOLDER};\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::lib_features::LibFeatures;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};"}, {"sha": "63b1578d43fd726ef3ad41c4c1f8a540ea7a1a16", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -94,7 +94,7 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet};\n use rustc_index::IndexVec;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, RootVariableMinCaptureList, Ty, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{kw, sym, Symbol};"}, {"sha": "73cfe68e7f214f24208f54f01a5b17233a531ce1", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Destination, Movability, Node};\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::hygiene::DesugaringKind;"}, {"sha": "a849d61edfeaa1c6699891462bbd4352cae9d5f8", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{ExprKind, InlineAsmOperand, StmtKind};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::UNDEFINED_NAKED_FUNCTION_ABI;\n use rustc_span::symbol::sym;"}, {"sha": "160528e4074d4c8e76240ccb1bb8e96bceaefce8", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Node;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::middle::privacy::{self, Level};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::config::CrateType;\n use rustc_target::spec::abi::Abi;"}, {"sha": "f9060328f48c2acbf39620b4b269ffc7528bdcc0", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -16,7 +16,8 @@ use rustc_hir::{FieldDef, Item, ItemKind, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::EffectiveVisibilities;\n use rustc_middle::middle::stability::{AllowUnstable, DeprecationEntry, Index};\n-use rustc_middle::ty::{query::Providers, TyCtxt};\n+use rustc_middle::query::Providers;\n+use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n use rustc_session::lint::builtin::{INEFFECTIVE_UNSTABLE_TRAIT_IMPL, USELESS_DEPRECATED};\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "d87df706cc84e5f09d6ea89a1be5d4d7af3ac06b", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -5,7 +5,7 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{self, HirId};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n "}, {"sha": "7b39cb0a06891c4cc353264985d668bed5615b64", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -26,8 +26,8 @@ use rustc_hir::{AssocItemKind, HirIdSet, ItemId, Node, PatKind};\n use rustc_middle::bug;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::{EffectiveVisibilities, EffectiveVisibility, Level};\n+use rustc_middle::query::Providers;\n use rustc_middle::span_bug;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Const, GenericParamDefKind};\n use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};"}, {"sha": "5ca102a09460aec8f91d39dccda9c3faba57dc5b", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -25,11 +25,11 @@ use rustc_middle::dep_graph::{self, DepKind, DepKindStruct};\n use rustc_middle::query::erase::{erase, restore, Erase};\n use rustc_middle::query::on_disk_cache::OnDiskCache;\n use rustc_middle::query::AsLocalKey;\n-use rustc_middle::ty::query::{\n+use rustc_middle::query::{\n     query_keys, query_provided, query_provided_to_value, query_storage, query_values,\n-    DynamicQueries, DynamicQuery, ExternProviders, Providers, QueryCaches, QueryEngine,\n-    QueryStates, QuerySystem, QuerySystemFns,\n+    DynamicQueries, ExternProviders, Providers, QueryCaches, QueryEngine, QueryStates,\n };\n+use rustc_middle::ty::query::{DynamicQuery, QuerySystem, QuerySystemFns};\n use rustc_middle::ty::TyCtxt;\n use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n use rustc_query_system::ich::StableHashingContext;"}, {"sha": "323b78fcd98aea97a6f72910bb3c65ca9be4ac74", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -47,6 +47,7 @@ use rustc_index::IndexVec;\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::privacy::EffectiveVisibilities;\n+use rustc_middle::query::Providers;\n use rustc_middle::span_bug;\n use rustc_middle::ty::{self, MainDefinition, RegisteredTools, TyCtxt};\n use rustc_middle::ty::{ResolverGlobalCtxt, ResolverOutputs};\n@@ -2026,6 +2027,6 @@ impl Finalize {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     providers.registered_tools = macros::registered_tools;\n }"}, {"sha": "692542da78ea22cf2f2df392f49d41e0885661d2", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -107,7 +107,7 @@ use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt};\n use rustc_session::config::SymbolManglingVersion;"}, {"sha": "223cdc48f0b323b229dd8c160720ca56703480f6", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -26,6 +26,7 @@ use crate::infer::{InferCtxt, TyCtxtInferExt};\n use crate::traits::error_reporting::TypeErrCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use rustc_errors::ErrorGuaranteed;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::{TypeVisitable, TypeVisitableExt};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeSuperVisitable};\n@@ -498,10 +499,10 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n     false\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     object_safety::provide(providers);\n     vtable::provide(providers);\n-    *providers = ty::query::Providers {\n+    *providers = Providers {\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,\n         subst_and_check_impossible_predicates,"}, {"sha": "c81bf6ebc2eaacf2055b2219047731f342558f66", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -16,6 +16,7 @@ use crate::traits::{self, Obligation, ObligationCause};\n use rustc_errors::{DelayDm, FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{\n     self, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n@@ -947,7 +948,6 @@ pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers =\n-        ty::query::Providers { object_safety_violations, check_is_object_safe, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { object_safety_violations, check_is_object_safe, ..*providers };\n }"}, {"sha": "cc674ceee3d5d678a6ae5c04e44dcf7f5aa7be72", "filename": "compiler/rustc_trait_selection/src/traits/vtable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -4,6 +4,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::traits::util::PredicateSet;\n use rustc_infer::traits::ImplSource;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, VtblEntry};\n@@ -379,8 +380,8 @@ pub(crate) fn count_own_vtable_entries<'tcx>(\n     tcx.own_existential_vtable_entries(trait_ref.def_id()).len()\n }\n \n-pub(super) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub(super) fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         own_existential_vtable_entries,\n         vtable_entries,\n         vtable_trait_upcasting_coercion_new_vptr_slot,"}, {"sha": "8834449c9a458b7859c545f191f54c5d815ab70e", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -7,8 +7,8 @@ pub(crate) mod db;\n pub(crate) mod lowering;\n \n use rustc_middle::infer::canonical::{CanonicalTyVarKind, CanonicalVarKind};\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::ChalkRustInterner;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitable};\n \n use rustc_infer::infer::canonical::{"}, {"sha": "83f6c7d07fe787e120c13f95a3499b14f653e1bd", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, EarlyBinder, ParamEnvAnd, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};"}, {"sha": "149dffc7e31152de7d24bf8cd20f1a1486c78997", "filename": "compiler/rustc_traits/src/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,5 +1,5 @@\n use rustc_infer::infer::{DefiningAnchor, TyCtxtInferExt};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n use rustc_span::source_map::DUMMY_SP;\n use rustc_trait_selection::traits::query::CanonicalPredicateGoal;"}, {"sha": "0c2bb863e1fe0d9af5a952575238e816a0570c8d", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -6,7 +6,7 @@ use rustc_infer::infer::canonical::{self, Canonical};\n use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::query::OutlivesBound;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::DUMMY_SP;"}, {"sha": "b0f9c57154f1b508bd409a6c3ff2d913af343e0c", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -23,7 +23,7 @@ mod type_op;\n \n pub use type_op::{type_op_ascribe_user_type_with_span, type_op_prove_predicate_with_cause};\n \n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n \n pub fn provide(p: &mut Providers) {\n     dropck_outlives::provide(p);"}, {"sha": "94c33efaeff7adfadb170054c7d35ca9556f768f", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,6 +1,6 @@\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::query::NoSolution;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt, TypeFoldable, TypeVisitableExt};\n use rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};"}, {"sha": "b552ba41acd3d3ad9c72c79853c863aa3e752be2", "filename": "compiler/rustc_traits/src/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_projection_ty.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,6 +1,6 @@\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n use rustc_trait_selection::traits::query::{"}, {"sha": "70dc7ccec631b3ef791933064f908a8182aff00d", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,7 +2,7 @@ use rustc_hir as hir;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::{DefiningAnchor, TyCtxtInferExt};\n use rustc_infer::traits::ObligationCauseCode;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, FnSig, Lift, PolyFnSig, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{ParamEnvAnd, Predicate};\n use rustc_middle::ty::{UserSelfTy, UserSubsts, UserType};"}, {"sha": "442d041a8a78fd9d5cf6be8f702aedaf109af0f7", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,5 +1,6 @@\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::layout::{\n     fn_can_unwind, FnAbiError, HasParamEnv, HasTyCtxt, LayoutCx, LayoutOf, TyAndLayout,\n };\n@@ -14,8 +15,8 @@ use rustc_target::spec::abi::Abi as SpecAbi;\n \n use std::iter;\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { fn_abi_of_fn_ptr, fn_abi_of_instance, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { fn_abi_of_fn_ptr, fn_abi_of_instance, ..*providers };\n }\n \n // NOTE(eddyb) this is private to avoid using it from outside of"}, {"sha": "ed574f22e61d0890da458bfb07e7dd6b18f1529a", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -4,11 +4,12 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, Visitor};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, ImplTraitInTraitData, InternalSubsts, TyCtxt};\n use rustc_span::symbol::kw;\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         associated_item,\n         associated_item_def_ids,\n         associated_items,"}, {"sha": "51b908881eb49c975abaa5e53c2c9dd352fb99a2", "filename": "compiler/rustc_ty_utils/src/common_traits.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,6 +2,7 @@\n \n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_trait_selection::traits;\n \n@@ -32,12 +33,6 @@ fn is_item_raw<'tcx>(\n     traits::type_known_to_meet_bound_modulo_regions(&infcx, param_env, ty, trait_def_id)\n }\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n-        is_copy_raw,\n-        is_sized_raw,\n-        is_freeze_raw,\n-        is_unpin_raw,\n-        ..*providers\n-    };\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers { is_copy_raw, is_sized_raw, is_freeze_raw, is_unpin_raw, ..*providers };\n }"}, {"sha": "1219bb4009886504544f602819553ad0eec71250", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,6 +2,7 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n+use rustc_middle::query::Providers;\n use rustc_middle::thir::visit;\n use rustc_middle::thir::visit::Visitor;\n use rustc_middle::ty::abstract_const::CastKind;\n@@ -421,6 +422,6 @@ pub fn thir_abstract_const(\n     Ok(Some(ty::EarlyBinder(recurse_build(tcx, body, body_id, root_span)?)))\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { destructure_const, thir_abstract_const, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { destructure_const, thir_abstract_const, ..*providers };\n }"}, {"sha": "081be065864c86ba260042f320c31dcdf142b43a", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,8 +1,9 @@\n use rustc_hir::{def::DefKind, def_id::DefId};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { assumed_wf_types, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { assumed_wf_types, ..*providers };\n }\n \n fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {"}, {"sha": "36a20c78fcc7b2ba57f43f05a87eb408ca453e24", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,6 +1,7 @@\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt, TypeVisitableExt};\n@@ -319,6 +320,6 @@ fn resolve_associated_item<'tcx>(\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { resolve_instance, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { resolve_instance, ..*providers };\n }"}, {"sha": "16cd8bc8e698f43798a119f9f91d2b572c66650d", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -3,6 +3,7 @@ use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::mir::{GeneratorLayout, GeneratorSavedLocal};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::layout::{\n     IntegerExt, LayoutCx, LayoutError, LayoutOf, TyAndLayout, MAX_SIMD_LANES,\n };\n@@ -22,8 +23,8 @@ use crate::errors::{\n };\n use crate::layout_sanity_check::sanity_check_layout;\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { layout_of, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { layout_of, ..*providers };\n }\n \n #[instrument(skip(tcx, query), level = \"debug\")]"}, {"sha": "55b8857ed391f9a3582fa2d79e7fc41324a25490", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -21,7 +21,7 @@ extern crate tracing;\n \n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n \n mod abi;\n mod assoc;"}, {"sha": "1f9701b93226d8e596659280a1436b32881b2ea8", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,6 +2,7 @@\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::{needs_drop_components, AlwaysRequiresDrop};\n use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n@@ -323,8 +324,8 @@ fn adt_significant_drop_tys(\n     .map(|components| tcx.mk_type_list(&components))\n }\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         needs_drop_raw,\n         has_significant_drop_raw,\n         adt_drop_tys,"}, {"sha": "4e91dd380e86572052df6bb093397ec674271b9c", "filename": "compiler/rustc_ty_utils/src/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,6 +1,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::{def::DefKind, def_id::LocalDefId};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::util::{CheckRegions, NotUniqueParam};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n@@ -192,6 +193,6 @@ fn opaque_types_defined_by<'tcx>(tcx: TyCtxt<'tcx>, item: LocalDefId) -> &'tcx [\n     }\n }\n \n-pub(super) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { opaque_types_defined_by, ..*providers };\n+pub(super) fn provide(providers: &mut Providers) {\n+    *providers = Providers { opaque_types_defined_by, ..*providers };\n }"}, {"sha": "0b5e27c2c743f3f2ce8d9cde87f708edbb65df8c", "filename": "compiler/rustc_ty_utils/src/representability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Representability, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefId;\n "}, {"sha": "215acbe2c8f85364e2e4e6a8e70f2924712f374a", "filename": "compiler/rustc_ty_utils/src/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir::lang_items::LangItem;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n use rustc_infer::infer::TyCtxtInferExt;"}, {"sha": "65dc3c39c6ae6ed96b84c24606b3f939ed31e968", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,6 +2,7 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{\n     self, Binder, EarlyBinder, ImplTraitInTraitData, Predicate, PredicateKind, ToPredicate, Ty,\n     TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n@@ -566,8 +567,8 @@ fn unsizing_params_for_adt<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> BitSet<u32\n     unsizing_params\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         asyncness,\n         adt_sized_constraint,\n         param_env,"}, {"sha": "d1cdb12e50f8cfeba0e28799b02a0531fdb4ebfb", "filename": "library/core/benches/fmt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fbenches%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fbenches%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Ffmt.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,13 +1,13 @@\n use std::fmt::{self, Write as FmtWrite};\n use std::io::{self, Write as IoWrite};\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n #[bench]\n fn write_vec_value(bh: &mut Bencher) {\n     bh.iter(|| {\n         let mut mem = Vec::new();\n         for _ in 0..1000 {\n-            mem.write_all(\"abc\".as_bytes()).unwrap();\n+            mem.write_all(black_box(\"abc\").as_bytes()).unwrap();\n         }\n     });\n }\n@@ -18,7 +18,7 @@ fn write_vec_ref(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            wr.write_all(\"abc\".as_bytes()).unwrap();\n+            wr.write_all(black_box(\"abc\").as_bytes()).unwrap();\n         }\n     });\n }\n@@ -29,7 +29,7 @@ fn write_vec_macro1(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"abc\").unwrap();\n+            write!(wr, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -40,7 +40,7 @@ fn write_vec_macro2(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{}\", \"abc\").unwrap();\n+            write!(wr, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -51,7 +51,7 @@ fn write_vec_macro_debug(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{:?}\", \"\u2603\").unwrap();\n+            write!(wr, \"{:?}\", black_box(\"\u2603\")).unwrap();\n         }\n     });\n }\n@@ -61,7 +61,7 @@ fn write_str_value(bh: &mut Bencher) {\n     bh.iter(|| {\n         let mut mem = String::new();\n         for _ in 0..1000 {\n-            mem.write_str(\"abc\").unwrap();\n+            mem.write_str(black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -72,7 +72,7 @@ fn write_str_ref(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            wr.write_str(\"abc\").unwrap();\n+            wr.write_str(black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -82,7 +82,7 @@ fn write_str_macro1(bh: &mut Bencher) {\n     bh.iter(|| {\n         let mut mem = String::new();\n         for _ in 0..1000 {\n-            write!(mem, \"abc\").unwrap();\n+            write!(mem, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -93,7 +93,7 @@ fn write_str_macro2(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{}\", \"abc\").unwrap();\n+            write!(wr, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -104,7 +104,7 @@ fn write_str_macro_debug(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{:?}\", \"\u2603\").unwrap();\n+            write!(wr, \"{:?}\", black_box(\"\u2603\")).unwrap();\n         }\n     });\n }\n@@ -115,7 +115,7 @@ fn write_str_macro_debug_ascii(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{:?}\", \"Hello, World!\").unwrap();\n+            write!(wr, \"{:?}\", black_box(\"Hello, World!\")).unwrap();\n         }\n     });\n }"}, {"sha": "fb4a786b27e3d969cc7cb8fe9cf6d32629ed18c6", "filename": "library/core/benches/num/dec2flt/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -1,57 +1,57 @@\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n #[bench]\n fn bench_0(b: &mut Bencher) {\n-    b.iter(|| \"0.0\".parse::<f64>());\n+    b.iter(|| black_box(\"0.0\").parse::<f64>());\n }\n \n #[bench]\n fn bench_42(b: &mut Bencher) {\n-    b.iter(|| \"42\".parse::<f64>());\n+    b.iter(|| black_box(\"42\").parse::<f64>());\n }\n \n #[bench]\n fn bench_huge_int(b: &mut Bencher) {\n     // 2^128 - 1\n-    b.iter(|| \"170141183460469231731687303715884105727\".parse::<f64>());\n+    b.iter(|| black_box(\"170141183460469231731687303715884105727\").parse::<f64>());\n }\n \n #[bench]\n fn bench_short_decimal(b: &mut Bencher) {\n-    b.iter(|| \"1234.5678\".parse::<f64>());\n+    b.iter(|| black_box(\"1234.5678\").parse::<f64>());\n }\n \n #[bench]\n fn bench_pi_long(b: &mut Bencher) {\n-    b.iter(|| \"3.14159265358979323846264338327950288\".parse::<f64>());\n+    b.iter(|| black_box(\"3.14159265358979323846264338327950288\").parse::<f64>());\n }\n \n #[bench]\n fn bench_pi_short(b: &mut Bencher) {\n-    b.iter(|| \"3.141592653589793\".parse::<f64>())\n+    b.iter(|| black_box(\"3.141592653589793\").parse::<f64>())\n }\n \n #[bench]\n fn bench_1e150(b: &mut Bencher) {\n-    b.iter(|| \"1e150\".parse::<f64>());\n+    b.iter(|| black_box(\"1e150\").parse::<f64>());\n }\n \n #[bench]\n fn bench_long_decimal_and_exp(b: &mut Bencher) {\n-    b.iter(|| \"727501488517303786137132964064381141071e-123\".parse::<f64>());\n+    b.iter(|| black_box(\"727501488517303786137132964064381141071e-123\").parse::<f64>());\n }\n \n #[bench]\n fn bench_min_subnormal(b: &mut Bencher) {\n-    b.iter(|| \"5e-324\".parse::<f64>());\n+    b.iter(|| black_box(\"5e-324\").parse::<f64>());\n }\n \n #[bench]\n fn bench_min_normal(b: &mut Bencher) {\n-    b.iter(|| \"2.2250738585072014e-308\".parse::<f64>());\n+    b.iter(|| black_box(\"2.2250738585072014e-308\").parse::<f64>());\n }\n \n #[bench]\n fn bench_max(b: &mut Bencher) {\n-    b.iter(|| \"1.7976931348623157e308\".parse::<f64>());\n+    b.iter(|| black_box(\"1.7976931348623157e308\").parse::<f64>());\n }"}, {"sha": "1a330ef5fe546fe7c14efbcde03bb6a847d05fb1", "filename": "library/core/benches/num/flt2dec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -7,7 +7,7 @@ use core::num::flt2dec::MAX_SIG_DIGITS;\n use core::num::flt2dec::{decode, DecodableFloat, Decoded, FullDecoded};\n use std::io::Write;\n use std::vec::Vec;\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n     match decode(v).1 {\n@@ -22,7 +22,7 @@ fn bench_small_shortest(b: &mut Bencher) {\n \n     b.iter(|| {\n         buf.clear();\n-        write!(&mut buf, \"{}\", 3.1415926f64).unwrap()\n+        write!(black_box(&mut buf), \"{}\", black_box(3.1415926f64)).unwrap()\n     });\n }\n \n@@ -32,6 +32,6 @@ fn bench_big_shortest(b: &mut Bencher) {\n \n     b.iter(|| {\n         buf.clear();\n-        write!(&mut buf, \"{}\", f64::MAX).unwrap()\n+        write!(black_box(&mut buf), \"{}\", black_box(f64::MAX)).unwrap()\n     });\n }"}, {"sha": "b97014d9bf9f2fd312ffec0d02edfcbfcdd91c78", "filename": "library/core/benches/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -3,7 +3,7 @@ mod flt2dec;\n mod int_log;\n \n use std::str::FromStr;\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n const ASCII_NUMBERS: [&str; 19] = [\n     \"0\",\n@@ -36,7 +36,7 @@ macro_rules! from_str_bench {\n                     .iter()\n                     .cycle()\n                     .take(5_000)\n-                    .filter_map(|s| <$t>::from_str(s).ok())\n+                    .filter_map(|s| <$t>::from_str(black_box(s)).ok())\n                     .max()\n             })\n         }\n@@ -52,7 +52,7 @@ macro_rules! from_str_radix_bench {\n                     .iter()\n                     .cycle()\n                     .take(5_000)\n-                    .filter_map(|s| <$t>::from_str_radix(s, $radix).ok())\n+                    .filter_map(|s| <$t>::from_str_radix(black_box(s), $radix).ok())\n                     .max()\n             })\n         }"}, {"sha": "2c3c14853a44beb7bbf774d475557af0754ddfe6", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2100,6 +2100,8 @@ impl<T: ?Sized> UnsafeCell<T> {\n     ///\n     /// let m = MaybeUninit::<UnsafeCell<i32>>::uninit();\n     /// unsafe { UnsafeCell::raw_get(m.as_ptr()).write(5); }\n+    /// // avoid below which references to uninitialized data\n+    /// // unsafe { UnsafeCell::get(&*m.as_ptr()).write(5); }\n     /// let uc = unsafe { m.assume_init() };\n     ///\n     /// assert_eq!(uc.into_inner(), 5);"}, {"sha": "5944a0de1a4b2aa928a34cdcd51625ddf601a7fe", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -228,7 +228,7 @@\n //!\n //!  - Operands implicitly convert to `Use` rvalues.\n //!  - `&`, `&mut`, `addr_of!`, and `addr_of_mut!` all work to create their associated rvalue.\n-//!  - [`Discriminant`] and [`Len`] have associated functions.\n+//!  - [`Discriminant`], [`Len`], and [`CopyForDeref`] have associated functions.\n //!  - Unary and binary operations use their normal Rust syntax - `a * b`, `!c`, etc.\n //!  - The binary operation `Offset` can be created via [`Offset`].\n //!  - Checked binary operations are represented by wrapping the associated binop in [`Checked`].\n@@ -279,6 +279,7 @@ define!(\"mir_storage_dead\", fn StorageDead<T>(local: T));\n define!(\"mir_deinit\", fn Deinit<T>(place: T));\n define!(\"mir_checked\", fn Checked<T>(binop: T) -> (T, bool));\n define!(\"mir_len\", fn Len<T>(place: T) -> usize);\n+define!(\"mir_copy_for_deref\", fn CopyForDeref<T>(place: T) -> T);\n define!(\"mir_retag\", fn Retag<T>(place: T));\n define!(\"mir_move\", fn Move<T>(place: T) -> T);\n define!(\"mir_static\", fn Static<T>(s: T) -> &'static T);"}, {"sha": "5576adde84b037450f41fc1912128301e43143a3", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -134,7 +134,7 @@ impl<'a> PanicInfo<'a> {\n     /// whose ABI does not support unwinding.\n     ///\n     /// It is safe for a panic handler to unwind even when this function returns\n-    /// true, however this will simply cause the panic handler to be called\n+    /// false, however this will simply cause the panic handler to be called\n     /// again.\n     #[must_use]\n     #[unstable(feature = \"panic_can_unwind\", issue = \"92988\")]"}, {"sha": "1b86d898cc7a32ea1f904c8900e0565033929cc4", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -18,8 +18,8 @@ use crate::fmt;\n /// target platform. It is instantiated with the [`thread_local!`] macro and the\n /// primary method is the [`with`] method.\n ///\n-/// The [`with`] method yields a reference to the contained value which cannot be\n-/// sent across threads or escape the given closure.\n+/// The [`with`] method yields a reference to the contained value which cannot\n+/// outlive the current thread or escape the given closure.\n ///\n /// [`thread_local!`]: crate::thread_local\n ///"}, {"sha": "9420c4fec5fa4b57817075480119b2f34a72a162", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -58,6 +58,7 @@ dependencies = [\n  \"once_cell\",\n  \"opener\",\n  \"pretty_assertions\",\n+ \"semver\",\n  \"serde\",\n  \"serde_derive\",\n  \"serde_json\",\n@@ -645,6 +646,12 @@ version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n \n+[[package]]\n+name = \"semver\"\n+version = \"1.0.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"\n+\n [[package]]\n name = \"serde\"\n version = \"1.0.137\""}, {"sha": "746c8dcfce0cd15d509000b67a9c96e20a318e12", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -57,6 +57,7 @@ walkdir = \"2\"\n sysinfo = { version = \"0.26.0\", optional = true }\n clap = { version = \"4.2.4\", default-features = false, features = [\"std\", \"usage\", \"help\", \"derive\", \"error-context\"] }\n clap_complete = \"4.2.2\"\n+semver = \"1.0.17\"\n \n # Solaris doesn't support flock() and thus fd-lock is not option now\n [target.'cfg(not(target_os = \"solaris\"))'.dependencies]"}, {"sha": "710c8b52194b49fc0954455d0a8c279201991f5d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -24,6 +24,7 @@ pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags, Warnings};\n use crate::util::{exe, output, t};\n use once_cell::sync::OnceCell;\n+use semver::Version;\n use serde::{Deserialize, Deserializer};\n use serde_derive::Deserialize;\n \n@@ -1019,6 +1020,7 @@ impl Config {\n             config.download_beta_toolchain();\n             config.out.join(config.build.triple).join(\"stage0/bin/rustc\")\n         });\n+\n         config.initial_cargo = build\n             .cargo\n             .map(|cargo| {\n@@ -1680,6 +1682,42 @@ impl Config {\n         self.rust_codegen_backends.get(0).cloned()\n     }\n \n+    pub fn check_build_rustc_version(&self) {\n+        if self.dry_run() {\n+            return;\n+        }\n+\n+        // check rustc version is same or lower with 1 apart from the building one\n+        let mut cmd = Command::new(&self.initial_rustc);\n+        cmd.arg(\"--version\");\n+        let rustc_output = output(&mut cmd)\n+            .lines()\n+            .next()\n+            .unwrap()\n+            .split(' ')\n+            .nth(1)\n+            .unwrap()\n+            .split('-')\n+            .next()\n+            .unwrap()\n+            .to_owned();\n+        let rustc_version = Version::parse(&rustc_output.trim()).unwrap();\n+        let source_version =\n+            Version::parse(&fs::read_to_string(self.src.join(\"src/version\")).unwrap().trim())\n+                .unwrap();\n+        if !(source_version == rustc_version\n+            || (source_version.major == rustc_version.major\n+                && source_version.minor == rustc_version.minor + 1))\n+        {\n+            let prev_version = format!(\"{}.{}.x\", source_version.major, source_version.minor - 1);\n+            eprintln!(\n+                \"Unexpected rustc version: {}, we should use {}/{} to build source with {}\",\n+                rustc_version, prev_version, source_version, source_version\n+            );\n+            crate::detail_exit(1);\n+        }\n+    }\n+\n     /// Returns the commit to download, or `None` if we shouldn't download CI artifacts.\n     fn download_ci_rustc_commit(&self, download_rustc: Option<StringOrBool>) -> Option<String> {\n         // If `download-rustc` is not set, default to rebuilding."}, {"sha": "3756976dee062fbb9f7cfe9077c113e772112b8e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -414,6 +414,7 @@ impl Build {\n                 bootstrap_out.display()\n             )\n         }\n+        config.check_build_rustc_version();\n \n         if rust_info.is_from_tarball() && config.description.is_none() {\n             config.description = Some(\"built from a source tarball\".to_owned());"}, {"sha": "083dd4800d93e00ec5b5e503ed48b927cc788828", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -28,8 +28,8 @@ use rustc_middle::{\n     middle::exported_symbols::{\n         ExportedSymbol, SymbolExportInfo, SymbolExportKind, SymbolExportLevel,\n     },\n-    query::LocalCrate,\n-    ty::{query::ExternProviders, TyCtxt},\n+    query::{ExternProviders, LocalCrate},\n+    ty::TyCtxt,\n };\n use rustc_session::config::OptLevel;\n "}, {"sha": "595969a89793babab4793c52779cb660f9b16ff7", "filename": "tests/codegen/binary-search-index-no-bound-check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Fcodegen%2Fbinary-search-index-no-bound-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Fcodegen%2Fbinary-search-index-no-bound-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbinary-search-index-no-bound-check.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -9,7 +9,9 @@\n #[no_mangle]\n pub fn binary_search_index_no_bounds_check(s: &[u8]) -> u8 {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n     if let Ok(idx) = s.binary_search(&b'\\\\') {\n         s[idx]\n     } else {"}, {"sha": "2d7797887912e004a1aad16cd64f74fe6b40786b", "filename": "tests/codegen/issues/issue-73396-bounds-check-after-position.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Fcodegen%2Fissues%2Fissue-73396-bounds-check-after-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Fcodegen%2Fissues%2Fissue-73396-bounds-check-after-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissues%2Fissue-73396-bounds-check-after-position.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -9,7 +9,10 @@\n #[no_mangle]\n pub fn position_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().position(|b| *b == b'\\\\') {\n         &s[..idx]\n     } else {\n@@ -21,7 +24,10 @@ pub fn position_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn position_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().position(|b| *b == b'\\\\') {\n         &s[idx..]\n     } else {\n@@ -33,7 +39,10 @@ pub fn position_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn position_index_no_bounds_check(s: &[u8]) -> u8 {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().position(|b| *b == b'\\\\') {\n         s[idx]\n     } else {\n@@ -44,7 +53,10 @@ pub fn position_index_no_bounds_check(s: &[u8]) -> u8 {\n #[no_mangle]\n pub fn rposition_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().rposition(|b| *b == b'\\\\') {\n         &s[..idx]\n     } else {\n@@ -56,7 +68,10 @@ pub fn rposition_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn rposition_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().rposition(|b| *b == b'\\\\') {\n         &s[idx..]\n     } else {\n@@ -68,7 +83,10 @@ pub fn rposition_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn rposition_index_no_bounds_check(s: &[u8]) -> u8 {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().rposition(|b| *b == b'\\\\') {\n         s[idx]\n     } else {"}, {"sha": "5233d0489c63f063c6016fb58f3683cb615e4b1c", "filename": "tests/mir-opt/building/custom/projections.copy_for_deref.built.after.mir", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -0,0 +1,12 @@\n+// MIR for `copy_for_deref` after built\n+\n+fn copy_for_deref(_1: (&i32, i32)) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:38: +0:41\n+    let mut _2: &i32;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _2 = deref_copy (_1.0: &i32);    // scope 0 at $DIR/projections.rs:+4:13: +4:37\n+        _0 = (*_2);                      // scope 0 at $DIR/projections.rs:+5:13: +5:24\n+        return;                          // scope 0 at $DIR/projections.rs:+6:13: +6:21\n+    }\n+}"}, {"sha": "3c155deae4b701700186533e43d438ad30ef564c", "filename": "tests/mir-opt/building/custom/projections.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -21,13 +21,10 @@ fn unions(u: U) -> i32 {\n #[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n fn tuples(i: (u32, i32)) -> (u32, i32) {\n     mir!(\n-        // FIXME(JakobDegen): This is necessary because we can't give type hints for `RET`\n-        let temp: (u32, i32);\n+        type RET = (u32, i32);\n         {\n-            temp.0 = i.0;\n-            temp.1 = i.1;\n-\n-            RET = temp;\n+            RET.0 = i.0;\n+            RET.1 = i.1;\n             Return()\n         }\n     )\n@@ -71,6 +68,19 @@ fn simple_index(a: [i32; 10], b: &[i32]) -> i32 {\n     })\n }\n \n+// EMIT_MIR projections.copy_for_deref.built.after.mir\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+fn copy_for_deref(x: (&i32, i32)) -> i32 {\n+    mir!(\n+        let temp: &i32;\n+        {\n+            temp = CopyForDeref(x.0);\n+            RET = *temp;\n+            Return()\n+        }\n+    )\n+}\n+\n fn main() {\n     assert_eq!(unions(U { a: 5 }), 5);\n     assert_eq!(tuples((5, 6)), (5, 6));\n@@ -82,4 +92,7 @@ fn main() {\n     assert_eq!(o, Some(10));\n \n     assert_eq!(simple_index([0; 10], &[0; 10]), 0);\n+\n+    let one = 1;\n+    assert_eq!(copy_for_deref((&one, one)), 1);\n }"}, {"sha": "dec575200c64475bd16c5cc16b7d74f0a1dce0fa", "filename": "tests/mir-opt/building/custom/projections.tuples.built.after.mir", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -2,12 +2,10 @@\n \n fn tuples(_1: (u32, i32)) -> (u32, i32) {\n     let mut _0: (u32, i32);              // return place in scope 0 at $DIR/projections.rs:+0:29: +0:39\n-    let mut _2: (u32, i32);              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n-        (_2.0: u32) = (_1.0: u32);       // scope 0 at $DIR/projections.rs:+5:13: +5:25\n-        (_2.1: i32) = (_1.1: i32);       // scope 0 at $DIR/projections.rs:+6:13: +6:25\n-        _0 = _2;                         // scope 0 at $DIR/projections.rs:+8:13: +8:23\n-        return;                          // scope 0 at $DIR/projections.rs:+9:13: +9:21\n+        (_0.0: u32) = (_1.0: u32);       // scope 0 at $DIR/projections.rs:+4:13: +4:24\n+        (_0.1: i32) = (_1.1: i32);       // scope 0 at $DIR/projections.rs:+5:13: +5:24\n+        return;                          // scope 0 at $DIR/projections.rs:+6:13: +6:21\n     }\n }"}, {"sha": "12cbb5a5f1240765acf1f9eca846050bb43e75e5", "filename": "tests/run-make-fulldeps/obtain-borrowck/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2ee0fafdb0043cb302a6d2e138122fb2c52bd/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs?ref=63b2ee0fafdb0043cb302a6d2e138122fb2c52bd", "patch": "@@ -24,8 +24,8 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_interface::interface::Compiler;\n use rustc_interface::{Config, Queries};\n-use rustc_middle::ty::query::query_values::mir_borrowck;\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n+use rustc_middle::query::query_values::mir_borrowck;\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use std::cell::RefCell;"}]}