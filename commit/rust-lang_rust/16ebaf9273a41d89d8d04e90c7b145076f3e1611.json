{"sha": "16ebaf9273a41d89d8d04e90c7b145076f3e1611", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZWJhZjkyNzNhNDFkODlkOGQwNGU5MGM3YjE0NTA3NmYzZTE2MTE=", "commit": {"author": {"name": "F\u00e9lix Fischer", "email": "felix91gr@gmail.com", "date": "2020-04-23T02:43:52Z"}, "committer": {"name": "F\u00e9lix Fischer", "email": "felix91gr@gmail.com", "date": "2020-04-28T04:53:48Z"}, "message": "Polished documentation, removed not-so-useful-anymore traces, and added some doc comments in `mir/transform/const_prop.rs`", "tree": {"sha": "411c39d34aa4b6b2e4f316f4443e511e381da744", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/411c39d34aa4b6b2e4f316f4443e511e381da744"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16ebaf9273a41d89d8d04e90c7b145076f3e1611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16ebaf9273a41d89d8d04e90c7b145076f3e1611", "html_url": "https://github.com/rust-lang/rust/commit/16ebaf9273a41d89d8d04e90c7b145076f3e1611", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16ebaf9273a41d89d8d04e90c7b145076f3e1611/comments", "author": {"login": "felix91gr", "id": 11747623, "node_id": "MDQ6VXNlcjExNzQ3NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/11747623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix91gr", "html_url": "https://github.com/felix91gr", "followers_url": "https://api.github.com/users/felix91gr/followers", "following_url": "https://api.github.com/users/felix91gr/following{/other_user}", "gists_url": "https://api.github.com/users/felix91gr/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix91gr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix91gr/subscriptions", "organizations_url": "https://api.github.com/users/felix91gr/orgs", "repos_url": "https://api.github.com/users/felix91gr/repos", "events_url": "https://api.github.com/users/felix91gr/events{/privacy}", "received_events_url": "https://api.github.com/users/felix91gr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "felix91gr", "id": 11747623, "node_id": "MDQ6VXNlcjExNzQ3NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/11747623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix91gr", "html_url": "https://github.com/felix91gr", "followers_url": "https://api.github.com/users/felix91gr/followers", "following_url": "https://api.github.com/users/felix91gr/following{/other_user}", "gists_url": "https://api.github.com/users/felix91gr/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix91gr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix91gr/subscriptions", "organizations_url": "https://api.github.com/users/felix91gr/orgs", "repos_url": "https://api.github.com/users/felix91gr/repos", "events_url": "https://api.github.com/users/felix91gr/events{/privacy}", "received_events_url": "https://api.github.com/users/felix91gr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d7a60ff89cd30f2aa7613ffb925a1fb143b7e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d7a60ff89cd30f2aa7613ffb925a1fb143b7e4", "html_url": "https://github.com/rust-lang/rust/commit/05d7a60ff89cd30f2aa7613ffb925a1fb143b7e4"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "815a3db63808bf0d040ccd977850dd452cb9d9da", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/16ebaf9273a41d89d8d04e90c7b145076f3e1611/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ebaf9273a41d89d8d04e90c7b145076f3e1611/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=16ebaf9273a41d89d8d04e90c7b145076f3e1611", "patch": "@@ -446,6 +446,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n+    /// Returns the value, if any, of evaluating `c`.\n     fn eval_constant(&mut self, c: &Constant<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         // FIXME we need to revisit this for #67176\n         if c.needs_subst() {\n@@ -486,11 +487,14 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n+    /// Returns the value, if any, of evaluating `place`.\n     fn eval_place(&mut self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n         trace!(\"eval_place(place={:?})\", place);\n         self.use_ecx(|this| this.ecx.eval_place_to_op(place, None))\n     }\n \n+    /// Returns the value, if any, of evaluating `op`. Calls upon `eval_constant`\n+    /// or `eval_place`, depending on the variant of `Operand` used.\n     fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         match *op {\n             Operand::Constant(ref c) => self.eval_constant(c, source_info),\n@@ -649,6 +653,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         })\n     }\n \n+    /// Creates a new `Operand::Constant` from a `Scalar` value\n     fn operand_from_scalar(&self, scalar: Scalar, ty: Ty<'tcx>, span: Span) -> Operand<'tcx> {\n         Operand::Constant(Box::new(Constant {\n             span,\n@@ -694,6 +699,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     // Found a value represented as a pair. For now only do cont-prop if type of\n                     // Rvalue is also a pair with two scalars. The more general case is more\n                     // complicated to implement so we'll do it later.\n+                    // FIXME: implement the general case stated above ^.\n                     let ty = &value.layout.ty.kind;\n                     // Only do it for tuples\n                     if let ty::Tuple(substs) = ty {\n@@ -730,6 +736,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n+    /// Returns `true` if and only if this `op` should be const-propagated into.\n     fn should_const_prop(&mut self, op: OpTy<'tcx>) -> bool {\n         let mir_opt_level = self.tcx.sess.opts.debugging_opts.mir_opt_level;\n \n@@ -771,14 +778,14 @@ enum ConstPropMode {\n \n struct CanConstProp {\n     can_const_prop: IndexVec<Local, ConstPropMode>,\n-    // false at the beginning, once set, there are not allowed to be any more assignments\n+    // False at the beginning. Once set, no more assignments are allowed to that local.\n     found_assignment: BitSet<Local>,\n     // Cache of locals' information\n     local_kinds: IndexVec<Local, LocalKind>,\n }\n \n impl CanConstProp {\n-    /// returns true if `local` can be propagated\n+    /// Returns true if `local` can be propagated\n     fn check(body: &Body<'_>) -> IndexVec<Local, ConstPropMode> {\n         let mut cpv = CanConstProp {\n             can_const_prop: IndexVec::from_elem(ConstPropMode::FullConstProp, &body.local_decls),\n@@ -789,8 +796,8 @@ impl CanConstProp {\n             ),\n         };\n         for (local, val) in cpv.can_const_prop.iter_enumerated_mut() {\n-            // cannot use args at all\n-            // cannot use locals because if x < y { y - x } else { x - y } would\n+            // Cannot use args at all\n+            // Cannot use locals because if x < y { y - x } else { x - y } would\n             //        lint for x != y\n             // FIXME(oli-obk): lint variables until they are used in a condition\n             // FIXME(oli-obk): lint if return value is constant\n@@ -936,7 +943,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     let expected = ScalarMaybeUndef::from(Scalar::from_bool(*expected));\n                     let value_const = self.ecx.read_scalar(value).unwrap();\n                     if expected != value_const {\n-                        // poison all places this operand references so that further code\n+                        // Poison all places this operand references so that further code\n                         // doesn't use the invalid value\n                         match cond {\n                             Operand::Move(ref place) | Operand::Copy(ref place) => {\n@@ -1002,7 +1009,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     }\n                 }\n             }\n-            //none of these have Operands to const-propagate\n+            // None of these have Operands to const-propagate\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort"}]}