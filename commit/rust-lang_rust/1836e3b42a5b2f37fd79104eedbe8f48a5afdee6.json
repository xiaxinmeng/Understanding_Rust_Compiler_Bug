{"sha": "1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzZlM2I0MmE1YjJmMzdmZDc5MTA0ZWVkYmU4ZjQ4YTVhZmRlZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-06T16:59:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-06T16:59:45Z"}, "message": "Auto merge of #71951 - Dylan-DPC:rollup-j9v1p0f, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #71269 (Define UB in float-to-int casts to saturate)\n - #71591 (use new interface to create threads on HermitCore)\n - #71819 (x.py: Give a more helpful error message if curl isn't installed)\n - #71893 (Use the `impls` module to import pre-existing dataflow analyses)\n - #71929 (Use -fvisibility=hidden for libunwind)\n - #71937 (Ignore SGX on a few ui tests)\n - #71944 (Add comment for `Ord` implementation for array)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3ccc77fe3cc8fd490bb01d89e2d94815a9affec0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ccc77fe3cc8fd490bb01d89e2d94815a9affec0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "html_url": "https://github.com/rust-lang/rust/commit/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "339f574809bf8e4166b8de3cdbe7df181d37af3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/339f574809bf8e4166b8de3cdbe7df181d37af3d", "html_url": "https://github.com/rust-lang/rust/commit/339f574809bf8e4166b8de3cdbe7df181d37af3d"}, {"sha": "fbb4ccbee61dc95afcbcd05fd63053e2980edf97", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb4ccbee61dc95afcbcd05fd63053e2980edf97", "html_url": "https://github.com/rust-lang/rust/commit/fbb4ccbee61dc95afcbcd05fd63053e2980edf97"}], "stats": {"total": 718, "additions": 547, "deletions": 171}, "files": [{"sha": "e129cfcbdd76ef076cb9623b51f7e0679aacea86", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -1375,9 +1375,9 @@ dependencies = [\n \n [[package]]\n name = \"hermit-abi\"\n-version = \"0.1.10\"\n+version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"725cf19794cf90aa94e65050cb4191ff5d8fa87a498383774c47b332e3af952e\"\n+checksum = \"61565ff7aaace3525556587bd2dc31d4a07071957be715e63ce7b1eccf51a8f4\"\n dependencies = [\n  \"compiler_builtins\",\n  \"libc\","}, {"sha": "9e56dd3770d4679a3138e1a1d8944b2f18b1d6b6", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -79,6 +79,7 @@ def _download(path, url, probably_big, verbose, exception):\n             option = \"-#\"\n         else:\n             option = \"-s\"\n+        require([\"curl\", \"--version\"])\n         run([\"curl\", option,\n              \"-y\", \"30\", \"-Y\", \"10\",    # timeout if speed is < 10 bytes/sec for > 30 seconds\n              \"--connect-timeout\", \"30\",  # timeout if cannot connect within 30 seconds\n@@ -143,6 +144,21 @@ def run(args, verbose=False, exception=False, **kwargs):\n         sys.exit(err)\n \n \n+def require(cmd, exit=True):\n+    '''Run a command, returning its output.\n+    On error,\n+        If `exit` is `True`, exit the process.\n+        Otherwise, return None.'''\n+    try:\n+        return subprocess.check_output(cmd).strip()\n+    except (subprocess.CalledProcessError, OSError) as exc:\n+        if not exit:\n+            return None\n+        print(\"error: unable to run `{}`: {}\".format(' '.join(cmd), exc))\n+        print(\"Please make sure it's installed and in the path.\")\n+        sys.exit(1)\n+\n+\n def stage0_data(rust_root):\n     \"\"\"Build a dictionary from stage0.txt\"\"\"\n     nightlies = os.path.join(rust_root, \"src/stage0.txt\")\n@@ -164,16 +180,12 @@ def format_build_time(duration):\n def default_build_triple():\n     \"\"\"Build triple as in LLVM\"\"\"\n     default_encoding = sys.getdefaultencoding()\n-    try:\n-        ostype = subprocess.check_output(\n-            ['uname', '-s']).strip().decode(default_encoding)\n-        cputype = subprocess.check_output(\n-            ['uname', '-m']).strip().decode(default_encoding)\n-    except (subprocess.CalledProcessError, OSError):\n-        if sys.platform == 'win32':\n-            return 'x86_64-pc-windows-msvc'\n-        err = \"uname not found\"\n-        sys.exit(err)\n+    required = not sys.platform == 'win32'\n+    ostype = require([\"uname\", \"-s\"], exit=required).decode(default_encoding)\n+    cputype = require(['uname', '-m'], exit=required).decode(default_encoding)\n+\n+    if ostype is None or cputype is None:\n+        return 'x86_64-pc-windows-msvc'\n \n     # The goal here is to come up with the same triple as LLVM would,\n     # at least for the subset of platforms we're willing to target.\n@@ -203,12 +215,7 @@ def default_build_triple():\n         # output from that option is too generic for our purposes (it will\n         # always emit 'i386' on x86/amd64 systems).  As such, isainfo -k\n         # must be used instead.\n-        try:\n-            cputype = subprocess.check_output(\n-                ['isainfo', '-k']).strip().decode(default_encoding)\n-        except (subprocess.CalledProcessError, OSError):\n-            err = \"isainfo not found\"\n-            sys.exit(err)\n+        cputype = require(['isainfo', '-k']).decode(default_encoding)\n     elif ostype.startswith('MINGW'):\n         # msys' `uname` does not print gcc configuration, but prints msys\n         # configuration. so we cannot believe `uname -m`:\n@@ -766,13 +773,8 @@ def update_submodules(self):\n         default_encoding = sys.getdefaultencoding()\n \n         # check the existence and version of 'git' command\n-        try:\n-            git_version_output = subprocess.check_output(['git', '--version'])\n-            git_version_str = git_version_output.strip().split()[2].decode(default_encoding)\n-            self.git_version = distutils.version.LooseVersion(git_version_str)\n-        except (subprocess.CalledProcessError, OSError):\n-            print(\"error: `git` is not found, please make sure it's installed and in the path.\")\n-            sys.exit(1)\n+        git_version_str = require(['git', '--version']).split()[2].decode(default_encoding)\n+        self.git_version = distutils.version.LooseVersion(git_version_str)\n \n         slow_submodules = self.get_toml('fast-submodules') == \"false\"\n         start_time = time()"}, {"sha": "549228ffffaa4d832ae1c92d750cf7665d6513a9", "filename": "src/libcore/array/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibcore%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibcore%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fmod.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -375,6 +375,7 @@ where\n     }\n }\n \n+/// Implements comparison of arrays lexicographically.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord, const N: usize> Ord for [T; N]\n where"}, {"sha": "bb532abd84bdeece18a367deccc9eda0cbd0cea5", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -768,7 +768,7 @@ fn cast_float_to_int<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n ) -> Bx::Value {\n     let fptosui_result = if signed { bx.fptosi(x, int_ty) } else { bx.fptoui(x, int_ty) };\n \n-    if !bx.cx().sess().opts.debugging_opts.saturating_float_casts {\n+    if let Some(false) = bx.cx().sess().opts.debugging_opts.saturating_float_casts {\n         return fptosui_result;\n     }\n "}, {"sha": "1c20ea9e824772f9080c78cdef22f9bded0b8322", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -559,7 +559,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(sanitizer, Some(Sanitizer::Address));\n     tracked!(sanitizer_memory_track_origins, 2);\n     tracked!(sanitizer_recover, vec![Sanitizer::Address]);\n-    tracked!(saturating_float_casts, true);\n+    tracked!(saturating_float_casts, Some(true));\n     tracked!(share_generics, Some(true));\n     tracked!(show_span, Some(String::from(\"abc\")));\n     tracked!(src_hash_algorithm, Some(SourceFileHashAlgorithm::Sha1));"}, {"sha": "465aa5847af36cbac928d38398e0204a967a325e", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -32,13 +32,13 @@ use std::mem;\n use std::rc::Rc;\n \n use crate::dataflow;\n+use crate::dataflow::impls::{\n+    Borrows, EverInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces,\n+};\n use crate::dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};\n use crate::dataflow::move_paths::{InitLocation, LookupResult, MoveData, MoveError};\n-use crate::dataflow::Borrows;\n-use crate::dataflow::EverInitializedPlaces;\n use crate::dataflow::MoveDataParamEnv;\n use crate::dataflow::{Analysis, BorrowckFlowState as Flows, BorrowckResults};\n-use crate::dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n use crate::transform::MirSource;\n \n use self::diagnostics::{AccessKind, RegionName};"}, {"sha": "29636a067092b9778d9440039507cb9a061178d7", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -21,8 +21,8 @@ use std::str::FromStr;\n use self::mir_util::PassWhere;\n use polonius_engine::{Algorithm, Output};\n \n+use crate::dataflow::impls::MaybeInitializedPlaces;\n use crate::dataflow::move_paths::{InitKind, InitLocation, MoveData};\n-use crate::dataflow::MaybeInitializedPlaces;\n use crate::dataflow::ResultsCursor;\n use crate::transform::MirSource;\n use crate::util as mir_util;"}, {"sha": "bddcd34ed3e47e97762477b4bcc1f625acdbb5fa", "filename": "src/librustc_mir/borrow_check/type_check/liveness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fmod.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -3,8 +3,8 @@ use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n use std::rc::Rc;\n \n+use crate::dataflow::impls::MaybeInitializedPlaces;\n use crate::dataflow::move_paths::MoveData;\n-use crate::dataflow::MaybeInitializedPlaces;\n use crate::dataflow::ResultsCursor;\n \n use crate::borrow_check::{"}, {"sha": "f04736e04a0533fd25ebc57cbd3784d8578325d7", "filename": "src/librustc_mir/borrow_check/type_check/liveness/trace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -8,9 +8,9 @@ use rustc_trait_selection::traits::query::type_op::outlives::DropckOutlives;\n use rustc_trait_selection::traits::query::type_op::TypeOp;\n use std::rc::Rc;\n \n+use crate::dataflow::impls::MaybeInitializedPlaces;\n use crate::dataflow::indexes::MovePathIndex;\n use crate::dataflow::move_paths::{HasMoveData, MoveData};\n-use crate::dataflow::MaybeInitializedPlaces;\n use crate::dataflow::ResultsCursor;\n \n use crate::borrow_check::{"}, {"sha": "7533bdfbd8d6067917d4c49581307ee699d0c4e5", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -39,8 +39,8 @@ use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n use rustc_trait_selection::traits::query::{Fallible, NoSolution};\n use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligations};\n \n+use crate::dataflow::impls::MaybeInitializedPlaces;\n use crate::dataflow::move_paths::MoveData;\n-use crate::dataflow::MaybeInitializedPlaces;\n use crate::dataflow::ResultsCursor;\n use crate::transform::{\n     check_consts::ConstCx,"}, {"sha": "e199a174efbc30d6f220dc65e9e1b3c83adb64b3", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -21,14 +21,14 @@ use super::on_lookup_result_bits;\n use crate::dataflow::drop_flag_effects;\n \n mod borrowed_locals;\n+pub(super) mod borrows;\n mod liveness;\n mod storage_liveness;\n \n-pub use self::borrowed_locals::*;\n+pub use self::borrowed_locals::{MaybeBorrowedLocals, MaybeMutBorrowedLocals};\n+pub use self::borrows::Borrows;\n pub use self::liveness::MaybeLiveLocals;\n-pub use self::storage_liveness::*;\n-\n-pub(super) mod borrows;\n+pub use self::storage_liveness::{MaybeRequiresStorage, MaybeStorageLive};\n \n /// `MaybeInitializedPlaces` tracks all places that might be\n /// initialized upon reaching a particular point in the control flow"}, {"sha": "ae1328dbd12c7e268caeb70fdf5098f9195a4c7c", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -8,17 +8,12 @@ pub use self::framework::{\n     BottomValue, Engine, Forward, GenKill, GenKillAnalysis, Results, ResultsCursor,\n     ResultsRefCursor, ResultsVisitor,\n };\n-pub use self::impls::{\n-    borrows::Borrows, DefinitelyInitializedPlaces, EverInitializedPlaces, MaybeBorrowedLocals,\n-    MaybeInitializedPlaces, MaybeLiveLocals, MaybeMutBorrowedLocals, MaybeRequiresStorage,\n-    MaybeStorageLive, MaybeUninitializedPlaces,\n-};\n \n use self::move_paths::MoveData;\n \n pub mod drop_flag_effects;\n mod framework;\n-mod impls;\n+pub mod impls;\n pub mod move_paths;\n \n pub(crate) mod indexes {"}, {"sha": "1d03606f2537e403f09926703081dfac50004fc3", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -20,7 +20,7 @@ use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, ConstCx, ConstKind, Qualif};\n use crate::const_eval::{is_const_fn, is_unstable_const_fn};\n-use crate::dataflow::MaybeMutBorrowedLocals;\n+use crate::dataflow::impls::MaybeMutBorrowedLocals;\n use crate::dataflow::{self, Analysis};\n \n // We are using `MaybeMutBorrowedLocals` as a proxy for whether an item may have been mutated"}, {"sha": "e379e5ee656b755a874ba26a508f866c42f99e69", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -1,10 +1,10 @@\n use crate::dataflow;\n+use crate::dataflow::impls::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n use crate::dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n use crate::dataflow::on_lookup_result_bits;\n use crate::dataflow::MoveDataParamEnv;\n use crate::dataflow::{on_all_children_bits, on_all_drop_children_bits};\n use crate::dataflow::{Analysis, ResultsCursor};\n-use crate::dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n use crate::transform::{MirPass, MirSource};\n use crate::util::elaborate_drops::{elaborate_drop, DropFlagState, Unwind};\n use crate::util::elaborate_drops::{DropElaborator, DropFlagMode, DropStyle};"}, {"sha": "b5e691ef029dd047128ea89901f94daf31c9c5df", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -49,10 +49,10 @@\n //! For generators with state 1 (returned) and state 2 (poisoned) it does nothing.\n //! Otherwise it drops all the values in scope at the last suspension point.\n \n-use crate::dataflow::{self, Analysis};\n-use crate::dataflow::{\n+use crate::dataflow::impls::{\n     MaybeBorrowedLocals, MaybeLiveLocals, MaybeRequiresStorage, MaybeStorageLive,\n };\n+use crate::dataflow::{self, Analysis};\n use crate::transform::no_landing_pads::no_landing_pads;\n use crate::transform::simplify;\n use crate::transform::{MirPass, MirSource};"}, {"sha": "5eb374e7ee2f107b4c96d51abed5c723f498b2b5", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -9,14 +9,14 @@ use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::{self, Body, Local, Location};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n+use crate::dataflow::impls::{\n+    DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeLiveLocals, MaybeMutBorrowedLocals,\n+    MaybeUninitializedPlaces,\n+};\n use crate::dataflow::move_paths::{HasMoveData, MoveData};\n use crate::dataflow::move_paths::{LookupResult, MovePathIndex};\n-use crate::dataflow::MaybeMutBorrowedLocals;\n use crate::dataflow::MoveDataParamEnv;\n use crate::dataflow::{Analysis, Results, ResultsCursor};\n-use crate::dataflow::{\n-    DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeLiveLocals, MaybeUninitializedPlaces,\n-};\n \n pub struct SanityCheck;\n "}, {"sha": "1d314238b8651d188110d89d0ff81071e2ac9e16", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -938,9 +938,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable origins tracking in MemorySanitizer\"),\n     sanitizer_recover: Vec<Sanitizer> = (vec![], parse_sanitizer_list, [TRACKED],\n         \"enable recovery for selected sanitizers\"),\n-    saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n+    saturating_float_casts: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n-        the max/min integer respectively, and NaN is mapped to 0 (default: no)\"),\n+        the max/min integer respectively, and NaN is mapped to 0 (default: yes)\"),\n     save_analysis: bool = (false, parse_bool, [UNTRACKED],\n         \"write syntax and type analysis (in JSON format) information, in \\\n         addition to normal output (default: no)\"),"}, {"sha": "8ae5ee4c3f9712028ce303404c9281216859c273", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -909,13 +909,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             cast_suggestion,\n                             Applicability::MaybeIncorrect, // lossy conversion\n                         );\n-                        err.warn(\n-                            \"if the rounded value cannot be represented by the target \\\n-                                integer type, including `Inf` and `NaN`, casting will cause \\\n-                                undefined behavior \\\n-                                (see issue #10184 <https://github.com/rust-lang/rust/issues/10184> \\\n-                                for more information)\",\n-                        );\n                     }\n                     true\n                 }"}, {"sha": "923d5fa8cacdbebf5e6213100416df8f07f37d7d", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -41,7 +41,7 @@ dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n \n [target.'cfg(all(any(target_arch = \"x86_64\", target_arch = \"aarch64\"), target_os = \"hermit\"))'.dependencies]\n-hermit-abi = { version = \"0.1.10\", features = ['rustc-dep-of-std'] }\n+hermit-abi = { version = \"0.1.12\", features = ['rustc-dep-of-std'] }\n \n [target.wasm32-wasi.dependencies]\n wasi = { version = \"0.9.0\", features = ['rustc-dep-of-std'], default-features = false }"}, {"sha": "e11afed668728f08abe9be030ca22af6f231bab7", "filename": "src/libstd/sys/hermit/thread.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -16,25 +16,24 @@ pub struct Thread {\n unsafe impl Send for Thread {}\n unsafe impl Sync for Thread {}\n \n-pub const DEFAULT_MIN_STACK_SIZE: usize = 262144;\n+pub const DEFAULT_MIN_STACK_SIZE: usize = 1 << 20;\n \n impl Thread {\n     pub unsafe fn new_with_coreid(\n-        _stack: usize,\n+        stack: usize,\n         p: Box<dyn FnOnce()>,\n         core_id: isize,\n     ) -> io::Result<Thread> {\n         let p = Box::into_raw(box p);\n-        let mut tid: Tid = u32::MAX;\n-        let ret = abi::spawn(\n-            &mut tid as *mut Tid,\n+        let tid = abi::spawn2(\n             thread_start,\n-            &*p as *const _ as *const u8 as usize,\n+            p as usize,\n             abi::Priority::into(abi::NORMAL_PRIO),\n+            stack,\n             core_id,\n         );\n \n-        return if ret != 0 {\n+        return if tid == 0 {\n             // The thread failed to start and as a result p was not consumed. Therefore, it is\n             // safe to reconstruct the box so that it gets deallocated.\n             drop(Box::from_raw(p));"}, {"sha": "1462639259cb8df32de5afe90c59a957efe6c2d6", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -89,6 +89,7 @@ mod llvm_libunwind {\n             cfg.flag(\"-fno-rtti\");\n             cfg.flag(\"-fstrict-aliasing\");\n             cfg.flag(\"-funwind-tables\");\n+            cfg.flag(\"-fvisibility=hidden\");\n         }\n \n         let mut unwind_sources = vec!["}, {"sha": "789feea12d6d7e8a67ecfd84b406b5fb99571c37", "filename": "src/test/codegen/unchecked-float-casts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fcodegen%2Funchecked-float-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fcodegen%2Funchecked-float-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funchecked-float-casts.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -1,7 +1,7 @@\n-// compile-flags: -C no-prepopulate-passes\n+// This file tests that we don't generate any code for saturation when using the\n+// unchecked intrinsics.\n \n-// This file tests that we don't generate any code for saturation if\n-// -Z saturating-float-casts is not enabled.\n+// compile-flags: -C opt-level=3\n \n #![crate_type = \"lib\"]\n \n@@ -12,7 +12,7 @@ pub fn f32_to_u32(x: f32) -> u32 {\n     // CHECK-NOT: fcmp\n     // CHECK-NOT: icmp\n     // CHECK-NOT: select\n-    x as u32\n+    unsafe { x.to_int_unchecked() }\n }\n \n // CHECK-LABEL: @f32_to_i32\n@@ -22,7 +22,7 @@ pub fn f32_to_i32(x: f32) -> i32 {\n     // CHECK-NOT: fcmp\n     // CHECK-NOT: icmp\n     // CHECK-NOT: select\n-    x as i32\n+    unsafe { x.to_int_unchecked() }\n }\n \n #[no_mangle]\n@@ -31,5 +31,5 @@ pub fn f64_to_u16(x: f64) -> u16 {\n     // CHECK-NOT: fcmp\n     // CHECK-NOT: icmp\n     // CHECK-NOT: select\n-    x as u16\n+    unsafe { x.to_int_unchecked() }\n }"}, {"sha": "f5243077384ac7acc44bfdbd1d0adc8207ec6b7f", "filename": "src/test/ui/eprint-on-tls-drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Feprint-on-tls-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Feprint-on-tls-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feprint-on-tls-drop.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // ignore-emscripten no processes\n+// ignore-sgx no processes\n \n use std::cell::RefCell;\n use std::env;"}, {"sha": "17b16a62a74e7093ec15cc9bdf4c4b6437d67e34", "filename": "src/test/ui/issues/issue-15487.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fissues%2Fissue-15487.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fissues%2Fissue-15487.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15487.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -2,6 +2,7 @@\n #![allow(unused_attributes)]\n // ignore-windows\n // ignore-wasm32-bare no libs to link\n+// ignore-sgx no libs to link\n \n #![feature(link_args)]\n "}, {"sha": "6c62010f1762b431ce21cfff9714051e2022f552", "filename": "src/test/ui/issues/issue-17546.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fissues%2Fissue-17546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fissues%2Fissue-17546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -1,3 +1,5 @@\n+// ignore-sgx std::os::fortanix_sgx::usercalls::raw::Result changes compiler suggestions\n+\n use foo::MyEnum::Result;\n use foo::NoResult; // Through a re-export\n "}, {"sha": "1236bbcdbf6eed6a5bd531225ab4fc9d03b00eba", "filename": "src/test/ui/issues/issue-17546.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -1,5 +1,5 @@\n error[E0573]: expected type, found variant `NoResult`\n-  --> $DIR/issue-17546.rs:12:17\n+  --> $DIR/issue-17546.rs:14:17\n    |\n LL |     fn new() -> NoResult<MyEnum, String> {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL |     fn new() -> Result<MyEnum, String> {\n    |                 ^^^^^^\n \n error[E0573]: expected type, found variant `Result`\n-  --> $DIR/issue-17546.rs:22:17\n+  --> $DIR/issue-17546.rs:24:17\n    |\n LL |     fn new() -> Result<foo::MyEnum, String> {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a type\n@@ -37,7 +37,7 @@ LL |     use std::result::Result;\n      and 1 other candidate\n \n error[E0573]: expected type, found variant `Result`\n-  --> $DIR/issue-17546.rs:28:13\n+  --> $DIR/issue-17546.rs:30:13\n    |\n LL | fn new() -> Result<foo::MyEnum, String> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a type\n@@ -55,7 +55,7 @@ LL | use std::result::Result;\n      and 1 other candidate\n \n error[E0573]: expected type, found variant `NoResult`\n-  --> $DIR/issue-17546.rs:33:15\n+  --> $DIR/issue-17546.rs:35:15\n    |\n LL | fn newer() -> NoResult<foo::MyEnum, String> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d7efa4aac6516a4eac23d1b74590b02878596994", "filename": "src/test/ui/lint/use_suggestion_json.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -1,5 +1,6 @@\n // ignore-cloudabi\n // ignore-windows\n+// ignore-sgx std::os::fortanix_sgx::usercalls::alloc::Iter changes compiler suggestions\n // compile-flags: --error-format pretty-json --json=diagnostic-rendered-ansi\n \n // The output for humans should just highlight the whole span without showing"}, {"sha": "1d0b2a554f19a2cdb7472ef3e28b322c816ee8ff", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -72,10 +72,10 @@ mod foo {\n   \"spans\": [\n     {\n       \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-      \"byte_start\": 471,\n-      \"byte_end\": 475,\n-      \"line_start\": 12,\n-      \"line_end\": 12,\n+      \"byte_start\": 560,\n+      \"byte_end\": 564,\n+      \"line_start\": 13,\n+      \"line_end\": 13,\n       \"column_start\": 12,\n       \"column_end\": 16,\n       \"is_primary\": true,\n@@ -100,10 +100,10 @@ mod foo {\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -123,10 +123,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -146,10 +146,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -169,10 +169,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -192,10 +192,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -215,10 +215,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -238,10 +238,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -261,10 +261,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -284,10 +284,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -307,10 +307,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -330,10 +330,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -353,10 +353,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 448,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n+          \"byte_start\": 537,\n+          \"byte_end\": 537,\n+          \"line_start\": 12,\n+          \"line_end\": 12,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -380,7 +380,7 @@ mod foo {\n     }\n   ],\n   \"rendered\": \"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0412]\\u001b[0m\\u001b[0m\\u001b[1m: cannot find type `Iter` in this scope\\u001b[0m\n-\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m$DIR/use_suggestion_json.rs:12:12\\u001b[0m\n+\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m$DIR/use_suggestion_json.rs:13:12\\u001b[0m\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n \\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0m    let x: Iter;\\u001b[0m\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0m           \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mnot found in this scope\\u001b[0m"}, {"sha": "e6d0c94a02fac5f7ff6cb3fc7a869adefe40ad47", "filename": "src/test/ui/numbers-arithmetic/saturating-float-casts.rs", "status": "modified", "additions": 410, "deletions": 35, "changes": 445, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsaturating-float-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsaturating-float-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsaturating-float-casts.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -1,47 +1,41 @@\n // run-pass\n+// compile-flags:-Zmir-opt-level=0\n // Tests saturating float->int casts. See u128-as-f32.rs for the opposite direction.\n-// compile-flags: -Z saturating-float-casts\n+//\n+// Some of these tests come from a similar file in miri,\n+// tests/run-pass/float.rs. Individual test cases are potentially duplicated\n+// with the previously existing tests, but since this runs so quickly anyway,\n+// we're not spending the time to figure out exactly which ones should be\n+// merged.\n \n #![feature(test, stmt_expr_attributes)]\n+#![feature(track_caller)]\n #![deny(overflowing_literals)]\n extern crate test;\n \n use std::{f32, f64};\n-use std::{u8, i8, u16, i16, u32, i32, u64, i64};\n-#[cfg(not(target_os=\"emscripten\"))]\n-use std::{u128, i128};\n+#[cfg(not(target_os = \"emscripten\"))]\n+use std::{i128, u128};\n+use std::{i16, i32, i64, i8, u16, u32, u64, u8};\n use test::black_box;\n \n macro_rules! test {\n     ($val:expr, $src_ty:ident -> $dest_ty:ident, $expected:expr) => (\n         // black_box disables constant evaluation to test run-time conversions:\n         assert_eq!(black_box::<$src_ty>($val) as $dest_ty, $expected,\n                     \"run-time {} -> {}\", stringify!($src_ty), stringify!($dest_ty));\n-    );\n-\n-    ($fval:expr, f* -> $ity:ident, $ival:expr) => (\n-        test!($fval, f32 -> $ity, $ival);\n-        test!($fval, f64 -> $ity, $ival);\n-    )\n-}\n \n-// This macro tests const eval in addition to run-time evaluation.\n-// If and when saturating casts are adopted, this macro should be merged with test!() to ensure\n-// that run-time and const eval agree on inputs that currently trigger a const eval error.\n-macro_rules! test_c {\n-    ($val:expr, $src_ty:ident -> $dest_ty:ident, $expected:expr) => ({\n-        test!($val, $src_ty -> $dest_ty, $expected);\n         {\n             const X: $src_ty = $val;\n             const Y: $dest_ty = X as $dest_ty;\n             assert_eq!(Y, $expected,\n                         \"const eval {} -> {}\", stringify!($src_ty), stringify!($dest_ty));\n         }\n-    });\n+    );\n \n     ($fval:expr, f* -> $ity:ident, $ival:expr) => (\n-        test_c!($fval, f32 -> $ity, $ival);\n-        test_c!($fval, f64 -> $ity, $ival);\n+        test!($fval, f32 -> $ity, $ival);\n+        test!($fval, f64 -> $ity, $ival);\n     )\n }\n \n@@ -55,11 +49,11 @@ macro_rules! common_fptoi_tests {\n         // as well, the test is just slightly misplaced.\n         test!($ity::MIN as $fty, $fty -> $ity, $ity::MIN);\n         test!($ity::MAX as $fty, $fty -> $ity, $ity::MAX);\n-        test_c!(0., $fty -> $ity, 0);\n-        test_c!($fty::MIN_POSITIVE, $fty -> $ity, 0);\n+        test!(0., $fty -> $ity, 0);\n+        test!($fty::MIN_POSITIVE, $fty -> $ity, 0);\n         test!(-0.9, $fty -> $ity, 0);\n-        test_c!(1., $fty -> $ity, 1);\n-        test_c!(42., $fty -> $ity, 42);\n+        test!(1., $fty -> $ity, 1);\n+        test!(42., $fty -> $ity, 42);\n     )+ });\n \n     (f* -> $($ity:ident)+) => ({\n@@ -85,51 +79,432 @@ macro_rules! fptoui_tests {\n     })\n }\n \n+use std::fmt::Debug;\n+\n+// Helper function to avoid promotion so that this tests \"run-time\" casts, not CTFE.\n+#[track_caller]\n+#[inline(never)]\n+fn assert_eq<T: PartialEq + Debug>(x: T, y: T) {\n+    assert_eq!(x, y);\n+}\n+\n+trait FloatToInt<Int>: Copy {\n+    fn cast(self) -> Int;\n+    unsafe fn cast_unchecked(self) -> Int;\n+}\n+\n+impl FloatToInt<i8> for f32 {\n+    fn cast(self) -> i8 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> i8 {\n+        self.to_int_unchecked()\n+    }\n+}\n+impl FloatToInt<i32> for f32 {\n+    fn cast(self) -> i32 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> i32 {\n+        self.to_int_unchecked()\n+    }\n+}\n+impl FloatToInt<u32> for f32 {\n+    fn cast(self) -> u32 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> u32 {\n+        self.to_int_unchecked()\n+    }\n+}\n+impl FloatToInt<i64> for f32 {\n+    fn cast(self) -> i64 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> i64 {\n+        self.to_int_unchecked()\n+    }\n+}\n+impl FloatToInt<u64> for f32 {\n+    fn cast(self) -> u64 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> u64 {\n+        self.to_int_unchecked()\n+    }\n+}\n+\n+impl FloatToInt<i8> for f64 {\n+    fn cast(self) -> i8 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> i8 {\n+        self.to_int_unchecked()\n+    }\n+}\n+impl FloatToInt<i32> for f64 {\n+    fn cast(self) -> i32 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> i32 {\n+        self.to_int_unchecked()\n+    }\n+}\n+impl FloatToInt<u32> for f64 {\n+    fn cast(self) -> u32 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> u32 {\n+        self.to_int_unchecked()\n+    }\n+}\n+impl FloatToInt<i64> for f64 {\n+    fn cast(self) -> i64 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> i64 {\n+        self.to_int_unchecked()\n+    }\n+}\n+impl FloatToInt<u64> for f64 {\n+    fn cast(self) -> u64 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> u64 {\n+        self.to_int_unchecked()\n+    }\n+}\n+// FIXME emscripten does not support i128\n+#[cfg(not(target_os = \"emscripten\"))]\n+impl FloatToInt<i128> for f64 {\n+    fn cast(self) -> i128 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> i128 {\n+        self.to_int_unchecked()\n+    }\n+}\n+// FIXME emscripten does not support i128\n+#[cfg(not(target_os = \"emscripten\"))]\n+impl FloatToInt<u128> for f64 {\n+    fn cast(self) -> u128 {\n+        self as _\n+    }\n+    unsafe fn cast_unchecked(self) -> u128 {\n+        self.to_int_unchecked()\n+    }\n+}\n+\n+/// Test this cast both via `as` and via `to_int_unchecked` (i.e., it must not saturate).\n+#[track_caller]\n+#[inline(never)]\n+fn test_both_cast<F, I>(x: F, y: I)\n+where\n+    F: FloatToInt<I>,\n+    I: PartialEq + Debug,\n+{\n+    assert_eq!(x.cast(), y);\n+    assert_eq!(unsafe { x.cast_unchecked() }, y);\n+}\n+\n+fn casts() {\n+    // f32 -> i8\n+    test_both_cast::<f32, i8>(127.99, 127);\n+    test_both_cast::<f32, i8>(-128.99, -128);\n+\n+    // f32 -> i32\n+    test_both_cast::<f32, i32>(0.0, 0);\n+    test_both_cast::<f32, i32>(-0.0, 0);\n+    test_both_cast::<f32, i32>(/*0x1p-149*/ f32::from_bits(0x00000001), 0);\n+    test_both_cast::<f32, i32>(/*-0x1p-149*/ f32::from_bits(0x80000001), 0);\n+    test_both_cast::<f32, i32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd), 1);\n+    test_both_cast::<f32, i32>(/*-0x1.19999ap+0*/ f32::from_bits(0xbf8ccccd), -1);\n+    test_both_cast::<f32, i32>(1.9, 1);\n+    test_both_cast::<f32, i32>(-1.9, -1);\n+    test_both_cast::<f32, i32>(5.0, 5);\n+    test_both_cast::<f32, i32>(-5.0, -5);\n+    test_both_cast::<f32, i32>(2147483520.0, 2147483520);\n+    test_both_cast::<f32, i32>(-2147483648.0, -2147483648);\n+    // unrepresentable casts\n+    assert_eq::<i32>(2147483648.0f32 as i32, i32::MAX);\n+    assert_eq::<i32>(-2147483904.0f32 as i32, i32::MIN);\n+    assert_eq::<i32>(f32::MAX as i32, i32::MAX);\n+    assert_eq::<i32>(f32::MIN as i32, i32::MIN);\n+    assert_eq::<i32>(f32::INFINITY as i32, i32::MAX);\n+    assert_eq::<i32>(f32::NEG_INFINITY as i32, i32::MIN);\n+    assert_eq::<i32>(f32::NAN as i32, 0);\n+    assert_eq::<i32>((-f32::NAN) as i32, 0);\n+\n+    // f32 -> u32\n+    test_both_cast::<f32, u32>(0.0, 0);\n+    test_both_cast::<f32, u32>(-0.0, 0);\n+    test_both_cast::<f32, u32>(-0.9999999, 0);\n+    test_both_cast::<f32, u32>(/*0x1p-149*/ f32::from_bits(0x1), 0);\n+    test_both_cast::<f32, u32>(/*-0x1p-149*/ f32::from_bits(0x80000001), 0);\n+    test_both_cast::<f32, u32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd), 1);\n+    test_both_cast::<f32, u32>(1.9, 1);\n+    test_both_cast::<f32, u32>(5.0, 5);\n+    test_both_cast::<f32, u32>(2147483648.0, 0x8000_0000);\n+    test_both_cast::<f32, u32>(4294967040.0, 0u32.wrapping_sub(256));\n+    test_both_cast::<f32, u32>(/*-0x1.ccccccp-1*/ f32::from_bits(0xbf666666), 0);\n+    test_both_cast::<f32, u32>(/*-0x1.fffffep-1*/ f32::from_bits(0xbf7fffff), 0);\n+    test_both_cast::<f32, u32>((u32::MAX - 128) as f32, u32::MAX - 255); // rounding loss\n+\n+    // unrepresentable casts:\n+\n+    // rounds up and then becomes unrepresentable\n+    assert_eq::<u32>((u32::MAX - 127) as f32 as u32, u32::MAX);\n+\n+    assert_eq::<u32>(4294967296.0f32 as u32, u32::MAX);\n+    assert_eq::<u32>(-5.0f32 as u32, 0);\n+    assert_eq::<u32>(f32::MAX as u32, u32::MAX);\n+    assert_eq::<u32>(f32::MIN as u32, 0);\n+    assert_eq::<u32>(f32::INFINITY as u32, u32::MAX);\n+    assert_eq::<u32>(f32::NEG_INFINITY as u32, 0);\n+    assert_eq::<u32>(f32::NAN as u32, 0);\n+    assert_eq::<u32>((-f32::NAN) as u32, 0);\n+\n+    // f32 -> i64\n+    test_both_cast::<f32, i64>(4294967296.0, 4294967296);\n+    test_both_cast::<f32, i64>(-4294967296.0, -4294967296);\n+    test_both_cast::<f32, i64>(9223371487098961920.0, 9223371487098961920);\n+    test_both_cast::<f32, i64>(-9223372036854775808.0, -9223372036854775808);\n+\n+    // f64 -> i8\n+    test_both_cast::<f64, i8>(127.99, 127);\n+    test_both_cast::<f64, i8>(-128.99, -128);\n+\n+    // f64 -> i32\n+    test_both_cast::<f64, i32>(0.0, 0);\n+    test_both_cast::<f64, i32>(-0.0, 0);\n+    test_both_cast::<f64, i32>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a), 1);\n+    test_both_cast::<f64, i32>(\n+        /*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a),\n+        -1,\n+    );\n+    test_both_cast::<f64, i32>(1.9, 1);\n+    test_both_cast::<f64, i32>(-1.9, -1);\n+    test_both_cast::<f64, i32>(1e8, 100_000_000);\n+    test_both_cast::<f64, i32>(2147483647.0, 2147483647);\n+    test_both_cast::<f64, i32>(-2147483648.0, -2147483648);\n+    // unrepresentable casts\n+    assert_eq::<i32>(2147483648.0f64 as i32, i32::MAX);\n+    assert_eq::<i32>(-2147483649.0f64 as i32, i32::MIN);\n+\n+    // f64 -> i64\n+    test_both_cast::<f64, i64>(0.0, 0);\n+    test_both_cast::<f64, i64>(-0.0, 0);\n+    test_both_cast::<f64, i64>(/*0x0.0000000000001p-1022*/ f64::from_bits(0x1), 0);\n+    test_both_cast::<f64, i64>(\n+        /*-0x0.0000000000001p-1022*/ f64::from_bits(0x8000000000000001),\n+        0,\n+    );\n+    test_both_cast::<f64, i64>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a), 1);\n+    test_both_cast::<f64, i64>(\n+        /*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a),\n+        -1,\n+    );\n+    test_both_cast::<f64, i64>(5.0, 5);\n+    test_both_cast::<f64, i64>(5.9, 5);\n+    test_both_cast::<f64, i64>(-5.0, -5);\n+    test_both_cast::<f64, i64>(-5.9, -5);\n+    test_both_cast::<f64, i64>(4294967296.0, 4294967296);\n+    test_both_cast::<f64, i64>(-4294967296.0, -4294967296);\n+    test_both_cast::<f64, i64>(9223372036854774784.0, 9223372036854774784);\n+    test_both_cast::<f64, i64>(-9223372036854775808.0, -9223372036854775808);\n+    // unrepresentable casts\n+    assert_eq::<i64>(9223372036854775808.0f64 as i64, i64::MAX);\n+    assert_eq::<i64>(-9223372036854777856.0f64 as i64, i64::MIN);\n+    assert_eq::<i64>(f64::MAX as i64, i64::MAX);\n+    assert_eq::<i64>(f64::MIN as i64, i64::MIN);\n+    assert_eq::<i64>(f64::INFINITY as i64, i64::MAX);\n+    assert_eq::<i64>(f64::NEG_INFINITY as i64, i64::MIN);\n+    assert_eq::<i64>(f64::NAN as i64, 0);\n+    assert_eq::<i64>((-f64::NAN) as i64, 0);\n+\n+    // f64 -> u64\n+    test_both_cast::<f64, u64>(0.0, 0);\n+    test_both_cast::<f64, u64>(-0.0, 0);\n+    test_both_cast::<f64, u64>(-0.99999999999, 0);\n+    test_both_cast::<f64, u64>(5.0, 5);\n+    test_both_cast::<f64, u64>(1e16, 10000000000000000);\n+    test_both_cast::<f64, u64>((u64::MAX - 1024) as f64, u64::MAX - 2047); // rounding loss\n+    test_both_cast::<f64, u64>(9223372036854775808.0, 9223372036854775808);\n+    // unrepresentable casts\n+    assert_eq::<u64>(-5.0f64 as u64, 0);\n+    // rounds up and then becomes unrepresentable\n+    assert_eq::<u64>((u64::MAX - 1023) as f64 as u64, u64::MAX);\n+    assert_eq::<u64>(18446744073709551616.0f64 as u64, u64::MAX);\n+    assert_eq::<u64>(f64::MAX as u64, u64::MAX);\n+    assert_eq::<u64>(f64::MIN as u64, 0);\n+    assert_eq::<u64>(f64::INFINITY as u64, u64::MAX);\n+    assert_eq::<u64>(f64::NEG_INFINITY as u64, 0);\n+    assert_eq::<u64>(f64::NAN as u64, 0);\n+    assert_eq::<u64>((-f64::NAN) as u64, 0);\n+\n+    // FIXME emscripten does not support i128\n+    #[cfg(not(target_os = \"emscripten\"))]\n+    {\n+        // f64 -> i128\n+        assert_eq::<i128>(f64::MAX as i128, i128::MAX);\n+        assert_eq::<i128>(f64::MIN as i128, i128::MIN);\n+\n+        // f64 -> u128\n+        assert_eq::<u128>(f64::MAX as u128, u128::MAX);\n+        assert_eq::<u128>(f64::MIN as u128, 0);\n+    }\n+\n+    // int -> f32\n+    assert_eq::<f32>(127i8 as f32, 127.0);\n+    assert_eq::<f32>(2147483647i32 as f32, 2147483648.0);\n+    assert_eq::<f32>((-2147483648i32) as f32, -2147483648.0);\n+    assert_eq::<f32>(1234567890i32 as f32, /*0x1.26580cp+30*/ f32::from_bits(0x4e932c06));\n+    assert_eq::<f32>(16777217i32 as f32, 16777216.0);\n+    assert_eq::<f32>((-16777217i32) as f32, -16777216.0);\n+    assert_eq::<f32>(16777219i32 as f32, 16777220.0);\n+    assert_eq::<f32>((-16777219i32) as f32, -16777220.0);\n+    assert_eq::<f32>(\n+        0x7fffff4000000001i64 as f32,\n+        /*0x1.fffffep+62*/ f32::from_bits(0x5effffff),\n+    );\n+    assert_eq::<f32>(\n+        0x8000004000000001u64 as i64 as f32,\n+        /*-0x1.fffffep+62*/ f32::from_bits(0xdeffffff),\n+    );\n+    assert_eq::<f32>(\n+        0x0020000020000001i64 as f32,\n+        /*0x1.000002p+53*/ f32::from_bits(0x5a000001),\n+    );\n+    assert_eq::<f32>(\n+        0xffdfffffdfffffffu64 as i64 as f32,\n+        /*-0x1.000002p+53*/ f32::from_bits(0xda000001),\n+    );\n+    // FIXME emscripten does not support i128\n+    #[cfg(not(target_os = \"emscripten\"))]\n+    {\n+        assert_eq::<f32>(i128::MIN as f32, -170141183460469231731687303715884105728.0f32);\n+        assert_eq::<f32>(u128::MAX as f32, f32::INFINITY); // saturation\n+    }\n+\n+    // int -> f64\n+    assert_eq::<f64>(127i8 as f64, 127.0);\n+    assert_eq::<f64>(i16::MIN as f64, -32768.0f64);\n+    assert_eq::<f64>(2147483647i32 as f64, 2147483647.0);\n+    assert_eq::<f64>(-2147483648i32 as f64, -2147483648.0);\n+    assert_eq::<f64>(987654321i32 as f64, 987654321.0);\n+    assert_eq::<f64>(9223372036854775807i64 as f64, 9223372036854775807.0);\n+    assert_eq::<f64>(-9223372036854775808i64 as f64, -9223372036854775808.0);\n+    assert_eq::<f64>(4669201609102990i64 as f64, 4669201609102990.0); // Feigenbaum (?)\n+    assert_eq::<f64>(9007199254740993i64 as f64, 9007199254740992.0);\n+    assert_eq::<f64>(-9007199254740993i64 as f64, -9007199254740992.0);\n+    assert_eq::<f64>(9007199254740995i64 as f64, 9007199254740996.0);\n+    assert_eq::<f64>(-9007199254740995i64 as f64, -9007199254740996.0);\n+    // FIXME emscripten does not support i128\n+    #[cfg(not(target_os = \"emscripten\"))]\n+    {\n+        // even that fits...\n+        assert_eq::<f64>(u128::MAX as f64, 340282366920938463463374607431768211455.0f64);\n+    }\n+\n+    // f32 -> f64\n+    assert_eq::<u64>((0.0f32 as f64).to_bits(), 0.0f64.to_bits());\n+    assert_eq::<u64>(((-0.0f32) as f64).to_bits(), (-0.0f64).to_bits());\n+    assert_eq::<f64>(5.0f32 as f64, 5.0f64);\n+    assert_eq::<f64>(\n+        /*0x1p-149*/ f32::from_bits(0x1) as f64,\n+        /*0x1p-149*/ f64::from_bits(0x36a0000000000000),\n+    );\n+    assert_eq::<f64>(\n+        /*-0x1p-149*/ f32::from_bits(0x80000001) as f64,\n+        /*-0x1p-149*/ f64::from_bits(0xb6a0000000000000),\n+    );\n+    assert_eq::<f64>(\n+        /*0x1.fffffep+127*/ f32::from_bits(0x7f7fffff) as f64,\n+        /*0x1.fffffep+127*/ f64::from_bits(0x47efffffe0000000),\n+    );\n+    assert_eq::<f64>(\n+        /*-0x1.fffffep+127*/ (-f32::from_bits(0x7f7fffff)) as f64,\n+        /*-0x1.fffffep+127*/ -f64::from_bits(0x47efffffe0000000),\n+    );\n+    assert_eq::<f64>(\n+        /*0x1p-119*/ f32::from_bits(0x4000000) as f64,\n+        /*0x1p-119*/ f64::from_bits(0x3880000000000000),\n+    );\n+    assert_eq::<f64>(\n+        /*0x1.8f867ep+125*/ f32::from_bits(0x7e47c33f) as f64,\n+        6.6382536710104395e+37,\n+    );\n+    assert_eq::<f64>(f32::INFINITY as f64, f64::INFINITY);\n+    assert_eq::<f64>(f32::NEG_INFINITY as f64, f64::NEG_INFINITY);\n+\n+    // f64 -> f32\n+    assert_eq::<u32>((0.0f64 as f32).to_bits(), 0.0f32.to_bits());\n+    assert_eq::<u32>(((-0.0f64) as f32).to_bits(), (-0.0f32).to_bits());\n+    assert_eq::<f32>(5.0f64 as f32, 5.0f32);\n+    assert_eq::<f32>(/*0x0.0000000000001p-1022*/ f64::from_bits(0x1) as f32, 0.0);\n+    assert_eq::<f32>(/*-0x0.0000000000001p-1022*/ (-f64::from_bits(0x1)) as f32, -0.0);\n+    assert_eq::<f32>(\n+        /*0x1.fffffe0000000p-127*/ f64::from_bits(0x380fffffe0000000) as f32,\n+        /*0x1p-149*/ f32::from_bits(0x800000),\n+    );\n+    assert_eq::<f32>(\n+        /*0x1.4eae4f7024c7p+108*/ f64::from_bits(0x46b4eae4f7024c70) as f32,\n+        /*0x1.4eae5p+108*/ f32::from_bits(0x75a75728),\n+    );\n+    assert_eq::<f32>(f64::MAX as f32, f32::INFINITY);\n+    assert_eq::<f32>(f64::MIN as f32, f32::NEG_INFINITY);\n+    assert_eq::<f32>(f64::INFINITY as f32, f32::INFINITY);\n+    assert_eq::<f32>(f64::NEG_INFINITY as f32, f32::NEG_INFINITY);\n+}\n+\n pub fn main() {\n+    casts(); // from miri's tests\n+\n     common_fptoi_tests!(f* -> i8 i16 i32 i64 u8 u16 u32 u64);\n     fptoui_tests!(f* -> u8 u16 u32 u64);\n     // FIXME emscripten does not support i128\n-    #[cfg(not(target_os=\"emscripten\"))] {\n+    #[cfg(not(target_os = \"emscripten\"))]\n+    {\n         common_fptoi_tests!(f* -> i128 u128);\n         fptoui_tests!(f* -> u128);\n     }\n \n     // The following tests cover edge cases for some integer types.\n \n     // # u8\n-    test_c!(254., f* -> u8, 254);\n+    test!(254., f* -> u8, 254);\n     test!(256., f* -> u8, 255);\n \n     // # i8\n-    test_c!(-127., f* -> i8, -127);\n+    test!(-127., f* -> i8, -127);\n     test!(-129., f* -> i8, -128);\n-    test_c!(126., f* -> i8, 126);\n+    test!(126., f* -> i8, 126);\n     test!(128., f* -> i8, 127);\n \n     // # i32\n     // -2147483648. is i32::MIN (exactly)\n-    test_c!(-2147483648., f* -> i32, i32::MIN);\n+    test!(-2147483648., f* -> i32, i32::MIN);\n     // 2147483648. is i32::MAX rounded up\n     test!(2147483648., f32 -> i32, 2147483647);\n     // With 24 significand bits, floats with magnitude in [2^30 + 1, 2^31] are rounded to\n     // multiples of 2^7. Therefore, nextDown(round(i32::MAX)) is 2^31 - 128:\n-    test_c!(2147483520., f32 -> i32, 2147483520);\n+    test!(2147483520., f32 -> i32, 2147483520);\n     // Similarly, nextUp(i32::MIN) is i32::MIN + 2^8 and nextDown(i32::MIN) is i32::MIN - 2^7\n     test!(-2147483904., f* -> i32, i32::MIN);\n-    test_c!(-2147483520., f* -> i32, -2147483520);\n+    test!(-2147483520., f* -> i32, -2147483520);\n \n     // # u32\n     // round(MAX) and nextUp(round(MAX))\n-    test_c!(4294967040., f* -> u32, 4294967040);\n+    test!(4294967040., f* -> u32, 4294967040);\n     test!(4294967296., f* -> u32, 4294967295);\n \n     // # u128\n-    #[cfg(not(target_os=\"emscripten\"))]\n+    #[cfg(not(target_os = \"emscripten\"))]\n     {\n         // float->int:\n-        test_c!(f32::MAX, f32 -> u128, 0xffffff00000000000000000000000000);\n+        test!(f32::MAX, f32 -> u128, 0xffffff00000000000000000000000000);\n         // nextDown(f32::MAX) = 2^128 - 2 * 2^104\n         const SECOND_LARGEST_F32: f32 = 340282326356119256160033759537265639424.;\n-        test_c!(SECOND_LARGEST_F32, f32 -> u128, 0xfffffe00000000000000000000000000);\n+        test!(SECOND_LARGEST_F32, f32 -> u128, 0xfffffe00000000000000000000000000);\n     }\n }"}, {"sha": "97f6265e3089bdc2cff33f05e3f62b0379aef174", "filename": "src/test/ui/proc-macro/crt-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -3,6 +3,7 @@\n // override -Ctarget-feature=-crt-static from compiletest\n // compile-flags: -Ctarget-feature=\n // ignore-wasm32\n+// ignore-sgx no support for proc-macro crate type\n // build-pass\n #![crate_type = \"proc-macro\"]\n "}, {"sha": "048aaf65fbfa87d4395e1b6b973e121cea5f2c65", "filename": "src/test/ui/resolve/issue-16058.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -1,3 +1,5 @@\n+// ignore-sgx std::os::fortanix_sgx::usercalls::raw::Result changes compiler suggestions\n+\n pub struct GslResult {\n     pub val: f64,\n     pub err: f64"}, {"sha": "913009ce51c1a40e614c6df57a955ff181356e7f", "filename": "src/test/ui/resolve/issue-16058.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -1,5 +1,5 @@\n error[E0574]: expected struct, variant or union type, found enum `Result`\n-  --> $DIR/issue-16058.rs:8:9\n+  --> $DIR/issue-16058.rs:10:9\n    |\n LL |         Result {\n    |         ^^^^^^ not a struct, variant or union type"}, {"sha": "978732a9ec374ef90fa760a86014bbcb4b77f718", "filename": "src/test/ui/test-panic-abort-nocapture.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -7,6 +7,7 @@\n \n // ignore-wasm no panic or subprocess support\n // ignore-emscripten no panic or subprocess support\n+// ignore-sgx no subprocess support\n \n #![cfg(test)]\n "}, {"sha": "3388813d5a0bd0674eb9d8dec895a4315442638e", "filename": "src/test/ui/test-panic-abort-nocapture.run.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stderr?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -1,9 +1,9 @@\n thread 'main' panicked at 'assertion failed: `(left == right)`\n   left: `2`,\n- right: `4`', $DIR/test-panic-abort-nocapture.rs:31:5\n+ right: `4`', $DIR/test-panic-abort-nocapture.rs:32:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n thread 'main' panicked at 'assertion failed: `(left == right)`\n   left: `2`,\n- right: `4`', $DIR/test-panic-abort-nocapture.rs:25:5\n+ right: `4`', $DIR/test-panic-abort-nocapture.rs:26:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n testing321"}, {"sha": "21e7dc393f512e859da561c85b3297b8ee9553db", "filename": "src/test/ui/test-panic-abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Ftest-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Ftest-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort.rs?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -7,6 +7,7 @@\n \n // ignore-wasm no panic or subprocess support\n // ignore-emscripten no panic or subprocess support\n+// ignore-sgx no subprocess support\n \n #![cfg(test)]\n "}, {"sha": "33ddd519030fff241adf5292ce1a346cdc1b54c0", "filename": "src/test/ui/test-panic-abort.run.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout?ref=1836e3b42a5b2f37fd79104eedbe8f48a5afdee6", "patch": "@@ -18,7 +18,7 @@ testing123\n testing321\n thread 'main' panicked at 'assertion failed: `(left == right)`\n   left: `2`,\n- right: `5`', $DIR/test-panic-abort.rs:32:5\n+ right: `5`', $DIR/test-panic-abort.rs:33:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n "}]}