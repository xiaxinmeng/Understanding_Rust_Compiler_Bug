{"sha": "d65e272a9fe3e61aa5f229c5358e35a909435575", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NWUyNzJhOWZlM2U2MWFhNWYyMjljNTM1OGUzNWE5MDk0MzU1NzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-17T12:53:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-17T12:53:53Z"}, "message": "Auto merge of #63462 - matthewjasper:hygienic-builtin-derives, r=petrochenkov\n\nOpaque builtin derive macros\n\n* Buiilt-in derives are now opaque macros\n    * This required limiting the visibility of some previously unexposed functions in `core`.\n    * This also required the change to `Ident` serialization.\n* All gensyms are replaced with hygienic identifiers\n* Use hygiene to avoid most other name-resolution issues with buiilt-in derives.\n    *  As far as I know the only remaining case that breaks is an ADT that has the same name as one of its parameters. Fixing this completely seemed to be more effort than it's worth.\n* Remove gensym in `Ident::decode`, which lead to linker errors due to `inline` being gensymmed.\n    * `Ident`now panics if incremental compilation tries to serialize it (it currently doesn't).\n    * `Ident` no longer uses `gensym` to emulate cross-crate hygiene. It only applied to reexports.\n    * `SyntaxContext` is no longer serializable.\n    * The long-term fix for this is to properly implement cross-crate hygiene, but this seemed to be acceptable for now.\n* Move type/const parameter shadowing checks to `resolve`\n    * This was previously split between resolve and type checking. The type checking pass compared `InternedString`s, not Identifiers.\n* Removed the `SyntaxContext` from `{ast, hir}::{InlineAsm, GlobalAsm}`\n\ncc #60869\nr? @petrochenkov", "tree": {"sha": "cb52efb29cd5d4c1136659f99c16d730a879d752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb52efb29cd5d4c1136659f99c16d730a879d752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d65e272a9fe3e61aa5f229c5358e35a909435575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d65e272a9fe3e61aa5f229c5358e35a909435575", "html_url": "https://github.com/rust-lang/rust/commit/d65e272a9fe3e61aa5f229c5358e35a909435575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d65e272a9fe3e61aa5f229c5358e35a909435575/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac60ca0643feb3452688a9ca97c839c155742915", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac60ca0643feb3452688a9ca97c839c155742915", "html_url": "https://github.com/rust-lang/rust/commit/ac60ca0643feb3452688a9ca97c839c155742915"}, {"sha": "1c0a5469edcb11bdbfd44a1eb227aacd95aff0ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0a5469edcb11bdbfd44a1eb227aacd95aff0ca", "html_url": "https://github.com/rust-lang/rust/commit/1c0a5469edcb11bdbfd44a1eb227aacd95aff0ca"}], "stats": {"total": 648, "additions": 376, "deletions": 272}, "files": [{"sha": "ce92ce026967117016ab27620dafaad86770e207", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -37,7 +37,7 @@ fn main() {\n             let mut new = None;\n             if let Some(current_as_str) = args[i].to_str() {\n                 if (&*args[i - 1] == \"-C\" && current_as_str.starts_with(\"metadata\")) ||\n-                   current_as_str.starts_with(\"-Cmetadata\") {\n+                    current_as_str.starts_with(\"-Cmetadata\") {\n                     new = Some(format!(\"{}-{}\", current_as_str, s));\n                 }\n             }\n@@ -89,7 +89,7 @@ fn main() {\n     if let Some(crate_name) = crate_name {\n         if let Some(target) = env::var_os(\"RUSTC_TIME\") {\n             if target == \"all\" ||\n-               target.into_string().unwrap().split(\",\").any(|c| c.trim() == crate_name)\n+                target.into_string().unwrap().split(\",\").any(|c| c.trim() == crate_name)\n             {\n                 cmd.arg(\"-Ztime\");\n             }"}, {"sha": "ec70d396e966d586fcdb1ff2893de24943f85353", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -135,7 +135,7 @@ pub trait Clone : Sized {\n \n /// Derive macro generating an impl of the trait `Clone`.\n #[rustc_builtin_macro]\n-#[rustc_macro_transparency = \"semitransparent\"]\n+#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n pub macro Clone($item:item) { /* compiler built-in */ }"}, {"sha": "cb9feb074dd70d58d51c1b95da226ce662ea16eb", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -202,7 +202,7 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n \n /// Derive macro generating an impl of the trait `PartialEq`.\n #[rustc_builtin_macro]\n-#[rustc_macro_transparency = \"semitransparent\"]\n+#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro PartialEq($item:item) { /* compiler built-in */ }\n@@ -265,7 +265,7 @@ pub trait Eq: PartialEq<Self> {\n \n /// Derive macro generating an impl of the trait `Eq`.\n #[rustc_builtin_macro]\n-#[rustc_macro_transparency = \"semitransparent\"]\n+#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_eq)]\n pub macro Eq($item:item) { /* compiler built-in */ }\n@@ -616,7 +616,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n \n /// Derive macro generating an impl of the trait `Ord`.\n #[rustc_builtin_macro]\n-#[rustc_macro_transparency = \"semitransparent\"]\n+#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro Ord($item:item) { /* compiler built-in */ }\n@@ -865,7 +865,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n \n /// Derive macro generating an impl of the trait `PartialOrd`.\n #[rustc_builtin_macro]\n-#[rustc_macro_transparency = \"semitransparent\"]\n+#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro PartialOrd($item:item) { /* compiler built-in */ }"}, {"sha": "66acc5165fc5b9ad9b2fa3714225a664da3c71cd", "filename": "src/libcore/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -117,7 +117,7 @@ pub trait Default: Sized {\n \n /// Derive macro generating an impl of the trait `Default`.\n #[rustc_builtin_macro]\n-#[rustc_macro_transparency = \"semitransparent\"]\n+#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro Default($item:item) { /* compiler built-in */ }"}, {"sha": "15ce2277fa00d9188aad74dc7043f72faa149a3e", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -98,7 +98,7 @@ pub struct DebugStruct<'a, 'b: 'a> {\n     has_fields: bool,\n }\n \n-pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>,\n+pub(super) fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>,\n                                 name: &str)\n                                 -> DebugStruct<'a, 'b> {\n     let result = fmt.write_str(name);\n@@ -251,7 +251,10 @@ pub struct DebugTuple<'a, 'b: 'a> {\n     empty_name: bool,\n }\n \n-pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugTuple<'a, 'b> {\n+pub(super) fn debug_tuple_new<'a, 'b>(\n+    fmt: &'a mut fmt::Formatter<'b>,\n+    name: &str,\n+) -> DebugTuple<'a, 'b> {\n     let result = fmt.write_str(name);\n     DebugTuple {\n         fmt,\n@@ -418,7 +421,7 @@ pub struct DebugSet<'a, 'b: 'a> {\n     inner: DebugInner<'a, 'b>,\n }\n \n-pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b> {\n+pub(super) fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b> {\n     let result = fmt.write_str(\"{\");\n     DebugSet {\n         inner: DebugInner {\n@@ -555,7 +558,7 @@ pub struct DebugList<'a, 'b: 'a> {\n     inner: DebugInner<'a, 'b>,\n }\n \n-pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a, 'b> {\n+pub(super) fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a, 'b> {\n     let result = fmt.write_str(\"[\");\n     DebugList {\n         inner: DebugInner {\n@@ -697,7 +700,7 @@ pub struct DebugMap<'a, 'b: 'a> {\n     state: PadAdapterState,\n }\n \n-pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b> {\n+pub(super) fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b> {\n     let result = fmt.write_str(\"{\");\n     DebugMap {\n         fmt,"}, {"sha": "bd31d25dd034b2063c33b665e9e3d63e50e159cd", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -549,7 +549,7 @@ pub trait Debug {\n pub(crate) mod macros {\n     /// Derive macro generating an impl of the trait `Debug`.\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n+    #[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro Debug($item:item) { /* compiler built-in */ }"}, {"sha": "bf3daa32840d85cb598ee4e0d1ec6ad34be98e1a", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -202,7 +202,7 @@ pub trait Hash {\n pub(crate) mod macros {\n     /// Derive macro generating an impl of the trait `Hash`.\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n+    #[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro Hash($item:item) { /* compiler built-in */ }"}, {"sha": "6c88a766a2f10eb39eb7c5096b81bd2e78e1f936", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1263,14 +1263,14 @@ pub(crate) mod builtin {\n \n     /// Unstable implementation detail of the `rustc` compiler, do not use.\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n+    #[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow_internal_unstable(core_intrinsics, libstd_sys_internals)]\n     pub macro RustcDecodable($item:item) { /* compiler built-in */ }\n \n     /// Unstable implementation detail of the `rustc` compiler, do not use.\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n+    #[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro RustcEncodable($item:item) { /* compiler built-in */ }"}, {"sha": "89af2528c052a2dea2b2e8834ccca0c9bc191714", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -290,7 +290,7 @@ pub trait Copy : Clone {\n \n /// Derive macro generating an impl of the trait `Copy`.\n #[rustc_builtin_macro]\n-#[rustc_macro_transparency = \"semitransparent\"]\n+#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n pub macro Copy($item:item) { /* compiler built-in */ }"}, {"sha": "ff0c44a23874bfa96bd824625fc1e162583416de", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -984,7 +984,6 @@ impl LoweringContext<'_> {\n             volatile: asm.volatile,\n             alignstack: asm.alignstack,\n             dialect: asm.dialect,\n-            ctxt: asm.ctxt,\n         };\n \n         let outputs = asm.outputs"}, {"sha": "4f9a9ed5673c7acc83d363e43d27943ecae58291", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -750,10 +750,7 @@ impl LoweringContext<'_> {\n     }\n \n     fn lower_global_asm(&mut self, ga: &GlobalAsm) -> P<hir::GlobalAsm> {\n-        P(hir::GlobalAsm {\n-            asm: ga.asm,\n-            ctxt: ga.ctxt,\n-        })\n+        P(hir::GlobalAsm { asm: ga.asm })\n     }\n \n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant {"}, {"sha": "e5ada1fb9aec4b5df22ee3f76bdb654026242c8f", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -23,7 +23,6 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n use syntax::ast::{Attribute, Label, LitKind, StrStyle, FloatTy, IntTy, UintTy};\n use syntax::attr::{InlineAttr, OptimizeAttr};\n-use syntax::ext::hygiene::SyntaxContext;\n use syntax::symbol::{Symbol, kw};\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n@@ -2004,8 +2003,6 @@ pub struct InlineAsm {\n     pub volatile: bool,\n     pub alignstack: bool,\n     pub dialect: AsmDialect,\n-    #[stable_hasher(ignore)] // This is used for error reporting\n-    pub ctxt: SyntaxContext,\n }\n \n /// Represents an argument in a function header.\n@@ -2184,8 +2181,6 @@ pub struct ForeignMod {\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct GlobalAsm {\n     pub asm: Symbol,\n-    #[stable_hasher(ignore)] // This is used for error reporting\n-    pub ctxt: SyntaxContext,\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]"}, {"sha": "b68ee2cb44d4bcb9cf02a5bab742f596bff1cdcf", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -6,9 +6,9 @@ use crate::value::Value;\n \n use rustc::hir;\n use rustc_codegen_ssa::traits::*;\n-\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::mir::operand::OperandValue;\n+use syntax_pos::Span;\n \n use std::ffi::{CStr, CString};\n use libc::{c_uint, c_char};\n@@ -19,7 +19,8 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         &mut self,\n         ia: &hir::InlineAsm,\n         outputs: Vec<PlaceRef<'tcx, &'ll Value>>,\n-        mut inputs: Vec<&'ll Value>\n+        mut inputs: Vec<&'ll Value>,\n+        span: Span,\n     ) -> bool {\n         let mut ext_constraints = vec![];\n         let mut output_types = vec![];\n@@ -102,7 +103,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             let kind = llvm::LLVMGetMDKindIDInContext(self.llcx,\n                 key.as_ptr() as *const c_char, key.len() as c_uint);\n \n-            let val: &'ll Value = self.const_i32(ia.ctxt.outer_expn().as_u32() as i32);\n+            let val: &'ll Value = self.const_i32(span.ctxt().outer_expn().as_u32() as i32);\n \n             llvm::LLVMSetMetadata(r, kind,\n                 llvm::LLVMMDNodeInContext(self.llcx, &val, 1));"}, {"sha": "3617f3afaae4148a37224672b6b9374f35e7ec00", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -89,7 +89,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 });\n \n                 if input_vals.len() == asm.inputs.len() {\n-                    let res = bx.codegen_inline_asm(&asm.asm, outputs, input_vals);\n+                    let res = bx.codegen_inline_asm(\n+                        &asm.asm,\n+                        outputs,\n+                        input_vals,\n+                        statement.source_info.span,\n+                    );\n                     if !res {\n                         span_err!(bx.sess(), statement.source_info.span, E0668,\n                                   \"malformed inline assembly\");"}, {"sha": "c9e1ed86e97e0ff37159fc8c746be8bc3e837950", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1,6 +1,7 @@\n use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n use rustc::hir::{GlobalAsm, InlineAsm};\n+use syntax_pos::Span;\n \n pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n     /// Take an inline assembly expression and splat it out via LLVM\n@@ -9,6 +10,7 @@ pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n         ia: &InlineAsm,\n         outputs: Vec<PlaceRef<'tcx, Self::Value>>,\n         inputs: Vec<Self::Value>,\n+        span: Span,\n     ) -> bool;\n }\n "}, {"sha": "772b2d3ec4d85264d3dea721a7b56b1ba70f1c4e", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -348,6 +348,14 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n+impl SpecializedDecoder<Ident> for DecodeContext<'_, '_> {\n+    fn specialized_decode(&mut self) -> Result<Ident, Self::Error> {\n+        // FIXME(jseyfried): intercrate hygiene\n+\n+        Ok(Ident::with_dummy_span(Symbol::decode(self)?))\n+    }\n+}\n+\n impl<'a, 'tcx> SpecializedDecoder<Fingerprint> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Fingerprint, Self::Error> {\n         Fingerprint::decode_opaque(&mut self.opaque)"}, {"sha": "e2de0552cd651d6a2e26482d0724adf8d1aea553", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -31,7 +31,7 @@ use std::u32;\n use syntax::ast;\n use syntax::attr;\n use syntax::source_map::Spanned;\n-use syntax::symbol::{kw, sym};\n+use syntax::symbol::{kw, sym, Ident};\n use syntax_pos::{self, FileName, SourceFile, Span};\n use log::{debug, trace};\n \n@@ -173,6 +173,13 @@ impl<'tcx> SpecializedEncoder<Span> for EncodeContext<'tcx> {\n     }\n }\n \n+impl SpecializedEncoder<Ident> for EncodeContext<'tcx> {\n+    fn specialized_encode(&mut self, ident: &Ident) -> Result<(), Self::Error> {\n+        // FIXME(jseyfried): intercrate hygiene\n+        ident.name.encode(self)\n+    }\n+}\n+\n impl<'tcx> SpecializedEncoder<LocalDefId> for EncodeContext<'tcx> {\n     #[inline]\n     fn specialized_encode(&mut self, def_id: &LocalDefId) -> Result<(), Self::Error> {"}, {"sha": "b79e0c2bd3b2672257f12aacd1cbc652b7a86fad", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -169,12 +169,14 @@ impl<'a> Resolver<'a> {\n                 err\n             }\n             ResolutionError::NameAlreadyUsedInParameterList(name, first_use_span) => {\n-                let mut err = struct_span_err!(self.session,\n-                                                span,\n-                                                E0403,\n-                                                \"the name `{}` is already used for a generic \\\n-                                                parameter in this list of generic parameters\",\n-                                                name);\n+                let mut err = struct_span_err!(\n+                    self.session,\n+                    span,\n+                    E0403,\n+                    \"the name `{}` is already used for a generic \\\n+                     parameter in this item's generic parameters\",\n+                    name,\n+                );\n                 err.span_label(span, \"already used\");\n                 err.span_label(first_use_span, format!(\"first use of `{}`\", name));\n                 err"}, {"sha": "1faaf97e981c14fed761bb802019e1098eb264b4", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -526,15 +526,25 @@ Some type parameters have the same name.\n Erroneous code example:\n \n ```compile_fail,E0403\n-fn foo<T, T>(s: T, u: T) {} // error: the name `T` is already used for a type\n-                            //        parameter in this type parameter list\n+fn f<T, T>(s: T, u: T) {} // error: the name `T` is already used for a generic\n+                          //        parameter in this item's generic parameters\n ```\n \n Please verify that none of the type parameters are misspelled, and rename any\n clashing parameters. Example:\n \n ```\n-fn foo<T, Y>(s: T, u: Y) {} // ok!\n+fn f<T, Y>(s: T, u: Y) {} // ok!\n+```\n+\n+Type parameters in an associated item also cannot shadow parameters from the\n+containing item:\n+\n+```compile_fail,E0403\n+trait Foo<T> {\n+    fn do_something(&self) -> T;\n+    fn do_something_else<T: Clone>(&self, bar: T);\n+}\n ```\n \"##,\n "}, {"sha": "e15d02a9f7ec7abcd69bc082aaf9a6ecd9b64a0b", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -111,6 +111,24 @@ crate enum RibKind<'a> {\n     TyParamAsConstParamTy,\n }\n \n+impl RibKind<'_> {\n+    // Whether this rib kind contains generic parameters, as opposed to local\n+    // variables.\n+    crate fn contains_params(&self) -> bool {\n+        match self {\n+            NormalRibKind\n+            | FnItemRibKind\n+            | ConstantItemRibKind\n+            | ModuleRibKind(_)\n+            | MacroDefinition(_) => false,\n+            AssocItemRibKind\n+            | ItemRibKind\n+            | ForwardTyParamBanRibKind\n+            | TyParamAsConstParamTy => true,\n+        }\n+    }\n+}\n+\n /// A single local scope.\n ///\n /// A rib represents a scope names can live in. Note that these appear in many places, not just\n@@ -798,6 +816,19 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                 let mut function_type_rib = Rib::new(rib_kind);\n                 let mut function_value_rib = Rib::new(rib_kind);\n                 let mut seen_bindings = FxHashMap::default();\n+                // We also can't shadow bindings from the parent item\n+                if let AssocItemRibKind = rib_kind {\n+                    let mut add_bindings_for_ns = |ns| {\n+                        let parent_rib = self.ribs[ns].iter()\n+                            .rfind(|rib| if let ItemRibKind = rib.kind { true } else { false })\n+                            .expect(\"associated item outside of an item\");\n+                        seen_bindings.extend(\n+                            parent_rib.bindings.iter().map(|(ident, _)| (*ident, ident.span)),\n+                        );\n+                    };\n+                    add_bindings_for_ns(ValueNS);\n+                    add_bindings_for_ns(TypeNS);\n+                }\n                 for param in &generics.params {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {}"}, {"sha": "984473d781e62c0355611f1685d9932a8f6ab173", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1499,7 +1499,7 @@ impl<'a> Resolver<'a> {\n             debug!(\"walk rib\\n{:?}\", ribs[i].bindings);\n             // Use the rib kind to determine whether we are resolving parameters\n             // (modern hygiene) or local variables (legacy hygiene).\n-            let rib_ident = if let AssocItemRibKind | ItemRibKind = ribs[i].kind {\n+            let rib_ident = if ribs[i].kind.contains_params() {\n                 modern_ident\n             } else {\n                 ident"}, {"sha": "28a1ccda4d84187f334fb4c3facbddbba8c8ea86", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -203,7 +203,6 @@ fn check_associated_item(\n                 fcx.register_wf_obligation(ty, span, code.clone());\n             }\n             ty::AssocKind::Method => {\n-                reject_shadowing_parameters(fcx.tcx, item.def_id);\n                 let sig = fcx.tcx.fn_sig(item.def_id);\n                 let sig = fcx.normalize_associated_types_in(span, &sig);\n                 check_fn_or_method(tcx, fcx, span, sig,\n@@ -998,34 +997,6 @@ fn report_bivariance(tcx: TyCtxt<'_>, span: Span, param_name: ast::Name) {\n     err.emit();\n }\n \n-fn reject_shadowing_parameters(tcx: TyCtxt<'_>, def_id: DefId) {\n-    let generics = tcx.generics_of(def_id);\n-    let parent = tcx.generics_of(generics.parent.unwrap());\n-    let impl_params: FxHashMap<_, _> = parent.params.iter().flat_map(|param| match param.kind {\n-        GenericParamDefKind::Lifetime => None,\n-        GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n-            Some((param.name, param.def_id))\n-        }\n-    }).collect();\n-\n-    for method_param in &generics.params {\n-        // Shadowing is checked in `resolve_lifetime`.\n-        if let GenericParamDefKind::Lifetime = method_param.kind {\n-            continue\n-        }\n-        if impl_params.contains_key(&method_param.name) {\n-            // Tighten up the span to focus on only the shadowing type.\n-            let type_span = tcx.def_span(method_param.def_id);\n-\n-            // The expectation here is that the original trait declaration is\n-            // local so it should be okay to just unwrap everything.\n-            let trait_def_id = impl_params[&method_param.name];\n-            let trait_decl_span = tcx.def_span(trait_def_id);\n-            error_194(tcx, type_span, trait_decl_span, &method_param.name.as_str()[..]);\n-        }\n-    }\n-}\n-\n /// Feature gates RFC 2056 -- trivial bounds, checking for global bounds that\n /// aren't true.\n fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, span: Span, id: hir::HirId) {\n@@ -1152,12 +1123,3 @@ fn error_392(\n     err.span_label(span, \"unused parameter\");\n     err\n }\n-\n-fn error_194(tcx: TyCtxt<'_>, span: Span, trait_decl_span: Span, name: &str) {\n-    struct_span_err!(tcx.sess, span, E0194,\n-                     \"type parameter `{}` shadows another type parameter of the same name\",\n-                     name)\n-        .span_label(span, \"shadows another type parameter\")\n-        .span_label(trait_decl_span, format!(\"first `{}` declared here\", name))\n-        .emit();\n-}"}, {"sha": "ca9ce3d22b5cb0dcb2c3858412dcc0386147dab2", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1718,22 +1718,6 @@ Since we know for certain that `Wrapper<u32>` implements `Clone`, there's no\n reason to also specify it in a `where` clause.\n \"##,\n \n-E0194: r##\"\n-A type parameter was declared which shadows an existing one. An example of this\n-error:\n-\n-```compile_fail,E0194\n-trait Foo<T> {\n-    fn do_something(&self) -> T;\n-    fn do_something_else<T: Clone>(&self, bar: T);\n-}\n-```\n-\n-In this example, the trait `Foo` and the trait method `do_something_else` both\n-define a type parameter `T`. This is not allowed: if the method wishes to\n-define a type parameter, it must use a different name for it.\n-\"##,\n-\n E0195: r##\"\n Your method's lifetime parameters do not match the trait declaration.\n Erroneous code example:\n@@ -4837,6 +4821,7 @@ register_diagnostics! {\n //  E0188, // can not cast an immutable reference to a mutable pointer\n //  E0189, // deprecated: can only cast a boxed pointer to a boxed object\n //  E0190, // deprecated: can only cast a &-pointer to an &-object\n+//  E0194, // merged into E0403\n //  E0196, // cannot determine a type for this closure\n     E0203, // type parameter has more than one relaxed default bound,\n            // and only one is supported"}, {"sha": "9091607629e0fabae7c1938ff9c8c1b8e2a4f926", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -5,7 +5,7 @@ pub use UnsafeSource::*;\n pub use crate::symbol::{Ident, Symbol as Name};\n pub use crate::util::parser::ExprPrecedence;\n \n-use crate::ext::hygiene::{ExpnId, SyntaxContext};\n+use crate::ext::hygiene::ExpnId;\n use crate::parse::token::{self, DelimToken};\n use crate::print::pprust;\n use crate::ptr::P;\n@@ -1782,7 +1782,6 @@ pub struct InlineAsm {\n     pub volatile: bool,\n     pub alignstack: bool,\n     pub dialect: AsmDialect,\n-    pub ctxt: SyntaxContext,\n }\n \n /// An argument in a function header.\n@@ -2030,7 +2029,6 @@ pub struct ForeignMod {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub struct GlobalAsm {\n     pub asm: Symbol,\n-    pub ctxt: SyntaxContext,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "18d4a6463558d6114041ba2b3802a8f88c6ada90", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1182,7 +1182,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { node, id, span, attrs }: &mut Expr,\n         }\n         ExprKind::InlineAsm(asm) => {\n             let InlineAsm { asm: _, asm_str_style: _, outputs, inputs, clobbers: _, volatile: _,\n-                            alignstack: _, dialect: _, ctxt: _ } = asm.deref_mut();\n+                            alignstack: _, dialect: _ } = asm.deref_mut();\n             for out in outputs {\n                 let InlineAsmOutput { constraint: _, expr, is_rw: _, is_indirect: _ } = out;\n                 vis.visit_expr(expr);"}, {"sha": "644a44f1989dbd5d6e75b2628cf80dfd20116f3f", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -63,7 +63,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n     MacEager::expr(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprKind::InlineAsm(P(inline_asm)),\n-        span: sp,\n+        span: sp.with_ctxt(cx.backtrace()),\n         attrs: ThinVec::new(),\n     }))\n }\n@@ -277,6 +277,5 @@ fn parse_inline_asm<'a>(\n         volatile,\n         alignstack,\n         dialect,\n-        ctxt: cx.backtrace(),\n     }))\n }"}, {"sha": "55687c3175b9dbfe83f82a5fd4945eb1341522b4", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -43,17 +43,18 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt<'_>,\n }\n \n \n-pub fn ordering_collapsed(cx: &mut ExtCtxt<'_>,\n-                          span: Span,\n-                          self_arg_tags: &[ast::Ident])\n-                          -> P<ast::Expr> {\n+pub fn ordering_collapsed(\n+    cx: &mut ExtCtxt<'_>,\n+    span: Span,\n+    self_arg_tags: &[ast::Ident],\n+) -> P<ast::Expr> {\n     let lft = cx.expr_ident(span, self_arg_tags[0]);\n     let rgt = cx.expr_addr_of(span, cx.expr_ident(span, self_arg_tags[1]));\n-    cx.expr_method_call(span, lft, cx.ident_of(\"cmp\"), vec![rgt])\n+    cx.expr_method_call(span, lft, ast::Ident::new(sym::cmp, span), vec![rgt])\n }\n \n pub fn cs_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n-    let test_id = cx.ident_of(\"cmp\").gensym();\n+    let test_id = ast::Ident::new(sym::cmp, span);\n     let equals_path = cx.path_global(span, cx.std_path(&[sym::cmp, sym::Ordering, sym::Equal]));\n \n     let cmp_path = cx.std_path(&[sym::cmp, sym::Ord, sym::cmp]);\n@@ -75,34 +76,34 @@ pub fn cs_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<\n             // as the outermost one, and the last as the innermost.\n             false,\n             |cx, span, old, self_f, other_fs| {\n-        // match new {\n-        //     ::std::cmp::Ordering::Equal => old,\n-        //     cmp => cmp\n-        // }\n+                // match new {\n+                //     ::std::cmp::Ordering::Equal => old,\n+                //     cmp => cmp\n+                // }\n \n-        let new = {\n-            let other_f = match other_fs {\n-                [o_f] => o_f,\n-                _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(Ord)`\"),\n-            };\n+                let new = {\n+                    let other_f = match other_fs {\n+                        [o_f] => o_f,\n+                        _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(Ord)`\"),\n+                    };\n \n-            let args = vec![\n-                    cx.expr_addr_of(span, self_f),\n-                    cx.expr_addr_of(span, other_f.clone()),\n-                ];\n+                    let args = vec![\n+                            cx.expr_addr_of(span, self_f),\n+                            cx.expr_addr_of(span, other_f.clone()),\n+                        ];\n \n-            cx.expr_call_global(span, cmp_path.clone(), args)\n-        };\n+                    cx.expr_call_global(span, cmp_path.clone(), args)\n+                };\n \n-        let eq_arm = cx.arm(span,\n-                            vec![cx.pat_path(span, equals_path.clone())],\n-                            old);\n-        let neq_arm = cx.arm(span,\n-                             vec![cx.pat_ident(span, test_id)],\n-                             cx.expr_ident(span, test_id));\n+                let eq_arm = cx.arm(span,\n+                                    vec![cx.pat_path(span, equals_path.clone())],\n+                                    old);\n+                let neq_arm = cx.arm(span,\n+                                     vec![cx.pat_ident(span, test_id)],\n+                                     cx.expr_ident(span, test_id));\n \n-        cx.expr_match(span, new, vec![eq_arm, neq_arm])\n-    },\n+                cx.expr_match(span, new, vec![eq_arm, neq_arm])\n+            },\n             cx.expr_path(equals_path.clone()),\n             Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n         if self_args.len() != 2 {"}, {"sha": "740b92a9b7978bbf9ac21a122bcbf0524450de17", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -94,11 +94,12 @@ pub enum OrderingOp {\n     GeOp,\n }\n \n-pub fn some_ordering_collapsed(cx: &mut ExtCtxt<'_>,\n-                               span: Span,\n-                               op: OrderingOp,\n-                               self_arg_tags: &[ast::Ident])\n-                               -> P<ast::Expr> {\n+pub fn some_ordering_collapsed(\n+    cx: &mut ExtCtxt<'_>,\n+    span: Span,\n+    op: OrderingOp,\n+    self_arg_tags: &[ast::Ident],\n+) -> P<ast::Expr> {\n     let lft = cx.expr_ident(span, self_arg_tags[0]);\n     let rgt = cx.expr_addr_of(span, cx.expr_ident(span, self_arg_tags[1]));\n     let op_str = match op {\n@@ -108,11 +109,11 @@ pub fn some_ordering_collapsed(cx: &mut ExtCtxt<'_>,\n         GtOp => \"gt\",\n         GeOp => \"ge\",\n     };\n-    cx.expr_method_call(span, lft, cx.ident_of(op_str), vec![rgt])\n+    cx.expr_method_call(span, lft, ast::Ident::from_str_and_span(op_str, span), vec![rgt])\n }\n \n pub fn cs_partial_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n-    let test_id = cx.ident_of(\"cmp\").gensym();\n+    let test_id = ast::Ident::new(sym::cmp, span);\n     let ordering = cx.path_global(span, cx.std_path(&[sym::cmp, sym::Ordering, sym::Equal]));\n     let ordering_expr = cx.expr_path(ordering.clone());\n     let equals_expr = cx.expr_some(span, ordering_expr);"}, {"sha": "441535410480b678593f9025868dd0e1c2d84924", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -62,7 +62,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n     // We want to make sure we have the ctxt set so that we can use unstable methods\n     let span = span.with_ctxt(cx.backtrace());\n     let name = cx.expr_lit(span, ast::LitKind::Str(ident.name, ast::StrStyle::Cooked));\n-    let builder = Ident::from_str(\"debug_trait_builder\").gensym();\n+    let builder = Ident::from_str_and_span(\"debug_trait_builder\", span);\n     let builder_expr = cx.expr_ident(span, builder.clone());\n \n     let fmt = substr.nonself_args[0].clone();\n@@ -73,7 +73,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n             // tuple struct/\"normal\" variant\n             let expr =\n                 cx.expr_method_call(span, fmt, Ident::from_str(\"debug_tuple\"), vec![name]);\n-            stmts.push(cx.stmt_let(DUMMY_SP, true, builder, expr));\n+            stmts.push(cx.stmt_let(span, true, builder, expr));\n \n             for field in fields {\n                 // Use double indirection to make sure this works for unsized types\n@@ -82,7 +82,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n \n                 let expr = cx.expr_method_call(span,\n                                                 builder_expr.clone(),\n-                                                Ident::with_dummy_span(sym::field),\n+                                                Ident::new(sym::field, span),\n                                                 vec![field]);\n \n                 // Use `let _ = expr;` to avoid triggering the\n@@ -106,7 +106,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n                 let field = cx.expr_addr_of(field.span, field);\n                 let expr = cx.expr_method_call(span,\n                                                 builder_expr.clone(),\n-                                                Ident::with_dummy_span(sym::field),\n+                                                Ident::new(sym::field, span),\n                                                 vec![name, field]);\n                 stmts.push(stmt_let_undescore(cx, span, expr));\n             }"}, {"sha": "9b6f8518de046dc16e2049aa593150d06ed5909f", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1,6 +1,6 @@\n-//! The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more.\n+//! The compiler code necessary for `#[derive(RustcDecodable)]`. See encodable.rs for more.\n \n-use crate::deriving::{self, pathvec_std};\n+use crate::deriving::pathvec_std;\n use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n@@ -17,7 +17,7 @@ pub fn expand_deriving_rustc_decodable(cx: &mut ExtCtxt<'_>,\n                                        item: &Annotatable,\n                                        push: &mut dyn FnMut(Annotatable)) {\n     let krate = \"rustc_serialize\";\n-    let typaram = &*deriving::hygienic_type_parameter(item, \"__D\");\n+    let typaram = \"__D\";\n \n     let trait_def = TraitDef {\n         span,"}, {"sha": "8b18fb25e90c121e7bea4120927c5f5111d3f483", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1,11 +1,12 @@\n-//! The compiler code necessary to implement the `#[derive(Encodable)]`\n-//! (and `Decodable`, in `decodable.rs`) extension. The idea here is that\n-//! type-defining items may be tagged with `#[derive(Encodable, Decodable)]`.\n+//! The compiler code necessary to implement the `#[derive(RustcEncodable)]`\n+//! (and `RustcDecodable`, in `decodable.rs`) extension. The idea here is that\n+//! type-defining items may be tagged with\n+//! `#[derive(RustcEncodable, RustcDecodable)]`.\n //!\n //! For example, a type like:\n //!\n //! ```\n-//! #[derive(Encodable, Decodable)]\n+//! #[derive(RustcEncodable, RustcDecodable)]\n //! struct Node { id: usize }\n //! ```\n //!\n@@ -40,15 +41,17 @@\n //! references other non-built-in types. A type definition like:\n //!\n //! ```\n-//! # #[derive(Encodable, Decodable)] struct Span;\n-//! #[derive(Encodable, Decodable)]\n+//! # #[derive(RustcEncodable, RustcDecodable)]\n+//! # struct Span;\n+//! #[derive(RustcEncodable, RustcDecodable)]\n //! struct Spanned<T> { node: T, span: Span }\n //! ```\n //!\n //! would yield functions like:\n //!\n //! ```\n-//! # #[derive(Encodable, Decodable)] struct Span;\n+//! # #[derive(RustcEncodable, RustcDecodable)]\n+//! # struct Span;\n //! # struct Spanned<T> { node: T, span: Span }\n //! impl<\n //!     S: Encoder<E>,\n@@ -82,7 +85,7 @@\n //! }\n //! ```\n \n-use crate::deriving::{self, pathvec_std};\n+use crate::deriving::pathvec_std;\n use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n@@ -98,7 +101,7 @@ pub fn expand_deriving_rustc_encodable(cx: &mut ExtCtxt<'_>,\n                                        item: &Annotatable,\n                                        push: &mut dyn FnMut(Annotatable)) {\n     let krate = \"rustc_serialize\";\n-    let typaram = &*deriving::hygienic_type_parameter(item, \"__S\");\n+    let typaram = \"__S\";\n \n     let trait_def = TraitDef {\n         span,"}, {"sha": "1475bac0688460444c50fe5f7688048251c813b8", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -890,7 +890,7 @@ impl<'a> MethodDef<'a> {\n \n         for (ty, name) in self.args.iter() {\n             let ast_ty = ty.to_ty(cx, trait_.span, type_ident, generics);\n-            let ident = cx.ident_of(name).gensym();\n+            let ident = ast::Ident::from_str_and_span(name, trait_.span);\n             arg_tys.push((ident, ast_ty));\n \n             let arg_expr = cx.expr_ident(trait_.span, ident);\n@@ -1210,7 +1210,7 @@ impl<'a> MethodDef<'a> {\n         let vi_idents = self_arg_names.iter()\n             .map(|name| {\n                 let vi_suffix = format!(\"{}_vi\", &name[..]);\n-                cx.ident_of(&vi_suffix[..]).gensym()\n+                ast::Ident::from_str_and_span(&vi_suffix[..], trait_.span)\n             })\n             .collect::<Vec<ast::Ident>>();\n \n@@ -1387,7 +1387,10 @@ impl<'a> MethodDef<'a> {\n                 let variant_value =\n                     deriving::call_intrinsic(cx, sp, \"discriminant_value\", vec![self_addr]);\n \n-                let target_ty = cx.ty_ident(sp, cx.ident_of(target_type_name));\n+                let target_ty = cx.ty_ident(\n+                    sp,\n+                    ast::Ident::from_str_and_span(target_type_name, sp),\n+                );\n                 let variant_disr = cx.expr_cast(sp, variant_value, target_ty);\n                 let let_stmt = cx.stmt_let(sp, false, ident, variant_disr);\n                 index_let_stmts.push(let_stmt);\n@@ -1588,7 +1591,7 @@ impl<'a> TraitDef<'a> {\n         let mut ident_exprs = Vec::new();\n         for (i, struct_field) in struct_def.fields().iter().enumerate() {\n             let sp = struct_field.span.with_ctxt(self.span.ctxt());\n-            let ident = cx.ident_of(&format!(\"{}_{}\", prefix, i)).gensym();\n+            let ident = ast::Ident::from_str_and_span(&format!(\"{}_{}\", prefix, i), self.span);\n             paths.push(ident.with_span_pos(sp));\n             let val = cx.expr_path(cx.path_ident(sp, ident));\n             let val = if use_temporaries {"}, {"sha": "7fcf036fc817690de2c57b082cd317dc8ae68918", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -72,7 +72,7 @@ impl<'a> Path<'a> {\n                    self_ty: Ident,\n                    self_generics: &Generics)\n                    -> ast::Path {\n-        let mut idents = self.path.iter().map(|s| cx.ident_of(*s)).collect();\n+        let mut idents = self.path.iter().map(|s| Ident::from_str_and_span(*s, span)).collect();\n         let lt = mk_lifetimes(cx, span, &self.lifetime);\n         let tys: Vec<P<ast::Ty>> =\n             self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics)).collect();\n@@ -209,7 +209,7 @@ fn mk_ty_param(cx: &ExtCtxt<'_>,\n             cx.trait_bound(path)\n         })\n         .collect();\n-    cx.typaram(span, cx.ident_of(name), attrs.to_owned(), bounds, None)\n+    cx.typaram(span, ast::Ident::from_str_and_span(name, span), attrs.to_owned(), bounds, None)\n }\n \n fn mk_generics(params: Vec<ast::GenericParam>, span: Span) -> Generics {"}, {"sha": "2fc594abd705e38290571dbc5a4a3b1fb6e27b21", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -16,7 +16,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt<'_>,\n \n     let path = Path::new_(pathvec_std!(cx, hash::Hash), None, vec![], PathKind::Std);\n \n-    let typaram = &*deriving::hygienic_type_parameter(item, \"__H\");\n+    let typaram = \"__H\";\n \n     let arg = Path::new_local(typaram);\n     let hash_trait_def = TraitDef {"}, {"sha": "da68eea0c50e72606f7f845eb8c036749b5163ed", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -54,33 +54,6 @@ impl MultiItemModifier for BuiltinDerive {\n     }\n }\n \n-/// Construct a name for the inner type parameter that can't collide with any type parameters of\n-/// the item. This is achieved by starting with a base and then concatenating the names of all\n-/// other type parameters.\n-// FIXME(aburka): use real hygiene when that becomes possible\n-fn hygienic_type_parameter(item: &Annotatable, base: &str) -> String {\n-    let mut typaram = String::from(base);\n-    if let Annotatable::Item(ref item) = *item {\n-        match item.node {\n-            ast::ItemKind::Struct(_, ast::Generics { ref params, .. }) |\n-            ast::ItemKind::Enum(_, ast::Generics { ref params, .. }) => {\n-                for param in params {\n-                    match param.kind {\n-                        ast::GenericParamKind::Type { .. } => {\n-                            typaram.push_str(&param.ident.as_str());\n-                        }\n-                        _ => {}\n-                    }\n-                }\n-            }\n-\n-            _ => {}\n-        }\n-    }\n-\n-    typaram\n-}\n-\n /// Constructs an expression that calls an intrinsic\n fn call_intrinsic(cx: &ExtCtxt<'_>,\n                   span: Span,"}, {"sha": "73ebeaec454975c9e17b237c8c6185c63c41fe6d", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -30,7 +30,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                 id: ast::DUMMY_NODE_ID,\n                 node: ast::ItemKind::GlobalAsm(P(global_asm)),\n                 vis: respan(sp.shrink_to_lo(), ast::VisibilityKind::Inherited),\n-                span: sp,\n+                span: sp.with_ctxt(cx.backtrace()),\n                 tokens: None,\n             })])\n         }\n@@ -61,8 +61,5 @@ fn parse_global_asm<'a>(\n         None => return Ok(None),\n     };\n \n-    Ok(Some(ast::GlobalAsm {\n-        asm,\n-        ctxt: cx.backtrace(),\n-    }))\n+    Ok(Some(ast::GlobalAsm { asm }))\n }"}, {"sha": "ebfb0764fa2b2c684f8b8c7db216b686d44f85e1", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -750,15 +750,3 @@ impl Decodable for ExpnId {\n         Ok(ExpnId::root()) // FIXME(jseyfried) intercrate hygiene\n     }\n }\n-\n-impl Encodable for SyntaxContext {\n-    fn encode<E: Encoder>(&self, _: &mut E) -> Result<(), E::Error> {\n-        Ok(()) // FIXME(jseyfried) intercrate hygiene\n-    }\n-}\n-\n-impl Decodable for SyntaxContext {\n-    fn decode<D: Decoder>(_: &mut D) -> Result<Self, D::Error> {\n-        Ok(SyntaxContext::root()) // FIXME(jseyfried) intercrate hygiene\n-    }\n-}"}, {"sha": "bed898f10b432ee64e301b8c09231d2cb99298da", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::newtype_index;\n use rustc_macros::symbols;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize::{UseSpecializedDecodable, UseSpecializedEncodable};\n \n use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n use std::fmt;\n@@ -847,28 +848,9 @@ impl fmt::Display for Ident {\n     }\n }\n \n-impl Encodable for Ident {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        if !self.span.modern().from_expansion() {\n-            s.emit_str(&self.as_str())\n-        } else { // FIXME(jseyfried): intercrate hygiene\n-            let mut string = \"#\".to_owned();\n-            string.push_str(&self.as_str());\n-            s.emit_str(&string)\n-        }\n-    }\n-}\n+impl UseSpecializedEncodable for Ident {}\n \n-impl Decodable for Ident {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Ident, D::Error> {\n-        let string = d.read_str()?;\n-        Ok(if !string.starts_with('#') {\n-            Ident::from_str(&string)\n-        } else { // FIXME(jseyfried): intercrate hygiene\n-            Ident::from_str(&string[1..]).gensym()\n-        })\n-    }\n-}\n+impl UseSpecializedDecodable for Ident {}\n \n /// A symbol is an interned or gensymed string. A gensym is a symbol that is\n /// never equal to any other symbol."}, {"sha": "4fa83c490383c3f9074e8ba99fb85e75433b54c5", "filename": "src/test/ui/derives/derive-hygiene.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fderives%2Fderive-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fderives%2Fderive-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-hygiene.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -0,0 +1,121 @@\n+// Make sure that built-in derives don't rely on the user not declaring certain\n+// names to work properly.\n+\n+// check-pass\n+\n+#![allow(nonstandard_style)]\n+#![feature(decl_macro)]\n+\n+use std::prelude::v1::test as inline;\n+\n+static f: () = ();\n+static cmp: () = ();\n+static other: () = ();\n+static state: () = ();\n+static __self_0_0: () = ();\n+static __self_1_0: () = ();\n+static __self_vi: () = ();\n+static __arg_1_0: () = ();\n+static debug_trait_builder: () = ();\n+\n+struct isize;\n+trait i16 {}\n+\n+trait MethodsInDerives: Sized {\n+    fn debug_tuple(self) {}\n+    fn debug_struct(self) {}\n+    fn field(self) {}\n+    fn finish(self) {}\n+    fn clone(self) {}\n+    fn cmp(self) {}\n+    fn partial_cmp(self) {}\n+    fn eq(self) {}\n+    fn ne(self) {}\n+    fn le(self) {}\n+    fn lt(self) {}\n+    fn ge(self) {}\n+    fn gt(self) {}\n+    fn hash(self) {}\n+}\n+\n+trait GenericAny<T, U> {}\n+impl<S, T, U> GenericAny<T, U> for S {}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+enum __H { V(i32), }\n+\n+#[repr(i16)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+enum W { A, B }\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Default, Hash)]\n+struct X<A: GenericAny<A, self::X<i32>>> {\n+    A: A,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Default, Hash)]\n+struct Y<B>(B)\n+where\n+    B: From<B>;\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+enum Z<C> {\n+    C(C),\n+    B { C: C },\n+}\n+\n+// Make sure that we aren't using `self::` in paths, since it doesn't work in\n+// non-module scopes.\n+const NON_MODULE: () = {\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+    enum __H { V(i32), }\n+\n+    #[repr(i16)]\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+    enum W { A, B }\n+\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Default, Hash)]\n+    struct X<A: Fn(A) -> self::X<i32>> {\n+        A: A,\n+    }\n+\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Default, Hash)]\n+    struct Y<B>(B)\n+    where\n+        B: From<B>;\n+\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+    enum Z<C> {\n+        C(C),\n+        B { C: C },\n+    }\n+};\n+\n+macro m() {\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+    enum __H { V(i32), }\n+\n+    #[repr(i16)]\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+    enum W { A, B }\n+\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Default, Hash)]\n+    struct X<A: GenericAny<A, self::X<i32>>> {\n+        A: A,\n+    }\n+\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Default, Hash)]\n+    struct Y<B>(B)\n+    where\n+        B: From<B>;\n+\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+    enum Z<C> {\n+        C(C),\n+        B { C: C },\n+    }\n+}\n+\n+m!();\n+\n+fn main() {}"}, {"sha": "6754574f0b953673bbe7034498d4d5445f5e6b67", "filename": "src/test/ui/duplicate/duplicate-type-parameter.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-type-parameter.stderr?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1,52 +1,52 @@\n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:1:12\n    |\n LL | type Foo<T,T> = Option<T>;\n    |          - ^ already used\n    |          |\n    |          first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:4:14\n    |\n LL | struct Bar<T,T>(T);\n    |            - ^ already used\n    |            |\n    |            first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:7:14\n    |\n LL | struct Baz<T,T> {\n    |            - ^ already used\n    |            |\n    |            first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:12:12\n    |\n LL | enum Boo<T,T> {\n    |          - ^ already used\n    |          |\n    |          first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:18:11\n    |\n LL | fn quux<T,T>(x: T) {}\n    |         - ^ already used\n    |         |\n    |         first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:21:13\n    |\n LL | trait Qux<T,T> {}\n    |           - ^ already used\n    |           |\n    |           first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:24:8\n    |\n LL | impl<T,T> Qux<T,T> for Option<T> {}"}, {"sha": "8a43f38fcfd5ff159999c51a32c72d4c4fd73b6b", "filename": "src/test/ui/error-codes/E0194.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Ferror-codes%2FE0194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Ferror-codes%2FE0194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0194.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1,7 +1,7 @@\n trait Foo<T> {\n     fn do_something(&self) -> T;\n     fn do_something_else<T: Clone>(&self, bar: T);\n-    //~^ ERROR E0194\n+    //~^ ERROR E0403\n }\n \n fn main() {"}, {"sha": "f2c908eea0bb094bb4484a11f9cf0056b8913542", "filename": "src/test/ui/error-codes/E0194.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1,12 +1,12 @@\n-error[E0194]: type parameter `T` shadows another type parameter of the same name\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/E0194.rs:3:26\n    |\n LL | trait Foo<T> {\n-   |           - first `T` declared here\n+   |           - first use of `T`\n LL |     fn do_something(&self) -> T;\n LL |     fn do_something_else<T: Clone>(&self, bar: T);\n-   |                          ^ shadows another type parameter\n+   |                          ^ already used\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0194`.\n+For more information about this error, try `rustc --explain E0403`."}, {"sha": "d76a58a7c80de33bcb13b5b1d00b4f95a9f33fb2", "filename": "src/test/ui/error-codes/E0403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1,4 +1,4 @@\n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/E0403.rs:1:11\n    |\n LL | fn foo<T, T>(s: T, u: T) {}"}, {"sha": "74afedbeb77ce53063d6bb4ff9b18f2f14ca07b3", "filename": "src/test/ui/hygiene/auxiliary/codegen-attrs.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fcodegen-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fcodegen-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fcodegen-attrs.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -0,0 +1,10 @@\n+#![feature(decl_macro)]\n+\n+macro m($f:ident) {\n+    #[export_name = \"export_function_name\"]\n+    pub fn $f() -> i32 {\n+        2\n+    }\n+}\n+\n+m!(rust_function_name);"}, {"sha": "af6b1334387eabcf494199a33ac652115963b218", "filename": "src/test/ui/hygiene/cross-crate-codegen-attrs.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-codegen-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-codegen-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-codegen-attrs.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -0,0 +1,12 @@\n+// Make sure that macro expanded codegen attributes work across crates.\n+// We used to gensym the identifiers in attributes, which stopped dependent\n+// crates from seeing them, resulting in linker errors in cases like this one.\n+\n+// run-pass\n+// aux-build:codegen-attrs.rs\n+\n+extern crate codegen_attrs;\n+\n+fn main() {\n+    assert_eq!(codegen_attrs::rust_function_name(), 2);\n+}"}, {"sha": "f5197fd01bfd6cd8a724007ba53e21d13060653d", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1,32 +1,30 @@\n+#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n-//FIXME(#44265): The lifetime shadowing and type parameter shadowing\n-// should cause an error. Now it compiles (erroneously) and this will be addressed\n-// by a future PR. Then remove the following:\n-// build-pass (FIXME(62277): could be check-pass?)\n-\n trait Shadow<'a> {\n-    type Bar<'a>; // Error: shadowed lifetime\n+    //FIXME(#44265): The lifetime parameter shadowing should cause an error.\n+    type Bar<'a>;\n }\n \n trait NoShadow<'a> {\n     type Bar<'b>; // OK\n }\n \n impl<'a> NoShadow<'a> for &'a u32 {\n-    type Bar<'a> = i32; // Error: shadowed lifetime\n+    //FIXME(#44265): The lifetime parameter shadowing should cause an error.\n+    type Bar<'a> = i32;\n }\n \n trait ShadowT<T> {\n-    type Bar<T>; // Error: shadowed type parameter\n+    type Bar<T>; //~ ERROR the name `T` is already used\n }\n \n trait NoShadowT<T> {\n     type Bar<U>; // OK\n }\n \n impl<T> NoShadowT<T> for Option<T> {\n-    type Bar<T> = i32; // Error: shadowed type parameter\n+    type Bar<T> = i32; //~ ERROR the name `T` is already used\n }\n \n fn main() {}"}, {"sha": "a06c635084525200067ecf23e0567a74138c379b", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1,8 +1,19 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/shadowing.rs:1:12\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/shadowing.rs:19:14\n    |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait ShadowT<T> {\n+   |               - first use of `T`\n+LL |     type Bar<T>;\n+   |              ^ already used\n+\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/shadowing.rs:27:14\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n+LL | impl<T> NoShadowT<T> for Option<T> {\n+   |      - first use of `T`\n+LL |     type Bar<T> = i32;\n+   |              ^ already used\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0403`."}, {"sha": "e74620f8900c08922d1bb81abc0ff2788e913d69", "filename": "src/test/ui/shadowed/shadowed-type-parameter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.rs?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -6,7 +6,7 @@ struct Foo<T>(T);\n \n impl<T> Foo<T> {\n     fn shadow_in_method<T>(&self) {}\n-    //~^ ERROR type parameter `T` shadows another type parameter\n+    //~^ ERROR the name `T` is already used\n \n     fn not_shadow_in_item<U>(&self) {\n         struct Bar<T, U>(T,U); // not a shadow, separate item\n@@ -18,10 +18,10 @@ trait Bar<T> {\n     fn dummy(&self) -> T;\n \n     fn shadow_in_required<T>(&self);\n-    //~^ ERROR type parameter `T` shadows another type parameter\n+    //~^ ERROR the name `T` is already used\n \n     fn shadow_in_provided<T>(&self) {}\n-    //~^ ERROR type parameter `T` shadows another type parameter\n+    //~^ ERROR the name `T` is already used\n \n     fn not_shadow_in_required<U>(&self);\n     fn not_shadow_in_provided<U>(&self) {}"}, {"sha": "0ea82f983f1a70806880925f1b1879e0bff182af", "filename": "src/test/ui/shadowed/shadowed-type-parameter.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d65e272a9fe3e61aa5f229c5358e35a909435575/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.stderr?ref=d65e272a9fe3e61aa5f229c5358e35a909435575", "patch": "@@ -1,29 +1,29 @@\n-error[E0194]: type parameter `T` shadows another type parameter of the same name\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/shadowed-type-parameter.rs:8:25\n+   |\n+LL | impl<T> Foo<T> {\n+   |      - first use of `T`\n+LL |     fn shadow_in_method<T>(&self) {}\n+   |                         ^ already used\n+\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/shadowed-type-parameter.rs:20:27\n    |\n LL | trait Bar<T> {\n-   |           - first `T` declared here\n+   |           - first use of `T`\n ...\n LL |     fn shadow_in_required<T>(&self);\n-   |                           ^ shadows another type parameter\n+   |                           ^ already used\n \n-error[E0194]: type parameter `T` shadows another type parameter of the same name\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/shadowed-type-parameter.rs:23:27\n    |\n LL | trait Bar<T> {\n-   |           - first `T` declared here\n+   |           - first use of `T`\n ...\n LL |     fn shadow_in_provided<T>(&self) {}\n-   |                           ^ shadows another type parameter\n-\n-error[E0194]: type parameter `T` shadows another type parameter of the same name\n-  --> $DIR/shadowed-type-parameter.rs:8:25\n-   |\n-LL | impl<T> Foo<T> {\n-   |      - first `T` declared here\n-LL |     fn shadow_in_method<T>(&self) {}\n-   |                         ^ shadows another type parameter\n+   |                           ^ already used\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0194`.\n+For more information about this error, try `rustc --explain E0403`."}]}