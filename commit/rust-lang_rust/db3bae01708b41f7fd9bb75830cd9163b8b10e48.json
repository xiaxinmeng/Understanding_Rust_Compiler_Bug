{"sha": "db3bae01708b41f7fd9bb75830cd9163b8b10e48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiM2JhZTAxNzA4YjQxZjdmZDliYjc1ODMwY2Q5MTYzYjhiMTBlNDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-16T16:22:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-16T16:22:23Z"}, "message": "Rollup merge of #63495 - eddyb:mir-constant-ty, r=oli-obk\n\n Remove redundant `ty` fields from `mir::Constant` and `hair::pattern::PatternRange`.\n\nFixes #56137.\n\nAs a side-effect, associated const literals have the correct type now, which should make things easier for #61041.\n\nr? @oli-obk / @matthewjasper cc @davidtwco @varkor", "tree": {"sha": "314dad54a7a02fc82627056c2c06b7b42ecca147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/314dad54a7a02fc82627056c2c06b7b42ecca147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db3bae01708b41f7fd9bb75830cd9163b8b10e48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVtg/CRBK7hj4Ov3rIwAAdHIIADI/t8RlaGICHszLn6FW3jXI\nRROUcmucZBPQv6Rx5VrVDBB2tAG2GusS09NYAmxuMZ/EUaQCzPTJpsFWPSi9wtIY\norchDsyafZdX4FNKZVFBqHndJJFfheJF+0RoHX/YJnBRN51PLHlEAqObFXIrf1y7\nbqNbOvrzBzAHhtOXE1IpSEpnDnCL3ex+9TEw0cKLoiTtWkIyvL0Lg1TIMzRYN81l\nuGZKDBMejCTeWngWzUbJ6pbw5y4SLfLJwz9kZjur53TvelTqO8gfg6olgf6ZWvaj\ndu+f6scQ267Rx5cW7aV1WTpT3ZKwngncnCYvk82af8lSJujAZBqaFdWzls2PyVY=\n=Y5YA\n-----END PGP SIGNATURE-----\n", "payload": "tree 314dad54a7a02fc82627056c2c06b7b42ecca147\nparent aec047edebb596c79852fc78c5cfcddbae595c08\nparent 45980e809f6f661230af5a92766b8fde454aee2a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565972543 +0200\ncommitter GitHub <noreply@github.com> 1565972543 +0200\n\nRollup merge of #63495 - eddyb:mir-constant-ty, r=oli-obk\n\n Remove redundant `ty` fields from `mir::Constant` and `hair::pattern::PatternRange`.\n\nFixes #56137.\n\nAs a side-effect, associated const literals have the correct type now, which should make things easier for #61041.\n\nr? @oli-obk / @matthewjasper cc @davidtwco @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db3bae01708b41f7fd9bb75830cd9163b8b10e48", "html_url": "https://github.com/rust-lang/rust/commit/db3bae01708b41f7fd9bb75830cd9163b8b10e48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db3bae01708b41f7fd9bb75830cd9163b8b10e48/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec047edebb596c79852fc78c5cfcddbae595c08", "url": "https://api.github.com/repos/rust-lang/rust/commits/aec047edebb596c79852fc78c5cfcddbae595c08", "html_url": "https://github.com/rust-lang/rust/commit/aec047edebb596c79852fc78c5cfcddbae595c08"}, {"sha": "45980e809f6f661230af5a92766b8fde454aee2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/45980e809f6f661230af5a92766b8fde454aee2a", "html_url": "https://github.com/rust-lang/rust/commit/45980e809f6f661230af5a92766b8fde454aee2a"}], "stats": {"total": 243, "additions": 90, "deletions": 153}, "files": [{"sha": "11701a66377442f60f640bf1e01556df179c7ebd", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -2197,7 +2197,6 @@ impl<'tcx> Operand<'tcx> {\n         let ty = tcx.type_of(def_id).subst(tcx, substs);\n         Operand::Constant(box Constant {\n             span,\n-            ty,\n             user_ty: None,\n             literal: ty::Const::zero_sized(tcx, ty),\n         })\n@@ -2476,7 +2475,6 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n pub struct Constant<'tcx> {\n     pub span: Span,\n-    pub ty: Ty<'tcx>,\n \n     /// Optional user-given type: for something like\n     /// `collect::<Vec<_>>`, this would be present and would\n@@ -3385,12 +3383,11 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         Constant {\n             span: self.span.clone(),\n-            ty: self.ty.fold_with(folder),\n             user_ty: self.user_ty.fold_with(folder),\n             literal: self.literal.fold_with(folder),\n         }\n     }\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.ty.visit_with(visitor) || self.literal.visit_with(visitor)\n+        self.literal.visit_with(visitor)\n     }\n }"}, {"sha": "e9f7636ba85ae72b92bd730e0cfd51c1d9c22058", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -252,7 +252,7 @@ impl<'tcx> Operand<'tcx> {\n         match self {\n             &Operand::Copy(ref l) |\n             &Operand::Move(ref l) => l.ty(local_decls, tcx).ty,\n-            &Operand::Constant(ref c) => c.ty,\n+            &Operand::Constant(ref c) => c.literal.ty,\n         }\n     }\n }"}, {"sha": "2d16e7bcc83716aae59408ad7eb39434aec7e84b", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -782,13 +782,11 @@ macro_rules! make_mir_visitor {\n                               location: Location) {\n                 let Constant {\n                     span,\n-                    ty,\n                     user_ty,\n                     literal,\n                 } = constant;\n \n                 self.visit_span(span);\n-                self.visit_ty(ty, TyContext::Location(location));\n                 drop(user_ty); // no visit method for this\n                 self.visit_const(literal, location);\n             }"}, {"sha": "e63f1b91dd7d51d48d38b53ae615232d3487b6df", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -221,7 +221,7 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n             mir::TerminatorKind::Call {\n                 func: mir::Operand::Constant(ref c),\n                 ref args, ..\n-            } => match c.ty.sty {\n+            } => match c.literal.ty.sty {\n                 ty::FnDef(did, _) => Some((did, args)),\n                 _ => None,\n             },"}, {"sha": "dbce5ce4896a718f72e6ac17fd630262b807712a", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -651,7 +651,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             let (llval, ty) = self.simd_shuffle_indices(\n                                 &bx,\n                                 constant.span,\n-                                constant.ty,\n+                                constant.literal.ty,\n                                 c,\n                             );\n                             return OperandRef {"}, {"sha": "254b73da44261bd349b5f639e7c32fec6854c800", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -466,7 +466,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::Operand::Constant(ref constant) => {\n-                let ty = self.monomorphize(&constant.ty);\n                 self.eval_mir_constant(constant)\n                     .map(|c| OperandRef::from_const(bx, c))\n                     .unwrap_or_else(|err| {\n@@ -481,6 +480,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         // the above error (or silence it under some conditions) will not cause UB\n                         bx.abort();\n                         // We've errored, so we don't have to produce working code.\n+                        let ty = self.monomorphize(&constant.literal.ty);\n                         let layout = bx.cx().layout_of(ty);\n                         bx.load_operand(PlaceRef::new_sized(\n                             bx.cx().const_undef(bx.cx().type_ptr_to(bx.cx().backend_type(layout))),"}, {"sha": "9ff0c6ca6a546b6566e036c3f736d703a7e0560d", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -272,12 +272,11 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n \n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n-        self.sanitize_constant(constant, location);\n-        self.sanitize_type(constant, constant.ty);\n+        self.sanitize_type(constant, constant.literal.ty);\n \n         if let Some(annotation_index) = constant.user_ty {\n             if let Err(terr) = self.cx.relate_type_and_user_type(\n-                constant.ty,\n+                constant.literal.ty,\n                 ty::Variance::Invariant,\n                 &UserTypeProjection { base: annotation_index, projs: vec![], },\n                 location.to_locations(),\n@@ -289,7 +288,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                     constant,\n                     \"bad constant user type {:?} vs {:?}: {:?}\",\n                     annotation,\n-                    constant.ty,\n+                    constant.literal.ty,\n                     terr,\n                 );\n             }\n@@ -299,7 +298,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                     location.to_locations(),\n                     ConstraintCategory::Boring,\n                     self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n-                        constant.ty, def_id, UserSubsts { substs, user_self_ty: None },\n+                        constant.literal.ty, def_id, UserSubsts { substs, user_self_ty: None },\n                     )),\n                 ) {\n                     span_mirbug!(\n@@ -403,41 +402,6 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         }\n     }\n \n-    /// Checks that the constant's `ty` field matches up with what would be\n-    /// expected from its literal. Unevaluated constants and well-formed\n-    /// constraints are checked by `visit_constant`.\n-    fn sanitize_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n-        debug!(\n-            \"sanitize_constant(constant={:?}, location={:?})\",\n-            constant, location\n-        );\n-\n-        let literal = constant.literal;\n-\n-        if let ConstValue::Unevaluated(..) = literal.val {\n-            return;\n-        }\n-\n-        debug!(\"sanitize_constant: expected_ty={:?}\", literal.ty);\n-\n-        if let Err(terr) = self.cx.eq_types(\n-            literal.ty,\n-            constant.ty,\n-            location.to_locations(),\n-            ConstraintCategory::Boring,\n-        ) {\n-            span_mirbug!(\n-                self,\n-                constant,\n-                \"constant {:?} should have type {:?} but has {:?} ({:?})\",\n-                constant,\n-                literal.ty,\n-                constant.ty,\n-                terr,\n-            );\n-        }\n-    }\n-\n     /// Checks that the types internal to the `place` match up with\n     /// what would be expected.\n     fn sanitize_place("}, {"sha": "39bdc871d83c6deed23df26d770f9dd5eed88716", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -38,9 +38,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         inferred_ty: ty,\n                     })\n                 });\n+                assert_eq!(literal.ty, ty);\n                 Constant {\n                     span,\n-                    ty,\n                     user_ty,\n                     literal,\n                 }"}, {"sha": "1a186fa932ddb116e8a40556fbfc18999a6b0d3e", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -591,7 +591,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let n = (!0u128) >> (128 - bits);\n         let literal = ty::Const::from_bits(self.hir.tcx(), n, param_ty);\n \n-        self.literal_operand(span, ty, literal)\n+        self.literal_operand(span, literal)\n     }\n \n     // Helper to get the minimum value of the appropriate type\n@@ -602,6 +602,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let n = 1 << (bits - 1);\n         let literal = ty::Const::from_bits(self.hir.tcx(), n, param_ty);\n \n-        self.literal_operand(span, ty, literal)\n+        self.literal_operand(span, literal)\n     }\n }"}, {"sha": "889861b85674861b2d4caf181d900c081494da0a", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -114,7 +114,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     destination,\n                     Constant {\n                         span: expr_span,\n-                        ty: this.hir.bool_ty(),\n                         user_ty: None,\n                         literal: this.hir.true_literal(),\n                     },\n@@ -126,7 +125,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     destination,\n                     Constant {\n                         span: expr_span,\n-                        ty: this.hir.bool_ty(),\n                         user_ty: None,\n                         literal: this.hir.false_literal(),\n                     },"}, {"sha": "3473155a3ea3ed8c82a4b0861499b6e3e2aff182", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -108,8 +108,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Err(match_pair)\n             }\n \n-            PatternKind::Range(PatternRange { lo, hi, ty, end }) => {\n-                let (range, bias) = match ty.sty {\n+            PatternKind::Range(PatternRange { lo, hi, end }) => {\n+                let (range, bias) = match lo.ty.sty {\n                     ty::Char => {\n                         (Some(('\\u{0000}' as u128, '\\u{10FFFF}' as u128, Size::from_bits(32))), 0)\n                     }"}, {"sha": "65e92d422b0222202f340b75a39c60bddd2ab541", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -63,7 +63,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             PatternKind::Range(range) => {\n-                assert!(range.ty == match_pair.pattern.ty);\n+                assert_eq!(range.lo.ty, match_pair.pattern.ty);\n+                assert_eq!(range.hi.ty, match_pair.pattern.ty);\n                 Test {\n                     span: match_pair.pattern.span,\n                     kind: TestKind::Range(range),\n@@ -270,22 +271,23 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     );\n                 } else {\n                     if let [success, fail] = *make_target_blocks(self) {\n+                        assert_eq!(value.ty, ty);\n+                        let expect = self.literal_operand(test.span, value);\n                         let val = Operand::Copy(place.clone());\n-                        let expect = self.literal_operand(test.span, ty, value);\n                         self.compare(block, success, fail, source_info, BinOp::Eq, expect, val);\n                     } else {\n                         bug!(\"`TestKind::Eq` should have two target blocks\");\n                     }\n                 }\n             }\n \n-            TestKind::Range(PatternRange { ref lo, ref hi, ty, ref end }) => {\n+            TestKind::Range(PatternRange { ref lo, ref hi, ref end }) => {\n                 let lower_bound_success = self.cfg.start_new_block();\n                 let target_blocks = make_target_blocks(self);\n \n                 // Test `val` by computing `lo <= val && val <= hi`, using primitive comparisons.\n-                let lo = self.literal_operand(test.span, ty, lo);\n-                let hi = self.literal_operand(test.span, ty, hi);\n+                let lo = self.literal_operand(test.span, lo);\n+                let hi = self.literal_operand(test.span, hi);\n                 let val = Operand::Copy(place.clone());\n \n                 if let [success, fail] = *target_blocks {\n@@ -387,7 +389,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) {\n         use rustc::middle::lang_items::EqTraitLangItem;\n \n-        let mut expect = self.literal_operand(source_info.span, value.ty, value);\n+        let mut expect = self.literal_operand(source_info.span, value);\n         let mut val = Operand::Copy(place.clone());\n \n         // If we're using `b\"...\"` as a pattern, we need to insert an\n@@ -440,7 +442,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         };\n \n         let eq_def_id = self.hir.tcx().require_lang_item(EqTraitLangItem);\n-        let (mty, method) = self.hir.trait_method(eq_def_id, sym::eq, deref_ty, &[deref_ty.into()]);\n+        let method = self.hir.trait_method(eq_def_id, sym::eq, deref_ty, &[deref_ty.into()]);\n \n         let bool_ty = self.hir.bool_ty();\n         let eq_result = self.temp(bool_ty, source_info.span);\n@@ -449,7 +451,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.terminate(block, source_info, TerminatorKind::Call {\n             func: Operand::Constant(box Constant {\n                 span: source_info.span,\n-                ty: mty,\n \n                 // FIXME(#54571): This constant comes from user input (a\n                 // constant in a pattern).  Are there forms where users can add\n@@ -656,8 +657,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     let tcx = self.hir.tcx();\n \n-                    let lo = compare_const_vals(tcx, test.lo, pat.hi, self.hir.param_env, test.ty)?;\n-                    let hi = compare_const_vals(tcx, test.hi, pat.lo, self.hir.param_env, test.ty)?;\n+                    let test_ty = test.lo.ty;\n+                    let lo = compare_const_vals(tcx, test.lo, pat.hi, self.hir.param_env, test_ty)?;\n+                    let hi = compare_const_vals(tcx, test.hi, pat.lo, self.hir.param_env, test_ty)?;\n \n                     match (test.end, pat.end, lo, hi) {\n                         // pat < test\n@@ -774,8 +776,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         let tcx = self.hir.tcx();\n \n-        let a = compare_const_vals(tcx, range.lo, value, self.hir.param_env, range.ty)?;\n-        let b = compare_const_vals(tcx, value, range.hi, self.hir.param_env, range.ty)?;\n+        let a = compare_const_vals(tcx, range.lo, value, self.hir.param_env, range.lo.ty)?;\n+        let b = compare_const_vals(tcx, value, range.hi, self.hir.param_env, range.lo.ty)?;\n \n         match (b, range.end) {\n             (Less, _) |"}, {"sha": "d038310dd4454cadd4cbe432befcd97c791f2fc9", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -26,12 +26,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// without any user type annotation.\n     pub fn literal_operand(&mut self,\n                            span: Span,\n-                           ty: Ty<'tcx>,\n                            literal: &'tcx ty::Const<'tcx>)\n                            -> Operand<'tcx> {\n         let constant = box Constant {\n             span,\n-            ty,\n             user_ty: None,\n             literal,\n         };\n@@ -47,7 +45,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn zero_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n         let literal = ty::Const::from_bits(self.hir.tcx(), 0, ty::ParamEnv::empty().and(ty));\n \n-        self.literal_operand(span, ty, literal)\n+        self.literal_operand(span, literal)\n     }\n \n     pub fn push_usize(&mut self,\n@@ -61,7 +59,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             block, source_info, &temp,\n             Constant {\n                 span: source_info.span,\n-                ty: self.hir.usize_ty(),\n                 user_ty: None,\n                 literal: self.hir.usize_literal(value),\n             });"}, {"sha": "a33d7207ed4e1453d2917f966b7f59e278b63dad", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -927,7 +927,7 @@ fn convert_path_expr<'a, 'tcx>(\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(ty::Const {\n                     val: ConstValue::Unevaluated(def_id, substs),\n-                    ty: cx.tcx.type_of(def_id),\n+                    ty: cx.tables().node_type(expr.hir_id),\n                 }),\n                 user_ty,\n             }"}, {"sha": "740dc2011cab1cddd65cea770aac1f777b53e540", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -170,13 +170,13 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n                         method_name: Symbol,\n                         self_ty: Ty<'tcx>,\n                         params: &[Kind<'tcx>])\n-                        -> (Ty<'tcx>, &'tcx ty::Const<'tcx>) {\n+                        -> &'tcx ty::Const<'tcx> {\n         let substs = self.tcx.mk_substs_trait(self_ty, params);\n         for item in self.tcx.associated_items(trait_def_id) {\n             if item.kind == ty::AssocKind::Method && item.ident.name == method_name {\n                 let method_ty = self.tcx.type_of(item.def_id);\n                 let method_ty = method_ty.subst(self.tcx, substs);\n-                return (method_ty, ty::Const::zero_sized(self.tcx, method_ty));\n+                return ty::Const::zero_sized(self.tcx, method_ty);\n             }\n         }\n "}, {"sha": "1833ee30624bb798293d1d50c51164500b197175", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -609,7 +609,6 @@ impl<'tcx> Witness<'tcx> {\n                         ConstantRange(lo, hi, ty, end) => PatternKind::Range(PatternRange {\n                             lo: ty::Const::from_bits(cx.tcx, lo, ty::ParamEnv::empty().and(ty)),\n                             hi: ty::Const::from_bits(cx.tcx, hi, ty::ParamEnv::empty().and(ty)),\n-                            ty,\n                             end,\n                         }),\n                         _ => PatternKind::Wild,\n@@ -880,10 +879,10 @@ impl<'tcx> IntRange<'tcx> {\n         let range = loop {\n             match pat.kind {\n                 box PatternKind::Constant { value } => break ConstantValue(value),\n-                box PatternKind::Range(PatternRange { lo, hi, ty, end }) => break ConstantRange(\n-                    lo.eval_bits(tcx, param_env, ty),\n-                    hi.eval_bits(tcx, param_env, ty),\n-                    ty,\n+                box PatternKind::Range(PatternRange { lo, hi, end }) => break ConstantRange(\n+                    lo.eval_bits(tcx, param_env, lo.ty),\n+                    hi.eval_bits(tcx, param_env, hi.ty),\n+                    lo.ty,\n                     end,\n                 ),\n                 box PatternKind::AscribeUserType { ref subpattern, .. } => {\n@@ -1339,11 +1338,11 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n             Some(vec![Variant(adt_def.variants[variant_index].def_id)])\n         }\n         PatternKind::Constant { value } => Some(vec![ConstantValue(value)]),\n-        PatternKind::Range(PatternRange { lo, hi, ty, end }) =>\n+        PatternKind::Range(PatternRange { lo, hi, end }) =>\n             Some(vec![ConstantRange(\n-                lo.eval_bits(cx.tcx, cx.param_env, ty),\n-                hi.eval_bits(cx.tcx, cx.param_env, ty),\n-                ty,\n+                lo.eval_bits(cx.tcx, cx.param_env, lo.ty),\n+                hi.eval_bits(cx.tcx, cx.param_env, hi.ty),\n+                lo.ty,\n                 end,\n             )]),\n         PatternKind::Array { .. } => match pcx.ty.sty {\n@@ -1656,7 +1655,7 @@ fn constructor_covered_by_range<'tcx>(\n ) -> Result<bool, ErrorReported> {\n     let (from, to, end, ty) = match pat.kind {\n         box PatternKind::Constant { value } => (value, value, RangeEnd::Included, value.ty),\n-        box PatternKind::Range(PatternRange { lo, hi, end, ty }) => (lo, hi, end, ty),\n+        box PatternKind::Range(PatternRange { lo, hi, end }) => (lo, hi, end, lo.ty),\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", pat),\n     };\n     trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, from, to, ty);"}, {"sha": "bebb0719af8081336752daf1ecaa2f2be77de04f", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -181,7 +181,6 @@ pub enum PatternKind<'tcx> {\n pub struct PatternRange<'tcx> {\n     pub lo: &'tcx ty::Const<'tcx>,\n     pub hi: &'tcx ty::Const<'tcx>,\n-    pub ty: Ty<'tcx>,\n     pub end: RangeEnd,\n }\n \n@@ -296,7 +295,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n             PatternKind::Constant { value } => {\n                 write!(f, \"{}\", value)\n             }\n-            PatternKind::Range(PatternRange { lo, hi, ty: _, end }) => {\n+            PatternKind::Range(PatternRange { lo, hi, end }) => {\n                 write!(f, \"{}\", lo)?;\n                 match end {\n                     RangeEnd::Included => write!(f, \"..=\")?,\n@@ -442,6 +441,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n                 let mut kind = match (lo, hi) {\n                     (PatternKind::Constant { value: lo }, PatternKind::Constant { value: hi }) => {\n+                        assert_eq!(lo.ty, ty);\n+                        assert_eq!(hi.ty, ty);\n                         let cmp = compare_const_vals(\n                             self.tcx,\n                             lo,\n@@ -451,7 +452,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         );\n                         match (end, cmp) {\n                             (RangeEnd::Excluded, Some(Ordering::Less)) =>\n-                                PatternKind::Range(PatternRange { lo, hi, ty, end }),\n+                                PatternKind::Range(PatternRange { lo, hi, end }),\n                             (RangeEnd::Excluded, _) => {\n                                 span_err!(\n                                     self.tcx.sess,\n@@ -465,7 +466,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                 PatternKind::Constant { value: lo }\n                             }\n                             (RangeEnd::Included, Some(Ordering::Less)) => {\n-                                PatternKind::Range(PatternRange { lo, hi, ty, end })\n+                                PatternKind::Range(PatternRange { lo, hi, end })\n                             }\n                             (RangeEnd::Included, _) => {\n                                 let mut err = struct_span_err!(\n@@ -1416,17 +1417,7 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n             } => PatternKind::Constant {\n                 value,\n             },\n-            PatternKind::Range(PatternRange {\n-                lo,\n-                hi,\n-                ty,\n-                end,\n-            }) => PatternKind::Range(PatternRange {\n-                lo,\n-                hi,\n-                ty: ty.fold_with(folder),\n-                end,\n-            }),\n+            PatternKind::Range(range) => PatternKind::Range(range),\n             PatternKind::Slice {\n                 ref prefix,\n                 ref slice,"}, {"sha": "063e7796371580306d3e30277b70bbcdeaf2fd39", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -445,7 +445,6 @@ impl CloneShimBuilder<'tcx> {\n         let func_ty = tcx.mk_fn_def(self.def_id, substs);\n         let func = Operand::Constant(box Constant {\n             span: self.span,\n-            ty: func_ty,\n             user_ty: None,\n             literal: ty::Const::zero_sized(tcx, func_ty),\n         });\n@@ -505,7 +504,6 @@ impl CloneShimBuilder<'tcx> {\n     fn make_usize(&self, value: u64) -> Box<Constant<'tcx>> {\n         box Constant {\n             span: self.span,\n-            ty: self.tcx.types.usize,\n             user_ty: None,\n             literal: ty::Const::from_usize(self.tcx, value),\n         }\n@@ -745,7 +743,6 @@ fn build_call_shim<'tcx>(\n             let ty = tcx.type_of(def_id);\n             (Operand::Constant(box Constant {\n                 span,\n-                ty,\n                 user_ty: None,\n                 literal: ty::Const::zero_sized(tcx, ty),\n              }),"}, {"sha": "c3c432d606644ed77a4a3bf53ce98c0b749313fa", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -539,7 +539,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         Operand::Constant(Box::new(\n             Constant {\n                 span,\n-                ty,\n                 user_ty: None,\n                 literal: self.tcx.mk_const(*ty::Const::from_scalar(\n                     self.tcx,"}, {"sha": "4480d1e0a05b85ce882bc1dc27171552739a5cc2", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -527,7 +527,6 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     fn constant_bool(&self, span: Span, val: bool) -> Rvalue<'tcx> {\n         Rvalue::Use(Operand::Constant(Box::new(Constant {\n             span,\n-            ty: self.tcx.types.bool,\n             user_ty: None,\n             literal: ty::Const::from_bool(self.tcx, val),\n         })))"}, {"sha": "f6941880240316ad55507409437844938fb52828", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -975,7 +975,6 @@ fn insert_panic_block<'tcx>(\n     let term = TerminatorKind::Assert {\n         cond: Operand::Constant(box Constant {\n             span: body.span,\n-            ty: tcx.types.bool,\n             user_ty: None,\n             literal: ty::Const::from_bool(tcx, false),\n         }),"}, {"sha": "bc7bd39be488e35684356634eb789a289607f23c", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -328,7 +328,7 @@ impl Inliner<'tcx> {\n                 }\n \n                 TerminatorKind::Call {func: Operand::Constant(ref f), .. } => {\n-                    if let ty::FnDef(def_id, _) = f.ty.sty {\n+                    if let ty::FnDef(def_id, _) = f.literal.ty.sty {\n                         // Don't give intrinsics the extra penalty for calls\n                         let f = tcx.fn_sig(def_id);\n                         if f.abi() == Abi::RustIntrinsic || f.abi() == Abi::PlatformIntrinsic {"}, {"sha": "b2d063a1f4e10392291c04ca0f3d3dbaa7f47954", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -97,8 +97,7 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n             let place_ty = place.ty(&self.body.local_decls, self.tcx).ty;\n             if let ty::Array(_, len) = place_ty.sty {\n                 let span = self.body.source_info(location).span;\n-                let ty = self.tcx.types.usize;\n-                let constant = Constant { span, ty, literal: len, user_ty: None };\n+                let constant = Constant { span, literal: len, user_ty: None };\n                 self.optimizations.arrays_lengths.insert(location, constant);\n             }\n         }"}, {"sha": "0eed43b10868e3b48262e7eb0603b0703b06b80c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -249,7 +249,7 @@ trait Qualif {\n                 if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n                     // Don't peek inside trait associated constants.\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n-                        Self::in_any_value_of_ty(cx, constant.ty).unwrap_or(false)\n+                        Self::in_any_value_of_ty(cx, constant.literal.ty).unwrap_or(false)\n                     } else {\n                         let (bits, _) = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n \n@@ -258,7 +258,7 @@ trait Qualif {\n                         // Just in case the type is more specific than\n                         // the definition, e.g., impl associated const\n                         // with type parameters, take it into account.\n-                        qualif && Self::mask_for_ty(cx, constant.ty)\n+                        qualif && Self::mask_for_ty(cx, constant.literal.ty)\n                     }\n                 } else {\n                     false"}, {"sha": "598de3a77e61c22ce6745325bc62b45b5aba46b9", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -224,7 +224,7 @@ fn is_rustc_peek<'a, 'tcx>(\n     if let Some(mir::Terminator { ref kind, source_info, .. }) = *terminator {\n         if let mir::TerminatorKind::Call { func: ref oper, ref args, .. } = *kind {\n             if let mir::Operand::Constant(ref func) = *oper {\n-                if let ty::FnDef(def_id, _) = func.ty.sty {\n+                if let ty::FnDef(def_id, _) = func.literal.ty.sty {\n                     let abi = tcx.fn_sig(def_id).abi();\n                     let name = tcx.item_name(def_id);\n                     if abi == Abi::RustIntrinsic && name == sym::rustc_peek {"}, {"sha": "c5561a1ae0d1548215fc2d803078f95bbeb689fc", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -970,7 +970,6 @@ where\n     fn constant_usize(&self, val: u16) -> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span: self.source_info.span,\n-            ty: self.tcx().types.usize,\n             user_ty: None,\n             literal: ty::Const::from_usize(self.tcx(), val.into()),\n         })"}, {"sha": "ac2701971dfd55e369228d51ea08812c3f0b54e0", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -397,10 +397,9 @@ impl ExtraComments<'tcx> {\n impl Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n-        let Constant { span, ty, user_ty, literal } = constant;\n+        let Constant { span, user_ty, literal } = constant;\n         self.push(\"mir::Constant\");\n         self.push(&format!(\"+ span: {:?}\", span));\n-        self.push(&format!(\"+ ty: {:?}\", ty));\n         if let Some(user_ty) = user_ty {\n             self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n         }"}, {"sha": "64fd1a4a78d96c3179243de951c99861dded5791", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     ) -> &dyn Foo\n    |          ^^^^^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#27r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#22r\n \n error: lifetime may not live long enough\n   --> $DIR/issue-63388-1.rs:15:5"}, {"sha": "dc3fbed593b796d07925ca5089eb0b89bf3a1eb5", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:111:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n+   |                                                                     -------- cast requires that `o2` is borrowed for `'static`\n LL |     o1.set0(&o2);\n    |             ^^^ borrowed value does not live long enough\n ...\n@@ -13,7 +13,7 @@ error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:112:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                                         -------- cast requires that `o3` is borrowed for `'static`\n+   |                                                                     -------- cast requires that `o3` is borrowed for `'static`\n LL |     o1.set0(&o2);\n LL |     o1.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n@@ -37,7 +37,7 @@ error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:114:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                                         -------- cast requires that `o3` is borrowed for `'static`\n+   |                                                                               -------- cast requires that `o3` is borrowed for `'static`\n ...\n LL |     o2.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n@@ -49,7 +49,7 @@ error[E0597]: `o1` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:115:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                     -------- cast requires that `o1` is borrowed for `'static`\n+   |                                                                                         -------- cast requires that `o1` is borrowed for `'static`\n ...\n LL |     o3.set0(&o1);\n    |             ^^^ borrowed value does not live long enough\n@@ -61,7 +61,7 @@ error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:116:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n+   |                                                                                         -------- cast requires that `o2` is borrowed for `'static`\n ...\n LL |     o3.set1(&o2);\n    |             ^^^ borrowed value does not live long enough"}, {"sha": "e33001b9244da498e104e368cd59837de7041fcf", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:50\n@@ -30,7 +30,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                                          ^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:62"}, {"sha": "3e58c973019758312630e9098034f8b55054f438", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:15:47\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:21:53\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:25:62\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:29:62\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:33:71\n@@ -104,7 +104,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                              ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:37:67"}, {"sha": "b8a538088109fe1155f5e8d691f083f812932472", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                                              ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:15:51\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:21:57\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:25:66\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:29:66\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:33:75\n@@ -104,7 +104,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:37:75"}, {"sha": "cee008de6671fb4347b286b2fadf77802c7faf43", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                                        ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:15:61\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:19:70\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:23:70\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:27:79\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:31:79"}, {"sha": "c3c15485b229ce57cd01b9a3710b7d2ba9a45728", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:24:47\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:30:53\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:34:62\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:38:62\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:42:71\n@@ -104,7 +104,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:46:71\n@@ -124,7 +124,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                                                     ^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:50:73"}, {"sha": "ff50f6825bc6b01d75333dcccbc3ba75abfd2de5", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db3bae01708b41f7fd9bb75830cd9163b8b10e48/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=db3bae01708b41f7fd9bb75830cd9163b8b10e48", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:15:57\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:19:66\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:23:66\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:27:75\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:31:71"}]}