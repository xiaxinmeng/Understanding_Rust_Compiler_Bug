{"sha": "e706438d00f8a2de82a3fabd6777c9486e450198", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MDY0MzhkMDBmOGEyZGU4MmEzZmFiZDY3NzdjOTQ4NmU0NTAxOTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-12T20:46:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-12T20:46:43Z"}, "message": "Rollup merge of #62453 - zackmdavis:single_path, r=estebank\n\nin which we suggest anonymizing single-use lifetimes in paths\n\nFollowing @nikomatsakis's [October 2017 comment](https://github.com/rust-lang/rust/issues/44752#issuecomment-340885834).\n\n![path_anon_suggest](https://user-images.githubusercontent.com/1076988/60761598-e2619180-a000-11e9-9144-1bdf8eb848e3.png)\n\nr? @estebank\ncc @eddyb (you were saying something about running single-use-lifetimes against the tree the other week?)", "tree": {"sha": "2df5dba60a67cba47e962bf565bab019d42a8c4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2df5dba60a67cba47e962bf565bab019d42a8c4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e706438d00f8a2de82a3fabd6777c9486e450198", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdKPGzCRBK7hj4Ov3rIwAAdHIIAKtqaia8LAYlj1iLBIcW2eVI\nb0Cn+8cGxUzHOSvMSv3/qHjtiBl7Rx3SjhKk6TeTPLzOQny+n7iS2Bnbp2cL3U1x\nAIM1y1JVLQHtjStXB/fkMlu3w+9GCE9+dZ0zDIC3RMovmtGH5GxuAJjmYAJeE44x\nz1PQDcstMZ0N3rd5fIUgPHKAuZrc+urhdytAd14Gi8zgwvMttQc2QfICBmMGB8Lq\nX6NK13o0svWrQrBzro53xczuCV/sSPfyhiEQnvZ4k/HR9Eg0omU/jc8cx7oTCzEK\ncmxn8UFXi+i/3Z3nQ2xQHi0OfNETiEywN2hUT/y6v0xCgtZKW9t7re59y1DZLIc=\n=XnCV\n-----END PGP SIGNATURE-----\n", "payload": "tree 2df5dba60a67cba47e962bf565bab019d42a8c4a\nparent f169b15e1d8e676ac6a9a7d2b0d12147e13f7ec2\nparent acc4e564feb5151ca02070e0890e428d7967b8b4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562964403 +0200\ncommitter GitHub <noreply@github.com> 1562964403 +0200\n\nRollup merge of #62453 - zackmdavis:single_path, r=estebank\n\nin which we suggest anonymizing single-use lifetimes in paths\n\nFollowing @nikomatsakis's [October 2017 comment](https://github.com/rust-lang/rust/issues/44752#issuecomment-340885834).\n\n![path_anon_suggest](https://user-images.githubusercontent.com/1076988/60761598-e2619180-a000-11e9-9144-1bdf8eb848e3.png)\n\nr? @estebank\ncc @eddyb (you were saying something about running single-use-lifetimes against the tree the other week?)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e706438d00f8a2de82a3fabd6777c9486e450198", "html_url": "https://github.com/rust-lang/rust/commit/e706438d00f8a2de82a3fabd6777c9486e450198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e706438d00f8a2de82a3fabd6777c9486e450198/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f169b15e1d8e676ac6a9a7d2b0d12147e13f7ec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f169b15e1d8e676ac6a9a7d2b0d12147e13f7ec2", "html_url": "https://github.com/rust-lang/rust/commit/f169b15e1d8e676ac6a9a7d2b0d12147e13f7ec2"}, {"sha": "acc4e564feb5151ca02070e0890e428d7967b8b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/acc4e564feb5151ca02070e0890e428d7967b8b4", "html_url": "https://github.com/rust-lang/rust/commit/acc4e564feb5151ca02070e0890e428d7967b8b4"}], "stats": {"total": 125, "additions": 99, "deletions": 26}, "files": [{"sha": "beb8061842dd357ff3c65e95f5b1e0b4c874d950", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 56, "deletions": 25, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e706438d00f8a2de82a3fabd6777c9486e450198/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e706438d00f8a2de82a3fabd6777c9486e450198/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e706438d00f8a2de82a3fabd6777c9486e450198", "patch": "@@ -9,7 +9,7 @@ use crate::hir::def::{Res, DefKind};\n use crate::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use crate::hir::map::Map;\n use crate::hir::ptr::P;\n-use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName};\n+use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName, QPath};\n use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n \n use crate::rustc::lint;\n@@ -1458,10 +1458,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     // helper method to issue suggestions from `fn rah<'a>(&'a T)` to `fn rah(&T)`\n+    // or from `fn rah<'a>(T<'a>)` to `fn rah(T<'_>)`\n     fn suggest_eliding_single_use_lifetime(\n         &self, err: &mut DiagnosticBuilder<'_>, def_id: DefId, lifetime: &hir::Lifetime\n     ) {\n-        // FIXME: future work: also suggest `impl Foo<'_>` for `impl<'a> Foo<'a>`\n         let name = lifetime.name.ident();\n         let mut remove_decl = None;\n         if let Some(parent_def_id) = self.tcx.parent(def_id) {\n@@ -1471,18 +1471,38 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         let mut remove_use = None;\n+        let mut elide_use = None;\n         let mut find_arg_use_span = |inputs: &hir::HirVec<hir::Ty>| {\n             for input in inputs {\n-                if let hir::TyKind::Rptr(lt, _) = input.node {\n-                    if lt.name.ident() == name {\n-                        // include the trailing whitespace between the ampersand and the type name\n-                        let lt_through_ty_span = lifetime.span.to(input.span.shrink_to_hi());\n-                        remove_use = Some(\n-                            self.tcx.sess.source_map()\n-                                .span_until_non_whitespace(lt_through_ty_span)\n-                        );\n-                        break;\n+                match input.node {\n+                    hir::TyKind::Rptr(lt, _) => {\n+                        if lt.name.ident() == name {\n+                            // include the trailing whitespace between the lifetime and type names\n+                            let lt_through_ty_span = lifetime.span.to(input.span.shrink_to_hi());\n+                            remove_use = Some(\n+                                self.tcx.sess.source_map()\n+                                    .span_until_non_whitespace(lt_through_ty_span)\n+                            );\n+                            break;\n+                        }\n                     }\n+                    hir::TyKind::Path(ref qpath) => {\n+                        if let QPath::Resolved(_, path) = qpath {\n+\n+                            let last_segment = &path.segments[path.segments.len()-1];\n+                            let generics = last_segment.generic_args();\n+                            for arg in generics.args.iter() {\n+                                if let GenericArg::Lifetime(lt) = arg {\n+                                    if lt.name.ident() == name {\n+                                        elide_use = Some(lt.span);\n+                                        break;\n+                                    }\n+                                }\n+                            }\n+                            break;\n+                        }\n+                    },\n+                    _ => {}\n                 }\n             }\n         };\n@@ -1506,24 +1526,35 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n \n-        if let (Some(decl_span), Some(use_span)) = (remove_decl, remove_use) {\n-            // if both declaration and use deletion spans start at the same\n-            // place (\"start at\" because the latter includes trailing\n-            // whitespace), then this is an in-band lifetime\n-            if decl_span.shrink_to_lo() == use_span.shrink_to_lo() {\n-                err.span_suggestion(\n-                    use_span,\n-                    \"elide the single-use lifetime\",\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                );\n-            } else {\n+        let msg = \"elide the single-use lifetime\";\n+        match (remove_decl, remove_use, elide_use) {\n+            (Some(decl_span), Some(use_span), None) => {\n+                // if both declaration and use deletion spans start at the same\n+                // place (\"start at\" because the latter includes trailing\n+                // whitespace), then this is an in-band lifetime\n+                if decl_span.shrink_to_lo() == use_span.shrink_to_lo() {\n+                    err.span_suggestion(\n+                        use_span,\n+                        msg,\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    err.multipart_suggestion(\n+                        msg,\n+                        vec![(decl_span, String::new()), (use_span, String::new())],\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            (Some(decl_span), None, Some(use_span)) => {\n                 err.multipart_suggestion(\n-                    \"elide the single-use lifetime\",\n-                    vec![(decl_span, String::new()), (use_span, String::new())],\n+                    msg,\n+                    vec![(decl_span, String::new()), (use_span, \"'_\".to_owned())],\n                     Applicability::MachineApplicable,\n                 );\n             }\n+            _ => {}\n         }\n     }\n "}, {"sha": "ff9d6bd01c670408af474473851ac16dc8697ee4", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e706438d00f8a2de82a3fabd6777c9486e450198/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e706438d00f8a2de82a3fabd6777c9486e450198/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs?ref=e706438d00f8a2de82a3fabd6777c9486e450198", "patch": "@@ -9,4 +9,14 @@ fn a<'a>(x: &'a u32) { //~ ERROR `'a` only used once\n     //~^ HELP elide the single-use lifetime\n }\n \n+struct Single<'a> { x: &'a u32 }\n+struct Double<'a, 'b> { f: &'a &'b u32 }\n+\n+fn center<'m>(_: Single<'m>) {} //~ ERROR `'m` only used once\n+//~^ HELP elide the single-use lifetime\n+fn left<'x, 'y>(foo: Double<'x, 'y>) -> &'x u32 { foo.f } //~ ERROR `'y` only used once\n+//~^ HELP elide the single-use lifetime\n+fn right<'x, 'y>(foo: Double<'x, 'y>) -> &'y u32 { foo.f } //~ ERROR `'x` only used once\n+//~^ HELP elide the single-use lifetime\n+\n fn main() { }"}, {"sha": "faaa7e2f1b01b60640938f6218efbc630123af20", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e706438d00f8a2de82a3fabd6777c9486e450198/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e706438d00f8a2de82a3fabd6777c9486e450198/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr?ref=e706438d00f8a2de82a3fabd6777c9486e450198", "patch": "@@ -16,5 +16,37 @@ help: elide the single-use lifetime\n LL | fn a(x: &u32) {\n    |    --   --\n \n-error: aborting due to previous error\n+error: lifetime parameter `'m` only used once\n+  --> $DIR/one-use-in-fn-argument.rs:15:11\n+   |\n+LL | fn center<'m>(_: Single<'m>) {}\n+   |           ^^            -- ...is used only here\n+   |           |\n+   |           this lifetime...\n+help: elide the single-use lifetime\n+   |\n+LL | fn center(_: Single<'_>) {}\n+   |         --          ^^\n+\n+error: lifetime parameter `'y` only used once\n+  --> $DIR/one-use-in-fn-argument.rs:17:13\n+   |\n+LL | fn left<'x, 'y>(foo: Double<'x, 'y>) -> &'x u32 { foo.f }\n+   |             ^^ this lifetime... -- ...is used only here\n+help: elide the single-use lifetime\n+   |\n+LL | fn left<'x>(foo: Double<'x, '_>) -> &'x u32 { foo.f }\n+   |          --                 ^^\n+\n+error: lifetime parameter `'x` only used once\n+  --> $DIR/one-use-in-fn-argument.rs:19:10\n+   |\n+LL | fn right<'x, 'y>(foo: Double<'x, 'y>) -> &'y u32 { foo.f }\n+   |          ^^ this lifetime... -- ...is used only here\n+help: elide the single-use lifetime\n+   |\n+LL | fn right<'y>(foo: Double<'_, 'y>) -> &'y u32 { foo.f }\n+   |         --               ^^\n+\n+error: aborting due to 4 previous errors\n "}]}