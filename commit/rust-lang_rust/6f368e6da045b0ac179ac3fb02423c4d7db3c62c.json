{"sha": "6f368e6da045b0ac179ac3fb02423c4d7db3c62c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMzY4ZTZkYTA0NWIwYWMxNzlhYzNmYjAyNDIzYzRkN2RiM2M2MmM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-20T01:07:19Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:04:43Z"}, "message": "Use fn_ty directly", "tree": {"sha": "71c541e02656660205d4471f766af3d3b9214e70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c541e02656660205d4471f766af3d3b9214e70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f368e6da045b0ac179ac3fb02423c4d7db3c62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f368e6da045b0ac179ac3fb02423c4d7db3c62c", "html_url": "https://github.com/rust-lang/rust/commit/6f368e6da045b0ac179ac3fb02423c4d7db3c62c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f368e6da045b0ac179ac3fb02423c4d7db3c62c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d55e73954a1019a1f5dea8fdca752b8f8e6647ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d55e73954a1019a1f5dea8fdca752b8f8e6647ff", "html_url": "https://github.com/rust-lang/rust/commit/d55e73954a1019a1f5dea8fdca752b8f8e6647ff"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "e1baf441084ee21aafc76234d027a1ce1038ce13", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f368e6da045b0ac179ac3fb02423c4d7db3c62c/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f368e6da045b0ac179ac3fb02423c4d7db3c62c/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=6f368e6da045b0ac179ac3fb02423c4d7db3c62c", "patch": "@@ -339,7 +339,9 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     // the first argument (`self`) will be the (by value) closure env.\n \n     let mut llargs = get_params(fcx.llfn);\n-    let idx = fcx.fn_ty.ret.is_indirect() as usize;\n+    let fn_ret = callee.ty.fn_ret();\n+    let fn_ty = callee.direct_fn_type(bcx.ccx, &[]);\n+    let idx = fn_ty.ret.is_indirect() as usize;\n     let env_arg = &fcx.fn_ty.args[0];\n     let llenv = if env_arg.is_indirect() {\n         llargs[idx]\n@@ -354,7 +356,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     // Adjust llargs such that llargs[self_idx..] has the call arguments.\n     // For zero-sized closures that means sneaking in a new argument.\n     if env_arg.is_ignore() {\n-        if fcx.fn_ty.ret.is_indirect() {\n+        if fn_ty.ret.is_indirect() {\n             llargs[0] = llenv;\n         } else {\n             llargs.insert(0, llenv);\n@@ -366,8 +368,6 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     // Call the by-ref closure body with `self` in a cleanup scope,\n     // to drop `self` when the body returns, or in case it unwinds.\n     let self_scope = fcx.schedule_drop_mem(llenv, closure_ty);\n-    let fn_ret = callee.ty.fn_ret();\n-    let fn_ty = callee.direct_fn_type(bcx.ccx, &[]);\n \n     if fn_ty.ret.is_indirect() {\n         llargs.insert(0, get_param(fcx.llfn, 0));\n@@ -388,7 +388,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     } else {\n         self_scope.trans(&bcx);\n \n-        if fcx.fn_ty.ret.is_indirect() || fcx.fn_ty.ret.is_ignore() {\n+        if fn_ty.ret.is_indirect() || fn_ty.ret.is_ignore() {\n             bcx.ret_void();\n         } else {\n             bcx.ret(llret);\n@@ -513,17 +513,15 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n         data: Fn(llfnpointer),\n         ty: bare_fn_ty\n     };\n-\n     let fn_ret = callee.ty.fn_ret();\n     let fn_ty = callee.direct_fn_type(ccx, &[]);\n-\n     let llret = bcx.call(llfnpointer, &llargs, None);\n     fn_ty.apply_attrs_callsite(llret);\n \n     if fn_ret.0.is_never() {\n         bcx.unreachable();\n     } else {\n-        if fn_ty.ret.is_indirect() || fcx.fn_ty.ret.is_ignore() {\n+        if fn_ty.ret.is_indirect() || fn_ty.ret.is_ignore() {\n             bcx.ret_void();\n         } else {\n             bcx.ret(llret);"}]}