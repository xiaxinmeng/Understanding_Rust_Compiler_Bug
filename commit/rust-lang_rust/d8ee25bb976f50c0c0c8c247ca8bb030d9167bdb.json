{"sha": "d8ee25bb976f50c0c0c8c247ca8bb030d9167bdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZWUyNWJiOTc2ZjUwYzBjMGM4YzI0N2NhOGJiMDMwZDkxNjdiZGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-05T12:19:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T12:19:25Z"}, "message": "Merge #8339\n\n8339: fix: extract variable works in guards r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2f4932118da33116b492616943510e8c47fbf02a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f4932118da33116b492616943510e8c47fbf02a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8ee25bb976f50c0c0c8c247ca8bb030d9167bdb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgawBNCRBK7hj4Ov3rIwAAdHIIAH5De9iD7LmVHzSEYyDAarLR\nhtll2TbpyENmu0tcpzu+1kYkflXsM0QB+EZqof5TgR+tYSLNI45OfkYlD3CX8vwp\nBXPpnykVr9+Kf+EbaZHSpEdvgs+FFu9Jkyfnru1pItGdPBaF+Lzi4PZHIjZz2Axs\n+acHBi+h+XLqUmDfpXczYwqlThc4v6P8J2Iygh44NQLfGWXNE6QtQO8jrQalt+nx\nZma9MY3JIZe5rTFGWn/eCjWRd+4JJKbMWyd2DI6ieRNtZn7OhC/DvbE5JrmfFg/h\ncNrdHCfehKFOe2qsf55nBmJjlQUK/fW/LDGA0TxpnwriLjrOGiXkj7g14OrulZo=\n=loWd\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f4932118da33116b492616943510e8c47fbf02a\nparent 4a589b1c3ab6514c91cbf825228ab31712299b48\nparent 30d6419bc90b8c1f34b0965cb14969ce626c26a1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617625165 +0000\ncommitter GitHub <noreply@github.com> 1617625165 +0000\n\nMerge #8339\n\n8339: fix: extract variable works in guards r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ee25bb976f50c0c0c8c247ca8bb030d9167bdb", "html_url": "https://github.com/rust-lang/rust/commit/d8ee25bb976f50c0c0c8c247ca8bb030d9167bdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8ee25bb976f50c0c0c8c247ca8bb030d9167bdb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a589b1c3ab6514c91cbf825228ab31712299b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a589b1c3ab6514c91cbf825228ab31712299b48", "html_url": "https://github.com/rust-lang/rust/commit/4a589b1c3ab6514c91cbf825228ab31712299b48"}, {"sha": "30d6419bc90b8c1f34b0965cb14969ce626c26a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/30d6419bc90b8c1f34b0965cb14969ce626c26a1", "html_url": "https://github.com/rust-lang/rust/commit/30d6419bc90b8c1f34b0965cb14969ce626c26a1"}], "stats": {"total": 73, "additions": 55, "deletions": 18}, "files": [{"sha": "136b9a55b946c4604648c4accf93e184b9669e9a", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 55, "deletions": 18, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d8ee25bb976f50c0c0c8c247ca8bb030d9167bdb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ee25bb976f50c0c0c8c247ca8bb030d9167bdb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=d8ee25bb976f50c0c0c8c247ca8bb030d9167bdb", "patch": "@@ -2,7 +2,8 @@ use stdx::format_to;\n use syntax::{\n     ast::{self, AstNode},\n     SyntaxKind::{\n-        BLOCK_EXPR, BREAK_EXPR, CLOSURE_EXPR, COMMENT, LOOP_EXPR, MATCH_ARM, PATH_EXPR, RETURN_EXPR,\n+        BLOCK_EXPR, BREAK_EXPR, CLOSURE_EXPR, COMMENT, LOOP_EXPR, MATCH_ARM, MATCH_GUARD,\n+        PATH_EXPR, RETURN_EXPR,\n     },\n     SyntaxNode,\n };\n@@ -147,9 +148,18 @@ impl Anchor {\n             }\n \n             if let Some(parent) = node.parent() {\n-                if parent.kind() == MATCH_ARM || parent.kind() == CLOSURE_EXPR {\n+                if parent.kind() == CLOSURE_EXPR {\n+                    cov_mark::hit!(test_extract_var_in_closure_no_block);\n                     return Some(Anchor::WrapInBlock(node));\n                 }\n+                if parent.kind() == MATCH_ARM {\n+                    if node.kind() == MATCH_GUARD {\n+                        cov_mark::hit!(test_extract_var_in_match_guard);\n+                    } else {\n+                        cov_mark::hit!(test_extract_var_in_match_arm_no_block);\n+                        return Some(Anchor::WrapInBlock(node));\n+                    }\n+                }\n             }\n \n             if let Some(stmt) = ast::Stmt::cast(node.clone()) {\n@@ -280,34 +290,35 @@ fn foo() {\n \n     #[test]\n     fn test_extract_var_in_match_arm_no_block() {\n+        cov_mark::check!(test_extract_var_in_match_arm_no_block);\n         check_assist(\n             extract_variable,\n-            \"\n+            r#\"\n fn main() {\n     let x = true;\n     let tuple = match x {\n         true => ($02 + 2$0, true)\n         _ => (0, false)\n     };\n }\n-\",\n-            \"\n+\"#,\n+            r#\"\n fn main() {\n     let x = true;\n     let tuple = match x {\n         true => { let $0var_name = 2 + 2; (var_name, true) }\n         _ => (0, false)\n     };\n }\n-\",\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_extract_var_in_match_arm_with_block() {\n         check_assist(\n             extract_variable,\n-            \"\n+            r#\"\n fn main() {\n     let x = true;\n     let tuple = match x {\n@@ -318,8 +329,8 @@ fn main() {\n         _ => (0, false)\n     };\n }\n-\",\n-            \"\n+\"#,\n+            r#\"\n fn main() {\n     let x = true;\n     let tuple = match x {\n@@ -331,41 +342,67 @@ fn main() {\n         _ => (0, false)\n     };\n }\n-\",\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_var_in_match_guard() {\n+        cov_mark::check!(test_extract_var_in_match_guard);\n+        check_assist(\n+            extract_variable,\n+            r#\"\n+fn main() {\n+    match () {\n+        () if $010 > 0$0 => 1\n+        _ => 2\n+    };\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let $0var_name = 10 > 0;\n+    match () {\n+        () if var_name => 1\n+        _ => 2\n+    };\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_extract_var_in_closure_no_block() {\n+        cov_mark::check!(test_extract_var_in_closure_no_block);\n         check_assist(\n             extract_variable,\n-            \"\n+            r#\"\n fn main() {\n     let lambda = |x: u32| $0x * 2$0;\n }\n-\",\n-            \"\n+\"#,\n+            r#\"\n fn main() {\n     let lambda = |x: u32| { let $0var_name = x * 2; var_name };\n }\n-\",\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_extract_var_in_closure_with_block() {\n         check_assist(\n             extract_variable,\n-            \"\n+            r#\"\n fn main() {\n     let lambda = |x: u32| { $0x * 2$0 };\n }\n-\",\n-            \"\n+\"#,\n+            r#\"\n fn main() {\n     let lambda = |x: u32| { let $0var_name = x * 2; var_name };\n }\n-\",\n+\"#,\n         );\n     }\n "}]}