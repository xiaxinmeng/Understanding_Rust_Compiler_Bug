{"sha": "4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZDVlZGM3NmRkZjRjZWViYzFiMmI0ODE1MDI4YjA0YmI5Y2MyMWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T17:41:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T17:58:59Z"}, "message": "enable a few more tests in Miri and update the comment for others", "tree": {"sha": "8d12fab2e568d2226943963ed233239ee244bea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d12fab2e568d2226943963ed233239ee244bea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e", "html_url": "https://github.com/rust-lang/rust/commit/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c6fb028ca887dff9ec2fe0a90398b6d5bf5fb45", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6fb028ca887dff9ec2fe0a90398b6d5bf5fb45", "html_url": "https://github.com/rust-lang/rust/commit/8c6fb028ca887dff9ec2fe0a90398b6d5bf5fb45"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "e0c724f557b9d0d9f84475e68ad5a0a5598d7349", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e", "patch": "@@ -761,7 +761,6 @@ fn from_into_inner() {\n     it.next().unwrap();\n     let vec = it.collect::<Vec<_>>();\n     assert_eq!(vec, [2, 3]);\n-    #[cfg(not(miri))] // Miri does not support comparing dangling pointers\n     assert!(ptr != vec.as_ptr());\n }\n "}, {"sha": "d86e21cf40b6e7e36da4238066adf742cd887d58", "filename": "src/libcore/tests/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs?ref=4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e", "patch": "@@ -3,7 +3,6 @@ mod float;\n mod num;\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot print pointers\n fn test_format_flags() {\n     // No residual flags left by pointer formatting\n     let p = \"\".as_ptr();\n@@ -13,7 +12,6 @@ fn test_format_flags() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot print pointers\n fn test_pointer_formats_data_pointer() {\n     let b: &[u8] = b\"\";\n     let s: &str = \"\";"}, {"sha": "569b3197d09bd64576d7b3fcac10a619071a09c5", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e", "patch": "@@ -253,7 +253,6 @@ fn test_unsized_nonnull() {\n \n #[test]\n #[allow(warnings)]\n-#[cfg(not(miri))] // Miri cannot hash pointers\n // Have a symbol for the test below. It doesn\u2019t need to be an actual variadic function, match the\n // ABI, or even point to an actual executable code, because the function itself is never invoked.\n #[no_mangle]\n@@ -293,7 +292,7 @@ fn write_unaligned_drop() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_zst() {\n     // For pointers of stride = 0, the pointer is already aligned or it cannot be aligned at\n     // all, because no amount of elements will align the pointer.\n@@ -308,7 +307,7 @@ fn align_offset_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_stride1() {\n     // For pointers of stride = 1, the pointer can always be aligned. The offset is equal to\n     // number of bytes."}, {"sha": "72161b632413fa83c192e2b89073f177d3aa042a", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e", "patch": "@@ -1396,7 +1396,7 @@ pub mod memchr {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_simple() {\n     let bytes = [1u8, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<u16>() };\n@@ -1420,7 +1420,7 @@ fn test_align_to_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_non_trivial() {\n     #[repr(align(8))] struct U64(u64, u64);\n     #[repr(align(8))] struct U64U64U32(u64, u64, u32);"}]}