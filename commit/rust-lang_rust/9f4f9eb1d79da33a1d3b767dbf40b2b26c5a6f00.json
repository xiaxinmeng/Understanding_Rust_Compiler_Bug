{"sha": "9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNGY5ZWIxZDc5ZGEzM2ExZDNiNzY3ZGJmNDBiMmIyNmM1YTZmMDA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-18T16:39:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-18T16:39:07Z"}, "message": "Implement indirect calls", "tree": {"sha": "19c80496f85444a9d953ed739238710ce1ab82fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19c80496f85444a9d953ed739238710ce1ab82fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00", "html_url": "https://github.com/rust-lang/rust/commit/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7680a5cdde552c8353bff1ee6e1e08f4ea68afdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7680a5cdde552c8353bff1ee6e1e08f4ea68afdd", "html_url": "https://github.com/rust-lang/rust/commit/7680a5cdde552c8353bff1ee6e1e08f4ea68afdd"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "b8264709719913bb231a428f49e75b14e56194e6", "filename": "example.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00", "patch": "@@ -46,3 +46,8 @@ fn abc(a: u8) -> u8 {\n fn call() {\n     abc(42);\n }\n+\n+fn indirect_call() {\n+    let f: fn() = call;\n+    f();\n+}"}, {"sha": "e68af8f43b4b249d82b69c9dc34f41881b960afc", "filename": "src/base.rs", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00", "patch": "@@ -141,7 +141,7 @@ impl<'f, 'tcx> CodegenCtxt<'f, 'tcx> {\n     }\n }\n \n-fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id: DefId, substs: &Substs) {\n+fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id: DefId, substs: &Substs<'tcx>) {\n     let mir = tcx.optimized_mir(def_id);\n     let mut func_ctx = FunctionBuilderContext::new();\n     let mut bcx: FunctionBuilder<Variable> = FunctionBuilder::new(f, &mut func_ctx);\n@@ -198,7 +198,7 @@ fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id:\n             TerminatorKind::Return => {\n                 ccx.bcx.ins().return_(&[]);\n             }\n-            TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n+            TerminatorKind::Assert { cond, expected, msg: _, target, cleanup: _ } => {\n                 let cond_ty = cond.ty(&ccx.mir.local_decls, ccx.tcx);\n                 let cond = trans_operand(ccx, cond).load_value(ccx, cond_ty);\n                 let target = ccx.get_ebb(*target);\n@@ -224,6 +224,7 @@ fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id:\n                 ccx.bcx.ins().jump(otherwise_ebb, &[]);\n             }\n             TerminatorKind::Call { func, args, destination, cleanup: _ } => {\n+                let func_ty = func.ty(&ccx.mir.local_decls, ccx.tcx);\n                 let func = trans_operand(ccx, func);\n                 let return_place = if let Some((place, _)) = destination {\n                     trans_place(ccx, place)\n@@ -245,7 +246,17 @@ fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id:\n                     CValue::Func(func) => {\n                         ccx.bcx.ins().call(func, &args);\n                     }\n-                    _ => unimplemented!(\"indirect call\"),\n+                    func => {\n+                        let func = func.load_value(ccx, func_ty);\n+                        let sig = match func_ty.sty {\n+                            TypeVariants::TyFnDef(def_id, _substs) => ccx.tcx.fn_sig(def_id),\n+                            TypeVariants::TyFnPtr(fn_sig) => fn_sig,\n+                            _ => bug!(\"Calling non function type {:?}\", func_ty),\n+                        };\n+                        let sig = ccx.tcx.subst_and_normalize_erasing_regions(substs, ParamEnv::reveal_all(), &sig);\n+                        let sig = ccx.bcx.import_signature(cton_sig_from_fn_sig(sig.skip_binder()));\n+                        ccx.bcx.ins().call_indirect(sig, func, &args);\n+                    }\n                 }\n                 if let Some((_, dest)) = *destination {\n                     let ret_ebb = ccx.get_ebb(dest);\n@@ -257,7 +268,14 @@ fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id:\n             TerminatorKind::Resume | TerminatorKind::Abort | TerminatorKind::Unreachable => {\n                 ccx.bcx.ins().trap(TrapCode::User(!0));\n             }\n-            terminator => unimplemented!(\"terminator {:?}\", terminator),\n+            TerminatorKind::Yield { .. } |\n+            TerminatorKind::FalseEdges { .. } |\n+            TerminatorKind::FalseUnwind { .. } => {\n+                bug!(\"shouldn't exist at trans {:?}\", bb_data.terminator());\n+            }\n+            TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } | TerminatorKind::GeneratorDrop { .. } => {\n+                unimplemented!(\"terminator {:?}\", bb_data.terminator());\n+            }\n         }\n     }\n \n@@ -321,13 +339,21 @@ fn trans_rval<'a, 'tcx: 'a>(ccx: &mut CodegenCtxt<'a, 'tcx>, rval: &Rvalue<'tcx>\n                 bin_op => unimplemented!(\"checked bin op {:?} {:?} {:?}\", bin_op, lhs, rhs),\n             }\n         }\n-        rval => unimplemented!(\"{:?}\", rval),\n+        Rvalue::Cast(CastKind::ReifyFnPointer, operand, ty) => {\n+            let operand = trans_operand(ccx, operand);\n+            operand.force_stack(ccx, ty)\n+        }\n+        Rvalue::Cast(CastKind::UnsafeFnPointer, operand, ty) => {\n+            trans_operand(ccx, operand).force_stack(ccx, ty)\n+        }\n+        rval => unimplemented!(\"rval {:?}\", rval),\n     }\n }\n \n fn trans_operand<'a, 'tcx>(ccx: &mut CodegenCtxt<'a, 'tcx>, operand: &Operand<'tcx>) -> CValue {\n     match operand {\n-        Operand::Move(place) => CValue::ByRef(trans_place(ccx, place)),\n+        Operand::Move(place) |\n+        Operand::Copy(place) => CValue::ByRef(trans_place(ccx, place)),\n         Operand::Constant(const_) => {\n             match const_.literal {\n                 Literal::Value { value } => {\n@@ -366,9 +392,21 @@ fn trans_operand<'a, 'tcx>(ccx: &mut CodegenCtxt<'a, 'tcx>, operand: &Operand<'t\n \n fn do_memcpy<'a, 'tcx: 'a>(ccx: &mut CodegenCtxt<'a, 'tcx>, to: Value, from: Value, ty: Ty<'tcx>) {\n     let layout = ccx.tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap();\n-    for i in 0..(layout.size.bytes() as i32) {\n-        let byte = ccx.bcx.ins().load_complex(types::I8, MemFlags::new(), &[from], i);\n-        ccx.bcx.ins().store_complex(MemFlags::new(), byte, &[to], i);\n+    let size = layout.size.bytes() as i32;\n+    let ty = match size {\n+        2 => Some(types::I16),\n+        4 => Some(types::I32),\n+        8 => Some(types::I64),\n+        _ => None,\n+    };\n+    if let Some(ty) = ty {\n+        let data = ccx.bcx.ins().load(ty, MemFlags::new(), from, 0);\n+        ccx.bcx.ins().store(MemFlags::new(), data, to, 0);\n+    } else {\n+        for i in 0..size {\n+            let byte = ccx.bcx.ins().load(types::I8, MemFlags::new(), from, i);\n+            ccx.bcx.ins().store(MemFlags::new(), byte, to, i);\n+        }\n     }\n }\n \n@@ -416,6 +454,7 @@ fn cton_type_from_ty(ty: Ty) -> Option<types::Type> {\n                 IntTy::Isize => unimplemented!(),\n             }\n         }\n+        TypeVariants::TyFnPtr(_) => types::I64,\n         _ => return None,\n     })\n }"}, {"sha": "31ec965c2a38a63e097bb4f9a9d982a6a23d38db", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00", "patch": "@@ -1,6 +1,7 @@\n #![feature(rustc_private)]\n \n extern crate syntax;\n+#[macro_use]\n extern crate rustc;\n extern crate rustc_mir;\n extern crate rustc_codegen_utils;\n@@ -173,4 +174,4 @@ impl CodegenBackend for CretonneCodegenBackend {\n #[no_mangle]\n pub fn __rustc_codegen_backend() -> Box<CodegenBackend> {\n     CretonneCodegenBackend::new()\n-}\n\\ No newline at end of file\n+}"}]}