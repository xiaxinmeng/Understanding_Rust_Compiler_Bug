{"sha": "67a1c3526435b06f7ed0f19828ff14f2e7b90a35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YTFjMzUyNjQzNWIwNmY3ZWQwZjE5ODI4ZmYxNGYyZTdiOTBhMzU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-03-15T02:32:19Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-16T16:05:29Z"}, "message": "std: Add a a hashmap_from_vecs function", "tree": {"sha": "c496d5cb7c78f74a6948c3e313b64b5076726008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c496d5cb7c78f74a6948c3e313b64b5076726008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a1c3526435b06f7ed0f19828ff14f2e7b90a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a1c3526435b06f7ed0f19828ff14f2e7b90a35", "html_url": "https://github.com/rust-lang/rust/commit/67a1c3526435b06f7ed0f19828ff14f2e7b90a35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a1c3526435b06f7ed0f19828ff14f2e7b90a35/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ddd084631302c45e15d24d1bc8320b928904a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ddd084631302c45e15d24d1bc8320b928904a00", "html_url": "https://github.com/rust-lang/rust/commit/2ddd084631302c45e15d24d1bc8320b928904a00"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "29d3579afa30acfe5728a4256d6ddb71a6f7f2a6", "filename": "src/libstd/map.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/67a1c3526435b06f7ed0f19828ff14f2e7b90a35/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a1c3526435b06f7ed0f19828ff14f2e7b90a35/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=67a1c3526435b06f7ed0f19828ff14f2e7b90a35", "patch": "@@ -3,6 +3,8 @@\n import chained::hashmap;\n export hashmap, hashfn, eqfn, set, map, chained, hashmap, str_hash;\n export bytes_hash, int_hash, uint_hash, set_add;\n+export hash_from_vec, hash_from_strs, hash_from_bytes;\n+export hash_from_ints, hash_from_uints;\n \n #[doc = \"\n A function that returns a hash of a value\n@@ -313,17 +315,19 @@ fn bytes_hash<V: copy>() -> hashmap<[u8], V> {\n     ret hashmap(vec::u8::hash, vec::u8::eq);\n }\n \n+fn hash_int(&&x: int) -> uint { int::hash(x) }\n+fn eq_int(&&a: int, &&b: int) -> bool { ret a == b; }\n+\n #[doc = \"Construct a hashmap for int keys\"]\n fn int_hash<V: copy>() -> hashmap<int, V> {\n-    fn hash_int(&&x: int) -> uint { int::hash(x) }\n-    fn eq_int(&&a: int, &&b: int) -> bool { ret a == b; }\n     ret hashmap(hash_int, eq_int);\n }\n \n+fn hash_uint(&&x: uint) -> uint { uint::hash(x) }\n+fn eq_uint(&&a: uint, &&b: uint) -> bool { ret a == b; }\n+\n #[doc = \"Construct a hashmap for uint keys\"]\n fn uint_hash<V: copy>() -> hashmap<uint, V> {\n-    fn hash_uint(&&x: uint) -> uint { uint::hash(x) }\n-    fn eq_uint(&&a: uint, &&b: uint) -> bool { ret a == b; }\n     ret hashmap(hash_uint, eq_uint);\n }\n \n@@ -332,6 +336,37 @@ Convenience function for adding keys to a hashmap with nil type keys\n \"]\n fn set_add<K: copy>(set: set<K>, key: K) -> bool { ret set.insert(key, ()); }\n \n+#[doc = \"Construct a hashmap from a vector\"]\n+fn hash_from_vec<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>,\n+                                   items: [(K, V)]) -> hashmap<K, V> {\n+    let map = hashmap(hasher, eqer);\n+    vec::iter(items) { |item|\n+        let (key, value) = item;\n+        map.insert(key, value);\n+    }\n+    map\n+}\n+\n+#[doc = \"Construct a hashmap from a vector with string keys\"]\n+fn hash_from_strs<V: copy>(items: [(str, V)]) -> hashmap<str, V> {\n+    hash_from_vec(str::hash, str::eq, items)\n+}\n+\n+#[doc = \"Construct a hashmap from a vector with byte keys\"]\n+fn hash_from_bytes<V: copy>(items: [([u8], V)]) -> hashmap<[u8], V> {\n+    hash_from_vec(vec::u8::hash, vec::u8::eq, items)\n+}\n+\n+#[doc = \"Construct a hashmap from a vector with int keys\"]\n+fn hash_from_ints<V: copy>(items: [(int, V)]) -> hashmap<int, V> {\n+    hash_from_vec(hash_int, eq_int, items)\n+}\n+\n+#[doc = \"Construct a hashmap from a vector with uint keys\"]\n+fn hash_from_uints<V: copy>(items: [(uint, V)]) -> hashmap<uint, V> {\n+    hash_from_vec(hash_uint, eq_uint, items)\n+}\n+\n #[cfg(test)]\n mod tests {\n \n@@ -574,4 +609,17 @@ mod tests {\n         map.insert(key, \"val\");\n         assert (option::get(map.find(key)) == \"val\");\n     }\n+\n+    #[test]\n+    fn test_hash_from_vec() {\n+        let map = map::hash_from_strs([\n+            (\"a\", 1),\n+            (\"b\", 2),\n+            (\"c\", 3)\n+        ]);\n+        assert map.size() == 3u;\n+        assert map.get(\"a\") == 1;\n+        assert map.get(\"b\") == 2;\n+        assert map.get(\"c\") == 3;\n+    }\n }"}]}