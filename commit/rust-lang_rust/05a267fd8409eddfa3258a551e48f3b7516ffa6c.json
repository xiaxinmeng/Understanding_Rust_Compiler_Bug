{"sha": "05a267fd8409eddfa3258a551e48f3b7516ffa6c", "node_id": "C_kwDOAAsO6NoAKDA1YTI2N2ZkODQwOWVkZGZhMzI1OGE1NTFlNDhmM2I3NTE2ZmZhNmM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-09-12T20:47:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-12T20:47:17Z"}, "message": "Rollup merge of #101731 - notriddle:notriddle/more-improved-html-check, r=GuillaumeGomez\n\nrustdoc: improve rustdoc HTML suggestions handling of nested generics\n\nBased on some poor suggestions produced when stablizing this lint and running it on `manformed-generics.rs` in #101720", "tree": {"sha": "890f63042839b267aba9ef5868eaf9e20241de84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/890f63042839b267aba9ef5868eaf9e20241de84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a267fd8409eddfa3258a551e48f3b7516ffa6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjH5rVCRBK7hj4Ov3rIwAAyvsIAB6ZPxO+DD+zppoMDoNtKhc5\nUbKEOUU/uSa51h6sK3G349sOOIz8Vf+EVgyrZBcAPAEkGlCyh1S7ewHD4RZBVf29\nuNAsX22esgcAZYgPIb8WZoy8eKWzf6oa1e3XHw/gmI3Mm8yElW6BU+SYOtOsJnyu\ny5WiOpISyIJgnFMsgyPYuWIB7Nrnd+QMivJHypU7XTudjTYNJP5QXvdLuFa/uGzp\nlhb/dcaAD8S6XoCg0Sp4zrOORZkd69FV+HAiKqS61Ue8IFoLPiZD60u3FJ+7hw2u\nOOUu1WHGRpkqLYpsjs0ktBEaBQmoeqjnMY2atBroAtaqJEKu8fba4k41IFlhp3E=\n=nkQK\n-----END PGP SIGNATURE-----\n", "payload": "tree 890f63042839b267aba9ef5868eaf9e20241de84\nparent bbe23e86ece9df961272e0ff3be6c22e05668f86\nparent 84ca399465be4eced934733ef3dc0b48005ba6af\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1663015637 +0200\ncommitter GitHub <noreply@github.com> 1663015637 +0200\n\nRollup merge of #101731 - notriddle:notriddle/more-improved-html-check, r=GuillaumeGomez\n\nrustdoc: improve rustdoc HTML suggestions handling of nested generics\n\nBased on some poor suggestions produced when stablizing this lint and running it on `manformed-generics.rs` in #101720\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a267fd8409eddfa3258a551e48f3b7516ffa6c", "html_url": "https://github.com/rust-lang/rust/commit/05a267fd8409eddfa3258a551e48f3b7516ffa6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a267fd8409eddfa3258a551e48f3b7516ffa6c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbe23e86ece9df961272e0ff3be6c22e05668f86", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe23e86ece9df961272e0ff3be6c22e05668f86", "html_url": "https://github.com/rust-lang/rust/commit/bbe23e86ece9df961272e0ff3be6c22e05668f86"}, {"sha": "84ca399465be4eced934733ef3dc0b48005ba6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ca399465be4eced934733ef3dc0b48005ba6af", "html_url": "https://github.com/rust-lang/rust/commit/84ca399465be4eced934733ef3dc0b48005ba6af"}], "stats": {"total": 343, "additions": 330, "deletions": 13}, "files": [{"sha": "1bce24b0ad3e8f02dcf379022871acdae2c8f1e8", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 80, "deletions": 3, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=05a267fd8409eddfa3258a551e48f3b7516ffa6c", "patch": "@@ -94,6 +94,34 @@ fn extract_path_backwards(text: &str, end_pos: usize) -> Option<usize> {\n     if current_pos == end_pos { None } else { Some(current_pos) }\n }\n \n+fn extract_path_forward(text: &str, start_pos: usize) -> Option<usize> {\n+    use rustc_lexer::{is_id_continue, is_id_start};\n+    let mut current_pos = start_pos;\n+    loop {\n+        if current_pos < text.len() && text[current_pos..].starts_with(\"::\") {\n+            current_pos += 2;\n+        } else {\n+            break;\n+        }\n+        let mut chars = text[current_pos..].chars();\n+        if let Some(c) = chars.next() {\n+            if is_id_start(c) {\n+                current_pos += c.len_utf8();\n+            } else {\n+                break;\n+            }\n+        }\n+        while let Some(c) = chars.next() {\n+            if is_id_continue(c) {\n+                current_pos += c.len_utf8();\n+            } else {\n+                break;\n+            }\n+        }\n+    }\n+    if current_pos == start_pos { None } else { Some(current_pos) }\n+}\n+\n fn is_valid_for_html_tag_name(c: char, is_empty: bool) -> bool {\n     // https://spec.commonmark.org/0.30/#raw-html\n     //\n@@ -218,19 +246,68 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                     // If a tag looks like `<this>`, it might actually be a generic.\n                     // We don't try to detect stuff `<like, this>` because that's not valid HTML,\n                     // and we don't try to detect stuff `<like this>` because that's not valid Rust.\n-                    if let Some(Some(generics_start)) = (is_open_tag\n-                        && dox[..range.end].ends_with('>'))\n+                    let mut generics_end = range.end;\n+                    if let Some(Some(mut generics_start)) = (is_open_tag\n+                        && dox[..generics_end].ends_with('>'))\n                     .then(|| extract_path_backwards(&dox, range.start))\n                     {\n+                        while generics_start != 0\n+                            && generics_end < dox.len()\n+                            && dox.as_bytes()[generics_start - 1] == b'<'\n+                            && dox.as_bytes()[generics_end] == b'>'\n+                        {\n+                            generics_end += 1;\n+                            generics_start -= 1;\n+                            if let Some(new_start) = extract_path_backwards(&dox, generics_start) {\n+                                generics_start = new_start;\n+                            }\n+                            if let Some(new_end) = extract_path_forward(&dox, generics_end) {\n+                                generics_end = new_end;\n+                            }\n+                        }\n+                        if let Some(new_end) = extract_path_forward(&dox, generics_end) {\n+                            generics_end = new_end;\n+                        }\n                         let generics_sp = match super::source_span_for_markdown_range(\n                             tcx,\n                             &dox,\n-                            &(generics_start..range.end),\n+                            &(generics_start..generics_end),\n                             &item.attrs,\n                         ) {\n                             Some(sp) => sp,\n                             None => item.attr_span(tcx),\n                         };\n+                        // Sometimes, we only extract part of a path. For example, consider this:\n+                        //\n+                        //     <[u32] as IntoIter<u32>>::Item\n+                        //                       ^^^^^ unclosed HTML tag `u32`\n+                        //\n+                        // We don't have any code for parsing fully-qualified trait paths.\n+                        // In theory, we could add it, but doing it correctly would require\n+                        // parsing the entire path grammar, which is problematic because of\n+                        // overlap between the path grammar and Markdown.\n+                        //\n+                        // The example above shows that ambiguity. Is `[u32]` intended to be an\n+                        // intra-doc link to the u32 primitive, or is it intended to be a slice?\n+                        //\n+                        // If the below conditional were removed, we would suggest this, which is\n+                        // not what the user probably wants.\n+                        //\n+                        //     <[u32] as `IntoIter<u32>`>::Item\n+                        //\n+                        // We know that the user actually wants to wrap the whole thing in a code\n+                        // block, but the only reason we know that is because `u32` does not, in\n+                        // fact, implement IntoIter. If the example looks like this:\n+                        //\n+                        //     <[Vec<i32>] as IntoIter<i32>::Item\n+                        //\n+                        // The ideal fix would be significantly different.\n+                        if (generics_start > 0 && dox.as_bytes()[generics_start - 1] == b'<')\n+                            || (generics_end < dox.len() && dox.as_bytes()[generics_end] == b'>')\n+                        {\n+                            diag.emit();\n+                            return;\n+                        }\n                         // multipart form is chosen here because ``Vec<i32>`` would be confusing.\n                         diag.multipart_suggestion(\n                             \"try marking as source code\","}, {"sha": "476e3b2d43e4aae4fa09c0a91c10825ac68b01cd", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics-no-suggestions.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.rs?ref=05a267fd8409eddfa3258a551e48f3b7516ffa6c", "patch": "@@ -8,6 +8,48 @@ pub struct ConstGeneric;\n // HTML tags cannot contain commas, so no error.\n pub struct MultipleGenerics;\n \n+/// This <[u32] as Iterator<Item>> thing!\n+//~^ERROR unclosed HTML tag `Item`\n+// Some forms of fully-qualified path are simultaneously valid HTML tags\n+// with attributes. They produce an error, but no suggestion, because figuring\n+// out if this is valid would require parsing the entire path grammar.\n+//\n+// The important part is that we don't produce any *wrong* suggestions.\n+// While several other examples below are added to make sure we don't\n+// produce suggestions when given complex paths, this example is the actual\n+// reason behind not just using the real path parser. It's ambiguous: there's\n+// no way to locally reason out whether that `[u32]` is intended to be a slice\n+// or an intra-doc link.\n+pub struct FullyQualifiedPathsDoNotCount;\n+\n+/// This <Vec as IntoIter>::Iter thing!\n+//~^ERROR unclosed HTML tag `Vec`\n+// Some forms of fully-qualified path are simultaneously valid HTML tags\n+// with attributes. They produce an error, but no suggestion, because figuring\n+// out if this is valid would require parsing the entire path grammar.\n+pub struct FullyQualifiedPathsDoNotCount1;\n+\n+/// This Vec<Vec as IntoIter>::Iter thing!\n+//~^ERROR unclosed HTML tag `Vec`\n+// Some forms of fully-qualified path are simultaneously valid HTML tags\n+// with attributes. They produce an error, but no suggestion, because figuring\n+// out if this is valid would require parsing the entire path grammar.\n+pub struct FullyQualifiedPathsDoNotCount2;\n+\n+/// This Vec<Vec as IntoIter> thing!\n+//~^ERROR unclosed HTML tag `Vec`\n+// Some forms of fully-qualified path are simultaneously valid HTML tags\n+// with attributes. They produce an error, but no suggestion, because figuring\n+// out if this is valid would require parsing the entire path grammar.\n+pub struct FullyQualifiedPathsDoNotCount3;\n+\n+/// This Vec<Vec<i32> as IntoIter> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+// Some forms of fully-qualified path are simultaneously valid HTML tags\n+// with attributes. They produce an error, but no suggestion, because figuring\n+// out if this is valid would require parsing the entire path grammar.\n+pub struct FullyQualifiedPathsDoNotCount4;\n+\n /// This Vec<i32 class=\"test\"> thing!\n //~^ERROR unclosed HTML tag `i32`\n // HTML attributes shouldn't be treated as Rust syntax, so no suggestions."}, {"sha": "3856a251321b230455283eb1cfac965e449c7a57", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics-no-suggestions.stderr", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.stderr?ref=05a267fd8409eddfa3258a551e48f3b7516ffa6c", "patch": "@@ -1,38 +1,68 @@\n-error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics-no-suggestions.rs:11:13\n+error: unclosed HTML tag `Item`\n+  --> $DIR/html-as-generics-no-suggestions.rs:11:28\n    |\n-LL | /// This Vec<i32 class=\"test\"> thing!\n-   |             ^^^^\n+LL | /// This <[u32] as Iterator<Item>> thing!\n+   |                            ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/html-as-generics-no-suggestions.rs:1:9\n    |\n LL | #![deny(rustdoc::invalid_html_tags)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: unclosed HTML tag `Vec`\n+  --> $DIR/html-as-generics-no-suggestions.rs:25:10\n+   |\n+LL | /// This <Vec as IntoIter>::Iter thing!\n+   |          ^^^^\n+\n+error: unclosed HTML tag `Vec`\n+  --> $DIR/html-as-generics-no-suggestions.rs:32:13\n+   |\n+LL | /// This Vec<Vec as IntoIter>::Iter thing!\n+   |             ^^^^\n+\n+error: unclosed HTML tag `Vec`\n+  --> $DIR/html-as-generics-no-suggestions.rs:39:13\n+   |\n+LL | /// This Vec<Vec as IntoIter> thing!\n+   |             ^^^^\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics-no-suggestions.rs:46:17\n+   |\n+LL | /// This Vec<Vec<i32> as IntoIter> thing!\n+   |                 ^^^^^\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics-no-suggestions.rs:53:13\n+   |\n+LL | /// This Vec<i32 class=\"test\"> thing!\n+   |             ^^^^\n+\n error: unopened HTML tag `i32`\n-  --> $DIR/html-as-generics-no-suggestions.rs:20:13\n+  --> $DIR/html-as-generics-no-suggestions.rs:62:13\n    |\n LL | /// This Vec</i32> thing!\n    |             ^^^^^^\n \n error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics-no-suggestions.rs:25:13\n+  --> $DIR/html-as-generics-no-suggestions.rs:67:13\n    |\n LL | /// This 123<i32> thing!\n    |             ^^^^^\n \n error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics-no-suggestions.rs:30:14\n+  --> $DIR/html-as-generics-no-suggestions.rs:72:14\n    |\n LL | /// This Vec:<i32> thing!\n    |              ^^^^^\n \n error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics-no-suggestions.rs:35:39\n+  --> $DIR/html-as-generics-no-suggestions.rs:77:39\n    |\n LL | /// This [link](https://rust-lang.org)<i32> thing!\n    |                                       ^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "07c8c9ff254bc4857618a96e100d4fcb4d69c48e", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.fixed", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed?ref=05a267fd8409eddfa3258a551e48f3b7516ffa6c", "patch": "@@ -30,3 +30,43 @@ pub struct BareTurbofish;\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n pub struct Nested;\n+\n+/// Nested generics `Vec<Vec<u32>>`\n+//~^ ERROR unclosed HTML tag `u32`\n+//~|HELP try marking as source\n+pub struct NestedGenerics;\n+\n+/// Generics with path `Vec<i32>::Iter`\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct GenericsWithPath;\n+\n+/// Generics with path `<Vec<i32>>::Iter`\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPath;\n+\n+/// Generics with path `Vec<Vec<i32>>::Iter`\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPath2;\n+\n+/// Generics with bump `<Vec<i32>>`s\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithBump;\n+\n+/// Generics with bump `Vec<Vec<i32>>`s\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithBump2;\n+\n+/// Generics with punct `<Vec<i32>>`!\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPunct;\n+\n+/// Generics with punct `Vec<Vec<i32>>`!\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPunct2;"}, {"sha": "cdd652f397ec4b81cc0d780ae27b3be26f8ea5e4", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs?ref=05a267fd8409eddfa3258a551e48f3b7516ffa6c", "patch": "@@ -30,3 +30,43 @@ pub struct BareTurbofish;\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n pub struct Nested;\n+\n+/// Nested generics Vec<Vec<u32>>\n+//~^ ERROR unclosed HTML tag `u32`\n+//~|HELP try marking as source\n+pub struct NestedGenerics;\n+\n+/// Generics with path Vec<i32>::Iter\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct GenericsWithPath;\n+\n+/// Generics with path <Vec<i32>>::Iter\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPath;\n+\n+/// Generics with path Vec<Vec<i32>>::Iter\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPath2;\n+\n+/// Generics with bump <Vec<i32>>s\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithBump;\n+\n+/// Generics with bump Vec<Vec<i32>>s\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithBump2;\n+\n+/// Generics with punct <Vec<i32>>!\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPunct;\n+\n+/// Generics with punct Vec<Vec<i32>>!\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPunct2;"}, {"sha": "211dd4210d50ce319d083d48a6020a5ef7a02346", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.stderr", "status": "modified", "additions": 89, "deletions": 1, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05a267fd8409eddfa3258a551e48f3b7516ffa6c/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr?ref=05a267fd8409eddfa3258a551e48f3b7516ffa6c", "patch": "@@ -69,5 +69,93 @@ help: try marking as source code\n LL | /// This <span>`Vec::<i32>`</span> thing!\n    |                +          +\n \n-error: aborting due to 6 previous errors\n+error: unclosed HTML tag `u32`\n+  --> $DIR/html-as-generics.rs:34:28\n+   |\n+LL | /// Nested generics Vec<Vec<u32>>\n+   |                            ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Nested generics `Vec<Vec<u32>>`\n+   |                     +             +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:39:27\n+   |\n+LL | /// Generics with path Vec<i32>::Iter\n+   |                           ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with path `Vec<i32>::Iter`\n+   |                        +              +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:44:28\n+   |\n+LL | /// Generics with path <Vec<i32>>::Iter\n+   |                            ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with path `<Vec<i32>>::Iter`\n+   |                        +                +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:49:31\n+   |\n+LL | /// Generics with path Vec<Vec<i32>>::Iter\n+   |                               ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with path `Vec<Vec<i32>>::Iter`\n+   |                        +                   +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:54:28\n+   |\n+LL | /// Generics with bump <Vec<i32>>s\n+   |                            ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with bump `<Vec<i32>>`s\n+   |                        +          +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:59:31\n+   |\n+LL | /// Generics with bump Vec<Vec<i32>>s\n+   |                               ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with bump `Vec<Vec<i32>>`s\n+   |                        +             +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:64:29\n+   |\n+LL | /// Generics with punct <Vec<i32>>!\n+   |                             ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with punct `<Vec<i32>>`!\n+   |                         +          +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:69:32\n+   |\n+LL | /// Generics with punct Vec<Vec<i32>>!\n+   |                                ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with punct `Vec<Vec<i32>>`!\n+   |                         +             +\n+\n+error: aborting due to 14 previous errors\n "}]}