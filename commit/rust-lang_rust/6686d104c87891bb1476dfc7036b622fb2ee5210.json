{"sha": "6686d104c87891bb1476dfc7036b622fb2ee5210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ODZkMTA0Yzg3ODkxYmIxNDc2ZGZjNzAzNmI2MjJmYjJlZTUyMTA=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-04-06T14:58:00Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-04-06T14:58:00Z"}, "message": "tidy fix", "tree": {"sha": "a7c413ce0c549a525c39450dba288fab0b505a0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7c413ce0c549a525c39450dba288fab0b505a0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6686d104c87891bb1476dfc7036b622fb2ee5210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6686d104c87891bb1476dfc7036b622fb2ee5210", "html_url": "https://github.com/rust-lang/rust/commit/6686d104c87891bb1476dfc7036b622fb2ee5210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6686d104c87891bb1476dfc7036b622fb2ee5210/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6938ee08e687dca9a6ac0f138f00b225e1b9038", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6938ee08e687dca9a6ac0f138f00b225e1b9038", "html_url": "https://github.com/rust-lang/rust/commit/e6938ee08e687dca9a6ac0f138f00b225e1b9038"}], "stats": {"total": 35, "additions": 1, "deletions": 34}, "files": [{"sha": "0f529c77aea6be972ad420570d260804a2249156", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6686d104c87891bb1476dfc7036b622fb2ee5210/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6686d104c87891bb1476dfc7036b622fb2ee5210/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6686d104c87891bb1476dfc7036b622fb2ee5210", "patch": "@@ -1592,43 +1592,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                 },\n                             _ => {},\n                             }\n-                        }, \n+                        },\n                         _ => {},\n                     }\n \n-\n-                    // match *place_err {\n-                    //     Place::Projection(ref proj) => {\n-                    //         match proj.elem {\n-                    //             ProjectionElem::Deref => {\n-                    //                 match proj.base {\n-                    //                     Place::Local(local) => {\n-                    //                         let locations = self.mir.find_assignments(local);\n-                    //                         if locations.len() > 0 {\n-                    //                             let item_msg = if error_reported {\n-                    //                                 match self.specialized_description(base){\n-                    //                                     Some(msg) => msg,\n-                    //                                     None => self.get_main_error_message(place)\n-                    //                                 }\n-                    //                             } else {\n-                    //                                 self.get_main_error_message(place)\n-                    //                             };\n-                    //                             err_info = Some((\n-                    //                                 self.mir.source_info(locations[0]).span,\n-                    //                                   \"consider changing this to be a \\\n-                    //                                    mutable reference: `&mut`\", item_msg,\n-                    //                                    \"cannot assign through `&`-reference\"));\n-                    //                         }\n-                    //                     }\n-                    //                     _ => {},\n-                    //                 }\n-                    //             }\n-                    //             _ => {}\n-                    //         }\n-                    //     }\n-                    //     _ => {}\n-                    // }\n-\n                     if let Some((err_help_span, err_help_stmt, item_msg, sec_span)) = err_info {\n                         let mut err = self.tcx.cannot_assign(span, &item_msg, Origin::Mir, true);\n                         err.span_suggestion(err_help_span, err_help_stmt, format!(\"\"));"}]}