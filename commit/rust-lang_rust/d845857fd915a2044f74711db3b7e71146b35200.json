{"sha": "d845857fd915a2044f74711db3b7e71146b35200", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NDU4NTdmZDkxNWEyMDQ0Zjc0NzExZGIzYjdlNzExNDZiMzUyMDA=", "commit": {"author": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2014-09-22T17:31:31Z"}, "committer": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2014-09-22T17:31:31Z"}, "message": "Fix deprecation warnings in check-docs.\n\nFallout of closing #17185.", "tree": {"sha": "adcf9075f8242aa4c7ee375509dd8447598c29a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adcf9075f8242aa4c7ee375509dd8447598c29a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d845857fd915a2044f74711db3b7e71146b35200", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d845857fd915a2044f74711db3b7e71146b35200", "html_url": "https://github.com/rust-lang/rust/commit/d845857fd915a2044f74711db3b7e71146b35200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d845857fd915a2044f74711db3b7e71146b35200/comments", "author": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52ea83dddcc05c2e861b9de9316616df6a9228dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/52ea83dddcc05c2e861b9de9316616df6a9228dc", "html_url": "https://github.com/rust-lang/rust/commit/52ea83dddcc05c2e861b9de9316616df6a9228dc"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "9d3be0d14d38599da327571d24269fed0f05205c", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=d845857fd915a2044f74711db3b7e71146b35200", "patch": "@@ -131,7 +131,7 @@ pub trait MutableMap<K, V>: Map<K, V> + Mutable {\n     /// let mut map = HashMap::new();\n     /// assert_eq!(map.insert(\"key\", 2i), true);\n     /// assert_eq!(map.insert(\"key\", 9i), false);\n-    /// assert_eq!(map.get(&\"key\"), &9i);\n+    /// assert_eq!(map[\"key\"], 9i);\n     /// ```\n     #[inline]\n     fn insert(&mut self, key: K, value: V) -> bool {\n@@ -171,7 +171,7 @@ pub trait MutableMap<K, V>: Map<K, V> + Mutable {\n     ///\n     /// map.insert(\"a\", 1i);\n     /// assert_eq!(map.swap(\"a\", 37i), Some(1i));\n-    /// assert_eq!(map.get(&\"a\"), &37i);\n+    /// assert_eq!(map[\"a\"], 37i);\n     /// ```\n     fn swap(&mut self, k: K, v: V) -> Option<V>;\n \n@@ -203,7 +203,7 @@ pub trait MutableMap<K, V>: Map<K, V> + Mutable {\n     ///     Some(x) => *x = 7i,\n     ///     None => (),\n     /// }\n-    /// assert_eq!(map.get(&\"a\"), &7i);\n+    /// assert_eq!(map[\"a\"], 7i);\n     /// ```\n     fn find_mut<'a>(&'a mut self, key: &K) -> Option<&'a mut V>;\n }"}, {"sha": "94dbf84a4b4b947b88a4b0651b4ed42c5ee23c89", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=d845857fd915a2044f74711db3b7e71146b35200", "patch": "@@ -348,11 +348,11 @@ impl<V:Clone> SmallIntMap<V> {\n     /// let mut map = SmallIntMap::new();\n     ///\n     /// // Key does not exist, will do a simple insert\n-    /// assert!(map.update(1, vec![1i, 2], |old, new| old.append(new.as_slice())));\n+    /// assert!(map.update(1, vec![1i, 2], |mut old, new| { old.extend(new.into_iter()); old }));\n     /// assert_eq!(map[1], vec![1i, 2]);\n     ///\n     /// // Key exists, update the value\n-    /// assert!(!map.update(1, vec![3i, 4], |old, new| old.append(new.as_slice())));\n+    /// assert!(!map.update(1, vec![3i, 4], |mut old, new| { old.extend(new.into_iter()); old }));\n     /// assert_eq!(map[1], vec![1i, 2, 3, 4]);\n     /// ```\n     pub fn update(&mut self, key: uint, newval: V, ff: |V, V| -> V) -> bool {"}, {"sha": "479a4c3045a6a8b9ffffced13321a054806b846e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d845857fd915a2044f74711db3b7e71146b35200", "patch": "@@ -960,6 +960,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```\n+    /// #![allow(deprecated)]\n     /// let vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.tailn(2) == [3, 4]);\n     /// ```\n@@ -1065,6 +1066,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```\n+    /// #![allow(deprecated)]\n     /// let mut vec = vec![1i, 2, 3];\n     /// assert!(vec.shift() == Some(1));\n     /// assert_eq!(vec, vec![2, 3]);"}, {"sha": "e53f354a97eba864e3da780689390d062ab358bd", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=d845857fd915a2044f74711db3b7e71146b35200", "patch": "@@ -1062,11 +1062,11 @@ pub trait MutableCloneableSlice<T> {\n     /// let mut dst = [0i, 0, 0];\n     /// let src = [1i, 2];\n     ///\n-    /// assert!(dst.copy_from(src) == 2);\n+    /// assert!(dst.clone_from_slice(src) == 2);\n     /// assert!(dst == [1, 2, 0]);\n     ///\n     /// let src2 = [3i, 4, 5, 6];\n-    /// assert!(dst.copy_from(src2) == 3);\n+    /// assert!(dst.clone_from_slice(src2) == 3);\n     /// assert!(dst == [3i, 4, 5]);\n     /// ```\n     fn clone_from_slice(self, &[T]) -> uint;"}, {"sha": "596e7e5d931a8d246d2cd3c897269ac185ecb73b", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=d845857fd915a2044f74711db3b7e71146b35200", "patch": "@@ -336,6 +336,7 @@ impl Pattern {\n      * # Example\n      *\n      * ```rust\n+     * #![allow(deprecated)]\n      * use glob::Pattern;\n      *\n      * assert!(Pattern::new(\"c?t\").matches(\"cat\"));"}, {"sha": "7c786976699468f7c8f2a2aade1da015e2a7ae7c", "filename": "src/libnum/integer.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibnum%2Finteger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d845857fd915a2044f74711db3b7e71146b35200/src%2Flibnum%2Finteger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Finteger.rs?ref=d845857fd915a2044f74711db3b7e71146b35200", "patch": "@@ -18,6 +18,7 @@ pub trait Integer: Num + PartialOrd\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// # use num::Integer;\n     /// assert!(( 8i).div_floor(& 3) ==  2);\n     /// assert!(( 8i).div_floor(&-3) == -3);\n@@ -34,6 +35,7 @@ pub trait Integer: Num + PartialOrd\n     /// Floored integer modulo, satisfying:\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// # use num::Integer;\n     /// # let n = 1i; let d = 1i;\n     /// assert!(n.div_floor(&d) * d + n.mod_floor(&d) == n)\n@@ -42,6 +44,7 @@ pub trait Integer: Num + PartialOrd\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// # use num::Integer;\n     /// assert!(( 8i).mod_floor(& 3) ==  2);\n     /// assert!(( 8i).mod_floor(&-3) == -1);\n@@ -60,6 +63,7 @@ pub trait Integer: Num + PartialOrd\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// # use num::Integer;\n     /// assert_eq!(6i.gcd(&8), 2);\n     /// assert_eq!(7i.gcd(&3), 1);\n@@ -71,6 +75,7 @@ pub trait Integer: Num + PartialOrd\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// # use num::Integer;\n     /// assert_eq!(7i.lcm(&3), 21);\n     /// assert_eq!(2i.lcm(&4), 4);\n@@ -86,6 +91,7 @@ pub trait Integer: Num + PartialOrd\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// # use num::Integer;\n     /// assert_eq!(9i.is_multiple_of(&3), true);\n     /// assert_eq!(3i.is_multiple_of(&9), false);\n@@ -97,6 +103,7 @@ pub trait Integer: Num + PartialOrd\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// # use num::Integer;\n     /// assert_eq!(3i.is_even(), false);\n     /// assert_eq!(4i.is_even(), true);\n@@ -108,6 +115,7 @@ pub trait Integer: Num + PartialOrd\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// # use num::Integer;\n     /// assert_eq!(3i.is_odd(), true);\n     /// assert_eq!(4i.is_odd(), false);\n@@ -120,6 +128,7 @@ pub trait Integer: Num + PartialOrd\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// # use num::Integer;\n     /// assert_eq!(( 8i).div_rem( &3), ( 2,  2));\n     /// assert_eq!(( 8i).div_rem(&-3), (-2,  2));\n@@ -142,6 +151,7 @@ pub trait Integer: Num + PartialOrd\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// # use num::Integer;\n     /// assert_eq!(( 8i).div_mod_floor( &3), ( 2,  2));\n     /// assert_eq!(( 8i).div_mod_floor(&-3), (-3, -1));"}]}