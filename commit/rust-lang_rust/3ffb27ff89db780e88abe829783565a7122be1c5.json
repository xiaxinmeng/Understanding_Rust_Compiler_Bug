{"sha": "3ffb27ff89db780e88abe829783565a7122be1c5", "node_id": "C_kwDOAAsO6NoAKDNmZmIyN2ZmODlkYjc4MGU4OGFiZTgyOTc4MzU2NWE3MTIyYmUxYzU", "commit": {"author": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-04-06T16:27:47Z"}, "committer": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-05-05T19:48:16Z"}, "message": "Use new bindings", "tree": {"sha": "a27ada9306b06ebf880c01d40167640fde5b3540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a27ada9306b06ebf880c01d40167640fde5b3540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ffb27ff89db780e88abe829783565a7122be1c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmRVXYAACgkQcTRy8vRW\nJ96uZxAAgqAoUDU8RlHW61E7LXXh1PLQnfi43nubjrtyu90IS7UgKIdO2YH28V4F\n98LLEJ6wnB/OwspqaQp8+oARS7D0t6ds5YX6NhJRujUsEuqbVDF6WuIQPm3yaIcR\nj3zRanjd+j0tyBEDTxRlP4Bc0H3hdgejzGJ7f5RLUXBPiBHnKR8KvQFWCFZMwPU/\nwyseAbHnPtax+Iz3d3hqwq0Sf4kxZgU+AAASiycs8oJkASw67NmHx8+XylnMfCk6\n1UAe+XeNeq8IPHB9/JGXNx8+3FbaASUIKBrDIsd2OCWJZok0VfnJ/n9oW3UzBqGO\nPZA2uvCm27Ln4BxYQR8phgUjTQldJVfEIuKErcpKBvvd7c4nd/FIUZsnALTs6Idh\nk/POqMO+WcXRbt0y3b2varzyG/QbO6jZBLbx13dVGXAmYgE4xoYyILC1Q9p0tt+h\na8s549t+DhD+kuf4ZNuULNwQ6wvl2AEMNED2I8HfZ33uyB45Q9SjxfdFr+2VNwVe\nh7qiJpl3bsO3qcTAPkJaRPiOyDaXuYFMYd5aBRD+/gPBJLmyG4I0eVeZmqxYvTeO\nQWZsg94fM2FOu/Yal11sx7NgI832mtFHgL/pj5m0D0Y1ivTpwAYE0qw7e2QxsmzH\n6xMRzFDa7FSr1GUpcdVLPGRTbBppKuMZnTZ8i5ryVuT3WC7dZiY=\n=NvGC\n-----END PGP SIGNATURE-----", "payload": "tree a27ada9306b06ebf880c01d40167640fde5b3540\nparent e92ee0355969e7c34d13299d8567e384dc24e9ef\nauthor Chris Denton <chris@chrisdenton.dev> 1680798467 +0100\ncommitter Chris Denton <chris@chrisdenton.dev> 1683316096 +0100\n\nUse new bindings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffb27ff89db780e88abe829783565a7122be1c5", "html_url": "https://github.com/rust-lang/rust/commit/3ffb27ff89db780e88abe829783565a7122be1c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ffb27ff89db780e88abe829783565a7122be1c5/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e92ee0355969e7c34d13299d8567e384dc24e9ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/e92ee0355969e7c34d13299d8567e384dc24e9ef", "html_url": "https://github.com/rust-lang/rust/commit/e92ee0355969e7c34d13299d8567e384dc24e9ef"}], "stats": {"total": 123, "additions": 70, "deletions": 53}, "files": [{"sha": "ce34cd1a9bfb3fe9e03f74ccd97145295aff1e32", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -110,7 +110,7 @@ impl BorrowedSocket<'_> {\n     /// object as the existing `BorrowedSocket` instance.\n     #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone_to_owned(&self) -> io::Result<OwnedSocket> {\n-        let mut info = unsafe { mem::zeroed::<c::WSAPROTOCOL_INFO>() };\n+        let mut info = unsafe { mem::zeroed::<c::WSAPROTOCOL_INFOW>() };\n         let result = unsafe {\n             c::WSADuplicateSocketW(self.as_raw_socket(), c::GetCurrentProcessId(), &mut info)\n         };"}, {"sha": "4fe95d41116b5e2d8ca83050f073e5832bf4b820", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -114,17 +114,20 @@ impl Module {\n     /// (e.g. kernel32 and ntdll).\n     pub unsafe fn new(name: &CStr) -> Option<Self> {\n         // SAFETY: A CStr is always null terminated.\n-        let module = c::GetModuleHandleA(name.as_ptr());\n+        let module = c::GetModuleHandleA(name.as_ptr().cast::<u8>());\n         NonNull::new(module).map(Self)\n     }\n \n     // Try to get the address of a function.\n     pub fn proc_address(self, name: &CStr) -> Option<NonNull<c_void>> {\n-        // SAFETY:\n-        // `self.0` will always be a valid module.\n-        // A CStr is always null terminated.\n-        let proc = unsafe { c::GetProcAddress(self.0.as_ptr(), name.as_ptr()) };\n-        NonNull::new(proc)\n+        unsafe {\n+            // SAFETY:\n+            // `self.0` will always be a valid module.\n+            // A CStr is always null terminated.\n+            let proc = c::GetProcAddress(self.0.as_ptr(), name.as_ptr().cast::<u8>());\n+            // SAFETY: `GetProcAddress` returns None on null.\n+            proc.map(|p| NonNull::new_unchecked(p as *mut c_void))\n+        }\n     }\n }\n \n@@ -199,6 +202,7 @@ macro_rules! compat_fn_optional {\n     )+) => (\n         $(\n             pub mod $symbol {\n+                #[allow(unused_imports)]\n                 use super::*;\n                 use crate::ffi::c_void;\n                 use crate::mem;"}, {"sha": "ce427766d17330fa75ab3154d10348e25efb9d38", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -89,6 +89,12 @@ pub struct FileTimes {\n     accessed: Option<c::FILETIME>,\n     modified: Option<c::FILETIME>,\n }\n+impl core::fmt::Debug for c::FILETIME {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let time = ((self.dwHighDateTime as u64) << 32) | self.dwLowDateTime as u64;\n+        f.debug_tuple(\"FILETIME\").field(&time).finish()\n+    }\n+}\n \n #[derive(Debug)]\n pub struct DirBuilder;\n@@ -290,6 +296,7 @@ impl File {\n                 ptr::null_mut(),\n             )\n         };\n+        let handle = unsafe { HandleOrInvalid::from_raw_handle(handle) };\n         if let Ok(handle) = handle.try_into() {\n             Ok(File { handle: Handle::from_inner(handle) })\n         } else {\n@@ -501,7 +508,8 @@ impl File {\n     }\n \n     fn readlink(&self) -> io::Result<PathBuf> {\n-        let mut space = Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n+        let mut space =\n+            Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE as usize]);\n         let (_bytes, buf) = self.reparse_point(&mut space)?;\n         unsafe {\n             let (path_buffer, subst_off, subst_len, relative) = match (*buf).ReparseTag {\n@@ -589,7 +597,11 @@ impl File {\n             ));\n         }\n         cvt(unsafe {\n-            c::SetFileTime(self.as_handle(), None, times.accessed.as_ref(), times.modified.as_ref())\n+            let accessed =\n+                times.accessed.as_ref().map(|a| a as *const c::FILETIME).unwrap_or(ptr::null());\n+            let modified =\n+                times.modified.as_ref().map(|a| a as *const c::FILETIME).unwrap_or(ptr::null());\n+            c::SetFileTime(self.as_raw_handle(), ptr::null_mut(), accessed, modified)\n         })?;\n         Ok(())\n     }\n@@ -618,9 +630,9 @@ impl File {\n     /// then errors will be `ERROR_NOT_SUPPORTED` or `ERROR_INVALID_PARAMETER`.\n     fn posix_delete(&self) -> io::Result<()> {\n         let mut info = c::FILE_DISPOSITION_INFO_EX {\n-            Flags: c::FILE_DISPOSITION_DELETE\n-                | c::FILE_DISPOSITION_POSIX_SEMANTICS\n-                | c::FILE_DISPOSITION_IGNORE_READONLY_ATTRIBUTE,\n+            Flags: c::FILE_DISPOSITION_FLAG_DELETE\n+                | c::FILE_DISPOSITION_FLAG_POSIX_SEMANTICS\n+                | c::FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE,\n         };\n         let size = mem::size_of_val(&info);\n         cvt(unsafe {\n@@ -791,23 +803,23 @@ fn open_link_no_reparse(parent: &File, name: &[u16], access: u32) -> io::Result<\n     // See https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntcreatefile\n     unsafe {\n         let mut handle = ptr::null_mut();\n-        let mut io_status = c::IO_STATUS_BLOCK::default();\n-        let name_str = c::UNICODE_STRING::from_ref(name);\n+        let mut io_status = c::IO_STATUS_BLOCK::PENDING;\n+        let mut name_str = c::UNICODE_STRING::from_ref(name);\n         use crate::sync::atomic::{AtomicU32, Ordering};\n         // The `OBJ_DONT_REPARSE` attribute ensures that we haven't been\n         // tricked into following a symlink. However, it may not be available in\n         // earlier versions of Windows.\n         static ATTRIBUTES: AtomicU32 = AtomicU32::new(c::OBJ_DONT_REPARSE);\n-        let object = c::OBJECT_ATTRIBUTES {\n-            ObjectName: &name_str,\n+        let mut object = c::OBJECT_ATTRIBUTES {\n+            ObjectName: &mut name_str,\n             RootDirectory: parent.as_raw_handle(),\n             Attributes: ATTRIBUTES.load(Ordering::Relaxed),\n             ..c::OBJECT_ATTRIBUTES::default()\n         };\n         let status = c::NtCreateFile(\n             &mut handle,\n             access,\n-            &object,\n+            &mut object,\n             &mut io_status,\n             crate::ptr::null_mut(),\n             0,\n@@ -1368,7 +1380,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n         _dwCallbackReason: c::DWORD,\n         _hSourceFile: c::HANDLE,\n         _hDestinationFile: c::HANDLE,\n-        lpData: c::LPVOID,\n+        lpData: c::LPCVOID,\n     ) -> c::DWORD {\n         if dwStreamNumber == 1 {\n             *(lpData as *mut i64) = StreamBytesTransferred;\n@@ -1415,9 +1427,10 @@ fn symlink_junction_inner(original: &Path, junction: &Path) -> io::Result<()> {\n     let f = File::open(junction, &opts)?;\n     let h = f.as_inner().as_raw_handle();\n     unsafe {\n-        let mut data = Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n+        let mut data =\n+            Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE as usize]);\n         let data_ptr = data.0.as_mut_ptr();\n-        let data_end = data_ptr.add(c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE);\n+        let data_end = data_ptr.add(c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE as usize);\n         let db = data_ptr.cast::<c::REPARSE_MOUNTPOINT_DATA_BUFFER>();\n         // Zero the header to ensure it's fully initialized, including reserved parameters.\n         *db = mem::zeroed();"}, {"sha": "84c1fbde32d2fd7bfac9bf4b8aac9b43c79fd15c", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -144,7 +144,7 @@ impl Handle {\n         let len = cmp::min(buf.len(), <c::DWORD>::MAX as usize) as c::DWORD;\n         let mut amt = 0;\n         let res = cvt(c::ReadFile(\n-            self.as_handle(),\n+            self.as_raw_handle(),\n             buf.as_ptr() as c::LPVOID,\n             len,\n             &mut amt,\n@@ -235,7 +235,7 @@ impl Handle {\n         len: usize,\n         offset: Option<u64>,\n     ) -> io::Result<usize> {\n-        let mut io_status = c::IO_STATUS_BLOCK::default();\n+        let mut io_status = c::IO_STATUS_BLOCK::PENDING;\n \n         // The length is clamped at u32::MAX.\n         let len = cmp::min(len, c::DWORD::MAX as usize) as c::DWORD;\n@@ -283,7 +283,7 @@ impl Handle {\n     ///\n     /// If `offset` is `None` then the current file position is used.\n     fn synchronous_write(&self, buf: &[u8], offset: Option<u64>) -> io::Result<usize> {\n-        let mut io_status = c::IO_STATUS_BLOCK::default();\n+        let mut io_status = c::IO_STATUS_BLOCK::PENDING;\n \n         // The length is clamped at u32::MAX.\n         let len = cmp::min(buf.len(), c::DWORD::MAX as usize) as c::DWORD;"}, {"sha": "fc9856caed62fc547c07b3997338aecc07e2a70d", "filename": "library/std/src/sys/windows/io.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -17,10 +17,7 @@ impl<'a> IoSlice<'a> {\n     pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n         assert!(buf.len() <= c::ULONG::MAX as usize);\n         IoSlice {\n-            vec: c::WSABUF {\n-                len: buf.len() as c::ULONG,\n-                buf: buf.as_ptr() as *mut u8 as *mut c::CHAR,\n-            },\n+            vec: c::WSABUF { len: buf.len() as c::ULONG, buf: buf.as_ptr() as *mut u8 },\n             _p: PhantomData,\n         }\n     }\n@@ -54,7 +51,7 @@ impl<'a> IoSliceMut<'a> {\n     pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n         assert!(buf.len() <= c::ULONG::MAX as usize);\n         IoSliceMut {\n-            vec: c::WSABUF { len: buf.len() as c::ULONG, buf: buf.as_mut_ptr() as *mut c::CHAR },\n+            vec: c::WSABUF { len: buf.len() as c::ULONG, buf: buf.as_mut_ptr() },\n             _p: PhantomData,\n         }\n     }"}, {"sha": "2404bbe2b893a047215aae89afec601dc11215b6", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -263,7 +263,7 @@ impl Socket {\n                 &mut nread,\n                 &mut flags,\n                 ptr::null_mut(),\n-                ptr::null_mut(),\n+                None,\n             )\n         };\n \n@@ -347,7 +347,7 @@ impl Socket {\n                 &mut nwritten,\n                 0,\n                 ptr::null_mut(),\n-                ptr::null_mut(),\n+                None,\n             )\n         };\n         cvt(result).map(|_| nwritten as usize)"}, {"sha": "d07147eccc1d347092bb628b4b5bceefa1bd25f3", "filename": "library/std/src/sys/windows/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -373,7 +373,7 @@ impl AnonPipe {\n \n         // Asynchronous read of the pipe.\n         // If successful, `callback` will be called once it completes.\n-        let result = io(self.inner.as_handle(), buf, len, &mut overlapped, callback);\n+        let result = io(self.inner.as_handle(), buf, len, &mut overlapped, Some(callback));\n         if result == c::FALSE {\n             // We can return here because the call failed.\n             // After this we must not return until the I/O completes."}, {"sha": "df3667c0fd7886818749ad6702112eda3e5ee192", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -308,7 +308,7 @@ impl Command {\n         let stderr = stderr.to_handle(c::STD_ERROR_HANDLE, &mut pipes.stderr)?;\n \n         let mut si = zeroed_startupinfo();\n-        si.cb = mem::size_of::<c::STARTUPINFO>() as c::DWORD;\n+        si.cb = mem::size_of::<c::STARTUPINFOW>() as c::DWORD;\n \n         // If at least one of stdin, stdout or stderr are set (i.e. are non null)\n         // then set the `hStd` fields in `STARTUPINFO`.\n@@ -332,7 +332,7 @@ impl Command {\n                 flags,\n                 envp,\n                 dirp,\n-                &mut si,\n+                &si,\n                 &mut pi,\n             ))\n         }?;\n@@ -720,8 +720,8 @@ impl From<u32> for ExitCode {\n     }\n }\n \n-fn zeroed_startupinfo() -> c::STARTUPINFO {\n-    c::STARTUPINFO {\n+fn zeroed_startupinfo() -> c::STARTUPINFOW {\n+    c::STARTUPINFOW {\n         cb: 0,\n         lpReserved: ptr::null_mut(),\n         lpDesktop: ptr::null_mut(),\n@@ -731,7 +731,7 @@ fn zeroed_startupinfo() -> c::STARTUPINFO {\n         dwXSize: 0,\n         dwYSize: 0,\n         dwXCountChars: 0,\n-        dwYCountCharts: 0,\n+        dwYCountChars: 0,\n         dwFillAttribute: 0,\n         dwFlags: 0,\n         wShowWindow: 0,"}, {"sha": "bca4e38d9f62c6c9df2ae4af4ef319ab8fddabcf", "filename": "library/std/src/sys/windows/rand.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -1,3 +1,4 @@\n+use crate::ffi::c_void;\n use crate::io;\n use crate::mem;\n use crate::ptr;\n@@ -25,8 +26,9 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n #[inline(never)]\n fn fallback_rng() -> (u64, u64) {\n     let mut v = (0, 0);\n-    let ret =\n-        unsafe { c::RtlGenRandom(&mut v as *mut _ as *mut u8, mem::size_of_val(&v) as c::ULONG) };\n+    let ret = unsafe {\n+        c::RtlGenRandom(&mut v as *mut _ as *mut c_void, mem::size_of_val(&v) as c::ULONG)\n+    };\n \n     if ret != 0 { v } else { panic!(\"fallback RNG broken: {}\", io::Error::last_os_error()) }\n }"}, {"sha": "0caf0a317a4aa1e8597259f90d2ca937936d3516", "filename": "library/std/src/sys/windows/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -18,7 +18,7 @@ impl Handler {\n     }\n }\n \n-extern \"system\" fn vectored_handler(ExceptionInfo: *mut c::EXCEPTION_POINTERS) -> c::LONG {\n+unsafe extern \"system\" fn vectored_handler(ExceptionInfo: *mut c::EXCEPTION_POINTERS) -> c::LONG {\n     unsafe {\n         let rec = &(*(*ExceptionInfo).ExceptionRecord);\n         let code = rec.ExceptionCode;\n@@ -34,7 +34,7 @@ extern \"system\" fn vectored_handler(ExceptionInfo: *mut c::EXCEPTION_POINTERS) -\n }\n \n pub unsafe fn init() {\n-    if c::AddVectoredExceptionHandler(0, vectored_handler).is_null() {\n+    if c::AddVectoredExceptionHandler(0, Some(vectored_handler)).is_null() {\n         panic!(\"failed to install exception handler\");\n     }\n     // Set the thread stack guarantee for the main thread."}, {"sha": "2e3e0859dc18e69e437a475454305267231d45d6", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -180,7 +180,7 @@ fn write_valid_utf8_to_console(handle: c::HANDLE, utf8: &str) -> io::Result<usiz\n         let result = c::MultiByteToWideChar(\n             c::CP_UTF8,                      // CodePage\n             c::MB_ERR_INVALID_CHARS,         // dwFlags\n-            utf8.as_ptr() as c::LPCCH,       // lpMultiByteStr\n+            utf8.as_ptr(),                   // lpMultiByteStr\n             utf8.len() as c::c_int,          // cbMultiByte\n             utf16.as_mut_ptr() as c::LPWSTR, // lpWideCharStr\n             utf16.len() as c::c_int,         // cchWideChar\n@@ -344,7 +344,7 @@ fn read_u16s(handle: c::HANDLE, buf: &mut [MaybeUninit<u16>]) -> io::Result<usiz\n     // See #38274 and https://stackoverflow.com/questions/43836040/win-api-readconsole.\n     const CTRL_Z: u16 = 0x1A;\n     const CTRL_Z_MASK: c::ULONG = 1 << CTRL_Z;\n-    let mut input_control = c::CONSOLE_READCONSOLE_CONTROL {\n+    let input_control = c::CONSOLE_READCONSOLE_CONTROL {\n         nLength: crate::mem::size_of::<c::CONSOLE_READCONSOLE_CONTROL>() as c::ULONG,\n         nInitialChars: 0,\n         dwCtrlWakeupMask: CTRL_Z_MASK,\n@@ -360,7 +360,7 @@ fn read_u16s(handle: c::HANDLE, buf: &mut [MaybeUninit<u16>]) -> io::Result<usiz\n                 buf.as_mut_ptr() as c::LPVOID,\n                 buf.len() as u32,\n                 &mut amount,\n-                &mut input_control as c::PCONSOLE_READCONSOLE_CONTROL,\n+                &input_control,\n             )\n         })?;\n \n@@ -385,14 +385,14 @@ fn utf16_to_utf8(utf16: &[u16], utf8: &mut [u8]) -> io::Result<usize> {\n \n     let result = unsafe {\n         c::WideCharToMultiByte(\n-            c::CP_UTF8,                    // CodePage\n-            c::WC_ERR_INVALID_CHARS,       // dwFlags\n-            utf16.as_ptr(),                // lpWideCharStr\n-            utf16.len() as c::c_int,       // cchWideChar\n-            utf8.as_mut_ptr() as c::LPSTR, // lpMultiByteStr\n-            utf8.len() as c::c_int,        // cbMultiByte\n-            ptr::null(),                   // lpDefaultChar\n-            ptr::null_mut(),               // lpUsedDefaultChar\n+            c::CP_UTF8,              // CodePage\n+            c::WC_ERR_INVALID_CHARS, // dwFlags\n+            utf16.as_ptr(),          // lpWideCharStr\n+            utf16.len() as c::c_int, // cchWideChar\n+            utf8.as_mut_ptr(),       // lpMultiByteStr\n+            utf8.len() as c::c_int,  // cbMultiByte\n+            ptr::null(),             // lpDefaultChar\n+            ptr::null_mut(),         // lpUsedDefaultChar\n         )\n     };\n     if result == 0 {"}, {"sha": "18cecb65681d228e45fe100ef7ca143fccc359ba", "filename": "library/std/src/sys/windows/thread.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffb27ff89db780e88abe829783565a7122be1c5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs?ref=3ffb27ff89db780e88abe829783565a7122be1c5", "patch": "@@ -2,6 +2,7 @@ use crate::ffi::CStr;\n use crate::io;\n use crate::num::NonZeroUsize;\n use crate::os::windows::io::AsRawHandle;\n+use crate::os::windows::io::HandleOrNull;\n use crate::ptr;\n use crate::sys::c;\n use crate::sys::handle::Handle;\n@@ -32,12 +33,12 @@ impl Thread {\n         let ret = c::CreateThread(\n             ptr::null_mut(),\n             stack,\n-            thread_start,\n+            Some(thread_start),\n             p as *mut _,\n             c::STACK_SIZE_PARAM_IS_A_RESERVATION,\n             ptr::null_mut(),\n         );\n-\n+        let ret = HandleOrNull::from_raw_handle(ret);\n         return if let Ok(handle) = ret.try_into() {\n             Ok(Thread { handle: Handle::from_inner(handle) })\n         } else {"}]}