{"sha": "4b0f9c588d70a119e5646bdea8a9e33909e79c57", "node_id": "C_kwDOAAsO6NoAKDRiMGY5YzU4OGQ3MGExMTllNTY0NmJkZWE4YTllMzM5MDllNzljNTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T17:01:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T17:01:26Z"}, "message": "Auto merge of #12334 - fasterthanlime:gh-11635, r=Veykril\n\nGenerate enum variant assist\n\nSo, this is kind of a weird PR!\n\nI'm a complete newcomer to the `rust-analyzer` codebase, and so I browsed the \"good first issue\" tag, and found #11635. Then I found two separate folks had taken stabs at it, most recently `@maartenflippo` \u2014 and there had been a review 3 days ago, but no activity in a little while, and the PR needed to be rebased since the crates were renamed from `snake_case` to `kebab-case`.\n\nSo to get acquainted with the codebase I typed this PR by hand, looking at the diff in #11995, and I also added a doc-test (that passes).\n\nI haven't taken into account the comments `@Veykril` left in #11995, but I don't want to steal any of `@maartenflippo's` thunder! Closing this PR is perfectly fine. Or Maarten could use it as a \"restart point\"? Or I could finish it up, whichever feels best to everyone.\n\nI think what remains to be done in this PR, at least, is:\n\n  * [x] Only disable the \"generate function\" assist if the name is `PascalCase`\n  * [x] Only enable the \"generate variant\" assistant if the name is `PascalCase`\n  * [x] Simplify with `adt.source()` as mentioned here: https://github.com/rust-lang/rust-analyzer/pull/11995#discussion_r875134175\n  * [ ] Add more tests for edge cases? Are there cases where simply adding one more indent level than the enum's indent level is not good enough? Some nested trickery I'm not thinking of right now?\n\nAnyway. This PR can go in any direction. You can tell me \"no, tackle your own issue!\" And I'll go do that and still be happy I got to take a look at rust-analyzer some by doing this. Or you can tell me \"okay, now _you_ finish it\", and I guess I'll try and finish it :)\n\nCloses #11635", "tree": {"sha": "ecb2e93625067234886fc323a76d36d36357340b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecb2e93625067234886fc323a76d36d36357340b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b0f9c588d70a119e5646bdea8a9e33909e79c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b0f9c588d70a119e5646bdea8a9e33909e79c57", "html_url": "https://github.com/rust-lang/rust/commit/4b0f9c588d70a119e5646bdea8a9e33909e79c57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b0f9c588d70a119e5646bdea8a9e33909e79c57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65a213c9fad5773fd73cf746925be3ce6d8304bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/65a213c9fad5773fd73cf746925be3ce6d8304bf", "html_url": "https://github.com/rust-lang/rust/commit/65a213c9fad5773fd73cf746925be3ce6d8304bf"}, {"sha": "ae2c0db67f0408128500dd80c1a7b1e9a118ac54", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2c0db67f0408128500dd80c1a7b1e9a118ac54", "html_url": "https://github.com/rust-lang/rust/commit/ae2c0db67f0408128500dd80c1a7b1e9a118ac54"}], "stats": {"total": 272, "additions": 272, "deletions": 0}, "files": [{"sha": "f3a79accf9dc961ed21d56ae28cfff3c0fb2d65f", "filename": "crates/ide-assists/src/handlers/generate_enum_variant.rs", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f9c588d70a119e5646bdea8a9e33909e79c57/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f9c588d70a119e5646bdea8a9e33909e79c57/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs?ref=4b0f9c588d70a119e5646bdea8a9e33909e79c57", "patch": "@@ -0,0 +1,198 @@\n+use hir::HasSource;\n+use ide_db::assists::{AssistId, AssistKind};\n+use syntax::{\n+    ast::{self, edit::IndentLevel},\n+    AstNode, TextSize,\n+};\n+\n+use crate::assist_context::{AssistContext, Assists};\n+\n+// Assist: generate_enum_variant\n+//\n+// Adds a variant to an enum.\n+//\n+// ```\n+// enum Countries {\n+//     Ghana,\n+// }\n+//\n+// fn main() {\n+//     let country = Countries::Lesotho$0;\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Countries {\n+//     Ghana,\n+//     Lesotho,\n+// }\n+//\n+// fn main() {\n+//     let country = Countries::Lesotho;\n+// }\n+// ```\n+pub(crate) fn generate_enum_variant(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let path_expr: ast::PathExpr = ctx.find_node_at_offset()?;\n+    let path = path_expr.path()?;\n+\n+    if ctx.sema.resolve_path(&path).is_some() {\n+        // No need to generate anything if the path resolves\n+        return None;\n+    }\n+\n+    let name_ref = path.segment()?.name_ref()?;\n+    if name_ref.text().starts_with(char::is_lowercase) {\n+        // Don't suggest generating variant if the name starts with a lowercase letter\n+        return None;\n+    }\n+\n+    if let Some(hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Enum(e)))) =\n+        ctx.sema.resolve_path(&path.qualifier()?)\n+    {\n+        let target = path.syntax().text_range();\n+        return add_variant_to_accumulator(acc, ctx, target, e, &name_ref);\n+    }\n+\n+    None\n+}\n+\n+fn add_variant_to_accumulator(\n+    acc: &mut Assists,\n+    ctx: &AssistContext,\n+    target: syntax::TextRange,\n+    adt: hir::Enum,\n+    name_ref: &ast::NameRef,\n+) -> Option<()> {\n+    let adt_ast = adt.source(ctx.db())?.original_ast_node(ctx.db())?.value;\n+    let enum_indent = IndentLevel::from_node(&adt_ast.syntax());\n+\n+    let variant_list = adt_ast.variant_list()?;\n+    let offset = variant_list.syntax().text_range().end() - TextSize::of('}');\n+    let empty_enum = variant_list.variants().next().is_none();\n+\n+    acc.add(\n+        AssistId(\"generate_enum_variant\", AssistKind::Generate),\n+        \"Generate variant\",\n+        target,\n+        |builder| {\n+            let text = format!(\n+                \"{maybe_newline}{indent_1}{name},\\n{enum_indent}\",\n+                maybe_newline = if empty_enum { \"\\n\" } else { \"\" },\n+                indent_1 = IndentLevel(1),\n+                name = name_ref,\n+                enum_indent = enum_indent\n+            );\n+            builder.insert(offset, text)\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn generate_basic_enum_variant_in_empty_enum() {\n+        check_assist(\n+            generate_enum_variant,\n+            r\"\n+enum Foo {}\n+fn main() {\n+    Foo::Bar$0\n+}\n+\",\n+            r\"\n+enum Foo {\n+    Bar,\n+}\n+fn main() {\n+    Foo::Bar\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn generate_basic_enum_variant_in_non_empty_enum() {\n+        check_assist(\n+            generate_enum_variant,\n+            r\"\n+enum Foo {\n+    Bar,\n+}\n+fn main() {\n+    Foo::Baz$0\n+}\n+\",\n+            r\"\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+fn main() {\n+    Foo::Baz\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_for_existing_variant() {\n+        check_assist_not_applicable(\n+            generate_enum_variant,\n+            r\"\n+enum Foo {\n+    Bar,\n+}\n+fn main() {\n+    Foo::Bar$0\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_for_lowercase() {\n+        check_assist_not_applicable(\n+            generate_enum_variant,\n+            r\"\n+enum Foo {\n+    Bar,\n+}\n+fn main() {\n+    Foo::new$0\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn indentation_level_is_correct() {\n+        check_assist(\n+            generate_enum_variant,\n+            r\"\n+mod m {\n+    enum Foo {\n+        Bar,\n+    }\n+}\n+fn main() {\n+    m::Foo::Baz$0\n+}\n+\",\n+            r\"\n+mod m {\n+    enum Foo {\n+        Bar,\n+        Baz,\n+    }\n+}\n+fn main() {\n+    m::Foo::Baz\n+}\n+\",\n+        )\n+    }\n+}"}, {"sha": "c8650979e95b012882acca927b042ec2cac8d048", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f9c588d70a119e5646bdea8a9e33909e79c57/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f9c588d70a119e5646bdea8a9e33909e79c57/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=4b0f9c588d70a119e5646bdea8a9e33909e79c57", "patch": "@@ -71,6 +71,13 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n                 get_fn_target(ctx, &target_module, call.clone())?\n             }\n             Some(hir::PathResolution::Def(hir::ModuleDef::Adt(adt))) => {\n+                if let hir::Adt::Enum(_) = adt {\n+                    // Don't suggest generating function if the name starts with an uppercase letter\n+                    if name_ref.text().starts_with(char::is_uppercase) {\n+                        return None;\n+                    }\n+                }\n+\n                 let current_module = ctx.sema.scope(call.syntax())?.module();\n                 let module = adt.module(ctx.sema.db);\n                 target_module = if current_module == module { None } else { Some(module) };\n@@ -1735,6 +1742,45 @@ fn main() {\n fn foo(value: usize) ${0:-> _} {\n     todo!()\n }\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_for_enum_variant() {\n+        check_assist_not_applicable(\n+            generate_function,\n+            r\"\n+enum Foo {}\n+fn main() {\n+    Foo::Bar$0(true)\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn applicable_for_enum_method() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+enum Foo {}\n+fn main() {\n+    Foo::new$0();\n+}\n+\",\n+            r\"\n+enum Foo {}\n+fn main() {\n+    Foo::new();\n+}\n+impl Foo {\n+\n+\n+fn new() ${0:-> _} {\n+    todo!()\n+}\n+}\n \",\n         )\n     }"}, {"sha": "94fbaff400bfda6ed47002ba9d137c0d3fc212ee", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f9c588d70a119e5646bdea8a9e33909e79c57/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f9c588d70a119e5646bdea8a9e33909e79c57/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=4b0f9c588d70a119e5646bdea8a9e33909e79c57", "patch": "@@ -139,6 +139,7 @@ mod handlers {\n     mod generate_documentation_template;\n     mod generate_enum_is_method;\n     mod generate_enum_projection_method;\n+    mod generate_enum_variant;\n     mod generate_from_impl_for_enum;\n     mod generate_function;\n     mod generate_getter;\n@@ -227,6 +228,7 @@ mod handlers {\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,\n             generate_enum_projection_method::generate_enum_try_into_method,\n+            generate_enum_variant::generate_enum_variant,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n             generate_impl::generate_impl,"}, {"sha": "2d571014090e0c1a789a3fcc4c348b6766c04729", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f9c588d70a119e5646bdea8a9e33909e79c57/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f9c588d70a119e5646bdea8a9e33909e79c57/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=4b0f9c588d70a119e5646bdea8a9e33909e79c57", "patch": "@@ -1006,6 +1006,32 @@ impl Value {\n     )\n }\n \n+#[test]\n+fn doctest_generate_enum_variant() {\n+    check_doc_test(\n+        \"generate_enum_variant\",\n+        r#####\"\n+enum Countries {\n+    Ghana,\n+}\n+\n+fn main() {\n+    let country = Countries::Lesotho$0;\n+}\n+\"#####,\n+        r#####\"\n+enum Countries {\n+    Ghana,\n+    Lesotho,\n+}\n+\n+fn main() {\n+    let country = Countries::Lesotho;\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_from_impl_for_enum() {\n     check_doc_test("}]}