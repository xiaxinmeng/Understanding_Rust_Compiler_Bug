{"sha": "bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYTljOWEwMGYwYTMwMWE1ZTkzNmFlMTRjNmE5NWU5OGYzYmY1ZWU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-29T21:07:11Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-30T02:30:55Z"}, "message": "add is_subset and is_superset to the Set trait", "tree": {"sha": "e33dfb72ff0f626edd999008648aa26c9e871cf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e33dfb72ff0f626edd999008648aa26c9e871cf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee", "html_url": "https://github.com/rust-lang/rust/commit/bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "456af7a79da586a3c64d810a9157bba0616b6b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/456af7a79da586a3c64d810a9157bba0616b6b53", "html_url": "https://github.com/rust-lang/rust/commit/456af7a79da586a3c64d810a9157bba0616b6b53"}], "stats": {"total": 127, "additions": 89, "deletions": 38}, "files": [{"sha": "669a41be2b79c75f04f9bdc80dc417078144547f", "filename": "src/libcore/container.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee", "patch": "@@ -65,4 +65,10 @@ pub trait Set<T>: Mutable {\n     /// Remove a value from the set. Return true if the value was\n     /// present in the set.\n     fn remove(&mut self, value: &T) -> bool;\n+\n+    /// Return true if the set is a subset of another\n+    pure fn is_subset(&self, other: &self) -> bool;\n+\n+    /// Return true if the set is a superset of another\n+    pure fn is_superset(&self, other: &self) -> bool;\n }"}, {"sha": "a9f3cd5247c7242f70a902ff90fcbdf65035eb20", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee", "patch": "@@ -25,6 +25,7 @@ pub mod linear {\n     use cmp::Eq;\n     use cmp;\n     use hash::Hash;\n+    use iter;\n     use kinds::Copy;\n     use option::{None, Option, Some};\n     use option;\n@@ -453,6 +454,16 @@ pub mod linear {\n         /// Remove a value from the set. Return true if the value was\n         /// present in the set.\n         fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n+\n+        /// Return true if the set is a subset of another\n+        pure fn is_subset(&self, other: &LinearSet<T>) -> bool {\n+            iter::all(self, |v| other.contains(v))\n+        }\n+\n+        /// Return true if the set is a superset of another\n+        pure fn is_superset(&self, other: &LinearSet<T>) -> bool {\n+            other.is_subset(self)\n+        }\n     }\n \n     pub impl <T: Hash IterBytes Eq> LinearSet<T> {\n@@ -462,7 +473,7 @@ pub mod linear {\n }\n \n #[test]\n-pub mod test {\n+mod test_map {\n     use container::{Container, Mutable, Map, Set};\n     use option::{None, Some};\n     use hashmap::linear::LinearMap;\n@@ -610,3 +621,37 @@ pub mod test {\n         assert !m.is_empty();\n     }\n }\n+\n+#[test]\n+mod test_set {\n+    use super::*;\n+\n+    #[test]\n+    fn test_subset_and_superset() {\n+        let mut a = linear::LinearSet::new();\n+        assert a.insert(0);\n+        assert a.insert(5);\n+        assert a.insert(11);\n+        assert a.insert(7);\n+\n+        let mut b = linear::LinearSet::new();\n+        assert b.insert(0);\n+        assert b.insert(7);\n+        assert b.insert(19);\n+        assert b.insert(250);\n+        assert b.insert(11);\n+        assert b.insert(200);\n+\n+        assert !a.is_subset(&b);\n+        assert !a.is_superset(&b);\n+        assert !b.is_subset(&a);\n+        assert !b.is_superset(&a);\n+\n+        assert b.insert(5);\n+\n+        assert a.is_subset(&b);\n+        assert !a.is_superset(&b);\n+        assert !b.is_subset(&a);\n+        assert b.is_superset(&a);\n+    }\n+}"}, {"sha": "ece120bb6477ea17bb2cbc56781a489b88bc04ca", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=bfa9c9a00f0a301a5e936ae14c6a95e98f3bf5ee", "patch": "@@ -291,6 +291,43 @@ impl <T: Ord> TreeSet<T>: Set<T> {\n     /// Remove a value from the set. Return true if the value was\n     /// present in the set.\n     fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n+\n+    /// Return true if the set is a subset of another\n+    pure fn is_subset(&self, other: &TreeSet<T>) -> bool {\n+        other.is_superset(self)\n+    }\n+\n+    /// Return true if the set is a superset of another\n+    pure fn is_superset(&self, other: &TreeSet<T>) -> bool {\n+        let mut x = self.iter();\n+        let mut y = other.iter();\n+        unsafe { // purity workaround\n+            x = x.next();\n+            y = y.next();\n+            let mut a = x.get();\n+            let mut b = y.get();\n+            while b.is_some() {\n+                if a.is_none() {\n+                    return false\n+                }\n+\n+                let a1 = a.unwrap();\n+                let b1 = b.unwrap();\n+\n+                if b1 < a1 {\n+                    return false\n+                }\n+\n+                if !(a1 < b1) {\n+                    y = y.next();\n+                    b = y.get();\n+                }\n+                x = x.next();\n+                a = x.get();\n+            }\n+        }\n+        true\n+    }\n }\n \n impl <T: Ord> TreeSet<T> {\n@@ -335,43 +372,6 @@ impl <T: Ord> TreeSet<T> {\n         true\n     }\n \n-    /// Check of the set is a subset of another\n-    pure fn is_subset(&self, other: &TreeSet<T>) -> bool {\n-        other.is_superset(self)\n-    }\n-\n-    /// Check of the set is a superset of another\n-    pure fn is_superset(&self, other: &TreeSet<T>) -> bool {\n-        let mut x = self.iter();\n-        let mut y = other.iter();\n-        unsafe { // purity workaround\n-            x = x.next();\n-            y = y.next();\n-            let mut a = x.get();\n-            let mut b = y.get();\n-            while b.is_some() {\n-                if a.is_none() {\n-                    return false\n-                }\n-\n-                let a1 = a.unwrap();\n-                let b1 = b.unwrap();\n-\n-                if b1 < a1 {\n-                    return false\n-                }\n-\n-                if !(a1 < b1) {\n-                    y = y.next();\n-                    b = y.get();\n-                }\n-                x = x.next();\n-                a = x.get();\n-            }\n-        }\n-        true\n-    }\n-\n     /// Visit the values (in-order) representing the difference\n     pure fn difference(&self, other: &TreeSet<T>, f: fn(&T) -> bool) {\n         let mut x = self.iter();"}]}