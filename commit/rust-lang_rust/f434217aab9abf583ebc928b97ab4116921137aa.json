{"sha": "f434217aab9abf583ebc928b97ab4116921137aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MzQyMTdhYWI5YWJmNTgzZWJjOTI4Yjk3YWI0MTE2OTIxMTM3YWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-06T01:02:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-06T01:02:32Z"}, "message": "Auto merge of #79608 - alessandrod:bpf, r=nagisa\n\nBPF target support\n\nThis adds `bpfel-unknown-none` and `bpfeb-unknown-none`, two new no_std targets that generate little and big endian BPF. The approach taken is very similar to the cuda target, where `TargetOptions::obj_is_bitcode` is enabled and code generation is done by the linker.\n\nI added the targets to `dist-various-2`. There are [some tests](https://github.com/alessandrod/bpf-linker/tree/main/tests/assembly) in bpf-linker and I'm planning to add more. Those are currently not ran as part of rust CI.", "tree": {"sha": "e4e37f7d8d6133067c6a64e732461de3441687f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e37f7d8d6133067c6a64e732461de3441687f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f434217aab9abf583ebc928b97ab4116921137aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f434217aab9abf583ebc928b97ab4116921137aa", "html_url": "https://github.com/rust-lang/rust/commit/f434217aab9abf583ebc928b97ab4116921137aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f434217aab9abf583ebc928b97ab4116921137aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c2dd251bbff03c7a3092d43fb5b637eca0810e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2dd251bbff03c7a3092d43fb5b637eca0810e3", "html_url": "https://github.com/rust-lang/rust/commit/6c2dd251bbff03c7a3092d43fb5b637eca0810e3"}, {"sha": "0adb9331ffab305feeb07fb57b1f189e35cb5adf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0adb9331ffab305feeb07fb57b1f189e35cb5adf", "html_url": "https://github.com/rust-lang/rust/commit/0adb9331ffab305feeb07fb57b1f189e35cb5adf"}], "stats": {"total": 609, "additions": 603, "deletions": 6}, "files": [{"sha": "49475fe2469edc191a7ce2a0f81a512973a4b21a", "filename": "compiler/rustc_codegen_cranelift/src/toolchain.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -67,6 +67,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     LinkerFlavor::Msvc => \"link.exe\",\n                     LinkerFlavor::Lld(_) => \"lld\",\n                     LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n+                    LinkerFlavor::BpfLinker => \"bpf-linker\",\n                 }),\n                 flavor,\n             )),"}, {"sha": "ecf62ed213df82aec1daaf5b5b1cf958d0f9054c", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -288,6 +288,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n                 InlineAsmArch::SpirV => {}\n                 InlineAsmArch::Wasm32 => {}\n+                InlineAsmArch::Bpf => {}\n             }\n         }\n         if !options.contains(InlineAsmOptions::NOMEM) {\n@@ -593,6 +594,8 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => \"v\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => \"^Yk\",\n             InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => \"r\",\n+            InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::wreg) => \"w\",\n             InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n                 bug!(\"LLVM backend does not support SPIR-V\")\n             }\n@@ -661,6 +664,7 @@ fn modifier_to_llvm(\n         },\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => None,\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => None,\n+        InlineAsmRegClass::Bpf(_) => None,\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }\n@@ -708,6 +712,8 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => cx.type_f32(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => cx.type_i16(),\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => cx.type_i32(),\n+        InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => cx.type_i64(),\n+        InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::wreg) => cx.type_i32(),\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }"}, {"sha": "9a66d01625246ef6550eb265bd1356595c0c5106", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -1124,6 +1124,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     LinkerFlavor::Msvc => \"link.exe\",\n                     LinkerFlavor::Lld(_) => \"lld\",\n                     LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n+                    LinkerFlavor::BpfLinker => \"bpf-linker\",\n                 }),\n                 flavor,\n             )),"}, {"sha": "9df8a99cdd681bd0e168c34cb6966e9c3ae96823", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -84,6 +84,10 @@ impl LinkerInfo {\n             LinkerFlavor::PtxLinker => {\n                 Box::new(PtxLinker { cmd, sess, info: self }) as Box<dyn Linker>\n             }\n+\n+            LinkerFlavor::BpfLinker => {\n+                Box::new(BpfLinker { cmd, sess, info: self }) as Box<dyn Linker>\n+            }\n         }\n     }\n }\n@@ -1431,3 +1435,128 @@ impl<'a> Linker for PtxLinker<'a> {\n \n     fn linker_plugin_lto(&mut self) {}\n }\n+\n+pub struct BpfLinker<'a> {\n+    cmd: Command,\n+    sess: &'a Session,\n+    info: &'a LinkerInfo,\n+}\n+\n+impl<'a> Linker for BpfLinker<'a> {\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n+\n+    fn set_output_kind(&mut self, _output_kind: LinkOutputKind, _out_filename: &Path) {}\n+\n+    fn link_rlib(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn link_whole_rlib(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn include_path(&mut self, path: &Path) {\n+        self.cmd.arg(\"-L\").arg(path);\n+    }\n+\n+    fn debuginfo(&mut self, _strip: Strip) {\n+        self.cmd.arg(\"--debug\");\n+    }\n+\n+    fn add_object(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn optimize(&mut self) {\n+        self.cmd.arg(match self.sess.opts.optimize {\n+            OptLevel::No => \"-O0\",\n+            OptLevel::Less => \"-O1\",\n+            OptLevel::Default => \"-O2\",\n+            OptLevel::Aggressive => \"-O3\",\n+            OptLevel::Size => \"-Os\",\n+            OptLevel::SizeMin => \"-Oz\",\n+        });\n+    }\n+\n+    fn output_filename(&mut self, path: &Path) {\n+        self.cmd.arg(\"-o\").arg(path);\n+    }\n+\n+    fn finalize(&mut self) {\n+        self.cmd.arg(\"--cpu\").arg(match self.sess.opts.cg.target_cpu {\n+            Some(ref s) => s,\n+            None => &self.sess.target.options.cpu,\n+        });\n+        self.cmd.arg(\"--cpu-features\").arg(match &self.sess.opts.cg.target_feature {\n+            feat if !feat.is_empty() => feat,\n+            _ => &self.sess.target.options.features,\n+        });\n+    }\n+\n+    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n+        panic!(\"external dylibs not supported\")\n+    }\n+\n+    fn link_rust_dylib(&mut self, _lib: Symbol, _path: &Path) {\n+        panic!(\"external dylibs not supported\")\n+    }\n+\n+    fn link_staticlib(&mut self, _lib: Symbol, _verbatim: bool) {\n+        panic!(\"staticlibs not supported\")\n+    }\n+\n+    fn link_whole_staticlib(&mut self, _lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n+        panic!(\"staticlibs not supported\")\n+    }\n+\n+    fn framework_path(&mut self, _path: &Path) {\n+        panic!(\"frameworks not supported\")\n+    }\n+\n+    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+        panic!(\"frameworks not supported\")\n+    }\n+\n+    fn full_relro(&mut self) {}\n+\n+    fn partial_relro(&mut self) {}\n+\n+    fn no_relro(&mut self) {}\n+\n+    fn gc_sections(&mut self, _keep_metadata: bool) {}\n+\n+    fn no_gc_sections(&mut self) {}\n+\n+    fn pgo_gen(&mut self) {}\n+\n+    fn no_crt_objects(&mut self) {}\n+\n+    fn no_default_libraries(&mut self) {}\n+\n+    fn control_flow_guard(&mut self) {}\n+\n+    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) {\n+        let path = tmpdir.join(\"symbols\");\n+        let res: io::Result<()> = try {\n+            let mut f = BufWriter::new(File::create(&path)?);\n+            for sym in self.info.exports[&crate_type].iter() {\n+                writeln!(f, \"{}\", sym)?;\n+            }\n+        };\n+        if let Err(e) = res {\n+            self.sess.fatal(&format!(\"failed to write symbols file: {}\", e));\n+        } else {\n+            self.cmd.arg(\"--export-symbols\").arg(&path);\n+        }\n+    }\n+\n+    fn subsystem(&mut self, _subsystem: &str) {}\n+\n+    fn group_start(&mut self) {}\n+\n+    fn group_end(&mut self) {}\n+\n+    fn linker_plugin_lto(&mut self) {}\n+}"}, {"sha": "b10de567744dd145b16961c481754585cceeb674", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -210,6 +210,8 @@ const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n ];\n \n+const BPF_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[(\"alu32\", Some(sym::bpf_target_feature))];\n+\n /// When rustdoc is running, provide a list of all known features so that all their respective\n /// primitives may be documented.\n ///\n@@ -224,6 +226,7 @@ pub fn all_known_features() -> impl Iterator<Item = (&'static str, Option<Symbol\n         .chain(MIPS_ALLOWED_FEATURES.iter())\n         .chain(RISCV_ALLOWED_FEATURES.iter())\n         .chain(WASM_ALLOWED_FEATURES.iter())\n+        .chain(BPF_ALLOWED_FEATURES.iter())\n         .cloned()\n }\n \n@@ -237,6 +240,7 @@ pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Opt\n         \"powerpc\" | \"powerpc64\" => POWERPC_ALLOWED_FEATURES,\n         \"riscv32\" | \"riscv64\" => RISCV_ALLOWED_FEATURES,\n         \"wasm32\" | \"wasm64\" => WASM_ALLOWED_FEATURES,\n+        \"bpf\" => BPF_ALLOWED_FEATURES,\n         _ => &[],\n     }\n }"}, {"sha": "0359f503ef96cc78bd7fe7d543757d3d93904799", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -250,6 +250,7 @@ declare_features! (\n     (active, f16c_target_feature, \"1.36.0\", Some(44839), None),\n     (active, riscv_target_feature, \"1.45.0\", Some(44839), None),\n     (active, ermsb_target_feature, \"1.49.0\", Some(44839), None),\n+    (active, bpf_target_feature, \"1.54.0\", Some(44839), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates (target features)"}, {"sha": "452d1b19a18a84b18e861736f51505a437a0170a", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -86,6 +86,7 @@ fn main() {\n         \"nvptx\",\n         \"hexagon\",\n         \"riscv\",\n+        \"bpf\",\n     ];\n \n     let required_components = &["}, {"sha": "122627eb500ada1b69f2d38924d63e9f4069dcc9", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -167,4 +167,12 @@ pub fn initialize_available_targets() {\n         LLVMInitializeWebAssemblyAsmPrinter,\n         LLVMInitializeWebAssemblyAsmParser\n     );\n+    init_target!(\n+        llvm_component = \"bpf\",\n+        LLVMInitializeBPFTargetInfo,\n+        LLVMInitializeBPFTarget,\n+        LLVMInitializeBPFTargetMC,\n+        LLVMInitializeBPFAsmPrinter,\n+        LLVMInitializeBPFAsmParser\n+    );\n }"}, {"sha": "31b425f1a79a08fbe54eacdb0eb0942d0aedbfa7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -328,6 +328,7 @@ symbols! {\n         box_free,\n         box_patterns,\n         box_syntax,\n+        bpf_target_feature,\n         braced_empty_structs,\n         branch,\n         breakpoint,\n@@ -1332,6 +1333,7 @@ symbols! {\n         wrapping_add,\n         wrapping_mul,\n         wrapping_sub,\n+        wreg,\n         write_bytes,\n         xmm_reg,\n         ymm_reg,"}, {"sha": "466c525531c1bc0ae30c6a53fa993876fc84fe18", "filename": "compiler/rustc_target/src/abi/call/bpf.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fbpf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fbpf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fbpf.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -0,0 +1,31 @@\n+// see https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/BPF/BPFCallingConv.td\n+use crate::abi::call::{ArgAbi, FnAbi};\n+\n+fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n+    if ret.layout.is_aggregate() || ret.layout.size.bits() > 64 {\n+        ret.make_indirect();\n+    } else {\n+        ret.extend_integer_width_to(32);\n+    }\n+}\n+\n+fn classify_arg<Ty>(arg: &mut ArgAbi<'_, Ty>) {\n+    if arg.layout.is_aggregate() || arg.layout.size.bits() > 64 {\n+        arg.make_indirect();\n+    } else {\n+        arg.extend_integer_width_to(32);\n+    }\n+}\n+\n+pub fn compute_abi_info<Ty>(fn_abi: &mut FnAbi<'_, Ty>) {\n+    if !fn_abi.ret.is_ignore() {\n+        classify_ret(&mut fn_abi.ret);\n+    }\n+\n+    for arg in &mut fn_abi.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg(arg);\n+    }\n+}"}, {"sha": "6e0e140374033c3c2eef6ae53780160e3b9090c0", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -6,6 +6,7 @@ mod aarch64;\n mod amdgpu;\n mod arm;\n mod avr;\n+mod bpf;\n mod hexagon;\n mod mips;\n mod mips64;\n@@ -654,6 +655,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n                 }\n             }\n             \"asmjs\" => wasm::compute_c_abi_info(cx, self),\n+            \"bpf\" => bpf::compute_abi_info(self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)),\n         }\n "}, {"sha": "ecb6bdc95ce0991b13573983f431e1b83ecdc0e0", "filename": "compiler/rustc_target/src/asm/bpf.rs", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -0,0 +1,129 @@\n+use super::{InlineAsmArch, InlineAsmType, Target};\n+use rustc_macros::HashStable_Generic;\n+use std::fmt;\n+\n+def_reg_class! {\n+    Bpf BpfInlineAsmRegClass {\n+        reg,\n+        wreg,\n+    }\n+}\n+\n+impl BpfInlineAsmRegClass {\n+    pub fn valid_modifiers(self, _arch: InlineAsmArch) -> &'static [char] {\n+        &[]\n+    }\n+\n+    pub fn suggest_class(self, _arch: InlineAsmArch, _ty: InlineAsmType) -> Option<Self> {\n+        None\n+    }\n+\n+    pub fn suggest_modifier(\n+        self,\n+        _arch: InlineAsmArch,\n+        _ty: InlineAsmType,\n+    ) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn default_modifier(self, _arch: InlineAsmArch) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn supported_types(\n+        self,\n+        _arch: InlineAsmArch,\n+    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+        match self {\n+            Self::reg => types! { _: I8, I16, I32, I64; },\n+            Self::wreg => types! { \"alu32\": I8, I16, I32; },\n+        }\n+    }\n+}\n+\n+fn only_alu32(\n+    _arch: InlineAsmArch,\n+    mut has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n+) -> Result<(), &'static str> {\n+    if !has_feature(\"alu32\") {\n+        Err(\"register can't be used without the `alu32` target feature\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+def_regs! {\n+    Bpf BpfInlineAsmReg BpfInlineAsmRegClass {\n+        r0: reg = [\"r0\"],\n+        r1: reg = [\"r1\"],\n+        r2: reg = [\"r2\"],\n+        r3: reg = [\"r3\"],\n+        r4: reg = [\"r4\"],\n+        r5: reg = [\"r5\"],\n+        r6: reg = [\"r6\"],\n+        r7: reg = [\"r7\"],\n+        r8: reg = [\"r8\"],\n+        r9: reg = [\"r9\"],\n+        w0: wreg = [\"w0\"] % only_alu32,\n+        w1: wreg = [\"w1\"] % only_alu32,\n+        w2: wreg = [\"w2\"] % only_alu32,\n+        w3: wreg = [\"w3\"] % only_alu32,\n+        w4: wreg = [\"w4\"] % only_alu32,\n+        w5: wreg = [\"w5\"] % only_alu32,\n+        w6: wreg = [\"w6\"] % only_alu32,\n+        w7: wreg = [\"w7\"] % only_alu32,\n+        w8: wreg = [\"w8\"] % only_alu32,\n+        w9: wreg = [\"w9\"] % only_alu32,\n+\n+        #error = [\"r10\", \"w10\"] =>\n+            \"the stack pointer cannot be used as an operand for inline asm\",\n+    }\n+}\n+\n+impl BpfInlineAsmReg {\n+    pub fn emit(\n+        self,\n+        out: &mut dyn fmt::Write,\n+        _arch: InlineAsmArch,\n+        _modifier: Option<char>,\n+    ) -> fmt::Result {\n+        out.write_str(self.name())\n+    }\n+\n+    pub fn overlapping_regs(self, mut cb: impl FnMut(BpfInlineAsmReg)) {\n+        cb(self);\n+\n+        macro_rules! reg_conflicts {\n+            (\n+                $(\n+                    $r:ident : $w:ident\n+                ),*\n+            ) => {\n+                match self {\n+                    $(\n+                        Self::$r => {\n+                            cb(Self::$w);\n+                        }\n+                        Self::$w => {\n+                            cb(Self::$r);\n+                        }\n+                    )*\n+                }\n+            };\n+        }\n+\n+        reg_conflicts! {\n+            r0 : w0,\n+            r1 : w1,\n+            r2 : w2,\n+            r3 : w3,\n+            r4 : w4,\n+            r5 : w5,\n+            r6 : w6,\n+            r7 : w7,\n+            r8 : w8,\n+            r9 : w9\n+        }\n+    }\n+}"}, {"sha": "305ea7d50e66ea058a37d579d3223820bf4870c6", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -148,6 +148,7 @@ macro_rules! types {\n \n mod aarch64;\n mod arm;\n+mod bpf;\n mod hexagon;\n mod mips;\n mod nvptx;\n@@ -159,6 +160,7 @@ mod x86;\n \n pub use aarch64::{AArch64InlineAsmReg, AArch64InlineAsmRegClass};\n pub use arm::{ArmInlineAsmReg, ArmInlineAsmRegClass};\n+pub use bpf::{BpfInlineAsmReg, BpfInlineAsmRegClass};\n pub use hexagon::{HexagonInlineAsmReg, HexagonInlineAsmRegClass};\n pub use mips::{MipsInlineAsmReg, MipsInlineAsmRegClass};\n pub use nvptx::{NvptxInlineAsmReg, NvptxInlineAsmRegClass};\n@@ -184,6 +186,7 @@ pub enum InlineAsmArch {\n     PowerPC64,\n     SpirV,\n     Wasm32,\n+    Bpf,\n }\n \n impl FromStr for InlineAsmArch {\n@@ -205,6 +208,7 @@ impl FromStr for InlineAsmArch {\n             \"mips64\" => Ok(Self::Mips64),\n             \"spirv\" => Ok(Self::SpirV),\n             \"wasm32\" => Ok(Self::Wasm32),\n+            \"bpf\" => Ok(Self::Bpf),\n             _ => Err(()),\n         }\n     }\n@@ -233,6 +237,7 @@ pub enum InlineAsmReg {\n     Mips(MipsInlineAsmReg),\n     SpirV(SpirVInlineAsmReg),\n     Wasm(WasmInlineAsmReg),\n+    Bpf(BpfInlineAsmReg),\n     // Placeholder for invalid register constraints for the current target\n     Err,\n }\n@@ -247,6 +252,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n             Self::Mips(r) => r.name(),\n+            Self::Bpf(r) => r.name(),\n             Self::Err => \"<reg>\",\n         }\n     }\n@@ -260,6 +266,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => InlineAsmRegClass::PowerPC(r.reg_class()),\n             Self::Hexagon(r) => InlineAsmRegClass::Hexagon(r.reg_class()),\n             Self::Mips(r) => InlineAsmRegClass::Mips(r.reg_class()),\n+            Self::Bpf(r) => InlineAsmRegClass::Bpf(r.reg_class()),\n             Self::Err => InlineAsmRegClass::Err,\n         }\n     }\n@@ -304,6 +311,9 @@ impl InlineAsmReg {\n             InlineAsmArch::Wasm32 => {\n                 Self::Wasm(WasmInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n+            InlineAsmArch::Bpf => {\n+                Self::Bpf(BpfInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+            }\n         })\n     }\n \n@@ -323,6 +333,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => r.emit(out, arch, modifier),\n             Self::Hexagon(r) => r.emit(out, arch, modifier),\n             Self::Mips(r) => r.emit(out, arch, modifier),\n+            Self::Bpf(r) => r.emit(out, arch, modifier),\n             Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n         }\n     }\n@@ -336,6 +347,7 @@ impl InlineAsmReg {\n             Self::PowerPC(_) => cb(self),\n             Self::Hexagon(r) => r.overlapping_regs(|r| cb(Self::Hexagon(r))),\n             Self::Mips(_) => cb(self),\n+            Self::Bpf(r) => r.overlapping_regs(|r| cb(Self::Bpf(r))),\n             Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n         }\n     }\n@@ -364,6 +376,7 @@ pub enum InlineAsmRegClass {\n     Mips(MipsInlineAsmRegClass),\n     SpirV(SpirVInlineAsmRegClass),\n     Wasm(WasmInlineAsmRegClass),\n+    Bpf(BpfInlineAsmRegClass),\n     // Placeholder for invalid register constraints for the current target\n     Err,\n }\n@@ -381,6 +394,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.name(),\n             Self::SpirV(r) => r.name(),\n             Self::Wasm(r) => r.name(),\n+            Self::Bpf(r) => r.name(),\n             Self::Err => rustc_span::symbol::sym::reg,\n         }\n     }\n@@ -400,6 +414,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Mips),\n             Self::SpirV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::SpirV),\n             Self::Wasm(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Wasm),\n+            Self::Bpf(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Bpf),\n             Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n@@ -426,6 +441,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.suggest_modifier(arch, ty),\n             Self::SpirV(r) => r.suggest_modifier(arch, ty),\n             Self::Wasm(r) => r.suggest_modifier(arch, ty),\n+            Self::Bpf(r) => r.suggest_modifier(arch, ty),\n             Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n@@ -448,6 +464,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.default_modifier(arch),\n             Self::SpirV(r) => r.default_modifier(arch),\n             Self::Wasm(r) => r.default_modifier(arch),\n+            Self::Bpf(r) => r.default_modifier(arch),\n             Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n@@ -469,6 +486,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.supported_types(arch),\n             Self::SpirV(r) => r.supported_types(arch),\n             Self::Wasm(r) => r.supported_types(arch),\n+            Self::Bpf(r) => r.supported_types(arch),\n             Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n@@ -493,6 +511,7 @@ impl InlineAsmRegClass {\n             }\n             InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::Wasm32 => Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::Bpf => Self::Bpf(BpfInlineAsmRegClass::parse(arch, name)?),\n         })\n     }\n \n@@ -510,6 +529,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.valid_modifiers(arch),\n             Self::SpirV(r) => r.valid_modifiers(arch),\n             Self::Wasm(r) => r.valid_modifiers(arch),\n+            Self::Bpf(r) => r.valid_modifiers(arch),\n             Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n@@ -679,5 +699,10 @@ pub fn allocatable_registers(\n             wasm::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n+        InlineAsmArch::Bpf => {\n+            let mut map = bpf::regclass_map();\n+            bpf::fill_reg_map(arch, has_feature, target, &mut map);\n+            map\n+        }\n     }\n }"}, {"sha": "764cc735d75d1b1d02b75d425b075e8153243e4e", "filename": "compiler/rustc_target/src/spec/bpf_base.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -0,0 +1,42 @@\n+use crate::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, TargetOptions};\n+use crate::{abi::Endian, spec::abi::Abi};\n+\n+pub fn opts(endian: Endian) -> TargetOptions {\n+    TargetOptions {\n+        allow_asm: true,\n+        endian,\n+        linker_flavor: LinkerFlavor::BpfLinker,\n+        atomic_cas: false,\n+        executables: true,\n+        dynamic_linking: true,\n+        no_builtins: true,\n+        panic_strategy: PanicStrategy::Abort,\n+        position_independent_executables: true,\n+        // Disable MergeFunctions since:\n+        // - older kernels don't support bpf-to-bpf calls\n+        // - on newer kernels, userspace still needs to relocate before calling\n+        //   BPF_PROG_LOAD and not all BPF libraries do that yet\n+        merge_functions: MergeFunctions::Disabled,\n+        obj_is_bitcode: true,\n+        requires_lto: false,\n+        singlethread: true,\n+        max_atomic_width: Some(64),\n+        unsupported_abis: vec![\n+            Abi::Cdecl,\n+            Abi::Stdcall { unwind: false },\n+            Abi::Stdcall { unwind: true },\n+            Abi::Fastcall,\n+            Abi::Vectorcall,\n+            Abi::Thiscall { unwind: false },\n+            Abi::Thiscall { unwind: true },\n+            Abi::Aapcs,\n+            Abi::Win64,\n+            Abi::SysV64,\n+            Abi::PtxKernel,\n+            Abi::Msp430Interrupt,\n+            Abi::X86Interrupt,\n+            Abi::AmdGpuKernel,\n+        ],\n+        ..Default::default()\n+    }\n+}"}, {"sha": "a45da82eb4032a116ab997e23945ff3f1c6c6ca2", "filename": "compiler/rustc_target/src/spec/bpfeb_unknown_none.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -0,0 +1,12 @@\n+use crate::spec::Target;\n+use crate::{abi::Endian, spec::bpf_base};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"bpfeb\".to_string(),\n+        data_layout: \"E-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".to_string(),\n+        pointer_width: 64,\n+        arch: \"bpf\".to_string(),\n+        options: bpf_base::opts(Endian::Big),\n+    }\n+}"}, {"sha": "6c9afdf35aef47d1a8e0f11300dc19fd5a46ad48", "filename": "compiler/rustc_target/src/spec/bpfel_unknown_none.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -0,0 +1,12 @@\n+use crate::spec::Target;\n+use crate::{abi::Endian, spec::bpf_base};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"bpfel\".to_string(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".to_string(),\n+        pointer_width: 64,\n+        arch: \"bpf\".to_string(),\n+        options: bpf_base::opts(Endian::Little),\n+    }\n+}"}, {"sha": "0f2aaeb533a97d3ed4b8a9d27750fdd8285ce28c", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -57,6 +57,7 @@ mod apple_base;\n mod apple_sdk_base;\n mod arm_base;\n mod avr_gnu_base;\n+mod bpf_base;\n mod dragonfly_base;\n mod freebsd_base;\n mod fuchsia_base;\n@@ -93,6 +94,7 @@ pub enum LinkerFlavor {\n     Msvc,\n     Lld(LldFlavor),\n     PtxLinker,\n+    BpfLinker,\n }\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n@@ -161,6 +163,7 @@ flavor_mappings! {\n     ((LinkerFlavor::Ld), \"ld\"),\n     ((LinkerFlavor::Msvc), \"msvc\"),\n     ((LinkerFlavor::PtxLinker), \"ptx-linker\"),\n+    ((LinkerFlavor::BpfLinker), \"bpf-linker\"),\n     ((LinkerFlavor::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n     ((LinkerFlavor::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n     ((LinkerFlavor::Lld(LldFlavor::Ld)), \"ld.lld\"),\n@@ -897,6 +900,9 @@ supported_targets! {\n     (\"aarch64_be-unknown-linux-gnu\", aarch64_be_unknown_linux_gnu),\n     (\"aarch64-unknown-linux-gnu_ilp32\", aarch64_unknown_linux_gnu_ilp32),\n     (\"aarch64_be-unknown-linux-gnu_ilp32\", aarch64_be_unknown_linux_gnu_ilp32),\n+\n+    (\"bpfeb-unknown-none\", bpfeb_unknown_none),\n+    (\"bpfel-unknown-none\", bpfel_unknown_none),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "f5ee4b21ea616b8073fbdb5df574f305806d8a80", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -2597,6 +2597,7 @@ fn from_target_feature(\n                 Some(sym::rtm_target_feature) => rust_features.rtm_target_feature,\n                 Some(sym::f16c_target_feature) => rust_features.f16c_target_feature,\n                 Some(sym::ermsb_target_feature) => rust_features.ermsb_target_feature,\n+                Some(sym::bpf_target_feature) => rust_features.bpf_target_feature,\n                 Some(name) => bug!(\"unknown target feature gate {}\", name),\n                 None => true,\n             };"}, {"sha": "7fa5353d09b899e7af4872bdb3ee522b41a4788c", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -94,7 +94,7 @@ changelog-seen = 2\n # support. You'll need to write a target specification at least, and most\n # likely, teach rustc about the C ABI of the target. Get in touch with the\n # Rust team and file an issue if you need assistance in porting!\n-#targets = \"AArch64;ARM;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86\"\n+#targets = \"AArch64;ARM;BPF;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86\"\n \n # LLVM experimental targets to build support for. These targets are specified in\n # the same format as above, but since these targets are experimental, they are"}, {"sha": "05bb6c04a3a70125e553489c172fd82b5dea90f7", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -269,7 +269,9 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n \n     if builder.no_std(target) == Some(true) {\n         let mut features = \"compiler-builtins-mem\".to_string();\n-        features.push_str(compiler_builtins_c_feature);\n+        if !target.starts_with(\"bpf\") {\n+            features.push_str(compiler_builtins_c_feature);\n+        }\n \n         // for no-std targets we only compile a few no_std crates\n         cargo"}, {"sha": "449fdb87b0224bdc18e2d1a18fa6fac3c7740c67", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -153,7 +153,7 @@ impl Step for Llvm {\n         let llvm_targets = match &builder.config.llvm_targets {\n             Some(s) => s,\n             None => {\n-                \"AArch64;ARM;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;\\\n+                \"AArch64;ARM;BPF;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;\\\n                      Sparc;SystemZ;WebAssembly;X86\"\n             }\n         };"}, {"sha": "112979b0bebc86f54047968bee5c7f37ec5eb8f4", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -307,5 +307,6 @@ pub fn use_host_linker(target: TargetSelection) -> bool {\n         || target.contains(\"wasm32\")\n         || target.contains(\"nvptx\")\n         || target.contains(\"fortanix\")\n-        || target.contains(\"fuchsia\"))\n+        || target.contains(\"fuchsia\")\n+        || target.contains(\"bpf\"))\n }"}, {"sha": "7d86d4b0acdbf0ab6ee5baa1f744cac0e6fb0ec4", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -234,6 +234,8 @@ flavor. Valid options are:\n * `ptx-linker`: use\n   [`rust-ptx-linker`](https://github.com/denzp/rust-ptx-linker) for Nvidia\n   NVPTX GPGPU support.\n+* `bpf-linker`: use\n+  [`bpf-linker`](https://github.com/alessandrod/bpf-linker) for eBPF support.\n * `wasm-ld`: use the [`wasm-ld`](https://lld.llvm.org/WebAssembly.html)\n   executable, a port of LLVM `lld` for WebAssembly.\n * `ld64.lld`: use the LLVM `lld` executable with the [`-flavor darwin`"}, {"sha": "3225e95941cf3e03591d48a9d297eaf32bbb4855", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -219,6 +219,8 @@ target | std | host | notes\n `armv7a-none-eabihf` | * | | ARM Cortex-A, hardfloat\n `armv7s-apple-ios` | \u2713 |  |\n `avr-unknown-gnu-atmega328` | * |  | AVR. Requires `-Z build-std=core`\n+`bpfeb-unknown-none` | * |  | BPF (big endian)\n+`bpfel-unknown-none` | * |  | BPF (little endian)\n `hexagon-unknown-linux-musl` | ? |  |\n `i386-apple-ios` | \u2713 |  | 32-bit x86 iOS\n `i686-apple-darwin` | \u2713 | \u2713 | 32-bit macOS (10.7+, Lion+)"}, {"sha": "03dbf4fb617f4c2fd7f8ed637ed124bc39a788f1", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -30,6 +30,7 @@ Inline assembly is currently supported on the following architectures:\n - Hexagon\n - MIPS32r2 and MIPS64r2\n - wasm32\n+- BPF\n \n ## Basic usage\n \n@@ -570,6 +571,8 @@ Here is the list of currently supported register classes:\n | PowerPC | `reg_nonzero` | | `r[1-31]` | `b` |\n | PowerPC | `freg` | `f[0-31]` | `f` |\n | wasm32 | `local` | None\\* | `r` |\n+| BPF | `reg` |\u00a0`r[0-10]` | `r` |\n+| BPF | `wreg` |\u00a0`w[0-10]` | `w` |\n \n > **Note**: On x86 we treat `reg_byte` differently from `reg` because the compiler can allocate `al` and `ah` separately whereas `reg` reserves the whole register.\n >\n@@ -615,6 +618,8 @@ Each register class has constraints on which value types they can be used with.\n | PowerPC | `reg_nonzero` | None | `i8`, `i16`, `i32` |\n | PowerPC | `freg` | None | `f32`, `f64` |\n | wasm32 | `local` | None | `i8` `i16` `i32` `i64` `f32` `f64` |\n+| BPF |\u00a0`reg` |\u00a0None | `i8` `i16` `i32` `i64` |\n+| BPF |\u00a0`wreg` |\u00a0`alu32` | `i8` `i16` `i32` |\n \n > **Note**: For the purposes of the above table pointers, function pointers and `isize`/`usize` are treated as the equivalent integer type (`i16`/`i32`/`i64` depending on the target).\n \n@@ -674,6 +679,7 @@ Some registers have multiple names. These are all treated by the compiler as ide\n | Hexagon | `r29` | `sp` |\n | Hexagon | `r30` | `fr` |\n | Hexagon | `r31` | `lr` |\n+| BPF | `r[0-10]` | `w[0-10]` |\n \n Some registers cannot be used for input or output operands:\n "}, {"sha": "39c5555872cc5d379cc3535a31dc0cdac969466f", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -1 +1 @@\n-Subproject commit 5f67a5715771b7d29e4713e8d68338602d216dcf\n+Subproject commit 39c5555872cc5d379cc3535a31dc0cdac969466f"}, {"sha": "cc3863d03cd462a2ecc0c360ca904cbdb0247373", "filename": "src/test/assembly/asm/bpf-types.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -0,0 +1,154 @@\n+// min-llvm-version: 10.0.1\n+// assembly-output: emit-asm\n+// compile-flags: --target bpfel-unknown-none -C target_feature=+alu32\n+// needs-llvm-components: bpf\n+\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *const u64;\n+\n+impl Copy for i8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for i64 {}\n+impl Copy for ptr {}\n+\n+macro_rules! check {\n+    ($func:ident $ty:ident $class:ident) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            let y;\n+            asm!(\"{} = {}\", out($class) y, in($class) x);\n+            y\n+        }\n+    };\n+}\n+\n+macro_rules! check_reg {\n+    ($func:ident $ty:ident $reg:tt) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            let y;\n+            asm!(concat!($reg, \" = \", $reg), lateout($reg) y, in($reg) x);\n+            y\n+        }\n+    };\n+}\n+\n+extern \"C\" {\n+    fn extern_func();\n+}\n+\n+// CHECK-LABEL: sym_fn\n+// CHECK: #APP\n+// CHECK: call extern_func\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_fn() {\n+    asm!(\"call {}\", sym extern_func);\n+}\n+\n+// CHECK-LABEL: reg_i8:\n+// CHECK: #APP\n+// CHECK: r{{[0-9]+}} = r{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i8 i8 reg);\n+\n+// CHECK-LABEL: reg_i16:\n+// CHECK: #APP\n+// CHECK: r{{[0-9]+}} = r{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i16 i16 reg);\n+\n+// CHECK-LABEL: reg_i32:\n+// CHECK: #APP\n+// CHECK: r{{[0-9]+}} = r{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i32 i32 reg);\n+\n+// CHECK-LABEL: reg_i64:\n+// CHECK: #APP\n+// CHECK: r{{[0-9]+}} = r{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i64 i64 reg);\n+\n+// CHECK-LABEL: wreg_i8:\n+// CHECK: #APP\n+// CHECK: w{{[0-9]+}} = w{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(wreg_i8 i8 wreg);\n+\n+// CHECK-LABEL: wreg_i16:\n+// CHECK: #APP\n+// CHECK: w{{[0-9]+}} = w{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(wreg_i16 i16 wreg);\n+\n+// CHECK-LABEL: wreg_i32:\n+// CHECK: #APP\n+// CHECK: w{{[0-9]+}} = w{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(wreg_i32 i32 wreg);\n+\n+// CHECK-LABEL: r0_i8:\n+// CHECK: #APP\n+// CHECK: r0 = r0\n+// CHECK: #NO_APP\n+check_reg!(r0_i8 i8 \"r0\");\n+\n+// CHECK-LABEL: r0_i16:\n+// CHECK: #APP\n+// CHECK: r0 = r0\n+// CHECK: #NO_APP\n+check_reg!(r0_i16 i16 \"r0\");\n+\n+// CHECK-LABEL: r0_i32:\n+// CHECK: #APP\n+// CHECK: r0 = r0\n+// CHECK: #NO_APP\n+check_reg!(r0_i32 i32 \"r0\");\n+\n+// CHECK-LABEL: r0_i64:\n+// CHECK: #APP\n+// CHECK: r0 = r0\n+// CHECK: #NO_APP\n+check_reg!(r0_i64 i64 \"r0\");\n+\n+// CHECK-LABEL: w0_i8:\n+// CHECK: #APP\n+// CHECK: w0 = w0\n+// CHECK: #NO_APP\n+check_reg!(w0_i8 i8 \"w0\");\n+\n+// CHECK-LABEL: w0_i16:\n+// CHECK: #APP\n+// CHECK: w0 = w0\n+// CHECK: #NO_APP\n+check_reg!(w0_i16 i16 \"w0\");\n+\n+// CHECK-LABEL: w0_i32:\n+// CHECK: #APP\n+// CHECK: w0 = w0\n+// CHECK: #NO_APP\n+check_reg!(w0_i32 i32 \"w0\");"}, {"sha": "c68bffd03e289e445ea86cf3aff04ddea704e05a", "filename": "src/test/codegen/bpf-alu32.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftest%2Fcodegen%2Fbpf-alu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftest%2Fcodegen%2Fbpf-alu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbpf-alu32.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -0,0 +1,11 @@\n+// only-bpf\n+#![crate_type = \"lib\"]\n+#![feature(bpf_target_feature)]\n+#![no_std]\n+\n+#[no_mangle]\n+#[target_feature(enable = \"alu32\")]\n+// CHECK: define i8 @foo(i8 returned %arg) unnamed_addr #0 {\n+pub unsafe fn foo(arg: u8) -> u8 {\n+    arg\n+}"}, {"sha": "7cdf404242d5e41cc98e3325953a822293c2bb70", "filename": "src/test/ui/target-feature/gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -27,6 +27,7 @@\n // gate-test-f16c_target_feature\n // gate-test-riscv_target_feature\n // gate-test-ermsb_target_feature\n+// gate-test-bpf_target_feature\n \n #[target_feature(enable = \"avx512bw\")]\n //~^ ERROR: currently unstable"}, {"sha": "ee542b60a26344b7984ab4aa9d1938a4b48b10d6", "filename": "src/test/ui/target-feature/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/gate.rs:31:18\n+  --> $DIR/gate.rs:32:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}, {"sha": "1e19b7b21d8bf0fe387029852b8afa4d6df12add", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -85,6 +85,8 @@ static TARGETS: &[&str] = &[\n     \"armv7r-none-eabihf\",\n     \"armv7s-apple-ios\",\n     \"asmjs-unknown-emscripten\",\n+    \"bpfeb-unknown-none\",\n+    \"bpfel-unknown-none\",\n     \"i386-apple-ios\",\n     \"i586-pc-windows-msvc\",\n     \"i586-unknown-linux-gnu\","}, {"sha": "e3e5489403812f3757b8a9425aa3fcf8150674fd", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -1835,6 +1835,7 @@ impl<'test> TestCx<'test> {\n             || self.config.target.contains(\"nvptx\")\n             || self.is_vxworks_pure_static()\n             || self.config.target.contains(\"sgx\")\n+            || self.config.target.contains(\"bpf\")\n         {\n             // We primarily compile all auxiliary libraries as dynamic libraries\n             // to avoid code size bloat and large binaries as much as possible"}, {"sha": "37164c4e5752a26aeb2e837a95a74c077d1b9bed", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f434217aab9abf583ebc928b97ab4116921137aa/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=f434217aab9abf583ebc928b97ab4116921137aa", "patch": "@@ -48,6 +48,8 @@ const ARCH_TABLE: &[(&str, &str)] = &[\n     (\"armv7s\", \"arm\"),\n     (\"asmjs\", \"asmjs\"),\n     (\"avr\", \"avr\"),\n+    (\"bpfeb\", \"bpf\"),\n+    (\"bpfel\", \"bpf\"),\n     (\"hexagon\", \"hexagon\"),\n     (\"i386\", \"x86\"),\n     (\"i586\", \"x86\"),"}]}