{"sha": "51d166f17aa2dd73226152ff7ca6c69f2db5947c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZDE2NmYxN2FhMmRkNzMyMjYxNTJmZjdjYTZjNjlmMmRiNTk0N2M=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-25T19:36:51Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-25T19:36:51Z"}, "message": "Support `RegexBuilder`", "tree": {"sha": "dd8b89632ab1b249ecabd1173eb73d10e62d84f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd8b89632ab1b249ecabd1173eb73d10e62d84f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d166f17aa2dd73226152ff7ca6c69f2db5947c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d166f17aa2dd73226152ff7ca6c69f2db5947c", "html_url": "https://github.com/rust-lang/rust/commit/51d166f17aa2dd73226152ff7ca6c69f2db5947c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d166f17aa2dd73226152ff7ca6c69f2db5947c/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f11f84dee891e80680f47d48cc33a0cb0229080", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f11f84dee891e80680f47d48cc33a0cb0229080", "html_url": "https://github.com/rust-lang/rust/commit/4f11f84dee891e80680f47d48cc33a0cb0229080"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "928fac7412e9d9107ea0280d0c4b7309c8de93e3", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51d166f17aa2dd73226152ff7ca6c69f2db5947c/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/51d166f17aa2dd73226152ff7ca6c69f2db5947c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=51d166f17aa2dd73226152ff7ca6c69f2db5947c", "patch": "@@ -2,8 +2,8 @@\n All notable changes to this project will be documented in this file.\n \n ## 0.0.70 \u2014 TBD\n-* [`invalid_regex`] and [`trivial_regex`] can now warn on `RegexSet::new` and\n-  byte regexes\n+* [`invalid_regex`] and [`trivial_regex`] can now warn on `RegexSet::new`,\n+  `RegexBuilder::new` and byte regexes\n \n ## 0.0.69 \u2014 2016-05-20\n * Rustup to *rustc 1.10.0-nightly (476fe6eef 2016-05-21)*"}, {"sha": "b335bf993b5fc34fd8b947a4fc424bbb196d0b56", "filename": "src/regex.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51d166f17aa2dd73226152ff7ca6c69f2db5947c/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d166f17aa2dd73226152ff7ca6c69f2db5947c/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=51d166f17aa2dd73226152ff7ca6c69f2db5947c", "patch": "@@ -104,6 +104,10 @@ impl LateLintPass for RegexPass {\n                 check_regex(cx, &args[0], true);\n             } else if match_def_path(cx, def_id, &paths::REGEX_BYTES_NEW) {\n                 check_regex(cx, &args[0], false);\n+            } else if match_def_path(cx, def_id, &paths::REGEX_BUILDER_NEW) {\n+                check_regex(cx, &args[0], true);\n+            } else if match_def_path(cx, def_id, &paths::REGEX_BYTES_BUILDER_NEW) {\n+                check_regex(cx, &args[0], false);\n             } else if match_def_path(cx, def_id, &paths::REGEX_SET_NEW) {\n                 check_set(cx, &args[0], true);\n             } else if match_def_path(cx, def_id, &paths::REGEX_BYTES_SET_NEW) {"}, {"sha": "3c91578abd091b1d84c3fb7b7446005fea5d8e1d", "filename": "src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51d166f17aa2dd73226152ff7ca6c69f2db5947c/src%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d166f17aa2dd73226152ff7ca6c69f2db5947c/src%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fpaths.rs?ref=51d166f17aa2dd73226152ff7ca6c69f2db5947c", "patch": "@@ -46,7 +46,9 @@ pub const RANGE_TO_INCLUSIVE: [&'static str; 3] = [\"core\", \"ops\", \"RangeToInclus\n pub const RANGE_TO_INCLUSIVE_STD: [&'static str; 3] = [\"std\", \"ops\", \"RangeToInclusive\"];\n pub const RANGE_TO_STD: [&'static str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n pub const REGEX: [&'static str; 3] = [\"regex\", \"re_unicode\", \"Regex\"];\n+pub const REGEX_BUILDER_NEW: [&'static str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n pub const REGEX_BYTES: [&'static str; 3] = [\"regex\", \"re_bytes\", \"Regex\"];\n+pub const REGEX_BYTES_BUILDER_NEW: [&'static str; 5] = [\"regex\", \"re_builder\", \"bytes\", \"RegexBuilder\", \"new\"];\n pub const REGEX_BYTES_NEW: [&'static str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n pub const REGEX_BYTES_SET_NEW: [&'static str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n pub const REGEX_NEW: [&'static str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];"}, {"sha": "d6287b881a19334222210dc43fefedc078db0a2c", "filename": "tests/compile-fail/regex.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/51d166f17aa2dd73226152ff7ca6c69f2db5947c/tests%2Fcompile-fail%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d166f17aa2dd73226152ff7ca6c69f2db5947c/tests%2Fcompile-fail%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fregex.rs?ref=51d166f17aa2dd73226152ff7ca6c69f2db5947c", "patch": "@@ -6,15 +6,17 @@\n \n extern crate regex;\n \n-use regex::{Regex, RegexSet};\n-use regex::bytes::{Regex as BRegex, RegexSet as BRegexSet};\n+use regex::{Regex, RegexSet, RegexBuilder};\n+use regex::bytes::{Regex as BRegex, RegexSet as BRegexSet, RegexBuilder as BRegexBuilder};\n \n const OPENING_PAREN : &'static str = \"(\";\n const NOT_A_REAL_REGEX : &'static str = \"foobar\";\n \n fn syntax_error() {\n     let pipe_in_wrong_position = Regex::new(\"|\");\n     //~^ERROR: regex syntax error: empty alternate\n+    let pipe_in_wrong_position_builder = RegexBuilder::new(\"|\");\n+    //~^ERROR: regex syntax error: empty alternate\n     let wrong_char_ranice = Regex::new(\"[z-a]\");\n     //~^ERROR: regex syntax error: invalid character class range\n     let some_unicode = Regex::new(\"[\u00e9-\u00e8]\");\n@@ -27,6 +29,8 @@ fn syntax_error() {\n     //~^ERROR: regex syntax error: empty alternate\n     let some_binary_regex = BRegex::new(OPENING_PAREN);\n     //~^ERROR: regex syntax error on position 0: unclosed\n+    let some_binary_regex_builder = BRegexBuilder::new(OPENING_PAREN);\n+    //~^ERROR: regex syntax error on position 0: unclosed\n \n     let closing_paren = \")\";\n     let not_linted = Regex::new(closing_paren);\n@@ -57,6 +61,10 @@ fn trivial_regex() {\n     //~^ERROR: trivial regex\n     //~|HELP consider using `==` on `str`s\n \n+    let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `==` on `str`s\n+\n     let trivial_starts_with = Regex::new(\"^foobar\");\n     //~^ERROR: trivial regex\n     //~|HELP consider using `str::starts_with`\n@@ -96,11 +104,13 @@ fn trivial_regex() {\n \n     // non-trivial regexes\n     let non_trivial_dot = Regex::new(\"a.b\");\n+    let non_trivial_dot_builder = RegexBuilder::new(\"a.b\");\n     let non_trivial_eq = Regex::new(\"^foo|bar$\");\n     let non_trivial_starts_with = Regex::new(\"^foo|bar\");\n     let non_trivial_ends_with = Regex::new(\"^foo|bar\");\n     let non_trivial_ends_with = Regex::new(\"foo|bar\");\n     let non_trivial_binary = BRegex::new(\"foo|bar\");\n+    let non_trivial_binary_builder = BRegexBuilder::new(\"foo|bar\");\n }\n \n fn main() {"}]}