{"sha": "9d6061f3bb935c914a6d58df803dd42770f2f7e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNjA2MWYzYmI5MzVjOTE0YTZkNThkZjgwM2RkNDI3NzBmMmY3ZTI=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:17:23Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:11Z"}, "message": "Fix some TODOs", "tree": {"sha": "e1fef57e0dc0c26e2f48814bb98d4cd57fa49ba9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1fef57e0dc0c26e2f48814bb98d4cd57fa49ba9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d6061f3bb935c914a6d58df803dd42770f2f7e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6061f3bb935c914a6d58df803dd42770f2f7e2", "html_url": "https://github.com/rust-lang/rust/commit/9d6061f3bb935c914a6d58df803dd42770f2f7e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d6061f3bb935c914a6d58df803dd42770f2f7e2/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b9d05d1937f298df4197cebf862c3f644dd6778", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9d05d1937f298df4197cebf862c3f644dd6778", "html_url": "https://github.com/rust-lang/rust/commit/6b9d05d1937f298df4197cebf862c3f644dd6778"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "3c9c02d03ed516bce3a4ff12ef9c9547da644697", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6061f3bb935c914a6d58df803dd42770f2f7e2/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6061f3bb935c914a6d58df803dd42770f2f7e2/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=9d6061f3bb935c914a6d58df803dd42770f2f7e2", "patch": "@@ -587,7 +587,6 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.write_method_resolution(tgt_expr, func);\n                 (ty, self.db.value_ty(func.into()), Some(generics(self.db, func.into())))\n             }\n-            // TODO fix this\n             None => (receiver_ty, Binders::new(0, Ty::Unknown), None),\n         };\n         let substs = self.substs_for_method_call(def_generics, generic_args, &derefed_receiver_ty);"}, {"sha": "c5fe18c8550d3468c1c8e162d829079c42524153", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d6061f3bb935c914a6d58df803dd42770f2f7e2/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6061f3bb935c914a6d58df803dd42770f2f7e2/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=9d6061f3bb935c914a6d58df803dd42770f2f7e2", "patch": "@@ -287,17 +287,20 @@ pub enum Ty {\n     /// trait and all its parameters are fully known.\n     Projection(ProjectionTy),\n \n-    /// A type parameter; for example, `T` in `fn f<T>(x: T) {}\n-    // TODO fix documentation\n+    /// A placeholder for a type parameter; for example, `T` in `fn f<T>(x: T)\n+    /// {}` when we're type-checking the body of that function. In this\n+    /// situation, we know this stands for *some* type, but don't know the exact\n+    /// type.\n     Param(TypeParamId),\n \n-    /// A bound type variable. Used during trait resolution to represent Chalk\n-    /// variables, and in `Dyn` and `Opaque` bounds to represent the `Self` type.\n-    // TODO fix documentation\n+    /// A bound type variable. This is used in various places: when representing\n+    /// some polymorphic type like the type of function `fn f<T>`, the type\n+    /// parameters get turned into variables; during trait resolution, inference\n+    /// variables get turned into bound variables and back; and in `Dyn` the\n+    /// `Self` type is represented with a bound variable as well.\n     Bound(u32),\n \n-    /// A type variable used during type checking. Not to be confused with a\n-    /// type parameter.\n+    /// A type variable used during type checking.\n     Infer(InferTy),\n \n     /// A trait object (`dyn Trait` or bare `Trait` in pre-2018 Rust)."}, {"sha": "c68c5852be77bba8828a4b93c737327d27cd3518", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d6061f3bb935c914a6d58df803dd42770f2f7e2/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6061f3bb935c914a6d58df803dd42770f2f7e2/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=9d6061f3bb935c914a6d58df803dd42770f2f7e2", "patch": "@@ -890,9 +890,13 @@ pub(crate) fn ty_query(db: &impl HirDatabase, def: TyDefId) -> Binders<Ty> {\n     }\n }\n \n-pub(crate) fn ty_recover(_db: &impl HirDatabase, _cycle: &[String], _def: &TyDefId) -> Binders<Ty> {\n-    // TODO still need correct number of binders here\n-    Binders::new(0, Ty::Unknown)\n+pub(crate) fn ty_recover(db: &impl HirDatabase, _cycle: &[String], def: &TyDefId) -> Binders<Ty> {\n+    let num_binders = match *def {\n+        TyDefId::BuiltinType(_) => 0,\n+        TyDefId::AdtId(it) => generics(db, it.into()).len(),\n+        TyDefId::TypeAliasId(it) => generics(db, it.into()).len(),\n+    };\n+    Binders::new(num_binders, Ty::Unknown)\n }\n \n pub(crate) fn value_ty_query(db: &impl HirDatabase, def: ValueTyDefId) -> Binders<Ty> {"}]}