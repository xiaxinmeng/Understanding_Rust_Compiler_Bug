{"sha": "d5f6125fb32078d3331f4c2fddfbcfa303e82232", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZjYxMjVmYjMyMDc4ZDMzMzFmNGMyZmRkZmJjZmEzMDNlODIyMzI=", "commit": {"author": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2016-11-17T14:10:19Z"}, "committer": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2016-12-04T16:14:08Z"}, "message": "[LLVM 4.0] New bitcode headers and API", "tree": {"sha": "2b047b7429dfd60b02a6d50c6081b499fbdb4329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b047b7429dfd60b02a6d50c6081b499fbdb4329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f6125fb32078d3331f4c2fddfbcfa303e82232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f6125fb32078d3331f4c2fddfbcfa303e82232", "html_url": "https://github.com/rust-lang/rust/commit/d5f6125fb32078d3331f4c2fddfbcfa303e82232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f6125fb32078d3331f4c2fddfbcfa303e82232/comments", "author": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b462e8fa61a6744aa7435f0bef17023062c165df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b462e8fa61a6744aa7435f0bef17023062c165df", "html_url": "https://github.com/rust-lang/rust/commit/b462e8fa61a6744aa7435f0bef17023062c165df"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "a6334cf479f9426babc46b2d481896b943211049", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d5f6125fb32078d3331f4c2fddfbcfa303e82232/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d5f6125fb32078d3331f4c2fddfbcfa303e82232/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d5f6125fb32078d3331f4c2fddfbcfa303e82232", "patch": "@@ -892,19 +892,34 @@ extern \"C\" void LLVMRustWriteValueToString(LLVMValueRef Value, RustStringRef str\n extern \"C\" bool\n LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     Module *Dst = unwrap(dst);\n+\n     std::unique_ptr<MemoryBuffer> buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n+\n+#if LLVM_VERSION_GE(4, 0)\n+    Expected<std::unique_ptr<Module>> SrcOrError =\n+        llvm::getLazyBitcodeModule(buf->getMemBufferRef(), Dst->getContext());\n+    if (!SrcOrError) {\n+        LLVMRustSetLastError(toString(SrcOrError.takeError()).c_str());\n+        return false;\n+    }\n+\n+    auto Src = std::move(*SrcOrError);\n+#else\n     ErrorOr<std::unique_ptr<Module>> Src =\n         llvm::getLazyBitcodeModule(std::move(buf), Dst->getContext());\n     if (!Src) {\n         LLVMRustSetLastError(Src.getError().message().c_str());\n         return false;\n     }\n+#endif\n \n     std::string Err;\n \n     raw_string_ostream Stream(Err);\n     DiagnosticPrinterRawOStream DP(Stream);\n-#if LLVM_VERSION_GE(3, 8)\n+#if LLVM_VERSION_GE(4, 0)\n+    if (Linker::linkModules(*Dst, std::move(Src))) {\n+#elif LLVM_VERSION_GE(3, 8)\n     if (Linker::linkModules(*Dst, std::move(Src.get()))) {\n #else\n     if (Linker::LinkModules(Dst, Src->get(), [&](const DiagnosticInfo &DI) { DI.print(DP); })) {"}, {"sha": "b8c4076f4ce45d3208c0766d4142c73eb925e7ec", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5f6125fb32078d3331f4c2fddfbcfa303e82232/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/d5f6125fb32078d3331f4c2fddfbcfa303e82232/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=d5f6125fb32078d3331f4c2fddfbcfa303e82232", "patch": "@@ -39,7 +39,6 @@\n #include \"llvm/Transforms/IPO.h\"\n #include \"llvm/Transforms/Instrumentation.h\"\n #include \"llvm/Transforms/Vectorize.h\"\n-#include \"llvm/Bitcode/ReaderWriter.h\"\n #include \"llvm-c/Core.h\"\n #include \"llvm-c/BitReader.h\"\n #include \"llvm-c/ExecutionEngine.h\"\n@@ -60,6 +59,13 @@\n #include \"llvm/PassManager.h\"\n #endif\n \n+#if LLVM_VERSION_GE(4, 0)\n+#include \"llvm/Bitcode/BitcodeReader.h\"\n+#include \"llvm/Bitcode/BitcodeWriter.h\"\n+#else\n+#include \"llvm/Bitcode/ReaderWriter.h\"\n+#endif\n+\n #include \"llvm/IR/IRPrintingPasses.h\"\n #include \"llvm/IR/DebugInfo.h\"\n #include \"llvm/IR/DIBuilder.h\""}]}