{"sha": "90227c10f764d04372cb51fe4e3661702f4438a0", "node_id": "C_kwDOAAsO6NoAKDkwMjI3YzEwZjc2NGQwNDM3MmNiNTFmZTRlMzY2MTcwMmY0NDM4YTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-29T13:23:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-29T13:23:21Z"}, "message": "Auto merge of #8981 - PrestonFrom:more_details_for_significant_drop_lint, r=flip1995\n\nAdd details about how significant drop in match scrutinees can cause deadlocks\n\nAdds more details about how a significant drop in a match scrutinee can cause a deadlock and include link to documentation.\n\nchangelog: Add more details to significant drop lint to explicitly show how temporaries in match scrutinees can cause deadlocks.", "tree": {"sha": "82c21d7eec73c9dae3a00104b2f1452640f32d98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c21d7eec73c9dae3a00104b2f1452640f32d98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90227c10f764d04372cb51fe4e3661702f4438a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90227c10f764d04372cb51fe4e3661702f4438a0", "html_url": "https://github.com/rust-lang/rust/commit/90227c10f764d04372cb51fe4e3661702f4438a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90227c10f764d04372cb51fe4e3661702f4438a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "html_url": "https://github.com/rust-lang/rust/commit/4995b4e584a2d29c6805460b3002b4cf87bd1e2c"}, {"sha": "7bc40967a44f08e359c760ca6587b0d7d62e57a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc40967a44f08e359c760ca6587b0d7d62e57a7", "html_url": "https://github.com/rust-lang/rust/commit/7bc40967a44f08e359c760ca6587b0d7d62e57a7"}], "stats": {"total": 524, "additions": 407, "deletions": 117}, "files": [{"sha": "d43ad1b8c9c63bce1fc300b1cb395399cf4e1904", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90227c10f764d04372cb51fe4e3661702f4438a0/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90227c10f764d04372cb51fe4e3661702f4438a0/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=90227c10f764d04372cb51fe4e3661702f4438a0", "patch": "@@ -963,7 +963,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n                 return;\n             }\n             if matches!(source, MatchSource::Normal | MatchSource::ForLoopDesugar) {\n-                significant_drop_in_scrutinee::check(cx, expr, ex, source);\n+                significant_drop_in_scrutinee::check(cx, expr, ex, arms, source);\n             }\n \n             collapsible_match::check_match(cx, arms);"}, {"sha": "0704a5af52595ce158e7760b7ec8975722de8d2c", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 113, "deletions": 49, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/90227c10f764d04372cb51fe4e3661702f4438a0/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90227c10f764d04372cb51fe4e3661702f4438a0/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=90227c10f764d04372cb51fe4e3661702f4438a0", "patch": "@@ -1,10 +1,10 @@\n use crate::FxHashSet;\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::get_attr;\n use clippy_utils::source::{indent_of, snippet};\n+use clippy_utils::{get_attr, is_lint_allowed};\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{Expr, ExprKind, MatchSource};\n+use rustc_hir::{Arm, Expr, ExprKind, MatchSource};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{Ty, TypeAndMut};\n@@ -16,12 +16,23 @@ pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'tcx>,\n     scrutinee: &'tcx Expr<'_>,\n+    arms: &'tcx [Arm<'_>],\n     source: MatchSource,\n ) {\n+    if is_lint_allowed(cx, SIGNIFICANT_DROP_IN_SCRUTINEE, expr.hir_id) {\n+        return;\n+    }\n+\n     if let Some((suggestions, message)) = has_significant_drop_in_scrutinee(cx, scrutinee, source) {\n         for found in suggestions {\n             span_lint_and_then(cx, SIGNIFICANT_DROP_IN_SCRUTINEE, found.found_span, message, |diag| {\n                 set_diagnostic(diag, cx, expr, found);\n+                let s = Span::new(expr.span.hi(), expr.span.hi(), expr.span.ctxt(), None);\n+                diag.span_label(s, \"temporary lives until here\");\n+                for span in has_significant_drop_in_arms(cx, arms) {\n+                    diag.span_label(span, \"another value with significant `Drop` created here\");\n+                }\n+                diag.note(\"this might lead to deadlocks or other unexpected behavior\");\n             });\n         }\n     }\n@@ -80,22 +91,77 @@ fn has_significant_drop_in_scrutinee<'tcx, 'a>(\n     let mut helper = SigDropHelper::new(cx);\n     helper.find_sig_drop(scrutinee).map(|drops| {\n         let message = if source == MatchSource::Normal {\n-            \"temporary with significant drop in match scrutinee\"\n+            \"temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\"\n         } else {\n-            \"temporary with significant drop in for loop\"\n+            \"temporary with significant `Drop` in `for` loop condition will live until the end of the `for` expression\"\n         };\n         (drops, message)\n     })\n }\n \n+struct SigDropChecker<'a, 'tcx> {\n+    seen_types: FxHashSet<Ty<'tcx>>,\n+    cx: &'a LateContext<'tcx>,\n+}\n+\n+impl<'a, 'tcx> SigDropChecker<'a, 'tcx> {\n+    fn new(cx: &'a LateContext<'tcx>) -> SigDropChecker<'a, 'tcx> {\n+        SigDropChecker {\n+            seen_types: FxHashSet::default(),\n+            cx,\n+        }\n+    }\n+\n+    fn get_type(&self, ex: &'tcx Expr<'_>) -> Ty<'tcx> {\n+        self.cx.typeck_results().expr_ty(ex)\n+    }\n+\n+    fn has_seen_type(&mut self, ty: Ty<'tcx>) -> bool {\n+        !self.seen_types.insert(ty)\n+    }\n+\n+    fn has_sig_drop_attr(&mut self, cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+        if let Some(adt) = ty.ty_adt_def() {\n+            if get_attr(cx.sess(), cx.tcx.get_attrs_unchecked(adt.did()), \"has_significant_drop\").count() > 0 {\n+                return true;\n+            }\n+        }\n+\n+        match ty.kind() {\n+            rustc_middle::ty::Adt(a, b) => {\n+                for f in a.all_fields() {\n+                    let ty = f.ty(cx.tcx, b);\n+                    if !self.has_seen_type(ty) && self.has_sig_drop_attr(cx, ty) {\n+                        return true;\n+                    }\n+                }\n+\n+                for generic_arg in b.iter() {\n+                    if let GenericArgKind::Type(ty) = generic_arg.unpack() {\n+                        if self.has_sig_drop_attr(cx, ty) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+                false\n+            },\n+            rustc_middle::ty::Array(ty, _)\n+            | rustc_middle::ty::RawPtr(TypeAndMut { ty, .. })\n+            | rustc_middle::ty::Ref(_, ty, _)\n+            | rustc_middle::ty::Slice(ty) => self.has_sig_drop_attr(cx, *ty),\n+            _ => false,\n+        }\n+    }\n+}\n+\n struct SigDropHelper<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     is_chain_end: bool,\n-    seen_types: FxHashSet<Ty<'tcx>>,\n     has_significant_drop: bool,\n     current_sig_drop: Option<FoundSigDrop>,\n     sig_drop_spans: Option<Vec<FoundSigDrop>>,\n     special_handling_for_binary_op: bool,\n+    sig_drop_checker: SigDropChecker<'a, 'tcx>,\n }\n \n #[expect(clippy::enum_variant_names)]\n@@ -118,11 +184,11 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n         SigDropHelper {\n             cx,\n             is_chain_end: true,\n-            seen_types: FxHashSet::default(),\n             has_significant_drop: false,\n             current_sig_drop: None,\n             sig_drop_spans: None,\n             special_handling_for_binary_op: false,\n+            sig_drop_checker: SigDropChecker::new(cx),\n         }\n     }\n \n@@ -163,7 +229,7 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n         if self.current_sig_drop.is_some() {\n             return;\n         }\n-        let ty = self.get_type(expr);\n+        let ty = self.sig_drop_checker.get_type(expr);\n         if ty.is_ref() {\n             // We checked that the type was ref, so builtin_deref will return Some TypeAndMut,\n             // but let's avoid any chance of an ICE\n@@ -187,14 +253,6 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n         }\n     }\n \n-    fn get_type(&self, ex: &'tcx Expr<'_>) -> Ty<'tcx> {\n-        self.cx.typeck_results().expr_ty(ex)\n-    }\n-\n-    fn has_seen_type(&mut self, ty: Ty<'tcx>) -> bool {\n-        !self.seen_types.insert(ty)\n-    }\n-\n     fn visit_exprs_for_binary_ops(\n         &mut self,\n         left: &'tcx Expr<'_>,\n@@ -214,44 +272,15 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n \n         self.special_handling_for_binary_op = false;\n     }\n-\n-    fn has_sig_drop_attr(&mut self, cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n-        if let Some(adt) = ty.ty_adt_def() {\n-            if get_attr(cx.sess(), cx.tcx.get_attrs_unchecked(adt.did()), \"has_significant_drop\").count() > 0 {\n-                return true;\n-            }\n-        }\n-\n-        match ty.kind() {\n-            rustc_middle::ty::Adt(a, b) => {\n-                for f in a.all_fields() {\n-                    let ty = f.ty(cx.tcx, b);\n-                    if !self.has_seen_type(ty) && self.has_sig_drop_attr(cx, ty) {\n-                        return true;\n-                    }\n-                }\n-\n-                for generic_arg in b.iter() {\n-                    if let GenericArgKind::Type(ty) = generic_arg.unpack() {\n-                        if self.has_sig_drop_attr(cx, ty) {\n-                            return true;\n-                        }\n-                    }\n-                }\n-                false\n-            },\n-            rustc_middle::ty::Array(ty, _)\n-            | rustc_middle::ty::RawPtr(TypeAndMut { ty, .. })\n-            | rustc_middle::ty::Ref(_, ty, _)\n-            | rustc_middle::ty::Slice(ty) => self.has_sig_drop_attr(cx, *ty),\n-            _ => false,\n-        }\n-    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n-        if !self.is_chain_end && self.has_sig_drop_attr(self.cx, self.get_type(ex)) {\n+        if !self.is_chain_end\n+            && self\n+                .sig_drop_checker\n+                .has_sig_drop_attr(self.cx, self.sig_drop_checker.get_type(ex))\n+        {\n             self.has_significant_drop = true;\n             return;\n         }\n@@ -330,3 +359,38 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n         }\n     }\n }\n+\n+struct ArmSigDropHelper<'a, 'tcx> {\n+    sig_drop_checker: SigDropChecker<'a, 'tcx>,\n+    found_sig_drop_spans: FxHashSet<Span>,\n+}\n+\n+impl<'a, 'tcx> ArmSigDropHelper<'a, 'tcx> {\n+    fn new(cx: &'a LateContext<'tcx>) -> ArmSigDropHelper<'a, 'tcx> {\n+        ArmSigDropHelper {\n+            sig_drop_checker: SigDropChecker::new(cx),\n+            found_sig_drop_spans: FxHashSet::<Span>::default(),\n+        }\n+    }\n+}\n+\n+fn has_significant_drop_in_arms<'tcx, 'a>(cx: &'a LateContext<'tcx>, arms: &'tcx [Arm<'_>]) -> FxHashSet<Span> {\n+    let mut helper = ArmSigDropHelper::new(cx);\n+    for arm in arms {\n+        helper.visit_expr(arm.body);\n+    }\n+    helper.found_sig_drop_spans\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for ArmSigDropHelper<'a, 'tcx> {\n+    fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n+        if self\n+            .sig_drop_checker\n+            .has_sig_drop_attr(self.sig_drop_checker.cx, self.sig_drop_checker.get_type(ex))\n+        {\n+            self.found_sig_drop_spans.insert(ex.span);\n+            return;\n+        }\n+        walk_expr(self, ex);\n+    }\n+}"}, {"sha": "185e5009b60f1500db71b3e49cbad47f3cc09462", "filename": "tests/ui/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/90227c10f764d04372cb51fe4e3661702f4438a0/tests%2Fui%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90227c10f764d04372cb51fe4e3661702f4438a0/tests%2Fui%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_in_scrutinee.rs?ref=90227c10f764d04372cb51fe4e3661702f4438a0", "patch": "@@ -64,6 +64,19 @@ fn should_trigger_lint_with_mutex_guard_in_match_scrutinee() {\n     };\n }\n \n+fn should_not_trigger_lint_with_mutex_guard_in_match_scrutinee_when_lint_allowed() {\n+    let mutex = Mutex::new(State {});\n+\n+    // Lint should not be triggered because it is \"allowed\" below.\n+    #[allow(clippy::significant_drop_in_scrutinee)]\n+    match mutex.lock().unwrap().foo() {\n+        true => {\n+            mutex.lock().unwrap().bar();\n+        },\n+        false => {},\n+    };\n+}\n+\n fn should_not_trigger_lint_for_insignificant_drop() {\n     // Should not trigger lint because there are no temporaries whose drops have a significant\n     // side effect.\n@@ -591,4 +604,20 @@ fn should_trigger_lint_for_read_write_lock_for_loop() {\n     }\n }\n \n+fn do_bar(mutex: &Mutex<State>) {\n+    mutex.lock().unwrap().bar();\n+}\n+\n+fn should_trigger_lint_without_significant_drop_in_arm() {\n+    let mutex = Mutex::new(State {});\n+\n+    // Should trigger lint because the lifetime of the temporary MutexGuard is surprising because it\n+    // is preserved until the end of the match, but there is no clear indication that this is the\n+    // case.\n+    match mutex.lock().unwrap().foo() {\n+        true => do_bar(&mutex),\n+        false => {},\n+    };\n+}\n+\n fn main() {}"}, {"sha": "dbb41837e790e2a67455600e0993cea6caf1467e", "filename": "tests/ui/significant_drop_in_scrutinee.stderr", "status": "modified", "additions": 264, "deletions": 67, "changes": 331, "blob_url": "https://github.com/rust-lang/rust/blob/90227c10f764d04372cb51fe4e3661702f4438a0/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90227c10f764d04372cb51fe4e3661702f4438a0/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr?ref=90227c10f764d04372cb51fe4e3661702f4438a0", "patch": "@@ -1,174 +1,290 @@\n-error: temporary with significant drop in match scrutinee\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n   --> $DIR/significant_drop_in_scrutinee.rs:59:11\n    |\n LL |     match mutex.lock().unwrap().foo() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         true => {\n+LL |             mutex.lock().unwrap().bar();\n+   |             --------------------- another value with significant `Drop` created here\n+...\n+LL |     };\n+   |      - temporary lives until here\n    |\n    = note: `-D clippy::significant-drop-in-scrutinee` implied by `-D warnings`\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     let value = mutex.lock().unwrap().foo();\n LL ~     match value {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:132:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:145:11\n    |\n LL |     match s.lock_m().get_the_value() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+...\n+LL |             println!(\"{}\", s.lock_m().get_the_value());\n+   |                            ---------- another value with significant `Drop` created here\n+...\n+LL |     }\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     let value = s.lock_m().get_the_value();\n LL ~     match value {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:153:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:166:11\n    |\n LL |     match s.lock_m_m().get_the_value() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+...\n+LL |             println!(\"{}\", s.lock_m().get_the_value());\n+   |                            ---------- another value with significant `Drop` created here\n+...\n+LL |     }\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     let value = s.lock_m_m().get_the_value();\n LL ~     match value {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:201:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:214:11\n    |\n LL |     match counter.temp_increment().len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     };\n+   |      - temporary lives until here\n    |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     let value = counter.temp_increment().len();\n LL ~     match value {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:224:16\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:237:16\n    |\n LL |         match (mutex1.lock().unwrap().s.len(), true) {\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+...\n+LL |                 mutex1.lock().unwrap().s.len();\n+   |                 ---------------------- another value with significant `Drop` created here\n+...\n+LL |         };\n+   |          - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~         let value = mutex1.lock().unwrap().s.len();\n LL ~         match (value, true) {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:233:22\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:246:22\n    |\n LL |         match (true, mutex1.lock().unwrap().s.len(), true) {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+...\n+LL |                 mutex1.lock().unwrap().s.len();\n+   |                 ---------------------- another value with significant `Drop` created here\n+...\n+LL |         };\n+   |          - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~         let value = mutex1.lock().unwrap().s.len();\n LL ~         match (true, value, true) {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:243:16\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:256:16\n    |\n LL |         match (mutex1.lock().unwrap().s.len(), true, mutex2.lock().unwrap().s.len()) {\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+...\n+LL |                 mutex1.lock().unwrap().s.len();\n+   |                 ---------------------- another value with significant `Drop` created here\n+LL |                 mutex2.lock().unwrap().s.len();\n+   |                 ---------------------- another value with significant `Drop` created here\n+...\n+LL |         };\n+   |          - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~         let value = mutex1.lock().unwrap().s.len();\n LL ~         match (value, true, mutex2.lock().unwrap().s.len()) {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:243:54\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:256:54\n    |\n LL |         match (mutex1.lock().unwrap().s.len(), true, mutex2.lock().unwrap().s.len()) {\n    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+...\n+LL |                 mutex1.lock().unwrap().s.len();\n+   |                 ---------------------- another value with significant `Drop` created here\n+LL |                 mutex2.lock().unwrap().s.len();\n+   |                 ---------------------- another value with significant `Drop` created here\n+...\n+LL |         };\n+   |          - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~         let value = mutex2.lock().unwrap().s.len();\n LL ~         match (mutex1.lock().unwrap().s.len(), true, value) {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:254:15\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:267:15\n    |\n LL |         match mutex3.lock().unwrap().s.as_str() {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |                 mutex1.lock().unwrap().s.len();\n+   |                 ---------------------- another value with significant `Drop` created here\n+LL |                 mutex2.lock().unwrap().s.len();\n+   |                 ---------------------- another value with significant `Drop` created here\n+...\n+LL |         };\n+   |          - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:264:22\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:277:22\n    |\n LL |         match (true, mutex3.lock().unwrap().s.as_str()) {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |                 mutex1.lock().unwrap().s.len();\n+   |                 ---------------------- another value with significant `Drop` created here\n+LL |                 mutex2.lock().unwrap().s.len();\n+   |                 ---------------------- another value with significant `Drop` created here\n+...\n+LL |         };\n+   |          - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:283:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:296:11\n    |\n LL |     match mutex.lock().unwrap().s.len() > 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+LL |         true => {\n+LL |             mutex.lock().unwrap().s.len();\n+   |             --------------------- another value with significant `Drop` created here\n+...\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     let value = mutex.lock().unwrap().s.len() > 1;\n LL ~     match value {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:290:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:303:11\n    |\n LL |     match 1 < mutex.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+LL |         true => {\n+LL |             mutex.lock().unwrap().s.len();\n+   |             --------------------- another value with significant `Drop` created here\n+...\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     let value = 1 < mutex.lock().unwrap().s.len();\n LL ~     match value {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:308:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:321:11\n    |\n LL |     match mutex1.lock().unwrap().s.len() < mutex2.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+...\n+LL |                 mutex1.lock().unwrap().s.len(),\n+   |                 ---------------------- another value with significant `Drop` created here\n+LL |                 mutex2.lock().unwrap().s.len()\n+   |                 ---------------------- another value with significant `Drop` created here\n+...\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     let value = mutex1.lock().unwrap().s.len() < mutex2.lock().unwrap().s.len();\n LL ~     match value {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:319:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:332:11\n    |\n LL |     match mutex1.lock().unwrap().s.len() >= mutex2.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+...\n+LL |                 mutex1.lock().unwrap().s.len(),\n+   |                 ---------------------- another value with significant `Drop` created here\n+LL |                 mutex2.lock().unwrap().s.len()\n+   |                 ---------------------- another value with significant `Drop` created here\n+...\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     let value = mutex1.lock().unwrap().s.len() >= mutex2.lock().unwrap().s.len();\n LL ~     match value {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:354:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:367:11\n    |\n LL |     match get_mutex_guard().s.len() > 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+LL |         true => {\n+LL |             mutex1.lock().unwrap().s.len();\n+   |             ---------------------- another value with significant `Drop` created here\n+...\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     let value = get_mutex_guard().s.len() > 1;\n LL ~     match value {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:371:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:384:11\n    |\n LL |       match match i {\n    |  ___________^\n@@ -179,7 +295,14 @@ LL | |     .s\n LL | |     .len()\n LL | |         > 1\n    | |___________^\n-   |\n+...\n+LL |               mutex1.lock().unwrap().s.len();\n+   |               ---------------------- another value with significant `Drop` created here\n+...\n+LL |       };\n+   |        - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     let value = match i {\n@@ -190,8 +313,8 @@ LL +     .s\n LL +     .len()\n  ...\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:397:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:410:11\n    |\n LL |       match if i > 1 {\n    |  ___________^\n@@ -202,7 +325,14 @@ LL | |         mutex2.lock().unwrap()\n LL | |     .len()\n LL | |         > 1\n    | |___________^\n-   |\n+...\n+LL |               mutex1.lock().unwrap().s.len();\n+   |               ---------------------- another value with significant `Drop` created here\n+...\n+LL |       };\n+   |        - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     let value = if i > 1 {\n@@ -213,83 +343,150 @@ LL +     }\n LL +     .s\n  ...\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:451:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:464:11\n    |\n LL |     match s.lock().deref().deref() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         0 | 1 => println!(\"Value was less than 2\"),\n+LL |         _ => println!(\"Value is {}\", s.lock().deref()),\n+   |                                      ---------------- another value with significant `Drop` created here\n+LL |     };\n+   |      - temporary lives until here\n    |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match and create a copy\n    |\n LL ~     let value = *s.lock().deref().deref();\n LL ~     match value {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:479:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:492:11\n    |\n LL |     match s.lock().deref().deref() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         matcher => println!(\"Value is {}\", s.lock().deref()),\n+   |                                            ---------------- another value with significant `Drop` created here\n+LL |         _ => println!(\"Value was not a match\"),\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:498:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:511:11\n    |\n LL |     match mutex.lock().unwrap().i = i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+LL |         _ => {\n+LL |             println!(\"{}\", mutex.lock().unwrap().i);\n+   |                            --------------------- another value with significant `Drop` created here\n+LL |         },\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     mutex.lock().unwrap().i = i;\n LL ~     match () {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:504:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:517:11\n    |\n LL |     match i = mutex.lock().unwrap().i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+LL |         _ => {\n+LL |             println!(\"{}\", mutex.lock().unwrap().i);\n+   |                            --------------------- another value with significant `Drop` created here\n+LL |         },\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     i = mutex.lock().unwrap().i;\n LL ~     match () {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:510:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:523:11\n    |\n LL |     match mutex.lock().unwrap().i += 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+LL |         _ => {\n+LL |             println!(\"{}\", mutex.lock().unwrap().i);\n+   |                            --------------------- another value with significant `Drop` created here\n+LL |         },\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     mutex.lock().unwrap().i += 1;\n LL ~     match () {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:516:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:529:11\n    |\n LL |     match i += mutex.lock().unwrap().i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n+LL |         _ => {\n+LL |             println!(\"{}\", mutex.lock().unwrap().i);\n+   |                            --------------------- another value with significant `Drop` created here\n+LL |         },\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n help: try moving the temporary above the match\n    |\n LL ~     i += mutex.lock().unwrap().i;\n LL ~     match () {\n    |\n \n-error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:579:11\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:592:11\n    |\n LL |     match rwlock.read().unwrap().to_number() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n \n-error: temporary with significant drop in for loop\n-  --> $DIR/significant_drop_in_scrutinee.rs:589:14\n+error: temporary with significant `Drop` in `for` loop condition will live until the end of the `for` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:602:14\n    |\n LL |     for s in rwlock.read().unwrap().iter() {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         println!(\"{}\", s);\n+LL |     }\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n+\n+error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n+  --> $DIR/significant_drop_in_scrutinee.rs:617:11\n+   |\n+LL |     match mutex.lock().unwrap().foo() {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     };\n+   |      - temporary lives until here\n+   |\n+   = note: this might lead to deadlocks or other unexpected behavior\n+help: try moving the temporary above the match\n+   |\n+LL ~     let value = mutex.lock().unwrap().foo();\n+LL ~     match value {\n+   |\n \n-error: aborting due to 25 previous errors\n+error: aborting due to 26 previous errors\n "}]}