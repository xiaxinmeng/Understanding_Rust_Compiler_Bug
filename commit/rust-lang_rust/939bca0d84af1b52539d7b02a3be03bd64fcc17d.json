{"sha": "939bca0d84af1b52539d7b02a3be03bd64fcc17d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOWJjYTBkODRhZjFiNTI1MzlkN2IwMmEzYmUwM2JkNjRmY2MxN2Q=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-01T21:57:17Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-01T22:58:39Z"}, "message": "Added send and receive to comm library.", "tree": {"sha": "86e2bc7184d92002ad9dcb7c214af595be21a559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86e2bc7184d92002ad9dcb7c214af595be21a559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/939bca0d84af1b52539d7b02a3be03bd64fcc17d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/939bca0d84af1b52539d7b02a3be03bd64fcc17d", "html_url": "https://github.com/rust-lang/rust/commit/939bca0d84af1b52539d7b02a3be03bd64fcc17d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/939bca0d84af1b52539d7b02a3be03bd64fcc17d/comments", "author": null, "committer": null, "parents": [{"sha": "6a6d5c669e363238abbed050f62658ee6e74cbbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6d5c669e363238abbed050f62658ee6e74cbbf", "html_url": "https://github.com/rust-lang/rust/commit/6a6d5c669e363238abbed050f62658ee6e74cbbf"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "1665626432a87230d10108adbf3d5f65cef1a451", "filename": "src/lib/comm.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/939bca0d84af1b52539d7b02a3be03bd64fcc17d/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939bca0d84af1b52539d7b02a3be03bd64fcc17d/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=939bca0d84af1b52539d7b02a3be03bd64fcc17d", "patch": "@@ -1,21 +1,26 @@\n import sys;\n+import ptr;\n+import unsafe;\n \n export _chan;\n export _port;\n \n export mk_port;\n \n native \"rust\" mod rustrt {\n+    type void;\n     type rust_chan;\n     type rust_port;\n \n     fn new_chan(po : *rust_port) -> *rust_chan;\n     fn del_chan(ch : *rust_chan);\n     fn drop_chan(ch : *rust_chan);\n+    fn chan_send(ch: *rust_chan, v : *void);\n \n     fn new_port(unit_sz : uint) -> *rust_port;\n     fn del_port(po : *rust_port);\n     fn drop_port(po : *rust_port);\n+    fn port_recv(dp : *void, po : *rust_port);\n }\n \n resource chan_ptr(ch: *rustrt::rust_chan) {\n@@ -32,7 +37,8 @@ resource port_ptr(po: *rustrt::rust_port) {\n \n obj _chan[T](raw_chan : @chan_ptr) {\n     fn send(v : &T) {\n-\n+        rustrt::chan_send(**raw_chan,\n+                          unsafe::reinterpret_cast(ptr::addr_of(v)));\n     }\n }\n \n@@ -42,7 +48,8 @@ obj _port[T](raw_port : @port_ptr) {\n     }\n \n     fn recv_into(v : &T) {\n-\n+        rustrt::port_recv(unsafe::reinterpret_cast(ptr::addr_of(v)),\n+                          **raw_port);\n     }\n }\n "}, {"sha": "99eb61aff36b3ac04b2a81722a258be9c4bb65fc", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/939bca0d84af1b52539d7b02a3be03bd64fcc17d/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/939bca0d84af1b52539d7b02a3be03bd64fcc17d/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=939bca0d84af1b52539d7b02a3be03bd64fcc17d", "patch": "@@ -914,6 +914,36 @@ void drop_port(rust_task *, rust_port *port) {\n     port->ref_count--;\n }\n \n+extern \"C\" CDECL void\n+chan_send(rust_task *task, rust_chan *chan, void *sptr) {\n+    chan->send(sptr);\n+}\n+\n+extern \"C\" CDECL void\n+port_recv(rust_task *task, uintptr_t *dptr, rust_port *port) {\n+    {\n+        scoped_lock with(port->lock);\n+\n+        LOG(task, comm, \"port: 0x%\" PRIxPTR \", dptr: 0x%\" PRIxPTR\n+            \", size: 0x%\" PRIxPTR \", chan_no: %d\",\n+            (uintptr_t) port, (uintptr_t) dptr, port->unit_sz,\n+            port->chans.length());\n+\n+        if (port->receive(dptr)) {\n+            return;\n+        }\n+\n+        // No data was buffered on any incoming channel, so block this task on\n+        // the port. Remember the rendezvous location so that any sender task\n+        // can write to it before waking up this task.\n+\n+        LOG(task, comm, \"<=== waiting for rendezvous data ===\");\n+        task->rendezvous_ptr = dptr;\n+        task->block(port, \"waiting for rendezvous data\");\n+    }\n+    task->yield(3);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "4946a516479fd20f637ddd8b031abf01ec94317f", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/939bca0d84af1b52539d7b02a3be03bd64fcc17d/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/939bca0d84af1b52539d7b02a3be03bd64fcc17d/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=939bca0d84af1b52539d7b02a3be03bd64fcc17d", "patch": "@@ -193,30 +193,12 @@ upcall_send(rust_task *task, rust_chan *chan, void *sptr) {\n     LOG(task, comm, \"=== sent data ===>\");\n }\n \n+extern \"C\" CDECL void\n+port_recv(rust_task *task, uintptr_t *dptr, rust_port *port);\n extern \"C\" CDECL void\n upcall_recv(rust_task *task, uintptr_t *dptr, rust_port *port) {\n     LOG_UPCALL_ENTRY(task);\n-    {\n-        scoped_lock with(port->lock);\n-\n-        LOG(task, comm, \"port: 0x%\" PRIxPTR \", dptr: 0x%\" PRIxPTR\n-            \", size: 0x%\" PRIxPTR \", chan_no: %d\",\n-            (uintptr_t) port, (uintptr_t) dptr, port->unit_sz,\n-            port->chans.length());\n-\n-        if (port->receive(dptr)) {\n-            return;\n-        }\n-\n-        // No data was buffered on any incoming channel, so block this task on\n-        // the port. Remember the rendezvous location so that any sender task\n-        // can write to it before waking up this task.\n-\n-        LOG(task, comm, \"<=== waiting for rendezvous data ===\");\n-        task->rendezvous_ptr = dptr;\n-        task->block(port, \"waiting for rendezvous data\");\n-    }\n-    task->yield(3);\n+    port_recv(task, dptr, port);\n }\n \n extern \"C\" CDECL void"}, {"sha": "e818b9ac83d0a9639d00b2afb038a45ecb6657f4", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/939bca0d84af1b52539d7b02a3be03bd64fcc17d/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/939bca0d84af1b52539d7b02a3be03bd64fcc17d/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=939bca0d84af1b52539d7b02a3be03bd64fcc17d", "patch": "@@ -1,4 +1,5 @@\n align_of\n+chan_send\n check_claims\n clone_chan\n debug_box\n@@ -27,6 +28,7 @@ nano_time\n new_chan\n new_port\n pin_task\n+port_recv\n unpin_task\n rand_free\n rand_new"}, {"sha": "706cca7ddafc6d71bcc1790c0886d0632e299df9", "filename": "src/test/stdtest/comm.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/939bca0d84af1b52539d7b02a3be03bd64fcc17d/src%2Ftest%2Fstdtest%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939bca0d84af1b52539d7b02a3be03bd64fcc17d/src%2Ftest%2Fstdtest%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fcomm.rs?ref=939bca0d84af1b52539d7b02a3be03bd64fcc17d", "patch": "@@ -6,3 +6,15 @@ fn create_port_and_chan() {\n     let p = comm::mk_port[int]();\n     let c = p.mk_chan();\n }\n+\n+#[test]\n+fn send_recv() {\n+    let p = comm::mk_port();\n+    let c = p.mk_chan();\n+\n+    c.send(42);\n+    let v = 0;\n+    p.recv_into(v);\n+\n+    assert(42 == v);\n+}"}]}