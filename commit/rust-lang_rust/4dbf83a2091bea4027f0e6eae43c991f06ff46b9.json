{"sha": "4dbf83a2091bea4027f0e6eae43c991f06ff46b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYmY4M2EyMDkxYmVhNDAyN2YwZTZlYWU0M2M5OTFmMDZmZjQ2Yjk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-08T18:47:36Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:55Z"}, "message": "Move try_print_query_stack to rustc_interface.", "tree": {"sha": "203145a808e17a163792b2c137ba3e58a855b371", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/203145a808e17a163792b2c137ba3e58a855b371"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dbf83a2091bea4027f0e6eae43c991f06ff46b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbf83a2091bea4027f0e6eae43c991f06ff46b9", "html_url": "https://github.com/rust-lang/rust/commit/4dbf83a2091bea4027f0e6eae43c991f06ff46b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dbf83a2091bea4027f0e6eae43c991f06ff46b9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e9cac40a66ad8c18409890673150d8a4eacf039", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9cac40a66ad8c18409890673150d8a4eacf039", "html_url": "https://github.com/rust-lang/rust/commit/0e9cac40a66ad8c18409890673150d8a4eacf039"}], "stats": {"total": 116, "additions": 62, "deletions": 54}, "files": [{"sha": "07c7278a2f43650614092d6534db43da85825b66", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf83a2091bea4027f0e6eae43c991f06ff46b9/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf83a2091bea4027f0e6eae43c991f06ff46b9/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=4dbf83a2091bea4027f0e6eae43c991f06ff46b9", "patch": "@@ -27,7 +27,6 @@ use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n use rustc_metadata::locator;\n use rustc_middle::middle::cstore::MetadataLoader;\n-use rustc_middle::ty::TyCtxt;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n use rustc_serialize::json::{self, ToJson};\n@@ -1232,7 +1231,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n \n     let num_frames = if backtrace { None } else { Some(2) };\n \n-    TyCtxt::try_print_query_stack(&handler, num_frames);\n+    interface::try_print_query_stack(&handler, num_frames);\n \n     #[cfg(windows)]\n     unsafe {"}, {"sha": "502e7155c2e0dcb1cc00baa70926472c87885eeb", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf83a2091bea4027f0e6eae43c991f06ff46b9/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf83a2091bea4027f0e6eae43c991f06ff46b9/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=4dbf83a2091bea4027f0e6eae43c991f06ff46b9", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::OnDrop;\n use rustc_errors::registry::Registry;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::{ErrorReported, Handler};\n use rustc_lint::LintStore;\n use rustc_middle::ty;\n use rustc_parse::new_parser_from_source_str;\n@@ -213,3 +213,24 @@ pub fn run_compiler<R: Send>(mut config: Config, f: impl FnOnce(&Compiler) -> R\n         || create_compiler_and_run(config, f),\n     )\n }\n+\n+pub fn try_print_query_stack(handler: &Handler, num_frames: Option<usize>) {\n+    eprintln!(\"query stack during panic:\");\n+\n+    // Be careful relying on global state here: this code is called from\n+    // a panic hook, which means that the global `Handler` may be in a weird\n+    // state if it was responsible for triggering the panic.\n+    let i = ty::tls::with_context_opt(|icx| {\n+        if let Some(icx) = icx {\n+            icx.tcx.queries.try_print_query_stack(icx.tcx, icx.query, handler, num_frames)\n+        } else {\n+            0\n+        }\n+    });\n+\n+    if num_frames == None || num_frames >= Some(i) {\n+        eprintln!(\"end of query stack\");\n+    } else {\n+        eprintln!(\"we're just showing a limited slice of the query stack\");\n+    }\n+}"}, {"sha": "6aa9d88798fa7ce2f0c0df4a9da5799bd912abf6", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 38, "deletions": 48, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf83a2091bea4027f0e6eae43c991f06ff46b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf83a2091bea4027f0e6eae43c991f06ff46b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=4dbf83a2091bea4027f0e6eae43c991f06ff46b9", "patch": "@@ -2,7 +2,8 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::ty::query::{on_disk_cache, Query};\n+use crate::dep_graph;\n+use crate::ty::query::{on_disk_cache, Queries, Query};\n use crate::ty::tls::{self, ImplicitCtxt};\n use crate::ty::{self, TyCtxt};\n use rustc_query_system::dep_graph::HasDepContext;\n@@ -170,57 +171,46 @@ impl<'tcx> QueryCtxt<'tcx> {\n     }\n }\n \n-impl<'tcx> TyCtxt<'tcx> {\n-    pub fn try_print_query_stack(handler: &Handler, num_frames: Option<usize>) {\n-        eprintln!(\"query stack during panic:\");\n-\n-        // Be careful relying on global state here: this code is called from\n-        // a panic hook, which means that the global `Handler` may be in a weird\n-        // state if it was responsible for triggering the panic.\n+impl<'tcx> Queries<'tcx> {\n+    pub fn try_print_query_stack(\n+        &'tcx self,\n+        tcx: TyCtxt<'tcx>,\n+        query: Option<QueryJobId<dep_graph::DepKind>>,\n+        handler: &Handler,\n+        num_frames: Option<usize>,\n+    ) -> usize {\n+        let query_map = self.try_collect_active_jobs();\n+\n+        let mut current_query = query;\n         let mut i = 0;\n-        ty::tls::with_context_opt(|icx| {\n-            if let Some(icx) = icx {\n-                let query_map = icx.tcx.queries.try_collect_active_jobs();\n-\n-                let mut current_query = icx.query;\n-\n-                while let Some(query) = current_query {\n-                    if Some(i) == num_frames {\n-                        break;\n-                    }\n-                    let query_info =\n-                        if let Some(info) = query_map.as_ref().and_then(|map| map.get(&query)) {\n-                            info\n-                        } else {\n-                            break;\n-                        };\n-                    let mut diag = Diagnostic::new(\n-                        Level::FailureNote,\n-                        &format!(\n-                            \"#{} [{}] {}\",\n-                            i,\n-                            query_info.info.query.name(),\n-                            query_info\n-                                .info\n-                                .query\n-                                .describe(QueryCtxt { tcx: icx.tcx, queries: icx.tcx.queries })\n-                        ),\n-                    );\n-                    diag.span =\n-                        icx.tcx.sess.source_map().guess_head_span(query_info.info.span).into();\n-                    handler.force_print_diagnostic(diag);\n-\n-                    current_query = query_info.job.parent;\n-                    i += 1;\n-                }\n+\n+        while let Some(query) = current_query {\n+            if Some(i) == num_frames {\n+                break;\n             }\n-        });\n+            let query_info = if let Some(info) = query_map.as_ref().and_then(|map| map.get(&query))\n+            {\n+                info\n+            } else {\n+                break;\n+            };\n+            let mut diag = Diagnostic::new(\n+                Level::FailureNote,\n+                &format!(\n+                    \"#{} [{}] {}\",\n+                    i,\n+                    query_info.info.query.name(),\n+                    query_info.info.query.describe(QueryCtxt { tcx, queries: self })\n+                ),\n+            );\n+            diag.span = tcx.sess.source_map().guess_head_span(query_info.info.span).into();\n+            handler.force_print_diagnostic(diag);\n \n-        if num_frames == None || num_frames >= Some(i) {\n-            eprintln!(\"end of query stack\");\n-        } else {\n-            eprintln!(\"we're just showing a limited slice of the query stack\");\n+            current_query = query_info.job.parent;\n+            i += 1;\n         }\n+\n+        i\n     }\n }\n "}, {"sha": "d5143e1438ee0e89d18f854ec5457a6f4d859bb8", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf83a2091bea4027f0e6eae43c991f06ff46b9/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf83a2091bea4027f0e6eae43c991f06ff46b9/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=4dbf83a2091bea4027f0e6eae43c991f06ff46b9", "patch": "@@ -11,10 +11,8 @@\n extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_interface;\n-extern crate rustc_middle;\n \n use rustc_interface::interface;\n-use rustc_middle::ty::TyCtxt;\n use rustc_tools_util::VersionInfo;\n \n use std::borrow::Cow;\n@@ -168,7 +166,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n \n     let num_frames = if backtrace { None } else { Some(2) };\n \n-    TyCtxt::try_print_query_stack(&handler, num_frames);\n+    interface::try_print_query_stack(&handler, num_frames);\n }\n \n fn toolchain_path(home: Option<String>, toolchain: Option<String>) -> Option<PathBuf> {"}]}