{"sha": "2190f6c3c28595275b73e2b6134e3bfcab1f66f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOTBmNmMzYzI4NTk1Mjc1YjczZTJiNjEzNGUzYmZjYWIxZjY2ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-04T16:35:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-04T16:35:09Z"}, "message": "Auto merge of #38086 - semarie:openbsd-i686, r=alexcrichton\n\nAdd i686-unknown-openbsd target.\n\nIt is a preliminary work. I still have some tests failing, but I have a working rustc binary which is able to rebuild itself.\n\nan update of libc should be required too, but I dunno how to do it with vendor/ layout.\n\nr? @alexcrichton", "tree": {"sha": "30154bf2979af18a3de3b930efaac07883fa6d97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30154bf2979af18a3de3b930efaac07883fa6d97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2190f6c3c28595275b73e2b6134e3bfcab1f66f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2190f6c3c28595275b73e2b6134e3bfcab1f66f5", "html_url": "https://github.com/rust-lang/rust/commit/2190f6c3c28595275b73e2b6134e3bfcab1f66f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2190f6c3c28595275b73e2b6134e3bfcab1f66f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b462e8fa61a6744aa7435f0bef17023062c165df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b462e8fa61a6744aa7435f0bef17023062c165df", "html_url": "https://github.com/rust-lang/rust/commit/b462e8fa61a6744aa7435f0bef17023062c165df"}, {"sha": "6774e7aa92f5866657f778f08261c0fe219f01a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6774e7aa92f5866657f778f08261c0fe219f01a8", "html_url": "https://github.com/rust-lang/rust/commit/6774e7aa92f5866657f778f08261c0fe219f01a8"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "b839937c9768b3c7ee151be4295ac9b4d7ca68d7", "filename": "mk/cfg/i686-unknown-openbsd.mk", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2190f6c3c28595275b73e2b6134e3bfcab1f66f5/mk%2Fcfg%2Fi686-unknown-openbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2190f6c3c28595275b73e2b6134e3bfcab1f66f5/mk%2Fcfg%2Fi686-unknown-openbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-openbsd.mk?ref=2190f6c3c28595275b73e2b6134e3bfcab1f66f5", "patch": "@@ -0,0 +1,24 @@\n+# i686-unknown-openbsd configuration\n+CC_i686-unknown-openbsd=$(CC)\n+CXX_i686-unknown-openbsd=$(CXX)\n+CPP_i686-unknown-openbsd=$(CPP)\n+AR_i686-unknown-openbsd=$(AR)\n+CFG_LIB_NAME_i686-unknown-openbsd=lib$(1).so\n+CFG_STATIC_LIB_NAME_i686-unknown-openbsd=lib$(1).a\n+CFG_LIB_GLOB_i686-unknown-openbsd=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_i686-unknown-openbsd=$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_i686-unknown-openbsd := -m32 -I/usr/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i686-unknown-openbsd :=  -g -fPIC -m32 -I/usr/include $(CFLAGS)\n+CFG_GCCISH_LINK_FLAGS_i686-unknown-openbsd := -shared -fPIC -g -pthread -m32\n+CFG_GCCISH_DEF_FLAG_i686-unknown-openbsd := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_i686-unknown-openbsd :=\n+CFG_INSTALL_NAME_i686-unknown-openbsd =\n+CFG_EXE_SUFFIX_i686-unknown-openbsd :=\n+CFG_WINDOWSY_i686-unknown-openbsd :=\n+CFG_UNIXY_i686-unknown-openbsd := 1\n+CFG_LDPATH_i686-unknown-openbsd :=\n+CFG_RUN_i686-unknown-openbsd=$(2)\n+CFG_RUN_TARG_i686-unknown-openbsd=$(call CFG_RUN_i686-unknown-openbsd,,$(2))\n+CFG_GNU_TRIPLE_i686-unknown-openbsd := i686-unknown-openbsd\n+RUSTC_FLAGS_i686-unknown-openbsd=-C linker=$(call FIND_COMPILER,$(CC))\n+CFG_DISABLE_JEMALLOC_i686-unknown-openbsd := 1"}, {"sha": "0ac39c5ccf6a04395b7c40dd62321cb91f63f160", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=2190f6c3c28595275b73e2b6134e3bfcab1f66f5", "patch": "@@ -1 +1 @@\n-Subproject commit 6e8c1b490ccbe5e84d248bab883515bc85394b5f\n+Subproject commit 0ac39c5ccf6a04395b7c40dd62321cb91f63f160"}, {"sha": "81efd37386a0f9232148e4d83c068526f3c634be", "filename": "src/librustc_back/target/i686_unknown_openbsd.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2190f6c3c28595275b73e2b6134e3bfcab1f66f5/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2190f6c3c28595275b73e2b6134e3bfcab1f66f5/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_openbsd.rs?ref=2190f6c3c28595275b73e2b6134e3bfcab1f66f5", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::openbsd_base::opts();\n+    base.cpu = \"pentium4\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.pre_link_args.push(\"-m32\".to_string());\n+\n+    Ok(Target {\n+        llvm_target: \"i686-unknown-openbsd\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        arch: \"x86\".to_string(),\n+        target_os: \"openbsd\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    })\n+}"}, {"sha": "351d469ea2809c5914b837194fb3665344ad9301", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2190f6c3c28595275b73e2b6134e3bfcab1f66f5/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2190f6c3c28595275b73e2b6134e3bfcab1f66f5/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=2190f6c3c28595275b73e2b6134e3bfcab1f66f5", "patch": "@@ -168,7 +168,10 @@ supported_targets! {\n     (\"x86_64-unknown-dragonfly\", x86_64_unknown_dragonfly),\n \n     (\"x86_64-unknown-bitrig\", x86_64_unknown_bitrig),\n+\n+    (\"i686-unknown-openbsd\", i686_unknown_openbsd),\n     (\"x86_64-unknown-openbsd\", x86_64_unknown_openbsd),\n+\n     (\"x86_64-unknown-netbsd\", x86_64_unknown_netbsd),\n     (\"x86_64-rumprun-netbsd\", x86_64_rumprun_netbsd),\n \n@@ -299,6 +302,9 @@ pub struct TargetOptions {\n     pub staticlib_suffix: String,\n     /// OS family to use for conditional compilation. Valid options: \"unix\", \"windows\".\n     pub target_family: Option<String>,\n+    /// Whether the target toolchain is like OpenBSD's.\n+    /// Only useful for compiling against OpenBSD, for configuring abi when returning a struct.\n+    pub is_like_openbsd: bool,\n     /// Whether the target toolchain is like OSX's. Only useful for compiling against iOS/OS X, in\n     /// particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n     pub is_like_osx: bool,\n@@ -403,6 +409,7 @@ impl Default for TargetOptions {\n             staticlib_prefix: \"lib\".to_string(),\n             staticlib_suffix: \".a\".to_string(),\n             target_family: None,\n+            is_like_openbsd: false,\n             is_like_osx: false,\n             is_like_solaris: false,\n             is_like_windows: false,\n@@ -569,6 +576,7 @@ impl Target {\n         key!(staticlib_prefix);\n         key!(staticlib_suffix);\n         key!(target_family, optional);\n+        key!(is_like_openbsd, bool);\n         key!(is_like_osx, bool);\n         key!(is_like_solaris, bool);\n         key!(is_like_windows, bool);\n@@ -730,6 +738,7 @@ impl ToJson for Target {\n         target_option_val!(staticlib_prefix);\n         target_option_val!(staticlib_suffix);\n         target_option_val!(target_family);\n+        target_option_val!(is_like_openbsd);\n         target_option_val!(is_like_osx);\n         target_option_val!(is_like_solaris);\n         target_option_val!(is_like_windows);"}, {"sha": "1f74170e399893da9efba1030b1f731a000cb2fc", "filename": "src/librustc_back/target/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2190f6c3c28595275b73e2b6134e3bfcab1f66f5/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2190f6c3c28595275b73e2b6134e3bfcab1f66f5/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs?ref=2190f6c3c28595275b73e2b6134e3bfcab1f66f5", "patch": "@@ -17,6 +17,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         linker_is_gnu: true,\n         has_rpath: true,\n+        is_like_openbsd: true,\n         pre_link_args: vec![\n             // GNU-style linkers will use this to omit linking to libraries\n             // which don't actually fulfill any relocations, but only for"}, {"sha": "ce85234f2034af36cb720a14a387df6065a75544", "filename": "src/librustc_trans/cabi_x86.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2190f6c3c28595275b73e2b6134e3bfcab1f66f5/src%2Flibrustc_trans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2190f6c3c28595275b73e2b6134e3bfcab1f66f5/src%2Flibrustc_trans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86.rs?ref=2190f6c3c28595275b73e2b6134e3bfcab1f66f5", "patch": "@@ -25,7 +25,8 @@ pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n             // http://www.angelcode.com/dev/callconv/callconv.html\n             // Clang's ABI handling is in lib/CodeGen/TargetInfo.cpp\n             let t = &ccx.sess().target.target;\n-            if t.options.is_like_osx || t.options.is_like_windows {\n+            if t.options.is_like_osx || t.options.is_like_windows\n+                || t.options.is_like_openbsd {\n                 match llsize_of_alloc(ccx, fty.ret.ty) {\n                     1 => fty.ret.cast = Some(Type::i8(ccx)),\n                     2 => fty.ret.cast = Some(Type::i16(ccx)),"}]}