{"sha": "016f7f49c24593e455c056f5cc8d047bd924a82b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNmY3ZjQ5YzI0NTkzZTQ1NWMwNTZmNWNjOGQwNDdiZDkyNGE4MmI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-05T09:22:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-05T09:22:05Z"}, "message": "Rollup merge of #47033 - EdSchouten:cloudabi-oom, r=kennytm\n\nDisable printing of error message on file descriptor 2 on CloudABI.\n\nAs CloudABI is a capability-based runtime environment, file descriptors\nare the mechanism that grants rights to a process. These file\ndescriptors may be passed into processes on startup using a utility\ncalled cloudabi-run. Unlike the POSIX shell, cloudabi-run does not\nfollow the UNIX model where file descriptors 0, 1 and 2 represent stdin,\nstdout and stderr. There can be arbitrary many (or few) file descriptors\nthat can be provided. For this reason, CloudABI's C library also doesn't\ndefine STD*_FILENO. liblibc should also not declare these.\n\nDisable the code in liballoc_system that tries to print error messages\nover file descriptor 2. For now, let's keep this function quiet. We'll\nsee if we can think of some other way to log this in the future.", "tree": {"sha": "aff5f5584607d71a30bcbf8b6e35b79c9768f49d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aff5f5584607d71a30bcbf8b6e35b79c9768f49d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/016f7f49c24593e455c056f5cc8d047bd924a82b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/016f7f49c24593e455c056f5cc8d047bd924a82b", "html_url": "https://github.com/rust-lang/rust/commit/016f7f49c24593e455c056f5cc8d047bd924a82b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/016f7f49c24593e455c056f5cc8d047bd924a82b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c8e0c86b1808375e4da488225abb5185644f1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c8e0c86b1808375e4da488225abb5185644f1f", "html_url": "https://github.com/rust-lang/rust/commit/63c8e0c86b1808375e4da488225abb5185644f1f"}, {"sha": "c661e385fd81afef808f414867cc44a6c897195e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c661e385fd81afef808f414867cc44a6c897195e", "html_url": "https://github.com/rust-lang/rust/commit/c661e385fd81afef808f414867cc44a6c897195e"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "1d5e7b73be557c17403377e9bbda5a35d47cdf01", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/016f7f49c24593e455c056f5cc8d047bd924a82b/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016f7f49c24593e455c056f5cc8d047bd924a82b/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=016f7f49c24593e455c056f5cc8d047bd924a82b", "patch": "@@ -21,7 +21,7 @@\n #![feature(core_intrinsics)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n-#![cfg_attr(any(unix, target_os = \"redox\"), feature(libc))]\n+#![cfg_attr(any(unix, target_os = \"cloudabi\", target_os = \"redox\"), feature(libc))]\n #![rustc_alloc_kind = \"lib\"]\n \n // The minimum alignment guaranteed by the architecture. This value is used to\n@@ -116,7 +116,7 @@ unsafe impl Alloc for System {\n     }\n }\n \n-#[cfg(any(unix, target_os = \"redox\"))]\n+#[cfg(any(unix, target_os = \"cloudabi\", target_os = \"redox\"))]\n mod platform {\n     extern crate libc;\n \n@@ -213,6 +213,16 @@ mod platform {\n             struct Stderr;\n \n             impl Write for Stderr {\n+                #[cfg(target_os = \"cloudabi\")]\n+                fn write_str(&mut self, _: &str) -> fmt::Result {\n+                    // CloudABI does not have any reserved file descriptor\n+                    // numbers. We should not attempt to write to file\n+                    // descriptor #2, as it may be associated with any kind of\n+                    // resource.\n+                    Ok(())\n+                }\n+\n+                #[cfg(not(target_os = \"cloudabi\"))]\n                 fn write_str(&mut self, s: &str) -> fmt::Result {\n                     unsafe {\n                         libc::write(libc::STDERR_FILENO,"}]}