{"sha": "d16cca1f50d97e78334cba96bba0e6e0235cae7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNmNjYTFmNTBkOTdlNzgzMzRjYmE5NmJiYTBlNmUwMjM1Y2FlN2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T01:08:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:23Z"}, "message": "librustc: De-`@mut` `const_values`.", "tree": {"sha": "bfddd307a940ad5c91240d5a952d96264398cb24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfddd307a940ad5c91240d5a952d96264398cb24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d16cca1f50d97e78334cba96bba0e6e0235cae7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d16cca1f50d97e78334cba96bba0e6e0235cae7d", "html_url": "https://github.com/rust-lang/rust/commit/d16cca1f50d97e78334cba96bba0e6e0235cae7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d16cca1f50d97e78334cba96bba0e6e0235cae7d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095", "url": "https://api.github.com/repos/rust-lang/rust/commits/28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095", "html_url": "https://github.com/rust-lang/rust/commit/28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "d7579d2badb3b0fec4701287e43e138aa09b085d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d16cca1f50d97e78334cba96bba0e6e0235cae7d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16cca1f50d97e78334cba96bba0e6e0235cae7d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d16cca1f50d97e78334cba96bba0e6e0235cae7d", "patch": "@@ -2233,7 +2233,9 @@ pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n                                       \"cannot have static_assert on a mutable \\\n                                        static\");\n               }\n-              let v = ccx.const_values.get_copy(&item.id);\n+\n+              let const_values = ccx.const_values.borrow();\n+              let v = const_values.get().get_copy(&item.id);\n               unsafe {\n                   if !(llvm::LLVMConstIntGetZExtValue(v) != 0) {\n                       ccx.sess.span_fatal(expr.span, \"static assertion failed\");\n@@ -2489,7 +2491,11 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                             // We need the translated value here, because for enums the\n                             // LLVM type is not fully determined by the Rust type.\n                             let (v, inlineable) = consts::const_expr(ccx, expr);\n-                            ccx.const_values.insert(id, v);\n+                            {\n+                                let mut const_values = ccx.const_values\n+                                                          .borrow_mut();\n+                                const_values.get().insert(id, v);\n+                            }\n                             let mut inlineable = inlineable;\n \n                             unsafe {"}, {"sha": "d6bbcec0daa5af93f4bb712d3b43251a886023e9", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d16cca1f50d97e78334cba96bba0e6e0235cae7d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16cca1f50d97e78334cba96bba0e6e0235cae7d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=d16cca1f50d97e78334cba96bba0e6e0235cae7d", "patch": "@@ -157,7 +157,10 @@ fn const_deref(cx: &mut CrateContext, v: ValueRef, t: ty::t, explicit: bool)\n \n pub fn get_const_val(cx: @mut CrateContext,\n                      mut def_id: ast::DefId) -> (ValueRef, bool) {\n-    let contains_key = cx.const_values.contains_key(&def_id.node);\n+    let contains_key = {\n+        let const_values = cx.const_values.borrow();\n+        const_values.get().contains_key(&def_id.node)\n+    };\n     if !ast_util::is_local(def_id) || !contains_key {\n         if !ast_util::is_local(def_id) {\n             def_id = inline::maybe_instantiate_inline(cx, def_id);\n@@ -171,7 +174,9 @@ pub fn get_const_val(cx: @mut CrateContext,\n             _ => cx.tcx.sess.bug(\"expected a const to be an item\")\n         }\n     }\n-    (cx.const_values.get_copy(&def_id.node),\n+\n+    let const_values = cx.const_values.borrow();\n+    (const_values.get().get_copy(&def_id.node),\n      !cx.non_inlineable_statics.contains(&def_id.node))\n }\n \n@@ -642,7 +647,8 @@ pub fn trans_const(ccx: @mut CrateContext, m: ast::Mutability, id: ast::NodeId)\n         let g = base::get_item_val(ccx, id);\n         // At this point, get_item_val has already translated the\n         // constant's initializer to determine its LLVM type.\n-        let v = ccx.const_values.get_copy(&id);\n+        let const_values = ccx.const_values.borrow();\n+        let v = const_values.get().get_copy(&id);\n         llvm::LLVMSetInitializer(g, v);\n         if m != ast::MutMutable {\n             llvm::LLVMSetGlobalConstant(g, True);"}, {"sha": "0eff8ca1712f714c4e50f924d1538ffd0b343b00", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d16cca1f50d97e78334cba96bba0e6e0235cae7d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16cca1f50d97e78334cba96bba0e6e0235cae7d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=d16cca1f50d97e78334cba96bba0e6e0235cae7d", "patch": "@@ -84,7 +84,7 @@ pub struct CrateContext {\n      const_globals: RefCell<HashMap<int, ValueRef>>,\n \n      // Cache of emitted const values\n-     const_values: HashMap<ast::NodeId, ValueRef>,\n+     const_values: RefCell<HashMap<ast::NodeId, ValueRef>>,\n \n      // Cache of external const values\n      extern_const_values: HashMap<ast::DefId, ValueRef>,\n@@ -199,7 +199,7 @@ impl CrateContext {\n                   vtables: RefCell::new(HashMap::new()),\n                   const_cstr_cache: RefCell::new(HashMap::new()),\n                   const_globals: RefCell::new(HashMap::new()),\n-                  const_values: HashMap::new(),\n+                  const_values: RefCell::new(HashMap::new()),\n                   extern_const_values: HashMap::new(),\n                   impl_method_cache: HashMap::new(),\n                   module_data: HashMap::new(),"}]}