{"sha": "2a83574c6af52419af9f723bcc9a9427942a6be8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhODM1NzRjNmFmNTI0MTlhZjlmNzIzYmNjOWE5NDI3OTQyYTZiZTg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-28T03:16:03Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-05T04:53:23Z"}, "message": "Refactor out `expand_item` (with better semantics than before).", "tree": {"sha": "95e7eeaf366511c3af76eee352a549e9740f1798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95e7eeaf366511c3af76eee352a549e9740f1798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a83574c6af52419af9f723bcc9a9427942a6be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a83574c6af52419af9f723bcc9a9427942a6be8", "html_url": "https://github.com/rust-lang/rust/commit/2a83574c6af52419af9f723bcc9a9427942a6be8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a83574c6af52419af9f723bcc9a9427942a6be8/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8be8cf854017e3b41324158868e9097fa6cdcc4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8be8cf854017e3b41324158868e9097fa6cdcc4d", "html_url": "https://github.com/rust-lang/rust/commit/8be8cf854017e3b41324158868e9097fa6cdcc4d"}], "stats": {"total": 75, "additions": 39, "deletions": 36}, "files": [{"sha": "1b9af0aa467769d1591f794a194c98b1c3a7268a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 39, "deletions": 36, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2a83574c6af52419af9f723bcc9a9427942a6be8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a83574c6af52419af9f723bcc9a9427942a6be8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=2a83574c6af52419af9f723bcc9a9427942a6be8", "patch": "@@ -409,42 +409,7 @@ fn expand_pat(p: P<ast::Pat>, fld: &mut MacroExpander) -> P<ast::Pat> {\n \n fn expand_multi_modified(a: Annotatable, fld: &mut MacroExpander) -> Expansion {\n     match a {\n-        Annotatable::Item(it) => match it.node {\n-            ast::ItemKind::Mac(..) => {\n-                if match it.node {\n-                    ItemKind::Mac(ref mac) => mac.node.path.segments.is_empty(),\n-                    _ => unreachable!(),\n-                } {\n-                    return Expansion::Items(SmallVector::one(it));\n-                }\n-                it.and_then(|it| match it.node {\n-                    ItemKind::Mac(mac) => {\n-                        let invoc =\n-                            fld.new_invoc(ExpansionKind::Items, InvocationKind::Bang {\n-                                mac: mac, attrs: it.attrs, ident: Some(it.ident), span: it.span,\n-                            });\n-                        expand_invoc(invoc, fld)\n-                    }\n-                    _ => unreachable!(),\n-                })\n-            }\n-            ast::ItemKind::Mod(_) | ast::ItemKind::ForeignMod(_) => {\n-                let valid_ident =\n-                    it.ident.name != keywords::Invalid.name();\n-\n-                if valid_ident {\n-                    fld.cx.mod_push(it.ident);\n-                }\n-                let macro_use = contains_macro_use(fld, &it.attrs);\n-                let result = fld.with_exts_frame(macro_use, |fld| noop_fold_item(it, fld));\n-                if valid_ident {\n-                    fld.cx.mod_pop();\n-                }\n-                Expansion::Items(result)\n-            },\n-            _ => Expansion::Items(noop_fold_item(it, fld)),\n-        },\n-\n+        Annotatable::Item(it) => Expansion::Items(expand_item(it, fld)),\n         Annotatable::TraitItem(it) => Expansion::TraitItems(expand_trait_item(it.unwrap(), fld)),\n         Annotatable::ImplItem(ii) => Expansion::ImplItems(expand_impl_item(ii.unwrap(), fld)),\n     }\n@@ -480,6 +445,44 @@ fn expand_annotatable(mut item: Annotatable, fld: &mut MacroExpander) -> Expansi\n     }\n }\n \n+fn expand_item(item: P<ast::Item>, fld: &mut MacroExpander) -> SmallVector<P<ast::Item>> {\n+    match item.node {\n+        ast::ItemKind::Mac(..) => {\n+            if match item.node {\n+                ItemKind::Mac(ref mac) => mac.node.path.segments.is_empty(),\n+                _ => unreachable!(),\n+            } {\n+                return SmallVector::one(item);\n+            }\n+            item.and_then(|item| match item.node {\n+                ItemKind::Mac(mac) => {\n+                    let invoc =\n+                        fld.new_invoc(ExpansionKind::Items, InvocationKind::Bang {\n+                            mac: mac, attrs: item.attrs, ident: Some(item.ident), span: item.span,\n+                        });\n+                    expand_invoc(invoc, fld).make_items()\n+                }\n+                _ => unreachable!(),\n+            })\n+        }\n+        ast::ItemKind::Mod(_) | ast::ItemKind::ForeignMod(_) => {\n+            let valid_ident =\n+                item.ident.name != keywords::Invalid.name();\n+\n+            if valid_ident {\n+                fld.cx.mod_push(item.ident);\n+            }\n+            let macro_use = contains_macro_use(fld, &item.attrs);\n+            let result = fld.with_exts_frame(macro_use, |fld| noop_fold_item(item, fld));\n+            if valid_ident {\n+                fld.cx.mod_pop();\n+            }\n+            result\n+        },\n+        _ => noop_fold_item(item, fld),\n+    }\n+}\n+\n fn expand_impl_item(ii: ast::ImplItem, fld: &mut MacroExpander)\n                  -> SmallVector<ast::ImplItem> {\n     match ii.node {"}]}