{"sha": "4df6cbe96fe3e356aff89155f58a497d48bc78ee", "node_id": "C_kwDOAAsO6NoAKDRkZjZjYmU5NmZlM2UzNTZhZmY4OTE1NWY1OGE0OTdkNDhiYzc4ZWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-03T06:42:19Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-03T06:51:26Z"}, "message": "Consider privacy more carefully when suggesting accessing fields", "tree": {"sha": "d1f0294014cb75cb19b560cb062833db9b7b37e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1f0294014cb75cb19b560cb062833db9b7b37e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4df6cbe96fe3e356aff89155f58a497d48bc78ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4df6cbe96fe3e356aff89155f58a497d48bc78ee", "html_url": "https://github.com/rust-lang/rust/commit/4df6cbe96fe3e356aff89155f58a497d48bc78ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4df6cbe96fe3e356aff89155f58a497d48bc78ee/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cf570995cded5e224d5dba8296a85fdbe1c6918", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf570995cded5e224d5dba8296a85fdbe1c6918", "html_url": "https://github.com/rust-lang/rust/commit/9cf570995cded5e224d5dba8296a85fdbe1c6918"}], "stats": {"total": 120, "additions": 40, "deletions": 80}, "files": [{"sha": "523a10cc36a9e4286d267e6785230fa63c90688c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4df6cbe96fe3e356aff89155f58a497d48bc78ee/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df6cbe96fe3e356aff89155f58a497d48bc78ee/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=4df6cbe96fe3e356aff89155f58a497d48bc78ee", "patch": "@@ -2535,15 +2535,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n \n         // try to add a suggestion in case the field is a nested field of a field of the Adt\n-        if let Some((fields, substs)) = self.get_field_candidates(span, expr_t) {\n-            for candidate_field in fields.iter() {\n+        let mod_id = self.tcx.parent_module(id).to_def_id();\n+        if let Some((fields, substs)) =\n+            self.get_field_candidates_considering_privacy(span, expr_t, mod_id)\n+        {\n+            for candidate_field in fields {\n                 if let Some(mut field_path) = self.check_for_nested_field_satisfying(\n                     span,\n                     &|candidate_field, _| candidate_field.ident(self.tcx()) == field,\n                     candidate_field,\n                     substs,\n                     vec![],\n-                    self.tcx.parent_module(id).to_def_id(),\n+                    mod_id,\n                 ) {\n                     // field_path includes `field` that we're looking for, so pop it.\n                     field_path.pop();\n@@ -2567,22 +2570,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn get_field_candidates(\n+    pub(crate) fn get_field_candidates_considering_privacy(\n         &self,\n         span: Span,\n-        base_t: Ty<'tcx>,\n-    ) -> Option<(&[ty::FieldDef], SubstsRef<'tcx>)> {\n-        debug!(\"get_field_candidates(span: {:?}, base_t: {:?}\", span, base_t);\n+        base_ty: Ty<'tcx>,\n+        mod_id: DefId,\n+    ) -> Option<(impl Iterator<Item = &'tcx ty::FieldDef> + 'tcx, SubstsRef<'tcx>)> {\n+        debug!(\"get_field_candidates(span: {:?}, base_t: {:?}\", span, base_ty);\n \n-        for (base_t, _) in self.autoderef(span, base_t) {\n+        for (base_t, _) in self.autoderef(span, base_ty) {\n             match base_t.kind() {\n                 ty::Adt(base_def, substs) if !base_def.is_enum() => {\n-                    let fields = &base_def.non_enum_variant().fields;\n-                    // For compile-time reasons put a limit on number of fields we search\n-                    if fields.len() > 100 {\n-                        return None;\n-                    }\n-                    return Some((fields, substs));\n+                    let tcx = self.tcx;\n+                    return Some((\n+                        base_def\n+                            .non_enum_variant()\n+                            .fields\n+                            .iter()\n+                            .filter(move |field| field.vis.is_accessible_from(mod_id, tcx))\n+                            // For compile-time reasons put a limit on number of fields we search\n+                            .take(100),\n+                        substs,\n+                    ));\n                 }\n                 _ => {}\n             }\n@@ -2599,7 +2608,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         candidate_field: &ty::FieldDef,\n         subst: SubstsRef<'tcx>,\n         mut field_path: Vec<Ident>,\n-        id: DefId,\n+        mod_id: DefId,\n     ) -> Option<Vec<Ident>> {\n         debug!(\n             \"check_for_nested_field_satisfying(span: {:?}, candidate_field: {:?}, field_path: {:?}\",\n@@ -2615,20 +2624,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let field_ty = candidate_field.ty(self.tcx, subst);\n             if matches(candidate_field, field_ty) {\n                 return Some(field_path);\n-            } else if let Some((nested_fields, subst)) = self.get_field_candidates(span, field_ty) {\n+            } else if let Some((nested_fields, subst)) =\n+                self.get_field_candidates_considering_privacy(span, field_ty, mod_id)\n+            {\n                 // recursively search fields of `candidate_field` if it's a ty::Adt\n                 for field in nested_fields {\n-                    if field.vis.is_accessible_from(id, self.tcx) {\n-                        if let Some(field_path) = self.check_for_nested_field_satisfying(\n-                            span,\n-                            matches,\n-                            field,\n-                            subst,\n-                            field_path.clone(),\n-                            id,\n-                        ) {\n-                            return Some(field_path);\n-                        }\n+                    if let Some(field_path) = self.check_for_nested_field_satisfying(\n+                        span,\n+                        matches,\n+                        field,\n+                        subst,\n+                        field_path.clone(),\n+                        mod_id,\n+                    ) {\n+                        return Some(field_path);\n                     }\n                 }\n             }"}, {"sha": "ee6fe8699e129ba6dbea47610bc2279315407c3c", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4df6cbe96fe3e356aff89155f58a497d48bc78ee/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df6cbe96fe3e356aff89155f58a497d48bc78ee/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4df6cbe96fe3e356aff89155f58a497d48bc78ee", "patch": "@@ -1334,10 +1334,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         item_name: Ident,\n     ) {\n         if let SelfSource::MethodCall(expr) = source\n-            && let Some((fields, substs)) = self.get_field_candidates(span, actual)\n+            && let mod_id = self.tcx.parent_module(expr.hir_id).to_def_id()\n+            && let Some((fields, substs)) = self.get_field_candidates_considering_privacy(span, actual, mod_id)\n         {\n             let call_expr = self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(expr.hir_id));\n-            for candidate_field in fields.iter() {\n+            for candidate_field in fields {\n                 if let Some(field_path) = self.check_for_nested_field_satisfying(\n                     span,\n                     &|_, field_ty| {\n@@ -1353,7 +1354,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     candidate_field,\n                     substs,\n                     vec![],\n-                    self.tcx.parent_module(expr.hir_id).to_def_id(),\n+                    mod_id,\n                 ) {\n                     let field_path_str = field_path\n                         .iter()"}, {"sha": "68337a715e14ff639343f5ad28a5ebbce7da5cd3", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=4df6cbe96fe3e356aff89155f58a497d48bc78ee", "patch": "@@ -33,10 +33,6 @@ LL | pub struct TakeWhile<I, P> {\n            which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n            `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n            which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |         .it.collect();\n-   |          +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "afceae82e68becc5fadc63a6796f2c960dd26015", "filename": "src/test/ui/issues/issue-39175.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr?ref=4df6cbe96fe3e356aff89155f58a497d48bc78ee", "patch": "@@ -5,10 +5,6 @@ LL |     Command::new(\"echo\").arg(\"hello\").exec();\n    |                                       ^^^^ method not found in `&mut Command`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |     Command::new(\"echo\").arg(\"hello\").inner.exec();\n-   |                                       ++++++\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use std::os::unix::process::CommandExt;"}, {"sha": "b11ea97d160be12b8866bf99577bc1f06ca2efec", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=4df6cbe96fe3e356aff89155f58a497d48bc78ee", "patch": "@@ -35,10 +35,6 @@ LL | pub struct Filter<I, P> {\n            which is required by `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>: Iterator`\n            `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>: Iterator`\n            which is required by `&mut Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>: Iterator`\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).iter.count();\n-   |                                                       +++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bac8de7987256058de5b5f0312b41cdffd326ee6", "filename": "src/test/ui/suggestions/import-trait-for-method-call.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr?ref=4df6cbe96fe3e356aff89155f58a497d48bc78ee", "patch": "@@ -10,10 +10,6 @@ LL |     fn finish(&self) -> u64;\n    |        ------ the method is available for `DefaultHasher` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |     h.0.finish()\n-   |       ++\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use std::hash::Hasher;"}, {"sha": "d121932c842e35324a8a8f1060e4713f8dd8ab0c", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=4df6cbe96fe3e356aff89155f58a497d48bc78ee", "patch": "@@ -41,16 +41,6 @@ LL | pub struct BufWriter<W: Write> {\n            `&dyn std::io::Write: std::io::Write`\n            which is required by `BufWriter<&dyn std::io::Write>: std::io::Write`\n    = note: this error originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: one of the expressions' fields has a method of the same name\n-  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-   |\n-LL |         $dst.inner.write_fmt($crate::format_args_nl!($($arg)*))\n-   |              ++++++\n-help: one of the expressions' fields has a method of the same name\n-  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-   |\n-LL |         $dst.buf.write_fmt($crate::format_args_nl!($($arg)*))\n-   |              ++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "99bcfb08a08924c37a61e5da1d665de968fa855b", "filename": "src/test/ui/suggestions/suggest-using-chars.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-using-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-using-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-using-chars.stderr?ref=4df6cbe96fe3e356aff89155f58a497d48bc78ee", "patch": "@@ -25,10 +25,6 @@ help: because of the in-memory representation of `&str`, to obtain an `Iterator`\n    |\n LL |     let _ = String::from(\"bar\").chars();\n    |                                 ~~~~~\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |     let _ = String::from(\"bar\").vec.iter();\n-   |                                 ++++\n \n error[E0599]: no method named `iter` found for reference `&String` in the current scope\n   --> $DIR/suggest-using-chars.rs:5:36\n@@ -40,10 +36,6 @@ help: because of the in-memory representation of `&str`, to obtain an `Iterator`\n    |\n LL |     let _ = (&String::from(\"bar\")).chars();\n    |                                    ~~~~~\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |     let _ = (&String::from(\"bar\")).vec.iter();\n-   |                                    ++++\n \n error[E0599]: no method named `iter` found for type `{integer}` in the current scope\n   --> $DIR/suggest-using-chars.rs:6:15"}, {"sha": "98a9bd07ed21d0ca5d3bfee529a37cd3c42d9635", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=4df6cbe96fe3e356aff89155f58a497d48bc78ee", "patch": "@@ -23,14 +23,6 @@ LL | | >(Unique<T>, A);\n            which is required by `Box<dyn Foo>: Clone`\n            `dyn Foo: Clone`\n            which is required by `Box<dyn Foo>: Clone`\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |     let _z = y.0.clone();\n-   |                ++\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |     let _z = y.1.clone();\n-   |                ++\n \n error: aborting due to previous error\n "}, {"sha": "7af9c684b72e3b7e3e809085e1b3f53e015a4b5e", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4df6cbe96fe3e356aff89155f58a497d48bc78ee/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=4df6cbe96fe3e356aff89155f58a497d48bc78ee", "patch": "@@ -25,14 +25,6 @@ help: consider annotating `R` with `#[derive(Clone)]`\n    |\n LL | #[derive(Clone)]\n    |\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |     let _j = i.0.clone();\n-   |                ++\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |     let _j = i.1.clone();\n-   |                ++\n \n error: aborting due to previous error\n "}]}