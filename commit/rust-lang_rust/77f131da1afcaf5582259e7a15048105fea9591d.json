{"sha": "77f131da1afcaf5582259e7a15048105fea9591d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZjEzMWRhMWFmY2FmNTU4MjI1OWU3YTE1MDQ4MTA1ZmVhOTU5MWQ=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-02-23T23:32:21Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-02-23T23:32:21Z"}, "message": "Review changes\n\n\t* use more convenient mk_substs function\n\t* remove type annotations\n\t* use map_bound one level farther outside\n\t* style improvements", "tree": {"sha": "a1da5458809e5f082553561d3e99ffb16cfd3e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1da5458809e5f082553561d3e99ffb16cfd3e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77f131da1afcaf5582259e7a15048105fea9591d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77f131da1afcaf5582259e7a15048105fea9591d", "html_url": "https://github.com/rust-lang/rust/commit/77f131da1afcaf5582259e7a15048105fea9591d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77f131da1afcaf5582259e7a15048105fea9591d/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21c38988f49629d1a055734e46ee739bafe6540d", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c38988f49629d1a055734e46ee739bafe6540d", "html_url": "https://github.com/rust-lang/rust/commit/21c38988f49629d1a055734e46ee739bafe6540d"}], "stats": {"total": 69, "additions": 26, "deletions": 43}, "files": [{"sha": "e6cae2f9f3296dba5297a733f11012105762a627", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77f131da1afcaf5582259e7a15048105fea9591d/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f131da1afcaf5582259e7a15048105fea9591d/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=77f131da1afcaf5582259e7a15048105fea9591d", "patch": "@@ -20,7 +20,7 @@ use rustc::mir;\n use rustc::mir::tcx::LvalueTy;\n use rustc::ty::{self, layout, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::cast::{CastTy, IntTy};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{Kind, Substs};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use {abi, adt, base, Disr, machine};\n use callee::Callee;\n@@ -589,16 +589,8 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                     .unwrap().def_id;\n                                 // Now create its substs [Closure, Tuple]\n                                 let input = tcx.closure_type(def_id, substs).sig.input(0);\n-                                let substs = Substs::for_item(tcx,\n-                                    call_once,\n-                                    |_, _| {bug!()},\n-                                    |def, _| { match def.index {\n-                                                0 => operand.ty.clone(),\n-                                                1 => input.skip_binder(),\n-                                                _ => bug!(),\n-                                            } }\n-                                );\n-\n+                                let substs = tcx.mk_substs([operand.ty, input.skip_binder()]\n+                                    .iter().cloned().map(Kind::from));\n                                 Callee::def(self.ccx, call_once, substs)\n                                     .reify(self.ccx)\n                             }"}, {"sha": "6f6d81a25350fe229c20c891c3c4ad4f6b319d49", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77f131da1afcaf5582259e7a15048105fea9591d/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f131da1afcaf5582259e7a15048105fea9591d/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=77f131da1afcaf5582259e7a15048105fea9591d", "patch": "@@ -12,7 +12,7 @@ use llvm::{self, ValueRef};\n use rustc::ty::{self, Ty};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::layout::Layout;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::Kind;\n use rustc::mir::tcx::LvalueTy;\n use rustc::mir;\n use middle::lang_items::ExchangeMallocFnLangItem;\n@@ -202,16 +202,8 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                                     .unwrap().def_id;\n                                 // Now create its substs [Closure, Tuple]\n                                 let input = bcx.tcx().closure_type(def_id, substs).sig.input(0);\n-                                let substs = Substs::for_item(bcx.tcx(),\n-                                    call_once,\n-                                    |_, _| {bug!()},\n-                                    |def, _| { match def.index {\n-                                                0 => operand.ty.clone(),\n-                                                1 => input.skip_binder(),\n-                                                _ => bug!(),\n-                                          } }\n-                                );\n-\n+                                let substs = bcx.tcx().mk_substs([operand.ty, input.skip_binder()]\n+                                    .iter().cloned().map(Kind::from));\n                                 OperandValue::Immediate(\n                                     Callee::def(bcx.ccx, call_once, substs)\n                                         .reify(bcx.ccx))"}, {"sha": "424e3143929f4d8d2265f05d22a0908c5dc53dc3", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77f131da1afcaf5582259e7a15048105fea9591d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f131da1afcaf5582259e7a15048105fea9591d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=77f131da1afcaf5582259e7a15048105fea9591d", "patch": "@@ -67,12 +67,11 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferOk, TypeTrace};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n-use rustc::ty::{self, LvaluePreference, TypeVariants, TypeAndMut,\n+use rustc::ty::{self, LvaluePreference, TypeAndMut,\n                 Ty, ClosureSubsts};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n use rustc::ty::relate::RelateResult;\n-use syntax::ast::NodeId;\n use syntax::abi;\n use syntax::feature_gate;\n use util::common::indent;\n@@ -573,7 +572,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n         let b = self.shallow_resolve(b);\n \n-        let node_id_a :NodeId = self.tcx.hir.as_local_node_id(def_id_a).unwrap();\n+        let node_id_a = self.tcx.hir.as_local_node_id(def_id_a).unwrap();\n         match b.sty {\n             ty::TyFnPtr(_) if self.tcx.with_freevars(node_id_a, |v| v.is_empty()) => {\n                 if !self.tcx.sess.features.borrow().closure_to_fn_coercion {\n@@ -589,16 +588,16 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 // to\n                 //     `fn(arg0,arg1,...) -> _`\n                 let sig = self.closure_type(def_id_a, substs_a).sig;\n-                let converted_sig = sig.input(0).map_bound(|v| {\n-                    let params_iter = match v.sty {\n-                        TypeVariants::TyTuple(params, _) => {\n+                let converted_sig = sig.map_bound(|s| {\n+                    let params_iter = match s.inputs()[0].sty {\n+                        ty::TyTuple(params, _) => {\n                             params.into_iter().cloned()\n                         }\n                         _ => bug!(),\n                     };\n                     self.tcx.mk_fn_sig(params_iter,\n-                                       sig.output().skip_binder(),\n-                                       sig.variadic())\n+                                       s.output(),\n+                                       s.variadic)\n                 });\n                 let fn_ty = self.tcx.mk_bare_fn(ty::BareFnTy {\n                     unsafety: hir::Unsafety::Normal,"}, {"sha": "fe179e8a48f16e897879b57554d450e4740025bd", "filename": "src/test/compile-fail/closure-no-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f131da1afcaf5582259e7a15048105fea9591d/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f131da1afcaf5582259e7a15048105fea9591d/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn.rs?ref=77f131da1afcaf5582259e7a15048105fea9591d", "patch": "@@ -13,12 +13,12 @@\n \n fn main() {\n     let mut a = 0u8;\n-    let foo :fn(u8) -> u8 = |v: u8| { a += v; a };\n+    let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n     //~^ ERROR mismatched types\n     let b = 0u8;\n-    let bar :fn() -> u8 = || { b };\n+    let bar: fn() -> u8 = || { b };\n     //~^ ERROR mismatched types\n-    let baz :fn() -> u8 = || { b } as fn() -> u8;\n+    let baz: fn() -> u8 = || { b } as fn() -> u8;\n     //~^ ERROR mismatched types\n     //~^^ ERROR non-scalar cast\n }"}, {"sha": "d074a35628ea876994255253b5639923308f3175", "filename": "src/test/compile-fail/feature-gate-closure_to_fn_coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f131da1afcaf5582259e7a15048105fea9591d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-closure_to_fn_coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f131da1afcaf5582259e7a15048105fea9591d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-closure_to_fn_coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-closure_to_fn_coercion.rs?ref=77f131da1afcaf5582259e7a15048105fea9591d", "patch": "@@ -13,7 +13,7 @@\n \n #[cfg(a)]\n mod a {\n-    const FOO :fn(u8) -> u8 = |v: u8| { v };\n+    const FOO: fn(u8) -> u8 = |v: u8| { v };\n     //[a]~^ ERROR non-capturing closure to fn coercion is experimental\n     //[a]~^^ ERROR mismatched types\n \n@@ -34,7 +34,7 @@ mod b {\n     fn foo() {\n         // Items\n         assert_eq!(func_specific()(), 42);\n-        let foo :fn(u8) -> u8 = |v: u8| { v };\n+        let foo: fn(u8) -> u8 = |v: u8| { v };\n         //[b]~^ ERROR non-capturing closure to fn coercion is experimental\n         //[b]~^^ ERROR mismatched types\n     }"}, {"sha": "13d1d6aa13900cf63193f7ba824c9dfa484c99f2", "filename": "src/test/run-pass/closure-to-fn-coercion.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77f131da1afcaf5582259e7a15048105fea9591d/src%2Ftest%2Frun-pass%2Fclosure-to-fn-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f131da1afcaf5582259e7a15048105fea9591d/src%2Ftest%2Frun-pass%2Fclosure-to-fn-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-to-fn-coercion.rs?ref=77f131da1afcaf5582259e7a15048105fea9591d", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(closure_to_fn_coercion)]\n \n-const FOO :fn(u8) -> u8 = |v: u8| { v };\n+const FOO: fn(u8) -> u8 = |v: u8| { v };\n \n const BAR: [fn(&mut u32); 5] = [\n     |_: &mut u32| {},\n@@ -28,14 +28,14 @@ fn func_specific() -> (fn() -> u32) {\n fn main() {\n     // Items\n     assert_eq!(func_specific()(), 42);\n-    let foo :fn(u8) -> u8 = |v: u8| { v };\n+    let foo: fn(u8) -> u8 = |v: u8| { v };\n     assert_eq!(foo(31), 31);\n     // Constants\n     assert_eq!(FOO(31), 31);\n-    let mut a :u32 = 0;\n-    assert_eq!({BAR[0](&mut a); a }, 0);\n-    assert_eq!({BAR[1](&mut a); a }, 1);\n-    assert_eq!({BAR[2](&mut a); a }, 3);\n-    assert_eq!({BAR[3](&mut a); a }, 6);\n-    assert_eq!({BAR[4](&mut a); a }, 10);\n+    let mut a: u32 = 0;\n+    assert_eq!({ BAR[0](&mut a); a }, 0);\n+    assert_eq!({ BAR[1](&mut a); a }, 1);\n+    assert_eq!({ BAR[2](&mut a); a }, 3);\n+    assert_eq!({ BAR[3](&mut a); a }, 6);\n+    assert_eq!({ BAR[4](&mut a); a }, 10);\n }"}]}