{"sha": "1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNGM5MjExMDNmZjRhZTIyNWYyZDg0YThiMTNmMTYxNmRjYjUzOGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-07T23:06:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-07T23:06:39Z"}, "message": "Auto merge of #51426 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #51186 (Remove two redundant .nll.stderr files)\n - #51283 (Deny #[cfg] and #[cfg_attr] on generic parameters.)\n - #51368 (Fix the use of closures within #[panic_implementation])\n - #51380 (Remove dependency on fmt_macros from typeck)\n - #51389 (rustdoc: Fix missing stability and src links for inlined external macros)\n - #51399 (NLL performance boost)\n - #51407 (Update RLS and Rustfmt)\n - #51417 (Revert #49719)\n - #51420 (Tries to address the recent network issues)\n\nFailed merges:", "tree": {"sha": "002a2b4d6808c7654d3dab6a5956fc882d8ebd13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/002a2b4d6808c7654d3dab6a5956fc882d8ebd13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "html_url": "https://github.com/rust-lang/rust/commit/1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c131bdcaff68d35f96e954baac4340206779335f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c131bdcaff68d35f96e954baac4340206779335f", "html_url": "https://github.com/rust-lang/rust/commit/c131bdcaff68d35f96e954baac4340206779335f"}, {"sha": "34cd36e2f2ea21e5eb8b35deaae081c434ce46f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/34cd36e2f2ea21e5eb8b35deaae081c434ce46f3", "html_url": "https://github.com/rust-lang/rust/commit/34cd36e2f2ea21e5eb8b35deaae081c434ce46f3"}], "stats": {"total": 707, "additions": 533, "deletions": 174}, "files": [{"sha": "c154f3d8e251f33daeaed515db23de2ec565fdeb", "filename": ".travis.yml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -301,7 +301,6 @@ before_deploy:\n           rm -rf obj/build/dist/doc &&\n           cp -r obj/build/dist/* deploy/$TRAVIS_COMMIT;\n       fi\n-  - travis_retry gem update --system\n   - ls -la deploy/$TRAVIS_COMMIT\n \n deploy:"}, {"sha": "d4544ffa3244fe73049385198b21d41df08a7382", "filename": "src/Cargo.lock", "status": "modified", "additions": 164, "deletions": 39, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -1688,6 +1688,7 @@ dependencies = [\n  \"clippy_lints 0.0.205 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"json 0.11.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jsonrpc-core 8.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"languageserver-types 0.41.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1699,10 +1700,10 @@ dependencies = [\n  \"rls-analysis 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-blacklist 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-rustc 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-rustc 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-vfs 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustfmt-nightly 0.8.2\",\n+ \"rustfmt-nightly 0.8.2 (git+https://github.com/rust-lang-nursery/rustfmt?rev=f3906267)\",\n  \"serde 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1741,7 +1742,7 @@ dependencies = [\n \n [[package]]\n name = \"rls-rustc\"\n-version = \"0.3.0\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -1804,15 +1805,32 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"147.0.0\"\n+version = \"149.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-ap-rustc_data_structures 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc-ap-arena\"\n+version = \"156.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-ap-rustc_data_structures 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc-ap-rustc_cratesio_shim\"\n+version = \"149.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_cratesio_shim\"\n-version = \"147.0.0\"\n+version = \"156.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1821,73 +1839,147 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"147.0.0\"\n+version = \"149.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustc-ap-rustc_data_structures\"\n+version = \"156.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ena 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-rayon-core 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"147.0.0\"\n+version = \"149.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc-ap-rustc_errors\"\n+version = \"156.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"147.0.0\"\n+version = \"149.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustc-ap-rustc_target\"\n+version = \"156.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc-ap-serialize\"\n+version = \"149.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"147.0.0\"\n+version = \"156.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"147.0.0\"\n+version = \"149.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustc-ap-syntax\"\n+version = \"156.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc-ap-syntax_pos\"\n+version = \"149.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-ap-arena 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"147.0.0\"\n+version = \"156.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-arena 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2311,7 +2403,6 @@ name = \"rustc_typeck\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"fmt_macros 0.0.0\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n@@ -2362,6 +2453,31 @@ dependencies = [\n  \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustfmt-nightly\"\n+version = \"0.8.2\"\n+source = \"git+https://github.com/rust-lang-nursery/rustfmt?rev=f3906267#f390626778c1bbb13911556d585850eb2fa67923\"\n+dependencies = [\n+ \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"isatty 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustfmt-nightly\"\n version = \"0.8.2\"\n@@ -2378,8 +2494,8 @@ dependencies = [\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3206,24 +3322,33 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rls-analysis 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da9794cd1f80f2cb888c00641a32f9855d0226c954ee31cef145784914c7142e\"\n \"checksum rls-blacklist 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e4a9cc2545ccb7e05b355bfe047b8039a6ec12270d5f3c996b766b340a50f7d2\"\n \"checksum rls-data 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dd20763e1c60ae8945384c8a8fa4ac44f8afa7b0a817511f5e8927e5d24f988\"\n-\"checksum rls-rustc 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ed5342b2bbbe8663c04600af506c8902b6b4d3e627b006eb1bd65aa14805f4d\"\n+\"checksum rls-rustc 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2c8c09117ae2887baaa4b17fe1cb572f9b22e4d2c6a5cda04093d8b366b0be99\"\n \"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n \"checksum rls-vfs 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be231e1e559c315bc60ced5ad2cc2d7a9c208ed7d4e2c126500149836fda19bb\"\n-\"checksum rustc-ap-arena 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1304956fbbdd070e4478672d040f0453374604a12a0938aaba4b38a2bd124667\"\n-\"checksum rustc-ap-rustc_cratesio_shim 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d1dcd0fafa3c7875b76e33feaf69b332870180475ba3eb8dd003bcc2a2dc069\"\n-\"checksum rustc-ap-rustc_data_structures 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76c1a3fe4a0104b922ffc8080bd7c703dc20f2874b7c982638f6adb6c378b77a\"\n-\"checksum rustc-ap-rustc_errors 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2812e295d2930bf3b3c22dbe8ef0bb8ae98a497ae6ad379d0709434387a9004b\"\n-\"checksum rustc-ap-rustc_target 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5bd371121f16da666f6d6d5e6ff57cd972cc8206cc80377ba411b99607d49cbd\"\n-\"checksum rustc-ap-serialize 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bde493c1c16d724e42536117c385b69f2eae9b2ec38bab841c45373bce4a9d8f\"\n-\"checksum rustc-ap-syntax 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"402c1f402e6d47defcd884d3f715aaa8c6f2cbdd5f13cb06fea70486d512426b\"\n-\"checksum rustc-ap-syntax_pos 147.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fb707a229093791dc3fc35aca61d9bf0e3708f23da4536683527857bc624b061\"\n+\"checksum rustc-ap-arena 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e794b25832224eea9252ebfa9f94ab7070d0a60c977793112c611501cb56b48d\"\n+\"checksum rustc-ap-arena 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"83e91a01cd6c5a9e4f68c2b5c81b62b172aa9e00fc2fec862c0899e3fac1fd32\"\n+\"checksum rustc-ap-rustc_cratesio_shim 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a78241b2ecb82ebb9221b4b7d37c024ff1f2e43f1b099f38a997f030fc7894b0\"\n+\"checksum rustc-ap-rustc_cratesio_shim 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e8ea8fadc5d66c1527771816e83f7e7599543bd2e1583e279855370ab2f18e5\"\n+\"checksum rustc-ap-rustc_data_structures 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5529c3927f32b0b56d1f6449a34f2218dc2160c6a6dde0cf47954d83a9a45764\"\n+\"checksum rustc-ap-rustc_data_structures 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"742ba74bc7d0f3ded56148329650f137fa5b90f7f0ecc4b4952150f32c66b147\"\n+\"checksum rustc-ap-rustc_errors 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fb1fef44a7d63f5d204c981adb26a14e85fe7ee5962050a4f664df6f425f9b48\"\n+\"checksum rustc-ap-rustc_errors 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3714046c6f8c1c259822aefcca21b1862710a6cec24fd34c0796117f074c6769\"\n+\"checksum rustc-ap-rustc_target 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a3939a9f7bf063536dd646894ca43b1378ec6a56ac5b2698cc6ba0b42bfadbdc\"\n+\"checksum rustc-ap-rustc_target 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b982c4517c18080895b06149ce8aa8279fd013f629030bb7a179bfcff6d74ef2\"\n+\"checksum rustc-ap-serialize 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"692169d0bac8a4547f9778039460799e162664477a1eaec15d31507705f8c736\"\n+\"checksum rustc-ap-serialize 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"27c7700595bff1a64ddb6f593c69db3f6d66b76b059b26137236c7e21e36db70\"\n+\"checksum rustc-ap-syntax 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"22e93ee3817b007d56b5c5b151e6cd7c7063455a1facaf9e0ca01f9d9365b716\"\n+\"checksum rustc-ap-syntax 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e6482d98c8be57d3cfe55dab744dd1a87f8462dc2ea0a8a4960f7bb1565be049\"\n+\"checksum rustc-ap-syntax_pos 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fe5d24a137d6e202cd6eb96cb74f8cb4a2b257c42b74dd624e136b4e19f0a47d\"\n+\"checksum rustc-ap-syntax_pos 156.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20af5e200b61a3e5ba4f58ed3cbd7593569faf8f0956d5233f4f27fee51b4c81\"\n \"checksum rustc-demangle 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11fb43a206a04116ffd7cfcf9bcb941f8eb6cc7ff667272246b0a1c74259a3cb\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c6d5a683c6ba4ed37959097e88d71c9e8e26659a3cb5be8b389078e7ad45306\"\n \"checksum rustc-rayon-core 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40f06724db71e18d68b3b946fdf890ca8c921d9edccc1404fdfdb537b0d12649\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum rustc_version 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a54aa04a10c68c1c4eacb4337fd883b435997ede17a9385784b990777686b09a\"\n \"checksum rustfix 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9da3cf9b79dc889a2c9879643f26d7a53e37e9361c7566b7d2787d5ace0d8396\"\n+\"checksum rustfmt-nightly 0.8.2 (git+https://github.com/rust-lang-nursery/rustfmt?rev=f3906267)\" = \"<none>\"\n \"checksum same-file 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cfb6eded0b06a0b512c8ddbcf04089138c9b4362c2f696f3c3d76039d68f3637\"\n \"checksum schannel 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"85fd9df495640643ad2d00443b3d78aae69802ad488debab4f1dd52fc1806ade\"\n \"checksum scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8674d439c964889e2476f474a3bf198cc9e199e77499960893bac5de7e9218a4\""}, {"sha": "8913fdaa888e747efa3c955dc1886da2c64535c9", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -118,6 +118,10 @@ fi\n # goes ahead and sets it for all builders.\n args=\"$args --privileged\"\n \n+if [ \"$CI\" != \"\" ]; then\n+    args=\"$args --dns 8.8.8.8 --dns 8.8.4.4 --dns 1.1.1.1 --dns 1.0.0.1\"\n+fi\n+\n exec docker \\\n   run \\\n   --volume \"$root_dir:/checkout:ro\" \\"}, {"sha": "76320c6a2eacc96912c70f3ae3579ebb474bad0f", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -104,13 +104,15 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n                     location, live_local\n                 );\n \n-                self.flow_inits.each_state_bit(|mpi_init| {\n-                    debug!(\n-                        \"add_liveness_constraints: location={:?} initialized={:?}\",\n-                        location,\n-                        &self.flow_inits.operator().move_data().move_paths[mpi_init]\n-                    );\n-                });\n+                if log_enabled!(::log::Level::Debug) {\n+                    self.flow_inits.each_state_bit(|mpi_init| {\n+                        debug!(\n+                            \"add_liveness_constraints: location={:?} initialized={:?}\",\n+                            location,\n+                            &self.flow_inits.operator().move_data().move_paths[mpi_init]\n+                        );\n+                    });\n+                }\n \n                 let mpi = self.move_data.rev_lookup.find_local(live_local);\n                 if let Some(initialized_child) = self.flow_inits.has_any_child_of(mpi) {"}, {"sha": "184cb9826ba680a96152a87e7aee7b942b9a9536", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -13,7 +13,6 @@ test = false\n log = \"0.4\"\n syntax = { path = \"../libsyntax\" }\n arena = { path = \"../libarena\" }\n-fmt_macros = { path = \"../libfmt_macros\" }\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }"}, {"sha": "533faadc3a45dce50cbcc6d5157b53d95ce6b514", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -1131,7 +1131,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     // Check that a function marked as `#[panic_implementation]` has signature `fn(&PanicInfo) -> !`\n     if let Some(panic_impl_did) = fcx.tcx.lang_items().panic_impl() {\n-        if panic_impl_did == fn_hir_id.owner_def_id() {\n+        if panic_impl_did == fcx.tcx.hir.local_def_id(fn_id) {\n             if let Some(panic_info_did) = fcx.tcx.lang_items().panic_info() {\n                 if declared_ret_ty.sty != ty::TyNever {\n                     fcx.tcx.sess.span_err("}, {"sha": "f05cbbfd7a2b6e77be8f5bb32c03ccc5aecd9baf", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -244,10 +244,10 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                         def_id,\n                         attrs: def.attrs.clone().into(),\n                         name: def.ident.name,\n-                        whence: def.span,\n+                        whence: self.cx.tcx.def_span(def_id),\n                         matchers,\n-                        stab: self.stability(def.id),\n-                        depr: self.deprecation(def.id),\n+                        stab: self.cx.tcx.lookup_stability(def_id).cloned(),\n+                        depr: self.cx.tcx.lookup_deprecation(def_id),\n                         imported_from: Some(imported_from),\n                     })\n                 }"}, {"sha": "2389ed799cfcc268301e70275aac9b3c190f029f", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -17,7 +17,7 @@ pub use self::IntType::*;\n use ast;\n use ast::{AttrId, Attribute, Name, Ident, Path, PathSegment};\n use ast::{MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n-use ast::{Lit, LitKind, Expr, ExprKind, Item, Local, Stmt, StmtKind};\n+use ast::{Lit, LitKind, Expr, ExprKind, Item, Local, Stmt, StmtKind, GenericParam};\n use codemap::{BytePos, Spanned, respan, dummy_spanned};\n use syntax_pos::Span;\n use errors::{Applicability, Handler};\n@@ -1444,6 +1444,22 @@ impl HasAttrs for Stmt {\n     }\n }\n \n+impl HasAttrs for GenericParam {\n+    fn attrs(&self) -> &[ast::Attribute] {\n+        match self {\n+            GenericParam::Lifetime(lifetime) => lifetime.attrs(),\n+            GenericParam::Type(ty) => ty.attrs(),\n+        }\n+    }\n+\n+    fn map_attrs<F: FnOnce(Vec<Attribute>) -> Vec<Attribute>>(self, f: F) -> Self {\n+        match self {\n+            GenericParam::Lifetime(lifetime) => GenericParam::Lifetime(lifetime.map_attrs(f)),\n+            GenericParam::Type(ty) => GenericParam::Type(ty.map_attrs(f)),\n+        }\n+    }\n+}\n+\n macro_rules! derive_has_attrs {\n     ($($ty:path),*) => { $(\n         impl HasAttrs for $ty {\n@@ -1463,5 +1479,5 @@ macro_rules! derive_has_attrs {\n \n derive_has_attrs! {\n     Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::ImplItem, ast::TraitItem, ast::Arm,\n-    ast::Field, ast::FieldPat, ast::Variant_\n+    ast::Field, ast::FieldPat, ast::Variant_, ast::LifetimeDef, ast::TyParam\n }"}, {"sha": "3364378913952deabb76eacf3ae07d463028beb0", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -278,6 +278,22 @@ impl<'a> StripUnconfigured<'a> {\n             pattern\n         })\n     }\n+\n+    // deny #[cfg] on generic parameters until we decide what to do with it.\n+    // see issue #51279.\n+    pub fn disallow_cfg_on_generic_param(&mut self, param: &ast::GenericParam) {\n+        for attr in param.attrs() {\n+            let offending_attr = if attr.check_name(\"cfg\") {\n+                \"cfg\"\n+            } else if attr.check_name(\"cfg_attr\") {\n+                \"cfg_attr\"\n+            } else {\n+                continue;\n+            };\n+            let msg = format!(\"#[{}] cannot be applied on a generic parameter\", offending_attr);\n+            self.sess.span_diagnostic.span_err(attr.span, &msg);\n+        }\n+    }\n }\n \n impl<'a> fold::Folder for StripUnconfigured<'a> {"}, {"sha": "29030783ca6b848d0c253c019fb30f126f76e4a7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -1412,6 +1412,11 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         }\n     }\n \n+    fn fold_generic_param(&mut self, param: ast::GenericParam) -> ast::GenericParam {\n+        self.cfg.disallow_cfg_on_generic_param(&param);\n+        noop_fold_generic_param(param, self)\n+    }\n+\n     fn fold_attribute(&mut self, at: ast::Attribute) -> Option<ast::Attribute> {\n         // turn `#[doc(include=\"filename\")]` attributes into `#[doc(include(file=\"filename\",\n         // contents=\"file contents\")]` attributes"}, {"sha": "01b971976a763c3d49bf72f5283e2303e52f0442", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 67, "deletions": 22, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -386,26 +386,72 @@ where\n {\n     // We basically look at two token trees here, denoted as #1 and #2 below\n     let span = match parse_kleene_op(input, span) {\n-        // #1 is any KleeneOp (`?`)\n-        Ok(Ok(op)) if op == KleeneOp::ZeroOrOne => {\n-            if !features.macro_at_most_once_rep\n-                && !attr::contains_name(attrs, \"allow_internal_unstable\")\n-            {\n-                let explain = feature_gate::EXPLAIN_MACRO_AT_MOST_ONCE_REP;\n-                emit_feature_err(\n-                    sess,\n-                    \"macro_at_most_once_rep\",\n-                    span,\n-                    GateIssue::Language,\n-                    explain,\n-                );\n+        // #1 is a `+` or `*` KleeneOp\n+        //\n+        // `?` is ambiguous: it could be a separator or a Kleene::ZeroOrOne, so we need to look\n+        // ahead one more token to be sure.\n+        Ok(Ok(op)) if op != KleeneOp::ZeroOrOne => return (None, op),\n+\n+        // #1 is `?` token, but it could be a Kleene::ZeroOrOne without a separator or it could\n+        // be a `?` separator followed by any Kleene operator. We need to look ahead 1 token to\n+        // find out which.\n+        Ok(Ok(op)) => {\n+            assert_eq!(op, KleeneOp::ZeroOrOne);\n+\n+            // Lookahead at #2. If it is a KleenOp, then #1 is a separator.\n+            let is_1_sep = if let Some(&tokenstream::TokenTree::Token(_, ref tok2)) = input.peek() {\n+                kleene_op(tok2).is_some()\n+            } else {\n+                false\n+            };\n+\n+            if is_1_sep {\n+                // #1 is a separator and #2 should be a KleepeOp::*\n+                // (N.B. We need to advance the input iterator.)\n+                match parse_kleene_op(input, span) {\n+                    // #2 is a KleeneOp (this is the only valid option) :)\n+                    Ok(Ok(op)) if op == KleeneOp::ZeroOrOne => {\n+                        if !features.macro_at_most_once_rep\n+                            && !attr::contains_name(attrs, \"allow_internal_unstable\")\n+                        {\n+                            let explain = feature_gate::EXPLAIN_MACRO_AT_MOST_ONCE_REP;\n+                            emit_feature_err(\n+                                sess,\n+                                \"macro_at_most_once_rep\",\n+                                span,\n+                                GateIssue::Language,\n+                                explain,\n+                            );\n+                        }\n+                        return (Some(token::Question), op);\n+                    }\n+                    Ok(Ok(op)) => return (Some(token::Question), op),\n+\n+                    // #2 is a random token (this is an error) :(\n+                    Ok(Err((_, span))) => span,\n+\n+                    // #2 is not even a token at all :(\n+                    Err(span) => span,\n+                }\n+            } else {\n+                if !features.macro_at_most_once_rep\n+                    && !attr::contains_name(attrs, \"allow_internal_unstable\")\n+                {\n+                    let explain = feature_gate::EXPLAIN_MACRO_AT_MOST_ONCE_REP;\n+                    emit_feature_err(\n+                        sess,\n+                        \"macro_at_most_once_rep\",\n+                        span,\n+                        GateIssue::Language,\n+                        explain,\n+                    );\n+                }\n+\n+                // #2 is a random tree and #1 is KleeneOp::ZeroOrOne\n+                return (None, op);\n             }\n-            return (None, op);\n         }\n \n-        // #1 is any KleeneOp (`+`, `*`)\n-        Ok(Ok(op)) => return (None, op),\n-\n         // #1 is a separator followed by #2, a KleeneOp\n         Ok(Err((tok, span))) => match parse_kleene_op(input, span) {\n             // #2 is a KleeneOp :D\n@@ -421,11 +467,8 @@ where\n                         GateIssue::Language,\n                         explain,\n                     );\n-                } else {\n-                    sess.span_diagnostic\n-                        .span_err(span, \"`?` macro repetition does not allow a separator\");\n                 }\n-                return (None, op);\n+                return (Some(tok), op);\n             }\n             Ok(Ok(op)) => return (Some(tok), op),\n \n@@ -440,7 +483,9 @@ where\n         Err(span) => span,\n     };\n \n-    if !features.macro_at_most_once_rep && !attr::contains_name(attrs, \"allow_internal_unstable\") {\n+    if !features.macro_at_most_once_rep\n+        && !attr::contains_name(attrs, \"allow_internal_unstable\")\n+    {\n         sess.span_diagnostic\n             .span_err(span, \"expected one of: `*`, `+`, or `?`\");\n     } else {"}, {"sha": "4d2a152df6eb9eb9124c9dfbe7bbd7574ead3413", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -605,7 +605,7 @@ declare_features! (\n     // allow `'_` placeholder lifetimes\n     (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n     // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n-    (accepted, generic_param_attrs, \"1.26.0\", Some(48848), None),\n+    (accepted, generic_param_attrs, \"1.27.0\", Some(48848), None),\n     // Allows cfg(target_feature = \"...\").\n     (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n     // Allows #[target_feature(...)]"}, {"sha": "4fa9a639928f98f41ca54f3d9ddfe19f694819fa", "filename": "src/test/compile-fail/panic_implementation-closures.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Fcompile-fail%2Fpanic_implementation-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Fcompile-fail%2Fpanic_implementation-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic_implementation-closures.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![crate_type = \"rlib\"]\n+#![no_std]\n+#![feature(panic_implementation)]\n+\n+#[panic_implementation]\n+pub fn panic_fmt(_: &::core::panic::PanicInfo) -> ! {\n+    |x: u8| x;\n+    loop {}\n+}"}, {"sha": "b7e942f938321ae8f033a65909cea38975d856e2", "filename": "src/test/run-pass/macro-at-most-once-rep.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Frun-pass%2Fmacro-at-most-once-rep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Frun-pass%2Fmacro-at-most-once-rep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-at-most-once-rep.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -32,13 +32,25 @@ macro_rules! foo {\n     } }\n }\n \n+macro_rules! baz {\n+    ($($a:ident),? ; $num:expr) => { { // comma separator is meaningless for `?`\n+        let mut x = 0;\n+\n+        $(\n+            x += $a;\n+         )?\n+\n+        assert_eq!(x, $num);\n+    } }\n+}\n+\n macro_rules! barplus {\n     ($($a:ident)?+ ; $num:expr) => { {\n         let mut x = 0;\n \n         $(\n             x += $a;\n-         )?\n+         )+\n \n         assert_eq!(x, $num);\n     } }\n@@ -50,7 +62,7 @@ macro_rules! barstar {\n \n         $(\n             x += $a;\n-         )?\n+         )*\n \n         assert_eq!(x, $num);\n     } }\n@@ -62,10 +74,15 @@ pub fn main() {\n     // accept 0 or 1 repetitions\n     foo!( ; 0);\n     foo!(a ; 1);\n+    baz!( ; 0);\n+    baz!(a ; 1);\n \n     // Make sure using ? as a separator works as before\n-    barplus!(+ ; 0);\n-    barplus!(a + ; 1);\n-    barstar!(* ; 0);\n-    barstar!(a * ; 1);\n+    barplus!(a ; 1);\n+    barplus!(a?a ; 2);\n+    barplus!(a?a?a ; 3);\n+    barstar!( ; 0);\n+    barstar!(a ; 1);\n+    barstar!(a?a ; 2);\n+    barstar!(a?a?a ; 3);\n }"}, {"sha": "39b52d68bf1c2f6b25a10abf395382598c1997cf", "filename": "src/test/rustdoc/inline_cross/auxiliary/macros.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacros.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(staged_api)]\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+/// docs for my_macro\n+#[unstable(feature = \"macro_test\", issue = \"0\")]\n+#[rustc_deprecated(since = \"1.2.3\", reason = \"text\")]\n+#[macro_export]\n+macro_rules! my_macro {\n+    () => ()\n+}"}, {"sha": "8d2f7d15d7d7f6865fdbcf5305e9de943a4e47d1", "filename": "src/test/rustdoc/inline_cross/macros.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:macros.rs\n+// build-aux-docs\n+\n+#![feature(macro_test)]\n+#![feature(use_extern_macros)]\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate macros;\n+\n+// @has foo/index.html '//*[@class=\"docblock-short\"]' '[Deprecated] [Experimental]'\n+\n+// @has foo/macro.my_macro.html\n+// @has - '//*[@class=\"docblock\"]' 'docs for my_macro'\n+// @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.2.3: text'\n+// @has - '//*[@class=\"stab unstable\"]' 'macro_test'\n+// @has - '//a/@href' '../src/macros/macros.rs.html#19-21'\n+pub use macros::my_macro;"}, {"sha": "48f23486a317c0cf5685fc7646fe34e4c36d1735", "filename": "src/test/ui/generator/pattern-borrow.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c131bdcaff68d35f96e954baac4340206779335f/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c131bdcaff68d35f96e954baac4340206779335f/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.nll.stderr?ref=c131bdcaff68d35f96e954baac4340206779335f", "patch": "@@ -1,11 +0,0 @@\n-error[E0626]: borrow may still be in use when generator yields\n-  --> $DIR/pattern-borrow.rs:19:24\n-   |\n-LL |         if let Test::A(ref _a) = test { //~ ERROR borrow may still be in use when generator yields\n-   |                        ^^^^^^\n-LL |             yield ();\n-   |             -------- possible yield occurs here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0626`."}, {"sha": "a85972fcd7a1c05b6e24577a7352cf3ba92a7ca4", "filename": "src/test/ui/issue-45697.nll.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c131bdcaff68d35f96e954baac4340206779335f/src%2Ftest%2Fui%2Fissue-45697.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c131bdcaff68d35f96e954baac4340206779335f/src%2Ftest%2Fui%2Fissue-45697.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45697.nll.stderr?ref=c131bdcaff68d35f96e954baac4340206779335f", "patch": "@@ -1,34 +0,0 @@\n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n-  --> $DIR/issue-45697.rs:30:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                        - borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n-\n-error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n-  --> $DIR/issue-45697.rs:30:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `y` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n-...\n-LL |         *z.pointer += 1;\n-   |         --------------- borrow later used here\n-\n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Mir)\n-  --> $DIR/issue-45697.rs:30:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n-...\n-LL |         *z.pointer += 1;\n-   |         --------------- borrow later used here\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0503, E0506.\n-For more information about an error, try `rustc --explain E0503`."}, {"sha": "4639d73e44d3dc86028c248d57a4cadfc4f1d84c", "filename": "src/test/ui/issue-51279.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Fui%2Fissue-51279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Fui%2Fissue-51279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51279.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n+//~^ ERROR #[cfg] cannot be applied on a generic parameter\n+//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n+\n+impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n+//~^ ERROR #[cfg] cannot be applied on a generic parameter\n+//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n+\n+pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n+//~^ ERROR #[cfg] cannot be applied on a generic parameter\n+//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n+\n+#[cfg(none)]\n+pub struct Y<#[cfg(none)] T>(T); // shouldn't care when the entire item is stripped out\n+\n+struct M<T>(*const T);\n+\n+unsafe impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n+    //~^ ERROR #[cfg_attr] cannot be applied on a generic parameter\n+    fn drop(&mut self) {}\n+}\n+\n+type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n+//~^ ERROR #[cfg] cannot be applied on a generic parameter"}, {"sha": "38d5a5acc50fe7b4e736cecdd16d97aa0e76da2e", "filename": "src/test/ui/issue-51279.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Fui%2Fissue-51279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Fui%2Fissue-51279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51279.stderr?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -0,0 +1,50 @@\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:11:14\n+   |\n+LL | pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n+   |              ^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:11:31\n+   |\n+LL | pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n+   |                               ^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:15:6\n+   |\n+LL | impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n+   |      ^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:15:23\n+   |\n+LL | impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n+   |                       ^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:19:10\n+   |\n+LL | pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n+   |          ^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:19:27\n+   |\n+LL | pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n+   |                           ^^^^^^^^^^^^\n+\n+error: #[cfg_attr] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:28:13\n+   |\n+LL | unsafe impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:33:23\n+   |\n+LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n+   |                       ^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "a5660f8b41f8da43aeeea29deefa8607dc764bf4", "filename": "src/test/ui/macros/macro-at-most-once-rep-ambig.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.rs?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -8,26 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Tests the behavior of various Kleene operators in macros with respect to `?` terminals. In\n-// particular, `?` in the position of a separator and of a Kleene operator is tested.\n+// The logic for parsing Kleene operators in macros has a special case to disambiguate `?`.\n+// Specifically, `$(pat)?` is the ZeroOrOne operator whereas `$(pat)?+` or `$(pat)?*` are the\n+// ZeroOrMore and OneOrMore operators using `?` as a separator. These tests are intended to\n+// exercise that logic in the macro parser.\n+//\n+// Moreover, we also throw in some tests for using a separator with `?`, which is meaningless but\n+// included for consistency with `+` and `*`.\n+//\n+// This test focuses on error cases.\n \n #![feature(macro_at_most_once_rep)]\n \n-// should match `` and `a`\n macro_rules! foo {\n     ($(a)?) => {}\n }\n \n macro_rules! baz {\n-    ($(a),?) => {} //~ ERROR `?` macro repetition does not allow a separator\n+    ($(a),?) => {} // comma separator is meaningless for `?`\n }\n \n-// should match `+` and `a+`\n macro_rules! barplus {\n     ($(a)?+) => {}\n }\n \n-// should match `*` and `a*`\n macro_rules! barstar {\n     ($(a)?*) => {}\n }\n@@ -36,14 +40,14 @@ pub fn main() {\n     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n     foo!(a?a); //~ ERROR no rules expected the token `?`\n     foo!(a?); //~ ERROR no rules expected the token `?`\n+    baz!(a?a?a); //~ ERROR no rules expected the token `?`\n+    baz!(a?a); //~ ERROR no rules expected the token `?`\n+    baz!(a?); //~ ERROR no rules expected the token `?`\n+    baz!(a,); //~ ERROR unexpected end of macro invocation\n+    baz!(a?a?a,); //~ ERROR no rules expected the token `?`\n+    baz!(a?a,); //~ ERROR no rules expected the token `?`\n+    baz!(a?,); //~ ERROR no rules expected the token `?`\n     barplus!(); //~ ERROR unexpected end of macro invocation\n-    barstar!(); //~ ERROR unexpected end of macro invocation\n-    barplus!(a?); //~ ERROR no rules expected the token `?`\n-    barplus!(a); //~ ERROR unexpected end of macro invocation\n-    barstar!(a?); //~ ERROR no rules expected the token `?`\n-    barstar!(a); //~ ERROR unexpected end of macro invocation\n-    barplus!(+); // ok\n-    barstar!(*); // ok\n-    barplus!(a+); // ok\n-    barstar!(a*); // ok\n+    barplus!(a?); //~ ERROR unexpected end of macro invocation\n+    barstar!(a?); //~ ERROR unexpected end of macro invocation\n }"}, {"sha": "d382082a5758562bb4f6163ef74237c8c0fbc3af", "filename": "src/test/ui/macros/macro-at-most-once-rep-ambig.stderr", "status": "modified", "additions": 47, "deletions": 29, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b4c921103ff4ae225f2d84a8b13f1616dcb538e/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.stderr?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -1,62 +1,80 @@\n-error: `?` macro repetition does not allow a separator\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:22:10\n-   |\n-LL |     ($(a),?) => {} //~ ERROR `?` macro repetition does not allow a separator\n-   |          ^\n-\n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:36:11\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:40:11\n    |\n LL |     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:37:11\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:41:11\n    |\n LL |     foo!(a?a); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:38:11\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:42:11\n    |\n LL |     foo!(a?); //~ ERROR no rules expected the token `?`\n    |           ^\n \n-error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:39:5\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:43:11\n    |\n-LL |     barplus!(); //~ ERROR unexpected end of macro invocation\n-   |     ^^^^^^^^^^^\n+LL |     baz!(a?a?a); //~ ERROR no rules expected the token `?`\n+   |           ^\n \n-error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:40:5\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:44:11\n    |\n-LL |     barstar!(); //~ ERROR unexpected end of macro invocation\n-   |     ^^^^^^^^^^^\n+LL |     baz!(a?a); //~ ERROR no rules expected the token `?`\n+   |           ^\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:41:15\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:45:11\n    |\n-LL |     barplus!(a?); //~ ERROR no rules expected the token `?`\n-   |               ^\n+LL |     baz!(a?); //~ ERROR no rules expected the token `?`\n+   |           ^\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:42:14\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:46:11\n+   |\n+LL |     baz!(a,); //~ ERROR unexpected end of macro invocation\n+   |           ^\n+\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:47:11\n+   |\n+LL |     baz!(a?a?a,); //~ ERROR no rules expected the token `?`\n+   |           ^\n+\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:48:11\n    |\n-LL |     barplus!(a); //~ ERROR unexpected end of macro invocation\n-   |              ^\n+LL |     baz!(a?a,); //~ ERROR no rules expected the token `?`\n+   |           ^\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:43:15\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:49:11\n+   |\n+LL |     baz!(a?,); //~ ERROR no rules expected the token `?`\n+   |           ^\n+\n+error: unexpected end of macro invocation\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:50:5\n+   |\n+LL |     barplus!(); //~ ERROR unexpected end of macro invocation\n+   |     ^^^^^^^^^^^\n+\n+error: unexpected end of macro invocation\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:51:15\n    |\n-LL |     barstar!(a?); //~ ERROR no rules expected the token `?`\n+LL |     barplus!(a?); //~ ERROR unexpected end of macro invocation\n    |               ^\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:44:14\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:52:15\n    |\n-LL |     barstar!(a); //~ ERROR unexpected end of macro invocation\n-   |              ^\n+LL |     barstar!(a?); //~ ERROR unexpected end of macro invocation\n+   |               ^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "7d0bc550b0899a13a56c81eb2d5064abd0bcf385", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -1 +1 @@\n-Subproject commit 453f5e4dec279167aed825b7ad043d06aa17c667\n+Subproject commit 7d0bc550b0899a13a56c81eb2d5064abd0bcf385"}, {"sha": "08da30d72c9abfff4d41f6f081e31fd2929b820d", "filename": "src/tools/rustfmt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt?ref=1b4c921103ff4ae225f2d84a8b13f1616dcb538e", "patch": "@@ -1 +1 @@\n-Subproject commit 173ae0d7b92227c7fec4bce67c944dce953256dc\n+Subproject commit 08da30d72c9abfff4d41f6f081e31fd2929b820d"}]}