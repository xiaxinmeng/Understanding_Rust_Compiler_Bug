{"sha": "f7485df05bd742daf3fcb2f1aeb997877e7b86ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NDg1ZGYwNWJkNzQyZGFmM2ZjYjJmMWFlYjk5Nzg3N2U3Yjg2YWM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-06-25T21:28:20Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-06-25T21:28:20Z"}, "message": "Minify css", "tree": {"sha": "5053818e5c03acc37316caf0fccb2ee1c06847dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5053818e5c03acc37316caf0fccb2ee1c06847dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7485df05bd742daf3fcb2f1aeb997877e7b86ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7485df05bd742daf3fcb2f1aeb997877e7b86ac", "html_url": "https://github.com/rust-lang/rust/commit/f7485df05bd742daf3fcb2f1aeb997877e7b86ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7485df05bd742daf3fcb2f1aeb997877e7b86ac/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23", "html_url": "https://github.com/rust-lang/rust/commit/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "b74587e566210aabb4878f9d67285590465753b5", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7485df05bd742daf3fcb2f1aeb997877e7b86ac/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f7485df05bd742daf3fcb2f1aeb997877e7b86ac/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=f7485df05bd742daf3fcb2f1aeb997877e7b86ac", "patch": "@@ -1220,7 +1220,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"minifier\"\n-version = \"0.0.11\"\n+version = \"0.0.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2426,7 +2426,7 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n- \"minifier 0.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"minifier 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -3263,7 +3263,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum mdbook 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90b5a8d7e341ceee5db3882a06078d42661ddcfa2b3687319cc5da76ec4e782f\"\n \"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n-\"checksum minifier 0.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"26f3e36a4db1981b16567e4abfd6ddc3641bc9b950bdc868701f656bf9b74bdd\"\n+\"checksum minifier 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78cb57f9a385530d60f2d67f6e108050b478b7a0ffd0bb9c350803e1356535dd\"\n \"checksum miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"609ce024854aeb19a0ef7567d348aaa5a746b32fb72e336df7fcc16869d7e2b4\"\n \"checksum miow 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9224c91f82b3c47cf53dcf78dfaa20d6888fbcc5d272d5f2fcdf8a697f3c987d\"\n \"checksum nibble_vec 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8d77f3db4bce033f4d04db08079b2ef1c3d02b44e86f25d08886fafa7756ffa\""}, {"sha": "f0c40d1d491e21835828b5ecf4a671d91c729de1", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7485df05bd742daf3fcb2f1aeb997877e7b86ac/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f7485df05bd742daf3fcb2f1aeb997877e7b86ac/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=f7485df05bd742daf3fcb2f1aeb997877e7b86ac", "patch": "@@ -9,5 +9,5 @@ path = \"lib.rs\"\n \n [dependencies]\n pulldown-cmark = { version = \"0.1.2\", default-features = false }\n-minifier = \"0.0.11\"\n+minifier = \"0.0.14\"\n tempfile = \"3\""}, {"sha": "130451d07af8649bb188549cb6b2fd27c4d17c2c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f7485df05bd742daf3fcb2f1aeb997877e7b86ac/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7485df05bd742daf3fcb2f1aeb997877e7b86ac/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f7485df05bd742daf3fcb2f1aeb997877e7b86ac", "patch": "@@ -42,6 +42,7 @@ use std::collections::{BTreeMap, HashSet, VecDeque};\n use std::default::Default;\n use std::error;\n use std::fmt::{self, Display, Formatter, Write as FmtWrite};\n+use std::ffi::OsStr;\n use std::fs::{self, File, OpenOptions};\n use std::io::prelude::*;\n use std::io::{self, BufWriter, BufReader};\n@@ -756,10 +757,12 @@ fn write_shared(cx: &Context,\n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n \n-    write(cx.dst.join(&format!(\"rustdoc{}.css\", cx.shared.resource_suffix)),\n-          include_bytes!(\"static/rustdoc.css\"))?;\n-    write(cx.dst.join(&format!(\"settings{}.css\", cx.shared.resource_suffix)),\n-          include_bytes!(\"static/settings.css\"))?;\n+    write_minify(cx.dst.join(&format!(\"rustdoc{}.css\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/rustdoc.css\"),\n+                 enable_minification)?;\n+    write_minify(cx.dst.join(&format!(\"settings{}.css\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/settings.css\"),\n+                 enable_minification)?;\n \n     // To avoid \"light.css\" to be overwritten, we'll first run over the received themes and only\n     // then we'll run over the \"official\" styles.\n@@ -781,11 +784,13 @@ fn write_shared(cx: &Context,\n           include_bytes!(\"static/brush.svg\"))?;\n     write(cx.dst.join(&format!(\"wheel{}.svg\", cx.shared.resource_suffix)),\n           include_bytes!(\"static/wheel.svg\"))?;\n-    write(cx.dst.join(&format!(\"light{}.css\", cx.shared.resource_suffix)),\n-          include_bytes!(\"static/themes/light.css\"))?;\n+    write_minify(cx.dst.join(&format!(\"light{}.css\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/themes/light.css\"),\n+                 enable_minification)?;\n     themes.insert(\"light\".to_owned());\n-    write(cx.dst.join(&format!(\"dark{}.css\", cx.shared.resource_suffix)),\n-          include_bytes!(\"static/themes/dark.css\"))?;\n+    write_minify(cx.dst.join(&format!(\"dark{}.css\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/themes/dark.css\"),\n+                 enable_minification)?;\n     themes.insert(\"dark\".to_owned());\n \n     let mut themes: Vec<&String> = themes.iter().collect();\n@@ -857,10 +862,19 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     if let Some(ref css) = cx.shared.css_file_extension {\n         let out = cx.dst.join(&format!(\"theme{}.css\", cx.shared.resource_suffix));\n-        try_err!(fs::copy(css, out), css);\n+        if !enable_minification {\n+            try_err!(fs::copy(css, out), css);\n+        } else {\n+            let mut f = try_err!(File::open(css), css);\n+            let mut buffer = String::with_capacity(1000);\n+\n+            try_err!(f.read_to_string(&mut buffer), css);\n+            write_minify(out, &buffer, enable_minification)?;\n+        }\n     }\n-    write(cx.dst.join(&format!(\"normalize{}.css\", cx.shared.resource_suffix)),\n-          include_bytes!(\"static/normalize.css\"))?;\n+    write_minify(cx.dst.join(&format!(\"normalize{}.css\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/normalize.css\"),\n+                 enable_minification)?;\n     write(cx.dst.join(\"FiraSans-Regular.woff\"),\n           include_bytes!(\"static/FiraSans-Regular.woff\"))?;\n     write(cx.dst.join(\"FiraSans-Medium.woff\"),\n@@ -1051,7 +1065,12 @@ fn write(dst: PathBuf, contents: &[u8]) -> Result<(), Error> {\n \n fn write_minify(dst: PathBuf, contents: &str, enable_minification: bool) -> Result<(), Error> {\n     if enable_minification {\n-        write(dst, minifier::js::minify(contents).as_bytes())\n+        if dst.extension() == Some(&OsStr::new(\"css\")) {\n+            let res = try_none!(minifier::css::minify(contents).ok(), &dst);\n+            write(dst, res.as_bytes())\n+        } else {\n+            write(dst, minifier::js::minify(contents).as_bytes())\n+        }\n     } else {\n         write(dst, contents.as_bytes())\n     }"}]}