{"sha": "24921df7bd2cea06aba991909db7c9515799a40b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OTIxZGY3YmQyY2VhMDZhYmE5OTE5MDlkYjdjOTUxNTc5OWE0MGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T04:53:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T04:53:24Z"}, "message": "Auto merge of #7039 - phansch:melt-ice, r=flip1995\n\ntabs_in_doc_comments: Fix ICE due to char indexing\n\nThis is a quick-fix for an ICE in `tabs_in_doc_comments`. The problem\nwas that we we're indexing into possibly multi-byte characters, such as '\u4f4d'.\n\nMore specifically `get_chunks_of_tabs` was returning indices into\nmulti-byte characters. Those were passed on to a `Span` creation that\nthen caused the ICE.\n\nThis fix makes sure that we don't return indices that point inside a\nmulti-byte character. *However*, we are still iterating over unicode\ncodepoints, not grapheme clusters. So a seemingly single character like y\u0306 ,\nwhich actually consists of two codepoints, will probably still cause\nincorrect spans in the output. But I don't think we handle those cases\nanywhere in Clippy currently?\n\nFixes #5835\n\nchangelog: Fix ICE in `tabs_in_doc_comments`", "tree": {"sha": "0815acaa741d1f2103f89f27a02c3a50fd5174b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0815acaa741d1f2103f89f27a02c3a50fd5174b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24921df7bd2cea06aba991909db7c9515799a40b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24921df7bd2cea06aba991909db7c9515799a40b", "html_url": "https://github.com/rust-lang/rust/commit/24921df7bd2cea06aba991909db7c9515799a40b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24921df7bd2cea06aba991909db7c9515799a40b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "html_url": "https://github.com/rust-lang/rust/commit/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3"}, {"sha": "cbdebd97ec4846391dc0f9a1288a3ab1fc053f99", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdebd97ec4846391dc0f9a1288a3ab1fc053f99", "html_url": "https://github.com/rust-lang/rust/commit/cbdebd97ec4846391dc0f9a1288a3ab1fc053f99"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "e2c144709f5b78b5420eca8a8828186d8fa57b2a", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/24921df7bd2cea06aba991909db7c9515799a40b/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24921df7bd2cea06aba991909db7c9515799a40b/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=24921df7bd2cea06aba991909db7c9515799a40b", "patch": "@@ -104,30 +104,32 @@ fn get_chunks_of_tabs(the_str: &str) -> Vec<(u32, u32)> {\n     // tracker to decide if the last group of tabs is not closed by a non-tab character\n     let mut is_active = false;\n \n-    let chars_array: Vec<_> = the_str.chars().collect();\n+    // Note that we specifically need the char _byte_ indices here, not the positional indexes\n+    // within the char array to deal with multi-byte characters properly. `char_indices` does\n+    // exactly that. It provides an iterator over tuples of the form `(byte position, char)`.\n+    let char_indices: Vec<_> = the_str.char_indices().collect();\n \n-    if chars_array == vec!['\\t'] {\n+    if let [(_, '\\t')] = char_indices.as_slice() {\n         return vec![(0, 1)];\n     }\n \n-    for (index, arr) in chars_array.windows(2).enumerate() {\n-        let index = u32::try_from(index).expect(line_length_way_to_long);\n-        match arr {\n-            ['\\t', '\\t'] => {\n+    for entry in char_indices.windows(2) {\n+        match entry {\n+            [(_, '\\t'), (_, '\\t')] => {\n                 // either string starts with double tab, then we have to set it active,\n                 // otherwise is_active is true anyway\n                 is_active = true;\n             },\n-            [_, '\\t'] => {\n+            [(_, _), (index_b, '\\t')] => {\n                 // as ['\\t', '\\t'] is excluded, this has to be a start of a tab group,\n                 // set indices accordingly\n                 is_active = true;\n-                current_start = index + 1;\n+                current_start = u32::try_from(*index_b).unwrap();\n             },\n-            ['\\t', _] => {\n+            [(_, '\\t'), (index_b, _)] => {\n                 // this now has to be an end of the group, hence we have to push a new tuple\n                 is_active = false;\n-                spans.push((current_start, index + 1));\n+                spans.push((current_start, u32::try_from(*index_b).unwrap()));\n             },\n             _ => {},\n         }\n@@ -137,7 +139,7 @@ fn get_chunks_of_tabs(the_str: &str) -> Vec<(u32, u32)> {\n     if is_active {\n         spans.push((\n             current_start,\n-            u32::try_from(the_str.chars().count()).expect(line_length_way_to_long),\n+            u32::try_from(char_indices.last().unwrap().0 + 1).expect(line_length_way_to_long),\n         ));\n     }\n \n@@ -148,6 +150,13 @@ fn get_chunks_of_tabs(the_str: &str) -> Vec<(u32, u32)> {\n mod tests_for_get_chunks_of_tabs {\n     use super::get_chunks_of_tabs;\n \n+    #[test]\n+    fn test_unicode_han_string() {\n+        let res = get_chunks_of_tabs(\" \\u{4f4d}\\t\");\n+\n+        assert_eq!(res, vec![(4, 5)]);\n+    }\n+\n     #[test]\n     fn test_empty_string() {\n         let res = get_chunks_of_tabs(\"\");"}, {"sha": "5e99cb432b6e2f2232fa20462aa0fd93dbcb65b6", "filename": "tests/ui/crashes/ice-5835.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24921df7bd2cea06aba991909db7c9515799a40b/tests%2Fui%2Fcrashes%2Fice-5835.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24921df7bd2cea06aba991909db7c9515799a40b/tests%2Fui%2Fcrashes%2Fice-5835.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5835.rs?ref=24921df7bd2cea06aba991909db7c9515799a40b", "patch": "@@ -0,0 +1,9 @@\n+#[rustfmt::skip]\n+pub struct Foo {\n+    /// \u4f4d\t\n+    ///   ^ Do not remove this tab character.\n+    ///   It was required to trigger the ICE.\n+    pub bar: u8,\n+}\n+\n+fn main() {}"}, {"sha": "c972bcb60a0cdba58c021f22479930ed7ba4f786", "filename": "tests/ui/crashes/ice-5835.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24921df7bd2cea06aba991909db7c9515799a40b/tests%2Fui%2Fcrashes%2Fice-5835.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24921df7bd2cea06aba991909db7c9515799a40b/tests%2Fui%2Fcrashes%2Fice-5835.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5835.stderr?ref=24921df7bd2cea06aba991909db7c9515799a40b", "patch": "@@ -0,0 +1,10 @@\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/ice-5835.rs:3:10\n+   |\n+LL |     /// \u4f4d    \n+   |           ^^^^ help: consider using four spaces per tab\n+   |\n+   = note: `-D clippy::tabs-in-doc-comments` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}