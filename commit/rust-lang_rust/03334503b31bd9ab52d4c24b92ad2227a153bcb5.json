{"sha": "03334503b31bd9ab52d4c24b92ad2227a153bcb5", "node_id": "C_kwDOAAsO6NoAKDAzMzM0NTAzYjMxYmQ5YWI1MmQ0YzI0YjkyYWQyMjI3YTE1M2JjYjU", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2023-03-02T14:02:24Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2023-03-02T21:36:37Z"}, "message": "Use `Option::as_slice` where applicable", "tree": {"sha": "991e81a2ee7a06bf021758b2234e579ea3bcf96e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991e81a2ee7a06bf021758b2234e579ea3bcf96e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03334503b31bd9ab52d4c24b92ad2227a153bcb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03334503b31bd9ab52d4c24b92ad2227a153bcb5", "html_url": "https://github.com/rust-lang/rust/commit/03334503b31bd9ab52d4c24b92ad2227a153bcb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03334503b31bd9ab52d4c24b92ad2227a153bcb5/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13471d3b2046cce78181dde6cfc146c09f55e29e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13471d3b2046cce78181dde6cfc146c09f55e29e", "html_url": "https://github.com/rust-lang/rust/commit/13471d3b2046cce78181dde6cfc146c09f55e29e"}], "stats": {"total": 25, "additions": 8, "deletions": 17}, "files": [{"sha": "a46bdeb417da3e3564886d4b4edf0211c8f8b562", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03334503b31bd9ab52d4c24b92ad2227a153bcb5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03334503b31bd9ab52d4c24b92ad2227a153bcb5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=03334503b31bd9ab52d4c24b92ad2227a153bcb5", "patch": "@@ -36,7 +36,6 @@ use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext}\n \n use std::iter;\n use std::mem;\n-use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn check_casts(&mut self) {\n@@ -1507,11 +1506,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let coerce = if blk.targeted_by_break {\n             CoerceMany::new(coerce_to_ty)\n         } else {\n-            let tail_expr: &[&hir::Expr<'_>] = match tail_expr {\n-                Some(e) => slice::from_ref(e),\n-                None => &[],\n-            };\n-            CoerceMany::with_coercion_sites(coerce_to_ty, tail_expr)\n+            CoerceMany::with_coercion_sites(coerce_to_ty, blk.expr.as_slice())\n         };\n \n         let prev_diverges = self.diverges.get();"}, {"sha": "e397dfd45706bcc20291b770054c661434f04017", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03334503b31bd9ab52d4c24b92ad2227a153bcb5/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03334503b31bd9ab52d4c24b92ad2227a153bcb5/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=03334503b31bd9ab52d4c24b92ad2227a153bcb5", "patch": "@@ -5,6 +5,7 @@\n #![feature(min_specialization)]\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n+#![feature(option_as_slice)]\n #![allow(rustc::potential_query_instability)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "80279ed969a9458424a6f179b3ab6e357876c5f2", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03334503b31bd9ab52d4c24b92ad2227a153bcb5/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03334503b31bd9ab52d4c24b92ad2227a153bcb5/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=03334503b31bd9ab52d4c24b92ad2227a153bcb5", "patch": "@@ -749,14 +749,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         let opname = Ident::with_dummy_span(opname);\n-        let input_types =\n-            opt_rhs.as_ref().map(|(_, ty)| std::slice::from_ref(ty)).unwrap_or_default();\n+        let (opt_rhs_expr, opt_rhs_ty) = opt_rhs.unzip();\n+        let input_types = opt_rhs_ty.as_slice();\n         let cause = self.cause(\n             span,\n             traits::BinOp {\n-                rhs_span: opt_rhs.map(|(expr, _)| expr.span),\n-                is_lit: opt_rhs\n-                    .map_or(false, |(expr, _)| matches!(expr.kind, hir::ExprKind::Lit(_))),\n+                rhs_span: opt_rhs_expr.map(|expr| expr.span),\n+                is_lit: opt_rhs_expr\n+                    .map_or(false, |expr| matches!(expr.kind, hir::ExprKind::Lit(_))),\n                 output_ty: expected.only_has_type(self),\n             },\n         );"}, {"sha": "2cca45de5e9714e8c802b6865dcb566ad157b5f9", "filename": "compiler/rustc_hir_typeck/src/place_op.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03334503b31bd9ab52d4c24b92ad2227a153bcb5/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03334503b31bd9ab52d4c24b92ad2227a153bcb5/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs?ref=03334503b31bd9ab52d4c24b92ad2227a153bcb5", "patch": "@@ -11,7 +11,6 @@ use rustc_middle::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutabili\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n-use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Type-check `*oprnd_expr` with `oprnd_expr` type-checked already.\n@@ -393,11 +392,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(self.typeck_results.borrow().node_substs(expr.hir_id).type_at(1))\n             }\n         };\n-        let arg_tys = match arg_ty {\n-            None => &[],\n-            Some(ref ty) => slice::from_ref(ty),\n-        };\n-\n+        let arg_tys = arg_ty.as_slice();\n         let method = self.try_mutable_overloaded_place_op(expr.span, base_ty, arg_tys, op);\n         let method = match method {\n             Some(ok) => self.register_infer_ok_obligations(ok),"}]}