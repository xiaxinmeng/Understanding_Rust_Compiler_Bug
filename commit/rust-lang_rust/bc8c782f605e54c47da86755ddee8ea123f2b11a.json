{"sha": "bc8c782f605e54c47da86755ddee8ea123f2b11a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOGM3ODJmNjA1ZTU0YzQ3ZGE4Njc1NWRkZWU4ZWExMjNmMmIxMWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-10T18:31:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-10T18:31:09Z"}, "message": "Rollup merge of #60659 - nnethercote:tweak-Symbol-and-InternedString, r=Zoxc\n\nTweak `Symbol` and `InternedString`\n\nSome minor improvements to speed and code cleanliness.\n\nr? @Zoxc", "tree": {"sha": "21c2cdb7c3ba9745cd8d1b9dceb3ed51063acc9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c2cdb7c3ba9745cd8d1b9dceb3ed51063acc9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc8c782f605e54c47da86755ddee8ea123f2b11a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc1cNtCRBK7hj4Ov3rIwAAdHIIAFJG9XQgYepRfvUQJO4sL2gt\n8aNZqE2K79XIaHM6PZw2n/M8uFR6tKbce+ftfYws/DhERpee/5b8POehCQ6SNrPA\nidebzukdW5eL6y1fWwuZf0jlvltoYC7IzHHCC90XdpzUGZ5qASVMIMpZmgCou/De\nqZspy6WKbTUdC8G5nj+m15V/RVmOEsFIE3dfCMx/w1UjcLDLNAePI3ywp3i1MTOj\nO1WJbKOminaN9lWd2Uf8RAY7yMlgX7A7DfanBQjIvyR074j333q8Xxn75hSaot7t\nLNqQEw0IXj626nwjfrn9zbTnorRh6rrLp6acO3j2ttl14mHD9I0eBPAkY1gwCDY=\n=HhRQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 21c2cdb7c3ba9745cd8d1b9dceb3ed51063acc9c\nparent 20dff29b354e99e2675c4a1b94a7a8f3aa5bcedd\nparent e53bb1aefb0aba8fcadaf73b2c0f334dd36c2b23\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557513069 +0200\ncommitter GitHub <noreply@github.com> 1557513069 +0200\n\nRollup merge of #60659 - nnethercote:tweak-Symbol-and-InternedString, r=Zoxc\n\nTweak `Symbol` and `InternedString`\n\nSome minor improvements to speed and code cleanliness.\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8c782f605e54c47da86755ddee8ea123f2b11a", "html_url": "https://github.com/rust-lang/rust/commit/bc8c782f605e54c47da86755ddee8ea123f2b11a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc8c782f605e54c47da86755ddee8ea123f2b11a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20dff29b354e99e2675c4a1b94a7a8f3aa5bcedd", "url": "https://api.github.com/repos/rust-lang/rust/commits/20dff29b354e99e2675c4a1b94a7a8f3aa5bcedd", "html_url": "https://github.com/rust-lang/rust/commit/20dff29b354e99e2675c4a1b94a7a8f3aa5bcedd"}, {"sha": "e53bb1aefb0aba8fcadaf73b2c0f334dd36c2b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/e53bb1aefb0aba8fcadaf73b2c0f334dd36c2b23", "html_url": "https://github.com/rust-lang/rust/commit/e53bb1aefb0aba8fcadaf73b2c0f334dd36c2b23"}], "stats": {"total": 84, "additions": 60, "deletions": 24}, "files": [{"sha": "d0ba09af30b061cbd1e3084851b0f848000fd075", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 60, "deletions": 24, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/bc8c782f605e54c47da86755ddee8ea123f2b11a/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8c782f605e54c47da86755ddee8ea123f2b11a/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=bc8c782f605e54c47da86755ddee8ea123f2b11a", "patch": "@@ -344,9 +344,22 @@ impl Decodable for Ident {\n     }\n }\n \n-/// A symbol is an interned or gensymed string. The use of `newtype_index!` means\n-/// that `Option<Symbol>` only takes up 4 bytes, because `newtype_index!` reserves\n-/// the last 256 values for tagging purposes.\n+/// A symbol is an interned or gensymed string. A gensym is a symbol that is\n+/// never equal to any other symbol. E.g.:\n+/// ```\n+/// assert_eq!(Symbol::intern(\"x\"), Symbol::intern(\"x\"))\n+/// assert_ne!(Symbol::gensym(\"x\"), Symbol::intern(\"x\"))\n+/// assert_ne!(Symbol::gensym(\"x\"), Symbol::gensym(\"x\"))\n+/// ```\n+/// Conceptually, a gensym can be thought of as a normal symbol with an\n+/// invisible unique suffix. Gensyms are useful when creating new identifiers\n+/// that must not match any existing identifiers, e.g. during macro expansion\n+/// and syntax desugaring.\n+///\n+/// Internally, a Symbol is implemented as an index, and all operations\n+/// (including hashing, equality, and ordering) operate on that index. The use\n+/// of `newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,\n+/// because `newtype_index!` reserves the last 256 values for tagging purposes.\n ///\n /// Note that `Symbol` cannot directly be a `newtype_index!` because it implements\n /// `fmt::Debug`, `Encodable`, and `Decodable` in special ways.\n@@ -367,10 +380,6 @@ impl Symbol {\n         with_interner(|interner| interner.intern(string))\n     }\n \n-    pub fn interned(self) -> Self {\n-        with_interner(|interner| interner.interned(self))\n-    }\n-\n     /// Gensyms a new `usize`, using the current interner.\n     pub fn gensym(string: &str) -> Self {\n         with_interner(|interner| interner.gensym(string))\n@@ -380,6 +389,7 @@ impl Symbol {\n         with_interner(|interner| interner.gensymed(self))\n     }\n \n+    // WARNING: this function is deprecated and will be removed in the future.\n     pub fn is_gensymed(self) -> bool {\n         with_interner(|interner| interner.is_gensymed(self))\n     }\n@@ -488,11 +498,11 @@ impl Interner {\n         name\n     }\n \n-    pub fn interned(&self, symbol: Symbol) -> Symbol {\n+    fn interned(&self, symbol: Symbol) -> Symbol {\n         if (symbol.0.as_usize()) < self.strings.len() {\n             symbol\n         } else {\n-            self.interned(self.gensyms[(SymbolIndex::MAX_AS_U32 - symbol.0.as_u32()) as usize])\n+            self.gensyms[(SymbolIndex::MAX_AS_U32 - symbol.0.as_u32()) as usize]\n         }\n     }\n \n@@ -510,10 +520,15 @@ impl Interner {\n         symbol.0.as_usize() >= self.strings.len()\n     }\n \n+    // Get the symbol as a string. `Symbol::as_str()` should be used in\n+    // preference to this function.\n     pub fn get(&self, symbol: Symbol) -> &str {\n         match self.strings.get(symbol.0.as_usize()) {\n             Some(string) => string,\n-            None => self.get(self.gensyms[(SymbolIndex::MAX_AS_U32 - symbol.0.as_u32()) as usize]),\n+            None => {\n+                let symbol = self.gensyms[(SymbolIndex::MAX_AS_U32 - symbol.0.as_u32()) as usize];\n+                self.strings[symbol.0.as_usize()]\n+            }\n         }\n     }\n }\n@@ -611,11 +626,17 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n     GLOBALS.with(|globals| f(&mut *globals.symbol_interner.lock()))\n }\n \n-/// Represents a string stored in the interner. Because the interner outlives any thread\n-/// which uses this type, we can safely treat `string` which points to interner data,\n-/// as an immortal string, as long as this type never crosses between threads.\n-// FIXME: ensure that the interner outlives any thread which uses `LocalInternedString`,\n-// by creating a new thread right after constructing the interner.\n+/// An alternative to `Symbol` and `InternedString`, useful when the chars\n+/// within the symbol need to be accessed. It is best used for temporary\n+/// values.\n+///\n+/// Because the interner outlives any thread which uses this type, we can\n+/// safely treat `string` which points to interner data, as an immortal string,\n+/// as long as this type never crosses between threads.\n+//\n+// FIXME: ensure that the interner outlives any thread which uses\n+// `LocalInternedString`, by creating a new thread right after constructing the\n+// interner.\n #[derive(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n pub struct LocalInternedString {\n     string: &'static str,\n@@ -708,7 +729,19 @@ impl Encodable for LocalInternedString {\n     }\n }\n \n-/// Represents a string stored in the string interner.\n+/// An alternative to `Symbol` that is focused on string contents. It has two\n+/// main differences to `Symbol`.\n+///\n+/// First, its implementations of `Hash`, `PartialOrd` and `Ord` work with the\n+/// string chars rather than the symbol integer. This is useful when hash\n+/// stability is required across compile sessions, or a guaranteed sort\n+/// ordering is required.\n+///\n+/// Second, gensym-ness is irrelevant. E.g.:\n+/// ```\n+/// assert_ne!(Symbol::gensym(\"x\"), Symbol::gensym(\"x\"))\n+/// assert_eq!(Symbol::gensym(\"x\").as_interned_str(), Symbol::gensym(\"x\").as_interned_str())\n+/// ```\n #[derive(Clone, Copy, Eq)]\n pub struct InternedString {\n     symbol: Symbol,\n@@ -725,6 +758,15 @@ impl InternedString {\n         unsafe { f(&*str) }\n     }\n \n+    fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: &InternedString, f: F) -> R {\n+        let (self_str, other_str) = with_interner(|interner| {\n+            (interner.get(self.symbol) as *const str,\n+             interner.get(other.symbol) as *const str)\n+        });\n+        // This is safe for the same reason that `with` is safe.\n+        unsafe { f(&*self_str, &*other_str) }\n+    }\n+\n     pub fn as_symbol(self) -> Symbol {\n         self.symbol\n     }\n@@ -745,7 +787,7 @@ impl PartialOrd<InternedString> for InternedString {\n         if self.symbol == other.symbol {\n             return Some(Ordering::Equal);\n         }\n-        self.with(|self_str| other.with(|other_str| self_str.partial_cmp(other_str)))\n+        self.with2(other, |self_str, other_str| self_str.partial_cmp(other_str))\n     }\n }\n \n@@ -754,7 +796,7 @@ impl Ord for InternedString {\n         if self.symbol == other.symbol {\n             return Ordering::Equal;\n         }\n-        self.with(|self_str| other.with(|other_str| self_str.cmp(&other_str)))\n+        self.with2(other, |self_str, other_str| self_str.cmp(other_str))\n     }\n }\n \n@@ -794,12 +836,6 @@ impl<'a> PartialEq<InternedString> for &'a String {\n     }\n }\n \n-impl std::convert::From<InternedString> for String {\n-    fn from(val: InternedString) -> String {\n-        val.as_symbol().to_string()\n-    }\n-}\n-\n impl fmt::Debug for InternedString {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.with(|str| fmt::Debug::fmt(&str, f))"}]}