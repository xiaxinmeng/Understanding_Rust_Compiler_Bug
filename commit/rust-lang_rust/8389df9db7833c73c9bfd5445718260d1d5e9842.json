{"sha": "8389df9db7833c73c9bfd5445718260d1d5e9842", "node_id": "C_kwDOAAsO6NoAKDgzODlkZjlkYjc4MzNjNzNjOWJmZDU0NDU3MTgyNjBkMWQ1ZTk4NDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-11T05:31:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-11T05:31:11Z"}, "message": "Auto merge of #7877 - dswij:no-std-fp, r=camsteffen\n\n[`swap`] lints now check if there is `no_std` or `no_core` attribute\n\nCloses #7858\n\nchangelog: [`swap`] lints now check if there is `no_std` or `no_core` attribute", "tree": {"sha": "274c4639188bca7d335675907eb5a1387c01cb1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274c4639188bca7d335675907eb5a1387c01cb1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8389df9db7833c73c9bfd5445718260d1d5e9842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8389df9db7833c73c9bfd5445718260d1d5e9842", "html_url": "https://github.com/rust-lang/rust/commit/8389df9db7833c73c9bfd5445718260d1d5e9842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8389df9db7833c73c9bfd5445718260d1d5e9842/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e170357146b37cef8764ada47e4727e237b80b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e170357146b37cef8764ada47e4727e237b80b1", "html_url": "https://github.com/rust-lang/rust/commit/2e170357146b37cef8764ada47e4727e237b80b1"}, {"sha": "dcd1a16dd059fdc2c2678c51777f8af8a3a6b394", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd1a16dd059fdc2c2678c51777f8af8a3a6b394", "html_url": "https://github.com/rust-lang/rust/commit/dcd1a16dd059fdc2c2678c51777f8af8a3a6b394"}], "stats": {"total": 111, "additions": 87, "deletions": 24}, "files": [{"sha": "02fb6b79dc47cd9814bb78822413b0c443599606", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8389df9db7833c73c9bfd5445718260d1d5e9842/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8389df9db7833c73c9bfd5445718260d1d5e9842/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8389df9db7833c73c9bfd5445718260d1d5e9842", "patch": "@@ -8,6 +8,7 @@\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n #![feature(control_flow_enum)]\n+#![feature(let_else)]\n #![recursion_limit = \"512\"]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![allow(clippy::missing_docs_in_private_items, clippy::must_use_candidate)]"}, {"sha": "bd779124deeeda10b8f38e379192f78e8702488f", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8389df9db7833c73c9bfd5445718260d1d5e9842/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8389df9db7833c73c9bfd5445718260d1d5e9842/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=8389df9db7833c73c9bfd5445718260d1d5e9842", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{can_mut_borrow_both, differing_macro_contexts, eq_expr_value};\n+use clippy_utils::{can_mut_borrow_both, differing_macro_contexts, eq_expr_value, std_or_core};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, PatKind, QPath, Stmt, StmtKind};\n@@ -113,6 +113,8 @@ fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, spa\n \n     let first = Sugg::hir_with_applicability(cx, e1, \"..\", &mut applicability);\n     let second = Sugg::hir_with_applicability(cx, e2, \"..\", &mut applicability);\n+    let Some(sugg) = std_or_core(cx) else { return };\n+\n     span_lint_and_then(\n         cx,\n         MANUAL_SWAP,\n@@ -122,11 +124,11 @@ fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, spa\n             diag.span_suggestion(\n                 span,\n                 \"try\",\n-                format!(\"std::mem::swap({}, {})\", first.mut_addr(), second.mut_addr()),\n+                format!(\"{}::mem::swap({}, {})\", sugg, first.mut_addr(), second.mut_addr()),\n                 applicability,\n             );\n             if !is_xor_based {\n-                diag.note(\"or maybe you should use `std::mem::replace`?\");\n+                diag.note(&format!(\"or maybe you should use `{}::mem::replace`?\", sugg));\n             }\n         },\n     );\n@@ -187,26 +189,30 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n                 };\n \n                 let span = first.span.to(second.span);\n+                let Some(sugg) = std_or_core(cx) else { return };\n \n                 span_lint_and_then(cx,\n-                                   ALMOST_SWAPPED,\n-                                   span,\n-                                   &format!(\"this looks like you are trying to swap{}\", what),\n-                                   |diag| {\n-                                       if !what.is_empty() {\n-                                           diag.span_suggestion(\n-                                               span,\n-                                               \"try\",\n-                                               format!(\n-                                                   \"std::mem::swap({}, {})\",\n-                                                   lhs,\n-                                                   rhs,\n-                                               ),\n-                                               Applicability::MaybeIncorrect,\n-                                           );\n-                                           diag.note(\"or maybe you should use `std::mem::replace`?\");\n-                                       }\n-                                   });\n+                    ALMOST_SWAPPED,\n+                    span,\n+                    &format!(\"this looks like you are trying to swap{}\", what),\n+                    |diag| {\n+                        if !what.is_empty() {\n+                            diag.span_suggestion(\n+                                span,\n+                                \"try\",\n+                                format!(\n+                                    \"{}::mem::swap({}, {})\",\n+                                    sugg,\n+                                    lhs,\n+                                    rhs,\n+                                ),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            diag.note(\n+                                &format!(\"or maybe you should use `{}::mem::replace`?\", sugg)\n+                            );\n+                        }\n+                    });\n             }\n         }\n     }"}, {"sha": "3fdea55aaa1bf743d87b77cbf8b7f3a56cee8167", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8389df9db7833c73c9bfd5445718260d1d5e9842/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8389df9db7833c73c9bfd5445718260d1d5e9842/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=8389df9db7833c73c9bfd5445718260d1d5e9842", "patch": "@@ -1402,7 +1402,7 @@ pub fn recurse_or_patterns<'tcx, F: FnMut(&'tcx Pat<'tcx>)>(pat: &'tcx Pat<'tcx>\n /// Checks for the `#[automatically_derived]` attribute all `#[derive]`d\n /// implementations have.\n pub fn is_automatically_derived(attrs: &[ast::Attribute]) -> bool {\n-    attrs.iter().any(|attr| attr.has_name(sym::automatically_derived))\n+    has_attr(attrs, sym::automatically_derived)\n }\n \n /// Remove blocks around an expression.\n@@ -1524,20 +1524,29 @@ pub fn clip(tcx: TyCtxt<'_>, u: u128, ity: rustc_ty::UintTy) -> u128 {\n     (u << amt) >> amt\n }\n \n-pub fn any_parent_is_automatically_derived(tcx: TyCtxt<'_>, node: HirId) -> bool {\n+pub fn has_attr(attrs: &[ast::Attribute], symbol: Symbol) -> bool {\n+    attrs.iter().any(|attr| attr.has_name(symbol))\n+}\n+\n+pub fn any_parent_has_attr(tcx: TyCtxt<'_>, node: HirId, symbol: Symbol) -> bool {\n     let map = &tcx.hir();\n     let mut prev_enclosing_node = None;\n     let mut enclosing_node = node;\n     while Some(enclosing_node) != prev_enclosing_node {\n-        if is_automatically_derived(map.attrs(enclosing_node)) {\n+        if has_attr(map.attrs(enclosing_node), symbol) {\n             return true;\n         }\n         prev_enclosing_node = Some(enclosing_node);\n         enclosing_node = map.get_parent_item(enclosing_node);\n     }\n+\n     false\n }\n \n+pub fn any_parent_is_automatically_derived(tcx: TyCtxt<'_>, node: HirId) -> bool {\n+    any_parent_has_attr(tcx, node, sym::automatically_derived)\n+}\n+\n /// Matches a function call with the given path and returns the arguments.\n ///\n /// Usage:\n@@ -1800,6 +1809,16 @@ pub fn is_expr_final_block_expr(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n     matches!(get_parent_node(tcx, expr.hir_id), Some(Node::Block(..)))\n }\n \n+pub fn std_or_core(cx: &LateContext<'_>) -> Option<&'static str> {\n+    if !is_no_std_crate(cx) {\n+        Some(\"std\")\n+    } else if !is_no_core_crate(cx) {\n+        Some(\"core\")\n+    } else {\n+        None\n+    }\n+}\n+\n pub fn is_no_std_crate(cx: &LateContext<'_>) -> bool {\n     cx.tcx.hir().attrs(hir::CRATE_HIR_ID).iter().any(|attr| {\n         if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n@@ -1810,6 +1829,16 @@ pub fn is_no_std_crate(cx: &LateContext<'_>) -> bool {\n     })\n }\n \n+pub fn is_no_core_crate(cx: &LateContext<'_>) -> bool {\n+    cx.tcx.hir().attrs(hir::CRATE_HIR_ID).iter().any(|attr| {\n+        if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n+            attr.path == sym::no_core\n+        } else {\n+            false\n+        }\n+    })\n+}\n+\n /// Check if parent of a hir node is a trait implementation block.\n /// For example, `f` in\n /// ```rust,ignore"}, {"sha": "f5ff9eed7a1a662eb620119fbe008acebb73ef47", "filename": "tests/ui/crate_level_checks/no_std_swap.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8389df9db7833c73c9bfd5445718260d1d5e9842/tests%2Fui%2Fcrate_level_checks%2Fno_std_swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8389df9db7833c73c9bfd5445718260d1d5e9842/tests%2Fui%2Fcrate_level_checks%2Fno_std_swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fno_std_swap.rs?ref=8389df9db7833c73c9bfd5445718260d1d5e9842", "patch": "@@ -0,0 +1,15 @@\n+#![no_std]\n+#![feature(lang_items, start, libc)]\n+#![crate_type = \"lib\"]\n+\n+use core::panic::PanicInfo;\n+\n+#[warn(clippy::all)]\n+fn main() {\n+    // TODO: do somethjing with swap\n+    let mut a = 42;\n+    let mut b = 1337;\n+\n+    a = b;\n+    b = a;\n+}"}, {"sha": "079f1828cf93a68c091160818220b4f5c569b876", "filename": "tests/ui/crate_level_checks/no_std_swap.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8389df9db7833c73c9bfd5445718260d1d5e9842/tests%2Fui%2Fcrate_level_checks%2Fno_std_swap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8389df9db7833c73c9bfd5445718260d1d5e9842/tests%2Fui%2Fcrate_level_checks%2Fno_std_swap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fno_std_swap.stderr?ref=8389df9db7833c73c9bfd5445718260d1d5e9842", "patch": "@@ -0,0 +1,12 @@\n+error: this looks like you are trying to swap `a` and `b`\n+  --> $DIR/no_std_swap.rs:13:5\n+   |\n+LL | /     a = b;\n+LL | |     b = a;\n+   | |_________^ help: try: `core::mem::swap(&mut a, &mut b)`\n+   |\n+   = note: `-D clippy::almost-swapped` implied by `-D warnings`\n+   = note: or maybe you should use `core::mem::replace`?\n+\n+error: aborting due to previous error\n+"}]}