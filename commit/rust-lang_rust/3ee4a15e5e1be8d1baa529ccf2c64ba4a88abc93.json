{"sha": "3ee4a15e5e1be8d1baa529ccf2c64ba4a88abc93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZTRhMTVlNWUxYmU4ZDFiYWE1MjljY2YyYzY0YmE0YTg4YWJjOTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-18T01:17:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-18T01:17:27Z"}, "message": "core: Don't copy elements in filter_map", "tree": {"sha": "d55aafc8851b696cfb4c13f3b709556c82c15298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d55aafc8851b696cfb4c13f3b709556c82c15298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ee4a15e5e1be8d1baa529ccf2c64ba4a88abc93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee4a15e5e1be8d1baa529ccf2c64ba4a88abc93", "html_url": "https://github.com/rust-lang/rust/commit/3ee4a15e5e1be8d1baa529ccf2c64ba4a88abc93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ee4a15e5e1be8d1baa529ccf2c64ba4a88abc93/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35e9970e29cfc075968e3a1b9d4e1293ab7ab98b", "url": "https://api.github.com/repos/rust-lang/rust/commits/35e9970e29cfc075968e3a1b9d4e1293ab7ab98b", "html_url": "https://github.com/rust-lang/rust/commit/35e9970e29cfc075968e3a1b9d4e1293ab7ab98b"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "6beda8306e2d6d96eba5c45095652b804503ae8a", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ee4a15e5e1be8d1baa529ccf2c64ba4a88abc93/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee4a15e5e1be8d1baa529ccf2c64ba4a88abc93/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=3ee4a15e5e1be8d1baa529ccf2c64ba4a88abc93", "patch": "@@ -430,11 +430,11 @@ Apply a function to each element of a vector and return the results\n If function `f` returns `none` then that element is excluded from\n the resulting vector.\n \"]\n-fn filter_map<T: copy, U: copy>(v: [const T], f: fn(T) -> option<U>)\n+fn filter_map<T: copy, U: copy>(v: [T], f: fn(T) -> option<U>)\n     -> [U] {\n     let mut result = [];\n     for elem: T in v {\n-        alt f(copy elem) {\n+        alt f(elem) {\n           none {/* no-op */ }\n           some(result_elem) { result += [result_elem]; }\n         }"}]}