{"sha": "b5563981136c834a0d03b182c62a21f168f2158a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NTYzOTgxMTM2YzgzNGEwZDAzYjE4MmM2MmEyMWYxNjhmMjE1OGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-13T09:57:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-13T09:57:01Z"}, "message": "Auto merge of #7646 - camsteffen:relative-target, r=flip1995\n\nTarget directory cleanup\n\nchangelog: none\n\n* .cargo/config now has `target-dir` specified so that it is inherited by child projects. The target directory needs to be shared with clippy_dev, but not necessarily at the project root. (cc #7625)\n* Uses `std::env::current_exe` (and its parent directories) whenever possible\n* `CLIPPY_DRIVER_PATH` and `TARGET_LIBS` are no longer required from rustc bootstrap (but `HOST_LIBS` still is). These can be removed from the rustc side after merging.\n* `CLIPPY_DOGFOOD` and the separate target directory are removed. This was originally added to mitigate #7343.\n\nr? `@flip1995`", "tree": {"sha": "452fa5595c0e9f020ee9c2212ddfd0f645cf2e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/452fa5595c0e9f020ee9c2212ddfd0f645cf2e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5563981136c834a0d03b182c62a21f168f2158a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5563981136c834a0d03b182c62a21f168f2158a", "html_url": "https://github.com/rust-lang/rust/commit/b5563981136c834a0d03b182c62a21f168f2158a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5563981136c834a0d03b182c62a21f168f2158a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64b7698a44c2bf090049798a6fac906e96296ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64b7698a44c2bf090049798a6fac906e96296ec", "html_url": "https://github.com/rust-lang/rust/commit/a64b7698a44c2bf090049798a6fac906e96296ec"}, {"sha": "9e08e7f631319a13d763ffe2df5b427b6cef8b0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e08e7f631319a13d763ffe2df5b427b6cef8b0a", "html_url": "https://github.com/rust-lang/rust/commit/9e08e7f631319a13d763ffe2df5b427b6cef8b0a"}], "stats": {"total": 110, "additions": 30, "deletions": 80}, "files": [{"sha": "688473f2f9bfcee25d3d1f7484967cbcd1ec3154", "filename": ".cargo/config", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5563981136c834a0d03b182c62a21f168f2158a/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/b5563981136c834a0d03b182c62a21f168f2158a/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=b5563981136c834a0d03b182c62a21f168f2158a", "patch": "@@ -1,9 +1,10 @@\n [alias]\n uitest = \"test --test compile-test\"\n-dev = \"run --target-dir clippy_dev/target --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --\"\n-lintcheck = \"run --target-dir lintcheck/target --package lintcheck --bin lintcheck --manifest-path lintcheck/Cargo.toml  -- \"\n+dev = \"run --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --\"\n+lintcheck = \"run --package lintcheck --bin lintcheck --manifest-path lintcheck/Cargo.toml  -- \"\n collect-metadata = \"test --test dogfood --features metadata-collector-lint -- run_metadata_collection_lint --ignored\"\n \n [build]\n # -Zbinary-dep-depinfo allows us to track which rlib files to use for compiling UI tests\n rustflags = [\"-Zunstable-options\", \"-Zbinary-dep-depinfo\"]\n+target-dir = \"target\""}, {"sha": "daf0fcc993bad320ff894014596fa13328ba0307", "filename": "clippy_dev/src/bless.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5563981136c834a0d03b182c62a21f168f2158a/clippy_dev%2Fsrc%2Fbless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5563981136c834a0d03b182c62a21f168f2158a/clippy_dev%2Fsrc%2Fbless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fbless.rs?ref=b5563981136c834a0d03b182c62a21f168f2158a", "patch": "@@ -1,7 +1,6 @@\n //! `bless` updates the reference files in the repo with changed output files\n //! from the last test run.\n \n-use std::env;\n use std::ffi::OsStr;\n use std::fs;\n use std::lazy::SyncLazy;\n@@ -10,17 +9,9 @@ use walkdir::WalkDir;\n \n use crate::clippy_project_root;\n \n-// NOTE: this is duplicated with tests/cargo/mod.rs What to do?\n-pub static CARGO_TARGET_DIR: SyncLazy<PathBuf> = SyncLazy::new(|| match env::var_os(\"CARGO_TARGET_DIR\") {\n-    Some(v) => v.into(),\n-    None => env::current_dir().unwrap().join(\"target\"),\n-});\n-\n static CLIPPY_BUILD_TIME: SyncLazy<Option<std::time::SystemTime>> = SyncLazy::new(|| {\n-    let profile = env::var(\"PROFILE\").unwrap_or_else(|_| \"debug\".to_string());\n-    let mut path = PathBuf::from(&**CARGO_TARGET_DIR);\n-    path.push(profile);\n-    path.push(\"cargo-clippy\");\n+    let mut path = std::env::current_exe().unwrap();\n+    path.set_file_name(\"cargo-clippy\");\n     fs::metadata(path).ok()?.modified().ok()\n });\n \n@@ -94,10 +85,7 @@ fn updated_since_clippy_build(path: &Path) -> Option<bool> {\n }\n \n fn build_dir() -> PathBuf {\n-    let profile = env::var(\"PROFILE\").unwrap_or_else(|_| \"debug\".to_string());\n-    let mut path = PathBuf::new();\n-    path.push(CARGO_TARGET_DIR.clone());\n-    path.push(profile);\n-    path.push(\"test_build_base\");\n+    let mut path = std::env::current_exe().unwrap();\n+    path.set_file_name(\"test\");\n     path\n }"}, {"sha": "7ebdd947893e9e1570ed1fe8d31ba32b2b4ffefd", "filename": "src/main.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5563981136c834a0d03b182c62a21f168f2158a/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5563981136c834a0d03b182c62a21f168f2158a/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=b5563981136c834a0d03b182c62a21f168f2158a", "patch": "@@ -4,7 +4,6 @@\n \n use rustc_tools_util::VersionInfo;\n use std::env;\n-use std::ffi::OsString;\n use std::path::PathBuf;\n use std::process::{self, Command};\n \n@@ -14,7 +13,7 @@ Usage:\n     cargo clippy [options] [--] [<opts>...]\n \n Common options:\n-    --no-deps                Run Clippy only on the given crate, without linting the dependencies \n+    --no-deps                Run Clippy only on the given crate, without linting the dependencies\n     --fix                    Automatically apply lint suggestions. This flag implies `--no-deps`\n     -h, --help               Print this message\n     -V, --version            Print version info and exit\n@@ -116,22 +115,6 @@ impl ClippyCmd {\n         path\n     }\n \n-    fn target_dir() -> Option<(&'static str, OsString)> {\n-        env::var_os(\"CLIPPY_DOGFOOD\")\n-            .map(|_| {\n-                env::var_os(\"CARGO_MANIFEST_DIR\").map_or_else(\n-                    || std::ffi::OsString::from(\"clippy_dogfood\"),\n-                    |d| {\n-                        std::path::PathBuf::from(d)\n-                            .join(\"target\")\n-                            .join(\"dogfood\")\n-                            .into_os_string()\n-                    },\n-                )\n-            })\n-            .map(|p| (\"CARGO_TARGET_DIR\", p))\n-    }\n-\n     fn into_std_cmd(self) -> Command {\n         let mut cmd = Command::new(\"cargo\");\n         let clippy_args: String = self\n@@ -141,7 +124,6 @@ impl ClippyCmd {\n             .collect();\n \n         cmd.env(\"RUSTC_WORKSPACE_WRAPPER\", Self::path())\n-            .envs(ClippyCmd::target_dir())\n             .env(\"CLIPPY_ARGS\", clippy_args)\n             .arg(self.cargo_subcommand)\n             .args(&self.args);"}, {"sha": "4dbe71e4b6ad6ae032be2c43649c6deba8aecf37", "filename": "tests/cargo/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b5563981136c834a0d03b182c62a21f168f2158a/tests%2Fcargo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5563981136c834a0d03b182c62a21f168f2158a/tests%2Fcargo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo%2Fmod.rs?ref=b5563981136c834a0d03b182c62a21f168f2158a", "patch": "@@ -1,25 +1,3 @@\n-use std::env;\n-use std::lazy::SyncLazy;\n-use std::path::PathBuf;\n-\n-pub static CARGO_TARGET_DIR: SyncLazy<PathBuf> = SyncLazy::new(|| match env::var_os(\"CARGO_TARGET_DIR\") {\n-    Some(v) => v.into(),\n-    None => env::current_dir().unwrap().join(\"target\"),\n-});\n-\n-pub static TARGET_LIB: SyncLazy<PathBuf> = SyncLazy::new(|| {\n-    if let Some(path) = option_env!(\"TARGET_LIBS\") {\n-        path.into()\n-    } else {\n-        let mut dir = CARGO_TARGET_DIR.clone();\n-        if let Some(target) = env::var_os(\"CARGO_BUILD_TARGET\") {\n-            dir.push(target);\n-        }\n-        dir.push(env!(\"PROFILE\"));\n-        dir\n-    }\n-});\n-\n #[must_use]\n pub fn is_rustc_test_suite() -> bool {\n     option_env!(\"RUSTC_TEST_SUITE\").is_some()"}, {"sha": "c9d1011159589f927b8db804d9bd2a20834380d0", "filename": "tests/compile-test.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b5563981136c834a0d03b182c62a21f168f2158a/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5563981136c834a0d03b182c62a21f168f2158a/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=b5563981136c834a0d03b182c62a21f168f2158a", "patch": "@@ -1,5 +1,4 @@\n #![feature(test)] // compiletest_rs requires this attribute\n-#![feature(once_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n@@ -46,14 +45,6 @@ extern crate quote;\n #[allow(unused_extern_crates)]\n extern crate syn;\n \n-fn host_lib() -> PathBuf {\n-    option_env!(\"HOST_LIBS\").map_or(cargo::CARGO_TARGET_DIR.join(env!(\"PROFILE\")), PathBuf::from)\n-}\n-\n-fn clippy_driver_path() -> PathBuf {\n-    option_env!(\"CLIPPY_DRIVER_PATH\").map_or(cargo::TARGET_LIB.join(\"clippy-driver\"), PathBuf::from)\n-}\n-\n /// Produces a string with an `--extern` flag for all UI test crate\n /// dependencies.\n ///\n@@ -104,7 +95,7 @@ fn extern_flags() -> String {\n     }\n     crates\n         .into_iter()\n-        .map(|(name, path)| format!(\"--extern {}={} \", name, path))\n+        .map(|(name, path)| format!(\" --extern {}={}\", name, path))\n         .collect()\n }\n \n@@ -120,19 +111,29 @@ fn default_config() -> compiletest::Config {\n         config.run_lib_path = path.clone();\n         config.compile_lib_path = path;\n     }\n+    let current_exe_path = std::env::current_exe().unwrap();\n+    let deps_path = current_exe_path.parent().unwrap();\n+    let profile_path = deps_path.parent().unwrap();\n \n     // Using `-L dependency={}` enforces that external dependencies are added with `--extern`.\n     // This is valuable because a) it allows us to monitor what external dependencies are used\n     // and b) it ensures that conflicting rlibs are resolved properly.\n+    let host_libs = option_env!(\"HOST_LIBS\")\n+        .map(|p| format!(\" -L dependency={}\", Path::new(p).join(\"deps\").display()))\n+        .unwrap_or_default();\n     config.target_rustcflags = Some(format!(\n-        \"--emit=metadata -L dependency={} -L dependency={} -Dwarnings -Zui-testing {}\",\n-        host_lib().join(\"deps\").display(),\n-        cargo::TARGET_LIB.join(\"deps\").display(),\n+        \"--emit=metadata -Dwarnings -Zui-testing -L dependency={}{}{}\",\n+        deps_path.display(),\n+        host_libs,\n         extern_flags(),\n     ));\n \n-    config.build_base = host_lib().join(\"test_build_base\");\n-    config.rustc_path = clippy_driver_path();\n+    config.build_base = profile_path.join(\"test\");\n+    config.rustc_path = profile_path.join(if cfg!(windows) {\n+        \"clippy-driver.exe\"\n+    } else {\n+        \"clippy-driver\"\n+    });\n     config\n }\n "}, {"sha": "a37cdfed126f6cea9c46d063abf01ac7ff801e5f", "filename": "tests/dogfood.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5563981136c834a0d03b182c62a21f168f2158a/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5563981136c834a0d03b182c62a21f168f2158a/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=b5563981136c834a0d03b182c62a21f168f2158a", "patch": "@@ -15,7 +15,12 @@ use std::process::Command;\n \n mod cargo;\n \n-static CLIPPY_PATH: SyncLazy<PathBuf> = SyncLazy::new(|| cargo::TARGET_LIB.join(\"cargo-clippy\"));\n+static CLIPPY_PATH: SyncLazy<PathBuf> = SyncLazy::new(|| {\n+    let mut path = std::env::current_exe().unwrap();\n+    assert!(path.pop()); // deps\n+    path.set_file_name(\"cargo-clippy\");\n+    path\n+});\n \n #[test]\n fn dogfood_clippy() {\n@@ -28,7 +33,6 @@ fn dogfood_clippy() {\n     let mut command = Command::new(&*CLIPPY_PATH);\n     command\n         .current_dir(root_dir)\n-        .env(\"CLIPPY_DOGFOOD\", \"1\")\n         .env(\"CARGO_INCREMENTAL\", \"0\")\n         .arg(\"clippy\")\n         .arg(\"--all-targets\")\n@@ -74,7 +78,6 @@ fn test_no_deps_ignores_path_deps_in_workspaces() {\n     // Make sure that with the `--no-deps` argument Clippy does not run on `path_dep`.\n     let output = Command::new(&*CLIPPY_PATH)\n         .current_dir(&cwd)\n-        .env(\"CLIPPY_DOGFOOD\", \"1\")\n         .env(\"CARGO_INCREMENTAL\", \"0\")\n         .arg(\"clippy\")\n         .args(&[\"-p\", \"subcrate\"])\n@@ -94,7 +97,6 @@ fn test_no_deps_ignores_path_deps_in_workspaces() {\n         // Test that without the `--no-deps` argument, `path_dep` is linted.\n         let output = Command::new(&*CLIPPY_PATH)\n             .current_dir(&cwd)\n-            .env(\"CLIPPY_DOGFOOD\", \"1\")\n             .env(\"CARGO_INCREMENTAL\", \"0\")\n             .arg(\"clippy\")\n             .args(&[\"-p\", \"subcrate\"])\n@@ -121,7 +123,6 @@ fn test_no_deps_ignores_path_deps_in_workspaces() {\n     let successful_build = || {\n         let output = Command::new(&*CLIPPY_PATH)\n             .current_dir(&cwd)\n-            .env(\"CLIPPY_DOGFOOD\", \"1\")\n             .env(\"CARGO_INCREMENTAL\", \"0\")\n             .arg(\"clippy\")\n             .args(&[\"-p\", \"subcrate\"])\n@@ -223,7 +224,6 @@ fn run_clippy_for_project(project: &str) {\n \n     command\n         .current_dir(root_dir.join(project))\n-        .env(\"CLIPPY_DOGFOOD\", \"1\")\n         .env(\"CARGO_INCREMENTAL\", \"0\")\n         .arg(\"clippy\")\n         .arg(\"--all-targets\")"}]}