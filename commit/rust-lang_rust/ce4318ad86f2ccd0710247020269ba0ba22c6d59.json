{"sha": "ce4318ad86f2ccd0710247020269ba0ba22c6d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNDMxOGFkODZmMmNjZDA3MTAyNDcwMjAyNjliYTBiYTIyYzZkNTk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-02T23:03:02Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-12T06:29:17Z"}, "message": "Reviewer comments", "tree": {"sha": "52cd13a126fe44a719ddcf8b4f0409acf3c60b6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52cd13a126fe44a719ddcf8b4f0409acf3c60b6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce4318ad86f2ccd0710247020269ba0ba22c6d59", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4318ad86f2ccd0710247020269ba0ba22c6d59", "html_url": "https://github.com/rust-lang/rust/commit/ce4318ad86f2ccd0710247020269ba0ba22c6d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce4318ad86f2ccd0710247020269ba0ba22c6d59/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae8ba88424652a0d263f193cd9c31e024a000546", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8ba88424652a0d263f193cd9c31e024a000546", "html_url": "https://github.com/rust-lang/rust/commit/ae8ba88424652a0d263f193cd9c31e024a000546"}], "stats": {"total": 164, "additions": 76, "deletions": 88}, "files": [{"sha": "0cdf6a68e44be343a2943c99c7496add4127ef54", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -151,9 +151,6 @@ register_diagnostics!(\n     E0172,\n     E0173,\n     E0174,\n-    E0175,\n-    E0176,\n     E0177,\n-    E0178,\n-    E0179\n+    E0178\n )"}, {"sha": "79bb19a1e535f245dc47527d47769979ff7a4967", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -1454,12 +1454,12 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n         }\n         for predicate in generics.where_clause.predicates.iter() {\n             match predicate {\n-                &ast::BoundPredicate(ref bound_pred) => {\n+                &ast::WherePredicate::BoundPredicate(ref bound_pred) => {\n                     for bound in bound_pred.bounds.iter() {\n                         self.check_ty_param_bound(bound_pred.span, bound)\n                     }\n                 }\n-                &ast::EqPredicate(ref eq_pred) => {\n+                &ast::WherePredicate::EqPredicate(ref eq_pred) => {\n                     self.visit_ty(&*eq_pred.ty);\n                 }\n             }"}, {"sha": "2899f60f736af299579a2ba24b7efaaed1c88535", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -4595,7 +4595,7 @@ impl<'a> Resolver<'a> {\n     fn resolve_where_clause(&mut self, where_clause: &ast::WhereClause) {\n         for predicate in where_clause.predicates.iter() {\n             match predicate {\n-                &ast::BoundPredicate(ref bound_pred) => {\n+                &ast::WherePredicate::BoundPredicate(ref bound_pred) => {\n                     match self.resolve_identifier(bound_pred.ident,\n                                                   TypeNS,\n                                                   true,\n@@ -4617,7 +4617,7 @@ impl<'a> Resolver<'a> {\n                                                           TraitBoundingTypeParameter);\n                     }\n                 }\n-                &ast::EqPredicate(ref eq_pred) => {\n+                &ast::WherePredicate::EqPredicate(ref eq_pred) => {\n                     match self.resolve_path(eq_pred.id, &eq_pred.path, TypeNS, true) {\n                         Some((def @ DefTyParam(..), last_private)) => {\n                             self.record_def(eq_pred.id, (def, last_private));"}, {"sha": "3ab94d3ca66197952ca35b0129761e9fb7bfcc70", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -211,11 +211,17 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n         }\n         for predicate in generics.where_clause.predicates.iter() {\n             match predicate {\n-                &ast::BoundPredicate(ast::WhereBoundPredicate{ident, ref bounds, span, ..}) => {\n+                &ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate{ ident,\n+                                                                               ref bounds,\n+                                                                               span,\n+                                                                               .. }) => {\n                     self.visit_ident(span, ident);\n                     visit::walk_ty_param_bounds_helper(self, bounds);\n                 }\n-                &ast::EqPredicate(ast::WhereEqPredicate{id, ref path, ref ty, ..}) => {\n+                &ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ id,\n+                                                                         ref path,\n+                                                                         ref ty,\n+                                                                         .. }) => {\n                     self.visit_path(path, id);\n                     self.visit_ty(&**ty);\n                 }\n@@ -495,10 +501,10 @@ fn early_bound_lifetime_names(generics: &ast::Generics) -> Vec<ast::Name> {\n         }\n         for predicate in generics.where_clause.predicates.iter() {\n             match predicate {\n-                &ast::BoundPredicate(ast::WhereBoundPredicate{ref bounds, ..}) => {\n+                &ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate{ref bounds, ..}) => {\n                     visit::walk_ty_param_bounds_helper(&mut collector, bounds);\n                 }\n-                _ => {}\n+                &ast::WherePredicate::EqPredicate(_) => unimplemented!()\n             }\n         }\n     }"}, {"sha": "c84446a2e4566989ffa9c7aa80848eef2e8fe12a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -367,13 +367,11 @@ fn create_substs_for_ast_path<'tcx,AC,RS>(\n         }\n     }\n \n-    let mut matched_assoc = 0u;\n     for formal_assoc in decl_generics.types.get_slice(AssocSpace).iter() {\n         let mut found = false;\n         for &(ident, ty) in assoc_bindings.iter() {\n             if formal_assoc.name.ident() == ident {\n                 substs.types.push(AssocSpace, ty);\n-                matched_assoc += 1;\n                 found = true;\n                 break;\n             }\n@@ -385,23 +383,17 @@ fn create_substs_for_ast_path<'tcx,AC,RS>(\n                                                formal_assoc.def_id) {\n                 Some(ty) => {\n                     substs.types.push(AssocSpace, ty);\n-                    matched_assoc += 1;\n                 }\n                 None => {\n-                    span_err!(this.tcx().sess, span, E0179,\n+                    substs.types.push(AssocSpace, ty::mk_err());\n+                    span_err!(this.tcx().sess, span, E0171,\n                               \"missing type for associated type `{}`\",\n                               token::get_ident(formal_assoc.name.ident()));\n                 }\n             }\n         }\n     }\n \n-    if decl_generics.types.get_slice(AssocSpace).len() != matched_assoc {\n-        span_err!(tcx.sess, span, E0171,\n-                  \"wrong number of associated type parameters: expected {}, found {}\",\n-                  decl_generics.types.get_slice(AssocSpace).len(), matched_assoc);\n-    }\n-\n     for &(ident, _) in assoc_bindings.iter() {\n         let mut formal_idents = decl_generics.types.get_slice(AssocSpace)\n                                 .iter().map(|t| t.name.ident());"}, {"sha": "7e29e7078d4889fb1aed849c2cd8e0145c4cb0e3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 54, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -5152,18 +5152,12 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             }\n \n             Some(space) => {\n-                let trait_def_id = match def {\n-                    def::DefTrait(did) => Some(did),\n-                    _ => None\n-                };\n                 push_explicit_parameters_from_segment_to_substs(fcx,\n                                                                 space,\n                                                                 path.span,\n                                                                 type_defs,\n                                                                 region_defs,\n                                                                 segment,\n-                                                                trait_def_id,\n-                                                                path.span,\n                                                                 &mut substs);\n             }\n         }\n@@ -5250,14 +5244,12 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         type_defs: &VecPerParamSpace<ty::TypeParameterDef<'tcx>>,\n         region_defs: &VecPerParamSpace<ty::RegionParameterDef>,\n         segment: &ast::PathSegment,\n-        trait_def_id: Option<DefId>,\n-        path_span: Span,\n         substs: &mut Substs<'tcx>)\n     {\n         match segment.parameters {\n             ast::AngleBracketedParameters(ref data) => {\n                 push_explicit_angle_bracketed_parameters_from_segment_to_substs(\n-                    fcx, space, type_defs, region_defs, data, trait_def_id, path_span, substs);\n+                    fcx, space, type_defs, region_defs, data, substs);\n             }\n \n             ast::ParenthesizedParameters(ref data) => {\n@@ -5273,8 +5265,6 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         type_defs: &VecPerParamSpace<ty::TypeParameterDef<'tcx>>,\n         region_defs: &VecPerParamSpace<ty::RegionParameterDef>,\n         data: &ast::AngleBracketedParameterData,\n-        trait_def_id: Option<DefId>,\n-        path_span: Span,\n         substs: &mut Substs<'tcx>)\n     {\n         {\n@@ -5296,49 +5286,11 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             }\n         }\n \n-        if let Some(trait_def_id) = trait_def_id {\n-            let ref items = fcx.tcx().trait_item_def_ids.borrow()[trait_def_id];\n-            let mut assoc_tys = Vec::new();\n-            for item in items.iter() {\n-                if let &ty::ImplOrTraitItemId::TypeTraitItemId(id) = item {\n-                    if let ty::ImplOrTraitItem::TypeTraitItem(ref ty) =\n-                      fcx.tcx().impl_or_trait_items.borrow()[id] {\n-                        assoc_tys.push(ty.clone());\n-                    }\n-                }\n-            }\n-\n-            if data.bindings.len() > assoc_tys.len() {\n-                span_err!(fcx.tcx().sess, data.bindings[assoc_tys.len()].span, E0174,\n-                    \"too many type equality constraints provided: \\\n-                     expected at most {} constraint(s), \\\n-                     found {} constraint(s)\",\n-                     assoc_tys.len(), data.types.len());\n-                substs.types.truncate(space, 0);\n-            } else if data.bindings.len() > 0 {\n-                for assoc_ty in assoc_tys.iter() {\n-                    let mut matched = false;\n-                    for binding in data.bindings.iter() {\n-                        if assoc_ty.name.ident() == binding.ident {\n-                            let t = fcx.to_ty(&*binding.ty);\n-                            substs.types.push(space, t);\n-                            matched = true;\n-                            break;\n-                        }\n-                    }\n-                    if !matched {\n-                        span_err!(fcx.tcx().sess, path_span, E0176,\n-                            \"missing type equality constraint for associated type: {}\",\n-                             assoc_ty.name);\n-                        substs.types.truncate(space, 0);\n-                        break;\n-                    }\n-                }\n-            }\n-        } else if data.bindings.len() > 0 {\n-            span_err!(fcx.tcx().sess, path_span, E0175,\n-                \"type equality constraints provided on a non-trait type\");\n-            substs.types.truncate(space, 0);\n+        if data.bindings.len() > 0 {\n+            span_err!(fcx.tcx().sess, data.bindings[0].span, E0182,\n+                      \"unexpected binding of associated item in expression path \\\n+                       (only allowed in type paths)\");\n+            substs.types.truncate(subst::ParamSpace::AssocSpace, 0);\n         }\n \n         {"}, {"sha": "defad95f749bd01761ff07687b491fe6d68123f3", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -562,7 +562,7 @@ fn enforce_trait_manually_implementable(tcx: &ty::ctxt, sp: Span, trait_def_id:\n     } else {\n         return // everything OK\n     };\n-    span_err!(tcx.sess, sp, E0173, \"manual implementations of `{}` are experimental\", trait_name);\n+    span_err!(tcx.sess, sp, E0183, \"manual implementations of `{}` are experimental\", trait_name);\n     span_help!(tcx.sess, sp,\n                \"add `#![feature(unboxed_closures)]` to the crate attributes to enable\");\n }"}, {"sha": "2e1ba846584d2d053e4c098269dcb1e57cad48bf", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -1840,7 +1840,7 @@ fn ty_generics<'tcx,AC>(this: &AC,\n                 let trait_def = ty::lookup_trait_def(this.tcx(), trait_def_id);\n                 let associated_type_defs = trait_def.generics.types.get_slice(subst::AssocSpace);\n \n-                // Find any assocaited type bindings in the bound.\n+                // Find any associated type bindings in the bound.\n                 let ref segments = ast_trait_ref.trait_ref.path.segments;\n                 let bindings = segments[segments.len() -1].parameters.bindings();\n \n@@ -2042,7 +2042,7 @@ fn merge_param_bounds<'a>(tcx: &ty::ctxt,\n \n     for predicate in where_clause.predicates.iter() {\n         match predicate {\n-            &ast::BoundPredicate(ref bound_pred) => {\n+            &ast::WherePredicate::BoundPredicate(ref bound_pred) => {\n                 let predicate_param_id =\n                     tcx.def_map\n                        .borrow()\n@@ -2057,7 +2057,7 @@ fn merge_param_bounds<'a>(tcx: &ty::ctxt,\n                     result.push(bound);\n                 }\n             }\n-            &ast::EqPredicate(_) => panic!(\"not implemented\")\n+            &ast::WherePredicate::EqPredicate(_) => panic!(\"not implemented\")\n         }\n     }\n "}, {"sha": "ecd3cafd91f1617b24fa1b8d962ac1e9ac85b562", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -149,5 +149,11 @@ register_diagnostics!(\n     E0171,\n     E0172,\n     E0173, // manual implementations of unboxed closure traits are experimental\n-    E0174 // explicit use of unboxed closure methods are experimental\n+    E0174, // explicit use of unboxed closure methods are experimental\n+    E0177,\n+    E0178,\n+    E0180,\n+    E0181,\n+    E0182,\n+    E0183\n )"}, {"sha": "630d41fa7e209b7a31ec39288f94091526bfc6b1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -693,9 +693,16 @@ pub struct WherePredicate {\n \n impl Clean<WherePredicate> for ast::WherePredicate {\n     fn clean(&self, cx: &DocContext) -> WherePredicate {\n-        WherePredicate {\n-            name: self.ident.clean(cx),\n-            bounds: self.bounds.clean(cx)\n+        match *self {\n+            ast::WherePredicate::BoundPredicate(ref wbp) => {\n+                WherePredicate {\n+                    name: wbp.ident.clean(cx),\n+                    bounds: wbp.bounds.clean(cx)\n+                }\n+            }\n+            ast::WherePredicate::EqPredicate(_) => {\n+                unimplemented!();\n+            }\n         }\n     }\n }"}, {"sha": "00aeb1c1bae8f71a2163f888637fb1af7c44d8a8", "filename": "src/test/compile-fail-fulldeps/phase-syntax-doesnt-resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Ftest%2Fcompile-fail-fulldeps%2Fphase-syntax-doesnt-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Ftest%2Fcompile-fail-fulldeps%2Fphase-syntax-doesnt-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fphase-syntax-doesnt-resolve.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -19,6 +19,6 @@ extern crate macro_crate_test;\n \n fn main() {\n     macro_crate_test::foo();\n-    //~^ ERROR failed to resolve. Use of undeclared module `macro_crate_test`\n+    //~^ ERROR failed to resolve. Use of undeclared type or module `macro_crate_test`\n     //~^^ ERROR unresolved name `macro_crate_test::foo`\n }"}, {"sha": "1a96b0ca6812e357b507e1daea4e8ffd69b5f8b8", "filename": "src/test/compile-fail/assoc-eq-expr-path.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Ftest%2Fcompile-fail%2Fassoc-eq-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Ftest%2Fcompile-fail%2Fassoc-eq-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassoc-eq-expr-path.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that an associated type cannot be bound in an expression path.\n+\n+#![feature(associated_types)]\n+\n+trait Foo {\n+    type A;\n+    fn bar() -> int;\n+}\n+\n+impl Foo for int {\n+    type A = uint;\n+    fn bar() -> int { 42 }\n+}\n+\n+pub fn main() {\n+    let x: int = Foo::<A=uint>::bar();\n+    //~^ERROR unexpected binding of associated item in expression path\n+}"}, {"sha": "41a0be37add418a09afb8807c5bb6e9dc3c69c03", "filename": "src/test/compile-fail/hrtb-precedence-of-plus-error-message.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Ftest%2Fcompile-fail%2Fhrtb-precedence-of-plus-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4318ad86f2ccd0710247020269ba0ba22c6d59/src%2Ftest%2Fcompile-fail%2Fhrtb-precedence-of-plus-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-precedence-of-plus-error-message.rs?ref=ce4318ad86f2ccd0710247020269ba0ba22c6d59", "patch": "@@ -18,17 +18,17 @@ trait Bar {\n \n struct Foo<'a> {\n     a: &'a Bar+'a,\n-        //~^ ERROR E0171\n+        //~^ ERROR E0178\n         //~^^ NOTE perhaps you meant `&'a (Bar + 'a)`?\n \n     b: &'a mut Bar+'a,\n-        //~^ ERROR E0171\n+        //~^ ERROR E0178\n         //~^^ NOTE perhaps you meant `&'a mut (Bar + 'a)`?\n \n     c: Box<Bar+'a>, // OK, no paren needed in this context\n \n     d: fn() -> Bar+'a,\n-        //~^ ERROR E0171\n+        //~^ ERROR E0178\n         //~^^ NOTE perhaps you forgot parentheses\n         //~^^^ WARN deprecated syntax\n }"}]}