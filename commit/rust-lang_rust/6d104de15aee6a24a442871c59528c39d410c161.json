{"sha": "6d104de15aee6a24a442871c59528c39d410c161", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMTA0ZGUxNWFlZTZhMjRhNDQyODcxYzU5NTI4YzM5ZDQxMGMxNjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T13:42:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T13:42:34Z"}, "message": "internal: refactor unresolved import diagnostic", "tree": {"sha": "ae46a9d15e866b2887f24167152523ba3cef3a57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae46a9d15e866b2887f24167152523ba3cef3a57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d104de15aee6a24a442871c59528c39d410c161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d104de15aee6a24a442871c59528c39d410c161", "html_url": "https://github.com/rust-lang/rust/commit/6d104de15aee6a24a442871c59528c39d410c161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d104de15aee6a24a442871c59528c39d410c161/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f190b72ccab9a166529f6ae1c8d5d562b15571", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f190b72ccab9a166529f6ae1c8d5d562b15571", "html_url": "https://github.com/rust-lang/rust/commit/39f190b72ccab9a166529f6ae1c8d5d562b15571"}], "stats": {"total": 219, "additions": 127, "deletions": 92}, "files": [{"sha": "70a4d000de3078293321105d68a2c568558c702a", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=6d104de15aee6a24a442871c59528c39d410c161", "patch": "@@ -32,7 +32,7 @@ macro_rules! diagnostics {\n     };\n }\n \n-diagnostics![UnresolvedModule, UnresolvedExternCrate, MissingFields];\n+diagnostics![UnresolvedModule, UnresolvedExternCrate, UnresolvedImport, MissingFields];\n \n #[derive(Debug)]\n pub struct UnresolvedModule {\n@@ -47,30 +47,7 @@ pub struct UnresolvedExternCrate {\n \n #[derive(Debug)]\n pub struct UnresolvedImport {\n-    pub file: HirFileId,\n-    pub node: AstPtr<ast::UseTree>,\n-}\n-\n-impl Diagnostic for UnresolvedImport {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"unresolved-import\")\n-    }\n-    fn message(&self) -> String {\n-        \"unresolved import\".to_string()\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile::new(self.file, self.node.clone().into())\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-    fn is_experimental(&self) -> bool {\n-        // This currently results in false positives in the following cases:\n-        // - `cfg_if!`-generated code in libstd (we don't load the sysroot correctly)\n-        // - `core::arch` (we don't handle `#[path = \"../<path>\"]` correctly)\n-        // - proc macros and/or proc macro generated code\n-        true\n-    }\n+    pub decl: InFile<AstPtr<ast::UseTree>>,\n }\n \n // Diagnostic: unresolved-macro-call"}, {"sha": "d3224670912ef6bbdc548385f1f0f2dcbe43dca9", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=6d104de15aee6a24a442871c59528c39d410c161", "patch": "@@ -498,7 +498,10 @@ impl Module {\n                     let import = &item_tree[id.value];\n \n                     let use_tree = import.use_tree_to_ast(db.upcast(), file_id, *index);\n-                    sink.push(UnresolvedImport { file: file_id, node: AstPtr::new(&use_tree) });\n+                    acc.push(\n+                        UnresolvedImport { decl: InFile::new(file_id, AstPtr::new(&use_tree)) }\n+                            .into(),\n+                    );\n                 }\n \n                 DefDiagnosticKind::UnconfiguredCode { ast, cfg, opts } => {"}, {"sha": "7b0f42004b39ae0c1566c1a335443d4bbab50fab", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=6d104de15aee6a24a442871c59528c39d410c161", "patch": "@@ -12,43 +12,6 @@ fn check_no_diagnostics(ra_fixture: &str) {\n     db.check_no_diagnostics();\n }\n \n-#[test]\n-fn unresolved_import() {\n-    check_diagnostics(\n-        r\"\n-        use does_exist;\n-        use does_not_exist;\n-      //^^^^^^^^^^^^^^^^^^^ UnresolvedImport\n-\n-        mod does_exist {}\n-        \",\n-    );\n-}\n-\n-#[test]\n-fn dedup_unresolved_import_from_unresolved_crate() {\n-    check_diagnostics(\n-        r\"\n-        //- /main.rs crate:main\n-        mod a {\n-            extern crate doesnotexist;\n-          //^^^^^^^^^^^^^^^^^^^^^^^^^^ UnresolvedExternCrate\n-\n-            // Should not error, since we already errored for the missing crate.\n-            use doesnotexist::{self, bla, *};\n-\n-            use crate::doesnotexist;\n-          //^^^^^^^^^^^^^^^^^^^^^^^^ UnresolvedImport\n-        }\n-\n-        mod m {\n-            use super::doesnotexist;\n-          //^^^^^^^^^^^^^^^^^^^^^^^^ UnresolvedImport\n-        }\n-        \",\n-    );\n-}\n-\n #[test]\n fn inactive_item() {\n     // Additional tests in `cfg` crate. This only tests disabled cfgs."}, {"sha": "3d05dd093232a156daaad983c61a2a4716766242", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=6d104de15aee6a24a442871c59528c39d410c161", "patch": "@@ -6,6 +6,7 @@\n \n mod unresolved_module;\n mod unresolved_extern_crate;\n+mod unresolved_import;\n mod missing_fields;\n \n mod fixes;\n@@ -43,17 +44,39 @@ pub struct Diagnostic {\n     pub fixes: Option<Vec<Assist>>,\n     pub unused: bool,\n     pub code: Option<DiagnosticCode>,\n+    pub experimental: bool,\n }\n \n impl Diagnostic {\n     fn new(code: &'static str, message: impl Into<String>, range: TextRange) -> Diagnostic {\n         let message = message.into();\n         let code = Some(DiagnosticCode(code));\n-        Self { message, range, severity: Severity::Error, fixes: None, unused: false, code }\n+        Self {\n+            message,\n+            range,\n+            severity: Severity::Error,\n+            fixes: None,\n+            unused: false,\n+            code,\n+            experimental: false,\n+        }\n+    }\n+\n+    fn experimental(mut self) -> Diagnostic {\n+        self.experimental = true;\n+        self\n     }\n \n     fn error(range: TextRange, message: String) -> Self {\n-        Self { message, range, severity: Severity::Error, fixes: None, unused: false, code: None }\n+        Self {\n+            message,\n+            range,\n+            severity: Severity::Error,\n+            fixes: None,\n+            unused: false,\n+            code: None,\n+            experimental: false,\n+        }\n     }\n \n     fn hint(range: TextRange, message: String) -> Self {\n@@ -64,6 +87,7 @@ impl Diagnostic {\n             fixes: None,\n             unused: false,\n             code: None,\n+            experimental: false,\n         }\n     }\n \n@@ -234,13 +258,17 @@ pub(crate) fn diagnostics(\n         let d = match diag {\n             AnyDiagnostic::UnresolvedModule(d) => unresolved_module::unresolved_module(&ctx, &d),\n             AnyDiagnostic::UnresolvedExternCrate(d) => unresolved_extern_crate::unresolved_extern_crate(&ctx, &d),\n+            AnyDiagnostic::UnresolvedImport(d) => unresolved_import::unresolved_import(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n         };\n         if let Some(code) = d.code {\n             if ctx.config.disabled.contains(code.as_str()) {\n                 continue;\n             }\n         }\n+        if ctx.config.disable_experimental && d.experimental {\n+            continue;\n+        }\n         res.push(d)\n     }\n \n@@ -462,33 +490,6 @@ foo::bar!(92);\n         );\n     }\n \n-    #[test]\n-    fn unresolved_import_in_use_tree() {\n-        // Only the relevant part of a nested `use` item should be highlighted.\n-        check_diagnostics(\n-            r#\"\n-use does_exist::{Exists, DoesntExist};\n-                       //^^^^^^^^^^^ unresolved import\n-\n-use {does_not_exist::*, does_exist};\n-   //^^^^^^^^^^^^^^^^^ unresolved import\n-\n-use does_not_exist::{\n-    a,\n-  //^ unresolved import\n-    b,\n-  //^ unresolved import\n-    c,\n-  //^ unresolved import\n-};\n-\n-mod does_exist {\n-    pub struct Exists;\n-}\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn range_mapping_out_of_macros() {\n         // FIXME: this is very wrong, but somewhat tricky to fix."}, {"sha": "1cbf96ba1fc816b75d978a876538a265355f7217", "filename": "crates/ide/src/diagnostics/unresolved_import.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_import.rs?ref=6d104de15aee6a24a442871c59528c39d410c161", "patch": "@@ -0,0 +1,90 @@\n+use crate::diagnostics::{Diagnostic, DiagnosticsContext};\n+\n+// Diagnostic: unresolved-import\n+//\n+// This diagnostic is triggered if rust-analyzer is unable to resolve a path in\n+// a `use` declaration.\n+pub(super) fn unresolved_import(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::UnresolvedImport,\n+) -> Diagnostic {\n+    Diagnostic::new(\n+        \"unresolved-import\",\n+        \"unresolved import\",\n+        ctx.sema.diagnostics_display_range(d.decl.clone().map(|it| it.into())).range,\n+    )\n+    // This currently results in false positives in the following cases:\n+    // - `cfg_if!`-generated code in libstd (we don't load the sysroot correctly)\n+    // - `core::arch` (we don't handle `#[path = \"../<path>\"]` correctly)\n+    // - proc macros and/or proc macro generated code\n+    .experimental()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::diagnostics::tests::check_diagnostics;\n+\n+    #[test]\n+    fn unresolved_import() {\n+        check_diagnostics(\n+            r#\"\n+use does_exist;\n+use does_not_exist;\n+  //^^^^^^^^^^^^^^ unresolved import\n+\n+mod does_exist {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn unresolved_import_in_use_tree() {\n+        // Only the relevant part of a nested `use` item should be highlighted.\n+        check_diagnostics(\n+            r#\"\n+use does_exist::{Exists, DoesntExist};\n+                       //^^^^^^^^^^^ unresolved import\n+\n+use {does_not_exist::*, does_exist};\n+   //^^^^^^^^^^^^^^^^^ unresolved import\n+\n+use does_not_exist::{\n+    a,\n+  //^ unresolved import\n+    b,\n+  //^ unresolved import\n+    c,\n+  //^ unresolved import\n+};\n+\n+mod does_exist {\n+    pub struct Exists;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn dedup_unresolved_import_from_unresolved_crate() {\n+        check_diagnostics(\n+            r#\"\n+//- /main.rs crate:main\n+mod a {\n+    extern crate doesnotexist;\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^ unresolved extern crate\n+\n+    // Should not error, since we already errored for the missing crate.\n+    use doesnotexist::{self, bla, *};\n+\n+    use crate::doesnotexist;\n+      //^^^^^^^^^^^^^^^^^^^ unresolved import\n+}\n+\n+mod m {\n+    use super::doesnotexist;\n+      //^^^^^^^^^^^^^^^^^^^ unresolved import\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "b1da8f0e1cb21732c28acc5efc83bb8d07f85ebe", "filename": "crates/ide/src/diagnostics/unresolved_module.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d104de15aee6a24a442871c59528c39d410c161/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_module.rs?ref=6d104de15aee6a24a442871c59528c39d410c161", "patch": "@@ -104,6 +104,7 @@ mod baz {}\n                                 \"unresolved-module\",\n                             ),\n                         ),\n+                        experimental: false,\n                     },\n                 ]\n             \"#]],"}]}