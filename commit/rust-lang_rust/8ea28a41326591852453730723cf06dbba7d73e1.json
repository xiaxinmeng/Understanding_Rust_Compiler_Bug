{"sha": "8ea28a41326591852453730723cf06dbba7d73e1", "node_id": "C_kwDOAAsO6NoAKDhlYTI4YTQxMzI2NTkxODUyNDUzNzMwNzIzY2YwNmRiYmE3ZDczZTE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-11T14:01:03Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-11T14:35:09Z"}, "message": "Add test", "tree": {"sha": "4509b8f7fd051efb822f35bf8dc0917720aa59a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4509b8f7fd051efb822f35bf8dc0917720aa59a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ea28a41326591852453730723cf06dbba7d73e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea28a41326591852453730723cf06dbba7d73e1", "html_url": "https://github.com/rust-lang/rust/commit/8ea28a41326591852453730723cf06dbba7d73e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ea28a41326591852453730723cf06dbba7d73e1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66982a383b6f7d3a933fc6896202632bee7161a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/66982a383b6f7d3a933fc6896202632bee7161a4", "html_url": "https://github.com/rust-lang/rust/commit/66982a383b6f7d3a933fc6896202632bee7161a4"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "03679fb604e63aa801df9c1f8b6c36a48fd46239", "filename": "tests/run-make-fulldeps/no-alloc-shim/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ea28a41326591852453730723cf06dbba7d73e1/tests%2Frun-make-fulldeps%2Fno-alloc-shim%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ea28a41326591852453730723cf06dbba7d73e1/tests%2Frun-make-fulldeps%2Fno-alloc-shim%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fno-alloc-shim%2FMakefile?ref=8ea28a41326591852453730723cf06dbba7d73e1", "patch": "@@ -0,0 +1,21 @@\n+include ../tools.mk\n+\n+TARGET_LIBDIR = $$($(RUSTC) --print target-libdir)\n+\n+all:\n+\t$(RUSTC) foo.rs --crate-type bin --emit obj -Cpanic=abort\n+ifdef IS_MSVC\n+\t$(CC) $(CFLAGS) $(TMPDIR)/foo.o $(TARGET_LIBDIR)/liballoc-*.rlib $(TARGET_LIBDIR)/libcore-*.rlib $(TARGET_LIBDIR)/libcompiler_builtins-*.rlib $(call OUT_EXE,foo)\n+\t$(call OUT_EXE,foo)\n+else\n+\t$(CC) $(CFLAGS) $(TMPDIR)/foo.o $(TARGET_LIBDIR)/liballoc-*.rlib $(TARGET_LIBDIR)/libcore-*.rlib $(TARGET_LIBDIR)/libcompiler_builtins-*.rlib -o $(call RUN_BINFILE,foo)\n+\t$(call RUN_BINFILE,foo)\n+endif\n+\n+\t# Check that linking without __rust_no_alloc_shim_is_unstable defined fails\n+\t$(RUSTC) foo.rs --crate-type bin --emit obj -Cpanic=abort --cfg check_feature_gate\n+ifdef IS_MSVC\n+\t$(CC) $(CFLAGS) $(TMPDIR)/foo.o $(TARGET_LIBDIR)/liballoc-*.rlib $(TARGET_LIBDIR)/libcore-*.rlib $(TARGET_LIBDIR)/libcompiler_builtins-*.rlib $(call OUT_EXE,foo) || exit 0 && exit 1\n+else\n+\t$(CC) $(CFLAGS) $(TMPDIR)/foo.o $(TARGET_LIBDIR)/liballoc-*.rlib $(TARGET_LIBDIR)/libcore-*.rlib $(TARGET_LIBDIR)/libcompiler_builtins-*.rlib -o $(call RUN_BINFILE,foo) || exit 0 && exit 1\n+endif"}, {"sha": "a3daec3db391a07af08d149ba35413c27c7dd49d", "filename": "tests/run-make-fulldeps/no-alloc-shim/foo.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8ea28a41326591852453730723cf06dbba7d73e1/tests%2Frun-make-fulldeps%2Fno-alloc-shim%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea28a41326591852453730723cf06dbba7d73e1/tests%2Frun-make-fulldeps%2Fno-alloc-shim%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fno-alloc-shim%2Ffoo.rs?ref=8ea28a41326591852453730723cf06dbba7d73e1", "patch": "@@ -0,0 +1,44 @@\n+#![feature(default_alloc_error_handler)]\n+#![no_std]\n+#![no_main]\n+\n+extern crate alloc;\n+\n+use alloc::alloc::{GlobalAlloc, Layout};\n+\n+#[panic_handler]\n+fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[no_mangle]\n+extern \"C\" fn rust_eh_personality() {\n+    loop {}\n+}\n+\n+#[global_allocator]\n+static ALLOC: Alloc = Alloc;\n+\n+struct Alloc;\n+\n+unsafe impl GlobalAlloc for Alloc {\n+    unsafe fn alloc(&self, _: Layout) -> *mut u8 {\n+        core::ptr::null_mut()\n+    }\n+    unsafe fn dealloc(&self, _: *mut u8, _: Layout) {\n+        todo!()\n+    }\n+}\n+\n+#[cfg(not(check_feature_gate))]\n+#[no_mangle]\n+static __rust_no_alloc_shim_is_unstable: u8 = 0;\n+\n+#[no_mangle]\n+extern \"C\" fn main(_argc: usize, _argv: *const *const i8) -> i32 {\n+    unsafe {\n+        assert_eq!(alloc::alloc::alloc(Layout::new::<()>()), core::ptr::null_mut());\n+    }\n+\n+    0\n+}"}]}