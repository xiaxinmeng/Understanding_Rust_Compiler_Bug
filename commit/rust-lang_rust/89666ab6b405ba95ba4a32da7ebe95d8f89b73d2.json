{"sha": "89666ab6b405ba95ba4a32da7ebe95d8f89b73d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NjY2YWI2YjQwNWJhOTViYTRhMzJkYTdlYmU5NWQ4Zjg5YjczZDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-02T12:39:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-02T12:39:19Z"}, "message": "fix miri-unleash delayed sanity checking", "tree": {"sha": "a531a9cc931325a534f47cc6a1b8db67466fa0a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a531a9cc931325a534f47cc6a1b8db67466fa0a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2", "html_url": "https://github.com/rust-lang/rust/commit/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ca7a0e480bf405082d9b9ac27b3c1fe94d9e33", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ca7a0e480bf405082d9b9ac27b3c1fe94d9e33", "html_url": "https://github.com/rust-lang/rust/commit/17ca7a0e480bf405082d9b9ac27b3c1fe94d9e33"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "55f825e150e5eb117d0a3ed9ff1827b0d9c96d43", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=89666ab6b405ba95ba4a32da7ebe95d8f89b73d2", "patch": "@@ -193,7 +193,7 @@ pub fn run_compiler_in_existing_thread_pool<R>(\n \n     let r = {\n         let _sess_abort_error = OnDrop(|| {\n-            compiler.sess.diagnostic().print_error_count(registry);\n+            compiler.sess.finish_diagnostics(registry);\n         });\n \n         f(&compiler)"}, {"sha": "727eb5b333a65c3c59cabd9cb08f8ea9b057266b", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=89666ab6b405ba95ba4a32da7ebe95d8f89b73d2", "patch": "@@ -256,6 +256,8 @@ impl Validator<'mir, 'tcx> {\n             // Use `def_span` to deduplicate all warnings for the same const.\n             self.tcx.sess.span_warn(self.tcx.def_span(self.def_id), \"skipping const checks\");\n             if let Some(feature) = O::feature_gate() {\n+                // We'd like to use `delay_span_bug` here, but we cannot as that ICEs\n+                // before codegen has the chance to emit errors.  So we use a custom system instead.\n                 self.tcx.sess.miri_unleashed_feature(feature);\n             }\n             return;"}, {"sha": "3606a5c451a25ae2c2ef1f68b1a57316ab323107", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=89666ab6b405ba95ba4a32da7ebe95d8f89b73d2", "patch": "@@ -18,6 +18,7 @@ use rustc_data_structures::sync::{\n use rustc_errors::annotate_snippet_emitter_writer::AnnotateSnippetEmitterWriter;\n use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n+use rustc_errors::registry::Registry;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{self, FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n@@ -193,10 +194,14 @@ impl From<&'static lint::Lint> for DiagnosticMessageId {\n     }\n }\n \n-impl Drop for Session {\n-    fn drop(&mut self) {\n+impl Session {\n+    pub fn miri_unleashed_feature(&self, s: Symbol) {\n+        self.miri_unleashed_features.lock().insert(s);\n+    }\n+\n+    fn check_miri_unleashed_features(&self) {\n         if !self.has_errors_or_delayed_span_bugs() {\n-            let unleashed_features = self.miri_unleashed_features.get_mut();\n+            let unleashed_features = self.miri_unleashed_features.lock();\n             if !unleashed_features.is_empty() {\n                 // Join the strings (itertools has it but libstd does not...)\n                 let mut list = String::new();\n@@ -207,20 +212,20 @@ impl Drop for Session {\n                     write!(&mut list, \"{}\", feature).unwrap();\n                 }\n                 // We have skipped a feature gate, and not run into other errors... reject.\n-                panic!(\n+                self.err(&format!(\n                     \"`-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature \\\n                     gates, except when testing error paths in the CTFE engine.\\n\\\n                     The following feature flags are missing from this crate: {}\",\n                     list,\n-                );\n+                ));\n             }\n         }\n     }\n-}\n \n-impl Session {\n-    pub fn miri_unleashed_feature(&self, s: Symbol) {\n-        self.miri_unleashed_features.lock().insert(s);\n+    /// Invoked all the way at the end to finish off diagnostics printing.\n+    pub fn finish_diagnostics(&self, registry: &Registry) {\n+        self.check_miri_unleashed_features();\n+        self.diagnostic().print_error_count(registry);\n     }\n \n     pub fn local_crate_disambiguator(&self) -> CrateDisambiguator {"}, {"sha": "7c8cdaec4a11a704994dd803343f3ca473495328", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=89666ab6b405ba95ba4a32da7ebe95d8f89b73d2", "patch": "@@ -1,8 +1,6 @@\n // build-fail\n // compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n #![allow(const_err)]\n-#![feature(const_raw_ptr_deref)] // FIXME: cannot remove because then rustc thinks there is no error\n-#![crate_type = \"lib\"]\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n@@ -26,7 +24,7 @@ static mut MUTABLE: u32 = 0;\n const READ_MUT: u32 = unsafe { MUTABLE };\n //~^ WARN skipping const checks\n \n-pub fn main() {\n+fn main() {\n     MUTATE_INTERIOR_MUT;\n     //~^ ERROR: erroneous constant used\n     READ_INTERIOR_MUT;"}, {"sha": "7e049647cfddb62af38a5e37cdaa08a3675e7d3e", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=89666ab6b405ba95ba4a32da7ebe95d8f89b73d2", "patch": "@@ -1,5 +1,5 @@\n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:13:1\n+  --> $DIR/const_refers_to_static.rs:11:1\n    |\n LL | / const MUTATE_INTERIOR_MUT: usize = {\n LL | |\n@@ -9,7 +9,7 @@ LL | | };\n    | |__^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:19:1\n+  --> $DIR/const_refers_to_static.rs:17:1\n    |\n LL | / const READ_INTERIOR_MUT: usize = {\n LL | |\n@@ -19,25 +19,25 @@ LL | | };\n    | |__^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:26:1\n+  --> $DIR/const_refers_to_static.rs:24:1\n    |\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:30:5\n+  --> $DIR/const_refers_to_static.rs:28:5\n    |\n LL |     MUTATE_INTERIOR_MUT;\n    |     ^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:32:5\n+  --> $DIR/const_refers_to_static.rs:30:5\n    |\n LL |     READ_INTERIOR_MUT;\n    |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:34:5\n+  --> $DIR/const_refers_to_static.rs:32:5\n    |\n LL |     READ_MUT;\n    |     ^^^^^^^^ referenced constant has errors"}]}