{"sha": "c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YTg3YzI3MjE0MTQyYjFlYWMyYmYyMTc4NWZlNWI3ZTg4NWVlNWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-26T05:47:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-26T05:47:16Z"}, "message": "auto merge of #10316 : klutzy/rust/attr-lint, r=cmr\n\nThis patchset makes warning if crate-level attribute is used at other places, obsolete attributed is used, or unknown attribute is used, since they are usually from mistakes.\r\n\r\nCloses #3348", "tree": {"sha": "d282ff131856e0d8d75bf2794bc4a11278a0d8c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d282ff131856e0d8d75bf2794bc4a11278a0d8c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "html_url": "https://github.com/rust-lang/rust/commit/c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "720bcd81de9d5fbdb60761fc929d40e487005722", "url": "https://api.github.com/repos/rust-lang/rust/commits/720bcd81de9d5fbdb60761fc929d40e487005722", "html_url": "https://github.com/rust-lang/rust/commit/720bcd81de9d5fbdb60761fc929d40e487005722"}, {"sha": "fa2077af990dbcd71c0e5682ae9207c71485d384", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2077af990dbcd71c0e5682ae9207c71485d384", "html_url": "https://github.com/rust-lang/rust/commit/fa2077af990dbcd71c0e5682ae9207c71485d384"}], "stats": {"total": 215, "additions": 160, "deletions": 55}, "files": [{"sha": "5904e10a08dbae7a013285a33b14c46aebb48713", "filename": "src/etc/extract-tests.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Fetc%2Fextract-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Fetc%2Fextract-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract-tests.py?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -63,6 +63,7 @@\n #[ allow(unused_variable) ];\\n\n #[ allow(dead_assignment) ];\\n\n #[ allow(unused_mut) ];\\n\n+#[ allow(attribute_usage) ];\\n\n #[ feature(macro_rules, globs, struct_variant, managed_boxes) ];\\n\n \"\"\" + block\n             if xfail:"}, {"sha": "d67677f07835b9fb6f25d61036b85df0eccd8911", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -76,6 +76,7 @@ pub enum lint {\n     type_overflow,\n     unused_unsafe,\n     unsafe_block,\n+    attribute_usage,\n \n     managed_heap_memory,\n     owned_heap_memory,\n@@ -244,6 +245,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: allow\n     }),\n \n+    (\"attribute_usage\",\n+     LintSpec {\n+        lint: attribute_usage,\n+        desc: \"detects bad use of attributes\",\n+        default: warn\n+    }),\n+\n     (\"unused_variable\",\n      LintSpec {\n         lint: unused_variable,\n@@ -790,6 +798,83 @@ fn check_heap_item(cx: &Context, it: &ast::item) {\n     }\n }\n \n+static crate_attrs: &'static [&'static str] = &[\n+    \"crate_type\", \"link\", \"feature\", \"no_uv\", \"no_main\", \"no_std\",\n+    \"desc\", \"comment\", \"license\", \"copyright\", // not used in rustc now\n+];\n+\n+\n+static obsolete_attrs: &'static [(&'static str, &'static str)] = &[\n+    (\"abi\", \"Use `extern \\\"abi\\\" fn` instead\"),\n+    (\"auto_encode\", \"Use `#[deriving(Encodable)]` instead\"),\n+    (\"auto_decode\", \"Use `#[deriving(Decodable)]` instead\"),\n+    (\"fast_ffi\", \"Remove it\"),\n+    (\"fixed_stack_segment\", \"Remove it\"),\n+    (\"rust_stack\", \"Remove it\"),\n+];\n+\n+static other_attrs: &'static [&'static str] = &[\n+    // item-level\n+    \"address_insignificant\", // can be crate-level too\n+    \"allow\", \"deny\", \"forbid\", \"warn\", // lint options\n+    \"deprecated\", \"experimental\", \"unstable\", \"stable\", \"locked\", \"frozen\", //item stability\n+    \"crate_map\", \"cfg\", \"doc\", \"export_name\", \"link_section\", \"no_freeze\",\n+    \"no_mangle\", \"no_send\", \"static_assert\", \"unsafe_no_drop_flag\",\n+    \"packed\", \"simd\", \"repr\", \"deriving\", \"unsafe_destructor\",\n+\n+    //mod-level\n+    \"path\", \"link_name\", \"link_args\", \"nolink\", \"macro_escape\", \"no_implicit_prelude\",\n+\n+    // fn-level\n+    \"test\", \"bench\", \"should_fail\", \"ignore\", \"inline\", \"lang\", \"main\", \"start\",\n+    \"no_split_stack\", \"cold\",\n+\n+    // internal attribute: bypass privacy inside items\n+    \"!resolve_unexported\",\n+];\n+\n+fn check_crate_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n+\n+    for attr in attrs.iter() {\n+        let name = attr.node.value.name();\n+        let mut iter = crate_attrs.iter().chain(other_attrs.iter());\n+        if !iter.any(|other_attr| { name.equiv(other_attr) }) {\n+            cx.span_lint(attribute_usage, attr.span, \"unknown crate attribute\");\n+        }\n+    }\n+}\n+\n+fn check_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n+    // check if element has crate-level, obsolete, or any unknown attributes.\n+\n+    for attr in attrs.iter() {\n+        let name = attr.node.value.name();\n+        for crate_attr in crate_attrs.iter() {\n+            if name.equiv(crate_attr) {\n+                let msg = match attr.node.style {\n+                    ast::AttrOuter => \"crate-level attribute should be an inner attribute: \\\n+                                       add semicolon at end\",\n+                    ast::AttrInner => \"crate-level attribute should be in the root module\",\n+                };\n+                cx.span_lint(attribute_usage, attr.span, msg);\n+                return;\n+            }\n+        }\n+\n+        for &(obs_attr, obs_alter) in obsolete_attrs.iter() {\n+            if name.equiv(&obs_attr) {\n+                cx.span_lint(attribute_usage, attr.span,\n+                             format!(\"obsolete attribute: {:s}\", obs_alter));\n+                return;\n+            }\n+        }\n+\n+        if !other_attrs.iter().any(|other_attr| { name.equiv(other_attr) }) {\n+            cx.span_lint(attribute_usage, attr.span, \"unknown attribute\");\n+        }\n+    }\n+}\n+\n fn check_heap_expr(cx: &Context, e: &ast::Expr) {\n     let ty = ty::expr_ty(cx.tcx, e);\n     check_heap_type(cx, e.span, ty);\n@@ -1110,6 +1195,7 @@ impl<'self> Visitor<()> for Context<'self> {\n             check_item_non_uppercase_statics(cx, it);\n             check_heap_item(cx, it);\n             check_missing_doc_item(cx, it);\n+            check_attrs_usage(cx, it.attrs);\n \n             do cx.visit_ids |v| {\n                 v.visit_item(it, ());\n@@ -1119,6 +1205,20 @@ impl<'self> Visitor<()> for Context<'self> {\n         }\n     }\n \n+    fn visit_foreign_item(&mut self, it: @ast::foreign_item, _: ()) {\n+        do self.with_lint_attrs(it.attrs) |cx| {\n+            check_attrs_usage(cx, it.attrs);\n+            visit::walk_foreign_item(cx, it, ());\n+        }\n+    }\n+\n+    fn visit_view_item(&mut self, i: &ast::view_item, _: ()) {\n+        do self.with_lint_attrs(i.attrs) |cx| {\n+            check_attrs_usage(cx, i.attrs);\n+            visit::walk_view_item(cx, i, ());\n+        }\n+    }\n+\n     fn visit_pat(&mut self, p: &ast::Pat, _: ()) {\n         check_pat_non_uppercase_statics(self, p);\n         check_unused_mut_pat(self, p);\n@@ -1168,6 +1268,7 @@ impl<'self> Visitor<()> for Context<'self> {\n             visit::fk_method(_, _, m) => {\n                 do self.with_lint_attrs(m.attrs) |cx| {\n                     check_missing_doc_method(cx, m);\n+                    check_attrs_usage(cx, m.attrs);\n \n                     do cx.visit_ids |v| {\n                         v.visit_fn(fk, decl, body, span, id, ());\n@@ -1179,9 +1280,11 @@ impl<'self> Visitor<()> for Context<'self> {\n         }\n     }\n \n+\n     fn visit_ty_method(&mut self, t: &ast::TypeMethod, _: ()) {\n         do self.with_lint_attrs(t.attrs) |cx| {\n             check_missing_doc_ty_method(cx, t);\n+            check_attrs_usage(cx, t.attrs);\n \n             visit::walk_ty_method(cx, t, ());\n         }\n@@ -1202,6 +1305,7 @@ impl<'self> Visitor<()> for Context<'self> {\n     fn visit_struct_field(&mut self, s: @ast::struct_field, _: ()) {\n         do self.with_lint_attrs(s.node.attrs) |cx| {\n             check_missing_doc_struct_field(cx, s);\n+            check_attrs_usage(cx, s.node.attrs);\n \n             visit::walk_struct_field(cx, s, ());\n         }\n@@ -1210,6 +1314,7 @@ impl<'self> Visitor<()> for Context<'self> {\n     fn visit_variant(&mut self, v: &ast::variant, g: &ast::Generics, _: ()) {\n         do self.with_lint_attrs(v.node.attrs) |cx| {\n             check_missing_doc_variant(cx, v);\n+            check_attrs_usage(cx, v.node.attrs);\n \n             visit::walk_variant(cx, v, g, ());\n         }\n@@ -1256,6 +1361,9 @@ pub fn check_crate(tcx: ty::ctxt,\n             v.visited_outermost = true;\n             visit::walk_crate(v, crate, ());\n         }\n+\n+        check_crate_attrs_usage(cx, crate.attrs);\n+\n         visit::walk_crate(cx, crate, ());\n     }\n "}, {"sha": "bce41e5a49fe0560fd04103a87402cf574a79b75", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -461,7 +461,6 @@ pub fn versionize(p: &Path, v: &Version) -> Path {\n }\n \n #[cfg(target_os = \"win32\")]\n-#[fixed_stack_segment]\n pub fn chmod_read_only(p: &Path) -> bool {\n     unsafe {\n         do p.with_c_str |src_buf| {\n@@ -471,7 +470,6 @@ pub fn chmod_read_only(p: &Path) -> bool {\n }\n \n #[cfg(not(target_os = \"win32\"))]\n-#[fixed_stack_segment]\n pub fn chmod_read_only(p: &Path) -> bool {\n     unsafe {\n         do p.with_c_str |src_buf| {"}, {"sha": "e49cf3e5303b3c585cae0c3865417900a747a1e3", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -10,8 +10,6 @@\n \n //! Types dealing with dynamic mutability\n \n-#[missing_doc];\n-\n use prelude::*;\n use cast;\n use util::NonCopyable;"}, {"sha": "292b0a2e78f2be2ca5bcf3dd2770631597f9ca6d", "filename": "src/libstd/io/native/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -365,7 +365,6 @@ fn spawn_process_os(prog: &str, args: &[~str],\n     use libc::funcs::bsd44::getdtablesize;\n \n     mod rustrt {\n-        #[abi = \"cdecl\"]\n         extern {\n             pub fn rust_unset_sigprocmask();\n         }"}, {"sha": "7e797cec03fad9477f4100bba440facf6b516260", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -2704,7 +2704,7 @@ mod tests {\n         assert_eq!(a.init(), &[11]);\n     }\n \n-    #[init]\n+    #[test]\n     #[should_fail]\n     fn test_init_empty() {\n         let a: ~[int] = ~[];\n@@ -2719,7 +2719,7 @@ mod tests {\n         assert_eq!(a.initn(2), &[11]);\n     }\n \n-    #[init]\n+    #[test]\n     #[should_fail]\n     fn test_initn_empty() {\n         let a: ~[int] = ~[];"}, {"sha": "c1e7ba60fade4e1d55ccae928583cc3835e49621", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/720bcd81de9d5fbdb60761fc929d40e487005722/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720bcd81de9d5fbdb60761fc929d40e487005722/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=720bcd81de9d5fbdb60761fc929d40e487005722", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/// Deprecated #[auto_encode] and #[auto_decode] syntax extensions\n-\n-use ast;\n-use codemap::Span;\n-use ext::base::*;\n-\n-pub fn expand_auto_encode(\n-    cx: @ExtCtxt,\n-    span: Span,\n-    _mitem: @ast::MetaItem,\n-    in_items: ~[@ast::item]\n-) -> ~[@ast::item] {\n-    cx.span_err(span, \"`#[auto_encode]` is deprecated, use `#[deriving(Encodable)]` instead\");\n-    in_items\n-}\n-\n-pub fn expand_auto_decode(\n-    cx: @ExtCtxt,\n-    span: Span,\n-    _mitem: @ast::MetaItem,\n-    in_items: ~[@ast::item]\n-) -> ~[@ast::item] {\n-    cx.span_err(span, \"`#[auto_decode]` is deprecated, use `#[deriving(Decodable)]` instead\");\n-    in_items\n-}"}, {"sha": "ccb88e0c9c0195462aebba52f7e3581dcaf80243", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -143,7 +143,7 @@ pub enum MacResult {\n }\n \n pub enum SyntaxExtension {\n-    // #[auto_encode] and such\n+    // #[deriving] and such\n     ItemDecorator(ItemDecorator),\n \n     // Token-tree expanders\n@@ -229,12 +229,6 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(intern(&\"format_args\"),\n                             builtin_normal_tt_no_ctxt(\n                                 ext::format::expand_args));\n-    syntax_expanders.insert(\n-        intern(&\"auto_encode\"),\n-        @SE(ItemDecorator(ext::auto_encode::expand_auto_encode)));\n-    syntax_expanders.insert(\n-        intern(&\"auto_decode\"),\n-        @SE(ItemDecorator(ext::auto_encode::expand_auto_decode)));\n     syntax_expanders.insert(intern(&\"env\"),\n                             builtin_normal_tt_no_ctxt(\n                                     ext::env::expand_env));"}, {"sha": "29ed87f2202838768bdd48868f540a6a5645438c", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -83,7 +83,6 @@ pub mod ext {\n     pub mod concat;\n     pub mod concat_idents;\n     pub mod log_syntax;\n-    pub mod auto_encode;\n     pub mod source_util;\n \n     pub mod trace_macros;"}, {"sha": "10a829fd794556ce2a985fca91971f4010bac975", "filename": "src/test/compile-fail/cast-to-bare-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -10,7 +10,6 @@\n \n fn foo(_x: int) { }\n \n-#[fixed_stack_segment]\n fn main() {\n     let v: u64 = 5;\n     let x = foo as extern \"C\" fn() -> int;"}, {"sha": "64b3a52848b1ea6a5460bdca1a81efdeb5eeaacc", "filename": "src/test/compile-fail/lint-misplaced-attr.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// When denying at the crate level, be sure to not get random warnings from the\n+// injected intrinsics by the compiler.\n+\n+#[deny(attribute_usage)];\n+\n+mod a {\n+    #[crate_type = \"bin\"]; //~ ERROR: crate-level attribute\n+}\n+\n+#[crate_type = \"bin\"] fn main() {} //~ ERROR: crate-level attribute"}, {"sha": "919769783152dd1d2c89e19a8487dbd6483b49b0", "filename": "src/test/compile-fail/lint-obsolete-attr.rs", "status": "renamed", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -8,8 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[auto_encode] //~ ERROR: `#[auto_encode]` is deprecated\n-#[auto_decode] //~ ERROR: `#[auto_decode]` is deprecated\n-struct A;\n+// When denying at the crate level, be sure to not get random warnings from the\n+// injected intrinsics by the compiler.\n+\n+#[deny(attribute_usage)];\n+\n+#[abi=\"stdcall\"] extern {} //~ ERROR: obsolete attribute\n+\n+#[fixed_stack_segment] fn f() {} //~ ERROR: obsolete attribute\n \n fn main() {}", "previous_filename": "src/test/compile-fail/deprecated-auto-code.rs"}, {"sha": "ce83ba464c06eb3773da3faa2afb618867335f6f", "filename": "src/test/compile-fail/lint-unknown-attr.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// When denying at the crate level, be sure to not get random warnings from the\n+// injected intrinsics by the compiler.\n+\n+#[deny(attribute_usage)];\n+\n+#[mutable_doc]; //~ ERROR: unknown crate attribute\n+\n+#[dance] mod a {} //~ ERROR: unknown attribute\n+\n+#[dance] fn main() {} //~ ERROR: unknown attribute"}, {"sha": "f39bb8fef0cf8ccd17ad888add4ac48ccf7deeea", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a87c27214142b1eac2bf21785fe5b7e885ee5c/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "patch": "@@ -23,7 +23,6 @@ use std::str;\n struct A;\n struct B;\n \n-#[fmt=\"foo\"]\n impl fmt::Signed for A {\n     fn fmt(_: &A, f: &mut fmt::Formatter) { f.buf.write(\"aloha\".as_bytes()); }\n }"}]}