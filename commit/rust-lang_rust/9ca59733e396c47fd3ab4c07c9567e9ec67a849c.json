{"sha": "9ca59733e396c47fd3ab4c07c9567e9ec67a849c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYTU5NzMzZTM5NmM0N2ZkM2FiNGMwN2M5NTY3ZTllYzY3YTg0OWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-06T09:35:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-06T09:35:40Z"}, "message": "Improve readability\n\nIt's better to order functions in the order they are called, if there's\nordering between them.", "tree": {"sha": "8b8e016b80dbdafc1aa73acf3f7645654b07aad7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b8e016b80dbdafc1aa73acf3f7645654b07aad7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ca59733e396c47fd3ab4c07c9567e9ec67a849c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ca59733e396c47fd3ab4c07c9567e9ec67a849c", "html_url": "https://github.com/rust-lang/rust/commit/9ca59733e396c47fd3ab4c07c9567e9ec67a849c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ca59733e396c47fd3ab4c07c9567e9ec67a849c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5", "html_url": "https://github.com/rust-lang/rust/commit/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "a8ae56070fae449074964a0bdd7b3569697117b5", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9ca59733e396c47fd3ab4c07c9567e9ec67a849c/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca59733e396c47fd3ab4c07c9567e9ec67a849c/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=9ca59733e396c47fd3ab4c07c9567e9ec67a849c", "patch": "@@ -117,35 +117,6 @@ impl GlobalState {\n         }\n     }\n \n-    pub(crate) fn fetch_build_data_request(&mut self, build_data_collector: BuildDataCollector) {\n-        self.fetch_build_data_queue.request_op(build_data_collector);\n-    }\n-\n-    pub(crate) fn fetch_build_data_if_needed(&mut self) {\n-        let mut build_data_collector = match self.fetch_build_data_queue.should_start_op() {\n-            Some(it) => it,\n-            None => return,\n-        };\n-        self.task_pool.handle.spawn_with_sender(move |sender| {\n-            sender.send(Task::FetchBuildData(BuildDataProgress::Begin)).unwrap();\n-\n-            let progress = {\n-                let sender = sender.clone();\n-                move |msg| {\n-                    sender.send(Task::FetchBuildData(BuildDataProgress::Report(msg))).unwrap()\n-                }\n-            };\n-            let res = build_data_collector.collect(&progress);\n-            sender.send(Task::FetchBuildData(BuildDataProgress::End(res))).unwrap();\n-        });\n-    }\n-    pub(crate) fn fetch_build_data_completed(\n-        &mut self,\n-        build_data: anyhow::Result<BuildDataResult>,\n-    ) {\n-        self.fetch_build_data_queue.op_completed(Some(build_data))\n-    }\n-\n     pub(crate) fn fetch_workspaces_request(&mut self) {\n         self.fetch_workspaces_queue.request_op(())\n     }\n@@ -204,6 +175,34 @@ impl GlobalState {\n         self.fetch_workspaces_queue.op_completed(workspaces)\n     }\n \n+    pub(crate) fn fetch_build_data_request(&mut self, build_data_collector: BuildDataCollector) {\n+        self.fetch_build_data_queue.request_op(build_data_collector);\n+    }\n+    pub(crate) fn fetch_build_data_if_needed(&mut self) {\n+        let mut build_data_collector = match self.fetch_build_data_queue.should_start_op() {\n+            Some(it) => it,\n+            None => return,\n+        };\n+        self.task_pool.handle.spawn_with_sender(move |sender| {\n+            sender.send(Task::FetchBuildData(BuildDataProgress::Begin)).unwrap();\n+\n+            let progress = {\n+                let sender = sender.clone();\n+                move |msg| {\n+                    sender.send(Task::FetchBuildData(BuildDataProgress::Report(msg))).unwrap()\n+                }\n+            };\n+            let res = build_data_collector.collect(&progress);\n+            sender.send(Task::FetchBuildData(BuildDataProgress::End(res))).unwrap();\n+        });\n+    }\n+    pub(crate) fn fetch_build_data_completed(\n+        &mut self,\n+        build_data: anyhow::Result<BuildDataResult>,\n+    ) {\n+        self.fetch_build_data_queue.op_completed(Some(build_data))\n+    }\n+\n     pub(crate) fn switch_workspaces(&mut self) {\n         let _p = profile::span(\"GlobalState::switch_workspaces\");\n         let workspaces = self.fetch_workspaces_queue.last_op_result();"}]}