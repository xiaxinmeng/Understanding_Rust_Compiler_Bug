{"sha": "6376da70be18d6cb9dbe22b5a661896cf916bc51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNzZkYTcwYmUxOGQ2Y2I5ZGJlMjJiNWE2NjE4OTZjZjkxNmJjNTE=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-02T16:16:16Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:37:16Z"}, "message": "replace `lints` and `lint` with `check`", "tree": {"sha": "637dcae460700156c169fab202d02b48f68b5e70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/637dcae460700156c169fab202d02b48f68b5e70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6376da70be18d6cb9dbe22b5a661896cf916bc51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6376da70be18d6cb9dbe22b5a661896cf916bc51", "html_url": "https://github.com/rust-lang/rust/commit/6376da70be18d6cb9dbe22b5a661896cf916bc51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6376da70be18d6cb9dbe22b5a661896cf916bc51/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45ee914df0c1d1a6a15272bd6833023dd4185b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ee914df0c1d1a6a15272bd6833023dd4185b9b", "html_url": "https://github.com/rust-lang/rust/commit/45ee914df0c1d1a6a15272bd6833023dd4185b9b"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "5decb81d9f2e26ca461cb3d6f9aa9343341e3adb", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=6376da70be18d6cb9dbe22b5a661896cf916bc51", "patch": "@@ -158,7 +158,7 @@ pub(crate) trait BindInsteadOfMap {\n     }\n \n     /// Lint use of `_.and_then(|x| Some(y))` for `Option`s\n-    fn lint(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) -> bool {\n+    fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) -> bool {\n         if !match_type(cx, cx.typeck_results().expr_ty(&args[0]), Self::TYPE_QPATH) {\n             return false;\n         }"}, {"sha": "71a7e195e41cee1cb2163cdf19abe032ba0d6984", "filename": "clippy_lints/src/methods/bytes_nth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs?ref=6376da70be18d6cb9dbe22b5a661896cf916bc51", "patch": "@@ -7,7 +7,7 @@ use rustc_span::sym;\n \n use super::BYTES_NTH;\n \n-pub(super) fn lints<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'tcx [Expr<'tcx>]) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'tcx [Expr<'tcx>]) {\n     if_chain! {\n         if let ExprKind::MethodCall(_, _, ref args, _) = expr.kind;\n         let ty = cx.typeck_results().expr_ty(&iter_args[0]).peel_refs();"}, {"sha": "3045b09c2389f4890a9b1543cc3ee89c5cd0f6ca", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=6376da70be18d6cb9dbe22b5a661896cf916bc51", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_span::sym;\n \n /// Checks for the `INEFFICIENT_TO_STRING` lint\n-pub fn lint<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>, arg_ty: Ty<'tcx>) {\n+pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>, arg_ty: Ty<'tcx>) {\n     if_chain! {\n         if let Some(to_string_meth_did) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if match_def_path(cx, to_string_meth_did, &paths::TO_STRING_METHOD);"}, {"sha": "959457a5bfc960c9fb7855b895297cd616e0bf00", "filename": "clippy_lints/src/methods/inspect_for_each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs?ref=6376da70be18d6cb9dbe22b5a661896cf916bc51", "patch": "@@ -7,7 +7,7 @@ use crate::utils::{match_trait_method, paths, span_lint_and_help};\n use super::INSPECT_FOR_EACH;\n \n /// lint use of `inspect().for_each()` for `Iterators`\n-pub(super) fn lint<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, inspect_span: Span) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, inspect_span: Span) {\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `inspect(..).for_each(..)` on an `Iterator`\";\n         let hint = \"move the code from `inspect(..)` to `for_each(..)` and remove the `inspect(..)`\";"}, {"sha": "869440e0165b2a7973705527e48ec729858215e1", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=6376da70be18d6cb9dbe22b5a661896cf916bc51", "patch": "@@ -8,7 +8,7 @@ use rustc_span::sym;\n \n use super::ITER_COUNT;\n \n-pub(crate) fn lints<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'tcx [Expr<'tcx>], iter_method: &str) {\n+pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'tcx [Expr<'tcx>], iter_method: &str) {\n     let ty = cx.typeck_results().expr_ty(&iter_args[0]);\n     let caller_type = if derefs_to_slice(cx, &iter_args[0], ty).is_some() {\n         \"slice\""}, {"sha": "0b414e0eb95676e46e9037db66be59d73bdeebac", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=6376da70be18d6cb9dbe22b5a661896cf916bc51", "patch": "@@ -6,7 +6,7 @@ use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_target::abi::LayoutOf;\n \n-pub fn lint(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[&[hir::Expr<'_>]], arith: &str) {\n+pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[&[hir::Expr<'_>]], arith: &str) {\n     let unwrap_arg = &args[0][1];\n     let arith_lhs = &args[1][0];\n     let arith_rhs = &args[1][1];"}, {"sha": "639d013f786cd76fb80decf3822422476f107547", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6376da70be18d6cb9dbe22b5a661896cf916bc51", "patch": "@@ -1673,14 +1673,14 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             },\n             [\"map_or\", ..] => lint_map_or_none(cx, expr, arg_lists[0]),\n             [\"and_then\", ..] => {\n-                let biom_option_linted = bind_instead_of_map::OptionAndThenSome::lint(cx, expr, arg_lists[0]);\n-                let biom_result_linted = bind_instead_of_map::ResultAndThenOk::lint(cx, expr, arg_lists[0]);\n+                let biom_option_linted = bind_instead_of_map::OptionAndThenSome::check(cx, expr, arg_lists[0]);\n+                let biom_result_linted = bind_instead_of_map::ResultAndThenOk::check(cx, expr, arg_lists[0]);\n                 if !biom_option_linted && !biom_result_linted {\n                     unnecessary_lazy_eval::check(cx, expr, arg_lists[0], \"and\");\n                 }\n             },\n             [\"or_else\", ..] => {\n-                if !bind_instead_of_map::ResultOrElseErrInfo::lint(cx, expr, arg_lists[0]) {\n+                if !bind_instead_of_map::ResultOrElseErrInfo::check(cx, expr, arg_lists[0]) {\n                     unnecessary_lazy_eval::check(cx, expr, arg_lists[0], \"or\");\n                 }\n             },\n@@ -1703,12 +1703,12 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n             },\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n-            [\"count\", \"into_iter\"] => iter_count::lints(cx, expr, &arg_lists[1], \"into_iter\"),\n-            [\"count\", \"iter\"] => iter_count::lints(cx, expr, &arg_lists[1], \"iter\"),\n-            [\"count\", \"iter_mut\"] => iter_count::lints(cx, expr, &arg_lists[1], \"iter_mut\"),\n+            [\"count\", \"into_iter\"] => iter_count::check(cx, expr, &arg_lists[1], \"into_iter\"),\n+            [\"count\", \"iter\"] => iter_count::check(cx, expr, &arg_lists[1], \"iter\"),\n+            [\"count\", \"iter_mut\"] => iter_count::check(cx, expr, &arg_lists[1], \"iter_mut\"),\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, &arg_lists, true),\n-            [\"nth\", \"bytes\"] => bytes_nth::lints(cx, expr, &arg_lists[1]),\n+            [\"nth\", \"bytes\"] => bytes_nth::check(cx, expr, &arg_lists[1]),\n             [\"nth\", ..] => lint_iter_nth_zero(cx, expr, arg_lists[0]),\n             [\"step_by\", ..] => lint_step_by(cx, expr, arg_lists[0]),\n             [\"next\", \"skip\"] => lint_iter_skip_next(cx, expr, arg_lists[1]),\n@@ -1717,13 +1717,13 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"as_mut\"] => lint_asref(cx, expr, \"as_mut\", arg_lists[0]),\n             [\"fold\", ..] => lint_unnecessary_fold(cx, expr, arg_lists[0], method_spans[0]),\n             [\"filter_map\", ..] => {\n-                unnecessary_filter_map::lint(cx, expr, arg_lists[0]);\n+                unnecessary_filter_map::check(cx, expr, arg_lists[0]);\n                 filter_map_identity::check(cx, expr, arg_lists[0], method_spans[0]);\n             },\n             [\"count\", \"map\"] => suspicious_map::check(cx, expr),\n             [\"assume_init\"] => uninit_assumed_init::check(cx, &arg_lists[0][0], expr),\n             [\"unwrap_or\", arith @ (\"checked_add\" | \"checked_sub\" | \"checked_mul\")] => {\n-                manual_saturating_arithmetic::lint(cx, expr, &arg_lists, &arith[\"checked_\".len()..])\n+                manual_saturating_arithmetic::check(cx, expr, &arg_lists, &arith[\"checked_\".len()..])\n             },\n             [\"add\" | \"offset\" | \"sub\" | \"wrapping_offset\" | \"wrapping_add\" | \"wrapping_sub\"] => {\n                 check_pointer_offset(cx, expr, arg_lists[0])\n@@ -1739,7 +1739,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"get_or_insert_with\", ..] => unnecessary_lazy_eval::check(cx, expr, arg_lists[0], \"get_or_insert\"),\n             [\"ok_or_else\", ..] => unnecessary_lazy_eval::check(cx, expr, arg_lists[0], \"ok_or\"),\n             [\"collect\", \"map\"] => lint_map_collect(cx, expr, arg_lists[1], arg_lists[0]),\n-            [\"for_each\", \"inspect\"] => inspect_for_each::lint(cx, expr, method_spans[1]),\n+            [\"for_each\", \"inspect\"] => inspect_for_each::check(cx, expr, method_spans[1]),\n             [\"to_owned\", ..] => implicit_clone::check(cx, expr, sym::ToOwned),\n             [\"to_os_string\", ..] => implicit_clone::check(cx, expr, sym::OsStr),\n             [\"to_path_buf\", ..] => implicit_clone::check(cx, expr, sym::Path),\n@@ -1765,7 +1765,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     lint_clone_on_ref_ptr(cx, expr, &args[0]);\n                 }\n                 if args.len() == 1 && method_call.ident.name == sym!(to_string) {\n-                    inefficient_to_string::lint(cx, expr, &args[0], self_ty);\n+                    inefficient_to_string::check(cx, expr, &args[0], self_ty);\n                 }\n \n                 if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {"}, {"sha": "12b2cf0a16582f407d65902a5b1abe4fb64a189b", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6376da70be18d6cb9dbe22b5a661896cf916bc51/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=6376da70be18d6cb9dbe22b5a661896cf916bc51", "patch": "@@ -9,7 +9,7 @@ use if_chain::if_chain;\n \n use super::UNNECESSARY_FILTER_MAP;\n \n-pub(super) fn lint(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     if !match_trait_method(cx, expr, &paths::ITERATOR) {\n         return;\n     }"}]}