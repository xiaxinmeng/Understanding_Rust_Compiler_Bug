{"sha": "f2e14d931417f5037aea6212a5294a641caf5512", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZTE0ZDkzMTQxN2Y1MDM3YWVhNjIxMmE1Mjk0YTY0MWNhZjU1MTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-26T12:16:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-26T12:16:47Z"}, "message": "use memory::check_bounds_ptr for offset check", "tree": {"sha": "3a0243e4dcb9b6e7e93d9cb60f204ce8ccd0c18b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a0243e4dcb9b6e7e93d9cb60f204ce8ccd0c18b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2e14d931417f5037aea6212a5294a641caf5512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2e14d931417f5037aea6212a5294a641caf5512", "html_url": "https://github.com/rust-lang/rust/commit/f2e14d931417f5037aea6212a5294a641caf5512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2e14d931417f5037aea6212a5294a641caf5512/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f57c7cb9a70c46f49cdab899b90d7e9fcbdae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f57c7cb9a70c46f49cdab899b90d7e9fcbdae4", "html_url": "https://github.com/rust-lang/rust/commit/d0f57c7cb9a70c46f49cdab899b90d7e9fcbdae4"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "4b110224a0a2d97f55b63fb8e4dd113076553c3e", "filename": "src/operator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2e14d931417f5037aea6212a5294a641caf5512/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e14d931417f5037aea6212a5294a641caf5512/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=f2e14d931417f5037aea6212a5294a641caf5512", "patch": "@@ -303,10 +303,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         if let Scalar::Ptr(ptr) = ptr {\n             // Both old and new pointer must be in-bounds of a *live* allocation.\n             // (Of the same allocation, but that part is trivial with our representation.)\n-            let alloc = self.memory().get(ptr.alloc_id)?;\n-            alloc.check_bounds_ptr(ptr)?;\n+            self.memory().check_bounds_ptr(ptr, InboundsCheck::Live)?;\n             let ptr = ptr.signed_offset(offset, self)?;\n-            alloc.check_bounds_ptr(ptr)?;\n+            self.memory().check_bounds_ptr(ptr, InboundsCheck::Live)?;\n             Ok(Scalar::Ptr(ptr))\n         } else {\n             // An integer pointer. They can only be offset by 0, and we pretend there"}]}