{"sha": "39961390ad7b99f5f63d47144c03a7ef7f406483", "node_id": "C_kwDOAAsO6NoAKDM5OTYxMzkwYWQ3Yjk5ZjVmNjNkNDcxNDRjMDNhN2VmN2Y0MDY0ODM", "commit": {"author": {"name": "Adam Gemmell", "email": "adam.gemmell@arm.com", "date": "2022-03-10T17:50:46Z"}, "committer": {"name": "Adam Gemmell", "email": "adam.gemmell@arm.com", "date": "2022-03-14T10:54:21Z"}, "message": "Tie `fp` and `neon`", "tree": {"sha": "212fab093efa88d1093be752d41489bc0ee9081c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212fab093efa88d1093be752d41489bc0ee9081c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39961390ad7b99f5f63d47144c03a7ef7f406483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39961390ad7b99f5f63d47144c03a7ef7f406483", "html_url": "https://github.com/rust-lang/rust/commit/39961390ad7b99f5f63d47144c03a7ef7f406483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39961390ad7b99f5f63d47144c03a7ef7f406483/comments", "author": {"login": "adamgemmell", "id": 3757567, "node_id": "MDQ6VXNlcjM3NTc1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3757567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamgemmell", "html_url": "https://github.com/adamgemmell", "followers_url": "https://api.github.com/users/adamgemmell/followers", "following_url": "https://api.github.com/users/adamgemmell/following{/other_user}", "gists_url": "https://api.github.com/users/adamgemmell/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamgemmell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamgemmell/subscriptions", "organizations_url": "https://api.github.com/users/adamgemmell/orgs", "repos_url": "https://api.github.com/users/adamgemmell/repos", "events_url": "https://api.github.com/users/adamgemmell/events{/privacy}", "received_events_url": "https://api.github.com/users/adamgemmell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamgemmell", "id": 3757567, "node_id": "MDQ6VXNlcjM3NTc1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3757567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamgemmell", "html_url": "https://github.com/adamgemmell", "followers_url": "https://api.github.com/users/adamgemmell/followers", "following_url": "https://api.github.com/users/adamgemmell/following{/other_user}", "gists_url": "https://api.github.com/users/adamgemmell/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamgemmell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamgemmell/subscriptions", "organizations_url": "https://api.github.com/users/adamgemmell/orgs", "repos_url": "https://api.github.com/users/adamgemmell/repos", "events_url": "https://api.github.com/users/adamgemmell/events{/privacy}", "received_events_url": "https://api.github.com/users/adamgemmell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba14a836c7038da21f5e102aacc7e6d5964f79a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba14a836c7038da21f5e102aacc7e6d5964f79a6", "html_url": "https://github.com/rust-lang/rust/commit/ba14a836c7038da21f5e102aacc7e6d5964f79a6"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "3ce594b945ac1c35ea730243211f2c4c6d407bea", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39961390ad7b99f5f63d47144c03a7ef7f406483/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39961390ad7b99f5f63d47144c03a7ef7f406483/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=39961390ad7b99f5f63d47144c03a7ef7f406483", "patch": "@@ -188,8 +188,6 @@ pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]\n         (\"x86\", \"avx512gfni\") => smallvec![\"gfni\"],\n         (\"x86\", \"avx512vpclmulqdq\") => smallvec![\"vpclmulqdq\"],\n         (\"aarch64\", \"fp\") => smallvec![\"fp-armv8\"],\n-        (\"aarch64\", \"fp16\") => smallvec![\"fullfp16\"],\n-        (\"aarch64\", \"fhm\") => smallvec![\"fp16fml\"],\n         (\"aarch64\", \"rcpc2\") => smallvec![\"rcpc-immo\"],\n         (\"aarch64\", \"dpb\") => smallvec![\"ccpp\"],\n         (\"aarch64\", \"dpb2\") => smallvec![\"ccdp\"],\n@@ -198,6 +196,19 @@ pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]\n         (\"aarch64\", \"pmuv3\") => smallvec![\"perfmon\"],\n         (\"aarch64\", \"paca\") => smallvec![\"pauth\"],\n         (\"aarch64\", \"pacg\") => smallvec![\"pauth\"],\n+        // Rust ties fp and neon together. In LLVM neon implicitly enables fp,\n+        // but we manually enable neon when a feature only implicitly enables fp\n+        (\"aarch64\", \"f32mm\") => smallvec![\"f32mm\", \"neon\"],\n+        (\"aarch64\", \"f64mm\") => smallvec![\"f64mm\", \"neon\"],\n+        (\"aarch64\", \"fhm\") => smallvec![\"fp16fml\", \"neon\"],\n+        (\"aarch64\", \"fp16\") => smallvec![\"fullfp16\", \"neon\"],\n+        (\"aarch64\", \"jsconv\") => smallvec![\"jsconv\", \"neon\"],\n+        (\"aarch64\", \"sve\") => smallvec![\"sve\", \"neon\"],\n+        (\"aarch64\", \"sve2\") => smallvec![\"sve2\", \"neon\"],\n+        (\"aarch64\", \"sve2-aes\") => smallvec![\"sve2-aes\", \"neon\"],\n+        (\"aarch64\", \"sve2-sm4\") => smallvec![\"sve2-sm4\", \"neon\"],\n+        (\"aarch64\", \"sve2-sha3\") => smallvec![\"sve2-sha3\", \"neon\"],\n+        (\"aarch64\", \"sve2-bitperm\") => smallvec![\"sve2-bitperm\", \"neon\"],\n         (_, s) => smallvec![s],\n     }\n }\n@@ -490,7 +501,7 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n         if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n             return SmallVec::<[_; 2]>::new();\n         }\n-        // ... otherwise though we run through `to_llvm_feature when\n+        // ... otherwise though we run through `to_llvm_features` when\n         // passing requests down to LLVM. This means that all in-language\n         // features also work on the command line instead of having two\n         // different names when the LLVM name and the Rust name differ."}, {"sha": "38f2fcd18c5e42861e732441ee1ea683e3073d9d", "filename": "src/test/run-make-fulldeps/simd-ffi/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39961390ad7b99f5f63d47144c03a7ef7f406483/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/39961390ad7b99f5f63d47144c03a7ef7f406483/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile?ref=39961390ad7b99f5f63d47144c03a7ef7f406483", "patch": "@@ -41,7 +41,7 @@ define MK_TARGETS\n # now.\n $(1): simd.rs\n \t$$(RUSTC) --target=$(1) --emit=llvm-ir,asm simd.rs \\\n-                -C target-feature='+neon,+sse2' -C extra-filename=-$(1)\n+                -C target-feature='+fp,+neon,+sse2' -C extra-filename=-$(1)\n endef\n \n $(foreach targetxxx,$(TARGETS),$(eval $(call MK_TARGETS,$(targetxxx))))"}]}