{"sha": "d9d96637d4996051fb4fdda9adef73e8da2c71cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZDk2NjM3ZDQ5OTYwNTFmYjRmZGRhOWFkZWY3M2U4ZGEyYzcxY2Q=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-02T20:54:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-02T20:54:35Z"}, "message": "Rollup merge of #54702 - RalfJung:fn-ptr-promotion, r=oli-obk\n\ndo not promote comparing function pointers\n\nThis *could* break existing code that relied on fn ptr comparison getting promoted to `'static` lifetime.\n\nFixes https://github.com/rust-lang/rust/issues/54696", "tree": {"sha": "7ac476bdd4fd91aec68e8f1d878355171d7932d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac476bdd4fd91aec68e8f1d878355171d7932d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9d96637d4996051fb4fdda9adef73e8da2c71cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbs9sLCRBK7hj4Ov3rIwAAdHIIAKIYnawT+biP3HVHspyGJ26X\nz2tU3KLCG8PUG+N6KGCFjaVhHMy2x2Obtss0X1PhHG6OKMlQhbStTGPjd1IjsFRn\nr+mV9apQuDIcaq+59fQUfdChP1Kug267jzAebepQjKl1hrRwlJdHzEaQ+3kG8RWT\nzXMgUdU51U5Rjx2RPe7/ucyU6e85mZOIzCMOZZ13fTjTzLCSUB43ZMwlv7jtYJZJ\nR34qk3Rfr6z1uuAEIX8P+GYrRnacVwYMnbZAavLRdj4oBVxwc6zOLWVAqHJs9axj\nfI+mXFReGf1tvOEIrDNtWQV70tRxQ8+soVglLkx5XX5MvlqRR6xPuqPunOJeI08=\n=4PNK\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ac476bdd4fd91aec68e8f1d878355171d7932d8\nparent 958f1c55822c259ee5f7e906f2399a917a532331\nparent 4cbfc9398d93d9eb0b1178b129f80de9be5c8ef9\nauthor Pietro Albini <pietro@pietroalbini.org> 1538513675 +0200\ncommitter GitHub <noreply@github.com> 1538513675 +0200\n\nRollup merge of #54702 - RalfJung:fn-ptr-promotion, r=oli-obk\n\ndo not promote comparing function pointers\n\nThis *could* break existing code that relied on fn ptr comparison getting promoted to `'static` lifetime.\n\nFixes https://github.com/rust-lang/rust/issues/54696\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d96637d4996051fb4fdda9adef73e8da2c71cd", "html_url": "https://github.com/rust-lang/rust/commit/d9d96637d4996051fb4fdda9adef73e8da2c71cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9d96637d4996051fb4fdda9adef73e8da2c71cd/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958f1c55822c259ee5f7e906f2399a917a532331", "url": "https://api.github.com/repos/rust-lang/rust/commits/958f1c55822c259ee5f7e906f2399a917a532331", "html_url": "https://github.com/rust-lang/rust/commit/958f1c55822c259ee5f7e906f2399a917a532331"}, {"sha": "4cbfc9398d93d9eb0b1178b129f80de9be5c8ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cbfc9398d93d9eb0b1178b129f80de9be5c8ef9", "html_url": "https://github.com/rust-lang/rust/commit/4cbfc9398d93d9eb0b1178b129f80de9be5c8ef9"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "2811848424b4eb992e5f511df3a2a7d0d7e1bc51", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d9d96637d4996051fb4fdda9adef73e8da2c71cd", "patch": "@@ -750,7 +750,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             }\n \n             Rvalue::BinaryOp(op, ref lhs, _) => {\n-                if let ty::RawPtr(_) = lhs.ty(self.mir, self.tcx).sty {\n+                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.mir, self.tcx).sty {\n                     assert!(op == BinOp::Eq || op == BinOp::Ne ||\n                             op == BinOp::Le || op == BinOp::Lt ||\n                             op == BinOp::Ge || op == BinOp::Gt ||"}, {"sha": "efe59e4face5eb14ef0a25755bdab8f3ca35d45e", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=d9d96637d4996051fb4fdda9adef73e8da2c71cd", "patch": "@@ -348,7 +348,7 @@ fn check_expr_kind<'a, 'tcx>(\n                 return NotPromotable;\n             }\n             match v.tables.node_id_to_type(lhs.hir_id).sty {\n-                ty::RawPtr(_) => {\n+                ty::RawPtr(_) | ty::FnPtr(..) => {\n                     assert!(op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne ||\n                             op.node == hir::BinOpKind::Le || op.node == hir::BinOpKind::Lt ||\n                             op.node == hir::BinOpKind::Ge || op.node == hir::BinOpKind::Gt);"}, {"sha": "d8408ed85491f38d83a4e0b3a31b24d6f1bd5796", "filename": "src/test/run-pass/issues/issue-54696.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Ftest%2Frun-pass%2Fissues%2Fissue-54696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Ftest%2Frun-pass%2Fissues%2Fissue-54696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-54696.rs?ref=d9d96637d4996051fb4fdda9adef73e8da2c71cd", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+\n+fn main() {\n+    // We shouldn't promote this\n+    &(main as fn() == main as fn());\n+    // Also check nested case\n+    &(&(main as fn()) == &(main as fn()));\n+}"}, {"sha": "f31d962852e4a92cf13290e7e4f78de240fd09db", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.nll.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr?ref=d9d96637d4996051fb4fdda9adef73e8da2c71cd", "patch": "@@ -14,7 +14,7 @@ error[E0716]: temporary value dropped while borrowed\n    |\n LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n-LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+...\n LL | }\n    | - temporary value is freed at the end of this statement\n    |\n@@ -25,11 +25,22 @@ error[E0716]: temporary value dropped while borrowed\n    |\n LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_raw_ptr_ops.rs:18:29\n+   |\n+LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n LL | }\n    | - temporary value is freed at the end of this statement\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}, {"sha": "c915886ca259290f5be02fa41968bc261ae1c2b8", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs?ref=d9d96637d4996051fb4fdda9adef73e8da2c71cd", "patch": "@@ -15,4 +15,5 @@ fn main() {\n     //~^ ERROR does not live long enough\n     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+    let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n }"}, {"sha": "baf12c5ac591d53ecca84854656e2ff30f39b645", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9d96637d4996051fb4fdda9adef73e8da2c71cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr?ref=d9d96637d4996051fb4fdda9adef73e8da2c71cd", "patch": "@@ -14,7 +14,7 @@ error[E0597]: borrowed value does not live long enough\n    |\n LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n-LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+...\n LL | }\n    | - temporary value only lives until here\n    |\n@@ -25,11 +25,22 @@ error[E0597]: borrowed value does not live long enough\n    |\n LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promoted_raw_ptr_ops.rs:18:29\n+   |\n+LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n LL | }\n    | - temporary value only lives until here\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}]}