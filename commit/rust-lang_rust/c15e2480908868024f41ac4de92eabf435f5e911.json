{"sha": "c15e2480908868024f41ac4de92eabf435f5e911", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNWUyNDgwOTA4ODY4MDI0ZjQxYWM0ZGU5MmVhYmY0MzVmNWU5MTE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-07-23T14:51:43Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-07-23T15:56:37Z"}, "message": "refactor extended tarball generaton to use the new ensure_if_default", "tree": {"sha": "42c9bde57e7a272a2a702daabbf750315e862edc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42c9bde57e7a272a2a702daabbf750315e862edc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c15e2480908868024f41ac4de92eabf435f5e911", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmD65rYACgkQzXazX3c0\ndp5z6w//fCl+cwOqExmo5GWaQRM9TqnUcn0YZX9049qKy0okxrPBi0TiQI/jvq/Y\n74vCOKBrv7f90pyDgcNXIopTxRmyGy3H7s5FRtjfpZdu9Y1StEFgFBqXzY4XUnWW\n2G8RQwcYWIgWebkMz8vbwg95sIZH2y7yuiypU8KAVkI3u6x6894irgkHHWDRtzX+\nQugvOY8JzO6pat10qKbsLvN1gkDR9HrIl0kzXKQC3jbE1vFx3Y76VaWYOUZeAclz\nBlxhOnwDutX8SZHqkeErC6Za9Bm0KB6WVDwcDzLTzyTB+hUKnz2e/q3vCoVGLozO\nVuox0DgH0X5iO9rUg/plUUv3kM7xri1tOz8TCtb58Y0N9qIKIAeem2e5pQHQE4F5\nEJtcQj17blytEn2nnp4jeF+7iAh0xtvP+lZCdFmw8Kj/ZJ3G36QLUACPQuZgeD2/\nBfxklf8aseC2+9cVDhtqUWH0j6P3UdjiDaKc6WQzAqgTYdwIi5K8GeQ9/Ad3+R11\n3P8s6yvbr093wPf2PnE0uFdRvP28Y6ZFso0+vKpoAqpaxO7KFBeQpurCUqEYsOOr\nNxkBloMra+FXRRp+3krD3ohu6I0U8gOTrShm7lr09Fp1/RxnmEXx6cBYbfWJNeUQ\nxOriRK3JvDxDBCfDLM4r0aq5gGqUo0ZQJDvHPMIZwZ/rzc6IOaY=\n=GR3T\n-----END PGP SIGNATURE-----", "payload": "tree 42c9bde57e7a272a2a702daabbf750315e862edc\nparent 2cfac3f04599ab50f1a7b6e21bb98c02b53bba75\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1627051903 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1627055797 +0200\n\nrefactor extended tarball generaton to use the new ensure_if_default\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c15e2480908868024f41ac4de92eabf435f5e911", "html_url": "https://github.com/rust-lang/rust/commit/c15e2480908868024f41ac4de92eabf435f5e911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c15e2480908868024f41ac4de92eabf435f5e911/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cfac3f04599ab50f1a7b6e21bb98c02b53bba75", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cfac3f04599ab50f1a7b6e21bb98c02b53bba75", "html_url": "https://github.com/rust-lang/rust/commit/2cfac3f04599ab50f1a7b6e21bb98c02b53bba75"}], "stats": {"total": 93, "additions": 55, "deletions": 38}, "files": [{"sha": "f2d841cb335ab5a0316839fbaba9cef1883e2d73", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c15e2480908868024f41ac4de92eabf435f5e911/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e2480908868024f41ac4de92eabf435f5e911/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c15e2480908868024f41ac4de92eabf435f5e911", "patch": "@@ -163,14 +163,8 @@ impl StepDescription {\n     }\n \n     fn maybe_run(&self, builder: &Builder<'_>, pathset: &PathSet) {\n-        if builder.config.exclude.iter().any(|e| pathset.has(e)) {\n-            eprintln!(\"Skipping {:?} because it is excluded\", pathset);\n+        if self.is_excluded(builder, pathset) {\n             return;\n-        } else if !builder.config.exclude.is_empty() {\n-            eprintln!(\n-                \"{:?} not skipped for {:?} -- not in {:?}\",\n-                pathset, self.name, builder.config.exclude\n-            );\n         }\n \n         // Determine the targets participating in this rule.\n@@ -182,6 +176,21 @@ impl StepDescription {\n         }\n     }\n \n+    fn is_excluded(&self, builder: &Builder<'_>, pathset: &PathSet) -> bool {\n+        if builder.config.exclude.iter().any(|e| pathset.has(e)) {\n+            eprintln!(\"Skipping {:?} because it is excluded\", pathset);\n+            return true;\n+        }\n+\n+        if !builder.config.exclude.is_empty() {\n+            eprintln!(\n+                \"{:?} not skipped for {:?} -- not in {:?}\",\n+                pathset, self.name, builder.config.exclude\n+            );\n+        }\n+        false\n+    }\n+\n     fn run(v: &[StepDescription], builder: &Builder<'_>, paths: &[PathBuf]) {\n         let should_runs =\n             v.iter().map(|desc| (desc.should_run)(ShouldRun::new(builder))).collect::<Vec<_>>();\n@@ -1579,6 +1588,27 @@ impl<'a> Builder<'a> {\n         self.cache.put(step, out.clone());\n         out\n     }\n+\n+    /// Ensure that a given step is built *only if it's supposed to be built by default*, returning\n+    /// its output. This will cache the step, so it's safe (and good!) to call this as often as\n+    /// needed to ensure that all dependencies are build.\n+    pub(crate) fn ensure_if_default<T, S: Step<Output = Option<T>>>(\n+        &'a self,\n+        step: S,\n+    ) -> S::Output {\n+        let desc = StepDescription::from::<S>();\n+        let should_run = (desc.should_run)(ShouldRun::new(self));\n+\n+        // Avoid running steps contained in --exclude\n+        for pathset in &should_run.paths {\n+            if desc.is_excluded(self, pathset) {\n+                return None;\n+            }\n+        }\n+\n+        // Only execute if it's supposed to run as default\n+        if desc.default && should_run.is_really_default() { self.ensure(step) } else { None }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "730bc51acbe1a780cde1f8f7b3916e61c747d938", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c15e2480908868024f41ac4de92eabf435f5e911/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e2480908868024f41ac4de92eabf435f5e911/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c15e2480908868024f41ac4de92eabf435f5e911", "patch": "@@ -59,7 +59,7 @@ pub struct Docs {\n }\n \n impl Step for Docs {\n-    type Output = GeneratedTarball;\n+    type Output = Option<GeneratedTarball>;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -72,7 +72,7 @@ impl Step for Docs {\n     }\n \n     /// Builds the `rust-docs` installer component.\n-    fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let host = self.host;\n         builder.default_doc(&[]);\n \n@@ -82,7 +82,7 @@ impl Step for Docs {\n         tarball.set_product_name(\"Rust Documentation\");\n         tarball.add_bulk_dir(&builder.doc_out(host), dest);\n         tarball.add_file(&builder.src.join(\"src/doc/robots.txt\"), dest, 0o644);\n-        tarball.generate()\n+        Some(tarball.generate())\n     }\n }\n \n@@ -1359,13 +1359,11 @@ impl Step for Extended {\n \n         let mut tarballs = Vec::new();\n         let mut built_tools = HashSet::new();\n-        macro_rules! add_tool {\n+        macro_rules! add_component {\n             ($name:expr => $step:expr) => {\n-                if should_build_extended_tool(builder, $name) {\n-                    if let Some(tarball) = builder.ensure($step) {\n-                        tarballs.push(tarball);\n-                        built_tools.insert($name);\n-                    }\n+                if let Some(tarball) = builder.ensure_if_default($step) {\n+                    tarballs.push(tarball);\n+                    built_tools.insert($name);\n                 }\n             };\n         }\n@@ -1377,31 +1375,20 @@ impl Step for Extended {\n         tarballs.push(builder.ensure(Rustc { compiler: builder.compiler(stage, target) }));\n         tarballs.push(builder.ensure(Std { compiler, target }).expect(\"missing std\"));\n \n-        if builder.config.docs {\n-            tarballs.push(builder.ensure(Docs { host: target }));\n-        }\n-\n         if target.contains(\"windows-gnu\") {\n             tarballs.push(builder.ensure(Mingw { host: target }).expect(\"missing mingw\"));\n         }\n \n-        if builder.config.profiler_enabled(target)\n-            || should_build_extended_tool(builder, \"rust-demangler\")\n-        {\n-            if let Some(tarball) = builder.ensure(RustDemangler { compiler, target }) {\n-                tarballs.push(tarball);\n-                built_tools.insert(\"rust-demangler\");\n-            }\n-        }\n-\n-        add_tool!(\"cargo\" => Cargo { compiler, target });\n-        add_tool!(\"rustfmt\" => Rustfmt { compiler, target });\n-        add_tool!(\"rls\" => Rls { compiler, target });\n-        add_tool!(\"rust-analyzer\" => RustAnalyzer { compiler, target });\n-        add_tool!(\"llvm-tools\" => LlvmTools { target });\n-        add_tool!(\"clippy\" => Clippy { compiler, target });\n-        add_tool!(\"miri\" => Miri { compiler, target });\n-        add_tool!(\"analysis\" => Analysis { compiler, target });\n+        add_component!(\"rust-docs\" => Docs { host: target });\n+        add_component!(\"rust-demangler\"=> RustDemangler { compiler, target });\n+        add_component!(\"cargo\" => Cargo { compiler, target });\n+        add_component!(\"rustfmt\" => Rustfmt { compiler, target });\n+        add_component!(\"rls\" => Rls { compiler, target });\n+        add_component!(\"rust-analyzer\" => RustAnalyzer { compiler, target });\n+        add_component!(\"llvm-components\" => LlvmTools { target });\n+        add_component!(\"clippy\" => Clippy { compiler, target });\n+        add_component!(\"miri\" => Miri { compiler, target });\n+        add_component!(\"analysis\" => Analysis { compiler, target });\n \n         let etc = builder.src.join(\"src/etc/installer\");\n "}, {"sha": "06acf1a9a008367bc2f85cabb20db0090ad06619", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c15e2480908868024f41ac4de92eabf435f5e911/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e2480908868024f41ac4de92eabf435f5e911/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=c15e2480908868024f41ac4de92eabf435f5e911", "patch": "@@ -139,7 +139,7 @@ macro_rules! install {\n \n install!((self, builder, _config),\n     Docs, \"src/doc\", _config.docs, only_hosts: false, {\n-        let tarball = builder.ensure(dist::Docs { host: self.target });\n+        let tarball = builder.ensure(dist::Docs { host: self.target }).expect(\"missing docs\");\n         install_sh(builder, \"docs\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Std, \"library/std\", true, only_hosts: false, {"}]}