{"sha": "28f8cb585aa4953864f64fdc58da9d4a2a34d6c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZjhjYjU4NWFhNDk1Mzg2NGY2NGZkYzU4ZGE5ZDRhMmEzNGQ2YzA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-24T22:43:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-24T22:43:48Z"}, "message": "Rollup merge of #52656 - jD91mZM2:stablize-uds, r=alexcrichton\n\nStablize Redox Unix Sockets\n\nI don't know if I did this correctly, but I basically spammed the `#[stable]` attribute everywhere :^)", "tree": {"sha": "05db70b4b5cf96c90efcd503f69273a3584d80e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05db70b4b5cf96c90efcd503f69273a3584d80e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28f8cb585aa4953864f64fdc58da9d4a2a34d6c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbV6ukCRBK7hj4Ov3rIwAAdHIIAEQ/kFBZMpHlDtBvDU+EI/JO\nFvastVNK35ytP5rHhi4bVl9Q2c5xAkcNAJ8RG1D4exlQ3XtvnYcsuQxQql+XvEGc\n4OU84voDQ3BrPyALO/LBd5CZ9KoTsSWuIlyuhrfTY3ujRXljT4OKO/t48oFcE2hk\nQcWfw2ncYQF106Odnr1LkSQZjPoTRJrmfSULi3T6vkpQ22vOLCFQevDaxfa0I0Ci\nVEkywlHL8XziaXhHXubduhjzdBIMGhPrLc3eDwvWc50ma+CpwaZT847MNGfT/qsv\nFT21r0MmcwbWPqTXpNx9z0Kp1fWqV4nNvxXY6sth4GVanETi2r0XRqVhbdUqxJM=\n=xfer\n-----END PGP SIGNATURE-----\n", "payload": "tree 05db70b4b5cf96c90efcd503f69273a3584d80e7\nparent f930017e109fe3ae786d800b9d7aa9041d3f74ce\nparent 1581971635b725764f23be86a618decffb0d754e\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1532472228 -0600\ncommitter GitHub <noreply@github.com> 1532472228 -0600\n\nRollup merge of #52656 - jD91mZM2:stablize-uds, r=alexcrichton\n\nStablize Redox Unix Sockets\n\nI don't know if I did this correctly, but I basically spammed the `#[stable]` attribute everywhere :^)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28f8cb585aa4953864f64fdc58da9d4a2a34d6c0", "html_url": "https://github.com/rust-lang/rust/commit/28f8cb585aa4953864f64fdc58da9d4a2a34d6c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28f8cb585aa4953864f64fdc58da9d4a2a34d6c0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f930017e109fe3ae786d800b9d7aa9041d3f74ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f930017e109fe3ae786d800b9d7aa9041d3f74ce", "html_url": "https://github.com/rust-lang/rust/commit/f930017e109fe3ae786d800b9d7aa9041d3f74ce"}, {"sha": "1581971635b725764f23be86a618decffb0d754e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1581971635b725764f23be86a618decffb0d754e", "html_url": "https://github.com/rust-lang/rust/commit/1581971635b725764f23be86a618decffb0d754e"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "2ab7770324254b8109aaf705630c6cc0c42f5d5d", "filename": "src/libstd/sys/redox/ext/net.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/28f8cb585aa4953864f64fdc58da9d4a2a34d6c0/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f8cb585aa4953864f64fdc58da9d4a2a34d6c0/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs?ref=28f8cb585aa4953864f64fdc58da9d4a2a34d6c0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"unix_socket_redox\", reason = \"new feature\", issue=\"51553\")]\n+#![stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n \n //! Unix-specific networking functionality\n \n@@ -37,6 +37,7 @@ use sys::{cvt, fd::FileDesc, syscall};\n /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n /// ```\n #[derive(Clone)]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n pub struct SocketAddr(());\n \n impl SocketAddr {\n@@ -64,6 +65,7 @@ impl SocketAddr {\n     /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     /// assert_eq!(addr.as_pathname(), None);\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn as_pathname(&self) -> Option<&Path> {\n         None\n     }\n@@ -91,10 +93,12 @@ impl SocketAddr {\n     /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     /// assert_eq!(addr.is_unnamed(), true);\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn is_unnamed(&self) -> bool {\n         false\n     }\n }\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl fmt::Debug for SocketAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"SocketAddr\")\n@@ -115,8 +119,10 @@ impl fmt::Debug for SocketAddr {\n /// stream.read_to_string(&mut response).unwrap();\n /// println!(\"{}\", response);\n /// ```\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n pub struct UnixStream(FileDesc);\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl fmt::Debug for UnixStream {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let mut builder = fmt.debug_struct(\"UnixStream\");\n@@ -147,6 +153,7 @@ impl UnixStream {\n     ///     }\n     /// };\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn connect<P: AsRef<Path>>(path: P) -> io::Result<UnixStream> {\n         if let Some(s) = path.as_ref().to_str() {\n             cvt(syscall::open(format!(\"chan:{}\", s), syscall::O_CLOEXEC))\n@@ -177,6 +184,7 @@ impl UnixStream {\n     ///     }\n     /// };\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn pair() -> io::Result<(UnixStream, UnixStream)> {\n         let server = cvt(syscall::open(\"chan:\", syscall::O_CREAT | syscall::O_CLOEXEC))\n             .map(FileDesc::new)?;\n@@ -200,6 +208,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// let sock_copy = socket.try_clone().expect(\"Couldn't clone socket\");\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn try_clone(&self) -> io::Result<UnixStream> {\n         self.0.duplicate().map(UnixStream)\n     }\n@@ -214,6 +223,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::local_addr unimplemented on redox\"))\n     }\n@@ -228,6 +238,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// let addr = socket.peer_addr().expect(\"Couldn't get peer address\");\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::peer_addr unimplemented on redox\"))\n     }\n@@ -266,6 +277,7 @@ impl UnixStream {\n     /// let err = result.unwrap_err();\n     /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn set_read_timeout(&self, _timeout: Option<Duration>) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::set_read_timeout unimplemented on redox\"))\n     }\n@@ -304,6 +316,7 @@ impl UnixStream {\n     /// let err = result.unwrap_err();\n     /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn set_write_timeout(&self, _timeout: Option<Duration>) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::set_write_timeout unimplemented on redox\"))\n     }\n@@ -320,6 +333,7 @@ impl UnixStream {\n     /// socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n     /// assert_eq!(socket.read_timeout().unwrap(), Some(Duration::new(1, 0)));\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::read_timeout unimplemented on redox\"))\n     }\n@@ -336,6 +350,7 @@ impl UnixStream {\n     /// socket.set_write_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set write timeout\");\n     /// assert_eq!(socket.write_timeout().unwrap(), Some(Duration::new(1, 0)));\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::write_timeout unimplemented on redox\"))\n     }\n@@ -350,6 +365,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// socket.set_nonblocking(true).expect(\"Couldn't set nonblocking\");\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n     }\n@@ -369,6 +385,7 @@ impl UnixStream {\n     ///\n     /// # Platform specific\n     /// On Redox this always returns None.\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         Ok(None)\n     }\n@@ -390,11 +407,13 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// socket.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn shutdown(&self, _how: Shutdown) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::shutdown unimplemented on redox\"))\n     }\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl io::Read for UnixStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         io::Read::read(&mut &*self, buf)\n@@ -406,6 +425,7 @@ impl io::Read for UnixStream {\n     }\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl<'a> io::Read for &'a UnixStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.0.read(buf)\n@@ -417,6 +437,7 @@ impl<'a> io::Read for &'a UnixStream {\n     }\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl io::Write for UnixStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         io::Write::write(&mut &*self, buf)\n@@ -427,6 +448,7 @@ impl io::Write for UnixStream {\n     }\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl<'a> io::Write for &'a UnixStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n@@ -437,18 +459,21 @@ impl<'a> io::Write for &'a UnixStream {\n     }\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl AsRawFd for UnixStream {\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.raw()\n     }\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl FromRawFd for UnixStream {\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixStream {\n         UnixStream(FileDesc::new(fd))\n     }\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl IntoRawFd for UnixStream {\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_raw()\n@@ -483,8 +508,10 @@ impl IntoRawFd for UnixStream {\n ///     }\n /// }\n /// ```\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n pub struct UnixListener(FileDesc);\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl fmt::Debug for UnixListener {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let mut builder = fmt.debug_struct(\"UnixListener\");\n@@ -512,6 +539,7 @@ impl UnixListener {\n     ///     }\n     /// };\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn bind<P: AsRef<Path>>(path: P) -> io::Result<UnixListener> {\n         if let Some(s) = path.as_ref().to_str() {\n             cvt(syscall::open(format!(\"chan:{}\", s), syscall::O_CREAT | syscall::O_CLOEXEC))\n@@ -545,6 +573,7 @@ impl UnixListener {\n     ///     Err(e) => println!(\"accept function failed: {:?}\", e),\n     /// }\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn accept(&self) -> io::Result<(UnixStream, SocketAddr)> {\n         self.0.duplicate_path(b\"listen\").map(|fd| (UnixStream(fd), SocketAddr(())))\n     }\n@@ -564,6 +593,7 @@ impl UnixListener {\n     ///\n     /// let listener_copy = listener.try_clone().expect(\"try_clone failed\");\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn try_clone(&self) -> io::Result<UnixListener> {\n         self.0.duplicate().map(UnixListener)\n     }\n@@ -579,6 +609,7 @@ impl UnixListener {\n     ///\n     /// let addr = listener.local_addr().expect(\"Couldn't get local address\");\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixListener::local_addr unimplemented on redox\"))\n     }\n@@ -594,6 +625,7 @@ impl UnixListener {\n     ///\n     /// listener.set_nonblocking(true).expect(\"Couldn't set non blocking\");\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n     }\n@@ -614,6 +646,7 @@ impl UnixListener {\n     ///\n     /// # Platform specific\n     /// On Redox this always returns None.\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         Ok(None)\n     }\n@@ -649,29 +682,34 @@ impl UnixListener {\n     ///     }\n     /// }\n     /// ```\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n     pub fn incoming<'a>(&'a self) -> Incoming<'a> {\n         Incoming { listener: self }\n     }\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl AsRawFd for UnixListener {\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.raw()\n     }\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl FromRawFd for UnixListener {\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixListener {\n         UnixListener(FileDesc::new(fd))\n     }\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl IntoRawFd for UnixListener {\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_raw()\n     }\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl<'a> IntoIterator for &'a UnixListener {\n     type Item = io::Result<UnixStream>;\n     type IntoIter = Incoming<'a>;\n@@ -712,10 +750,12 @@ impl<'a> IntoIterator for &'a UnixListener {\n /// }\n /// ```\n #[derive(Debug)]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n pub struct Incoming<'a> {\n     listener: &'a UnixListener,\n }\n \n+#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n impl<'a> Iterator for Incoming<'a> {\n     type Item = io::Result<UnixStream>;\n "}]}