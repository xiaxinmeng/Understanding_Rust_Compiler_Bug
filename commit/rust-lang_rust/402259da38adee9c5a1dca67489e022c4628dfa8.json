{"sha": "402259da38adee9c5a1dca67489e022c4628dfa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMjI1OWRhMzhhZGVlOWM1YTFkY2E2NzQ4OWUwMjJjNDYyOGRmYTg=", "commit": {"author": {"name": "Nicholas Mazzuca", "email": "npmazzuca@gmail.com", "date": "2016-01-02T23:34:55Z"}, "committer": {"name": "Nicholas Mazzuca", "email": "npmazzuca@gmail.com", "date": "2016-01-02T23:34:55Z"}, "message": "Take out Op<T>/OpAssign<T> for Wrapping<T>", "tree": {"sha": "bd97c1e88cbc72adf48ef1529522a96b3050ec6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd97c1e88cbc72adf48ef1529522a96b3050ec6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/402259da38adee9c5a1dca67489e022c4628dfa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/402259da38adee9c5a1dca67489e022c4628dfa8", "html_url": "https://github.com/rust-lang/rust/commit/402259da38adee9c5a1dca67489e022c4628dfa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/402259da38adee9c5a1dca67489e022c4628dfa8/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd3aa31e6d16f2e70892ca5984fc926fde7bbf1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3aa31e6d16f2e70892ca5984fc926fde7bbf1c", "html_url": "https://github.com/rust-lang/rust/commit/cd3aa31e6d16f2e70892ca5984fc926fde7bbf1c"}], "stats": {"total": 151, "additions": 6, "deletions": 145}, "files": [{"sha": "72f0d77f68baca3ebe4bac936860d8be404ded5a", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 1, "deletions": 144, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/402259da38adee9c5a1dca67489e022c4628dfa8/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402259da38adee9c5a1dca67489e022c4628dfa8/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=402259da38adee9c5a1dca67489e022c4628dfa8", "patch": "@@ -140,6 +140,7 @@ macro_rules! sh_impl_all {\n \n sh_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n \n+// FIXME(30524): impl Op<T> for Wrapping<T>, impl OpAssign<T> for Wrapping<T>\n macro_rules! wrapping_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -152,16 +153,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl Add<$t> for Wrapping<$t> {\n-            type Output = Wrapping<$t>;\n-\n-            #[inline(always)]\n-            fn add(self, other: $t) -> Wrapping<$t> {\n-                self + Wrapping(other)\n-            }\n-        }\n-\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n         impl AddAssign for Wrapping<$t> {\n             #[inline(always)]\n@@ -170,14 +161,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl AddAssign<$t> for Wrapping<$t> {\n-            #[inline(always)]\n-            fn add_assign(&mut self, other: $t) {\n-                self.add_assign(Wrapping(other))\n-            }\n-        }\n-\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Sub for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n@@ -188,16 +171,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl Sub<$t> for Wrapping<$t> {\n-            type Output = Wrapping<$t>;\n-\n-            #[inline(always)]\n-            fn sub(self, other: $t) -> Wrapping<$t> {\n-                self - Wrapping(other)\n-            }\n-        }\n-\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n         impl SubAssign for Wrapping<$t> {\n             #[inline(always)]\n@@ -206,14 +179,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl SubAssign<$t> for Wrapping<$t> {\n-            #[inline(always)]\n-            fn sub_assign(&mut self, other: $t) {\n-                self.sub_assign(Wrapping(other))\n-            }\n-        }\n-\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Mul for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n@@ -224,16 +189,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl Mul<$t> for Wrapping<$t> {\n-            type Output = Wrapping<$t>;\n-\n-            #[inline(always)]\n-            fn mul(self, other: $t) -> Wrapping<$t> {\n-                self * Wrapping(other)\n-            }\n-        }\n-\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n         impl MulAssign for Wrapping<$t> {\n             #[inline(always)]\n@@ -242,14 +197,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl MulAssign<$t> for Wrapping<$t> {\n-            #[inline(always)]\n-            fn mul_assign(&mut self, other: $t) {\n-                self.mul_assign(Wrapping(other))\n-            }\n-        }\n-\n         #[stable(feature = \"wrapping_div\", since = \"1.3.0\")]\n         impl Div for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n@@ -260,16 +207,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl Div<$t> for Wrapping<$t> {\n-            type Output = Wrapping<$t>;\n-\n-            #[inline(always)]\n-            fn div(self, other: $t) -> Wrapping<$t> {\n-                self / Wrapping(other)\n-            }\n-        }\n-\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n         impl DivAssign for Wrapping<$t> {\n             #[inline(always)]\n@@ -278,14 +215,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl DivAssign<$t> for Wrapping<$t> {\n-            #[inline(always)]\n-            fn div_assign(&mut self, other: $t) {\n-                self.div_assign(Wrapping(other))\n-            }\n-        }\n-\n         #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n         impl Rem for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n@@ -296,16 +225,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl Rem<$t> for Wrapping<$t> {\n-            type Output = Wrapping<$t>;\n-\n-            #[inline(always)]\n-            fn rem(self, other: $t) -> Wrapping<$t> {\n-                self % Wrapping(other)\n-            }\n-        }\n-\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n         impl RemAssign for Wrapping<$t> {\n             #[inline(always)]\n@@ -314,14 +233,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl RemAssign<$t> for Wrapping<$t> {\n-            #[inline(always)]\n-            fn rem_assign(&mut self, other: $t) {\n-                self.rem_assign(Wrapping(other))\n-            }\n-        }\n-\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Not for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n@@ -342,16 +253,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl BitXor<$t> for Wrapping<$t> {\n-            type Output = Wrapping<$t>;\n-\n-            #[inline(always)]\n-            fn bitxor(self, other: $t) -> Wrapping<$t> {\n-                self ^ Wrapping(other)\n-            }\n-        }\n-\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n         impl BitXorAssign for Wrapping<$t> {\n             #[inline(always)]\n@@ -360,14 +261,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl BitXorAssign<$t> for Wrapping<$t> {\n-            #[inline(always)]\n-            fn bitxor_assign(&mut self, other: $t) {\n-                self.bitxor_assign(Wrapping(other))\n-            }\n-        }\n-\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl BitOr for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n@@ -378,16 +271,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl BitOr<$t> for Wrapping<$t> {\n-            type Output = Wrapping<$t>;\n-\n-            #[inline(always)]\n-            fn bitor(self, other: $t) -> Wrapping<$t> {\n-                self | Wrapping(other)\n-            }\n-        }\n-\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n         impl BitOrAssign for Wrapping<$t> {\n             #[inline(always)]\n@@ -396,14 +279,6 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl BitOrAssign<$t> for Wrapping<$t> {\n-            #[inline(always)]\n-            fn bitor_assign(&mut self, other: $t) {\n-                self.bitor_assign(Wrapping(other))\n-            }\n-        }\n-\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl BitAnd for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n@@ -414,31 +289,13 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl BitAnd<$t> for Wrapping<$t> {\n-            type Output = Wrapping<$t>;\n-\n-            #[inline(always)]\n-            fn bitand(self, other: $t) -> Wrapping<$t> {\n-                self & Wrapping(other)\n-            }\n-        }\n-\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n         impl BitAndAssign for Wrapping<$t> {\n             #[inline(always)]\n             fn bitand_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self & other;\n             }\n         }\n-\n-        #[unstable(feature = \"wrapping_impls\", reason = \"recently added\", issue = \"30524\")]\n-        impl BitAndAssign<$t> for Wrapping<$t> {\n-            #[inline(always)]\n-            fn bitand_assign(&mut self, other: $t) {\n-                self.bitand_assign(Wrapping(other))\n-            }\n-        }\n     )*)\n }\n "}, {"sha": "228f4cdd1aa377e46182269cba4e7924d774a798", "filename": "src/test/run-pass/num-wrapping.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/402259da38adee9c5a1dca67489e022c4628dfa8/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402259da38adee9c5a1dca67489e022c4628dfa8/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs?ref=402259da38adee9c5a1dca67489e022c4628dfa8", "patch": "@@ -36,7 +36,8 @@ fn test_ops() {\n     macro_rules! op_test {\n         ($op:ident ($lhs:expr, $rhs:expr) == $ans:expr) => {\n             assert_eq!(black_box(Wrapping($lhs).$op(Wrapping($rhs))), Wrapping($ans));\n-            assert_eq!(black_box(Wrapping($lhs).$op($rhs)), Wrapping($ans));\n+            // FIXME(30524): uncomment this test when it's implemented\n+            // assert_eq!(black_box(Wrapping($lhs).$op($rhs)), Wrapping($ans));\n         }\n     }\n \n@@ -141,12 +142,15 @@ fn test_op_assigns() {\n                 tmp.$op(Wrapping($rhs));\n                 assert_eq!(black_box(tmp), Wrapping($ans));\n             }\n+            // FIXME(30524): Uncomment this test\n+            /*\n             {\n                 let mut tmp = Wrapping($initial);\n                 tmp = black_box(tmp);\n                 tmp.$op($rhs);\n                 assert_eq!(black_box(tmp), Wrapping($ans));\n             }\n+            */\n         }\n     }\n     op_assign_test!(add_assign(i8::MAX, 1) == i8::MIN);"}]}