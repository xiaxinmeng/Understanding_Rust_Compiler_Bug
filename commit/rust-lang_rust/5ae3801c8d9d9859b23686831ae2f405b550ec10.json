{"sha": "5ae3801c8d9d9859b23686831ae2f405b550ec10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZTM4MDFjOGQ5ZDk4NTliMjM2ODY4MzFhZTJmNDA1YjU1MGVjMTA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-08-12T19:26:38Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-08-12T19:26:38Z"}, "message": "Various changes to `rustc_on_unimplemented`\n\n- Add `from_method` and `from_desugaring` to formatting options\n- Change wording of errors slightly", "tree": {"sha": "45fe793a5adcff0cfba98152924b583f520ef9bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45fe793a5adcff0cfba98152924b583f520ef9bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ae3801c8d9d9859b23686831ae2f405b550ec10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae3801c8d9d9859b23686831ae2f405b550ec10", "html_url": "https://github.com/rust-lang/rust/commit/5ae3801c8d9d9859b23686831ae2f405b550ec10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ae3801c8d9d9859b23686831ae2f405b550ec10/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aa8d0320266b5579428312095fe49af05ada972", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa8d0320266b5579428312095fe49af05ada972", "html_url": "https://github.com/rust-lang/rust/commit/0aa8d0320266b5579428312095fe49af05ada972"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "280ce75720bcfef8d309c0caefbc6197b6648102", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5ae3801c8d9d9859b23686831ae2f405b550ec10/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae3801c8d9d9859b23686831ae2f405b550ec10/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=5ae3801c8d9d9859b23686831ae2f405b550ec10", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n             parse_error(tcx, item.span,\n                         \"this attribute must have a valid value\",\n                         \"expected value here\",\n-                        Some(r#\"eg `#[rustc_on_unimplemented = \"foo\"]`\"#));\n+                        Some(r#\"eg `#[rustc_on_unimplemented(message=\"foo\")]`\"#));\n         }\n \n         if errored {\n@@ -170,7 +170,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n             return Err(parse_error(tcx, attr.span,\n                                    \"`#[rustc_on_unimplemented]` requires a value\",\n                                    \"value required here\",\n-                                   Some(r#\"eg `#[rustc_on_unimplemented = \"foo\"]`\"#)));\n+                                   Some(r#\"eg `#[rustc_on_unimplemented(message=\"foo\")]`\"#)));\n         };\n         debug!(\"of_item({:?}/{:?}) = {:?}\", trait_def_id, impl_def_id, result);\n         result\n@@ -213,10 +213,13 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n             }\n         }\n \n+        let options: FxHashMap<String, String> = options.into_iter()\n+            .filter_map(|(k, v)| v.as_ref().map(|v| (k.to_owned(), v.to_owned())))\n+            .collect();\n         OnUnimplementedNote {\n-            label: label.map(|l| l.format(tcx, trait_ref)),\n-            message: message.map(|m| m.format(tcx, trait_ref)),\n-            note: note.map(|n| n.format(tcx, trait_ref)),\n+            label: label.map(|l| l.format(tcx, trait_ref, &options)),\n+            message: message.map(|m| m.format(tcx, trait_ref, &options)),\n+            note: note.map(|n| n.format(tcx, trait_ref, &options)),\n         }\n     }\n }\n@@ -251,24 +254,25 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                     Position::ArgumentNamed(s) if s == \"Self\" => (),\n                     // `{ThisTraitsName}` is allowed\n                     Position::ArgumentNamed(s) if s == name => (),\n+                    // `{from_method}` is allowed\n+                    Position::ArgumentNamed(s) if s == \"from_method\" => (),\n+                    // `{from_desugaring}` is allowed\n+                    Position::ArgumentNamed(s) if s == \"from_desugaring\" => (),\n                     // So is `{A}` if A is a type parameter\n                     Position::ArgumentNamed(s) => match generics.params.iter().find(|param| {\n                         param.name == s\n                     }) {\n                         Some(_) => (),\n                         None => {\n                             span_err!(tcx.sess, span, E0230,\n-                                      \"there is no parameter \\\n-                                       {} on trait {}\",\n-                                      s, name);\n+                                      \"there is no parameter `{}` on trait `{}`\", s, name);\n                             result = Err(ErrorReported);\n                         }\n                     },\n                     // `{:1}` and `{}` are not to be used\n                     Position::ArgumentIs(_) | Position::ArgumentImplicitlyIs(_) => {\n                         span_err!(tcx.sess, span, E0231,\n-                                  \"only named substitution \\\n-                                   parameters are allowed\");\n+                                  \"only named substitution parameters are allowed\");\n                         result = Err(ErrorReported);\n                     }\n                 }\n@@ -280,7 +284,8 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n \n     pub fn format(&self,\n                   tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                  trait_ref: ty::TraitRef<'tcx>)\n+                  trait_ref: ty::TraitRef<'tcx>,\n+                  options: &FxHashMap<String, String>)\n                   -> String\n     {\n         let name = tcx.item_name(trait_ref.def_id);\n@@ -296,6 +301,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n             let name = param.name.to_string();\n             Some((name, value))\n         }).collect::<FxHashMap<String, String>>();\n+        let empty_string = String::new();\n \n         let parser = Parser::new(&self.0, None);\n         parser.map(|p| {\n@@ -308,14 +314,20 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                             &trait_str\n                         }\n                         None => {\n-                            bug!(\"broken on_unimplemented {:?} for {:?}: \\\n-                                  no argument matching {:?}\",\n-                                 self.0, trait_ref, s)\n+                            if let Some(val) = options.get(s) {\n+                                val\n+                            } else if s == \"from_desugaring\" || s == \"from_method\" {\n+                                // don't break messages using these two arguments incorrectly\n+                                &empty_string\n+                            } else {\n+                                bug!(\"broken on_unimplemented {:?} for {:?}: \\\n+                                      no argument matching {:?}\",\n+                                     self.0, trait_ref, s)\n+                            }\n                         }\n                     },\n                     _ => {\n-                        bug!(\"broken on_unimplemented {:?} - bad \\\n-                              format arg\", self.0)\n+                        bug!(\"broken on_unimplemented {:?} - bad format arg\", self.0)\n                     }\n                 }\n             }"}, {"sha": "613b359c299b80238f2a9ab34803032d6147204e", "filename": "src/test/ui/error-codes/E0232.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae3801c8d9d9859b23686831ae2f405b550ec10/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae3801c8d9d9859b23686831ae2f405b550ec10/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr?ref=5ae3801c8d9d9859b23686831ae2f405b550ec10", "patch": "@@ -4,7 +4,7 @@ error[E0232]: `#[rustc_on_unimplemented]` requires a value\n LL | #[rustc_on_unimplemented]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ value required here\n    |\n-   = note: eg `#[rustc_on_unimplemented = \"foo\"]`\n+   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error: aborting due to previous error\n "}, {"sha": "286c71bb2990847078ba45170003511a9958ae17", "filename": "src/test/ui/on-unimplemented/bad-annotation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae3801c8d9d9859b23686831ae2f405b550ec10/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae3801c8d9d9859b23686831ae2f405b550ec10/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs?ref=5ae3801c8d9d9859b23686831ae2f405b550ec10", "patch": "@@ -28,7 +28,7 @@ trait BadAnnotation1\n {}\n \n #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{C}>`\"]\n-//~^ ERROR there is no parameter C on trait BadAnnotation2\n+//~^ ERROR there is no parameter `C` on trait `BadAnnotation2`\n trait BadAnnotation2<A,B>\n {}\n "}, {"sha": "212eb125f85b386e715b6c59c1b31df7b2f131c0", "filename": "src/test/ui/on-unimplemented/bad-annotation.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ae3801c8d9d9859b23686831ae2f405b550ec10/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae3801c8d9d9859b23686831ae2f405b550ec10/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr?ref=5ae3801c8d9d9859b23686831ae2f405b550ec10", "patch": "@@ -4,9 +4,9 @@ error[E0232]: `#[rustc_on_unimplemented]` requires a value\n LL | #[rustc_on_unimplemented] //~ ERROR `#[rustc_on_unimplemented]` requires a value\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ value required here\n    |\n-   = note: eg `#[rustc_on_unimplemented = \"foo\"]`\n+   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n-error[E0230]: there is no parameter C on trait BadAnnotation2\n+error[E0230]: there is no parameter `C` on trait `BadAnnotation2`\n   --> $DIR/bad-annotation.rs:30:1\n    |\n LL | #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{C}>`\"]\n@@ -24,31 +24,31 @@ error[E0232]: this attribute must have a valid value\n LL | #[rustc_on_unimplemented(lorem=\"\")]\n    |                          ^^^^^^^^ expected value here\n    |\n-   = note: eg `#[rustc_on_unimplemented = \"foo\"]`\n+   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error[E0232]: this attribute must have a valid value\n   --> $DIR/bad-annotation.rs:44:26\n    |\n LL | #[rustc_on_unimplemented(lorem(ipsum(dolor)))]\n    |                          ^^^^^^^^^^^^^^^^^^^ expected value here\n    |\n-   = note: eg `#[rustc_on_unimplemented = \"foo\"]`\n+   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error[E0232]: this attribute must have a valid value\n   --> $DIR/bad-annotation.rs:48:39\n    |\n LL | #[rustc_on_unimplemented(message=\"x\", message=\"y\")]\n    |                                       ^^^^^^^^^^^ expected value here\n    |\n-   = note: eg `#[rustc_on_unimplemented = \"foo\"]`\n+   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error[E0232]: this attribute must have a valid value\n   --> $DIR/bad-annotation.rs:52:39\n    |\n LL | #[rustc_on_unimplemented(message=\"x\", on(desugared, message=\"y\"))]\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected value here\n    |\n-   = note: eg `#[rustc_on_unimplemented = \"foo\"]`\n+   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error[E0232]: empty `on`-clause in `#[rustc_on_unimplemented]`\n   --> $DIR/bad-annotation.rs:56:26\n@@ -62,15 +62,15 @@ error[E0232]: this attribute must have a valid value\n LL | #[rustc_on_unimplemented(on=\"x\", message=\"y\")]\n    |                          ^^^^^^ expected value here\n    |\n-   = note: eg `#[rustc_on_unimplemented = \"foo\"]`\n+   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error[E0232]: this attribute must have a valid value\n   --> $DIR/bad-annotation.rs:67:40\n    |\n LL | #[rustc_on_unimplemented(on(desugared, on(desugared, message=\"x\")), message=\"y\")]\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected value here\n    |\n-   = note: eg `#[rustc_on_unimplemented = \"foo\"]`\n+   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error: aborting due to 10 previous errors\n "}]}