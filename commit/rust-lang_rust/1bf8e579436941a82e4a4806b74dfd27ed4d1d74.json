{"sha": "1bf8e579436941a82e4a4806b74dfd27ed4d1d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZjhlNTc5NDM2OTQxYTgyZTRhNDgwNmI3NGRmZDI3ZWQ0ZDFkNzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-16T01:11:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-18T03:24:52Z"}, "message": "Add `finally` method for deferred execution", "tree": {"sha": "8a469ef891d85cee00e71f520de12f6d46e5918f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a469ef891d85cee00e71f520de12f6d46e5918f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bf8e579436941a82e4a4806b74dfd27ed4d1d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf8e579436941a82e4a4806b74dfd27ed4d1d74", "html_url": "https://github.com/rust-lang/rust/commit/1bf8e579436941a82e4a4806b74dfd27ed4d1d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bf8e579436941a82e4a4806b74dfd27ed4d1d74/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db1abbec4ca9f18a224441c483cf23bb4f8361fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/db1abbec4ca9f18a224441c483cf23bb4f8361fd", "html_url": "https://github.com/rust-lang/rust/commit/db1abbec4ca9f18a224441c483cf23bb4f8361fd"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "3eadce1c30cccf23f19a5323dd04a405fdd344e8", "filename": "src/libcore/private.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf8e579436941a82e4a4806b74dfd27ed4d1d74/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf8e579436941a82e4a4806b74dfd27ed4d1d74/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=1bf8e579436941a82e4a4806b74dfd27ed4d1d74", "patch": "@@ -32,6 +32,8 @@ use uint;\n pub mod at_exit;\n #[path = \"private/global.rs\"]\n pub mod global;\n+#[path = \"private/finally.rs\"]\n+pub mod finally;\n \n extern mod rustrt {\n     #[legacy_exports];"}, {"sha": "f4d76dfd54db08bc4560cffd865b8f29e9094d3e", "filename": "src/libcore/private/finally.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/1bf8e579436941a82e4a4806b74dfd27ed4d1d74/src%2Flibcore%2Fprivate%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf8e579436941a82e4a4806b74dfd27ed4d1d74/src%2Flibcore%2Fprivate%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Ffinally.rs?ref=1bf8e579436941a82e4a4806b74dfd27ed4d1d74", "patch": "@@ -0,0 +1,88 @@\n+/*!\n+The Finally trait provides a method, `finally` on\n+stack closures that emulates Java-style try/finally blocks.\n+\n+# Example\n+\n+~~~\n+do || {\n+    ...\n+}.finally {\n+    alway_run_this();\n+}\n+~~~\n+*/\n+\n+use ops::Drop;\n+use task::{spawn, failing};\n+\n+pub trait Finally<T> {\n+    fn finally(&self, +dtor: &fn()) -> T;\n+}\n+\n+impl<T> &fn() -> T: Finally<T> {\n+    // XXX: Should not require a mode here\n+    fn finally(&self, +dtor: &fn()) -> T {\n+        let _d = Finallyalizer {\n+            dtor: dtor\n+        };\n+\n+        (*self)()\n+    }\n+}\n+\n+struct Finallyalizer {\n+    dtor: &fn()\n+}\n+\n+impl Finallyalizer: Drop {\n+    fn finalize(&self) {\n+        (self.dtor)();\n+    }\n+}\n+\n+#[test]\n+fn test_success() {\n+    let mut i = 0;\n+    do (|| {\n+        i = 10;\n+    }).finally {\n+        assert !failing();\n+        assert i == 10;\n+        i = 20;\n+    }\n+    assert i == 20;\n+}\n+\n+#[test]\n+#[ignore(cfg(windows))]\n+#[should_fail]\n+fn test_fail() {\n+    let mut i = 0;\n+    do (|| {\n+        i = 10;\n+        fail;\n+    }).finally {\n+        assert failing();\n+        assert i == 10;\n+    }\n+}\n+\n+#[test]\n+fn test_retval() {\n+    let i = do (fn&() -> int {\n+        10\n+    }).finally { };\n+    assert i == 10;\n+}\n+\n+#[test]\n+fn test_compact() {\n+    // XXX Should be able to use a fn item instead\n+    // of a closure for do_some_fallible_work,\n+    // but it's a type error.\n+    let do_some_fallible_work: &fn() = || { };\n+    fn but_always_run_this_function() { }\n+    do_some_fallible_work.finally(\n+        but_always_run_this_function);\n+}\n\\ No newline at end of file"}]}