{"sha": "880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MGZkNzg4ZWIwNDcxN2Q3YTc1YmQ1YmJmMGI4ZjBhNjkyYmRhNTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-25T01:36:51Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-25T19:01:10Z"}, "message": "rustc: Add an extra flag to object tydescs so that shapes know how to find the captured subtydescs", "tree": {"sha": "2d57e4c0d96cfc996fff4f70186c4e267c6733e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d57e4c0d96cfc996fff4f70186c4e267c6733e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "html_url": "https://github.com/rust-lang/rust/commit/880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f7c583bc12c0bddb28e43ea79b593a014811b09", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7c583bc12c0bddb28e43ea79b593a014811b09", "html_url": "https://github.com/rust-lang/rust/commit/2f7c583bc12c0bddb28e43ea79b593a014811b09"}], "stats": {"total": 175, "additions": 103, "deletions": 72}, "files": [{"sha": "64f24eb919c3c4cdce0c2533e24f863ce451a406", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "patch": "@@ -60,7 +60,8 @@ const tydesc_field_cmp_glue: int = 10;\n const tydesc_field_shape: int = 11;\n const tydesc_field_shape_tables: int = 12;\n const tydesc_field_n_params: int = 13;\n-const n_tydesc_fields: int = 14;\n+const tydesc_field_obj_params: int = 14;\n+const n_tydesc_fields: int = 15;\n \n const cmp_glue_op_eq: uint = 0u;\n "}, {"sha": "54648ada6d334c83672178761eed2872322e52c8", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "patch": "@@ -91,7 +91,7 @@ fn declare_upcalls(_tn: type_names, tydesc_type: TypeRef,\n           get_type_desc:\n               d(\"get_type_desc\",\n                 [T_ptr(T_nil()), T_size_t(), T_size_t(), T_size_t(),\n-                 T_ptr(T_ptr(tydesc_type))], T_ptr(tydesc_type)),\n+                 T_ptr(T_ptr(tydesc_type)), T_int()], T_ptr(tydesc_type)),\n           ivec_resize:\n               d(\"ivec_resize\", [T_ptr(T_opaque_ivec()), T_int()], T_void()),\n           ivec_spill:"}, {"sha": "7ec131053fedcc34969a0db0a196bf694ba5546e", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "patch": "@@ -4,7 +4,7 @@ import lib::llvm::False;\n import lib::llvm::True;\n import lib::llvm::llvm::ValueRef;\n import middle::trans;\n-import middle::trans::get_tydesc;\n+import middle::trans::{ get_tydesc, tps_normal };\n import middle::trans_common::*;\n import middle::ty;\n import std::option::none;\n@@ -43,7 +43,7 @@ fn add_gc_root(cx: &@block_ctxt, llval: ValueRef, ty: ty::t) -> @block_ctxt {\n     bcx = trans::zero_alloca(bcx, llval, ty).bcx;\n \n     let ti = none;\n-    let td_r = get_tydesc(bcx, ty, false, ti);\n+    let td_r = get_tydesc(bcx, ty, false, tps_normal, ti);\n     bcx = td_r.result.bcx;\n     let lltydesc = td_r.result.val;\n "}, {"sha": "e4a35a8d6b65d4934ed7b18a42a959839319fa87", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 69, "deletions": 49, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "patch": "@@ -884,7 +884,7 @@ fn trans_malloc_boxed(cx: &@block_ctxt, t: ty::t) ->\n fn field_of_tydesc(cx: &@block_ctxt, t: ty::t, escapes: bool, field: int) ->\n    result {\n     let ti = none::<@tydesc_info>;\n-    let tydesc = get_tydesc(cx, t, escapes, ti).result;\n+    let tydesc = get_tydesc(cx, t, escapes, tps_normal, ti).result;\n     ret rslt(tydesc.bcx,\n              bld::GEP(tydesc.bcx, tydesc.val, [C_int(0), C_int(field)]));\n }\n@@ -919,16 +919,16 @@ fn linearize_ty_params(cx: &@block_ctxt, t: ty::t) ->\n \n fn trans_stack_local_derived_tydesc(cx: &@block_ctxt, llsz: ValueRef,\n                                     llalign: ValueRef, llroottydesc: ValueRef,\n-                                    llparamtydescs: ValueRef, n_params: uint)\n+                                    llfirstparam: ValueRef, n_params: uint,\n+                                    obj_params: uint)\n    -> ValueRef {\n     let llmyroottydesc = alloca(cx, bcx_ccx(cx).tydesc_type);\n-    // By convention, desc 0 is the root descriptor.\n \n+    // By convention, desc 0 is the root descriptor.\n     llroottydesc = bld::Load(cx, llroottydesc);\n     bld::Store(cx, llroottydesc, llmyroottydesc);\n-    // Store a pointer to the rest of the descriptors.\n \n-    let llfirstparam = bld::GEP(cx, llparamtydescs, [C_int(0), C_int(0)]);\n+    // Store a pointer to the rest of the descriptors.\n     store_inbounds(cx, llfirstparam, llmyroottydesc,\n                    [C_int(0), C_int(abi::tydesc_field_first_param)]);\n     store_inbounds(cx, C_uint(n_params), llmyroottydesc,\n@@ -937,10 +937,20 @@ fn trans_stack_local_derived_tydesc(cx: &@block_ctxt, llsz: ValueRef,\n                    [C_int(0), C_int(abi::tydesc_field_size)]);\n     store_inbounds(cx, llalign, llmyroottydesc,\n                    [C_int(0), C_int(abi::tydesc_field_align)]);\n+    store_inbounds(cx, C_uint(obj_params), llmyroottydesc,\n+                   [C_int(0), C_int(abi::tydesc_field_obj_params)]);\n     ret llmyroottydesc;\n }\n \n+// Objects store their type parameters differently (in the object itself\n+// rather than in the type descriptor).\n+tag ty_param_storage {\n+    tps_normal;\n+    tps_obj(uint);\n+}\n+\n fn get_derived_tydesc(cx: &@block_ctxt, t: ty::t, escapes: bool,\n+                      storage: ty_param_storage,\n                       static_ti: &mutable option::t<@tydesc_info>) -> result {\n     alt cx.fcx.derived_tydescs.find(t) {\n       some(info) {\n@@ -954,10 +964,7 @@ fn get_derived_tydesc(cx: &@block_ctxt, t: ty::t, escapes: bool,\n     }\n     bcx_ccx(cx).stats.n_derived_tydescs += 1u;\n     let bcx = new_raw_block_ctxt(cx.fcx, cx.fcx.llderivedtydescs);\n-    let n_params: uint = ty::count_ty_params(bcx_tcx(bcx), t);\n     let tys = linearize_ty_params(bcx, t);\n-    assert (n_params == std::vec::len::<uint>(tys.params));\n-    assert (n_params == std::vec::len::<ValueRef>(tys.descs));\n     let root_ti = get_static_tydesc(bcx, t, tys.params);\n     static_ti = some::<@tydesc_info>(root_ti);\n     lazily_emit_all_tydesc_glue(cx, static_ti);\n@@ -966,43 +973,52 @@ fn get_derived_tydesc(cx: &@block_ctxt, t: ty::t, escapes: bool,\n     bcx = sz.bcx;\n     let align = align_of(bcx, t);\n     bcx = align.bcx;\n-    let v;\n+\n+    // Store the captured type descriptors in an alloca if the caller isn't\n+    // promising to do so itself.\n+    let n_params = ty::count_ty_params(bcx_tcx(bcx), t);\n+\n+    assert (n_params == std::vec::len::<uint>(tys.params));\n+    assert (n_params == std::vec::len::<ValueRef>(tys.descs));\n+\n+    let llparamtydescs =\n+        alloca(bcx, T_array(T_ptr(bcx_ccx(bcx).tydesc_type), n_params + 1u));\n+    let i = 0;\n+\n+    // If the type descriptor escapes, we need to add in the root as\n+    // the first parameter, because upcall_get_type_desc() expects it.\n     if escapes {\n-        /* for root*/\n-        let tydescs =\n-            alloca(bcx,\n-                   T_array(T_ptr(bcx_ccx(bcx).tydesc_type), 1u + n_params));\n-        let i = 0;\n-        let tdp = bld::GEP(bcx, tydescs, [C_int(0), C_int(i)]);\n-        bld::Store(bcx, root, tdp);\n+        bld::Store(bcx, root, GEPi(bcx, llparamtydescs, [0, 0]));\n         i += 1;\n-        for td: ValueRef in tys.descs {\n-            let tdp = bld::GEP(bcx, tydescs, [C_int(0), C_int(i)]);\n-            bld::Store(bcx, td, tdp);\n-            i += 1;\n-        }\n-        let lltydescsptr =\n-            bld::PointerCast(bcx, tydescs,\n-                                  T_ptr(T_ptr(bcx_ccx(bcx).tydesc_type)));\n+    }\n+\n+    for td: ValueRef in tys.descs {\n+        bld::Store(bcx, td, GEPi(bcx, llparamtydescs, [0, i]));\n+        i += 1;\n+    }\n+\n+    let llfirstparam =\n+        bld::PointerCast(bcx, llparamtydescs,\n+                         T_ptr(T_ptr(bcx_ccx(bcx).tydesc_type)));\n+\n+    let obj_params;\n+    alt storage {\n+        tps_normal. { obj_params = 0u; }\n+        tps_obj(np) { obj_params = np; }\n+    }\n+\n+    let v;\n+    if escapes {\n         let td_val =\n             bld::Call(bcx, bcx_ccx(bcx).upcalls.get_type_desc,\n                            [bcx.fcx.lltaskptr, C_null(T_ptr(T_nil())), sz.val,\n-                            align.val, C_int(1u + n_params as int),\n-                            lltydescsptr]);\n+                            align.val, C_uint(1u + n_params),\n+                            llfirstparam, C_uint(obj_params)]);\n         v = td_val;\n     } else {\n-        let llparamtydescs =\n-            alloca(bcx,\n-                   T_array(T_ptr(bcx_ccx(bcx).tydesc_type), n_params + 1u));\n-        let i = 0;\n-        for td: ValueRef in tys.descs {\n-            let tdp = bld::GEP(bcx, llparamtydescs, [C_int(0), C_int(i)]);\n-            bld::Store(bcx, td, tdp);\n-            i += 1;\n-        }\n-        v =\n-            trans_stack_local_derived_tydesc(bcx, sz.val, align.val, root,\n-                                             llparamtydescs, n_params);\n+        v = trans_stack_local_derived_tydesc(bcx, sz.val, align.val, root,\n+                                             llfirstparam, n_params,\n+                                             obj_params);\n     }\n     bcx.fcx.derived_tydescs.insert(t, {lltydesc: v, escapes: escapes});\n     ret rslt(cx, v);\n@@ -1011,6 +1027,7 @@ fn get_derived_tydesc(cx: &@block_ctxt, t: ty::t, escapes: bool,\n type get_tydesc_result = {kind: tydesc_kind, result: result};\n \n fn get_tydesc(cx: &@block_ctxt, orig_t: ty::t, escapes: bool,\n+              storage: ty_param_storage,\n               static_ti: &mutable option::t<@tydesc_info>) ->\n    get_tydesc_result {\n \n@@ -1036,7 +1053,7 @@ fn get_tydesc(cx: &@block_ctxt, orig_t: ty::t, escapes: bool,\n     // Does it contain a type param? If so, generate a derived tydesc.\n     if ty::type_contains_params(bcx_tcx(cx), t) {\n         ret {kind: tk_derived,\n-             result: get_derived_tydesc(cx, t, escapes, static_ti)};\n+             result: get_derived_tydesc(cx, t, escapes, storage, static_ti)};\n     }\n \n     // Otherwise, generate a tydesc if necessary, and return it.\n@@ -1264,7 +1281,8 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n                             cmp_glue, // cmp_glue\n                             C_shape(ccx, shape), // shape\n                             shape_tables, // shape_tables\n-                            C_int(0)]); // n_params\n+                            C_int(0),   // n_params\n+                            C_int(0)]); // n_obj_params\n \n         let gvar = ti.tydesc;\n         llvm::LLVMSetInitializer(gvar, tydesc);\n@@ -1483,7 +1501,7 @@ fn trans_res_drop(cx: @block_ctxt, rs: ValueRef, did: &ast::def_id,\n     let args = [cx.fcx.llretptr, cx.fcx.lltaskptr, dtor_env];\n     for tp: ty::t in tps {\n         let ti: option::t<@tydesc_info> = none;\n-        let td = get_tydesc(cx, tp, false, ti).result;\n+        let td = get_tydesc(cx, tp, false, tps_normal, ti).result;\n         args += [td.val];\n         cx = td.bcx;\n     }\n@@ -2143,7 +2161,7 @@ fn call_tydesc_glue_full(cx: &@block_ctxt, v: ValueRef, tydesc: ValueRef,\n fn call_tydesc_glue(cx: &@block_ctxt, v: ValueRef, t: ty::t, field: int) ->\n    result {\n     let ti: option::t<@tydesc_info> = none::<@tydesc_info>;\n-    let td = get_tydesc(cx, t, false, ti).result;\n+    let td = get_tydesc(cx, t, false, tps_normal, ti).result;\n     call_tydesc_glue_full(td.bcx, spill_if_immediate(td.bcx, v, t), td.val,\n                           field, ti);\n     ret rslt(td.bcx, C_nil());\n@@ -2159,7 +2177,7 @@ fn call_cmp_glue(cx: &@block_ctxt, lhs: ValueRef, rhs: ValueRef, t: ty::t,\n     let llrawlhsptr = bld::BitCast(cx, lllhs, T_ptr(T_i8()));\n     let llrawrhsptr = bld::BitCast(cx, llrhs, T_ptr(T_i8()));\n     let ti = none::<@tydesc_info>;\n-    let r = get_tydesc(cx, t, false, ti).result;\n+    let r = get_tydesc(cx, t, false, tps_normal, ti).result;\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_cmp_glue, ti);\n     let lltydesc = r.val;\n     let lltydescs =\n@@ -2194,7 +2212,8 @@ fn call_copy_glue(cx: &@block_ctxt, dst: ValueRef, src: ValueRef, t: ty::t,\n     let srcptr = bld::BitCast(cx, src, T_ptr(T_i8()));\n     let dstptr = bld::BitCast(cx, dst, T_ptr(T_i8()));\n     let ti = none;\n-    let {bcx, val: lltydesc} = get_tydesc(cx, t, false, ti).result;\n+    let {bcx, val: lltydesc} =\n+        get_tydesc(cx, t, false, tps_normal, ti).result;\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_copy_glue, ti);\n     let lltydescs = bld::GEP\n         (bcx, lltydesc, [C_int(0), C_int(abi::tydesc_field_first_param)]);\n@@ -2594,10 +2613,10 @@ fn trans_evec_append(cx: &@block_ctxt, t: ty::t, lhs: ValueRef,\n     }\n     let bcx = cx;\n     let ti = none::<@tydesc_info>;\n-    let llvec_tydesc = get_tydesc(bcx, t, false, ti).result;\n+    let llvec_tydesc = get_tydesc(bcx, t, false, tps_normal, ti).result;\n     bcx = llvec_tydesc.bcx;\n     ti = none::<@tydesc_info>;\n-    let llelt_tydesc = get_tydesc(bcx, elt_ty, false, ti).result;\n+    let llelt_tydesc = get_tydesc(bcx, elt_ty, false, tps_normal, ti).result;\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_take_glue, ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_drop_glue, ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_free_glue, ti);\n@@ -2956,7 +2975,8 @@ fn build_environment(bcx: @block_ctxt, lltydescs: [ValueRef],\n     if copying {\n         let bound_tydesc = GEPi(bcx, closure, [0, abi::closure_elt_tydesc]);\n         let ti = none;\n-        let bindings_tydesc = get_tydesc(bcx, bindings_ty, true, ti).result;\n+        let bindings_tydesc =\n+            get_tydesc(bcx, bindings_ty, true, tps_normal, ti).result;\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, ti);\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_free_glue, ti);\n         bcx = bindings_tydesc.bcx;\n@@ -3273,7 +3293,7 @@ fn lval_generic_fn(cx: &@block_ctxt, tpt: &ty::ty_param_kinds_and_ty,\n             // TODO: Doesn't always escape.\n \n             let ti = none::<@tydesc_info>;\n-            let td = get_tydesc(bcx, t, true, ti).result;\n+            let td = get_tydesc(bcx, t, true, tps_normal, ti).result;\n             tis += [ti];\n             bcx = td.bcx;\n             tydescs += [td.val];\n@@ -4526,7 +4546,7 @@ fn trans_log(lvl: int, cx: &@block_ctxt, e: &@ast::expr) -> result {\n     let log_bcx = sub.bcx;\n \n     let ti = none::<@tydesc_info>;\n-    let r = get_tydesc(log_bcx, e_ty, false, ti).result;\n+    let r = get_tydesc(log_bcx, e_ty, false, tps_normal, ti).result;\n     log_bcx = r.bcx;\n \n     // Call the polymorphic log function."}, {"sha": "c0da0dfb6f8fde9b339b51d46d95df93097d1715", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "patch": "@@ -640,7 +640,7 @@ fn T_tydesc(taskptr_type: TypeRef) -> TypeRef {\n     let elems =\n         [tydescpp, T_int(), T_int(), glue_fn_ty, glue_fn_ty, glue_fn_ty,\n          copy_glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty, cmp_glue_fn_ty,\n-         T_ptr(T_i8()), T_ptr(T_i8()), T_int()];\n+         T_ptr(T_i8()), T_ptr(T_i8()), T_int(), T_int()];\n     set_struct_body(tydesc, elems);\n     ret tydesc;\n }"}, {"sha": "dd0d02bc11b5063264edef1357c406de2e7af2e4", "filename": "src/comp/middle/trans_ivec.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs?ref=880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "patch": "@@ -8,7 +8,7 @@ import trans::{call_memmove, trans_shared_malloc, llsize_of,\n                alloca, array_alloca, size_of, llderivedtydescs_block_ctxt,\n                lazily_emit_tydesc_glue, get_tydesc, load_inbounds,\n                move_val_if_temp, trans_lval, node_id_type,\n-               new_sub_block_ctxt};\n+               new_sub_block_ctxt, tps_normal};\n import bld = trans_build;\n import trans_common::*;\n \n@@ -360,9 +360,9 @@ fn trans_append(cx: &@block_ctxt, t: ty::t, lhs: ValueRef,\n     // FIXME (issue #511): This is needed to prevent a leak.\n     let no_tydesc_info = none;\n \n-    rs = get_tydesc(bcx, t, false, no_tydesc_info).result;\n+    rs = get_tydesc(bcx, t, false, tps_normal, no_tydesc_info).result;\n     bcx = rs.bcx;\n-    rs = get_tydesc(bcx, unit_ty, false, no_tydesc_info).result;\n+    rs = get_tydesc(bcx, unit_ty, false, tps_normal, no_tydesc_info).result;\n     bcx = rs.bcx;\n     lazily_emit_tydesc_glue(bcx, abi::tydesc_field_take_glue, none);\n     lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, none);\n@@ -448,7 +448,8 @@ fn trans_append_literal(bcx: &@block_ctxt, v: ValueRef, vec_ty: ty::t,\n                         vals: &[@ast::expr]) -> @block_ctxt {\n     let elt_ty = ty::sequence_element_type(bcx_tcx(bcx), vec_ty);\n     let ti = none;\n-    let {bcx, val: td} = get_tydesc(bcx, elt_ty, false, ti).result;\n+    let {bcx, val: td} =\n+        get_tydesc(bcx, elt_ty, false, tps_normal, ti).result;\n     trans::lazily_emit_all_tydesc_glue(bcx, ti);\n     let opaque_v = bld::PointerCast(bcx, v, T_ptr(T_opaque_ivec()));\n     for val in vals {"}, {"sha": "17a600e971d96716c44ad7783d23b5962575c043", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "patch": "@@ -2,6 +2,7 @@\n \n import std::str;\n import std::option;\n+import std::vec;\n import option::none;\n import option::some;\n \n@@ -133,7 +134,14 @@ fn trans_obj(cx: @local_ctxt, sp: &span, ob: &ast::_obj,\n             GEP_tup_like(bcx, body_ty, body, [0, abi::obj_body_elt_tydesc]);\n         bcx = body_tydesc.bcx;\n         let ti = none::<@tydesc_info>;\n-        let body_td = get_tydesc(bcx, body_ty, true, ti).result;\n+\n+        let r = GEP_tup_like(bcx, body_ty, body,\n+                             [0, abi::obj_body_elt_typarams]);\n+        bcx = r.bcx;\n+        let body_typarams = r.val;\n+\n+        let storage = tps_obj(vec::len(ty_params));\n+        let body_td = get_tydesc(bcx, body_ty, true, storage, ti).result;\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, ti);\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_free_glue, ti);\n         bcx = body_td.bcx;\n@@ -147,16 +155,13 @@ fn trans_obj(cx: @local_ctxt, sp: &span, ob: &ast::_obj,\n         // Likewise for the object's fields.)\n \n         // Copy typarams into captured typarams.\n-        let body_typarams =\n-            GEP_tup_like(bcx, body_ty, body, [0, abi::obj_body_elt_typarams]);\n-        bcx = body_typarams.bcx;\n         // TODO: can we just get typarams_ty out of body_ty instead?\n         let typarams_ty: ty::t = ty::mk_tup(ccx.tcx, tps);\n         let i: int = 0;\n         for tp: ast::ty_param in ty_params {\n             let typaram = bcx.fcx.lltydescs[i];\n             let capture =\n-                GEP_tup_like(bcx, typarams_ty, body_typarams.val, [0, i]);\n+                GEP_tup_like(bcx, typarams_ty, body_typarams, [0, i]);\n             bcx = capture.bcx;\n             bcx = copy_val(bcx, INIT, capture.val, typaram, tydesc_ty);\n             i += 1;\n@@ -323,7 +328,7 @@ fn trans_anon_obj(bcx: @block_ctxt, sp: &span, anon_obj: &ast::anon_obj,\n             GEP_tup_like(bcx, body_ty, body, [0, abi::obj_body_elt_tydesc]);\n         bcx = body_tydesc.bcx;\n         let ti = none::<@tydesc_info>;\n-        let body_td = get_tydesc(bcx, body_ty, true, ti).result;\n+        let body_td = get_tydesc(bcx, body_ty, true, tps_normal, ti).result;\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, ti);\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_free_glue, ti);\n         bcx = body_td.bcx;"}, {"sha": "ba5a104b02481a10d31da6d88812e6ce4a59c317", "filename": "src/rt/rust_crate_cache.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Frt%2Frust_crate_cache.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Frt%2Frust_crate_cache.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_cache.cpp?ref=880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "patch": "@@ -5,7 +5,8 @@ type_desc *\n rust_crate_cache::get_type_desc(size_t size,\n                                 size_t align,\n                                 size_t n_descs,\n-                                type_desc const **descs)\n+                                type_desc const **descs,\n+                                uintptr_t n_obj_params)\n {\n     I(sched, n_descs > 1);\n     type_desc *td = NULL;\n@@ -35,6 +36,7 @@ rust_crate_cache::get_type_desc(size_t size,\n         // FIXME (issue #136):  Below is a miscalculation.\n         td->is_stateful |= descs[i]->is_stateful;\n     }\n+    td->n_obj_params = n_obj_params;\n     HASH_ADD(hh, this->type_descs, descs, keysz, td);\n     return td;\n }"}, {"sha": "71e1377e396e26a2f03e85973d86237b14ffdac0", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "patch": "@@ -284,7 +284,8 @@ struct type_desc {\n     cmp_glue_fn *cmp_glue;\n     const uint8_t *shape;\n     const rust_shape_tables *shape_tables;\n-    uint32_t n_params;\n+    uintptr_t n_params;\n+    uintptr_t n_obj_params;\n \n     // Residual fields past here are known only to runtime.\n     UT_hash_handle hh;"}, {"sha": "ce1796d065803fb45fe46dade1956bbd9640b9ba", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "patch": "@@ -3,14 +3,13 @@\n \n struct rust_scheduler;\n \n-class\n-rust_crate_cache\n-{\n+class rust_crate_cache {\n public:\n     type_desc *get_type_desc(size_t size,\n                              size_t align,\n                              size_t n_descs,\n-                             type_desc const **descs);\n+                             type_desc const **descs,\n+                             uintptr_t n_obj_params);\n \n private:\n "}, {"sha": "9857f06231e746c02868d777f58eecb5e2c42623", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/880fd788eb04717d7a75bd5bbf0b8f0a692bda53/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=880fd788eb04717d7a75bd5bbf0b8f0a692bda53", "patch": "@@ -339,15 +339,17 @@ upcall_get_type_desc(rust_task *task,\n                      size_t size,\n                      size_t align,\n                      size_t n_descs,\n-                     type_desc const **descs) {\n+                     type_desc const **descs,\n+                     uintptr_t n_obj_params) {\n     check_stack(task);\n     LOG_UPCALL_ENTRY(task);\n \n     LOG(task, cache, \"upcall get_type_desc with size=%\" PRIdPTR\n         \", align=%\" PRIdPTR \", %\" PRIdPTR \" descs\", size, align,\n         n_descs);\n     rust_crate_cache *cache = task->get_crate_cache();\n-    type_desc *td = cache->get_type_desc(size, align, n_descs, descs);\n+    type_desc *td = cache->get_type_desc(size, align, n_descs, descs,\n+                                         n_obj_params);\n     LOG(task, cache, \"returning tydesc 0x%\" PRIxPTR, td);\n     return td;\n }"}]}