{"sha": "ffd53277dc776dcf93bfa34c478bd99da2361515", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZDUzMjc3ZGM3NzZkY2Y5M2JmYTM0YzQ3OGJkOTlkYTIzNjE1MTU=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-01-12T19:54:12Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-01-29T20:37:44Z"}, "message": "Add fixme for precise path diagnostics", "tree": {"sha": "6e457c0d851a4703a2d754947a2a0f99a46debea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e457c0d851a4703a2d754947a2a0f99a46debea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffd53277dc776dcf93bfa34c478bd99da2361515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd53277dc776dcf93bfa34c478bd99da2361515", "html_url": "https://github.com/rust-lang/rust/commit/ffd53277dc776dcf93bfa34c478bd99da2361515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffd53277dc776dcf93bfa34c478bd99da2361515/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c748f32ee45ed42eaab4d6a62dc64720b5096c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/c748f32ee45ed42eaab4d6a62dc64720b5096c68", "html_url": "https://github.com/rust-lang/rust/commit/c748f32ee45ed42eaab4d6a62dc64720b5096c68"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "04ea3cbd8b66d2fe5f823ef7e027aff15831f39d", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffd53277dc776dcf93bfa34c478bd99da2361515/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd53277dc776dcf93bfa34c478bd99da2361515/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=ffd53277dc776dcf93bfa34c478bd99da2361515", "patch": "@@ -215,6 +215,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             PlaceRef { local, projection: [proj_base @ .., elem] } => {\n                 match elem {\n                     ProjectionElem::Deref => {\n+                        // FIXME(project-rfc_2229#36): print capture precisely here.\n                         let upvar_field_projection = self.is_upvar_field_projection(place);\n                         if let Some(field) = upvar_field_projection {\n                             let var_index = field.index();\n@@ -259,6 +260,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     ProjectionElem::Field(field, _ty) => {\n                         autoderef = true;\n \n+                        // FIXME(project-rfc_2229#36): print capture precisely here.\n                         let upvar_field_projection = self.is_upvar_field_projection(place);\n                         if let Some(field) = upvar_field_projection {\n                             let var_index = field.index();"}, {"sha": "c42e271f40e45eb793de20ec217e1c38744ac113", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ffd53277dc776dcf93bfa34c478bd99da2361515/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd53277dc776dcf93bfa34c478bd99da2361515/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=ffd53277dc776dcf93bfa34c478bd99da2361515", "patch": "@@ -73,8 +73,7 @@ crate use region_infer::RegionInferenceContext;\n // FIXME(eddyb) perhaps move this somewhere more centrally.\n #[derive(Debug)]\n crate struct Upvar<'tcx> {\n-    // FIXME(project-rfc-2229#8): ty::CapturePlace should have a to_string(), or similar\n-    //                           then this should not be needed.\n+    // FIXME(project-rfc_2229#36): print capture precisely here.\n     name: Symbol,\n \n     place: CapturedPlace<'tcx>,\n@@ -2156,6 +2155,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         place: PlaceRef<'tcx>,\n         is_local_mutation_allowed: LocalMutationIsAllowed,\n     ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {\n+        debug!(\"is_mutable: place={:?}, is_local...={:?}\", place, is_local_mutation_allowed);\n         match place.last_projection() {\n             None => {\n                 let local = &self.body.local_decls[place.local];\n@@ -2237,9 +2237,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         if let Some(field) = upvar_field_projection {\n                             let upvar = &self.upvars[field.index()];\n                             debug!(\n-                                \"upvar.mutability={:?} local_mutation_is_allowed={:?} \\\n-                                 place={:?}\",\n-                                upvar, is_local_mutation_allowed, place\n+                                \"is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \\\n+                                 place={:?}, place_base={:?}\",\n+                                upvar, is_local_mutation_allowed, place, place_base\n                             );\n                             match (upvar.place.mutability, is_local_mutation_allowed) {\n                                 ("}]}