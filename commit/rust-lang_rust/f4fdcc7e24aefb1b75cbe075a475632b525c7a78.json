{"sha": "f4fdcc7e24aefb1b75cbe075a475632b525c7a78", "node_id": "C_kwDOAAsO6NoAKGY0ZmRjYzdlMjRhZWZiMWI3NWNiZTA3NWE0NzU2MzJiNTI1YzdhNzg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-27T22:43:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-28T22:34:13Z"}, "message": "Remove redundant logic to suggest `as_ref`", "tree": {"sha": "4b0f3a0cba2653175d78a9608746ae9c8c478d29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b0f3a0cba2653175d78a9608746ae9c8c478d29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4fdcc7e24aefb1b75cbe075a475632b525c7a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4fdcc7e24aefb1b75cbe075a475632b525c7a78", "html_url": "https://github.com/rust-lang/rust/commit/f4fdcc7e24aefb1b75cbe075a475632b525c7a78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "830880640304ba8699c5f9a0c4665c38a3271963", "url": "https://api.github.com/repos/rust-lang/rust/commits/830880640304ba8699c5f9a0c4665c38a3271963", "html_url": "https://github.com/rust-lang/rust/commit/830880640304ba8699c5f9a0c4665c38a3271963"}], "stats": {"total": 158, "additions": 102, "deletions": 56}, "files": [{"sha": "becb81b2e26a8d916a8ea6a84853004803060db1", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 7, "deletions": 46, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=f4fdcc7e24aefb1b75cbe075a475632b525c7a78", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::ty;\n use rustc_mir_dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind, LookupResult, MoveError, MovePathIndex,\n };\n-use rustc_span::{sym, Span};\n+use rustc_span::Span;\n \n use crate::diagnostics::UseSpans;\n use crate::prefixes::PrefixSet;\n@@ -218,29 +218,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n     fn report(&mut self, error: GroupedMoveError<'tcx>) {\n         let (mut err, err_span) = {\n-            let (span, use_spans, original_path, kind, has_complex_bindings): (\n-                Span,\n-                Option<UseSpans<'tcx>>,\n-                Place<'tcx>,\n-                &IllegalMoveOriginKind<'_>,\n-                bool,\n-            ) = match error {\n-                GroupedMoveError::MovesFromPlace {\n-                    span,\n-                    original_path,\n-                    ref kind,\n-                    ref binds_to,\n-                    ..\n+            let (span, use_spans, original_path, kind) = match error {\n+                GroupedMoveError::MovesFromPlace { span, original_path, ref kind, .. }\n+                | GroupedMoveError::MovesFromValue { span, original_path, ref kind, .. } => {\n+                    (span, None, original_path, kind)\n                 }\n-                | GroupedMoveError::MovesFromValue {\n-                    span,\n-                    original_path,\n-                    ref kind,\n-                    ref binds_to,\n-                    ..\n-                } => (span, None, original_path, kind, !binds_to.is_empty()),\n                 GroupedMoveError::OtherIllegalMove { use_spans, original_path, ref kind } => {\n-                    (use_spans.args_or_use(), Some(use_spans), original_path, kind, false)\n+                    (use_spans.args_or_use(), Some(use_spans), original_path, kind)\n                 }\n             };\n             debug!(\n@@ -259,7 +243,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             target_place,\n                             span,\n                             use_spans,\n-                            has_complex_bindings,\n                         ),\n                     &IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } => {\n                         self.cannot_move_out_of_interior_of_drop(span, ty)\n@@ -302,7 +285,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         deref_target_place: Place<'tcx>,\n         span: Span,\n         use_spans: Option<UseSpans<'tcx>>,\n-        has_complex_bindings: bool,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         // Inspect the type of the content behind the\n         // borrow to provide feedback about why this\n@@ -399,28 +381,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n         };\n-        let ty = move_place.ty(self.body, self.infcx.tcx).ty;\n-        let def_id = match *ty.kind() {\n-            ty::Adt(self_def, _) => self_def.did(),\n-            ty::Foreign(def_id)\n-            | ty::FnDef(def_id, _)\n-            | ty::Closure(def_id, _)\n-            | ty::Generator(def_id, ..)\n-            | ty::Opaque(def_id, _) => def_id,\n-            _ => return err,\n-        };\n-        let diag_name = self.infcx.tcx.get_diagnostic_name(def_id);\n-        if matches!(diag_name, Some(sym::Option | sym::Result))\n-            && use_spans.map_or(true, |v| !v.for_closure())\n-            && !has_complex_bindings\n-        {\n-            err.span_suggestion_verbose(\n-                span.shrink_to_hi(),\n-                &format!(\"consider borrowing the `{}`'s content\", diag_name.unwrap()),\n-                \".as_ref()\",\n-                Applicability::MaybeIncorrect,\n-            );\n-        } else if let Some(use_spans) = use_spans {\n+        if let Some(use_spans) = use_spans {\n             self.explain_captures(\n                 &mut err, span, span, use_spans, move_place, None, \"\", \"\", \"\", false, true,\n             );"}, {"sha": "695b01d5ee3ad7798092c953c21d9c3283cd4088", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=f4fdcc7e24aefb1b75cbe075a475632b525c7a78", "patch": "@@ -63,8 +63,20 @@ LL |     use_mut(n); use_imm(m);\n error[E0507]: cannot move out of `*m` which is behind a mutable reference\n   --> $DIR/binop-move-semantics.rs:30:5\n    |\n-LL |     *m\n-   |     ^^ move occurs because `*m` has type `T`, which does not implement the `Copy` trait\n+LL |       *m\n+   |       -^\n+   |       |\n+   |  _____move occurs because `*m` has type `T`, which does not implement the `Copy` trait\n+   | |\n+LL | |     +\n+LL | |     *n;\n+   | |______- `*m` moved due to usage in operator\n+   |\n+note: calling this operator moves the left-hand side\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+   |\n+LL |     fn add(self, rhs: Rhs) -> Self::Output;\n+   |            ^^^^\n \n error[E0507]: cannot move out of `*n` which is behind a shared reference\n   --> $DIR/binop-move-semantics.rs:32:5"}, {"sha": "d3d75d579e6be8bede3865fbfa859ab6b334f963", "filename": "src/test/ui/borrowck/suggest-as-ref-on-mut-closure.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.rs?ref=f4fdcc7e24aefb1b75cbe075a475632b525c7a78", "patch": "@@ -0,0 +1,16 @@\n+// This is not exactly right, yet.\n+\n+// Ideally we should be suggesting `as_mut` for the first case,\n+//and suggesting to change `as_ref` to `as_mut` in the second.\n+\n+fn x(cb: &mut Option<&mut dyn FnMut()>) {\n+    cb.map(|cb| cb());\n+    //~^ ERROR cannot move out of `*cb` which is behind a mutable reference\n+}\n+\n+fn x2(cb: &mut Option<&mut dyn FnMut()>) {\n+    cb.as_ref().map(|cb| cb());\n+    //~^ ERROR cannot borrow `*cb` as mutable, as it is behind a `&` reference\n+}\n+\n+fn main() {}"}, {"sha": "47e45a25e5944c43e29597209ecede937235bdf6", "filename": "src/test/ui/borrowck/suggest-as-ref-on-mut-closure.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr?ref=f4fdcc7e24aefb1b75cbe075a475632b525c7a78", "patch": "@@ -0,0 +1,31 @@\n+error[E0507]: cannot move out of `*cb` which is behind a mutable reference\n+  --> $DIR/suggest-as-ref-on-mut-closure.rs:7:5\n+   |\n+LL |     cb.map(|cb| cb());\n+   |     ^^^--------------\n+   |     |  |\n+   |     |  `*cb` moved due to this method call\n+   |     move occurs because `*cb` has type `Option<&mut dyn FnMut()>`, which does not implement the `Copy` trait\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `*cb`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n+   |                            ^^^^\n+help: consider calling `.as_ref()` to borrow the type's contents\n+   |\n+LL |     cb.as_ref().map(|cb| cb());\n+   |        +++++++++\n+\n+error[E0596]: cannot borrow `*cb` as mutable, as it is behind a `&` reference\n+  --> $DIR/suggest-as-ref-on-mut-closure.rs:12:26\n+   |\n+LL |     cb.as_ref().map(|cb| cb());\n+   |                      --  ^^ `cb` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |                      |\n+   |                      help: consider changing this to be a mutable reference: `&mut &mut dyn FnMut()`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0507, E0596.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "fccfbe1d744c2054159e72ad87afd1d27a073229", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=f4fdcc7e24aefb1b75cbe075a475632b525c7a78", "patch": "@@ -2,23 +2,37 @@ error[E0507]: cannot move out of `selection.1` which is behind a shared referenc\n   --> $DIR/option-content-move.rs:11:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n-   |                    ^^^^^^^^^^^ move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n+   |                    ^^^^^^^^^^^ -------- `selection.1` moved due to this method call\n+   |                    |\n+   |                    move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing the `Option`'s content\n+note: this function takes ownership of the receiver `self`, which moves `selection.1`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub const fn unwrap(self) -> T {\n+   |                         ^^^^\n+help: consider calling `.as_ref()` to borrow the type's contents\n    |\n LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n-   |                               +++++++++\n+   |                                +++++++++\n \n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n   --> $DIR/option-content-move.rs:29:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n-   |                    ^^^^^^^^^^^ move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n+   |                    ^^^^^^^^^^^ -------- `selection.1` moved due to this method call\n+   |                    |\n+   |                    move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `selection.1`\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-help: consider borrowing the `Result`'s content\n+LL |     pub fn unwrap(self) -> T\n+   |                   ^^^^\n+help: consider calling `.as_ref()` to borrow the type's contents\n    |\n LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n-   |                               +++++++++\n+   |                                +++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "65d866c716e0e01049bd00b514915b708b5b5e4f", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fdcc7e24aefb1b75cbe075a475632b525c7a78/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=f4fdcc7e24aefb1b75cbe075a475632b525c7a78", "patch": "@@ -46,13 +46,25 @@ error[E0507]: cannot move out of `*m` which is behind a mutable reference\n   --> $DIR/unop-move-semantics.rs:24:6\n    |\n LL |     !*m;\n-   |      ^^ move occurs because `*m` has type `T`, which does not implement the `Copy` trait\n+   |     -^^\n+   |     ||\n+   |     |move occurs because `*m` has type `T`, which does not implement the `Copy` trait\n+   |     `*m` moved due to usage in operator\n+   |\n+note: calling this operator moves the left-hand side\n+  --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n+   |\n+LL |     fn not(self) -> Self::Output;\n+   |            ^^^^\n \n error[E0507]: cannot move out of `*n` which is behind a shared reference\n   --> $DIR/unop-move-semantics.rs:26:6\n    |\n LL |     !*n;\n-   |      ^^ move occurs because `*n` has type `T`, which does not implement the `Copy` trait\n+   |     -^^\n+   |     ||\n+   |     |move occurs because `*n` has type `T`, which does not implement the `Copy` trait\n+   |     `*n` moved due to usage in operator\n \n error: aborting due to 5 previous errors\n "}]}