{"sha": "f8976e377f694c98c180ce967b295531d1824563", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4OTc2ZTM3N2Y2OTRjOThjMTgwY2U5NjdiMjk1NTMxZDE4MjQ1NjM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-04-03T21:26:24Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-04-23T19:50:17Z"}, "message": "Add MirPass to collect Unevaluated consts in MIR body", "tree": {"sha": "769aacfdb154b8c49f091470a9e1f24c8c0b566d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/769aacfdb154b8c49f091470a9e1f24c8c0b566d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8976e377f694c98c180ce967b295531d1824563", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6h8XkACgkQgTGiTgx5\n76/eEw/+KW3Ud6jJn9A2ypCTAb2BtkDF/CfhRAU4klixKVi/s33rkJav7X2rs8qx\n3xqYWAQTCWtlljPpf2Kdda3bB8IDAEEDHx4ycVhPzS0itlMOweIWvCd53yiosIdq\nIk69m0bnFGcs5nR9C1N9Tc6pLpppPbEWdHTa8cQsaFK6fa6AKW4DjMRKaYDXhhlo\n8OAK0AiOVAeR1Li+ejqegcdJ0XjRneSr8oSOawDkD0kY/HMgN896r0Jh2z8Lhmre\n/GiV/V/E2c1w+mblrwgKElN3FSfBe68hMI7oY0sVDkx3Zba6z+LyzOirPVfuEJJW\nYqKtGXzd3VlFmmMbdDI2uPpHrH0SDmlm2JGKz1jMj04R3wi5Yvv+0qQCiQtEMlQ6\nbv1v0dnbcSLSiVpk5fsVxHCXBy3yN+ks+Yt514WY7vg8VNH5VA9ABN5PCyz54mM9\ndUSMrPQ0W8wo2y5v2FikC8z1NEK99GPc6jmv83VxNBwfBu+Lvm2BcZNkvPELGR9z\nRgXAdobxhnXgB9Mkew477dr6fELiDWfW9MDGU5O7jzpaA79m0BZKAsWOjgH03D2u\nOcn1xqPE9Gv2JZAax/GhJ041Zd3Gsp7u9KhvvMQh1w5vsXtZDFwO1sWR4dOU20Et\nJjARBl+mFXOFSMw1i2BArEA4uAEPGYiuM1ktX7qcoaYpIEcYsfk=\n=T+dQ\n-----END PGP SIGNATURE-----", "payload": "tree 769aacfdb154b8c49f091470a9e1f24c8c0b566d\nparent 6807bb7482f88d9bfe535d8788664e733a469e7a\nauthor Santiago Pastorino <spastorino@gmail.com> 1585949184 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1587671417 -0300\n\nAdd MirPass to collect Unevaluated consts in MIR body\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8976e377f694c98c180ce967b295531d1824563", "html_url": "https://github.com/rust-lang/rust/commit/f8976e377f694c98c180ce967b295531d1824563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8976e377f694c98c180ce967b295531d1824563/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6807bb7482f88d9bfe535d8788664e733a469e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6807bb7482f88d9bfe535d8788664e733a469e7a", "html_url": "https://github.com/rust-lang/rust/commit/6807bb7482f88d9bfe535d8788664e733a469e7a"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "5ab4689d2acb7540b7ab253416ea4afe42539717", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8976e377f694c98c180ce967b295531d1824563/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8976e377f694c98c180ce967b295531d1824563/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=f8976e377f694c98c180ce967b295531d1824563", "patch": "@@ -156,6 +156,9 @@ pub struct Body<'tcx> {\n     /// A span representing this MIR, for error reporting.\n     pub span: Span,\n \n+    /// Unevaluated consts to evaluate them regardless of being optimized out\n+    pub uneval_consts: Vec<Constant<'tcx>>,\n+\n     /// The user may be writing e.g. &[(SOME_CELL, 42)][i].1 and this would get promoted, because\n     /// we'd statically know that no thing with interior mutability will ever be available to the\n     /// user without some serious unsafe code.  Now this means that our promoted is actually\n@@ -203,6 +206,7 @@ impl<'tcx> Body<'tcx> {\n             spread_arg: None,\n             var_debug_info,\n             span,\n+            uneval_consts: Vec::new(),\n             ignore_interior_mut_in_const_validation: false,\n             control_flow_destroyed,\n             predecessor_cache: PredecessorCache::new(),\n@@ -227,6 +231,7 @@ impl<'tcx> Body<'tcx> {\n             arg_count: 0,\n             spread_arg: None,\n             span: DUMMY_SP,\n+            uneval_consts: Vec::new(),\n             control_flow_destroyed: Vec::new(),\n             generator_kind: None,\n             var_debug_info: Vec::new(),"}, {"sha": "4735be29f6893be234cb3f16a33c8e7bc554cf7e", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8976e377f694c98c180ce967b295531d1824563/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8976e377f694c98c180ce967b295531d1824563/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=f8976e377f694c98c180ce967b295531d1824563", "patch": "@@ -4,7 +4,8 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n-use rustc_middle::mir::{Body, ConstQualifs, MirPhase, Promoted};\n+use rustc_middle::mir::visit::Visitor as _;\n+use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::steal::Steal;\n use rustc_middle::ty::{InstanceDef, TyCtxt, TypeFoldable};\n@@ -33,6 +34,7 @@ pub mod rustc_peek;\n pub mod simplify;\n pub mod simplify_branches;\n pub mod simplify_try;\n+pub mod uneval_const_set;\n pub mod uninhabited_enum_branching;\n pub mod unreachable_prop;\n \n@@ -237,6 +239,15 @@ fn mir_validated(\n     let _ = tcx.mir_const_qualif(def_id);\n \n     let mut body = tcx.mir_const(def_id).steal();\n+\n+    let mut uneval_consts = Vec::new();\n+    let mut uneval_const_visitor =\n+        self::uneval_const_set::UnevalConstSetVisitor::new(&mut uneval_consts);\n+    for (bb, bb_data) in traversal::reverse_postorder(&body) {\n+        uneval_const_visitor.visit_basic_block_data(bb, bb_data);\n+    }\n+    body.uneval_consts = uneval_consts;\n+\n     let promote_pass = promote_consts::PromoteTemps::default();\n     run_passes(\n         tcx,"}, {"sha": "98190f0f13f427c26c5ac6e5c5836bdc120f3f09", "filename": "src/librustc_mir/transform/uneval_const_set.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f8976e377f694c98c180ce967b295531d1824563/src%2Flibrustc_mir%2Ftransform%2Funeval_const_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8976e377f694c98c180ce967b295531d1824563/src%2Flibrustc_mir%2Ftransform%2Funeval_const_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funeval_const_set.rs?ref=f8976e377f694c98c180ce967b295531d1824563", "patch": "@@ -0,0 +1,23 @@\n+use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::mir::{Constant, Location};\n+use rustc_middle::ty::ConstKind;\n+\n+pub struct UnevalConstSetVisitor<'a, 'tcx> {\n+    uneval_consts: &'a mut Vec<Constant<'tcx>>,\n+}\n+\n+impl<'a, 'tcx> UnevalConstSetVisitor<'a, 'tcx> {\n+    pub fn new(uneval_consts: &'a mut Vec<Constant<'tcx>>) -> Self {\n+        UnevalConstSetVisitor { uneval_consts }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for UnevalConstSetVisitor<'a, 'tcx> {\n+    fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n+        let const_kind = constant.literal.val;\n+\n+        if let ConstKind::Unevaluated(_, _, _) = const_kind {\n+            self.uneval_consts.push(*constant);\n+        }\n+    }\n+}"}]}