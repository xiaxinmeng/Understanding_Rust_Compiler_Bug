{"sha": "711f11e8d607b3ecf297366fa704b5200709d12d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMWYxMWU4ZDYwN2IzZWNmMjk3MzY2ZmE3MDRiNTIwMDcwOWQxMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-25T06:24:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-25T06:24:56Z"}, "message": "Auto merge of #30544 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #30251, #30461, #30465, #30473, #30529, #30537, #30539, #30541, #30543\n- Failed merges:", "tree": {"sha": "60066a3f39833f08c3e57def13c92a02f1e9c6fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60066a3f39833f08c3e57def13c92a02f1e9c6fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/711f11e8d607b3ecf297366fa704b5200709d12d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/711f11e8d607b3ecf297366fa704b5200709d12d", "html_url": "https://github.com/rust-lang/rust/commit/711f11e8d607b3ecf297366fa704b5200709d12d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/711f11e8d607b3ecf297366fa704b5200709d12d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8037e62d29f7e0f7084c95b87c243dc83bdd8e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8037e62d29f7e0f7084c95b87c243dc83bdd8e3c", "html_url": "https://github.com/rust-lang/rust/commit/8037e62d29f7e0f7084c95b87c243dc83bdd8e3c"}, {"sha": "944b337c9559db56b26f2a06fff65bf6ea8eb5a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/944b337c9559db56b26f2a06fff65bf6ea8eb5a6", "html_url": "https://github.com/rust-lang/rust/commit/944b337c9559db56b26f2a06fff65bf6ea8eb5a6"}], "stats": {"total": 549, "additions": 34, "deletions": 515}, "files": [{"sha": "c3851dcc8f1ede74bbf1af7cb0c73f033c1b1031", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/711f11e8d607b3ecf297366fa704b5200709d12d/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/711f11e8d607b3ecf297366fa704b5200709d12d/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=711f11e8d607b3ecf297366fa704b5200709d12d", "patch": "@@ -238,7 +238,7 @@ are:\n * Don't be afraid to ask! The Rust community is friendly and helpful.\n \n [gdfrustc]: http://manishearth.github.io/rust-internals-docs/rustc/\n-[gsearchdocs]: https://www.google.de/search?q=site:doc.rust-lang.org+your+query+here\n+[gsearchdocs]: https://www.google.com/search?q=site:doc.rust-lang.org+your+query+here\n [rif]: http://internals.rust-lang.org\n [rr]: https://doc.rust-lang.org/book/README.html\n [tlgba]: http://tomlee.co/2014/04/03/a-more-detailed-tour-of-the-rust-compiler/"}, {"sha": "df76d805f824b4038d8dd84615f3999c0d0b2657", "filename": "configure", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/711f11e8d607b3ecf297366fa704b5200709d12d/configure", "raw_url": "https://github.com/rust-lang/rust/raw/711f11e8d607b3ecf297366fa704b5200709d12d/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=711f11e8d607b3ecf297366fa704b5200709d12d", "patch": "@@ -521,15 +521,18 @@ then\n     # if configure is running in an interactive bash shell. /usr/bin/env\n     # exists *everywhere*.\n     BIN_TO_PROBE=\"$SHELL\"\n-    if [ -z \"$BIN_TO_PROBE\" -a -e \"/usr/bin/env\" ]; then\n-       BIN_TO_PROBE=\"/usr/bin/env\"\n+    if [ ! -r \"$BIN_TO_PROBE\" ]; then\n+        if [ -r \"/usr/bin/env\" ]; then\n+            BIN_TO_PROBE=\"/usr/bin/env\"\n+        else\n+            warn \"Cannot check if the userland is i686 or x86_64\"\n+        fi\n+    fi\n+    file -L \"$BIN_TO_PROBE\" | grep -q \"x86[_-]64\"\n+    if [ $? != 0 ]; then\n+        msg \"i686 userland on x86_64 Linux kernel\"\n+        CFG_CPUTYPE=i686\n     fi\n-    if [ -n \"$BIN_TO_PROBE\" ]; then\n-       file -L \"$BIN_TO_PROBE\" | grep -q \"x86[_-]64\"\n-       if [ $? != 0 ]; then\n-            CFG_CPUTYPE=i686\n-       fi\n-     fi\n fi\n \n "}, {"sha": "de41a8fe03b61daa8cbb008d935ca77507280223", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=711f11e8d607b3ecf297366fa704b5200709d12d", "patch": "@@ -182,7 +182,7 @@ analysis is the only way to get at the value stored inside an `Option<T>`. This\n means that you, as the programmer, must handle the case when an `Option<T>` is\n `None` instead of `Some(t)`.\n \n-But wait, what about `unwrap`,which we used [`previously`](#code-unwrap-double)?\n+But wait, what about `unwrap`, which we used [previously](#code-unwrap-double)?\n There was no case analysis there! Instead, the case analysis was put inside the\n `unwrap` method for you. You could define it yourself if you want:\n "}, {"sha": "da84c6a337416ed2bfbd5f63143efe46101adca9", "filename": "src/doc/book/no-stdlib.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Fbook%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Fbook%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fno-stdlib.md?ref=711f11e8d607b3ecf297366fa704b5200709d12d", "patch": "@@ -151,7 +151,7 @@ extern fn panic_fmt(args: &core::fmt::Arguments,\n # fn main() {}\n ```\n \n-Note that there is one extra lang item here which differs from the examples\n+Note that there is one lang item here whose signature differs from the examples\n above, `panic_fmt`. This must be defined by consumers of libcore because the\n core library declares panics, but it does not define it. The `panic_fmt`\n lang item is this crate's definition of panic, and it must be guaranteed to"}, {"sha": "f4898dc676530356e86b287c42018a2ad4cd5699", "filename": "src/doc/complement-design-faq.md", "status": "modified", "additions": 1, "deletions": 184, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Fcomplement-design-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Fcomplement-design-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-design-faq.md?ref=711f11e8d607b3ecf297366fa704b5200709d12d", "patch": "@@ -1,186 +1,3 @@\n % The Rust Design FAQ\n \n-This document describes decisions that were arrived at after lengthy discussion and\n-experimenting with alternatives. Please do not propose reversing them unless\n-you have a new, extremely compelling argument. Note that this document\n-specifically talks about the *language* and not any library or implementation.\n-\n-A few general guidelines define the philosophy:\n-\n-- [Memory safety][mem] must never be compromised\n-- [Abstraction][abs] should be zero-cost, while still maintaining safety\n-- Practicality is key\n-\n-[mem]: http://en.wikipedia.org/wiki/Memory_safety\n-[abs]: http://en.wikipedia.org/wiki/Abstraction_%28computer_science%29\n-\n-# Semantics\n-\n-## Data layout is unspecified\n-\n-In the general case, `enum` and `struct` layout is undefined. This allows the\n-compiler to potentially do optimizations like re-using padding for the\n-discriminant, compacting variants of nested enums, reordering fields to remove\n-padding, etc. `enum`s which carry no data (\"C-like\") are eligible to have a\n-defined representation. Such `enum`s are easily distinguished in that they are\n-simply a list of names that carry no data:\n-\n-```\n-enum CLike {\n-    A,\n-    B = 32,\n-    C = 34,\n-    D\n-}\n-```\n-\n-The [repr attribute][repr] can be applied to such `enum`s to give them the same\n-representation as a primitive. This allows using Rust `enum`s in FFI where C\n-`enum`s are also used, for most use cases. The attribute can also be applied\n-to `struct`s to get the same layout as a C struct would.\n-\n-[repr]: reference.html#ffi-attributes\n-\n-## There is no GC\n-\n-A language that requires a GC is a language that opts into a larger, more\n-complex runtime than Rust cares for. Rust is usable on bare metal with no\n-extra runtime. Additionally, garbage collection is frequently a source of\n-non-deterministic behavior. Rust provides the tools to make using a GC\n-possible and even pleasant, but it should not be a requirement for\n-implementing the language.\n-\n-## Non-`Sync` `static mut` is unsafe\n-\n-Types which are [`Sync`][sync] are thread-safe when multiple shared\n-references to them are used concurrently. Types which are not `Sync` are not\n-thread-safe, and thus when used in a global require unsafe code to use.\n-\n-[sync]: core/marker/trait.Sync.html\n-\n-### If mutable static items that implement `Sync` are safe, why is taking &mut SHARABLE unsafe?\n-\n-Having multiple aliasing `&mut T`s is never allowed. Due to the nature of\n-globals, the borrow checker cannot possibly ensure that a static obeys the\n-borrowing rules, so taking a mutable reference to a static is always unsafe.\n-\n-## There is no life before or after main (no static ctors/dtors)\n-\n-Globals can not have a non-constant-expression constructor and cannot have a\n-destructor at all. This is an opinion of the language. Static constructors are\n-undesirable because they can slow down program startup. Life before main is\n-often considered a misfeature, never to be used. Rust helps this along by just\n-not having the feature.\n-\n-See [the C++ FQA][fqa]  about the \"static initialization order fiasco\", and\n-[Eric Lippert's blog][elp] for the challenges in C#, which also has this\n-feature.\n-\n-A nice replacement is [lazy_static][lazy_static].\n-\n-[fqa]: http://yosefk.com/c++fqa/ctors.html#fqa-10.12\n-[elp]: http://ericlippert.com/2013/02/06/static-constructors-part-one/\n-[lazy_static]: https://crates.io/crates/lazy_static\n-\n-## The language does not require a runtime\n-\n-See the above entry on GC. Requiring a runtime limits the utility of the\n-language, and makes it undeserving of the title \"systems language\". All Rust\n-code should need to run is a stack.\n-\n-## `match` must be exhaustive\n-\n-`match` being exhaustive has some useful properties. First, if every\n-possibility is covered by the `match`, adding further variants to the `enum`\n-in the future will prompt a compilation failure, rather than runtime panic.\n-Second, it makes cost explicit. In general, the only safe way to have a\n-non-exhaustive match would be to panic the thread if nothing is matched, though\n-it could fall through if the type of the `match` expression is `()`. This sort\n-of hidden cost and special casing is against the language's philosophy. It's\n-easy to ignore all unspecified cases by using the `_` wildcard:\n-\n-```rust,ignore\n-match val.do_something() {\n-    Cat(a) => { /* ... */ }\n-    _      => { /* ... */ }\n-}\n-```\n-\n-[#3101][iss] is the issue that proposed making this the only behavior, with\n-rationale and discussion.\n-\n-[iss]: https://github.com/rust-lang/rust/issues/3101\n-\n-## No guaranteed tail-call optimization\n-\n-In general, tail-call optimization is not guaranteed: see [here][tml] for a\n-detailed explanation with references. There is a [proposed extension][tce] that\n-would allow tail-call elimination in certain contexts. The compiler is still\n-free to optimize tail-calls [when it pleases][sco], however.\n-\n-[tml]: https://mail.mozilla.org/pipermail/rust-dev/2013-April/003557.html\n-[sco]: http://llvm.org/docs/CodeGenerator.html#sibling-call-optimization\n-[tce]: https://github.com/rust-lang/rfcs/pull/81\n-\n-## No constructors\n-\n-Functions can serve the same purpose as constructors without adding any\n-language complexity.\n-\n-## No copy constructors\n-\n-Types which implement [`Copy`][copy], will do a standard C-like \"shallow copy\"\n-with no extra work (similar to \"plain old data\" in C++). It is impossible to\n-implement `Copy` types that require custom copy behavior. Instead, in Rust\n-\"copy constructors\" are created by implementing the [`Clone`][clone] trait,\n-and explicitly calling the `clone` method. Making user-defined copy operators\n-explicit surfaces the underlying complexity, forcing the developer to opt-in\n-to potentially expensive operations.\n-\n-[copy]: core/marker/trait.Copy.html\n-[clone]: core/clone/trait.Clone.html\n-\n-## No move constructors\n-\n-Values of all types are moved via `memcpy`. This makes writing generic unsafe\n-code much simpler since assignment, passing and returning are known to never\n-have a side effect like unwinding.\n-\n-# Syntax\n-\n-## Macros require balanced delimiters\n-\n-This is to make the language easier to parse for machines. Since the body of a\n-macro can contain arbitrary tokens, some restriction is needed to allow simple\n-non-macro-expanding lexers and parsers. This comes in the form of requiring\n-that all delimiters be balanced.\n-\n-## `->` for function return type\n-\n-This is to make the language easier to parse for humans, especially in the face\n-of higher-order functions. `fn foo<T>(f: fn(i32): i32, fn(T): U): U` is not\n-particularly easy to read.\n-\n-## Why is `let` used to introduce variables?\n-\n-Instead of the term \"variable\", we use \"variable bindings\". The\n-simplest way for creating a binding is by using the `let` syntax.\n-Other ways include `if let`, `while let`, and `match`. Bindings also\n-exist in function argument positions.\n-\n-Bindings always happen in pattern matching positions, and it's also Rust's way\n-to declare mutability. One can also re-declare mutability of a binding in\n-pattern matching. This is useful to avoid unnecessary `mut` annotations. An\n-interesting historical note is that Rust comes, syntactically, most closely\n-from ML, which also uses `let` to introduce bindings.\n-\n-See also [a long thread][alt] on renaming `let mut` to `var`.\n-\n-[alt]: https://mail.mozilla.org/pipermail/rust-dev/2014-January/008319.html\n-\n-## Why no `--x` or `x++`?\n-\n-Preincrement and postincrement, while convenient, are also fairly complex. They\n-require knowledge of evaluation order, and often lead to subtle bugs and\n-undefined behavior in C and C++. `x = x + 1` or `x += 1` is only slightly\n-longer, but unambiguous.\n+This content has moved to [the website](https://www.rust-lang.org/)."}, {"sha": "920c6edc389fe8aafdd17f582df8af6aed80cf2e", "filename": "src/doc/complement-lang-faq.md", "status": "modified", "additions": 1, "deletions": 175, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Fcomplement-lang-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Fcomplement-lang-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-lang-faq.md?ref=711f11e8d607b3ecf297366fa704b5200709d12d", "patch": "@@ -1,177 +1,3 @@\n % The Rust Language FAQ\n \n-## Are there any big programs written in it yet? I want to read big samples.\n-\n-There aren't many large programs yet. The Rust [compiler][rustc], 60,000+ lines at the time of writing, is written in Rust. As the oldest body of Rust code it has gone through many iterations of the language, and some parts are nicer to look at than others. It may not be the best code to learn from, but [borrowck] and [resolve] were written recently.\n-\n-[rustc]: https://github.com/rust-lang/rust/tree/master/src/librustc\n-[resolve]: https://github.com/rust-lang/rust/tree/master/src/librustc_resolve\n-[borrowck]: https://github.com/rust-lang/rust/tree/master/src/librustc_borrowck/borrowck\n-\n-A research browser engine called [Servo][servo], currently 30,000+ lines across more than a dozen crates, will be exercising a lot of Rust's distinctive type-system and concurrency features, and integrating many native libraries.\n-\n-[servo]: https://github.com/servo/servo\n-\n-Some examples that demonstrate different aspects of the language:\n-\n-* [sprocketnes], an NES emulator with no GC, using modern Rust conventions\n-* The language's general-purpose [hash] function, SipHash-2-4. Bit twiddling, OO, macros\n-* The standard library's [HashMap], a sendable hash map in an OO style\n-* The standard library's [json] module. Enums and pattern matching\n-\n-[sprocketnes]: https://github.com/pcwalton/sprocketnes\n-[hash]: https://github.com/rust-lang/rust/tree/master/src/libcore/hash\n-[HashMap]: https://github.com/rust-lang/rust/tree/master/src/libstd/collections/hash\n-[json]: https://github.com/rust-lang/rust/blob/master/src/libserialize/json.rs\n-\n-You may also be interested in browsing [trending Rust repositories][github-rust] on GitHub.\n-\n-[github-rust]: https://github.com/trending?l=rust\n-\n-## Is anyone using Rust in production?\n-\n-Yes. For example (incomplete):\n-\n-* [OpenDNS](http://labs.opendns.com/2013/10/04/zeromq-helping-us-block-malicious-domains/)\n-* [Skylight](http://skylight.io)\n-* [wit.ai](https://github.com/wit-ai/witd)\n-* [Codius](https://codius.org/blog/codius-rust/)\n-* [MaidSafe](http://maidsafe.net/)\n-* [Terminal.com](https://terminal.com)\n-\n-## Does it run on Windows?\n-\n-Yes. All development happens in lockstep on all 3 target platforms (using MinGW, not Cygwin).\n-\n-## Is it OO? How do I do this thing I normally do in an OO language?\n-\n-It is multi-paradigm. Not everything is shoe-horned into a single abstraction. Many things you can do in OO languages you can do in Rust, but not everything, and not always using the same abstraction you're accustomed to.\n-\n-## How do you get away with \"no null pointers\"?\n-\n-Data values in the language can only be constructed through a fixed set of initializer forms. Each of those forms requires that its inputs already be initialized. A liveness analysis ensures that local variables are initialized before use.\n-\n-## What is the relationship between a module and a crate?\n-\n-* A crate is a top-level compilation unit that corresponds to a single loadable object.\n-* A module is a (possibly nested) unit of name-management inside a crate.\n-* A crate contains an implicit, un-named top-level module.\n-* Recursive definitions can span modules, but not crates.\n-* Crates do not have global names, only a set of non-unique metadata tags.\n-* There is no global inter-crate namespace; all name management occurs within a crate.\n- * Using another crate binds the root of _its_ namespace into the user's namespace.\n-\n-## Why is panic unwinding non-recoverable within a thread? Why not try to \"catch exceptions\"?\n-\n-In short, because too few guarantees could be made about the dynamic environment of the catch block, as well as invariants holding in the unwound heap, to be able to safely resume; we believe that other methods of signalling and logging errors are more appropriate, with threads playing the role of a \"hard\" isolation boundary between separate heaps.\n-\n-Rust provides, instead, three predictable and well-defined options for handling any combination of the three main categories of \"catch\" logic:\n-\n-* Failure _logging_ is done by the integrated logging subsystem.\n-* _Recovery_ after a panic is done by trapping a thread panic from _outside_\n-  the thread, where other threads are known to be unaffected.\n-* _Cleanup_ of resources is done by RAII-style objects with destructors.\n-\n-Cleanup through RAII-style destructors is more likely to work than in catch blocks anyways, since it will be better tested (part of the non-error control paths, so executed all the time).\n-\n-## Why aren't modules type-parametric?\n-\n-We want to maintain the option to parameterize at runtime. We may eventually change this limitation, but initially this is how type parameters were implemented.\n-\n-## Why aren't values type-parametric? Why only items?\n-\n-Doing so would make type inference much more complex, and require the implementation strategy of runtime parameterization.\n-\n-## Why are enumerations nominal and closed?\n-\n-We don't know if there's an obvious, easy, efficient, stock-textbook way of supporting open or structural disjoint unions. We prefer to stick to language features that have an obvious and well-explored semantics.\n-\n-## Why aren't channels synchronous?\n-\n-There's a lot of debate on this topic; it's easy to find a proponent of default-sync or default-async communication, and there are good reasons for either. Our choice rests on the following arguments:\n-\n-* Part of the point of isolating threads is to decouple threads from one another, such that assumptions in one thread do not cause undue constraints (or bugs, if violated!) in another. Temporal coupling is as real as any other kind; async-by-default relaxes the default case to only _causal_ coupling.\n-* Default-async supports buffering and batching communication, reducing the frequency and severity of thread-switching and inter-thread / inter-domain synchronization.\n-* Default-async with transmittable channels is the lowest-level building block on which more-complex synchronization topologies and strategies can be built; it is not clear to us that the majority of cases fit the 2-party full-synchronization pattern rather than some more complex multi-party or multi-stage scenario. We did not want to force all programs to pay for wiring the former assumption into all communications.\n-\n-## Why are channels half-duplex (one-way)?\n-\n-Similar to the reasoning about default-sync: it wires fewer assumptions into the implementation, that would have to be paid by all use-cases even if they actually require a more complex communication topology.\n-\n-## Why are strings UTF-8 by default? Why not UCS2 or UCS4?\n-\n-The `str` type is UTF-8 because we observe more text in the wild in this encoding \u2013 particularly in network transmissions, which are endian-agnostic \u2013 and we think it's best that the default treatment of I/O not involve having to recode codepoints in each direction.\n-\n-This does mean that indexed access to a Unicode codepoint inside a `str` value is an O(n) operation. On the one hand, this is clearly undesirable; on the other hand, this problem is full of trade-offs and we'd like to point a few important qualifications:\n-\n-* Scanning a `str` for ASCII-range codepoints can still be done safely octet-at-a-time. If you use `.as_bytes()`, pulling out a `u8` costs only O(1) and produces a value that can be cast and compared to an ASCII-range `char`. So if you're (say) line-breaking on `'\\n'`, octet-based treatment still works. UTF8 was well-designed this way.\n-* Most \"character oriented\" operations on text only work under very restricted language assumptions sets such as \"ASCII-range codepoints only\". Outside ASCII-range, you tend to have to use a complex (non-constant-time) algorithm for determining linguistic-unit (glyph, word, paragraph) boundaries anyways. We recommend using an \"honest\" linguistically-aware, Unicode-approved algorithm.\n-* The `char` type is UCS4. If you honestly need to do a codepoint-at-a-time algorithm, it's trivial to write a `type wstr = [char]`, and unpack a `str` into it in a single pass, then work with the `wstr`. In other words: the fact that the language is not \"decoding to UCS4 by default\" shouldn't stop you from decoding (or re-encoding any other way) if you need to work with that encoding.\n-\n-## Why are `str`s, slices, arrays etc. built-in types rather than (say) special kinds of trait/impl?\n-\n-In each case there is one or more operator, literal constructor, overloaded use or integration with a built-in control structure that makes us think it would be awkward to phrase the type in terms of more-general type constructors. Same as, say, with numbers! But this is partly an aesthetic call, and we'd be willing to look at a worked-out proposal for eliminating or rephrasing these special cases.\n-\n-## Can Rust code call C code?\n-\n-Yes. Calling C code from Rust is simple and exactly as efficient as calling C code from C.\n-\n-## Can C code call Rust code?\n-\n-Yes. The Rust code has to be exposed via an `extern` declaration, which makes it C-ABI compatible. Such a function can be passed to C code as a function pointer or, if given the `#[no_mangle]` attribute to disable symbol mangling, can be called directly from C code.\n-\n-## Why aren't function signatures inferred? Why only local variables?\n-\n-* Mechanically, it simplifies the inference algorithm; inference only requires looking at one function at a time.\n-* The same simplification goes double for human readers. A reader does not need an IDE running an inference algorithm across an entire crate to be able to guess at a function's argument types; it's always explicit and nearby.\n-\n-## Why does a type parameter need explicit trait bounds to invoke methods on it, when C++ templates do not?\n-\n-* Requiring explicit bounds means that the compiler can type-check the code at the point where the type-parametric item is *defined*, rather than delaying to when its type parameters are instantiated.  You know that *any* set of type parameters fulfilling the bounds listed in the API will compile. It's an enforced minimal level of documentation, and results in very clean error messages.\n-\n-* Scoping of methods is also a problem.  C++ needs [Koenig (argument dependent) lookup](http://en.wikipedia.org/wiki/Argument-dependent_name_lookup), which comes with its own host of problems. Explicit bounds avoid this issue: traits are explicitly imported and then used as bounds on type parameters, so there is a clear mapping from the method to its implementation (via the trait and the instantiated type).\n-\n-  * Related to the above point: since a parameter explicitly names its trait bounds, a single type is able to implement traits whose sets of method names overlap, cleanly and unambiguously.\n-\n-* There is further discussion on [this thread on the Rust mailing list](https://mail.mozilla.org/pipermail/rust-dev/2013-September/005603.html).\n-\n-## Will Rust implement automatic semicolon insertion, like in Go?\n-\n-For simplicity, we do not plan to do so. Implementing automatic semicolon insertion for Rust would be tricky because the absence of a trailing semicolon means \"return a value\".\n-\n-## How do I get my program to display the output of logging macros?\n-\n-**Short Answer**: Set the `RUST_LOG` environment variable to the name of your source file, sans extension.\n-\n-```sh\n-rustc hello.rs\n-export RUST_LOG=hello\n-./hello\n-```\n-\n-**Long Answer**: `RUST_LOG` takes a 'logging spec' that consists of a\n-comma-separated list of paths, where a path consists of the crate name and\n-sequence of module names, each separated by double-colons. For standalone `.rs`\n-files, the crate is implicitly named after the source file, so in the above\n-example we were setting `RUST_LOG` to the name of the hello crate. Multiple paths\n-can be combined to control the exact logging you want to see. For example, when\n-debugging linking in the compiler, you might set the following:\n-\n-```sh\n-RUST_LOG=rustc_metadata::creader,rustc::util::filesearch,rustc::back::rpath\n-```\n-\n-For a full description, see [the logging crate][1].\n-\n-## How fast is Rust?\n-\n-As always, this question is difficult to answer. There's still a lot of work to\n-do on speed, and depending on what you're benchmarking, Rust has variable\n-performance.\n-\n-That said, it is an explicit goal of Rust to be as fast as C++ for most things.\n-Language decisions are made with performance in mind, and we want Rust to be as\n-fast as possible. Given that Rust is built on top of LLVM, any performance\n-improvements in it also help Rust become faster.\n-\n-[1]:log/index.html\n+This content has moved to [the website](https://www.rust-lang.org/)."}, {"sha": "b44de8e2cb32d3cd72213bcb4228870f1edcf0dc", "filename": "src/doc/complement-project-faq.md", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Fcomplement-project-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Fcomplement-project-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-project-faq.md?ref=711f11e8d607b3ecf297366fa704b5200709d12d", "patch": "@@ -1,42 +1,3 @@\n % The Rust Project FAQ\n \n-# What is this project's goal, in one sentence?\n-\n-To design and implement a safe, concurrent, practical, static systems language.\n-\n-# Why are you doing this?\n-\n-Existing languages at this level of abstraction and efficiency are unsatisfactory. In particular:\n-\n-* Too little attention paid to safety.\n-* Poor concurrency support.\n-* Lack of practical affordances, too dogmatic about paradigm.\n-\n-# What are some non-goals?\n-\n-* To employ any particularly cutting-edge technologies. Old, established techniques are better.\n-* To prize expressiveness, minimalism or elegance above other goals. These are desirable but subordinate goals.\n-* To cover the complete feature-set of C++, or any other language. It should provide majority-case features.\n-* To be 100% static, 100% safe, 100% reflective, or too dogmatic in any other sense. Trade-offs exist.\n-* To run on \"every possible platform\". It must eventually work without unnecessary compromises on widely-used hardware and software platforms.\n-\n-# Is any part of this thing production-ready?\n-\n-Yes!\n-\n-# Is this a completely Mozilla-planned and orchestrated thing?\n-\n-No. It started as a Graydon Hoare's part-time side project in 2006 and remained so for over 3 years. Mozilla got involved in 2009 once the language was mature enough to run some basic tests and demonstrate the idea. Though it is sponsored by Mozilla, Rust is developed by a diverse community of enthusiasts.\n-\n-# What will Mozilla use Rust for?\n-\n-Mozilla intends to use Rust as a platform for prototyping experimental browser architectures. Specifically, the hope is to develop a browser that is more amenable to parallelization than existing ones, while also being less prone to common C++ coding errors that result in security exploits. The name of that project is _[Servo](http://github.com/servo/servo)_.\n-\n-# Why a BSD-style permissive license rather than MPL or tri-license?\n-\n-* Partly due to preference of the original developer (Graydon).\n-* Partly due to the fact that languages tend to have a wider audience and more diverse set of possible embeddings and end-uses than focused, coherent products such as web browsers. We'd like to appeal to as many of those potential contributors as possible.\n-\n-# Why dual MIT/ASL2 license?\n-\n-The Apache license includes important protection against patent aggression, but it is not compatible with the GPL, version 2. To avoid problems using Rust with GPL2, it is alternately MIT licensed.\n+This content has moved to [the website](https://www.rust-lang.org/)."}, {"sha": "fef9f1f369cee344999a296f9d7a48ae9e33d4c1", "filename": "src/doc/index.md", "status": "modified", "additions": 13, "deletions": 64, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=711f11e8d607b3ecf297366fa704b5200709d12d", "patch": "@@ -1,72 +1,21 @@\n % Rust Documentation\n \n-Welcome to the Rust documentation! You can use the section headings above\n-to jump to any particular section.\n+<style>\n+nav {\n+    display: none;\n+}\n+</style>\n \n-# Getting Started\n+This is an index of the documentation included with the Rust\n+compiler. For more comprehensive documentation see [the\n+website](https://www.rust-lang.org).\n \n-If you haven't seen Rust at all yet, the first thing you should read is the\n-introduction to [The Rust Programming Language](book/index.html). It'll give\n-you a good idea of what Rust is like.\n+[**The Rust Programming Language**](book/index.html)\n \n-The book provides a lengthy explanation of Rust, its syntax, and its\n-concepts. Upon completing the book, you'll be an intermediate Rust\n-developer, and will have a good grasp of the fundamental ideas behind\n-Rust.\n+[**The Rust Reference**](reference.html)\n \n-[Rust By Example][rbe] teaches you Rust through a series of small\n-examples.\n+[**The Standard Library API Reference**](std/index.html)\n \n-[rbe]: http://rustbyexample.com/\n+[**The Rustonomicon**](nomicon/index.html)\n \n-# Language Reference\n-\n-Rust does not have an exact specification yet, but an effort to describe as much of\n-the language in as much detail as possible is in [the reference](reference.html).\n-\n-# Standard Library Reference\n-\n-We have [API documentation for the entire standard\n-library](std/index.html). There's a list of crates on the left with more\n-specific sections, or you can use the search bar at the top to search for\n-something if you know its name.\n-\n-# The Rustonomicon\n-\n-[The Rustonomicon] is an entire book dedicated to explaining\n-how to write `unsafe` Rust code. It is for advanced Rust programmers.\n-\n-[The Rustonomicon]: nomicon/index.html\n-\n-# Tools\n-\n-[Cargo](http://doc.crates.io/index.html) is the Rust package manager providing access to libraries\n-beyond the standard one, and its website contains lots of good documentation.\n-\n-[`rustdoc`](book/documentation.html) is the Rust's documentation generator, a tool converting\n-annotated source code into HTML docs.\n-\n-# FAQs\n-\n-There are questions that are asked quite often, so we've made FAQs for them:\n-\n-* [Language Design FAQ](complement-design-faq.html)\n-* [Language FAQ](complement-lang-faq.html)\n-* [Project FAQ](complement-project-faq.html)\n-* [How to submit a bug report](https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports)\n-\n-# The Error Index\n-\n-If you encounter an error while compiling your code you may be able to look it\n-up in the [Rust Compiler Error Index](error-index.html).\n-\n-# Community Translations\n-\n-Several projects have been started to translate the documentation into other\n-languages:\n-\n-- [Russian](https://github.com/kgv/rust_book_ru)\n-- [Korean](https://github.com/rust-kr/doc.rust-kr.org)\n-- [Chinese](https://github.com/KaiserY/rust-book-chinese)\n-- [Spanish](https://goyox86.github.io/elpr)\n-- [German](https://panicbit.github.io/rustbook-de)\n+[**The Compiler Error Index**](error-index.html)"}, {"sha": "4d805e17a76648193a410f5ab1c25fac7840ef78", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=711f11e8d607b3ecf297366fa704b5200709d12d", "patch": "@@ -16,7 +16,7 @@\n             reason = \"API has not been scrutinized and is highly likely to \\\n                       either disappear or change\",\n             issue = \"27810\")]\n-#![rustc_deprecated(since = \"1.5.0\", reason = \"replaced with crates.io crates\")]\n+#![rustc_deprecated(since = \"1.5.0\", reason = \"replaced with 'dylib' on crates.io\")]\n #![allow(missing_docs)]\n #![allow(deprecated)]\n "}, {"sha": "120e56d8079a74223f9f5f1037da6fa63059e589", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=711f11e8d607b3ecf297366fa704b5200709d12d", "patch": "@@ -252,7 +252,7 @@ impl Stdin {\n     ///\n     /// - Pipe some text to it, e.g. `printf foo | path/to/executable`\n     /// - Give it text interactively by running the executable directly,\n-    //    in which case it will wait for the Enter key to be pressed before\n+    ///   in which case it will wait for the Enter key to be pressed before\n     ///   continuing\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn read_line(&self, buf: &mut String) -> io::Result<usize> {"}, {"sha": "becccbf3d2421fcc054d45cea4b558396a325f1a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/711f11e8d607b3ecf297366fa704b5200709d12d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=711f11e8d607b3ecf297366fa704b5200709d12d", "patch": "@@ -856,8 +856,8 @@ impl<'a> State<'a> {\n                    indented: usize) -> io::Result<()> {\n         self.bclose_maybe_open(span, indented, true)\n     }\n-    pub fn bclose_maybe_open (&mut self, span: codemap::Span,\n-                              indented: usize, close_box: bool) -> io::Result<()> {\n+    pub fn bclose_maybe_open(&mut self, span: codemap::Span,\n+                             indented: usize, close_box: bool) -> io::Result<()> {\n         try!(self.maybe_print_comment(span.hi));\n         try!(self.break_offset_if_not_bol(1, -(indented as isize)));\n         try!(word(&mut self.s, \"}\"));"}, {"sha": "d2329a46c831a908c343c40aeedddbdb7be8a478", "filename": "src/rt/rust_android_dummy.h", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8037e62d29f7e0f7084c95b87c243dc83bdd8e3c/src%2Frt%2Frust_android_dummy.h", "raw_url": "https://github.com/rust-lang/rust/raw/8037e62d29f7e0f7084c95b87c243dc83bdd8e3c/src%2Frt%2Frust_android_dummy.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_android_dummy.h?ref=8037e62d29f7e0f7084c95b87c243dc83bdd8e3c", "patch": "@@ -1,37 +0,0 @@\n-// Copyright (c) 2011 The Chromium Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style license that can be\n-// found in the LICENSE file.\n-\n-#ifndef _RUST_ANDROID_DUMMY_H\n-#define _RUST_ANDROID_DUMMY_H\n-\n-int backtrace (void **__array, int __size);\n-\n-char **backtrace_symbols (void *__const *__array, int __size);\n-\n-void backtrace_symbols_fd (void *__const *__array, int __size, int __fd);\n-\n-#include <sys/types.h>\n-\n-struct stat;\n-typedef struct {\n-    size_t gl_pathc;    /* Count of total paths so far. */\n-    size_t gl_matchc;   /* Count of paths matching pattern. */\n-    size_t gl_offs;     /* Reserved at beginning of gl_pathv. */\n-    int gl_flags;       /* Copy of flags parameter to glob. */\n-    char **gl_pathv;    /* List of paths matching pattern. */\n-                /* Copy of errfunc parameter to glob. */\n-    int (*gl_errfunc)(const char *, int);\n-\n-    /*\n-     * Alternate filesystem access methods for glob; replacement\n-     * versions of closedir(3), readdir(3), opendir(3), stat(2)\n-     * and lstat(2).\n-     */\n-    void (*gl_closedir)(void *);\n-    struct dirent *(*gl_readdir)(void *);\n-    void *(*gl_opendir)(const char *);\n-    int (*gl_lstat)(const char *, struct stat *);\n-} glob_t;\n-\n-#endif"}]}