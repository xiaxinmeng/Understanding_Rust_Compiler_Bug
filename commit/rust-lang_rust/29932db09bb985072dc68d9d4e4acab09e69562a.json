{"sha": "29932db09bb985072dc68d9d4e4acab09e69562a", "node_id": "C_kwDOAAsO6NoAKDI5OTMyZGIwOWJiOTg1MDcyZGM2OGQ5ZDRlNGFjYWIwOWU2OTU2MmE", "commit": {"author": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2022-01-26T04:06:09Z"}, "committer": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2022-01-26T04:06:09Z"}, "message": "`const_deallocate`: Don't deallocate memory allocated in an another const. Does nothing at runtime.\n`const_allocate`:  Returns a null pointer at runtime.", "tree": {"sha": "6f0e8d2b0a52aabfc67996bc5ed4fe0ef9bd162b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f0e8d2b0a52aabfc67996bc5ed4fe0ef9bd162b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29932db09bb985072dc68d9d4e4acab09e69562a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29932db09bb985072dc68d9d4e4acab09e69562a", "html_url": "https://github.com/rust-lang/rust/commit/29932db09bb985072dc68d9d4e4acab09e69562a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29932db09bb985072dc68d9d4e4acab09e69562a/comments", "author": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "html_url": "https://github.com/rust-lang/rust/commit/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "c654232c10a5755c8bf3aa8383d36509f27e5d9a", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29932db09bb985072dc68d9d4e4acab09e69562a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29932db09bb985072dc68d9d4e4acab09e69562a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=29932db09bb985072dc68d9d4e4acab09e69562a", "patch": "@@ -369,6 +369,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n \n+            sym::const_allocate => {\n+                // returns a null pointer at runtime.\n+                bx.const_null(bx.type_i8p())\n+            }\n+\n+            sym::const_deallocate => {\n+                // nop at runtime.\n+                return;\n+            }\n+\n             // This requires that atomic intrinsics follow a specific naming pattern:\n             // \"atomic_<operation>[_<ordering>]\", and no ordering means SeqCst\n             name if name_str.starts_with(\"atomic_\") => {"}, {"sha": "89717b75f12815abea8069f2d36d695b7ff3b205", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29932db09bb985072dc68d9d4e4acab09e69562a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29932db09bb985072dc68d9d4e4acab09e69562a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=29932db09bb985072dc68d9d4e4acab09e69562a", "patch": "@@ -358,11 +358,21 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                     Err(err) => throw_ub_format!(\"align has to be a power of 2, {}\", err),\n                 };\n \n-                ecx.memory.deallocate(\n-                    ptr,\n-                    Some((size, align)),\n-                    interpret::MemoryKind::Machine(MemoryKind::Heap),\n-                )?;\n+                // If an allocation is created in an another const,\n+                // we don't deallocate it.\n+                let (alloc_id, _, _) = ecx.memory.ptr_get_alloc(ptr)?;\n+                let is_allocated_in_another_const = matches!(\n+                    ecx.tcx.get_global_alloc(alloc_id),\n+                    Some(interpret::GlobalAlloc::Memory(_))\n+                );\n+\n+                if !is_allocated_in_another_const {\n+                    ecx.memory.deallocate(\n+                        ptr,\n+                        Some((size, align)),\n+                        interpret::MemoryKind::Machine(MemoryKind::Heap),\n+                    )?;\n+                }\n             }\n             _ => {\n                 return Err(ConstEvalErrKind::NeedsRfc(format!("}, {"sha": "b03f1268e363df6c96116dacff0db9d474db2783", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29932db09bb985072dc68d9d4e4acab09e69562a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29932db09bb985072dc68d9d4e4acab09e69562a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=29932db09bb985072dc68d9d4e4acab09e69562a", "patch": "@@ -1914,12 +1914,13 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n \n-    /// Allocate at compile time. Should not be called at runtime.\n+    /// Allocate at compile time.\n+    /// Returns a null pointer at runtime.\n     #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n     pub fn const_allocate(size: usize, align: usize) -> *mut u8;\n \n     /// Deallocate a memory which allocated by `intrinsics::const_allocate` at compile time.\n-    /// Should not be called at runtime.\n+    /// Does nothing at runtime.\n     #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n     #[cfg(not(bootstrap))]\n     pub fn const_deallocate(ptr: *mut u8, size: usize, align: usize);"}, {"sha": "e5b6fa7f73258972050e612e0aaaf160fd0f1e92", "filename": "library/core/tests/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29932db09bb985072dc68d9d4e4acab09e69562a/library%2Fcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29932db09bb985072dc68d9d4e4acab09e69562a/library%2Fcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fintrinsics.rs?ref=29932db09bb985072dc68d9d4e4acab09e69562a", "patch": "@@ -80,3 +80,16 @@ fn test_hints_in_const_contexts() {\n         assert!(42u32 == core::hint::black_box(42u32));\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[test]\n+fn test_const_dealocate_at_runtime() {\n+    use core::intrinsics::const_deallocate;\n+    const X: &u32 = &42u32;\n+    let x = &0u32;\n+    unsafe {\n+        const_deallocate(X as *const _ as *mut u8, 4, 4); // nop\n+        const_deallocate(x as *const _ as *mut u8, 4, 4); // nop\n+        const_deallocate(core::ptr::null_mut(), 1, 1); // nop\n+    }\n+}"}, {"sha": "1d49d7e47cb69e7ca8ddfb29b425b2be1f6240e7", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29932db09bb985072dc68d9d4e4acab09e69562a/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29932db09bb985072dc68d9d4e4acab09e69562a/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=29932db09bb985072dc68d9d4e4acab09e69562a", "patch": "@@ -13,6 +13,7 @@\n #![feature(const_bool_to_option)]\n #![feature(const_cell_into_inner)]\n #![feature(const_convert)]\n+#![feature(const_heap)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_maybe_uninit_assume_init_read)]"}, {"sha": "ac9e8b64b48972476ffa83557b561f4032b8afb9", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29932db09bb985072dc68d9d4e4acab09e69562a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29932db09bb985072dc68d9d4e4acab09e69562a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs?ref=29932db09bb985072dc68d9d4e4acab09e69562a", "patch": "@@ -6,11 +6,10 @@ use std::intrinsics;\n const FOO: i32 = foo();\n const fn foo() -> i32 {\n     unsafe {\n-        let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n+        let _ = intrinsics::const_allocate(4, 3) as *mut i32;\n         //~^ error: evaluation of constant value failed\n     }\n     1\n-\n }\n \n fn main() {}"}, {"sha": "2628a78455c76b3f5a5f3100852c11807ecb8a26", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29932db09bb985072dc68d9d4e4acab09e69562a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29932db09bb985072dc68d9d4e4acab09e69562a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=29932db09bb985072dc68d9d4e4acab09e69562a", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL | const FOO: i32 = foo();\n    |                  ----- inside `FOO` at $DIR/alloc_intrinsic_errors.rs:6:18\n ...\n-LL |         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n+LL |         let _ = intrinsics::const_allocate(4, 3) as *mut i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 align has to be a power of 2, `3` is not a power of 2"}, {"sha": "aac90cd54cc413f4597ec4eab5d603af3609a4de", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/29932db09bb985072dc68d9d4e4acab09e69562a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29932db09bb985072dc68d9d4e4acab09e69562a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs?ref=29932db09bb985072dc68d9d4e4acab09e69562a", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![feature(core_intrinsics)]\n #![feature(const_heap)]\n+#![feature(const_mut_refs)]\n \n use std::intrinsics;\n \n@@ -9,4 +10,27 @@ const _X: () = unsafe {\n     intrinsics::const_deallocate(ptr, 4, 4);\n };\n \n-fn main() {}\n+const Y: &u32 = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4) as *mut u32;\n+    *ptr = 42;\n+    &*ptr\n+};\n+\n+const Z: &u32 = &42;\n+\n+const _Z: () = unsafe {\n+    let ptr1 = Y as *const _ as *mut u8;\n+    intrinsics::const_deallocate(ptr1, 4, 4); // nop\n+    intrinsics::const_deallocate(ptr1, 2, 4); // nop\n+    intrinsics::const_deallocate(ptr1, 4, 2); // nop\n+\n+    let ptr2 = Z as *const _ as *mut u8;\n+    intrinsics::const_deallocate(ptr2, 4, 4); // nop\n+    intrinsics::const_deallocate(ptr2, 2, 4); // nop\n+    intrinsics::const_deallocate(ptr2, 4, 2); // nop\n+};\n+\n+fn main() {\n+    assert_eq!(*Y, 42);\n+    assert_eq!(*Z, 42);\n+}"}]}