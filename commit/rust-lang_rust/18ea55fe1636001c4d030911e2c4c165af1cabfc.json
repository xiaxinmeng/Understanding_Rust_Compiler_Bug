{"sha": "18ea55fe1636001c4d030911e2c4c165af1cabfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZWE1NWZlMTYzNjAwMWM0ZDAzMDkxMWUyYzRjMTY1YWYxY2FiZmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-10T18:30:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-12T00:19:23Z"}, "message": "remove bivariance\n\nThere is one fishy part of these changes: when computing the LUB/GLB of\na \"bivariant\" type parameter, I currently return the `a`\nvalue. Bivariant type parameters are only allowed in a very particular\nsituation, where the type parameter is only used as an associated type\noutput, like this:\n\n```rust\npub struct Foo<A, B>\n    where A: Fn() -> B\n    {\n        data: A\n        }\n        ```\n\nIn principle, if one had `T=Foo<A, &'a u32>` and `U=Foo<A, &'b u32>`\nand (e.g.) `A: for<'a> Fn() -> &'a u32`, then I think that computing the\nLUB of `T` and `U` might do the wrong thing. Probably the right behavior\nis just to create a fresh type variable. However, that particular\nexample would not compile (because the where-clause is illegal; `'a`\ndoes not appear in any input type). I was not able to make an example\nthat *would* compile and demonstrate this shortcoming, and handling the\nLUB/GLB was mildly inconvenient, so I left it as is. I am considering\nwhether to revisit this.", "tree": {"sha": "222ca84a78682b5c770a32fb205ff1ce2efb5fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/222ca84a78682b5c770a32fb205ff1ce2efb5fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18ea55fe1636001c4d030911e2c4c165af1cabfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18ea55fe1636001c4d030911e2c4c165af1cabfc", "html_url": "https://github.com/rust-lang/rust/commit/18ea55fe1636001c4d030911e2c4c165af1cabfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18ea55fe1636001c4d030911e2c4c165af1cabfc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a0a0e949a077a6d83ca152daa404ff47c9c1dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a0a0e949a077a6d83ca152daa404ff47c9c1dcf", "html_url": "https://github.com/rust-lang/rust/commit/4a0a0e949a077a6d83ca152daa404ff47c9c1dcf"}], "stats": {"total": 137, "additions": 4, "deletions": 133}, "files": [{"sha": "4acb8b807d594efcc0f6b8be67ec1165a93c9a9f", "filename": "src/librustc/infer/bivariate.rs", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/4a0a0e949a077a6d83ca152daa404ff47c9c1dcf/src%2Flibrustc%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a0a0e949a077a6d83ca152daa404ff47c9c1dcf/src%2Flibrustc%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fbivariate.rs?ref=4a0a0e949a077a6d83ca152daa404ff47c9c1dcf", "patch": "@@ -1,123 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Applies the \"bivariance relationship\" to two types and/or regions.\n-//! If (A,B) are bivariant then either A <: B or B <: A. It occurs\n-//! when type/lifetime parameters are unconstrained. Usually this is\n-//! an error, but we permit it in the specific case where a type\n-//! parameter is constrained in a where-clause via an associated type.\n-//!\n-//! There are several ways one could implement bivariance. You could\n-//! just do nothing at all, for example, or you could fully verify\n-//! that one of the two subtyping relationships hold. We choose to\n-//! thread a middle line: we relate types up to regions, but ignore\n-//! all region relationships.\n-//!\n-//! At one point, handling bivariance in this fashion was necessary\n-//! for inference, but I'm actually not sure if that is true anymore.\n-//! In particular, it might be enough to say (A,B) are bivariant for\n-//! all (A,B).\n-\n-use super::combine::CombineFields;\n-use super::type_variable::{BiTo};\n-\n-use ty::{self, Ty, TyCtxt};\n-use ty::TyVar;\n-use ty::relate::{Relate, RelateResult, TypeRelation};\n-\n-pub struct Bivariate<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n-    fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>,\n-    a_is_expected: bool,\n-}\n-\n-impl<'combine, 'infcx, 'gcx, 'tcx> Bivariate<'combine, 'infcx, 'gcx, 'tcx> {\n-    pub fn new(fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool)\n-        -> Bivariate<'combine, 'infcx, 'gcx, 'tcx>\n-    {\n-        Bivariate { fields: fields, a_is_expected: a_is_expected }\n-    }\n-}\n-\n-impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n-    for Bivariate<'combine, 'infcx, 'gcx, 'tcx>\n-{\n-    fn tag(&self) -> &'static str { \"Bivariate\" }\n-\n-    fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }\n-\n-    fn a_is_expected(&self) -> bool { self.a_is_expected }\n-\n-    fn relate_with_variance<T: Relate<'tcx>>(&mut self,\n-                                             variance: ty::Variance,\n-                                             a: &T,\n-                                             b: &T)\n-                                             -> RelateResult<'tcx, T>\n-    {\n-        match variance {\n-            // If we have Foo<A> and Foo is invariant w/r/t A,\n-            // and we want to assert that\n-            //\n-            //     Foo<A> <: Foo<B> ||\n-            //     Foo<B> <: Foo<A>\n-            //\n-            // then still A must equal B.\n-            ty::Invariant => self.relate(a, b),\n-\n-            ty::Covariant => self.relate(a, b),\n-            ty::Bivariant => self.relate(a, b),\n-            ty::Contravariant => self.relate(a, b),\n-        }\n-    }\n-\n-    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        debug!(\"{}.tys({:?}, {:?})\", self.tag(),\n-               a, b);\n-        if a == b { return Ok(a); }\n-\n-        let infcx = self.fields.infcx;\n-        let a = infcx.type_variables.borrow_mut().replace_if_possible(a);\n-        let b = infcx.type_variables.borrow_mut().replace_if_possible(b);\n-        match (&a.sty, &b.sty) {\n-            (&ty::TyInfer(TyVar(a_id)), &ty::TyInfer(TyVar(b_id))) => {\n-                infcx.type_variables.borrow_mut().relate_vars(a_id, BiTo, b_id);\n-                Ok(a)\n-            }\n-\n-            (&ty::TyInfer(TyVar(a_id)), _) => {\n-                self.fields.instantiate(b, BiTo, a_id, self.a_is_expected)?;\n-                Ok(a)\n-            }\n-\n-            (_, &ty::TyInfer(TyVar(b_id))) => {\n-                self.fields.instantiate(a, BiTo, b_id, self.a_is_expected)?;\n-                Ok(a)\n-            }\n-\n-            _ => {\n-                self.fields.infcx.super_combine_tys(self, a, b)\n-            }\n-        }\n-    }\n-\n-    fn regions(&mut self, a: &'tcx ty::Region, _: &'tcx ty::Region)\n-               -> RelateResult<'tcx, &'tcx ty::Region> {\n-        Ok(a)\n-    }\n-\n-    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)\n-                  -> RelateResult<'tcx, ty::Binder<T>>\n-        where T: Relate<'tcx>\n-    {\n-        let a1 = self.tcx().erase_late_bound_regions(a);\n-        let b1 = self.tcx().erase_late_bound_regions(b);\n-        let c = self.relate(&a1, &b1)?;\n-        Ok(ty::Binder(c))\n-    }\n-}"}, {"sha": "9430421f91014bc72f9ac46a9794a56b07eb81cd", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18ea55fe1636001c4d030911e2c4c165af1cabfc/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ea55fe1636001c4d030911e2c4c165af1cabfc/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=18ea55fe1636001c4d030911e2c4c165af1cabfc", "patch": "@@ -32,7 +32,6 @@\n // is also useful to track which value is the \"expected\" value in\n // terms of error reporting.\n \n-use super::bivariate::Bivariate;\n use super::equate::Equate;\n use super::glb::Glb;\n use super::lub::Lub;\n@@ -159,10 +158,6 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n         Equate::new(self, a_is_expected)\n     }\n \n-    pub fn bivariate<'a>(&'a mut self, a_is_expected: bool) -> Bivariate<'a, 'infcx, 'gcx, 'tcx> {\n-        Bivariate::new(self, a_is_expected)\n-    }\n-\n     pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'gcx, 'tcx> {\n         Sub::new(self, a_is_expected)\n     }\n@@ -251,7 +246,7 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n             // to associate causes/spans with each of the relations in\n             // the stack to get this right.\n             match dir {\n-                BiTo => self.bivariate(a_is_expected).relate(&a_ty, &b_ty),\n+                BiTo => Ok(a_ty),\n                 EqTo => self.equate(a_is_expected).relate(&a_ty, &b_ty),\n                 SubtypeOf => self.sub(a_is_expected).relate(&a_ty, &b_ty),\n                 SupertypeOf => self.sub(a_is_expected).relate_with_variance("}, {"sha": "8c167e0a8ac9195b551dcc9bb23b4e026fb807e5", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ea55fe1636001c4d030911e2c4c165af1cabfc/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ea55fe1636001c4d030911e2c4c165af1cabfc/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=18ea55fe1636001c4d030911e2c4c165af1cabfc", "patch": "@@ -49,7 +49,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         match variance {\n             ty::Invariant => self.fields.equate(self.a_is_expected).relate(a, b),\n             ty::Covariant => self.relate(a, b),\n-            ty::Bivariant => self.fields.bivariate(self.a_is_expected).relate(a, b),\n+            ty::Bivariant => Ok(a.clone()),\n             ty::Contravariant => self.fields.lub(self.a_is_expected).relate(a, b),\n         }\n     }"}, {"sha": "28ae1ae556b0b5f9c69c86e74a38143cca949bff", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ea55fe1636001c4d030911e2c4c165af1cabfc/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ea55fe1636001c4d030911e2c4c165af1cabfc/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=18ea55fe1636001c4d030911e2c4c165af1cabfc", "patch": "@@ -49,7 +49,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         match variance {\n             ty::Invariant => self.fields.equate(self.a_is_expected).relate(a, b),\n             ty::Covariant => self.relate(a, b),\n-            ty::Bivariant => self.fields.bivariate(self.a_is_expected).relate(a, b),\n+            ty::Bivariant => Ok(a.clone()),\n             ty::Contravariant => self.fields.glb(self.a_is_expected).relate(a, b),\n         }\n     }"}, {"sha": "98c8ce0f031440524e0094baa50ca5a0f92dcfe4", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18ea55fe1636001c4d030911e2c4c165af1cabfc/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ea55fe1636001c4d030911e2c4c165af1cabfc/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=18ea55fe1636001c4d030911e2c4c165af1cabfc", "patch": "@@ -48,7 +48,6 @@ use self::region_inference::{RegionVarBindings, RegionSnapshot};\n use self::type_variable::TypeVariableOrigin;\n use self::unify_key::ToType;\n \n-mod bivariate;\n mod combine;\n mod equate;\n pub mod error_reporting;"}, {"sha": "a6b0e02d477224ebdf3cfd22441a0e3ae062bfcc", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ea55fe1636001c4d030911e2c4c165af1cabfc/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ea55fe1636001c4d030911e2c4c165af1cabfc/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=18ea55fe1636001c4d030911e2c4c165af1cabfc", "patch": "@@ -65,7 +65,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         match variance {\n             ty::Invariant => self.fields.equate(self.a_is_expected).relate(a, b),\n             ty::Covariant => self.relate(a, b),\n-            ty::Bivariant => self.fields.bivariate(self.a_is_expected).relate(a, b),\n+            ty::Bivariant => Ok(a.clone()),\n             ty::Contravariant => self.with_expected_switched(|this| { this.relate(b, a) }),\n         }\n     }"}]}