{"sha": "0e3cee747af58a48038347e88c5fc05799a8e8b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlM2NlZTc0N2FmNThhNDgwMzgzNDdlODhjNWZjMDU3OTlhOGU4YjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-04T07:56:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-04T07:56:38Z"}, "message": "rustdoc: Convert markdown writer to a writer_factory", "tree": {"sha": "8319384ba0eff63bcac354c6b8f71f90b6f85306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8319384ba0eff63bcac354c6b8f71f90b6f85306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e3cee747af58a48038347e88c5fc05799a8e8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3cee747af58a48038347e88c5fc05799a8e8b5", "html_url": "https://github.com/rust-lang/rust/commit/0e3cee747af58a48038347e88c5fc05799a8e8b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e3cee747af58a48038347e88c5fc05799a8e8b5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b2ffa854fd243055e3e41c7a6cd5116531afc9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2ffa854fd243055e3e41c7a6cd5116531afc9a", "html_url": "https://github.com/rust-lang/rust/commit/0b2ffa854fd243055e3e41c7a6cd5116531afc9a"}], "stats": {"total": 107, "additions": 79, "deletions": 28}, "files": [{"sha": "97697911ed17bcb604cac49ed21db07177f41a4f", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0e3cee747af58a48038347e88c5fc05799a8e8b5/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3cee747af58a48038347e88c5fc05799a8e8b5/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=0e3cee747af58a48038347e88c5fc05799a8e8b5", "patch": "@@ -2,13 +2,14 @@\n \n import markdown_writer::writer;\n import markdown_writer::writer_util;\n+import markdown_writer::writer_factory;\n \n export mk_pass;\n export header_kind, header_name, header_text;\n \n-fn mk_pass(writer: writer) -> pass {\n+fn mk_pass(writer_factory: writer_factory) -> pass {\n     let f = fn~(srv: astsrv::srv, doc: doc::doc) -> doc::doc {\n-        run(srv, doc, writer)\n+        run(srv, doc, writer_factory)\n     };\n \n     {\n@@ -20,7 +21,7 @@ fn mk_pass(writer: writer) -> pass {\n fn run(\n     srv: astsrv::srv,\n     doc: doc::doc,\n-    writer: writer\n+    writer_factory: writer_factory\n ) -> doc::doc {\n \n     fn mods_last(item1: doc::itemtag, item2: doc::itemtag) -> bool {\n@@ -42,7 +43,7 @@ fn run(\n         \"mods last\", mods_last\n     ).f(srv, doc);\n \n-    write_markdown(sorted_doc, writer);\n+    write_markdown(sorted_doc, writer_factory);\n \n     ret doc;\n }\n@@ -79,10 +80,10 @@ type ctxt = {\n \n fn write_markdown(\n     doc: doc::doc,\n-    writer: writer\n+    writer_factory: writer_factory\n ) {\n     let ctxt = {\n-        w: writer\n+        w: writer_factory(doc::cratepage(doc.cratedoc()))\n     };\n \n     write_crate(ctxt, doc.cratedoc());\n@@ -944,23 +945,19 @@ mod test {\n     fn write_markdown_str(\n         doc: doc::doc\n     ) -> str {\n-        let (writer, future) = markdown_writer::future_writer();\n-        write_markdown(doc, writer);\n-        ret future::get(future);\n+        let (writer_factory, po) = markdown_writer::future_writer_factory();\n+        write_markdown(doc, writer_factory);\n+        ret tuple::second(comm::recv(po));\n     }\n \n     fn write_markdown_str_srv(\n         srv: astsrv::srv,\n         doc: doc::doc\n     ) -> str {\n-        let config = {\n-            output_style: config::doc_per_crate\n-            with config::default_config(\"\")\n-        };\n-        let (writer, future) = markdown_writer::future_writer();\n-        let pass = mk_pass(writer);\n+        let (writer_factory, po) = markdown_writer::future_writer_factory();\n+        let pass = mk_pass(writer_factory);\n         pass.f(srv, doc);\n-        ret future::get(future);\n+        ret tuple::second(comm::recv(po));\n     }\n \n     #[test]"}, {"sha": "6df7356a9f5a268ec01b0b89dd4e07d64106d465", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 65, "deletions": 11, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0e3cee747af58a48038347e88c5fc05799a8e8b5/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3cee747af58a48038347e88c5fc05799a8e8b5/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=0e3cee747af58a48038347e88c5fc05799a8e8b5", "patch": "@@ -1,15 +1,17 @@\n export writeinstr;\n export writer;\n+export writer_factory;\n export writer_util;\n-export make_writer;\n-export future_writer;\n+export make_writer_factory;\n+export future_writer_factory;\n \n enum writeinstr {\n     write(str),\n     done\n }\n \n type writer = fn~(+writeinstr);\n+type writer_factory = fn~(page: doc::page) -> writer;\n \n impl writer_util for writer {\n     fn write_str(str: str) {\n@@ -25,28 +27,46 @@ impl writer_util for writer {\n     }\n }\n \n-fn make_writer(config: config::config) -> writer {\n+fn make_writer_factory(config: config::config) -> writer_factory {\n     alt config.output_format {\n       config::markdown {\n-        markdown_writer(config)\n+        markdown_writer_factory(config)\n       }\n       config::pandoc_html {\n-        pandoc_writer(config)\n+        pandoc_writer_factory(config)\n       }\n     }\n }\n \n-fn markdown_writer(config: config::config) -> writer {\n-    let filename = make_filename(config, \"md\");\n+fn markdown_writer_factory(config: config::config) -> writer_factory {\n+    fn~(page: doc::page) -> writer {\n+        markdown_writer(config, page)\n+    }\n+}\n+\n+fn pandoc_writer_factory(config: config::config) -> writer_factory {\n+    fn~(page: doc::page) -> writer {\n+        pandoc_writer(config, page)\n+    }\n+}\n+\n+fn markdown_writer(\n+    config: config::config,\n+    page: doc::page\n+) -> writer {\n+    let filename = make_filename(config, \"md\", page);\n     generic_writer {|markdown|\n         write_file(filename, markdown);\n     }\n }\n \n-fn pandoc_writer(config: config::config) -> writer {\n+fn pandoc_writer(\n+    config: config::config,\n+    page: doc::page\n+) -> writer {\n     assert option::is_some(config.pandoc_cmd);\n     let pandoc_cmd = option::get(config.pandoc_cmd);\n-    let filename = make_filename(config, \"html\");\n+    let filename = make_filename(config, \"html\", page);\n \n     let pandoc_args = [\n         \"--standalone\",\n@@ -109,7 +129,11 @@ fn generic_writer(process: fn~(markdown: str)) -> writer {\n     }\n }\n \n-fn make_filename(config: config::config, ext: str) -> str {\n+fn make_filename(\n+    config: config::config,\n+    ext: str,\n+    _page: doc::page\n+) -> str {\n     import std::fs;\n     let cratefile = fs::basename(config.input_crate);\n     let cratename = tuple::first(fs::splitext(cratefile));\n@@ -134,7 +158,37 @@ fn should_use_markdown_file_name_based_off_crate() {\n         output_dir: \"output/dir\"\n         with config::default_config(\"input/test.rc\")\n     };\n-    assert make_filename(config, \"md\") == \"output/dir/test.md\";\n+    let doc = test::mk_doc(\"\");\n+    let page = doc::cratepage(doc.cratedoc());\n+    assert make_filename(config, \"md\", page) == \"output/dir/test.md\";\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    fn mk_doc(source: str) -> doc::doc {\n+        astsrv::from_str(source) {|srv|\n+            extract::from_srv(srv, \"\")\n+        }\n+    }\n+}\n+\n+fn future_writer_factory(\n+) -> (writer_factory, comm::port<(doc::page, str)>) {\n+    let markdown_po = comm::port();\n+    let markdown_ch = comm::chan(markdown_po);\n+    let writer_factory = fn~(page: doc::page) -> writer {\n+        let writer_po = comm::port();\n+        let writer_ch = comm::chan(writer_po);\n+        task::spawn {||\n+            let (writer, future) = future_writer();\n+            comm::send(writer_ch, writer);\n+            let s = future::get(future);\n+            comm::send(markdown_ch, (page, s));\n+        }\n+        comm::recv(writer_po)\n+    };\n+\n+    (writer_factory, markdown_po)\n }\n \n fn future_writer() -> (writer, future::future<str>) {"}, {"sha": "1b7b424de74260e5e79e3cfffae8091e5a4a2361", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e3cee747af58a48038347e88c5fc05799a8e8b5/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3cee747af58a48038347e88c5fc05799a8e8b5/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=0e3cee747af58a48038347e88c5fc05799a8e8b5", "patch": "@@ -157,7 +157,7 @@ fn run(config: config::config) {\n             sort_item_type_pass::mk_pass(),\n             markdown_index_pass::mk_pass(),\n             markdown_pass::mk_pass(\n-                markdown_writer::make_writer(config)\n+                markdown_writer::make_writer_factory(config)\n             )\n         ]);\n     }"}]}