{"sha": "c7e3c7932c5d76a59d494797fe71530daf534ed3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZTNjNzkzMmM1ZDc2YTU5ZDQ5NDc5N2ZlNzE1MzBkYWY1MzRlZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-19T01:59:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-19T01:59:36Z"}, "message": "Auto merge of #43933 - topecongiro:bad-span-for-attributes, r=petrochenkov\n\nFix bad span for attributes\n\nCloses #42641.", "tree": {"sha": "f98afb9c979d07dc106318feb500e529320efde3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f98afb9c979d07dc106318feb500e529320efde3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7e3c7932c5d76a59d494797fe71530daf534ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e3c7932c5d76a59d494797fe71530daf534ed3", "html_url": "https://github.com/rust-lang/rust/commit/c7e3c7932c5d76a59d494797fe71530daf534ed3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7e3c7932c5d76a59d494797fe71530daf534ed3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "230a379a452e5a2bcdfd0a956b259e0a1d83b512", "url": "https://api.github.com/repos/rust-lang/rust/commits/230a379a452e5a2bcdfd0a956b259e0a1d83b512", "html_url": "https://github.com/rust-lang/rust/commit/230a379a452e5a2bcdfd0a956b259e0a1d83b512"}, {"sha": "567b9b761be172973c293a23e2fab14d2c4fb698", "url": "https://api.github.com/repos/rust-lang/rust/commits/567b9b761be172973c293a23e2fab14d2c4fb698", "html_url": "https://github.com/rust-lang/rust/commit/567b9b761be172973c293a23e2fab14d2c4fb698"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "ca87c807103fd95c32a105e7122dab6cf95221b2", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c7e3c7932c5d76a59d494797fe71530daf534ed3/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e3c7932c5d76a59d494797fe71530daf534ed3/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=c7e3c7932c5d76a59d494797fe71530daf534ed3", "patch": "@@ -1064,26 +1064,21 @@ impl MetaItem {\n             },\n             _ => return None,\n         };\n+        let list_closing_paren_pos = tokens.peek().map(|tt| tt.span().hi);\n         let node = match MetaItemKind::from_tokens(tokens) {\n             Some(node) => node,\n             _ => return None,\n         };\n-        if let Some(last_span) = node.last_span() {\n-            span.hi = last_span.hi;\n-        }\n+        span.hi = match node {\n+            MetaItemKind::NameValue(ref lit) => lit.span.hi,\n+            MetaItemKind::List(..) => list_closing_paren_pos.unwrap_or(span.hi),\n+            _ => span.hi,\n+        };\n         Some(MetaItem { name: name, span: span, node: node })\n     }\n }\n \n impl MetaItemKind {\n-    fn last_span(&self) -> Option<Span> {\n-        match *self {\n-            MetaItemKind::Word => None,\n-            MetaItemKind::List(ref list) => list.last().map(NestedMetaItem::span),\n-            MetaItemKind::NameValue(ref lit) => Some(lit.span),\n-        }\n-    }\n-\n     pub fn tokens(&self, span: Span) -> TokenStream {\n         match *self {\n             MetaItemKind::Word => TokenStream::empty(),\n@@ -1130,7 +1125,7 @@ impl MetaItemKind {\n         let mut result = Vec::new();\n         while let Some(..) = tokens.peek() {\n             match NestedMetaItemKind::from_tokens(&mut tokens) {\n-                Some(item) => result.push(Spanned { span: item.span(), node: item }),\n+                Some(item) => result.push(respan(item.span(), item)),\n                 None => return None,\n             }\n             match tokens.next() {\n@@ -1163,7 +1158,7 @@ impl NestedMetaItemKind {\n         if let Some(TokenTree::Token(span, token)) = tokens.peek().cloned() {\n             if let Some(node) = LitKind::from_token(token) {\n                 tokens.next();\n-                return Some(NestedMetaItemKind::Literal(Spanned { node: node, span: span }));\n+                return Some(NestedMetaItemKind::Literal(respan(span, node)));\n             }\n         }\n \n@@ -1256,7 +1251,7 @@ pub trait HasAttrs: Sized {\n impl<T: HasAttrs> HasAttrs for Spanned<T> {\n     fn attrs(&self) -> &[ast::Attribute] { self.node.attrs() }\n     fn map_attrs<F: FnOnce(Vec<ast::Attribute>) -> Vec<ast::Attribute>>(self, f: F) -> Self {\n-        Spanned { node: self.node.map_attrs(f), span: self.span }\n+        respan(self.span, self.node.map_attrs(f))\n     }\n }\n "}, {"sha": "c33b89953e27461f965c88f487ebf2879d59565c", "filename": "src/test/ui/span/E0536.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7e3c7932c5d76a59d494797fe71530daf534ed3/src%2Ftest%2Fui%2Fspan%2FE0536.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7e3c7932c5d76a59d494797fe71530daf534ed3/src%2Ftest%2Fui%2Fspan%2FE0536.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0536.stderr?ref=c7e3c7932c5d76a59d494797fe71530daf534ed3", "patch": "@@ -2,7 +2,7 @@ error[E0536]: expected 1 cfg-pattern\n   --> $DIR/E0536.rs:11:7\n    |\n 11 | #[cfg(not())] //~ ERROR E0536\n-   |       ^^^\n+   |       ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9d66ddbaae317dbc0592340dedace69262bbbbdd", "filename": "src/test/ui/span/E0537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7e3c7932c5d76a59d494797fe71530daf534ed3/src%2Ftest%2Fui%2Fspan%2FE0537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7e3c7932c5d76a59d494797fe71530daf534ed3/src%2Ftest%2Fui%2Fspan%2FE0537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0537.stderr?ref=c7e3c7932c5d76a59d494797fe71530daf534ed3", "patch": "@@ -2,7 +2,7 @@ error[E0537]: invalid predicate `unknown`\n   --> $DIR/E0537.rs:11:7\n    |\n 11 | #[cfg(unknown())] //~ ERROR E0537\n-   |       ^^^^^^^\n+   |       ^^^^^^^^^\n \n error: aborting due to previous error\n "}]}