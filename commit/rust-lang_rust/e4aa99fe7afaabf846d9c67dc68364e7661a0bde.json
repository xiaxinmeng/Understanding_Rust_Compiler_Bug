{"sha": "e4aa99fe7afaabf846d9c67dc68364e7661a0bde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YWE5OWZlN2FmYWFiZjg0NmQ5YzY3ZGM2ODM2NGU3NjYxYTBiZGU=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-01-02T17:40:15Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-01-04T19:06:42Z"}, "message": "Inlining enabled by -mir-opt-level > 1 is incompatible with coverage\n\nFixes: #80060\n\nAlso adds additional test cases for coverage of doctests.", "tree": {"sha": "a646adc02c18a1808d57e4a7964484c787e6de31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a646adc02c18a1808d57e4a7964484c787e6de31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4aa99fe7afaabf846d9c67dc68364e7661a0bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4aa99fe7afaabf846d9c67dc68364e7661a0bde", "html_url": "https://github.com/rust-lang/rust/commit/e4aa99fe7afaabf846d9c67dc68364e7661a0bde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbcaed03bf5505f3fed351887769ed1531599502", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcaed03bf5505f3fed351887769ed1531599502", "html_url": "https://github.com/rust-lang/rust/commit/bbcaed03bf5505f3fed351887769ed1531599502"}], "stats": {"total": 313, "additions": 210, "deletions": 103}, "files": [{"sha": "f06172ab7da8a48f8bc68cce5aa72bd89b29fd1e", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=e4aa99fe7afaabf846d9c67dc68364e7661a0bde", "patch": "@@ -41,6 +41,15 @@ impl<'tcx> MirPass<'tcx> for Inline {\n             return;\n         }\n \n+        if tcx.sess.opts.debugging_opts.instrument_coverage {\n+            // Since `Inline` happens after `InstrumentCoverage`, the function-specific coverage\n+            // counters can be invalidated, such as by merging coverage counter statements from\n+            // a pre-inlined function into a different function. This kind of change is invalid,\n+            // so inlining must be skipped. Note: This check is performed here so inlining can\n+            // be disabled without preventing other optimizations (regardless of `mir_opt_level`).\n+            return;\n+        }\n+\n         if inline(tcx, body) {\n             debug!(\"running simplify cfg on {:?}\", body.source);\n             CfgSimplifier::new(body).simplify();"}, {"sha": "e42889670b9dc1cc8e5e395aff2d9c7edfd06794", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=e4aa99fe7afaabf846d9c67dc68364e7661a0bde", "patch": "@@ -1830,11 +1830,17 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n \n         if debugging_opts.mir_opt_level > 1 {\n+            // Functions inlined during MIR transform can, at best, make it impossible to\n+            // effectively cover inlined functions, and, at worst, break coverage map generation\n+            // during LLVM codegen. For example, function counter IDs are only unique within a\n+            // function. Inlining after these counters are injected can produce duplicate counters,\n+            // resulting in an invalid coverage map (and ICE); so this option combination is not\n+            // allowed.\n             early_warn(\n                 error_format,\n                 &format!(\n-                    \"`-Z mir-opt-level={}` (any level > 1) enables function inlining, which \\\n-                    limits the effectiveness of `-Z instrument-coverage`.\",\n+                    \"`-Z mir-opt-level={}` (or any level > 1) enables function inlining, which \\\n+                    is incompatible with `-Z instrument-coverage`. Inlining will be disabled.\",\n                     debugging_opts.mir_opt_level,\n                 ),\n             );"}, {"sha": "8f67170561a2a7fc5cb0d14c0cb52125585f6a15", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.doctest.txt", "status": "modified", "additions": 80, "deletions": 44, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt?ref=e4aa99fe7afaabf846d9c67dc68364e7661a0bde", "patch": "@@ -21,50 +21,86 @@\n    20|       |//!\n    21|       |//! doctest returning a result:\n    22|      1|//! ```\n-   23|      1|//! #[derive(Debug)]\n-   24|      1|//! struct SomeError;\n-   25|      1|//! let mut res = Err(SomeError);\n-   26|      1|//! if res.is_ok() {\n-   27|      0|//!   res?;\n-   28|      1|//! } else {\n-   29|      1|//!   res = Ok(0);\n-   30|      1|//! }\n-   31|       |//! // need to be explicit because rustdoc cant infer the return type\n-   32|      1|//! Ok::<(), SomeError>(())\n-   33|      1|//! ```\n-   34|       |//!\n-   35|       |//! doctest with custom main:\n-   36|       |//! ```\n-   37|       |//! #[derive(Debug)]\n-   38|       |//! struct SomeError;\n-   39|       |//!\n-   40|       |//! extern crate doctest_crate;\n-   41|       |//!\n-   42|      1|//! fn doctest_main() -> Result<(), SomeError> {\n-   43|      1|//!     doctest_crate::fn_run_in_doctests(2);\n-   44|      1|//!     Ok(())\n-   45|      1|//! }\n-   46|       |//!\n-   47|       |//! // this `main` is not shown as covered, as it clashes with all the other\n-   48|       |//! // `main` functions that were automatically generated for doctests\n-   49|       |//! fn main() -> Result<(), SomeError> {\n-   50|       |//!     doctest_main()\n-   51|       |//! }\n-   52|       |//! ```\n-   53|       |\n-   54|       |/// doctest attached to fn testing external code:\n-   55|       |/// ```\n-   56|      1|/// extern crate doctest_crate;\n-   57|      1|/// doctest_crate::fn_run_in_doctests(3);\n-   58|      1|/// ```\n-   59|       |///\n-   60|      1|fn main() {\n-   61|      1|    if true {\n-   62|      1|        assert_eq!(1, 1);\n-   63|       |    } else {\n-   64|       |        assert_eq!(1, 2);\n-   65|       |    }\n-   66|      1|}\n+   23|      2|//! #[derive(Debug, PartialEq)]\n+                       ^1\n+   24|      1|//! struct SomeError {\n+   25|      1|//!     msg: String,\n+   26|      1|//! }\n+   27|      1|//! let mut res = Err(SomeError { msg: String::from(\"a message\") });\n+   28|      1|//! if res.is_ok() {\n+   29|      0|//!     res?;\n+   30|       |//! } else {\n+   31|      1|//!     if *res.as_ref().unwrap_err() == *res.as_ref().unwrap_err() {\n+   32|      1|//!         println!(\"{:?}\", res);\n+   33|      1|//!     }\n+                   ^0\n+   34|      1|//!     if *res.as_ref().unwrap_err() == *res.as_ref().unwrap_err() {\n+   35|      1|//!         res = Ok(1);\n+   36|      1|//!     }\n+                   ^0\n+   37|      1|//!     res = Ok(0);\n+   38|       |//! }\n+   39|       |//! // need to be explicit because rustdoc cant infer the return type\n+   40|      1|//! Ok::<(), SomeError>(())\n+   41|      1|//! ```\n+   42|       |//!\n+   43|       |//! doctest with custom main:\n+   44|       |//! ```\n+   45|      1|//! fn some_func() {\n+   46|      1|//!     println!(\"called some_func()\");\n+   47|      1|//! }\n+   48|       |//!\n+   49|       |//! #[derive(Debug)]\n+   50|       |//! struct SomeError;\n+   51|       |//!\n+   52|       |//! extern crate doctest_crate;\n+   53|       |//!\n+   54|      1|//! fn doctest_main() -> Result<(), SomeError> {\n+   55|      1|//!     some_func();\n+   56|      1|//!     doctest_crate::fn_run_in_doctests(2);\n+   57|      1|//!     Ok(())\n+   58|      1|//! }\n+   59|       |//!\n+   60|       |//! // this `main` is not shown as covered, as it clashes with all the other\n+   61|       |//! // `main` functions that were automatically generated for doctests\n+   62|       |//! fn main() -> Result<(), SomeError> {\n+   63|       |//!     doctest_main()\n+   64|       |//! }\n+   65|       |//! ```\n+   66|       |\n+   67|       |/// doctest attached to fn testing external code:\n+   68|       |/// ```\n+   69|      1|/// extern crate doctest_crate;\n+   70|      1|/// doctest_crate::fn_run_in_doctests(3);\n+   71|      1|/// ```\n+   72|       |///\n+   73|      1|fn main() {\n+   74|      1|    if true {\n+   75|      1|        assert_eq!(1, 1);\n+   76|       |    } else {\n+   77|       |        assert_eq!(1, 2);\n+   78|       |    }\n+   79|      1|}\n+   80|       |\n+   81|       |// FIXME(Swatinem): Fix known issue that coverage code region columns need to be offset by the\n+   82|       |// doc comment line prefix (`///` or `//!`) and any additional indent (before or after the doc\n+   83|       |// comment characters). This test produces `llvm-cov show` results demonstrating the problem.\n+   84|       |//\n+   85|       |// One of the above tests now includes: `derive(Debug, PartialEq)`, producing an `llvm-cov show`\n+   86|       |// result with a distinct count for `Debug`, denoted by `^1`, but the caret points to the wrong\n+   87|       |// column. Similarly, the `if` blocks without `else` blocks show `^0`, which should point at, or\n+   88|       |// one character past, the `if` block's closing brace. In both cases, these are most likely off\n+   89|       |// by the number of characters stripped from the beginning of each doc comment line: indent\n+   90|       |// whitespace, if any, doc comment prefix (`//!` in this case) and (I assume) one space character\n+   91|       |// (?). Note, when viewing `llvm-cov show` results in `--color` mode, the column offset errors are\n+   92|       |// more pronounced, and show up in more places, with background color used to show some distinct\n+   93|       |// code regions with different coverage counts.\n+   94|       |//\n+   95|       |// NOTE: Since the doc comment line prefix may vary, one possible solution is to replace each\n+   96|       |// character stripped from the beginning of doc comment lines with a space. This will give coverage\n+   97|       |// results the correct column offsets, and I think it should compile correctly, but I don't know\n+   98|       |// what affect it might have on diagnostic messages from the compiler, and whether anyone would care\n+   99|       |// if the indentation changed. I don't know if there is a more viable solution.\n \n ../coverage/lib/doctest_crate.rs:\n     1|       |/// A function run only from within doctests"}, {"sha": "333476a2df57390b1934eb11e967da276b676690", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.doctest/doctest.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html?ref=e4aa99fe7afaabf846d9c67dc68364e7661a0bde", "patch": "@@ -69,59 +69,59 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 59\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>fn main() <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"61:8-61:12: @0[1]: _1 = const true\n-61:8-61:12: @0[2]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"62:9-62:26: @5[0]: _2 = const ()\"><span class=\"annotation\">@5\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"62:9-62:26: @6[5]: _75 = const main::promoted[3]\n-62:9-62:26: @6[6]: _18 = &amp;(*_75)\n-62:9-62:26: @6[7]: _17 = &amp;(*_18)\n-62:9-62:26: @6[8]: _16 = move _17 as &amp;[&amp;str] (Pointer(Unsize))\n-62:9-62:26: @6[17]: _26 = &amp;(*_8)\n-62:9-62:26: @6[18]: _25 = &amp;_26\n-62:9-62:26: @6[21]: _28 = &amp;(*_9)\n-62:9-62:26: @6[22]: _27 = &amp;_28\n-62:9-62:26: @6[23]: _24 = (move _25, move _27)\n-62:9-62:26: @6[26]: FakeRead(ForMatchedPlace, _24)\n-62:9-62:26: @6[28]: _29 = (_24.0: &amp;&amp;i32)\n-62:9-62:26: @6[30]: _30 = (_24.1: &amp;&amp;i32)\n-62:9-62:26: @6[33]: _32 = &amp;(*_29)\n-62:9-62:26: @6[35]: _33 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-62:9-62:26: @6.Call: _31 = ArgumentV1::new::&lt;&amp;i32&gt;(move _32, move _33) -&gt; [return: bb7, unwind: bb17]\n-62:9-62:26: @7[4]: _35 = &amp;(*_30)\n-62:9-62:26: @7[6]: _36 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-62:9-62:26: @7.Call: _34 = ArgumentV1::new::&lt;&amp;i32&gt;(move _35, move _36) -&gt; [return: bb8, unwind: bb17]\n-62:9-62:26: @8[2]: _23 = [move _31, move _34]\n-62:9-62:26: @8[7]: _22 = &amp;_23\n-62:9-62:26: @8[8]: _21 = &amp;(*_22)\n-62:9-62:26: @8[9]: _20 = move _21 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-62:9-62:26: @8.Call: _15 = Arguments::new_v1(move _16, move _20) -&gt; [return: bb9, unwind: bb17]\n-62:9-62:26: @9.Call: core::panicking::panic_fmt(move _15) -&gt; bb17\"><span class=\"annotation\">@4,6,7,8,9\u298a</span>assert_eq!(1, 1);<span class=\"annotation\">\u2989@4,6,7,8,9</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"62:9-62:26: @5[0]: _2 = const ()\"><span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<div class=\"code\" style=\"counter-reset: line 72\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>fn main() <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"74:8-74:12: @0[1]: _1 = const true\n+74:8-74:12: @0[2]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @5[0]: _2 = const ()\"><span class=\"annotation\">@5\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"75:9-75:26: @6[5]: _75 = const main::promoted[3]\n+75:9-75:26: @6[6]: _18 = &amp;(*_75)\n+75:9-75:26: @6[7]: _17 = &amp;(*_18)\n+75:9-75:26: @6[8]: _16 = move _17 as &amp;[&amp;str] (Pointer(Unsize))\n+75:9-75:26: @6[17]: _26 = &amp;(*_8)\n+75:9-75:26: @6[18]: _25 = &amp;_26\n+75:9-75:26: @6[21]: _28 = &amp;(*_9)\n+75:9-75:26: @6[22]: _27 = &amp;_28\n+75:9-75:26: @6[23]: _24 = (move _25, move _27)\n+75:9-75:26: @6[26]: FakeRead(ForMatchedPlace, _24)\n+75:9-75:26: @6[28]: _29 = (_24.0: &amp;&amp;i32)\n+75:9-75:26: @6[30]: _30 = (_24.1: &amp;&amp;i32)\n+75:9-75:26: @6[33]: _32 = &amp;(*_29)\n+75:9-75:26: @6[35]: _33 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+75:9-75:26: @6.Call: _31 = ArgumentV1::new::&lt;&amp;i32&gt;(move _32, move _33) -&gt; [return: bb7, unwind: bb17]\n+75:9-75:26: @7[4]: _35 = &amp;(*_30)\n+75:9-75:26: @7[6]: _36 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+75:9-75:26: @7.Call: _34 = ArgumentV1::new::&lt;&amp;i32&gt;(move _35, move _36) -&gt; [return: bb8, unwind: bb17]\n+75:9-75:26: @8[2]: _23 = [move _31, move _34]\n+75:9-75:26: @8[7]: _22 = &amp;_23\n+75:9-75:26: @8[8]: _21 = &amp;(*_22)\n+75:9-75:26: @8[9]: _20 = move _21 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+75:9-75:26: @8.Call: _15 = Arguments::new_v1(move _16, move _20) -&gt; [return: bb9, unwind: bb17]\n+75:9-75:26: @9.Call: core::panicking::panic_fmt(move _15) -&gt; bb17\"><span class=\"annotation\">@4,6,7,8,9\u298a</span>assert_eq!(1, 1);<span class=\"annotation\">\u2989@4,6,7,8,9</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @5[0]: _2 = const ()\"><span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"64:9-64:26: @11[0]: _37 = const ()\"><span class=\"annotation\">@11\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"64:9-64:26: @12[5]: _72 = const main::promoted[0]\n-64:9-64:26: @12[6]: _53 = &amp;(*_72)\n-64:9-64:26: @12[7]: _52 = &amp;(*_53)\n-64:9-64:26: @12[8]: _51 = move _52 as &amp;[&amp;str] (Pointer(Unsize))\n-64:9-64:26: @12[17]: _61 = &amp;(*_43)\n-64:9-64:26: @12[18]: _60 = &amp;_61\n-64:9-64:26: @12[21]: _63 = &amp;(*_44)\n-64:9-64:26: @12[22]: _62 = &amp;_63\n-64:9-64:26: @12[23]: _59 = (move _60, move _62)\n-64:9-64:26: @12[26]: FakeRead(ForMatchedPlace, _59)\n-64:9-64:26: @12[28]: _64 = (_59.0: &amp;&amp;i32)\n-64:9-64:26: @12[30]: _65 = (_59.1: &amp;&amp;i32)\n-64:9-64:26: @12[33]: _67 = &amp;(*_64)\n-64:9-64:26: @12[35]: _68 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-64:9-64:26: @12.Call: _66 = ArgumentV1::new::&lt;&amp;i32&gt;(move _67, move _68) -&gt; [return: bb13, unwind: bb17]\n-64:9-64:26: @13[4]: _70 = &amp;(*_65)\n-64:9-64:26: @13[6]: _71 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-64:9-64:26: @13.Call: _69 = ArgumentV1::new::&lt;&amp;i32&gt;(move _70, move _71) -&gt; [return: bb14, unwind: bb17]\n-64:9-64:26: @14[2]: _58 = [move _66, move _69]\n-64:9-64:26: @14[7]: _57 = &amp;_58\n-64:9-64:26: @14[8]: _56 = &amp;(*_57)\n-64:9-64:26: @14[9]: _55 = move _56 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-64:9-64:26: @14.Call: _50 = Arguments::new_v1(move _51, move _55) -&gt; [return: bb15, unwind: bb17]\n-64:9-64:26: @15.Call: core::panicking::panic_fmt(move _50) -&gt; bb17\"><span class=\"annotation\">@10,12,13,14,15\u298a</span>assert_eq!(1, 2);<span class=\"annotation\">\u2989@10,12,13,14,15</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"64:9-64:26: @11[0]: _37 = const ()\"><span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @11[0]: _37 = const ()\"><span class=\"annotation\">@11\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"77:9-77:26: @12[5]: _72 = const main::promoted[0]\n+77:9-77:26: @12[6]: _53 = &amp;(*_72)\n+77:9-77:26: @12[7]: _52 = &amp;(*_53)\n+77:9-77:26: @12[8]: _51 = move _52 as &amp;[&amp;str] (Pointer(Unsize))\n+77:9-77:26: @12[17]: _61 = &amp;(*_43)\n+77:9-77:26: @12[18]: _60 = &amp;_61\n+77:9-77:26: @12[21]: _63 = &amp;(*_44)\n+77:9-77:26: @12[22]: _62 = &amp;_63\n+77:9-77:26: @12[23]: _59 = (move _60, move _62)\n+77:9-77:26: @12[26]: FakeRead(ForMatchedPlace, _59)\n+77:9-77:26: @12[28]: _64 = (_59.0: &amp;&amp;i32)\n+77:9-77:26: @12[30]: _65 = (_59.1: &amp;&amp;i32)\n+77:9-77:26: @12[33]: _67 = &amp;(*_64)\n+77:9-77:26: @12[35]: _68 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+77:9-77:26: @12.Call: _66 = ArgumentV1::new::&lt;&amp;i32&gt;(move _67, move _68) -&gt; [return: bb13, unwind: bb17]\n+77:9-77:26: @13[4]: _70 = &amp;(*_65)\n+77:9-77:26: @13[6]: _71 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+77:9-77:26: @13.Call: _69 = ArgumentV1::new::&lt;&amp;i32&gt;(move _70, move _71) -&gt; [return: bb14, unwind: bb17]\n+77:9-77:26: @14[2]: _58 = [move _66, move _69]\n+77:9-77:26: @14[7]: _57 = &amp;_58\n+77:9-77:26: @14[8]: _56 = &amp;(*_57)\n+77:9-77:26: @14[9]: _55 = move _56 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+77:9-77:26: @14.Call: _50 = Arguments::new_v1(move _51, move _55) -&gt; [return: bb15, unwind: bb17]\n+77:9-77:26: @15.Call: core::panicking::panic_fmt(move _50) -&gt; bb17\"><span class=\"annotation\">@10,12,13,14,15\u298a</span>assert_eq!(1, 2);<span class=\"annotation\">\u2989@10,12,13,14,15</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @11[0]: _37 = const ()\"><span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"66:2-66:2: @16.Return: return\"><span class=\"annotation\">@16\u298a</span>\u2038<span class=\"annotation\">\u2989@16</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:2-79:2: @16.Return: return\"><span class=\"annotation\">@16\u298a</span>\u2038<span class=\"annotation\">\u2989@16</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "ec04ea57063796851aa7bc1d0b758b6a51660c8d", "filename": "src/test/run-make-fulldeps/coverage/doctest.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fdoctest.rs?ref=e4aa99fe7afaabf846d9c67dc68364e7661a0bde", "patch": "@@ -20,26 +20,39 @@\n //!\n //! doctest returning a result:\n //! ```\n-//! #[derive(Debug)]\n-//! struct SomeError;\n-//! let mut res = Err(SomeError);\n+//! #[derive(Debug, PartialEq)]\n+//! struct SomeError {\n+//!     msg: String,\n+//! }\n+//! let mut res = Err(SomeError { msg: String::from(\"a message\") });\n //! if res.is_ok() {\n-//!   res?;\n+//!     res?;\n //! } else {\n-//!   res = Ok(0);\n+//!     if *res.as_ref().unwrap_err() == *res.as_ref().unwrap_err() {\n+//!         println!(\"{:?}\", res);\n+//!     }\n+//!     if *res.as_ref().unwrap_err() == *res.as_ref().unwrap_err() {\n+//!         res = Ok(1);\n+//!     }\n+//!     res = Ok(0);\n //! }\n //! // need to be explicit because rustdoc cant infer the return type\n //! Ok::<(), SomeError>(())\n //! ```\n //!\n //! doctest with custom main:\n //! ```\n+//! fn some_func() {\n+//!     println!(\"called some_func()\");\n+//! }\n+//!\n //! #[derive(Debug)]\n //! struct SomeError;\n //!\n //! extern crate doctest_crate;\n //!\n //! fn doctest_main() -> Result<(), SomeError> {\n+//!     some_func();\n //!     doctest_crate::fn_run_in_doctests(2);\n //!     Ok(())\n //! }\n@@ -64,3 +77,23 @@ fn main() {\n         assert_eq!(1, 2);\n     }\n }\n+\n+// FIXME(Swatinem): Fix known issue that coverage code region columns need to be offset by the\n+// doc comment line prefix (`///` or `//!`) and any additional indent (before or after the doc\n+// comment characters). This test produces `llvm-cov show` results demonstrating the problem.\n+//\n+// One of the above tests now includes: `derive(Debug, PartialEq)`, producing an `llvm-cov show`\n+// result with a distinct count for `Debug`, denoted by `^1`, but the caret points to the wrong\n+// column. Similarly, the `if` blocks without `else` blocks show `^0`, which should point at, or\n+// one character past, the `if` block's closing brace. In both cases, these are most likely off\n+// by the number of characters stripped from the beginning of each doc comment line: indent\n+// whitespace, if any, doc comment prefix (`//!` in this case) and (I assume) one space character\n+// (?). Note, when viewing `llvm-cov show` results in `--color` mode, the column offset errors are\n+// more pronounced, and show up in more places, with background color used to show some distinct\n+// code regions with different coverage counts.\n+//\n+// NOTE: Since the doc comment line prefix may vary, one possible solution is to replace each\n+// character stripped from the beginning of doc comment lines with a space. This will give coverage\n+// results the correct column offsets, and I think it should compile correctly, but I don't know\n+// what affect it might have on diagnostic messages from the compiler, and whether anyone would care\n+// if the indentation changed. I don't know if there is a more viable solution."}, {"sha": "2437155d9810a99436928de13da4b75a26e2cca3", "filename": "src/test/ui/mir/mir-inlining/inline-instrument-coverage-fail.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs?ref=e4aa99fe7afaabf846d9c67dc68364e7661a0bde", "patch": "@@ -0,0 +1,21 @@\n+// Ensures -Zmir-opt-level=2 (specifically, inlining) is not allowed with -Zinstrument-coverage.\n+// Regression test for issue #80060.\n+//\n+// needs-profiler-support\n+// build-pass\n+// compile-flags: -Zmir-opt-level=2 -Zinstrument-coverage\n+#[inline(never)]\n+fn foo() {}\n+\n+pub fn baz() {\n+    bar();\n+}\n+\n+#[inline(always)]\n+fn bar() {\n+    foo();\n+}\n+\n+fn main() {\n+    bar();\n+}"}, {"sha": "eb50e5075ca8fbfa7d354148794e6786371e8925", "filename": "src/test/ui/mir/mir-inlining/inline-instrument-coverage-fail.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4aa99fe7afaabf846d9c67dc68364e7661a0bde/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr?ref=e4aa99fe7afaabf846d9c67dc68364e7661a0bde", "patch": "@@ -0,0 +1,2 @@\n+warning: `-Z mir-opt-level=2` (or any level > 1) enables function inlining, which is incompatible with `-Z instrument-coverage`. Inlining will be disabled.\n+"}]}