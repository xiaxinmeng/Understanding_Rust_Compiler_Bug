{"sha": "66cadec1763ac645337c1ac58f06ea48b9b72a26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2Y2FkZWMxNzYzYWM2NDUzMzdjMWFjNThmMDZlYTQ4YjliNzJhMjY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-11T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-12T19:09:04Z"}, "message": "Fix generator inlining by checking for rust-call abi and spread arg", "tree": {"sha": "2290df57297ddb43400e090e6dab732c5875acf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2290df57297ddb43400e090e6dab732c5875acf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66cadec1763ac645337c1ac58f06ea48b9b72a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66cadec1763ac645337c1ac58f06ea48b9b72a26", "html_url": "https://github.com/rust-lang/rust/commit/66cadec1763ac645337c1ac58f06ea48b9b72a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66cadec1763ac645337c1ac58f06ea48b9b72a26/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb3d6b7d472e2116312ea45db07a5338af205fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb3d6b7d472e2116312ea45db07a5338af205fb", "html_url": "https://github.com/rust-lang/rust/commit/9bb3d6b7d472e2116312ea45db07a5338af205fb"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "2ccb9b3709f2fcba7f4973c1680a199c0890c162", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/66cadec1763ac645337c1ac58f06ea48b9b72a26/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66cadec1763ac645337c1ac58f06ea48b9b72a26/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=66cadec1763ac645337c1ac58f06ea48b9b72a26", "patch": "@@ -7,6 +7,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n+use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_span::{hygiene::ExpnKind, ExpnData, Span};\n use rustc_target::spec::abi::Abi;\n@@ -28,6 +29,7 @@ pub struct Inline;\n #[derive(Copy, Clone, Debug)]\n struct CallSite<'tcx> {\n     callee: Instance<'tcx>,\n+    fn_sig: ty::PolyFnSig<'tcx>,\n     block: BasicBlock,\n     target: Option<BasicBlock>,\n     source_info: SourceInfo,\n@@ -173,22 +175,23 @@ impl Inliner<'tcx> {\n \n         // Only consider direct calls to functions\n         let terminator = bb_data.terminator();\n-        if let TerminatorKind::Call { func: ref op, ref destination, .. } = terminator.kind {\n-            if let ty::FnDef(callee_def_id, substs) = *op.ty(caller_body, self.tcx).kind() {\n-                // To resolve an instance its substs have to be fully normalized, so\n-                // we do this here.\n-                let normalized_substs = self.tcx.normalize_erasing_regions(self.param_env, substs);\n+        if let TerminatorKind::Call { ref func, ref destination, .. } = terminator.kind {\n+            let func_ty = func.ty(caller_body, self.tcx);\n+            if let ty::FnDef(def_id, substs) = *func_ty.kind() {\n+                // To resolve an instance its substs have to be fully normalized.\n+                let substs = self.tcx.normalize_erasing_regions(self.param_env, substs);\n                 let callee =\n-                    Instance::resolve(self.tcx, self.param_env, callee_def_id, normalized_substs)\n-                        .ok()\n-                        .flatten()?;\n+                    Instance::resolve(self.tcx, self.param_env, def_id, substs).ok().flatten()?;\n \n                 if let InstanceDef::Virtual(..) | InstanceDef::Intrinsic(_) = callee.def {\n                     return None;\n                 }\n \n+                let fn_sig = self.tcx.fn_sig(def_id).subst(self.tcx, substs);\n+\n                 return Some(CallSite {\n                     callee,\n+                    fn_sig,\n                     block: bb,\n                     target: destination.map(|(_, target)| target),\n                     source_info: terminator.source_info,\n@@ -437,7 +440,7 @@ impl Inliner<'tcx> {\n                 };\n \n                 // Copy the arguments if needed.\n-                let args: Vec<_> = self.make_call_args(args, &callsite, caller_body);\n+                let args: Vec<_> = self.make_call_args(args, &callsite, caller_body, &callee_body);\n \n                 let mut integrator = Integrator {\n                     args: &args,\n@@ -518,6 +521,7 @@ impl Inliner<'tcx> {\n         args: Vec<Operand<'tcx>>,\n         callsite: &CallSite<'tcx>,\n         caller_body: &mut Body<'tcx>,\n+        callee_body: &Body<'tcx>,\n     ) -> Vec<Local> {\n         let tcx = self.tcx;\n \n@@ -544,9 +548,7 @@ impl Inliner<'tcx> {\n         //     tmp2 = tuple_tmp.2\n         //\n         // and the vector is `[closure_ref, tmp0, tmp1, tmp2]`.\n-        // FIXME(eddyb) make this check for `\"rust-call\"` ABI combined with\n-        // `callee_body.spread_arg == None`, instead of special-casing closures.\n-        if tcx.is_closure(callsite.callee.def_id()) {\n+        if callsite.fn_sig.abi() == Abi::RustCall && callee_body.spread_arg.is_none() {\n             let mut args = args.into_iter();\n             let self_ = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body);\n             let tuple = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body);"}, {"sha": "d11b3e548f721f25d2a253057dcaff1953d196a4", "filename": "src/test/mir-opt/inline/inline-generator.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/66cadec1763ac645337c1ac58f06ea48b9b72a26/src%2Ftest%2Fmir-opt%2Finline%2Finline-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66cadec1763ac645337c1ac58f06ea48b9b72a26/src%2Ftest%2Fmir-opt%2Finline%2Finline-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-generator.rs?ref=66cadec1763ac645337c1ac58f06ea48b9b72a26", "patch": "@@ -0,0 +1,16 @@\n+// ignore-wasm32-bare compiled with panic=abort by default\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+use std::pin::Pin;\n+\n+// EMIT_MIR inline_generator.main.Inline.diff\n+fn main() {\n+    let _r = Pin::new(&mut g()).resume(false);\n+}\n+\n+#[inline(always)]\n+pub fn g() -> impl Generator<bool> {\n+    #[inline(always)]\n+    |a| { yield if a { 7 } else { 13 } }\n+}"}]}