{"sha": "985fb4caa076e6c62c45de51aa43a03e97d828f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NWZiNGNhYTA3NmU2YzYyYzQ1ZGU1MWFhNDNhMDNlOTdkODI4ZjM=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-04-03T20:45:33Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-11T18:35:44Z"}, "message": "Add helper for switching safety contexts", "tree": {"sha": "cd386a395855ddb1ffea0bc4c12864201b0ad0f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd386a395855ddb1ffea0bc4c12864201b0ad0f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/985fb4caa076e6c62c45de51aa43a03e97d828f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/985fb4caa076e6c62c45de51aa43a03e97d828f3", "html_url": "https://github.com/rust-lang/rust/commit/985fb4caa076e6c62c45de51aa43a03e97d828f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/985fb4caa076e6c62c45de51aa43a03e97d828f3/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ea294114014f080e11b23abdc09c7d645547ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ea294114014f080e11b23abdc09c7d645547ad", "html_url": "https://github.com/rust-lang/rust/commit/d5ea294114014f080e11b23abdc09c7d645547ad"}], "stats": {"total": 125, "additions": 74, "deletions": 51}, "files": [{"sha": "933362578f9fcb3fae2dceeb866c7a6ef3bcd999", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/985fb4caa076e6c62c45de51aa43a03e97d828f3/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985fb4caa076e6c62c45de51aa43a03e97d828f3/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=985fb4caa076e6c62c45de51aa43a03e97d828f3", "patch": "@@ -21,6 +21,36 @@ struct UnsafetyVisitor<'tcx> {\n }\n \n impl<'tcx> UnsafetyVisitor<'tcx> {\n+    fn in_safety_context<R>(\n+        &mut self,\n+        safety_context: SafetyContext,\n+        f: impl FnOnce(&mut Self) -> R,\n+    ) {\n+        if let (\n+            SafetyContext::UnsafeBlock { span: enclosing_span, .. },\n+            SafetyContext::UnsafeBlock { span: block_span, hir_id, .. },\n+        ) = (self.safety_context, safety_context)\n+        {\n+            self.warn_unused_unsafe(\n+                hir_id,\n+                block_span,\n+                Some(self.tcx.sess.source_map().guess_head_span(enclosing_span)),\n+            );\n+            f(self);\n+        } else {\n+            let prev_context = self.safety_context;\n+            self.safety_context = safety_context;\n+\n+            f(self);\n+\n+            if let SafetyContext::UnsafeBlock { used: false, span, hir_id } = self.safety_context {\n+                self.warn_unused_unsafe(hir_id, span, self.body_unsafety.unsafe_fn_sig_span());\n+            }\n+            self.safety_context = prev_context;\n+            return;\n+        }\n+    }\n+\n     fn requires_unsafe(&mut self, span: Span, kind: UnsafeOpKind) {\n         let (description, note) = kind.description_and_note();\n         let unsafe_op_in_unsafe_fn_allowed = self.unsafe_op_in_unsafe_fn_allowed();\n@@ -100,40 +130,25 @@ impl<'tcx> UnsafetyVisitor<'tcx> {\n impl<'thir, 'tcx> Visitor<'thir, 'tcx> for UnsafetyVisitor<'tcx> {\n     fn visit_block(&mut self, block: &Block<'thir, 'tcx>) {\n         if let BlockSafety::ExplicitUnsafe(hir_id) = block.safety_mode {\n-            if let SafetyContext::UnsafeBlock { span: enclosing_span, .. } = self.safety_context {\n-                self.warn_unused_unsafe(\n-                    hir_id,\n-                    block.span,\n-                    Some(self.tcx.sess.source_map().guess_head_span(enclosing_span)),\n-                );\n-            } else {\n-                let prev_context = self.safety_context;\n-                self.safety_context =\n-                    SafetyContext::UnsafeBlock { span: block.span, hir_id, used: false };\n-                visit::walk_block(self, block);\n-                if let SafetyContext::UnsafeBlock { used: false, span, hir_id } =\n-                    self.safety_context\n-                {\n-                    self.warn_unused_unsafe(hir_id, span, self.body_unsafety.unsafe_fn_sig_span());\n-                }\n-                self.safety_context = prev_context;\n-                return;\n-            }\n+            self.in_safety_context(\n+                SafetyContext::UnsafeBlock { span: block.span, hir_id, used: false },\n+                |this| visit::walk_block(this, block),\n+            );\n+        } else {\n+            visit::walk_block(self, block);\n         }\n-\n-        visit::walk_block(self, block);\n     }\n \n     fn visit_expr(&mut self, expr: &'thir Expr<'thir, 'tcx>) {\n         match expr.kind {\n-            ExprKind::Scope { value, lint_level: LintLevel::Explicit(hir_id), .. } => {\n+            ExprKind::Scope { value, lint_level: LintLevel::Explicit(hir_id), region_scope: _ } => {\n                 let prev_id = self.hir_context;\n                 self.hir_context = hir_id;\n                 self.visit_expr(value);\n                 self.hir_context = prev_id;\n                 return;\n             }\n-            ExprKind::Call { fun, .. } => {\n+            ExprKind::Call { fun, ty: _, args: _, from_hir_call: _, fn_span: _ } => {\n                 if fun.ty.fn_sig(self.tcx).unsafety() == hir::Unsafety::Unsafe {\n                     self.requires_unsafe(expr.span, CallToUnsafeFunction);\n                 }"}, {"sha": "9c5b07e2b2ada14e6cf741d69e2984bdc66d0ef3", "filename": "compiler/rustc_mir_build/src/thir/visit.rs", "status": "modified", "additions": 34, "deletions": 26, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/985fb4caa076e6c62c45de51aa43a03e97d828f3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985fb4caa076e6c62c45de51aa43a03e97d828f3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs?ref=985fb4caa076e6c62c45de51aa43a03e97d828f3", "patch": "@@ -26,7 +26,7 @@ pub fn walk_expr<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n ) {\n     use ExprKind::*;\n     match expr.kind {\n-        Scope { value, .. } => visitor.visit_expr(value),\n+        Scope { value, region_scope: _, lint_level: _ } => visitor.visit_expr(value),\n         Box { value } => visitor.visit_expr(value),\n         If { cond, then, else_opt } => {\n             visitor.visit_expr(cond);\n@@ -35,22 +35,22 @@ pub fn walk_expr<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n                 visitor.visit_expr(else_expr);\n             }\n         }\n-        Call { fun, args, .. } => {\n+        Call { fun, args, ty: _, from_hir_call: _, fn_span: _ } => {\n             visitor.visit_expr(fun);\n             for arg in args {\n                 visitor.visit_expr(arg);\n             }\n         }\n         Deref { arg } => visitor.visit_expr(arg),\n-        Binary { lhs, rhs, .. } | LogicalOp { lhs, rhs, .. } => {\n+        Binary { lhs, rhs, op: _ } | LogicalOp { lhs, rhs, op: _ } => {\n             visitor.visit_expr(lhs);\n             visitor.visit_expr(rhs);\n         }\n-        Unary { arg, .. } => visitor.visit_expr(arg),\n+        Unary { arg, op: _ } => visitor.visit_expr(arg),\n         Cast { source } => visitor.visit_expr(source),\n         Use { source } => visitor.visit_expr(source),\n         NeverToAny { source } => visitor.visit_expr(source),\n-        Pointer { source, .. } => visitor.visit_expr(source),\n+        Pointer { source, cast: _ } => visitor.visit_expr(source),\n         Loop { body } => visitor.visit_expr(body),\n         Match { scrutinee, arms } => {\n             visitor.visit_expr(scrutinee);\n@@ -59,24 +59,24 @@ pub fn walk_expr<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n             }\n         }\n         Block { ref body } => visitor.visit_block(body),\n-        Assign { lhs, rhs } | AssignOp { lhs, rhs, .. } => {\n+        Assign { lhs, rhs } | AssignOp { lhs, rhs, op: _ } => {\n             visitor.visit_expr(lhs);\n             visitor.visit_expr(rhs);\n         }\n-        Field { lhs, .. } => visitor.visit_expr(lhs),\n+        Field { lhs, name: _ } => visitor.visit_expr(lhs),\n         Index { lhs, index } => {\n             visitor.visit_expr(lhs);\n             visitor.visit_expr(index);\n         }\n-        VarRef { .. } | UpvarRef { .. } => {}\n-        Borrow { arg, .. } => visitor.visit_expr(arg),\n-        AddressOf { arg, .. } => visitor.visit_expr(arg),\n-        Break { value, .. } => {\n+        VarRef { id: _ } | UpvarRef { closure_def_id: _, var_hir_id: _ } => {}\n+        Borrow { arg, borrow_kind: _ } => visitor.visit_expr(arg),\n+        AddressOf { arg, mutability: _ } => visitor.visit_expr(arg),\n+        Break { value, label: _ } => {\n             if let Some(value) = value {\n                 visitor.visit_expr(value)\n             }\n         }\n-        Continue { .. } => {}\n+        Continue { label: _ } => {}\n         Return { value } => {\n             if let Some(value) = value {\n                 visitor.visit_expr(value)\n@@ -92,40 +92,42 @@ pub fn walk_expr<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n                 visitor.visit_expr(field);\n             }\n         }\n-        Adt { fields, ref base, .. } => {\n+        Adt { fields, ref base, adt_def: _, variant_index: _, substs: _, user_ty: _ } => {\n             for field in fields {\n                 visitor.visit_expr(field.expr);\n             }\n             if let Some(base) = base {\n                 visitor.visit_expr(base.base);\n             }\n         }\n-        PlaceTypeAscription { source, .. } | ValueTypeAscription { source, .. } => {\n+        PlaceTypeAscription { source, user_ty: _ } | ValueTypeAscription { source, user_ty: _ } => {\n             visitor.visit_expr(source)\n         }\n-        Closure { .. } => {}\n-        Literal { literal, .. } => visitor.visit_const(literal),\n-        StaticRef { literal, .. } => visitor.visit_const(literal),\n-        InlineAsm { operands, .. } => {\n+        Closure { closure_id: _, substs: _, upvars: _, movability: _, fake_reads: _ } => {}\n+        Literal { literal, user_ty: _, const_id: _ } => visitor.visit_const(literal),\n+        StaticRef { literal, def_id: _ } => visitor.visit_const(literal),\n+        InlineAsm { operands, template: _, options: _, line_spans: _ } => {\n             for op in operands {\n                 use InlineAsmOperand::*;\n                 match op {\n-                    In { expr, .. }\n-                    | Out { expr: Some(expr), .. }\n-                    | InOut { expr, .. }\n+                    In { expr, reg: _ }\n+                    | Out { expr: Some(expr), reg: _, late: _ }\n+                    | InOut { expr, reg: _, late: _ }\n                     | SymFn { expr } => visitor.visit_expr(expr),\n-                    SplitInOut { in_expr, out_expr, .. } => {\n+                    SplitInOut { in_expr, out_expr, reg: _, late: _ } => {\n                         visitor.visit_expr(in_expr);\n                         if let Some(out_expr) = out_expr {\n                             visitor.visit_expr(out_expr);\n                         }\n                     }\n-                    Out { .. } | Const { .. } | SymStatic { .. } => {}\n+                    Out { expr: None, reg: _, late: _ }\n+                    | Const { value: _, span: _ }\n+                    | SymStatic { def_id: _ } => {}\n                 }\n             }\n         }\n         ThreadLocalRef(_) => {}\n-        LlvmInlineAsm { outputs, inputs, .. } => {\n+        LlvmInlineAsm { outputs, inputs, asm: _ } => {\n             for out_expr in outputs {\n                 visitor.visit_expr(out_expr);\n             }\n@@ -142,8 +144,14 @@ pub fn walk_stmt<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n     stmt: &'thir Stmt<'thir, 'tcx>,\n ) {\n     match stmt.kind {\n-        StmtKind::Expr { expr, .. } => visitor.visit_expr(expr),\n-        StmtKind::Let { pattern: _, initializer, .. } => {\n+        StmtKind::Expr { expr, scope: _ } => visitor.visit_expr(expr),\n+        StmtKind::Let {\n+            initializer,\n+            remainder_scope: _,\n+            init_scope: _,\n+            pattern: _,\n+            lint_level: _,\n+        } => {\n             if let Some(init) = initializer {\n                 visitor.visit_expr(init);\n             }"}, {"sha": "7b42de0ec436991ab453b95c86052ab0f3b91f8b", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/985fb4caa076e6c62c45de51aa43a03e97d828f3/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985fb4caa076e6c62c45de51aa43a03e97d828f3/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=985fb4caa076e6c62c45de51aa43a03e97d828f3", "patch": "@@ -7,8 +7,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 1369;\n-const ISSUES_ENTRY_LIMIT: usize = 2551;\n+const ROOT_ENTRY_LIMIT: usize = 1370;\n+const ISSUES_ENTRY_LIMIT: usize = 2555;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}