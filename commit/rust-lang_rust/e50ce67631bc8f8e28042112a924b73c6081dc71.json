{"sha": "e50ce67631bc8f8e28042112a924b73c6081dc71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MGNlNjc2MzFiYzhmOGUyODA0MjExMmE5MjRiNzNjNjA4MWRjNzE=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-06T08:32:35Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:03:47Z"}, "message": "Do not do match check if lowering failed.", "tree": {"sha": "28efd509d92bdd9fa33b072c873d1b5268eb32ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28efd509d92bdd9fa33b072c873d1b5268eb32ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e50ce67631bc8f8e28042112a924b73c6081dc71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e50ce67631bc8f8e28042112a924b73c6081dc71", "html_url": "https://github.com/rust-lang/rust/commit/e50ce67631bc8f8e28042112a924b73c6081dc71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e50ce67631bc8f8e28042112a924b73c6081dc71/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de6f430140a49e3ecf34dcb914326bb5b9789772", "url": "https://api.github.com/repos/rust-lang/rust/commits/de6f430140a49e3ecf34dcb914326bb5b9789772", "html_url": "https://github.com/rust-lang/rust/commit/de6f430140a49e3ecf34dcb914326bb5b9789772"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "929c4a9ccb3bddf03c588267a771e237c4ede4a5", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e50ce67631bc8f8e28042112a924b73c6081dc71/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50ce67631bc8f8e28042112a924b73c6081dc71/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=e50ce67631bc8f8e28042112a924b73c6081dc71", "patch": "@@ -388,14 +388,26 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n \n         let pattern_arena = RefCell::new(PatternArena::new());\n \n+        let mut have_errors = false;\n         let m_arms: Vec<_> = arms\n             .iter()\n             .map(|arm| usefulness::MatchArm {\n-                pat: self.lower_pattern(arm.pat, &mut pattern_arena.borrow_mut(), db, &body),\n+                pat: self.lower_pattern(\n+                    arm.pat,\n+                    &mut pattern_arena.borrow_mut(),\n+                    db,\n+                    &body,\n+                    &mut have_errors,\n+                ),\n                 has_guard: arm.guard.is_some(),\n             })\n             .collect();\n \n+        // Bail out early if lowering failed.\n+        if have_errors {\n+            return;\n+        }\n+\n         let cx = usefulness::MatchCheckCtx {\n             module: self.owner.module(db.upcast()),\n             match_expr,\n@@ -442,10 +454,15 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         pattern_arena: &mut PatternArena,\n         db: &dyn HirDatabase,\n         body: &Body,\n+        have_errors: &mut bool,\n     ) -> pattern::PatId {\n         let mut patcx = pattern::PatCtxt::new(db, &self.infer, body);\n         let pattern = patcx.lower_pattern(pat);\n-        pattern_arena.alloc(expand_pattern(pattern))\n+        let pattern = pattern_arena.alloc(expand_pattern(pattern));\n+        if !patcx.errors.is_empty() {\n+            *have_errors = true;\n+        }\n+        pattern\n     }\n \n     fn validate_results_in_tail_expr(&mut self, body_id: ExprId, id: ExprId, db: &dyn HirDatabase) {"}]}