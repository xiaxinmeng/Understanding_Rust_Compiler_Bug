{"sha": "db32a2e4211f9444ef4f10b633e400d27ed2662e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMzJhMmU0MjExZjk0NDRlZjRmMTBiNjMzZTQwMGQyN2VkMjY2MmU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-04-10T20:05:46Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-04-13T13:07:39Z"}, "message": "Implement inline associated type bounds\n\nLike `Iterator<Item: SomeTrait>`.\n\nThis is an unstable feature, but it's used in the standard library e.g. in the\ndefinition of Flatten, so we can't get away with not implementing it :)", "tree": {"sha": "00095f637d1775f0cce68d7c0bd6a01bae63e5de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00095f637d1775f0cce68d7c0bd6a01bae63e5de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db32a2e4211f9444ef4f10b633e400d27ed2662e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db32a2e4211f9444ef4f10b633e400d27ed2662e", "html_url": "https://github.com/rust-lang/rust/commit/db32a2e4211f9444ef4f10b633e400d27ed2662e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db32a2e4211f9444ef4f10b633e400d27ed2662e/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c388130f5ffbcbe7d3131213a24d12d02f769b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/c388130f5ffbcbe7d3131213a24d12d02f769b87", "html_url": "https://github.com/rust-lang/rust/commit/c388130f5ffbcbe7d3131213a24d12d02f769b87"}], "stats": {"total": 137, "additions": 120, "deletions": 17}, "files": [{"sha": "b3c91fea2ab7c51c6e3d3f836929c1f6843e1850", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=db32a2e4211f9444ef4f10b633e400d27ed2662e", "patch": "@@ -15,7 +15,7 @@ use ra_syntax::ast::{\n use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n-    path::{path, GenericArgs, Path},\n+    path::{path, AssociatedTypeBinding, GenericArgs, Path},\n     src::HasSource,\n     type_ref::{Mutability, TypeBound, TypeRef},\n     visibility::RawVisibility,\n@@ -95,7 +95,11 @@ fn desugar_future_path(orig: TypeRef) -> Path {\n     let path = path![std::future::Future];\n     let mut generic_args: Vec<_> = std::iter::repeat(None).take(path.segments.len() - 1).collect();\n     let mut last = GenericArgs::empty();\n-    last.bindings.push((name![Output], orig));\n+    last.bindings.push(AssociatedTypeBinding {\n+        name: name![Output],\n+        type_ref: Some(orig),\n+        bounds: Vec::new(),\n+    });\n     generic_args.push(Some(Arc::new(last)));\n \n     Path::from_known_path(path, generic_args)"}, {"sha": "162b3c8c74fea05a02a2e5bfa8f7601aa99d508c", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=db32a2e4211f9444ef4f10b633e400d27ed2662e", "patch": "@@ -14,7 +14,10 @@ use hir_expand::{\n use ra_db::CrateId;\n use ra_syntax::ast;\n \n-use crate::{type_ref::TypeRef, InFile};\n+use crate::{\n+    type_ref::{TypeBound, TypeRef},\n+    InFile,\n+};\n \n #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct ModPath {\n@@ -111,7 +114,21 @@ pub struct GenericArgs {\n     /// is left out.\n     pub has_self_type: bool,\n     /// Associated type bindings like in `Iterator<Item = T>`.\n-    pub bindings: Vec<(Name, TypeRef)>,\n+    pub bindings: Vec<AssociatedTypeBinding>,\n+}\n+\n+/// An associated type binding like in `Iterator<Item = T>`.\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct AssociatedTypeBinding {\n+    /// The name of the associated type.\n+    pub name: Name,\n+    /// The type bound to this associated type (in `Item = T`, this would be the\n+    /// `T`). This can be `None` if there are bounds instead.\n+    pub type_ref: Option<TypeRef>,\n+    /// Bounds for the associated type, like in `Iterator<Item:\n+    /// SomeOtherTrait>`. (This is the unstable `associated_type_bounds`\n+    /// feature.)\n+    pub bounds: Vec<TypeBound>,\n }\n \n /// A single generic argument."}, {"sha": "9ec2e0dcdf01ca5bf7bce26eef39ac1c61a4761f", "filename": "crates/ra_hir_def/src/path/lower.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs?ref=db32a2e4211f9444ef4f10b633e400d27ed2662e", "patch": "@@ -9,11 +9,12 @@ use hir_expand::{\n     hygiene::Hygiene,\n     name::{name, AsName},\n };\n-use ra_syntax::ast::{self, AstNode, TypeAscriptionOwner};\n+use ra_syntax::ast::{self, AstNode, TypeAscriptionOwner, TypeBoundsOwner};\n \n+use super::AssociatedTypeBinding;\n use crate::{\n     path::{GenericArg, GenericArgs, ModPath, Path, PathKind},\n-    type_ref::TypeRef,\n+    type_ref::{TypeBound, TypeRef},\n };\n \n pub(super) use lower_use::lower_use_tree;\n@@ -136,10 +137,16 @@ pub(super) fn lower_generic_args(node: ast::TypeArgList) -> Option<GenericArgs>\n     // lifetimes ignored for now\n     let mut bindings = Vec::new();\n     for assoc_type_arg in node.assoc_type_args() {\n+        let assoc_type_arg: ast::AssocTypeArg = assoc_type_arg;\n         if let Some(name_ref) = assoc_type_arg.name_ref() {\n             let name = name_ref.as_name();\n-            let type_ref = TypeRef::from_ast_opt(assoc_type_arg.type_ref());\n-            bindings.push((name, type_ref));\n+            let type_ref = assoc_type_arg.type_ref().map(TypeRef::from_ast);\n+            let bounds = if let Some(l) = assoc_type_arg.type_bound_list() {\n+                l.bounds().map(TypeBound::from_ast).collect()\n+            } else {\n+                Vec::new()\n+            };\n+            bindings.push(AssociatedTypeBinding { name, type_ref, bounds });\n         }\n     }\n     if args.is_empty() && bindings.is_empty() {\n@@ -168,7 +175,11 @@ fn lower_generic_args_from_fn_path(\n     }\n     if let Some(ret_type) = ret_type {\n         let type_ref = TypeRef::from_ast_opt(ret_type.type_ref());\n-        bindings.push((name![Output], type_ref))\n+        bindings.push(AssociatedTypeBinding {\n+            name: name![Output],\n+            type_ref: Some(type_ref),\n+            bounds: Vec::new(),\n+        });\n     }\n     if args.is_empty() && bindings.is_empty() {\n         None"}, {"sha": "f308c6bdfc3edc0853fc98abc493678d3e75e815", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=db32a2e4211f9444ef4f10b633e400d27ed2662e", "patch": "@@ -163,8 +163,16 @@ impl TypeRef {\n                         let crate::path::GenericArg::Type(type_ref) = arg;\n                         go(type_ref, f);\n                     }\n-                    for (_, type_ref) in &args_and_bindings.bindings {\n-                        go(type_ref, f);\n+                    for binding in &args_and_bindings.bindings {\n+                        if let Some(type_ref) = &binding.type_ref {\n+                            go(type_ref, f);\n+                        }\n+                        for bound in &binding.bounds {\n+                            match bound {\n+                                TypeBound::Path(path) => go_path(path, f),\n+                                TypeBound::Error => (),\n+                            }\n+                        }\n                     }\n                 }\n             }"}, {"sha": "21e7baf8b445bc94607447ea2c4197afbcb0d948", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=db32a2e4211f9444ef4f10b633e400d27ed2662e", "patch": "@@ -8,6 +8,8 @@\n use std::iter;\n use std::sync::Arc;\n \n+use smallvec::SmallVec;\n+\n use hir_def::{\n     adt::StructKind,\n     builtin_type::BuiltinType,\n@@ -596,21 +598,35 @@ fn assoc_type_bindings_from_type_bound<'a>(\n         .into_iter()\n         .flat_map(|segment| segment.args_and_bindings.into_iter())\n         .flat_map(|args_and_bindings| args_and_bindings.bindings.iter())\n-        .map(move |(name, type_ref)| {\n+        .flat_map(move |binding| {\n             let associated_ty = associated_type_by_name_including_super_traits(\n                 ctx.db.upcast(),\n                 trait_ref.trait_,\n-                &name,\n+                &binding.name,\n             );\n             let associated_ty = match associated_ty {\n-                None => return GenericPredicate::Error,\n+                None => return SmallVec::<[GenericPredicate; 1]>::new(),\n                 Some(t) => t,\n             };\n             let projection_ty =\n                 ProjectionTy { associated_ty, parameters: trait_ref.substs.clone() };\n-            let ty = Ty::from_hir(ctx, type_ref);\n-            let projection_predicate = ProjectionPredicate { projection_ty, ty };\n-            GenericPredicate::Projection(projection_predicate)\n+            let mut preds = SmallVec::with_capacity(\n+                binding.type_ref.as_ref().map_or(0, |_| 1) + binding.bounds.len(),\n+            );\n+            if let Some(type_ref) = &binding.type_ref {\n+                let ty = Ty::from_hir(ctx, type_ref);\n+                let projection_predicate =\n+                    ProjectionPredicate { projection_ty: projection_ty.clone(), ty };\n+                preds.push(GenericPredicate::Projection(projection_predicate));\n+            }\n+            for bound in &binding.bounds {\n+                preds.extend(GenericPredicate::from_type_bound(\n+                    ctx,\n+                    bound,\n+                    Ty::Projection(projection_ty.clone()),\n+                ));\n+            }\n+            preds\n         })\n }\n "}, {"sha": "53461bdbb66508dc085fbe0d37b0e1b473254660", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db32a2e4211f9444ef4f10b633e400d27ed2662e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=db32a2e4211f9444ef4f10b633e400d27ed2662e", "patch": "@@ -1923,6 +1923,53 @@ fn test<T, U>() where T: Trait<U::Item>, U: Trait<T::Item> {\n     assert_eq!(t, \"{unknown}\");\n }\n \n+#[test]\n+fn inline_assoc_type_bounds_1() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Iterator {\n+    type Item;\n+}\n+trait OtherTrait<T> {\n+    fn foo(&self) -> T;\n+}\n+\n+// workaround for Chalk assoc type normalization problems\n+pub struct S<T>;\n+impl<T: Iterator> Iterator for S<T> {\n+    type Item = <T as Iterator>::Item;\n+}\n+\n+fn test<I: Iterator<Item: OtherTrait<u32>>>() {\n+    let x: <S<I> as Iterator>::Item;\n+    x.foo()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"u32\");\n+}\n+\n+#[test]\n+fn inline_assoc_type_bounds_2() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Iterator {\n+    type Item;\n+}\n+\n+fn test<I: Iterator<Item: Iterator<Item = u32>>>() {\n+    let x: <<I as Iterator>::Item as Iterator>::Item;\n+    x<|>;\n+}\n+\"#,\n+    );\n+    // assert_eq!(t, \"u32\");\n+    // doesn't currently work, Chalk #234\n+    assert_eq!(t, \"{unknown}\");\n+}\n+\n #[test]\n fn unify_impl_trait() {\n     assert_snapshot!("}]}