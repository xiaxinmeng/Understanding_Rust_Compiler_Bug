{"sha": "16a6ebd1f60871464c731306aa9007aab30f0dbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YTZlYmQxZjYwODcxNDY0YzczMTMwNmFhOTAwN2FhYjMwZjBkYmY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-12-02T14:20:48Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-01-08T17:02:11Z"}, "message": "\"The Rust Programming Language\"\n\nThis pulls all of our long-form documentation into a single document,\nnicknamed \"the book\" and formally titled \"The Rust Programming\nLanguage.\"\n\nA few things motivated this change:\n\n* People knew of The Guide, but not the individual Guides. This merges\n  them together, helping discoverability.\n* You can get all of Rust's longform documentation in one place, which\n  is nice.\n* We now have rustbook in-tree, which can generate this kind of\n  documentation. While its style is basic, the general idea is much\n  better: a table of contents on the left-hand side.\n* Rather than a almost 10,000-line guide.md, there are now smaller files\n  per section.", "tree": {"sha": "adede39989a0cf04520bfc90a0b54cefdbfd5e18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adede39989a0cf04520bfc90a0b54cefdbfd5e18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16a6ebd1f60871464c731306aa9007aab30f0dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16a6ebd1f60871464c731306aa9007aab30f0dbf", "html_url": "https://github.com/rust-lang/rust/commit/16a6ebd1f60871464c731306aa9007aab30f0dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16a6ebd1f60871464c731306aa9007aab30f0dbf/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f99a41fe1a27a48e96bc2616ec9faa6de924386", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f99a41fe1a27a48e96bc2616ec9faa6de924386", "html_url": "https://github.com/rust-lang/rust/commit/2f99a41fe1a27a48e96bc2616ec9faa6de924386"}], "stats": {"total": 11563, "additions": 5656, "deletions": 5907}, "files": [{"sha": "e858e91773b9288e6df572d205f419ac067963c1", "filename": "README.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -6,14 +6,14 @@ documentation.\n ## Quick Start\n \n 1. Download a [binary installer][installer] for your platform.\n-2. Read the [guide].\n+2. Read [The Rust Programming Language][trpl].\n 3. Enjoy!\n \n > ***Note:*** Windows users can read the detailed\n > [using Rust on Windows][win-wiki] notes on the wiki.\n \n [installer]: http://www.rust-lang.org/install.html\n-[guide]: http://doc.rust-lang.org/guide.html\n+[trpl]: http://doc.rust-lang.org/book/index.html\n [win-wiki]: https://github.com/rust-lang/rust/wiki/Using-Rust-on-Windows\n \n ## Building from Source\n@@ -53,7 +53,7 @@ documentation.\n     When complete, `make install` will place several programs into\n     `/usr/local/bin`: `rustc`, the Rust compiler, and `rustdoc`, the\n     API-documentation tool.\n-3. Read the [guide].\n+3. Read [The Rust Programming Language][trpl].\n 4. Enjoy!\n \n ### Building on Windows\n@@ -75,7 +75,7 @@ To easily build on windows we can use [MSYS2](http://sourceforge.net/projects/ms\n \n [repo]: https://github.com/rust-lang/rust\n [tarball]: https://static.rust-lang.org/dist/rust-nightly.tar.gz\n-[guide]: http://doc.rust-lang.org/guide.html\n+[trpl]: http://doc.rust-lang.org/book/index.html\n \n ## Notes\n "}, {"sha": "b75fde6fd3268fb8775264111f0c82c3b714d130", "filename": "RELEASES.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -19,8 +19,10 @@ Version 1.0.0-alpha (January 2015)\n       distribution into the Cargo ecosystem so they can evolve\n       separately and don't need to be stabilized as quickly, including\n       'time', 'getopts', 'num', 'regex', and 'term'.\n-    * Documentation continues to be expanded with more guides, more\n-      API coverage and more examples.\n+    * Documentation continues to be expanded with more API coverage, more\n+      examples, and more in-depth explanations. The guides have been\n+      consolidated into [The Rust Programming Language][trpl].\n+    * \"Rust By Example\" is now maintained by the Rust team.\n     * All official Rust binary installers now come with [Cargo], the\n       Rust package manager.\n \n@@ -179,6 +181,7 @@ Version 1.0.0-alpha (January 2015)\n [objsafe]: https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md\n [assoc]: https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\n [ints]: https://github.com/rust-lang/rfcs/pull/544#issuecomment-68760871\n+[trpl]: http://doc.rust-lang.org/book/index.html\n \n Version 0.12.0 (October 2014)\n -----------------------------"}, {"sha": "d0b99b12fd90d080b054bb9ffb0d32ca648363f2", "filename": "configure", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/configure", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -1055,18 +1055,6 @@ do\n     make_dir $h/test/debuginfo-gdb\n     make_dir $h/test/debuginfo-lldb\n     make_dir $h/test/codegen\n-    make_dir $h/test/doc-guide\n-    make_dir $h/test/doc-guide-ffi\n-    make_dir $h/test/doc-guide-runtime\n-    make_dir $h/test/doc-guide-macros\n-    make_dir $h/test/doc-guide-ownership\n-    make_dir $h/test/doc-guide-pointers\n-    make_dir $h/test/doc-guide-container\n-    make_dir $h/test/doc-guide-tasks\n-    make_dir $h/test/doc-guide-plugin\n-    make_dir $h/test/doc-guide-crates\n-    make_dir $h/test/doc-guide-error-handling\n-    make_dir $h/test/doc-reference\n done\n \n # Configure submodules"}, {"sha": "5b8772c4e0af5e9ee4bd6bd80a2274b3feeabc8c", "filename": "mk/crates.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -57,7 +57,7 @@ RUSTC_CRATES := rustc rustc_typeck rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_trans rustc_back rustc_llvm\n HOST_CRATES := syntax $(RUSTC_CRATES) rustdoc fmt_macros\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n-TOOLS := compiletest rustdoc rustc\n+TOOLS := compiletest rustdoc rustc rustbook\n \n DEPS_core :=\n DEPS_libc := core\n@@ -99,9 +99,11 @@ DEPS_fmt_macros = std\n TOOL_DEPS_compiletest := test getopts\n TOOL_DEPS_rustdoc := rustdoc\n TOOL_DEPS_rustc := rustc_driver\n+TOOL_DEPS_rustbook := std regex rustdoc\n TOOL_SOURCE_compiletest := $(S)src/compiletest/compiletest.rs\n TOOL_SOURCE_rustdoc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n+TOOL_SOURCE_rustbook := $(S)src/rustbook/main.rs\n \n ONLY_RLIB_core := 1\n ONLY_RLIB_libc := 1"}, {"sha": "a84977b382b60ad56339b64ee965f19a84b5d09e", "filename": "mk/docs.mk", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -9,7 +9,7 @@\n # except according to those terms.\n \n ######################################################################\n-# The various pieces of standalone documentation: guides, manual, etc\n+# The various pieces of standalone documentation.\n #\n # The DOCS variable is their names (with no file extension).\n #\n@@ -25,13 +25,11 @@\n # L10N_LANGS are the languages for which the docs have been\n # translated.\n ######################################################################\n-DOCS := index intro tutorial guide guide-ffi guide-macros guide-ownership \\\n-\tguide-tasks guide-container guide-pointers guide-testing \\\n-\tguide-plugin guide-crates complement-bugreport guide-error-handling \\\n-\tcomplement-lang-faq complement-design-faq complement-project-faq \\\n-    rustdoc guide-unsafe guide-strings reference\n+DOCS := index intro tutorial complement-bugreport \\\n+    complement-lang-faq complement-design-faq complement-project-faq \\\n+    rustdoc reference\n \n-PDF_DOCS := guide reference\n+PDF_DOCS := reference\n \n RUSTDOC_DEPS_reference := doc/full-toc.inc\n RUSTDOC_FLAGS_reference := --html-in-header=doc/full-toc.inc\n@@ -61,9 +59,15 @@ RUSTDOC_EXE = $(HBIN2_H_$(CFG_BUILD))/rustdoc$(X_$(CFG_BUILD))\n # ./configure\n RUSTDOC = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(RUSTDOC_EXE)\n \n+# The rustbook executable...\n+RUSTBOOK_EXE = $(HBIN2_H_$(CFG_BUILD))/rustbook$(X_$(CFG_BUILD))\n+# ...with rpath included in case --disable-rpath was provided to\n+# ./configure\n+RUSTBOOK = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(RUSTBOOK_EXE)\n+\n D := $(S)src/doc\n \n-DOC_TARGETS :=\n+DOC_TARGETS := trpl\n COMPILER_DOC_TARGETS :=\n DOC_L10N_TARGETS :=\n \n@@ -270,3 +274,10 @@ endif\n \n docs: $(DOC_TARGETS)\n compiler-docs: $(COMPILER_DOC_TARGETS)\n+\n+trpl: tmp/trpl.ok\n+\n+tmp/trpl.ok: $(RUSTBOOK_EXE) $(wildcard $(S)/src/doc/trpl/*.md)\n+\t$(Q)rm -rf doc/book\n+\t$(Q)$(RUSTBOOK) build $(S)src/doc/trpl doc/book\n+\t$(Q)touch $@"}, {"sha": "6a5daeb690941f98097570ce3676e24bc101a67c", "filename": "mk/prepare.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -70,7 +70,7 @@ define PREPARE_MAN\n \t$(Q)$(PREPARE_MAN_CMD) $(PREPARE_SOURCE_MAN_DIR)/$(1) $(PREPARE_DEST_MAN_DIR)/$(1)\n endef\n \n-PREPARE_TOOLS = $(filter-out compiletest, $(TOOLS))\n+PREPARE_TOOLS = $(filter-out compiletest rustbook, $(TOOLS))\n \n \n # $(1) is tool"}, {"sha": "97455e744d4bdbd7e851acb01ee3b24fd5bd4679", "filename": "mk/tests.mk", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -147,6 +147,17 @@ else\n CFG_ADB_TEST_DIR=\n endif\n \n+# $(1) - name of doc test\n+# $(2) - file of the test\n+define DOCTEST\n+DOC_NAMES := $$(DOC_NAMES) $(1)\n+DOCFILE_$(1) := $(2)\n+endef\n+\n+$(foreach doc,$(DOCS), \\\n+  $(eval $(call DOCTEST,md-$(doc),$(S)src/doc/$(doc).md)))\n+$(foreach file,$(wildcard $(S)src/doc/trpl/src/*), \\\n+  $(eval $(call DOCTEST,$(file:$(S)src/doc/trpl/src/%.md=trpl-%),$(file))))\n \n ######################################################################\n # Main test targets\n@@ -292,6 +303,7 @@ tidy:\n \t\t| grep '^$(S)src/rust-installer' -v \\\n \t\t| xargs $(CFG_PYTHON) $(S)src/etc/check-binaries.py\n \n+\n endif\n \n \n@@ -339,8 +351,8 @@ check-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec: \\\n            check-stage$(1)-T-$(2)-H-$(3)-doc-crate-$$(crate)-exec)\n \n check-stage$(1)-T-$(2)-H-$(3)-doc-exec: \\\n-        $$(foreach docname,$$(DOCS), \\\n-           check-stage$(1)-T-$(2)-H-$(3)-doc-$$(docname)-exec)\n+        $$(foreach docname,$$(DOC_NAMES), \\\n+           check-stage$(1)-T-$(2)-H-$(3)-doc-$$(docname)-exec) \\\n \n check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-exec \\\n@@ -795,17 +807,18 @@ check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3)\n # rustdoc etc.\n ifeq ($(NO_REBUILD),)\n DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n-\t$$(D)/$(4).md \\\n+\t$$(DOCFILE_$(4)) \\\n \t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n \t$$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n else\n-DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(D)/$(4).md\n+DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(DOCFILE_$(4))\n endif\n \n ifeq ($(2),$$(CFG_BUILD))\n $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): $$(DOCTESTDEP_$(1)_$(2)_$(3)_$(4))\n \t@$$(call E, run doc-$(4) [$(2)])\n-\t$$(Q)$$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --cfg dox --test $$< --test-args \"$$(TESTARGS)\" && touch $$@\n+\t$$(Q)$$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --cfg dox --test $$< \\\n+\t\t--test-args \"$$(TESTARGS)\" && touch $$@\n else\n $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)):\n \ttouch $$@\n@@ -815,7 +828,7 @@ endef\n $(foreach host,$(CFG_HOST), \\\n  $(foreach target,$(CFG_TARGET), \\\n   $(foreach stage,$(STAGES), \\\n-   $(foreach docname,$(DOCS), \\\n+   $(foreach docname,$(DOC_NAMES), \\\n     $(eval $(call DEF_DOC_TEST,$(stage),$(target),$(host),$(docname)))))))\n \n # Crates\n@@ -877,7 +890,7 @@ TEST_GROUPS = \\\n \tdebuginfo-lldb \\\n \tcodegen \\\n \tdoc \\\n-\t$(foreach docname,$(DOCS),doc-$(docname)) \\\n+\t$(foreach docname,$(DOC_NAMES),doc-$(docname)) \\\n \tpretty \\\n \tpretty-rpass \\\n     pretty-rpass-valgrind \\\n@@ -946,7 +959,7 @@ $(foreach stage,$(STAGES), \\\n    $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP,$(stage),$(host),$(group))))))\n \n define DEF_CHECK_DOC_FOR_STAGE\n-check-stage$(1)-docs: $$(foreach docname,$$(DOCS), \\\n+check-stage$(1)-docs: $$(foreach docname,$$(DOC_NAMES), \\\n                        check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-$$(docname)) \\\n                      $$(foreach crate,$$(TEST_DOC_CRATES), \\\n                        check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-crate-$$(crate))"}, {"sha": "e9bda17f4bc7d9956d5dadd65c8ccf0cb9fdc108", "filename": "src/doc/guide-container.md", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f99a41fe1a27a48e96bc2616ec9faa6de924386/src%2Fdoc%2Fguide-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f99a41fe1a27a48e96bc2616ec9faa6de924386/src%2Fdoc%2Fguide-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-container.md?ref=2f99a41fe1a27a48e96bc2616ec9faa6de924386", "patch": "@@ -1,6 +0,0 @@\n-% The Rust Containers and Iterators Guide\n-\n-This guide has been removed, with no direct replacement.\n-\n-You may enjoy reading the [iterator](std/iter/index.html) and\n-[collections](std/collections/index.html) documentation."}, {"sha": "43cc8483bcec54a6784ed71a6c0209b36711f29a", "filename": "src/doc/guide-strings.md", "status": "removed", "additions": 0, "deletions": 308, "changes": 308, "blob_url": "https://github.com/rust-lang/rust/blob/2f99a41fe1a27a48e96bc2616ec9faa6de924386/src%2Fdoc%2Fguide-strings.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f99a41fe1a27a48e96bc2616ec9faa6de924386/src%2Fdoc%2Fguide-strings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-strings.md?ref=2f99a41fe1a27a48e96bc2616ec9faa6de924386", "patch": "@@ -1,308 +0,0 @@\n-% The Guide to Rust Strings\n-\n-Strings are an important concept to master in any programming language. If you\n-come from a managed language background, you may be surprised at the complexity\n-of string handling in a systems programming language. Efficient access and\n-allocation of memory for a dynamically sized structure involves a lot of\n-details. Luckily, Rust has lots of tools to help us here.\n-\n-A **string** is a sequence of unicode scalar values encoded as a stream of\n-UTF-8 bytes. All strings are guaranteed to be validly-encoded UTF-8 sequences.\n-Additionally, strings are not null-terminated and can contain null bytes.\n-\n-Rust has two main types of strings: `&str` and `String`.\n-\n-# &str\n-\n-The first kind is a `&str`. This is pronounced a 'string slice'.\n-String literals are of the type `&str`:\n-\n-```{rust}\n-let string = \"Hello there.\";\n-```\n-\n-Like any Rust type, string slices have an associated lifetime. A string literal\n-is a `&'static str`.  A string slice can be written without an explicit\n-lifetime in many cases, such as in function arguments. In these cases the\n-lifetime will be inferred:\n-\n-```{rust}\n-fn takes_slice(slice: &str) {\n-    println!(\"Got: {}\", slice);\n-}\n-```\n-\n-Like vector slices, string slices are simply a pointer plus a length. This\n-means that they're a 'view' into an already-allocated string, such as a\n-`&'static str` or a `String`.\n-\n-# String\n-\n-A `String` is a heap-allocated string. This string is growable, and is also\n-guaranteed to be UTF-8.\n-\n-```{rust}\n-let mut s = \"Hello\".to_string();\n-println!(\"{}\", s);\n-\n-s.push_str(\", world.\");\n-println!(\"{}\", s);\n-```\n-\n-You can coerce a `String` into a `&str` with the `as_slice()` method:\n-\n-```{rust}\n-fn takes_slice(slice: &str) {\n-    println!(\"Got: {}\", slice);\n-}\n-\n-fn main() {\n-    let s = \"Hello\".to_string();\n-    takes_slice(s.as_slice());\n-}\n-```\n-\n-You can also get a `&str` from a stack-allocated array of bytes:\n-\n-```{rust}\n-use std::str;\n-\n-let x: &[u8] = &[b'a', b'b'];\n-let stack_str: &str = str::from_utf8(x).unwrap();\n-```\n-\n-# Best Practices\n-\n-## `String` vs. `&str`\n-\n-In general, you should prefer `String` when you need ownership, and `&str` when\n-you just need to borrow a string. This is very similar to using `Vec<T>` vs. `&[T]`,\n-and `T` vs `&T` in general.\n-\n-This means starting off with this:\n-\n-```{rust,ignore}\n-fn foo(s: &str) {\n-```\n-\n-and only moving to this:\n-\n-```{rust,ignore}\n-fn foo(s: String) {\n-```\n-\n-If you have good reason. It's not polite to hold on to ownership you don't\n-need, and it can make your lifetimes more complex.\n-\n-## Generic functions\n-\n-To write a function that's generic over types of strings, use `&str`.\n-\n-```{rust}\n-fn some_string_length(x: &str) -> uint {\n-        x.len()\n-}\n-\n-fn main() {\n-    let s = \"Hello, world\";\n-\n-    println!(\"{}\", some_string_length(s));\n-\n-    let s = \"Hello, world\".to_string();\n-\n-    println!(\"{}\", some_string_length(s.as_slice()));\n-}\n-```\n-\n-Both of these lines will print `12`. \n-\n-## Comparisons\n-\n-To compare a String to a constant string, prefer `as_slice()`...\n-\n-```{rust}\n-fn compare(x: String) {\n-    if x.as_slice() == \"Hello\" {\n-        println!(\"yes\");\n-    }\n-}\n-```\n-\n-... over `to_string()`:\n-\n-```{rust}\n-fn compare(x: String) {\n-    if x == \"Hello\".to_string() {\n-        println!(\"yes\");\n-    }\n-}\n-```\n-\n-Converting a `String` to a `&str` is cheap, but converting the `&str` to a\n-`String` involves an allocation.\n-\n-## Indexing strings\n-\n-You may be tempted to try to access a certain character of a `String`, like\n-this:\n-\n-```{rust,ignore}\n-let s = \"hello\".to_string();\n-\n-println!(\"{}\", s[0]);\n-```\n-\n-This does not compile. This is on purpose. In the world of UTF-8, direct\n-indexing is basically never what you want to do. The reason is that each\n-character can be a variable number of bytes. This means that you have to iterate\n-through the characters anyway, which is an O(n) operation.\n-\n-There's 3 basic levels of unicode (and its encodings):\n-\n-- code units, the underlying data type used to store everything\n-- code points/unicode scalar values (char)\n-- graphemes (visible characters)\n-\n-Rust provides iterators for each of these situations:\n-\n-- `.bytes()` will iterate over the underlying bytes\n-- `.chars()` will iterate over the code points\n-- `.graphemes()` will iterate over each grapheme\n-\n-Usually, the `graphemes()` method on `&str` is what you want:\n-\n-```{rust}\n-let s = \"u\u0354n\u030e\u0348\u0330i\u0319\u032e\u035a\u0326c\u0309\u035ao\u0357\u033c\u0329\u0330d\u0306\u0343\u0365\u0354e\u0301\";\n-\n-for l in s.graphemes(true) {\n-    println!(\"{}\", l);\n-}\n-```\n-\n-This prints:\n-\n-```{text}\n-u\u0354\n-n\u030e\u0348\u0330\n-i\u0319\u032e\u035a\u0326\n-c\u0309\u035a\n-o\u0357\u033c\u0329\u0330\n-d\u0306\u0343\u0365\u0354\n-e\u0301\n-```\n-\n-Note that `l` has the type `&str` here, since a single grapheme can consist of\n-multiple codepoints, so a `char` wouldn't be appropriate.\n-\n-This will print out each visible character in turn, as you'd expect: first \"u\u0354\", then\n-\"n\u030e\u0348\u0330\", etc. If you wanted each individual codepoint of each grapheme, you can use `.chars()`:\n-\n-```{rust}\n-let s = \"u\u0354n\u030e\u0348\u0330i\u0319\u032e\u035a\u0326c\u0309\u035ao\u0357\u033c\u0329\u0330d\u0306\u0343\u0365\u0354e\u0301\";\n-\n-for l in s.chars() {\n-    println!(\"{}\", l);\n-}\n-```\n-\n-This prints:\n-\n-```{text}\n-u\n-\u0354\n-n\n-\u030e\n-\u0348\n-\u0330\n-i\n-\u0319\n-\u032e\n-\u035a\n-\u0326\n-c\n-\u0309\n-\u035a\n-o\n-\u0357\n-\u033c\n-\u0329\n-\u0330\n-d\n-\u0306\n-\u0343\n-\u0365\n-\u0354\n-e\n-\u0301\n-```\n-\n-You can see how some of them are combining characters, and therefore the output\n-looks a bit odd.\n-\n-If you want the individual byte representation of each codepoint, you can use\n-`.bytes()`:\n-\n-```{rust}\n-let s = \"u\u0354n\u030e\u0348\u0330i\u0319\u032e\u035a\u0326c\u0309\u035ao\u0357\u033c\u0329\u0330d\u0306\u0343\u0365\u0354e\u0301\";\n-\n-for l in s.bytes() {\n-    println!(\"{}\", l);\n-}\n-```\n-\n-This will print:\n-\n-```{text}\n-117\n-205\n-148\n-110\n-204\n-142\n-205\n-136\n-204\n-176\n-105\n-204\n-153\n-204\n-174\n-205\n-154\n-204\n-166\n-99\n-204\n-137\n-205\n-154\n-111\n-205\n-151\n-204\n-188\n-204\n-169\n-204\n-176\n-100\n-204\n-134\n-205\n-131\n-205\n-165\n-205\n-148\n-101\n-204\n-129\n-```\n-\n-Many more bytes than graphemes!\n-\n-# Other Documentation\n-\n-* [the `&str` API documentation](std/str/index.html)\n-* [the `String` API documentation](std/string/index.html)"}, {"sha": "5ab3063033fc2123a26bbde921c9e41ba826f0e1", "filename": "src/doc/guide.md", "status": "removed", "additions": 0, "deletions": 5520, "changes": 5520, "blob_url": "https://github.com/rust-lang/rust/blob/2f99a41fe1a27a48e96bc2616ec9faa6de924386/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f99a41fe1a27a48e96bc2616ec9faa6de924386/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=2f99a41fe1a27a48e96bc2616ec9faa6de924386"}, {"sha": "25dcc10d893639b598ba57a3313a67a2b3ae5793", "filename": "src/doc/index.md", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -9,10 +9,11 @@ If you haven't seen Rust at all yet, the first thing you should read is the [30\n minute intro](intro.html). It will give you an overview of the basic ideas of Rust\n at a high level.\n \n-Once you know you really want to learn Rust, the next step is reading [the\n-guide](guide.html). It is a lengthy explanation of Rust, its syntax, and its\n-concepts. Upon completing the guide, you'll be an intermediate Rust developer,\n-and will have a good grasp of the fundamental ideas behind Rust.\n+Once you know you really want to learn Rust, the next step is reading [The\n+Rust Programming Language](book/index.html). It is a lengthy explanation of\n+Rust, its syntax, and its concepts. Upon completing the book, you'll be an\n+intermediate Rust developer, and will have a good grasp of the fundamental\n+ideas behind Rust.\n \n # Community & Getting Help\n \n@@ -48,24 +49,6 @@ development of Rust itself is discussed.\n Rust does not have an exact specification, but an effort to describe as much of\n the language in as much detail as possible is in [the reference](reference.html).\n \n-# Guides\n-\n-Rust Guides are in-depth looks at a particular topic that's relevant to Rust\n-development. If you're trying to figure out how to do something, there may be\n-a guide that can help you out:\n-\n-* [Ownership](guide-ownership.html)\n-* [Strings](guide-strings.html)\n-* [Pointers](guide-pointers.html)\n-* [Crates and modules](guide-crates.html)\n-* [Threads and Communication](guide-tasks.html)\n-* [Error Handling](guide-error-handling.html)\n-* [Foreign Function Interface](guide-ffi.html)\n-* [Writing Unsafe and Low-Level Code](guide-unsafe.html)\n-* [Macros](guide-macros.html)\n-* [Testing](guide-testing.html)\n-* [Compiler Plugins](guide-plugin.html)\n-\n # Tools\n \n Rust's still a young language, so there isn't a ton of tooling yet, but the"}, {"sha": "cb28586d103ec29dd6ea2be6ab28c0b56334e0a6", "filename": "src/doc/intro.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -7,8 +7,8 @@ This introduction will give you a rough idea of what Rust is like, eliding many\n details. It does not require prior experience with systems programming, but you\n may find the syntax easier if you've used a 'curly brace' programming language\n before, like C or JavaScript. The concepts are more important than the syntax,\n-so don't worry if you don't get every last detail: you can read [the\n-Guide](guide.html) to get a more complete explanation.\n+so don't worry if you don't get every last detail: you can read [The\n+Rust Programming Language](book/index.html) to get a more complete explanation.\n \n Because this is about high-level concepts, you don't need to actually install\n Rust to follow along. If you'd like to anyway, check out [the\n@@ -587,5 +587,6 @@ the type system helps you find bugs, how Rust can help you write correct\n concurrent code, and how you don't have to pay a speed cost for much of this\n safety.\n \n-To continue your Rustic education, read [the guide](guide.html) for a more\n-in-depth exploration of Rust's syntax and concepts.\n+To continue your Rustic education, read [The Rust Programming\n+Language](book/index.html) for a more in-depth exploration of Rust's syntax and\n+concepts."}, {"sha": "2486466c8696d464d36cddefcd3a16db2b0d9950", "filename": "src/doc/reference.md", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -14,7 +14,7 @@ provides three kinds of material:\n     influenced the design.\n \n This document does not serve as an introduction to the language. Background\n-familiarity with the language is assumed. A separate [guide] is available to\n+familiarity with the language is assumed. A separate [book] is available to\n help acquire such background familiarity.\n \n This document also does not serve as a reference to the [standard] library\n@@ -23,7 +23,7 @@ separately by extracting documentation attributes from their source code. Many\n of the features that one might expect to be language features are library\n features in Rust, so what you're looking for may be there, not here.\n \n-[guide]: guide.html\n+[book]: book/index.html\n [standard]: std/index.html\n \n # Notation\n@@ -647,10 +647,10 @@ All of the above extensions are expressions with values.\n \n Users of `rustc` can define new syntax extensions in two ways:\n \n-* [Compiler plugins](guide-plugin.html#syntax-extensions) can include arbitrary\n+* [Compiler plugins](book/syntax-extensions.html) can include arbitrary\n   Rust code that manipulates syntax trees at compile time.\n \n-* [Macros](guide-macros.html) define new syntax in a higher-level,\n+* [Macros](book/macros.html) define new syntax in a higher-level,\n   declarative way.\n \n ## Macros\n@@ -2076,7 +2076,7 @@ On `struct`s:\n   list of names `#[macro_use(foo, bar)]` restricts the import to just those\n   macros named.  The `extern crate` must appear at the crate root, not inside\n   `mod`, which ensures proper function of the [`$crate` macro\n-  variable](guide-macros.html#the-variable-$crate).\n+  variable](book/macros.html#the-variable-$crate).\n \n - `macro_reexport` on an `extern crate` \u2014 re-export the named macros.\n \n@@ -2090,8 +2090,9 @@ On `struct`s:\n - `no_link` on an `extern crate` \u2014 even if we load this crate for macros or\n   compiler plugins, don't link it into the output.\n \n-See the [macros guide](guide-macros.html#scoping-and-macro-import/export) for\n-more information on macro scope.\n+See the [macros section of the\n+book](book/macros.html#scoping-and-macro-import/export) for more information on\n+macro scope.\n \n \n ### Miscellaneous attributes\n@@ -2193,7 +2194,7 @@ For any lint check `C`:\n \n The lint checks supported by the compiler can be found via `rustc -W help`,\n along with their default settings.  [Compiler\n-plugins](guide-plugin.html#lint-plugins) can provide additional lint checks.\n+plugins](book/plugin.html#lint-plugins) can provide additional lint checks.\n \n ```{.ignore}\n mod m1 {\n@@ -4227,7 +4228,7 @@ communication facilities.\n The Rust compiler supports various methods to link crates together both\n statically and dynamically. This section will explore the various methods to\n link Rust crates together, and more information about native libraries can be\n-found in the [ffi guide][ffi].\n+found in the [ffi section of the book][ffi].\n \n In one session of compilation, the compiler can generate multiple artifacts\n through the usage of either command line flags or the `crate_type` attribute.\n@@ -4359,5 +4360,5 @@ that have since been removed):\n * [Unicode Annex #31](http://www.unicode.org/reports/tr31/): identifier and\n   pattern syntax\n \n-[ffi]: guide-ffi.html\n-[plugin]: guide-plugin.html\n+[ffi]: book/ffi.html\n+[plugin]: book/plugin.html"}, {"sha": "0202e873b36449464524e4a0ad10f9c1dc2d293e", "filename": "src/doc/trpl/README.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FREADME.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,35 @@\n+% The Rust Programming Language\n+\n+Welcome! This book will teach you about [the Rust Programming\n+Language](http://www.rust-lang.org/). Rust is a modern systems programming\n+language focusing on safety and speed. It accomplishes these goals by being\n+memory safe without using garbage collection.\n+\n+\"The Rust Programming Language\" is split into three sections, which you can\n+navigate through the menu on the left.\n+\n+## Basics\n+\n+This section is a linear introduction to the basic syntax and semantics of\n+Rust. It has individual sections on each part of Rust's syntax, and cumulates\n+in a small project: a guessing game.\n+\n+After reading \"Basics,\" you will have a good foundation to learn more about\n+Rust, and can write very simple programs.\n+\n+## Intermediate\n+\n+This section contains individual chapters, which are self-contained. They focus\n+on specific topics, and can be read in any order.\n+\n+After reading \"Intermediate,\" you will have a solid understanding of Rust,\n+and will be able to understand most Rust code and write more complex programs.\n+\n+## Advanced\n+\n+In a similar fashion to \"Intermediate,\" this setion is full of individual,\n+deep-dive chapters, which stand alone and can be read in any order. These\n+chapters focus on the most complex features, as well as some things that\n+are only available in upcoming versions of Rust.\n+\n+After reading \"Advanced,\" you'll be a Rust expert!"}, {"sha": "0f1bce389df9abfe44b09cf55acfd4a3624313d0", "filename": "src/doc/trpl/SUMMARY.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,35 @@\n+# Summary\n+\n+* [I: The Basics](src/basic.md)\n+    * [Installing Rust](src/installing-rust.md)\n+    * [Hello, world!](src/hello-world.md)\n+    * [Hello, Cargo!](src/hello-cargo.md)\n+    * [Variable Bindings](src/variable-bindings.md)\n+    * [If](src/if.md)\n+    * [Functions](src/functions.md)\n+    * [Comments](src/comments.md)\n+    * [Compound Data Types](src/compound-data-types.md)\n+    * [Match](src/match.md)\n+    * [Looping](src/looping.md)\n+    * [Strings](src/strings.md)\n+    * [Arrays, Vectors, and Slices](src/arrays-vectors-and-slices.md)\n+    * [Standard Input](src/standard-input.md)\n+    * [Guessing Game](src/guessing-game.md)\n+* [II: Intermedite Rust](src/intermediate.md)\n+    * [Crates and Modules](src/crates-and-modules.md)\n+    * [Testing](src/testing.md)\n+    * [Pointers](src/pointers.md)\n+    * [Patterns](src/patterns.md)\n+    * [Method Syntax](src/method-syntax.md)\n+    * [Closures](src/closures.md)\n+    * [Iterators](src/iterators.md)\n+    * [Generics](src/generics.md)\n+    * [Traits](src/traits.md)\n+    * [Tasks](src/tasks.md)\n+    * [Error Handling](src/error-handling.md)\n+* [III: Advanced Topics](src/advanced.md)\n+    * [FFI](src/ffi.md)\n+    * [Unsafe Code](src/unsafe.md)\n+    * [Macros](src/macros.md)\n+    * [Compiler Plugins](src/plugins.md)\n+* [Conclusion](src/conclusion.md)"}, {"sha": "3d08de40f55aaecdfa3135b647c3971e4c126057", "filename": "src/doc/trpl/rust-book.css", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Frust-book.css", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Frust-book.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Frust-book.css?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,59 @@\n+\n+@import url(\"//static.rust-lang.org/doc/master/rust.css\");\n+\n+body {\n+    max-width:none;\n+}\n+\n+#toc {\n+    position: absolute;\n+    left: 0px;\n+    top: 0px;\n+    bottom: 0px;\n+    width: 250px;\n+    overflow-y: auto;\n+    border-right: 1px solid rgba(0, 0, 0, 0.07);\n+    padding: 10px 10px;\n+    font-size: 16px;\n+    background: none repeat scroll 0% 0% #FFF;\n+    box-sizing: border-box;\n+}\n+\n+#page-wrapper {\n+    position: absolute;\n+    overflow-y: auto;\n+    left: 260px;\n+    right: 0px;\n+    top: 0px;\n+    bottom: 0px;\n+    box-sizing: border-box;\n+    background: none repeat scroll 0% 0% #FFF;\n+}\n+\n+#page {\n+    margin-left: auto;\n+    margin-right:auto;\n+    width: 750px;\n+}\n+\n+.chapter {\n+    list-style: none outside none;\n+    padding-left: 0px;\n+    line-height: 30px;\n+}\n+\n+.section {\n+    list-style: none outside none;\n+    padding-left: 20px;\n+    line-height: 30px;\n+}\n+\n+.section li {\n+    text-overflow: ellipsis;\n+    overflow: hidden;\n+    white-space: nowrap;\n+}\n+\n+.chapter li a {\n+    color: #000000;\n+}"}, {"sha": "138db523b9a21ff6cb030672a72319f1698ac82b", "filename": "src/doc/trpl/src/advanced.md", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fadvanced.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fadvanced.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fadvanced.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,8 @@\n+% Advanced\n+\n+In a similar fashion to \"Intermediate,\" this setion is full of individual,\n+deep-dive chapters, which stand alone and can be read in any order. These\n+chapters focus on the most complex features, as well as some things that\n+are only available in upcoming versions of Rust.\n+\n+After reading \"Advanced,\" you'll be a Rust expert!"}, {"sha": "68fc73222fd2b64df609360511f6b78823a1e4b5", "filename": "src/doc/trpl/src/arrays-vectors-and-slices.md", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Farrays-vectors-and-slices.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Farrays-vectors-and-slices.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Farrays-vectors-and-slices.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,99 @@\n+# Arrays, Vectors, and Slices\n+\n+Like many programming languages, Rust has list types to represent a sequence of\n+things. The most basic is the **array**, a fixed-size list of elements of the\n+same type. By default, arrays are immutable.\n+\n+```{rust}\n+let a = [1, 2, 3];     // a: [i32; 3]\n+let mut m = [1, 2, 3]; // mut m: [i32; 3]\n+```\n+\n+There's a shorthand for initializing each element of an array to the same\n+value. In this example, each element of `a` will be initialized to `0`:\n+\n+```{rust}\n+let a = [0; 20]; // a: [i32; 20]\n+```\n+\n+Arrays have type `[T; N]`. We'll talk about this `T` notation later, when we\n+cover generics.\n+\n+You can get the number of elements in an array `a` with `a.len()`, and use\n+`a.iter()` to iterate over them with a for loop. This code will print each\n+number in order:\n+\n+```{rust}\n+let a = [1, 2, 3];\n+\n+println!(\"a has {} elements\", a.len());\n+for e in a.iter() {\n+    println!(\"{}\", e);\n+}\n+```\n+\n+You can access a particular element of an array with **subscript notation**:\n+\n+```{rust}\n+let names = [\"Graydon\", \"Brian\", \"Niko\"]; // names: [&str; 3]\n+\n+println!(\"The second name is: {}\", names[1]);\n+```\n+\n+Subscripts start at zero, like in most programming languages, so the first name\n+is `names[0]` and the second name is `names[1]`. The above example prints\n+`The second name is: Brian`. If you try to use a subscript that is not in the\n+array, you will get an error: array access is bounds-checked at run-time. Such\n+errant access is the source of many bugs in other systems programming\n+languages.\n+\n+A **vector** is a dynamic or \"growable\" array, implemented as the standard\n+library type [`Vec<T>`](std/vec/) (we'll talk about what the `<T>` means\n+later). Vectors are to arrays what `String` is to `&str`. You can create them\n+with the `vec!` macro:\n+\n+```{rust}\n+let v = vec![1, 2, 3]; // v: Vec<i32>\n+```\n+\n+(Notice that unlike the `println!` macro we've used in the past, we use square\n+brackets `[]` with `vec!`. Rust allows you to use either in either situation,\n+this is just convention.)\n+\n+You can get the length of, iterate over, and subscript vectors just like\n+arrays. In addition, (mutable) vectors can grow automatically:\n+\n+```{rust}\n+let mut nums = vec![1, 2, 3]; // mut nums: Vec<i32>\n+\n+nums.push(4);\n+\n+println!(\"The length of nums is now {}\", nums.len());   // Prints 4\n+```\n+\n+Vectors have many more useful methods.\n+\n+A **slice** is a reference to (or \"view\" into) an array. They are useful for\n+allowing safe, efficient access to a portion of an array without copying. For\n+example, you might want to reference just one line of a file read into memory.\n+By nature, a slice is not created directly, but from an existing variable.\n+Slices have a length, can be mutable or not, and in many ways behave like\n+arrays:\n+\n+```{rust}\n+let a = [0, 1, 2, 3, 4];\n+let middle = a.slice(1, 4);     // A slice of a: just the elements [1,2,3]\n+\n+for e in middle.iter() {\n+    println!(\"{}\", e);          // Prints 1, 2, 3\n+}\n+```\n+\n+You can also take a slice of a vector, `String`, or `&str`, because they are\n+backed by arrays. Slices have type `&[T]`, which we'll talk about when we cover\n+generics.\n+\n+We have now learned all of the most basic Rust concepts. We're ready to start\n+building our guessing game, we just need to know one last thing: how to get\n+input from the keyboard. You can't have a guessing game without the ability to\n+guess!"}, {"sha": "087121d0e7dc3d30e35240165ff9090bd7fcd452", "filename": "src/doc/trpl/src/basic.md", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fbasic.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fbasic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fbasic.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,8 @@\n+% Basics\n+\n+This section is a linear introduction to the basic syntax and semantics of\n+Rust. It has individual sections on each part of Rust's syntax, and cumulates\n+in a small project: a guessing game.\n+\n+After reading \"Basics,\" you will have a good foundation to learn more about\n+Rust, and can write very simple programs."}, {"sha": "79ae28e1b911fc2ac76b6b8bc749963a640e1509", "filename": "src/doc/trpl/src/closures.md", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fclosures.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,185 @@\n+# Closures\n+\n+So far, we've made lots of functions in Rust, but we've given them all names.\n+Rust also allows us to create anonymous functions. Rust's anonymous\n+functions are called **closure**s. By themselves, closures aren't all that\n+interesting, but when you combine them with functions that take closures as\n+arguments, really powerful things are possible.\n+\n+Let's make a closure:\n+\n+```{rust}\n+let add_one = |&: x| { 1 + x };\n+\n+println!(\"The sum of 5 plus 1 is {}.\", add_one(5));\n+```\n+\n+We create a closure using the `|...| { ... }` syntax, and then we create a\n+binding so we can use it later. Note that we call the function using the\n+binding name and two parentheses, just like we would for a named function.\n+\n+Let's compare syntax. The two are pretty close:\n+\n+```{rust}\n+let add_one = |&: x: i32| -> i32 { 1 + x };\n+fn  add_one      (x: i32) -> i32 { 1 + x }\n+```\n+\n+As you may have noticed, closures infer their argument and return types, so you\n+don't need to declare one. This is different from named functions, which\n+default to returning unit (`()`).\n+\n+There's one big difference between a closure and named functions, and it's in\n+the name: a closure \"closes over its environment.\" What does that mean? It means\n+this:\n+\n+```{rust}\n+fn main() {\n+    let x: i32 = 5;\n+\n+    let printer = |&:| { println!(\"x is: {}\", x); };\n+\n+    printer(); // prints \"x is: 5\"\n+}\n+```\n+\n+The `||` syntax means this is an anonymous closure that takes no arguments.\n+Without it, we'd just have a block of code in `{}`s.\n+\n+In other words, a closure has access to variables in the scope where it's\n+defined. The closure borrows any variables it uses, so this will error:\n+\n+```{rust,ignore}\n+fn main() {\n+    let mut x = 5;\n+\n+    let printer = |&:| { println!(\"x is: {}\", x); };\n+\n+    x = 6; // error: cannot assign to `x` because it is borrowed\n+}\n+```\n+\n+## Moving closures\n+\n+Rust has a second type of closure, called a **moving closure**. Moving\n+closures are indicated using the `move` keyword (e.g., `move || x *\n+x`). The difference between a moving closure and an ordinary closure\n+is that a moving closure always takes ownership of all variables that\n+it uses. Ordinary closures, in contrast, just create a reference into\n+the enclosing stack frame. Moving closures are most useful with Rust's\n+concurrency features, and so we'll just leave it at this for\n+now. We'll talk about them more in the \"Threads\" section of the guide.\n+\n+## Accepting closures as arguments\n+\n+Closures are most useful as an argument to another function. Here's an example:\n+\n+```{rust}\n+fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {\n+    f(x) + f(x)\n+}\n+\n+fn main() {\n+    let square = |&: x: i32| { x * x };\n+\n+    twice(5, square); // evaluates to 50\n+}\n+```\n+\n+Let's break the example down, starting with `main`:\n+\n+```{rust}\n+let square = |&: x: i32| { x * x };\n+```\n+\n+We've seen this before. We make a closure that takes an integer, and returns\n+its square.\n+\n+```{rust}\n+# fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 { f(x) + f(x) }\n+# let square = |&: x: i32| { x * x };\n+twice(5, square); // evaluates to 50\n+```\n+\n+This line is more interesting. Here, we call our function, `twice`, and we pass\n+it two arguments: an integer, `5`, and our closure, `square`. This is just like\n+passing any other two variable bindings to a function, but if you've never\n+worked with closures before, it can seem a little complex. Just think: \"I'm\n+passing two variables: one is an i32, and one is a function.\"\n+\n+Next, let's look at how `twice` is defined:\n+\n+```{rust,ignore}\n+fn twice(x: i32, f: |i32| -> i32) -> i32 {\n+```\n+\n+`twice` takes two arguments, `x` and `f`. That's why we called it with two\n+arguments. `x` is an `i32`, we've done that a ton of times. `f` is a function,\n+though, and that function takes an `i32` and returns an `i32`. Notice\n+how the `|i32| -> i32` syntax looks a lot like our definition of `square`\n+above, if we added the return type in:\n+\n+```{rust}\n+let square = |&: x: i32| -> i32 { x * x };\n+//           |i32|       -> i32\n+```\n+\n+This function takes an `i32` and returns an `i32`.\n+\n+This is the most complicated function signature we've seen yet! Give it a read\n+a few times until you can see how it works. It takes a teeny bit of practice, and\n+then it's easy.\n+\n+Finally, `twice` returns an `i32` as well.\n+\n+Okay, let's look at the body of `twice`:\n+\n+```{rust}\n+fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {\n+  f(x) + f(x)\n+}\n+```\n+\n+Since our closure is named `f`, we can call it just like we called our closures\n+before, and we pass in our `x` argument to each one, hence the name `twice`.\n+\n+If you do the math, `(5 * 5) + (5 * 5) == 50`, so that's the output we get.\n+\n+Play around with this concept until you're comfortable with it. Rust's standard\n+library uses lots of closures where appropriate, so you'll be using\n+this technique a lot.\n+\n+If we didn't want to give `square` a name, we could just define it inline.\n+This example is the same as the previous one:\n+\n+```{rust}\n+fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {\n+    f(x) + f(x)\n+}\n+\n+fn main() {\n+    twice(5, |x: i32| { x * x }); // evaluates to 50\n+}\n+```\n+\n+A named function's name can be used wherever you'd use a closure. Another\n+way of writing the previous example:\n+\n+```{rust}\n+fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {\n+    f(x) + f(x)\n+}\n+\n+fn square(x: i32) -> i32 { x * x }\n+\n+fn main() {\n+    twice(5, square); // evaluates to 50\n+}\n+```\n+\n+Doing this is not particularly common, but it's useful every once in a while.\n+\n+That's all you need to get the hang of closures! Closures are a little bit\n+strange at first, but once you're used to them, you'll miss them\n+in other languages. Passing functions to other functions is\n+incredibly powerful, as you will see in the following chapter about iterators."}, {"sha": "cce6eacea040884670584e68530f1022a2fb0225", "filename": "src/doc/trpl/src/comments.md", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fcomments.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fcomments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fcomments.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,46 @@\n+# Comments\n+\n+Now that we have some functions, it's a good idea to learn about comments.\n+Comments are notes that you leave to other programmers to help explain things\n+about your code. The compiler mostly ignores them.\n+\n+Rust has two kinds of comments that you should care about: **line comment**s\n+and **doc comment**s.\n+\n+```{rust}\n+// Line comments are anything after '//' and extend to the end of the line.\n+\n+let x = 5; // this is also a line comment.\n+\n+// If you have a long explanation for something, you can put line comments next\n+// to each other. Put a space between the // and your comment so that it's\n+// more readable.\n+```\n+\n+The other kind of comment is a doc comment. Doc comments use `///` instead of\n+`//`, and support Markdown notation inside:\n+\n+```{rust}\n+/// `hello` is a function that prints a greeting that is personalized based on\n+/// the name given.\n+///\n+/// # Arguments\n+///\n+/// * `name` - The name of the person you'd like to greet.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// let name = \"Steve\";\n+/// hello(name); // prints \"Hello, Steve!\"\n+/// ```\n+fn hello(name: &str) {\n+    println!(\"Hello, {}!\", name);\n+}\n+```\n+\n+When writing doc comments, adding sections for any arguments, return values,\n+and providing some examples of usage is very, very helpful.\n+\n+You can use the [`rustdoc`](rustdoc.html) tool to generate HTML documentation\n+from these doc comments."}, {"sha": "b9bb50973615c4b7019404e8933b57167ea505c8", "filename": "src/doc/trpl/src/compound-data-types.md", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fcompound-data-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fcompound-data-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fcompound-data-types.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,353 @@\n+# Compound Data Types\n+\n+Rust, like many programming languages, has a number of different data types\n+that are built-in. You've already done some simple work with integers and\n+strings, but next, let's talk about some more complicated ways of storing data.\n+\n+## Tuples\n+\n+The first compound data type we're going to talk about are called **tuple**s.\n+Tuples are an ordered list of a fixed size. Like this:\n+\n+```rust\n+let x = (1, \"hello\");\n+```\n+\n+The parentheses and commas form this two-length tuple. Here's the same code, but\n+with the type annotated:\n+\n+```rust\n+let x: (i32, &str) = (1, \"hello\");\n+```\n+\n+As you can see, the type of a tuple looks just like the tuple, but with each\n+position having a type name rather than the value. Careful readers will also\n+note that tuples are heterogeneous: we have an `i32` and a `&str` in this tuple.\n+You haven't seen `&str` as a type before, and we'll discuss the details of\n+strings later. In systems programming languages, strings are a bit more complex\n+than in other languages. For now, just read `&str` as \"a string slice,\" and\n+we'll learn more soon.\n+\n+You can access the fields in a tuple through a **destructuring let**. Here's\n+an example:\n+\n+```rust\n+let (x, y, z) = (1, 2, 3);\n+\n+println!(\"x is {}\", x);\n+```\n+\n+Remember before when I said the left-hand side of a `let` statement was more\n+powerful than just assigning a binding? Here we are. We can put a pattern on\n+the left-hand side of the `let`, and if it matches up to the right-hand side,\n+we can assign multiple bindings at once. In this case, `let` 'destructures,'\n+or 'breaks up,' the tuple, and assigns the bits to three bindings.\n+\n+This pattern is very powerful, and we'll see it repeated more later.\n+\n+There are also a few things you can do with a tuple as a whole, without\n+destructuring. You can assign one tuple into another, if they have the same\n+arity and contained types.\n+\n+```rust\n+let mut x = (1, 2); // x: (i32, i32)\n+let y = (2, 3);     // y: (i32, i32)\n+\n+x = y;\n+```\n+\n+You can also check for equality with `==`. Again, this will only compile if the\n+tuples have the same type.\n+\n+```rust\n+let x = (1, 2, 3);\n+let y = (2, 2, 4);\n+\n+if x == y {\n+    println!(\"yes\");\n+} else {\n+    println!(\"no\");\n+}\n+```\n+\n+This will print `no`, because some of the values aren't equal.\n+\n+One other use of tuples is to return multiple values from a function:\n+\n+```rust\n+fn next_two(x: i32) -> (i32, i32) { (x + 1, x + 2) }\n+\n+fn main() {\n+    let (x, y) = next_two(5);\n+    println!(\"x, y = {}, {}\", x, y);\n+}\n+```\n+\n+Even though Rust functions can only return one value, a tuple _is_ one value,\n+that happens to be made up of more than one value. You can also see in this example how you\n+can destructure a pattern returned by a function, as well.\n+\n+Tuples are a very simple data structure, and so are not often what you want.\n+Let's move on to their bigger sibling, structs.\n+\n+## Structs\n+\n+A struct is another form of a 'record type,' just like a tuple. There's a\n+difference: structs give each element that they contain a name, called a\n+'field' or a 'member.' Check it out:\n+\n+```rust\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let origin = Point { x: 0, y: 0 }; // origin: Point\n+\n+    println!(\"The origin is at ({}, {})\", origin.x, origin.y);\n+}\n+```\n+\n+There's a lot going on here, so let's break it down. We declare a struct with\n+the `struct` keyword, and then with a name. By convention, structs begin with a\n+capital letter and are also camel cased: `PointInSpace`, not `Point_In_Space`.\n+\n+We can create an instance of our struct via `let`, as usual, but we use a `key:\n+value` style syntax to set each field. The order doesn't need to be the same as\n+in the original declaration.\n+\n+Finally, because fields have names, we can access the field through dot\n+notation: `origin.x`.\n+\n+The values in structs are immutable by default, like other bindings in Rust.\n+Use `mut` to make them mutable:\n+\n+```{rust}\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let mut point = Point { x: 0, y: 0 };\n+\n+    point.x = 5;\n+\n+    println!(\"The point is at ({}, {})\", point.x, point.y);\n+}\n+```\n+\n+This will print `The point is at (5, 0)`.\n+\n+## Tuple Structs and Newtypes\n+\n+Rust has another data type that's like a hybrid between a tuple and a struct,\n+called a **tuple struct**. Tuple structs do have a name, but their fields\n+don't:\n+\n+\n+```{rust}\n+struct Color(i32, i32, i32);\n+struct Point(i32, i32, i32);\n+```\n+\n+These two will not be equal, even if they have the same values:\n+\n+```{rust}\n+# struct Color(i32, i32, i32);\n+# struct Point(i32, i32, i32);\n+let black  = Color(0, 0, 0);\n+let origin = Point(0, 0, 0);\n+```\n+\n+It is almost always better to use a struct than a tuple struct. We would write\n+`Color` and `Point` like this instead:\n+\n+```{rust}\n+struct Color {\n+    red: i32,\n+    blue: i32,\n+    green: i32,\n+}\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+    z: i32,\n+}\n+```\n+\n+Now, we have actual names, rather than positions. Good names are important,\n+and with a struct, we have actual names.\n+\n+There _is_ one case when a tuple struct is very useful, though, and that's a\n+tuple struct with only one element. We call this a 'newtype,' because it lets\n+you create a new type that's a synonym for another one:\n+\n+```{rust}\n+struct Inches(i32);\n+\n+let length = Inches(10);\n+\n+let Inches(integer_length) = length;\n+println!(\"length is {} inches\", integer_length);\n+```\n+\n+As you can see here, you can extract the inner integer type through a\n+destructuring `let`.\n+\n+## Enums\n+\n+Finally, Rust has a \"sum type\", an **enum**. Enums are an incredibly useful\n+feature of Rust, and are used throughout the standard library. This is an enum\n+that is provided by the Rust standard library:\n+\n+```{rust}\n+enum Ordering {\n+    Less,\n+    Equal,\n+    Greater,\n+}\n+```\n+\n+An `Ordering` can only be _one_ of `Less`, `Equal`, or `Greater` at any given\n+time.\n+\n+Because `Ordering` is provided by the standard library, we can use the `use`\n+keyword to use it in our code. We'll learn more about `use` later, but it's\n+used to bring names into scope.\n+\n+Here's an example of how to use `Ordering`:\n+\n+```{rust}\n+use std::cmp::Ordering;\n+\n+fn cmp(a: i32, b: i32) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+\n+fn main() {\n+    let x = 5;\n+    let y = 10;\n+\n+    let ordering = cmp(x, y); // ordering: Ordering\n+\n+    if ordering == Ordering::Less {\n+        println!(\"less\");\n+    } else if ordering == Ordering::Greater {\n+        println!(\"greater\");\n+    } else if ordering == Ordering::Equal {\n+        println!(\"equal\");\n+    }\n+}\n+```\n+\n+There's a symbol here we haven't seen before: the double colon (`::`).\n+This is used to indicate a namespace. In this case, `Ordering` lives in\n+the `cmp` submodule of the `std` module. We'll talk more about modules\n+later in the guide. For now, all you need to know is that you can `use`\n+things from the standard library if you need them.\n+\n+Okay, let's talk about the actual code in the example. `cmp` is a function that\n+compares two things, and returns an `Ordering`. We return either\n+`Ordering::Less`, `Ordering::Greater`, or `Ordering::Equal`, depending on if\n+the two values are greater, less, or equal. Note that each variant of the\n+`enum` is namespaced under the `enum` itself: it's `Ordering::Greater` not\n+`Greater`.\n+\n+The `ordering` variable has the type `Ordering`, and so contains one of the\n+three values. We can then do a bunch of `if`/`else` comparisons to check which\n+one it is. However, repeated `if`/`else` comparisons get quite tedious. Rust\n+has a feature that not only makes them nicer to read, but also makes sure that\n+you never miss a case. Before we get to that, though, let's talk about another\n+kind of enum: one with values.\n+\n+This enum has two variants, one of which has a value:\n+\n+```{rust}\n+enum OptionalInt {\n+    Value(i32),\n+    Missing,\n+}\n+```\n+\n+This enum represents an `i32` that we may or may not have. In the `Missing`\n+case, we have no value, but in the `Value` case, we do. This enum is specific\n+to `i32`s, though. We can make it usable by any type, but we haven't quite\n+gotten there yet!\n+\n+You can also have any number of values in an enum:\n+\n+```{rust}\n+enum OptionalColor {\n+    Color(i32, i32, i32),\n+    Missing,\n+}\n+```\n+\n+And you can also have something like this:\n+\n+```{rust}\n+enum StringResult {\n+    StringOK(String),\n+    ErrorReason(String),\n+}\n+```\n+Where a `StringResult` is either a `StringResult::StringOK`, with the result of\n+a computation, or an `StringResult::ErrorReason` with a `String` explaining\n+what caused the computation to fail. These kinds of `enum`s are actually very\n+useful and are even part of the standard library.\n+\n+Here is an example of using our `StringResult`:\n+\n+```rust\n+enum StringResult {\n+    StringOK(String),\n+    ErrorReason(String),\n+}\n+\n+fn respond(greeting: &str) -> StringResult {\n+    if greeting == \"Hello\" {\n+        StringResult::StringOK(\"Good morning!\".to_string())\n+    } else {\n+        StringResult::ErrorReason(\"I didn't understand you!\".to_string())\n+    }\n+}\n+```\n+\n+That's a lot of typing! We can use the `use` keyword to make it shorter:\n+\n+```rust\n+use StringResult::StringOK;\n+use StringResult::ErrorReason;\n+\n+enum StringResult {\n+    StringOK(String),\n+    ErrorReason(String),\n+}\n+\n+# fn main() {}\n+\n+fn respond(greeting: &str) -> StringResult {\n+    if greeting == \"Hello\" {\n+        StringOK(\"Good morning!\".to_string())\n+    } else {\n+        ErrorReason(\"I didn't understand you!\".to_string())\n+    }\n+}\n+```\n+\n+`use` declarations must come before anything else, which looks a little strange in this example,\n+since we `use` the variants before we define them. Anyway, in the body of `respond`, we can just\n+say `StringOK` now, rather than the full `StringResult::StringOK`. Importing variants can be\n+convenient, but can also cause name conflicts, so do this with caution. It's considered good style\n+to rarely import variants for this reason.\n+\n+As you can see, `enum`s with values are quite a powerful tool for data representation,\n+and can be even more useful when they're generic across types. Before we get to generics,\n+though, let's talk about how to use them with pattern matching, a tool that will\n+let us deconstruct this sum type (the type theory term for enums) in a very elegant\n+way and avoid all these messy `if`/`else`s."}, {"sha": "0472787e948d96ff7f720e890e666d74005a3862", "filename": "src/doc/trpl/src/conclusion.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fconclusion.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fconclusion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fconclusion.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,10 @@\n+% Conclusion\n+\n+We covered a lot of ground here. When you've mastered everything in this Guide,\n+you will have a firm grasp of basic Rust development. There's a whole lot more\n+out there, we've just covered the surface. There's tons of topics that you can\n+dig deeper into, and we've built specialized guides for many of them. To learn\n+more, dig into the [full documentation\n+index](index.html).\n+\n+Happy hacking!"}, {"sha": "ba825c2c9a8008e6ea22cda292cd213269ca0d0f", "filename": "src/doc/trpl/src/crates-and-modules.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fcrates-and-modules.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "previous_filename": "src/doc/guide-crates.md"}, {"sha": "98b46511f04584fbfff7f5d6be4b11a8ed28b40e", "filename": "src/doc/trpl/src/error-handling.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Ferror-handling.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "previous_filename": "src/doc/guide-error-handling.md"}, {"sha": "1f12c05f37e34475d9f892eae3274c1f1220343e", "filename": "src/doc/trpl/src/ffi.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fffi.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "previous_filename": "src/doc/guide-ffi.md"}, {"sha": "0fa3c66af648c253d4e970e29e333b60fb068453", "filename": "src/doc/trpl/src/functions.md", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Ffunctions.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,146 @@\n+# Functions\n+\n+You've already seen one function so far, the `main` function:\n+\n+```{rust}\n+fn main() {\n+}\n+```\n+\n+This is the simplest possible function declaration. As we mentioned before,\n+`fn` says 'this is a function,' followed by the name, some parentheses because\n+this function takes no arguments, and then some curly braces to indicate the\n+body. Here's a function named `foo`:\n+\n+```{rust}\n+fn foo() {\n+}\n+```\n+\n+So, what about taking arguments? Here's a function that prints a number:\n+\n+```{rust}\n+fn print_number(x: i32) {\n+    println!(\"x is: {}\", x);\n+}\n+```\n+\n+Here's a complete program that uses `print_number`:\n+\n+```{rust}\n+fn main() {\n+    print_number(5);\n+}\n+\n+fn print_number(x: i32) {\n+    println!(\"x is: {}\", x);\n+}\n+```\n+\n+As you can see, function arguments work very similar to `let` declarations:\n+you add a type to the argument name, after a colon.\n+\n+Here's a complete program that adds two numbers together and prints them:\n+\n+```{rust}\n+fn main() {\n+    print_sum(5, 6);\n+}\n+\n+fn print_sum(x: i32, y: i32) {\n+    println!(\"sum is: {}\", x + y);\n+}\n+```\n+\n+You separate arguments with a comma, both when you call the function, as well\n+as when you declare it.\n+\n+Unlike `let`, you _must_ declare the types of function arguments. This does\n+not work:\n+\n+```{ignore}\n+fn print_number(x, y) {\n+    println!(\"x is: {}\", x + y);\n+}\n+```\n+\n+You get this error:\n+\n+```text\n+hello.rs:5:18: 5:19 error: expected `:` but found `,`\n+hello.rs:5 fn print_number(x, y) {\n+```\n+\n+This is a deliberate design decision. While full-program inference is possible,\n+languages which have it, like Haskell, often suggest that documenting your\n+types explicitly is a best-practice. We agree that forcing functions to declare\n+types while allowing for inference inside of function bodies is a wonderful\n+sweet spot between full inference and no inference.\n+\n+What about returning a value? Here's a function that adds one to an integer:\n+\n+```{rust}\n+fn add_one(x: i32) -> i32 {\n+    x + 1\n+}\n+```\n+\n+Rust functions return exactly one value, and you declare the type after an\n+'arrow', which is a dash (`-`) followed by a greater-than sign (`>`).\n+\n+You'll note the lack of a semicolon here. If we added it in:\n+\n+```{ignore}\n+fn add_one(x: i32) -> i32 {\n+    x + 1;\n+}\n+```\n+\n+We would get an error:\n+\n+```text\n+error: not all control paths return a value\n+fn add_one(x: i32) -> i32 {\n+     x + 1;\n+}\n+\n+help: consider removing this semicolon:\n+     x + 1;\n+          ^\n+```\n+\n+Remember our earlier discussions about semicolons and `()`? Our function claims\n+to return an `i32`, but with a semicolon, it would return `()` instead. Rust\n+realizes this probably isn't what we want, and suggests removing the semicolon.\n+\n+This is very much like our `if` statement before: the result of the block\n+(`{}`) is the value of the expression. Other expression-oriented languages,\n+such as Ruby, work like this, but it's a bit unusual in the systems programming\n+world. When people first learn about this, they usually assume that it\n+introduces bugs. But because Rust's type system is so strong, and because unit\n+is its own unique type, we have never seen an issue where adding or removing a\n+semicolon in a return position would cause a bug.\n+\n+But what about early returns? Rust does have a keyword for that, `return`:\n+\n+```{rust}\n+fn foo(x: i32) -> i32 {\n+    if x < 5 { return x; }\n+\n+    x + 1\n+}\n+```\n+\n+Using a `return` as the last line of a function works, but is considered poor\n+style:\n+\n+```{rust}\n+fn foo(x: i32) -> i32 {\n+    if x < 5 { return x; }\n+\n+    return x + 1;\n+}\n+```\n+\n+There are some additional ways to define functions, but they involve features\n+that we haven't learned about yet, so let's just leave it at that for now."}, {"sha": "137b66ea15af0d213e31ae8d0f2a5e63cbfd6f4b", "filename": "src/doc/trpl/src/generics.md", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fgenerics.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fgenerics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fgenerics.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,177 @@\n+% Generics\n+\n+Sometimes, when writing a function or data type, we may want it to work for\n+multiple types of arguments. For example, remember our `OptionalInt` type?\n+\n+```{rust}\n+enum OptionalInt {\n+    Value(int),\n+    Missing,\n+}\n+```\n+\n+If we wanted to also have an `OptionalFloat64`, we would need a new enum:\n+\n+```{rust}\n+enum OptionalFloat64 {\n+    Valuef64(f64),\n+    Missingf64,\n+}\n+```\n+\n+This is really unfortunate. Luckily, Rust has a feature that gives us a better\n+way: generics. Generics are called **parametric polymorphism** in type theory,\n+which means that they are types or functions that have multiple forms (\"poly\"\n+is multiple, \"morph\" is form) over a given parameter (\"parametric\").\n+\n+Anyway, enough with type theory declarations, let's check out the generic form\n+of `OptionalInt`. It is actually provided by Rust itself, and looks like this:\n+\n+```rust\n+enum Option<T> {\n+    Some(T),\n+    None,\n+}\n+```\n+\n+The `<T>` part, which you've seen a few times before, indicates that this is\n+a generic data type. Inside the declaration of our enum, wherever we see a `T`,\n+we substitute that type for the same type used in the generic. Here's an\n+example of using `Option<T>`, with some extra type annotations:\n+\n+```{rust}\n+let x: Option<int> = Some(5i);\n+```\n+\n+In the type declaration, we say `Option<int>`. Note how similar this looks to\n+`Option<T>`. So, in this particular `Option`, `T` has the value of `int`. On\n+the right-hand side of the binding, we do make a `Some(T)`, where `T` is `5i`.\n+Since that's an `int`, the two sides match, and Rust is happy. If they didn't\n+match, we'd get an error:\n+\n+```{rust,ignore}\n+let x: Option<f64> = Some(5i);\n+// error: mismatched types: expected `core::option::Option<f64>`\n+// but found `core::option::Option<int>` (expected f64 but found int)\n+```\n+\n+That doesn't mean we can't make `Option<T>`s that hold an `f64`! They just have to\n+match up:\n+\n+```{rust}\n+let x: Option<int> = Some(5i);\n+let y: Option<f64> = Some(5.0f64);\n+```\n+\n+This is just fine. One definition, multiple uses.\n+\n+Generics don't have to only be generic over one type. Consider Rust's built-in\n+`Result<T, E>` type:\n+\n+```{rust}\n+enum Result<T, E> {\n+    Ok(T),\n+    Err(E),\n+}\n+```\n+\n+This type is generic over _two_ types: `T` and `E`. By the way, the capital letters\n+can be any letter you'd like. We could define `Result<T, E>` as:\n+\n+```{rust}\n+enum Result<H, N> {\n+    Ok(H),\n+    Err(N),\n+}\n+```\n+\n+if we wanted to. Convention says that the first generic parameter should be\n+`T`, for 'type,' and that we use `E` for 'error.' Rust doesn't care, however.\n+\n+The `Result<T, E>` type is intended to\n+be used to return the result of a computation, and to have the ability to\n+return an error if it didn't work out. Here's an example:\n+\n+```{rust}\n+let x: Result<f64, String> = Ok(2.3f64);\n+let y: Result<f64, String> = Err(\"There was an error.\".to_string());\n+```\n+\n+This particular Result will return an `f64` if there's a success, and a\n+`String` if there's a failure. Let's write a function that uses `Result<T, E>`:\n+\n+```{rust}\n+fn inverse(x: f64) -> Result<f64, String> {\n+    if x == 0.0f64 { return Err(\"x cannot be zero!\".to_string()); }\n+\n+    Ok(1.0f64 / x)\n+}\n+```\n+\n+We don't want to take the inverse of zero, so we check to make sure that we\n+weren't passed zero. If we were, then we return an `Err`, with a message. If\n+it's okay, we return an `Ok`, with the answer.\n+\n+Why does this matter? Well, remember how `match` does exhaustive matches?\n+Here's how this function gets used:\n+\n+```{rust}\n+# fn inverse(x: f64) -> Result<f64, String> {\n+#     if x == 0.0f64 { return Err(\"x cannot be zero!\".to_string()); }\n+#     Ok(1.0f64 / x)\n+# }\n+let x = inverse(25.0f64);\n+\n+match x {\n+    Ok(x) => println!(\"The inverse of 25 is {}\", x),\n+    Err(msg) => println!(\"Error: {}\", msg),\n+}\n+```\n+\n+The `match` enforces that we handle the `Err` case. In addition, because the\n+answer is wrapped up in an `Ok`, we can't just use the result without doing\n+the match:\n+\n+```{rust,ignore}\n+let x = inverse(25.0f64);\n+println!(\"{}\", x + 2.0f64); // error: binary operation `+` cannot be applied\n+           // to type `core::result::Result<f64,collections::string::String>`\n+```\n+\n+This function is great, but there's one other problem: it only works for 64 bit\n+floating point values. What if we wanted to handle 32 bit floating point as\n+well? We'd have to write this:\n+\n+```{rust}\n+fn inverse32(x: f32) -> Result<f32, String> {\n+    if x == 0.0f32 { return Err(\"x cannot be zero!\".to_string()); }\n+\n+    Ok(1.0f32 / x)\n+}\n+```\n+\n+Bummer. What we need is a **generic function**. Luckily, we can write one!\n+However, it won't _quite_ work yet. Before we get into that, let's talk syntax.\n+A generic version of `inverse` would look something like this:\n+\n+```{rust,ignore}\n+fn inverse<T>(x: T) -> Result<T, String> {\n+    if x == 0.0 { return Err(\"x cannot be zero!\".to_string()); }\n+\n+    Ok(1.0 / x)\n+}\n+```\n+\n+Just like how we had `Option<T>`, we use a similar syntax for `inverse<T>`.\n+We can then use `T` inside the rest of the signature: `x` has type `T`, and half\n+of the `Result` has type `T`. However, if we try to compile that example, we'll get\n+an error:\n+\n+```text\n+error: binary operation `==` cannot be applied to type `T`\n+```\n+\n+Because `T` can be _any_ type, it may be a type that doesn't implement `==`,\n+and therefore, the first line would be wrong. What do we do?\n+\n+To fix this example, we need to learn about another Rust feature: traits."}, {"sha": "1efcd4897609d557d50691f7ae1e30b8ebc32dff", "filename": "src/doc/trpl/src/guessing-game.md", "status": "added", "additions": 891, "deletions": 0, "changes": 891, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fguessing-game.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,891 @@\n+# Guessing Game\n+\n+Okay! We've got the basics of Rust down. Let's write a bigger program.\n+\n+For our first project, we'll implement a classic beginner programming problem:\n+the guessing game. Here's how it works: Our program will generate a random\n+integer between one and a hundred. It will then prompt us to enter a guess.\n+Upon entering our guess, it will tell us if we're too low or too high. Once we\n+guess correctly, it will congratulate us. Sound good?\n+\n+## Set up\n+\n+Let's set up a new project. Go to your projects directory. Remember how we\n+had to create our directory structure and a `Cargo.toml` for `hello_world`? Cargo\n+has a command that does that for us. Let's give it a shot:\n+\n+```{bash}\n+$ cd ~/projects\n+$ cargo new guessing_game --bin\n+$ cd guessing_game\n+```\n+\n+We pass the name of our project to `cargo new`, and then the `--bin` flag,\n+since we're making a binary, rather than a library.\n+\n+Check out the generated `Cargo.toml`:\n+\n+```toml\n+[package]\n+\n+name = \"guessing_game\"\n+version = \"0.0.1\"\n+authors = [\"Your Name <you@example.com>\"]\n+```\n+\n+Cargo gets this information from your environment. If it's not correct, go ahead\n+and fix that.\n+\n+Finally, Cargo generated a \"Hello, world!\" for us. Check out `src/main.rs`:\n+\n+```{rust}\n+fn main() {\n+    println!(\"Hello, world!\")\n+}\n+```\n+\n+Let's try compiling what Cargo gave us:\n+\n+```{bash}\n+$ cargo build\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+```\n+\n+Excellent! Open up your `src/main.rs` again. We'll be writing all of\n+our code in this file. We'll talk about multiple-file projects later on in the\n+guide.\n+\n+Before we move on, let me show you one more Cargo command: `run`. `cargo run`\n+is kind of like `cargo build`, but it also then runs the produced executable.\n+Try it out:\n+\n+```bash\n+$ cargo run\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+     Running `target/guessing_game`\n+Hello, world!\n+```\n+\n+Great! The `run` command comes in handy when you need to rapidly iterate on a project.\n+Our game is just such a project, we need to quickly test each iteration before moving on to the next one.\n+\n+## Processing a Guess\n+\n+Let's get to it! The first thing we need to do for our guessing game is\n+allow our player to input a guess. Put this in your `src/main.rs`:\n+\n+```{rust,no_run}\n+use std::io;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    println!(\"Please input your guess.\");\n+\n+    let input = io::stdin().read_line()\n+                           .ok()\n+                           .expect(\"Failed to read line\");\n+\n+    println!(\"You guessed: {}\", input);\n+}\n+```\n+\n+You've seen this code before, when we talked about standard input. We\n+import the `std::io` module with `use`, and then our `main` function contains\n+our program's logic. We print a little message announcing the game, ask the\n+user to input a guess, get their input, and then print it out.\n+\n+Because we talked about this in the section on standard I/O, I won't go into\n+more details here. If you need a refresher, go re-read that section.\n+\n+## Generating a secret number\n+\n+Next, we need to generate a secret number. To do that, we need to use Rust's\n+random number generation, which we haven't talked about yet. Rust includes a\n+bunch of interesting functions in its standard library. If you need a bit of\n+code, it's possible that it's already been written for you! In this case,\n+we do know that Rust has random number generation, but we don't know how to\n+use it.\n+\n+Enter the docs. Rust has a page specifically to document the standard library.\n+You can find that page [here](std/index.html). There's a lot of information on\n+that page, but the best part is the search bar. Right up at the top, there's\n+a box that you can enter in a search term. The search is pretty primitive\n+right now, but is getting better all the time. If you type 'random' in that\n+box, the page will update to [this one](std/index.html?search=random). The very\n+first result is a link to [`std::rand::random`](std/rand/fn.random.html). If we\n+click on that result, we'll be taken to its documentation page.\n+\n+This page shows us a few things: the type signature of the function, some\n+explanatory text, and then an example. Let's try to modify our code to add in the\n+`random` function and see what happens:\n+\n+```{rust,ignore}\n+use std::io;\n+use std::rand;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random() % 100) + 1; // secret_number: i32\n+\n+    println!(\"The secret number is: {}\", secret_number);\n+\n+    println!(\"Please input your guess.\");\n+\n+    let input = io::stdin().read_line()\n+                           .ok()\n+                           .expect(\"Failed to read line\");\n+\n+\n+    println!(\"You guessed: {}\", input);\n+}\n+```\n+\n+The first thing we changed was to `use std::rand`, as the docs\n+explained.  We then added in a `let` expression to create a variable binding\n+named `secret_number`, and we printed out its result.\n+\n+Also, you may wonder why we are using `%` on the result of `rand::random()`.\n+This operator is called 'modulo', and it returns the remainder of a division.\n+By taking the modulo of the result of `rand::random()`, we're limiting the\n+values to be between 0 and 99. Then, we add one to the result, making it from 1\n+to 100. Using modulo can give you a very, very small bias in the result, but\n+for this example, it is not important.\n+\n+Let's try to compile this using `cargo build`:\n+\n+```bash\n+$ cargo build\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+src/main.rs:7:26: 7:34 error: the type of this value must be known in this context\n+src/main.rs:7     let secret_number = (rand::random() % 100) + 1;\n+                                       ^~~~~~~~\n+error: aborting due to previous error\n+```\n+\n+It didn't work! Rust says \"the type of this value must be known in this\n+context.\" What's up with that? Well, as it turns out, `rand::random()` can\n+generate many kinds of random values, not just integers. And in this case, Rust\n+isn't sure what kind of value `random()` should generate. So we have to help\n+it. With number literals, we can just add an `i32` onto the end to tell Rust they're\n+integers, but that does not work with functions. There's a different syntax,\n+and it looks like this:\n+\n+```{rust,ignore}\n+rand::random::<i32>();\n+```\n+\n+This says \"please give me a random `i32` value.\" We can change our code to use\n+this hint:\n+\n+```{rust,no_run}\n+use std::io;\n+use std::rand;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random::<i32>() % 100) + 1;\n+\n+    println!(\"The secret number is: {}\", secret_number);\n+\n+    println!(\"Please input your guess.\");\n+\n+    let input = io::stdin().read_line()\n+                           .ok()\n+                           .expect(\"Failed to read line\");\n+\n+\n+    println!(\"You guessed: {}\", input);\n+}\n+```\n+\n+Try running our new program a few times:\n+\n+```bash\n+$ cargo run\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+     Running `target/guessing_game`\n+Guess the number!\n+The secret number is: 7\n+Please input your guess.\n+4\n+You guessed: 4\n+$ ./target/guessing_game\n+Guess the number!\n+The secret number is: 83\n+Please input your guess.\n+5\n+You guessed: 5\n+$ ./target/guessing_game\n+Guess the number!\n+The secret number is: -29\n+Please input your guess.\n+42\n+You guessed: 42\n+```\n+\n+Wait. Negative 29? We wanted a number between one and a hundred! We have two\n+options here: we can either ask `random()` to generate an unsigned integer, which\n+can only be positive, or we can use the `abs()` function. Let's go with the\n+unsigned integer approach. If we want a random positive number, we should ask for\n+a random positive number. Our code looks like this now:\n+\n+```{rust,no_run}\n+use std::io;\n+use std::rand;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+\n+    println!(\"The secret number is: {}\", secret_number);\n+\n+    println!(\"Please input your guess.\");\n+\n+    let input = io::stdin().read_line()\n+                           .ok()\n+                           .expect(\"Failed to read line\");\n+\n+\n+    println!(\"You guessed: {}\", input);\n+}\n+```\n+\n+And trying it out:\n+\n+```bash\n+$ cargo run\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+     Running `target/guessing_game`\n+Guess the number!\n+The secret number is: 57\n+Please input your guess.\n+3\n+You guessed: 3\n+```\n+\n+Great! Next up: let's compare our guess to the secret guess.\n+\n+## Comparing guesses\n+\n+If you remember, earlier in the guide, we made a `cmp` function that compared\n+two numbers. Let's add that in, along with a `match` statement to compare our\n+guess to the secret number:\n+\n+```{rust,ignore}\n+use std::io;\n+use std::rand;\n+use std::cmp::Ordering;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+\n+    println!(\"The secret number is: {}\", secret_number);\n+\n+    println!(\"Please input your guess.\");\n+\n+    let input = io::stdin().read_line()\n+                           .ok()\n+                           .expect(\"Failed to read line\");\n+\n+\n+    println!(\"You guessed: {}\", input);\n+\n+    match cmp(input, secret_number) {\n+        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Greater => println!(\"Too big!\"),\n+        Ordering::Equal   => println!(\"You win!\"),\n+    }\n+}\n+\n+fn cmp(a: i32, b: i32) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+```\n+\n+If we try to compile, we'll get some errors:\n+\n+```bash\n+$ cargo build\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+src/main.rs:20:15: 20:20 error: mismatched types: expected `i32` but found `collections::string::String` (expected i32 but found struct collections::string::String)\n+src/main.rs:20     match cmp(input, secret_number) {\n+                             ^~~~~\n+src/main.rs:20:22: 20:35 error: mismatched types: expected `i32` but found `uint` (expected i32 but found uint)\n+src/main.rs:20     match cmp(input, secret_number) {\n+                                    ^~~~~~~~~~~~~\n+error: aborting due to 2 previous errors\n+```\n+\n+This often happens when writing Rust programs, and is one of Rust's greatest\n+strengths. You try out some code, see if it compiles, and Rust tells you that\n+you've done something wrong. In this case, our `cmp` function works on integers,\n+but we've given it unsigned integers. In this case, the fix is easy, because\n+we wrote the `cmp` function! Let's change it to take `uint`s:\n+\n+```{rust,ignore}\n+use std::io;\n+use std::rand;\n+use std::cmp::Ordering;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+\n+    println!(\"The secret number is: {}\", secret_number);\n+\n+    println!(\"Please input your guess.\");\n+\n+    let input = io::stdin().read_line()\n+                           .ok()\n+                           .expect(\"Failed to read line\");\n+\n+\n+    println!(\"You guessed: {}\", input);\n+\n+    match cmp(input, secret_number) {\n+        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Greater => println!(\"Too big!\"),\n+        Ordering::Equal   => println!(\"You win!\"),\n+    }\n+}\n+\n+fn cmp(a: uint, b: uint) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+```\n+\n+And try compiling again:\n+\n+```bash\n+$ cargo build\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+src/main.rs:20:15: 20:20 error: mismatched types: expected `uint` but found `collections::string::String` (expected uint but found struct collections::string::String)\n+src/main.rs:20     match cmp(input, secret_number) {\n+                             ^~~~~\n+error: aborting due to previous error\n+```\n+\n+This error is similar to the last one: we expected to get a `uint`, but we got\n+a `String` instead! That's because our `input` variable is coming from the\n+standard input, and you can guess anything. Try it:\n+\n+```bash\n+$ ./target/guessing_game\n+Guess the number!\n+The secret number is: 73\n+Please input your guess.\n+hello\n+You guessed: hello\n+```\n+\n+Oops! Also, you'll note that we just ran our program even though it didn't compile.\n+This works because the older version we did successfully compile was still lying\n+around. Gotta be careful!\n+\n+Anyway, we have a `String`, but we need a `uint`. What to do? Well, there's\n+a function for that:\n+\n+```{rust,ignore}\n+let input = io::stdin().read_line()\n+                       .ok()\n+                       .expect(\"Failed to read line\");\n+let input_num: Option<uint> = input.parse();\n+```\n+\n+The `parse` function takes in a `&str` value and converts it into something.\n+We tell it what kind of something with a type hint. Remember our type hint with\n+`random()`? It looked like this:\n+\n+```{rust,ignore}\n+rand::random::<uint>();\n+```\n+\n+There's an alternate way of providing a hint too, and that's declaring the type\n+in a `let`:\n+\n+```{rust,ignore}\n+let x: uint = rand::random();\n+```\n+\n+In this case, we say `x` is a `uint` explicitly, so Rust is able to properly\n+tell `random()` what to generate. In a similar fashion, both of these work:\n+\n+```{rust,ignore}\n+let input_num = \"5\".parse::<uint>();         // input_num: Option<uint>\n+let input_num: Option<uint> = \"5\".parse();   // input_num: Option<uint>\n+```\n+\n+Anyway, with us now converting our input to a number, our code looks like this:\n+\n+```{rust,ignore}\n+use std::io;\n+use std::rand;\n+use std::cmp::Ordering;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+\n+    println!(\"The secret number is: {}\", secret_number);\n+\n+    println!(\"Please input your guess.\");\n+\n+    let input = io::stdin().read_line()\n+                           .ok()\n+                           .expect(\"Failed to read line\");\n+    let input_num: Option<uint> = input.parse();\n+\n+    println!(\"You guessed: {}\", input_num);\n+\n+    match cmp(input_num, secret_number) {\n+        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Greater => println!(\"Too big!\"),\n+        Ordering::Equal   => println!(\"You win!\"),\n+    }\n+}\n+\n+fn cmp(a: uint, b: uint) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+```\n+\n+Let's try it out!\n+\n+```bash\n+$ cargo build\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+src/main.rs:22:15: 22:24 error: mismatched types: expected `uint` but found `core::option::Option<uint>` (expected uint but found enum core::option::Option)\n+src/main.rs:22     match cmp(input_num, secret_number) {\n+                             ^~~~~~~~~\n+error: aborting due to previous error\n+```\n+\n+Oh yeah! Our `input_num` has the type `Option<uint>`, rather than `uint`. We\n+need to unwrap the Option. If you remember from before, `match` is a great way\n+to do that. Try this code:\n+\n+```{rust,no_run}\n+use std::io;\n+use std::rand;\n+use std::cmp::Ordering;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+\n+    println!(\"The secret number is: {}\", secret_number);\n+\n+    println!(\"Please input your guess.\");\n+\n+    let input = io::stdin().read_line()\n+                           .ok()\n+                           .expect(\"Failed to read line\");\n+    let input_num: Option<uint> = input.parse();\n+\n+    let num = match input_num {\n+        Some(num) => num,\n+        None      => {\n+            println!(\"Please input a number!\");\n+            return;\n+        }\n+    };\n+\n+\n+    println!(\"You guessed: {}\", num);\n+\n+    match cmp(num, secret_number) {\n+        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Greater => println!(\"Too big!\"),\n+        Ordering::Equal   => println!(\"You win!\"),\n+    }\n+}\n+\n+fn cmp(a: uint, b: uint) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+```\n+\n+We use a `match` to either give us the `uint` inside of the `Option`, or else\n+print an error message and return. Let's give this a shot:\n+\n+```bash\n+$ cargo run\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+     Running `target/guessing_game`\n+Guess the number!\n+The secret number is: 17\n+Please input your guess.\n+5\n+Please input a number!\n+```\n+\n+Uh, what? But we did!\n+\n+... actually, we didn't. See, when you get a line of input from `stdin()`,\n+you get all the input. Including the `\\n` character from you pressing Enter.\n+Therefore, `parse()` sees the string `\"5\\n\"` and says \"nope, that's not a\n+number; there's non-number stuff in there!\" Luckily for us, `&str`s have an easy\n+method we can use defined on them: `trim()`. One small modification, and our\n+code looks like this:\n+\n+```{rust,no_run}\n+use std::io;\n+use std::rand;\n+use std::cmp::Ordering;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+\n+    println!(\"The secret number is: {}\", secret_number);\n+\n+    println!(\"Please input your guess.\");\n+\n+    let input = io::stdin().read_line()\n+                           .ok()\n+                           .expect(\"Failed to read line\");\n+    let input_num: Option<uint> = input.trim().parse();\n+\n+    let num = match input_num {\n+        Some(num) => num,\n+        None      => {\n+            println!(\"Please input a number!\");\n+            return;\n+        }\n+    };\n+\n+\n+    println!(\"You guessed: {}\", num);\n+\n+    match cmp(num, secret_number) {\n+        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Greater => println!(\"Too big!\"),\n+        Ordering::Equal   => println!(\"You win!\"),\n+    }\n+}\n+\n+fn cmp(a: uint, b: uint) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+```\n+\n+Let's try it!\n+\n+```bash\n+$ cargo run\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+     Running `target/guessing_game`\n+Guess the number!\n+The secret number is: 58\n+Please input your guess.\n+  76\n+You guessed: 76\n+Too big!\n+```\n+\n+Nice! You can see I even added spaces before my guess, and it still figured\n+out that I guessed 76. Run the program a few times, and verify that guessing\n+the number works, as well as guessing a number too small.\n+\n+The Rust compiler helped us out quite a bit there! This technique is called\n+\"lean on the compiler\", and it's often useful when working on some code. Let\n+the error messages help guide you towards the correct types.\n+\n+Now we've got most of the game working, but we can only make one guess. Let's\n+change that by adding loops!\n+\n+## Looping\n+\n+As we already discussed, the `loop` keyword gives us an infinite loop.\n+Let's add that in:\n+\n+```{rust,no_run}\n+use std::io;\n+use std::rand;\n+use std::cmp::Ordering;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+\n+    println!(\"The secret number is: {}\", secret_number);\n+\n+    loop {\n+\n+        println!(\"Please input your guess.\");\n+\n+        let input = io::stdin().read_line()\n+                               .ok()\n+                               .expect(\"Failed to read line\");\n+        let input_num: Option<uint> = input.trim().parse();\n+\n+        let num = match input_num {\n+            Some(num) => num,\n+            None      => {\n+                println!(\"Please input a number!\");\n+                return;\n+            }\n+        };\n+\n+\n+        println!(\"You guessed: {}\", num);\n+\n+        match cmp(num, secret_number) {\n+            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Greater => println!(\"Too big!\"),\n+            Ordering::Equal   => println!(\"You win!\"),\n+        }\n+    }\n+}\n+\n+fn cmp(a: uint, b: uint) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+```\n+\n+And try it out. But wait, didn't we just add an infinite loop? Yup. Remember\n+that `return`? If we give a non-number answer, we'll `return` and quit. Observe:\n+\n+```bash\n+$ cargo run\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+     Running `target/guessing_game`\n+Guess the number!\n+The secret number is: 59\n+Please input your guess.\n+45\n+You guessed: 45\n+Too small!\n+Please input your guess.\n+60\n+You guessed: 60\n+Too big!\n+Please input your guess.\n+59\n+You guessed: 59\n+You win!\n+Please input your guess.\n+quit\n+Please input a number!\n+```\n+\n+Ha! `quit` actually quits. As does any other non-number input. Well, this is\n+suboptimal to say the least. First, let's actually quit when you win the game:\n+\n+```{rust,no_run}\n+use std::io;\n+use std::rand;\n+use std::cmp::Ordering;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+\n+    println!(\"The secret number is: {}\", secret_number);\n+\n+    loop {\n+\n+        println!(\"Please input your guess.\");\n+\n+        let input = io::stdin().read_line()\n+                               .ok()\n+                               .expect(\"Failed to read line\");\n+        let input_num: Option<uint> = input.trim().parse();\n+\n+        let num = match input_num {\n+            Some(num) => num,\n+            None      => {\n+                println!(\"Please input a number!\");\n+                return;\n+            }\n+        };\n+\n+\n+        println!(\"You guessed: {}\", num);\n+\n+        match cmp(num, secret_number) {\n+            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Greater => println!(\"Too big!\"),\n+            Ordering::Equal   => {\n+                println!(\"You win!\");\n+                return;\n+            },\n+        }\n+    }\n+}\n+\n+fn cmp(a: uint, b: uint) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+```\n+\n+By adding the `return` line after the `You win!`, we'll exit the program when\n+we win. We have just one more tweak to make: when someone inputs a non-number,\n+we don't want to quit, we just want to ignore it. Change that `return` to\n+`continue`:\n+\n+\n+```{rust,no_run}\n+use std::io;\n+use std::rand;\n+use std::cmp::Ordering;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+\n+    println!(\"The secret number is: {}\", secret_number);\n+\n+    loop {\n+\n+        println!(\"Please input your guess.\");\n+\n+        let input = io::stdin().read_line()\n+                               .ok()\n+                               .expect(\"Failed to read line\");\n+        let input_num: Option<uint> = input.trim().parse();\n+\n+        let num = match input_num {\n+            Some(num) => num,\n+            None      => {\n+                println!(\"Please input a number!\");\n+                continue;\n+            }\n+        };\n+\n+\n+        println!(\"You guessed: {}\", num);\n+\n+        match cmp(num, secret_number) {\n+            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Greater => println!(\"Too big!\"),\n+            Ordering::Equal   => {\n+                println!(\"You win!\");\n+                return;\n+            },\n+        }\n+    }\n+}\n+\n+fn cmp(a: uint, b: uint) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+```\n+\n+Now we should be good! Let's try:\n+\n+```bash\n+$ cargo run\n+   Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n+     Running `target/guessing_game`\n+Guess the number!\n+The secret number is: 61\n+Please input your guess.\n+10\n+You guessed: 10\n+Too small!\n+Please input your guess.\n+99\n+You guessed: 99\n+Too big!\n+Please input your guess.\n+foo\n+Please input a number!\n+Please input your guess.\n+61\n+You guessed: 61\n+You win!\n+```\n+\n+Awesome! With one tiny last tweak, we have finished the guessing game. Can you\n+think of what it is? That's right, we don't want to print out the secret number.\n+It was good for testing, but it kind of ruins the game. Here's our final source:\n+\n+```{rust,no_run}\n+use std::io;\n+use std::rand;\n+use std::cmp::Ordering;\n+\n+fn main() {\n+    println!(\"Guess the number!\");\n+\n+    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+\n+    loop {\n+\n+        println!(\"Please input your guess.\");\n+\n+        let input = io::stdin().read_line()\n+                               .ok()\n+                               .expect(\"Failed to read line\");\n+        let input_num: Option<uint> = input.trim().parse();\n+\n+        let num = match input_num {\n+            Some(num) => num,\n+            None      => {\n+                println!(\"Please input a number!\");\n+                continue;\n+            }\n+        };\n+\n+\n+        println!(\"You guessed: {}\", num);\n+\n+        match cmp(num, secret_number) {\n+            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Greater => println!(\"Too big!\"),\n+            Ordering::Equal   => {\n+                println!(\"You win!\");\n+                return;\n+            },\n+        }\n+    }\n+}\n+\n+fn cmp(a: uint, b: uint) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+```\n+\n+## Complete!\n+\n+At this point, you have successfully built the Guessing Game! Congratulations!\n+\n+You've now learned the basic syntax of Rust. All of this is relatively close to\n+various other programming languages you have used in the past. These\n+fundamental syntactical and semantic elements will form the foundation for the\n+rest of your Rust education.\n+\n+Now that you're an expert at the basics, it's time to learn about some of\n+Rust's more unique features."}, {"sha": "7a5c535827c251f35f58f50ee146d6b6d2075046", "filename": "src/doc/trpl/src/guide-lifetimes.md", "status": "added", "additions": 565, "deletions": 0, "changes": 565, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fguide-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fguide-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fguide-lifetimes.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,565 @@\n+% The Rust References and Lifetimes Guide\n+\n+# Introduction\n+\n+References are one of the more flexible and powerful tools available in\n+Rust. They can point anywhere: into the heap, stack, and even into the\n+interior of another data structure. A reference is as flexible as a C pointer\n+or C++ reference.\n+\n+Unlike C and C++ compilers, the Rust compiler includes special static\n+checks that ensure that programs use references safely.\n+\n+Despite their complete safety, a reference's representation at runtime\n+is the same as that of an ordinary pointer in a C program. They introduce zero\n+overhead. The compiler does all safety checks at compile time.\n+\n+Although references have rather elaborate theoretical underpinnings\n+(e.g. region pointers), the core concepts will be familiar to anyone\n+who has worked with C or C++. The best way to explain how they are\n+used\u2014and their limitations\u2014is probably just to work through several examples.\n+\n+# By example\n+\n+References, sometimes known as *borrowed pointers*, are only valid for\n+a limited duration. References never claim any kind of ownership\n+over the data that they point to. Instead, they are used for cases\n+where you would like to use data for a short time.\n+\n+Consider a simple struct type `Point`:\n+\n+~~~\n+struct Point {x: f64, y: f64}\n+~~~\n+\n+We can use this simple definition to allocate points in many different ways. For\n+example, in this code, each of these local variables contains a point,\n+but allocated in a different place:\n+\n+~~~\n+# struct Point {x: f64, y: f64}\n+let on_the_stack : Point      =     Point {x: 3.0, y: 4.0};\n+let on_the_heap  : Box<Point> = box Point {x: 7.0, y: 9.0};\n+~~~\n+\n+Suppose we wanted to write a procedure that computed the distance between any\n+two points, no matter where they were stored. One option is to define a function\n+that takes two arguments of type `Point`\u2014that is, it takes the points by value.\n+But if we define it this way, calling the function will cause the points to be\n+copied. For points, this is probably not so bad, but often copies are\n+expensive. So we'd like to define a function that takes the points just as\n+a reference.\n+\n+~~~\n+# use std::num::Float;\n+# struct Point {x: f64, y: f64}\n+# fn sqrt(f: f64) -> f64 { 0.0 }\n+fn compute_distance(p1: &Point, p2: &Point) -> f64 {\n+    let x_d = p1.x - p2.x;\n+    let y_d = p1.y - p2.y;\n+    (x_d * x_d + y_d * y_d).sqrt()\n+}\n+~~~\n+\n+Now we can call `compute_distance()`:\n+\n+~~~\n+# struct Point {x: f64, y: f64}\n+# let on_the_stack :     Point  =     Point{x: 3.0, y: 4.0};\n+# let on_the_heap  : Box<Point> = box Point{x: 7.0, y: 9.0};\n+# fn compute_distance(p1: &Point, p2: &Point) -> f64 { 0.0 }\n+compute_distance(&on_the_stack, &*on_the_heap);\n+~~~\n+\n+Here, the `&` operator takes the address of the variable\n+`on_the_stack`; this is because `on_the_stack` has the type `Point`\n+(that is, a struct value) and we have to take its address to get a\n+value. We also call this _borrowing_ the local variable\n+`on_the_stack`, because we have created an alias: that is, another\n+name for the same data.\n+\n+Likewise, in the case of `on_the_heap`,\n+the `&` operator is used in conjunction with the `*` operator\n+to take a reference to the contents of the box.\n+\n+Whenever a caller lends data to a callee, there are some limitations on what\n+the caller can do with the original. For example, if the contents of a\n+variable have been lent out, you cannot send that variable to another task. In\n+addition, the compiler will reject any code that might cause the borrowed\n+value to be freed or overwrite its component fields with values of different\n+types (I'll get into what kinds of actions those are shortly). This rule\n+should make intuitive sense: you must wait for a borrower to return the value\n+that you lent it (that is, wait for the reference to go out of scope)\n+before you can make full use of it again.\n+\n+# Other uses for the & operator\n+\n+In the previous example, the value `on_the_stack` was defined like so:\n+\n+~~~\n+# struct Point {x: f64, y: f64}\n+let on_the_stack: Point = Point {x: 3.0, y: 4.0};\n+~~~\n+\n+This declaration means that code can only pass `Point` by value to other\n+functions. As a consequence, we had to explicitly take the address of\n+`on_the_stack` to get a reference. Sometimes however it is more\n+convenient to move the & operator into the definition of `on_the_stack`:\n+\n+~~~\n+# struct Point {x: f64, y: f64}\n+let on_the_stack2: &Point = &Point {x: 3.0, y: 4.0};\n+~~~\n+\n+Applying `&` to an rvalue (non-assignable location) is just a convenient\n+shorthand for creating a temporary and taking its address. A more verbose\n+way to write the same code is:\n+\n+~~~\n+# struct Point {x: f64, y: f64}\n+let tmp = Point {x: 3.0, y: 4.0};\n+let on_the_stack2 : &Point = &tmp;\n+~~~\n+\n+# Taking the address of fields\n+\n+The `&` operator is not limited to taking the address of\n+local variables. It can also take the address of fields or\n+individual array elements. For example, consider this type definition\n+for `Rectangle`:\n+\n+~~~\n+struct Point {x: f64, y: f64} // as before\n+struct Size {w: f64, h: f64} // as before\n+struct Rectangle {origin: Point, size: Size}\n+~~~\n+\n+Now, as before, we can define rectangles in a few different ways:\n+\n+~~~\n+# struct Point {x: f64, y: f64}\n+# struct Size {w: f64, h: f64} // as before\n+# struct Rectangle {origin: Point, size: Size}\n+let rect_stack   =    &Rectangle {origin: Point {x: 1.0, y: 2.0},\n+                                  size: Size {w: 3.0, h: 4.0}};\n+let rect_heap    = box Rectangle {origin: Point {x: 5.0, y: 6.0},\n+                                  size: Size {w: 3.0, h: 4.0}};\n+~~~\n+\n+In each case, we can extract out individual subcomponents with the `&`\n+operator. For example, I could write:\n+\n+~~~\n+# struct Point {x: f64, y: f64} // as before\n+# struct Size {w: f64, h: f64} // as before\n+# struct Rectangle {origin: Point, size: Size}\n+# let rect_stack  = &Rectangle {origin: Point {x: 1.0, y: 2.0}, size: Size {w: 3.0, h: 4.0}};\n+# let rect_heap   = box Rectangle {origin: Point {x: 5.0, y: 6.0}, size: Size {w: 3.0, h: 4.0}};\n+# fn compute_distance(p1: &Point, p2: &Point) -> f64 { 0.0 }\n+compute_distance(&rect_stack.origin, &rect_heap.origin);\n+~~~\n+\n+which would borrow the field `origin` from the rectangle on the stack\n+as well as from the owned box, and then compute the distance between them.\n+\n+# Lifetimes\n+\n+We\u2019ve seen a few examples of borrowing data. To this point, we\u2019ve glossed\n+over issues of safety. As stated in the introduction, at runtime a reference\n+is simply a pointer, nothing more. Therefore, avoiding C's problems with\n+dangling pointers requires a compile-time safety check.\n+\n+The basis for the check is the notion of _lifetimes_. A lifetime is a\n+static approximation of the span of execution during which the pointer\n+is valid: it always corresponds to some expression or block within the\n+program.\n+\n+The compiler will only allow a borrow *if it can guarantee that the data will\n+not be reassigned or moved for the lifetime of the pointer*. This does not\n+necessarily mean that the data is stored in immutable memory. For example,\n+the following function is legal:\n+\n+~~~\n+# fn some_condition() -> bool { true }\n+# struct Foo { f: int }\n+fn example3() -> int {\n+    let mut x = box Foo {f: 3};\n+    if some_condition() {\n+        let y = &x.f;      // -+ L\n+        return *y;         //  |\n+    }                      // -+\n+    x = box Foo {f: 4};\n+    // ...\n+# return 0;\n+}\n+~~~\n+\n+Here, the interior of the variable `x` is being borrowed\n+and `x` is declared as mutable. However, the compiler can prove that\n+`x` is not assigned anywhere in the lifetime L of the variable\n+`y`. Therefore, it accepts the function, even though `x` is mutable\n+and in fact is mutated later in the function.\n+\n+It may not be clear why we are so concerned about mutating a borrowed\n+variable. The reason is that the runtime system frees any box\n+_as soon as its owning reference changes or goes out of\n+scope_. Therefore, a program like this is illegal (and would be\n+rejected by the compiler):\n+\n+~~~ {.ignore}\n+fn example3() -> int {\n+    let mut x = box X {f: 3};\n+    let y = &x.f;\n+    x = box X {f: 4};  // Error reported here.\n+    *y\n+}\n+~~~\n+\n+To make this clearer, consider this diagram showing the state of\n+memory immediately before the re-assignment of `x`:\n+\n+~~~ {.text}\n+    Stack               Exchange Heap\n+\n+  x +-------------+\n+    | box {f:int} | ----+\n+  y +-------------+     |\n+    | &int        | ----+\n+    +-------------+     |    +---------+\n+                        +--> |  f: 3   |\n+                             +---------+\n+~~~\n+\n+Once the reassignment occurs, the memory will look like this:\n+\n+~~~ {.text}\n+    Stack               Exchange Heap\n+\n+  x +-------------+          +---------+\n+    | box {f:int} | -------> |  f: 4   |\n+  y +-------------+          +---------+\n+    | &int        | ----+\n+    +-------------+     |    +---------+\n+                        +--> | (freed) |\n+                             +---------+\n+~~~\n+\n+Here you can see that the variable `y` still points at the old `f`\n+property of Foo, which has been freed.\n+\n+In fact, the compiler can apply the same kind of reasoning to any\n+memory that is (uniquely) owned by the stack frame. So we could\n+modify the previous example to introduce additional owned pointers\n+and structs, and the compiler will still be able to detect possible\n+mutations. This time, we'll use an analogy to illustrate the concept.\n+\n+~~~ {.ignore}\n+fn example3() -> int {\n+    struct House { owner: Box<Person> }\n+    struct Person { age: int }\n+\n+    let mut house = box House {\n+        owner: box Person {age: 30}\n+    };\n+\n+    let owner_age = &house.owner.age;\n+    house = box House {owner: box Person {age: 40}};  // Error reported here.\n+    house.owner = box Person {age: 50};               // Error reported here.\n+    *owner_age\n+}\n+~~~\n+\n+In this case, two errors are reported, one when the variable `house` is\n+modified and another when `house.owner` is modified. Either modification would\n+invalidate the pointer `owner_age`.\n+\n+# Borrowing and enums\n+\n+The previous example showed that the type system forbids any mutations\n+of owned boxed values while they are being borrowed. In general, the type\n+system also forbids borrowing a value as mutable if it is already being\n+borrowed - either as a mutable reference or an immutable one. This restriction\n+prevents pointers from pointing into freed memory. There is one other\n+case where the compiler must be very careful to ensure that pointers\n+remain valid: pointers into the interior of an `enum`.\n+\n+Let\u2019s look at the following `shape` type that can represent both rectangles\n+and circles:\n+\n+~~~\n+struct Point {x: f64, y: f64}; // as before\n+struct Size {w: f64, h: f64}; // as before\n+enum Shape {\n+    Circle(Point, f64),   // origin, radius\n+    Rectangle(Point, Size)  // upper-left, dimensions\n+}\n+~~~\n+\n+Now we might write a function to compute the area of a shape. This\n+function takes a reference to a shape, to avoid the need for\n+copying.\n+\n+~~~\n+# struct Point {x: f64, y: f64}; // as before\n+# struct Size {w: f64, h: f64}; // as before\n+# enum Shape {\n+#     Circle(Point, f64),   // origin, radius\n+#     Rectangle(Point, Size)  // upper-left, dimensions\n+# }\n+fn compute_area(shape: &Shape) -> f64 {\n+    match *shape {\n+        Shape::Circle(_, radius) => std::f64::consts::PI * radius * radius,\n+        Shape::Rectangle(_, ref size) => size.w * size.h\n+    }\n+}\n+~~~\n+\n+The first case matches against circles. Here, the pattern extracts the\n+radius from the shape variant and the action uses it to compute the\n+area of the circle.\n+\n+The second match is more interesting. Here we match against a\n+rectangle and extract its size: but rather than copy the `size`\n+struct, we use a by-reference binding to create a pointer to it. In\n+other words, a pattern binding like `ref size` binds the name `size`\n+to a pointer of type `&size` into the _interior of the enum_.\n+\n+To make this more clear, let's look at a diagram of memory layout in\n+the case where `shape` points at a rectangle:\n+\n+~~~ {.text}\n+Stack             Memory\n+\n++-------+         +---------------+\n+| shape | ------> | rectangle(    |\n++-------+         |   {x: f64,    |\n+| size  | -+      |    y: f64},   |\n++-------+  +----> |   {w: f64,    |\n+                  |    h: f64})   |\n+                  +---------------+\n+~~~\n+\n+Here you can see that rectangular shapes are composed of five words of\n+memory. The first is a tag indicating which variant this enum is\n+(`rectangle`, in this case). The next two words are the `x` and `y`\n+fields for the point and the remaining two are the `w` and `h` fields\n+for the size. The binding `size` is then a pointer into the inside of\n+the shape.\n+\n+Perhaps you can see where the danger lies: if the shape were somehow\n+to be reassigned, perhaps to a circle, then although the memory used\n+to store that shape value would still be valid, _it would have a\n+different type_! The following diagram shows what memory would look\n+like if code overwrote `shape` with a circle:\n+\n+~~~ {.text}\n+Stack             Memory\n+\n++-------+         +---------------+\n+| shape | ------> | circle(       |\n++-------+         |   {x: f64,    |\n+| size  | -+      |    y: f64},   |\n++-------+  +----> |   f64)        |\n+                  |               |\n+                  +---------------+\n+~~~\n+\n+As you can see, the `size` pointer would be pointing at a `f64`\n+instead of a struct. This is not good: dereferencing the second field\n+of a `f64` as if it were a struct with two fields would be a memory\n+safety violation.\n+\n+So, in fact, for every `ref` binding, the compiler will impose the\n+same rules as the ones we saw for borrowing the interior of an owned\n+box: it must be able to guarantee that the `enum` will not be\n+overwritten for the duration of the borrow.  In fact, the compiler\n+would accept the example we gave earlier. The example is safe because\n+the shape pointer has type `&Shape`, which means \"reference to\n+immutable memory containing a `shape`\". If, however, the type of that\n+pointer were `&mut Shape`, then the ref binding would be ill-typed.\n+Just as with owned boxes, the compiler will permit `ref` bindings\n+into data owned by the stack frame even if the data are mutable,\n+but otherwise it requires that the data reside in immutable memory.\n+\n+# Returning references\n+\n+So far, all of the examples we have looked at, use references in a\n+\u201cdownward\u201d direction. That is, a method or code block creates a\n+reference, then uses it within the same scope. It is also\n+possible to return references as the result of a function, but\n+as we'll see, doing so requires some explicit annotation.\n+\n+We could write a subroutine like this:\n+\n+~~~\n+struct Point {x: f64, y: f64}\n+fn get_x<'r>(p: &'r Point) -> &'r f64 { &p.x }\n+~~~\n+\n+Here, the function `get_x()` returns a pointer into the structure it\n+was given. The type of the parameter (`&'r Point`) and return type\n+(`&'r f64`) both use a new syntactic form that we have not seen so\n+far.  Here the identifier `r` names the lifetime of the pointer\n+explicitly. So in effect, this function declares that it takes a\n+pointer with lifetime `r` and returns a pointer with that same\n+lifetime.\n+\n+In general, it is only possible to return references if they\n+are derived from a parameter to the procedure. In that case, the\n+pointer result will always have the same lifetime as one of the\n+parameters; named lifetimes indicate which parameter that\n+is.\n+\n+In the previous code samples, function parameter types did not include a\n+lifetime name. The compiler simply creates a fresh name for the lifetime\n+automatically: that is, the lifetime name is guaranteed to refer to a distinct\n+lifetime from the lifetimes of all other parameters.\n+\n+Named lifetimes that appear in function signatures are conceptually\n+the same as the other lifetimes we have seen before, but they are a bit\n+abstract: they don\u2019t refer to a specific expression within `get_x()`,\n+but rather to some expression within the *caller of `get_x()`*.  The\n+lifetime `r` is actually a kind of *lifetime parameter*: it is defined\n+by the caller to `get_x()`, just as the value for the parameter `p` is\n+defined by that caller.\n+\n+In any case, whatever the lifetime of `r` is, the pointer produced by\n+`&p.x` always has the same lifetime as `p` itself: a pointer to a\n+field of a struct is valid as long as the struct is valid. Therefore,\n+the compiler accepts the function `get_x()`.\n+\n+In general, if you borrow a struct or box to create a\n+reference, it will only be valid within the function\n+and cannot be returned. This is why the typical way to return references\n+is to take references as input (the only other case in\n+which it can be legal to return a reference is if it\n+points at a static constant).\n+\n+# Named lifetimes\n+\n+Lifetimes can be named and referenced. For example, the special lifetime\n+`'static`, which does not go out of scope, can be used to create global\n+variables and communicate between tasks (see the manual for use cases).\n+\n+## Parameter Lifetimes\n+\n+Named lifetimes allow for grouping of parameters by lifetime.\n+For example, consider this function:\n+\n+~~~\n+# struct Point {x: f64, y: f64}; // as before\n+# struct Size {w: f64, h: f64}; // as before\n+# enum Shape {\n+#     Circle(Point, f64),   // origin, radius\n+#     Rectangle(Point, Size)  // upper-left, dimensions\n+# }\n+# fn compute_area(shape: &Shape) -> f64 { 0.0 }\n+fn select<'r, T>(shape: &'r Shape, threshold: f64,\n+                 a: &'r T, b: &'r T) -> &'r T {\n+    if compute_area(shape) > threshold {a} else {b}\n+}\n+~~~\n+\n+This function takes three references and assigns each the same\n+lifetime `r`.  In practice, this means that, in the caller, the\n+lifetime `r` will be the *intersection of the lifetime of the three\n+region parameters*. This may be overly conservative, as in this\n+example:\n+\n+~~~\n+# struct Point {x: f64, y: f64}; // as before\n+# struct Size {w: f64, h: f64}; // as before\n+# enum Shape {\n+#     Circle(Point, f64),   // origin, radius\n+#     Rectangle(Point, Size)  // upper-left, dimensions\n+# }\n+# fn compute_area(shape: &Shape) -> f64 { 0.0 }\n+# fn select<'r, T>(shape: &Shape, threshold: f64,\n+#                  a: &'r T, b: &'r T) -> &'r T {\n+#     if compute_area(shape) > threshold {a} else {b}\n+# }\n+                                                            // -+ r\n+fn select_based_on_unit_circle<'r, T>(                      //  |-+ B\n+    threshold: f64, a: &'r T, b: &'r T) -> &'r T {          //  | |\n+                                                            //  | |\n+    let shape = Shape::Circle(Point {x: 0., y: 0.}, 1.);    //  | |\n+    select(&shape, threshold, a, b)                         //  | |\n+}                                                           //  |-+\n+                                                            // -+\n+~~~\n+\n+In this call to `select()`, the lifetime of the first parameter shape\n+is B, the function body. Both of the second two parameters `a` and `b`\n+share the same lifetime, `r`, which is a lifetime parameter of\n+`select_based_on_unit_circle()`. The caller will infer the\n+intersection of these two lifetimes as the lifetime of the returned\n+value, and hence the return value of `select()` will be assigned a\n+lifetime of B. This will in turn lead to a compilation error, because\n+`select_based_on_unit_circle()` is supposed to return a value with the\n+lifetime `r`.\n+\n+To address this, we can modify the definition of `select()` to\n+distinguish the lifetime of the first parameter from the lifetime of\n+the latter two. After all, the first parameter is not being\n+returned. Here is how the new `select()` might look:\n+\n+~~~\n+# struct Point {x: f64, y: f64}; // as before\n+# struct Size {w: f64, h: f64}; // as before\n+# enum Shape {\n+#     Circle(Point, f64),   // origin, radius\n+#     Rectangle(Point, Size)  // upper-left, dimensions\n+# }\n+# fn compute_area(shape: &Shape) -> f64 { 0.0 }\n+fn select<'r, 'tmp, T>(shape: &'tmp Shape, threshold: f64,\n+                       a: &'r T, b: &'r T) -> &'r T {\n+    if compute_area(shape) > threshold {a} else {b}\n+}\n+~~~\n+\n+Here you can see that `shape`'s lifetime is now named `tmp`. The\n+parameters `a`, `b`, and the return value all have the lifetime `r`.\n+However, since the lifetime `tmp` is not returned, it would be more\n+concise to just omit the named lifetime for `shape` altogether:\n+\n+~~~\n+# struct Point {x: f64, y: f64}; // as before\n+# struct Size {w: f64, h: f64}; // as before\n+# enum Shape {\n+#     Circle(Point, f64),   // origin, radius\n+#     Rectangle(Point, Size)  // upper-left, dimensions\n+# }\n+# fn compute_area(shape: &Shape) -> f64 { 0.0 }\n+fn select<'r, T>(shape: &Shape, threshold: f64,\n+                 a: &'r T, b: &'r T) -> &'r T {\n+    if compute_area(shape) > threshold {a} else {b}\n+}\n+~~~\n+\n+This is equivalent to the previous definition.\n+\n+## Labeled Control Structures\n+\n+Named lifetime notation can also be used to control the flow of execution:\n+\n+~~~\n+'h: for i in range(0u, 10) {\n+    'g: loop {\n+        if i % 2 == 0 { continue 'h; }\n+        if i == 9 { break 'h; }\n+        break 'g;\n+    }\n+}\n+~~~\n+\n+> *Note:* Labelled breaks are not currently supported within `while` loops.\n+\n+Named labels are hygienic and can be used safely within macros.\n+See the macros guide section on hygiene for more details.\n+\n+# Conclusion\n+\n+So there you have it: a (relatively) brief tour of the lifetime\n+system. For more details, we refer to the (yet to be written) reference\n+document on references, which will explain the full notation\n+and give more examples."}, {"sha": "c81cdc465c8fc3d7588a91e2381ea15a1813729c", "filename": "src/doc/trpl/src/hello-cargo.md", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fhello-cargo.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,108 @@\n+# Hello, Cargo!\n+\n+[Cargo](http://crates.io) is a tool that Rustaceans use to help manage their\n+Rust projects. Cargo is currently in an alpha state, just like Rust, and so it\n+is still a work in progress. However, it is already good enough to use for many\n+Rust projects, and so it is assumed that Rust projects will use Cargo from the\n+beginning.\n+\n+Cargo manages three things: building your code, downloading the dependencies\n+your code needs, and building the dependencies your code needs.  At first, your\n+program doesn't have any dependencies, so we'll only be using the first part of\n+its functionality. Eventually, we'll add more. Since we started off by using\n+Cargo, it'll be easy to add later.\n+\n+If you installed Rust via the official installers you will also have\n+Cargo. If you installed Rust some other way, you may want to [check\n+the Cargo\n+README](https://github.com/rust-lang/cargo#installing-cargo-from-nightlies)\n+for specific instructions about installing it.\n+\n+Let's convert Hello World to Cargo.\n+\n+To Cargo-ify our project, we need to do two things: Make a `Cargo.toml`\n+configuration file, and put our source file in the right place. Let's\n+do that part first:\n+\n+```{bash}\n+$ mkdir src\n+$ mv main.rs src/main.rs\n+```\n+\n+Cargo expects your source files to live inside a `src` directory. That leaves\n+the top level for other things, like READMEs, license information, and anything\n+not related to your code. Cargo helps us keep our projects nice and tidy. A\n+place for everything, and everything in its place.\n+\n+Next, our configuration file:\n+\n+```{bash}\n+$ editor Cargo.toml\n+```\n+\n+Make sure to get this name right: you need the capital `C`!\n+\n+Put this inside:\n+\n+```toml\n+[package]\n+\n+name = \"hello_world\"\n+version = \"0.0.1\"\n+authors = [ \"Your name <you@example.com>\" ]\n+\n+[[bin]]\n+\n+name = \"hello_world\"\n+```\n+\n+This file is in the [TOML](https://github.com/toml-lang/toml) format. Let's let\n+it explain itself to you:\n+\n+> TOML aims to be a minimal configuration file format that's easy to read due\n+> to obvious semantics. TOML is designed to map unambiguously to a hash table.\n+> TOML should be easy to parse into data structures in a wide variety of\n+> languages.\n+\n+TOML is very similar to INI, but with some extra goodies.\n+\n+Anyway, there are two **table**s in this file: `package` and `bin`. The first\n+tells Cargo metadata about your package. The second tells Cargo that we're\n+interested in building a binary, not a library (though we could do both!), as\n+well as what it is named.\n+\n+Once you have this file in place, we should be ready to build! Try this:\n+\n+```{bash}\n+$ cargo build\n+   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n+$ ./target/hello_world\n+Hello, world!\n+```\n+\n+Bam! We build our project with `cargo build`, and run it with\n+`./target/hello_world`. This hasn't bought us a whole lot over our simple use\n+of `rustc`, but think about the future: when our project has more than one\n+file, we would need to call `rustc` more than once, and pass it a bunch of options to\n+tell it to build everything together. With Cargo, as our project grows, we can\n+just `cargo build` and it'll work the right way.\n+\n+You'll also notice that Cargo has created a new file: `Cargo.lock`.\n+\n+```toml\n+[root]\n+name = \"hello_world\"\n+version = \"0.0.1\"\n+```\n+\n+This file is used by Cargo to keep track of dependencies in your application.\n+Right now, we don't have any, so it's a bit sparse. You won't ever need\n+to touch this file yourself, just let Cargo handle it.\n+\n+That's it! We've successfully built `hello_world` with Cargo. Even though our\n+program is simple, it's using much of the real tooling that you'll use for the\n+rest of your Rust career.\n+\n+Now that you've got the tools down, let's actually learn more about the Rust\n+language itself. These are the basics that will serve you well through the rest\n+of your time with Rust."}, {"sha": "33cb752c3646814c029b7e2dab20de591e117e9f", "filename": "src/doc/trpl/src/hello-world.md", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fhello-world.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fhello-world.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fhello-world.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,164 @@\n+# Hello, world!\n+\n+Now that you have Rust installed, let's write your first Rust program. It's\n+traditional to make your first program in any new language one that prints the\n+text \"Hello, world!\" to the screen. The nice thing about starting with such a\n+simple program is that you can verify that your compiler isn't just installed,\n+but also working properly. And printing information to the screen is a pretty\n+common thing to do.\n+\n+The first thing that we need to do is make a file to put our code in. I like\n+to make a `projects` directory in my home directory, and keep all my projects\n+there. Rust does not care where your code lives.\n+\n+This actually leads to one other concern we should address: this guide will\n+assume that you have basic familiarity with the command line. Rust does not\n+require that you know a whole ton about the command line, but until the\n+language is in a more finished state, IDE support is spotty. Rust makes no\n+specific demands on your editing tooling, or where your code lives.\n+\n+With that said, let's make a directory in our projects directory.\n+\n+```{bash}\n+$ mkdir ~/projects\n+$ cd ~/projects\n+$ mkdir hello_world\n+$ cd hello_world\n+```\n+\n+If you're on Windows and not using PowerShell, the `~` may not work. Consult\n+the documentation for your shell for more details.\n+\n+Let's make a new source file next. I'm going to use the syntax `editor\n+filename` to represent editing a file in these examples, but you should use\n+whatever method you want. We'll call our file `main.rs`:\n+\n+```{bash}\n+$ editor main.rs\n+```\n+\n+Rust files always end in a `.rs` extension. If you're using more than one word\n+in your filename, use an underscore. `hello_world.rs` rather than\n+`helloworld.rs`.\n+\n+Now that you've got your file open, type this in:\n+\n+```{rust}\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+Save the file, and then type this into your terminal window:\n+\n+```{bash}\n+$ rustc main.rs\n+$ ./main # or main.exe on Windows\n+Hello, world!\n+```\n+\n+You can also run these examples on [play.rust-lang.org](http://play.rust-lang.org/) by clicking on the arrow that appears in the upper right of the example when you mouse over the code.\n+\n+Success! Let's go over what just happened in detail.\n+\n+```{rust}\n+fn main() {\n+\n+}\n+```\n+\n+These lines define a **function** in Rust. The `main` function is special:\n+it's the beginning of every Rust program. The first line says \"I'm declaring a\n+function named `main`, which takes no arguments and returns nothing.\" If there\n+were arguments, they would go inside the parentheses (`(` and `)`), and because\n+we aren't returning anything from this function, we've dropped that notation\n+entirely.  We'll get to it later.\n+\n+You'll also note that the function is wrapped in curly braces (`{` and `}`).\n+Rust requires these around all function bodies. It is also considered good\n+style to put the opening curly brace on the same line as the function\n+declaration, with one space in between.\n+\n+Next up is this line:\n+\n+```{rust}\n+    println!(\"Hello, world!\");\n+```\n+\n+This line does all of the work in our little program. There are a number of\n+details that are important here. The first is that it's indented with four\n+spaces, not tabs. Please configure your editor of choice to insert four spaces\n+with the tab key. We provide some [sample configurations for various\n+editors](https://github.com/rust-lang/rust/tree/master/src/etc).\n+\n+The second point is the `println!()` part. This is calling a Rust **macro**,\n+which is how metaprogramming is done in Rust. If it were a function instead, it\n+would look like this: `println()`. For our purposes, we don't need to worry\n+about this difference. Just know that sometimes, you'll see a `!`, and that\n+means that you're calling a macro instead of a normal function. Rust implements\n+`println!` as a macro rather than a function for good reasons, but that's a\n+very advanced topic. You'll learn more when we talk about macros later. One\n+last thing to mention: Rust's macros are significantly different from C macros,\n+if you've used those. Don't be scared of using macros. We'll get to the details\n+eventually, you'll just have to trust us for now.\n+\n+Next, `\"Hello, world!\"` is a **string**. Strings are a surprisingly complicated\n+topic in a systems programming language, and this is a **statically allocated**\n+string. We will talk more about different kinds of allocation later. We pass\n+this string as an argument to `println!`, which prints the string to the\n+screen. Easy enough!\n+\n+Finally, the line ends with a semicolon (`;`). Rust is an **expression\n+oriented** language, which means that most things are expressions. The `;` is\n+used to indicate that this expression is over, and the next one is ready to\n+begin. Most lines of Rust code end with a `;`. We will cover this in-depth\n+later in the guide.\n+\n+Finally, actually **compiling** and **running** our program. We can compile\n+with our compiler, `rustc`, by passing it the name of our source file:\n+\n+```{bash}\n+$ rustc main.rs\n+```\n+\n+This is similar to `gcc` or `clang`, if you come from a C or C++ background. Rust\n+will output a binary executable. You can see it with `ls`:\n+\n+```{bash}\n+$ ls\n+main  main.rs\n+```\n+\n+Or on Windows:\n+\n+```{bash}\n+$ dir\n+main.exe  main.rs\n+```\n+\n+There are now two files: our source code, with the `.rs` extension, and the\n+executable (`main.exe` on Windows, `main` everywhere else)\n+\n+```{bash}\n+$ ./main  # or main.exe on Windows\n+```\n+\n+This prints out our `Hello, world!` text to our terminal.\n+\n+If you come from a dynamically typed language like Ruby, Python, or JavaScript,\n+you may not be used to these two steps being separate. Rust is an\n+**ahead-of-time compiled language**, which means that you can compile a\n+program, give it to someone else, and they don't need to have Rust installed.\n+If you give someone a `.rb` or `.py` or `.js` file, they need to have\n+Ruby/Python/JavaScript installed, but you just need one command to both compile\n+and run your program. Everything is a tradeoff in language design, and Rust has\n+made its choice.\n+\n+Congratulations! You have officially written a Rust program. That makes you a\n+Rust programmer! Welcome.\n+\n+Next, I'd like to introduce you to another tool, Cargo, which is used to write\n+real-world Rust programs. Just using `rustc` is nice for simple things, but as\n+your project grows, you'll want something to help you manage all of the options\n+that it has, and to make it easy to share your code with other people and\n+projects."}, {"sha": "bc3d548ce9f055a25489798d6cd5e149cced2070", "filename": "src/doc/trpl/src/if.md", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fif.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fif.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fif.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,141 @@\n+# `if`\n+\n+Rust's take on `if` is not particularly complex, but it's much more like the\n+`if` you'll find in a dynamically typed language than in a more traditional\n+systems language. So let's talk about it, to make sure you grasp the nuances.\n+\n+`if` is a specific form of a more general concept, the 'branch.' The name comes\n+from a branch in a tree: a decision point, where depending on a choice,\n+multiple paths can be taken.\n+\n+In the case of `if`, there is one choice that leads down two paths:\n+\n+```rust\n+let x = 5;\n+\n+if x == 5 {\n+    println!(\"x is five!\");\n+}\n+```\n+\n+If we changed the value of `x` to something else, this line would not print.\n+More specifically, if the expression after the `if` evaluates to `true`, then\n+the block is executed. If it's `false`, then it is not.\n+\n+If you want something to happen in the `false` case, use an `else`:\n+\n+```{rust}\n+let x = 5;\n+\n+if x == 5 {\n+    println!(\"x is five!\");\n+} else {\n+    println!(\"x is not five :(\");\n+}\n+```\n+\n+This is all pretty standard. However, you can also do this:\n+\n+\n+```{rust}\n+let x = 5;\n+\n+let y = if x == 5 {\n+    10\n+} else {\n+    15\n+}; // y: i32\n+```\n+\n+Which we can (and probably should) write like this:\n+\n+```{rust}\n+let x = 5;\n+\n+let y = if x == 5 { 10 } else { 15 }; // y: i32\n+```\n+\n+This reveals two interesting things about Rust: it is an expression-based\n+language, and semicolons are different from semicolons in other 'curly brace\n+and semicolon'-based languages. These two things are related.\n+\n+## Expressions vs. Statements\n+\n+Rust is primarily an expression based language. There are only two kinds of\n+statements, and everything else is an expression.\n+\n+So what's the difference? Expressions return a value, and statements do not.\n+In many languages, `if` is a statement, and therefore, `let x = if ...` would\n+make no sense. But in Rust, `if` is an expression, which means that it returns\n+a value. We can then use this value to initialize the binding.\n+\n+Speaking of which, bindings are a kind of the first of Rust's two statements.\n+The proper name is a **declaration statement**. So far, `let` is the only kind\n+of declaration statement we've seen. Let's talk about that some more.\n+\n+In some languages, variable bindings can be written as expressions, not just\n+statements. Like Ruby:\n+\n+```{ruby}\n+x = y = 5\n+```\n+\n+In Rust, however, using `let` to introduce a binding is _not_ an expression. The\n+following will produce a compile-time error:\n+\n+```{ignore}\n+let x = (let y = 5); // expected identifier, found keyword `let`\n+```\n+\n+The compiler is telling us here that it was expecting to see the beginning of\n+an expression, and a `let` can only begin a statement, not an expression.\n+\n+Note that assigning to an already-bound variable (e.g. `y = 5`) is still an\n+expression, although its value is not particularly useful. Unlike C, where an\n+assignment evaluates to the assigned value (e.g. `5` in the previous example),\n+in Rust the value of an assignment is the unit type `()` (which we'll cover later).\n+\n+The second kind of statement in Rust is the **expression statement**. Its\n+purpose is to turn any expression into a statement. In practical terms, Rust's\n+grammar expects statements to follow other statements. This means that you use\n+semicolons to separate expressions from each other. This means that Rust\n+looks a lot like most other languages that require you to use semicolons\n+at the end of every line, and you will see semicolons at the end of almost\n+every line of Rust code you see.\n+\n+What is this exception that makes us say 'almost?' You saw it already, in this\n+code:\n+\n+```{rust}\n+let x = 5;\n+\n+let y: i32 = if x == 5 { 10 } else { 15 };\n+```\n+\n+Note that I've added the type annotation to `y`, to specify explicitly that I\n+want `y` to be an integer.\n+\n+This is not the same as this, which won't compile:\n+\n+```{ignore}\n+let x = 5;\n+\n+let y: i32 = if x == 5 { 10; } else { 15; };\n+```\n+\n+Note the semicolons after the 10 and 15. Rust will give us the following error:\n+\n+```text\n+error: mismatched types: expected `i32` but found `()` (expected i32 but found ())\n+```\n+\n+We expected an integer, but we got `()`. `()` is pronounced 'unit', and is a\n+special type in Rust's type system. In Rust, `()` is _not_ a valid value for a\n+variable of type `i32`. It's only a valid value for variables of the type `()`,\n+which aren't very useful. Remember how we said statements don't return a value?\n+Well, that's the purpose of unit in this case. The semicolon turns any\n+expression into a statement by throwing away its value and returning unit\n+instead.\n+\n+There's one more time in which you won't see a semicolon at the end of a line\n+of Rust code. For that, we'll need our next concept: functions."}, {"sha": "1705893c397c2381ca52a932437325b8e64d49be", "filename": "src/doc/trpl/src/installing-rust.md", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Finstalling-rust.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,89 @@\n+# Installing Rust\n+\n+The first step to using Rust is to install it! There are a number of ways to\n+install Rust, but the easiest is to use the `rustup` script. If you're on\n+Linux or a Mac, all you need to do is this (note that you don't need to type\n+in the `$`s, they just indicate the start of each command):\n+\n+```bash\n+$ curl -L https://static.rust-lang.org/rustup.sh | sudo sh\n+```\n+\n+If you're concerned about the [potential insecurity](http://curlpipesh.tumblr.com/) of using `curl | sudo sh`,\n+please keep reading and see our disclaimer below. And feel free to use a two-step version of the installation and examine our installation script:\n+\n+```bash\n+$ curl -L https://static.rust-lang.org/rustup.sh -O\n+$ sudo sh rustup.sh\n+```\n+\n+If you're on Windows, please download either the [32-bit\n+installer](https://static.rust-lang.org/dist/rust-nightly-i686-pc-windows-gnu.exe)\n+or the [64-bit\n+installer](https://static.rust-lang.org/dist/rust-nightly-x86_64-pc-windows-gnu.exe)\n+and run it.\n+\n+If you decide you don't want Rust anymore, we'll be a bit sad, but that's okay.\n+Not every programming language is great for everyone. Just pass an argument to\n+the script:\n+\n+```bash\n+$ curl -s https://static.rust-lang.org/rustup.sh | sudo sh -s -- --uninstall\n+```\n+\n+If you used the Windows installer, just re-run the `.exe` and it will give you\n+an uninstall option.\n+\n+You can re-run this script any time you want to update Rust. Which, at this\n+point, is often. Rust is still pre-1.0, and so people assume that you're using\n+a very recent Rust.\n+\n+This brings me to one other point: some people, and somewhat rightfully so, get\n+very upset when we tell you to `curl | sudo sh`. And they should be! Basically,\n+when you do this, you are trusting that the good people who maintain Rust\n+aren't going to hack your computer and do bad things. That's a good instinct!\n+If you're one of those people, please check out the documentation on [building\n+Rust from Source](https://github.com/rust-lang/rust#building-from-source), or\n+[the official binary downloads](http://www.rust-lang.org/install.html). And we\n+promise that this method will not be the way to install Rust forever: it's just\n+the easiest way to keep people updated while Rust is in its alpha state.\n+\n+Oh, we should also mention the officially supported platforms:\n+\n+* Windows (7, 8, Server 2008 R2)\n+* Linux (2.6.18 or later, various distributions), x86 and x86-64\n+* OSX 10.7 (Lion) or greater, x86 and x86-64\n+\n+We extensively test Rust on these platforms, and a few others, too, like\n+Android. But these are the ones most likely to work, as they have the most\n+testing.\n+\n+Finally, a comment about Windows. Rust considers Windows to be a first-class\n+platform upon release, but if we're honest, the Windows experience isn't as\n+integrated as the Linux/OS X experience is. We're working on it! If anything\n+does not work, it is a bug. Please let us know if that happens. Each and every\n+commit is tested against Windows just like any other platform.\n+\n+If you've got Rust installed, you can open up a shell, and type this:\n+\n+```bash\n+$ rustc --version\n+```\n+\n+You should see some output that looks something like this:\n+\n+```bash\n+rustc 1.0.0-nightly (f11f3e7ba 2015-01-04 20:02:14 +0000)\n+```\n+\n+If you did, Rust has been installed successfully! Congrats!\n+\n+If not, there are a number of places where you can get help. The easiest is\n+[the #rust IRC channel on irc.mozilla.org](irc://irc.mozilla.org/#rust), which\n+you can access through\n+[Mibbit](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust). Click\n+that link, and you'll be chatting with other Rustaceans (a silly nickname we\n+call ourselves), and we can help you out. Other great resources include [our\n+forum](http://discuss.rust-lang.org/), [the /r/rust\n+subreddit](http://www.reddit.com/r/rust), and [Stack\n+Overflow](http://stackoverflow.com/questions/tagged/rust)."}, {"sha": "73370a32231ebec4d452ed56f65343959ccf6891", "filename": "src/doc/trpl/src/intermediate.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fintermediate.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fintermediate.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fintermediate.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,7 @@\n+% Intermediate\n+\n+This section contains individual chapters, which are self-contained. They focus\n+on specific topics, and can be read in any order.\n+\n+After reading \"Intermediate,\" you will have a solid understanding of Rust,\n+and will be able to understand most Rust code and write more complex programs."}, {"sha": "056e9a9720e137c9a2fc5d3817e28a079ec0b69f", "filename": "src/doc/trpl/src/iterators.md", "status": "added", "additions": 339, "deletions": 0, "changes": 339, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fiterators.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,339 @@\n+% Iterators\n+\n+Let's talk about loops.\n+\n+Remember Rust's `for` loop? Here's an example:\n+\n+```{rust}\n+for x in range(0i, 10i) {\n+    println!(\"{}\", x);\n+}\n+```\n+\n+Now that you know more Rust, we can talk in detail about how this works. The\n+`range` function returns an **iterator**. An iterator is something that we can\n+call the `.next()` method on repeatedly, and it gives us a sequence of things.\n+\n+Like this:\n+\n+```{rust}\n+let mut range = range(0i, 10i);\n+\n+loop {\n+    match range.next() {\n+        Some(x) => {\n+            println!(\"{}\", x);\n+        },\n+        None => { break }\n+    }\n+}\n+```\n+\n+We make a mutable binding to the return value of `range`, which is our iterator.\n+We then `loop`, with an inner `match`. This `match` is used on the result of\n+`range.next()`, which gives us a reference to the next value of the iterator.\n+`next` returns an `Option<int>`, in this case, which will be `Some(int)` when\n+we have a value and `None` once we run out. If we get `Some(int)`, we print it\n+out, and if we get `None`, we `break` out of the loop.\n+\n+This code sample is basically the same as our `for` loop version. The `for`\n+loop is just a handy way to write this `loop`/`match`/`break` construct.\n+\n+`for` loops aren't the only thing that uses iterators, however. Writing your\n+own iterator involves implementing the `Iterator` trait. While doing that is\n+outside of the scope of this guide, Rust provides a number of useful iterators\n+to accomplish various tasks. Before we talk about those, we should talk about a\n+Rust anti-pattern. And that's `range`.\n+\n+Yes, we just talked about how `range` is cool. But `range` is also very\n+primitive. For example, if you needed to iterate over the contents of\n+a vector, you may be tempted to write this:\n+\n+```{rust}\n+let nums = vec![1i, 2i, 3i];\n+\n+for i in range(0u, nums.len()) {\n+    println!(\"{}\", nums[i]);\n+}\n+```\n+\n+This is strictly worse than using an actual iterator. The `.iter()` method on\n+vectors returns an iterator which iterates through a reference to each element\n+of the vector in turn. So write this:\n+\n+```{rust}\n+let nums = vec![1i, 2i, 3i];\n+\n+for num in nums.iter() {\n+    println!(\"{}\", num);\n+}\n+```\n+\n+There are two reasons for this. First, this more directly expresses what we\n+mean. We iterate through the entire vector, rather than iterating through\n+indexes, and then indexing the vector. Second, this version is more efficient:\n+the first version will have extra bounds checking because it used indexing,\n+`nums[i]`. But since we yield a reference to each element of the vector in turn\n+with the iterator, there's no bounds checking in the second example. This is\n+very common with iterators: we can ignore unnecessary bounds checks, but still\n+know that we're safe.\n+\n+There's another detail here that's not 100% clear because of how `println!`\n+works. `num` is actually of type `&int`. That is, it's a reference to an `int`,\n+not an `int` itself. `println!` handles the dereferencing for us, so we don't\n+see it. This code works fine too:\n+\n+```{rust}\n+let nums = vec![1i, 2i, 3i];\n+\n+for num in nums.iter() {\n+    println!(\"{}\", *num);\n+}\n+```\n+\n+Now we're explicitly dereferencing `num`. Why does `iter()` give us references?\n+Well, if it gave us the data itself, we would have to be its owner, which would\n+involve making a copy of the data and giving us the copy. With references,\n+we're just borrowing a reference to the data, and so it's just passing\n+a reference, without needing to do the copy.\n+\n+So, now that we've established that `range` is often not what you want, let's\n+talk about what you do want instead.\n+\n+There are three broad classes of things that are relevant here: iterators,\n+**iterator adapters**, and **consumers**. Here's some definitions:\n+\n+* 'iterators' give you a sequence of values.\n+* 'iterator adapters' operate on an iterator, producing a new iterator with a\n+  different output sequence.\n+* 'consumers' operate on an iterator, producing some final set of values.\n+\n+Let's talk about consumers first, since you've already seen an iterator,\n+`range`.\n+\n+## Consumers\n+\n+A 'consumer' operates on an iterator, returning some kind of value or values.\n+The most common consumer is `collect()`. This code doesn't quite compile,\n+but it shows the intention:\n+\n+```{rust,ignore}\n+let one_to_one_hundred = range(1i, 101i).collect();\n+```\n+\n+As you can see, we call `collect()` on our iterator. `collect()` takes\n+as many values as the iterator will give it, and returns a collection\n+of the results. So why won't this compile? Rust can't determine what\n+type of things you want to collect, and so you need to let it know.\n+Here's the version that does compile:\n+\n+```{rust}\n+let one_to_one_hundred = range(1i, 101i).collect::<Vec<int>>();\n+```\n+\n+If you remember, the `::<>` syntax allows us to give a type hint,\n+and so we tell it that we want a vector of integers.\n+\n+`collect()` is the most common consumer, but there are others too. `find()`\n+is one:\n+\n+```{rust}\n+let greater_than_forty_two = range(0i, 100i)\n+                             .find(|x| *x > 42);\n+\n+match greater_than_forty_two {\n+    Some(_) => println!(\"We got some numbers!\"),\n+    None    => println!(\"No numbers found :(\"),\n+}\n+```\n+\n+`find` takes a closure, and works on a reference to each element of an\n+iterator. This closure returns `true` if the element is the element we're\n+looking for, and `false` otherwise. Because we might not find a matching\n+element, `find` returns an `Option` rather than the element itself.\n+\n+Another important consumer is `fold`. Here's what it looks like:\n+\n+```{rust}\n+let sum = range(1i, 4i)\n+              .fold(0i, |sum, x| sum + x);\n+```\n+\n+`fold()` is a consumer that looks like this:\n+`fold(base, |accumulator, element| ...)`. It takes two arguments: the first\n+is an element called the \"base\". The second is a closure that itself takes two\n+arguments: the first is called the \"accumulator,\" and the second is an\n+\"element.\" Upon each iteration, the closure is called, and the result is the\n+value of the accumulator on the next iteration. On the first iteration, the\n+base is the value of the accumulator.\n+\n+Okay, that's a bit confusing. Let's examine the values of all of these things\n+in this iterator:\n+\n+| base | accumulator | element | closure result |\n+|------|-------------|---------|----------------|\n+| 0i   | 0i          | 1i      | 1i             |\n+| 0i   | 1i          | 2i      | 3i             |\n+| 0i   | 3i          | 3i      | 6i             |\n+\n+We called `fold()` with these arguments:\n+\n+```{rust}\n+# range(1i, 4i)\n+.fold(0i, |sum, x| sum + x);\n+```\n+\n+So, `0i` is our base, `sum` is our accumulator, and `x` is our element.  On the\n+first iteration, we set `sum` to `0i`, and `x` is the first element of `nums`,\n+`1i`. We then add `sum` and `x`, which gives us `0i + 1i = 1i`. On the second\n+iteration, that value becomes our accumulator, `sum`, and the element is\n+the second element of the array, `2i`. `1i + 2i = 3i`, and so that becomes\n+the value of the accumulator for the last iteration. On that iteration,\n+`x` is the last element, `3i`, and `3i + 3i = 6i`, which is our final\n+result for our sum. `1 + 2 + 3 = 6`, and that's the result we got.\n+\n+Whew. `fold` can be a bit strange the first few times you see it, but once it\n+clicks, you can use it all over the place. Any time you have a list of things,\n+and you want a single result, `fold` is appropriate.\n+\n+Consumers are important due to one additional property of iterators we haven't\n+talked about yet: laziness. Let's talk some more about iterators, and you'll\n+see why consumers matter.\n+\n+## Iterators\n+\n+As we've said before, an iterator is something that we can call the\n+`.next()` method on repeatedly, and it gives us a sequence of things.\n+Because you need to call the method, this means that iterators\n+are **lazy** and don't need to generate all of the values upfront.\n+This code, for example, does not actually generate the numbers\n+`1-100`, and just creates a value that represents the sequence:\n+\n+```{rust}\n+let nums = range(1i, 100i);\n+```\n+\n+Since we didn't do anything with the range, it didn't generate the sequence.\n+Let's add the consumer:\n+\n+```{rust}\n+let nums = range(1i, 100i).collect::<Vec<int>>();\n+```\n+\n+Now, `collect()` will require that `range()` give it some numbers, and so\n+it will do the work of generating the sequence.\n+\n+`range` is one of two basic iterators that you'll see. The other is `iter()`,\n+which you've used before. `iter()` can turn a vector into a simple iterator\n+that gives you each element in turn:\n+\n+```{rust}\n+let nums = [1i, 2i, 3i];\n+\n+for num in nums.iter() {\n+   println!(\"{}\", num);\n+}\n+```\n+\n+These two basic iterators should serve you well. There are some more\n+advanced iterators, including ones that are infinite. Like `count`:\n+\n+```{rust}\n+std::iter::count(1i, 5i);\n+```\n+\n+This iterator counts up from one, adding five each time. It will give\n+you a new integer every time, forever (well, technically, until it reaches the\n+maximum number representable by an `int`). But since iterators are lazy,\n+that's okay! You probably don't want to use `collect()` on it, though...\n+\n+That's enough about iterators. Iterator adapters are the last concept\n+we need to talk about with regards to iterators. Let's get to it!\n+\n+## Iterator adapters\n+\n+\"Iterator adapters\" take an iterator and modify it somehow, producing\n+a new iterator. The simplest one is called `map`:\n+\n+```{rust,ignore}\n+range(1i, 100i).map(|x| x + 1i);\n+```\n+\n+`map` is called upon another iterator, and produces a new iterator where each\n+element reference has the closure it's been given as an argument called on it.\n+So this would give us the numbers from `2-100`. Well, almost! If you\n+compile the example, you'll get a warning:\n+\n+```{notrust,ignore}\n+warning: unused result which must be used: iterator adaptors are lazy and\n+         do nothing unless consumed, #[warn(unused_must_use)] on by default\n+ range(1i, 100i).map(|x| x + 1i);\n+ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+```\n+\n+Laziness strikes again! That closure will never execute. This example\n+doesn't print any numbers:\n+\n+```{rust,ignore}\n+range(1i, 100i).map(|x| println!(\"{}\", x));\n+```\n+\n+If you are trying to execute a closure on an iterator for its side effects,\n+just use `for` instead.\n+\n+There are tons of interesting iterator adapters. `take(n)` will return an\n+iterator over the next `n` elements of the original iterator, note that this\n+has no side effect on the original iterator. Let's try it out with our infinite\n+iterator from before, `count()`:\n+\n+```{rust}\n+for i in std::iter::count(1i, 5i).take(5) {\n+    println!(\"{}\", i);\n+}\n+```\n+\n+This will print\n+\n+```{notrust,ignore}\n+1\n+6\n+11\n+16\n+21\n+```\n+\n+`filter()` is an adapter that takes a closure as an argument. This closure\n+returns `true` or `false`. The new iterator `filter()` produces\n+only the elements that that closure returns `true` for:\n+\n+```{rust}\n+for i in range(1i, 100i).filter(|&x| x % 2 == 0) {\n+    println!(\"{}\", i);\n+}\n+```\n+\n+This will print all of the even numbers between one and a hundred.\n+(Note that because `filter` doesn't consume the elements that are\n+being iterated over, it is passed a reference to each element, and\n+thus the filter predicate uses the `&x` pattern to extract the integer\n+itself.)\n+\n+You can chain all three things together: start with an iterator, adapt it\n+a few times, and then consume the result. Check it out:\n+\n+```{rust}\n+range(1i, 1000i)\n+    .filter(|&x| x % 2 == 0)\n+    .filter(|&x| x % 3 == 0)\n+    .take(5)\n+    .collect::<Vec<int>>();\n+```\n+\n+This will give you a vector containing `6`, `12`, `18`, `24`, and `30`.\n+\n+This is just a small taste of what iterators, iterator adapters, and consumers\n+can help you with. There are a number of really useful iterators, and you can\n+write your own as well. Iterators provide a safe, efficient way to manipulate\n+all kinds of lists. They're a little unusual at first, but if you play with\n+them, you'll get hooked. For a full list of the different iterators and\n+consumers, check out the [iterator module documentation](std/iter/index.html)."}, {"sha": "03384b287030ca741ea1fbb4af02d49785fc1e91", "filename": "src/doc/trpl/src/looping.md", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Flooping.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Flooping.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Flooping.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,133 @@\n+# Looping\n+\n+Looping is the last basic construct that we haven't learned yet in Rust. Rust has\n+two main looping constructs: `for` and `while`.\n+\n+## `for`\n+\n+The `for` loop is used to loop a particular number of times. Rust's `for` loops\n+work a bit differently than in other systems languages, however. Rust's `for`\n+loop doesn't look like this \"C-style\" `for` loop:\n+\n+```{c}\n+for (x = 0; x < 10; x++) {\n+    printf( \"%d\\n\", x );\n+}\n+```\n+\n+Instead, it looks like this:\n+\n+```{rust}\n+for x in range(0, 10) {\n+    println!(\"{}\", x); // x: i32\n+}\n+```\n+\n+In slightly more abstract terms,\n+\n+```{ignore}\n+for var in expression {\n+    code\n+}\n+```\n+\n+The expression is an iterator, which we will discuss in more depth later in the\n+guide. The iterator gives back a series of elements. Each element is one\n+iteration of the loop. That value is then bound to the name `var`, which is\n+valid for the loop body. Once the body is over, the next value is fetched from\n+the iterator, and we loop another time. When there are no more values, the\n+`for` loop is over.\n+\n+In our example, `range` is a function that takes a start and an end position,\n+and gives an iterator over those values. The upper bound is exclusive, though,\n+so our loop will print `0` through `9`, not `10`.\n+\n+Rust does not have the \"C-style\" `for` loop on purpose. Manually controlling\n+each element of the loop is complicated and error prone, even for experienced C\n+developers.\n+\n+We'll talk more about `for` when we cover **iterator**s, later in the Guide.\n+\n+## `while`\n+\n+The other kind of looping construct in Rust is the `while` loop. It looks like\n+this:\n+\n+```{rust}\n+let mut x = 5u;       // mut x: uint\n+let mut done = false; // mut done: bool\n+\n+while !done {\n+    x += x - 3;\n+    println!(\"{}\", x);\n+    if x % 5 == 0 { done = true; }\n+}\n+```\n+\n+`while` loops are the correct choice when you're not sure how many times\n+you need to loop.\n+\n+If you need an infinite loop, you may be tempted to write this:\n+\n+```{rust,ignore}\n+while true {\n+```\n+\n+However, Rust has a dedicated keyword, `loop`, to handle this case:\n+\n+```{rust,ignore}\n+loop {\n+```\n+\n+Rust's control-flow analysis treats this construct differently than a\n+`while true`, since we know that it will always loop. The details of what\n+that _means_ aren't super important to understand at this stage, but in\n+general, the more information we can give to the compiler, the better it\n+can do with safety and code generation, so you should always prefer\n+`loop` when you plan to loop infinitely.\n+\n+## Ending iteration early\n+\n+Let's take a look at that `while` loop we had earlier:\n+\n+```{rust}\n+let mut x = 5u;\n+let mut done = false;\n+\n+while !done {\n+    x += x - 3;\n+    println!(\"{}\", x);\n+    if x % 5 == 0 { done = true; }\n+}\n+```\n+\n+We had to keep a dedicated `mut` boolean variable binding, `done`, to know\n+when we should exit out of the loop. Rust has two keywords to help us with\n+modifying iteration: `break` and `continue`.\n+\n+In this case, we can write the loop in a better way with `break`:\n+\n+```{rust}\n+let mut x = 5u;\n+\n+loop {\n+    x += x - 3;\n+    println!(\"{}\", x);\n+    if x % 5 == 0 { break; }\n+}\n+```\n+\n+We now loop forever with `loop` and use `break` to break out early.\n+\n+`continue` is similar, but instead of ending the loop, goes to the next\n+iteration. This will only print the odd numbers:\n+\n+```{rust}\n+for x in range(0, 10) {\n+    if x % 2 == 0 { continue; }\n+\n+    println!(\"{}\", x);\n+}\n+```\n+\n+Both `continue` and `break` are valid in both kinds of loops."}, {"sha": "95f5305775eedfa1147db08d02b35ffc7ed74498", "filename": "src/doc/trpl/src/macros.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fmacros.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "previous_filename": "src/doc/guide-macros.md"}, {"sha": "0170109def0227d64caad69d285ba9af32d3704c", "filename": "src/doc/trpl/src/match.md", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fmatch.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,156 @@\n+# Match\n+\n+Often, a simple `if`/`else` isn't enough, because you have more than two\n+possible options. Also, `else` conditions can get incredibly complicated, so\n+what's the solution?\n+\n+Rust has a keyword, `match`, that allows you to replace complicated `if`/`else`\n+groupings with something more powerful. Check it out:\n+\n+```{rust}\n+let x = 5;\n+\n+match x {\n+    1 => println!(\"one\"),\n+    2 => println!(\"two\"),\n+    3 => println!(\"three\"),\n+    4 => println!(\"four\"),\n+    5 => println!(\"five\"),\n+    _ => println!(\"something else\"),\n+}\n+```\n+\n+`match` takes an expression and then branches based on its value. Each 'arm' of\n+the branch is of the form `val => expression`. When the value matches, that arm's\n+expression will be evaluated. It's called `match` because of the term 'pattern\n+matching', which `match` is an implementation of.\n+\n+So what's the big advantage here? Well, there are a few. First of all, `match`\n+enforces 'exhaustiveness checking'. Do you see that last arm, the one with the\n+underscore (`_`)? If we remove that arm, Rust will give us an error:\n+\n+```text\n+error: non-exhaustive patterns: `_` not covered\n+```\n+\n+In other words, Rust is trying to tell us we forgot a value. Because `x` is an\n+integer, Rust knows that it can have a number of different values \u2013 for example,\n+`6`. Without the `_`, however, there is no arm that could match, and so Rust refuses\n+to compile. `_` acts like a 'catch-all arm'. If none of the other arms match,\n+the arm with `_` will, and since we have this catch-all arm, we now have an arm\n+for every possible value of `x`, and so our program will compile successfully.\n+\n+`match` statements also destructure enums, as well. Remember this code from the\n+section on enums?\n+\n+```{rust}\n+use std::cmp::Ordering;\n+\n+fn cmp(a: i32, b: i32) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+\n+fn main() {\n+    let x = 5;\n+    let y = 10;\n+\n+    let ordering = cmp(x, y);\n+\n+    if ordering == Ordering::Less {\n+        println!(\"less\");\n+    } else if ordering == Ordering::Greater {\n+        println!(\"greater\");\n+    } else if ordering == Ordering::Equal {\n+        println!(\"equal\");\n+    }\n+}\n+```\n+\n+We can re-write this as a `match`:\n+\n+```{rust}\n+use std::cmp::Ordering;\n+\n+fn cmp(a: i32, b: i32) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+\n+fn main() {\n+    let x = 5;\n+    let y = 10;\n+\n+    match cmp(x, y) {\n+        Ordering::Less    => println!(\"less\"),\n+        Ordering::Greater => println!(\"greater\"),\n+        Ordering::Equal   => println!(\"equal\"),\n+    }\n+}\n+```\n+\n+This version has way less noise, and it also checks exhaustively to make sure\n+that we have covered all possible variants of `Ordering`. With our `if`/`else`\n+version, if we had forgotten the `Greater` case, for example, our program would\n+have happily compiled. If we forget in the `match`, it will not. Rust helps us\n+make sure to cover all of our bases.\n+\n+`match` expressions also allow us to get the values contained in an `enum`\n+(also known as destructuring) as follows:\n+\n+```{rust}\n+enum OptionalInt {\n+    Value(i32),\n+    Missing,\n+}\n+\n+fn main() {\n+    let x = OptionalInt::Value(5);\n+    let y = OptionalInt::Missing;\n+\n+    match x {\n+        OptionalInt::Value(n) => println!(\"x is {}\", n),\n+        OptionalInt::Missing  => println!(\"x is missing!\"),\n+    }\n+\n+    match y {\n+        OptionalInt::Value(n) => println!(\"y is {}\", n),\n+        OptionalInt::Missing  => println!(\"y is missing!\"),\n+    }\n+}\n+```\n+\n+That is how you can get and use the values contained in `enum`s.\n+It can also allow us to handle errors or unexpected computations; for example, a\n+function that is not guaranteed to be able to compute a result (an `i32` here)\n+could return an `OptionalInt`, and we would handle that value with a `match`.\n+As you can see, `enum` and `match` used together are quite useful!\n+\n+`match` is also an expression, which means we can use it on the right-hand\n+side of a `let` binding or directly where an expression is used. We could\n+also implement the previous example like this:\n+\n+```{rust}\n+use std::cmp::Ordering;\n+\n+fn cmp(a: i32, b: i32) -> Ordering {\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n+}\n+\n+fn main() {\n+    let x = 5;\n+    let y = 10;\n+\n+    println!(\"{}\", match cmp(x, y) {\n+        Ordering::Less    => \"less\",\n+        Ordering::Greater => \"greater\",\n+        Ordering::Equal   => \"equal\",\n+    });\n+}\n+```\n+\n+Sometimes, it's a nice pattern."}, {"sha": "54e9cdf51911583112c93b02afcfc349827b92b4", "filename": "src/doc/trpl/src/method-syntax.md", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fmethod-syntax.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,88 @@\n+% Method Syntax\n+\n+Functions are great, but if you want to call a bunch of them on some data, it\n+can be awkward. Consider this code:\n+\n+```{rust,ignore}\n+baz(bar(foo(x)));\n+```\n+\n+We would read this left-to right, and so we see 'baz bar foo.' But this isn't the\n+order that the functions would get called in, that's inside-out: 'foo bar baz.'\n+Wouldn't it be nice if we could do this instead?\n+\n+```{rust,ignore}\n+x.foo().bar().baz();\n+```\n+\n+Luckily, as you may have guessed with the leading question, you can! Rust provides\n+the ability to use this **method call syntax** via the `impl` keyword.\n+\n+Here's how it works:\n+\n+```{rust}\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl Circle {\n+    fn area(&self) -> f64 {\n+        std::f64::consts::PI * (self.radius * self.radius)\n+    }\n+}\n+\n+fn main() {\n+    let c = Circle { x: 0.0, y: 0.0, radius: 2.0 };\n+    println!(\"{}\", c.area());\n+}\n+```\n+\n+This will print `12.566371`.\n+\n+We've made a struct that represents a circle. We then write an `impl` block,\n+and inside it, define a method, `area`. Methods take a  special first\n+parameter, `&self`. There are three variants: `self`, `&self`, and `&mut self`.\n+You can think of this first parameter as being the `x` in `x.foo()`. The three\n+variants correspond to the three kinds of thing `x` could be: `self` if it's\n+just a value on the stack, `&self` if it's a reference, and `&mut self` if it's\n+a mutable reference. We should default to using `&self`, as it's the most\n+common.\n+\n+Finally, as you may remember, the value of the area of a circle is `\u03c0*r\u00b2`.\n+Because we took the `&self` parameter to `area`, we can use it just like any\n+other parameter. Because we know it's a `Circle`, we can access the `radius`\n+just like we would with any other struct. An import of \u03c0 and some\n+multiplications later, and we have our area.\n+\n+You can also define methods that do not take a `self` parameter. Here's a\n+pattern that's very common in Rust code:\n+\n+```{rust}\n+# #![allow(non_shorthand_field_patterns)]\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl Circle {\n+    fn new(x: f64, y: f64, radius: f64) -> Circle {\n+        Circle {\n+            x: x,\n+            y: y,\n+            radius: radius,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let c = Circle::new(0.0, 0.0, 2.0);\n+}\n+```\n+\n+This **static method** builds a new `Circle` for us. Note that static methods\n+are called with the `Struct::method()` syntax, rather than the `ref.method()`\n+syntax.\n+"}, {"sha": "3db4da73f932ebf73d8c13a909ffd8d6702a2eff", "filename": "src/doc/trpl/src/ownership.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fownership.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "previous_filename": "src/doc/guide-ownership.md"}, {"sha": "282703c43874c1b8479fbcb80069407a8774d915", "filename": "src/doc/trpl/src/patterns.md", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fpatterns.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,199 @@\n+% Patterns\n+\n+We've made use of patterns a few times in the guide: first with `let` bindings,\n+then with `match` statements. Let's go on a whirlwind tour of all of the things\n+patterns can do!\n+\n+A quick refresher: you can match against literals directly, and `_` acts as an\n+'any' case:\n+\n+```{rust}\n+let x = 1i;\n+\n+match x {\n+    1 => println!(\"one\"),\n+    2 => println!(\"two\"),\n+    3 => println!(\"three\"),\n+    _ => println!(\"anything\"),\n+}\n+```\n+\n+You can match multiple patterns with `|`:\n+\n+```{rust}\n+let x = 1i;\n+\n+match x {\n+    1 | 2 => println!(\"one or two\"),\n+    3 => println!(\"three\"),\n+    _ => println!(\"anything\"),\n+}\n+```\n+\n+You can match a range of values with `...`:\n+\n+```{rust}\n+let x = 1i;\n+\n+match x {\n+    1 ... 5 => println!(\"one through five\"),\n+    _ => println!(\"anything\"),\n+}\n+```\n+\n+Ranges are mostly used with integers and single characters.\n+\n+If you're matching multiple things, via a `|` or a `...`, you can bind\n+the value to a name with `@`:\n+\n+```{rust}\n+let x = 1i;\n+\n+match x {\n+    e @ 1 ... 5 => println!(\"got a range element {}\", e),\n+    _ => println!(\"anything\"),\n+}\n+```\n+\n+If you're matching on an enum which has variants, you can use `..` to\n+ignore the value and type in the variant:\n+\n+```{rust}\n+enum OptionalInt {\n+    Value(int),\n+    Missing,\n+}\n+\n+let x = OptionalInt::Value(5i);\n+\n+match x {\n+    OptionalInt::Value(..) => println!(\"Got an int!\"),\n+    OptionalInt::Missing   => println!(\"No such luck.\"),\n+}\n+```\n+\n+You can introduce **match guards** with `if`:\n+\n+```{rust}\n+enum OptionalInt {\n+    Value(int),\n+    Missing,\n+}\n+\n+let x = OptionalInt::Value(5i);\n+\n+match x {\n+    OptionalInt::Value(i) if i > 5 => println!(\"Got an int bigger than five!\"),\n+    OptionalInt::Value(..) => println!(\"Got an int!\"),\n+    OptionalInt::Missing   => println!(\"No such luck.\"),\n+}\n+```\n+\n+If you're matching on a pointer, you can use the same syntax as you declared it\n+with. First, `&`:\n+\n+```{rust}\n+let x = &5i;\n+\n+match x {\n+    &val => println!(\"Got a value: {}\", val),\n+}\n+```\n+\n+Here, the `val` inside the `match` has type `int`. In other words, the left-hand\n+side of the pattern destructures the value. If we have `&5i`, then in `&val`, `val`\n+would be `5i`.\n+\n+If you want to get a reference, use the `ref` keyword:\n+\n+```{rust}\n+let x = 5i;\n+\n+match x {\n+    ref r => println!(\"Got a reference to {}\", r),\n+}\n+```\n+\n+Here, the `r` inside the `match` has the type `&int`. In other words, the `ref`\n+keyword _creates_ a reference, for use in the pattern. If you need a mutable\n+reference, `ref mut` will work in the same way:\n+\n+```{rust}\n+let mut x = 5i;\n+\n+match x {\n+    ref mut mr => println!(\"Got a mutable reference to {}\", mr),\n+}\n+```\n+\n+If you have a struct, you can destructure it inside of a pattern:\n+\n+```{rust}\n+# #![allow(non_shorthand_field_patterns)]\n+struct Point {\n+    x: int,\n+    y: int,\n+}\n+\n+let origin = Point { x: 0i, y: 0i };\n+\n+match origin {\n+    Point { x: x, y: y } => println!(\"({},{})\", x, y),\n+}\n+```\n+\n+If we only care about some of the values, we don't have to give them all names:\n+\n+```{rust}\n+# #![allow(non_shorthand_field_patterns)]\n+struct Point {\n+    x: int,\n+    y: int,\n+}\n+\n+let origin = Point { x: 0i, y: 0i };\n+\n+match origin {\n+    Point { x: x, .. } => println!(\"x is {}\", x),\n+}\n+```\n+\n+You can do this kind of match on any member, not just the first:\n+\n+```{rust}\n+# #![allow(non_shorthand_field_patterns)]\n+struct Point {\n+    x: int,\n+    y: int,\n+}\n+\n+let origin = Point { x: 0i, y: 0i };\n+\n+match origin {\n+    Point { y: y, .. } => println!(\"y is {}\", y),\n+}\n+```\n+\n+If you want to match against a slice or array, you can use `[]`:\n+\n+```{rust}\n+fn main() {\n+    let v = vec![\"match_this\", \"1\"];\n+\n+    match v.as_slice() {\n+        [\"match_this\", second] => println!(\"The second element is {}\", second),\n+        _ => {},\n+    }\n+}\n+```\n+\n+Whew! That's a lot of different ways to match things, and they can all be\n+mixed and matched, depending on what you're doing:\n+\n+```{rust,ignore}\n+match x {\n+    Foo { x: Some(ref name), y: None } => ...\n+}\n+```\n+\n+Patterns are very powerful.  Make good use of them."}, {"sha": "025f0cced63a6a6cb6b3dd37f793ecd07ba84a99", "filename": "src/doc/trpl/src/plugins.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fplugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fplugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fplugins.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "previous_filename": "src/doc/guide-plugin.md"}, {"sha": "4c35fae3ecc51d22b7a52a34b545f8e476da8456", "filename": "src/doc/trpl/src/pointers.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fpointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fpointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fpointers.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "previous_filename": "src/doc/guide-pointers.md"}, {"sha": "5a150594f0c0b9151c794fb7e5ff898e6310267b", "filename": "src/doc/trpl/src/standard-input.md", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fstandard-input.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fstandard-input.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fstandard-input.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,159 @@\n+# Standard Input\n+\n+Getting input from the keyboard is pretty easy, but uses some things\n+we haven't seen before. Here's a simple program that reads some input,\n+and then prints it back out:\n+\n+```{rust,ignore}\n+fn main() {\n+    println!(\"Type something!\");\n+\n+    let input = std::io::stdin().read_line().ok().expect(\"Failed to read line\");\n+\n+    println!(\"{}\", input);\n+}\n+```\n+\n+Let's go over these chunks, one by one:\n+\n+```{rust,ignore}\n+std::io::stdin();\n+```\n+\n+This calls a function, `stdin()`, that lives inside the `std::io` module. As\n+you can imagine, everything in `std` is provided by Rust, the 'standard\n+library.' We'll talk more about the module system later.\n+\n+Since writing the fully qualified name all the time is annoying, we can use\n+the `use` statement to import it in:\n+\n+```{rust}\n+use std::io::stdin;\n+\n+stdin();\n+```\n+\n+However, it's considered better practice to not import individual functions, but\n+to import the module, and only use one level of qualification:\n+\n+```{rust}\n+use std::io;\n+\n+io::stdin();\n+```\n+\n+Let's update our example to use this style:\n+\n+```{rust,ignore}\n+use std::io;\n+\n+fn main() {\n+    println!(\"Type something!\");\n+\n+    let input = io::stdin().read_line().ok().expect(\"Failed to read line\");\n+\n+    println!(\"{}\", input);\n+}\n+```\n+\n+Next up:\n+\n+```{rust,ignore}\n+.read_line()\n+```\n+\n+The `read_line()` method can be called on the result of `stdin()` to return\n+a full line of input. Nice and easy.\n+\n+```{rust,ignore}\n+.ok().expect(\"Failed to read line\");\n+```\n+\n+Do you remember this code?\n+\n+```{rust}\n+enum OptionalInt {\n+    Value(i32),\n+    Missing,\n+}\n+\n+fn main() {\n+    let x = OptionalInt::Value(5);\n+    let y = OptionalInt::Missing;\n+\n+    match x {\n+        OptionalInt::Value(n) => println!(\"x is {}\", n),\n+        OptionalInt::Missing  => println!(\"x is missing!\"),\n+    }\n+\n+    match y {\n+        OptionalInt::Value(n) => println!(\"y is {}\", n),\n+        OptionalInt::Missing  => println!(\"y is missing!\"),\n+    }\n+}\n+```\n+\n+We had to match each time to see if we had a value or not. In this case,\n+though, we _know_ that `x` has a `Value`, but `match` forces us to handle\n+the `missing` case. This is what we want 99% of the time, but sometimes, we\n+know better than the compiler.\n+\n+Likewise, `read_line()` does not return a line of input. It _might_ return a\n+line of input, though it might also fail to do so. This could happen if our program\n+isn't running in a terminal, but as part of a cron job, or some other context\n+where there's no standard input. Because of this, `read_line` returns a type\n+very similar to our `OptionalInt`: an `IoResult<T>`. We haven't talked about\n+`IoResult<T>` yet because it is the **generic** form of our `OptionalInt`.\n+Until then, you can think of it as being the same thing, just for any type \u2013\n+not just `i32`s.\n+\n+Rust provides a method on these `IoResult<T>`s called `ok()`, which does the\n+same thing as our `match` statement but assumes that we have a valid value.\n+We then call `expect()` on the result, which will terminate our program if we\n+don't have a valid value. In this case, if we can't get input, our program\n+doesn't work, so we're okay with that. In most cases, we would want to handle\n+the error case explicitly. `expect()` allows us to give an error message if\n+this crash happens.\n+\n+We will cover the exact details of how all of this works later in the Guide.\n+For now, this gives you enough of a basic understanding to work with.\n+\n+Back to the code we were working on! Here's a refresher:\n+\n+```{rust,ignore}\n+use std::io;\n+\n+fn main() {\n+    println!(\"Type something!\");\n+\n+    let input = io::stdin().read_line().ok().expect(\"Failed to read line\");\n+\n+    println!(\"{}\", input);\n+}\n+```\n+\n+With long lines like this, Rust gives you some flexibility with the whitespace.\n+We _could_ write the example like this:\n+\n+```{rust,ignore}\n+use std::io;\n+\n+fn main() {\n+    println!(\"Type something!\");\n+\n+                                                  // here, we'll show the types at each step\n+\n+    let input = io::stdin()                       // std::io::stdio::StdinReader\n+                  .read_line()                    // IoResult<String>\n+                  .ok()                           // Option<String>\n+                  .expect(\"Failed to read line\"); // String\n+\n+    println!(\"{}\", input);\n+}\n+```\n+\n+Sometimes, this makes things more readable \u2013 sometimes, less. Use your judgement\n+here.\n+\n+That's all you need to get basic input from the standard input! It's not too\n+complicated, but there are a number of small parts."}, {"sha": "be1d09f6e95301c3439e6df6bea5b8ba9a746e1b", "filename": "src/doc/trpl/src/strings.md", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fstrings.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,79 @@\n+# Strings\n+\n+Strings are an important concept for any programmer to master. Rust's string\n+handling system is a bit different from other languages, due to its systems\n+focus. Any time you have a data structure of variable size, things can get\n+tricky, and strings are a re-sizable data structure. That being said, Rust's\n+strings also work differently than in some other systems languages, such as C.\n+\n+Let's dig into the details. A **string** is a sequence of Unicode scalar values\n+encoded as a stream of UTF-8 bytes. All strings are guaranteed to be\n+validly encoded UTF-8 sequences. Additionally, strings are not null-terminated\n+and can contain null bytes.\n+\n+Rust has two main types of strings: `&str` and `String`.\n+\n+The first kind is a `&str`. This is pronounced a 'string slice.' String literals\n+are of the type `&str`:\n+\n+```{rust}\n+let string = \"Hello there.\"; // string: &str\n+```\n+\n+This string is statically allocated, meaning that it's saved inside our\n+compiled program, and exists for the entire duration it runs. The `string`\n+binding is a reference to this statically allocated string. String slices\n+have a fixed size, and cannot be mutated.\n+\n+A `String`, on the other hand, is an in-memory string.  This string is\n+growable, and is also guaranteed to be UTF-8.\n+\n+```{rust}\n+let mut s = \"Hello\".to_string(); // mut s: String\n+println!(\"{}\", s);\n+\n+s.push_str(\", world.\");\n+println!(\"{}\", s);\n+```\n+\n+You can get a `&str` view into a `String` with the `as_slice()` method:\n+\n+```{rust}\n+fn takes_slice(slice: &str) {\n+    println!(\"Got: {}\", slice);\n+}\n+\n+fn main() {\n+    let s = \"Hello\".to_string();\n+    takes_slice(s.as_slice());\n+}\n+```\n+\n+To compare a String to a constant string, prefer `as_slice()`...\n+\n+```{rust}\n+fn compare(string: String) {\n+    if string.as_slice() == \"Hello\" {\n+        println!(\"yes\");\n+    }\n+}\n+```\n+\n+... over `to_string()`:\n+\n+```{rust}\n+fn compare(string: String) {\n+    if string == \"Hello\".to_string() {\n+        println!(\"yes\");\n+    }\n+}\n+```\n+\n+Viewing a `String` as a `&str` is cheap, but converting the `&str` to a\n+`String` involves allocating memory. No reason to do that unless you have to!\n+\n+That's the basics of strings in Rust! They're probably a bit more complicated\n+than you are used to, if you come from a scripting language, but when the\n+low-level details matter, they really matter. Just remember that `String`s\n+allocate memory and control their data, while `&str`s are a reference to\n+another string, and you'll be all set."}, {"sha": "8eb13187e5841b8d1595ca846b0d9606be8c2ef8", "filename": "src/doc/trpl/src/tasks.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Ftasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Ftasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Ftasks.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "previous_filename": "src/doc/guide-tasks.md"}, {"sha": "4c3d93bdfbe5feb70333c8aa1fc7f1b419f66db7", "filename": "src/doc/trpl/src/testing.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Ftesting.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "previous_filename": "src/doc/guide-testing.md"}, {"sha": "04c644da2abbcd8f57145788ab7c0521c54082f8", "filename": "src/doc/trpl/src/traits.md", "status": "added", "additions": 317, "deletions": 0, "changes": 317, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Ftraits.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,317 @@\n+% Traits\n+\n+Do you remember the `impl` keyword, used to call a function with method\n+syntax?\n+\n+```{rust}\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl Circle {\n+    fn area(&self) -> f64 {\n+        std::f64::consts::PI * (self.radius * self.radius)\n+    }\n+}\n+```\n+\n+Traits are similar, except that we define a trait with just the method\n+signature, then implement the trait for that struct. Like this:\n+\n+```{rust}\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+trait HasArea {\n+    fn area(&self) -> f64;\n+}\n+\n+impl HasArea for Circle {\n+    fn area(&self) -> f64 {\n+        std::f64::consts::PI * (self.radius * self.radius)\n+    }\n+}\n+```\n+\n+As you can see, the `trait` block looks very similar to the `impl` block,\n+but we don't define a body, just a type signature. When we `impl` a trait,\n+we use `impl Trait for Item`, rather than just `impl Item`.\n+\n+So what's the big deal? Remember the error we were getting with our generic\n+`inverse` function?\n+\n+```text\n+error: binary operation `==` cannot be applied to type `T`\n+```\n+\n+We can use traits to constrain our generics. Consider this function, which\n+does not compile, and gives us a similar error:\n+\n+```{rust,ignore}\n+fn print_area<T>(shape: T) {\n+    println!(\"This shape has an area of {}\", shape.area());\n+}\n+```\n+\n+Rust complains:\n+\n+```text\n+error: type `T` does not implement any method in scope named `area`\n+```\n+\n+Because `T` can be any type, we can't be sure that it implements the `area`\n+method. But we can add a **trait constraint** to our generic `T`, ensuring\n+that it does:\n+\n+```{rust}\n+# trait HasArea {\n+#     fn area(&self) -> f64;\n+# }\n+fn print_area<T: HasArea>(shape: T) {\n+    println!(\"This shape has an area of {}\", shape.area());\n+}\n+```\n+\n+The syntax `<T: HasArea>` means `any type that implements the HasArea trait`.\n+Because traits define function type signatures, we can be sure that any type\n+which implements `HasArea` will have an `.area()` method.\n+\n+Here's an extended example of how this works:\n+\n+```{rust}\n+trait HasArea {\n+    fn area(&self) -> f64;\n+}\n+\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl HasArea for Circle {\n+    fn area(&self) -> f64 {\n+        std::f64::consts::PI * (self.radius * self.radius)\n+    }\n+}\n+\n+struct Square {\n+    x: f64,\n+    y: f64,\n+    side: f64,\n+}\n+\n+impl HasArea for Square {\n+    fn area(&self) -> f64 {\n+        self.side * self.side\n+    }\n+}\n+\n+fn print_area<T: HasArea>(shape: T) {\n+    println!(\"This shape has an area of {}\", shape.area());\n+}\n+\n+fn main() {\n+    let c = Circle {\n+        x: 0.0f64,\n+        y: 0.0f64,\n+        radius: 1.0f64,\n+    };\n+\n+    let s = Square {\n+        x: 0.0f64,\n+        y: 0.0f64,\n+        side: 1.0f64,\n+    };\n+\n+    print_area(c);\n+    print_area(s);\n+}\n+```\n+\n+This program outputs:\n+\n+```text\n+This shape has an area of 3.141593\n+This shape has an area of 1\n+```\n+\n+As you can see, `print_area` is now generic, but also ensures that we\n+have passed in the correct types. If we pass in an incorrect type:\n+\n+```{rust,ignore}\n+print_area(5i);\n+```\n+\n+We get a compile-time error:\n+\n+```text\n+error: failed to find an implementation of trait main::HasArea for int\n+```\n+\n+So far, we've only added trait implementations to structs, but you can\n+implement a trait for any type. So technically, we _could_ implement\n+`HasArea` for `int`:\n+\n+```{rust}\n+trait HasArea {\n+    fn area(&self) -> f64;\n+}\n+\n+impl HasArea for int {\n+    fn area(&self) -> f64 {\n+        println!(\"this is silly\");\n+\n+        *self as f64\n+    }\n+}\n+\n+5i.area();\n+```\n+\n+It is considered poor style to implement methods on such primitive types, even\n+though it is possible.\n+\n+This may seem like the Wild West, but there are two other restrictions around\n+implementing traits that prevent this from getting out of hand. First, traits\n+must be `use`d in any scope where you wish to use the trait's method. So for\n+example, this does not work:\n+\n+```{rust,ignore}\n+mod shapes {\n+    use std::f64::consts;\n+\n+    trait HasArea {\n+        fn area(&self) -> f64;\n+    }\n+\n+    struct Circle {\n+        x: f64,\n+        y: f64,\n+        radius: f64,\n+    }\n+\n+    impl HasArea for Circle {\n+        fn area(&self) -> f64 {\n+            consts::PI * (self.radius * self.radius)\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let c = shapes::Circle {\n+        x: 0.0f64,\n+        y: 0.0f64,\n+        radius: 1.0f64,\n+    };\n+\n+    println!(\"{}\", c.area());\n+}\n+```\n+\n+Now that we've moved the structs and traits into their own module, we get an\n+error:\n+\n+```text\n+error: type `shapes::Circle` does not implement any method in scope named `area`\n+```\n+\n+If we add a `use` line right above `main` and make the right things public,\n+everything is fine:\n+\n+```{rust}\n+use shapes::HasArea;\n+\n+mod shapes {\n+    use std::f64::consts;\n+\n+    pub trait HasArea {\n+        fn area(&self) -> f64;\n+    }\n+\n+    pub struct Circle {\n+        pub x: f64,\n+        pub y: f64,\n+        pub radius: f64,\n+    }\n+\n+    impl HasArea for Circle {\n+        fn area(&self) -> f64 {\n+            consts::PI * (self.radius * self.radius)\n+        }\n+    }\n+}\n+\n+\n+fn main() {\n+    let c = shapes::Circle {\n+        x: 0.0f64,\n+        y: 0.0f64,\n+        radius: 1.0f64,\n+    };\n+\n+    println!(\"{}\", c.area());\n+}\n+```\n+\n+This means that even if someone does something bad like add methods to `int`,\n+it won't affect you, unless you `use` that trait.\n+\n+There's one more restriction on implementing traits. Either the trait or the\n+type you're writing the `impl` for must be inside your crate. So, we could\n+implement the `HasArea` type for `int`, because `HasArea` is in our crate.  But\n+if we tried to implement `Float`, a trait provided by Rust, for `int`, we could\n+not, because both the trait and the type aren't in our crate.\n+\n+One last thing about traits: generic functions with a trait bound use\n+**monomorphization** (\"mono\": one, \"morph\": form), so they are statically\n+dispatched. What's that mean? Well, let's take a look at `print_area` again:\n+\n+```{rust,ignore}\n+fn print_area<T: HasArea>(shape: T) {\n+    println!(\"This shape has an area of {}\", shape.area());\n+}\n+\n+fn main() {\n+    let c = Circle { ... };\n+\n+    let s = Square { ... };\n+\n+    print_area(c);\n+    print_area(s);\n+}\n+```\n+\n+When we use this trait with `Circle` and `Square`, Rust ends up generating\n+two different functions with the concrete type, and replacing the call sites with\n+calls to the concrete implementations. In other words, you get something like\n+this:\n+\n+```{rust,ignore}\n+fn __print_area_circle(shape: Circle) {\n+    println!(\"This shape has an area of {}\", shape.area());\n+}\n+\n+fn __print_area_square(shape: Square) {\n+    println!(\"This shape has an area of {}\", shape.area());\n+}\n+\n+fn main() {\n+    let c = Circle { ... };\n+\n+    let s = Square { ... };\n+\n+    __print_area_circle(c);\n+    __print_area_square(s);\n+}\n+```\n+\n+The names don't actually change to this, it's just for illustration. But\n+as you can see, there's no overhead of deciding which version to call here,\n+hence 'statically dispatched.' The downside is that we have two copies of\n+the same function, so our binary is a little bit larger."}, {"sha": "25ca07ad74fe87047b44e6b48ae337653832dfa6", "filename": "src/doc/trpl/src/unsafe.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Funsafe.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "previous_filename": "src/doc/guide-unsafe.md"}, {"sha": "8cf2522b9afec27c68be2cf2fa115b2a15b60dae", "filename": "src/doc/trpl/src/variable-bindings.md", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fvariable-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Fdoc%2Ftrpl%2Fsrc%2Fvariable-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsrc%2Fvariable-bindings.md?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,174 @@\n+# Variable bindings\n+\n+The first thing we'll learn about are 'variable bindings.' They look like this:\n+\n+```{rust}\n+fn main() {\n+    let x = 5;\n+}\n+```\n+\n+Putting `fn main() {` in each example is a bit tedious, so we'll leave that out\n+in the future. If you're following along, make sure to edit your `main()`\n+function, rather than leaving it off. Otherwise, you'll get an error.\n+\n+In many languages, this is called a 'variable.' But Rust's variable bindings\n+have a few tricks up their sleeves. Rust has a very powerful feature called\n+'pattern matching' that we'll get into detail with later, but the left\n+hand side of a `let` expression is a full pattern, not just a variable name.\n+This means we can do things like:\n+\n+```{rust}\n+let (x, y) = (1, 2);\n+```\n+\n+After this expression is evaluated, `x` will be one, and `y` will be two.\n+Patterns are really powerful, but this is about all we can do with them so far.\n+So let's just keep this in the back of our minds as we go forward.\n+\n+Rust is a statically typed language, which means that we specify our types up\n+front. So why does our first example compile? Well, Rust has this thing called\n+\"type inference.\" If it can figure out what the type of something is, Rust\n+doesn't require you to actually type it out.\n+\n+We can add the type if we want to, though. Types come after a colon (`:`):\n+\n+```{rust}\n+let x: i32 = 5;\n+```\n+\n+If I asked you to read this out loud to the rest of the class, you'd say \"`x`\n+is a binding with the type `i32` and the value `five`.\"\n+\n+In future examples, we may annotate the type in a comment. The examples will\n+look like this:\n+\n+```{rust}\n+fn main() {\n+    let x = 5; // x: i32\n+}\n+```\n+\n+Note the similarities between this annotation and the syntax you use with `let`.\n+Including these kinds of comments is not idiomatic Rust, but we'll occasionally\n+include them to help you understand what the types that Rust infers are.\n+\n+By default, bindings are **immutable**. This code will not compile:\n+\n+```{ignore}\n+let x = 5;\n+x = 10;\n+```\n+\n+It will give you this error:\n+\n+```text\n+error: re-assignment of immutable variable `x`\n+     x = 10;\n+     ^~~~~~~\n+```\n+\n+If you want a binding to be mutable, you can use `mut`:\n+\n+```{rust}\n+let mut x = 5; // mut x: i32\n+x = 10;\n+```\n+\n+There is no single reason that bindings are immutable by default, but we can\n+think about it through one of Rust's primary focuses: safety. If you forget to\n+say `mut`, the compiler will catch it, and let you know that you have mutated\n+something you may not have intended to mutate. If bindings were mutable by\n+default, the compiler would not be able to tell you this. If you _did_ intend\n+mutation, then the solution is quite easy: add `mut`.\n+\n+There are other good reasons to avoid mutable state when possible, but they're\n+out of the scope of this guide. In general, you can often avoid explicit\n+mutation, and so it is preferable in Rust. That said, sometimes, mutation is\n+what you need, so it's not verboten.\n+\n+Let's get back to bindings. Rust variable bindings have one more aspect that\n+differs from other languages: bindings are required to be initialized with a\n+value before you're allowed to use them. If we try...\n+\n+```{ignore}\n+let x;\n+```\n+\n+...we'll get an error:\n+\n+```text\n+src/main.rs:2:9: 2:10 error: cannot determine a type for this local variable: unconstrained type\n+src/main.rs:2     let x;\n+                      ^\n+```\n+\n+Giving it a type will compile, though:\n+\n+```{rust}\n+let x: i32;\n+```\n+\n+Let's try it out. Change your `src/main.rs` file to look like this:\n+\n+```{rust}\n+fn main() {\n+    let x: i32;\n+\n+    println!(\"Hello world!\");\n+}\n+```\n+\n+You can use `cargo build` on the command line to build it. You'll get a warning,\n+but it will still print \"Hello, world!\":\n+\n+```text\n+   Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)\n+src/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variable)] on by default\n+src/main.rs:2     let x: i32;\n+                      ^\n+```\n+\n+Rust warns us that we never use the variable binding, but since we never use it,\n+no harm, no foul. Things change if we try to actually use this `x`, however. Let's\n+do that. Change your program to look like this:\n+\n+```{rust,ignore}\n+fn main() {\n+    let x: i32;\n+\n+    println!(\"The value of x is: {}\", x);\n+}\n+```\n+\n+And try to build it. You'll get an error:\n+\n+```{bash}\n+$ cargo build\n+   Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)\n+src/main.rs:4:39: 4:40 error: use of possibly uninitialized variable: `x`\n+src/main.rs:4     println!(\"The value of x is: {}\", x);\n+                                                    ^\n+note: in expansion of format_args!\n+<std macros>:2:23: 2:77 note: expansion site\n+<std macros>:1:1: 3:2 note: in expansion of println!\n+src/main.rs:4:5: 4:42 note: expansion site\n+error: aborting due to previous error\n+Could not compile `hello_world`.\n+```\n+\n+Rust will not let us use a value that has not been initialized. Next, let's\n+talk about this stuff we've added to `println!`.\n+\n+If you include two curly braces (`{}`, some call them moustaches...) in your\n+string to print, Rust will interpret this as a request to interpolate some sort\n+of value. **String interpolation** is a computer science term that means \"stick\n+in the middle of a string.\" We add a comma, and then `x`, to indicate that we\n+want `x` to be the value we're interpolating. The comma is used to separate\n+arguments we pass to functions and macros, if you're passing more than one.\n+\n+When you just use the curly braces, Rust will attempt to display the\n+value in a meaningful way by checking out its type. If you want to specify the\n+format in a more detailed manner, there are a [wide number of options\n+available](std/fmt/index.html). For now, we'll just stick to the default:\n+integers aren't very complicated to print."}, {"sha": "45a864e337813309db90bf7da62d22d289105303", "filename": "src/rustbook/book.rs", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fbook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fbook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbook.rs?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,166 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Basic data structures for representing a book.\n+\n+use std::io::BufferedReader;\n+use std::iter;\n+use std::iter::AdditiveIterator;\n+use regex::Regex;\n+\n+pub struct BookItem {\n+    pub title: String,\n+    pub path: Path,\n+    pub path_to_root: Path,\n+    pub children: Vec<BookItem>,\n+}\n+\n+pub struct Book {\n+    pub chapters: Vec<BookItem>,\n+}\n+\n+/// A depth-first iterator over a book.\n+pub struct BookItems<'a> {\n+    cur_items: &'a [BookItem],\n+    cur_idx: uint,\n+    stack: Vec<(&'a [BookItem], uint)>,\n+}\n+\n+impl<'a> Iterator for BookItems<'a> {\n+    type Item = (String, &'a BookItem);\n+\n+    fn next(&mut self) -> Option<(String, &'a BookItem)> {\n+        loop {\n+            if self.cur_idx >= self.cur_items.len() {\n+                match self.stack.pop() {\n+                    None => return None,\n+                    Some((parent_items, parent_idx)) => {\n+                        self.cur_items = parent_items;\n+                        self.cur_idx = parent_idx + 1;\n+                    }\n+                }\n+            } else {\n+                let cur = self.cur_items.get(self.cur_idx).unwrap();\n+\n+                let mut section = \"\".to_string();\n+                for &(_, idx) in self.stack.iter() {\n+                    section.push_str(&(idx + 1).to_string()[]);\n+                    section.push('.');\n+                }\n+                section.push_str(&(self.cur_idx + 1).to_string()[]);\n+                section.push('.');\n+\n+                self.stack.push((self.cur_items, self.cur_idx));\n+                self.cur_items = &cur.children[];\n+                self.cur_idx = 0;\n+                return Some((section, cur))\n+            }\n+        }\n+    }\n+}\n+\n+impl Book {\n+    pub fn iter(&self) -> BookItems {\n+        BookItems {\n+            cur_items: &self.chapters[],\n+            cur_idx: 0,\n+            stack: Vec::new(),\n+        }\n+    }\n+}\n+\n+/// Construct a book by parsing a summary (markdown table of contents).\n+pub fn parse_summary<R: Reader>(input: R, src: &Path) -> Result<Book, Vec<String>> {\n+    fn collapse(stack: &mut Vec<BookItem>,\n+                top_items: &mut Vec<BookItem>,\n+                to_level: uint) {\n+        loop {\n+            if stack.len() < to_level { return }\n+            if stack.len() == 1 {\n+                top_items.push(stack.pop().unwrap());\n+                return;\n+            }\n+\n+            let tip = stack.pop().unwrap();\n+            let last = stack.len() - 1;\n+            stack[last].children.push(tip);\n+        }\n+    }\n+\n+    let regex = r\"(?P<indent>[\\t ]*)\\*[:space:]*\\[(?P<title>.*)\\]\\((?P<path>.*)\\)\";\n+    let item_re = Regex::new(regex).unwrap();\n+    let mut top_items = vec!();\n+    let mut stack = vec!();\n+    let mut errors = vec!();\n+\n+    // always include the introduction\n+    top_items.push(BookItem {\n+        title: \"Introduction\".to_string(),\n+        path: Path::new(\"README.md\"),\n+        path_to_root: Path::new(\".\"),\n+        children: vec!(),\n+    });\n+\n+    for line_result in BufferedReader::new(input).lines() {\n+        let line = match line_result {\n+            Ok(line) => line,\n+            Err(err) => {\n+                errors.push(err.desc.to_string()); // FIXME: include detail\n+                return Err(errors);\n+            }\n+        };\n+\n+        item_re.captures(&line[]).map(|cap| {\n+            let given_path = cap.name(\"path\");\n+            let title = cap.name(\"title\").unwrap().to_string();\n+\n+            let path_from_root = match src.join(given_path.unwrap()).path_relative_from(src) {\n+                Some(p) => p,\n+                None => {\n+                    errors.push(format!(\"Paths in SUMMARY.md must be relative, \\\n+                                         but path '{}' for section '{}' is not.\",\n+                                         given_path.unwrap(), title));\n+                    Path::new(\"\")\n+                }\n+            };\n+            let path_to_root = Path::new(iter::repeat(\"../\")\n+                                             .take(path_from_root.components().count() - 1)\n+                                             .collect::<String>());\n+            let item = BookItem {\n+                title: title,\n+                path: path_from_root,\n+                path_to_root: path_to_root,\n+                children: vec!(),\n+            };\n+            let level = cap.name(\"indent\").unwrap().chars().map(|c| {\n+                match c {\n+                    ' ' => 1u,\n+                    '\\t' => 4,\n+                    _ => unreachable!()\n+                }\n+            }).sum() / 4 + 1;\n+\n+            if level > stack.len() + 1 {\n+                // FIXME: better error message\n+                errors.push(format!(\"Section '{}' is indented too many levels.\", item.title));\n+            } else if level <= stack.len() {\n+                collapse(&mut stack, &mut top_items, level);\n+            }\n+            stack.push(item)\n+        });\n+    }\n+\n+    if errors.is_empty() {\n+        collapse(&mut stack, &mut top_items, 1);\n+        Ok(Book { chapters: top_items })\n+    } else {\n+        Err(errors)\n+    }\n+}"}, {"sha": "db79e0b45e00f2d54835404378d892acd75f7e5f", "filename": "src/rustbook/build.rs", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbuild.rs?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,191 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Implementation of the `build` subcommand, used to compile a book.\n+\n+use std::os;\n+use std::io;\n+use std::io::{fs, File, BufferedWriter, TempDir, IoResult};\n+\n+use subcommand::Subcommand;\n+use term::Term;\n+use error::{Error, CliResult, CommandResult};\n+use book;\n+use book::{Book, BookItem};\n+use css;\n+\n+use regex::Regex;\n+\n+use rustdoc;\n+\n+struct Build;\n+\n+pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n+    if name == \"build\" {\n+        Some(box Build as Box<Subcommand>)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn write_toc(book: &Book, path_to_root: &Path, out: &mut Writer) -> IoResult<()> {\n+    fn walk_items(items: &[BookItem],\n+                  section: &str,\n+                  path_to_root: &Path,\n+                  out: &mut Writer) -> IoResult<()> {\n+        for (i, item) in items.iter().enumerate() {\n+            try!(walk_item(item, &format!(\"{}{}.\", section, i + 1)[], path_to_root, out));\n+        }\n+        Ok(())\n+    }\n+    fn walk_item(item: &BookItem,\n+                 section: &str,\n+                 path_to_root: &Path,\n+                 out: &mut Writer) -> IoResult<()> {\n+        try!(writeln!(out, \"<li><a href='{}'><b>{}</b> {}</a>\",\n+                 path_to_root.join(item.path.with_extension(\"html\")).display(),\n+                 section,\n+                 item.title));\n+        if !item.children.is_empty() {\n+            try!(writeln!(out, \"<ul class='section'>\"));\n+            let _ = walk_items(&item.children[], section, path_to_root, out);\n+            try!(writeln!(out, \"</ul>\"));\n+        }\n+        try!(writeln!(out, \"</li>\"));\n+\n+        Ok(())\n+    }\n+\n+    try!(writeln!(out, \"<div id='toc'>\"));\n+    try!(writeln!(out, \"<ul class='chapter'>\"));\n+    try!(walk_items(&book.chapters[], \"\", path_to_root, out));\n+    try!(writeln!(out, \"</ul>\"));\n+    try!(writeln!(out, \"</div>\"));\n+\n+    Ok(())\n+}\n+\n+fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n+    let tmp = TempDir::new(\"rust-book\")\n+                      .ok()\n+                      // FIXME: lift to Result instead\n+                      .expect(\"could not create temporary directory\");\n+\n+    for (section, item) in book.iter() {\n+        println!(\"{} {}\", section, item.title);\n+\n+        let out_path = tgt.join(item.path.dirname());\n+\n+        let regex = r\"\\[(?P<title>[^]]*)\\]\\((?P<url_stem>[^)]*)\\.(?P<ext>md|markdown)\\)\";\n+        let md_urls = Regex::new(regex).unwrap();\n+\n+        let src;\n+        if os::args().len() < 3 {\n+            src = os::getcwd().unwrap().clone();\n+        } else {\n+            src = Path::new(os::args()[2].clone());\n+        }\n+        // preprocess the markdown, rerouting markdown references to html references\n+        let markdown_data = try!(File::open(&src.join(&item.path)).read_to_string());\n+        let preprocessed_path = tmp.path().join(item.path.filename().unwrap());\n+        {\n+            let urls = md_urls.replace_all(&markdown_data[], \"[$title]($url_stem.html)\");\n+            try!(File::create(&preprocessed_path)\n+                      .write_str(&urls[]));\n+        }\n+\n+        // write the prelude to a temporary HTML file for rustdoc inclusion\n+        let prelude = tmp.path().join(\"prelude.html\");\n+        {\n+            let mut toc = BufferedWriter::new(try!(File::create(&prelude)));\n+            let _ = write_toc(book, &item.path_to_root, &mut toc);\n+            try!(writeln!(&mut toc, \"<div id='page-wrapper'>\"));\n+            try!(writeln!(&mut toc, \"<div id='page'>\"));\n+        }\n+\n+        // write the postlude to a temporary HTML file for rustdoc inclusion\n+        let postlude = tmp.path().join(\"postlude.html\");\n+        {\n+            let mut toc = BufferedWriter::new(try!(File::create(&postlude)));\n+            try!(writeln!(&mut toc, \"</div></div>\"));\n+        }\n+\n+        try!(fs::mkdir_recursive(&out_path, io::USER_DIR));\n+\n+        let rustdoc_args: &[String] = &[\n+            \"\".to_string(),\n+            preprocessed_path.display().to_string(),\n+            format!(\"-o{}\", out_path.display()),\n+            format!(\"--html-before-content={}\", prelude.display()),\n+            format!(\"--html-after-content={}\", postlude.display()),\n+            format!(\"--markdown-css={}\", item.path_to_root.join(\"rust-book.css\").display()),\n+            \"--markdown-no-toc\".to_string(),\n+        ];\n+        let output_result = rustdoc::main_args(rustdoc_args);\n+        if output_result != 0 {\n+\n+            let message = format!(\"Could not execute `rustdoc`: {}\", output_result);\n+            return Err(box message as Box<Error>);\n+        }\n+    }\n+\n+    // create index.html from the root README\n+    try!(fs::copy(&tgt.join(\"README.html\"), &tgt.join(\"index.html\")));\n+    Ok(())\n+}\n+\n+impl Subcommand for Build {\n+    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n+        Ok(())\n+    }\n+    fn usage(&self) {}\n+    fn execute(&mut self, term: &mut Term) -> CommandResult<()> {\n+        let cwd = os::getcwd().unwrap();\n+        let src;\n+        let tgt;\n+\n+        if os::args().len() < 3 {\n+            src = cwd.clone();\n+        } else {\n+            src = Path::new(os::args()[2].clone());\n+        }\n+\n+        if os::args().len() < 4 {\n+            tgt = cwd.join(\"_book\");\n+        } else {\n+            tgt = Path::new(os::args()[3].clone());\n+        }\n+\n+        let _ = fs::mkdir(&tgt, io::USER_DIR); // FIXME: handle errors\n+\n+        // FIXME: handle errors\n+        let _ = File::create(&tgt.join(\"rust-book.css\")).write_str(css::STYLE);\n+\n+        let summary = File::open(&src.join(\"SUMMARY.md\"));\n+        match book::parse_summary(summary, &src) {\n+            Ok(book) => {\n+                // execute rustdoc on the whole book\n+                let _ = render(&book, &tgt).map_err(|err| {\n+                    term.err(&format!(\"error: {}\", err.description())[]);\n+                    err.detail().map(|detail| {\n+                        term.err(&format!(\"detail: {}\", detail)[]);\n+                    })\n+                });\n+            }\n+            Err(errors) => {\n+                for err in errors.into_iter() {\n+                    term.err(&err[]);\n+                }\n+            }\n+        }\n+\n+        Ok(()) // lol\n+    }\n+}"}, {"sha": "8eb66e71d3ad22271fb8e12975fafac439e9ad9c", "filename": "src/rustbook/css.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fcss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fcss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fcss.rs?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// The rust-book CSS in string form.\n+\n+pub static STYLE: &'static str = r#\"\n+@import url(\"//static.rust-lang.org/doc/master/rust.css\");\n+\n+body {\n+    max-width:none;\n+}\n+\n+#toc {\n+    position: absolute;\n+    left: 0px;\n+    top: 0px;\n+    bottom: 0px;\n+    width: 250px;\n+    overflow-y: auto;\n+    border-right: 1px solid rgba(0, 0, 0, 0.07);\n+    padding: 10px 10px;\n+    font-size: 16px;\n+    background: none repeat scroll 0% 0% #FFF;\n+    box-sizing: border-box;\n+}\n+\n+#page-wrapper {\n+    position: absolute;\n+    overflow-y: auto;\n+    left: 260px;\n+    right: 0px;\n+    top: 0px;\n+    bottom: 0px;\n+    box-sizing: border-box;\n+    background: none repeat scroll 0% 0% #FFF;\n+}\n+\n+#page {\n+    margin-left: auto;\n+    margin-right:auto;\n+    width: 750px;\n+}\n+\n+.chapter {\n+    list-style: none outside none;\n+    padding-left: 0px;\n+    line-height: 30px;\n+}\n+\n+.section {\n+    list-style: none outside none;\n+    padding-left: 20px;\n+    line-height: 30px;\n+}\n+\n+.section li {\n+    text-overflow: ellipsis;\n+    overflow: hidden;\n+    white-space: nowrap;\n+}\n+\n+.chapter li a {\n+    color: #000000;\n+}\n+\"#;"}, {"sha": "1d3baef8c1c759dd382161d2a2d3d47283870b73", "filename": "src/rustbook/error.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Ferror.rs?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Error handling utilities. WIP.\n+\n+use std::fmt;\n+use std::fmt::{Show, Formatter};\n+\n+use std::io::IoError;\n+\n+pub type CliError = Box<Error + 'static>;\n+pub type CliResult<T> = Result<T, CliError>;\n+\n+pub type CommandError = Box<Error + 'static>;\n+pub type CommandResult<T> = Result<T, CommandError>;\n+\n+pub trait Error {\n+    fn description(&self) -> &str;\n+\n+    fn detail(&self) -> Option<&str> { None }\n+    fn cause(&self) -> Option<&Error> { None }\n+}\n+\n+pub trait FromError<E> {\n+    fn from_err(err: E) -> Self;\n+}\n+\n+impl Show for Box<Error + 'static> {\n+    fn fmt(&self, f: &mut Formatter) -> fmt::Result {\n+        write!(f, \"{}\", self.description())\n+    }\n+}\n+\n+impl<E: Error + 'static> FromError<E> for Box<Error + 'static> {\n+    fn from_err(err: E) -> Box<Error + 'static> {\n+        box err as Box<Error>\n+    }\n+}\n+\n+impl<'a> Error for &'a str {\n+    fn description<'b>(&'b self) -> &'b str {\n+        *self\n+    }\n+}\n+\n+impl Error for String {\n+    fn description<'a>(&'a self) -> &'a str {\n+        &self[]\n+    }\n+}\n+\n+impl FromError<()> for () {\n+    fn from_err(_: ()) -> () { () }\n+}\n+\n+impl FromError<IoError> for IoError {\n+    fn from_err(error: IoError) -> IoError { error }\n+}\n+\n+impl Error for IoError {\n+    fn description(&self) -> &str {\n+        self.desc\n+    }\n+    fn detail(&self) -> Option<&str> {\n+        self.detail.as_ref().map(|s| &s[])\n+    }\n+}\n+\n+//fn iter_map_err<T, U, E, I: Iterator<Result<T,E>>>(iter: I,"}, {"sha": "7fd8214f7311af078614aaf7ebcb4eebaa8f3569", "filename": "src/rustbook/help.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fhelp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fhelp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fhelp.rs?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Implementation of the `help` subcommand. Currently just prints basic usage info.\n+\n+use subcommand::Subcommand;\n+use error::CliResult;\n+use error::CommandResult;\n+use term::Term;\n+\n+struct Help;\n+\n+pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n+    match name {\n+        \"help\" | \"--help\" | \"-h\" | \"-?\" => Some(box Help as Box<Subcommand>),\n+        _ => None\n+    }\n+}\n+\n+impl Subcommand for Help {\n+    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n+        Ok(())\n+    }\n+    fn usage(&self) {}\n+    fn execute(&mut self, _: &mut Term) -> CommandResult<()> {\n+        usage();\n+        Ok(())\n+    }\n+}\n+\n+pub fn usage() {\n+    println!(\"Usage: rust-book <command> [<args>]\");\n+    println!(\"\");\n+    println!(\"The <command> must be one of:\");\n+    println!(\"  help    Print this message.\");\n+    println!(\"  build   Build the book in subdirectory _book\");\n+    println!(\"  serve   --NOT YET IMPLEMENTED--\");\n+    println!(\"  test    --NOT YET IMPLEMENTED--\");\n+}"}, {"sha": "acb4edb7a4594ec38671a290e64e5ecc9333f383", "filename": "src/rustbook/main.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fmain.rs?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(slicing_syntax, box_syntax)]\n+\n+extern crate regex;\n+\n+extern crate rustdoc;\n+\n+use std::os;\n+use subcommand::Subcommand;\n+use term::Term;\n+\n+macro_rules! try (\n+    ($expr:expr) => ({\n+        use error;\n+        match $expr {\n+            Ok(val) => val,\n+            Err(err) => return Err(error::FromError::from_err(err))\n+        }\n+    })\n+);\n+\n+mod term;\n+mod error;\n+mod book;\n+\n+mod subcommand;\n+mod help;\n+mod build;\n+mod serve;\n+mod test;\n+\n+mod css;\n+\n+#[cfg(not(test))] // thanks #12327\n+fn main() {\n+    let mut term = Term::new();\n+    let cmd = os::args();\n+\n+    if cmd.len() < 1 {\n+        help::usage()\n+    } else {\n+        match subcommand::parse_name(&cmd[1][]) {\n+            Some(mut subcmd) => {\n+                match subcmd.parse_args(cmd.tail()) {\n+                    Ok(_) => {\n+                        match subcmd.execute(&mut term) {\n+                            Ok(_) => (),\n+                            Err(_) => os::set_exit_status(-1),\n+                        }\n+                    }\n+                    Err(err) => {\n+                        println!(\"{}\", err.description());\n+                        println!(\"\");\n+                        subcmd.usage();\n+                    }\n+                }\n+            }\n+            None => {\n+                println!(\"Unrecognized command '{}'.\", cmd[1]);\n+                println!(\"\");\n+                help::usage();\n+            }\n+        }\n+    }\n+}"}, {"sha": "808527dcef95eeeaa2b2b96f3dbfe37abc24e4aa", "filename": "src/rustbook/serve.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fserve.rs?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Implementation of the `serve` subcommand. Just a stub for now.\n+\n+use subcommand::Subcommand;\n+use error::CliResult;\n+use error::CommandResult;\n+use term::Term;\n+\n+struct Serve;\n+\n+pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n+    if name == \"serve\" {\n+        Some(box Serve as Box<Subcommand>)\n+    } else {\n+        None\n+    }\n+}\n+\n+impl Subcommand for Serve {\n+    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n+        Ok(())\n+    }\n+    fn usage(&self) {}\n+    fn execute(&mut self, _: &mut Term) -> CommandResult<()> {\n+        Ok(())\n+    }\n+}"}, {"sha": "473739c919d64ee27fc4e3e3e40a85e3b0e29426", "filename": "src/rustbook/subcommand.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fsubcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fsubcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fsubcommand.rs?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Common API for all rust-book subcommands.\n+\n+use error::CliResult;\n+use error::CommandResult;\n+use term::Term;\n+\n+use help;\n+use build;\n+use serve;\n+use test;\n+\n+pub trait Subcommand {\n+    /// Mutate the subcommand by parsing its arguments.\n+    ///\n+    /// Returns `Err` on a parsing error.\n+    fn parse_args(&mut self, args: &[String]) -> CliResult<()>;\n+    /// Print the CLI usage information.\n+    fn usage(&self);\n+    /// Actually execute the subcommand.\n+    fn execute(&mut self, term: &mut Term) -> CommandResult<()>;\n+}\n+\n+/// Create a Subcommand object based on its name.\n+pub fn parse_name(name: &str) -> Option<Box<Subcommand>> {\n+    for parser in [\n+        help::parse_cmd as fn(&str) -> Option<Box<Subcommand>>,\n+        build::parse_cmd as fn(&str) -> Option<Box<Subcommand>>,\n+        serve::parse_cmd as fn(&str) -> Option<Box<Subcommand>>,\n+        test::parse_cmd as fn(&str) -> Option<Box<Subcommand>>].iter() {\n+        let parsed = (*parser)(name);\n+        if parsed.is_some() { return parsed }\n+    }\n+    None\n+}"}, {"sha": "18306d6ec20ba7ec14caf2ac5ffe56ec3527a7c9", "filename": "src/rustbook/term.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fterm.rs?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! An abstraction of the terminal. Eventually, provide color and\n+//! verbosity support. For now, just a wrapper around stdout/stderr.\n+\n+use std::io::stdio;\n+\n+pub struct Term {\n+    err: Box<Writer + 'static>\n+}\n+\n+impl Term {\n+    pub fn new() -> Term {\n+        Term {\n+            err: box stdio::stderr() as Box<Writer>,\n+        }\n+    }\n+\n+    pub fn err(&mut self, msg: &str) {\n+        // swallow any errors\n+        let _ = self.err.write_line(msg);\n+    }\n+}"}, {"sha": "f2bf92585f7ead27acf635c1cd373ad03010eb75", "filename": "src/rustbook/test.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a6ebd1f60871464c731306aa9007aab30f0dbf/src%2Frustbook%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Ftest.rs?ref=16a6ebd1f60871464c731306aa9007aab30f0dbf", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Implementation of the `test` subcommand. Just a stub for now.\n+\n+use subcommand::Subcommand;\n+use error::CliResult;\n+use error::CommandResult;\n+use error::Error;\n+use term::Term;\n+use book;\n+use std::io::{Command, File};\n+use std::os;\n+\n+struct Test;\n+\n+pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n+    if name == \"test\" {\n+        Some(box Test as Box<Subcommand>)\n+    } else {\n+        None\n+    }\n+}\n+\n+impl Subcommand for Test {\n+    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n+        Ok(())\n+    }\n+    fn usage(&self) {}\n+    fn execute(&mut self, term: &mut Term) -> CommandResult<()> {\n+        let cwd = os::getcwd().unwrap();\n+        let src = cwd.clone();\n+\n+        let summary = File::open(&src.join(\"SUMMARY.md\"));\n+        match book::parse_summary(summary, &src) {\n+            Ok(book) => {\n+                for (_, item) in book.iter() {\n+                    let output_result = Command::new(\"rustdoc\")\n+                        .arg(&item.path)\n+                        .arg(\"--test\")\n+                        .output();\n+                    match output_result {\n+                        Ok(output) => {\n+                            if !output.status.success() {\n+                                term.err(&format!(\"{}\\n{}\",\n+                                         String::from_utf8_lossy(&output.output[]),\n+                                         String::from_utf8_lossy(&output.error[]))[]);\n+                                return Err(box \"Some tests failed.\" as Box<Error>);\n+                            }\n+\n+                        }\n+                        Err(e) => {\n+                            let message = format!(\"Could not execute `rustdoc`: {}\", e);\n+                            return Err(box message as Box<Error>);\n+                        }\n+                    }\n+                }\n+            }\n+            Err(errors) => {\n+                for err in errors.into_iter() {\n+                    term.err(&err[]);\n+                }\n+                return Err(box \"There was an error.\" as Box<Error>);\n+            }\n+        }\n+        Ok(()) // lol\n+    }\n+}"}]}