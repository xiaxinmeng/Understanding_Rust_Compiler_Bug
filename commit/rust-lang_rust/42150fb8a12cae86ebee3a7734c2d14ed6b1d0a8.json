{"sha": "42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMTUwZmI4YTEyY2FlODZlYmVlM2E3NzM0YzJkMTRlZDZiMWQwYTg=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2021-01-24T19:08:12Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-27T15:38:23Z"}, "message": "combine: stop eagerly evaluating consts", "tree": {"sha": "10a92159d7197f7bb0e500faab3b042964dcc63c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10a92159d7197f7bb0e500faab3b042964dcc63c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "html_url": "https://github.com/rust-lang/rust/commit/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aef11409b43a533f4e59ffb9b0efcb619c6e6879", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef11409b43a533f4e59ffb9b0efcb619c6e6879", "html_url": "https://github.com/rust-lang/rust/commit/aef11409b43a533f4e59ffb9b0efcb619c6e6879"}], "stats": {"total": 133, "additions": 106, "deletions": 27}, "files": [{"sha": "ffe947d209dd605a5b3bbd0572f880684a1c528a", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -543,10 +543,6 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n         true\n     }\n \n-    fn visit_ct_substs(&self) -> bool {\n-        true\n-    }\n-\n     fn binders<T>(\n         &mut self,\n         a: ty::Binder<T>,\n@@ -737,6 +733,16 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+                if self.tcx().lazy_normalization() =>\n+            {\n+                assert_eq!(promoted, None);\n+                let substs = self.relate_with_variance(ty::Variance::Invariant, substs, substs)?;\n+                Ok(self.tcx().mk_const(ty::Const {\n+                    ty: c.ty,\n+                    val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n+                }))\n+            }\n             _ => relate::super_relate_consts(self, c, c),\n         }\n     }\n@@ -822,10 +828,6 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         true\n     }\n \n-    fn visit_ct_substs(&self) -> bool {\n-        true\n-    }\n-\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _variance: ty::Variance,\n@@ -959,6 +961,16 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     }\n                 }\n             }\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+                if self.tcx().lazy_normalization() =>\n+            {\n+                assert_eq!(promoted, None);\n+                let substs = self.relate_with_variance(ty::Variance::Invariant, substs, substs)?;\n+                Ok(self.tcx().mk_const(ty::Const {\n+                    ty: c.ty,\n+                    val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n+                }))\n+            }\n             _ => relate::super_relate_consts(self, c, c),\n         }\n     }"}, {"sha": "32a713beef85df6d4e31170d1191d005f9de6f7b", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -33,15 +33,6 @@ pub trait TypeRelation<'tcx>: Sized {\n     /// relation. Just affects error messages.\n     fn a_is_expected(&self) -> bool;\n \n-    /// Whether we should look into the substs of unevaluated constants\n-    /// even if `feature(const_evaluatable_checked)` is active.\n-    ///\n-    /// This is needed in `combine` to prevent accidentially creating\n-    /// infinite types as we abuse `TypeRelation` to walk a type there.\n-    fn visit_ct_substs(&self) -> bool {\n-        false\n-    }\n-\n     fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R\n     where\n         F: FnOnce(&mut Self) -> R,\n@@ -532,7 +523,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         }\n \n         (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n-            if tcx.features().const_evaluatable_checked && !relation.visit_ct_substs() =>\n+            if tcx.features().const_evaluatable_checked =>\n         {\n             tcx.try_unify_abstract_consts(((au.def, au.substs), (bu.def, bu.substs)))\n         }"}, {"sha": "8c0398e8a13eab86415a2548d0fb0f7a5bc9f528", "filename": "src/test/ui/const-generics/issues/issue-69654-run-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654-run-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654-run-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654-run-pass.rs?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -1,4 +1,3 @@\n-// run-pass\n #![feature(const_generics)]\n #![allow(incomplete_features, unused_braces)]\n \n@@ -15,4 +14,5 @@ where\n \n fn main() {\n     Foo::foo();\n+    //~^ ERROR no function or associated item\n }"}, {"sha": "a95cc0f2a1c3215cd035b9fd22e1d951f8b6fea9", "filename": "src/test/ui/const-generics/issues/issue-69654-run-pass.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654-run-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654-run-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654-run-pass.stderr?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no function or associated item named `foo` found for struct `Foo<{_: usize}>` in the current scope\n+  --> $DIR/issue-69654-run-pass.rs:16:10\n+   |\n+LL | struct Foo<const N: usize> {}\n+   | -------------------------- function or associated item `foo` not found for this\n+...\n+LL |     Foo::foo();\n+   |          ^^^ function or associated item not found in `Foo<{_: usize}>`\n+   |\n+   = note: the method `foo` exists but the following trait bounds were not satisfied:\n+           `[u8; _]: Bar<[(); _]>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "38fca98ad4f06b2fcecdd66901ff109050653d44", "filename": "src/test/ui/const-generics/issues/issue-69654.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -15,4 +15,5 @@ where\n \n fn main() {\n     Foo::foo();\n+    //~^ ERROR no function or associated item\n }"}, {"sha": "69cd0806fcd42b9a597124cee6b617a1a9299cb2", "filename": "src/test/ui/const-generics/issues/issue-69654.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.stderr?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -4,6 +4,19 @@ error[E0423]: expected value, found type parameter `T`\n LL | impl<T> Bar<T> for [u8; T] {}\n    |                         ^ not a value\n \n-error: aborting due to previous error\n+error[E0599]: no function or associated item named `foo` found for struct `Foo<{_: usize}>` in the current scope\n+  --> $DIR/issue-69654.rs:17:10\n+   |\n+LL | struct Foo<const N: usize> {}\n+   | -------------------------- function or associated item `foo` not found for this\n+...\n+LL |     Foo::foo();\n+   |          ^^^ function or associated item not found in `Foo<{_: usize}>`\n+   |\n+   = note: the method `foo` exists but the following trait bounds were not satisfied:\n+           `[u8; _]: Bar<[(); _]>`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0423`.\n+Some errors have detailed explanations: E0423, E0599.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "6ded9f13bc4fadacbd90a041e571a7522bdaeb55", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.rs?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -1,4 +1,3 @@\n-// build-pass\n #![feature(const_generics)]\n #![allow(incomplete_features)]\n \n@@ -10,5 +9,5 @@ where\n     A<N>: Bar<N>;\n \n fn main() {\n-    let _ = A;\n+    let _ = A; //~ERROR the trait bound\n }"}, {"sha": "6830288acc0ad25c49e82e5b1b7fcf36c5a085b1", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `A<{_: usize}>: Bar<{_: usize}>` is not satisfied\n+  --> $DIR/unused-substs-1.rs:12:13\n+   |\n+LL | / struct A<const N: usize>\n+LL | | where\n+LL | |     A<N>: Bar<N>;\n+   | |_________________- required by `A`\n+...\n+LL |       let _ = A;\n+   |               ^ the trait `Bar<{_: usize}>` is not implemented for `A<{_: usize}>`\n+   |\n+   = help: the following implementations were found:\n+             <A<7_usize> as Bar<N>>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "2d00141fbf70bb1393262a56a7d2e1b76a1d6d60", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n #![feature(const_generics)]\n #![allow(incomplete_features)]\n \n@@ -24,4 +23,6 @@ fn main() {\n     // `t` is `ty::Infer(TyVar(_#1t))`\n     // `foo` contains `ty::Infer(TyVar(_#1t))` in its substs\n     t = foo;\n+    //~^ ERROR mismatched types\n+    //~| NOTE cyclic type\n }"}, {"sha": "9532fc21a31b70aebe4fbb69ee60b18f84c2627c", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.stderr?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -0,0 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/unused-substs-2.rs:25:9\n+   |\n+LL |     t = foo;\n+   |         ^^^ cyclic type of infinite size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2e306f8c4c88fd46eb1784c962b10d3df9384aa7", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n #![feature(const_generics)]\n #![allow(incomplete_features)]\n \n@@ -15,4 +14,6 @@ fn main() {\n     // `t` is `ty::Infer(TyVar(_#1t))`\n     // `foo` contains `ty::Infer(TyVar(_#1t))` in its substs\n     t = foo;\n+    //~^ ERROR mismatched types\n+    //~| NOTE cyclic type\n }"}, {"sha": "2551d68f9747499f22da42dfc54f41dc6c29b647", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-3.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.stderr?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/unused-substs-3.rs:16:9\n+   |\n+LL |     t = foo;\n+   |         ^^^\n+   |         |\n+   |         cyclic type of infinite size\n+   |         help: try using a conversion method: `foo.to_vec()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9c7f5ab91edb13298a6a868b4909ae6f201e6fdf", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-4.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-4.rs?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -1,4 +1,3 @@\n-// build-pass\n #![feature(const_generics)]\n #![allow(incomplete_features)]\n \n@@ -8,5 +7,5 @@ fn bind<const N: usize>(value: [u8; N]) -> [u8; 3 + 4] {\n \n fn main() {\n     let mut arr = Default::default();\n-    arr = bind(arr);\n+    arr = bind(arr); //~ ERROR mismatched type\n }"}, {"sha": "5685eedbdeca82b205fff2130f46f69612e52568", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-4.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-4.stderr?ref=42150fb8a12cae86ebee3a7734c2d14ed6b1d0a8", "patch": "@@ -0,0 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/unused-substs-4.rs:10:11\n+   |\n+LL |     arr = bind(arr);\n+   |           ^^^^^^^^^ encountered a self-referencing constant\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}