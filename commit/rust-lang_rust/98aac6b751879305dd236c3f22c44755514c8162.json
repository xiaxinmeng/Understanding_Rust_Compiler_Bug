{"sha": "98aac6b751879305dd236c3f22c44755514c8162", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YWFjNmI3NTE4NzkzMDVkZDIzNmMzZjIyYzQ0NzU1NTE0YzgxNjI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-27T16:28:46Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-27T16:38:55Z"}, "message": "Simpliy how collecting token from src", "tree": {"sha": "d2c854a0adecc4e3e7c90466433f1f6a1389ab2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2c854a0adecc4e3e7c90466433f1f6a1389ab2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98aac6b751879305dd236c3f22c44755514c8162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98aac6b751879305dd236c3f22c44755514c8162", "html_url": "https://github.com/rust-lang/rust/commit/98aac6b751879305dd236c3f22c44755514c8162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98aac6b751879305dd236c3f22c44755514c8162/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8c9230dd2c2b981fbc90ff587b41b7342b72480", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c9230dd2c2b981fbc90ff587b41b7342b72480", "html_url": "https://github.com/rust-lang/rust/commit/c8c9230dd2c2b981fbc90ff587b41b7342b72480"}], "stats": {"total": 111, "additions": 39, "deletions": 72}, "files": [{"sha": "1f12e42ef001910ac5a0acd3ae0ea061f8a17e17", "filename": "crates/ra_mbe/src/subtree_parser.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/98aac6b751879305dd236c3f22c44755514c8162/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98aac6b751879305dd236c3f22c44755514c8162/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs?ref=98aac6b751879305dd236c3f22c44755514c8162", "patch": "@@ -2,16 +2,38 @@ use crate::subtree_source::SubtreeTokenSource;\n \n use ra_parser::{TokenSource, TreeSink};\n use ra_syntax::{SyntaxKind};\n-use tt::buffer::TokenBuffer;\n+use tt::buffer::{TokenBuffer, Cursor};\n \n-struct OffsetTokenSink {\n-    token_pos: usize,\n+struct OffsetTokenSink<'a> {\n+    cursor: Cursor<'a>,\n     error: bool,\n }\n \n-impl TreeSink for OffsetTokenSink {\n+impl<'a> OffsetTokenSink<'a> {\n+    pub fn collect(&self, begin: Cursor<'a>) -> Vec<tt::TokenTree> {\n+        if !self.cursor.is_root() {\n+            return vec![];\n+        }\n+\n+        let mut curr = begin;\n+        let mut res = vec![];\n+\n+        while self.cursor != curr {\n+            if let Some(token) = curr.token_tree() {\n+                res.push(token);\n+            }\n+            curr = curr.bump();\n+        }\n+\n+        res\n+    }\n+}\n+\n+impl<'a> TreeSink for OffsetTokenSink<'a> {\n     fn token(&mut self, _kind: SyntaxKind, n_tokens: u8) {\n-        self.token_pos += n_tokens as usize;\n+        for _ in 0..n_tokens {\n+            self.cursor = self.cursor.bump_subtree();\n+        }\n     }\n     fn start_node(&mut self, _kind: SyntaxKind) {}\n     fn finish_node(&mut self) {}\n@@ -72,23 +94,21 @@ impl<'a> Parser<'a> {\n     {\n         let buffer = TokenBuffer::new(&self.subtree.token_trees[*self.cur_pos..]);\n         let mut src = SubtreeTokenSource::new(&buffer);\n-        let mut sink = OffsetTokenSink { token_pos: 0, error: false };\n+        let mut sink = OffsetTokenSink { cursor: buffer.begin(), error: false };\n \n         f(&mut src, &mut sink);\n \n-        let r = self.finish(sink.token_pos, &mut src);\n+        let r = self.finish(buffer.begin(), &mut sink);\n         if sink.error {\n             return None;\n         }\n         r\n     }\n \n-    fn finish(self, parsed_token: usize, src: &mut SubtreeTokenSource) -> Option<tt::TokenTree> {\n-        let res = src.bump_n(parsed_token);\n+    fn finish(self, begin: Cursor, sink: &mut OffsetTokenSink) -> Option<tt::TokenTree> {\n+        let res = sink.collect(begin);\n         *self.cur_pos += res.len();\n \n-        let res: Vec<_> = res.into_iter().collect();\n-\n         match res.len() {\n             0 => None,\n             1 => Some(res[0].clone()),"}, {"sha": "8d6fd3e430ec475c4a624c0704ff4812485d442b", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 7, "deletions": 56, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/98aac6b751879305dd236c3f22c44755514c8162/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98aac6b751879305dd236c3f22c44755514c8162/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=98aac6b751879305dd236c3f22c44755514c8162", "patch": "@@ -11,8 +11,7 @@ struct TtToken {\n }\n \n pub(crate) struct SubtreeTokenSource<'a> {\n-    start: Cursor<'a>,\n-    cursor: Cell<Cursor<'a>>,\n+    cached_cursor: Cell<Cursor<'a>>,\n     cached: RefCell<Vec<Option<TtToken>>>,\n     curr: (Token, usize),\n }\n@@ -34,19 +33,13 @@ impl<'a> SubtreeTokenSource<'a> {\n \n         let mut res = SubtreeTokenSource {\n             curr: (Token { kind: EOF, is_jointed_to_next: false }, 0),\n-            start: cursor,\n-            cursor: Cell::new(cursor),\n+            cached_cursor: Cell::new(cursor),\n             cached: RefCell::new(Vec::with_capacity(10)),\n         };\n         res.curr = (res.mk_token(0), 0);\n         res\n     }\n \n-    pub(crate) fn bump_n(&mut self, parsed_tokens: usize) -> Vec<tt::TokenTree> {\n-        let res = self.collect_token_trees(parsed_tokens);\n-        res\n-    }\n-\n     fn mk_token(&self, pos: usize) -> Token {\n         match self.get(pos) {\n             Some(tt) => Token { kind: tt.kind, is_jointed_to_next: tt.is_joint_to_next },\n@@ -61,7 +54,7 @@ impl<'a> SubtreeTokenSource<'a> {\n         }\n \n         while pos >= cached.len() {\n-            let cursor = self.cursor.get();\n+            let cursor = self.cached_cursor.get();\n             if cursor.eof() {\n                 cached.push(None);\n                 continue;\n@@ -70,65 +63,23 @@ impl<'a> SubtreeTokenSource<'a> {\n             match cursor.token_tree() {\n                 Some(tt::TokenTree::Leaf(leaf)) => {\n                     cached.push(Some(convert_leaf(&leaf)));\n-                    self.cursor.set(cursor.bump());\n+                    self.cached_cursor.set(cursor.bump());\n                 }\n                 Some(tt::TokenTree::Subtree(subtree)) => {\n-                    self.cursor.set(cursor.subtree().unwrap());\n+                    self.cached_cursor.set(cursor.subtree().unwrap());\n                     cached.push(Some(convert_delim(subtree.delimiter, false)));\n                 }\n                 None => {\n                     if let Some(subtree) = cursor.end() {\n                         cached.push(Some(convert_delim(subtree.delimiter, true)));\n-                        self.cursor.set(cursor.bump());\n+                        self.cached_cursor.set(cursor.bump());\n                     }\n                 }\n             }\n         }\n \n         return cached[pos].clone();\n     }\n-\n-    fn collect_token_trees(&self, n: usize) -> Vec<tt::TokenTree> {\n-        let mut res = vec![];\n-\n-        let mut pos = 0;\n-        let mut cursor = self.start;\n-        let mut level = 0;\n-\n-        while pos < n {\n-            if cursor.eof() {\n-                break;\n-            }\n-\n-            match cursor.token_tree() {\n-                Some(tt::TokenTree::Leaf(leaf)) => {\n-                    if level == 0 {\n-                        res.push(leaf.into());\n-                    }\n-                    cursor = cursor.bump();\n-                    pos += 1;\n-                }\n-                Some(tt::TokenTree::Subtree(subtree)) => {\n-                    if level == 0 {\n-                        res.push(subtree.into());\n-                    }\n-                    pos += 1;\n-                    level += 1;\n-                    cursor = cursor.subtree().unwrap();\n-                }\n-\n-                None => {\n-                    if let Some(_) = cursor.end() {\n-                        level -= 1;\n-                        pos += 1;\n-                        cursor = cursor.bump();\n-                    }\n-                }\n-            }\n-        }\n-\n-        res\n-    }\n }\n \n impl<'a> TokenSource for SubtreeTokenSource<'a> {\n@@ -147,7 +98,7 @@ impl<'a> TokenSource for SubtreeTokenSource<'a> {\n             return;\n         }\n \n-        self.curr = (self.mk_token(self.curr.1 + 1), self.curr.1 + 1)\n+        self.curr = (self.mk_token(self.curr.1 + 1), self.curr.1 + 1);\n     }\n \n     /// Is the current token a specified keyword?"}, {"sha": "caeb842b1e9fb5a6380aa7a65372ca5655f47bca", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98aac6b751879305dd236c3f22c44755514c8162/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98aac6b751879305dd236c3f22c44755514c8162/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=98aac6b751879305dd236c3f22c44755514c8162", "patch": "@@ -298,11 +298,7 @@ fn delim_to_str(d: tt::Delimiter, closing: bool) -> SmolStr {\n impl<'a> TreeSink for TtTreeSink<'a> {\n     fn token(&mut self, kind: SyntaxKind, n_tokens: u8) {\n         if kind == L_DOLLAR || kind == R_DOLLAR {\n-            if let Some(_) = self.cursor.end() {\n-                self.cursor = self.cursor.bump();\n-            } else {\n-                self.cursor = self.cursor.subtree().unwrap();\n-            }\n+            self.cursor = self.cursor.bump_subtree();\n             return;\n         }\n "}]}