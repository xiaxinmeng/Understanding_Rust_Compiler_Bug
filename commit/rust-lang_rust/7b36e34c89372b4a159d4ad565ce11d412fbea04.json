{"sha": "7b36e34c89372b4a159d4ad565ce11d412fbea04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMzZlMzRjODkzNzJiNGExNTlkNGFkNTY1Y2UxMWQ0MTJmYmVhMDQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-06T01:05:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-06T01:05:37Z"}, "message": "Fix two more write guard failures", "tree": {"sha": "ee0aa9d8caec48bf6105270613a402bb2696d162", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee0aa9d8caec48bf6105270613a402bb2696d162"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b36e34c89372b4a159d4ad565ce11d412fbea04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b36e34c89372b4a159d4ad565ce11d412fbea04", "html_url": "https://github.com/rust-lang/rust/commit/7b36e34c89372b4a159d4ad565ce11d412fbea04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b36e34c89372b4a159d4ad565ce11d412fbea04/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4300d4d2fa9d35ac73742c7d815ee157ce0f9c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/4300d4d2fa9d35ac73742c7d815ee157ce0f9c17", "html_url": "https://github.com/rust-lang/rust/commit/4300d4d2fa9d35ac73742c7d815ee157ce0f9c17"}], "stats": {"total": 104, "additions": 45, "deletions": 59}, "files": [{"sha": "946bf26fd2713d8c4b88423be91bba89b1706bff", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b36e34c89372b4a159d4ad565ce11d412fbea04/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b36e34c89372b4a159d4ad565ce11d412fbea04/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=7b36e34c89372b4a159d4ad565ce11d412fbea04", "patch": "@@ -4825,10 +4825,12 @@ pub impl Resolver {\n \n             expr_loop(_, Some(label)) => {\n                 do self.with_label_rib {\n-                    let this = &mut *self;\n-                    let def_like = dl_def(def_label(expr.id));\n-                    let rib = this.label_ribs[this.label_ribs.len() - 1];\n-                    rib.bindings.insert(label, def_like);\n+                    {\n+                        let this = &mut *self;\n+                        let def_like = dl_def(def_label(expr.id));\n+                        let rib = this.label_ribs[this.label_ribs.len() - 1];\n+                        rib.bindings.insert(label, def_like);\n+                    }\n \n                     visit_expr(expr, (), visitor);\n                 }"}, {"sha": "8799bd064f6581f337d5e69419eb425e75c420c8", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b36e34c89372b4a159d4ad565ce11d412fbea04/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b36e34c89372b4a159d4ad565ce11d412fbea04/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=7b36e34c89372b4a159d4ad565ce11d412fbea04", "patch": "@@ -42,7 +42,7 @@ use ext::pipes::proto::{protocol_};\n \n use std::bitv::Bitv;\n \n-pub fn analyze(proto: &mut protocol_, _cx: @ext_ctxt) {\n+pub fn analyze(proto: @mut protocol_, _cx: @ext_ctxt) {\n     debug!(\"initializing colive analysis\");\n     let num_states = proto.num_states();\n     let mut colive = do (copy proto.states).map_to_vec |state| {"}, {"sha": "e2c8a0b549c362efc821d663fa77e519b7714a07", "filename": "src/test/run-fail/borrowck-wg-imm-then-mut.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7b36e34c89372b4a159d4ad565ce11d412fbea04/src%2Ftest%2Frun-fail%2Fborrowck-wg-imm-then-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b36e34c89372b4a159d4ad565ce11d412fbea04/src%2Ftest%2Frun-fail%2Fborrowck-wg-imm-then-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-imm-then-mut.rs?ref=7b36e34c89372b4a159d4ad565ce11d412fbea04", "patch": "@@ -0,0 +1,19 @@\n+// error-pattern:borrowed\n+\n+// Test that if you imm borrow then mut borrow it fails.\n+\n+fn add1(a:@mut int)\n+{\n+    add2(a); // already frozen\n+}\n+\n+fn add2(_:&mut int)\n+{\n+}\n+\n+pub fn main()\n+{\n+    let a = @mut 3;\n+    let b = &*a; // freezes a\n+    add1(a);\n+}"}, {"sha": "58b2a1d87beed70adad9d49e4bd845683b2372f0", "filename": "src/test/run-fail/borrowck-wg-mut-then-imm.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7b36e34c89372b4a159d4ad565ce11d412fbea04/src%2Ftest%2Frun-fail%2Fborrowck-wg-mut-then-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b36e34c89372b4a159d4ad565ce11d412fbea04/src%2Ftest%2Frun-fail%2Fborrowck-wg-mut-then-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-mut-then-imm.rs?ref=7b36e34c89372b4a159d4ad565ce11d412fbea04", "patch": "@@ -0,0 +1,19 @@\n+// error-pattern:borrowed\n+\n+// Test that if you mut borrow then imm borrow it fails.\n+\n+fn add1(a:@mut int)\n+{\n+    add2(a); // already frozen\n+}\n+\n+fn add2(_:&int)\n+{\n+}\n+\n+pub fn main()\n+{\n+    let a = @mut 3;\n+    let b = &mut *a; // freezes a\n+    add1(a);\n+}"}, {"sha": "d54aae7bb633727cc98d66ccbaada2faf53e488f", "filename": "src/test/run-pass/regions-mock-trans-impls.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4300d4d2fa9d35ac73742c7d815ee157ce0f9c17/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4300d4d2fa9d35ac73742c7d815ee157ce0f9c17/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs?ref=4300d4d2fa9d35ac73742c7d815ee157ce0f9c17", "patch": "@@ -1,54 +0,0 @@\n-// xfail-fast\n-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern mod std;\n-use core::libc;\n-use core::sys;\n-use core::cast;\n-use std::arena::Arena;\n-\n-struct Bcx<'self> {\n-    fcx: &'self Fcx<'self>\n-}\n-\n-struct Fcx<'self> {\n-    arena: &'self mut Arena,\n-    ccx: &'self Ccx\n-}\n-\n-struct Ccx {\n-    x: int\n-}\n-\n-fn h<'r>(bcx : &'r mut Bcx<'r>) -> &'r mut Bcx<'r> {\n-    // XXX: Arena has a bad interface here; it should return mutable pointers.\n-    // But this patch is too big to roll that in.\n-    unsafe {\n-        cast::transmute(bcx.fcx.arena.alloc(|| Bcx { fcx: bcx.fcx }))\n-    }\n-}\n-\n-fn g(fcx: &mut Fcx) {\n-    let mut bcx = Bcx { fcx: fcx };\n-    h(&mut bcx);\n-}\n-\n-fn f(ccx: &mut Ccx) {\n-    let mut a = Arena();\n-    let mut fcx = Fcx { arena: &mut a, ccx: ccx };\n-    return g(&mut fcx);\n-}\n-\n-pub fn main() {\n-    let mut ccx = Ccx { x: 0 };\n-    f(&mut ccx);\n-}"}]}