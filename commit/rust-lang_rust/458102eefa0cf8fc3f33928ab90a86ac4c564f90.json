{"sha": "458102eefa0cf8fc3f33928ab90a86ac4c564f90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODEwMmVlZmEwY2Y4ZmMzZjMzOTI4YWI5MGE4NmFjNGM1NjRmOTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-06T22:10:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T00:54:33Z"}, "message": "rustdoc: Run external traits through filters\n\nThis ensures that all external traits are run through the same filters that the\nrest of the AST goes through, stripping hidden function as necessary.\n\nCloses #13698", "tree": {"sha": "647c56c3c67dbd6c6a130d4b43b68fb032c30aa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/647c56c3c67dbd6c6a130d4b43b68fb032c30aa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/458102eefa0cf8fc3f33928ab90a86ac4c564f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/458102eefa0cf8fc3f33928ab90a86ac4c564f90", "html_url": "https://github.com/rust-lang/rust/commit/458102eefa0cf8fc3f33928ab90a86ac4c564f90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/458102eefa0cf8fc3f33928ab90a86ac4c564f90/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3647fe81543f0a04a0d6aee15f4bb8c08774295", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3647fe81543f0a04a0d6aee15f4bb8c08774295", "html_url": "https://github.com/rust-lang/rust/commit/d3647fe81543f0a04a0d6aee15f4bb8c08774295"}], "stats": {"total": 86, "additions": 63, "deletions": 23}, "files": [{"sha": "e4b2e82b21b6c2d07dba72e66f8764df8274535d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=458102eefa0cf8fc3f33928ab90a86ac4c564f90", "patch": "@@ -331,9 +331,10 @@ fn build_impl(cx: &DocContext,\n                 let did = assoc_ty.def_id;\n                 let type_scheme = ty::lookup_item_type(tcx, did);\n                 let predicates = ty::lookup_predicates(tcx, did);\n-                // Not sure the choice of ParamSpace actually matters here, because an\n-                // associated type won't have generics on the LHS\n-                let typedef = (type_scheme, predicates, subst::ParamSpace::TypeSpace).clean(cx);\n+                // Not sure the choice of ParamSpace actually matters here,\n+                // because an associated type won't have generics on the LHS\n+                let typedef = (type_scheme, predicates,\n+                               subst::ParamSpace::TypeSpace).clean(cx);\n                 Some(clean::Item {\n                     name: Some(assoc_ty.name.clean(cx)),\n                     inner: clean::TypedefItem(typedef),"}, {"sha": "53824d088eeff78e100091137588b6fae2b9c2a4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=458102eefa0cf8fc3f33928ab90a86ac4c564f90", "patch": "@@ -44,9 +44,10 @@ use rustc::middle::subst::{self, ParamSpace, VecPerParamSpace};\n use rustc::middle::ty;\n use rustc::middle::stability;\n \n+use std::collections::HashMap;\n+use std::path::PathBuf;\n use std::rc::Rc;\n use std::u32;\n-use std::path::PathBuf;\n \n use core::DocContext;\n use doctree;\n@@ -119,6 +120,7 @@ pub struct Crate {\n     pub module: Option<Item>,\n     pub externs: Vec<(ast::CrateNum, ExternalCrate)>,\n     pub primitives: Vec<PrimitiveType>,\n+    pub external_traits: HashMap<ast::DefId, Trait>,\n }\n \n impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n@@ -197,6 +199,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n             module: Some(module),\n             externs: externs,\n             primitives: primitives,\n+            external_traits: cx.external_traits.borrow_mut().take().unwrap(),\n         }\n     }\n }"}, {"sha": "a637ba9f297068c8688fe2c73979d1f26f1d6b27", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=458102eefa0cf8fc3f33928ab90a86ac4c564f90", "patch": "@@ -75,7 +75,6 @@ pub struct CrateAnalysis {\n     pub exported_items: privacy::ExportedItems,\n     pub public_items: privacy::PublicItems,\n     pub external_paths: ExternalPaths,\n-    pub external_traits: RefCell<Option<HashMap<ast::DefId, clean::Trait>>>,\n     pub external_typarams: RefCell<Option<HashMap<ast::DefId, String>>>,\n     pub inlined: RefCell<Option<HashSet<ast::DefId>>>,\n }\n@@ -155,7 +154,6 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n         exported_items: exported_items,\n         public_items: public_items,\n         external_paths: RefCell::new(None),\n-        external_traits: RefCell::new(None),\n         external_typarams: RefCell::new(None),\n         inlined: RefCell::new(None),\n     };\n@@ -168,8 +166,6 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n \n     let external_paths = ctxt.external_paths.borrow_mut().take();\n     *analysis.external_paths.borrow_mut() = external_paths;\n-    let map = ctxt.external_traits.borrow_mut().take();\n-    *analysis.external_traits.borrow_mut() = map;\n     let map = ctxt.external_typarams.borrow_mut().take();\n     *analysis.external_typarams.borrow_mut() = map;\n     let map = ctxt.inlined.borrow_mut().take();"}, {"sha": "0a1860c66f273ff36be921c64251a48cfa238dfa", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=458102eefa0cf8fc3f33928ab90a86ac4c564f90", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use clean::*;\n-use std::iter::Extend;\n+use std::collections::HashMap;\n use std::mem::{replace, swap};\n \n pub trait DocFolder : Sized {\n@@ -80,6 +80,13 @@ pub trait DocFolder : Sized {\n         c.module = match replace(&mut c.module, None) {\n             Some(module) => self.fold_item(module), None => None\n         };\n+        let external_traits = replace(&mut c.external_traits, HashMap::new());\n+        c.external_traits = external_traits.into_iter().map(|(k, mut v)| {\n+            let items = replace(&mut v.items, Vec::new());\n+            v.items = items.into_iter().filter_map(|i| self.fold_item(i))\n+                           .collect();\n+            (k, v)\n+        }).collect();\n         return c;\n     }\n }"}, {"sha": "da59ffd785a2d17886cb34c9decb27893ee2882e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=458102eefa0cf8fc3f33928ab90a86ac4c564f90", "patch": "@@ -44,6 +44,7 @@ use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufWriter, BufReader};\n use std::iter::repeat;\n+use std::mem;\n use std::path::{PathBuf, Path};\n use std::str;\n use std::sync::Arc;\n@@ -383,9 +384,7 @@ pub fn run(mut krate: clean::Crate,\n         privmod: false,\n         public_items: public_items,\n         orphan_methods: Vec::new(),\n-        traits: analysis.as_ref().map(|a| {\n-            a.external_traits.borrow_mut().take().unwrap()\n-        }).unwrap_or(HashMap::new()),\n+        traits: mem::replace(&mut krate.external_traits, HashMap::new()),\n         typarams: analysis.as_ref().map(|a| {\n             a.external_typarams.borrow_mut().take().unwrap()\n         }).unwrap_or(HashMap::new()),\n@@ -2239,7 +2238,7 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n     }\n \n     try!(write!(w, \"<div class='impl-items'>\"));\n-    for trait_item in &i.impl_.items {\n+    for trait_item in i.impl_.items.iter() {\n         try!(doctraititem(w, trait_item, true));\n     }\n \n@@ -2262,17 +2261,10 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n     // default methods which weren't overridden in the implementation block.\n     // FIXME: this also needs to be done for associated types, whenever defaults\n     // for them work.\n-    match i.impl_.trait_ {\n-        Some(clean::ResolvedPath { did, .. }) => {\n-            try!({\n-                match cache().traits.get(&did) {\n-                    Some(t) => try!(render_default_methods(w, t, &i.impl_)),\n-                    None => {}\n-                }\n-                Ok(())\n-            })\n+    if let Some(clean::ResolvedPath { did, .. }) = i.impl_.trait_ {\n+        if let Some(t) = cache().traits.get(&did) {\n+            try!(render_default_methods(w, t, &i.impl_));\n         }\n-        Some(..) | None => {}\n     }\n     try!(write!(w, \"</div>\"));\n     Ok(())"}, {"sha": "0bb2133c833c70aa78e7d7119ff7b0c43f75b2ec", "filename": "src/test/auxiliary/issue-13698.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Ftest%2Fauxiliary%2Fissue-13698.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Ftest%2Fauxiliary%2Fissue-13698.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-13698.rs?ref=458102eefa0cf8fc3f33928ab90a86ac4c564f90", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo {\n+    #[doc(hidden)]\n+    fn foo(&self) {}\n+}\n+\n+impl Foo for i32 {}"}, {"sha": "81cee0998abefff4c7c868eb4bdab070d4fa2bc8", "filename": "src/test/rustdoc/issue-13698.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Ftest%2Frustdoc%2Fissue-13698.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458102eefa0cf8fc3f33928ab90a86ac4c564f90/src%2Ftest%2Frustdoc%2Fissue-13698.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-13698.rs?ref=458102eefa0cf8fc3f33928ab90a86ac4c564f90", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-13698.rs\n+\n+extern crate issue_13698;\n+\n+pub struct Foo;\n+// @!has issue_13698/struct.Foo.html '//*[@id=\"method.foo\"]' 'fn foo'\n+impl issue_13698::Foo for Foo {}\n+\n+pub trait Bar {\n+    #[doc(hidden)]\n+    fn bar(&self) {}\n+}\n+\n+// @!has issue_13698/struct.Foo.html '//*[@id=\"method.foo\"]' 'fn bar'\n+impl Bar for Foo {}"}]}