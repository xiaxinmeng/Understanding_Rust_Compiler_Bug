{"sha": "2877928b22c239849a79b48d07139104ff144cd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Nzc5MjhiMjJjMjM5ODQ5YTc5YjQ4ZDA3MTM5MTA0ZmYxNDRjZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-04T00:31:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-04T00:31:33Z"}, "message": "auto merge of #12016 : FlaPer87/rust/remove-non-copyable, r=alexcrichton\n\ncc #10834", "tree": {"sha": "353c4f1867a372988399165465f6528a8b740b87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/353c4f1867a372988399165465f6528a8b740b87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2877928b22c239849a79b48d07139104ff144cd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2877928b22c239849a79b48d07139104ff144cd4", "html_url": "https://github.com/rust-lang/rust/commit/2877928b22c239849a79b48d07139104ff144cd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2877928b22c239849a79b48d07139104ff144cd4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fde11e7ae5b9b67dfdf23862f60f4ee4dae4910f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fde11e7ae5b9b67dfdf23862f60f4ee4dae4910f", "html_url": "https://github.com/rust-lang/rust/commit/fde11e7ae5b9b67dfdf23862f60f4ee4dae4910f"}, {"sha": "c6b1bce96f25e785d22e976d1cc41cabdae5ea73", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b1bce96f25e785d22e976d1cc41cabdae5ea73", "html_url": "https://github.com/rust-lang/rust/commit/c6b1bce96f25e785d22e976d1cc41cabdae5ea73"}], "stats": {"total": 151, "additions": 58, "deletions": 93}, "files": [{"sha": "03bf1101f1f293ef292bed66229afdff54616edc", "filename": "src/libextra/sync/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibextra%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibextra%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync%2Fmod.rs?ref=2877928b22c239849a79b48d07139104ff144cd4", "patch": "@@ -19,11 +19,11 @@\n \n use std::cast;\n use std::comm;\n+use std::kinds::marker;\n use std::sync::arc::UnsafeArc;\n use std::sync::atomics;\n use std::unstable::finally::Finally;\n use std::util;\n-use std::util::NonCopyable;\n \n use arc::MutexArc;\n \n@@ -191,7 +191,7 @@ pub struct Condvar<'a> {\n     // See the comment in write_cond for more detail.\n     priv order: ReacquireOrderLock<'a>,\n     // Make sure condvars are non-copyable.\n-    priv token: util::NonCopyable,\n+    priv nopod: marker::NoPod,\n }\n \n impl<'a> Condvar<'a> {\n@@ -334,7 +334,7 @@ impl Sem<~[WaitQueue]> {\n             blk(&Condvar {\n                 sem: self,\n                 order: Nothing,\n-                token: NonCopyable\n+                nopod: marker::NoPod\n             })\n         })\n     }\n@@ -574,7 +574,7 @@ impl RWLock {\n             (&self.order_lock).release();\n             let opt_lock = Just(&self.order_lock);\n             blk(&Condvar { sem: cond.sem, order: opt_lock,\n-                           token: NonCopyable })\n+                           nopod: marker::NoPod })\n         })\n     }\n \n@@ -609,7 +609,7 @@ impl RWLock {\n         (&self.access_lock).acquire();\n         (&self.order_lock).release();\n         (|| {\n-            blk(RWLockWriteMode { lock: self, token: NonCopyable })\n+            blk(RWLockWriteMode { lock: self, nopod: marker::NoPod })\n         }).finally(|| {\n             let writer_or_last_reader;\n             // Check if we're releasing from read mode or from write mode.\n@@ -662,16 +662,16 @@ impl RWLock {\n                 (&self.access_lock).release();\n             }\n         }\n-        RWLockReadMode { lock: token.lock, token: NonCopyable }\n+        RWLockReadMode { lock: token.lock, nopod: marker::NoPod }\n     }\n }\n \n /// The \"write permission\" token used for rwlock.write_downgrade().\n \n-pub struct RWLockWriteMode<'a> { priv lock: &'a RWLock, priv token: NonCopyable }\n+pub struct RWLockWriteMode<'a> { priv lock: &'a RWLock, priv nopod: marker::NoPod }\n /// The \"read permission\" token used for rwlock.write_downgrade().\n pub struct RWLockReadMode<'a> { priv lock: &'a RWLock,\n-                                   priv token: NonCopyable }\n+                                   priv nopod: marker::NoPod }\n \n impl<'a> RWLockWriteMode<'a> {\n     /// Access the pre-downgrade rwlock in write mode.\n@@ -682,7 +682,7 @@ impl<'a> RWLockWriteMode<'a> {\n         // access lock. See comment in RWLock::write_cond for why.\n         blk(&Condvar { sem:        &self.lock.access_lock,\n                        order: Just(&self.lock.order_lock),\n-                       token: NonCopyable })\n+                       nopod: marker::NoPod })\n     }\n }\n "}, {"sha": "e19b8ae712f9a0d9e6aa4ace2ff549b974f773e5", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=2877928b22c239849a79b48d07139104ff144cd4", "patch": "@@ -12,8 +12,7 @@\n \n use prelude::*;\n use cast;\n-use util::NonCopyable;\n-use kinds::{marker,Pod};\n+use kinds::{marker, Pod};\n \n /// A mutable memory location that admits only `Pod` data.\n pub struct Cell<T> {\n@@ -57,9 +56,9 @@ impl<T:Pod> Clone for Cell<T> {\n pub struct RefCell<T> {\n     priv value: T,\n     priv borrow: BorrowFlag,\n-    priv nc: NonCopyable,\n     priv marker1: marker::InvariantType<T>,\n     priv marker2: marker::NoFreeze,\n+    priv marker3: marker::NoPod,\n }\n \n // Values [1, MAX-1] represent the number of `Ref` active\n@@ -74,9 +73,9 @@ impl<T> RefCell<T> {\n         RefCell {\n             marker1: marker::InvariantType::<T>,\n             marker2: marker::NoFreeze,\n+            marker3: marker::NoPod,\n             value: value,\n             borrow: UNUSED,\n-            nc: NonCopyable\n         }\n     }\n "}, {"sha": "39b516aeb12a725fb6b2ff39f8b65c0707eb97c4", "filename": "src/libstd/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=2877928b22c239849a79b48d07139104ff144cd4", "patch": "@@ -481,6 +481,7 @@ mod tests {\n     use iter::range;\n     use str::StrSlice;\n     use util;\n+    use kinds::marker;\n     use vec::ImmutableVector;\n \n     #[test]\n@@ -551,7 +552,7 @@ mod tests {\n \n     #[test] #[should_fail]\n     fn test_option_too_much_dance() {\n-        let mut y = Some(util::NonCopyable);\n+        let mut y = Some(marker::NoPod);\n         let _y2 = y.take_unwrap();\n         let _y3 = y.take_unwrap();\n     }"}, {"sha": "9b90e43449107acc1ce4dc990384753654c0da38", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=2877928b22c239849a79b48d07139104ff144cd4", "patch": "@@ -23,40 +23,40 @@\n \n use unstable::intrinsics;\n use cast;\n+use std::kinds::marker;\n use option::{Option,Some,None};\n use ops::Drop;\n-use util::NonCopyable;\n \n /**\n  * A simple atomic flag, that can be set and cleared. The most basic atomic type.\n  */\n pub struct AtomicFlag {\n     priv v: int,\n-    priv nocopy: NonCopyable\n+    priv nopod: marker::NoPod\n }\n \n /**\n  * An atomic boolean type.\n  */\n pub struct AtomicBool {\n     priv v: uint,\n-    priv nocopy: NonCopyable\n+    priv nopod: marker::NoPod\n }\n \n /**\n  * A signed atomic integer type, supporting basic atomic arithmetic operations\n  */\n pub struct AtomicInt {\n     priv v: int,\n-    priv nocopy: NonCopyable\n+    priv nopod: marker::NoPod\n }\n \n /**\n  * An unsigned atomic integer type, supporting basic atomic arithmetic operations\n  */\n pub struct AtomicUint {\n     priv v: uint,\n-    priv nocopy: NonCopyable\n+    priv nopod: marker::NoPod\n }\n \n /**\n@@ -66,7 +66,7 @@ pub struct AtomicUint {\n #[cfg(not(stage0))]\n pub struct AtomicU64 {\n     priv v: u64,\n-    priv nocopy: NonCopyable\n+    priv nopod: marker::NoPod\n }\n \n /**\n@@ -75,12 +75,12 @@ pub struct AtomicU64 {\n #[cfg(not(stage0))]\n pub struct AtomicPtr<T> {\n     priv p: uint,\n-    priv nocopy: NonCopyable\n+    priv nopod: marker::NoPod\n }\n #[cfg(stage0)]\n pub struct AtomicPtr<T> {\n     priv p: *mut T,\n-    priv nocopy: NonCopyable\n+    priv nopod: marker::NoPod\n }\n \n /**\n@@ -105,17 +105,17 @@ pub enum Ordering {\n     SeqCst\n }\n \n-pub static INIT_ATOMIC_FLAG : AtomicFlag = AtomicFlag { v: 0, nocopy: NonCopyable };\n-pub static INIT_ATOMIC_BOOL : AtomicBool = AtomicBool { v: 0, nocopy: NonCopyable };\n-pub static INIT_ATOMIC_INT  : AtomicInt  = AtomicInt  { v: 0, nocopy: NonCopyable };\n-pub static INIT_ATOMIC_UINT : AtomicUint = AtomicUint { v: 0, nocopy: NonCopyable };\n+pub static INIT_ATOMIC_FLAG : AtomicFlag = AtomicFlag { v: 0, nopod: marker::NoPod };\n+pub static INIT_ATOMIC_BOOL : AtomicBool = AtomicBool { v: 0, nopod: marker::NoPod };\n+pub static INIT_ATOMIC_INT  : AtomicInt  = AtomicInt  { v: 0, nopod: marker::NoPod };\n+pub static INIT_ATOMIC_UINT : AtomicUint = AtomicUint { v: 0, nopod: marker::NoPod };\n #[cfg(not(stage0))]\n-pub static INIT_ATOMIC_U64 : AtomicU64 = AtomicU64 { v: 0, nocopy: NonCopyable };\n+pub static INIT_ATOMIC_U64 : AtomicU64 = AtomicU64 { v: 0, nopod: marker::NoPod };\n \n impl AtomicFlag {\n \n     pub fn new() -> AtomicFlag {\n-        AtomicFlag { v: 0, nocopy: NonCopyable }\n+        AtomicFlag { v: 0, nopod: marker::NoPod}\n     }\n \n     /**\n@@ -138,7 +138,7 @@ impl AtomicFlag {\n \n impl AtomicBool {\n     pub fn new(v: bool) -> AtomicBool {\n-        AtomicBool { v: if v { 1 } else { 0 }, nocopy: NonCopyable }\n+        AtomicBool { v: if v { 1 } else { 0 }, nopod: marker::NoPod }\n     }\n \n     #[inline]\n@@ -203,7 +203,7 @@ impl AtomicBool {\n \n impl AtomicInt {\n     pub fn new(v: int) -> AtomicInt {\n-        AtomicInt { v:v, nocopy: NonCopyable }\n+        AtomicInt { v:v, nopod: marker::NoPod}\n     }\n \n     #[inline]\n@@ -242,7 +242,7 @@ impl AtomicInt {\n #[cfg(not(stage0))]\n impl AtomicU64 {\n     pub fn new(v: u64) -> AtomicU64 {\n-        AtomicU64 { v:v, nocopy: NonCopyable }\n+        AtomicU64 { v:v, nopod: marker::NoPod }\n     }\n \n     #[inline]\n@@ -278,7 +278,7 @@ impl AtomicU64 {\n \n impl AtomicUint {\n     pub fn new(v: uint) -> AtomicUint {\n-        AtomicUint { v:v, nocopy: NonCopyable }\n+        AtomicUint { v:v, nopod: marker::NoPod }\n     }\n \n     #[inline]\n@@ -317,11 +317,11 @@ impl AtomicUint {\n impl<T> AtomicPtr<T> {\n     #[cfg(stage0)]\n     pub fn new(p: *mut T) -> AtomicPtr<T> {\n-        AtomicPtr { p: p, nocopy: NonCopyable }\n+        AtomicPtr { p: p, nopod: marker::NoPod }\n     }\n     #[cfg(not(stage0))]\n     pub fn new(p: *mut T) -> AtomicPtr<T> {\n-        AtomicPtr { p: p as uint, nocopy: NonCopyable }\n+        AtomicPtr { p: p as uint, nopod: marker::NoPod }\n     }\n \n     #[inline]"}, {"sha": "078933be78fdd01fdd806c3ea30b52f3e90e02af", "filename": "src/libstd/task.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=2877928b22c239849a79b48d07139104ff144cd4", "patch": "@@ -56,15 +56,14 @@\n use any::Any;\n use comm::{Chan, Port};\n use io::Writer;\n-use kinds::Send;\n+use kinds::{Send, marker};\n use logging::Logger;\n use option::{None, Some, Option};\n use result::{Result, Ok, Err};\n use rt::local::Local;\n use rt::task::Task;\n use send_str::{SendStr, IntoSendStr};\n use str::Str;\n-use util;\n \n #[cfg(test)] use any::{AnyOwnExt, AnyRefExt};\n #[cfg(test)] use comm::SharedChan;\n@@ -126,7 +125,7 @@ pub struct TaskOpts {\n pub struct TaskBuilder {\n     opts: TaskOpts,\n     priv gen_body: Option<proc(v: proc()) -> proc()>,\n-    priv can_not_copy: Option<util::NonCopyable>,\n+    priv nopod: Option<marker::NoPod>,\n }\n \n /**\n@@ -138,7 +137,7 @@ pub fn task() -> TaskBuilder {\n     TaskBuilder {\n         opts: TaskOpts::new(),\n         gen_body: None,\n-        can_not_copy: None,\n+        nopod: None,\n     }\n }\n "}, {"sha": "c075f9b4ba84f73e2d3c0314ff3be9635987699a", "filename": "src/libstd/util.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=2877928b22c239849a79b48d07139104ff144cd4", "patch": "@@ -12,7 +12,6 @@\n \n use cast;\n use ptr;\n-use prelude::*;\n use unstable::intrinsics;\n \n /// The identity function.\n@@ -53,15 +52,6 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n     src\n }\n \n-/// A non-copyable dummy type.\n-#[deriving(Eq, TotalEq, Ord, TotalOrd)]\n-#[unsafe_no_drop_flag]\n-pub struct NonCopyable;\n-\n-impl Drop for NonCopyable {\n-    fn drop(&mut self) { }\n-}\n-\n /// A type with no inhabitants\n pub enum Void { }\n \n@@ -101,37 +91,11 @@ mod tests {\n \n     #[test]\n     fn test_replace() {\n-        let mut x = Some(NonCopyable);\n+        let mut x = Some(~\"test\");\n         let y = replace(&mut x, None);\n         assert!(x.is_none());\n         assert!(y.is_some());\n     }\n-\n-    #[test]\n-    fn test_noncopyable() {\n-        assert_eq!(size_of::<NonCopyable>(), 0);\n-\n-        // verify that `#[unsafe_no_drop_flag]` works as intended on a zero-size struct\n-\n-        static mut did_run: bool = false;\n-\n-        struct Foo { five: int }\n-\n-        impl Drop for Foo {\n-            fn drop(&mut self) {\n-                assert_eq!(self.five, 5);\n-                unsafe {\n-                    did_run = true;\n-                }\n-            }\n-        }\n-\n-        {\n-            let _a = (NonCopyable, Foo { five: 5 }, NonCopyable);\n-        }\n-\n-        unsafe { assert_eq!(did_run, true); }\n-    }\n }\n \n /// Completely miscellaneous language-construct benchmarks."}, {"sha": "b80c222d4dc8bec94d2d430fcd4f323714685a6d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2877928b22c239849a79b48d07139104ff144cd4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2877928b22c239849a79b48d07139104ff144cd4", "patch": "@@ -81,6 +81,7 @@ use opt_vec::OptVec;\n \n use std::cell::Cell;\n use std::hashmap::HashSet;\n+use std::kinds::marker;\n use std::util;\n use std::vec;\n \n@@ -317,7 +318,7 @@ pub fn Parser(sess: @ParseSess, cfg: ast::CrateConfig, rdr: @Reader)\n         obsolete_set: HashSet::new(),\n         mod_path_stack: ~[],\n         open_braces: ~[],\n-        non_copyable: util::NonCopyable\n+        nopod: marker::NoPod\n     }\n }\n \n@@ -348,7 +349,7 @@ pub struct Parser {\n     /// Stack of spans of open delimiters. Used for error message.\n     open_braces: ~[Span],\n     /* do not copy the parser; its state is tied to outside state */\n-    priv non_copyable: util::NonCopyable\n+    priv nopod: marker::NoPod\n }\n \n fn is_plain_ident_or_underscore(t: &token::Token) -> bool {"}, {"sha": "0f09f423300228d528bbe9022ff041854cfb945f", "filename": "src/test/compile-fail/borrowck-struct-update-with-dtor.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2877928b22c239849a79b48d07139104ff144cd4/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2877928b22c239849a79b48d07139104ff144cd4/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs?ref=2877928b22c239849a79b48d07139104ff144cd4", "patch": "@@ -11,8 +11,9 @@\n // Issue 4691: Ensure that functional-struct-update can only copy, not\n // move, when the struct implements Drop.\n \n-use NC = std::util::NonCopyable;\n-struct S { a: int, nc: NC }\n+// NoPod\n+use NP = std::kinds::marker::NoPod;\n+struct S { a: int, np: NP }\n impl Drop for S { fn drop(&mut self) { } }\n \n struct T { a: int, mv: ~int }"}, {"sha": "878ea298db3956149607963f6b0b0fcbc72bb496", "filename": "src/test/run-pass/fsu-moves-and-copies.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2877928b22c239849a79b48d07139104ff144cd4/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2877928b22c239849a79b48d07139104ff144cd4/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs?ref=2877928b22c239849a79b48d07139104ff144cd4", "patch": "@@ -11,14 +11,14 @@\n // Issue 4691: Ensure that functional-struct-updates operates\n // correctly and moves rather than copy when appropriate.\n \n-use NC = std::util::NonCopyable;\n+use NP = std::kinds::marker::NoPod;\n \n-struct ncint { nc: NC, v: int }\n-fn ncint(v: int) -> ncint { ncint { nc: NC, v: v } }\n+struct ncint { np: NP, v: int }\n+fn ncint(v: int) -> ncint { ncint { np: NP, v: v } }\n \n-struct NoFoo { copied: int, noncopy: ncint, }\n+struct NoFoo { copied: int, nopod: ncint, }\n impl NoFoo {\n-    fn new(x:int,y:int) -> NoFoo { NoFoo { copied: x, noncopy: ncint(y) } }\n+    fn new(x:int,y:int) -> NoFoo { NoFoo { copied: x, nopod: ncint(y) } }\n }\n \n struct MoveFoo { copied: int, moved: ~int, }\n@@ -44,18 +44,18 @@ fn test0() {\n     // (and thus it is okay that these are Drop; compare against\n     // compile-fail test: borrowck-struct-update-with-dtor.rs).\n \n-    // Case 1: NonCopyable\n+    // Case 1: Nopodable\n     let f = DropNoFoo::new(1, 2);\n-    let b = DropNoFoo { inner: NoFoo { noncopy: ncint(3), ..f.inner }};\n-    let c = DropNoFoo { inner: NoFoo { noncopy: ncint(4), ..f.inner }};\n+    let b = DropNoFoo { inner: NoFoo { nopod: ncint(3), ..f.inner }};\n+    let c = DropNoFoo { inner: NoFoo { nopod: ncint(4), ..f.inner }};\n     assert_eq!(f.inner.copied,    1);\n-    assert_eq!(f.inner.noncopy.v, 2);\n+    assert_eq!(f.inner.nopod.v, 2);\n \n     assert_eq!(b.inner.copied,    1);\n-    assert_eq!(b.inner.noncopy.v, 3);\n+    assert_eq!(b.inner.nopod.v, 3);\n \n     assert_eq!(c.inner.copied,    1);\n-    assert_eq!(c.inner.noncopy.v, 4);\n+    assert_eq!(c.inner.nopod.v, 4);\n \n     // Case 2: Owned\n     let f = DropMoveFoo::new(5, 6);\n@@ -86,12 +86,12 @@ fn test1() {\n fn test2() {\n     // move non-copyable field\n     let f = NoFoo::new(21, 22);\n-    let b = NoFoo {noncopy: ncint(23), ..f};\n+    let b = NoFoo {nopod: ncint(23), ..f};\n     let c = NoFoo {copied: 24, ..f};\n     assert_eq!(b.copied,    21);\n-    assert_eq!(b.noncopy.v, 23);\n+    assert_eq!(b.nopod.v, 23);\n     assert_eq!(c.copied,    24);\n-    assert_eq!(c.noncopy.v, 22);\n+    assert_eq!(c.nopod.v, 22);\n }\n \n pub fn main() {"}]}