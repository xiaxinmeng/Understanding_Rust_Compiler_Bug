{"sha": "cec2a9fad057f71fc640392ba3fa47602aea12f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYzJhOWZhZDA1N2Y3MWZjNjQwMzkyYmEzZmE0NzYwMmFlYTEyZjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T17:47:44Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T12:59:49Z"}, "message": "macro_legacy_warnings -> error", "tree": {"sha": "039f08b12fa15e4ebe65956771e3905effbfb23e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/039f08b12fa15e4ebe65956771e3905effbfb23e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec2a9fad057f71fc640392ba3fa47602aea12f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec2a9fad057f71fc640392ba3fa47602aea12f6", "html_url": "https://github.com/rust-lang/rust/commit/cec2a9fad057f71fc640392ba3fa47602aea12f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec2a9fad057f71fc640392ba3fa47602aea12f6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6eaceedeeda764056eb0e2134735793533770d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6eaceedeeda764056eb0e2134735793533770d", "html_url": "https://github.com/rust-lang/rust/commit/2e6eaceedeeda764056eb0e2134735793533770d"}], "stats": {"total": 132, "additions": 35, "deletions": 97}, "files": [{"sha": "6b1a41943ce2f1f9c113cd8e1ce128ea28857c4d", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cec2a9fad057f71fc640392ba3fa47602aea12f6/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec2a9fad057f71fc640392ba3fa47602aea12f6/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=cec2a9fad057f71fc640392ba3fa47602aea12f6", "patch": "@@ -821,7 +821,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         span: Span,\n     ) -> AstFragment {\n         let mut parser = self.cx.new_parser_from_tts(toks);\n-        match parse_ast_fragment(&mut parser, kind, false) {\n+        match parse_ast_fragment(&mut parser, kind) {\n             Ok(fragment) => {\n                 ensure_complete_parse(&mut parser, path, kind.name(), span);\n                 fragment\n@@ -840,7 +840,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n pub fn parse_ast_fragment<'a>(\n     this: &mut Parser<'a>,\n     kind: AstFragmentKind,\n-    macro_legacy_warnings: bool,\n ) -> PResult<'a, AstFragment> {\n     Ok(match kind {\n         AstFragmentKind::Items => {\n@@ -873,11 +872,9 @@ pub fn parse_ast_fragment<'a>(\n         }\n         AstFragmentKind::Stmts => {\n             let mut stmts = SmallVec::new();\n-            while this.token != token::Eof &&\n-                    // won't make progress on a `}`\n-                    this.token != token::CloseDelim(token::Brace)\n-            {\n-                if let Some(stmt) = this.parse_full_stmt(macro_legacy_warnings)? {\n+            // Won't make progress on a `}`.\n+            while this.token != token::Eof && this.token != token::CloseDelim(token::Brace) {\n+                if let Some(stmt) = this.parse_full_stmt()? {\n                     stmts.push(stmt);\n                 }\n             }"}, {"sha": "6a9f5459cb5d0ee5fe56742b25819b99546f6310", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cec2a9fad057f71fc640392ba3fa47602aea12f6/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec2a9fad057f71fc640392ba3fa47602aea12f6/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=cec2a9fad057f71fc640392ba3fa47602aea12f6", "patch": "@@ -87,7 +87,7 @@ fn suggest_slice_pat(e: &mut DiagnosticBuilder<'_>, site_span: Span, parser: &Pa\n impl<'a> ParserAnyMacro<'a> {\n     crate fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n         let ParserAnyMacro { site_span, macro_ident, ref mut parser, arm_span } = *self;\n-        let fragment = panictry!(parse_ast_fragment(parser, kind, true).map_err(|mut e| {\n+        let fragment = panictry!(parse_ast_fragment(parser, kind).map_err(|mut e| {\n             if parser.token == token::Eof && e.message().ends_with(\", found `<eof>`\") {\n                 if !e.span.is_dummy() {\n                     // early end of macro arm (#52866)"}, {"sha": "928d2a40266028d56684b3bbd305c726fa365b83", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 9, "deletions": 53, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cec2a9fad057f71fc640392ba3fa47602aea12f6/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec2a9fad057f71fc640392ba3fa47602aea12f6/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=cec2a9fad057f71fc640392ba3fa47602aea12f6", "patch": "@@ -22,17 +22,14 @@ impl<'a> Parser<'a> {\n     /// Parses a statement. This stops just before trailing semicolons on everything but items.\n     /// e.g., a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.\n     pub fn parse_stmt(&mut self) -> PResult<'a, Option<Stmt>> {\n-        Ok(self.parse_stmt_without_recovery(true).unwrap_or_else(|mut e| {\n+        Ok(self.parse_stmt_without_recovery().unwrap_or_else(|mut e| {\n             e.emit();\n             self.recover_stmt_(SemiColonMode::Break, BlockMode::Ignore);\n             None\n         }))\n     }\n \n-    fn parse_stmt_without_recovery(\n-        &mut self,\n-        macro_legacy_warnings: bool,\n-    ) -> PResult<'a, Option<Stmt>> {\n+    fn parse_stmt_without_recovery(&mut self) -> PResult<'a, Option<Stmt>> {\n         maybe_whole!(self, NtStmt, |x| Some(x));\n \n         let attrs = self.parse_outer_attributes()?;\n@@ -74,7 +71,7 @@ impl<'a> Parser<'a> {\n             let path = self.parse_path(PathStyle::Expr)?;\n \n             if self.eat(&token::Not) {\n-                return self.parse_stmt_mac(lo, attrs.into(), path, macro_legacy_warnings);\n+                return self.parse_stmt_mac(lo, attrs.into(), path);\n             }\n \n             let expr = if self.check(&token::OpenDelim(token::Brace)) {\n@@ -137,7 +134,6 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         attrs: AttrVec,\n         path: ast::Path,\n-        legacy_warnings: bool,\n     ) -> PResult<'a, Option<Stmt>> {\n         let args = self.parse_mac_args()?;\n         let delim = args.delim();\n@@ -150,30 +146,6 @@ impl<'a> Parser<'a> {\n \n         let kind = if delim == token::Brace || self.token == token::Semi || self.token == token::Eof\n         {\n-            StmtKind::Mac(P((mac, style, attrs.into())))\n-        }\n-        // We used to incorrectly stop parsing macro-expanded statements here.\n-        // If the next token will be an error anyway but could have parsed with the\n-        // earlier behavior, stop parsing here and emit a warning to avoid breakage.\n-        else if legacy_warnings\n-            && self.token.can_begin_expr()\n-            && match self.token.kind {\n-                // These can continue an expression, so we can't stop parsing and warn.\n-                token::OpenDelim(token::Paren)\n-                | token::OpenDelim(token::Bracket)\n-                | token::BinOp(token::Minus)\n-                | token::BinOp(token::Star)\n-                | token::BinOp(token::And)\n-                | token::BinOp(token::Or)\n-                | token::AndAnd\n-                | token::OrOr\n-                | token::DotDot\n-                | token::DotDotDot\n-                | token::DotDotEq => false,\n-                _ => true,\n-            }\n-        {\n-            self.warn_missing_semicolon();\n             StmtKind::Mac(P((mac, style, attrs)))\n         } else {\n             // Since none of the above applied, this is an expression statement macro.\n@@ -334,7 +306,7 @@ impl<'a> Parser<'a> {\n         //      bar;\n         //\n         // which is valid in other languages, but not Rust.\n-        match self.parse_stmt_without_recovery(false) {\n+        match self.parse_stmt_without_recovery() {\n             Ok(Some(stmt)) => {\n                 if self.look_ahead(1, |t| t == &token::OpenDelim(token::Brace))\n                     || do_not_suggest_help\n@@ -393,7 +365,7 @@ impl<'a> Parser<'a> {\n             if self.token == token::Eof {\n                 break;\n             }\n-            let stmt = match self.parse_full_stmt(false) {\n+            let stmt = match self.parse_full_stmt() {\n                 Err(mut err) => {\n                     self.maybe_annotate_with_ascription(&mut err, false);\n                     err.emit();\n@@ -413,11 +385,11 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a statement, including the trailing semicolon.\n-    pub fn parse_full_stmt(&mut self, macro_legacy_warnings: bool) -> PResult<'a, Option<Stmt>> {\n+    pub fn parse_full_stmt(&mut self) -> PResult<'a, Option<Stmt>> {\n         // Skip looking for a trailing semicolon when we have an interpolated statement.\n         maybe_whole!(self, NtStmt, |x| Some(x));\n \n-        let mut stmt = match self.parse_stmt_without_recovery(macro_legacy_warnings)? {\n+        let mut stmt = match self.parse_stmt_without_recovery()? {\n             Some(stmt) => stmt,\n             None => return Ok(None),\n         };\n@@ -457,13 +429,8 @@ impl<'a> Parser<'a> {\n                 }\n             }\n             StmtKind::Local(..) => {\n-                // We used to incorrectly allow a macro-expanded let statement to lack a semicolon.\n-                if macro_legacy_warnings && self.token != token::Semi {\n-                    self.warn_missing_semicolon();\n-                } else {\n-                    self.expect_semi()?;\n-                    eat_semi = false;\n-                }\n+                self.expect_semi()?;\n+                eat_semi = false;\n             }\n             _ => {}\n         }\n@@ -475,17 +442,6 @@ impl<'a> Parser<'a> {\n         Ok(Some(stmt))\n     }\n \n-    fn warn_missing_semicolon(&self) {\n-        self.diagnostic()\n-            .struct_span_warn(self.token.span, {\n-                &format!(\"expected `;`, found {}\", super::token_descr(&self.token))\n-            })\n-            .note({\n-                \"this was erroneously allowed and will become a hard error in a future release\"\n-            })\n-            .emit();\n-    }\n-\n     pub(super) fn mk_block(&self, stmts: Vec<Stmt>, rules: BlockCheckMode, span: Span) -> P<Block> {\n         P(Block { stmts, id: DUMMY_NODE_ID, rules, span })\n     }"}, {"sha": "d962a52139eea847d01cbaa3bcbb754ef4ab6dba", "filename": "src/test/ui/missing/missing-semicolon-warning.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e6eaceedeeda764056eb0e2134735793533770d/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6eaceedeeda764056eb0e2134735793533770d/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.rs?ref=2e6eaceedeeda764056eb0e2134735793533770d", "patch": "@@ -1,12 +0,0 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n-#![allow(unused)]\n-\n-macro_rules! m {\n-    ($($e1:expr),*; $($e2:expr),*) => {\n-        $( let x = $e1 )*; //~ WARN expected `;`\n-        $( println!(\"{}\", $e2) )*; //~ WARN expected `;`\n-    }\n-}\n-\n-\n-fn main() { m!(0, 0; 0, 0); }"}, {"sha": "ecaefd47de0b4a80cca7afc519ba4f7bbe8dfc43", "filename": "src/test/ui/missing/missing-semicolon-warning.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2e6eaceedeeda764056eb0e2134735793533770d/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e6eaceedeeda764056eb0e2134735793533770d/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr?ref=2e6eaceedeeda764056eb0e2134735793533770d", "patch": "@@ -1,24 +0,0 @@\n-warning: expected `;`, found keyword `let`\n-  --> $DIR/missing-semicolon-warning.rs:6:12\n-   |\n-LL |         $( let x = $e1 )*;\n-   |            ^^^\n-...\n-LL | fn main() { m!(0, 0; 0, 0); }\n-   |             --------------- in this macro invocation\n-   |\n-   = note: this was erroneously allowed and will become a hard error in a future release\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: expected `;`, found `println`\n-  --> $DIR/missing-semicolon-warning.rs:7:12\n-   |\n-LL |         $( println!(\"{}\", $e2) )*;\n-   |            ^^^^^^^\n-...\n-LL | fn main() { m!(0, 0; 0, 0); }\n-   |             --------------- in this macro invocation\n-   |\n-   = note: this was erroneously allowed and will become a hard error in a future release\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-"}, {"sha": "a24dfa761a60ff3d9ef3b4c20cb4de6c8d961684", "filename": "src/test/ui/parser/missing-semicolon.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cec2a9fad057f71fc640392ba3fa47602aea12f6/src%2Ftest%2Fui%2Fparser%2Fmissing-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec2a9fad057f71fc640392ba3fa47602aea12f6/src%2Ftest%2Fui%2Fparser%2Fmissing-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing-semicolon.rs?ref=cec2a9fad057f71fc640392ba3fa47602aea12f6", "patch": "@@ -0,0 +1,8 @@\n+macro_rules! m {\n+    ($($e1:expr),*; $($e2:expr),*) => {\n+        $( let x = $e1 )*; //~ ERROR expected one of `.`, `;`, `?`, or\n+        $( println!(\"{}\", $e2) )*;\n+    }\n+}\n+\n+fn main() { m!(0, 0; 0, 0); }"}, {"sha": "26cb3d13d9c481a047ec82fa7daaf70f406aff92", "filename": "src/test/ui/parser/missing-semicolon.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cec2a9fad057f71fc640392ba3fa47602aea12f6/src%2Ftest%2Fui%2Fparser%2Fmissing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cec2a9fad057f71fc640392ba3fa47602aea12f6/src%2Ftest%2Fui%2Fparser%2Fmissing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing-semicolon.stderr?ref=cec2a9fad057f71fc640392ba3fa47602aea12f6", "patch": "@@ -0,0 +1,13 @@\n+error: expected one of `.`, `;`, `?`, or an operator, found keyword `let`\n+  --> $DIR/missing-semicolon.rs:3:12\n+   |\n+LL |         $( let x = $e1 )*;\n+   |            ^^^ expected one of `.`, `;`, `?`, or an operator\n+...\n+LL | fn main() { m!(0, 0; 0, 0); }\n+   |             --------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}