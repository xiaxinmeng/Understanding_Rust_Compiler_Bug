{"sha": "46492ffabd7194bb134035cadcd66d47f1b97db8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NDkyZmZhYmQ3MTk0YmIxMzQwMzVjYWRjZDY2ZDQ3ZjFiOTdkYjg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-05T15:49:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-05T15:49:14Z"}, "message": "Rollup merge of #49350 - abonander:macros-in-extern, r=petrochenkov\n\nExpand macros in `extern {}` blocks\n\nThis permits macro and proc-macro and attribute invocations (the latter only with the `proc_macro` feature of course) in `extern {}` blocks, gated behind a new `macros_in_extern` feature.\n\nA tracking issue is now open at #49476\n\ncloses #48747", "tree": {"sha": "f361c33cc5f7794ae707b5ed1d60fff877000575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f361c33cc5f7794ae707b5ed1d60fff877000575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46492ffabd7194bb134035cadcd66d47f1b97db8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaxkV6CRBK7hj4Ov3rIwAAdHIIAF9nDh+PqPd3N+7+GM+1/Kv1\ntStmvqZ3XVOFJ4rYo03wNeaLrs+QMiWNkmooR6NG6BjsXgE8gqxlIurKE5E9rWxe\n1UC0UWVeR4CcPp/FhkmJ45TEty4PDcLTWjbEBLXYjRex45CN6ZT1ihMVrL7K4rdn\nM9q5TGF4nB3L4N6Dc6+i/lP1kXIqa9HXAlE7I04c1cUGfroxsVvTTyC+VTZyNMPa\n01uM3LI6p9mZAFHZzqW4Zf7va3o4IqBQMMezbhQ8LdYK51tmu0MVecig8WpCeKEP\ntmRss+6MUwttxFTuGveCIS7ZAlLv+PfxZiWCPEarrY6d1k2yYFS9xwwncUYKQFc=\n=B41M\n-----END PGP SIGNATURE-----\n", "payload": "tree f361c33cc5f7794ae707b5ed1d60fff877000575\nparent b0bd9a771e81740da7e4a7a2f5a6dfecce10c699\nparent 5d74990cebb82b9573ea6a9d509bb8e05fd6681e\nauthor Alex Crichton <alex@alexcrichton.com> 1522943354 -0500\ncommitter GitHub <noreply@github.com> 1522943354 -0500\n\nRollup merge of #49350 - abonander:macros-in-extern, r=petrochenkov\n\nExpand macros in `extern {}` blocks\n\nThis permits macro and proc-macro and attribute invocations (the latter only with the `proc_macro` feature of course) in `extern {}` blocks, gated behind a new `macros_in_extern` feature.\n\nA tracking issue is now open at #49476\n\ncloses #48747\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46492ffabd7194bb134035cadcd66d47f1b97db8", "html_url": "https://github.com/rust-lang/rust/commit/46492ffabd7194bb134035cadcd66d47f1b97db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46492ffabd7194bb134035cadcd66d47f1b97db8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0bd9a771e81740da7e4a7a2f5a6dfecce10c699", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0bd9a771e81740da7e4a7a2f5a6dfecce10c699", "html_url": "https://github.com/rust-lang/rust/commit/b0bd9a771e81740da7e4a7a2f5a6dfecce10c699"}, {"sha": "5d74990cebb82b9573ea6a9d509bb8e05fd6681e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d74990cebb82b9573ea6a9d509bb8e05fd6681e", "html_url": "https://github.com/rust-lang/rust/commit/5d74990cebb82b9573ea6a9d509bb8e05fd6681e"}], "stats": {"total": 609, "additions": 544, "deletions": 65}, "files": [{"sha": "b767ede5faa702810212f8e9f0c4448b4396a2d2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -2724,6 +2724,7 @@ impl<'a> LoweringContext<'a> {\n                         hir::ForeignItemStatic(this.lower_ty(t, ImplTraitContext::Disallowed), m)\n                     }\n                     ForeignItemKind::Ty => hir::ForeignItemType,\n+                    ForeignItemKind::Macro(_) => panic!(\"shouldn't exist here\"),\n                 },\n                 vis: this.lower_visibility(&i.vis, None),\n                 span: i.span,"}, {"sha": "20f46cb348d1d905914bb2ad76bf07b00c9a3a00", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -181,6 +181,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'a ForeignItem) {\n+        if let ForeignItemKind::Macro(_) = foreign_item.node {\n+            return self.visit_macro_invoc(foreign_item.id, false);\n+        }\n+\n         let def = self.create_def(foreign_item.id,\n                                   DefPathData::ValueNs(foreign_item.ident.name.as_str()),\n                                   REGULAR_SPACE,"}, {"sha": "b34decc1c69a5f937b920d9dbbff2c46a0d5cc27", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -381,7 +381,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .span_label(span, \"pattern not allowed in foreign function\").emit();\n                 });\n             }\n-            ForeignItemKind::Static(..) | ForeignItemKind::Ty => {}\n+            ForeignItemKind::Static(..) | ForeignItemKind::Ty | ForeignItemKind::Macro(..) => {}\n         }\n \n         visit::walk_foreign_item(self, fi)\n@@ -460,6 +460,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         self.check_late_bound_lifetime_defs(&t.bound_generic_params);\n         visit::walk_poly_trait_ref(self, t, m);\n     }\n+\n+    fn visit_mac(&mut self, mac: &Spanned<Mac_>) {\n+        // when a new macro kind is added but the author forgets to set it up for expansion\n+        // because that's the only part that won't cause a compiler error\n+        self.session.diagnostic()\n+            .span_bug(mac.span, \"macro invocation missed in expansion; did you forget to override \\\n+                                 the relevant `fold_*()` method in `PlaceholderExpander`?\");\n+    }\n }\n \n // Bans nested `impl Trait`, e.g. `impl Into<impl Debug>`.\n@@ -522,6 +530,10 @@ impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n             }\n         }\n     }\n+\n+    fn visit_mac(&mut self, _mac: &Spanned<Mac_>) {\n+        // covered in AstValidator\n+    }\n }\n \n // Bans `impl Trait` in path projections like `<impl Iterator>::Item` or `Foo::Bar<impl Trait>`.\n@@ -583,6 +595,10 @@ impl<'a> Visitor<'a> for ImplTraitProjectionVisitor<'a> {\n             _ => visit::walk_ty(self, t),\n         }\n     }\n+\n+    fn visit_mac(&mut self, _mac: &Spanned<Mac_>) {\n+        // covered in AstValidator\n+    }\n }\n \n pub fn check_crate(session: &Session, krate: &Crate) {"}, {"sha": "397590012fd7334716e97c906734631364d2895f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -456,6 +456,7 @@ impl<'a> Resolver<'a> {\n             ForeignItemKind::Ty => {\n                 (Def::TyForeign(self.definitions.local_def_id(item.id)), TypeNS)\n             }\n+            ForeignItemKind::Macro(_) => unreachable!(),\n         };\n         let parent = self.current_module;\n         let vis = self.resolve_visibility(&item.vis);\n@@ -816,6 +817,11 @@ impl<'a, 'b> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'a ForeignItem) {\n+        if let ForeignItemKind::Macro(_) = foreign_item.node {\n+            self.visit_invoc(foreign_item.id);\n+            return;\n+        }\n+\n         self.resolver.build_reduced_graph_for_foreign_item(foreign_item, self.expansion);\n         visit::walk_foreign_item(self, foreign_item);\n     }"}, {"sha": "64d57ea34c22934bfb3bda29fecef0f25a1871b9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -863,6 +863,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n             }\n             ForeignItemKind::Static(..) => NoTypeParameters,\n             ForeignItemKind::Ty => NoTypeParameters,\n+            ForeignItemKind::Macro(..) => NoTypeParameters,\n         };\n         self.with_type_parameter_rib(type_parameters, |this| {\n             visit::walk_foreign_item(this, foreign_item);"}, {"sha": "5e51797d720660f6b44b194030176e0d47cd2736", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -1812,6 +1812,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                     self.dumper.dump_def(&access, var_data);\n                 }\n             }\n+            ast::ForeignItemKind::Macro(..) => {}\n         }\n     }\n }"}, {"sha": "fb4cb2afe5a663c2a49493bf38695c6c21b5bdaf", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -182,6 +182,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             }\n             // FIXME(plietar): needs a new DefKind in rls-data\n             ast::ForeignItemKind::Ty => None,\n+            ast::ForeignItemKind::Macro(..) => None,\n         }\n     }\n "}, {"sha": "fd4d3e76386425e3d6b440d343e74a44f91fd5e9", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -822,6 +822,7 @@ impl Sig for ast::ForeignItem {\n                     refs: vec![],\n                 })\n             }\n+            ast::ForeignItemKind::Macro(..) => Err(\"macro\"),\n         }\n     }\n }"}, {"sha": "9d0c85a34f935d3beae11c48e5feb32c2b1e2c4a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -2192,6 +2192,8 @@ pub enum ForeignItemKind {\n     Static(P<Ty>, bool),\n     /// A foreign type\n     Ty,\n+    /// A macro invocation\n+    Macro(Mac),\n }\n \n impl ForeignItemKind {\n@@ -2200,6 +2202,7 @@ impl ForeignItemKind {\n             ForeignItemKind::Fn(..) => \"foreign function\",\n             ForeignItemKind::Static(..) => \"foreign static item\",\n             ForeignItemKind::Ty => \"foreign type\",\n+            ForeignItemKind::Macro(..) => \"macro in foreign module\",\n         }\n     }\n }"}, {"sha": "5a735be55c0e652ec439a29f772e550e055bfabd", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -38,6 +38,7 @@ pub enum Annotatable {\n     Item(P<ast::Item>),\n     TraitItem(P<ast::TraitItem>),\n     ImplItem(P<ast::ImplItem>),\n+    ForeignItem(P<ast::ForeignItem>),\n     Stmt(P<ast::Stmt>),\n     Expr(P<ast::Expr>),\n }\n@@ -48,6 +49,7 @@ impl HasAttrs for Annotatable {\n             Annotatable::Item(ref item) => &item.attrs,\n             Annotatable::TraitItem(ref trait_item) => &trait_item.attrs,\n             Annotatable::ImplItem(ref impl_item) => &impl_item.attrs,\n+            Annotatable::ForeignItem(ref foreign_item) => &foreign_item.attrs,\n             Annotatable::Stmt(ref stmt) => stmt.attrs(),\n             Annotatable::Expr(ref expr) => &expr.attrs,\n         }\n@@ -58,6 +60,8 @@ impl HasAttrs for Annotatable {\n             Annotatable::Item(item) => Annotatable::Item(item.map_attrs(f)),\n             Annotatable::TraitItem(trait_item) => Annotatable::TraitItem(trait_item.map_attrs(f)),\n             Annotatable::ImplItem(impl_item) => Annotatable::ImplItem(impl_item.map_attrs(f)),\n+            Annotatable::ForeignItem(foreign_item) =>\n+                Annotatable::ForeignItem(foreign_item.map_attrs(f)),\n             Annotatable::Stmt(stmt) => Annotatable::Stmt(stmt.map_attrs(f)),\n             Annotatable::Expr(expr) => Annotatable::Expr(expr.map_attrs(f)),\n         }\n@@ -70,6 +74,7 @@ impl Annotatable {\n             Annotatable::Item(ref item) => item.span,\n             Annotatable::TraitItem(ref trait_item) => trait_item.span,\n             Annotatable::ImplItem(ref impl_item) => impl_item.span,\n+            Annotatable::ForeignItem(ref foreign_item) => foreign_item.span,\n             Annotatable::Stmt(ref stmt) => stmt.span,\n             Annotatable::Expr(ref expr) => expr.span,\n         }\n@@ -106,6 +111,13 @@ impl Annotatable {\n         }\n     }\n \n+    pub fn expect_foreign_item(self) -> ast::ForeignItem {\n+        match self {\n+            Annotatable::ForeignItem(i) => i.into_inner(),\n+            _ => panic!(\"expected foreign item\")\n+        }\n+    }\n+\n     pub fn derive_allowed(&self) -> bool {\n         match *self {\n             Annotatable::Item(ref item) => match item.node {\n@@ -317,6 +329,9 @@ pub trait MacResult {\n         None\n     }\n \n+    /// Create zero or more items in an `extern {}` block\n+    fn make_foreign_items(self: Box<Self>) -> Option<SmallVector<ast::ForeignItem>> { None }\n+\n     /// Create a pattern.\n     fn make_pat(self: Box<Self>) -> Option<P<ast::Pat>> {\n         None\n@@ -365,6 +380,7 @@ make_MacEager! {\n     items: SmallVector<P<ast::Item>>,\n     impl_items: SmallVector<ast::ImplItem>,\n     trait_items: SmallVector<ast::TraitItem>,\n+    foreign_items: SmallVector<ast::ForeignItem>,\n     stmts: SmallVector<ast::Stmt>,\n     ty: P<ast::Ty>,\n }\n@@ -386,6 +402,10 @@ impl MacResult for MacEager {\n         self.trait_items\n     }\n \n+    fn make_foreign_items(self: Box<Self>) -> Option<SmallVector<ast::ForeignItem>> {\n+        self.foreign_items\n+    }\n+\n     fn make_stmts(self: Box<Self>) -> Option<SmallVector<ast::Stmt>> {\n         match self.stmts.as_ref().map_or(0, |s| s.len()) {\n             0 => make_stmts_default!(self),\n@@ -502,6 +522,14 @@ impl MacResult for DummyResult {\n         }\n     }\n \n+    fn make_foreign_items(self: Box<Self>) -> Option<SmallVector<ast::ForeignItem>> {\n+        if self.expr_only {\n+            None\n+        } else {\n+            Some(SmallVector::new())\n+        }\n+    }\n+\n     fn make_stmts(self: Box<DummyResult>) -> Option<SmallVector<ast::Stmt>> {\n         Some(SmallVector::one(ast::Stmt {\n             id: ast::DUMMY_NODE_ID,"}, {"sha": "105de13b976a1950102e528a3ed441adc1b892b3", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -133,6 +133,8 @@ expansions! {\n         \"trait item\", .make_trait_items, lift .fold_trait_item, lift .visit_trait_item;\n     ImplItems: SmallVector<ast::ImplItem> [SmallVector, ast::ImplItem],\n         \"impl item\",  .make_impl_items,  lift .fold_impl_item,  lift .visit_impl_item;\n+    ForeignItems: SmallVector<ast::ForeignItem> [SmallVector, ast::ForeignItem],\n+        \"foreign item\", .make_foreign_items, lift .fold_foreign_item, lift .visit_foreign_item;\n }\n \n impl ExpansionKind {\n@@ -149,6 +151,8 @@ impl ExpansionKind {\n                 Expansion::ImplItems(items.map(Annotatable::expect_impl_item).collect()),\n             ExpansionKind::TraitItems =>\n                 Expansion::TraitItems(items.map(Annotatable::expect_trait_item).collect()),\n+            ExpansionKind::ForeignItems =>\n+                Expansion::ForeignItems(items.map(Annotatable::expect_foreign_item).collect()),\n             _ => unreachable!(),\n         }\n     }\n@@ -435,6 +439,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             Annotatable::ImplItem(item) => {\n                 Annotatable::ImplItem(item.map(|item| cfg.fold_impl_item(item).pop().unwrap()))\n             }\n+            Annotatable::ForeignItem(item) => {\n+                Annotatable::ForeignItem(\n+                    item.map(|item| cfg.fold_foreign_item(item).pop().unwrap())\n+                )\n+            }\n             Annotatable::Stmt(stmt) => {\n                 Annotatable::Stmt(stmt.map(|stmt| cfg.fold_stmt(stmt).pop().unwrap()))\n             }\n@@ -509,6 +518,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     Annotatable::Item(item) => token::NtItem(item),\n                     Annotatable::TraitItem(item) => token::NtTraitItem(item.into_inner()),\n                     Annotatable::ImplItem(item) => token::NtImplItem(item.into_inner()),\n+                    Annotatable::ForeignItem(item) => token::NtForeignItem(item.into_inner()),\n                     Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n                     Annotatable::Expr(expr) => token::NtExpr(expr),\n                 })).into();\n@@ -793,6 +803,15 @@ impl<'a> Parser<'a> {\n                 }\n                 Expansion::ImplItems(items)\n             }\n+            ExpansionKind::ForeignItems => {\n+                let mut items = SmallVector::new();\n+                while self.token != token::Eof {\n+                    if let Some(item) = self.parse_foreign_item()? {\n+                        items.push(item);\n+                    }\n+                }\n+                Expansion::ForeignItems(items)\n+            }\n             ExpansionKind::Stmts => {\n                 let mut stmts = SmallVector::new();\n                 while self.token != token::Eof &&\n@@ -1166,6 +1185,44 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         noop_fold_foreign_mod(self.cfg.configure_foreign_mod(foreign_mod), self)\n     }\n \n+    fn fold_foreign_item(&mut self,\n+                         foreign_item: ast::ForeignItem) -> SmallVector<ast::ForeignItem> {\n+        let (attr, traits, foreign_item) = self.classify_item(foreign_item);\n+\n+        let explain = if self.cx.ecfg.proc_macro_enabled() {\n+            feature_gate::EXPLAIN_PROC_MACROS_IN_EXTERN\n+        } else {\n+            feature_gate::EXPLAIN_MACROS_IN_EXTERN\n+        };\n+\n+        if attr.is_some() || !traits.is_empty()  {\n+            if !self.cx.ecfg.macros_in_extern_enabled() {\n+                if let Some(ref attr) = attr {\n+                    emit_feature_err(&self.cx.parse_sess, \"macros_in_extern\", attr.span,\n+                                     GateIssue::Language, explain);\n+                }\n+            }\n+\n+            let item = Annotatable::ForeignItem(P(foreign_item));\n+            return self.collect_attr(attr, traits, item, ExpansionKind::ForeignItems)\n+                .make_foreign_items();\n+        }\n+\n+        if let ast::ForeignItemKind::Macro(mac) = foreign_item.node {\n+            self.check_attributes(&foreign_item.attrs);\n+\n+            if !self.cx.ecfg.macros_in_extern_enabled() {\n+                emit_feature_err(&self.cx.parse_sess, \"macros_in_extern\", foreign_item.span,\n+                                 GateIssue::Language, explain);\n+            }\n+\n+            return self.collect_bang(mac, foreign_item.span, ExpansionKind::ForeignItems)\n+                .make_foreign_items();\n+        }\n+\n+        noop_fold_foreign_item(foreign_item, self)\n+    }\n+\n     fn fold_item_kind(&mut self, item: ast::ItemKind) -> ast::ItemKind {\n         match item {\n             ast::ItemKind::MacroDef(..) => item,\n@@ -1311,6 +1368,7 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn enable_allow_internal_unstable = allow_internal_unstable,\n         fn enable_custom_derive = custom_derive,\n         fn proc_macro_enabled = proc_macro,\n+        fn macros_in_extern_enabled = macros_in_extern,\n     }\n }\n "}, {"sha": "9f60882ca29fc408224b388e1de08f181847cda3", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -60,6 +60,10 @@ pub fn placeholder(kind: ExpansionKind, id: ast::NodeId) -> Expansion {\n             defaultness: ast::Defaultness::Final,\n             tokens: None,\n         })),\n+        ExpansionKind::ForeignItems => Expansion::ForeignItems(SmallVector::one(ast::ForeignItem {\n+            id, span, ident, vis, attrs,\n+            node: ast::ForeignItemKind::Macro(mac_placeholder()),\n+        })),\n         ExpansionKind::Pat => Expansion::Pat(P(ast::Pat {\n             id, span, node: ast::PatKind::Mac(mac_placeholder()),\n         })),\n@@ -132,6 +136,13 @@ impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n         }\n     }\n \n+    fn fold_foreign_item(&mut self, item: ast::ForeignItem) -> SmallVector<ast::ForeignItem> {\n+        match item.node {\n+            ast::ForeignItemKind::Macro(_) => self.remove(item.id).make_foreign_items(),\n+            _ => noop_fold_foreign_item(item, self),\n+        }\n+    }\n+\n     fn fold_expr(&mut self, expr: P<ast::Expr>) -> P<ast::Expr> {\n         match expr.node {\n             ast::ExprKind::Mac(_) => self.remove(expr.id).make_expr(),"}, {"sha": "9d1f4ccf8a3d2bccb72be6e9cd6ebd10a446f755", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -443,6 +443,9 @@ declare_features! (\n \n     // Allows keywords to be escaped for use as identifiers\n     (active, raw_identifiers, \"1.26.0\", Some(48589), None),\n+\n+    // Allows macro invocations in `extern {}` blocks\n+    (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n );\n \n declare_features! (\n@@ -1291,6 +1294,13 @@ pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &'static str =\n pub const EXPLAIN_MACRO_AT_MOST_ONCE_REP: &'static str =\n     \"Using the `?` macro Kleene operator for \\\"at most one\\\" repetition is unstable\";\n \n+pub const EXPLAIN_MACROS_IN_EXTERN: &'static str =\n+    \"Macro invocations in `extern {}` blocks are experimental.\";\n+\n+// mention proc-macros when enabled\n+pub const EXPLAIN_PROC_MACROS_IN_EXTERN: &'static str =\n+    \"Macro and proc-macro invocations in `extern {}` blocks are experimental.\";\n+\n struct PostExpansionVisitor<'a> {\n     context: &'a Context<'a>,\n }\n@@ -1595,6 +1605,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, extern_types, i.span,\n                                        \"extern types are experimental\");\n             }\n+            ast::ForeignItemKind::Macro(..) => {}\n         }\n \n         visit::walk_foreign_item(self, i)"}, {"sha": "1bee67bf3604ad1febed19853ec16ec022e34b06", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -60,10 +60,14 @@ pub trait Folder : Sized {\n         noop_fold_use_tree(use_tree, self)\n     }\n \n-    fn fold_foreign_item(&mut self, ni: ForeignItem) -> ForeignItem {\n+    fn fold_foreign_item(&mut self, ni: ForeignItem) -> SmallVector<ForeignItem> {\n         noop_fold_foreign_item(ni, self)\n     }\n \n+    fn fold_foreign_item_simple(&mut self, ni: ForeignItem) -> ForeignItem {\n+        noop_fold_foreign_item_simple(ni, self)\n+    }\n+\n     fn fold_item(&mut self, i: P<Item>) -> SmallVector<P<Item>> {\n         noop_fold_item(i, self)\n     }\n@@ -414,7 +418,7 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n                                         fld: &mut T) -> ForeignMod {\n     ForeignMod {\n         abi,\n-        items: items.move_map(|x| fld.fold_foreign_item(x)),\n+        items: items.move_flat_map(|x| fld.fold_foreign_item(x)),\n     }\n }\n \n@@ -648,6 +652,10 @@ pub fn noop_fold_interpolated<T: Folder>(nt: token::Nonterminal, fld: &mut T)\n         token::NtArg(arg) => token::NtArg(fld.fold_arg(arg)),\n         token::NtVis(vis) => token::NtVis(fld.fold_vis(vis)),\n         token::NtLifetime(lifetime) => token::NtLifetime(fld.fold_lifetime(lifetime)),\n+        token::NtForeignItem(ni) =>\n+            token::NtForeignItem(fld.fold_foreign_item(ni)\n+                                 // see reasoning above\n+                                 .expect_one(\"expected fold to produce exactly one item\")),\n     }\n }\n \n@@ -1072,7 +1080,12 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span,\n     }\n }\n \n-pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T) -> ForeignItem {\n+pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T)\n+-> SmallVector<ForeignItem> {\n+    SmallVector::one(folder.fold_foreign_item_simple(ni))\n+}\n+\n+pub fn noop_fold_foreign_item_simple<T: Folder>(ni: ForeignItem, folder: &mut T) -> ForeignItem {\n     ForeignItem {\n         id: folder.new_id(ni.id),\n         vis: folder.fold_vis(ni.vis),\n@@ -1086,6 +1099,7 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T) -> For\n                 ForeignItemKind::Static(folder.fold_ty(t), m)\n             }\n             ForeignItemKind::Ty => ForeignItemKind::Ty,\n+            ForeignItemKind::Macro(mac) => ForeignItemKind::Macro(folder.fold_mac(mac)),\n         },\n         span: folder.new_span(ni.span)\n     }"}, {"sha": "9936eea935684a0f0ea52e0bc72624d9b2d52859", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 69, "deletions": 55, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -26,7 +26,7 @@ use ast::{Ident, ImplItem, IsAuto, Item, ItemKind};\n use ast::{Label, Lifetime, LifetimeDef, Lit, LitKind, UintTy};\n use ast::Local;\n use ast::MacStmtStyle;\n-use ast::Mac_;\n+use ast::{Mac, Mac_};\n use ast::{MutTy, Mutability};\n use ast::{Pat, PatKind, PathSegment};\n use ast::{PolyTraitRef, QSelf};\n@@ -1417,28 +1417,8 @@ impl<'a> Parser<'a> {\n                 None\n             };\n             (ident, TraitItemKind::Const(ty, default), ast::Generics::default())\n-        } else if self.token.is_path_start() && !self.is_extern_non_path() {\n+        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"trait\", None, &mut false)? {\n             // trait item macro.\n-            // code copied from parse_macro_use_or_failure... abstraction!\n-            let prev_span = self.prev_span;\n-            let lo = self.span;\n-            let pth = self.parse_path(PathStyle::Mod)?;\n-\n-            if pth.segments.len() == 1 {\n-                if !self.eat(&token::Not) {\n-                    return Err(self.missing_assoc_item_kind_err(\"trait\", prev_span));\n-                }\n-            } else {\n-                self.expect(&token::Not)?;\n-            }\n-\n-            // eat a matched-delimiter token tree:\n-            let (delim, tts) = self.expect_delimited_token_tree()?;\n-            if delim != token::Brace {\n-                self.expect(&token::Semi)?\n-            }\n-\n-            let mac = respan(lo.to(self.prev_span), Mac_ { path: pth, tts: tts });\n             (keywords::Invalid.ident(), ast::TraitItemKind::Macro(mac), ast::Generics::default())\n         } else {\n             let (constness, unsafety, abi) = self.parse_fn_front_matter()?;\n@@ -5393,6 +5373,12 @@ impl<'a> Parser<'a> {\n     fn missing_assoc_item_kind_err(&mut self, item_type: &str, prev_span: Span)\n                                    -> DiagnosticBuilder<'a>\n     {\n+        let expected_kinds = if item_type == \"extern\" {\n+            \"missing `fn`, `type`, or `static`\"\n+        } else {\n+            \"missing `fn`, `type`, or `const`\"\n+        };\n+\n         // Given this code `path(`, it seems like this is not\n         // setting the visibility of a macro invocation, but rather\n         // a mistyped method declaration.\n@@ -5405,9 +5391,9 @@ impl<'a> Parser<'a> {\n         let sp = prev_span.between(self.prev_span);\n         let mut err = self.diagnostic().struct_span_err(\n             sp,\n-            &format!(\"missing `fn`, `type`, or `const` for {}-item declaration\",\n-                     item_type));\n-        err.span_label(sp, \"missing `fn`, `type`, or `const`\");\n+            &format!(\"{} for {}-item declaration\",\n+                     expected_kinds, item_type));\n+        err.span_label(sp, expected_kinds);\n         err\n     }\n \n@@ -5416,31 +5402,8 @@ impl<'a> Parser<'a> {\n                          -> PResult<'a, (Ident, Vec<Attribute>, ast::Generics,\n                              ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n-        if self.token.is_path_start() && !self.is_extern_non_path() {\n+        if let Some(mac) = self.parse_assoc_macro_invoc(\"impl\", Some(vis), at_end)? {\n             // Method macro.\n-\n-            let prev_span = self.prev_span;\n-\n-            let lo = self.span;\n-            let pth = self.parse_path(PathStyle::Mod)?;\n-            if pth.segments.len() == 1 {\n-                if !self.eat(&token::Not) {\n-                    return Err(self.missing_assoc_item_kind_err(\"impl\", prev_span));\n-                }\n-            } else {\n-                self.expect(&token::Not)?;\n-            }\n-\n-            self.complain_if_pub_macro(&vis.node, prev_span);\n-\n-            // eat a matched-delimiter token tree:\n-            *at_end = true;\n-            let (delim, tts) = self.expect_delimited_token_tree()?;\n-            if delim != token::Brace {\n-                self.expect(&token::Semi)?\n-            }\n-\n-            let mac = respan(lo.to(self.prev_span), Mac_ { path: pth, tts: tts });\n             Ok((keywords::Invalid.ident(), vec![], ast::Generics::default(),\n                 ast::ImplItemKind::Macro(mac)))\n         } else {\n@@ -6786,7 +6749,9 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a foreign item.\n-    fn parse_foreign_item(&mut self) -> PResult<'a, Option<ForeignItem>> {\n+    pub fn parse_foreign_item(&mut self) -> PResult<'a, Option<ForeignItem>> {\n+        maybe_whole!(self, NtForeignItem, |ni| Some(ni));\n+\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.span;\n         let visibility = self.parse_visibility(false)?;\n@@ -6812,12 +6777,26 @@ impl<'a> Parser<'a> {\n             return Ok(Some(self.parse_item_foreign_type(visibility, lo, attrs)?));\n         }\n \n-        // FIXME #5668: this will occur for a macro invocation:\n-        match self.parse_macro_use_or_failure(attrs, true, false, lo, visibility)? {\n-            Some(item) => {\n-                return Err(self.span_fatal(item.span, \"macros cannot expand to foreign items\"));\n+        match self.parse_assoc_macro_invoc(\"extern\", Some(&visibility), &mut false)? {\n+            Some(mac) => {\n+                Ok(Some(\n+                    ForeignItem {\n+                        ident: keywords::Invalid.ident(),\n+                        span: lo.to(self.prev_span),\n+                        id: ast::DUMMY_NODE_ID,\n+                        attrs,\n+                        vis: visibility,\n+                        node: ForeignItemKind::Macro(mac),\n+                    }\n+                ))\n+            }\n+            None => {\n+                if !attrs.is_empty() {\n+                    self.expected_item_err(&attrs);\n+                }\n+\n+                Ok(None)\n             }\n-            None => Ok(None)\n         }\n     }\n \n@@ -6881,6 +6860,41 @@ impl<'a> Parser<'a> {\n         Ok(None)\n     }\n \n+    /// Parse a macro invocation inside a `trait`, `impl` or `extern` block\n+    fn parse_assoc_macro_invoc(&mut self, item_kind: &str, vis: Option<&Visibility>,\n+                               at_end: &mut bool) -> PResult<'a, Option<Mac>>\n+    {\n+        if self.token.is_path_start() && !self.is_extern_non_path() {\n+            let prev_span = self.prev_span;\n+            let lo = self.span;\n+            let pth = self.parse_path(PathStyle::Mod)?;\n+\n+            if pth.segments.len() == 1 {\n+                if !self.eat(&token::Not) {\n+                    return Err(self.missing_assoc_item_kind_err(item_kind, prev_span));\n+                }\n+            } else {\n+                self.expect(&token::Not)?;\n+            }\n+\n+            if let Some(vis) = vis {\n+                self.complain_if_pub_macro(&vis.node, prev_span);\n+            }\n+\n+            *at_end = true;\n+\n+            // eat a matched-delimiter token tree:\n+            let (delim, tts) = self.expect_delimited_token_tree()?;\n+            if delim != token::Brace {\n+                self.expect(&token::Semi)?\n+            }\n+\n+            Ok(Some(respan(lo.to(self.prev_span), Mac_ { path: pth, tts: tts })))\n+        } else {\n+            Ok(None)\n+        }\n+    }\n+\n     fn collect_tokens<F, R>(&mut self, f: F) -> PResult<'a, (R, TokenStream)>\n         where F: FnOnce(&mut Self) -> PResult<'a, R>\n     {"}, {"sha": "5fe2b081566a13453875e4ef7da6d0b45e407d50", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -581,6 +581,7 @@ pub enum Nonterminal {\n     NtArm(ast::Arm),\n     NtImplItem(ast::ImplItem),\n     NtTraitItem(ast::TraitItem),\n+    NtForeignItem(ast::ForeignItem),\n     NtGenerics(ast::Generics),\n     NtWhereClause(ast::WhereClause),\n     NtArg(ast::Arg),\n@@ -603,6 +604,7 @@ impl fmt::Debug for Nonterminal {\n             NtArm(..) => f.pad(\"NtArm(..)\"),\n             NtImplItem(..) => f.pad(\"NtImplItem(..)\"),\n             NtTraitItem(..) => f.pad(\"NtTraitItem(..)\"),\n+            NtForeignItem(..) => f.pad(\"NtForeignItem(..)\"),\n             NtGenerics(..) => f.pad(\"NtGenerics(..)\"),\n             NtWhereClause(..) => f.pad(\"NtWhereClause(..)\"),\n             NtArg(..) => f.pad(\"NtArg(..)\"),"}, {"sha": "1bed6109dd26e44afc9c77e107f80a6cc2af29c9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -281,6 +281,7 @@ pub fn token_to_string(tok: &Token) -> String {\n             token::NtArg(ref e)          => arg_to_string(e),\n             token::NtVis(ref e)          => vis_to_string(e),\n             token::NtLifetime(ref e)     => lifetime_to_string(e),\n+            token::NtForeignItem(ref ni) => foreign_item_to_string(ni),\n         }\n     }\n }\n@@ -422,6 +423,10 @@ pub fn mac_to_string(arg: &ast::Mac) -> String {\n     to_string(|s| s.print_mac(arg, ::parse::token::Paren))\n }\n \n+pub fn foreign_item_to_string(arg: &ast::ForeignItem) -> String {\n+    to_string(|s| s.print_foreign_item(arg))\n+}\n+\n pub fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {\n     format!(\"{}{}\", to_string(|s| s.print_visibility(vis)), s)\n }\n@@ -1127,6 +1132,10 @@ impl<'a> State<'a> {\n                 self.end()?; // end the head-ibox\n                 self.end() // end the outer cbox\n             }\n+            ast::ForeignItemKind::Macro(ref m) => {\n+                self.print_mac(m, token::Paren)?;\n+                self.s.word(\";\")\n+            }\n         }\n     }\n "}, {"sha": "3a2069efd89e7e8ad85287a0808388ed69d0440c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -460,6 +460,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, foreign_item: &'a\n         }\n         ForeignItemKind::Static(ref typ, _) => visitor.visit_ty(typ),\n         ForeignItemKind::Ty => (),\n+        ForeignItemKind::Macro(ref mac) => visitor.visit_mac(mac),\n     }\n \n     walk_list!(visitor, visit_attribute, &foreign_item.attrs);"}, {"sha": "5fd5e29948852589b585a25df482ee72b82509a6", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -55,6 +55,7 @@ impl MultiItemModifier for ProcMacroDerive {\n             Annotatable::Item(item) => item,\n             Annotatable::ImplItem(_) |\n             Annotatable::TraitItem(_) |\n+            Annotatable::ForeignItem(_) |\n             Annotatable::Stmt(_) |\n             Annotatable::Expr(_) => {\n                 ecx.span_err(span, \"proc-macro derives may only be \\"}, {"sha": "bc51b4061ed6bdd79f63499613cc190029dfa4bb", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -93,7 +93,9 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n                 }\n             })\n         }\n-        // these are covered in proc_macro/attr-stmt-expr.rs\n+        // covered in proc_macro/macros-in-extern.rs\n+        Annotatable::ForeignItem(_) => unimplemented!(),\n+        // covered in proc_macro/attr-stmt-expr.rs\n         Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\")\n     }\n }\n@@ -147,6 +149,8 @@ fn expand_duplicate(cx: &mut ExtCtxt,\n             new_it.ident = copy_name;\n             push(Annotatable::TraitItem(P(new_it)));\n         }\n+        // covered in proc_macro/macros-in-extern.rs\n+        Annotatable::ForeignItem(_) => unimplemented!(),\n         // covered in proc_macro/attr-stmt-expr.rs\n         Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\")\n     }"}, {"sha": "d1c5b9050aa8788743c77d66cf436d77c9a21276", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/test-macros.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn nop_attr(_attr: TokenStream, input: TokenStream) -> TokenStream {\n+    assert!(_attr.to_string().is_empty());\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn no_output(_attr: TokenStream, _input: TokenStream) -> TokenStream {\n+    assert!(_attr.to_string().is_empty());\n+    assert!(!_input.to_string().is_empty());\n+    \"\".parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn emit_input(input: TokenStream) -> TokenStream {\n+    input\n+}"}, {"sha": "4c88df332460b39a368f82c05f1da1496ef55d5b", "filename": "src/test/compile-fail-fulldeps/proc-macro/macros-in-extern.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:test-macros.rs\n+// ignore-stage1\n+// ignore-wasm32\n+\n+#![feature(proc_macro)]\n+\n+extern crate test_macros;\n+\n+use test_macros::{nop_attr, no_output, emit_input};\n+\n+fn main() {\n+    assert_eq!(unsafe { rust_get_test_int() }, 0isize);\n+    assert_eq!(unsafe { rust_dbg_extern_identity_u32(0xDEADBEEF) }, 0xDEADBEEF);\n+}\n+\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n+extern {\n+    #[no_output]\n+    //~^ ERROR Macro and proc-macro invocations in `extern {}` blocks are experimental.\n+    fn some_definitely_unknown_symbol_which_should_be_removed();\n+\n+    #[nop_attr]\n+    //~^ ERROR Macro and proc-macro invocations in `extern {}` blocks are experimental.\n+    fn rust_get_test_int() -> isize;\n+\n+    emit_input!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n+    //~^ ERROR Macro and proc-macro invocations in `extern {}` blocks are experimental.\n+}"}, {"sha": "7d7f95cbbf5cbc8635b2da7166994eca88c72b94", "filename": "src/test/compile-fail/macros-in-extern.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-wasm32\n+\n+#![feature(decl_macro)]\n+\n+macro_rules! returns_isize(\n+    ($ident:ident) => (\n+        fn $ident() -> isize;\n+    )\n+);\n+\n+macro takes_u32_returns_u32($ident:ident) {\n+    fn $ident (arg: u32) -> u32;\n+}\n+\n+macro_rules! emits_nothing(\n+    () => ()\n+);\n+\n+fn main() {\n+    assert_eq!(unsafe { rust_get_test_int() }, 0isize);\n+    assert_eq!(unsafe { rust_dbg_extern_identity_u32(0xDEADBEEF) }, 0xDEADBEEFu32);\n+}\n+\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n+extern {\n+    returns_isize!(rust_get_test_int);\n+    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+    takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n+    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+    emits_nothing!();\n+    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+}"}, {"sha": "6899caa7153bb57c091ec13be5d5cec186b76c72", "filename": "src/test/parse-fail/duplicate-visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fparse-fail%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fparse-fail%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fduplicate-visibility.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags: -Z parse-only\n \n-// error-pattern:unmatched visibility `pub`\n+// error-pattern:expected one of `(`, `fn`, `static`, `type`, or `}` here\n extern {\n     pub pub fn foo();\n }"}, {"sha": "aa0dbd4d4fc1b35957bbbd3f2399370215e0ae09", "filename": "src/test/parse-fail/extern-no-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fparse-fail%2Fextern-no-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fparse-fail%2Fextern-no-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fextern-no-fn.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -10,8 +10,8 @@\n \n // compile-flags: -Z parse-only\n \n-extern {\n-    f(); //~ ERROR expected one of `!` or `::`, found `(`\n+extern { //~ ERROR missing `fn`, `type`, or `static` for extern-item declaration\n+    f();\n }\n \n fn main() {"}, {"sha": "6612fe45b81d370d4d3029663e1ebd0f70a3e4f5", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -96,7 +96,9 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n                 }\n             })\n         ],\n-        // these are covered in proc_macro/attr-stmt-expr.rs\n+        // covered in proc_macro/macros-in-extern.rs\n+        Annotatable::ForeignItem(..) => unimplemented!(),\n+        // covered in proc_macro/attr-stmt-expr.rs\n         Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\"),\n     }\n }\n@@ -142,7 +144,9 @@ fn expand_duplicate(cx: &mut ExtCtxt,\n             new_it.ident = copy_name;\n             push(Annotatable::TraitItem(P(new_it)));\n         }\n-        // these are covered in proc_macro/attr-stmt-expr.rs\n+        // covered in proc_macro/macros-in-extern.rs\n+        Annotatable::ForeignItem(..) => unimplemented!(),\n+        // covered in proc_macro/attr-stmt-expr.rs\n         Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\")\n     }\n }"}, {"sha": "d1c5b9050aa8788743c77d66cf436d77c9a21276", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/test-macros.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn nop_attr(_attr: TokenStream, input: TokenStream) -> TokenStream {\n+    assert!(_attr.to_string().is_empty());\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn no_output(_attr: TokenStream, _input: TokenStream) -> TokenStream {\n+    assert!(_attr.to_string().is_empty());\n+    assert!(!_input.to_string().is_empty());\n+    \"\".parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn emit_input(input: TokenStream) -> TokenStream {\n+    input\n+}"}, {"sha": "59b9b0baa8a4535e35d46ea0317e084038529d72", "filename": "src/test/run-pass-fulldeps/proc-macro/macros-in-extern.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:test-macros.rs\n+// ignore-stage1\n+// ignore-wasm32\n+\n+#![feature(proc_macro, macros_in_extern)]\n+\n+extern crate test_macros;\n+\n+use test_macros::{nop_attr, no_output, emit_input};\n+\n+fn main() {\n+    assert_eq!(unsafe { rust_get_test_int() }, 1isize);\n+    assert_eq!(unsafe { rust_dbg_extern_identity_u32(0xDEADBEEF) }, 0xDEADBEEF);\n+}\n+\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n+extern {\n+    #[no_output]\n+    fn some_definitely_unknown_symbol_which_should_be_removed();\n+\n+    #[nop_attr]\n+    fn rust_get_test_int() -> isize;\n+\n+    emit_input!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n+}"}, {"sha": "d9094934356fc1d7b4ce8514de8b79a841715a39", "filename": "src/test/run-pass/macros-in-extern.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Frun-pass%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Frun-pass%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros-in-extern.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-wasm32\n+\n+#![feature(decl_macro, macros_in_extern)]\n+\n+macro_rules! returns_isize(\n+    ($ident:ident) => (\n+        fn $ident() -> isize;\n+    )\n+);\n+\n+macro takes_u32_returns_u32($ident:ident) {\n+    fn $ident (arg: u32) -> u32;\n+}\n+\n+macro_rules! emits_nothing(\n+    () => ()\n+);\n+\n+fn main() {\n+    assert_eq!(unsafe { rust_get_test_int() }, 1isize);\n+    assert_eq!(unsafe { rust_dbg_extern_identity_u32(0xDEADBEEF) }, 0xDEADBEEFu32);\n+}\n+\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n+extern {\n+    returns_isize!(rust_get_test_int);\n+    takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n+    emits_nothing!();\n+}"}, {"sha": "9c758241ea1b871ae3d07c6f29e9bcabd871aaa2", "filename": "src/test/ui/feature-gate-macros_in_extern.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(decl_macro)]\n+\n+macro_rules! returns_isize(\n+    ($ident:ident) => (\n+        fn $ident() -> isize;\n+    )\n+);\n+\n+macro takes_u32_returns_u32($ident:ident) {\n+    fn $ident (arg: u32) -> u32;\n+}\n+\n+macro_rules! emits_nothing(\n+    () => ()\n+);\n+\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n+extern {\n+    returns_isize!(rust_get_test_int);\n+    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+    takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n+    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+    emits_nothing!();\n+    //~^ ERROR Macro invocations in `extern {}` blocks are experimental.\n+}"}, {"sha": "49aca0db2d46c1c8f737e5fd0b1808de5461302d", "filename": "src/test/ui/feature-gate-macros_in_extern.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46492ffabd7194bb134035cadcd66d47f1b97db8/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr?ref=46492ffabd7194bb134035cadcd66d47f1b97db8", "patch": "@@ -0,0 +1,27 @@\n+error[E0658]: Macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+  --> $DIR/feature-gate-macros_in_extern.rs:29:5\n+   |\n+LL |     returns_isize!(rust_get_test_int);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n+\n+error[E0658]: Macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+  --> $DIR/feature-gate-macros_in_extern.rs:31:5\n+   |\n+LL |     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n+\n+error[E0658]: Macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+  --> $DIR/feature-gate-macros_in_extern.rs:33:5\n+   |\n+LL |     emits_nothing!();\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}