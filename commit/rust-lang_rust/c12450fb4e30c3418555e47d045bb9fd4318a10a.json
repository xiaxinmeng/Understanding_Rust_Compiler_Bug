{"sha": "c12450fb4e30c3418555e47d045bb9fd4318a10a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMjQ1MGZiNGUzMGMzNDE4NTU1ZTQ3ZDA0NWJiOWZkNDMxOGExMGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-29T10:51:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-29T10:51:55Z"}, "message": "Introduce red-green syntax tree", "tree": {"sha": "e2dc508e1e415388392657cda3dfb00175cdabf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2dc508e1e415388392657cda3dfb00175cdabf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c12450fb4e30c3418555e47d045bb9fd4318a10a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c12450fb4e30c3418555e47d045bb9fd4318a10a", "html_url": "https://github.com/rust-lang/rust/commit/c12450fb4e30c3418555e47d045bb9fd4318a10a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c12450fb4e30c3418555e47d045bb9fd4318a10a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d9961b75377a7bd2656b5aa1451710de8c86f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9961b75377a7bd2656b5aa1451710de8c86f60", "html_url": "https://github.com/rust-lang/rust/commit/8d9961b75377a7bd2656b5aa1451710de8c86f60"}], "stats": {"total": 723, "additions": 660, "deletions": 63}, "files": [{"sha": "cf2e97024794cc5ab08632deb1cbe460514e9189", "filename": "src/lib.rs", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -12,7 +12,8 @@\n //!   [RFC.md]: <https://github.com/matklad/libsyntax2/blob/master/docs/RFC.md>\n \n #![forbid(missing_debug_implementations, unconditional_recursion, future_incompatible)]\n-#![deny(bad_style, unsafe_code, missing_docs)]\n+#![deny(bad_style, missing_docs)]\n+#![allow(missing_docs)]\n //#![warn(unreachable_pub)] // rust-lang/rust#47816\n \n extern crate unicode_xid;\n@@ -21,19 +22,24 @@ extern crate text_unit;\n mod tree;\n mod lexer;\n mod parser;\n+mod yellow;\n \n pub mod syntax_kinds;\n pub use text_unit::{TextRange, TextUnit};\n pub use tree::{File, Node, SyntaxKind, Token};\n-pub(crate) use tree::{ErrorMsg, FileBuilder, Sink};\n+pub(crate) use tree::{ErrorMsg, FileBuilder, Sink, GreenBuilder};\n pub use lexer::{next_token, tokenize};\n-pub use parser::parse;\n+pub use yellow::SyntaxNode;\n+pub(crate) use yellow::SError;\n+pub use parser::{parse, parse_green};\n \n /// Utilities for simple uses of the parser.\n pub mod utils {\n     use std::fmt::Write;\n \n-    use {File, Node};\n+    use {File, Node, SyntaxNode};\n+    use std::collections::BTreeSet;\n+    use SError;\n \n     /// Parse a file and create a string representation of the resulting parse tree.\n     pub fn dump_tree(file: &File) -> String {\n@@ -65,4 +71,42 @@ pub mod utils {\n             }\n         }\n     }\n+\n+    /// Parse a file and create a string representation of the resulting parse tree.\n+    pub fn dump_tree_green(syntax: &SyntaxNode) -> String {\n+        let mut errors: BTreeSet<_> = syntax.root.errors.iter().cloned().collect();\n+        let mut result = String::new();\n+        go(syntax, &mut result, 0, &mut errors);\n+        return result;\n+\n+        fn go(node: &SyntaxNode, buff: &mut String, level: usize, errors: &mut BTreeSet<SError>) {\n+            buff.push_str(&String::from(\"  \").repeat(level));\n+            write!(buff, \"{:?}\\n\", node).unwrap();\n+//            let my_errors = node.errors().filter(|e| e.after_child().is_none());\n+//            let parent_errors = node.parent()\n+//                .into_iter()\n+//                .flat_map(|n| n.errors())\n+//                .filter(|e| e.after_child() == Some(node));\n+//\n+            let my_errors: Vec<_> = errors.iter().filter(|e| e.offset == node.range().start())\n+                .cloned().collect();\n+            for err in my_errors {\n+                errors.remove(&err);\n+                buff.push_str(&String::from(\"  \").repeat(level));\n+                write!(buff, \"err: `{}`\\n\", err.message).unwrap();\n+            }\n+\n+            for child in node.children().iter() {\n+                go(child, buff, level + 1, errors)\n+            }\n+\n+            let my_errors: Vec<_> = errors.iter().filter(|e| e.offset == node.range().end())\n+                .cloned().collect();\n+            for err in my_errors {\n+                errors.remove(&err);\n+                buff.push_str(&String::from(\"  \").repeat(level));\n+                write!(buff, \"err: `{}`\\n\", err.message).unwrap();\n+            }\n+        }\n+    }\n }"}, {"sha": "0fbfaeb9f9c262adbc0dad2f9fa28cf30bf0564c", "filename": "src/parser/event.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fparser%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fparser%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent.rs?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -1,5 +1,5 @@\n use {\n-    ErrorMsg, File, FileBuilder, Sink, SyntaxKind, Token,\n+    ErrorMsg, File, FileBuilder, Sink, SyntaxKind, Token, GreenBuilder,\n     syntax_kinds::TOMBSTONE,\n };\n use super::is_insignificant;\n@@ -69,6 +69,11 @@ pub(crate) enum Event {\n \n pub(super) fn to_file(text: String, tokens: &[Token], events: Vec<Event>) -> File {\n     let mut builder = FileBuilder::new(text);\n+    process(&mut builder, tokens, events);\n+    builder.finish()\n+}\n+\n+pub(super) fn process(builder: &mut Sink, tokens: &[Token], events: Vec<Event>) {\n     let mut idx = 0;\n \n     let mut holes = Vec::new();\n@@ -145,5 +150,4 @@ pub(super) fn to_file(text: String, tokens: &[Token], events: Vec<Event>) -> Fil\n             &Event::Error { ref msg } => builder.error(ErrorMsg { msg: msg.clone() }),\n         }\n     }\n-    builder.finish()\n }"}, {"sha": "26fbb6e3d79b068d5f80f7617efd87ff23f9a68c", "filename": "src/parser/mod.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -1,14 +1,20 @@\n-use {File, SyntaxKind, Token};\n-\n-use syntax_kinds::*;\n-\n #[macro_use]\n mod token_set;\n mod parser;\n mod input;\n mod event;\n mod grammar;\n \n+use std::sync::Arc;\n+use {\n+    File, SyntaxKind, Token,\n+    yellow::SyntaxNode,\n+    syntax_kinds::*\n+};\n+use GreenBuilder;\n+use parser::event::process;\n+\n+\n /// Parse a sequence of tokens into the representative node tree\n pub fn parse(text: String, tokens: &[Token]) -> File {\n     let events = {\n@@ -21,6 +27,21 @@ pub fn parse(text: String, tokens: &[Token]) -> File {\n     event::to_file(text, tokens, events)\n }\n \n+/// Parse a sequence of tokens into the representative node tree\n+pub fn parse_green(text: String, tokens: &[Token]) -> SyntaxNode {\n+    let events = {\n+        let input = input::ParserInput::new(&text, tokens);\n+        let parser_impl = parser::imp::ParserImpl::new(&input);\n+        let mut parser = parser::Parser(parser_impl);\n+        grammar::file(&mut parser);\n+        parser.0.into_events()\n+    };\n+    let mut builder = GreenBuilder::new(text);\n+    process(&mut builder, tokens, events);\n+    let (green, errors) = builder.finish();\n+    SyntaxNode::new(Arc::new(green), errors)\n+}\n+\n fn is_insignificant(kind: SyntaxKind) -> bool {\n     match kind {\n         WHITESPACE | COMMENT => true,"}, {"sha": "4983006cd154c9815f7dc38dc527df667512f6b5", "filename": "src/tree/file_builder.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Ftree%2Ffile_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Ftree%2Ffile_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Ffile_builder.rs?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -7,8 +7,13 @@\n //! tree builder: the parser produces a stream of events like\n //! `start node`, `finish node`, and `FileBuilder` converts\n //! this stream to a real tree.\n-use {SyntaxKind, TextRange, TextUnit};\n+use std::sync::Arc;\n+use {\n+    SyntaxKind, TextRange, TextUnit,\n+    yellow::GreenNode\n+};\n use super::{File, NodeData, NodeIdx, SyntaxErrorData};\n+use SError;\n \n pub(crate) trait Sink {\n     fn leaf(&mut self, kind: SyntaxKind, len: TextUnit);\n@@ -159,3 +164,68 @@ fn grow(left: &mut TextRange, right: TextRange) {\n pub(crate) struct ErrorMsg {\n     pub(crate) msg: String,\n }\n+\n+pub(crate) struct GreenBuilder {\n+    text: String,\n+    stack: Vec<GreenNode>,\n+    pos: TextUnit,\n+    root: Option<GreenNode>,\n+    errors: Vec<SError>,\n+}\n+\n+impl GreenBuilder {\n+    pub(crate) fn new(text: String) -> GreenBuilder {\n+        GreenBuilder {\n+            text,\n+            stack: Vec::new(),\n+            pos: 0.into(),\n+            root: None,\n+            errors: Vec::new(),\n+        }\n+    }\n+\n+    pub(crate) fn finish(self) -> (GreenNode, Vec<SError>) {\n+        (self.root.unwrap(), self.errors)\n+    }\n+}\n+\n+impl Sink for GreenBuilder {\n+    fn leaf(&mut self, kind: SyntaxKind, len: TextUnit) {\n+        let range = TextRange::offset_len(self.pos, len);\n+        self.pos += len;\n+        let text = self.text[range].to_owned();\n+        let parent = self.stack.last_mut().unwrap();\n+        if kind.is_trivia() {\n+            parent.push_trivia(kind, text);\n+        } else {\n+            let node = GreenNode::new_leaf(kind, text);\n+            parent.push_child(Arc::new(node));\n+        }\n+    }\n+\n+    fn start_internal(&mut self, kind: SyntaxKind) {\n+        self.stack.push(GreenNode::new_branch(kind))\n+    }\n+\n+    fn finish_internal(&mut self) {\n+        let node = self.stack.pop().unwrap();\n+        if let Some(parent) = self.stack.last_mut() {\n+            parent.push_child(Arc::new(node))\n+        } else {\n+            self.root = Some(node);\n+        }\n+    }\n+\n+    fn error(&mut self, err: ErrorMsg) {\n+        self.errors.push(SError { message: err.msg, offset: self.pos })\n+    }\n+}\n+impl SyntaxKind {\n+    fn is_trivia(self) -> bool {\n+        match self {\n+            SyntaxKind::WHITESPACE | SyntaxKind::DOC_COMMENT | SyntaxKind::COMMENT => true,\n+            _ => false\n+        }\n+    }\n+}\n+"}, {"sha": "7abe175923498f9216ca489016f8140794f352af", "filename": "src/tree/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Fmod.rs?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -2,7 +2,7 @@ mod file_builder;\n \n use ::{TextRange, TextUnit};\n use std::{fmt, cmp};\n-pub(crate) use self::file_builder::{ErrorMsg, FileBuilder, Sink};\n+pub(crate) use self::file_builder::{ErrorMsg, FileBuilder, Sink, GreenBuilder};\n \n pub use syntax_kinds::SyntaxKind;\n "}, {"sha": "ede23b719372b002712c21130cabf3f525777297", "filename": "src/yellow/green.rs", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fyellow%2Fgreen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fyellow%2Fgreen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fgreen.rs?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -0,0 +1,194 @@\n+use std::sync::Arc;\n+use text_unit::TextUnit;\n+use SyntaxKind;\n+\n+type TokenText = String;\n+\n+#[derive(Debug)]\n+pub(crate) struct GreenNode {\n+    kind: SyntaxKind,\n+    data: GreenNodeData,\n+}\n+\n+impl GreenNode {\n+    pub(crate) fn new_leaf(kind: SyntaxKind, text: TokenText) -> GreenNode {\n+        GreenNode {\n+            kind,\n+            data: GreenNodeData::Leaf(GreenLeaf { text }),\n+        }\n+    }\n+\n+    pub(crate) fn new_branch(\n+        kind: SyntaxKind,\n+    ) -> GreenNode {\n+        let branch = GreenBranch {\n+            text_len: 0.into(),\n+            leading_trivia: Trivias::default(),\n+            children: Vec::new(),\n+        };\n+        GreenNode {\n+            kind,\n+            data: GreenNodeData::Branch(branch),\n+        }\n+    }\n+\n+    pub(crate) fn push_trivia(&mut self, kind: SyntaxKind, text: TokenText) {\n+        let branch = match &mut self.data {\n+            GreenNodeData::Branch(branch) => branch,\n+            _ => panic!()\n+        };\n+        branch.text_len += TextUnit::of_str(&text);\n+        let leading = &mut branch.leading_trivia;\n+        branch.children.last_mut().map(|(_, t)| t).unwrap_or(leading)\n+            .push(Arc::new(GreenTrivia { kind, text }));\n+    }\n+\n+    pub(crate) fn push_child(&mut self, node: Arc<GreenNode>) {\n+        let branch = match &mut self.data {\n+            GreenNodeData::Branch(branch) => branch,\n+            _ => panic!()\n+        };\n+        branch.text_len += node.text_len();\n+        branch.children.push((node, Trivias::default()));\n+    }\n+\n+    pub(crate) fn kind(&self) -> SyntaxKind {\n+        self.kind\n+    }\n+\n+    pub(crate) fn text_len(&self) -> TextUnit {\n+        match &self.data {\n+            GreenNodeData::Leaf(l) => l.text_len(),\n+            GreenNodeData::Branch(b) => b.text_len(),\n+        }\n+    }\n+\n+    pub(crate) fn text(&self) -> String {\n+        let mut buff = String::new();\n+        go(self, &mut buff);\n+        return buff;\n+        fn go(node: &GreenNode, buff: &mut String) {\n+            match &node.data {\n+                GreenNodeData::Leaf(l) => buff.push_str(&l.text),\n+                GreenNodeData::Branch(branch) => {\n+                    add_trivia(&branch.leading_trivia, buff);\n+                    branch.children.iter().for_each(|(child, trivias)| {\n+                        go(child, buff);\n+                        add_trivia(trivias, buff);\n+                    })\n+                }\n+            }\n+        }\n+\n+        fn add_trivia(trivias: &Trivias, buff: &mut String) {\n+            trivias.iter().for_each(|t| buff.push_str(&t.text))\n+        }\n+    }\n+\n+    pub(crate) fn n_children(&self) -> usize {\n+        match &self.data {\n+            GreenNodeData::Leaf(_) => 0,\n+            GreenNodeData::Branch(branch) => branch.children.len(),\n+        }\n+    }\n+\n+    pub(crate) fn nth_child(&self, idx: usize) -> &Arc<GreenNode> {\n+        match &self.data {\n+            GreenNodeData::Leaf(_) => panic!(\"leaf nodes have no children\"),\n+            GreenNodeData::Branch(branch) => &branch.children[idx].0,\n+        }\n+    }\n+\n+    pub(crate) fn nth_trivias(&self, idx: usize) -> &Trivias {\n+        match &self.data {\n+            GreenNodeData::Leaf(_) => panic!(\"leaf nodes have no children\"),\n+            GreenNodeData::Branch(branch) => if idx == 0 {\n+                &branch.leading_trivia\n+            } else {\n+                &branch.children[idx - 1].1\n+            },\n+        }\n+    }\n+\n+    pub(crate) fn is_leaf(&self) -> bool {\n+        match self.data {\n+            GreenNodeData::Leaf(_) => true,\n+            GreenNodeData::Branch(_) => false\n+        }\n+    }\n+\n+    pub(crate) fn leaf_text(&self) -> &str {\n+        match &self.data {\n+            GreenNodeData::Leaf(l) => l.text.as_str(),\n+            GreenNodeData::Branch(_) => panic!(\"not a leaf\")\n+        }\n+    }\n+}\n+\n+#[derive(Debug)]\n+enum GreenNodeData {\n+    Leaf(GreenLeaf),\n+    Branch(GreenBranch),\n+}\n+\n+#[derive(Debug)]\n+struct GreenLeaf {\n+    text: TokenText\n+}\n+\n+#[derive(Debug)]\n+struct GreenBranch {\n+    text_len: TextUnit,\n+    leading_trivia: Trivias,\n+    children: Vec<(Arc<GreenNode>, Trivias)>,\n+}\n+\n+#[derive(Debug)]\n+pub(crate) struct GreenTrivia {\n+    pub(crate) kind: SyntaxKind,\n+    pub(crate) text: TokenText,\n+}\n+\n+type Trivias = Vec<Arc<GreenTrivia>>;\n+\n+\n+pub(crate) trait TextLen {\n+    fn text_len(&self) -> TextUnit;\n+}\n+\n+impl TextLen for GreenTrivia {\n+    fn text_len(&self) -> TextUnit {\n+        TextUnit::of_str(&self.text)\n+    }\n+}\n+\n+impl<T: TextLen> TextLen for Arc<T> {\n+    fn text_len(&self) -> TextUnit {\n+        let this: &T = self;\n+        this.text_len()\n+    }\n+}\n+\n+impl TextLen for GreenNode {\n+    fn text_len(&self) -> TextUnit {\n+        self.text_len()\n+    }\n+}\n+\n+impl TextLen for GreenLeaf {\n+    fn text_len(&self) -> TextUnit {\n+        TextUnit::of_str(&self.text)\n+    }\n+}\n+\n+impl TextLen for GreenBranch {\n+    fn text_len(&self) -> TextUnit {\n+        self.text_len\n+    }\n+}\n+\n+impl<T: TextLen> TextLen for [T] {\n+    fn text_len(&self) -> TextUnit {\n+        self.iter().map(TextLen::text_len).sum()\n+    }\n+}"}, {"sha": "236328a7f220a9abf987bd8963e05322b8cce9ad", "filename": "src/yellow/mod.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fmod.rs?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -0,0 +1,42 @@\n+mod green;\n+mod red;\n+mod syntax;\n+\n+use std::{\n+    sync::{Arc, Weak},\n+    ops::Deref,\n+    mem\n+};\n+pub(crate) use self::{\n+    green::{GreenNode, TextLen},\n+    red::RedNode,\n+    syntax::SError,\n+};\n+pub use self::syntax::SyntaxNode;\n+\n+// This could be just `*const T`, but we use `Weak` for additional checks\n+#[derive(Debug)]\n+pub(crate) struct Ptr<T>(Weak<T>);\n+\n+impl<T> Clone for Ptr<T> {\n+    fn clone(&self) -> Self {\n+        Ptr(self.0.clone())\n+    }\n+}\n+\n+impl<T> Ptr<T> {\n+    fn clone(self_: &Ptr<T>) -> Ptr<T> {\n+        Ptr(Weak::clone(&self_.0))\n+    }\n+\n+    fn new(arc: &Arc<T>) -> Ptr<T> {\n+        Ptr(Arc::downgrade(arc))\n+    }\n+\n+    unsafe fn get(&self) -> &T {\n+        let t = self.0.upgrade()\n+            .expect(\"caller must guarantee that Ptr is not null\");\n+        let t: &T = &*t;\n+        mem::transmute(t)\n+    }\n+}"}, {"sha": "feba99faa52565ed7e28576558207cafb2d82531", "filename": "src/yellow/red.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fyellow%2Fred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fyellow%2Fred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fred.rs?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -0,0 +1,87 @@\n+use std::sync::{Arc, Weak, RwLock};\n+use {\n+    TextUnit, SyntaxKind, TextRange,\n+    yellow::{Ptr, GreenNode, TextLen}\n+};\n+\n+#[derive(Debug)]\n+pub(crate) struct RedNode {\n+    green: Arc<GreenNode>,\n+    parent: Option<ParentData>,\n+    children: RwLock<Vec<Option<Arc<RedNode>>>>,\n+}\n+\n+#[derive(Debug)]\n+struct ParentData {\n+    parent: Ptr<RedNode>,\n+    start_offset: TextUnit,\n+    index_in_parent: usize,\n+}\n+\n+impl RedNode {\n+    pub fn new_root(\n+        green: Arc<GreenNode>,\n+    ) -> RedNode {\n+        RedNode::new(green, None)\n+    }\n+\n+    fn new_child(\n+        green: Arc<GreenNode>,\n+        parent: Ptr<RedNode>,\n+        start_offset: TextUnit,\n+        index_in_parent: usize\n+    ) -> RedNode {\n+        let parent_data = ParentData {\n+            parent,\n+            start_offset,\n+            index_in_parent\n+        };\n+        RedNode::new(green, Some(parent_data))\n+    }\n+\n+    fn new(\n+        green: Arc<GreenNode>,\n+        parent: Option<ParentData>,\n+    ) -> RedNode {\n+        let children = vec![None; green.n_children()];\n+        RedNode { green, parent, children: RwLock::new(children) }\n+    }\n+\n+    pub(crate) fn green(&self) -> &GreenNode {\n+        &self.green\n+    }\n+\n+    pub(crate) fn start_offset(&self) -> TextUnit {\n+        match &self.parent {\n+            None => 0.into(),\n+            Some(p) => p.start_offset,\n+        }\n+    }\n+\n+    pub(crate) fn n_children(&self) -> usize {\n+        self.green.n_children()\n+    }\n+\n+    pub(crate) fn nth_child(&self, me: Ptr<RedNode>, n: usize) -> Arc<RedNode> {\n+        match &self.children.read().unwrap()[n] {\n+            Some(child) => return child.clone(),\n+            None => (),\n+        }\n+        let mut children = self.children.write().unwrap();\n+        if children[n].is_none() {\n+            let start_offset = {\n+                let mut acc = self.start_offset();\n+                for i in 0..n {\n+                    acc += self.green.nth_trivias(i).text_len();\n+                    acc += self.green.nth_child(i).text_len();\n+                }\n+                acc += self.green.nth_trivias(n).text_len();\n+                acc\n+            };\n+            let green = self.green.nth_child(n).clone();\n+            let child = RedNode::new_child(green, me, start_offset, n);\n+            children[n] = Some(Arc::new(child))\n+        }\n+        children[n].as_ref().unwrap().clone()\n+    }\n+}"}, {"sha": "0c9ffeb14ff99c4a120b0e84dcf29e35d33dd8cb", "filename": "src/yellow/syntax.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/src%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fsyntax.rs?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -0,0 +1,132 @@\n+use std::{\n+    fmt,\n+    sync::Arc,\n+};\n+\n+use {\n+    TextRange, TextUnit, SyntaxKind,\n+    yellow::{Ptr, RedNode, GreenNode, TextLen},\n+};\n+use yellow::green::GreenTrivia;\n+\n+#[derive(Clone)]\n+pub struct SyntaxNode {\n+    pub(crate) root: SyntaxRoot,\n+    red: Ptr<RedNode>,\n+    trivia_pos: Option<(usize, usize)>,\n+}\n+\n+#[derive(Clone)]\n+pub struct SyntaxRoot {\n+    red: Arc<RedNode>,\n+    pub(crate) errors: Arc<Vec<SError>>,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd)]\n+pub(crate) struct SError {\n+    pub(crate) message: String,\n+    pub(crate) offset: TextUnit,\n+}\n+\n+impl SyntaxNode {\n+    pub(crate) fn new(root: Arc<GreenNode>, errors: Vec<SError>) -> SyntaxNode {\n+        let root = Arc::new(RedNode::new_root(root));\n+        let red = Ptr::new(&root);\n+        let root = SyntaxRoot { red: root, errors: Arc::new(errors) };\n+        SyntaxNode { root, red, trivia_pos: None }\n+    }\n+\n+    pub fn kind(&self) -> SyntaxKind {\n+        let green = self.red().green();\n+        match self.trivia_pos {\n+            None => green.kind(),\n+            Some((i, j)) => green.nth_trivias(i)[j].kind\n+        }\n+    }\n+\n+    pub fn range(&self) -> TextRange {\n+        let red = self.red();\n+        let green = red.green();\n+        match self.trivia_pos {\n+            None => TextRange::offset_len(red.start_offset(), red.green().text_len()),\n+            Some((i, j)) => {\n+                let trivias = green.nth_trivias(i);\n+                let offset = if i == 0 {\n+                    red.start_offset()\n+                } else {\n+                    let prev_child = red.nth_child(Ptr::clone(&self.red), i - 1);\n+                    let mut offset = prev_child.start_offset() + prev_child.green().text_len();\n+                    for k in 0..j {\n+                        offset += &trivias[k].text_len();\n+                    }\n+                    offset\n+                };\n+                TextRange::offset_len(offset, trivias[j].text_len())\n+            }\n+        }\n+    }\n+\n+    pub fn text(&self) -> String {\n+        let green = self.red().green();\n+        match self.trivia_pos {\n+            None => green.text(),\n+            Some((i, j)) => green.nth_trivias(i)[j].text.clone()\n+        }\n+    }\n+\n+    pub fn children(&self) -> Vec<SyntaxNode> {\n+        let mut res = Vec::new();\n+        let red = self.red();\n+        let green = red.green();\n+        if green.is_leaf() || self.trivia_pos.is_some() {\n+            return Vec::new();\n+        }\n+        for (j, _) in green.nth_trivias(0).iter().enumerate() {\n+            res.push(SyntaxNode {\n+                root: self.root.clone(),\n+                red: Ptr::clone(&self.red),\n+                trivia_pos: Some((0, j)),\n+            })\n+        }\n+\n+        let n_children = red.n_children();\n+        for i in 0..n_children {\n+            res.push(SyntaxNode {\n+                root: self.root.clone(),\n+                red: Ptr::new(&red.nth_child(Ptr::clone(&self.red), i)),\n+                trivia_pos: None,\n+            });\n+            for (j, _) in green.nth_trivias(i + 1).iter().enumerate() {\n+                res.push(SyntaxNode {\n+                    root: self.root.clone(),\n+                    red: self.red.clone(),\n+                    trivia_pos: Some((i + 1, j)),\n+                })\n+            }\n+        }\n+        res\n+    }\n+\n+    fn red(&self) -> &RedNode {\n+        // Safe b/c root ptr keeps red alive\n+        unsafe { self.red.get() }\n+    }\n+}\n+\n+impl fmt::Debug for SyntaxNode {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{:?}@{:?}\", self.kind(), self.range())?;\n+        if has_short_text(self.kind()) {\n+            write!(fmt, \" \\\"{}\\\"\", self.text())?;\n+        }\n+        Ok(())\n+    }\n+}\n+\n+fn has_short_text(kind: SyntaxKind) -> bool {\n+    use syntax_kinds::*;\n+    match kind {\n+        IDENT | LIFETIME => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "2bb3ee6ec26e514c5eaf2bf05ff7c0f443fbe66e", "filename": "tests/data/parser/err/0000_struct_field_missing_comma.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -18,7 +18,7 @@ FILE@[0; 34)\n               WHITESPACE@[17; 18)\n               IDENT@[18; 21) \"u32\"\n               WHITESPACE@[21; 26)\n-    err: `expected COMMA`\n+              err: `expected COMMA`\n     NAMED_FIELD@[26; 33)\n       NAME@[26; 27)\n         IDENT@[26; 27) \"b\""}, {"sha": "01bd2abe6134f4d3b6d252101479aebe229bd754", "filename": "tests/data/parser/err/0001_item_recovery_in_file.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -1,10 +1,10 @@\n FILE@[0; 21)\n+err: `expected item`\n   ERROR@[0; 3)\n-  err: `expected item`\n     IF_KW@[0; 2)\n     WHITESPACE@[2; 3)\n+    err: `expected item`\n   ERROR@[3; 10)\n-  err: `expected item`\n     MATCH_KW@[3; 8)\n     WHITESPACE@[8; 10)\n   STRUCT_ITEM@[10; 21)"}, {"sha": "1a4b37da8407c5b965a34bb2d3ad635a83fd9840", "filename": "tests/data/parser/err/0002_duplicate_shebang.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -1,7 +1,7 @@\n FILE@[0; 42)\n   SHEBANG@[0; 20)\n-  ERROR@[20; 42)\n   err: `expected item`\n+  ERROR@[20; 42)\n     WHITESPACE@[20; 21)\n     SHEBANG@[21; 41)\n     WHITESPACE@[41; 42)"}, {"sha": "dc3cf6c732e1a51643f7e6fbfc3b763f604e9cc3", "filename": "tests/data/parser/err/0003_C++_semicolon.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -32,7 +32,7 @@ FILE@[0; 40)\n     COMMA@[36; 37)\n     WHITESPACE@[37; 38)\n     R_CURLY@[38; 39)\n-  ERROR@[39; 40)\n-  err: `expected item, found `;`\n+    err: `expected item, found `;`\n consider removing this semicolon`\n+  ERROR@[39; 40)\n     SEMI@[39; 40)"}, {"sha": "d9ff79ebe63f2d84b58a6552f87b0cf44a9a69d5", "filename": "tests/data/parser/err/0004_use_path_bad_segment.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -9,13 +9,13 @@ FILE@[0; 12)\n               WHITESPACE@[3; 4)\n               IDENT@[4; 7) \"foo\"\n         COLONCOLON@[7; 9)\n-        PATH_SEGMENT@[9; 9)\n+        err: `expected SEMI`\n         err: `expected identifier`\n-    err: `expected SEMI`\n+        err: `expected item`\n+        PATH_SEGMENT@[9; 9)\n   ERROR@[9; 11)\n-  err: `expected item`\n     INT_NUMBER@[9; 11)\n-  ERROR@[11; 12)\n-  err: `expected item, found `;`\n+    err: `expected item, found `;`\n consider removing this semicolon`\n+  ERROR@[11; 12)\n     SEMI@[11; 12)"}, {"sha": "74dd38959244171e7c906651c1b37d09dd427655", "filename": "tests/data/parser/err/0005_attribute_recover.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0005_attribute_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0005_attribute_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0005_attribute_recover.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -9,12 +9,12 @@ FILE@[0; 54)\n         META_ITEM@[6; 9)\n           IDENT@[6; 9) \"foo\"\n         COMMA@[9; 10)\n-        ERROR@[10; 12)\n         err: `expected attribute`\n+        ERROR@[10; 12)\n           WHITESPACE@[10; 11)\n           PLUS@[11; 12)\n+          err: `expected attribute`\n         ERROR@[12; 14)\n-        err: `expected attribute`\n           COMMA@[12; 13)\n           WHITESPACE@[13; 14)\n         LITERAL@[14; 16)\n@@ -43,7 +43,7 @@ FILE@[0; 54)\n         L_PAREN@[39; 40)\n         err: `expected attribute`\n         WHITESPACE@[40; 41)\n-      err: `expected R_BRACK`\n+        err: `expected R_BRACK`\n     FN_KW@[41; 43)\n     NAME@[43; 47)\n       WHITESPACE@[43; 44)"}, {"sha": "cb5a9c32c3c398bb12838115bc3d7449d81a81e2", "filename": "tests/data/parser/err/0006_named_field_recovery.txt", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0006_named_field_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0006_named_field_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0006_named_field_recovery.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -22,23 +22,26 @@ FILE@[0; 74)\n       WHITESPACE@[22; 27)\n       PUB_KW@[27; 30)\n       WHITESPACE@[30; 31)\n+      err: `expected field declaration`\n     ERROR@[31; 38)\n-    err: `expected field declaration`\n       INT_NUMBER@[31; 33)\n       WHITESPACE@[33; 38)\n-    err: `expected COMMA`\n+      err: `expected COMMA`\n+      err: `expected field declaration`\n     ERROR@[38; 40)\n-    err: `expected field declaration`\n       PLUS@[38; 39)\n       WHITESPACE@[39; 40)\n+      err: `expected COMMA`\n+      err: `expected field declaration`\n     ERROR@[40; 42)\n-    err: `expected field declaration`\n       MINUS@[40; 41)\n       WHITESPACE@[41; 42)\n+      err: `expected COMMA`\n+      err: `expected field declaration`\n     ERROR@[42; 48)\n-    err: `expected field declaration`\n       STAR@[42; 43)\n       WHITESPACE@[43; 48)\n+      err: `expected COMMA`\n     NAMED_FIELD@[48; 58)\n       VISIBILITY@[48; 52)\n         PUB_KW@[48; 51)"}, {"sha": "cfc714cc6a2001090b2e24590e640249b76efb86", "filename": "tests/data/parser/err/0007_stray_curly_in_file.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -1,6 +1,6 @@\n FILE@[0; 31)\n+err: `expected item`\n   ERROR@[0; 3)\n-  err: `expected item`\n     R_CURLY@[0; 1)\n     WHITESPACE@[1; 3)\n   STRUCT_ITEM@[3; 14)\n@@ -10,8 +10,8 @@ FILE@[0; 31)\n       IDENT@[10; 11) \"S\"\n     SEMI@[11; 12)\n     WHITESPACE@[12; 14)\n+    err: `expected item`\n   ERROR@[14; 17)\n-  err: `expected item`\n     R_CURLY@[14; 15)\n     WHITESPACE@[15; 17)\n   FN_ITEM@[17; 29)\n@@ -25,7 +25,7 @@ FILE@[0; 31)\n       L_CURLY@[25; 26)\n       R_CURLY@[26; 27)\n       WHITESPACE@[27; 29)\n+      err: `expected item`\n   ERROR@[29; 31)\n-  err: `expected item`\n     R_CURLY@[29; 30)\n     WHITESPACE@[30; 31)"}, {"sha": "ca332bcf0687d55c3629e1f43aeeed373883df56", "filename": "tests/data/parser/err/0008_item_block_recovery.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -12,18 +12,18 @@ FILE@[0; 95)\n       WHITESPACE@[10; 11)\n       R_CURLY@[11; 12)\n       WHITESPACE@[12; 14)\n+      err: `expected item`\n   ERROR@[14; 17)\n-  err: `expected item`\n     IDENT@[14; 17) \"bar\"\n+    err: `expected item`\n   ERROR@[17; 18)\n-  err: `expected item`\n     L_PAREN@[17; 18)\n+    err: `expected item`\n   ERROR@[18; 20)\n-  err: `expected item`\n     R_PAREN@[18; 19)\n     WHITESPACE@[19; 20)\n+    err: `expected item`\n   ERROR@[20; 82)\n-  err: `expected item`\n     L_CURLY@[20; 21)\n     WHITESPACE@[21; 26)\n     IF_KW@[26; 28)"}, {"sha": "c16c6dffe14dc86b2e1b296661c4bf6389f26e86", "filename": "tests/data/parser/err/0009_broken_struct_type_parameter.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -6,26 +6,26 @@ FILE@[0; 43)\n       IDENT@[7; 8) \"S\"\n     TYPE_PARAM_LIST@[8; 12)\n       L_ANGLE@[8; 9)\n-      ERROR@[9; 12)\n       err: `expected type parameter`\n+      ERROR@[9; 12)\n         INT_NUMBER@[9; 11)\n         WHITESPACE@[11; 12)\n-      err: `expected COMMA`\n-      err: `expected R_ANGLE`\n-    err: `expected `;`, `{`, or `(``\n+        err: `expected COMMA`\n+        err: `expected R_ANGLE`\n+        err: `expected `;`, `{`, or `(``\n+        err: `expected item`\n   ERROR@[12; 14)\n-  err: `expected item`\n     PLUS@[12; 13)\n     WHITESPACE@[13; 14)\n+    err: `expected item`\n   ERROR@[14; 15)\n-  err: `expected item`\n     INT_NUMBER@[14; 15)\n+    err: `expected item`\n   ERROR@[15; 17)\n-  err: `expected item`\n     R_ANGLE@[15; 16)\n     WHITESPACE@[16; 17)\n+    err: `expected item`\n   ERROR@[17; 33)\n-  err: `expected item`\n     L_CURLY@[17; 18)\n     WHITESPACE@[18; 23)\n     IDENT@[23; 24) \"f\""}, {"sha": "f310e1225a52724e0033bd4cb4b8184694290ba2", "filename": "tests/data/parser/inline/0006_extern_struct.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Finline%2F0006_extern_struct.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Finline%2F0006_extern_struct.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0006_extern_struct.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -2,7 +2,7 @@ FILE@[0; 19)\n   ABI@[0; 7)\n     EXTERN_KW@[0; 6)\n     WHITESPACE@[6; 7)\n-  err: `expected `fn` or `{``\n+    err: `expected `fn` or `{``\n   STRUCT_ITEM@[7; 19)\n     STRUCT_KW@[7; 13)\n     NAME@[13; 17)"}, {"sha": "3b56378a3162860edd01e3d324ac6f4647a6e3b7", "filename": "tests/data/parser/inline/0013_unsafe_block_in_mod.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -11,8 +11,8 @@ FILE@[0; 33)\n       R_CURLY@[9; 10)\n       WHITESPACE@[10; 11)\n   UNSAFE_KW@[11; 17)\n-  ERROR@[17; 22)\n   err: `expected `trait`, `impl` or `fn``\n+  ERROR@[17; 22)\n     WHITESPACE@[17; 18)\n     L_CURLY@[18; 19)\n     WHITESPACE@[19; 20)"}, {"sha": "cc280d5a77504cb56180a1026298d8acd034aa7c", "filename": "tests/data/parser/inline/0023_array_type_missing_semi.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -13,16 +13,16 @@ FILE@[0; 18)\n         L_PAREN@[10; 11)\n         R_PAREN@[11; 12)\n         WHITESPACE@[12; 13)\n-      err: `expected `;` or `]``\n-    err: `expected SEMI`\n+        err: `expected SEMI`\n+        err: `expected `;` or `]``\n+        err: `expected item`\n   ERROR@[13; 15)\n-  err: `expected item`\n     INT_NUMBER@[13; 15)\n+    err: `expected item`\n   ERROR@[15; 16)\n-  err: `expected item`\n     R_BRACK@[15; 16)\n-  ERROR@[16; 18)\n-  err: `expected item, found `;`\n+    err: `expected item, found `;`\n consider removing this semicolon`\n+  ERROR@[16; 18)\n     SEMI@[16; 17)\n     WHITESPACE@[17; 18)"}, {"sha": "d6c27cf581d9c92a5dae177fe80ee609051a4b3b", "filename": "tests/data/parser/inline/0029_fn_pointer_type_missing_fn.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -8,17 +8,17 @@ FILE@[0; 20)\n     EQ@[7; 8)\n     WHITESPACE@[8; 9)\n     UNSAFE_KW@[9; 15)\n-    err: `expected `fn``\n     err: `expected SEMI`\n+    err: `expected `fn``\n     WHITESPACE@[15; 16)\n+    err: `expected item`\n   ERROR@[16; 17)\n-  err: `expected item`\n     L_PAREN@[16; 17)\n+    err: `expected item`\n   ERROR@[17; 18)\n-  err: `expected item`\n     R_PAREN@[17; 18)\n-  ERROR@[18; 20)\n-  err: `expected item, found `;`\n+    err: `expected item, found `;`\n consider removing this semicolon`\n+  ERROR@[18; 20)\n     SEMI@[18; 19)\n     WHITESPACE@[19; 20)"}, {"sha": "35b91436a9a6f13cdba794c761ac6b9c8f56638f", "filename": "tests/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12450fb4e30c3418555e47d045bb9fd4318a10a/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=c12450fb4e30c3418555e47d045bb9fd4318a10a", "patch": "@@ -1,15 +1,15 @@\n extern crate libsyntax2;\n extern crate testutils;\n \n-use libsyntax2::{parse, tokenize};\n-use libsyntax2::utils::dump_tree;\n+use libsyntax2::{parse, tokenize, parse_green};\n+use libsyntax2::utils::{dump_tree, dump_tree_green};\n use testutils::dir_tests;\n \n #[test]\n fn parser_tests() {\n     dir_tests(&[\"parser/inline\", \"parser/ok\", \"parser/err\"], |text| {\n         let tokens = tokenize(text);\n-        let file = parse(text.to_string(), &tokens);\n-        dump_tree(&file)\n+        let file = parse_green(text.to_string(), &tokens);\n+        dump_tree_green(&file)\n     })\n }"}]}