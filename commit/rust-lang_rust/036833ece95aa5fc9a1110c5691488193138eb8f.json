{"sha": "036833ece95aa5fc9a1110c5691488193138eb8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjgzM2VjZTk1YWE1ZmM5YTExMTBjNTY5MTQ4ODE5MzEzOGViOGY=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-14T03:48:09Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-14T03:48:09Z"}, "message": "Rename analyze_move_out_from to analyze_restrictions_on_use\n\nAlso rename MoveError to UseError and MoveOk / MoveWhileBorrowed to\nUseOk / UseWhileBorrowed.", "tree": {"sha": "b819e312e65b651fef0edac340beeb174b53a448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b819e312e65b651fef0edac340beeb174b53a448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/036833ece95aa5fc9a1110c5691488193138eb8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/036833ece95aa5fc9a1110c5691488193138eb8f", "html_url": "https://github.com/rust-lang/rust/commit/036833ece95aa5fc9a1110c5691488193138eb8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/036833ece95aa5fc9a1110c5691488193138eb8f/comments", "author": null, "committer": null, "parents": [{"sha": "24b1b79cf1d2a27c3f8d1c518fcfa7a1ec832154", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b1b79cf1d2a27c3f8d1c518fcfa7a1ec832154", "html_url": "https://github.com/rust-lang/rust/commit/24b1b79cf1d2a27c3f8d1c518fcfa7a1ec832154"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "2015572133f88fe4b036fc12031cdec5a1c41ac9", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/036833ece95aa5fc9a1110c5691488193138eb8f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036833ece95aa5fc9a1110c5691488193138eb8f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=036833ece95aa5fc9a1110c5691488193138eb8f", "patch": "@@ -150,9 +150,9 @@ pub fn check_loans(bccx: &BorrowckCtxt,\n }\n \n #[deriving(PartialEq)]\n-enum MoveError {\n-    MoveOk,\n-    MoveWhileBorrowed(/*loan*/Rc<LoanPath>, /*loan*/Span)\n+enum UseError {\n+    UseOk,\n+    UseWhileBorrowed(/*loan*/Rc<LoanPath>, /*loan*/Span)\n }\n \n impl<'a> CheckLoanCtxt<'a> {\n@@ -479,9 +479,9 @@ impl<'a> CheckLoanCtxt<'a> {\n         // We want to detect if there are any loans at all, so we search for\n         // any loans incompatible with MutBorrrow, since all other kinds of\n         // loans are incompatible with that.\n-        match self.analyze_move_out_from(id, move_path, ty::MutBorrow) {\n-            MoveOk => { }\n-            MoveWhileBorrowed(loan_path, loan_span) => {\n+        match self.analyze_restrictions_on_use(id, move_path, ty::MutBorrow) {\n+            UseOk => { }\n+            UseWhileBorrowed(loan_path, loan_span) => {\n                 let err_message = match move_kind {\n                     move_data::Captured =>\n                         format!(\"cannot move `{}` into closure because it is borrowed\",\n@@ -866,16 +866,16 @@ impl<'a> CheckLoanCtxt<'a> {\n                     self.bccx.loan_path_to_str(loan_path)).as_slice());\n     }\n \n-    pub fn analyze_move_out_from(&self,\n-                                 expr_id: ast::NodeId,\n-                                 move_path: &LoanPath,\n-                                 borrow_kind: ty::BorrowKind)\n-                                 -> MoveError {\n-        debug!(\"analyze_move_out_from(expr_id={:?}, move_path={})\",\n+    pub fn analyze_restrictions_on_use(&self,\n+                                       expr_id: ast::NodeId,\n+                                       use_path: &LoanPath,\n+                                       borrow_kind: ty::BorrowKind)\n+                                       -> UseError {\n+        debug!(\"analyze_restrictions_on_use(expr_id={:?}, use_path={})\",\n                self.tcx().map.node_to_str(expr_id),\n-               move_path.repr(self.tcx()));\n+               use_path.repr(self.tcx()));\n \n-        let mut ret = MoveOk;\n+        let mut ret = UseOk;\n \n         // First, we check for a restriction on the path P being used. This\n         // accounts for borrows of P but also borrows of subpaths, like P.a.b.\n@@ -884,9 +884,9 @@ impl<'a> CheckLoanCtxt<'a> {\n         //     let x = &mut a.b.c; // Restricts a, a.b, and a.b.c\n         //     let y = a;          // Conflicts with restriction\n \n-        self.each_in_scope_restriction(expr_id, move_path, |loan, _restr| {\n+        self.each_in_scope_restriction(expr_id, use_path, |loan, _restr| {\n             if incompatible(loan.kind, borrow_kind) {\n-                ret = MoveWhileBorrowed(loan.loan_path.clone(), loan.span);\n+                ret = UseWhileBorrowed(loan.loan_path.clone(), loan.span);\n                 false\n             } else {\n                 true\n@@ -905,12 +905,12 @@ impl<'a> CheckLoanCtxt<'a> {\n         //     let x = &mut a.b;\n         //     let y = a.c;\n \n-        let mut loan_path = move_path;\n+        let mut loan_path = use_path;\n         loop {\n             self.each_in_scope_loan(expr_id, |loan| {\n                 if *loan.loan_path == *loan_path &&\n                    incompatible(loan.kind, borrow_kind) {\n-                    ret = MoveWhileBorrowed(loan.loan_path.clone(), loan.span);\n+                    ret = UseWhileBorrowed(loan.loan_path.clone(), loan.span);\n                     false\n                 } else {\n                     true"}]}