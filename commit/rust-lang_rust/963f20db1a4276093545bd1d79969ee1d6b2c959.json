{"sha": "963f20db1a4276093545bd1d79969ee1d6b2c959", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2M2YyMGRiMWE0Mjc2MDkzNTQ1YmQxZDc5OTY5ZWUxZDZiMmM5NTk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-12-18T13:19:03Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-12-20T14:57:51Z"}, "message": "Allow -Cllvm-args to override rustc's default LLVM args.", "tree": {"sha": "b212c42c42908b5c7229e4874b25b213a0502e81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b212c42c42908b5c7229e4874b25b213a0502e81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/963f20db1a4276093545bd1d79969ee1d6b2c959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/963f20db1a4276093545bd1d79969ee1d6b2c959", "html_url": "https://github.com/rust-lang/rust/commit/963f20db1a4276093545bd1d79969ee1d6b2c959", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/963f20db1a4276093545bd1d79969ee1d6b2c959/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b561b4917e803c4be4ca44d8e552b680cb9e380", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b561b4917e803c4be4ca44d8e552b680cb9e380", "html_url": "https://github.com/rust-lang/rust/commit/6b561b4917e803c4be4ca44d8e552b680cb9e380"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "6f9bb6d1ac551b2bcef26c76e23885b99393f66b", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/963f20db1a4276093545bd1d79969ee1d6b2c959/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963f20db1a4276093545bd1d79969ee1d6b2c959/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=963f20db1a4276093545bd1d79969ee1d6b2c959", "patch": "@@ -3,6 +3,7 @@ use crate::llvm;\n use syntax_pos::symbol::Symbol;\n use rustc::session::Session;\n use rustc::session::config::PrintRequest;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use libc::c_int;\n use std::ffi::CString;\n@@ -51,43 +52,62 @@ unsafe fn configure_llvm(sess: &Session) {\n \n     llvm::LLVMRustInstallFatalErrorHandler();\n \n+    fn llvm_arg_to_arg_name(full_arg: &str) -> &str {\n+        full_arg.trim().split(|c: char| {\n+            c == '=' || c.is_whitespace()\n+        }).next().unwrap_or(\"\")\n+    }\n+\n+    let user_specified_args: FxHashSet<_> = sess\n+        .opts\n+        .cg\n+        .llvm_args\n+        .iter()\n+        .map(|s| llvm_arg_to_arg_name(s))\n+        .filter(|s| s.len() > 0)\n+        .collect();\n+\n     {\n-        let mut add = |arg: &str| {\n-            let s = CString::new(arg).unwrap();\n-            llvm_args.push(s.as_ptr());\n-            llvm_c_strs.push(s);\n+        // This adds the given argument to LLVM. Unless `force` is true\n+        // user specified arguments are *not* overridden.\n+        let mut add = |arg: &str, force: bool| {\n+            if force || !user_specified_args.contains(llvm_arg_to_arg_name(arg)) {\n+                let s = CString::new(arg).unwrap();\n+                llvm_args.push(s.as_ptr());\n+                llvm_c_strs.push(s);\n+            }\n         };\n-        add(\"rustc\"); // fake program name\n-        if sess.time_llvm_passes() { add(\"-time-passes\"); }\n-        if sess.print_llvm_passes() { add(\"-debug-pass=Structure\"); }\n+        add(\"rustc\", true); // fake program name\n+        if sess.time_llvm_passes() { add(\"-time-passes\", false); }\n+        if sess.print_llvm_passes() { add(\"-debug-pass=Structure\", false); }\n         if sess.opts.debugging_opts.disable_instrumentation_preinliner {\n-            add(\"-disable-preinline\");\n+            add(\"-disable-preinline\", false);\n         }\n         if sess.opts.debugging_opts.generate_arange_section {\n-            add(\"-generate-arange-section\");\n+            add(\"-generate-arange-section\", false);\n         }\n         if get_major_version() >= 8 {\n             match sess.opts.debugging_opts.merge_functions\n                   .unwrap_or(sess.target.target.options.merge_functions) {\n                 MergeFunctions::Disabled |\n                 MergeFunctions::Trampolines => {}\n                 MergeFunctions::Aliases => {\n-                    add(\"-mergefunc-use-aliases\");\n+                    add(\"-mergefunc-use-aliases\", false);\n                 }\n             }\n         }\n \n         if sess.target.target.target_os == \"emscripten\" &&\n             sess.panic_strategy() == PanicStrategy::Unwind {\n-            add(\"-enable-emscripten-cxx-exceptions\");\n+            add(\"-enable-emscripten-cxx-exceptions\", false);\n         }\n \n         // HACK(eddyb) LLVM inserts `llvm.assume` calls to preserve align attributes\n         // during inlining. Unfortunately these may block other optimizations.\n-        add(\"-preserve-alignment-assumptions-during-inlining=false\");\n+        add(\"-preserve-alignment-assumptions-during-inlining=false\", false);\n \n         for arg in &sess.opts.cg.llvm_args {\n-            add(&(*arg));\n+            add(&(*arg), true);\n         }\n     }\n "}]}