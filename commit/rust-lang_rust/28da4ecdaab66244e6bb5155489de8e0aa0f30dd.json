{"sha": "28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZGE0ZWNkYWFiNjYyNDRlNmJiNTE1NTQ4OWRlOGUwYWEwZjMwZGQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-17T03:24:10Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-20T22:08:18Z"}, "message": "convert librustc record types to structs\n\nspecifically:\n\nfreevars::freevar_entry\nty::{field_ty,AutoAdjustment,AutoRef}\nmod::{method_param,method_map_entry}", "tree": {"sha": "785540daf42e4d0b2b77de1e2e07f71a282aef7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/785540daf42e4d0b2b77de1e2e07f71a282aef7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "html_url": "https://github.com/rust-lang/rust/commit/28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5d77b9351bdcb7a9fd7c6a27950990d33eea232", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d77b9351bdcb7a9fd7c6a27950990d33eea232", "html_url": "https://github.com/rust-lang/rust/commit/d5d77b9351bdcb7a9fd7c6a27950990d33eea232"}], "stats": {"total": 232, "additions": 146, "deletions": 86}, "files": [{"sha": "596a5f8c73c87a53c98235ece4ab3542116266af", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -930,14 +930,18 @@ fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n     let item = lookup_item(id, data);\n     let mut result = ~[];\n     for reader::tagged_docs(item, tag_item_field) |an_item| {\n-       let f = item_family(an_item);\n-       if f == PublicField || f == PrivateField || f == InheritedField {\n-          let name = item_name(intr, an_item);\n-          let did = item_def_id(an_item, cdata);\n-          let mt = field_mutability(an_item);\n-          result.push({ident: name, id: did, vis:\n-                  family_to_visibility(f), mutability: mt});\n-       }\n+        let f = item_family(an_item);\n+        if f == PublicField || f == PrivateField || f == InheritedField {\n+            let name = item_name(intr, an_item);\n+            let did = item_def_id(an_item, cdata);\n+            let mt = field_mutability(an_item);\n+            result.push(ty::field_ty {\n+                ident: name,\n+                id: did, vis:\n+                family_to_visibility(f),\n+                mutability: mt,\n+            });\n+        }\n     }\n     result\n }"}, {"sha": "94b28bf1397c69478414741cf8fc552117e8b354", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -448,16 +448,20 @@ impl ast::def: tr {\n \n impl ty::AutoAdjustment: tr {\n     fn tr(xcx: extended_decode_ctxt) -> ty::AutoAdjustment {\n-        {autoderefs: self.autoderefs,\n-         autoref: self.autoref.map(|ar| ar.tr(xcx))}\n+        ty::AutoAdjustment {\n+            autoderefs: self.autoderefs,\n+            autoref: self.autoref.map(|ar| ar.tr(xcx)),\n+        }\n     }\n }\n \n impl ty::AutoRef: tr {\n     fn tr(xcx: extended_decode_ctxt) -> ty::AutoRef {\n-        {kind: self.kind,\n-         region: self.region.tr(xcx),\n-         mutbl: self.mutbl}\n+        ty::AutoRef {\n+            kind: self.kind,\n+            region: self.region.tr(xcx),\n+            mutbl: self.mutbl,\n+        }\n     }\n }\n \n@@ -503,7 +507,10 @@ impl reader::Decoder: ebml_decoder_helper {\n \n impl freevar_entry: tr {\n     fn tr(xcx: extended_decode_ctxt) -> freevar_entry {\n-        {def: self.def.tr(xcx), span: self.span.tr(xcx)}\n+        freevar_entry {\n+            def: self.def.tr(xcx),\n+            span: self.span.tr(xcx),\n+        }\n     }\n }\n \n@@ -533,21 +540,20 @@ fn encode_method_map_entry(ecx: @e::encode_ctxt,\n impl reader::Decoder: read_method_map_entry_helper {\n     fn read_method_map_entry(xcx: extended_decode_ctxt) -> method_map_entry {\n         do self.read_rec {\n-            {self_arg:\n-                 self.read_field(~\"self_arg\", 0u, || {\n-                     self.read_arg(xcx)\n-                 }),\n-             explicit_self:\n-                 self.read_field(~\"explicit_self\", 2u, || {\n+            method_map_entry {\n+                self_arg: self.read_field(~\"self_arg\", 0u, || {\n+                    self.read_arg(xcx)\n+                }),\n+                explicit_self: self.read_field(~\"explicit_self\", 2u, || {\n                     let self_type: ast::self_ty_ = Decodable::decode(&self);\n                     self_type\n-                 }),\n-             origin:\n-                 self.read_field(~\"origin\", 1u, || {\n-                     let method_origin: method_origin =\n-                         Decodable::decode(&self);\n-                     method_origin.tr(xcx)\n-                 })}\n+                }),\n+                origin: self.read_field(~\"origin\", 1u, || {\n+                    let method_origin: method_origin =\n+                        Decodable::decode(&self);\n+                    method_origin.tr(xcx)\n+                }),\n+            }\n         }\n     }\n }\n@@ -559,7 +565,12 @@ impl method_origin: tr {\n             typeck::method_static(did.tr(xcx))\n           }\n           typeck::method_param(ref mp) => {\n-            typeck::method_param({trait_id:(*mp).trait_id.tr(xcx),.. (*mp)})\n+            typeck::method_param(\n+                typeck::method_param {\n+                    trait_id: mp.trait_id.tr(xcx),\n+                    .. *mp\n+                }\n+            )\n           }\n           typeck::method_trait(did, m, vstore) => {\n             typeck::method_trait(did.tr(xcx), m, vstore)"}, {"sha": "9e9f814110e1612ee8e826e2247da72d4a77aaf1", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -34,10 +34,10 @@ export has_freevars;\n // (The def_upvar will already have been stripped).\n #[auto_encode]\n #[auto_decode]\n-type freevar_entry = {\n+struct freevar_entry {\n     def: ast::def, //< The variable being accessed free.\n     span: span     //< First span where it is accessed (there can be multiple)\n-};\n+}\n type freevar_info = @~[@freevar_entry];\n type freevar_map = HashMap<ast::node_id, freevar_info>;\n \n@@ -79,7 +79,10 @@ fn collect_freevars(def_map: resolve::DefMap, blk: ast::blk)\n                       if i == depth { // Made it to end of loop\n                         let dnum = ast_util::def_id_of_def(def).node;\n                         if !seen.contains_key(dnum) {\n-                            refs.push(@{def:def, span:expr.span});\n+                            refs.push(@freevar_entry {\n+                                def: def,\n+                                span: expr.span,\n+                            });\n                             seen.insert(dnum, ());\n                         }\n                       }"}, {"sha": "401510328da0bf95ce7e024a361c4b01f356edcb", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -132,7 +132,11 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n                     // XXX: External crates.\n                 }\n             }\n-            method_param({trait_id: trait_id, method_num: method_num, _}) |\n+            method_param(method_param {\n+                trait_id: trait_id,\n+                 method_num: method_num,\n+                 _\n+            }) |\n             method_trait(trait_id, method_num, _) |\n             method_self(trait_id, method_num) => {\n                 if trait_id.crate == local_crate {"}, {"sha": "7eccf97f76c317a84afb54299169f769a7a8bffc", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -209,8 +209,12 @@ fn trans_method_callee(bcx: block, callee_id: ast::node_id,\n                 })\n             }\n         }\n-        typeck::method_param({trait_id:trait_id, method_num:off,\n-                              param_num:p, bound_num:b}) => {\n+        typeck::method_param(typeck::method_param {\n+            trait_id: trait_id,\n+            method_num: off,\n+            param_num: p,\n+            bound_num: b\n+        }) => {\n             match bcx.fcx.param_substs {\n                 Some(ref substs) => {\n                     let vtbl = base::find_vtable(bcx.tcx(), substs, p, b);"}, {"sha": "29051837e4a0feba42200049ddddd45d33726b2e", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -182,15 +182,21 @@ fn traverse_inline_body(cx: ctx, body: blk) {\n           }\n           expr_field(_, _, _) => {\n             match cx.method_map.find(e.id) {\n-              Some({origin: typeck::method_static(did), _}) => {\n+              Some(typeck::method_map_entry {\n+                  origin: typeck::method_static(did),\n+                  _\n+                }) => {\n                 traverse_def_id(cx, did);\n               }\n               _ => ()\n             }\n           }\n           expr_method_call(*) => {\n             match cx.method_map.find(e.id) {\n-              Some({origin: typeck::method_static(did), _}) => {\n+              Some(typeck::method_map_entry {\n+                  origin: typeck::method_static(did),\n+                  _\n+                }) => {\n                 traverse_def_id(cx, did);\n               }\n               Some(_) => {}"}, {"sha": "8c34069df423b99f09902a277d12006ed2abe7d2", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -233,7 +233,10 @@ fn mark_for_method_call(cx: ctx, e_id: node_id, callee_id: node_id) {\n                 }\n             }\n           }\n-          typeck::method_param({param_num: param, _}) => {\n+          typeck::method_param(typeck::method_param {\n+              param_num: param,\n+              _\n+          }) => {\n             cx.uses[param] |= use_tydesc;\n           }\n           typeck::method_trait(*) | typeck::method_self(*) => (),"}, {"sha": "b5870059c675f2fddddf6e45ab93ff2e49bfdf50", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -272,12 +272,12 @@ enum vstore {\n     vstore_slice(Region)\n }\n \n-type field_ty = {\n+struct field_ty {\n   ident: ident,\n   id: def_id,\n   vis: ast::visibility,\n-  mutability: ast::struct_mutability\n-};\n+  mutability: ast::struct_mutability,\n+}\n \n /// How an lvalue is to be used.\n #[auto_encode]\n@@ -356,18 +356,18 @@ impl region_variance : cmp::Eq {\n \n #[auto_encode]\n #[auto_decode]\n-pub type AutoAdjustment = {\n+pub struct AutoAdjustment {\n     autoderefs: uint,\n     autoref: Option<AutoRef>\n-};\n+}\n \n #[auto_encode]\n #[auto_decode]\n-pub type AutoRef = {\n+pub struct AutoRef {\n     kind: AutoRefKind,\n     region: Region,\n     mutbl: ast::mutability\n-};\n+}\n \n #[auto_encode]\n #[auto_decode]\n@@ -3086,8 +3086,9 @@ fn method_call_bounds(tcx: ctxt, method_map: typeck::method_map,\n             // and then the method bounds themselves...\n             ty::lookup_item_type(tcx, did).bounds\n           }\n-          typeck::method_param({trait_id:trt_id,\n-                                method_num:n_mth, _}) |\n+          typeck::method_param(typeck::method_param {\n+              trait_id: trt_id,\n+              method_num: n_mth, _}) |\n           typeck::method_trait(trt_id, n_mth, _) |\n           typeck::method_self(trt_id, n_mth) => {\n             // ...trait methods bounds, in contrast, include only the\n@@ -4075,25 +4076,27 @@ pure fn is_public(f: field_ty) -> bool {\n }\n \n fn struct_field_tys(fields: ~[@struct_field]) -> ~[field_ty] {\n-    let mut rslt = ~[];\n-    for fields.each |field| {\n+    do fields.map |field| {\n         match field.node.kind {\n             named_field(ident, mutability, visibility) => {\n-                rslt.push({ident: ident,\n-                           id: ast_util::local_def(field.node.id),\n-                           vis: visibility,\n-                           mutability: mutability});\n+                field_ty {\n+                    ident: ident,\n+                    id: ast_util::local_def(field.node.id),\n+                    vis: visibility,\n+                    mutability: mutability,\n+                }\n             }\n             unnamed_field => {\n-                rslt.push({ident:\n-                    syntax::parse::token::special_idents::unnamed_field,\n-                           id: ast_util::local_def(field.node.id),\n-                           vis: ast::public,\n-                           mutability: ast::struct_immutable});\n+                field_ty {\n+                    ident:\n+                        syntax::parse::token::special_idents::unnamed_field,\n+                    id: ast_util::local_def(field.node.id),\n+                    vis: ast::public,\n+                    mutability: ast::struct_immutable,\n+                }\n             }\n-       }\n+        }\n     }\n-    rslt\n }\n \n // Return a list of fields corresponding to the struct's items"}, {"sha": "7ef6ae598803e3b0b1af67c471c1c41acebc807d", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -455,10 +455,13 @@ impl LookupContext {\n                     explicit_self: method.self_ty,\n                     num_method_tps: method.tps.len(),\n                     self_mode: get_mode_from_self_type(method.self_ty),\n-                    origin: method_param({trait_id:init_trait_id,\n-                                          method_num:pos,\n-                                          param_num:param_ty.idx,\n-                                          bound_num:this_bound_idx})\n+                    origin: method_param(\n+                        method_param {\n+                            trait_id: init_trait_id,\n+                            method_num: pos,\n+                            param_num: param_ty.idx,\n+                            bound_num: this_bound_idx,\n+                        })\n                 };\n \n                 debug!(\"pushing inherent candidate for param: %?\", cand);\n@@ -834,10 +837,14 @@ impl LookupContext {\n                 Some(move mme) => {\n                     self.fcx.write_adjustment(\n                         self.self_expr.id,\n-                        @{autoderefs: autoderefs,\n-                          autoref: Some({kind: kind,\n-                                         region: region,\n-                                         mutbl: *mutbl})});\n+                        @ty::AutoAdjustment {\n+                            autoderefs: autoderefs,\n+                            autoref: Some(ty::AutoRef {\n+                                kind: kind,\n+                                region: region,\n+                                mutbl: *mutbl,\n+                            }),\n+                        });\n                     return Some(mme);\n                 }\n             }\n@@ -1004,10 +1011,14 @@ impl LookupContext {\n         };\n \n         self.fcx.write_ty_substs(self.callee_id, fty, all_substs);\n-        return {self_arg: {mode: ast::expl(candidate.self_mode),\n-                           ty: candidate.rcvr_ty},\n-                explicit_self: candidate.explicit_self,\n-                origin: candidate.origin};\n+        method_map_entry {\n+            self_arg: {\n+                mode: ast::expl(candidate.self_mode),\n+                ty: candidate.rcvr_ty,\n+            },\n+            explicit_self: candidate.explicit_self,\n+            origin: candidate.origin,\n+        }\n     }\n \n     fn enforce_trait_instance_limitations(&self,\n@@ -1050,7 +1061,7 @@ impl LookupContext {\n             method_static(method_id) | method_self(method_id, _) => {\n                 bad = self.tcx().destructors.contains_key(method_id);\n             }\n-            method_param({trait_id: trait_id, _}) |\n+            method_param(method_param { trait_id: trait_id, _ }) |\n             method_trait(trait_id, _, _) => {\n                 bad = self.tcx().destructor_for_type.contains_key(trait_id);\n             }"}, {"sha": "97d59fdf3337e79c5c27fd1afc857bd8761dde4d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -730,7 +730,10 @@ impl @fn_ctxt {\n \n     fn write_autoderef_adjustment(node_id: ast::node_id, derefs: uint) {\n         if derefs == 0 { return; }\n-        self.write_adjustment(node_id, @{autoderefs: derefs, autoref: None});\n+        self.write_adjustment(\n+            node_id,\n+            @ty::AutoAdjustment { autoderefs: derefs, autoref: None }\n+        );\n     }\n \n     fn write_adjustment(node_id: ast::node_id, adj: @ty::AutoAdjustment) {"}, {"sha": "af3585a55b0ab44d1e35282df03baa7b06f989fe", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -324,7 +324,9 @@ fn constrain_auto_ref(\n \n     let adjustment = rcx.fcx.inh.adjustments.find(expr.id);\n     let region = match adjustment {\n-        Some(@{autoref: Some(ref auto_ref), _}) => auto_ref.region,\n+        Some(@ty::AutoAdjustment { autoref: Some(ref auto_ref), _ }) => {\n+            auto_ref.region\n+        },\n         _ => { return; }\n     };\n "}, {"sha": "1a665aa756611bbe7404158d69a8baff89fa2184", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -20,6 +20,7 @@ use middle::typeck::check::{fn_ctxt, lookup_local, self_info};\n use middle::typeck::infer::{force_all, resolve_all, resolve_region};\n use middle::typeck::infer::{resolve_type};\n use middle::typeck::infer;\n+use middle::typeck::method_map_entry;\n use middle::typeck::{vtable_param, vtable_trait, write_substs_to_tcx};\n use middle::typeck::{write_ty_to_tcx};\n use util::ppaux;\n@@ -63,8 +64,11 @@ fn resolve_method_map_entry(fcx: @fn_ctxt, sp: span, id: ast::node_id)\n             for resolve_type_vars_in_type(fcx, sp, mme.self_arg.ty).each |t| {\n                 fcx.ccx.method_map.insert(\n                     id,\n-                    {self_arg: {mode: mme.self_arg.mode, ty: *t},\n-                     ..*mme});\n+                    method_map_entry {\n+                        self_arg: {mode: mme.self_arg.mode, ty: *t},\n+                        .. *mme\n+                    }\n+                );\n             }\n         }\n     }\n@@ -91,14 +95,16 @@ fn resolve_type_vars_for_node(wbcx: wb_ctxt, sp: span, id: ast::node_id)\n                             Some(*autoref)\n                         }\n                         Ok(r) => {\n-                            Some({region: r, ..*autoref})\n+                            Some(ty::AutoRef {region: r, ..*autoref})\n                         }\n                     }\n                 }\n                 None => None\n             };\n \n-            let resolved_adj = @{autoref: resolved_autoref, ..*adj};\n+            let resolved_adj = @ty::AutoAdjustment {\n+                autoref: resolved_autoref,\n+                ..*adj};\n             debug!(\"Adjustments for node %d: %?\", id, resolved_adj);\n             fcx.tcx().adjustments.insert(id, resolved_adj);\n         }"}, {"sha": "fef63cf9a42cc7f022c7353cafb44bb37c7a62b0", "filename": "src/librustc/middle/typeck/infer/assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -275,9 +275,9 @@ priv impl Assign {\n             do sub.tys(a, nr_b).chain |_t| {\n                 let r_a = self.infcx.next_region_var_nb(self.span);\n                 do sub.contraregions(r_a, r_b).chain |_r| {\n-                    Ok(Some(@{\n+                    Ok(Some(@ty::AutoAdjustment {\n                         autoderefs: autoderefs,\n-                        autoref: Some({\n+                        autoref: Some(ty::AutoRef {\n                             kind: kind,\n                             region: r_a,\n                             mutbl: m"}, {"sha": "341ce666e613195f2dcec2abd9c7539d7de3a725", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28da4ecdaab66244e6bb5155489de8e0aa0f30dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=28da4ecdaab66244e6bb5155489de8e0aa0f30dd", "patch": "@@ -142,7 +142,7 @@ pub enum method_origin {\n // with a bounded trait.\n #[auto_encode]\n #[auto_decode]\n-type method_param = {\n+struct method_param {\n     // the trait containing the method to be invoked\n     trait_id: ast::def_id,\n \n@@ -154,10 +154,10 @@ type method_param = {\n     param_num: uint,\n \n     // index of the bound for this type parameter which specifies the trait\n-    bound_num: uint\n-};\n+    bound_num: uint,\n+}\n \n-pub type method_map_entry = {\n+pub struct method_map_entry {\n     // the type and mode of the self parameter, which is not reflected\n     // in the fn type (FIXME #3446)\n     self_arg: ty::arg,\n@@ -166,8 +166,8 @@ pub type method_map_entry = {\n     explicit_self: ast::self_ty_,\n \n     // method details being invoked\n-    origin: method_origin\n-};\n+    origin: method_origin,\n+}\n \n // maps from an expression id that corresponds to a method call to the details\n // of the method to be invoked"}]}