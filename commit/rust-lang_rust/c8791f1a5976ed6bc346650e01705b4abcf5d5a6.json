{"sha": "c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NzkxZjFhNTk3NmVkNmJjMzQ2NjUwZTAxNzA1YjRhYmNmNWQ1YTY=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-27T19:43:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-27T19:43:30Z"}, "message": "Rollup merge of #35985 - 0xmohit:pr/error-code-E0277, r=jonathandturner\n\nUpdate E0277 to new error format\n\nFixes #35311.\nPart of #35233.\n\nr? @jonathandturner", "tree": {"sha": "c7fe2784b891a1b617dd43c76ff39541d099bfe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7fe2784b891a1b617dd43c76ff39541d099bfe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "html_url": "https://github.com/rust-lang/rust/commit/c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "965f50dad5119e6d0011f7a3b0cf51a0c220b95e", "url": "https://api.github.com/repos/rust-lang/rust/commits/965f50dad5119e6d0011f7a3b0cf51a0c220b95e", "html_url": "https://github.com/rust-lang/rust/commit/965f50dad5119e6d0011f7a3b0cf51a0c220b95e"}, {"sha": "874a20d01d1c075b3f9a9c60562d78761ed08bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/874a20d01d1c075b3f9a9c60562d78761ed08bc4", "html_url": "https://github.com/rust-lang/rust/commit/874a20d01d1c075b3f9a9c60562d78761ed08bc4"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "3bdf6acdf9a5b4998d572a5cd8e0091ad0a23f9b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "patch": "@@ -477,10 +477,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                     return;\n                                 }\n \n-                                let mut err = struct_span_err!(\n-                                    self.tcx.sess, span, E0277,\n+                                let mut err = struct_span_err!(self.tcx.sess, span, E0277,\n                                     \"the trait bound `{}` is not satisfied\",\n                                     trait_ref.to_predicate());\n+                                err.span_label(span, &format!(\"trait `{}` not satisfied\",\n+                                                              trait_ref.to_predicate()));\n \n                                 // Try to report a help message\n "}, {"sha": "12f9417f944cded5ea6f4cc4d3c9817b5efad5c6", "filename": "src/test/compile-fail/E0277.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277.rs?ref=c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "patch": "@@ -17,5 +17,8 @@ fn some_func<T: Foo>(foo: T) {\n }\n \n fn main() {\n-    some_func(5i32); //~ ERROR E0277\n+    some_func(5i32);\n+    //~^ ERROR the trait bound `i32: Foo` is not satisfied\n+    //~| NOTE trait `i32: Foo` not satisfied\n+    //~| NOTE required by `some_func`\n }"}, {"sha": "084616964674f3ab85423beb904fb9d12b16ac61", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "patch": "@@ -31,5 +31,6 @@ trait Add<RHS=Self> {\n fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n-    //~^ ERROR E0277\n+    //~^ ERROR the trait bound `(): Add<A>` is not satisfied\n+    //~| NOTE trait `(): Add<A>` not satisfied\n }"}, {"sha": "b6e81504a9d24a2b1ac587145a84bae2809e595d", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "patch": "@@ -92,6 +92,7 @@ fn main()\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n     let _ = fat_v as *const Foo;\n     //~^ ERROR the trait bound `[u8]: std::marker::Sized` is not satisfied\n+    //~| NOTE trait `[u8]: std::marker::Sized` not satisfied\n     //~| NOTE `[u8]` does not have a constant size known at compile-time\n     //~| NOTE required for the cast to the object type `Foo`\n     let _ = foo as *const str; //~ ERROR casting\n@@ -106,6 +107,7 @@ fn main()\n     let a : *const str = \"hello\";\n     let _ = a as *const Foo;\n     //~^ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+    //~| NOTE trait `str: std::marker::Sized` not satisfied\n     //~| NOTE `str` does not have a constant size known at compile-time\n     //~| NOTE required for the cast to the object type `Foo`\n "}, {"sha": "a73164b957c831a8896859fb196858d2b3fb493d", "filename": "src/test/compile-fail/const-unsized.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs?ref=c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "patch": "@@ -12,21 +12,25 @@ use std::fmt::Debug;\n \n const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + Sync + 'static: std::marker::Sized` is not satisfied\n+//~| NOTE `std::fmt::Debug + Sync + 'static: std::marker::Sized` not satisfied\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n const CONST_FOO: str = *\"foo\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n+//~| NOTE `str: std::marker::Sized` not satisfied\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + Sync + 'static: std::marker::Sized` is not satisfied\n+//~| NOTE `std::fmt::Debug + Sync + 'static: std::marker::Sized` not satisfied\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n static STATIC_BAR: str = *\"bar\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n+//~| NOTE `str: std::marker::Sized` not satisfied\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n "}, {"sha": "60ad266e7f7daaaf7857c03dc2f4d2c9cffa8dc3", "filename": "src/test/compile-fail/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs?ref=c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "patch": "@@ -26,13 +26,15 @@ fn send<T: Send>(_: T) {}\n fn main() {\n     send(before());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n+    //~| NOTE trait `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` not satisfied\n     //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `[closure\n     //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`\n     //~| NOTE required by `send`\n \n     send(after());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n+    //~| NOTE trait `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` not satisfied\n     //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `[closure\n     //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`\n@@ -52,6 +54,7 @@ fn after() -> impl Fn(i32) {\n fn cycle1() -> impl Clone {\n     send(cycle2().clone());\n     //~^ ERROR the trait bound `std::rc::Rc<std::string::String>: std::marker::Send` is not satisfied\n+    //~| NOTE trait `std::rc::Rc<std::string::String>: std::marker::Send` not satisfied\n     //~| NOTE `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `impl std::clone::Clone`\n     //~| NOTE required by `send`\n@@ -62,6 +65,7 @@ fn cycle1() -> impl Clone {\n fn cycle2() -> impl Clone {\n     send(cycle1().clone());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n+    //~| NOTE trait `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` not satisfied\n     //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `impl std::clone::Clone`\n     //~| NOTE required by `send`"}, {"sha": "cc7c2f4f796d93bd0b8711aa566cc8073d7964ec", "filename": "src/test/compile-fail/on-unimplemented/multiple-impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs?ref=c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "patch": "@@ -42,14 +42,17 @@ impl Index<Bar<usize>> for [i32] {\n fn main() {\n     Index::index(&[] as &[i32], 2u32);\n     //~^ ERROR E0277\n+    //~| NOTE not satisfied\n     //~| NOTE trait message\n     //~| NOTE required by\n     Index::index(&[] as &[i32], Foo(2u32));\n     //~^ ERROR E0277\n+    //~| NOTE not satisfied\n     //~| NOTE on impl for Foo\n     //~| NOTE required by\n     Index::index(&[] as &[i32], Bar(2u32));\n     //~^ ERROR E0277\n+    //~| NOTE not satisfied\n     //~| NOTE on impl for Bar\n     //~| NOTE required by\n }"}, {"sha": "c22e48bede4efdd61f87ee53f579125ffcb5b431", "filename": "src/test/compile-fail/on-unimplemented/on-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs?ref=c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "patch": "@@ -30,6 +30,7 @@ impl Index<usize> for [i32] {\n #[rustc_error]\n fn main() {\n     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32); //~ ERROR E0277\n+                                                     //~| NOTE not satisfied\n                                                      //~| NOTE a usize is required\n                                                      //~| NOTE required by\n }"}, {"sha": "9ea2809374cd83adf601215bc52c3d23c5f996fb", "filename": "src/test/compile-fail/on-unimplemented/on-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs?ref=c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "patch": "@@ -35,7 +35,9 @@ pub fn main() {\n     //~^ ERROR\n     //~^^ NOTE a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n     //~^^^ NOTE required by `collect`\n+    //~| NOTE trait `std::option::Option<std::vec::Vec<u8>>: MyFromIterator<&u8>` not satisfied\n     let x: String = foobar(); //~ ERROR\n     //~^ NOTE test error `std::string::String` with `u8` `_` `u32`\n     //~^^ NOTE required by `foobar`\n+    //~| NOTE trait `std::string::String: Foo<u8, _, u32>` not satisfied\n }"}, {"sha": "5c548b5d5bf20760ad1d3c69f78c1f6da03a12a3", "filename": "src/test/compile-fail/on-unimplemented/slice-index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs?ref=c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "patch": "@@ -18,7 +18,9 @@ use std::ops::Index;\n fn main() {\n     let x = &[1, 2, 3] as &[i32];\n     x[1i32]; //~ ERROR E0277\n+             //~| NOTE trait `[i32]: std::ops::Index<i32>` not satisfied\n              //~| NOTE slice indices are of type `usize`\n     x[..1i32]; //~ ERROR E0277\n+               //~| NOTE trait `[i32]: std::ops::Index<std::ops::RangeTo<i32>>` not satisfied\n                //~| NOTE slice indices are of type `usize`\n }"}, {"sha": "d15e3536d60ca0633cf5a91ed390e1da4e4cd376", "filename": "src/test/compile-fail/trait-suggest-where-clause.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8791f1a5976ed6bc346650e01705b4abcf5d5a6/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs?ref=c8791f1a5976ed6bc346650e01705b4abcf5d5a6", "patch": "@@ -16,11 +16,13 @@ fn check<T: Iterator, U: ?Sized>() {\n     // suggest a where-clause, if needed\n     mem::size_of::<U>();\n     //~^ ERROR `U: std::marker::Sized` is not satisfied\n+    //~| NOTE trait `U: std::marker::Sized` not satisfied\n     //~| HELP consider adding a `where U: std::marker::Sized` bound\n     //~| NOTE required by `std::mem::size_of`\n \n     mem::size_of::<Misc<U>>();\n     //~^ ERROR `U: std::marker::Sized` is not satisfied\n+    //~| NOTE trait `U: std::marker::Sized` not satisfied\n     //~| HELP consider adding a `where U: std::marker::Sized` bound\n     //~| NOTE required because it appears within the type `Misc<U>`\n     //~| NOTE required by `std::mem::size_of`\n@@ -29,29 +31,34 @@ fn check<T: Iterator, U: ?Sized>() {\n \n     <u64 as From<T>>::from;\n     //~^ ERROR `u64: std::convert::From<T>` is not satisfied\n+    //~| NOTE trait `u64: std::convert::From<T>` not satisfied\n     //~| HELP consider adding a `where u64: std::convert::From<T>` bound\n     //~| NOTE required by `std::convert::From::from`\n \n     <u64 as From<<T as Iterator>::Item>>::from;\n     //~^ ERROR `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n+    //~| NOTE trait `u64: std::convert::From<<T as std::iter::Iterator>::Item>` not satisfied\n     //~| HELP consider adding a `where u64:\n     //~| NOTE required by `std::convert::From::from`\n \n     // ... but not if there are inference variables\n \n     <Misc<_> as From<T>>::from;\n     //~^ ERROR `Misc<_>: std::convert::From<T>` is not satisfied\n+    //~| NOTE trait `Misc<_>: std::convert::From<T>` not satisfied\n     //~| NOTE required by `std::convert::From::from`\n \n     // ... and also not if the error is not related to the type\n \n     mem::size_of::<[T]>();\n     //~^ ERROR `[T]: std::marker::Sized` is not satisfied\n+    //~| NOTE `[T]: std::marker::Sized` not satisfied\n     //~| NOTE `[T]` does not have a constant size\n     //~| NOTE required by `std::mem::size_of`\n \n     mem::size_of::<[&U]>();\n     //~^ ERROR `[&U]: std::marker::Sized` is not satisfied\n+    //~| NOTE `[&U]: std::marker::Sized` not satisfied\n     //~| NOTE `[&U]` does not have a constant size\n     //~| NOTE required by `std::mem::size_of`\n }"}]}