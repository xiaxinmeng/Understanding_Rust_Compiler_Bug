{"sha": "2d1a551e144335e0d60a637d12f410cf65849876", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMWE1NTFlMTQ0MzM1ZTBkNjBhNjM3ZDEyZjQxMGNmNjU4NDk4NzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-08T17:19:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-08T17:19:22Z"}, "message": "Auto merge of #63380 - Centril:rollup-tzfhtnu, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #63261 (bump rand in libcore/liballoc test suites)\n - #63316 (Update rustfmt to 1.4.4)\n - #63332 (Add an overflow check in truncate implementation for Unix.)\n - #63342 (Don't use remap-path-prefix in dep-info files.)\n - #63366 (doc: Fix typo in float from bytes methods)\n - #63370 (Fix ICE #63364)\n - #63377 (Improved documentation for compile_error!())\n - #63379 (Add test for issue 53096)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "48a18f5e5415a6fc9736a5ff12c497b2ed2b51f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48a18f5e5415a6fc9736a5ff12c497b2ed2b51f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d1a551e144335e0d60a637d12f410cf65849876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1a551e144335e0d60a637d12f410cf65849876", "html_url": "https://github.com/rust-lang/rust/commit/2d1a551e144335e0d60a637d12f410cf65849876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d1a551e144335e0d60a637d12f410cf65849876/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2628f579f6246df385acf9203bf2ffb6aedf5ccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2628f579f6246df385acf9203bf2ffb6aedf5ccc", "html_url": "https://github.com/rust-lang/rust/commit/2628f579f6246df385acf9203bf2ffb6aedf5ccc"}, {"sha": "3de450b6865f5ba717b196054b231b16f67b2c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de450b6865f5ba717b196054b231b16f67b2c17", "html_url": "https://github.com/rust-lang/rust/commit/3de450b6865f5ba717b196054b231b16f67b2c17"}], "stats": {"total": 120, "additions": 84, "deletions": 36}, "files": [{"sha": "52cfa2cb1f80e53353357e604e71108bfb2f8d0d", "filename": "Cargo.lock", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -19,8 +19,8 @@ version = \"0.0.0\"\n dependencies = [\n  \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_xorshift 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_xorshift 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -514,7 +514,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"core\"\n version = \"0.0.0\"\n dependencies = [\n- \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1050,7 +1050,7 @@ dependencies = [\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.1.7\"\n+version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2246,7 +2246,7 @@ name = \"rand\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"getrandom 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2286,7 +2286,7 @@ name = \"rand_core\"\n version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"getrandom 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2343,6 +2343,14 @@ dependencies = [\n  \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rand_xorshift\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rayon\"\n version = \"1.1.0\"\n@@ -2501,7 +2509,7 @@ dependencies = [\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0\",\n  \"rustc_tools_util 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustfmt-nightly 1.4.3\",\n+ \"rustfmt-nightly 1.4.4\",\n  \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.81 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3284,7 +3292,7 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"1.4.3\"\n+version = \"1.4.4\"\n dependencies = [\n  \"annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -4436,7 +4444,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum fwdansi 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34dd4c507af68d37ffef962063dfa1944ce0dd4d5b82043dbab1dabe088610c3\"\n \"checksum generic-array 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef25c5683767570c2bbd7deba372926a55eaae9982d7726ee2a1050239d45b9d\"\n \"checksum getopts 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72327b15c228bfe31f1390f93dd5e9279587f0463836393c9df719ce62a3e450\"\n-\"checksum getrandom 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd8e190892c840661957ba9f32dacfb3eb405e657f9f9f60485605f0bb37d6f8\"\n+\"checksum getrandom 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34f33de6f0ae7c9cb5e574502a562e2b512799e32abb801cd1e79ad952b62b49\"\n \"checksum git2 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8cb400360e8a4d61b10e648285bbfa919bbf9519d0d5d5720354456f44349226\"\n \"checksum git2-curl 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2293de73491c3dc4174c5949ef53d2cc037b27613f88d72032e3f5237247a7dd\"\n \"checksum glob 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574\"\n@@ -4567,6 +4575,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n \"checksum rand_pcg 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"086bd09a33c7044e56bb44d5bdde5a60e7f119a9e95b0775f545de759a32fe05\"\n \"checksum rand_xorshift 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"effa3fcaa47e18db002bdde6060944b6d2f9cfd8db471c30e873448ad9187be3\"\n+\"checksum rand_xorshift 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77d416b86801d23dde1aa643023b775c3a462efc0ed96443add11546cdf1dca8\"\n \"checksum rayon 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a4b0186e22767d5b9738a05eab7c6ac90b15db17e5b5f9bd87976dd7d89a10a4\"\n \"checksum rayon-core 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ebbe0df8435ac0c397d467b6cad6d25543d06e8a019ef3f6af3c384597515bd2\"\n \"checksum rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\""}, {"sha": "d1119f7b7c0a7f6a83cccaa0aa7c8d0897d5abde", "filename": "src/liballoc/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Fliballoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Fliballoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2FCargo.toml?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -15,8 +15,8 @@ core = { path = \"../libcore\" }\n compiler_builtins = { version = \"0.1.10\", features = ['rustc-dep-of-std'] }\n \n [dev-dependencies]\n-rand = \"0.6\"\n-rand_xorshift = \"0.1\"\n+rand = \"0.7\"\n+rand_xorshift = \"0.2\"\n \n [[test]]\n name = \"collectionstests\""}, {"sha": "ef91d801dc72cb6e30c3915486f151bd9113cfe2", "filename": "src/liballoc/benches/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Fliballoc%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Fliballoc%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fslice.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -186,12 +186,12 @@ const SEED: [u8; 16] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n \n fn gen_random(len: usize) -> Vec<u64> {\n     let mut rng = XorShiftRng::from_seed(SEED);\n-    rng.sample_iter(&Standard).take(len).collect()\n+    (&mut rng).sample_iter(&Standard).take(len).collect()\n }\n \n fn gen_random_bytes(len: usize) -> Vec<u8> {\n     let mut rng = XorShiftRng::from_seed(SEED);\n-    rng.sample_iter(&Standard).take(len).collect()\n+    (&mut rng).sample_iter(&Standard).take(len).collect()\n }\n \n fn gen_mostly_ascending(len: usize) -> Vec<u64> {\n@@ -221,14 +221,14 @@ fn gen_strings(len: usize) -> Vec<String> {\n     let mut v = vec![];\n     for _ in 0..len {\n         let n = rng.gen::<usize>() % 20 + 1;\n-        v.push(rng.sample_iter(&Alphanumeric).take(n).collect());\n+        v.push((&mut rng).sample_iter(&Alphanumeric).take(n).collect());\n     }\n     v\n }\n \n fn gen_big_random(len: usize) -> Vec<[u64; 16]> {\n     let mut rng = XorShiftRng::from_seed(SEED);\n-    rng.sample_iter(&Standard).map(|x| [x; 16]).take(len).collect()\n+    (&mut rng).sample_iter(&Standard).map(|x| [x; 16]).take(len).collect()\n }\n \n macro_rules! sort {"}, {"sha": "ac07ffb14febdd8ba0f74a7d1a319b1f0ea5f1f4", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -21,7 +21,7 @@ name = \"corebenches\"\n path = \"../libcore/benches/lib.rs\"\n \n [dev-dependencies]\n-rand = \"0.6\"\n+rand = \"0.7\"\n \n [features]\n # Make panics and failed asserts immediately abort without formatting any message"}, {"sha": "09d2331b60fed4eed36312b98f3c3028b46d77fa", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -680,7 +680,7 @@ pub(crate) mod builtin {\n     ///\n     /// This macro should be used when a crate uses a conditional compilation strategy to provide\n     /// better error messages for erroneous conditions. It's the compiler-level form of [`panic!`],\n-    /// which emits an error at *runtime*, rather than during compilation.\n+    /// but emits an error during *compilation* rather than at *runtime*.\n     ///\n     /// # Examples\n     ///"}, {"sha": "8ff78166a9f2d83b526382ca6bbf64df56c6dbef", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -536,7 +536,7 @@ impl f32 {\n         Self::from_bits(u32::from_be_bytes(bytes))\n     }\n \n-    /// Create a floating point value from its representation as a byte array in big endian.\n+    /// Create a floating point value from its representation as a byte array in little endian.\n     ///\n     /// # Examples\n     ///\n@@ -551,7 +551,7 @@ impl f32 {\n         Self::from_bits(u32::from_le_bytes(bytes))\n     }\n \n-    /// Create a floating point value from its representation as a byte array in big endian.\n+    /// Create a floating point value from its representation as a byte array in native endian.\n     ///\n     /// As the target platform's native endianness is used, portable code\n     /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as"}, {"sha": "d45c04f45afc2b4fe3b4a697dae6814304f00b4f", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -549,7 +549,7 @@ impl f64 {\n         Self::from_bits(u64::from_be_bytes(bytes))\n     }\n \n-    /// Create a floating point value from its representation as a byte array in big endian.\n+    /// Create a floating point value from its representation as a byte array in little endian.\n     ///\n     /// # Examples\n     ///\n@@ -564,7 +564,7 @@ impl f64 {\n         Self::from_bits(u64::from_le_bytes(bytes))\n     }\n \n-    /// Create a floating point value from its representation as a byte array in big endian.\n+    /// Create a floating point value from its representation as a byte array in native endian.\n     ///\n     /// As the target platform's native endianness is used, portable code\n     /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as"}, {"sha": "d56787b2819a7387a7191426733bdbb8ec19ac03", "filename": "src/libcore/tests/num/flt2dec/random.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -8,8 +8,8 @@ use core::num::flt2dec::strategy::grisu::format_exact_opt;\n use core::num::flt2dec::strategy::grisu::format_shortest_opt;\n use core::num::flt2dec::{decode, DecodableFloat, FullDecoded, Decoded};\n \n-use rand::FromEntropy;\n-use rand::rngs::SmallRng;\n+use rand::SeedableRng;\n+use rand::rngs::StdRng;\n use rand::distributions::{Distribution, Uniform};\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n@@ -65,7 +65,7 @@ pub fn f32_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n     if cfg!(target_os = \"emscripten\") {\n         return // using rng pulls in i128 support, which doesn't work\n     }\n-    let mut rng = SmallRng::from_entropy();\n+    let mut rng = StdRng::from_entropy();\n     let f32_range = Uniform::new(0x0000_0001u32, 0x7f80_0000);\n     iterate(\"f32_random_equivalence_test\", k, n, f, g, |_| {\n         let x = f32::from_bits(f32_range.sample(&mut rng));\n@@ -79,7 +79,7 @@ pub fn f64_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n     if cfg!(target_os = \"emscripten\") {\n         return // using rng pulls in i128 support, which doesn't work\n     }\n-    let mut rng = SmallRng::from_entropy();\n+    let mut rng = StdRng::from_entropy();\n     let f64_range = Uniform::new(0x0000_0000_0000_0001u64, 0x7ff0_0000_0000_0000);\n     iterate(\"f64_random_equivalence_test\", k, n, f, g, |_| {\n         let x = f64::from_bits(f64_range.sample(&mut rng));"}, {"sha": "04ad02766616dff650751634fc3e1d663e5cf269", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -1157,7 +1157,7 @@ fn test_rotate_right() {\n fn sort_unstable() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use core::slice::heapsort;\n-    use rand::{FromEntropy, Rng, rngs::SmallRng, seq::SliceRandom};\n+    use rand::{SeedableRng, Rng, rngs::StdRng, seq::SliceRandom};\n \n     #[cfg(not(miri))] // Miri is too slow\n     let large_range = 500..510;\n@@ -1171,7 +1171,7 @@ fn sort_unstable() {\n \n     let mut v = [0; 600];\n     let mut tmp = [0; 600];\n-    let mut rng = SmallRng::from_entropy();\n+    let mut rng = StdRng::from_entropy();\n \n     for len in (2..25).chain(large_range) {\n         let v = &mut v[0..len];\n@@ -1237,11 +1237,11 @@ fn sort_unstable() {\n #[cfg(not(miri))] // Miri is too slow\n fn partition_at_index() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n-    use rand::rngs::SmallRng;\n+    use rand::rngs::StdRng;\n     use rand::seq::SliceRandom;\n-    use rand::{FromEntropy, Rng};\n+    use rand::{SeedableRng, Rng};\n \n-    let mut rng = SmallRng::from_entropy();\n+    let mut rng = StdRng::from_entropy();\n \n     for len in (2..21).chain(500..501) {\n         let mut orig = vec![0; len];"}, {"sha": "c9d68943b0880300f56744d007894412e27b2080", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -661,7 +661,7 @@ fn write_out_deps(compiler: &Compiler, outputs: &OutputFilenames, out_filenames:\n             .iter()\n             .filter(|fmap| fmap.is_real_file())\n             .filter(|fmap| !fmap.is_imported())\n-            .map(|fmap| escape_dep_filename(&fmap.name))\n+            .map(|fmap| escape_dep_filename(&fmap.unmapped_path.as_ref().unwrap_or(&fmap.name)))\n             .collect();\n \n         if sess.binary_dep_depinfo() {"}, {"sha": "e86230437f2771cc1dc1f5fca45d78c8da95de23", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -73,7 +73,9 @@ fn lint_overflowing_range_endpoint<'a, 'tcx>(\n     // We only want to handle exclusive (`..`) ranges,\n     // which are represented as `ExprKind::Struct`.\n     if let ExprKind::Struct(_, eps, _) = &parent_expr.node {\n-        debug_assert_eq!(eps.len(), 2);\n+        if eps.len() != 2 {\n+            return false;\n+        }\n         // We can suggest using an inclusive range\n         // (`..=`) instead only if it is the `end` that is\n         // overflowing and only by 1."}, {"sha": "5f76875bd66c4c2fd34692ecbb2bc071ec024c96", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -468,6 +468,8 @@ impl File {\n     /// # Errors\n     ///\n     /// This function will return an error if the file is not opened for writing.\n+    /// Also, std::io::ErrorKind::InvalidInput will be returned if the desired\n+    /// length would cause an overflow due to the implementation specifics.\n     ///\n     /// # Examples\n     ///"}, {"sha": "3b1eb86b84fe19ecfe5e24bcd08837647757abcf", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -557,9 +557,15 @@ impl File {\n         return crate::sys::android::ftruncate64(self.0.raw(), size);\n \n         #[cfg(not(target_os = \"android\"))]\n-        return cvt_r(|| unsafe {\n-            ftruncate64(self.0.raw(), size as off64_t)\n-        }).map(|_| ());\n+        {\n+            use crate::convert::TryInto;\n+            let size: off64_t = size\n+                .try_into()\n+                .map_err(|e| io::Error::new(io::ErrorKind::InvalidInput, e))?;\n+            cvt_r(|| unsafe {\n+                ftruncate64(self.0.raw(), size)\n+            }).map(|_| ())\n+        }\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {"}, {"sha": "5223267a69a498a2ae4f27e113ffc72ed03e7b7a", "filename": "src/test/ui/issues/issue-63364.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Ftest%2Fui%2Fissues%2Fissue-63364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Ftest%2Fui%2Fissues%2Fissue-63364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63364.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -0,0 +1,10 @@\n+fn part(_: u16) -> u32 {\n+    1\n+}\n+\n+fn main() {\n+    for n in 100_000.. {\n+    //~^ ERROR: literal out of range for `u16`\n+        let _ = part(n);\n+    }\n+}"}, {"sha": "60ff318f35a1c1abb09a4da9c5cbe75405a4e4af", "filename": "src/test/ui/issues/issue-63364.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Ftest%2Fui%2Fissues%2Fissue-63364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Ftest%2Fui%2Fissues%2Fissue-63364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63364.stderr?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -0,0 +1,10 @@\n+error: literal out of range for `u16`\n+  --> $DIR/issue-63364.rs:6:14\n+   |\n+LL |     for n in 100_000.. {\n+   |              ^^^^^^^\n+   |\n+   = note: `#[deny(overflowing_literals)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "564c5c3d33f850d18658d2c615c8e87412a60c8e", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+#![feature(const_fn)]\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo = impl Fn() -> usize;\n+const fn bar() -> Foo { || 0usize }\n+const BAZR: Foo = bar();\n+\n+fn main() {}"}, {"sha": "0462008de87d2757e8ef1dc26f2c54dd789a59a8", "filename": "src/tools/rustfmt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -1 +1 @@\n-Subproject commit 3adfb08afe3cb6a8c055e581dea87808464d1381\n+Subproject commit 0462008de87d2757e8ef1dc26f2c54dd789a59a8"}]}