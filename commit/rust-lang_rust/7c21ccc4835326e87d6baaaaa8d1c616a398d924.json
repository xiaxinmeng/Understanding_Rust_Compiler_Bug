{"sha": "7c21ccc4835326e87d6baaaaa8d1c616a398d924", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMjFjY2M0ODM1MzI2ZTg3ZDZiYWFhYWE4ZDFjNjE2YTM5OGQ5MjQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-01T09:36:56Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-01T19:07:19Z"}, "message": "rustc: add a lint for `for`, suggesting `foreach` or `do`.\n\nThis is just to aid the transistion to the new `for` loop, by\npointing at each location where the old one occurs.", "tree": {"sha": "bd35c175213f9a055fc7a259d99e7a0e080b62be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd35c175213f9a055fc7a259d99e7a0e080b62be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c21ccc4835326e87d6baaaaa8d1c616a398d924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c21ccc4835326e87d6baaaaa8d1c616a398d924", "html_url": "https://github.com/rust-lang/rust/commit/7c21ccc4835326e87d6baaaaa8d1c616a398d924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c21ccc4835326e87d6baaaaa8d1c616a398d924/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78cde5b9fb9db91f954f7fe4afdd230de6754e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/78cde5b9fb9db91f954f7fe4afdd230de6754e54", "html_url": "https://github.com/rust-lang/rust/commit/78cde5b9fb9db91f954f7fe4afdd230de6754e54"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "f972406ae11d8b9eddbbaa6f179fff19d454b7a5", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7c21ccc4835326e87d6baaaaa8d1c616a398d924/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c21ccc4835326e87d6baaaaa8d1c616a398d924/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=7c21ccc4835326e87d6baaaaa8d1c616a398d924", "patch": "@@ -74,6 +74,7 @@ pub enum lint {\n     unused_imports,\n     unnecessary_qualification,\n     while_true,\n+    deprecated_for_loop,\n     path_statement,\n     unrecognized_lint,\n     non_camel_case_types,\n@@ -165,6 +166,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: warn\n      }),\n \n+    (\"deprecated_for_loop\",\n+     LintSpec {\n+         lint: deprecated_for_loop,\n+         desc: \"recommend using `foreach` or `do` instead of `for`\",\n+         default: allow\n+     }),\n+\n     (\"path_statement\",\n      LintSpec {\n         lint: path_statement,\n@@ -561,6 +569,24 @@ fn lint_while_true() -> visit::vt<@mut Context> {\n     })\n }\n \n+fn lint_deprecated_for_loop() -> visit::vt<@mut Context> {\n+    visit::mk_vt(@visit::Visitor {\n+        visit_expr: |e, (cx, vt): (@mut Context, visit::vt<@mut Context>)| {\n+            match e.node {\n+                ast::expr_call(_, _, ast::ForSugar) |\n+                ast::expr_method_call(_, _, _, _, _, ast::ForSugar) => {\n+                    cx.span_lint(deprecated_for_loop, e.span,\n+                                \"`for` is deprecated; use `foreach <pat> in \\\n+                                 <iterator>` or `do`\")\n+                }\n+                _ => {}\n+            }\n+            visit::visit_expr(e, (cx, vt));\n+        },\n+        .. *visit::default_visitor()\n+    })\n+}\n+\n fn lint_type_limits() -> visit::vt<@mut Context> {\n     fn is_valid<T:cmp::Ord>(binop: ast::binop, v: T,\n             min: T, max: T) -> bool {\n@@ -1096,6 +1122,7 @@ pub fn check_crate(tcx: ty::ctxt, crate: @ast::Crate) {\n \n     // Register each of the lint passes with the context\n     cx.add_lint(lint_while_true());\n+    cx.add_lint(lint_deprecated_for_loop());\n     cx.add_lint(lint_path_statement());\n     cx.add_lint(lint_heap());\n     cx.add_lint(lint_type_limits());"}, {"sha": "5570562cf8b0040be00377f5277bf7294a652fe2", "filename": "src/test/compile-fail/lint-deprecated-for-loop.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7c21ccc4835326e87d6baaaaa8d1c616a398d924/src%2Ftest%2Fcompile-fail%2Flint-deprecated-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c21ccc4835326e87d6baaaaa8d1c616a398d924/src%2Ftest%2Fcompile-fail%2Flint-deprecated-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-deprecated-for-loop.rs?ref=7c21ccc4835326e87d6baaaaa8d1c616a398d924", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#[forbid(deprecated_for_loop)];\n+\n+fn f(_: &fn() -> bool) -> bool {\n+    true\n+}\n+\n+fn main() {\n+    for f {} //~ ERROR `for` is deprecated\n+}"}]}