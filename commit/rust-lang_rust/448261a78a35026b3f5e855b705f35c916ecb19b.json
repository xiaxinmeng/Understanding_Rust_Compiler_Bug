{"sha": "448261a78a35026b3f5e855b705f35c916ecb19b", "node_id": "C_kwDOAAsO6NoAKDQ0ODI2MWE3OGEzNTAyNmIzZjVlODU1YjcwNWYzNWM5MTZlY2IxOWI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-04T13:44:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-05T12:25:41Z"}, "message": "privacy: Check effective visibility invariants", "tree": {"sha": "5439f06c1887bbf32d4dc778a0ceafb9714a5874", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5439f06c1887bbf32d4dc778a0ceafb9714a5874"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/448261a78a35026b3f5e855b705f35c916ecb19b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/448261a78a35026b3f5e855b705f35c916ecb19b", "html_url": "https://github.com/rust-lang/rust/commit/448261a78a35026b3f5e855b705f35c916ecb19b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/448261a78a35026b3f5e855b705f35c916ecb19b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb401bd04d6239932c37a8f741fefb278f009a1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb401bd04d6239932c37a8f741fefb278f009a1b", "html_url": "https://github.com/rust-lang/rust/commit/bb401bd04d6239932c37a8f741fefb278f009a1b"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "11fbefefcc9eff3ac665b8b9dce1fbeb051bf172", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/448261a78a35026b3f5e855b705f35c916ecb19b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448261a78a35026b3f5e855b705f35c916ecb19b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=448261a78a35026b3f5e855b705f35c916ecb19b", "patch": "@@ -1,9 +1,10 @@\n //! A pass that checks to make sure private fields and methods aren't used\n //! outside their scopes. This pass will also generate a set of exported items\n //! which are available for use externally when compiled as a library.\n-use crate::ty::{DefIdTree, Visibility};\n+use crate::ty::{DefIdTree, TyCtxt, Visibility};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir::def::DefKind;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_span::def_id::LocalDefId;\n@@ -133,6 +134,54 @@ impl EffectiveVisibilities {\n         }\n         self.map.insert(id, effective_vis);\n     }\n+\n+    pub fn check_invariants(&self, tcx: TyCtxt<'_>, early: bool) {\n+        if !cfg!(debug_assertions) {\n+            return;\n+        }\n+        for (&def_id, ev) in &self.map {\n+            // More direct visibility levels can never go farther than less direct ones,\n+            // neither of effective visibilities can go farther than nominal visibility,\n+            // and all effective visibilities are larger or equal than private visibility.\n+            let private_vis = Visibility::Restricted(tcx.parent_module_from_def_id(def_id));\n+            let span = tcx.def_span(def_id.to_def_id());\n+            if !ev.direct.is_at_least(private_vis, tcx) {\n+                span_bug!(span, \"private {:?} > direct {:?}\", private_vis, ev.direct);\n+            }\n+            if !ev.reexported.is_at_least(ev.direct, tcx) {\n+                span_bug!(span, \"direct {:?} > reexported {:?}\", ev.direct, ev.reexported);\n+            }\n+            if !ev.reachable.is_at_least(ev.reexported, tcx) {\n+                span_bug!(span, \"reexported {:?} > reachable {:?}\", ev.reexported, ev.reachable);\n+            }\n+            if !ev.reachable_through_impl_trait.is_at_least(ev.reachable, tcx) {\n+                span_bug!(\n+                    span,\n+                    \"reachable {:?} > reachable_through_impl_trait {:?}\",\n+                    ev.reachable,\n+                    ev.reachable_through_impl_trait\n+                );\n+            }\n+            let nominal_vis = tcx.visibility(def_id);\n+            let def_kind = tcx.opt_def_kind(def_id);\n+            // FIXME: `rustc_privacy` is not yet updated for the new logic and can set\n+            // effective visibilities that are larger than the nominal one.\n+            if !nominal_vis.is_at_least(ev.reachable_through_impl_trait, tcx) && early {\n+                span_bug!(\n+                    span,\n+                    \"{:?}: reachable_through_impl_trait {:?} > nominal {:?}\",\n+                    def_id,\n+                    ev.reachable_through_impl_trait,\n+                    nominal_vis\n+                );\n+            }\n+            // Fully private items are never put into the table, this is important for performance.\n+            // FIXME: Fully private `mod` items are currently put into the table.\n+            if ev.reachable_through_impl_trait == private_vis && def_kind != Some(DefKind::Mod) {\n+                span_bug!(span, \"fully private item in the table {:?}: {:?}\", def_id, ev.direct);\n+            }\n+        }\n+    }\n }\n \n impl<Id: Eq + Hash> EffectiveVisibilities<Id> {"}, {"sha": "e17f85c1aae0f14920eb49f14b32ecaa3bbfb281", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/448261a78a35026b3f5e855b705f35c916ecb19b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448261a78a35026b3f5e855b705f35c916ecb19b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=448261a78a35026b3f5e855b705f35c916ecb19b", "patch": "@@ -2139,6 +2139,7 @@ fn effective_visibilities(tcx: TyCtxt<'_>, (): ()) -> &EffectiveVisibilities {\n         changed: false,\n     };\n \n+    visitor.effective_visibilities.check_invariants(tcx, true);\n     loop {\n         tcx.hir().walk_toplevel_module(&mut visitor);\n         if visitor.changed {\n@@ -2147,6 +2148,7 @@ fn effective_visibilities(tcx: TyCtxt<'_>, (): ()) -> &EffectiveVisibilities {\n             break;\n         }\n     }\n+    visitor.effective_visibilities.check_invariants(tcx, false);\n \n     let mut check_visitor =\n         TestReachabilityVisitor { tcx, effective_visibilities: &visitor.effective_visibilities };"}]}