{"sha": "38e7e4bd9c1e895be56077f4edd44263b6deea48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZTdlNGJkOWMxZTg5NWJlNTYwNzdmNGVkZDQ0MjYzYjZkZWVhNDg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-09-10T22:31:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-09-11T01:33:54Z"}, "message": "Register snapshots", "tree": {"sha": "380a5960169cc406fe92f46a746ec772b3317e3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380a5960169cc406fe92f46a746ec772b3317e3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38e7e4bd9c1e895be56077f4edd44263b6deea48", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38e7e4bd9c1e895be56077f4edd44263b6deea48", "html_url": "https://github.com/rust-lang/rust/commit/38e7e4bd9c1e895be56077f4edd44263b6deea48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38e7e4bd9c1e895be56077f4edd44263b6deea48/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6d27c39f48895577eff1b9b42ab0e1d8e2a4a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6d27c39f48895577eff1b9b42ab0e1d8e2a4a8", "html_url": "https://github.com/rust-lang/rust/commit/9f6d27c39f48895577eff1b9b42ab0e1d8e2a4a8"}], "stats": {"total": 74, "additions": 10, "deletions": 64}, "files": [{"sha": "886a84bd819a9ec60dd958ec2746b4d5513d7399", "filename": "src/etc/get-snapshot.py", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38e7e4bd9c1e895be56077f4edd44263b6deea48/src%2Fetc%2Fget-snapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/38e7e4bd9c1e895be56077f4edd44263b6deea48/src%2Fetc%2Fget-snapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-snapshot.py?ref=38e7e4bd9c1e895be56077f4edd44263b6deea48", "patch": "@@ -52,9 +52,7 @@ def unpack_snapshot(triple, dl_path):\n if len(sys.argv) == 3:\n   dl_path = sys.argv[2]\n else:\n-  # There are no 64-bit Windows snapshots yet, so we'll use 32-bit ones instead, for now\n-  snap_triple = triple if triple != \"x86_64-w64-mingw32\" else \"i686-w64-mingw32\"\n-  snap = determine_curr_snapshot(snap_triple)\n+  snap = determine_curr_snapshot(triple)\n   dl = os.path.join(download_dir_base, snap)\n   url = download_url_base + \"/\" + snap\n   print(\"determined most recent snapshot: \" + snap)"}, {"sha": "8f78b6d110849fc4c3df56f42a320e3c1ef08ac3", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/38e7e4bd9c1e895be56077f4edd44263b6deea48/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e7e4bd9c1e895be56077f4edd44263b6deea48/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=38e7e4bd9c1e895be56077f4edd44263b6deea48", "patch": "@@ -113,7 +113,6 @@ impl<'a> Arguments<'a> {\n     /// Arguments structure. The compiler inserts an `unsafe` block to call this,\n     /// which is valid because the compiler performs all necessary validation to\n     /// ensure that the resulting call to format/write would be safe.\n-    #[cfg(not(stage0))]\n     #[doc(hidden)] #[inline]\n     pub unsafe fn new<'a>(pieces: &'static [&'static str],\n                           args: &'a [Argument<'a>]) -> Arguments<'a> {\n@@ -127,7 +126,6 @@ impl<'a> Arguments<'a> {\n     /// This function is used to specify nonstandard formatting parameters.\n     /// The `pieces` array must be at least as long as `fmt` to construct\n     /// a valid Arguments structure.\n-    #[cfg(not(stage0))]\n     #[doc(hidden)] #[inline]\n     pub unsafe fn with_placeholders<'a>(pieces: &'static [&'static str],\n                                         fmt: &'static [rt::Argument<'static>],\n@@ -138,13 +136,6 @@ impl<'a> Arguments<'a> {\n             args: args\n         }\n     }\n-\n-    #[cfg(stage0)]\n-    #[doc(hidden)] #[inline]\n-    pub unsafe fn new<'a>(fmt: &'static [rt::Piece<'static>],\n-                          args: &'a [Argument<'a>]) -> Arguments<'a> {\n-        Arguments{ fmt: mem::transmute(fmt), args: args }\n-    }\n }\n \n /// This structure represents a safely precompiled version of a format string\n@@ -156,7 +147,6 @@ impl<'a> Arguments<'a> {\n /// and pass it to a function or closure, passed as the first argument. The\n /// macro validates the format string at compile-time so usage of the `write`\n /// and `format` functions can be safely performed.\n-#[cfg(not(stage0))]\n pub struct Arguments<'a> {\n     // Format string pieces to print.\n     pieces: &'a [&'a str],\n@@ -169,12 +159,6 @@ pub struct Arguments<'a> {\n     args: &'a [Argument<'a>],\n }\n \n-#[cfg(stage0)] #[doc(hidden)]\n-pub struct Arguments<'a> {\n-    fmt: &'a [rt::Piece<'a>],\n-    args: &'a [Argument<'a>],\n-}\n-\n impl<'a> Show for Arguments<'a> {\n     fn fmt(&self, fmt: &mut Formatter) -> Result {\n         write(fmt.buf, self)\n@@ -296,7 +280,6 @@ uniform_fn_call_workaround! {\n     secret_upper_exp, UpperExp;\n }\n \n-#[cfg(not(stage0))]\n static DEFAULT_ARGUMENT: rt::Argument<'static> = rt::Argument {\n     position: rt::ArgumentNext,\n     format: rt::FormatSpec {\n@@ -316,7 +299,6 @@ static DEFAULT_ARGUMENT: rt::Argument<'static> = rt::Argument {\n ///\n ///   * output - the buffer to write output to\n ///   * args - the precompiled arguments generated by `format_args!`\n-#[cfg(not(stage0))]\n pub fn write(output: &mut FormatWriter, args: &Arguments) -> Result {\n     let mut formatter = Formatter {\n         flags: 0,\n@@ -360,30 +342,11 @@ pub fn write(output: &mut FormatWriter, args: &Arguments) -> Result {\n     Ok(())\n }\n \n-#[cfg(stage0)] #[doc(hidden)]\n-pub fn write(output: &mut FormatWriter, args: &Arguments) -> Result {\n-    let mut formatter = Formatter {\n-        flags: 0,\n-        width: None,\n-        precision: None,\n-        buf: output,\n-        align: rt::AlignUnknown,\n-        fill: ' ',\n-        args: args.args,\n-        curarg: args.args.iter(),\n-    };\n-    for piece in args.fmt.iter() {\n-        try!(formatter.run(piece));\n-    }\n-    Ok(())\n-}\n-\n impl<'a> Formatter<'a> {\n \n     // First up is the collection of functions used to execute a format string\n     // at runtime. This consumes all of the compile-time statics generated by\n     // the format! syntax extension.\n-    #[cfg(not(stage0))]\n     fn run(&mut self, arg: &rt::Argument) -> Result {\n         // Fill in the format parameters into the formatter\n         self.fill = arg.format.fill;\n@@ -402,30 +365,6 @@ impl<'a> Formatter<'a> {\n         (value.formatter)(value.value, self)\n     }\n \n-    #[cfg(stage0)] #[doc(hidden)]\n-    fn run(&mut self, piece: &rt::Piece) -> Result {\n-        match *piece {\n-            rt::String(s) => self.buf.write(s.as_bytes()),\n-            rt::Argument(ref arg) => {\n-                // Fill in the format parameters into the formatter\n-                self.fill = arg.format.fill;\n-                self.align = arg.format.align;\n-                self.flags = arg.format.flags;\n-                self.width = self.getcount(&arg.format.width);\n-                self.precision = self.getcount(&arg.format.precision);\n-\n-                // Extract the correct argument\n-                let value = match arg.position {\n-                    rt::ArgumentNext => { *self.curarg.next().unwrap() }\n-                    rt::ArgumentIs(i) => self.args[i],\n-                };\n-\n-                // Then actually do some printing\n-                (value.formatter)(value.value, self)\n-            }\n-        }\n-    }\n-\n     fn getcount(&mut self, cnt: &rt::Count) -> Option<uint> {\n         match *cnt {\n             rt::CountIs(n) => { Some(n) }"}, {"sha": "300a9f9eb4906e894eeea19703532cea1e945715", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38e7e4bd9c1e895be56077f4edd44263b6deea48/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/38e7e4bd9c1e895be56077f4edd44263b6deea48/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=38e7e4bd9c1e895be56077f4edd44263b6deea48", "patch": "@@ -1,3 +1,12 @@\n+S 2014-09-10 6faa4f3\n+  winnt-x86_64 939eb546469cb936441cff3b6f2478f562f77c46\n+  winnt-i386 cfe4f8b519bb9d62588f9310a8f94bc919d5423b\n+  linux-x86_64 72c92895fa9a1dba7880073f2b2b5d0e3e1a2ab6\n+  linux-i386 6f5464c9ab191d93bfea0894ca7c6f90c3506f2b\n+  freebsd-x86_64 648f35800ba98f1121d418b6d0c13c63b7a8951b\n+  macos-i386 545fc45a0071142714639c6be377e6d308c3a4e1\n+  macos-x86_64 8b44fbbbd1ba519d2e83d0d5ce1f6053d3cab8c6\n+\n S 2014-09-05 67b97ab\n   freebsd-x86_64 5ed208394cb2a378ddfaa005b6298d2f142ad47f\n   linux-i386 d90866947bfa09738cf8540d17a8eedc70988fcc"}]}