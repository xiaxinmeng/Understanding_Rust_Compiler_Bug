{"sha": "88c5b1282a5770097c6c768b24bedfc3a6944e08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YzViMTI4MmE1NzcwMDk3YzZjNzY4YjI0YmVkZmMzYTY5NDRlMDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-07T19:09:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-07T19:25:48Z"}, "message": "Rename GenericParam -> TypeParam\n\nWe don't have LifetimeParam yet, but they are planned!", "tree": {"sha": "913c24e889f3db8044b4b9f11bc3969e7eb02e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/913c24e889f3db8044b4b9f11bc3969e7eb02e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c5b1282a5770097c6c768b24bedfc3a6944e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c5b1282a5770097c6c768b24bedfc3a6944e08", "html_url": "https://github.com/rust-lang/rust/commit/88c5b1282a5770097c6c768b24bedfc3a6944e08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c5b1282a5770097c6c768b24bedfc3a6944e08/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4f8b8147426b0096d4b5126e487caaa13d13c27", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f8b8147426b0096d4b5126e487caaa13d13c27", "html_url": "https://github.com/rust-lang/rust/commit/f4f8b8147426b0096d4b5126e487caaa13d13c27"}], "stats": {"total": 156, "additions": 77, "deletions": 79}, "files": [{"sha": "4578a0ba8e91aa80b16facfbd5b98c377f4efc84", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -15,9 +15,9 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::HasResolver,\n     type_ref::{Mutability, TypeRef},\n-    AdtId, AstItemDef, ConstId, ContainerId, DefWithBodyId, EnumId, FunctionId, GenericParamId,\n-    HasModule, ImplId, LocalEnumVariantId, LocalImportId, LocalModuleId, LocalStructFieldId,\n-    Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId, UnionId,\n+    AdtId, AstItemDef, ConstId, ContainerId, DefWithBodyId, EnumId, FunctionId, HasModule, ImplId,\n+    LocalEnumVariantId, LocalImportId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId,\n+    StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -856,14 +856,14 @@ impl Local {\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct GenericParam {\n-    pub(crate) id: GenericParamId,\n+pub struct TypeParam {\n+    pub(crate) id: TypeParamId,\n }\n \n-impl GenericParam {\n+impl TypeParam {\n     pub fn name(self, db: &impl HirDatabase) -> Name {\n         let params = db.generic_params(self.id.parent);\n-        params.params[self.id.local_id].name.clone()\n+        params.types[self.id.local_id].name.clone()\n     }\n \n     pub fn module(self, db: &impl HirDatabase) -> Module {\n@@ -1111,7 +1111,7 @@ impl HirDisplay for Type {\n pub enum ScopeDef {\n     ModuleDef(ModuleDef),\n     MacroDef(MacroDef),\n-    GenericParam(GenericParam),\n+    GenericParam(TypeParam),\n     ImplSelfType(ImplBlock),\n     AdtSelfType(Adt),\n     Local(Local),"}, {"sha": "b09582f93c8b5ef212071f66b589e0bc65bf939f", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -9,8 +9,8 @@ use hir_def::{\n use ra_syntax::ast;\n \n use crate::{\n-    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, GenericParam, ImplBlock,\n-    Import, MacroDef, Module, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplBlock, Import, MacroDef,\n+    Module, Static, Struct, StructField, Trait, TypeAlias, TypeParam, Union,\n };\n \n pub use hir_expand::InFile;\n@@ -130,7 +130,7 @@ impl HasSource for Import {\n     }\n }\n \n-impl HasSource for GenericParam {\n+impl HasSource for TypeParam {\n     type Ast = Either<ast::TraitDef, ast::TypeParam>;\n     fn source(self, db: &impl DefDatabase) -> InFile<Self::Ast> {\n         let child_source = self.id.parent.child_source(db);"}, {"sha": "68e59fc1ec27ae606a828a969b79451165a22cfc", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -11,8 +11,8 @@ use ra_syntax::{\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, GenericParam, ImplBlock, InFile,\n-    Local, MacroDef, Module, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, ImplBlock, InFile, Local,\n+    MacroDef, Module, Static, Struct, StructField, Trait, TypeAlias, TypeParam, Union,\n };\n \n pub trait FromSource: Sized {\n@@ -177,7 +177,7 @@ impl Local {\n     }\n }\n \n-impl GenericParam {\n+impl TypeParam {\n     pub fn from_source(db: &impl HirDatabase, src: InFile<ast::TypeParam>) -> Option<Self> {\n         let file_id = src.file_id;\n         let parent: GenericDefId = src.value.syntax().ancestors().find_map(|it| {\n@@ -190,7 +190,7 @@ impl GenericParam {\n             Some(res)\n         })?;\n         let &id = parent.child_by_source(db)[keys::TYPE_PARAM].get(&src)?;\n-        Some(GenericParam { id })\n+        Some(TypeParam { id })\n     }\n }\n "}, {"sha": "9eb34b5dcdd9543cc539f2dc4e4c61547f4f8173", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -42,9 +42,9 @@ pub mod from_source;\n pub use crate::{\n     code_model::{\n         src::HasSource, Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency,\n-        DefWithBody, Docs, Enum, EnumVariant, FieldSource, Function, GenericDef, GenericParam,\n-        HasAttrs, ImplBlock, Import, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n-        StructField, Trait, Type, TypeAlias, Union, VariantDef,\n+        DefWithBody, Docs, Enum, EnumVariant, FieldSource, Function, GenericDef, HasAttrs,\n+        ImplBlock, Import, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n+        StructField, Trait, Type, TypeAlias, TypeParam, Union, VariantDef,\n     },\n     from_source::FromSource,\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},"}, {"sha": "b80aaeb9011fd572c14b49d86d629a107b6c67cc", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -36,8 +36,8 @@ use crate::{\n         method_resolution::{self, implements_trait},\n         InEnvironment, TraitEnvironment, Ty,\n     },\n-    Adt, AssocItem, Const, DefWithBody, Enum, EnumVariant, FromSource, Function, GenericParam,\n-    ImplBlock, Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Type, TypeAlias,\n+    Adt, AssocItem, Const, DefWithBody, Enum, EnumVariant, FromSource, Function, ImplBlock, Local,\n+    MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam,\n };\n \n fn try_get_resolver_for_node(db: &impl HirDatabase, node: InFile<&SyntaxNode>) -> Option<Resolver> {\n@@ -112,7 +112,7 @@ pub enum PathResolution {\n     /// A local binding (only value namespace)\n     Local(Local),\n     /// A generic parameter\n-    GenericParam(GenericParam),\n+    TypeParam(TypeParam),\n     SelfType(crate::ImplBlock),\n     Macro(MacroDef),\n     AssocItem(crate::AssocItem),\n@@ -266,7 +266,7 @@ impl SourceAnalyzer {\n     ) -> Option<PathResolution> {\n         let types = self.resolver.resolve_path_in_type_ns_fully(db, &path).map(|ty| match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it.into()),\n-            TypeNs::GenericParam(id) => PathResolution::GenericParam(GenericParam { id }),\n+            TypeNs::GenericParam(id) => PathResolution::TypeParam(TypeParam { id }),\n             TypeNs::AdtSelfType(it) | TypeNs::AdtId(it) => {\n                 PathResolution::Def(Adt::from(it).into())\n             }\n@@ -338,7 +338,7 @@ impl SourceAnalyzer {\n                 resolver::ScopeDef::PerNs(it) => it.into(),\n                 resolver::ScopeDef::ImplSelfType(it) => ScopeDef::ImplSelfType(it.into()),\n                 resolver::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n-                resolver::ScopeDef::GenericParam(id) => ScopeDef::GenericParam(GenericParam { id }),\n+                resolver::ScopeDef::GenericParam(id) => ScopeDef::GenericParam(TypeParam { id }),\n                 resolver::ScopeDef::Local(pat_id) => {\n                     let parent = self.resolver.body_owner().unwrap().into();\n                     ScopeDef::Local(Local { parent, pat_id })"}, {"sha": "976cf72d09c72ef86dedf4085ee76882e6a6274f", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -21,20 +21,21 @@ use crate::{\n     src::HasChildSource,\n     src::HasSource,\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AstItemDef, GenericDefId, GenericParamId, LocalGenericParamId, Lookup,\n+    AdtId, AstItemDef, GenericDefId, LocalTypeParamId, Lookup, TypeParamId,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub struct GenericParamData {\n+pub struct TypeParamData {\n     pub name: Name,\n     pub default: Option<TypeRef>,\n }\n \n /// Data about the generic parameters of a function, struct, impl, etc.\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct GenericParams {\n-    pub params: Arena<LocalGenericParamId, GenericParamData>,\n+    pub types: Arena<LocalTypeParamId, TypeParamData>,\n+    // lifetimes: Arena<LocalLifetimeParamId, LifetimeParamData>,\n     pub where_predicates: Vec<WherePredicate>,\n }\n \n@@ -48,7 +49,7 @@ pub struct WherePredicate {\n     pub bound: TypeBound,\n }\n \n-type SourceMap = ArenaMap<LocalGenericParamId, Either<ast::TraitDef, ast::TypeParam>>;\n+type SourceMap = ArenaMap<LocalTypeParamId, Either<ast::TraitDef, ast::TypeParam>>;\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n@@ -60,7 +61,7 @@ impl GenericParams {\n     }\n \n     fn new(db: &impl DefDatabase, def: GenericDefId) -> (GenericParams, InFile<SourceMap>) {\n-        let mut generics = GenericParams { params: Arena::default(), where_predicates: Vec::new() };\n+        let mut generics = GenericParams { types: Arena::default(), where_predicates: Vec::new() };\n         let mut sm = ArenaMap::default();\n         // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         let file_id = match def {\n@@ -88,9 +89,8 @@ impl GenericParams {\n                 let src = it.source(db);\n \n                 // traits get the Self type as an implicit first type parameter\n-                let self_param_id = generics\n-                    .params\n-                    .alloc(GenericParamData { name: name::SELF_TYPE, default: None });\n+                let self_param_id =\n+                    generics.types.alloc(TypeParamData { name: name::SELF_TYPE, default: None });\n                 sm.insert(self_param_id, Either::Left(src.value.clone()));\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n@@ -142,8 +142,8 @@ impl GenericParams {\n             let name = type_param.name().map_or_else(Name::missing, |it| it.as_name());\n             // FIXME: Use `Path::from_src`\n             let default = type_param.default_type().map(TypeRef::from_ast);\n-            let param = GenericParamData { name: name.clone(), default };\n-            let param_id = self.params.alloc(param);\n+            let param = TypeParamData { name: name.clone(), default };\n+            let param_id = self.types.alloc(param);\n             sm.insert(param_id, Either::Right(type_param.clone()));\n \n             let type_ref = TypeRef::Path(name.into());\n@@ -173,13 +173,13 @@ impl GenericParams {\n         self.where_predicates.push(WherePredicate { type_ref, bound });\n     }\n \n-    pub fn find_by_name(&self, name: &Name) -> Option<LocalGenericParamId> {\n-        self.params.iter().find_map(|(id, p)| if &p.name == name { Some(id) } else { None })\n+    pub fn find_by_name(&self, name: &Name) -> Option<LocalTypeParamId> {\n+        self.types.iter().find_map(|(id, p)| if &p.name == name { Some(id) } else { None })\n     }\n }\n \n impl HasChildSource for GenericDefId {\n-    type ChildId = LocalGenericParamId;\n+    type ChildId = LocalTypeParamId;\n     type Value = Either<ast::TraitDef, ast::TypeParam>;\n     fn child_source(&self, db: &impl DefDatabase) -> InFile<SourceMap> {\n         let (_, sm) = GenericParams::new(db, *self);\n@@ -193,7 +193,7 @@ impl ChildBySource for GenericDefId {\n         let arena_map = self.child_source(db);\n         let arena_map = arena_map.as_ref();\n         for (local_id, src) in arena_map.value.iter() {\n-            let id = GenericParamId { parent: *self, local_id };\n+            let id = TypeParamId { parent: *self, local_id };\n             if let Either::Right(type_param) = src {\n                 res[keys::TYPE_PARAM].insert(arena_map.with_value(type_param.clone()), id)\n             }"}, {"sha": "be702a4f8082180d7fbc722d7c903c339e63c6fa", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     dyn_map::{DynMap, Policy},\n-    ConstId, EnumVariantId, FunctionId, GenericParamId, StaticId, StructFieldId, TypeAliasId,\n+    ConstId, EnumVariantId, FunctionId, StaticId, StructFieldId, TypeAliasId, TypeParamId,\n };\n \n type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n@@ -20,7 +20,7 @@ pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAliasDef, TypeAliasId> = Key::new();\n pub const TUPLE_FIELD: Key<ast::TupleFieldDef, StructFieldId> = Key::new();\n pub const RECORD_FIELD: Key<ast::RecordFieldDef, StructFieldId> = Key::new();\n-pub const TYPE_PARAM: Key<ast::TypeParam, GenericParamId> = Key::new();\n+pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();\n \n /// XXX: AST Nodes and SyntaxNodes have identity equality semantics: nodes are\n /// equal if they point to exactly the same object."}, {"sha": "569da4f284ebf66df5debc82480e477553d37f82", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -318,14 +318,14 @@ macro_rules! impl_froms {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct GenericParamId {\n+pub struct TypeParamId {\n     pub parent: GenericDefId,\n-    pub local_id: LocalGenericParamId,\n+    pub local_id: LocalTypeParamId,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct LocalGenericParamId(RawId);\n-impl_arena_id!(LocalGenericParamId);\n+pub struct LocalTypeParamId(RawId);\n+impl_arena_id!(LocalTypeParamId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ContainerId {"}, {"sha": "4c859e497f44fb9f5ffe31f4e68a2a1eee201a40", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -18,8 +18,8 @@ use crate::{\n     path::{Path, PathKind},\n     per_ns::PerNs,\n     AdtId, AstItemDef, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId, FunctionId,\n-    GenericDefId, GenericParamId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId,\n-    StaticId, StructId, TraitId, TypeAliasId,\n+    GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId,\n+    StructId, TraitId, TypeAliasId, TypeParamId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -59,7 +59,7 @@ enum Scope {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum TypeNs {\n     SelfType(ImplId),\n-    GenericParam(GenericParamId),\n+    GenericParam(TypeParamId),\n     AdtId(AdtId),\n     AdtSelfType(AdtId),\n     // Yup, enum variants are added to the types ns, but any usage of variant as\n@@ -157,7 +157,7 @@ impl Resolver {\n                     if let Some(local_id) = params.find_by_name(first_name) {\n                         let idx = if path.segments.len() == 1 { None } else { Some(1) };\n                         return Some((\n-                            TypeNs::GenericParam(GenericParamId { local_id, parent: *def }),\n+                            TypeNs::GenericParam(TypeParamId { local_id, parent: *def }),\n                             idx,\n                         ));\n                     }\n@@ -252,7 +252,7 @@ impl Resolver {\n \n                 Scope::GenericParams { params, def } if n_segments > 1 => {\n                     if let Some(local_id) = params.find_by_name(first_name) {\n-                        let ty = TypeNs::GenericParam(GenericParamId { local_id, parent: *def });\n+                        let ty = TypeNs::GenericParam(TypeParamId { local_id, parent: *def });\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n                 }\n@@ -399,7 +399,7 @@ pub enum ScopeDef {\n     PerNs(PerNs),\n     ImplSelfType(ImplId),\n     AdtSelfType(AdtId),\n-    GenericParam(GenericParamId),\n+    GenericParam(TypeParamId),\n     Local(PatId),\n }\n \n@@ -431,10 +431,10 @@ impl Scope {\n                 }\n             }\n             Scope::GenericParams { params, def } => {\n-                for (local_id, param) in params.params.iter() {\n+                for (local_id, param) in params.types.iter() {\n                     f(\n                         param.name.clone(),\n-                        ScopeDef::GenericParam(GenericParamId { local_id, parent: *def }),\n+                        ScopeDef::GenericParam(TypeParamId { local_id, parent: *def }),\n                     )\n                 }\n             }\n@@ -481,7 +481,7 @@ impl Resolver {\n \n     fn push_generic_params_scope(self, db: &impl DefDatabase, def: GenericDefId) -> Resolver {\n         let params = db.generic_params(def);\n-        if params.params.is_empty() {\n+        if params.types.is_empty() {\n             self\n         } else {\n             self.push_scope(Scope::GenericParams { def, params })"}, {"sha": "aeb211a91cca86d55537a28d2212358abdeb7fea", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -5,10 +5,10 @@ use std::sync::Arc;\n use hir_def::{\n     adt::VariantData,\n     db::DefDatabase,\n-    generics::{GenericParamData, GenericParams},\n+    generics::{GenericParams, TypeParamData},\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    ContainerId, GenericDefId, GenericParamId, Lookup, TraitId, TypeAliasId, VariantId,\n+    ContainerId, GenericDefId, Lookup, TraitId, TypeAliasId, TypeParamId, VariantId,\n };\n use hir_expand::name::{self, Name};\n \n@@ -96,23 +96,21 @@ pub(crate) struct Generics {\n }\n \n impl Generics {\n-    pub(crate) fn iter<'a>(&'a self) -> impl Iterator<Item = (u32, &'a GenericParamData)> + 'a {\n+    pub(crate) fn iter<'a>(&'a self) -> impl Iterator<Item = (u32, &'a TypeParamData)> + 'a {\n         self.parent_generics\n             .as_ref()\n             .into_iter()\n-            .flat_map(|it| it.params.params.iter())\n-            .chain(self.params.params.iter())\n+            .flat_map(|it| it.params.types.iter())\n+            .chain(self.params.types.iter())\n             .enumerate()\n             .map(|(i, (_local_id, p))| (i as u32, p))\n     }\n \n-    pub(crate) fn iter_parent<'a>(\n-        &'a self,\n-    ) -> impl Iterator<Item = (u32, &'a GenericParamData)> + 'a {\n+    pub(crate) fn iter_parent<'a>(&'a self) -> impl Iterator<Item = (u32, &'a TypeParamData)> + 'a {\n         self.parent_generics\n             .as_ref()\n             .into_iter()\n-            .flat_map(|it| it.params.params.iter())\n+            .flat_map(|it| it.params.types.iter())\n             .enumerate()\n             .map(|(i, (_local_id, p))| (i as u32, p))\n     }\n@@ -123,20 +121,20 @@ impl Generics {\n     /// (total, parents, child)\n     pub(crate) fn len_split(&self) -> (usize, usize, usize) {\n         let parent = self.parent_generics.as_ref().map_or(0, |p| p.len());\n-        let child = self.params.params.len();\n+        let child = self.params.types.len();\n         (parent + child, parent, child)\n     }\n-    pub(crate) fn param_idx(&self, param: GenericParamId) -> u32 {\n+    pub(crate) fn param_idx(&self, param: TypeParamId) -> u32 {\n         self.find_param(param).0\n     }\n-    pub(crate) fn param_name(&self, param: GenericParamId) -> Name {\n+    pub(crate) fn param_name(&self, param: TypeParamId) -> Name {\n         self.find_param(param).1.name.clone()\n     }\n-    fn find_param(&self, param: GenericParamId) -> (u32, &GenericParamData) {\n+    fn find_param(&self, param: TypeParamId) -> (u32, &TypeParamData) {\n         if param.parent == self.def {\n             let (idx, (_local_id, data)) = self\n                 .params\n-                .params\n+                .types\n                 .iter()\n                 .enumerate()\n                 .find(|(_, (idx, _))| *idx == param.local_id)"}, {"sha": "6a6b49afdf141a6fd4f3adf9cf8959028f80272e", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -351,7 +351,7 @@ impl ToNav for hir::Local {\n     }\n }\n \n-impl ToNav for hir::GenericParam {\n+impl ToNav for hir::TypeParam {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n         let range = match src.value {"}, {"sha": "1b968134d6e1de0c2c933578ae03957050a4bc43", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -66,7 +66,7 @@ pub(crate) fn reference_definition(\n     match name_kind {\n         Some(Macro(it)) => return Exact(it.to_nav(db)),\n         Some(Field(it)) => return Exact(it.to_nav(db)),\n-        Some(GenericParam(it)) => return Exact(it.to_nav(db)),\n+        Some(TypeParam(it)) => return Exact(it.to_nav(db)),\n         Some(AssocItem(it)) => return Exact(it.to_nav(db)),\n         Some(Local(it)) => return Exact(it.to_nav(db)),\n         Some(Def(def)) => match NavigationTarget::from_def(db, def) {"}, {"sha": "d372ca758ea80841ef7dd5b221100944fd436b1b", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -138,7 +138,7 @@ fn hover_text_from_name_kind(\n             *no_fallback = true;\n             None\n         }\n-        GenericParam(_) | SelfType(_) => {\n+        TypeParam(_) | SelfType(_) => {\n             // FIXME: Hover for generic param\n             None\n         }"}, {"sha": "e3ecde50dd8073544a520d2173c5ae6b64fdd6c2", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -85,7 +85,7 @@ pub(crate) fn find_all_refs(\n         NameKind::Def(def) => NavigationTarget::from_def(db, def)?,\n         NameKind::SelfType(imp) => imp.to_nav(db),\n         NameKind::Local(local) => local.to_nav(db),\n-        NameKind::GenericParam(_) => return None,\n+        NameKind::TypeParam(_) => return None,\n     };\n \n     let search_scope = {"}, {"sha": "c1f091ec080af61dcac04c9af7012a967084e61d", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -112,11 +112,11 @@ pub(crate) fn classify_name(db: &RootDatabase, name: InFile<&ast::Name>) -> Opti\n             },\n             ast::TypeParam(it) => {\n                 let src = name.with_value(it);\n-                let def = hir::GenericParam::from_source(db, src)?;\n+                let def = hir::TypeParam::from_source(db, src)?;\n                 Some(NameDefinition {\n                     visibility: None,\n                     container: def.module(db),\n-                    kind: NameKind::GenericParam(def),\n+                    kind: NameKind::TypeParam(def),\n                 })\n             },\n             _ => None,\n@@ -177,8 +177,8 @@ pub(crate) fn classify_name_ref(\n             let kind = NameKind::Local(local);\n             Some(NameDefinition { kind, container, visibility: None })\n         }\n-        PathResolution::GenericParam(par) => {\n-            let kind = NameKind::GenericParam(par);\n+        PathResolution::TypeParam(par) => {\n+            let kind = NameKind::TypeParam(par);\n             Some(NameDefinition { kind, container, visibility })\n         }\n         PathResolution::Macro(def) => {"}, {"sha": "8c67c88639f9b48ea028e91a495d2de6f5704d10", "filename": "crates/ra_ide/src/references/name_definition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Freferences%2Fname_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Freferences%2Fname_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fname_definition.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -4,8 +4,8 @@\n //! Note that the reference search is possible for not all of the classified items.\n \n use hir::{\n-    Adt, AssocItem, GenericParam, HasSource, ImplBlock, Local, MacroDef, Module, ModuleDef,\n-    StructField, VariantDef,\n+    Adt, AssocItem, HasSource, ImplBlock, Local, MacroDef, Module, ModuleDef, StructField,\n+    TypeParam, VariantDef,\n };\n use ra_syntax::{ast, ast::VisibilityOwner};\n \n@@ -19,7 +19,7 @@ pub enum NameKind {\n     Def(ModuleDef),\n     SelfType(ImplBlock),\n     Local(Local),\n-    GenericParam(GenericParam),\n+    TypeParam(TypeParam),\n }\n \n #[derive(PartialEq, Eq)]"}, {"sha": "9dfbc8047529a877c0fbda47e715e69a4a745d88", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -9,6 +9,7 @@\n .parameter          { color: #94BFF3; }\n .builtin            { color: #DD6718; }\n .text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n .attribute          { color: #94BFF3; }\n .literal            { color: #BFEBBF; }\n .macro              { color: #94BFF3; }"}, {"sha": "7ecb1a027243070b4cab7ce6dc6e6ea36a1c745a", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c5b1282a5770097c6c768b24bedfc3a6944e08/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=88c5b1282a5770097c6c768b24bedfc3a6944e08", "patch": "@@ -225,8 +225,7 @@ fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n         Def(hir::ModuleDef::Trait(_)) => \"type\",\n         Def(hir::ModuleDef::TypeAlias(_)) => \"type\",\n         Def(hir::ModuleDef::BuiltinType(_)) => \"type\",\n-        SelfType(_) => \"type\",\n-        GenericParam(_) => \"type\",\n+        SelfType(_) | TypeParam(_) => \"type\",\n         Local(local) => {\n             if local.is_mut(db) {\n                 \"variable.mut\""}]}