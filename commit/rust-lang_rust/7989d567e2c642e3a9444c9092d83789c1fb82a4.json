{"sha": "7989d567e2c642e3a9444c9092d83789c1fb82a4", "node_id": "C_kwDOAAsO6NoAKDc5ODlkNTY3ZTJjNjQyZTNhOTQ0NGM5MDkyZDgzNzg5YzFmYjgyYTQ", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T14:18:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T14:18:21Z"}, "message": "internal: more macro tests", "tree": {"sha": "a7722827e8869a1466db6664823cb1a0c2c6b978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7722827e8869a1466db6664823cb1a0c2c6b978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7989d567e2c642e3a9444c9092d83789c1fb82a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7989d567e2c642e3a9444c9092d83789c1fb82a4", "html_url": "https://github.com/rust-lang/rust/commit/7989d567e2c642e3a9444c9092d83789c1fb82a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7989d567e2c642e3a9444c9092d83789c1fb82a4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7de4b964a9ac25b95ec303f675b36d8c04859e34", "url": "https://api.github.com/repos/rust-lang/rust/commits/7de4b964a9ac25b95ec303f675b36d8c04859e34", "html_url": "https://github.com/rust-lang/rust/commit/7de4b964a9ac25b95ec303f675b36d8c04859e34"}], "stats": {"total": 98, "additions": 76, "deletions": 22}, "files": [{"sha": "2cd70a84c537fb2f8433b0ebf5b1b73cfc847e5f", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7989d567e2c642e3a9444c9092d83789c1fb82a4/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7989d567e2c642e3a9444c9092d83789c1fb82a4/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=7989d567e2c642e3a9444c9092d83789c1fb82a4", "patch": "@@ -85,26 +85,6 @@ impl From<Subtree> for TokenTree {\n     );\n }\n \n-#[test]\n-fn expansion_does_not_parse_as_expression() {\n-    check(\n-        r#\"\n-macro_rules! stmts {\n-    () => { let _ = 0; }\n-}\n-\n-fn f() { let _ = stmts!(); }\n-\"#,\n-        expect![[r#\"\n-macro_rules! stmts {\n-    () => { let _ = 0; }\n-}\n-\n-fn f() { let _ = /* error: could not convert tokens */; }\n-\"#]],\n-    )\n-}\n-\n #[test]\n fn wrong_nesting_level() {\n     check("}, {"sha": "97c27c453b00de6482931cf106df7eafd4955b57", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7989d567e2c642e3a9444c9092d83789c1fb82a4/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7989d567e2c642e3a9444c9092d83789c1fb82a4/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=7989d567e2c642e3a9444c9092d83789c1fb82a4", "patch": "@@ -2,7 +2,9 @@\n //! Rather, token trees are an explicit bridge between the parser and\n //! (procedural or declarative) macros.\n //!\n-//! This module tests tt <-> syntax tree conversion specifically\n+//! This module tests tt <-> syntax tree conversion specifically. In particular,\n+//! it, among other things, check that we convert `tt` to the right kind of\n+//! syntax node depending on the macro call-site.\n use expect_test::expect;\n \n use crate::macro_expansion_tests::check;\n@@ -100,3 +102,49 @@ macro_rules! m2 { ($x:ident) => {} }\n \"#]],\n     )\n }\n+\n+#[test]\n+fn expansion_does_not_parse_as_expression() {\n+    cov_mark::check!(expansion_does_not_parse_as_expression);\n+    check(\n+        r#\"\n+macro_rules! stmts {\n+    () => { let _ = 0; }\n+}\n+\n+fn f() { let _ = stmts!(); }\n+\"#,\n+        expect![[r#\"\n+macro_rules! stmts {\n+    () => { let _ = 0; }\n+}\n+\n+fn f() { let _ = /* error: could not convert tokens */; }\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn broken_pat() {\n+    check(\n+        r#\"\n+macro_rules! m1 { () => (Some(x) left overs) }\n+macro_rules! m2 { () => ($) }\n+\n+fn main() {\n+    let m1!() = ();\n+    let m2!/*+errors*/() = ();\n+}\n+\"#,\n+        expect![[r#\"\n+macro_rules! m1 { () => (Some(x) left overs) }\n+macro_rules! m2 { () => ($) }\n+\n+fn main() {\n+    let Some(x) = ();\n+    let /* parse error: expected pattern */\n+$ = ();\n+}\n+\"#]],\n+    )\n+}"}, {"sha": "1141365e82c852e83e0af0ddbfc7c26df5d260f7", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7989d567e2c642e3a9444c9092d83789c1fb82a4/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7989d567e2c642e3a9444c9092d83789c1fb82a4/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=7989d567e2c642e3a9444c9092d83789c1fb82a4", "patch": "@@ -67,6 +67,7 @@ pub fn token_tree_to_syntax_node(\n         }\n     }\n     if tree_sink.roots.len() != 1 {\n+        cov_mark::hit!(expansion_does_not_parse_as_expression);\n         return Err(ExpandError::ConversionError);\n     }\n     //FIXME: would be cool to report errors"}, {"sha": "c0437bc3b8ae1d95ed2da089defc70fd39d6967c", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7989d567e2c642e3a9444c9092d83789c1fb82a4/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7989d567e2c642e3a9444c9092d83789c1fb82a4/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=7989d567e2c642e3a9444c9092d83789c1fb82a4", "patch": "@@ -114,7 +114,13 @@ fn parse(entry: TopEntryPoint, text: &str) -> (String, bool) {\n             errors.push(format!(\"error {}: {}\\n\", pos, msg))\n         }\n     });\n-    assert_eq!(len, text.len());\n+    assert_eq!(\n+        len,\n+        text.len(),\n+        \"didn't parse all text.\\nParsed:\\n{}\\n\\nAll:\\n{}\\n\",\n+        &text[..len],\n+        text\n+    );\n \n     for (token, msg) in lexed.errors() {\n         let pos = lexed.text_start(token);"}, {"sha": "fa25ffd0a26ed8af540830a5c19e30187f1b10e1", "filename": "crates/parser/src/tests/top_entries.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7989d567e2c642e3a9444c9092d83789c1fb82a4/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7989d567e2c642e3a9444c9092d83789c1fb82a4/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs?ref=7989d567e2c642e3a9444c9092d83789c1fb82a4", "patch": "@@ -129,6 +129,25 @@ fn macro_items() {\n     );\n }\n \n+#[test]\n+fn macro_pattern() {\n+    check(\n+        TopEntryPoint::Pattern,\n+        \"Some(_)\",\n+        expect![[r#\"\n+            TUPLE_STRUCT_PAT\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"Some\"\n+              L_PAREN \"(\"\n+              WILDCARD_PAT\n+                UNDERSCORE \"_\"\n+              R_PAREN \")\"\n+        \"#]],\n+    );\n+}\n+\n #[track_caller]\n fn check(entry: TopEntryPoint, input: &str, expect: expect_test::Expect) {\n     let (parsed, _errors) = super::parse(entry, input);"}]}