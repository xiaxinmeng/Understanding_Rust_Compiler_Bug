{"sha": "ae51953e8034a8f02a12c32a839f9be74cc0ca1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNTE5NTNlODAzNGE4ZjAyYTEyYzMyYTgzOWY5YmU3NGNjMGNhMWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-28T01:35:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-28T16:56:28Z"}, "message": "review comments", "tree": {"sha": "146614e2808439348740773a353b5fe1e6677497", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/146614e2808439348740773a353b5fe1e6677497"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae51953e8034a8f02a12c32a839f9be74cc0ca1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae51953e8034a8f02a12c32a839f9be74cc0ca1c", "html_url": "https://github.com/rust-lang/rust/commit/ae51953e8034a8f02a12c32a839f9be74cc0ca1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae51953e8034a8f02a12c32a839f9be74cc0ca1c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a167edbcad1497b05c5d4d674acac34217902d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a167edbcad1497b05c5d4d674acac34217902d0", "html_url": "https://github.com/rust-lang/rust/commit/8a167edbcad1497b05c5d4d674acac34217902d0"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "ce09ea8a5d6e05f940768e606c85562312b211e5", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae51953e8034a8f02a12c32a839f9be74cc0ca1c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae51953e8034a8f02a12c32a839f9be74cc0ca1c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=ae51953e8034a8f02a12c32a839f9be74cc0ca1c", "patch": "@@ -818,6 +818,11 @@ impl<'hir> Map<'hir> {\n         CRATE_HIR_ID\n     }\n \n+    /// When on a match arm tail expression or on a match arm, give back the enclosing `match`\n+    /// expression.\n+    ///\n+    /// Used by error reporting when there's a type error in a match arm caused by the `match`\n+    /// expression needing to be unit.\n     pub fn get_match_if_cause(&self, hir_id: HirId) -> Option<&Expr> {\n         for (_, node) in ParentHirIterator::new(hir_id, &self) {\n             match node {"}, {"sha": "1c7b765b746cd58b61ced5b42049f7eb29f91fcd", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ae51953e8034a8f02a12c32a839f9be74cc0ca1c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae51953e8034a8f02a12c32a839f9be74cc0ca1c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ae51953e8034a8f02a12c32a839f9be74cc0ca1c", "patch": "@@ -1218,7 +1218,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     self.pushed += 1;\n                 }\n             }\n-            Err(err) => {\n+            Err(coercion_error) => {\n                 let (expected, found) = if label_expression_as_expected {\n                     // In the case where this is a \"forced unit\", like\n                     // `break`, we want to call the `()` \"expected\"\n@@ -1234,41 +1234,42 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     (self.final_ty.unwrap_or(self.expected_ty), expression_ty)\n                 };\n \n-                let mut db;\n+                let mut err;\n                 match cause.code {\n                     ObligationCauseCode::ReturnNoExpression => {\n-                        db = struct_span_err!(\n+                        err = struct_span_err!(\n                             fcx.tcx.sess, cause.span, E0069,\n                             \"`return;` in a function whose return type is not `()`\");\n-                        db.span_label(cause.span, \"return type is not `()`\");\n+                        err.span_label(cause.span, \"return type is not `()`\");\n                     }\n                     ObligationCauseCode::BlockTailExpression(blk_id) => {\n                         let parent_id = fcx.tcx.hir().get_parent_node(blk_id);\n-                        db = self.report_return_mismatched_types(\n+                        err = self.report_return_mismatched_types(\n                             cause,\n                             expected,\n                             found,\n-                            err,\n+                            coercion_error,\n                             fcx,\n                             parent_id,\n                             expression.map(|expr| (expr, blk_id)),\n                         );\n                     }\n                     ObligationCauseCode::ReturnValue(id) => {\n-                        db = self.report_return_mismatched_types(\n-                            cause, expected, found, err, fcx, id, None);\n+                        err = self.report_return_mismatched_types(\n+                            cause, expected, found, coercion_error, fcx, id, None);\n                     }\n                     _ => {\n-                        db = fcx.report_mismatched_types(cause, expected, found, err);\n+                        err = fcx.report_mismatched_types(cause, expected, found, coercion_error);\n                     }\n                 }\n \n                 if let Some(augment_error) = augment_error {\n-                    augment_error(&mut db);\n+                    augment_error(&mut err);\n                 }\n \n                 // Error possibly reported in `check_assign` so avoid emitting error again.\n-                db.emit_unless(expression.filter(|e| fcx.is_assign_to_bool(e, expected)).is_some());\n+                err.emit_unless(expression.filter(|e| fcx.is_assign_to_bool(e, expected))\n+                    .is_some());\n \n                 self.final_ty = Some(fcx.tcx.types.err);\n             }\n@@ -1280,12 +1281,12 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         cause: &ObligationCause<'tcx>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n-        err: TypeError<'tcx>,\n+        ty_err: TypeError<'tcx>,\n         fcx: &FnCtxt<'a, 'tcx>,\n         id: hir::HirId,\n         expression: Option<(&'tcx hir::Expr, hir::HirId)>,\n     ) -> DiagnosticBuilder<'a> {\n-        let mut db = fcx.report_mismatched_types(cause, expected, found, err);\n+        let mut err = fcx.report_mismatched_types(cause, expected, found, ty_err);\n \n         let mut pointing_at_return_type = false;\n         let mut return_sp = None;\n@@ -1296,7 +1297,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let parent_id = fcx.tcx.hir().get_parent_node(id);\n         let fn_decl = if let Some((expr, blk_id)) = expression {\n             pointing_at_return_type = fcx.suggest_mismatched_types_on_tail(\n-                &mut db,\n+                &mut err,\n                 expr,\n                 expected,\n                 found,\n@@ -1310,8 +1311,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 pointing_at_return_type,\n             ) {\n                 if match_expr.span.desugaring_kind().is_none() {\n-                    db.span_label(match_expr.span, \"expected this to be `()`\");\n-                    db.span_suggestion_short(\n+                    err.span_laber(match_expr.span, \"expected this to be `()`\");\n+                    err.span_suggestion_short(\n                         match_expr.span.shrink_to_hi(),\n                         \"consider using a semicolon here\",\n                         \";\".to_string(),\n@@ -1327,20 +1328,20 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         if let (Some((fn_decl, can_suggest)), _) = (fn_decl, pointing_at_return_type) {\n             if expression.is_none() {\n                 pointing_at_return_type |= fcx.suggest_missing_return_type(\n-                    &mut db, &fn_decl, expected, found, can_suggest);\n+                    &mut err, &fn_decl, expected, found, can_suggest);\n             }\n             if !pointing_at_return_type {\n                 return_sp = Some(fn_decl.output.span()); // `impl Trait` return type\n             }\n         }\n         if let (Some(sp), Some(return_sp)) = (fcx.ret_coercion_span.borrow().as_ref(), return_sp) {\n-            db.span_label(return_sp, \"expected because this return type...\");\n-            db.span_label( *sp, format!(\n+            err.span_label(return_sp, \"expected because this return type...\");\n+            err.span_label( *sp, format!(\n                 \"...is found to be `{}` here\",\n                 fcx.resolve_type_vars_with_obligations(expected),\n             ));\n         }\n-        db\n+        err\n     }\n \n     pub fn complete<'a>(self, fcx: &FnCtxt<'a, 'tcx>) -> Ty<'tcx> {"}, {"sha": "03cbed1376ea3ed21c8513d2d7a35d5ef419c539", "filename": "src/test/ui/suggestions/match-needing-semi.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae51953e8034a8f02a12c32a839f9be74cc0ca1c/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ae51953e8034a8f02a12c32a839f9be74cc0ca1c/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed?ref=ae51953e8034a8f02a12c32a839f9be74cc0ca1c", "patch": "@@ -1,4 +1,4 @@\n-// check-fail\n+// check-only\n // run-rustfix\n \n fn main() {"}, {"sha": "f34071ac758868b9fb4c10b5244288dcebb8ebc7", "filename": "src/test/ui/suggestions/match-needing-semi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae51953e8034a8f02a12c32a839f9be74cc0ca1c/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae51953e8034a8f02a12c32a839f9be74cc0ca1c/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs?ref=ae51953e8034a8f02a12c32a839f9be74cc0ca1c", "patch": "@@ -1,4 +1,4 @@\n-// check-fail\n+// check-only\n // run-rustfix\n \n fn main() {"}]}