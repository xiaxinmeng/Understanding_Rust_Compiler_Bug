{"sha": "14883871c9f9e007343fb5919be82d7638b43a31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ODgzODcxYzlmOWUwMDczNDNmYjU5MTliZTgyZDc2MzhiNDNhMzE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2011-12-21T03:00:54Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2011-12-21T03:00:54Z"}, "message": "Merge pull request #1363 from elly/cargo\n\ncargo: support optional signing of packages.json files.", "tree": {"sha": "b0d5d8cb85cbd99ff751528f4fec1ab8ef1491d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0d5d8cb85cbd99ff751528f4fec1ab8ef1491d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14883871c9f9e007343fb5919be82d7638b43a31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14883871c9f9e007343fb5919be82d7638b43a31", "html_url": "https://github.com/rust-lang/rust/commit/14883871c9f9e007343fb5919be82d7638b43a31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14883871c9f9e007343fb5919be82d7638b43a31/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51a9274cf6b44e22d68398ac79549afafc10c0a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/51a9274cf6b44e22d68398ac79549afafc10c0a0", "html_url": "https://github.com/rust-lang/rust/commit/51a9274cf6b44e22d68398ac79549afafc10c0a0"}, {"sha": "2bdb0b6d40c49d375cc3373c2041d8c253253cfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bdb0b6d40c49d375cc3373c2041d8c253253cfc", "html_url": "https://github.com/rust-lang/rust/commit/2bdb0b6d40c49d375cc3373c2041d8c253253cfc"}], "stats": {"total": 273, "additions": 266, "deletions": 7}, "files": [{"sha": "3acca318f33ff1fb17734eeefc48d792bc16b08e", "filename": "src/cargo/cargo.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14883871c9f9e007343fb5919be82d7638b43a31/src%2Fcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/14883871c9f9e007343fb5919be82d7638b43a31/src%2Fcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rc?ref=14883871c9f9e007343fb5919be82d7638b43a31", "patch": "@@ -14,3 +14,5 @@\n        vers = \"0.1\",\n        uuid = \"9ff87a04-8fed-4295-9ff8-f99bb802650b\",\n        url = \"http://rust-lang.org/doc/cargo\")];\n+\n+mod pgp;"}, {"sha": "98c876e49865391329fdb0844cd8bf8a5b6be59a", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 158, "deletions": 7, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/14883871c9f9e007343fb5919be82d7638b43a31/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14883871c9f9e007343fb5919be82d7638b43a31/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=14883871c9f9e007343fb5919be82d7638b43a31", "patch": "@@ -30,16 +30,21 @@ type package = {\n     name: str,\n     uuid: str,\n     url: str,\n-    method: str\n+    method: str,\n+    tags: [str]\n };\n \n type source = {\n     name: str,\n     url: str,\n+    sig: option::t<str>,\n+    key: option::t<str>,\n+    keyfp: option::t<str>,\n     mutable packages: [package]\n };\n \n type cargo = {\n+    pgp: bool,\n     root: str,\n     bindir: str,\n     libdir: str,\n@@ -158,12 +163,32 @@ fn need_dir(s: str) {\n fn parse_source(name: str, j: json::json) -> source {\n     alt j {\n         json::dict(_j) {\n-            alt _j.find(\"url\") {\n+            let url = alt _j.find(\"url\") {\n                 some(json::string(u)) {\n-                    ret { name: name, url: u, mutable packages: [] };\n+                    u\n                 }\n                 _ { fail \"Needed 'url' field in source.\"; }\n             };\n+            let sig = alt _j.find(\"sig\") {\n+                some(json::string(u)) {\n+                    some(u)\n+                }\n+                _ { none }\n+            };\n+            let key = alt _j.find(\"key\") {\n+                some(json::string(u)) {\n+                    some(u)\n+                }\n+                _ { none }\n+            };\n+            let keyfp = alt _j.find(\"keyfp\") {\n+                some(json::string(u)) {\n+                    some(u)\n+                }\n+                _ { none }\n+            };\n+            ret { name: name, url: url, sig: sig, key: key, keyfp: keyfp,\n+                  mutable packages: [] };\n         }\n         _ { fail \"Needed dict value in source.\"; }\n     };\n@@ -217,18 +242,31 @@ fn load_one_source_package(&src: source, p: map::hashmap<str, json::json>) {\n         }\n     };\n \n+    let tags = [];\n+    alt p.find(\"tags\") {\n+        some(json::list(js)) {\n+            for j in *js {\n+                alt j {\n+                    json::string(_j) { vec::grow(tags, 1u, _j); }\n+                    _ { }\n+                }\n+            }\n+        }\n+        _ { }\n+    }\n     vec::grow(src.packages, 1u, {\n         // source: _source(src),\n         name: name,\n         uuid: uuid,\n         url: url,\n-        method: method\n+        method: method,\n+        tags: tags\n     });\n-    info(\"  Loaded package: \" + src.name + \"/\" + name);\n+    log \"  Loaded package: \" + src.name + \"/\" + name;\n }\n \n fn load_source_packages(&c: cargo, &src: source) {\n-    info(\"Loading source: \" + src.name);\n+    log \"Loading source: \" + src.name;\n     let dir = fs::connect(c.sourcedir, src.name);\n     let pkgfile = fs::connect(dir, \"packages.json\");\n     if !fs::path_exists(pkgfile) { ret; }\n@@ -269,6 +307,7 @@ fn configure() -> cargo {\n     try_parse_sources(fs::connect(p, \"sources.json\"), sources);\n     try_parse_sources(fs::connect(p, \"local-sources.json\"), sources);\n     let c = {\n+        pgp: pgp::supported(),\n         root: p,\n         bindir: fs::connect(p, \"bin\"),\n         libdir: fs::connect(p, \"lib\"),\n@@ -289,6 +328,10 @@ fn configure() -> cargo {\n         sources.insert(k, s);\n     };\n \n+    if c.pgp {\n+        pgp::init(c.root);\n+    }\n+\n     c\n }\n \n@@ -501,7 +544,10 @@ fn cmd_install(c: cargo, argv: [str]) {\n \n fn sync_one(c: cargo, name: str, src: source) {\n     let dir = fs::connect(c.sourcedir, name);\n-    let pkgfile = fs::connect(dir, \"packages.json\");\n+    let pkgfile = fs::connect(dir, \"packages.json.new\");\n+    let destpkgfile = fs::connect(dir, \"packages.json\");\n+    let sigfile = fs::connect(dir, \"packages.json.sig\");\n+    let keyfile = fs::connect(dir, \"key.gpg\");\n     let url = src.url;\n     need_dir(dir);\n     info(#fmt[\"fetching source %s...\", name]);\n@@ -511,6 +557,43 @@ fn sync_one(c: cargo, name: str, src: source) {\n     } else {\n         info(#fmt[\"fetched source: %s\", name]);\n     }\n+    alt src.sig {\n+        some(u) {\n+            let p = run::program_output(\"curl\", [\"-f\", \"-s\", \"-o\", sigfile,\n+                                                 u]);\n+            if p.status != 0 {\n+                warn(#fmt[\"fetch for source %s (sig %s) failed\", name, u]);\n+            }\n+        }\n+        _ { }\n+    }\n+    alt src.key {\n+        some(u) {\n+            let p = run::program_output(\"curl\",  [\"-f\", \"-s\", \"-o\", keyfile,\n+                                                  u]);\n+            if p.status != 0 {\n+                warn(#fmt[\"fetch for source %s (key %s) failed\", name, u]);\n+            }\n+            pgp::add(c.root, keyfile);\n+        }\n+        _ { }\n+    }\n+    alt (src.sig, src.key, src.keyfp) {\n+        (some(_), some(_), some(f)) {\n+            let r = pgp::verify(c.root, pkgfile, sigfile, f);\n+            if !r {\n+                warn(#fmt[\"signature verification failed for source %s\",\n+                          name]);\n+                ret;\n+            } else {\n+                info(#fmt[\"signature ok for source %s\", name]);\n+            }\n+        }\n+        _ {\n+            info(#fmt[\"no signature for source %s\", name]);\n+        }\n+    }\n+    run::run_program(\"cp\", [pkgfile, destpkgfile]);\n }\n \n fn cmd_sync(c: cargo, argv: [str]) {\n@@ -523,10 +606,75 @@ fn cmd_sync(c: cargo, argv: [str]) {\n     }\n }\n \n+fn cmd_init(c: cargo) {\n+    let srcurl = \"http://www.rust-lang.org/cargo/sources.json\";\n+    let sigurl = \"http://www.rust-lang.org/cargo/sources.json.sig\";\n+\n+    let srcfile = fs::connect(c.root, \"sources.json.new\");\n+    let sigfile = fs::connect(c.root, \"sources.json.sig\");\n+    let destsrcfile = fs::connect(c.root, \"sources.json\");\n+\n+    let p = run::program_output(\"curl\", [\"-f\", \"-s\", \"-o\", srcfile, srcurl]);\n+    if p.status != 0 {\n+        warn(#fmt[\"fetch of sources.json failed: %s\", p.out]);\n+        ret;\n+    }\n+\n+    let p = run::program_output(\"curl\", [\"-f\", \"-s\", \"-o\", sigfile, sigurl]);\n+    if p.status != 0 {\n+        warn(#fmt[\"fetch of sources.json.sig failed: %s\", p.out]);\n+        ret;\n+    }\n+\n+    let r = pgp::verify(c.root, srcfile, sigfile, pgp::signing_key_fp());\n+    if !r {\n+        warn(#fmt[\"signature verification failed for sources.json\"]);\n+        ret;\n+    }\n+    info(#fmt[\"signature ok for sources.json\"]);\n+    run::run_program(\"cp\", [srcfile, destsrcfile]);\n+}\n+\n+fn print_pkg(s: source, p: package) {\n+    let m = s.name + \"/\" + p.name + \" (\" + p.uuid + \")\";\n+    if vec::len(p.tags) > 0u {\n+        m = m + \" [\" + str::connect(p.tags, \", \") + \"]\";\n+    }\n+    info(m);\n+}\n+fn cmd_list(c: cargo, argv: [str]) {\n+    for_each_package(c, { |s, p|\n+        if vec::len(argv) <= 2u || argv[2] == s.name {\n+            print_pkg(s, p);\n+        }\n+    });\n+}\n+\n+fn cmd_search(c: cargo, argv: [str]) {\n+    if vec::len(argv) < 3u {\n+        cmd_usage();\n+        ret;\n+    }\n+    let n = 0;\n+    let name = argv[2];\n+    let tags = vec::slice(argv, 3u, vec::len(argv));\n+    for_each_package(c, { |s, p|\n+        if (str::contains(p.name, name) || name == \"*\") &&\n+            vec::all(tags, { |t| vec::member(t, p.tags) }) {\n+            print_pkg(s, p);\n+            n += 1;\n+        }\n+    });\n+    info(#fmt[\"Found %d packages.\", n]);\n+}\n+\n fn cmd_usage() {\n     print(\"Usage: cargo <verb> [args...]\");\n+    print(\"  init                                 Fetch default sources\");\n     print(\"  install [source/]package-name        Install by name\");\n     print(\"  install uuid:[source/]package-uuid   Install by uuid\");\n+    print(\"  list [source]                        List packages\");\n+    print(\"  search <name | '*'> [tags...]        Search packages\");\n     print(\"  sync                                 Sync all sources\");\n     print(\"  usage                                This\");\n }\n@@ -538,7 +686,10 @@ fn main(argv: [str]) {\n     }\n     let c = configure();\n     alt argv[1] {\n+        \"init\" { cmd_init(c); }\n         \"install\" { cmd_install(c, argv); }\n+        \"list\" { cmd_list(c, argv); }\n+        \"search\" { cmd_search(c, argv); }\n         \"sync\" { cmd_sync(c, argv); }\n         \"usage\" { cmd_usage(); }\n         _ { cmd_usage(); }"}, {"sha": "928ff88b58d094d76dd535a93ecdc8e8972711bd", "filename": "src/cargo/pgp.rs", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/14883871c9f9e007343fb5919be82d7638b43a31/src%2Fcargo%2Fpgp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14883871c9f9e007343fb5919be82d7638b43a31/src%2Fcargo%2Fpgp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fpgp.rs?ref=14883871c9f9e007343fb5919be82d7638b43a31", "patch": "@@ -0,0 +1,103 @@\n+use std;\n+\n+import std::fs;\n+import std::run;\n+\n+fn gpg(args: [str]) -> { status: int, out: str, err: str } {\n+    ret run::program_output(\"gpg\", args);\n+}\n+\n+fn signing_key() -> str {\n+    \"\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: SKS 1.1.0\n+\n+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\n+=2z6P\n+-----END PGP PUBLIC KEY BLOCK-----\n+\"\n+}\n+\n+fn signing_key_fp() -> str {\n+    \"FE79 EDB0 3DEF B0D8 27D2  6C41 0B2D 6A28 3033 6376\"\n+}\n+\n+fn supported() -> bool {\n+    let r = gpg([\"--version\"]);\n+    r.status == 0\n+}\n+\n+fn init(root: str) {\n+    let p = fs::connect(root, \"gpg\");\n+    if !fs::path_is_dir(p) {\n+        fs::make_dir(p, 0x1c0i32);\n+        let p = run::start_program(\"gpg\", [\"--homedir\", p, \"--import\"]);\n+        p.input().write_str(signing_key());\n+        let s = p.finish();\n+        if s != 0 {\n+            fail \"pgp init failed\";\n+        }\n+    }\n+}\n+\n+fn add(root: str, key: str) {\n+    let path = fs::connect(root, \"gpg\");\n+    let p = run::program_output(\"gpg\", [\"--homedir\", path, \"--import\", key]);\n+    if p.status != 0 {\n+        fail \"pgp add failed: \" + p.out;\n+    }\n+}\n+\n+fn verify(root: str, data: str, sig: str, keyfp: str) -> bool {\n+    let path = fs::connect(root, \"gpg\");\n+    let p = gpg([\"--homedir\", path, \"--with-fingerprint\", \"--verify\", sig,\n+                 data]);\n+    let res = \"Primary key fingerprint: \" + keyfp;\n+    for line in str::split(p.err, '\\n' as u8) {\n+        if line == res {\n+            ret true;\n+        }\n+    }\n+    ret false;\n+}"}, {"sha": "8d0ed27860bcad135b08be04edf8ab3445a8efd6", "filename": "src/cargo/sources.json", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14883871c9f9e007343fb5919be82d7638b43a31/src%2Fcargo%2Fsources.json", "raw_url": "https://github.com/rust-lang/rust/raw/14883871c9f9e007343fb5919be82d7638b43a31/src%2Fcargo%2Fsources.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fsources.json?ref=14883871c9f9e007343fb5919be82d7638b43a31", "patch": "@@ -1,6 +1,9 @@\n {\n \t\"elly\": {\n \t\t\"url\": \"https://raw.github.com/elly/rust-packages/master/packages.json\"\n+\t\t\"sig\": \"https://raw.github.com/elly/rust-packages/master/packages.json.sig\",\n+\t\t\"key\": \"https://raw.github.com/elly/rust-packages/master/signing-key.gpg\",\n+\t\t\"keyfp\": \"4107 21C0 FF32 858F 61FF  33F6 E595 8E36 FDC8 EA00\"\n \t},\n \t\"brson\": {\n \t\t\"url\": \"https://raw.github.com/brson/rust-packages/master/packages.json\""}]}