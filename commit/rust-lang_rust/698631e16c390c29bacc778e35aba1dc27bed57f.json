{"sha": "698631e16c390c29bacc778e35aba1dc27bed57f", "node_id": "C_kwDOAAsO6NoAKDY5ODYzMWUxNmMzOTBjMjliYWNjNzc4ZTM1YWJhMWRjMjdiZWQ1N2Y", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-12-10T00:01:05Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2022-01-19T21:33:57Z"}, "message": "Simplify error reporting code, remove await point wording", "tree": {"sha": "f398b9d813b7076acaadac2d265bfd733e9916e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f398b9d813b7076acaadac2d265bfd733e9916e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/698631e16c390c29bacc778e35aba1dc27bed57f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/698631e16c390c29bacc778e35aba1dc27bed57f", "html_url": "https://github.com/rust-lang/rust/commit/698631e16c390c29bacc778e35aba1dc27bed57f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/698631e16c390c29bacc778e35aba1dc27bed57f/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c15ad7fca5140362fe459d7c72661ea59a66b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c15ad7fca5140362fe459d7c72661ea59a66b10", "html_url": "https://github.com/rust-lang/rust/commit/5c15ad7fca5140362fe459d7c72661ea59a66b10"}], "stats": {"total": 399, "additions": 133, "deletions": 266}, "files": [{"sha": "4eec492b3aeb9d4b7c2d9ac3e64a1322e6b50462", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 33, "deletions": 77, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/698631e16c390c29bacc778e35aba1dc27bed57f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698631e16c390c29bacc778e35aba1dc27bed57f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=698631e16c390c29bacc778e35aba1dc27bed57f", "patch": "@@ -106,91 +106,47 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             None => String::new(),\n         };\n \n-        let (span_1, span_2, main_label, span_label, future_return_type) =\n-            match (sup_is_ret_type, sub_is_ret_type) {\n-                (None, None) => {\n-                    let (main_label_1, span_label_1) = if ty_sup.hir_id == ty_sub.hir_id {\n-                        (\n-                            \"this type is declared with multiple lifetimes...\".to_owned(),\n-                            \"...but data with one lifetime flows into the other here\".to_owned(),\n-                        )\n-                    } else {\n-                        (\n-                            \"these two types are declared with different lifetimes...\".to_owned(),\n-                            format!(\"...but data{} flows{} here\", span_label_var1, span_label_var2),\n-                        )\n-                    };\n-                    (ty_sup.span, ty_sub.span, main_label_1, span_label_1, None)\n-                }\n+        debug!(\n+            \"try_report_anon_anon_conflict: sub_is_ret_type={:?} sup_is_ret_type={:?}\",\n+            sub_is_ret_type, sup_is_ret_type\n+        );\n \n-                (Some(ret_span), _) => {\n-                    let sup_future = self.future_return_type(scope_def_id_sup);\n-                    let (return_type, action) = if sup_future.is_some() {\n-                        (\"returned future\", \"held across an await point\")\n-                    } else {\n-                        (\"return type\", \"returned\")\n-                    };\n+        let mut err = struct_span_err!(self.tcx().sess, span, E0623, \"lifetime mismatch\");\n \n-                    (\n-                        ty_sub.span,\n-                        ret_span,\n-                        format!(\n-                            \"this parameter and the {} are declared with different lifetimes...\",\n-                            return_type\n-                        ),\n-                        format!(\"...but data{} is {} here\", span_label_var1, action),\n-                        sup_future,\n-                    )\n-                }\n-                (_, Some(ret_span)) => {\n-                    let sub_future = self.future_return_type(scope_def_id_sub);\n-                    let (return_type, action) = if sub_future.is_some() {\n-                        (\"returned future\", \"held across an await point\")\n-                    } else {\n-                        (\"return type\", \"returned\")\n-                    };\n+        match (sup_is_ret_type, sub_is_ret_type) {\n+            (ret_capture @ Some(ret_span), _) | (_, ret_capture @ Some(ret_span)) => {\n+                let param_span =\n+                    if sup_is_ret_type == ret_capture { ty_sub.span } else { ty_sup.span };\n+\n+                err.span_label(\n+                    param_span,\n+                    \"this parameter and the return type are declared with different lifetimes...\",\n+                );\n+                err.span_label(ret_span, \"\");\n+                err.span_label(span, format!(\"...but data{} is returned here\", span_label_var1));\n+            }\n \n-                    (\n+            (None, None) => {\n+                if ty_sup.hir_id == ty_sub.hir_id {\n+                    err.span_label(ty_sup.span, \"this type is declared with multiple lifetimes...\");\n+                    err.span_label(ty_sub.span, \"\");\n+                    err.span_label(span, \"...but data with one lifetime flows into the other here\");\n+                } else {\n+                    err.span_label(\n                         ty_sup.span,\n-                        ret_span,\n-                        format!(\n-                            \"this parameter and the {} are declared with different lifetimes...\",\n-                            return_type\n-                        ),\n-                        format!(\"...but data{} is {} here\", span_label_var1, action),\n-                        sub_future,\n-                    )\n+                        \"these two types are declared with different lifetimes...\",\n+                    );\n+                    err.span_label(ty_sub.span, \"\");\n+                    err.span_label(\n+                        span,\n+                        format!(\"...but data{} flows{} here\", span_label_var1, span_label_var2),\n+                    );\n                 }\n-            };\n-\n-        let mut err = struct_span_err!(self.tcx().sess, span, E0623, \"lifetime mismatch\");\n-\n-        err.span_label(span_1, main_label);\n-        err.span_label(span_2, String::new());\n-        err.span_label(span, span_label);\n+            }\n+        }\n \n         self.suggest_adding_lifetime_params(sub, ty_sup, ty_sub, &mut err);\n \n-        // TODO: This is only helpful if the lifetime more visible in the impl Future type than in the signature.\n-        if let Some(t) = future_return_type {\n-            let snip = self\n-                .tcx()\n-                .sess\n-                .source_map()\n-                .span_to_snippet(t.span)\n-                .ok()\n-                .and_then(|s| match (&t.kind, s.as_str()) {\n-                    (rustc_hir::TyKind::Tup(&[]), \"\") => Some(\"()\".to_string()),\n-                    (_, \"\") => None,\n-                    _ => Some(s),\n-                })\n-                .unwrap_or_else(|| \"{unnamed_type}\".to_string());\n-\n-            err.span_label(\n-                t.span,\n-                &format!(\"this `async fn` implicitly returns an `impl Future<Output = {}>`\", snip),\n-            );\n-        }\n         err.emit();\n         Some(ErrorReported)\n     }"}, {"sha": "6d71d702cc89b069950d2cf733d37d07eb932b42", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/698631e16c390c29bacc778e35aba1dc27bed57f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698631e16c390c29bacc778e35aba1dc27bed57f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=698631e16c390c29bacc778e35aba1dc27bed57f", "patch": "@@ -94,60 +94,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             })\n     }\n \n-    pub(super) fn future_return_type(\n-        &self,\n-        local_def_id: LocalDefId,\n-    ) -> Option<&rustc_hir::Ty<'_>> {\n-        if let Some(hir::IsAsync::Async) = self.asyncness(local_def_id) {\n-            if let rustc_middle::ty::Opaque(def_id, _) =\n-                self.tcx().type_of(local_def_id).fn_sig(self.tcx()).output().skip_binder().kind()\n-            {\n-                match self.tcx().hir().get_if_local(*def_id) {\n-                    Some(hir::Node::Item(hir::Item {\n-                        kind:\n-                            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                                bounds,\n-                                origin: hir::OpaqueTyOrigin::AsyncFn(..),\n-                                ..\n-                            }),\n-                        ..\n-                    })) => {\n-                        for b in bounds.iter() {\n-                            if let hir::GenericBound::LangItemTrait(\n-                                hir::LangItem::Future,\n-                                _span,\n-                                _hir_id,\n-                                generic_args,\n-                            ) = b\n-                            {\n-                                for type_binding in generic_args.bindings.iter() {\n-                                    if type_binding.ident.name == rustc_span::sym::Output {\n-                                        if let hir::TypeBindingKind::Equality {\n-                                            term: hir::Term::Ty(ty),\n-                                        } = type_binding.kind\n-                                        {\n-                                            return Some(ty);\n-                                        }\n-                                    }\n-                                }\n-                            }\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-            }\n-        }\n-        None\n-    }\n-\n-    pub(super) fn asyncness(&self, local_def_id: LocalDefId) -> Option<hir::IsAsync> {\n-        // similar to the asyncness fn in rustc_ty_utils::ty\n-        let hir_id = self.tcx().hir().local_def_id_to_hir_id(local_def_id);\n-        let node = self.tcx().hir().get(hir_id);\n-        let fn_kind = node.fn_kind()?;\n-        Some(fn_kind.asyncness())\n-    }\n-\n     // Here, we check for the case where the anonymous region\n     // is in the return type as written by the user.\n     // FIXME(#42703) - Need to handle certain cases here."}, {"sha": "8f602a1492ad2ff02765b189b8ebc33f45a7c556", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=698631e16c390c29bacc778e35aba1dc27bed57f", "patch": "@@ -2,14 +2,12 @@ error[E0623]: lifetime mismatch\n   --> $DIR/issue-63388-1.rs:14:9\n    |\n LL |         &'a self, foo: &dyn Foo\n-   |                        -------- this parameter and the returned future are declared with different lifetimes...\n+   |                        -------- this parameter and the return type are declared with different lifetimes...\n LL |     ) -> &dyn Foo\n    |          --------\n-   |          |\n-   |          this `async fn` implicitly returns an `impl Future<Output = &dyn Foo>`\n LL |     {\n LL |         foo\n-   |         ^^^ ...but data from `foo` is held across an await point here\n+   |         ^^^ ...but data from `foo` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "149692a2c6998e29981b192df521a48fa354c480", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=698631e16c390c29bacc778e35aba1dc27bed57f", "patch": "@@ -4,9 +4,8 @@ error[E0623]: lifetime mismatch\n LL | async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n    |                                                      ------     ^^^^^^^^^^^^^^^^^^^\n    |                                                      |          |\n-   |                                                      |          ...but data from `a` is held across an await point here\n-   |                                                      |          this `async fn` implicitly returns an `impl Future<Output = impl Trait<'a> + 'b>`\n-   |                                                      this parameter and the returned future are declared with different lifetimes...\n+   |                                                      |          ...but data from `a` is returned here\n+   |                                                      this parameter and the return type are declared with different lifetimes...\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ret-impl-trait-one.rs:16:65"}, {"sha": "299a2d2f2d3de6f9b21ac115ab6c9b70b24f1cbe", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=698631e16c390c29bacc778e35aba1dc27bed57f", "patch": "@@ -2,28 +2,25 @@ error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                                    ----     ----   ^ ...but data from `f` is held across an await point here\n-   |                                    |        |\n-   |                                    |        this `async fn` implicitly returns an `impl Future<Output = &Foo>`\n-   |                                    this parameter and the returned future are declared with different lifetimes...\n+   |                                    ----     ----   ^ ...but data from `f` is returned here\n+   |                                    |\n+   |                                    this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:82\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                                     ----              -----------------          ^ ...but data from `f` is held across an await point here\n-   |                                     |                 |\n-   |                                     |                 this `async fn` implicitly returns an `impl Future<Output = (Pin<&Foo>, &Foo)>`\n-   |                                     this parameter and the returned future are declared with different lifetimes...\n+   |                                     ----              -----------------          ^ ...but data from `f` is returned here\n+   |                                     |\n+   |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                                               ------     ---   ^^^ ...but data from `arg` is held across an await point here\n-   |                                               |          |\n-   |                                               |          this `async fn` implicitly returns an `impl Future<Output = &()>`\n-   |                                               this parameter and the returned future are declared with different lifetimes...\n+   |                                               ------     ---   ^^^ ...but data from `arg` is returned here\n+   |                                               |\n+   |                                               this parameter and the return type are declared with different lifetimes...\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7448e8484b47a1af7b5e7bfffe1c14dd802d8ce4", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=698631e16c390c29bacc778e35aba1dc27bed57f", "patch": "@@ -3,66 +3,60 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                 ----     ----\n-   |                                 |        |\n-   |                                 |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                 this parameter and the returned future are declared with different lifetimes...\n+   |                                 |\n+   |                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                       ----     ----\n-   |                                       |        |\n-   |                                       |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                       this parameter and the returned future are declared with different lifetimes...\n+   |                                       |\n+   |                                       this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                ----     ----\n-   |                                                |        |\n-   |                                                |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                this parameter and the returned future are declared with different lifetimes...\n+   |                                                |\n+   |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                ----     ----\n-   |                                                |        |\n-   |                                                |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                this parameter and the returned future are declared with different lifetimes...\n+   |                                                |\n+   |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                         ----     ----\n-   |                                                         |        |\n-   |                                                         |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                         this parameter and the returned future are declared with different lifetimes...\n+   |                                                         |\n+   |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                     ----     ----\n-   |                                                     |        |\n-   |                                                     |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                     this parameter and the returned future are declared with different lifetimes...\n+   |                                                     |\n+   |                                                     this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6056cc46d3d8a505346e9bfade02dba8ce145809", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=698631e16c390c29bacc778e35aba1dc27bed57f", "patch": "@@ -3,66 +3,60 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                                     ----     ----\n-   |                                     |        |\n-   |                                     |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                     this parameter and the returned future are declared with different lifetimes...\n+   |                                     |\n+   |                                     this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                           ----     ----\n-   |                                           |        |\n-   |                                           |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                           this parameter and the returned future are declared with different lifetimes...\n+   |                                           |\n+   |                                           this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                                    ----     ----\n-   |                                                    |        |\n-   |                                                    |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                    this parameter and the returned future are declared with different lifetimes...\n+   |                                                    |\n+   |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                                    ----     ----\n-   |                                                    |        |\n-   |                                                    |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                    this parameter and the returned future are declared with different lifetimes...\n+   |                                                    |\n+   |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                             ----     ----\n-   |                                                             |        |\n-   |                                                             |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                             this parameter and the returned future are declared with different lifetimes...\n+   |                                                             |\n+   |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                             ----     ----\n-   |                                                             |        |\n-   |                                                             |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                             this parameter and the returned future are declared with different lifetimes...\n+   |                                                             |\n+   |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "61034ae4d47b6792ec66874f9079af8558291364", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=698631e16c390c29bacc778e35aba1dc27bed57f", "patch": "@@ -3,55 +3,50 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                               ----     ----\n-   |                                               |        |\n-   |                                               |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                               this parameter and the returned future are declared with different lifetimes...\n+   |                                               |\n+   |                                               this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                        ----     ----\n-   |                                                        |        |\n-   |                                                        |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                        this parameter and the returned future are declared with different lifetimes...\n+   |                                                        |\n+   |                                                        this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                        ----     ----\n-   |                                                        |        |\n-   |                                                        |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                        this parameter and the returned future are declared with different lifetimes...\n+   |                                                        |\n+   |                                                        this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                 ----     ----\n-   |                                                                 |        |\n-   |                                                                 |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                                 this parameter and the returned future are declared with different lifetimes...\n+   |                                                                 |\n+   |                                                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                 ----     ----\n-   |                                                                 |        |\n-   |                                                                 |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                                 this parameter and the returned future are declared with different lifetimes...\n+   |                                                                 |\n+   |                                                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "0eab16e685d4c4fc618fd7962b55406c648311e2", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=698631e16c390c29bacc778e35aba1dc27bed57f", "patch": "@@ -3,77 +3,70 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                 ----     ----\n-   |                                 |        |\n-   |                                 |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                 this parameter and the returned future are declared with different lifetimes...\n+   |                                 |\n+   |                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:29:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                       ----     ----\n-   |                                       |        |\n-   |                                       |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                       this parameter and the returned future are declared with different lifetimes...\n+   |                                       |\n+   |                                       this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:33:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                ----     ----\n-   |                                                |        |\n-   |                                                |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                this parameter and the returned future are declared with different lifetimes...\n+   |                                                |\n+   |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:37:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                ----     ----\n-   |                                                |        |\n-   |                                                |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                this parameter and the returned future are declared with different lifetimes...\n+   |                                                |\n+   |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:41:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                         ----     ----\n-   |                                                         |        |\n-   |                                                         |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                         this parameter and the returned future are declared with different lifetimes...\n+   |                                                         |\n+   |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:45:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                         ----     ----\n-   |                                                         |        |\n-   |                                                         |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                         this parameter and the returned future are declared with different lifetimes...\n+   |                                                         |\n+   |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:49:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                                             ---     ---\n-   |                                                             |       |\n-   |                                                             |       this `async fn` implicitly returns an `impl Future<Output = &u8>`\n-   |                                                             this parameter and the returned future are declared with different lifetimes...\n+   |                                                             |\n+   |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 7 previous errors\n "}, {"sha": "aa1d7453e83e1c0fefc5a3123b57d143451f6e1f", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698631e16c390c29bacc778e35aba1dc27bed57f/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=698631e16c390c29bacc778e35aba1dc27bed57f", "patch": "@@ -3,55 +3,50 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                           ----     ----\n-   |                                           |        |\n-   |                                           |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                           this parameter and the returned future are declared with different lifetimes...\n+   |                                           |\n+   |                                           this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                                    ----     ----\n-   |                                                    |        |\n-   |                                                    |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                    this parameter and the returned future are declared with different lifetimes...\n+   |                                                    |\n+   |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                                    ----     ----\n-   |                                                    |        |\n-   |                                                    |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                    this parameter and the returned future are declared with different lifetimes...\n+   |                                                    |\n+   |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                             ----     ----\n-   |                                                             |        |\n-   |                                                             |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                             this parameter and the returned future are declared with different lifetimes...\n+   |                                                             |\n+   |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                         ----     ----\n-   |                                                         |        |\n-   |                                                         |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                                         this parameter and the returned future are declared with different lifetimes...\n+   |                                                         |\n+   |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is held across an await point here\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 5 previous errors\n "}]}