{"sha": "ad6eeb843b3f21bd51bc6d89d58a75367b7439df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNmVlYjg0M2IzZjIxYmQ1MWJjNmQ4OWQ1OGE3NTM2N2I3NDM5ZGY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-08-22T02:58:27Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-08-22T17:52:11Z"}, "message": "Don't do a bogus substitution on the transformed self ty for objects. Closes #8664.", "tree": {"sha": "9511b3a962e41022d209ab1fa15d81cd12174b0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9511b3a962e41022d209ab1fa15d81cd12174b0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad6eeb843b3f21bd51bc6d89d58a75367b7439df", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6eeb843b3f21bd51bc6d89d58a75367b7439df", "html_url": "https://github.com/rust-lang/rust/commit/ad6eeb843b3f21bd51bc6d89d58a75367b7439df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad6eeb843b3f21bd51bc6d89d58a75367b7439df/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97d2b44f8749479fdf1ba92d1cada6ae8594cf54", "url": "https://api.github.com/repos/rust-lang/rust/commits/97d2b44f8749479fdf1ba92d1cada6ae8594cf54", "html_url": "https://github.com/rust-lang/rust/commit/97d2b44f8749479fdf1ba92d1cada6ae8594cf54"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "c15f6a254457e66d8dcc91e8efece7af90514bf9", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad6eeb843b3f21bd51bc6d89d58a75367b7439df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6eeb843b3f21bd51bc6d89d58a75367b7439df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=ad6eeb843b3f21bd51bc6d89d58a75367b7439df", "patch": "@@ -938,9 +938,18 @@ impl<'self> LookupContext<'self> {\n \n         // static methods should never have gotten this far:\n         assert!(candidate.method_ty.explicit_self != sty_static);\n-        let transformed_self_ty =\n-            ty::subst(tcx, &candidate.rcvr_substs,\n-                      candidate.method_ty.transformed_self_ty.unwrap());\n+\n+        let transformed_self_ty = match candidate.origin {\n+            method_object(*) => {\n+                // For annoying reasons, we've already handled the\n+                // substitution for object calls.\n+                candidate.method_ty.transformed_self_ty.unwrap()\n+            }\n+            _ => {\n+                ty::subst(tcx, &candidate.rcvr_substs,\n+                          candidate.method_ty.transformed_self_ty.unwrap())\n+            }\n+        };\n \n         // Determine the values for the type parameters of the method.\n         // If they were not explicitly supplied, just construct fresh"}, {"sha": "12b6af295202d2feb2a075959ecdc5787828efe7", "filename": "src/test/run-pass/trait-object-generics.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ad6eeb843b3f21bd51bc6d89d58a75367b7439df/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad6eeb843b3f21bd51bc6d89d58a75367b7439df/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs?ref=ad6eeb843b3f21bd51bc6d89d58a75367b7439df", "patch": "@@ -8,6 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// test for #8664\n+\n+pub trait Trait2<A> {\n+    fn doit(&self);\n+}\n+\n+pub struct Impl<A1, A2, A3> {\n+    /*\n+     * With A2 we get the ICE:\n+     * task <unnamed> failed at 'index out of bounds: the len is 1 but the index is 1', /home/tortue/rust_compiler_newest/src/librustc/middle/subst.rs:58\n+     */\n+    t: ~Trait2<A2>\n+}\n+\n+impl<A1, A2, A3> Impl<A1, A2, A3> {\n+    pub fn step(&self) {\n+        self.t.doit()\n+    }\n+}\n+\n // test for #8601\n \n enum Type<T> { Constant }"}]}