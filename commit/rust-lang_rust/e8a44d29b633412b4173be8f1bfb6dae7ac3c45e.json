{"sha": "e8a44d29b633412b4173be8f1bfb6dae7ac3c45e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YTQ0ZDI5YjYzMzQxMmI0MTczYmU4ZjFiZmI2ZGFlN2FjM2M0NWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2016-09-10T21:33:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2016-09-16T16:30:51Z"}, "message": "librustc_mir: Remove `&*x` when `x` has a reference type.\n\nThis introduces a new `InstCombine` pass for us to place such peephole\noptimizations.", "tree": {"sha": "984f019eca3225a1d3e8522098c37e45812039f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/984f019eca3225a1d3e8522098c37e45812039f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8a44d29b633412b4173be8f1bfb6dae7ac3c45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a44d29b633412b4173be8f1bfb6dae7ac3c45e", "html_url": "https://github.com/rust-lang/rust/commit/e8a44d29b633412b4173be8f1bfb6dae7ac3c45e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8a44d29b633412b4173be8f1bfb6dae7ac3c45e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8394685b8385156fc4bc31cfbc693867e276d9d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8394685b8385156fc4bc31cfbc693867e276d9d7", "html_url": "https://github.com/rust-lang/rust/commit/8394685b8385156fc4bc31cfbc693867e276d9d7"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "14cd05279b1ca7e2a031da791524af006b38190e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8a44d29b633412b4173be8f1bfb6dae7ac3c45e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a44d29b633412b4173be8f1bfb6dae7ac3c45e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=e8a44d29b633412b4173be8f1bfb6dae7ac3c45e", "patch": "@@ -1017,13 +1017,16 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n         passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg::new(\"no-landing-pads\"));\n \n+        // From here on out, regions are gone.\n         passes.push_pass(box mir::transform::erase_regions::EraseRegions);\n \n         passes.push_pass(box mir::transform::add_call_guards::AddCallGuards);\n         passes.push_pass(box borrowck::ElaborateDrops);\n         passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n         passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg::new(\"elaborate-drops\"));\n \n+        // No lifetime analysis based on borrowing can be done from here on out.\n+        passes.push_pass(box mir::transform::instcombine::InstCombine::new());\n         passes.push_pass(box mir::transform::deaggregator::Deaggregator);\n \n         passes.push_pass(box mir::transform::add_call_guards::AddCallGuards);"}, {"sha": "a0331f03b019742e9d1b2f51486deee00187b756", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e8a44d29b633412b4173be8f1bfb6dae7ac3c45e/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a44d29b633412b4173be8f1bfb6dae7ac3c45e/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=e8a44d29b633412b4173be8f1bfb6dae7ac3c45e", "patch": "@@ -0,0 +1,110 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Performs various peephole optimizations.\n+\n+use rustc::mir::repr::{Location, Lvalue, Mir, Operand, ProjectionElem, Rvalue};\n+use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc::mir::visit::{MutVisitor, Visitor};\n+use rustc::ty::TyCtxt;\n+use rustc::util::nodemap::FnvHashSet;\n+use std::mem;\n+\n+pub struct InstCombine {\n+    optimizations: OptimizationList,\n+}\n+\n+impl InstCombine {\n+    pub fn new() -> InstCombine {\n+        InstCombine {\n+            optimizations: OptimizationList::default(),\n+        }\n+    }\n+}\n+\n+impl Pass for InstCombine {}\n+\n+impl<'tcx> MirPass<'tcx> for InstCombine {\n+    fn run_pass<'a>(&mut self,\n+                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    _: MirSource,\n+                    mir: &mut Mir<'tcx>) {\n+        // We only run when optimizing MIR (at any level).\n+        if tcx.sess.opts.debugging_opts.mir_opt_level == Some(0) {\n+            return\n+        }\n+\n+        // First, find optimization opportunities. This is done in a pre-pass to keep the MIR\n+        // read-only so that we can do global analyses on the MIR in the process (e.g.\n+        // `Lvalue::ty()`).\n+        {\n+            let mut optimization_finder = OptimizationFinder::new(mir, tcx);\n+            optimization_finder.visit_mir(mir);\n+            self.optimizations = optimization_finder.optimizations\n+        }\n+\n+        // Then carry out those optimizations.\n+        MutVisitor::visit_mir(&mut *self, mir);\n+    }\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for InstCombine {\n+    fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n+        if self.optimizations.and_stars.remove(&location) {\n+            debug!(\"Replacing `&*`: {:?}\", rvalue);\n+            let new_lvalue = match *rvalue {\n+                Rvalue::Ref(_, _, Lvalue::Projection(ref mut projection)) => {\n+                    mem::replace(&mut projection.base, Lvalue::ReturnPointer)\n+                }\n+                _ => bug!(\"Detected `&*` but didn't find `&*`!\"),\n+            };\n+            *rvalue = Rvalue::Use(Operand::Consume(new_lvalue))\n+        }\n+\n+        self.super_rvalue(rvalue, location)\n+    }\n+}\n+\n+/// Finds optimization opportunities on the MIR.\n+struct OptimizationFinder<'b, 'a, 'tcx:'a+'b> {\n+    mir: &'b Mir<'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    optimizations: OptimizationList,\n+}\n+\n+impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n+    fn new(mir: &'b Mir<'tcx>, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> OptimizationFinder<'b, 'a, 'tcx> {\n+        OptimizationFinder {\n+            mir: mir,\n+            tcx: tcx,\n+            optimizations: OptimizationList::default(),\n+        }\n+    }\n+}\n+\n+impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n+    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n+        if let Rvalue::Ref(_, _, Lvalue::Projection(ref projection)) = *rvalue {\n+            if let ProjectionElem::Deref = projection.elem {\n+                if projection.base.ty(self.mir, self.tcx).to_ty(self.tcx).is_region_ptr() {\n+                    self.optimizations.and_stars.insert(location);\n+                }\n+            }\n+        }\n+\n+        self.super_rvalue(rvalue, location)\n+    }\n+}\n+\n+#[derive(Default)]\n+struct OptimizationList {\n+    and_stars: FnvHashSet<Location>,\n+}\n+"}, {"sha": "e99b7a976e3e3205b712577ba986a51b5f0a2185", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a44d29b633412b4173be8f1bfb6dae7ac3c45e/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a44d29b633412b4173be8f1bfb6dae7ac3c45e/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e8a44d29b633412b4173be8f1bfb6dae7ac3c45e", "patch": "@@ -18,3 +18,5 @@ pub mod promote_consts;\n pub mod qualify_consts;\n pub mod dump_mir;\n pub mod deaggregator;\n+pub mod instcombine;\n+"}]}