{"sha": "ec84633b542a7c14e380c8fb77f20a84b12cb2fe", "node_id": "C_kwDOAAsO6NoAKGVjODQ2MzNiNTQyYTdjMTRlMzgwYzhmYjc3ZjIwYTg0YjEyY2IyZmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-17T14:58:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-17T14:58:00Z"}, "message": "Rollup merge of #90687 - jhpratt:const_panic, r=oli-obk\n\nPermit const panics in stable const contexts in stdlib\n\nWithout this change, it is not possible to use `panic!` and similar (including `assert!`) in stable const contexts inside of stdlib. See #89542 for a real-world case that currently fails for this reason. This does _not_ affect any user code.\n\nFor example, this snippet currently fails to compile:\n\n```rust\n#[stable(feature = \"foo\", since = \"1.0.0\")]\n#[rustc_const_stable(feature = \"foo\", since = \"1.0.0\")]\nconst fn foo() {\n    assert!(false);\n    assert!(false, \"foo\");\n}\n```\n\nWith the addition of `#[rustc_const_unstable]` to `core::panicking::panic`, the error no longer occurs. This snippet has been added verbatim in this PR as a UI test.\n\nTo avoid needing to add `#![feature(core_panic)]` to libcore, the two instances of direct calls to `core::panicking::panic` have been switched to use the `panic!` macro.\n\nI am requesting prioritization because this is holding up other stabilizations such as #89542 (which is otherwise ready to merge and succeeds with this change)", "tree": {"sha": "ef9a1bb8fee3ce053e1bd5a0cdcf7af983c0b8f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef9a1bb8fee3ce053e1bd5a0cdcf7af983c0b8f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec84633b542a7c14e380c8fb77f20a84b12cb2fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhlRh4CRBK7hj4Ov3rIwAATsUIADckFP/jGXcGjgZuzt0HHDgj\njf8NLHAJs2e7sP+mnzpDJakwqf1WrJE7I9HaXYNRUlE3Uio7hWqbk6VVi1wCG/rA\nzyscjzBniSkis9OKupZC15pAQdNss7YehLVRwYmKxnqHreuMWKqrplYH18oM0eMO\n7y6HPzE/aw3I9rjcJx8zJDB1xMoEFpY6DBSFBiJqqJhEUxSJQ5zRRicZgaXLMVOg\nsu8bM7Ur4K79qSd+g1wQTiJIv5Tv8t9386QL+WcN8p2yTkr7Os8U4teywr9uFAMr\nyO3ct+VKxIl/G+JSdpFL8fw3U+1oW7yjsWjmRSEpyM9jqLFsPw0U9SUSaSzvy8E=\n=DvG5\n-----END PGP SIGNATURE-----\n", "payload": "tree ef9a1bb8fee3ce053e1bd5a0cdcf7af983c0b8f2\nparent d7b86880d24ab7a7be60e6c3167142111c4d1970\nparent 6d2f8af1db238e0a2af73470be950bee65a692e6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637161080 +0100\ncommitter GitHub <noreply@github.com> 1637161080 +0100\n\nRollup merge of #90687 - jhpratt:const_panic, r=oli-obk\n\nPermit const panics in stable const contexts in stdlib\n\nWithout this change, it is not possible to use `panic!` and similar (including `assert!`) in stable const contexts inside of stdlib. See #89542 for a real-world case that currently fails for this reason. This does _not_ affect any user code.\n\nFor example, this snippet currently fails to compile:\n\n```rust\n#[stable(feature = \"foo\", since = \"1.0.0\")]\n#[rustc_const_stable(feature = \"foo\", since = \"1.0.0\")]\nconst fn foo() {\n    assert!(false);\n    assert!(false, \"foo\");\n}\n```\n\nWith the addition of `#[rustc_const_unstable]` to `core::panicking::panic`, the error no longer occurs. This snippet has been added verbatim in this PR as a UI test.\n\nTo avoid needing to add `#![feature(core_panic)]` to libcore, the two instances of direct calls to `core::panicking::panic` have been switched to use the `panic!` macro.\n\nI am requesting prioritization because this is holding up other stabilizations such as #89542 (which is otherwise ready to merge and succeeds with this change)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec84633b542a7c14e380c8fb77f20a84b12cb2fe", "html_url": "https://github.com/rust-lang/rust/commit/ec84633b542a7c14e380c8fb77f20a84b12cb2fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec84633b542a7c14e380c8fb77f20a84b12cb2fe/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7b86880d24ab7a7be60e6c3167142111c4d1970", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b86880d24ab7a7be60e6c3167142111c4d1970", "html_url": "https://github.com/rust-lang/rust/commit/d7b86880d24ab7a7be60e6c3167142111c4d1970"}, {"sha": "6d2f8af1db238e0a2af73470be950bee65a692e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2f8af1db238e0a2af73470be950bee65a692e6", "html_url": "https://github.com/rust-lang/rust/commit/6d2f8af1db238e0a2af73470be950bee65a692e6"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "eedea6562bd4db2ca8d42c8dbd71354c10b10813", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec84633b542a7c14e380c8fb77f20a84b12cb2fe/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec84633b542a7c14e380c8fb77f20a84b12cb2fe/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=ec84633b542a7c14e380c8fb77f20a84b12cb2fe", "patch": "@@ -36,6 +36,7 @@ use crate::panic::{Location, PanicInfo};\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n+#[rustc_const_unstable(feature = \"core_panic\", issue = \"none\")]\n #[lang = \"panic\"] // needed by codegen for panic on overflow and other `Assert` MIR terminators\n pub const fn panic(expr: &'static str) -> ! {\n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially"}, {"sha": "7330c86a11a29502eb477ed2ad79b236fccc2e12", "filename": "library/core/src/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec84633b542a7c14e380c8fb77f20a84b12cb2fe/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec84633b542a7c14e380c8fb77f20a84b12cb2fe/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=ec84633b542a7c14e380c8fb77f20a84b12cb2fe", "patch": "@@ -727,7 +727,7 @@ impl Duration {\n     pub const fn from_secs_f64(secs: f64) -> Duration {\n         match Duration::try_from_secs_f64(secs) {\n             Ok(v) => v,\n-            Err(e) => crate::panicking::panic(e.description()),\n+            Err(e) => panic!(\"{}\", e.description()),\n         }\n     }\n \n@@ -788,7 +788,7 @@ impl Duration {\n     pub const fn from_secs_f32(secs: f32) -> Duration {\n         match Duration::try_from_secs_f32(secs) {\n             Ok(v) => v,\n-            Err(e) => crate::panicking::panic(e.description()),\n+            Err(e) => panic!(\"{}\", e.description()),\n         }\n     }\n "}, {"sha": "94cf64fff1999a5a2d2ada2292d8b74d946bae3f", "filename": "src/test/ui/consts/const-eval/const_panic_stability.e2018.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec84633b542a7c14e380c8fb77f20a84b12cb2fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec84633b542a7c14e380c8fb77f20a84b12cb2fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr?ref=ec84633b542a7c14e380c8fb77f20a84b12cb2fe", "patch": "@@ -0,0 +1,16 @@\n+warning: panic message is not a string literal\n+  --> $DIR/const_panic_stability.rs:14:12\n+   |\n+LL |     panic!({ \"foo\" });\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(non_fmt_panics)]` on by default\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     panic!(\"{}\", { \"foo\" });\n+   |            +++++\n+\n+warning: 1 warning emitted\n+"}, {"sha": "9e8179181fd09cd4b1cc53e248c47b27a70876c5", "filename": "src/test/ui/consts/const-eval/const_panic_stability.e2021.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec84633b542a7c14e380c8fb77f20a84b12cb2fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec84633b542a7c14e380c8fb77f20a84b12cb2fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2021.stderr?ref=ec84633b542a7c14e380c8fb77f20a84b12cb2fe", "patch": "@@ -0,0 +1,13 @@\n+error: format argument must be a string literal\n+  --> $DIR/const_panic_stability.rs:14:12\n+   |\n+LL |     panic!({ \"foo\" });\n+   |            ^^^^^^^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     panic!(\"{}\", { \"foo\" });\n+   |            +++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "1aee6f27e2752384be92aa767d8ab27332b1553e", "filename": "src/test/ui/consts/const-eval/const_panic_stability.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec84633b542a7c14e380c8fb77f20a84b12cb2fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec84633b542a7c14e380c8fb77f20a84b12cb2fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.rs?ref=ec84633b542a7c14e380c8fb77f20a84b12cb2fe", "patch": "@@ -0,0 +1,17 @@\n+// revisions: e2018 e2021\n+//[e2018] edition:2018\n+//[e2021] edition:2021\n+//[e2018] check-pass\n+#![crate_type = \"lib\"]\n+#![stable(feature = \"foo\", since = \"1.0.0\")]\n+#![feature(staged_api)]\n+\n+#[stable(feature = \"foo\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"foo\", since = \"1.0.0\")]\n+const fn foo() {\n+    assert!(false);\n+    assert!(false, \"foo\");\n+    panic!({ \"foo\" });\n+    //[e2018]~^ WARNING panic message is not a string literal\n+    //[e2021]~^^ ERROR format argument must be a string literal\n+}"}]}