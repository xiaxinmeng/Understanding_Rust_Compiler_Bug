{"sha": "fb3f9271311cedcc75ec45c385305e3e66f8959e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiM2Y5MjcxMzExY2VkY2M3NWVjNDVjMzg1MzA1ZTNlNjZmODk1OWU=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-20T20:03:00Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-20T20:03:00Z"}, "message": "Move to intra doc links for std::thread documentation", "tree": {"sha": "2d3cd018346881623600508e7438db91a12ea90b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d3cd018346881623600508e7438db91a12ea90b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb3f9271311cedcc75ec45c385305e3e66f8959e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb3f9271311cedcc75ec45c385305e3e66f8959e", "html_url": "https://github.com/rust-lang/rust/commit/fb3f9271311cedcc75ec45c385305e3e66f8959e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb3f9271311cedcc75ec45c385305e3e66f8959e/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814d252417cec7cfca98d75db0b3d89555d6d676", "url": "https://api.github.com/repos/rust-lang/rust/commits/814d252417cec7cfca98d75db0b3d89555d6d676", "html_url": "https://github.com/rust-lang/rust/commit/814d252417cec7cfca98d75db0b3d89555d6d676"}], "stats": {"total": 127, "additions": 40, "deletions": 87}, "files": [{"sha": "a4562967f0bcb904ed738f8e8855bfe55acccabd", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb3f9271311cedcc75ec45c385305e3e66f8959e/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb3f9271311cedcc75ec45c385305e3e66f8959e/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=fb3f9271311cedcc75ec45c385305e3e66f8959e", "patch": "@@ -71,9 +71,7 @@ use crate::fmt;\n ///    not guard typically have a synthetic limit after which point no more\n ///    destructors are run.\n ///\n-/// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n-/// [`thread_local!`]: ../../std/macro.thread_local.html\n-/// [`Drop`]: ../../std/ops/trait.Drop.html\n+/// [`with`]: LocalKey::with\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct LocalKey<T: 'static> {\n     // This outer `LocalKey<T>` type is what's going to be stored in statics,\n@@ -118,10 +116,10 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n /// # fn main() {}\n /// ```\n ///\n-/// See [LocalKey documentation][`std::thread::LocalKey`] for more\n+/// See [`LocalKey` documentation][`std::thread::LocalKey`] for more\n /// information.\n ///\n-/// [`std::thread::LocalKey`]: ../std/thread/struct.LocalKey.html\n+/// [`std::thread::LocalKey`]: crate::thread::LocalKey\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(thread_local_internals)]"}, {"sha": "0b9849517c2526bbfb1a9a4fd5881eac7682cf6a", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 37, "deletions": 82, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/fb3f9271311cedcc75ec45c385305e3e66f8959e/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb3f9271311cedcc75ec45c385305e3e66f8959e/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=fb3f9271311cedcc75ec45c385305e3e66f8959e", "patch": "@@ -129,30 +129,19 @@\n //!\n //! Note that the stack size of the main thread is *not* determined by Rust.\n //!\n-//! [channels]: ../../std/sync/mpsc/index.html\n-//! [`Arc`]: ../../std/sync/struct.Arc.html\n-//! [`spawn`]: ../../std/thread/fn.spawn.html\n-//! [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-//! [`JoinHandle::thread`]: ../../std/thread/struct.JoinHandle.html#method.thread\n-//! [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n-//! [`Result`]: ../../std/result/enum.Result.html\n-//! [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-//! [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-//! [`panic!`]: ../../std/macro.panic.html\n-//! [`Builder`]: ../../std/thread/struct.Builder.html\n-//! [`Builder::stack_size`]: ../../std/thread/struct.Builder.html#method.stack_size\n-//! [`Builder::name`]: ../../std/thread/struct.Builder.html#method.name\n-//! [`thread::current`]: ../../std/thread/fn.current.html\n-//! [`thread::Result`]: ../../std/thread/type.Result.html\n-//! [`Thread`]: ../../std/thread/struct.Thread.html\n-//! [`park`]: ../../std/thread/fn.park.html\n-//! [`unpark`]: ../../std/thread/struct.Thread.html#method.unpark\n-//! [`Thread::name`]: ../../std/thread/struct.Thread.html#method.name\n-//! [`thread::park_timeout`]: ../../std/thread/fn.park_timeout.html\n-//! [`Cell`]: ../cell/struct.Cell.html\n-//! [`RefCell`]: ../cell/struct.RefCell.html\n-//! [`thread_local!`]: ../macro.thread_local.html\n-//! [`with`]: struct.LocalKey.html#method.with\n+//! [channels]: crate::sync::mpsc\n+//! [`join`]: JoinHandle::join\n+//! [`Result`]: crate::result::Result\n+//! [`Ok`]: crate::result::Result::Ok\n+//! [`Err`]: crate::result::Result::Err\n+//! [`thread::current`]: current\n+//! [`thread::Result`]: Result\n+//! [`unpark`]: Thread::unpark\n+//! [`Thread::name`]: Thread::name\n+//! [`thread::park_timeout`]: park_timeout\n+//! [`Cell`]: crate::cell::Cell\n+//! [`RefCell`]: crate::cell::RefCell\n+//! [`with`]: LocalKey::with\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -245,12 +234,12 @@ pub use self::local::statik::Key as __StaticLocalKeyInner;\n /// handler.join().unwrap();\n /// ```\n ///\n-/// [`thread::spawn`]: ../../std/thread/fn.spawn.html\n-/// [`stack_size`]: ../../std/thread/struct.Builder.html#method.stack_size\n-/// [`name`]: ../../std/thread/struct.Builder.html#method.name\n-/// [`spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n-/// [`io::Result`]: ../../std/io/type.Result.html\n-/// [`unwrap`]: ../../std/result/enum.Result.html#method.unwrap\n+/// [`stack_size`]: Builder::stack_size\n+/// [`name`]: Builder::name\n+/// [`spawn`]: Builder::spawn\n+/// [`thread::spawn`]: spawn\n+/// [`io::Result`]: crate::io::Result\n+/// [`unwrap`]: crate::result::Result::unwrap\n /// [naming-threads]: ./index.html#naming-threads\n /// [stack-size]: ./index.html#stack-size\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -355,9 +344,7 @@ impl Builder {\n     /// [`io::Result`] to capture any failure to create the thread at\n     /// the OS level.\n     ///\n-    /// [`spawn`]: ../../std/thread/fn.spawn.html\n-    /// [`io::Result`]: ../../std/io/type.Result.html\n-    /// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n+    /// [`io::Result`]: crate::io::Result\n     ///\n     /// # Panics\n     ///\n@@ -443,11 +430,7 @@ impl Builder {\n     /// handler.join().unwrap();\n     /// ```\n     ///\n-    /// [`spawn`]: ../../std/thread/fn.spawn.html\n-    /// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n-    /// [`io::Result`]: ../../std/io/type.Result.html\n-    /// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-    /// [`JoinHandle::join`]: ../../std/thread/struct.JoinHandle.html#method.join\n+    /// [`io::Result`]: crate::io::Result\n     #[unstable(feature = \"thread_spawn_unchecked\", issue = \"55132\")]\n     pub unsafe fn spawn_unchecked<'a, F, T>(self, f: F) -> io::Result<JoinHandle<T>>\n     where\n@@ -513,7 +496,7 @@ impl Builder {\n /// the main thread finishes). Additionally, the join handle provides a [`join`]\n /// method that can be used to join the child thread. If the child thread\n /// panics, [`join`] will return an [`Err`] containing the argument given to\n-/// [`panic`].\n+/// [`panic!`].\n ///\n /// This will create a thread using default parameters of [`Builder`], if you\n /// want to specify the stack size or the name of the thread, use this API\n@@ -600,15 +583,9 @@ impl Builder {\n /// println!(\"{}\", result);\n /// ```\n ///\n-/// [`channels`]: ../../std/sync/mpsc/index.html\n-/// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-/// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n-/// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-/// [`panic`]: ../../std/macro.panic.html\n-/// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n-/// [`Builder`]: ../../std/thread/struct.Builder.html\n-/// [`Send`]: ../../std/marker/trait.Send.html\n-/// [`Sync`]: ../../std/marker/trait.Sync.html\n+/// [`channels`]: crate::sync::mpsc\n+/// [`join`]: JoinHandle::join\n+/// [`Err`]: crate::result::Result::Err\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn spawn<F, T>(f: F) -> JoinHandle<T>\n where\n@@ -673,11 +650,8 @@ pub fn current() -> Thread {\n /// thread::yield_now();\n /// ```\n ///\n-/// [`channel`]: ../../std/sync/mpsc/index.html\n-/// [`spawn`]: ../../std/thread/fn.spawn.html\n-/// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n-/// [`Mutex`]: ../../std/sync/struct.Mutex.html\n-/// [`Condvar`]: ../../std/sync/struct.Condvar.html\n+/// [`channel`]: crate::sync::mpsc\n+/// [`join`]: JoinHandle::join\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn yield_now() {\n     imp::Thread::yield_now()\n@@ -723,8 +697,6 @@ pub fn yield_now() {\n ///     panic!()\n /// }\n /// ```\n-///\n-/// [Mutex]: ../../std/sync/struct.Mutex.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn panicking() -> bool {\n@@ -881,10 +853,8 @@ const NOTIFIED: usize = 2;\n /// parked_thread.join().unwrap();\n /// ```\n ///\n-/// [`Thread`]: ../../std/thread/struct.Thread.html\n-/// [`park`]: ../../std/thread/fn.park.html\n-/// [`unpark`]: ../../std/thread/struct.Thread.html#method.unpark\n-/// [`thread::park_timeout`]: ../../std/thread/fn.park_timeout.html\n+/// [`unpark`]: Thread::unpark\n+/// [`thread::park_timeout`]: park_timeout\n //\n // The implementation currently uses the trivial strategy of a Mutex+Condvar\n // with wakeup flag, which does not actually allow spurious wakeups. In the\n@@ -939,9 +909,6 @@ pub fn park() {\n /// amount of time waited to be precisely `ms` long.\n ///\n /// See the [park documentation][`park`] for more detail.\n-///\n-/// [`park_timeout`]: fn.park_timeout.html\n-/// [`park`]: ../../std/thread/fn.park.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.6.0\", reason = \"replaced by `std::thread::park_timeout`\")]\n pub fn park_timeout_ms(ms: u32) {\n@@ -986,8 +953,6 @@ pub fn park_timeout_ms(ms: u32) {\n ///     timeout_remaining = timeout - elapsed;\n /// }\n /// ```\n-///\n-/// [park]: fn.park.html\n #[stable(feature = \"park_timeout\", since = \"1.4.0\")]\n pub fn park_timeout(dur: Duration) {\n     let thread = current();\n@@ -1046,8 +1011,7 @@ pub fn park_timeout(dur: Duration) {\n /// assert!(thread::current().id() != other_thread_id);\n /// ```\n ///\n-/// [`id`]: ../../std/thread/struct.Thread.html#method.id\n-/// [`Thread`]: ../../std/thread/struct.Thread.html\n+/// [`id`]: Thread::id\n #[stable(feature = \"thread_id\", since = \"1.19.0\")]\n #[derive(Eq, PartialEq, Clone, Copy, Hash, Debug)]\n pub struct ThreadId(NonZeroU64);\n@@ -1124,12 +1088,7 @@ struct Inner {\n /// should instead use a function like `spawn` to create new threads, see the\n /// docs of [`Builder`] and [`spawn`] for more details.\n ///\n-/// [`Builder`]: ../../std/thread/struct.Builder.html\n-/// [`JoinHandle::thread`]: ../../std/thread/struct.JoinHandle.html#method.thread\n-/// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-/// [`thread::current`]: ../../std/thread/fn.current.html\n-/// [`spawn`]: ../../std/thread/fn.spawn.html\n-\n+/// [`thread::current`]: current\n pub struct Thread {\n     inner: Arc<Inner>,\n }\n@@ -1181,8 +1140,6 @@ impl Thread {\n     ///\n     /// parked_thread.join().unwrap();\n     /// ```\n-    ///\n-    /// [park]: fn.park.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unpark(&self) {\n         // To ensure the unparked thread will observe any writes we made\n@@ -1326,7 +1283,7 @@ impl fmt::Debug for Thread {\n /// }\n /// ```\n ///\n-/// [`Result`]: ../../std/result/enum.Result.html\n+/// [`Result`]: crate::result::Result\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type Result<T> = crate::result::Result<T, Box<dyn Any + Send + 'static>>;\n \n@@ -1421,9 +1378,8 @@ impl<T> JoinInner<T> {\n /// thread::sleep(Duration::from_millis(1000));\n /// ```\n ///\n-/// [`Clone`]: ../../std/clone/trait.Clone.html\n-/// [`thread::spawn`]: fn.spawn.html\n-/// [`thread::Builder::spawn`]: struct.Builder.html#method.spawn\n+/// [`thread::Builder::spawn`]: Builder::spawn\n+/// [`thread::spawn`]: spawn\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct JoinHandle<T>(JoinInner<T>);\n \n@@ -1462,11 +1418,10 @@ impl<T> JoinHandle<T> {\n     /// operations that happen after `join` returns.\n     ///\n     /// If the child thread panics, [`Err`] is returned with the parameter given\n-    /// to [`panic`].\n+    /// to [`panic!`].\n     ///\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`panic`]: ../../std/macro.panic.html\n-    /// [atomic memory orderings]: ../../std/sync/atomic/index.html\n+    /// [`Err`]: crate::result::Result::Err\n+    /// [atomic memory orderings]: crate::sync::atomic\n     ///\n     /// # Panics\n     ///"}]}