{"sha": "aee83d2ff11139db92d37d2afc4e1dba3d198012", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZTgzZDJmZjExMTM5ZGI5MmQzN2QyYWZjNGUxZGJhM2QxOTgwMTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-03T01:02:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-03T02:10:24Z"}, "message": "rt: Only wake up all schedulers when no tasks are left\n\nAt the moment there's not really any reason to be raising this signal,\nsince they schedulers wake up periodically anyway, but once we remove\nthe timer this will be how the schedulers know to exit.", "tree": {"sha": "a0f54d9ab1a01abdbd32bff764f808465ccf09ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0f54d9ab1a01abdbd32bff764f808465ccf09ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aee83d2ff11139db92d37d2afc4e1dba3d198012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aee83d2ff11139db92d37d2afc4e1dba3d198012", "html_url": "https://github.com/rust-lang/rust/commit/aee83d2ff11139db92d37d2afc4e1dba3d198012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aee83d2ff11139db92d37d2afc4e1dba3d198012/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c3c8d454d58b3bb4a79d36b76582f1f7761bc75", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3c8d454d58b3bb4a79d36b76582f1f7761bc75", "html_url": "https://github.com/rust-lang/rust/commit/5c3c8d454d58b3bb4a79d36b76582f1f7761bc75"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "aaf19f240c8f650b9ae0b70de932111308eeadf0", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee83d2ff11139db92d37d2afc4e1dba3d198012/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/aee83d2ff11139db92d37d2afc4e1dba3d198012/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=aee83d2ff11139db92d37d2afc4e1dba3d198012", "patch": "@@ -189,11 +189,9 @@ rust_kernel::release_task_id(rust_task_id id) {\n     task_table.remove(id);\n }\n \n-void rust_kernel::wakeup_schedulers() {\n+void rust_kernel::exit_schedulers() {\n     for(size_t i = 0; i < num_threads; ++i) {\n-        rust_scheduler *sched = threads[i];\n-        scoped_lock with(sched->lock);\n-        sched->lock.signal_all();\n+        threads[i]->exit();\n     }\n }\n "}, {"sha": "b82119cc5adb60a1d25d3ae0e0036d30630294aa", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee83d2ff11139db92d37d2afc4e1dba3d198012/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/aee83d2ff11139db92d37d2afc4e1dba3d198012/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=aee83d2ff11139db92d37d2afc4e1dba3d198012", "patch": "@@ -47,7 +47,7 @@ class rust_kernel {\n     bool is_deadlocked();\n \n     void signal_kernel_lock();\n-    void wakeup_schedulers();\n+    void exit_schedulers();\n \n     void log_all_scheduler_state();\n     void log(uint32_t level, char const *fmt, ...);"}, {"sha": "9005680dcc6668583b448abeaac7d3f0c26d3da8", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aee83d2ff11139db92d37d2afc4e1dba3d198012/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/aee83d2ff11139db92d37d2afc4e1dba3d198012/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=aee83d2ff11139db92d37d2afc4e1dba3d198012", "patch": "@@ -32,7 +32,8 @@ rust_scheduler::rust_scheduler(rust_kernel *kernel,\n     kernel(kernel),\n     id(id),\n     min_stack_size(kernel->env->min_stack_size),\n-    env(kernel->env)\n+    env(kernel->env),\n+    should_exit(false)\n {\n     LOGPTR(this, \"new dom\", (uintptr_t)this);\n     isaac_init(this, &rctx);\n@@ -160,8 +161,12 @@ rust_scheduler::reap_dead_tasks(int id) {\n         rust_task *task = dead_tasks_copy[i];\n         if (task) {\n             task->deref();\n-            sync::decrement(kernel->live_tasks);\n-            kernel->wakeup_schedulers();\n+            int live_tasks = sync::decrement(kernel->live_tasks);\n+            if (live_tasks == 0) {\n+                // There are no more tasks and there never will be.\n+                // Tell all the schedulers to exit.\n+                kernel->exit_schedulers();\n+            }\n         }\n     }\n     srv->free(dead_tasks_copy);\n@@ -236,7 +241,7 @@ rust_scheduler::start_main_loop() {\n \n     DLOG(this, dom, \"started domain loop %d\", id);\n \n-    while (kernel->live_tasks > 0) {\n+    while (!should_exit) {\n         A(this, kernel->is_deadlocked() == false, \"deadlock\");\n \n         DLOG(this, dom, \"worker %d, number_of_live_tasks = %d, total = %d\",\n@@ -375,6 +380,14 @@ rust_scheduler::get_task() {\n }\n #endif\n \n+void\n+rust_scheduler::exit() {\n+    A(this, !lock.lock_held_by_current_thread(), \"Shouldn't have lock\");\n+    scoped_lock with(lock);\n+    should_exit = true;\n+    lock.signal_all();\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "ee69af5479e85c4d987ee1bd39601a5a1b34505f", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aee83d2ff11139db92d37d2afc4e1dba3d198012/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/aee83d2ff11139db92d37d2afc4e1dba3d198012/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=aee83d2ff11139db92d37d2afc4e1dba3d198012", "patch": "@@ -91,6 +91,8 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n     rust_env *env;\n     context c_context;\n \n+    bool should_exit;\n+\n     // Only a pointer to 'name' is kept, so it must live as long as this\n     // domain.\n     rust_scheduler(rust_kernel *kernel, rust_srv *srv, int id);\n@@ -127,6 +129,9 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n     void place_task_in_tls(rust_task *task);\n \n     static rust_task *get_task();\n+\n+    // Tells the scheduler to exit it's scheduling loop and thread\n+    void exit();\n };\n \n inline rust_log &"}]}