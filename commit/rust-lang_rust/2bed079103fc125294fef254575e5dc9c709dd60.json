{"sha": "2bed079103fc125294fef254575e5dc9c709dd60", "node_id": "C_kwDOAAsO6NoAKDJiZWQwNzkxMDNmYzEyNTI5NGZlZjI1NDU3NWU1ZGM5YzcwOWRkNjA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-03T09:20:27Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T08:10:29Z"}, "message": "Compute layout  instead of manually procesisng the layout restriction attributes", "tree": {"sha": "337074c6ab8e62eec76fde3738c90adf604a6ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/337074c6ab8e62eec76fde3738c90adf604a6ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bed079103fc125294fef254575e5dc9c709dd60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bed079103fc125294fef254575e5dc9c709dd60", "html_url": "https://github.com/rust-lang/rust/commit/2bed079103fc125294fef254575e5dc9c709dd60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bed079103fc125294fef254575e5dc9c709dd60/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cbf17290923c04487e031f882846d1320832eff", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cbf17290923c04487e031f882846d1320832eff", "html_url": "https://github.com/rust-lang/rust/commit/5cbf17290923c04487e031f882846d1320832eff"}], "stats": {"total": 130, "additions": 99, "deletions": 31}, "files": [{"sha": "5bc130e14c5b5b9b8e0df19fe38ebcba4f872db9", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2bed079103fc125294fef254575e5dc9c709dd60/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bed079103fc125294fef254575e5dc9c709dd60/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=2bed079103fc125294fef254575e5dc9c709dd60", "patch": "@@ -52,7 +52,7 @@ use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, InnerSpan, Span};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{Abi, VariantIdx};\n use rustc_trait_selection::traits::{self, misc::can_type_implement_copy};\n \n use crate::nonstandard_style::{method_context, MethodLateContext};\n@@ -2418,9 +2418,9 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                 Self { span: Some(span), ..self }\n             }\n \n-            fn nested(self, nested: InitError) -> InitError {\n+            fn nested(self, nested: impl Into<Option<InitError>>) -> InitError {\n                 assert!(self.nested.is_none());\n-                Self { nested: Some(Box::new(nested)), ..self }\n+                Self { nested: nested.into().map(Box::new), ..self }\n             }\n         }\n \n@@ -2489,18 +2489,47 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n \n         fn variant_find_init_error<'tcx>(\n             cx: &LateContext<'tcx>,\n+            ty: Ty<'tcx>,\n             variant: &VariantDef,\n             substs: ty::SubstsRef<'tcx>,\n             descr: &str,\n             init: InitKind,\n         ) -> Option<InitError> {\n-            variant.fields.iter().find_map(|field| {\n+            let field_err = variant.fields.iter().find_map(|field| {\n                 ty_find_init_error(cx, field.ty(cx.tcx, substs), init).map(|err| {\n                     InitError::from(format!(\"in this {descr}\"))\n                         .spanned(cx.tcx.def_span(field.did))\n                         .nested(err)\n                 })\n-            })\n+            });\n+\n+            // Check if this ADT has a constrained layout (like `NonNull` and friends).\n+            let layout = cx.tcx.layout_of(cx.param_env.and(ty)).unwrap();\n+\n+            match &layout.abi {\n+                Abi::Scalar(scalar) | Abi::ScalarPair(scalar, _) => {\n+                    let range = scalar.valid_range(cx);\n+                    if !range.contains(0) {\n+                        Some(\n+                            InitError::from(format!(\"`{}` must be non-null\", ty)).nested(field_err),\n+                        )\n+                    } else if init == InitKind::Uninit && !scalar.is_always_valid(cx) {\n+                        // Prefer reporting on the fields over the entire struct for uninit,\n+                        // as the information bubbles out and it may be unclear why the type can't\n+                        // be null from just its outside signature.\n+                        Some(\n+                            InitError::from(format!(\n+                                \"`{}` must be initialized inside its custom valid range\",\n+                                ty,\n+                            ))\n+                            .nested(field_err),\n+                        )\n+                    } else {\n+                        field_err\n+                    }\n+                }\n+                _ => field_err,\n+            }\n         }\n \n         /// Return `Some` only if we are sure this type does *not*\n@@ -2540,36 +2569,11 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                 }\n                 // Recurse and checks for some compound types. (but not unions)\n                 Adt(adt_def, substs) if !adt_def.is_union() => {\n-                    // First check if this ADT has a layout attribute (like `NonNull` and friends).\n-                    use std::ops::Bound;\n-                    match cx.tcx.layout_scalar_valid_range(adt_def.did()) {\n-                        // We exploit here that `layout_scalar_valid_range` will never\n-                        // return `Bound::Excluded`.  (And we have tests checking that we\n-                        // handle the attribute correctly.)\n-                        // We don't add a span since users cannot declare such types anyway.\n-                        (Bound::Included(lo), Bound::Included(hi)) if 0 < lo && lo < hi => {\n-                            return Some(format!(\"`{}` must be non-null\", ty).into());\n-                        }\n-                        (Bound::Included(lo), Bound::Unbounded) if 0 < lo => {\n-                            return Some(format!(\"`{}` must be non-null\", ty).into());\n-                        }\n-                        (Bound::Included(_), _) | (_, Bound::Included(_))\n-                            if init == InitKind::Uninit =>\n-                        {\n-                            return Some(\n-                                format!(\n-                                    \"`{}` must be initialized inside its custom valid range\",\n-                                    ty,\n-                                )\n-                                .into(),\n-                            );\n-                        }\n-                        _ => {}\n-                    }\n                     // Handle structs.\n                     if adt_def.is_struct() {\n                         return variant_find_init_error(\n                             cx,\n+                            ty,\n                             adt_def.non_enum_variant(),\n                             substs,\n                             \"struct field\",\n@@ -2600,6 +2604,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                         // There is only one potentially inhabited variant. So we can recursively check that variant!\n                         return variant_find_init_error(\n                             cx,\n+                            ty,\n                             &first_variant.0,\n                             substs,\n                             \"field of the only potentially inhabited enum variant\","}, {"sha": "c5e99c9d25c90512acb046576ed83189fc90dc8b", "filename": "src/test/ui/lint/invalid_value.stderr", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/2bed079103fc125294fef254575e5dc9c709dd60/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bed079103fc125294fef254575e5dc9c709dd60/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr?ref=2bed079103fc125294fef254575e5dc9c709dd60", "patch": "@@ -34,6 +34,7 @@ LL |         let _val: Wrap<&'static T> = mem::zeroed();\n    |                                      this code causes undefined behavior when executed\n    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: `Wrap<&T>` must be non-null\n note: in this struct field\n   --> $DIR/invalid_value.rs:17:18\n    |\n@@ -50,6 +51,7 @@ LL |         let _val: Wrap<&'static T> = mem::uninitialized();\n    |                                      this code causes undefined behavior when executed\n    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: `Wrap<&T>` must be non-null\n note: in this struct field\n   --> $DIR/invalid_value.rs:17:18\n    |\n@@ -162,6 +164,7 @@ LL |         let _val: Ref = mem::zeroed();\n    |                         this code causes undefined behavior when executed\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: `Ref` must be non-null\n note: in this struct field\n   --> $DIR/invalid_value.rs:14:12\n    |\n@@ -178,6 +181,7 @@ LL |         let _val: Ref = mem::uninitialized();\n    |                         this code causes undefined behavior when executed\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: `Ref` must be non-null\n note: in this struct field\n   --> $DIR/invalid_value.rs:14:12\n    |\n@@ -216,6 +220,7 @@ LL |         let _val: Wrap<fn()> = mem::zeroed();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: `Wrap<fn()>` must be non-null\n note: in this struct field\n   --> $DIR/invalid_value.rs:17:18\n    |\n@@ -232,6 +237,7 @@ LL |         let _val: Wrap<fn()> = mem::uninitialized();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: `Wrap<fn()>` must be non-null\n note: in this struct field\n   --> $DIR/invalid_value.rs:17:18\n    |\n@@ -248,6 +254,7 @@ LL |         let _val: WrapEnum<fn()> = mem::zeroed();\n    |                                    this code causes undefined behavior when executed\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: `WrapEnum<fn()>` must be non-null\n note: in this field of the only potentially inhabited enum variant\n   --> $DIR/invalid_value.rs:18:28\n    |\n@@ -264,6 +271,7 @@ LL |         let _val: WrapEnum<fn()> = mem::uninitialized();\n    |                                    this code causes undefined behavior when executed\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: `WrapEnum<fn()>` must be non-null\n note: in this field of the only potentially inhabited enum variant\n   --> $DIR/invalid_value.rs:18:28\n    |\n@@ -285,6 +293,7 @@ note: in this struct field\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n+   = note: `RefPair` must be non-null\n note: in this struct field\n   --> $DIR/invalid_value.rs:15:16\n    |\n@@ -306,6 +315,7 @@ note: in this struct field\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n+   = note: `RefPair` must be non-null\n note: in this struct field\n   --> $DIR/invalid_value.rs:15:16\n    |\n@@ -334,6 +344,12 @@ LL |         let _val: NonNull<i32> = mem::uninitialized();\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::ptr::NonNull<i32>` must be non-null\n+note: in this struct field\n+  --> $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+   |\n+LL |     pointer: *const T,\n+   |     ^^^^^^^^^^^^^^^^^\n+   = note: raw pointers must not be uninitialized\n \n error: the type `(NonZeroU32, i32)` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:95:39\n@@ -356,6 +372,19 @@ LL |         let _val: (NonZeroU32, i32) = mem::uninitialized();\n    |                                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::num::NonZeroU32` must be non-null\n+note: in this struct field\n+  --> $SRC_DIR/core/src/num/nonzero.rs:LL:COL\n+   |\n+LL | / nonzero_integers! {\n+LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU8(u8);\n+LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU16(u16);\n+LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU32(u32);\n+...  |\n+LL | |     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIs...\n+LL | | }\n+   | |_^\n+   = note: integers must not be uninitialized\n+   = note: this error originates in the macro `nonzero_integers` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the type `*const dyn Send` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:98:37\n@@ -440,6 +469,7 @@ LL |         let _val: OneFruitNonZero = mem::zeroed();\n    |                                     this code causes undefined behavior when executed\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: `OneFruitNonZero` must be non-null\n note: in this field of the only potentially inhabited enum variant\n   --> $DIR/invalid_value.rs:39:12\n    |\n@@ -456,12 +486,26 @@ LL |         let _val: OneFruitNonZero = mem::uninitialized();\n    |                                     this code causes undefined behavior when executed\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: `OneFruitNonZero` must be non-null\n note: in this field of the only potentially inhabited enum variant\n   --> $DIR/invalid_value.rs:39:12\n    |\n LL |     Banana(NonZeroU32),\n    |            ^^^^^^^^^^\n    = note: `std::num::NonZeroU32` must be non-null\n+note: in this struct field\n+  --> $SRC_DIR/core/src/num/nonzero.rs:LL:COL\n+   |\n+LL | / nonzero_integers! {\n+LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU8(u8);\n+LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU16(u16);\n+LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU32(u32);\n+...  |\n+LL | |     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIs...\n+LL | | }\n+   | |_^\n+   = note: integers must not be uninitialized\n+   = note: this error originates in the macro `nonzero_integers` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:112:26\n@@ -483,6 +527,7 @@ LL |         let _val: Wrap<char> = mem::uninitialized();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: `Wrap<char>` must be initialized inside its custom valid range\n note: in this struct field\n   --> $DIR/invalid_value.rs:17:18\n    |\n@@ -500,6 +545,12 @@ LL |         let _val: NonBig = mem::uninitialized();\n    |                            help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `NonBig` must be initialized inside its custom valid range\n+note: in this struct field\n+  --> $DIR/invalid_value.rs:23:26\n+   |\n+LL | pub(crate) struct NonBig(u64);\n+   |                          ^^^\n+   = note: integers must not be uninitialized\n \n error: the type `Fruit` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:121:27\n@@ -581,6 +632,12 @@ LL |         let _val: WrapAroundRange = mem::uninitialized();\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `WrapAroundRange` must be initialized inside its custom valid range\n+note: in this struct field\n+  --> $DIR/invalid_value.rs:49:35\n+   |\n+LL | pub(crate) struct WrapAroundRange(u8);\n+   |                                   ^^\n+   = note: integers must not be uninitialized\n \n error: the type `Result<i32, i32>` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:144:38\n@@ -651,6 +708,12 @@ LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::ptr::NonNull<i32>` must be non-null\n+note: in this struct field\n+  --> $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+   |\n+LL |     pointer: *const T,\n+   |     ^^^^^^^^^^^^^^^^^\n+   = note: raw pointers must not be uninitialized\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:159:26"}]}