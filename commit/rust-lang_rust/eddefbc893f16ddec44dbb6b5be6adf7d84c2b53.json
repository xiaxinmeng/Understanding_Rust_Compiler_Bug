{"sha": "eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZGVmYmM4OTNmMTZkZGVjNDRkYmI2YjViZTZhZGY3ZDg0YzJiNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-05T10:06:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-05T10:06:50Z"}, "message": "auto merge of #5212 : thestinger/rust/iter, r=graydon\n\nA small step towards fixing #2827", "tree": {"sha": "4977e2930f39129932167c5ba7fe90cee0d3e684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4977e2930f39129932167c5ba7fe90cee0d3e684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "html_url": "https://github.com/rust-lang/rust/commit/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "html_url": "https://github.com/rust-lang/rust/commit/75c5bc90d2d3fb3e495b38c49c7cc96797795c72"}, {"sha": "af645e848713536ac3c0a0c52de7b4d96f96fbc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/af645e848713536ac3c0a0c52de7b4d96f96fbc6", "html_url": "https://github.com/rust-lang/rust/commit/af645e848713536ac3c0a0c52de7b4d96f96fbc6"}], "stats": {"total": 238, "additions": 120, "deletions": 118}, "files": [{"sha": "daa3036687c446bc0ad6fdd55c0332250a7d28a0", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -59,11 +59,11 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             pp_exact = parse_pp_exact(ln, testfile);\n         }\n \n-        do parse_aux_build(ln).iter |ab| {\n+        for parse_aux_build(ln).each |ab| {\n             aux_builds.push(*ab);\n         }\n \n-        do parse_exec_env(ln).iter |ee| {\n+        for parse_exec_env(ln).each |ee| {\n             exec_env.push(*ee);\n         }\n "}, {"sha": "54644281edf2cf993432df0b5137964db93ae611", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -132,8 +132,6 @@ pub mod container;\n /* Common data structures */\n \n pub mod option;\n-#[path=\"iter-trait.rs\"] #[merge = \"iter-trait/option.rs\"]\n-pub mod option_iter;\n pub mod result;\n pub mod either;\n pub mod dvec;"}, {"sha": "cffb21c68094496d10bd2cff6d1c2539f3d4014b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -45,6 +45,7 @@ use cmp::{Eq,Ord};\n use kinds::Copy;\n use util;\n use num::Zero;\n+use iter::BaseIter;\n \n #[cfg(test)] use ptr;\n #[cfg(test)] use str;\n@@ -228,12 +229,6 @@ pub pure fn map_default<T, U>(opt: &r/Option<T>, def: U,\n     match *opt { None => def, Some(ref t) => f(t) }\n }\n \n-#[inline(always)]\n-pub pure fn iter<T>(opt: &r/Option<T>, f: fn(x: &r/T)) {\n-    //! Performs an operation on the contained value by reference\n-    match *opt { None => (), Some(ref t) => f(t) }\n-}\n-\n #[inline(always)]\n pub pure fn unwrap<T>(opt: Option<T>) -> T {\n     /*!\n@@ -281,6 +276,19 @@ pub pure fn expect<T>(opt: Option<T>, reason: &str) -> T {\n     }\n }\n \n+impl<T> BaseIter<T> for Option<T> {\n+    /// Performs an operation on the contained value by reference\n+    #[inline(always)]\n+    pure fn each(&self, f: fn(x: &self/T) -> bool) {\n+        match *self { None => (), Some(ref t) => { f(t); } }\n+    }\n+\n+    #[inline(always)]\n+    pure fn size_hint(&self) -> Option<uint> {\n+        if self.is_some() { Some(1) } else { Some(0) }\n+    }\n+}\n+\n pub impl<T> Option<T> {\n     /// Returns true if the option equals `none`\n     #[inline(always)]\n@@ -339,10 +347,6 @@ pub impl<T> Option<T> {\n         }\n     }\n \n-    /// Performs an operation on the contained value by reference\n-    #[inline(always)]\n-    pure fn iter(&self, f: fn(x: &self/T)) { iter(self, f) }\n-\n     /**\n     Gets an immutable reference to the value inside an option.\n \n@@ -476,7 +480,7 @@ fn test_option_dance() {\n     let x = Some(());\n     let mut y = Some(5);\n     let mut y2 = 0;\n-    do x.iter |_x| {\n+    for x.each |_x| {\n         y2 = swap_unwrap(&mut y);\n     }\n     assert y2 == 5;"}, {"sha": "d61706092505686fc51ae9bd0a274b22bb619822", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -1241,7 +1241,7 @@ mod tests {\n         setenv(~\"HOME\", ~\"\");\n         assert os::homedir().is_none();\n \n-        oldhome.iter(|s| setenv(~\"HOME\", *s));\n+        for oldhome.each |s| { setenv(~\"HOME\", *s) }\n     }\n \n     #[test]"}, {"sha": "75b38d07ece33e16406387f9dbf4b50ae322d8f5", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -266,7 +266,7 @@ fn each_ancestor(list:        &mut AncestorList,\n                  * Step 3: Maybe unwind; compute return info for our caller.\n                  *##########################################################*/\n                 if need_unwind && !nobe_is_dead {\n-                    do bail_opt.iter |bail_blk| {\n+                    for bail_opt.each |bail_blk| {\n                         do with_parent_tg(&mut nobe.parent_group) |tg_opt| {\n                             (*bail_blk)(tg_opt)\n                         }\n@@ -315,7 +315,7 @@ impl Drop for TCB {\n         unsafe {\n             // If we are failing, the whole taskgroup needs to die.\n             if rt::rust_task_is_unwinding(self.me) {\n-                self.notifier.iter(|x| { x.failed = true; });\n+                for self.notifier.each |x| { x.failed = true; }\n                 // Take everybody down with us.\n                 do access_group(&self.tasks) |tg| {\n                     kill_taskgroup(tg, self.me, self.is_main);\n@@ -339,9 +339,7 @@ impl Drop for TCB {\n \n fn TCB(me: *rust_task, tasks: TaskGroupArc, ancestors: AncestorList,\n        is_main: bool, notifier: Option<AutoNotify>) -> TCB {\n-\n-    let notifier = notifier;\n-    notifier.iter(|x| { x.failed = false; });\n+    for notifier.each |x| { x.failed = false; }\n \n     TCB {\n         me: me,"}, {"sha": "c5cb66171302329377cd465e21d0443fb485fecb", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -710,7 +710,7 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n         let idx = encode_info_for_struct(ecx, ebml_w, path,\n                                          struct_def.fields, index);\n         /* Encode the dtor */\n-        do struct_def.dtor.iter |dtor| {\n+        for struct_def.dtor.each |dtor| {\n             index.push(entry {val: dtor.node.id, pos: ebml_w.writer.tell()});\n           encode_info_for_ctor(ecx,\n                                ebml_w,\n@@ -762,7 +762,7 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n         encode_region_param(ecx, ebml_w, item);\n         /* Encode the dtor */\n         /* Encode id for dtor */\n-        do struct_def.dtor.iter |dtor| {\n+        for struct_def.dtor.each |dtor| {\n             do ebml_w.wr_tag(tag_item_dtor) {\n                 encode_def_id(ebml_w, local_def(dtor.node.id));\n             }\n@@ -816,7 +816,7 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n             ebml_w.writer.write(str::to_bytes(def_to_str(method_def_id)));\n             ebml_w.end_tag();\n         }\n-        do opt_trait.iter() |associated_trait| {\n+        for opt_trait.each |associated_trait| {\n            encode_trait_ref(ebml_w, ecx, *associated_trait);\n         }\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));"}, {"sha": "016daf3ac9f5f3616abaf9fea0e0073263136234", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -854,15 +854,16 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n \n     debug!(\"Encoding side tables for id %d\", id);\n \n-    do option::iter(&tcx.def_map.find(&id)) |def| {\n+    for tcx.def_map.find(&id).each |def| {\n         do ebml_w.tag(c::tag_table_def) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n                 (*def).encode(&ebml_w)\n             }\n         }\n     }\n-    do option::iter(&tcx.node_types.find(&(id as uint))) |&ty| {\n+\n+    for tcx.node_types.find(&(id as uint)).each |&ty| {\n         do ebml_w.tag(c::tag_table_node_type) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n@@ -871,7 +872,7 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n         }\n     }\n \n-    do option::iter(&tcx.node_type_substs.find(&id)) |tys| {\n+    for tcx.node_type_substs.find(&id).each |tys| {\n         do ebml_w.tag(c::tag_table_node_type_subst) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n@@ -880,7 +881,7 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n         }\n     }\n \n-    do option::iter(&tcx.freevars.find(&id)) |fv| {\n+    for tcx.freevars.find(&id).each |fv| {\n         do ebml_w.tag(c::tag_table_freevars) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n@@ -892,7 +893,7 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n     }\n \n     let lid = ast::def_id { crate: ast::local_crate, node: id };\n-    do option::iter(&tcx.tcache.find(&lid)) |tpbt| {\n+    for tcx.tcache.find(&lid).each |tpbt| {\n         do ebml_w.tag(c::tag_table_tcache) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n@@ -901,7 +902,7 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n         }\n     }\n \n-    do option::iter(&tcx.ty_param_bounds.find(&id)) |pbs| {\n+    for tcx.ty_param_bounds.find(&id).each |pbs| {\n         do ebml_w.tag(c::tag_table_param_bounds) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n@@ -915,7 +916,7 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n     // is what we actually use in trans, all modes will have been\n     // resolved.\n     //\n-    //option::iter(tcx.inferred_modes.find(&id)) {|m|\n+    //for tcx.inferred_modes.find(&id).each |m| {\n     //    ebml_w.tag(c::tag_table_inferred_modes) {||\n     //        ebml_w.id(id);\n     //        ebml_w.tag(c::tag_table_val) {||\n@@ -924,13 +925,13 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n     //    }\n     //}\n \n-    do option::iter(&maps.mutbl_map.find(&id)) |_m| {\n+    if maps.mutbl_map.contains_key(&id) {\n         do ebml_w.tag(c::tag_table_mutbl) {\n             ebml_w.id(id);\n         }\n     }\n \n-    do option::iter(&maps.last_use_map.find(&id)) |m| {\n+    for maps.last_use_map.find(&id).each |m| {\n         do ebml_w.tag(c::tag_table_last_use) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n@@ -941,7 +942,7 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n         }\n     }\n \n-    do option::iter(&maps.method_map.find(&id)) |mme| {\n+    for maps.method_map.find(&id).each |mme| {\n         do ebml_w.tag(c::tag_table_method_map) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n@@ -950,7 +951,7 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n         }\n     }\n \n-    do option::iter(&maps.vtable_map.find(&id)) |dr| {\n+    for maps.vtable_map.find(&id).each |dr| {\n         do ebml_w.tag(c::tag_table_vtable_map) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n@@ -959,7 +960,7 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n         }\n     }\n \n-    do option::iter(&tcx.adjustments.find(&id)) |adj| {\n+    for tcx.adjustments.find(&id).each |adj| {\n         do ebml_w.tag(c::tag_table_adjustments) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {"}, {"sha": "713a5f354e96d33d98a7a68030581d2e7df54e65", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -50,7 +50,7 @@ pub fn check_item(sess: Session,\n       }\n       item_enum(ref enum_definition, _) => {\n         for (*enum_definition).variants.each |var| {\n-            do option::iter(&var.node.disr_expr) |ex| {\n+            for var.node.disr_expr.each |ex| {\n                 (v.visit_expr)(*ex, true, v);\n             }\n         }"}, {"sha": "5e0831ecbb82bfe2ba53c06a64749eb890320a8a", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -362,7 +362,7 @@ pub fn missing_ctor(cx: @MatchCheckCtxt,\n       ty::ty_enum(eid, _) => {\n         let mut found = ~[];\n         for m.each |r| {\n-            do option::iter(&pat_ctor_id(cx, r[0])) |id| {\n+            for pat_ctor_id(cx, r[0]).each |id| {\n                 if !vec::contains(found, id) {\n                     found.push(/*bad*/copy *id);\n                 }"}, {"sha": "d5772383a0ad9066c356e9a85716dd5174fb1363", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -192,7 +192,7 @@ pub fn check_expr(e: @expr, cx: Context, v: visit::vt<Context>) {\n         expr_unary(*)|expr_binary(*)|expr_method_call(*) => e.callee_id,\n         _ => e.id\n     };\n-    do option::iter(&cx.tcx.node_type_substs.find(&type_parameter_id)) |ts| {\n+    for cx.tcx.node_type_substs.find(&type_parameter_id).each |ts| {\n         let bounds = match e.node {\n           expr_path(_) => {\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get(&e.id));\n@@ -253,7 +253,7 @@ pub fn check_expr(e: @expr, cx: Context, v: visit::vt<Context>) {\n fn check_ty(aty: @Ty, cx: Context, v: visit::vt<Context>) {\n     match aty.node {\n       ty_path(_, id) => {\n-        do option::iter(&cx.tcx.node_type_substs.find(&id)) |ts| {\n+        for cx.tcx.node_type_substs.find(&id).each |ts| {\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get(&id));\n             let bounds = ty::lookup_item_type(cx.tcx, did).bounds;\n             for vec::each2(*ts, *bounds) |ty, bound| {"}, {"sha": "563864bddd37eab7ba756b3814bbf04920dadec9", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -1101,7 +1101,7 @@ pub impl Liveness {\n \n     fn propagate_through_opt_expr(&self, opt_expr: Option<@expr>,\n                                   succ: LiveNode) -> LiveNode {\n-        do opt_expr.foldl(succ) |succ, expr| {\n+        do iter::foldl(&opt_expr, succ) |succ, expr| {\n             self.propagate_through_expr(*expr, *succ)\n         }\n     }"}, {"sha": "004d5ee14ad5b476c29467573d60402a36b939a3", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -1016,7 +1016,7 @@ pub impl Resolver {\n                         fmt!(\"duplicate definition of %s %s\",\n                              namespace_to_str(ns),\n                              *self.session.str_of(name)));\n-                    do child.span_for_namespace(ns).iter() |sp| {\n+                    for child.span_for_namespace(ns).each |sp| {\n                         self.session.span_note(*sp,\n                              fmt!(\"first definition of %s %s here:\",\n                                   namespace_to_str(ns),\n@@ -3457,7 +3457,7 @@ pub impl Resolver {\n             // then resolve the ty params\n             item_enum(ref enum_def, ref generics) => {\n                 for (*enum_def).variants.each() |variant| {\n-                    do variant.node.disr_expr.iter() |dis_expr| {\n+                    for variant.node.disr_expr.each |dis_expr| {\n                         // resolve the discriminator expr\n                         // as a constant\n                         self.with_constant_rib(|| {"}, {"sha": "ccea1a561e42fd4f702513feec9a137464719e5c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -1211,10 +1211,10 @@ pub fn new_block(cx: fn_ctxt, parent: Option<block>, +kind: block_kind,\n                            is_lpad,\n                            opt_node_info,\n                            cx);\n-        do option::iter(&parent) |cx| {\n+        for parent.each |cx| {\n             if cx.unreachable { Unreachable(bcx); }\n         };\n-        return bcx;\n+        bcx\n     }\n }\n \n@@ -1442,7 +1442,7 @@ pub fn alloc_local(cx: block, local: @ast::local) -> block {\n     };\n     let val = alloc_ty(cx, t);\n     if cx.sess().opts.debuginfo {\n-        do option::iter(&simple_name) |name| {\n+        for simple_name.each |name| {\n             str::as_c_str(*cx.ccx().sess.str_of(*name), |buf| {\n                 unsafe {\n                     llvm::LLVMSetValueName(val, buf)\n@@ -1451,7 +1451,7 @@ pub fn alloc_local(cx: block, local: @ast::local) -> block {\n         }\n     }\n     cx.fcx.lllocals.insert(local.node.id, local_mem(val));\n-    return cx;\n+    cx\n }\n \n \n@@ -2011,7 +2011,7 @@ pub fn trans_struct_dtor(ccx: @CrateContext,\n   /* Look up the parent class's def_id */\n   let mut class_ty = ty::lookup_item_type(tcx, parent_id).ty;\n   /* Substitute in the class type if necessary */\n-    do option::iter(&psubsts) |ss| {\n+  for psubsts.each |ss| {\n     class_ty = ty::subst_tps(tcx, ss.tys, ss.self_ty, class_ty);\n   }\n \n@@ -2028,7 +2028,7 @@ pub fn trans_struct_dtor(ccx: @CrateContext,\n \n   /* If we're monomorphizing, register the monomorphized decl\n      for the dtor */\n-    do option::iter(&hash_id) |h_id| {\n+  for hash_id.each |h_id| {\n     ccx.monomorphized.insert(*h_id, lldecl);\n   }\n   /* Translate the dtor body */\n@@ -2142,7 +2142,7 @@ pub fn trans_struct_def(ccx: @CrateContext, struct_def: @ast::struct_def,\n                         path: @ast_map::path,\n                         id: ast::node_id) {\n     // Translate the destructor.\n-    do option::iter(&struct_def.dtor) |dtor| {\n+    for struct_def.dtor.each |dtor| {\n         trans_struct_dtor(ccx, /*bad*/copy *path, &dtor.node.body,\n                          dtor.node.id, None, None, local_def(id));\n     };"}, {"sha": "8bc47531d7208645428dc59662a057557256e67b", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -535,7 +535,7 @@ pub fn trans_call_inner(\n         } else if ret_in_loop {\n             let ret_flag_result = bool_to_i1(bcx, Load(bcx, ret_flag.get()));\n             bcx = do with_cond(bcx, ret_flag_result) |bcx| {\n-                do option::iter(&copy bcx.fcx.loop_ret) |&(flagptr, _)| {\n+                for (copy bcx.fcx.loop_ret).each |&(flagptr, _)| {\n                     Store(bcx, C_bool(true), flagptr);\n                     Store(bcx, C_bool(false), bcx.fcx.llretptr);\n                 }"}, {"sha": "25ce2a499194e0ae3bf0f96ae7f51c137f7e50dd", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -288,7 +288,7 @@ pub fn build_closure(bcx0: block,\n \n     // If this is a `for` loop body, add two special environment\n     // variables:\n-    do option::iter(&include_ret_handle) |flagptr| {\n+    for include_ret_handle.each |flagptr| {\n         // Flag indicating we have returned (a by-ref bool):\n         let flag_datum = Datum {val: *flagptr, ty: ty::mk_bool(tcx),\n                                 mode: ByRef, source: ZeroMem};"}, {"sha": "44464810620be8b542e5c638b0f9fcc456385912", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -128,7 +128,7 @@ fn traverse_public_item(cx: ctx, item: @item) {\n         for struct_def.ctor_id.each |&ctor_id| {\n             cx.rmap.insert(ctor_id, ());\n         }\n-        do struct_def.dtor.iter |dtor| {\n+        for struct_def.dtor.each |dtor| {\n             cx.rmap.insert(dtor.node.id, ());\n             if generics.ty_params.len() > 0u ||\n                 attr::find_inline_attr(dtor.node.attrs) != attr::ia_none"}, {"sha": "1b3d8f463fb14408b4288103a72c60382f034f85", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -239,10 +239,10 @@ pub fn node_type_needs(cx: Context, use_: uint, id: node_id) {\n }\n \n pub fn mark_for_method_call(cx: Context, e_id: node_id, callee_id: node_id) {\n-    do option::iter(&cx.ccx.maps.method_map.find(&e_id)) |mth| {\n+    for cx.ccx.maps.method_map.find(&e_id).each |mth| {\n         match mth.origin {\n           typeck::method_static(did) => {\n-            do cx.ccx.tcx.node_type_substs.find(&callee_id).iter |ts| {\n+            for cx.ccx.tcx.node_type_substs.find(&callee_id).each |ts| {\n                 let type_uses = type_uses_for(cx.ccx, did, ts.len());\n                 for vec::each2(type_uses, *ts) |uses, subst| {\n                     type_needs(cx, *uses, *subst)\n@@ -291,7 +291,7 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n         }\n       }\n       expr_path(_) => {\n-        do cx.ccx.tcx.node_type_substs.find(&e.id).iter |ts| {\n+        for cx.ccx.tcx.node_type_substs.find(&e.id).each |ts| {\n             let id = ast_util::def_id_of_def(cx.ccx.tcx.def_map.get(&e.id));\n             let uses_for_ts = type_uses_for(cx.ccx, id, ts.len());\n             for vec::each2(uses_for_ts, *ts) |uses, subst| {\n@@ -377,7 +377,7 @@ pub fn handle_body(cx: Context, body: &blk) {\n         },\n         visit_block: |b, cx, v| {\n             visit::visit_block(b, cx, v);\n-            do option::iter(&b.node.expr) |e| {\n+            for b.node.expr.each |e| {\n                 node_type_needs(cx, use_repr, e.id);\n             }\n         },"}, {"sha": "644b2c5145441dccc8238b3e841e9a84fc32d857", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -870,7 +870,7 @@ fn mk_t_with_id(cx: ctxt, +st: sty, o_def_id: Option<ast::def_id>) -> t {\n     fn sflags(substs: &substs) -> uint {\n         let mut f = 0u;\n         for substs.tps.each |tt| { f |= get(*tt).flags; }\n-        substs.self_r.iter(|r| f |= rflags(*r));\n+        for substs.self_r.each |r| { f |= rflags(*r) }\n         return f;\n     }\n     match &st {"}, {"sha": "819918faff2c218ab753c7dd67e9b9fddce2e63d", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -181,11 +181,11 @@ pub fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::path,\n             tcx.sess.span_fatal(pat.span, s);\n         }\n \n-        do subpats.iter() |pats| {\n+        for subpats.each |pats| {\n             for vec::each2(*pats, arg_types) |subpat, arg_ty| {\n               check_pat(pcx, *subpat, *arg_ty);\n             }\n-        };\n+        }\n     } else if subpats_len > 0u {\n         tcx.sess.span_fatal\n             (pat.span, fmt!(\"this pattern has %u field%s, but the \\"}, {"sha": "6b637ee0884366c1f2b28cf44a3dc87782dd1fe5", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -535,7 +535,7 @@ pub fn check_struct(ccx: @mut CrateCtxt,\n     let tcx = ccx.tcx;\n     let self_ty = ty::node_id_to_type(tcx, id);\n \n-    do struct_def.dtor.iter() |dtor| {\n+    for struct_def.dtor.each |dtor| {\n         let class_t = SelfInfo {\n             self_ty: self_ty,\n             self_id: dtor.node.self_id,\n@@ -2817,7 +2817,7 @@ pub fn check_enum_variants(ccx: @mut CrateCtxt,\n                 variants: &mut ~[ty::VariantInfo]) {\n         let rty = ty::node_id_to_type(ccx.tcx, id);\n         for vs.each |v| {\n-            do v.node.disr_expr.iter |e_ref| {\n+            for v.node.disr_expr.each |e_ref| {\n                 let e = *e_ref;\n                 debug!(\"disr expr, checking %s\",\n                        pprust::expr_to_str(e, ccx.tcx.sess.intr()));"}, {"sha": "2d2be88de7f17b441fb96f6c0f0feb0ff94ce23b", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -205,7 +205,8 @@ pub impl CoherenceChecker {\n \n                 match item.node {\n                     item_impl(_, opt_trait, _, _) => {\n-                        self.check_implementation(item, opt_trait.to_vec());\n+                        self.check_implementation(item,\n+                                                  iter::to_vec(&opt_trait));\n                     }\n                     _ => {\n                         // Nothing to do.\n@@ -672,7 +673,7 @@ pub impl CoherenceChecker {\n                                 _ => ()\n                           }\n \n-                          do opt_trait.iter() |trait_ref| {\n+                          for opt_trait.each |trait_ref| {\n                                 // This is OK if and only if the trait was\n                                 // defined in this crate.\n "}, {"sha": "7aae70b0d6e1bc985f106ebe627ffa727cb1a72a", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -688,7 +688,7 @@ pub fn convert_struct(ccx: @mut CrateCtxt,\n                       id: ast::node_id) {\n     let tcx = ccx.tcx;\n \n-    do option::iter(&struct_def.dtor) |dtor| {\n+    for struct_def.dtor.each |dtor| {\n         // Write the dtor type\n         let t_dtor = ty::mk_bare_fn(\n             tcx,"}, {"sha": "3810b3070baa207521a89d5d1738bec3fad4827b", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -720,8 +720,9 @@ pub impl @mut InferCtxt {\n         self.tcx.sess.span_err(sp,\n            fmt!(\"%s%s\", mk_msg(self.ty_to_str(actual_ty)),\n                 error_str));\n-        err.iter(|err|\n-             ty::note_and_explain_type_err(self.tcx, *err));\n+        for err.each |err| {\n+            ty::note_and_explain_type_err(self.tcx, *err)\n+        }\n     }\n \n     fn report_mismatched_types(&self, sp: span, e: ty::t, a: ty::t,"}, {"sha": "a8d343f80987e7c761d3a0fa0955b1a06b953b80", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -528,15 +528,15 @@ pub impl<K: TotalOrd, V> TreeNode<K, V> {\n \n pure fn each<K: TotalOrd, V>(node: &r/Option<~TreeNode<K, V>>,\n                         f: fn(&(&r/K, &r/V)) -> bool) {\n-    do node.iter |x| {\n+    for node.each |x| {\n         each(&x.left, f);\n         if f(&(&x.key, &x.value)) { each(&x.right, f) }\n     }\n }\n \n pure fn each_reverse<K: TotalOrd, V>(node: &r/Option<~TreeNode<K, V>>,\n                                 f: fn(&(&r/K, &r/V)) -> bool) {\n-    do node.iter |x| {\n+    for node.each |x| {\n         each_reverse(&x.right, f);\n         if f(&(&x.key, &x.value)) { each_reverse(&x.left, f) }\n     }"}, {"sha": "680101e673c9571d06de9f7c047ea1ce9e6a7ba1", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -537,7 +537,7 @@ pub fn walk_pat(pat: @pat, it: fn(@pat)) {\n             for elts.each |p| {\n                 walk_pat(*p, it)\n             }\n-            do tail.iter |tail| {\n+            for tail.each |tail| {\n                 walk_pat(*tail, it)\n             }\n         }"}, {"sha": "e9ea5deda3f84888b9d9c210a24dd5bffdf897d9", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -294,7 +294,7 @@ fn highlight_lines(cm: @codemap::CodeMap,\n }\n \n fn print_macro_backtrace(cm: @codemap::CodeMap, sp: span) {\n-    do option::iter(&sp.expn_info) |ei| {\n+    for sp.expn_info.each |ei| {\n         let ss = option::map_default(&ei.callee.span, @~\"\",\n                                      |span| @cm.span_to_str(*span));\n         print_diagnostic(*ss, note,"}, {"sha": "2411012526206af13f36ec865f5febbd7baa16a4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -732,7 +732,7 @@ pub fn print_struct(s: @ps,\n         nbsp(s);\n         bopen(s);\n         hardbreak_if_not_bol(s);\n-        do struct_def.dtor.iter |dtor| {\n+        for struct_def.dtor.each |dtor| {\n           hardbreak_if_not_bol(s);\n           maybe_print_comment(s, dtor.span.lo);\n           print_outer_attributes(s, dtor.node.attrs);\n@@ -1271,10 +1271,10 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n       ast::expr_loop(ref blk, opt_ident) => {\n         head(s, ~\"loop\");\n         space(s.s);\n-        opt_ident.iter(|ident| {\n+        for opt_ident.each |ident| {\n             print_ident(s, *ident);\n             word_space(s, ~\":\");\n-        });\n+        }\n         print_block(s, blk);\n       }\n       ast::expr_match(expr, ref arms) => {\n@@ -1422,12 +1422,12 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n       ast::expr_break(opt_ident) => {\n         word(s.s, ~\"break\");\n         space(s.s);\n-        opt_ident.iter(|ident| {print_ident(s, *ident); space(s.s)});\n+        for opt_ident.each |ident| { print_ident(s, *ident); space(s.s) }\n       }\n       ast::expr_again(opt_ident) => {\n         word(s.s, ~\"loop\");\n         space(s.s);\n-        opt_ident.iter(|ident| {print_ident(s, *ident); space(s.s)});\n+        for opt_ident.each |ident| { print_ident(s, *ident); space(s.s) }\n       }\n       ast::expr_ret(result) => {\n         word(s.s, ~\"return\");\n@@ -1667,7 +1667,7 @@ pub fn print_pat(s: @ps, &&pat: @ast::pat, refutable: bool) {\n       ast::pat_vec(elts, tail) => {\n         word(s.s, ~\"[\");\n         commasep(s, inconsistent, elts, |s, p| print_pat(s, p, refutable));\n-        do option::iter(&tail) |tail| {\n+        for tail.each |tail| {\n             if vec::len(elts) != 0u { word_space(s, ~\",\"); }\n             word(s.s, ~\"..\");\n             print_pat(s, *tail, refutable);"}, {"sha": "4cc97dad97cf24c4aed9519b6144ea1b12d39870", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -220,7 +220,7 @@ pub fn visit_enum_def<E>(enum_definition: ast::enum_def,\n             }\n         }\n         // Visit the disr expr if it exists\n-        vr.node.disr_expr.iter(|ex| (v.visit_expr)(*ex, e, v));\n+        for vr.node.disr_expr.each |ex| { (v.visit_expr)(*ex, e, v) }\n     }\n }\n \n@@ -264,7 +264,7 @@ pub fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n     match p.node {\n         pat_enum(path, ref children) => {\n             visit_path(path, e, v);\n-            do children.iter |children| {\n+            for children.each |children| {\n                 for children.each |child| { (v.visit_pat)(*child, e, v); }\n             }\n         }\n@@ -289,7 +289,7 @@ pub fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n         },\n         pat_ident(_, path, ref inner) => {\n             visit_path(path, e, v);\n-            do inner.iter |subpat| { (v.visit_pat)(*subpat, e, v) }\n+            for inner.each |subpat| { (v.visit_pat)(*subpat, e, v) }\n         }\n         pat_lit(ex) => (v.visit_expr)(ex, e, v),\n         pat_range(e1, e2) => {\n@@ -301,7 +301,7 @@ pub fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n             for elts.each |elt| {\n                 (v.visit_pat)(*elt, e, v);\n             }\n-            do tail.iter |tail| {\n+            for tail.each |tail| {\n                 (v.visit_pat)(*tail, e, v);\n             }\n         }\n@@ -415,15 +415,15 @@ pub fn visit_struct_def<E>(\n     for sd.fields.each |f| {\n         (v.visit_struct_field)(*f, e, v);\n     }\n-    do sd.dtor.iter |dtor| {\n+    for sd.dtor.each |dtor| {\n         visit_struct_dtor_helper(\n             *dtor,\n             generics,\n             ast_util::local_def(id),\n             e,\n             v\n         )\n-    };\n+    }\n }\n \n pub fn visit_struct_field<E>(sf: @struct_field, e: E, v: vt<E>) {"}, {"sha": "d5801a743cb5c844a9f3c6e4de2a83ed8938b68c", "filename": "src/test/run-pass/iter-all.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-all.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n     assert [2u, 4u].all(is_even);\n     assert [].all(is_even);\n \n-    assert !Some(1u).all(is_even);\n-    assert Some(2u).all(is_even);\n-    assert None.all(is_even);\n+    assert !iter::all(&Some(1u), is_even);\n+    assert iter::all(&Some(2u), is_even);\n+    assert iter::all(&None::<uint>, is_even);\n }"}, {"sha": "3a98a28dc244e2c9cbeff76e3b4a475b64ec6a90", "filename": "src/test/run-pass/iter-any.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-any.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n     assert [1u, 2u].any(is_even);\n     assert ![].any(is_even);\n \n-    assert !Some(1).any(is_even);\n-    assert Some(2).any(is_even);\n-    assert !None.any(is_even);\n+    assert !iter::any(&Some(1u), is_even);\n+    assert iter::any(&Some(2u), is_even);\n+    assert !iter::any(&None::<uint>, is_even);\n }"}, {"sha": "bac85c875175929b5de656f142db712cbb461215", "filename": "src/test/run-pass/iter-contains.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-contains.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n     assert [22u, 1u, 3u].contains(&22u) == true;\n     assert [1u, 22u, 3u].contains(&22u) == true;\n     assert [1u, 3u, 22u].contains(&22u) == true;\n-    assert None.contains(&22u) == false;\n-    assert Some(1u).contains(&22u) == false;\n-    assert Some(22u).contains(&22u) == true;\n+    assert iter::contains(&None::<uint>, &22u) == false;\n+    assert iter::contains(&Some(1u), &22u) == false;\n+    assert iter::contains(&Some(22u), &22u) == true;\n }"}, {"sha": "f2977655518f47297bbc621601a3cdac0cf9e26a", "filename": "src/test/run-pass/iter-count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-count.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -13,7 +13,7 @@ pub fn main() {\n     assert [1u, 3u].count(&22u) == 0u;\n     assert [22u, 1u, 3u].count(&22u) == 1u;\n     assert [22u, 1u, 22u].count(&22u) == 2u;\n-    assert None.count(&22u) == 0u;\n-    assert Some(1u).count(&22u) == 0u;\n-    assert Some(22u).count(&22u) == 1u;\n+    assert iter::count(&None::<uint>, &22u) == 0u;\n+    assert iter::count(&Some(1u), &22u) == 0u;\n+    assert iter::count(&Some(22u), &22u) == 1u;\n }"}, {"sha": "9746fab2eb818bda51208629d93da27dc01c8c98", "filename": "src/test/run-pass/iter-eachi.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-eachi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-eachi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-eachi.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -16,13 +16,12 @@ pub fn main() {\n     }\n     assert c == 5u;\n \n-    for None::<uint>.eachi |i, v| { fail!(); }\n+    for iter::eachi(&None::<uint>) |i, v| { fail!(); }\n \n     let mut c = 0u;\n-    for Some(1u).eachi |i, v| {\n+    for iter::eachi(&Some(1u)) |i, v| {\n         assert (i + 1u) == *v;\n         c += 1u;\n     }\n     assert c == 1u;\n-\n }"}, {"sha": "b654151079b9cc90e607611f946c8d84ae4a67d5", "filename": "src/test/run-pass/iter-filter-to-vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-filter-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-filter-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-filter-to-vec.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -13,7 +13,7 @@ fn is_even(x: &uint) -> bool { (*x % 2) == 0 }\n pub fn main() {\n     assert [1, 3].filter_to_vec(is_even) == ~[];\n     assert [1, 2, 3].filter_to_vec(is_even) == ~[2];\n-    assert None.filter_to_vec(is_even) == ~[];\n-    assert Some(1).filter_to_vec(is_even) == ~[];\n-    assert Some(2).filter_to_vec(is_even) == ~[2];\n+    assert iter::filter_to_vec(&None::<uint>, is_even) == ~[];\n+    assert iter::filter_to_vec(&Some(1u), is_even) == ~[];\n+    assert iter::filter_to_vec(&Some(2u), is_even) == ~[2];\n }"}, {"sha": "cf54ebf2fe9a658a02f08966da0b943d091a3e7b", "filename": "src/test/run-pass/iter-flat-map-to-vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-flat-map-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-flat-map-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-flat-map-to-vec.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -17,13 +17,13 @@ fn incd_if_even(x: &uint) -> Option<uint> {\n pub fn main() {\n     assert (~[1u, 3u]).flat_map_to_vec(repeat) == ~[1u, 1u, 3u, 3u];\n     assert (~[]).flat_map_to_vec(repeat) == ~[];\n-    assert None.flat_map_to_vec(repeat) == ~[];\n-    assert Some(1u).flat_map_to_vec(repeat) == ~[1u, 1u];\n-    assert Some(2u).flat_map_to_vec(repeat) == ~[2u, 2u];\n+    assert iter::flat_map_to_vec(&None::<uint>, repeat) == ~[];\n+    assert iter::flat_map_to_vec(&Some(1u), repeat) == ~[1u, 1u];\n+    assert iter::flat_map_to_vec(&Some(2u), repeat) == ~[2u, 2u];\n \n     assert (~[1u, 2u, 5u]).flat_map_to_vec(incd_if_even) == ~[3u];\n     assert (~[]).flat_map_to_vec(incd_if_even) == ~[];\n-    assert None.flat_map_to_vec(incd_if_even) == ~[];\n-    assert Some(1u).flat_map_to_vec(incd_if_even) == ~[];\n-    assert Some(2u).flat_map_to_vec(incd_if_even) == ~[3u];\n+    assert iter::flat_map_to_vec(&None::<uint>, incd_if_even) == ~[];\n+    assert iter::flat_map_to_vec(&Some(1u), incd_if_even) == ~[];\n+    assert iter::flat_map_to_vec(&Some(2u), incd_if_even) == ~[3u];\n }"}, {"sha": "41ac8282347da7f8c0a6dbf22c01808dfa659435", "filename": "src/test/run-pass/iter-foldl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-foldl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-foldl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-foldl.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -13,7 +13,7 @@ fn add(x: &float, y: &uint) -> float { *x + ((*y) as float) }\n pub fn main() {\n     assert [1u, 3u].foldl(20f, add) == 24f;\n     assert [].foldl(20f, add) == 20f;\n-    assert None.foldl(20f, add) == 20f;\n-    assert Some(1u).foldl(20f, add) == 21f;\n-    assert Some(2u).foldl(20f, add) == 22f;\n+    assert iter::foldl(&None::<uint>, 20f, add) == 20f;\n+    assert iter::foldl(&Some(1u), 20f, add) == 21f;\n+    assert iter::foldl(&Some(2u), 20f, add) == 22f;\n }"}, {"sha": "edbd372ad846f7c3e4d70938df49d5fc700cbfb0", "filename": "src/test/run-pass/iter-map-to-vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-map-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-map-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-map-to-vec.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -13,7 +13,7 @@ fn inc(x: &uint) -> uint { *x + 1 }\n pub fn main() {\n     assert [1, 3].map_to_vec(inc) == ~[2, 4];\n     assert [1, 2, 3].map_to_vec(inc) == ~[2, 3, 4];\n-    assert None.map_to_vec(inc) == ~[];\n-    assert Some(1).map_to_vec(inc) == ~[2];\n-    assert Some(2).map_to_vec(inc) == ~[3];\n+    assert iter::map_to_vec(&None::<uint>, inc) == ~[];\n+    assert iter::map_to_vec(&Some(1u), inc) == ~[2];\n+    assert iter::map_to_vec(&Some(2u), inc) == ~[3];\n }"}, {"sha": "1c95432b2b92c1c2849f3d13dde3ace2ae9ed1a7", "filename": "src/test/run-pass/iter-min-max.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-min-max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-min-max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-min-max.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -13,9 +13,9 @@ fn is_even(&&x: uint) -> bool { (x % 2u) == 0u }\n pub fn main() {\n     assert [1u, 3u].min() == 1u;\n     assert [3u, 1u].min() == 1u;\n-    assert Some(1u).min() == 1u;\n+    assert iter::min(&Some(1u)) == 1u;\n \n     assert [1u, 3u].max() == 3u;\n     assert [3u, 1u].max() == 3u;\n-    assert Some(3u).max() == 3u;\n+    assert iter::max(&Some(3u)) == 3u;\n }"}, {"sha": "ab102944b1e15be697a105dd76523f1dd2e68e44", "filename": "src/test/run-pass/iter-to-vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53/src%2Ftest%2Frun-pass%2Fiter-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-to-vec.rs?ref=eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "patch": "@@ -12,7 +12,7 @@ pub fn main() {\n     assert [1u, 3u].to_vec() == ~[1u, 3u];\n     let e: ~[uint] = ~[];\n     assert e.to_vec() == ~[];\n-    assert None::<uint>.to_vec() == ~[];\n-    assert Some(1u).to_vec() == ~[1u];\n-    assert Some(2u).to_vec() == ~[2u];\n+    assert iter::to_vec(&None::<uint>) == ~[];\n+    assert iter::to_vec(&Some(1u)) == ~[1u];\n+    assert iter::to_vec(&Some(2u)) == ~[2u];\n }"}]}