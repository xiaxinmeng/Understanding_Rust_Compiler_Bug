{"sha": "e2fdeecc22367d70451a6051f02a876e5ff7d80f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZmRlZWNjMjIzNjdkNzA0NTFhNjA1MWYwMmE4NzZlNWZmN2Q4MGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-03T16:06:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-03T16:06:39Z"}, "message": "Auto merge of #5677 - lzutao:checked_conv, r=matthiaskrgr\n\n Fix false negative of `checked_conversion` lint\n\nCloses  #5675\nchangelog: none", "tree": {"sha": "f65e2a009af3d6572d6279eccad955c8c5c586ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f65e2a009af3d6572d6279eccad955c8c5c586ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2fdeecc22367d70451a6051f02a876e5ff7d80f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2fdeecc22367d70451a6051f02a876e5ff7d80f", "html_url": "https://github.com/rust-lang/rust/commit/e2fdeecc22367d70451a6051f02a876e5ff7d80f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2fdeecc22367d70451a6051f02a876e5ff7d80f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c833df69b361e63852a9e0c84d45b363a66c72e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c833df69b361e63852a9e0c84d45b363a66c72e", "html_url": "https://github.com/rust-lang/rust/commit/6c833df69b361e63852a9e0c84d45b363a66c72e"}, {"sha": "b39fd5f62f80cb9bb47ac44d7100f694e0c7301c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b39fd5f62f80cb9bb47ac44d7100f694e0c7301c", "html_url": "https://github.com/rust-lang/rust/commit/b39fd5f62f80cb9bb47ac44d7100f694e0c7301c"}], "stats": {"total": 388, "additions": 188, "deletions": 200}, "files": [{"sha": "e845ef99c7cc03877eca68e06a37e666e8864360", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e2fdeecc22367d70451a6051f02a876e5ff7d80f/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fdeecc22367d70451a6051f02a876e5ff7d80f/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=e2fdeecc22367d70451a6051f02a876e5ff7d80f", "patch": "@@ -58,24 +58,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CheckedConversions {\n             }\n         };\n \n-        if_chain! {\n-            if let Some(cv) = result;\n-            if let Some(to_type) = cv.to_type;\n-\n-            then {\n+        if let Some(cv) = result {\n+            if let Some(to_type) = cv.to_type {\n                 let mut applicability = Applicability::MachineApplicable;\n-                let snippet = snippet_with_applicability(cx, cv.expr_to_cast.span, \"_\", &mut\n-                                applicability);\n+                let snippet = snippet_with_applicability(cx, cv.expr_to_cast.span, \"_\", &mut applicability);\n                 span_lint_and_sugg(\n                     cx,\n                     CHECKED_CONVERSIONS,\n                     item.span,\n                     \"Checked cast can be simplified.\",\n                     \"try\",\n-                    format!(\"{}::try_from({}).is_ok()\",\n-                            to_type,\n-                            snippet),\n-                    applicability\n+                    format!(\"{}::try_from({}).is_ok()\", to_type, snippet),\n+                    applicability,\n                 );\n             }\n         }\n@@ -184,7 +178,7 @@ fn check_upper_bound<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<Conversion<'tcx>> {\n     if_chain! {\n          if let ExprKind::Binary(ref op, ref left, ref right) = &expr.kind;\n          if let Some((candidate, check)) = normalize_le_ge(op, left, right);\n-         if let Some((from, to)) = get_types_from_cast(check, MAX_VALUE, INTS);\n+         if let Some((from, to)) = get_types_from_cast(check, INTS, \"max_value\", \"MAX\");\n \n          then {\n              Conversion::try_new(candidate, from, to)\n@@ -224,18 +218,24 @@ fn check_lower_bound_zero<'a>(candidate: &'a Expr<'_>, check: &'a Expr<'_>) -> O\n \n /// Check for `expr >= (to_type::MIN as from_type)`\n fn check_lower_bound_min<'a>(candidate: &'a Expr<'_>, check: &'a Expr<'_>) -> Option<Conversion<'a>> {\n-    if let Some((from, to)) = get_types_from_cast(check, MIN_VALUE, SINTS) {\n+    if let Some((from, to)) = get_types_from_cast(check, SINTS, \"min_value\", \"MIN\") {\n         Conversion::try_new(candidate, from, to)\n     } else {\n         None\n     }\n }\n \n /// Tries to extract the from- and to-type from a cast expression\n-fn get_types_from_cast<'a>(expr: &'a Expr<'_>, func: &'a str, types: &'a [&str]) -> Option<(&'a str, &'a str)> {\n-    // `to_type::maxmin_value() as from_type`\n+fn get_types_from_cast<'a>(\n+    expr: &'a Expr<'_>,\n+    types: &'a [&str],\n+    func: &'a str,\n+    assoc_const: &'a str,\n+) -> Option<(&'a str, &'a str)> {\n+    // `to_type::max_value() as from_type`\n+    // or `to_type::MAX as from_type`\n     let call_from_cast: Option<(&Expr<'_>, &str)> = if_chain! {\n-        // to_type::maxmin_value(), from_type\n+        // to_type::max_value(), from_type\n         if let ExprKind::Cast(ref limit, ref from_type) = &expr.kind;\n         if let TyKind::Path(ref from_type_path) = &from_type.kind;\n         if let Some(from_sym) = int_ty_to_sym(from_type_path);\n@@ -247,17 +247,17 @@ fn get_types_from_cast<'a>(expr: &'a Expr<'_>, func: &'a str, types: &'a [&str])\n         }\n     };\n \n-    // `from_type::from(to_type::maxmin_value())`\n+    // `from_type::from(to_type::max_value())`\n     let limit_from: Option<(&Expr<'_>, &str)> = call_from_cast.or_else(|| {\n         if_chain! {\n-            // `from_type::from, to_type::maxmin_value()`\n+            // `from_type::from, to_type::max_value()`\n             if let ExprKind::Call(ref from_func, ref args) = &expr.kind;\n-            // `to_type::maxmin_value()`\n+            // `to_type::max_value()`\n             if args.len() == 1;\n             if let limit = &args[0];\n             // `from_type::from`\n             if let ExprKind::Path(ref path) = &from_func.kind;\n-            if let Some(from_sym) = get_implementing_type(path, INTS, FROM);\n+            if let Some(from_sym) = get_implementing_type(path, INTS, \"from\");\n \n             then {\n                 Some((limit, from_sym))\n@@ -268,22 +268,26 @@ fn get_types_from_cast<'a>(expr: &'a Expr<'_>, func: &'a str, types: &'a [&str])\n     });\n \n     if let Some((limit, from_type)) = limit_from {\n-        if_chain! {\n-            if let ExprKind::Call(ref fun_name, _) = &limit.kind;\n-            // `to_type, maxmin_value`\n-            if let ExprKind::Path(ref path) = &fun_name.kind;\n-            // `to_type`\n-            if let Some(to_type) = get_implementing_type(path, types, func);\n-\n-            then {\n-                Some((from_type, to_type))\n-            } else {\n-                None\n-            }\n+        match limit.kind {\n+            // `from_type::from(_)`\n+            ExprKind::Call(path, _) => {\n+                if let ExprKind::Path(ref path) = path.kind {\n+                    // `to_type`\n+                    if let Some(to_type) = get_implementing_type(path, types, func) {\n+                        return Some((from_type, to_type));\n+                    }\n+                }\n+            },\n+            // `to_type::MAX`\n+            ExprKind::Path(ref path) => {\n+                if let Some(to_type) = get_implementing_type(path, types, assoc_const) {\n+                    return Some((from_type, to_type));\n+                }\n+            },\n+            _ => {},\n         }\n-    } else {\n-        None\n-    }\n+    };\n+    None\n }\n \n /// Gets the type which implements the called function\n@@ -336,10 +340,6 @@ fn normalize_le_ge<'a>(op: &BinOp, left: &'a Expr<'a>, right: &'a Expr<'a>) -> O\n }\n \n // Constants\n-const FROM: &str = \"from\";\n-const MAX_VALUE: &str = \"max_value\";\n-const MIN_VALUE: &str = \"min_value\";\n-\n const UINTS: &[&str] = &[\"u8\", \"u16\", \"u32\", \"u64\", \"usize\"];\n const SINTS: &[&str] = &[\"i8\", \"i16\", \"i32\", \"i64\", \"isize\"];\n const INTS: &[&str] = &[\"u8\", \"u16\", \"u32\", \"u64\", \"usize\", \"i8\", \"i16\", \"i32\", \"i64\", \"isize\"];"}, {"sha": "12290db3dcf52adb00bbb3232d74234be2ab06fc", "filename": "tests/ui/checked_conversions.fixed", "status": "modified", "additions": 38, "deletions": 68, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/e2fdeecc22367d70451a6051f02a876e5ff7d80f/tests%2Fui%2Fchecked_conversions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2fdeecc22367d70451a6051f02a876e5ff7d80f/tests%2Fui%2Fchecked_conversions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.fixed?ref=e2fdeecc22367d70451a6051f02a876e5ff7d80f", "patch": "@@ -1,106 +1,76 @@\n // run-rustfix\n \n+#![allow(\n+    clippy::cast_lossless,\n+    // Int::max_value will be deprecated in the future\n+    deprecated,\n+)]\n #![warn(clippy::checked_conversions)]\n-#![allow(clippy::cast_lossless)]\n-#![allow(dead_code)]\n+\n use std::convert::TryFrom;\n \n // Positive tests\n \n // Signed to unsigned\n \n-fn i64_to_u32(value: i64) -> Option<u32> {\n-    if u32::try_from(value).is_ok() {\n-        Some(value as u32)\n-    } else {\n-        None\n-    }\n+pub fn i64_to_u32(value: i64) {\n+    let _ = u32::try_from(value).is_ok();\n+    let _ = u32::try_from(value).is_ok();\n }\n \n-fn i64_to_u16(value: i64) -> Option<u16> {\n-    if u16::try_from(value).is_ok() {\n-        Some(value as u16)\n-    } else {\n-        None\n-    }\n+pub fn i64_to_u16(value: i64) {\n+    let _ = u16::try_from(value).is_ok();\n+    let _ = u16::try_from(value).is_ok();\n }\n \n-fn isize_to_u8(value: isize) -> Option<u8> {\n-    if u8::try_from(value).is_ok() {\n-        Some(value as u8)\n-    } else {\n-        None\n-    }\n+pub fn isize_to_u8(value: isize) {\n+    let _ = u8::try_from(value).is_ok();\n+    let _ = u8::try_from(value).is_ok();\n }\n \n // Signed to signed\n \n-fn i64_to_i32(value: i64) -> Option<i32> {\n-    if i32::try_from(value).is_ok() {\n-        Some(value as i32)\n-    } else {\n-        None\n-    }\n+pub fn i64_to_i32(value: i64) {\n+    let _ = i32::try_from(value).is_ok();\n+    let _ = i32::try_from(value).is_ok();\n }\n \n-fn i64_to_i16(value: i64) -> Option<i16> {\n-    if i16::try_from(value).is_ok() {\n-        Some(value as i16)\n-    } else {\n-        None\n-    }\n+pub fn i64_to_i16(value: i64) {\n+    let _ = i16::try_from(value).is_ok();\n+    let _ = i16::try_from(value).is_ok();\n }\n \n // Unsigned to X\n \n-fn u32_to_i32(value: u32) -> Option<i32> {\n-    if i32::try_from(value).is_ok() {\n-        Some(value as i32)\n-    } else {\n-        None\n-    }\n+pub fn u32_to_i32(value: u32) {\n+    let _ = i32::try_from(value).is_ok();\n+    let _ = i32::try_from(value).is_ok();\n }\n \n-fn usize_to_isize(value: usize) -> isize {\n-    if isize::try_from(value).is_ok() && value as i32 == 5 {\n-        5\n-    } else {\n-        1\n-    }\n+pub fn usize_to_isize(value: usize) {\n+    let _ = isize::try_from(value).is_ok() && value as i32 == 5;\n+    let _ = isize::try_from(value).is_ok() && value as i32 == 5;\n }\n \n-fn u32_to_u16(value: u32) -> isize {\n-    if u16::try_from(value).is_ok() && value as i32 == 5 {\n-        5\n-    } else {\n-        1\n-    }\n+pub fn u32_to_u16(value: u32) {\n+    let _ = u16::try_from(value).is_ok() && value as i32 == 5;\n+    let _ = u16::try_from(value).is_ok() && value as i32 == 5;\n }\n \n // Negative tests\n \n-fn no_i64_to_i32(value: i64) -> Option<i32> {\n-    if value <= (i32::max_value() as i64) && value >= 0 {\n-        Some(value as i32)\n-    } else {\n-        None\n-    }\n+pub fn no_i64_to_i32(value: i64) {\n+    let _ = value <= (i32::max_value() as i64) && value >= 0;\n+    let _ = value <= (i32::MAX as i64) && value >= 0;\n }\n \n-fn no_isize_to_u8(value: isize) -> Option<u8> {\n-    if value <= (u8::max_value() as isize) && value >= (u8::min_value() as isize) {\n-        Some(value as u8)\n-    } else {\n-        None\n-    }\n+pub fn no_isize_to_u8(value: isize) {\n+    let _ = value <= (u8::max_value() as isize) && value >= (u8::min_value() as isize);\n+    let _ = value <= (u8::MAX as isize) && value >= (u8::MIN as isize);\n }\n \n-fn i8_to_u8(value: i8) -> Option<u8> {\n-    if value >= 0 {\n-        Some(value as u8)\n-    } else {\n-        None\n-    }\n+pub fn i8_to_u8(value: i8) {\n+    let _ = value >= 0;\n }\n \n fn main() {}"}, {"sha": "895a301e82126084346a6c56231cf854e86a3f48", "filename": "tests/ui/checked_conversions.rs", "status": "modified", "additions": 38, "deletions": 68, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/e2fdeecc22367d70451a6051f02a876e5ff7d80f/tests%2Fui%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fdeecc22367d70451a6051f02a876e5ff7d80f/tests%2Fui%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.rs?ref=e2fdeecc22367d70451a6051f02a876e5ff7d80f", "patch": "@@ -1,106 +1,76 @@\n // run-rustfix\n \n+#![allow(\n+    clippy::cast_lossless,\n+    // Int::max_value will be deprecated in the future\n+    deprecated,\n+)]\n #![warn(clippy::checked_conversions)]\n-#![allow(clippy::cast_lossless)]\n-#![allow(dead_code)]\n+\n use std::convert::TryFrom;\n \n // Positive tests\n \n // Signed to unsigned\n \n-fn i64_to_u32(value: i64) -> Option<u32> {\n-    if value <= (u32::max_value() as i64) && value >= 0 {\n-        Some(value as u32)\n-    } else {\n-        None\n-    }\n+pub fn i64_to_u32(value: i64) {\n+    let _ = value <= (u32::max_value() as i64) && value >= 0;\n+    let _ = value <= (u32::MAX as i64) && value >= 0;\n }\n \n-fn i64_to_u16(value: i64) -> Option<u16> {\n-    if value <= i64::from(u16::max_value()) && value >= 0 {\n-        Some(value as u16)\n-    } else {\n-        None\n-    }\n+pub fn i64_to_u16(value: i64) {\n+    let _ = value <= i64::from(u16::max_value()) && value >= 0;\n+    let _ = value <= i64::from(u16::MAX) && value >= 0;\n }\n \n-fn isize_to_u8(value: isize) -> Option<u8> {\n-    if value <= (u8::max_value() as isize) && value >= 0 {\n-        Some(value as u8)\n-    } else {\n-        None\n-    }\n+pub fn isize_to_u8(value: isize) {\n+    let _ = value <= (u8::max_value() as isize) && value >= 0;\n+    let _ = value <= (u8::MAX as isize) && value >= 0;\n }\n \n // Signed to signed\n \n-fn i64_to_i32(value: i64) -> Option<i32> {\n-    if value <= (i32::max_value() as i64) && value >= (i32::min_value() as i64) {\n-        Some(value as i32)\n-    } else {\n-        None\n-    }\n+pub fn i64_to_i32(value: i64) {\n+    let _ = value <= (i32::max_value() as i64) && value >= (i32::min_value() as i64);\n+    let _ = value <= (i32::MAX as i64) && value >= (i32::MIN as i64);\n }\n \n-fn i64_to_i16(value: i64) -> Option<i16> {\n-    if value <= i64::from(i16::max_value()) && value >= i64::from(i16::min_value()) {\n-        Some(value as i16)\n-    } else {\n-        None\n-    }\n+pub fn i64_to_i16(value: i64) {\n+    let _ = value <= i64::from(i16::max_value()) && value >= i64::from(i16::min_value());\n+    let _ = value <= i64::from(i16::MAX) && value >= i64::from(i16::MIN);\n }\n \n // Unsigned to X\n \n-fn u32_to_i32(value: u32) -> Option<i32> {\n-    if value <= i32::max_value() as u32 {\n-        Some(value as i32)\n-    } else {\n-        None\n-    }\n+pub fn u32_to_i32(value: u32) {\n+    let _ = value <= i32::max_value() as u32;\n+    let _ = value <= i32::MAX as u32;\n }\n \n-fn usize_to_isize(value: usize) -> isize {\n-    if value <= isize::max_value() as usize && value as i32 == 5 {\n-        5\n-    } else {\n-        1\n-    }\n+pub fn usize_to_isize(value: usize) {\n+    let _ = value <= isize::max_value() as usize && value as i32 == 5;\n+    let _ = value <= isize::MAX as usize && value as i32 == 5;\n }\n \n-fn u32_to_u16(value: u32) -> isize {\n-    if value <= u16::max_value() as u32 && value as i32 == 5 {\n-        5\n-    } else {\n-        1\n-    }\n+pub fn u32_to_u16(value: u32) {\n+    let _ = value <= u16::max_value() as u32 && value as i32 == 5;\n+    let _ = value <= u16::MAX as u32 && value as i32 == 5;\n }\n \n // Negative tests\n \n-fn no_i64_to_i32(value: i64) -> Option<i32> {\n-    if value <= (i32::max_value() as i64) && value >= 0 {\n-        Some(value as i32)\n-    } else {\n-        None\n-    }\n+pub fn no_i64_to_i32(value: i64) {\n+    let _ = value <= (i32::max_value() as i64) && value >= 0;\n+    let _ = value <= (i32::MAX as i64) && value >= 0;\n }\n \n-fn no_isize_to_u8(value: isize) -> Option<u8> {\n-    if value <= (u8::max_value() as isize) && value >= (u8::min_value() as isize) {\n-        Some(value as u8)\n-    } else {\n-        None\n-    }\n+pub fn no_isize_to_u8(value: isize) {\n+    let _ = value <= (u8::max_value() as isize) && value >= (u8::min_value() as isize);\n+    let _ = value <= (u8::MAX as isize) && value >= (u8::MIN as isize);\n }\n \n-fn i8_to_u8(value: i8) -> Option<u8> {\n-    if value >= 0 {\n-        Some(value as u8)\n-    } else {\n-        None\n-    }\n+pub fn i8_to_u8(value: i8) {\n+    let _ = value >= 0;\n }\n \n fn main() {}"}, {"sha": "648ba3ccd01dbfbc4e9af53ef7301df4de88d355", "filename": "tests/ui/checked_conversions.stderr", "status": "modified", "additions": 73, "deletions": 25, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e2fdeecc22367d70451a6051f02a876e5ff7d80f/tests%2Fui%2Fchecked_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2fdeecc22367d70451a6051f02a876e5ff7d80f/tests%2Fui%2Fchecked_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.stderr?ref=e2fdeecc22367d70451a6051f02a876e5ff7d80f", "patch": "@@ -1,52 +1,100 @@\n error: Checked cast can be simplified.\n-  --> $DIR/checked_conversions.rs:13:8\n+  --> $DIR/checked_conversions.rs:17:13\n    |\n-LL |     if value <= (u32::max_value() as i64) && value >= 0 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n+LL |     let _ = value <= (u32::max_value() as i64) && value >= 0;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n    |\n    = note: `-D clippy::checked-conversions` implied by `-D warnings`\n \n error: Checked cast can be simplified.\n-  --> $DIR/checked_conversions.rs:21:8\n+  --> $DIR/checked_conversions.rs:18:13\n    |\n-LL |     if value <= i64::from(u16::max_value()) && value >= 0 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n+LL |     let _ = value <= (u32::MAX as i64) && value >= 0;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n \n error: Checked cast can be simplified.\n-  --> $DIR/checked_conversions.rs:29:8\n+  --> $DIR/checked_conversions.rs:22:13\n    |\n-LL |     if value <= (u8::max_value() as isize) && value >= 0 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n+LL |     let _ = value <= i64::from(u16::max_value()) && value >= 0;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: Checked cast can be simplified.\n-  --> $DIR/checked_conversions.rs:39:8\n+  --> $DIR/checked_conversions.rs:23:13\n    |\n-LL |     if value <= (i32::max_value() as i64) && value >= (i32::min_value() as i64) {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n+LL |     let _ = value <= i64::from(u16::MAX) && value >= 0;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: Checked cast can be simplified.\n-  --> $DIR/checked_conversions.rs:47:8\n+  --> $DIR/checked_conversions.rs:27:13\n    |\n-LL |     if value <= i64::from(i16::max_value()) && value >= i64::from(i16::min_value()) {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n+LL |     let _ = value <= (u8::max_value() as isize) && value >= 0;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n error: Checked cast can be simplified.\n-  --> $DIR/checked_conversions.rs:57:8\n+  --> $DIR/checked_conversions.rs:28:13\n    |\n-LL |     if value <= i32::max_value() as u32 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n+LL |     let _ = value <= (u8::MAX as isize) && value >= 0;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n error: Checked cast can be simplified.\n-  --> $DIR/checked_conversions.rs:65:8\n+  --> $DIR/checked_conversions.rs:34:13\n    |\n-LL |     if value <= isize::max_value() as usize && value as i32 == 5 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n+LL |     let _ = value <= (i32::max_value() as i64) && value >= (i32::min_value() as i64);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: Checked cast can be simplified.\n-  --> $DIR/checked_conversions.rs:73:8\n+  --> $DIR/checked_conversions.rs:35:13\n    |\n-LL |     if value <= u16::max_value() as u32 && value as i32 == 5 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n+LL |     let _ = value <= (i32::MAX as i64) && value >= (i32::MIN as i64);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n-error: aborting due to 8 previous errors\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:39:13\n+   |\n+LL |     let _ = value <= i64::from(i16::max_value()) && value >= i64::from(i16::min_value());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n+\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:40:13\n+   |\n+LL |     let _ = value <= i64::from(i16::MAX) && value >= i64::from(i16::MIN);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n+\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:46:13\n+   |\n+LL |     let _ = value <= i32::max_value() as u32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n+\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:47:13\n+   |\n+LL |     let _ = value <= i32::MAX as u32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n+\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:51:13\n+   |\n+LL |     let _ = value <= isize::max_value() as usize && value as i32 == 5;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n+\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:52:13\n+   |\n+LL |     let _ = value <= isize::MAX as usize && value as i32 == 5;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n+\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:56:13\n+   |\n+LL |     let _ = value <= u16::max_value() as u32 && value as i32 == 5;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n+\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:57:13\n+   |\n+LL |     let _ = value <= u16::MAX as u32 && value as i32 == 5;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n+\n+error: aborting due to 16 previous errors\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/checked_conversions.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6c833df69b361e63852a9e0c84d45b363a66c72e/tests%2Fui%2Fchecked_conversions.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6c833df69b361e63852a9e0c84d45b363a66c72e/tests%2Fui%2Fchecked_conversions.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.stdout?ref=6c833df69b361e63852a9e0c84d45b363a66c72e"}]}