{"sha": "df806275c7c87865080bed9e809a7a693392c666", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmODA2Mjc1YzdjODc4NjUwODBiZWQ5ZTgwOWE3YTY5MzM5MmM2NjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-15T01:43:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-15T01:43:12Z"}, "message": "Auto merge of #43872 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 6 pull requests\n\n- Successful merges: #43756, #43790, #43846, #43848, #43862, #43868\n- Failed merges:", "tree": {"sha": "b57271bccbc52c72497d425b7d81f54d5c0d2d7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b57271bccbc52c72497d425b7d81f54d5c0d2d7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df806275c7c87865080bed9e809a7a693392c666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df806275c7c87865080bed9e809a7a693392c666", "html_url": "https://github.com/rust-lang/rust/commit/df806275c7c87865080bed9e809a7a693392c666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df806275c7c87865080bed9e809a7a693392c666/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56fe3b2ad0055bb28325f412395577e2b842719a", "url": "https://api.github.com/repos/rust-lang/rust/commits/56fe3b2ad0055bb28325f412395577e2b842719a", "html_url": "https://github.com/rust-lang/rust/commit/56fe3b2ad0055bb28325f412395577e2b842719a"}, {"sha": "1259db2fa4e2c249f891dfb02e2b7611e253e596", "url": "https://api.github.com/repos/rust-lang/rust/commits/1259db2fa4e2c249f891dfb02e2b7611e253e596", "html_url": "https://github.com/rust-lang/rust/commit/1259db2fa4e2c249f891dfb02e2b7611e253e596"}], "stats": {"total": 149, "additions": 134, "deletions": 15}, "files": [{"sha": "c2d3b28602bccbcbcf3254f213f408204cd3ee90", "filename": ".mailmap", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df806275c7c87865080bed9e809a7a693392c666/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/df806275c7c87865080bed9e809a7a693392c666/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=df806275c7c87865080bed9e809a7a693392c666", "patch": "@@ -52,7 +52,6 @@ Chris Pressey <cpressey@gmail.com>\n Chris Thorn <chris@thorn.co> Chris Thorn <thorn@thoughtbot.com>\n Clark Gaebel <cg.wowus.cg@gmail.com> <cgaebel@mozilla.com>\n Clinton Ryan <clint.ryan3@gmail.com>\n-Corey Farwell <coreyf+rust@rwell.org> Corey Farwell <coreyf@rwell.org>\n Corey Richardson <corey@octayn.net> Elaine \"See More\" Nemo <corey@octayn.net>\n Cyryl P\u0142otnicki <cyplo@cyplo.net>\n Damien Schoof <damien.schoof@gmail.com>"}, {"sha": "de7c10292680c40d895241a774c43275e7fcbe7c", "filename": "src/doc/rustdoc/src/passes.md", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/df806275c7c87865080bed9e809a7a693392c666/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md", "raw_url": "https://github.com/rust-lang/rust/raw/df806275c7c87865080bed9e809a7a693392c666/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md?ref=df806275c7c87865080bed9e809a7a693392c666", "patch": "@@ -1,3 +1,86 @@\n # Passes\n \n-Coming soon!\n\\ No newline at end of file\n+Rustdoc has a concept called \"passes\". These are transformations that\n+`rustdoc` runs on your documentation before producing its final output.\n+\n+In addition to the passes below, check out the docs for these flags:\n+\n+* [`--passes`](command-line-arguments.html#--passes-add-more-rustdoc-passes)\n+* [`--no-defaults`](command-line-arguments.html#--no-defaults-dont-run-default-passes)\n+\n+## Default passes\n+\n+By default, rustdoc will run some passes, namely:\n+\n+* `strip-hidden`\n+* `strip-private`\n+* `collapse-docs`\n+* `unindent-comments`\n+\n+However, `strip-private` implies `strip-private-imports`, and so effectively,\n+all passes are run by default.\n+\n+## `strip-hidden`\n+\n+This pass implements the `#[doc(hidden)]` attribute. When this pass runs, it\n+checks each item, and if it is annotated with this attribute, it removes it\n+from `rustdoc`'s output.\n+\n+Without this pass, these items will remain in the output.\n+\n+## `unindent-comments`\n+\n+When you write a doc comment like this:\n+\n+```rust,ignore\n+/// This is a documentation comment.\n+```\n+\n+There's a space between the `///` and that `T`. That spacing isn't intended\n+to be a part of the output; it's there for humans, to help separate the doc\n+comment syntax from the text of the comment. This pass is what removes that\n+space.\n+\n+The exact rules are left under-specified so that we can fix issues that we find.\n+\n+Without this pass, the exact number of spaces is preserved.\n+\n+## `collapse-docs`\n+\n+With this pass, multiple `#[doc]` attributes are converted into one single\n+documentation string.\n+\n+For example:\n+\n+```rust,ignore\n+#[doc = \"This is the first line.\"]\n+#[doc = \"This is the second line.\"]\n+```\n+\n+Gets collapsed into a single doc string of\n+\n+```text\n+This is the first line.\n+This is the second line.\n+```\n+\n+## `strip-private`\n+\n+This removes documentation for any non-public items, so for example:\n+\n+```rust,ignore\n+/// These are private docs.\n+struct Private;\n+\n+/// These are public docs.\n+pub struct Public;\n+```\n+\n+This pass removes the docs for `Private`, since they're not public.\n+\n+This pass implies `strip-priv-imports`.\n+\n+## `strip-priv-imports`\n+\n+This is the same as `strip-private`, but for `extern crate` and `use`\n+statements instead of items."}, {"sha": "ea8dd8208784967bf65863b137de5f65296b63c2", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df806275c7c87865080bed9e809a7a693392c666/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df806275c7c87865080bed9e809a7a693392c666/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=df806275c7c87865080bed9e809a7a693392c666", "patch": "@@ -27,6 +27,7 @@\n /// # More on `Deref` coercion\n ///\n /// If `T` implements `Deref<Target = U>`, and `x` is a value of type `T`, then:\n+///\n /// * In immutable contexts, `*x` on non-pointer types is equivalent to\n ///   `*Deref::deref(&x)`.\n /// * Values of type `&T` are coerced to values of type `&U`\n@@ -113,6 +114,7 @@ impl<'a, T: ?Sized> Deref for &'a mut T {\n ///\n /// If `T` implements `DerefMut<Target = U>`, and `x` is a value of type `T`,\n /// then:\n+///\n /// * In mutable contexts, `*x` on non-pointer types is equivalent to\n ///   `*Deref::deref(&x)`.\n /// * Values of type `&mut T` are coerced to values of type `&mut U`"}, {"sha": "8ec9cd8660a80dfa9656f8ba83183f99db76a61c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df806275c7c87865080bed9e809a7a693392c666/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/df806275c7c87865080bed9e809a7a693392c666/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=df806275c7c87865080bed9e809a7a693392c666", "patch": "@@ -1271,7 +1271,7 @@\n                     e.innerHTML = labelForToggleButton(true);\n                 });\n                 onEach(toggle.getElementsByClassName('toggle-label'), function(e) {\n-                    e.style.display = 'block';\n+                    e.style.display = 'inline-block';\n                 });\n             }\n         }"}, {"sha": "3cd9cf7727c204bbd827814acd986645b789c6b9", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/df806275c7c87865080bed9e809a7a693392c666/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df806275c7c87865080bed9e809a7a693392c666/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=df806275c7c87865080bed9e809a7a693392c666", "patch": "@@ -112,6 +112,29 @@\n //! will want to make use of some form of **interior mutability** through the\n //! [`Cell`] or [`RefCell`] types.\n //!\n+//! ## Naming threads\n+//!\n+//! Threads are able to have associated names for identification purposes. By default, spawned\n+//! threads are unnamed. To specify a name for a thread, build the thread with [`Builder`] and pass\n+//! the desired thread name to [`Builder::name`]. To retrieve the thread name from within the\n+//! thread, use [`Thread::name`]. A couple examples of where the name of a thread gets used:\n+//!\n+//! * If a panic occurs in a named thread, the thread name will be printed in the panic message.\n+//! * The thread name is provided to the OS where applicable (e.g. `pthread_setname_np` in\n+//!   unix-like platforms).\n+//!\n+//! ## Stack size\n+//!\n+//! The default stack size for spawned threads is 2 MiB, though this particular stack size is\n+//! subject to change in the future. There are two ways to manually specify the stack size for\n+//! spawned threads:\n+//!\n+//! * Build the thread with [`Builder`] and pass the desired stack size to [`Builder::stack_size`].\n+//! * Set the `RUST_MIN_STACK` environment variable to an integer representing the desired stack\n+//!   size (in bytes). Note that setting [`Builder::stack_size`] will override this.\n+//!\n+//! Note that the stack size of the main thread is *not* determined by Rust.\n+//!\n //! [channels]: ../../std/sync/mpsc/index.html\n //! [`Arc`]: ../../std/sync/struct.Arc.html\n //! [`spawn`]: ../../std/thread/fn.spawn.html\n@@ -123,11 +146,14 @@\n //! [`Err`]: ../../std/result/enum.Result.html#variant.Err\n //! [`panic!`]: ../../std/macro.panic.html\n //! [`Builder`]: ../../std/thread/struct.Builder.html\n+//! [`Builder::stack_size`]: ../../std/thread/struct.Builder.html#method.stack_size\n+//! [`Builder::name`]: ../../std/thread/struct.Builder.html#method.name\n //! [`thread::current`]: ../../std/thread/fn.current.html\n //! [`thread::Result`]: ../../std/thread/type.Result.html\n //! [`Thread`]: ../../std/thread/struct.Thread.html\n //! [`park`]: ../../std/thread/fn.park.html\n //! [`unpark`]: ../../std/thread/struct.Thread.html#method.unpark\n+//! [`Thread::name`]: ../../std/thread/struct.Thread.html#method.name\n //! [`thread::park_timeout`]: ../../std/thread/fn.park_timeout.html\n //! [`Cell`]: ../cell/struct.Cell.html\n //! [`RefCell`]: ../cell/struct.RefCell.html\n@@ -187,16 +213,8 @@ pub use self::local::{LocalKey, LocalKeyState, AccessError};\n ///\n /// The two configurations available are:\n ///\n-/// - [`name`]: allows to give a name to the thread which is currently\n-///   only used in `panic` messages.\n-/// - [`stack_size`]: specifies the desired stack size. Note that this can\n-///   be overridden by the OS.\n-///\n-/// If the [`stack_size`] field is not specified, the stack size\n-/// will be the `RUST_MIN_STACK` environment variable. If it is\n-/// not specified either, a sensible default will be set.\n-///\n-/// If the [`name`] field is not specified, the thread will not be named.\n+/// - [`name`]: specifies an [associated name for the thread][naming-threads]\n+/// - [`stack_size`]: specifies the [desired stack size for the thread][stack-size]\n ///\n /// The [`spawn`] method will take ownership of the builder and create an\n /// [`io::Result`] to the thread handle with the given configuration.\n@@ -228,6 +246,8 @@ pub use self::local::{LocalKey, LocalKeyState, AccessError};\n /// [`spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n /// [`io::Result`]: ../../std/io/type.Result.html\n /// [`unwrap`]: ../../std/result/enum.Result.html#method.unwrap\n+/// [naming-threads]: ./index.html#naming-threads\n+/// [stack-size]: ./index.html#stack-size\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Builder {\n@@ -267,6 +287,9 @@ impl Builder {\n     /// Names the thread-to-be. Currently the name is used for identification\n     /// only in panic messages.\n     ///\n+    /// For more information about named threads, see\n+    /// [this module-level documentation][naming-threads].\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -281,6 +304,8 @@ impl Builder {\n     ///\n     /// handler.join().unwrap();\n     /// ```\n+    ///\n+    /// [naming-threads]: ./index.html#naming-threads\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn name(mut self, name: String) -> Builder {\n         self.name = Some(name);\n@@ -292,13 +317,18 @@ impl Builder {\n     /// The actual stack size may be greater than this value if\n     /// the platform specifies minimal stack size.\n     ///\n+    /// For more information about the stack size for threads, see\n+    /// [this module-level documentation][stack-size].\n+    ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::thread;\n     ///\n     /// let builder = thread::Builder::new().stack_size(32 * 1024);\n     /// ```\n+    ///\n+    /// [stack-size]: ./index.html#stack-size\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn stack_size(mut self, size: usize) -> Builder {\n         self.stack_size = Some(size);\n@@ -987,6 +1017,9 @@ impl Thread {\n \n     /// Gets the thread's name.\n     ///\n+    /// For more information about named threads, see\n+    /// [this module-level documentation][naming-threads].\n+    ///\n     /// # Examples\n     ///\n     /// Threads by default have no name specified:\n@@ -1017,6 +1050,8 @@ impl Thread {\n     ///\n     /// handler.join().unwrap();\n     /// ```\n+    ///\n+    /// [naming-threads]: ./index.html#naming-threads\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn name(&self) -> Option<&str> {\n         self.cname().map(|s| unsafe { str::from_utf8_unchecked(s.to_bytes()) } )"}, {"sha": "e8eb4abaa40c9f930b9255e5fc4f224bd032ba8f", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df806275c7c87865080bed9e809a7a693392c666/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df806275c7c87865080bed9e809a7a693392c666/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=df806275c7c87865080bed9e809a7a693392c666", "patch": "@@ -33,10 +33,10 @@ pub use self::duration::Duration;\n \n mod duration;\n \n-/// A measurement of a monotonically increasing clock.\n+/// A measurement of a monotonically nondecreasing clock.\n /// Opaque and useful only with `Duration`.\n ///\n-/// Instants are always guaranteed to be greater than any previously measured\n+/// Instants are always guaranteed to be no less than any previously measured\n /// instant when created, and are often useful for tasks such as measuring\n /// benchmarks or timing how long an operation takes.\n ///"}]}