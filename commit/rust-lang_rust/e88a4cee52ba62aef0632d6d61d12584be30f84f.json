{"sha": "e88a4cee52ba62aef0632d6d61d12584be30f84f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OGE0Y2VlNTJiYTYyYWVmMDYzMmQ2ZDYxZDEyNTg0YmUzMGY4NGY=", "commit": {"author": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-05-27T15:16:20Z"}, "committer": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-07-25T19:30:08Z"}, "message": "std: win: Disable stack overflow handling on UWP\n\nThe required functions are not available, so hope for the best", "tree": {"sha": "3587a63f6e4bb4a1e68bafabceb4e6e06d51ddd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3587a63f6e4bb4a1e68bafabceb4e6e06d51ddd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88a4cee52ba62aef0632d6d61d12584be30f84f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88a4cee52ba62aef0632d6d61d12584be30f84f", "html_url": "https://github.com/rust-lang/rust/commit/e88a4cee52ba62aef0632d6d61d12584be30f84f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88a4cee52ba62aef0632d6d61d12584be30f84f/comments", "author": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "668f0d3495101d547602249785dc175fc11e5fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/668f0d3495101d547602249785dc175fc11e5fe7", "html_url": "https://github.com/rust-lang/rust/commit/668f0d3495101d547602249785dc175fc11e5fe7"}], "stats": {"total": 74, "additions": 45, "deletions": 29}, "files": [{"sha": "f706709c9ccf4be722ec1564580da37bc41cd9b3", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e88a4cee52ba62aef0632d6d61d12584be30f84f/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88a4cee52ba62aef0632d6d61d12584be30f84f/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=e88a4cee52ba62aef0632d6d61d12584be30f84f", "patch": "@@ -256,10 +256,6 @@ pub const WAIT_OBJECT_0: DWORD = 0x00000000;\n pub const WAIT_TIMEOUT: DWORD = 258;\n pub const WAIT_FAILED: DWORD = 0xFFFFFFFF;\n \n-pub const EXCEPTION_CONTINUE_SEARCH: LONG = 0;\n-pub const EXCEPTION_STACK_OVERFLOW: DWORD = 0xc00000fd;\n-pub const EXCEPTION_MAXIMUM_PARAMETERS: usize = 15;\n-\n pub const PIPE_ACCESS_INBOUND: DWORD = 0x00000001;\n pub const PIPE_ACCESS_OUTBOUND: DWORD = 0x00000002;\n pub const FILE_FLAG_FIRST_PIPE_INSTANCE: DWORD = 0x00080000;\n@@ -444,25 +440,6 @@ pub struct REPARSE_MOUNTPOINT_DATA_BUFFER {\n     pub ReparseTarget: WCHAR,\n }\n \n-#[repr(C)]\n-pub struct EXCEPTION_RECORD {\n-    pub ExceptionCode: DWORD,\n-    pub ExceptionFlags: DWORD,\n-    pub ExceptionRecord: *mut EXCEPTION_RECORD,\n-    pub ExceptionAddress: LPVOID,\n-    pub NumberParameters: DWORD,\n-    pub ExceptionInformation: [LPVOID; EXCEPTION_MAXIMUM_PARAMETERS]\n-}\n-\n-#[repr(C)]\n-pub struct EXCEPTION_POINTERS {\n-    pub ExceptionRecord: *mut EXCEPTION_RECORD,\n-    pub ContextRecord: *mut CONTEXT,\n-}\n-\n-pub type PVECTORED_EXCEPTION_HANDLER = extern \"system\"\n-        fn(ExceptionInfo: *mut EXCEPTION_POINTERS) -> LONG;\n-\n #[repr(C)]\n pub struct GUID {\n     pub Data1: DWORD,\n@@ -545,8 +522,6 @@ pub enum ADDRESS_MODE {\n     AddrModeFlat,\n }\n \n-pub enum CONTEXT {}\n-\n #[repr(C)]\n pub struct SOCKADDR_STORAGE_LH {\n     pub ss_family: ADDRESS_FAMILY,\n@@ -631,6 +606,31 @@ pub struct timeval {\n // Functions forbidden when targeting UWP\n cfg_if::cfg_if! {\n if #[cfg(not(target_vendor = \"uwp\"))] {\n+    pub const EXCEPTION_CONTINUE_SEARCH: LONG = 0;\n+    pub const EXCEPTION_STACK_OVERFLOW: DWORD = 0xc00000fd;\n+    pub const EXCEPTION_MAXIMUM_PARAMETERS: usize = 15;\n+\n+    #[repr(C)]\n+    pub struct EXCEPTION_RECORD {\n+        pub ExceptionCode: DWORD,\n+        pub ExceptionFlags: DWORD,\n+        pub ExceptionRecord: *mut EXCEPTION_RECORD,\n+        pub ExceptionAddress: LPVOID,\n+        pub NumberParameters: DWORD,\n+        pub ExceptionInformation: [LPVOID; EXCEPTION_MAXIMUM_PARAMETERS]\n+    }\n+\n+    pub enum CONTEXT {}\n+\n+    #[repr(C)]\n+    pub struct EXCEPTION_POINTERS {\n+        pub ExceptionRecord: *mut EXCEPTION_RECORD,\n+        pub ContextRecord: *mut CONTEXT,\n+    }\n+\n+    pub type PVECTORED_EXCEPTION_HANDLER = extern \"system\"\n+            fn(ExceptionInfo: *mut EXCEPTION_POINTERS) -> LONG;\n+\n     #[repr(C)]\n     #[derive(Copy, Clone)]\n     pub struct CONSOLE_READCONSOLE_CONTROL {\n@@ -694,6 +694,9 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n         pub fn SetHandleInformation(hObject: HANDLE,\n                                     dwMask: DWORD,\n                                     dwFlags: DWORD) -> BOOL;\n+        pub fn AddVectoredExceptionHandler(FirstHandler: ULONG,\n+                                           VectoredHandler: PVECTORED_EXCEPTION_HANDLER)\n+                                           -> LPVOID;\n         pub fn CreateHardLinkW(lpSymlinkFileName: LPCWSTR,\n                                lpTargetFileName: LPCWSTR,\n                                lpSecurityAttributes: LPSECURITY_ATTRIBUTES)\n@@ -804,9 +807,6 @@ extern \"system\" {\n                        lpData: LPVOID,\n                        pbCancel: LPBOOL,\n                        dwCopyFlags: DWORD) -> BOOL;\n-    pub fn AddVectoredExceptionHandler(FirstHandler: ULONG,\n-                                       VectoredHandler: PVECTORED_EXCEPTION_HANDLER)\n-                                       -> LPVOID;\n     pub fn FormatMessageW(flags: DWORD,\n                           lpSrc: LPVOID,\n                           msgId: DWORD,\n@@ -1015,6 +1015,7 @@ compat_fn! {\n                                      _dwFlags: DWORD) -> DWORD {\n         SetLastError(ERROR_CALL_NOT_IMPLEMENTED as DWORD); 0\n     }\n+    #[cfg(not(target_vendor = \"uwp\"))]\n     pub fn SetThreadStackGuarantee(_size: *mut c_ulong) -> BOOL {\n         SetLastError(ERROR_CALL_NOT_IMPLEMENTED as DWORD); 0\n     }"}, {"sha": "d59ac5959a6788d1eadfe1111fda07f7d3635720", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e88a4cee52ba62aef0632d6d61d12584be30f84f/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88a4cee52ba62aef0632d6d61d12584be30f84f/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=e88a4cee52ba62aef0632d6d61d12584be30f84f", "patch": "@@ -33,16 +33,18 @@ pub mod pipe;\n pub mod process;\n pub mod rand;\n pub mod rwlock;\n-pub mod stack_overflow;\n pub mod thread;\n pub mod thread_local;\n pub mod time;\n cfg_if::cfg_if! {\n     if #[cfg(not(target_vendor = \"uwp\"))] {\n         pub mod stdio;\n+        pub mod stack_overflow;\n     } else {\n         pub mod stdio_uwp;\n+        pub mod stack_overflow_uwp;\n         pub use self::stdio_uwp as stdio;\n+        pub use self::stack_overflow_uwp as stack_overflow;\n     }\n }\n "}, {"sha": "e7236cf359cd50b7b8ac791bd651585ad8002124", "filename": "src/libstd/sys/windows/stack_overflow_uwp.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e88a4cee52ba62aef0632d6d61d12584be30f84f/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow_uwp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88a4cee52ba62aef0632d6d61d12584be30f84f/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow_uwp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow_uwp.rs?ref=e88a4cee52ba62aef0632d6d61d12584be30f84f", "patch": "@@ -0,0 +1,13 @@\n+#![cfg_attr(test, allow(dead_code))]\n+\n+pub struct Handler;\n+\n+impl Handler {\n+    pub fn new() -> Handler {\n+        Handler\n+    }\n+}\n+\n+pub unsafe fn init() {}\n+\n+pub unsafe fn cleanup() {}"}]}