{"sha": "43f942f88656f6b6cb2ff143e496a8875ea157ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZjk0MmY4ODY1NmY2YjZjYjJmZjE0M2U0OTZhODg3NWVhMTU3YWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-24T19:51:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-24T19:51:24Z"}, "message": "auto merge of #14378 : huonw/rust/deque-adjustments, r=alexcrichton\n\nMight as well remove the duplication/`forget` call.", "tree": {"sha": "850bbfc22c696e6175c65de0665ad55927091f39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/850bbfc22c696e6175c65de0665ad55927091f39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43f942f88656f6b6cb2ff143e496a8875ea157ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43f942f88656f6b6cb2ff143e496a8875ea157ac", "html_url": "https://github.com/rust-lang/rust/commit/43f942f88656f6b6cb2ff143e496a8875ea157ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43f942f88656f6b6cb2ff143e496a8875ea157ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b546fff784f022bb35adbd8c13f6d1d8f6846363", "url": "https://api.github.com/repos/rust-lang/rust/commits/b546fff784f022bb35adbd8c13f6d1d8f6846363", "html_url": "https://github.com/rust-lang/rust/commit/b546fff784f022bb35adbd8c13f6d1d8f6846363"}, {"sha": "9a8379deb296b7a8b543fca635c52307d13f6daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a8379deb296b7a8b543fca635c52307d13f6daf", "html_url": "https://github.com/rust-lang/rust/commit/9a8379deb296b7a8b543fca635c52307d13f6daf"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "46d6129ded8b81207207b45165e237504d9d387e", "filename": "src/libstd/sync/deque.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43f942f88656f6b6cb2ff143e496a8875ea157ac/src%2Flibstd%2Fsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f942f88656f6b6cb2ff143e496a8875ea157ac/src%2Flibstd%2Fsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fdeque.rs?ref=43f942f88656f6b6cb2ff143e496a8875ea157ac", "patch": "@@ -54,7 +54,7 @@ use clone::Clone;\n use iter::{range, Iterator};\n use kinds::Send;\n use kinds::marker;\n-use mem::{forget, min_align_of, size_of, transmute};\n+use mem::{forget, min_align_of, size_of, transmute, overwrite};\n use ops::Drop;\n use option::{Option, Some, None};\n use owned::Box;\n@@ -371,20 +371,20 @@ impl<T: Send> Buffer<T> {\n     // Apparently LLVM cannot optimize (foo % (1 << bar)) into this implicitly\n     fn mask(&self) -> int { (1 << self.log_size) - 1 }\n \n+    unsafe fn elem(&self, i: int) -> *T { self.storage.offset(i & self.mask()) }\n+\n     // This does not protect against loading duplicate values of the same cell,\n     // nor does this clear out the contents contained within. Hence, this is a\n     // very unsafe method which the caller needs to treat specially in case a\n     // race is lost.\n     unsafe fn get(&self, i: int) -> T {\n-        ptr::read(self.storage.offset(i & self.mask()))\n+        ptr::read(self.elem(i))\n     }\n \n     // Unsafe because this unsafely overwrites possibly uninitialized or\n     // initialized data.\n     unsafe fn put(&self, i: int, t: T) {\n-        let ptr = self.storage.offset(i & self.mask());\n-        ptr::copy_nonoverlapping_memory(ptr as *mut T, &t as *T, 1);\n-        forget(t);\n+        overwrite(self.elem(i) as *mut T, t);\n     }\n \n     // Again, unsafe because this has incredibly dubious ownership violations."}]}