{"sha": "424a8c3a569e6a67afb3fafdae8d4e7568097b15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNGE4YzNhNTY5ZTZhNjdhZmIzZmFmZGFlOGQ0ZTc1NjgwOTdiMTU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-26T12:11:19Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-26T12:11:19Z"}, "message": "Implement \"default_alloc_error_handler\" feature\n\nFixes #1182", "tree": {"sha": "d614eca0ac7e48fdca833889a2dadf0555c039ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d614eca0ac7e48fdca833889a2dadf0555c039ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/424a8c3a569e6a67afb3fafdae8d4e7568097b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/424a8c3a569e6a67afb3fafdae8d4e7568097b15", "html_url": "https://github.com/rust-lang/rust/commit/424a8c3a569e6a67afb3fafdae8d4e7568097b15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/424a8c3a569e6a67afb3fafdae8d4e7568097b15/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f7080246562a7dd3c3dee006d1fc7754029c8bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7080246562a7dd3c3dee006d1fc7754029c8bc", "html_url": "https://github.com/rust-lang/rust/commit/1f7080246562a7dd3c3dee006d1fc7754029c8bc"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "637d30f9344f98b6f7c77a0fc46cb2a910ff8b49", "filename": "src/allocator.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/424a8c3a569e6a67afb3fafdae8d4e7568097b15/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/424a8c3a569e6a67afb3fafdae8d4e7568097b15/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=424a8c3a569e6a67afb3fafdae8d4e7568097b15", "patch": "@@ -5,7 +5,6 @@ use crate::prelude::*;\n \n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n-use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -20,7 +19,7 @@ pub(crate) fn codegen(\n     if any_dynamic_crate {\n         false\n     } else if let Some(kind) = tcx.allocator_kind(()) {\n-        codegen_inner(module, unwind_context, kind);\n+        codegen_inner(module, unwind_context, kind, tcx.lang_items().oom().is_some());\n         true\n     } else {\n         false\n@@ -31,6 +30,7 @@ fn codegen_inner(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n+    has_alloc_error_handler: bool,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n \n@@ -65,7 +65,6 @@ fn codegen_inner(\n \n         let caller_name = format!(\"__rust_{}\", method.name);\n         let callee_name = kind.fn_name(method.name);\n-        //eprintln!(\"Codegen allocator shim {} -> {} ({:?} -> {:?})\", caller_name, callee_name, sig.params, sig.returns);\n \n         let func_id = module.declare_function(&caller_name, Linkage::Export, &sig).unwrap();\n \n@@ -104,13 +103,12 @@ fn codegen_inner(\n         returns: vec![],\n     };\n \n-    let callee_name = kind.fn_name(sym::oom);\n-    //eprintln!(\"Codegen allocator shim {} -> {} ({:?} -> {:?})\", caller_name, callee_name, sig.params, sig.returns);\n+    let callee_name = if has_alloc_error_handler { \"__rg_oom\" } else { \"__rdl_oom\" };\n \n     let func_id =\n         module.declare_function(\"__rust_alloc_error_handler\", Linkage::Export, &sig).unwrap();\n \n-    let callee_func_id = module.declare_function(&callee_name, Linkage::Import, &sig).unwrap();\n+    let callee_func_id = module.declare_function(callee_name, Linkage::Import, &sig).unwrap();\n \n     let mut ctx = Context::new();\n     ctx.func = Function::with_name_signature(ExternalName::user(0, 0), sig);"}]}