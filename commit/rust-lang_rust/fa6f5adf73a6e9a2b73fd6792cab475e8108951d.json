{"sha": "fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNmY1YWRmNzNhNmU5YTJiNzNmZDY3OTJjYWI0NzVlODEwODk1MWQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-18T16:12:17Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-12T14:33:16Z"}, "message": "Gather module items after lowering.", "tree": {"sha": "917f6cc6daed940e51d9303a412e018d220e28ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/917f6cc6daed940e51d9303a412e018d220e28ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "html_url": "https://github.com/rust-lang/rust/commit/fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0212c70b1df2aa542aef48d5fcde0af3734970c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0212c70b1df2aa542aef48d5fcde0af3734970c6", "html_url": "https://github.com/rust-lang/rust/commit/0212c70b1df2aa542aef48d5fcde0af3734970c6"}], "stats": {"total": 190, "additions": 121, "deletions": 69}, "files": [{"sha": "252bc676dbeefd6c9d34d6706070edbcb9105954", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -50,12 +50,6 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         self.lctx.with_parent_item_lifetime_defs(hir_id, |this| {\n             let this = &mut ItemLowerer { lctx: this };\n             match item.kind {\n-                ItemKind::Mod(..) => {\n-                    let def_id = this.lctx.lower_node_id(item.id).expect_owner();\n-                    let old_current_module = mem::replace(&mut this.lctx.current_module, def_id);\n-                    visit::walk_item(this, item);\n-                    this.lctx.current_module = old_current_module;\n-                }\n                 ItemKind::Impl(box ImplKind { ref of_trait, .. }) => {\n                     this.with_trait_impl_ref(of_trait, |this| visit::walk_item(this, item));\n                 }"}, {"sha": "5cda9c4aae38921339e1ec201bfe8a1d69722986", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -102,8 +102,6 @@ struct LoweringContext<'a, 'hir: 'a> {\n     owners: IndexVec<LocalDefId, Option<hir::OwnerNode<'hir>>>,\n     bodies: BTreeMap<hir::BodyId, hir::Body<'hir>>,\n \n-    modules: BTreeMap<LocalDefId, hir::ModuleItems>,\n-\n     generator_kind: Option<hir::GeneratorKind>,\n \n     attrs: BTreeMap<hir::HirId, &'hir [Attribute]>,\n@@ -152,8 +150,6 @@ struct LoweringContext<'a, 'hir: 'a> {\n     /// vector.\n     in_scope_lifetimes: Vec<ParamName>,\n \n-    current_module: LocalDefId,\n-\n     current_hir_id_owner: (LocalDefId, u32),\n     item_local_id_counters: NodeMap<u32>,\n     node_id_to_hir_id: IndexVec<NodeId, Option<hir::HirId>>,\n@@ -327,15 +323,13 @@ pub fn lower_crate<'a, 'hir>(\n         arena,\n         owners: IndexVec::default(),\n         bodies: BTreeMap::new(),\n-        modules: BTreeMap::new(),\n         attrs: BTreeMap::default(),\n         catch_scope: None,\n         loop_scope: None,\n         is_in_loop_condition: false,\n         is_in_trait_impl: false,\n         is_in_dyn_type: false,\n         anonymous_lifetime_mode: AnonymousLifetimeMode::PassThrough,\n-        current_module: CRATE_DEF_ID,\n         current_hir_id_owner: (CRATE_DEF_ID, 0),\n         item_local_id_counters: Default::default(),\n         node_id_to_hir_id: IndexVec::new(),\n@@ -508,13 +502,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n         }\n \n-        let krate = hir::Crate {\n-            owners: self.owners,\n-            bodies: self.bodies,\n-            modules: self.modules,\n-            trait_map,\n-            attrs: self.attrs,\n-        };\n+        let krate =\n+            hir::Crate { owners: self.owners, bodies: self.bodies, trait_map, attrs: self.attrs };\n         self.arena.alloc(krate)\n     }\n \n@@ -523,7 +512,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let item = self.arena.alloc(item);\n         self.owners.ensure_contains_elem(id.def_id, || None);\n         self.owners[id.def_id] = Some(hir::OwnerNode::Item(item));\n-        self.modules.entry(self.current_module).or_default().items.insert(id);\n         id\n     }\n \n@@ -532,7 +520,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let item = self.arena.alloc(item);\n         self.owners.ensure_contains_elem(id.def_id, || None);\n         self.owners[id.def_id] = Some(hir::OwnerNode::ForeignItem(item));\n-        self.modules.entry(self.current_module).or_default().foreign_items.insert(id);\n         id\n     }\n \n@@ -541,7 +528,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let item = self.arena.alloc(item);\n         self.owners.ensure_contains_elem(id.def_id, || None);\n         self.owners[id.def_id] = Some(hir::OwnerNode::ImplItem(item));\n-        self.modules.entry(self.current_module).or_default().impl_items.insert(id);\n         id\n     }\n \n@@ -550,7 +536,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let item = self.arena.alloc(item);\n         self.owners.ensure_contains_elem(id.def_id, || None);\n         self.owners[id.def_id] = Some(hir::OwnerNode::TraitItem(item));\n-        self.modules.entry(self.current_module).or_default().trait_items.insert(id);\n         id\n     }\n "}, {"sha": "7ed74375c5174379bf03f8a93dce8808e19b8a29", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -21,7 +21,7 @@ use rustc_target::asm::InlineAsmRegOrRegClass;\n use rustc_target::spec::abi::Abi;\n \n use smallvec::SmallVec;\n-use std::collections::{BTreeMap, BTreeSet};\n+use std::collections::BTreeMap;\n use std::fmt;\n \n #[derive(Copy, Clone, Encodable, HashStable_Generic)]\n@@ -653,16 +653,6 @@ pub struct WhereEqPredicate<'hir> {\n     pub rhs_ty: &'hir Ty<'hir>,\n }\n \n-#[derive(Default, Encodable, Debug, HashStable_Generic)]\n-pub struct ModuleItems {\n-    // Use BTreeSets here so items are in the same order as in the\n-    // list of all items in Crate\n-    pub items: BTreeSet<ItemId>,\n-    pub trait_items: BTreeSet<TraitItemId>,\n-    pub impl_items: BTreeSet<ImplItemId>,\n-    pub foreign_items: BTreeSet<ForeignItemId>,\n-}\n-\n /// The top-level data structure that stores the entire contents of\n /// the crate currently being compiled.\n ///\n@@ -674,10 +664,6 @@ pub struct Crate<'hir> {\n     pub owners: IndexVec<LocalDefId, Option<OwnerNode<'hir>>>,\n     pub bodies: BTreeMap<BodyId, Body<'hir>>,\n \n-    /// A list of modules written out in the order in which they\n-    /// appear in the crate. This includes the main crate module.\n-    pub modules: BTreeMap<LocalDefId, ModuleItems>,\n-\n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n     pub trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Box<[TraitCandidate]>>>,"}, {"sha": "cb7529b527e8f885e322afd9c9988c40f6a0c5f5", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -8,7 +8,7 @@ use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n-use rustc_data_structures::sync::{par_iter, Lrc, OnceCell, ParallelIterator, WorkerLocal};\n+use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorReported, PResult};\n use rustc_expand::base::ExtCtxt;\n@@ -861,7 +861,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                 CStore::from_tcx(tcx).report_unused_deps(tcx);\n             },\n             {\n-                par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n+                tcx.hir().par_for_each_module(|module| {\n                     tcx.ensure().check_mod_loops(module);\n                     tcx.ensure().check_mod_attrs(module);\n                     tcx.ensure().check_mod_naked_functions(module);\n@@ -893,7 +893,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n             },\n             {\n                 sess.time(\"liveness_and_intrinsic_checking\", || {\n-                    par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n+                    tcx.hir().par_for_each_module(|module| {\n                         // this must run before MIR dump, because\n                         // \"not all control paths return a value\" is reported here.\n                         //\n@@ -963,7 +963,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n             },\n             {\n                 sess.time(\"privacy_checking_modules\", || {\n-                    par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n+                    tcx.hir().par_for_each_module(|module| {\n                         tcx.ensure().check_mod_privacy(module);\n                     });\n                 });"}, {"sha": "00c3a6fa25e027e3ca811059b3d1b390d2324158", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -16,7 +16,7 @@\n \n use crate::{passes::LateLintPassObject, LateContext, LateLintPass, LintStore};\n use rustc_ast as ast;\n-use rustc_data_structures::sync::{join, par_iter, ParallelIterator};\n+use rustc_data_structures::sync::join;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit as hir_visit;\n@@ -501,9 +501,7 @@ pub fn check_crate<'tcx, T: LateLintPass<'tcx>>(\n         || {\n             tcx.sess.time(\"module_lints\", || {\n                 // Run per-module lints\n-                par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n-                    tcx.ensure().lint_mod(module);\n-                });\n+                tcx.hir().par_for_each_module(|module| tcx.ensure().lint_mod(module));\n             });\n         },\n     );"}, {"sha": "61ba933c32eb5cbf8cbde2a97ba77292eee1f674", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -1,11 +1,12 @@\n use self::collector::NodeCollector;\n \n-use crate::hir::{AttributeMap, IndexedHir, Owner};\n+use crate::hir::{AttributeMap, IndexedHir, ModuleItems, Owner};\n use crate::ty::TyCtxt;\n use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n+use rustc_data_structures::sync::{self, par_iter};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n@@ -19,6 +20,7 @@ use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n+use std::collections::BTreeSet;\n \n pub mod blocks;\n mod collector;\n@@ -558,6 +560,31 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {\n+        let mut queue = BTreeSet::default();\n+        queue.insert(CRATE_DEF_ID);\n+\n+        while let Some(id) = queue.pop_first() {\n+            f(id);\n+            let items = self.tcx.hir_module_items(id);\n+            queue.extend(items.submodules.iter().copied())\n+        }\n+    }\n+\n+    pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + sync::Sync) {\n+        use rustc_data_structures::sync::ParallelIterator;\n+        par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);\n+\n+        fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)\n+        where\n+            F: Fn(LocalDefId) + sync::Sync,\n+        {\n+            (*f)(module);\n+            let items = tcx.hir_module_items(module);\n+            par_iter(&items.submodules).for_each(|&sm| par_iter_submodules(tcx, sm, f));\n+        }\n+    }\n+\n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n     pub fn parent_iter(&self, current_id: HirId) -> ParentHirIterator<'_, 'hir> {\n@@ -1118,3 +1145,63 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n         None => format!(\"unknown node{}\", id_str),\n     }\n }\n+\n+pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {\n+    let mut collector = ModuleCollector {\n+        tcx,\n+        submodules: BTreeSet::default(),\n+        items: BTreeSet::default(),\n+        trait_items: BTreeSet::default(),\n+        impl_items: BTreeSet::default(),\n+        foreign_items: BTreeSet::default(),\n+    };\n+\n+    let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);\n+    collector.visit_mod(hir_mod, span, hir_id);\n+\n+    let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =\n+        collector;\n+    return ModuleItems { submodules, items, trait_items, impl_items, foreign_items };\n+\n+    struct ModuleCollector<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        submodules: BTreeSet<LocalDefId>,\n+        items: BTreeSet<ItemId>,\n+        trait_items: BTreeSet<TraitItemId>,\n+        impl_items: BTreeSet<ImplItemId>,\n+        foreign_items: BTreeSet<ForeignItemId>,\n+    }\n+\n+    impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {\n+        type Map = Map<'hir>;\n+\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+            intravisit::NestedVisitorMap::All(self.tcx.hir())\n+        }\n+\n+        fn visit_item(&mut self, item: &'hir Item<'hir>) {\n+            self.items.insert(item.item_id());\n+            if let ItemKind::Mod(..) = item.kind {\n+                // If this declares another module, do not recurse inside it.\n+                self.submodules.insert(item.def_id);\n+            } else {\n+                intravisit::walk_item(self, item)\n+            }\n+        }\n+\n+        fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {\n+            self.trait_items.insert(item.trait_item_id());\n+            intravisit::walk_trait_item(self, item)\n+        }\n+\n+        fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {\n+            self.impl_items.insert(item.impl_item_id());\n+            intravisit::walk_impl_item(self, item)\n+        }\n+\n+        fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {\n+            self.foreign_items.insert(item.foreign_item_id());\n+            intravisit::walk_foreign_item(self, item)\n+        }\n+    }\n+}"}, {"sha": "7d660b18ae1afe0c7c81725b074ca7b6b98149e6", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::*;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::DUMMY_SP;\n-use std::collections::BTreeMap;\n+use std::collections::{BTreeMap, BTreeSet};\n \n /// Result of HIR indexing.\n #[derive(Debug)]\n@@ -121,6 +121,17 @@ impl<'tcx> AttributeMap<'tcx> {\n     }\n }\n \n+#[derive(Default, Encodable, Debug, HashStable)]\n+pub struct ModuleItems {\n+    // Use BTreeSets here so items are in the same order as in the\n+    // list of all items in Crate\n+    submodules: BTreeSet<LocalDefId>,\n+    items: BTreeSet<ItemId>,\n+    trait_items: BTreeSet<TraitItemId>,\n+    impl_items: BTreeSet<ImplItemId>,\n+    foreign_items: BTreeSet<ForeignItemId>,\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     #[inline(always)]\n     pub fn hir(self) -> map::Map<'tcx> {\n@@ -140,7 +151,7 @@ pub fn provide(providers: &mut Providers) {\n     providers.hir_crate = |tcx, ()| tcx.untracked_crate;\n     providers.index_hir = map::index_hir;\n     providers.crate_hash = map::crate_hash;\n-    providers.hir_module_items = |tcx, id| &tcx.untracked_crate.modules[&id];\n+    providers.hir_module_items = map::hir_module_items;\n     providers.hir_owner = |tcx, id| {\n         let owner = tcx.index_hir(()).map[id].as_ref()?;\n         let node = owner.nodes[ItemLocalId::new(0)].as_ref().unwrap().node;"}, {"sha": "02f0294c8ad25e944164e16a9e9bfb971ea568ba", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -33,6 +33,7 @@\n #![feature(discriminant_kind)]\n #![feature(exhaustive_patterns)]\n #![feature(if_let_guard)]\n+#![feature(map_first_last)]\n #![feature(never_type)]\n #![feature(extern_types)]\n #![feature(new_uninit)]"}, {"sha": "0ff444faa7a7a2b93bd0d67ae4b96f524fe54746", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -52,8 +52,8 @@ rustc_queries! {\n     ///\n     /// This can be conveniently accessed by `tcx.hir().visit_item_likes_in_module`.\n     /// Avoid calling this query directly.\n-    query hir_module_items(key: LocalDefId) -> &'tcx hir::ModuleItems {\n-        eval_always\n+    query hir_module_items(key: LocalDefId) -> rustc_middle::hir::ModuleItems {\n+        storage(ArenaCacheSelector<'tcx>)\n         desc { |tcx| \"HIR module items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n "}, {"sha": "eff1096c855971b73af65b5dbea2eadde40bd74c", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n+use rustc_data_structures::sync::Lock;\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::intravisit;\n@@ -18,9 +18,9 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     let errors = Lock::new(Vec::new());\n     let hir_map = tcx.hir();\n \n-    par_iter(&hir_map.krate().modules).for_each(|(&module_id, _)| {\n+    hir_map.par_for_each_module(|module_id| {\n         hir_map\n-            .visit_item_likes_in_module(module_id, &mut OuterVisitor { hir_map, errors: &errors });\n+            .visit_item_likes_in_module(module_id, &mut OuterVisitor { hir_map, errors: &errors })\n     });\n \n     let errors = errors.into_inner();"}, {"sha": "9b23bf241cc6fa5ec87fa0a274e623da78916a6a", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -58,9 +58,7 @@ pub fn impl_wf_check(tcx: TyCtxt<'_>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_impl_wf(module);\n-    }\n+    tcx.hir().for_each_module(|module| tcx.ensure().check_mod_impl_wf(module))\n }\n \n fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {"}, {"sha": "f8714cdc70c19f7fcb3b547b068b6fcc5a1c37ae", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -473,9 +473,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n     // FIXME(matthewjasper) We shouldn't need to use `track_errors`.\n     tcx.sess.track_errors(|| {\n         tcx.sess.time(\"type_collecting\", || {\n-            for &module in tcx.hir().krate().modules.keys() {\n-                tcx.ensure().collect_mod_item_types(module);\n-            }\n+            tcx.hir().for_each_module(|module| tcx.ensure().collect_mod_item_types(module))\n         });\n     })?;\n \n@@ -505,9 +503,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n \n     // NOTE: This is copy/pasted in librustdoc/core.rs and should be kept in sync.\n     tcx.sess.time(\"item_types_checking\", || {\n-        for &module in tcx.hir().krate().modules.keys() {\n-            tcx.ensure().check_mod_item_types(module);\n-        }\n+        tcx.hir().for_each_module(|module| tcx.ensure().check_mod_item_types(module))\n     });\n \n     tcx.sess.time(\"item_bodies_checking\", || tcx.typeck_item_bodies(()));"}, {"sha": "2f3787535aac77129b9b6fed690e617498b4a897", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6f5adf73a6e9a2b73fd6792cab475e8108951d/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "patch": "@@ -330,18 +330,14 @@ crate fn run_global_ctxt(\n \n     // NOTE: This is copy/pasted from typeck/lib.rs and should be kept in sync with those changes.\n     tcx.sess.time(\"item_types_checking\", || {\n-        for &module in tcx.hir().krate().modules.keys() {\n-            tcx.ensure().check_mod_item_types(module);\n-        }\n+        tcx.hir().for_each_module(|module| tcx.ensure().check_mod_item_types(module))\n     });\n     tcx.sess.abort_if_errors();\n     tcx.sess.time(\"missing_docs\", || {\n         rustc_lint::check_crate(tcx, rustc_lint::builtin::MissingDoc::new);\n     });\n     tcx.sess.time(\"check_mod_attrs\", || {\n-        for &module in tcx.hir().krate().modules.keys() {\n-            tcx.ensure().check_mod_attrs(module);\n-        }\n+        tcx.hir().for_each_module(|module| tcx.ensure().check_mod_attrs(module))\n     });\n     rustc_passes::stability::check_unused_or_stable_features(tcx);\n "}]}