{"sha": "27838075e059bc8ab427c1e932b7dc24f0b611e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ODM4MDc1ZTA1OWJjOGFiNDI3YzFlOTMyYjdkYzI0ZjBiNjExZTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:17:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:17:40Z"}, "message": "rollup merge of #21438: taralx/kill-racycell\n\nConflicts:\n\tsrc/libstd/sync/mpsc/mod.rs", "tree": {"sha": "9b46355749d3bf63089f1d91befb6ef2cf3d74c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b46355749d3bf63089f1d91befb6ef2cf3d74c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27838075e059bc8ab427c1e932b7dc24f0b611e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27838075e059bc8ab427c1e932b7dc24f0b611e0", "html_url": "https://github.com/rust-lang/rust/commit/27838075e059bc8ab427c1e932b7dc24f0b611e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27838075e059bc8ab427c1e932b7dc24f0b611e0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a22557394e746c46ef05eff988182aafaeb42a", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a22557394e746c46ef05eff988182aafaeb42a", "html_url": "https://github.com/rust-lang/rust/commit/04a22557394e746c46ef05eff988182aafaeb42a"}, {"sha": "b6380f5c67cace73a1170f282e6cd7f8c65a0625", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6380f5c67cace73a1170f282e6cd7f8c65a0625", "html_url": "https://github.com/rust-lang/rust/commit/b6380f5c67cace73a1170f282e6cd7f8c65a0625"}], "stats": {"total": 48, "additions": 15, "deletions": 33}, "files": [{"sha": "2ea85247723f1ac0f8723a93479d6100be2e0962", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=27838075e059bc8ab427c1e932b7dc24f0b611e0", "patch": "@@ -319,6 +319,7 @@ use prelude::v1::*;\n \n use sync::Arc;\n use fmt;\n+#[cfg(stage0)] // NOTE remove use after next snapshot\n use marker;\n use mem;\n use cell::UnsafeCell;\n@@ -371,10 +372,12 @@ unsafe impl<T:Send> Send for Sender<T> { }\n /// owned by one task, but it can be cloned to send to other tasks.\n #[stable]\n pub struct SyncSender<T> {\n-    inner: Arc<RacyCell<sync::Packet<T>>>,\n+    inner: Arc<UnsafeCell<sync::Packet<T>>>,\n }\n \n-impl<T> !marker::Sync for SyncSender<T> {}\n+unsafe impl<T:Send> Send for SyncSender<T> {}\n+\n+impl<T> !Sync for SyncSender<T> {}\n \n /// An error returned from the `send` function on channels.\n ///\n@@ -430,10 +433,10 @@ pub enum TrySendError<T> {\n }\n \n enum Flavor<T> {\n-    Oneshot(Arc<RacyCell<oneshot::Packet<T>>>),\n-    Stream(Arc<RacyCell<stream::Packet<T>>>),\n-    Shared(Arc<RacyCell<shared::Packet<T>>>),\n-    Sync(Arc<RacyCell<sync::Packet<T>>>),\n+    Oneshot(Arc<UnsafeCell<oneshot::Packet<T>>>),\n+    Stream(Arc<UnsafeCell<stream::Packet<T>>>),\n+    Shared(Arc<UnsafeCell<shared::Packet<T>>>),\n+    Sync(Arc<UnsafeCell<sync::Packet<T>>>),\n }\n \n #[doc(hidden)]\n@@ -485,7 +488,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// ```\n #[stable]\n pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n-    let a = Arc::new(RacyCell::new(oneshot::Packet::new()));\n+    let a = Arc::new(UnsafeCell::new(oneshot::Packet::new()));\n     (Sender::new(Flavor::Oneshot(a.clone())), Receiver::new(Flavor::Oneshot(a)))\n }\n \n@@ -525,7 +528,7 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n /// ```\n #[stable]\n pub fn sync_channel<T: Send>(bound: uint) -> (SyncSender<T>, Receiver<T>) {\n-    let a = Arc::new(RacyCell::new(sync::Packet::new(bound)));\n+    let a = Arc::new(UnsafeCell::new(sync::Packet::new(bound)));\n     (SyncSender::new(a.clone()), Receiver::new(Flavor::Sync(a)))\n }\n \n@@ -577,7 +580,7 @@ impl<T: Send> Sender<T> {\n                         return (*p).send(t).map_err(SendError);\n                     } else {\n                         let a =\n-                            Arc::new(RacyCell::new(stream::Packet::new()));\n+                            Arc::new(UnsafeCell::new(stream::Packet::new()));\n                         let rx = Receiver::new(Flavor::Stream(a.clone()));\n                         match (*p).upgrade(rx) {\n                             oneshot::UpSuccess => {\n@@ -619,7 +622,7 @@ impl<T: Send> Clone for Sender<T> {\n     fn clone(&self) -> Sender<T> {\n         let (packet, sleeper, guard) = match *unsafe { self.inner() } {\n             Flavor::Oneshot(ref p) => {\n-                let a = Arc::new(RacyCell::new(shared::Packet::new()));\n+                let a = Arc::new(UnsafeCell::new(shared::Packet::new()));\n                 unsafe {\n                     let guard = (*a.get()).postinit_lock();\n                     let rx = Receiver::new(Flavor::Shared(a.clone()));\n@@ -631,7 +634,7 @@ impl<T: Send> Clone for Sender<T> {\n                 }\n             }\n             Flavor::Stream(ref p) => {\n-                let a = Arc::new(RacyCell::new(shared::Packet::new()));\n+                let a = Arc::new(UnsafeCell::new(shared::Packet::new()));\n                 unsafe {\n                     let guard = (*a.get()).postinit_lock();\n                     let rx = Receiver::new(Flavor::Shared(a.clone()));\n@@ -677,8 +680,7 @@ impl<T: Send> Drop for Sender<T> {\n ////////////////////////////////////////////////////////////////////////////////\n \n impl<T: Send> SyncSender<T> {\n-\n-    fn new(inner: Arc<RacyCell<sync::Packet<T>>>) -> SyncSender<T> {\n+    fn new(inner: Arc<UnsafeCell<sync::Packet<T>>>) -> SyncSender<T> {\n         SyncSender { inner: inner }\n     }\n \n@@ -961,26 +963,6 @@ impl<T: Send> Drop for Receiver<T> {\n     }\n }\n \n-/// A version of `UnsafeCell` intended for use in concurrent data\n-/// structures (for example, you might put it in an `Arc`).\n-struct RacyCell<T>(pub UnsafeCell<T>);\n-\n-impl<T> RacyCell<T> {\n-\n-    fn new(value: T) -> RacyCell<T> {\n-        RacyCell(UnsafeCell { value: value })\n-    }\n-\n-    unsafe fn get(&self) -> *mut T {\n-        self.0.get()\n-    }\n-\n-}\n-\n-unsafe impl<T:Send> Send for RacyCell<T> { }\n-\n-unsafe impl<T> Sync for RacyCell<T> { } // Oh dear\n-\n impl<T> fmt::Show for SendError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"sending on a closed channel\".fmt(f)"}]}