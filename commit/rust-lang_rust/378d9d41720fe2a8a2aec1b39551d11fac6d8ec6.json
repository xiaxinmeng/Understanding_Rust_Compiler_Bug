{"sha": "378d9d41720fe2a8a2aec1b39551d11fac6d8ec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OGQ5ZDQxNzIwZmUyYThhMmFlYzFiMzk1NTFkMTFmYWM2ZDhlYzY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-16T15:47:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-16T15:47:37Z"}, "message": "be pragmatic about ptr-int comparisons, for now", "tree": {"sha": "aebed15edc065e24af262443e4dd82ba57b4e9ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aebed15edc065e24af262443e4dd82ba57b4e9ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/378d9d41720fe2a8a2aec1b39551d11fac6d8ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/378d9d41720fe2a8a2aec1b39551d11fac6d8ec6", "html_url": "https://github.com/rust-lang/rust/commit/378d9d41720fe2a8a2aec1b39551d11fac6d8ec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/378d9d41720fe2a8a2aec1b39551d11fac6d8ec6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c06679f93df53f83bbf61b197f2e5c39f5d7633", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c06679f93df53f83bbf61b197f2e5c39f5d7633", "html_url": "https://github.com/rust-lang/rust/commit/7c06679f93df53f83bbf61b197f2e5c39f5d7633"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "45c0e63542dc2fda8b7c7d39fc49b614bf2e186c", "filename": "src/operator.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/378d9d41720fe2a8a2aec1b39551d11fac6d8ec6/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378d9d41720fe2a8a2aec1b39551d11fac6d8ec6/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=378d9d41720fe2a8a2aec1b39551d11fac6d8ec6", "patch": "@@ -152,8 +152,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                     // This accepts one-past-the end. Thus, there is still technically\n                     // some non-determinism that we do not fully rule out when two\n                     // allocations sit right next to each other. The C/C++ standards are\n-                    // somewhat fuzzy about this case, so I think for now this check is\n-                    // \"good enough\".\n+                    // somewhat fuzzy about this case, so pragmatically speaking I think\n+                    // for now this check is \"good enough\".\n+                    // FIXME: Once we support intptrcast, we could try to fix these holes.\n                     // Dead allocations in miri cannot overlap with live allocations, but\n                     // on read hardware this can easily happen. Thus for comparisons we require\n                     // both pointers to be live.\n@@ -169,8 +170,17 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 assert_eq!(size as u64, self.pointer_size().bytes());\n                 let bits = bits as u64;\n \n-                // Case I: Comparing with NULL.\n-                if bits == 0 {\n+                // Case I: Comparing real pointers with \"small\" integers.\n+                // Really we should only do this for NULL, but pragmatically speaking on non-bare-metal systems,\n+                // an allocation will never be at the very bottom of the address space.\n+                // Such comparisons can arise when comparing empty slices, which sometimes are \"fake\"\n+                // integer pointers (okay because the slice is empty) and sometimes point into a\n+                // real allocation.\n+                // The most common source of such integer pointers is `NonNull::dangling()`, which\n+                // equals the type's alignment. i128 might have an alignment of 16 bytes, but few types have\n+                // alignment 32 or higher, hence the limit of 32.\n+                // FIXME: Once we support intptrcast, we could try to fix these holes.\n+                if bits < 32 {\n                     // Test if the ptr is in-bounds. Then it cannot be NULL.\n                     // Even dangling pointers cannot be NULL.\n                     if self.memory().check_bounds_ptr(ptr, InboundsCheck::MaybeDead).is_ok() {"}, {"sha": "739def804975d7ae95533de43291c983ba8bf489", "filename": "tests/run-pass/vecs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378d9d41720fe2a8a2aec1b39551d11fac6d8ec6/tests%2Frun-pass%2Fvecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378d9d41720fe2a8a2aec1b39551d11fac6d8ec6/tests%2Frun-pass%2Fvecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecs.rs?ref=378d9d41720fe2a8a2aec1b39551d11fac6d8ec6", "patch": "@@ -85,4 +85,8 @@ fn main() {\n     assert_eq!(make_vec_macro(), [1, 2]);\n     assert_eq!(make_vec_macro_repeat(), [42; 5]);\n     assert_eq!(make_vec_macro_repeat_zeroed(), [0; 7]);\n+\n+    // Test interesting empty slice comparison\n+    // (one is a real pointer, one an integer pointer).\n+    assert_eq!((200..-5).step_by(1).collect::<Vec<isize>>(), []);\n }"}]}