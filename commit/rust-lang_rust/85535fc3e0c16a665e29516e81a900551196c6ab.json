{"sha": "85535fc3e0c16a665e29516e81a900551196c6ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NTM1ZmMzZTBjMTZhNjY1ZTI5NTE2ZTgxYTkwMDU1MTE5NmM2YWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T04:37:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T16:37:00Z"}, "message": "Move crate_map from resolve to cstore", "tree": {"sha": "7af967379a398a88682c2bde1ceef9c2397f10bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7af967379a398a88682c2bde1ceef9c2397f10bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85535fc3e0c16a665e29516e81a900551196c6ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85535fc3e0c16a665e29516e81a900551196c6ab", "html_url": "https://github.com/rust-lang/rust/commit/85535fc3e0c16a665e29516e81a900551196c6ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85535fc3e0c16a665e29516e81a900551196c6ab/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513b2276c22a298bd7d2b2b92842046f5cde68bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/513b2276c22a298bd7d2b2b92842046f5cde68bf", "html_url": "https://github.com/rust-lang/rust/commit/513b2276c22a298bd7d2b2b92842046f5cde68bf"}], "stats": {"total": 124, "additions": 66, "deletions": 58}, "files": [{"sha": "f5757f56bee7e18ee4a0b4217e98edea8639869a", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 50, "deletions": 51, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/85535fc3e0c16a665e29516e81a900551196c6ab/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85535fc3e0c16a665e29516e81a900551196c6ab/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=85535fc3e0c16a665e29516e81a900551196c6ab", "patch": "@@ -30,11 +30,10 @@ export list_file_metadata;\n \n // Traverses an AST, reading all the information about use'd crates and native\n // libraries necessary for later resolving, typechecking, linking, etc.\n-fn read_crates(session::session sess, resolve::crate_map crate_map,\n+fn read_crates(session::session sess,\n                &ast::crate crate) {\n     auto e =\n         @rec(sess=sess,\n-             crate_map=crate_map,\n              crate_cache=@std::map::new_str_hash[int](),\n              library_search_paths=sess.get_opts().library_search_paths,\n              mutable next_crate_num=1);\n@@ -45,6 +44,55 @@ fn read_crates(session::session sess, resolve::crate_map crate_map,\n     walk::walk_crate(v, crate);\n }\n \n+type env =\n+    @rec(session::session sess,\n+         @hashmap[str, int] crate_cache,\n+         vec[str] library_search_paths,\n+         mutable int next_crate_num);\n+\n+fn visit_view_item(env e, &@ast::view_item i) {\n+    alt (i.node) {\n+        case (ast::view_item_use(?ident, ?meta_items, ?id)) {\n+            auto cnum;\n+            if (!e.crate_cache.contains_key(ident)) {\n+                cnum = e.next_crate_num;\n+                load_library_crate(e.sess, i.span, cnum, ident,\n+                                   meta_items, e.library_search_paths);\n+                e.crate_cache.insert(ident, e.next_crate_num);\n+                e.next_crate_num += 1;\n+            } else { cnum = e.crate_cache.get(ident); }\n+            cstore::add_use_stmt_cnum(e.sess.get_cstore(), id, cnum);\n+        }\n+        case (_) { }\n+    }\n+}\n+\n+fn visit_item(env e, &@ast::item i) {\n+    alt (i.node) {\n+        case (ast::item_native_mod(?m)) {\n+            if (m.abi != ast::native_abi_rust &&\n+                m.abi != ast::native_abi_cdecl) {\n+                ret;\n+            }\n+            auto cstore = e.sess.get_cstore();\n+            if (!cstore::add_used_library(cstore, m.native_name)) {\n+                ret;\n+            }\n+            for (ast::attribute a in\n+                     attr::find_attrs_by_name(i.attrs, \"link_args\")) {\n+                alt (attr::get_meta_item_value_str(attr::attr_meta(a))) {\n+                    case (some(?linkarg)) {\n+                        cstore::add_used_link_args(cstore, linkarg);\n+                    }\n+                    case (none) { /* fallthrough */ }\n+                }\n+            }\n+        }\n+        case (_) {\n+        }\n+    }\n+}\n+\n // A diagnostic function for dumping crate metadata to an output stream\n fn list_file_metadata(str path, io::writer out) {\n     alt (get_metadata_section(path)) {\n@@ -178,55 +226,6 @@ fn load_library_crate(&session::session sess, span span, int cnum,\n     sess.span_fatal(span, #fmt(\"can't find crate for '%s'\", ident));\n }\n \n-type env =\n-    @rec(session::session sess,\n-         resolve::crate_map crate_map,\n-         @hashmap[str, int] crate_cache,\n-         vec[str] library_search_paths,\n-         mutable int next_crate_num);\n-\n-fn visit_view_item(env e, &@ast::view_item i) {\n-    alt (i.node) {\n-        case (ast::view_item_use(?ident, ?meta_items, ?id)) {\n-            auto cnum;\n-            if (!e.crate_cache.contains_key(ident)) {\n-                cnum = e.next_crate_num;\n-                load_library_crate(e.sess, i.span, cnum, ident,\n-                                   meta_items, e.library_search_paths);\n-                e.crate_cache.insert(ident, e.next_crate_num);\n-                e.next_crate_num += 1;\n-            } else { cnum = e.crate_cache.get(ident); }\n-            e.crate_map.insert(id, cnum);\n-        }\n-        case (_) { }\n-    }\n-}\n-\n-fn visit_item(env e, &@ast::item i) {\n-    alt (i.node) {\n-        case (ast::item_native_mod(?m)) {\n-            if (m.abi != ast::native_abi_rust &&\n-                m.abi != ast::native_abi_cdecl) {\n-                ret;\n-            }\n-            auto cstore = e.sess.get_cstore();\n-            if (!cstore::add_used_library(cstore, m.native_name)) {\n-                ret;\n-            }\n-            for (ast::attribute a in\n-                     attr::find_attrs_by_name(i.attrs, \"link_args\")) {\n-                alt (attr::get_meta_item_value_str(attr::attr_meta(a))) {\n-                    case (some(?linkarg)) {\n-                        cstore::add_used_link_args(cstore, linkarg);\n-                    }\n-                    case (none) { /* fallthrough */ }\n-                }\n-            }\n-        }\n-        case (_) {\n-        }\n-    }\n-}\n \n \n // Local Variables:"}, {"sha": "80690a46263f079d126039531d2c86e69ddbf9b2", "filename": "src/comp/metadata/cstore.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85535fc3e0c16a665e29516e81a900551196c6ab/src%2Fcomp%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85535fc3e0c16a665e29516e81a900551196c6ab/src%2Fcomp%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcstore.rs?ref=85535fc3e0c16a665e29516e81a900551196c6ab", "patch": "@@ -4,17 +4,24 @@\n import std::map;\n import std::vec;\n import std::str;\n+import syntax::ast;\n \n type crate_metadata = rec(str name, vec[u8] data);\n \n+// Map from node_id's of local use statements to crate numbers\n+type use_crate_map = map::hashmap[ast::node_id, ast::crate_num];\n+\n type cstore = @rec(map::hashmap[int, crate_metadata] metas,\n+                   use_crate_map use_crate_map,\n                    mutable vec[str] used_crate_files,\n                    mutable vec[str] used_libraries,\n                    mutable vec[str] used_link_args);\n \n fn mk_cstore() -> cstore {\n     auto meta_cache = map::new_int_hash[crate_metadata]();\n+    auto crate_map = map::new_int_hash[ast::crate_num]();\n     ret @rec(metas = meta_cache,\n+             use_crate_map = crate_map,\n              mutable used_crate_files = [],\n              mutable used_libraries = [],\n              mutable used_link_args = []);\n@@ -65,6 +72,11 @@ fn get_used_link_args(&cstore cstore) -> vec[str] {\n     ret cstore.used_link_args;\n }\n \n+fn add_use_stmt_cnum(&cstore cstore, ast::node_id use_id, int cnum) {\n+    cstore.use_crate_map.insert(use_id, cnum);\n+}\n+\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "c01cf90ed9317d7f94dcb41735b5af1389711a4f", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85535fc3e0c16a665e29516e81a900551196c6ab/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85535fc3e0c16a665e29516e81a900551196c6ab/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=85535fc3e0c16a665e29516e81a900551196c6ab", "patch": "@@ -9,6 +9,7 @@ import ast::local_def;\n \n import metadata::creader;\n import metadata::decoder;\n+import metadata::cstore;\n import driver::session::session;\n import util::common::new_def_hash;\n import std::map::new_int_hash;\n@@ -32,7 +33,6 @@ import std::vec;\n \n export resolve_crate;\n export def_map;\n-export crate_map;\n \n // Resolving happens in two passes. The first pass collects defids of all\n // (internal) imports and modules, so that they can be looked up when needed,\n@@ -103,13 +103,10 @@ type indexed_mod =\n /* native modules can't contain tags, and we don't store their ASTs because we\n    only need to look at them to determine exports, which they can't control.*/\n \n-// It should be safe to use index to memoize lookups of globbed names.\n-type crate_map = hashmap[node_id, ast::crate_num];\n-\n type def_map = hashmap[node_id, def];\n \n type env =\n-    rec(crate_map crate_map,\n+    rec(cstore::use_crate_map crate_map,\n         def_map def_map,\n         constr_table fn_constrs,\n         ast_map::map ast_map,\n@@ -128,8 +125,9 @@ tag namespace { ns_value; ns_type; ns_module; }\n \n fn resolve_crate(session sess, &ast_map::map amap, @ast::crate crate) ->\n    tup(def_map, constr_table) {\n+    creader::read_crates(sess, *crate);\n     auto e =\n-        @rec(crate_map=new_int_hash[ast::crate_num](),\n+        @rec(crate_map=sess.get_cstore().use_crate_map,\n              def_map=new_int_hash[def](),\n              fn_constrs = new_int_hash[ty::constr_def[]](),\n              ast_map=amap,\n@@ -138,7 +136,6 @@ fn resolve_crate(session sess, &ast_map::map amap, @ast::crate crate) ->\n              ext_map=new_def_hash[vec[ident]](),\n              ext_cache=new_ext_hash(),\n              sess=sess);\n-    creader::read_crates(sess, e.crate_map, *crate);\n     map_crate(e, crate);\n     resolve_imports(*e);\n     check_for_collisions(e, *crate);"}]}