{"sha": "4beea1720af3f1bc2d89ecedec539cc4c788cc91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZWVhMTcyMGFmM2YxYmMyZDg5ZWNlZGVjNTM5Y2M0Yzc4OGNjOTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-20T23:03:29Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-25T02:43:02Z"}, "message": "Deduplicate code for path suggestion", "tree": {"sha": "5668630a741b68c1ddcabf6cbb5b4d9a361483d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5668630a741b68c1ddcabf6cbb5b4d9a361483d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4beea1720af3f1bc2d89ecedec539cc4c788cc91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4beea1720af3f1bc2d89ecedec539cc4c788cc91", "html_url": "https://github.com/rust-lang/rust/commit/4beea1720af3f1bc2d89ecedec539cc4c788cc91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4beea1720af3f1bc2d89ecedec539cc4c788cc91/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "539041437956abf05bd4ad0b6ecb253591df3085", "url": "https://api.github.com/repos/rust-lang/rust/commits/539041437956abf05bd4ad0b6ecb253591df3085", "html_url": "https://github.com/rust-lang/rust/commit/539041437956abf05bd4ad0b6ecb253591df3085"}], "stats": {"total": 107, "additions": 43, "deletions": 64}, "files": [{"sha": "461d02e515d38dcfdacd6a66c9a218f3e8a885e2", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 41, "deletions": 62, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/4beea1720af3f1bc2d89ecedec539cc4c788cc91/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beea1720af3f1bc2d89ecedec539cc4c788cc91/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=4beea1720af3f1bc2d89ecedec539cc4c788cc91", "patch": "@@ -5,7 +5,7 @@ use log::debug;\n use rustc::hir::def::{Def, CtorKind, Namespace::*};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::session::config::nightly_options;\n-use syntax::ast::{ExprKind};\n+use syntax::ast::{Expr, ExprKind};\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n@@ -250,6 +250,29 @@ impl<'a> Resolver<'a> {\n         let ns = source.namespace();\n         let is_expected = &|def| source.is_expected(def);\n \n+        let path_sep = |err: &mut DiagnosticBuilder<'_>, expr: &Expr| match expr.node {\n+            ExprKind::Field(_, ident) => {\n+                err.span_suggestion(\n+                    expr.span,\n+                    \"use the path separator to refer to an item\",\n+                    format!(\"{}::{}\", path_str, ident),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                true\n+            }\n+            ExprKind::MethodCall(ref segment, ..) => {\n+                let span = expr.span.with_hi(segment.ident.span.hi());\n+                err.span_suggestion(\n+                    span,\n+                    \"use the path separator to refer to an item\",\n+                    format!(\"{}::{}\", path_str, segment.ident),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                true\n+            }\n+            _ => false,\n+        };\n+\n         match (def, source) {\n             (Def::Macro(..), _) => {\n                 err.span_suggestion(\n@@ -259,8 +282,7 @@ impl<'a> Resolver<'a> {\n                     Applicability::MaybeIncorrect,\n                 );\n                 if path_str == \"try\" && span.rust_2015() {\n-                    err.note(\"if you want the `try` keyword, \\\n-                        you need to be in the 2018 edition\");\n+                    err.note(\"if you want the `try` keyword, you need to be in the 2018 edition\");\n                 }\n             }\n             (Def::TyAlias(..), PathSource::Trait(_)) => {\n@@ -269,25 +291,8 @@ impl<'a> Resolver<'a> {\n                     err.note(\"did you mean to use a trait alias?\");\n                 }\n             }\n-            (Def::Mod(..), PathSource::Expr(Some(parent))) => match parent.node {\n-                ExprKind::Field(_, ident) => {\n-                    err.span_suggestion(\n-                        parent.span,\n-                        \"use the path separator to refer to an item\",\n-                        format!(\"{}::{}\", path_str, ident),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-                ExprKind::MethodCall(ref segment, ..) => {\n-                    let span = parent.span.with_hi(segment.ident.span.hi());\n-                    err.span_suggestion(\n-                        span,\n-                        \"use the path separator to refer to an item\",\n-                        format!(\"{}::{}\", path_str, segment.ident),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-                _ => return false,\n+            (Def::Mod(..), PathSource::Expr(Some(parent))) => if !path_sep(err, &parent) {\n+                return false;\n             },\n             (Def::Enum(..), PathSource::TupleStruct)\n                 | (Def::Enum(..), PathSource::Expr(..))  => {\n@@ -315,8 +320,10 @@ impl<'a> Resolver<'a> {\n                         = self.struct_constructors.get(&def_id).cloned() {\n                     let accessible_ctor = self.is_accessible(ctor_vis);\n                     if is_expected(ctor_def) && !accessible_ctor {\n-                        err.span_label(span, format!(\"constructor is not visible \\\n-                                                      here due to private fields\"));\n+                        err.span_label(\n+                            span,\n+                            format!(\"constructor is not visible here due to private fields\"),\n+                        );\n                     }\n                 } else {\n                     // HACK(estebank): find a better way to figure out that this was a\n@@ -366,36 +373,12 @@ impl<'a> Resolver<'a> {\n                         }\n                     }\n                     match source {\n-                        PathSource::Expr(Some(parent)) => {\n-                            match parent.node {\n-                                ExprKind::MethodCall(ref path_assignment, _)  => {\n-                                    err.span_suggestion(\n-                                        sm.start_point(parent.span)\n-                                            .to(path_assignment.ident.span),\n-                                        \"use `::` to access an associated function\",\n-                                        format!(\"{}::{}\",\n-                                                path_str,\n-                                                path_assignment.ident),\n-                                        Applicability::MaybeIncorrect\n-                                    );\n-                                },\n-                                ExprKind::Field(ref _expr, ident) => {\n-                                    err.span_suggestion(\n-                                        sm.start_point(parent.span).to(ident.span),\n-                                        \"use `::` to access an associated item\",\n-                                        format!(\"{}::{}\", path_str, ident),\n-                                        Applicability::MaybeIncorrect\n-                                    );\n-                                }\n-                                _ => {\n-                                    err.span_label(\n-                                        span,\n-                                        format!(\"did you mean `{} {{ /* fields */ }}`?\",\n-                                                path_str),\n-                                    );\n-                                },\n-                            }\n-                        },\n+                        PathSource::Expr(Some(parent)) => if !path_sep(err, &parent) {\n+                            err.span_label(\n+                                span,\n+                                format!(\"did you mean `{} {{ /* fields */ }}`?\", path_str),\n+                            );\n+                        }\n                         PathSource::Expr(None) if followed_by_brace == true => {\n                             if let Some((sp, snippet)) = closing_brace {\n                                 err.span_suggestion(\n@@ -407,16 +390,14 @@ impl<'a> Resolver<'a> {\n                             } else {\n                                 err.span_label(\n                                     span,\n-                                    format!(\"did you mean `({} {{ /* fields */ }})`?\",\n-                                            path_str),\n+                                    format!(\"did you mean `({} {{ /* fields */ }})`?\", path_str),\n                                 );\n                             }\n                         },\n                         _ => {\n                             err.span_label(\n                                 span,\n-                                format!(\"did you mean `{} {{ /* fields */ }}`?\",\n-                                        path_str),\n+                                format!(\"did you mean `{} {{ /* fields */ }}`?\", path_str),\n                             );\n                         },\n                     }\n@@ -425,13 +406,11 @@ impl<'a> Resolver<'a> {\n             (Def::Union(..), _) |\n             (Def::Variant(..), _) |\n             (Def::Ctor(_, _, CtorKind::Fictive), _) if ns == ValueNS => {\n-                err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\",\n-                                             path_str));\n+                err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\", path_str));\n             }\n             (Def::SelfTy(..), _) if ns == ValueNS => {\n                 err.span_label(span, fallback_label);\n-                err.note(\"can't use `Self` as a constructor, you must use the \\\n-                          implemented struct\");\n+                err.note(\"can't use `Self` as a constructor, you must use the implemented struct\");\n             }\n             (Def::TyAlias(_), _) | (Def::AssociatedTy(..), _) if ns == ValueNS => {\n                 err.note(\"can't use a type alias as a constructor\");"}, {"sha": "e076419f68d47b9449960cdc01f2da6e7460324b", "filename": "src/test/ui/resolve/issue-22692.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4beea1720af3f1bc2d89ecedec539cc4c788cc91/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4beea1720af3f1bc2d89ecedec539cc4c788cc91/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr?ref=4beea1720af3f1bc2d89ecedec539cc4c788cc91", "patch": "@@ -4,7 +4,7 @@ error[E0423]: expected value, found struct `String`\n LL |     let _ = String.new();\n    |             ^^^^^^----\n    |             |\n-   |             help: use `::` to access an associated function: `String::new`\n+   |             help: use the path separator to refer to an item: `String::new`\n \n error: aborting due to previous error\n "}, {"sha": "5e746ecb2f28fca8c2bf9e817eb3700dbaa34253", "filename": "src/test/ui/suggestions/assoc-const-as-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4beea1720af3f1bc2d89ecedec539cc4c788cc91/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-const-as-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4beea1720af3f1bc2d89ecedec539cc4c788cc91/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-const-as-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-const-as-field.stderr?ref=4beea1720af3f1bc2d89ecedec539cc4c788cc91", "patch": "@@ -4,7 +4,7 @@ error[E0423]: expected value, found struct `Mod::Foo`\n LL |     foo(Mod::Foo.Bar);\n    |         ^^^^^^^^----\n    |         |\n-   |         help: use `::` to access an associated item: `Mod::Foo::Bar`\n+   |         help: use the path separator to refer to an item: `Mod::Foo::Bar`\n \n error: aborting due to previous error\n "}]}