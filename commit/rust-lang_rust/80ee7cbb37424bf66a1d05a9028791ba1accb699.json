{"sha": "80ee7cbb37424bf66a1d05a9028791ba1accb699", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZWU3Y2JiMzc0MjRiZjY2YTFkMDVhOTAyODc5MWJhMWFjY2I2OTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-14T23:27:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-14T23:27:52Z"}, "message": "Rollup merge of #82492 - CDirkx:sys_common_alloc, r=m-ou-se\n\nMove `std::sys_common::alloc` to new module `std::sys::common`\n\nhttps://github.com/rust-lang/rust/blob/6b56603e35b39c9f6cc76782330e5e415f9e43d5/library/std/src/sys_common/mod.rs#L7-L13\n\nIt was my impression that the goal for `std::sys` has changed from extracting it into a separate crate to making std work with features. However the fact remains that there is a lot of interdependence between `sys` and `sys_common`, this is because `sys_common` contains two types of code:\n\n- abstractions over the different platform implementations in `std::sys` (for example [`std::sys_common::mutex`](https://github.com/rust-lang/rust/blob/master/library/std/src/sys_common/mutex.rs))\n- code shared between platforms (for example [`std::sys_common::alloc`](https://github.com/rust-lang/rust/blob/master/library/std/src/sys_common/alloc.rs))\n\nThis PR attempts to address this by adding a new module `common` to `std::sys` which will contain code shared between platforms, `alloc.rs` in this case but more can be moved over in the future.", "tree": {"sha": "3ce1e500806636ccb3ef2a076a5fec00f5d7e4bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ce1e500806636ccb3ef2a076a5fec00f5d7e4bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80ee7cbb37424bf66a1d05a9028791ba1accb699", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgd3p4CRBK7hj4Ov3rIwAAdHIIAEf6H3IskAOkxto7elB7IA2X\nKMtg1NsnOs5jzC8rJKYIVrE3Jdxadjw1GLoYqiVoo1JDBJO9QA0DwxYFeVx5RBYr\nfAC5FeZV82usV8aK2K8trns54P42ayGhObCJhH4cnD4MJCr4/4CQ5q3nxFyG3lJ+\n8ZvDN15JdYGcIo2GJugfcqoOsA5HJePvXcXcBUoP9Wc6kBwrGhz0CzJWkPAoRWTS\naE9YlwJlHVgKUMfiBbEde4aK6IY/YgvrhJmzq+CVrTFHw6GggFPX6Vwov1cLNwUs\nJTj7wevTcQjFx0mzg45+dP6Y0KB+1QUIvxkOTqqSYvm6EraBxRuUXStJT7tNe+c=\n=/4iV\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ce1e500806636ccb3ef2a076a5fec00f5d7e4bb\nparent 16bf626a31cb5b121d0bca2baa969b4f67eb0dab\nparent cac0dd63b3514569ce79480b0cdf92335c5cf9f4\nauthor Dylan DPC <dylan.dpc@gmail.com> 1618442872 +0200\ncommitter GitHub <noreply@github.com> 1618442872 +0200\n\nRollup merge of #82492 - CDirkx:sys_common_alloc, r=m-ou-se\n\nMove `std::sys_common::alloc` to new module `std::sys::common`\n\nhttps://github.com/rust-lang/rust/blob/6b56603e35b39c9f6cc76782330e5e415f9e43d5/library/std/src/sys_common/mod.rs#L7-L13\n\nIt was my impression that the goal for `std::sys` has changed from extracting it into a separate crate to making std work with features. However the fact remains that there is a lot of interdependence between `sys` and `sys_common`, this is because `sys_common` contains two types of code:\n\n- abstractions over the different platform implementations in `std::sys` (for example [`std::sys_common::mutex`](https://github.com/rust-lang/rust/blob/master/library/std/src/sys_common/mutex.rs))\n- code shared between platforms (for example [`std::sys_common::alloc`](https://github.com/rust-lang/rust/blob/master/library/std/src/sys_common/alloc.rs))\n\nThis PR attempts to address this by adding a new module `common` to `std::sys` which will contain code shared between platforms, `alloc.rs` in this case but more can be moved over in the future.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80ee7cbb37424bf66a1d05a9028791ba1accb699", "html_url": "https://github.com/rust-lang/rust/commit/80ee7cbb37424bf66a1d05a9028791ba1accb699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80ee7cbb37424bf66a1d05a9028791ba1accb699/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16bf626a31cb5b121d0bca2baa969b4f67eb0dab", "url": "https://api.github.com/repos/rust-lang/rust/commits/16bf626a31cb5b121d0bca2baa969b4f67eb0dab", "html_url": "https://github.com/rust-lang/rust/commit/16bf626a31cb5b121d0bca2baa969b4f67eb0dab"}, {"sha": "cac0dd63b3514569ce79480b0cdf92335c5cf9f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cac0dd63b3514569ce79480b0cdf92335c5cf9f4", "html_url": "https://github.com/rust-lang/rust/commit/cac0dd63b3514569ce79480b0cdf92335c5cf9f4"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "2a54e99020e38f1bd673e1a4d2c5106aaf7ba0a9", "filename": "library/std/src/sys/common/alloc.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs?ref=80ee7cbb37424bf66a1d05a9028791ba1accb699", "patch": "@@ -1,5 +1,3 @@\n-#![allow(dead_code)]\n-\n use crate::alloc::{GlobalAlloc, Layout, System};\n use crate::cmp;\n use crate::ptr;", "previous_filename": "library/std/src/sys_common/alloc.rs"}, {"sha": "ff64d2aa8251533488276c6f98e82ee009f4dfd6", "filename": "library/std/src/sys/common/mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fmod.rs?ref=80ee7cbb37424bf66a1d05a9028791ba1accb699", "patch": "@@ -0,0 +1,13 @@\n+// This module contains code that is shared between all platforms, mostly utility or fallback code.\n+// This explicitly does not include code that is shared between only a few platforms,\n+// such as when reusing an implementation from `unix` or `unsupported`.\n+// In those cases the desired code should be included directly using the #[path] attribute,\n+// not moved to this module.\n+//\n+// Currently `sys_common` contains a lot of code that should live in this module,\n+// ideally `sys_common` would only contain platform-independent abstractions on top of `sys`.\n+// Progress on this is tracked in #84187.\n+\n+#![allow(dead_code)]\n+\n+pub mod alloc;"}, {"sha": "50c2660ebcf1f3e2ac6b775f3585f61565da2c6a", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=80ee7cbb37424bf66a1d05a9028791ba1accb699", "patch": "@@ -22,6 +22,8 @@\n \n #![allow(missing_debug_implementations)]\n \n+mod common;\n+\n cfg_if::cfg_if! {\n     if #[cfg(target_os = \"vxworks\")] {\n         mod vxworks;"}, {"sha": "1b71905aa09b77b448cb6cb433fd2cfa54d82b52", "filename": "library/std/src/sys/unix/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs?ref=80ee7cbb37424bf66a1d05a9028791ba1accb699", "patch": "@@ -1,6 +1,6 @@\n use crate::alloc::{GlobalAlloc, Layout, System};\n use crate::ptr;\n-use crate::sys_common::alloc::{realloc_fallback, MIN_ALIGN};\n+use crate::sys::common::alloc::{realloc_fallback, MIN_ALIGN};\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {"}, {"sha": "2fe71f9f28d5c853949505c0a5a22cdd1a62b902", "filename": "library/std/src/sys/windows/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Falloc.rs?ref=80ee7cbb37424bf66a1d05a9028791ba1accb699", "patch": "@@ -5,7 +5,7 @@ use crate::ffi::c_void;\n use crate::ptr;\n use crate::sync::atomic::{AtomicPtr, Ordering};\n use crate::sys::c;\n-use crate::sys_common::alloc::{realloc_fallback, MIN_ALIGN};\n+use crate::sys::common::alloc::{realloc_fallback, MIN_ALIGN};\n \n #[cfg(test)]\n mod tests;"}, {"sha": "23a3a0e907dcf7ebc5aef1c68b0b83e7e2516cec", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ee7cbb37424bf66a1d05a9028791ba1accb699/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=80ee7cbb37424bf66a1d05a9028791ba1accb699", "patch": "@@ -8,9 +8,11 @@\n //! rest of `std` is complex, with dependencies going in all\n //! directions: `std` depending on `sys_common`, `sys_common`\n //! depending on `sys`, and `sys` depending on `sys_common` and `std`.\n-//! Ideally `sys_common` would be split into two and the dependencies\n-//! between them all would form a dag, facilitating the extraction of\n-//! `std::sys` from the standard library.\n+//! This is because `sys_common` not only contains platform-independent code,\n+//! but also code that is shared between the different platforms in `sys`.\n+//! Ideally all that shared code should be moved to `sys::common`,\n+//! and the dependencies between `std`, `sys_common` and `sys` all would form a dag.\n+//! Progress on this is tracked in #84187.\n \n #![allow(missing_docs)]\n #![allow(missing_debug_implementations)]\n@@ -46,7 +48,6 @@ macro_rules! rtunwrap {\n     };\n }\n \n-pub mod alloc;\n pub mod at_exit_imp;\n pub mod backtrace;\n pub mod bytestring;"}]}