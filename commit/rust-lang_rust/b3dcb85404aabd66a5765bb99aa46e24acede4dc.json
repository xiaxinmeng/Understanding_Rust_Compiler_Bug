{"sha": "b3dcb85404aabd66a5765bb99aa46e24acede4dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZGNiODU0MDRhYWJkNjZhNTc2NWJiOTlhYTQ2ZTI0YWNlZGU0ZGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-11T00:11:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-19T08:29:30Z"}, "message": "Fix a bug in the opt-in-copy work: it was failing to liberate the regions bound in the impl before searching for `Copy` implements for all fields, leading to problems in the \"copyability check\". Basically the copyability check would wind up looking for an impl of `for<'tcx> Foo<&'tcx T>`. The impl that exists however is `impl<T> Copy for Foo<T>` and the current rules do not consider that a match (something I would like to revise in a later PR).", "tree": {"sha": "9642f8bdb665314856d17042a48249a7cac231ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9642f8bdb665314856d17042a48249a7cac231ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3dcb85404aabd66a5765bb99aa46e24acede4dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3dcb85404aabd66a5765bb99aa46e24acede4dc", "html_url": "https://github.com/rust-lang/rust/commit/b3dcb85404aabd66a5765bb99aa46e24acede4dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3dcb85404aabd66a5765bb99aa46e24acede4dc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b24602ca083cc20169190556a51066af0438049", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b24602ca083cc20169190556a51066af0438049", "html_url": "https://github.com/rust-lang/rust/commit/1b24602ca083cc20169190556a51066af0438049"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "16a77315bd50b4081d673df1d84713898a075624", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b3dcb85404aabd66a5765bb99aa46e24acede4dc/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3dcb85404aabd66a5765bb99aa46e24acede4dc/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=b3dcb85404aabd66a5765bb99aa46e24acede4dc", "patch": "@@ -18,6 +18,7 @@\n \n use metadata::csearch::{each_impl, get_impl_trait};\n use metadata::csearch;\n+use middle::region;\n use middle::subst::{mod, Subst};\n use middle::ty::{ImplContainer, ImplOrTraitItemId, MethodTraitItemId};\n use middle::ty::{ParameterEnvironment, TypeTraitItemId, lookup_item_type};\n@@ -26,8 +27,6 @@ use middle::ty::{ty_param, Polytype, ty_ptr};\n use middle::ty::{ty_rptr, ty_struct, ty_trait, ty_tup};\n use middle::ty::{ty_str, ty_vec, ty_float, ty_infer, ty_int, ty_open};\n use middle::ty::{ty_uint, ty_unboxed_closure, ty_uniq, ty_bare_fn};\n-use middle::ty::{ty_closure};\n-use middle::subst::Subst;\n use middle::ty;\n use CrateCtxt;\n use middle::infer::combine::Combine;\n@@ -472,6 +471,17 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                                                            impl_did.node);\n             let self_type = self_type.ty.subst(tcx, &param_env.free_substs);\n \n+            // the self-type may have late-bound regions bound in the\n+            // impl; liberate them.\n+            let item_scope = region::CodeExtent::from_node_id(impl_did.node);\n+            let self_type =\n+                ty::liberate_late_bound_regions(tcx,\n+                                                item_scope,\n+                                                &ty::bind(self_type)).value;\n+\n+            debug!(\"can_type_implement_copy(self_type={})\",\n+                   self_type.repr(tcx));\n+\n             match ty::can_type_implement_copy(tcx, self_type, &param_env) {\n                 Ok(()) => {}\n                 Err(ty::FieldDoesNotImplementCopy(name)) => {"}, {"sha": "b6bba363e72365f750f22c11e5aa81ecee8528b5", "filename": "src/test/run-pass/hrtb-opt-in-copy.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b3dcb85404aabd66a5765bb99aa46e24acede4dc/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3dcb85404aabd66a5765bb99aa46e24acede4dc/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs?ref=b3dcb85404aabd66a5765bb99aa46e24acede4dc", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we handle binder levels correctly when checking whether a\n+// type can implement `Copy`. In particular, we had a bug where we failed to\n+// liberate the late-bound regions from the impl, and thus wound up\n+// searching for an impl of `for<'tcx> Foo<&'tcx T>`. The impl that\n+// exists however is `impl<T> Copy for Foo<T>` and the current rules\n+// did not consider that a match (something I would like to revise in\n+// a later PR).\n+\n+#![allow(dead_code)]\n+\n+use std::kinds::marker;\n+\n+#[deriving(Copy)]\n+struct Foo<T> { x: T }\n+\n+type Ty<'tcx> = &'tcx TyS<'tcx>;\n+\n+enum TyS<'tcx> {\n+    Boop(marker::InvariantLifetime<'tcx>)\n+}\n+\n+enum Bar<'tcx> {\n+    Baz(Foo<Ty<'tcx>>)\n+}\n+\n+impl<'tcx> Copy for Bar<'tcx> { }\n+\n+fn main() { }"}]}