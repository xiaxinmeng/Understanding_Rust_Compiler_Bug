{"sha": "9da07a07eb8ced772082a136b2ac07eea1df4a2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYTA3YTA3ZWI4Y2VkNzcyMDgyYTEzNmIyYWMwN2VlYTFkZjRhMmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-23T09:02:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-23T09:02:59Z"}, "message": "Merge #2368\n\n2368: Use attrs rather than syntax for lang items r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e2316c48dff66016162a13b0b82a9b01655e485f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2316c48dff66016162a13b0b82a9b01655e485f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9da07a07eb8ced772082a136b2ac07eea1df4a2e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2PXDCRBK7hj4Ov3rIwAAdHIIAKi1aSHRJlgpav8Taf76a/NP\nYWuDSaUiKDW1FEuZnwxXxL14Cyz+xNbtLSctuvz692KPtgHTspTl9F+I4iSqLZsl\nAxaAEndOPScHz84IAZ5h9465SYAYp/08e4AmWZV94EcmcsVRJDcurRjQJ+Hzd14L\nA5IjFOMgY9AIDeZSnLcYNnthFy1xPmjjq2QXRW/dv+tHekl5hemmKKRh4iYC6bNR\nC2CtnWV9nFB3zQQ83yVQZ/W8n4nDd2CpjiL11jndGJZUzpjnic8098xBchM0A/kj\nXhzQHvhj4jpMPBRAcJqgsSJa/z7CQl3W65gZO55aHq0NnD4L/f76dUqWQRYH7ZA=\n=rmqp\n-----END PGP SIGNATURE-----\n", "payload": "tree e2316c48dff66016162a13b0b82a9b01655e485f\nparent 05939d504345673b20f701ec6a2dfec043e6c8a4\nparent 1a9986496387544c048475765ac64e83518437af\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574499779 +0000\ncommitter GitHub <noreply@github.com> 1574499779 +0000\n\nMerge #2368\n\n2368: Use attrs rather than syntax for lang items r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9da07a07eb8ced772082a136b2ac07eea1df4a2e", "html_url": "https://github.com/rust-lang/rust/commit/9da07a07eb8ced772082a136b2ac07eea1df4a2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9da07a07eb8ced772082a136b2ac07eea1df4a2e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05939d504345673b20f701ec6a2dfec043e6c8a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/05939d504345673b20f701ec6a2dfec043e6c8a4", "html_url": "https://github.com/rust-lang/rust/commit/05939d504345673b20f701ec6a2dfec043e6c8a4"}, {"sha": "1a9986496387544c048475765ac64e83518437af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9986496387544c048475765ac64e83518437af", "html_url": "https://github.com/rust-lang/rust/commit/1a9986496387544c048475765ac64e83518437af"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "55f0c3a1327caee89dcd9baf469510ab33371d71", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 25, "deletions": 31, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9da07a07eb8ced772082a136b2ac07eea1df4a2e/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da07a07eb8ced772082a136b2ac07eea1df4a2e/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=9da07a07eb8ced772082a136b2ac07eea1df4a2e", "patch": "@@ -1,13 +1,14 @@\n //! FIXME: write short doc here\n \n-use rustc_hash::FxHashMap;\n use std::sync::Arc;\n \n-use ra_syntax::{ast::AttrsOwner, SmolStr};\n+use hir_def::{AdtId, AttrDefId, ModuleDefId};\n+use ra_syntax::SmolStr;\n+use rustc_hash::FxHashMap;\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    Adt, Crate, Enum, Function, HasSource, ImplBlock, Module, ModuleDef, Static, Struct, Trait,\n+    Crate, Enum, Function, ImplBlock, Module, Static, Struct, Trait,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -95,26 +96,27 @@ impl LangItems {\n \n     fn collect_lang_items(&mut self, db: &(impl DefDatabase + AstDatabase), module: Module) {\n         // Look for impl targets\n-        for impl_block in module.impl_blocks(db) {\n-            let src = impl_block.source(db);\n-            if let Some(lang_item_name) = lang_item_name(&src.value) {\n-                self.items\n-                    .entry(lang_item_name)\n-                    .or_insert_with(|| LangItemTarget::ImplBlock(impl_block));\n-            }\n+        let def_map = db.crate_def_map(module.id.krate);\n+        let module_data = &def_map[module.id.module_id];\n+        for &impl_block in module_data.impls.iter() {\n+            self.collect_lang_item(db, impl_block, LangItemTarget::ImplBlock)\n         }\n \n-        for def in module.declarations(db) {\n+        for def in module_data.scope.declarations() {\n             match def {\n-                ModuleDef::Trait(trait_) => {\n+                ModuleDefId::TraitId(trait_) => {\n                     self.collect_lang_item(db, trait_, LangItemTarget::Trait)\n                 }\n-                ModuleDef::Adt(Adt::Enum(e)) => self.collect_lang_item(db, e, LangItemTarget::Enum),\n-                ModuleDef::Adt(Adt::Struct(s)) => {\n+                ModuleDefId::AdtId(AdtId::EnumId(e)) => {\n+                    self.collect_lang_item(db, e, LangItemTarget::Enum)\n+                }\n+                ModuleDefId::AdtId(AdtId::StructId(s)) => {\n                     self.collect_lang_item(db, s, LangItemTarget::Struct)\n                 }\n-                ModuleDef::Function(f) => self.collect_lang_item(db, f, LangItemTarget::Function),\n-                ModuleDef::Static(s) => self.collect_lang_item(db, s, LangItemTarget::Static),\n+                ModuleDefId::FunctionId(f) => {\n+                    self.collect_lang_item(db, f, LangItemTarget::Function)\n+                }\n+                ModuleDefId::StaticId(s) => self.collect_lang_item(db, s, LangItemTarget::Static),\n                 _ => {}\n             }\n         }\n@@ -135,26 +137,18 @@ impl LangItems {\n         }\n     }\n \n-    fn collect_lang_item<T, N>(\n+    fn collect_lang_item<T, D>(\n         &mut self,\n         db: &(impl DefDatabase + AstDatabase),\n         item: T,\n-        constructor: fn(T) -> LangItemTarget,\n+        constructor: fn(D) -> LangItemTarget,\n     ) where\n-        T: Copy + HasSource<Ast = N>,\n-        N: AttrsOwner,\n+        T: Into<AttrDefId> + Copy,\n+        D: From<T>,\n     {\n-        let node = item.source(db).value;\n-        if let Some(lang_item_name) = lang_item_name(&node) {\n-            self.items.entry(lang_item_name).or_insert_with(|| constructor(item));\n+        let attrs = db.attrs(item.into());\n+        if let Some(lang_item_name) = attrs.find_string_value(\"lang\") {\n+            self.items.entry(lang_item_name).or_insert_with(|| constructor(D::from(item)));\n         }\n     }\n }\n-\n-fn lang_item_name<T: AttrsOwner>(node: &T) -> Option<SmolStr> {\n-    node.attrs()\n-        .filter_map(|a| a.as_simple_key_value())\n-        .filter(|(key, _)| key == \"lang\")\n-        .map(|(_, val)| val)\n-        .nth(0)\n-}"}, {"sha": "eee5e44bf905f06ba671f8952d198d39a0cc86fe", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9da07a07eb8ced772082a136b2ac07eea1df4a2e/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da07a07eb8ced772082a136b2ac07eea1df4a2e/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=9da07a07eb8ced772082a136b2ac07eea1df4a2e", "patch": "@@ -53,28 +53,38 @@ impl Attrs {\n                     }\n                 }\n             }\n-            AttrDefId::AdtId(it) => match it {\n-                AdtId::StructId(it) => attrs_from_ast(it.0.lookup_intern(db).ast_id, db),\n-                AdtId::EnumId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n-                AdtId::UnionId(it) => attrs_from_ast(it.0.lookup_intern(db).ast_id, db),\n-            },\n             AttrDefId::EnumVariantId(it) => {\n                 let src = it.parent.child_source(db);\n                 let hygiene = Hygiene::new(db, src.file_id);\n                 Attr::from_attrs_owner(&src.value[it.local_id], &hygiene)\n             }\n+            AttrDefId::AdtId(it) => match it {\n+                AdtId::StructId(it) => attrs_from_ast(it.0.lookup_intern(db).ast_id, db),\n+                AdtId::EnumId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+                AdtId::UnionId(it) => attrs_from_ast(it.0.lookup_intern(db).ast_id, db),\n+            },\n             AttrDefId::StaticId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+            AttrDefId::TraitId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+            AttrDefId::MacroDefId(it) => attrs_from_ast(it.ast_id, db),\n+            AttrDefId::ImplId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             AttrDefId::ConstId(it) => attrs_from_loc(it.lookup(db), db),\n             AttrDefId::FunctionId(it) => attrs_from_loc(it.lookup(db), db),\n-            AttrDefId::TraitId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             AttrDefId::TypeAliasId(it) => attrs_from_loc(it.lookup(db), db),\n-            AttrDefId::MacroDefId(it) => attrs_from_ast(it.ast_id, db),\n         }\n     }\n \n     pub fn has_atom(&self, atom: &str) -> bool {\n         self.iter().any(|it| it.is_simple_atom(atom))\n     }\n+\n+    pub fn find_string_value(&self, key: &str) -> Option<SmolStr> {\n+        self.iter().filter(|attr| attr.is_simple_atom(key)).find_map(|attr| {\n+            match attr.input.as_ref()? {\n+                AttrInput::Literal(it) => Some(it.clone()),\n+                _ => None,\n+            }\n+        })\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "20d4deadb452a4543c4ae93ee48777cb590f498d", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9da07a07eb8ced772082a136b2ac07eea1df4a2e/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da07a07eb8ced772082a136b2ac07eea1df4a2e/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=9da07a07eb8ced772082a136b2ac07eea1df4a2e", "patch": "@@ -489,6 +489,7 @@ pub enum AttrDefId {\n     TraitId(TraitId),\n     TypeAliasId(TypeAliasId),\n     MacroDefId(MacroDefId),\n+    ImplId(ImplId),\n }\n \n impl_froms!(\n@@ -501,7 +502,8 @@ impl_froms!(\n     FunctionId,\n     TraitId,\n     TypeAliasId,\n-    MacroDefId\n+    MacroDefId,\n+    ImplId\n );\n \n trait Intern {"}]}