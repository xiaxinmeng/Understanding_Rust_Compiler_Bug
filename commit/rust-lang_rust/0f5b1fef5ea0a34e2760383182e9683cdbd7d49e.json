{"sha": "0f5b1fef5ea0a34e2760383182e9683cdbd7d49e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNWIxZmVmNWVhMGEzNGUyNzYwMzgzMTgyZTk2ODNjZGJkN2Q0OWU=", "commit": {"author": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-20T18:54:43Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-20T19:06:41Z"}, "message": "Display path not debug it\n\nCo-Authored-By: Lauren\u021biu Nicola <lnicola@users.noreply.github.com>", "tree": {"sha": "5479fd716faeec16cf9f3cc9239163b9dfa2c12e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5479fd716faeec16cf9f3cc9239163b9dfa2c12e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f5b1fef5ea0a34e2760383182e9683cdbd7d49e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5b1fef5ea0a34e2760383182e9683cdbd7d49e", "html_url": "https://github.com/rust-lang/rust/commit/0f5b1fef5ea0a34e2760383182e9683cdbd7d49e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f5b1fef5ea0a34e2760383182e9683cdbd7d49e/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982af2286a57667263f6cf0abb80b5e20b198047", "url": "https://api.github.com/repos/rust-lang/rust/commits/982af2286a57667263f6cf0abb80b5e20b198047", "html_url": "https://github.com/rust-lang/rust/commit/982af2286a57667263f6cf0abb80b5e20b198047"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "d202eb0fde42fb21d5fd7ba81d8453f9c2896823", "filename": "crates/ra_proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b1fef5ea0a34e2760383182e9683cdbd7d49e/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b1fef5ea0a34e2760383182e9683cdbd7d49e/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs?ref=0f5b1fef5ea0a34e2760383182e9683cdbd7d49e", "patch": "@@ -17,7 +17,7 @@ fn invalid_data_err(e: impl Into<Box<dyn std::error::Error + Send + Sync>>) -> i\n     io::Error::new(io::ErrorKind::InvalidData, e)\n }\n \n-fn is_derive_registrar_symbol(symbol: &&str) -> bool {\n+fn is_derive_registrar_symbol(symbol: &str) -> bool {\n     symbol.contains(NEW_REGISTRAR_SYMBOL)\n }\n \n@@ -29,13 +29,13 @@ fn find_registrar_symbol(file: &Path) -> io::Result<Option<String>> {\n     let name = match object {\n         Object::Elf(elf) => {\n             let symbols = elf.dynstrtab.to_vec().map_err(invalid_data_err)?;\n-            symbols.into_iter().find(is_derive_registrar_symbol).map(&str::to_owned)\n+            symbols.into_iter().find(|s| is_derive_registrar_symbol(s)).map(&str::to_owned)\n         }\n         Object::PE(pe) => pe\n             .exports\n             .iter()\n             .flat_map(|s| s.name)\n-            .find(is_derive_registrar_symbol)\n+            .find(|s| is_derive_registrar_symbol(s))\n             .map(&str::to_owned),\n         Object::Mach(Mach::Binary(binary)) => {\n             let exports = binary.exports().map_err(invalid_data_err)?;\n@@ -52,12 +52,12 @@ fn find_registrar_symbol(file: &Path) -> io::Result<Option<String>> {\n                         &s.name\n                     }\n                 })\n-                .find(is_derive_registrar_symbol)\n+                .find(|s| is_derive_registrar_symbol(s))\n                 .map(&str::to_owned)\n         }\n         _ => return Ok(None),\n     };\n-    Ok(name)\n+    return Ok(name);\n }\n \n /// Loads dynamic library in platform dependent manner.\n@@ -95,7 +95,7 @@ struct ProcMacroLibraryLibloading {\n impl ProcMacroLibraryLibloading {\n     fn open(file: &Path) -> io::Result<Self> {\n         let symbol_name = find_registrar_symbol(file)?.ok_or_else(|| {\n-            invalid_data_err(format!(\"Cannot find registrar symbol in file {:?}\", file))\n+            invalid_data_err(format!(\"Cannot find registrar symbol in file {}\", file.display()))\n         })?;\n \n         let lib = load_library(file).map_err(invalid_data_err)?;\n@@ -121,7 +121,7 @@ impl Expander {\n         // already absolute\n         let lib = lib\n             .canonicalize()\n-            .unwrap_or_else(|err| panic!(\"Cannot canonicalize {:?}: {:?}\", lib, err));\n+            .unwrap_or_else(|err| panic!(\"Cannot canonicalize {}: {:?}\", lib.display(), err));\n \n         let library = ProcMacroLibraryImpl::open(&lib).map_err(|e| e.to_string())?;\n "}, {"sha": "f64e05a2d966828e9e0d3a55b4994f0f6a96a8e0", "filename": "crates/ra_proc_macro_srv/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b1fef5ea0a34e2760383182e9683cdbd7d49e/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b1fef5ea0a34e2760383182e9683cdbd7d49e/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs?ref=0f5b1fef5ea0a34e2760383182e9683cdbd7d49e", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn list_macros(task: &ListMacrosTask) -> ListMacrosResult {\n \n fn create_expander(lib: &Path) -> dylib::Expander {\n     dylib::Expander::new(lib)\n-        .unwrap_or_else(|err| panic!(\"Cannot create expander for {}: {}\", lib.display(), err))\n+        .unwrap_or_else(|err| panic!(\"Cannot create expander for {}: {:?}\", lib.display(), err))\n }\n \n pub mod cli;"}]}