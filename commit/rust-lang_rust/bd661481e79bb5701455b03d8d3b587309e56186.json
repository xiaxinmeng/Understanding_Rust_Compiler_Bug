{"sha": "bd661481e79bb5701455b03d8d3b587309e56186", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNjYxNDgxZTc5YmI1NzAxNDU1YjAzZDhkM2I1ODczMDllNTYxODY=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-27T12:38:06Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-05T04:28:52Z"}, "message": "Move write_ty to the bottom of check_pat", "tree": {"sha": "9ffa5f45767b0f34df969e18da25cbf8bc8174d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ffa5f45767b0f34df969e18da25cbf8bc8174d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd661481e79bb5701455b03d8d3b587309e56186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd661481e79bb5701455b03d8d3b587309e56186", "html_url": "https://github.com/rust-lang/rust/commit/bd661481e79bb5701455b03d8d3b587309e56186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd661481e79bb5701455b03d8d3b587309e56186/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1749fda9c04fdb051c82904b522eb79697bbf1c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1749fda9c04fdb051c82904b522eb79697bbf1c0", "html_url": "https://github.com/rust-lang/rust/commit/1749fda9c04fdb051c82904b522eb79697bbf1c0"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "c1a0a6f70aa446b198b31b71cab16b1ac57a1f2a", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bd661481e79bb5701455b03d8d3b587309e56186/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd661481e79bb5701455b03d8d3b587309e56186/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=bd661481e79bb5701455b03d8d3b587309e56186", "patch": "@@ -32,9 +32,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         debug!(\"check_pat(pat={:?},expected={:?})\", pat, expected);\n \n-        match pat.node {\n+        let ty = match pat.node {\n             PatKind::Wild => {\n-                self.write_ty(pat.id, expected);\n+                expected\n             }\n             PatKind::Lit(ref lt) => {\n                 let ty = self.check_expr(&lt);\n@@ -67,7 +67,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 //\n                 // that's equivalent to there existing a LUB.\n                 self.demand_suptype(pat.span, expected, pat_ty);\n-                self.write_ty(pat.id, pat_ty);\n+                pat_ty\n             }\n             PatKind::Range(ref begin, ref end) => {\n                 let lhs_ty = self.check_expr(begin);\n@@ -103,7 +103,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // subtyping doesn't matter here, as the value is some kind of scalar\n                 self.demand_eqtype(pat.span, expected, lhs_ty);\n                 self.demand_eqtype(pat.span, expected, rhs_ty);\n-                self.write_ty(pat.id, common_type);\n+                common_type\n             }\n             PatKind::Binding(bm, _, ref sub) => {\n                 let typ = self.local_ty(pat.span, pat.id);\n@@ -147,20 +147,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     self.check_pat(&p, expected);\n                 }\n \n-                self.write_ty(pat.id, typ);\n+                typ\n             }\n             PatKind::TupleStruct(ref path, ref subpats, ddpos) => {\n-                let pat_ty = self.check_pat_tuple_struct(pat, path, &subpats, ddpos, expected);\n-                write_ty(pat.id, pat_ty);\n+                self.check_pat_tuple_struct(pat, path, &subpats, ddpos, expected)\n             }\n             PatKind::Path(ref opt_qself, ref path) => {\n                 let opt_qself_ty = opt_qself.as_ref().map(|qself| self.to_ty(&qself.ty));\n-                let pat_ty = self.check_pat_path(pat, opt_qself_ty, path, expected);\n-                write_ty(pat.id, pat_ty);\n+                self.check_pat_path(pat, opt_qself_ty, path, expected)\n             }\n             PatKind::Struct(ref path, ref fields, etc) => {\n-                let pat_ty = self.check_pat_struct(pat, path, fields, etc, expected);\n-                write_ty(pat.id, pat_ty);\n+                self.check_pat_struct(pat, path, fields, etc, expected)\n             }\n             PatKind::Tuple(ref elements, ddpos) => {\n                 let mut expected_len = elements.len();\n@@ -179,7 +176,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 for (i, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n                     self.check_pat(elem, &element_tys[i]);\n                 }\n-                self.write_ty(pat.id, pat_ty);\n+                pat_ty\n             }\n             PatKind::Box(ref inner) => {\n                 let inner_ty = self.next_ty_var();\n@@ -191,10 +188,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // `demand::eqtype`.\n                     self.demand_eqtype(pat.span, expected, uniq_ty);\n                     self.check_pat(&inner, inner_ty);\n-                    self.write_ty(pat.id, uniq_ty);\n+                    uniq_ty\n                 } else {\n                     self.check_pat(&inner, tcx.types.err);\n-                    self.write_error(pat.id);\n+                    tcx.types.err\n                 }\n             }\n             PatKind::Ref(ref inner, mutbl) => {\n@@ -223,10 +220,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     };\n \n                     self.check_pat(&inner, inner_ty);\n-                    self.write_ty(pat.id, rptr_ty);\n+                    rptr_ty\n                 } else {\n                     self.check_pat(&inner, tcx.types.err);\n-                    self.write_error(pat.id);\n+                    tcx.types.err\n                 }\n             }\n             PatKind::Vec(ref before, ref slice, ref after) => {\n@@ -287,9 +284,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 for elt in after {\n                     self.check_pat(&elt, inner_ty);\n                 }\n-                self.write_ty(pat.id, expected_ty);\n+                expected_ty\n             }\n-        }\n+        };\n+\n+        self.write_ty(pat.id, ty);\n \n         // (*) In most of the cases above (literals and constants being\n         // the exception), we relate types using strict equality, evewn\n@@ -494,7 +493,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for field in fields {\n                 self.check_pat(&field.node.pat, self.tcx.types.err);\n             }\n-            return tcx.types.err;\n+            return self.tcx.types.err;\n         };\n \n         // Type check the path."}]}