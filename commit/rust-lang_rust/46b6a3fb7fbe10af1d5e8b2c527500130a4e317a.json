{"sha": "46b6a3fb7fbe10af1d5e8b2c527500130a4e317a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YjZhM2ZiN2ZiZTEwYWYxZDVlOGIyYzUyNzUwMDEzMGE0ZTMxN2E=", "commit": {"author": {"name": "Kenny Goodin", "email": "kennethbgoodin@gmail.com", "date": "2019-06-13T18:11:35Z"}, "committer": {"name": "Kenny Goodin", "email": "kennethbgoodin@gmail.com", "date": "2019-06-14T02:28:22Z"}, "message": "Add more missing math functions\n\nAdd missing functions for atan2, cosh, sinh, and tan.\nAlso add f32 calls and tests for cbrt and hypot.", "tree": {"sha": "10a593f04f9e57fd1993f15db4bd0fd9464b8caa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10a593f04f9e57fd1993f15db4bd0fd9464b8caa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46b6a3fb7fbe10af1d5e8b2c527500130a4e317a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46b6a3fb7fbe10af1d5e8b2c527500130a4e317a", "html_url": "https://github.com/rust-lang/rust/commit/46b6a3fb7fbe10af1d5e8b2c527500130a4e317a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46b6a3fb7fbe10af1d5e8b2c527500130a4e317a/comments", "author": {"login": "kungfukennyg", "id": 6355483, "node_id": "MDQ6VXNlcjYzNTU0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/6355483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kungfukennyg", "html_url": "https://github.com/kungfukennyg", "followers_url": "https://api.github.com/users/kungfukennyg/followers", "following_url": "https://api.github.com/users/kungfukennyg/following{/other_user}", "gists_url": "https://api.github.com/users/kungfukennyg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kungfukennyg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kungfukennyg/subscriptions", "organizations_url": "https://api.github.com/users/kungfukennyg/orgs", "repos_url": "https://api.github.com/users/kungfukennyg/repos", "events_url": "https://api.github.com/users/kungfukennyg/events{/privacy}", "received_events_url": "https://api.github.com/users/kungfukennyg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kungfukennyg", "id": 6355483, "node_id": "MDQ6VXNlcjYzNTU0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/6355483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kungfukennyg", "html_url": "https://github.com/kungfukennyg", "followers_url": "https://api.github.com/users/kungfukennyg/followers", "following_url": "https://api.github.com/users/kungfukennyg/following{/other_user}", "gists_url": "https://api.github.com/users/kungfukennyg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kungfukennyg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kungfukennyg/subscriptions", "organizations_url": "https://api.github.com/users/kungfukennyg/orgs", "repos_url": "https://api.github.com/users/kungfukennyg/repos", "events_url": "https://api.github.com/users/kungfukennyg/events{/privacy}", "received_events_url": "https://api.github.com/users/kungfukennyg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "965160d4d7976ddead182b4a65b73f59818537de", "url": "https://api.github.com/repos/rust-lang/rust/commits/965160d4d7976ddead182b4a65b73f59818537de", "html_url": "https://github.com/rust-lang/rust/commit/965160d4d7976ddead182b4a65b73f59818537de"}], "stats": {"total": 68, "additions": 61, "deletions": 7}, "files": [{"sha": "d7e52b4830327271823c7c89fe5625037755024c", "filename": "src/fn_call.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/46b6a3fb7fbe10af1d5e8b2c527500130a4e317a/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b6a3fb7fbe10af1d5e8b2c527500130a4e317a/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=46b6a3fb7fbe10af1d5e8b2c527500130a4e317a", "patch": "@@ -560,18 +560,56 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let n = this.memory().get(ptr.alloc_id)?.read_c_str(tcx, ptr)?.len();\n                 this.write_scalar(Scalar::from_uint(n as u64, dest.layout.size), dest)?;\n             }\n-            \"cbrt\" => {\n+\n+            // math functions\n+\n+            \"cbrtf\" | \"coshf\" | \"sinhf\" |\"tanf\" => {\n+                // FIXME: Using host floats.\n+                let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n+                let f = match link_name {\n+                    \"cbrtf\" => f.cbrt(),\n+                    \"coshf\" => f.cosh(),\n+                    \"sinhf\" => f.sinh(),\n+                        \"tanf\" => f.tan(),\n+                    _ => bug!(),\n+                };\n+                this.write_scalar(Scalar::from_u32(f.to_bits()), dest)?;\n+            }\n+            // underscore case for windows\n+            \"_hypotf\" | \"hypotf\" | \"atan2f\" => {\n+                // FIXME: Using host floats.\n+                let f1 = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n+                let f2 = f32::from_bits(this.read_scalar(args[1])?.to_u32()?);\n+                let n = match link_name {\n+                    \"_hypotf\" | \"hypotf\" => f1.hypot(f2),\n+                    \"atan2f\" => f1.atan2(f2),\n+                    _ => bug!(),\n+                };\n+                this.write_scalar(Scalar::from_u32(n.to_bits()), dest)?;\n+            }\n+\n+            \"cbrt\" | \"cosh\" | \"sinh\" | \"tan\" => {\n                 // FIXME: Using host floats.\n                 let f = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n-                let n = f.cbrt();\n-                this.write_scalar(Scalar::from_u64(n.to_bits()), dest)?;\n+                let f = match link_name {\n+                    \"cbrt\" => f.cbrt(),\n+                    \"cosh\" => f.cosh(),\n+                    \"sinh\" => f.sinh(),\n+                    \"tan\" => f.tan(),\n+                    _ => bug!(),\n+                };\n+                this.write_scalar(Scalar::from_u64(f.to_bits()), dest)?;\n             }\n             // underscore case for windows\n-            \"_hypot\" | \"hypot\" => {\n+            \"_hypot\" | \"hypot\" | \"atan2\" => {\n                 // FIXME: Using host floats.\n                 let f1 = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n                 let f2 = f64::from_bits(this.read_scalar(args[1])?.to_u64()?);\n-                let n = f1.hypot(f2);\n+                let n = match link_name {\n+                    \"_hypot\" | \"hypot\" => f1.hypot(f2),\n+                    \"atan2\" => f1.atan2(f2),\n+                    _ => bug!(),\n+                };\n                 this.write_scalar(Scalar::from_u64(n.to_bits()), dest)?;\n             }\n "}, {"sha": "20c0f674948869308c32547b1ea6d1a382e6bbd6", "filename": "tests/run-pass/intrinsics-math.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46b6a3fb7fbe10af1d5e8b2c527500130a4e317a/tests%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b6a3fb7fbe10af1d5e8b2c527500130a4e317a/tests%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-math.rs?ref=46b6a3fb7fbe10af1d5e8b2c527500130a4e317a", "patch": "@@ -67,6 +67,22 @@ pub fn main() {\n     assert_approx_eq!(0.1f32.trunc(), 0.0f32);\n     assert_approx_eq!((-0.1f64).trunc(), 0.0f64);\n \n-    assert_approx_eq!(27f64.cbrt(), 3.0f64);\n-    assert_approx_eq!(3f64.hypot(4f64), 5.0f64);\n+    assert_approx_eq!(27.0f32.cbrt(), 3.0f32);\n+    assert_approx_eq!(27.0f64.cbrt(), 3.0f64);\n+\n+    assert_approx_eq!(3.0f32.hypot(4.0f32), 5.0f32);\n+    assert_approx_eq!(3.0f64.hypot(4.0f64), 5.0f64);\n+\n+    assert_approx_eq!(1.0f32.atan2(2.0f32), 0.46364761f32);\n+    assert_approx_eq!(1.0f32.atan2(2.0f32), 0.46364761f32);\n+\n+    assert_approx_eq!(1.0f32.cosh(), 1.54308f32);\n+    assert_approx_eq!(1.0f64.cosh(), 1.54308f64);\n+\n+    assert_approx_eq!(1.0f32.sinh(), 1.1752012f32);\n+    assert_approx_eq!(1.0f64.sinh(), 1.1752012f64);\n+\n+    assert_approx_eq!(1.0f32.tan(), 1.557408f32);\n+    assert_approx_eq!(1.0f64.tan(), 1.557408f64);\n+\n }"}]}