{"sha": "c25e271858d3aa131814a6c60669783d20b5e89e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNWUyNzE4NThkM2FhMTMxODE0YTZjNjA2Njk3ODNkMjBiNWU4OWU=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-05-30T19:34:50Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-05-30T19:34:50Z"}, "message": "Add 'the'", "tree": {"sha": "726accf24ae94371a2244b5a1a6849b5f27c6d76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/726accf24ae94371a2244b5a1a6849b5f27c6d76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c25e271858d3aa131814a6c60669783d20b5e89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c25e271858d3aa131814a6c60669783d20b5e89e", "html_url": "https://github.com/rust-lang/rust/commit/c25e271858d3aa131814a6c60669783d20b5e89e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c25e271858d3aa131814a6c60669783d20b5e89e/comments", "author": null, "committer": null, "parents": [{"sha": "b55950768036d36704db6721d6ad47891d95b1ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b55950768036d36704db6721d6ad47891d95b1ad", "html_url": "https://github.com/rust-lang/rust/commit/b55950768036d36704db6721d6ad47891d95b1ad"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "da38538a70016f26a87bf33e6ecf1f75cefc1a8b", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c25e271858d3aa131814a6c60669783d20b5e89e/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25e271858d3aa131814a6c60669783d20b5e89e/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c25e271858d3aa131814a6c60669783d20b5e89e", "patch": "@@ -220,7 +220,7 @@ pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n \n /// Returns the [ABI]-required minimum alignment of a type.\n ///\n-/// Every reference to a value of type `T` must be a multiple of this number.\n+/// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n /// This is the alignment used for struct fields. It may be smaller than the preferred alignment.\n ///\n@@ -243,7 +243,7 @@ pub fn min_align_of<T>() -> usize {\n \n /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n ///\n-/// Every reference to a value of type `T` must be a multiple of this number.\n+/// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n /// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n ///\n@@ -264,7 +264,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n \n /// Returns the [ABI]-required minimum alignment of a type.\n ///\n-/// Every reference to a value of type `T` must be a multiple of this number.\n+/// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n /// This is the alignment used for struct fields. It may be smaller than the preferred alignment.\n ///\n@@ -285,7 +285,7 @@ pub fn align_of<T>() -> usize {\n \n /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n ///\n-/// Every reference to a value of type `T` must be a multiple of this number.\n+/// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n /// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n ///"}]}