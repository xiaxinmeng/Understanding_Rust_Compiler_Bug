{"sha": "984d4661c7ea776a6ef7044e69666ef056bd5000", "node_id": "C_kwDOAAsO6NoAKDk4NGQ0NjYxYzdlYTc3NmE2ZWY3MDQ0ZTY5NjY2ZWYwNTZiZDUwMDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-30T03:58:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-30T03:58:47Z"}, "message": "Auto merge of #7673 - mikerite:include-generated-code, r=giraffate\n\nMove code generated by `update_lints` to includes\n\nMove code generated by `update_lints` to includes\n\nchangelog: none", "tree": {"sha": "99e26825c5451365e47edfd7ed7999f31a923976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e26825c5451365e47edfd7ed7999f31a923976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/984d4661c7ea776a6ef7044e69666ef056bd5000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/984d4661c7ea776a6ef7044e69666ef056bd5000", "html_url": "https://github.com/rust-lang/rust/commit/984d4661c7ea776a6ef7044e69666ef056bd5000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/984d4661c7ea776a6ef7044e69666ef056bd5000/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685b77316f3fbc35bfe1982803df7133cd2cb36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/685b77316f3fbc35bfe1982803df7133cd2cb36d", "html_url": "https://github.com/rust-lang/rust/commit/685b77316f3fbc35bfe1982803df7133cd2cb36d"}, {"sha": "debb1f027428eab9abbf4f962e3c1840492808b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/debb1f027428eab9abbf4f962e3c1840492808b8", "html_url": "https://github.com/rust-lang/rust/commit/debb1f027428eab9abbf4f962e3c1840492808b8"}], "stats": {"total": 4512, "additions": 2299, "deletions": 2213}, "files": [{"sha": "5538f62c8e786c0f2f16092fa5a754ace47c5988", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 522, "changes": 523, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -3,14 +3,7 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n-use itertools::Itertools;\n-use regex::Regex;\n-use std::collections::HashMap;\n-use std::ffi::OsStr;\n-use std::fs;\n-use std::lazy::SyncLazy;\n-use std::path::{Path, PathBuf};\n-use walkdir::WalkDir;\n+use std::path::PathBuf;\n \n pub mod bless;\n pub mod fmt;\n@@ -19,323 +12,6 @@ pub mod serve;\n pub mod setup;\n pub mod update_lints;\n \n-static DEC_CLIPPY_LINT_RE: SyncLazy<Regex> = SyncLazy::new(|| {\n-    Regex::new(\n-        r#\"(?x)\n-    declare_clippy_lint!\\s*[\\{(]\n-    (?:\\s+///.*)*\n-    \\s+pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n-    (?P<cat>[a-z_]+)\\s*,\\s*\n-    \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n-\"#,\n-    )\n-    .unwrap()\n-});\n-\n-static DEC_DEPRECATED_LINT_RE: SyncLazy<Regex> = SyncLazy::new(|| {\n-    Regex::new(\n-        r#\"(?x)\n-    declare_deprecated_lint!\\s*[{(]\\s*\n-    (?:\\s+///.*)*\n-    \\s+pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n-    \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n-\"#,\n-    )\n-    .unwrap()\n-});\n-static NL_ESCAPE_RE: SyncLazy<Regex> = SyncLazy::new(|| Regex::new(r#\"\\\\\\n\\s*\"#).unwrap());\n-\n-pub static DOCS_LINK: &str = \"https://rust-lang.github.io/rust-clippy/master/index.html\";\n-\n-/// Lint data parsed from the Clippy source code.\n-#[derive(Clone, PartialEq, Debug)]\n-pub struct Lint {\n-    pub name: String,\n-    pub group: String,\n-    pub desc: String,\n-    pub deprecation: Option<String>,\n-    pub module: String,\n-}\n-\n-impl Lint {\n-    #[must_use]\n-    pub fn new(name: &str, group: &str, desc: &str, deprecation: Option<&str>, module: &str) -> Self {\n-        Self {\n-            name: name.to_lowercase(),\n-            group: group.to_string(),\n-            desc: NL_ESCAPE_RE.replace(&desc.replace(\"\\\\\\\"\", \"\\\"\"), \"\").to_string(),\n-            deprecation: deprecation.map(ToString::to_string),\n-            module: module.to_string(),\n-        }\n-    }\n-\n-    /// Returns all non-deprecated lints and non-internal lints\n-    #[must_use]\n-    pub fn usable_lints(lints: &[Self]) -> Vec<Self> {\n-        lints\n-            .iter()\n-            .filter(|l| l.deprecation.is_none() && !l.group.starts_with(\"internal\"))\n-            .cloned()\n-            .collect()\n-    }\n-\n-    /// Returns all internal lints (not `internal_warn` lints)\n-    #[must_use]\n-    pub fn internal_lints(lints: &[Self]) -> Vec<Self> {\n-        lints.iter().filter(|l| l.group == \"internal\").cloned().collect()\n-    }\n-\n-    /// Returns all deprecated lints\n-    #[must_use]\n-    pub fn deprecated_lints(lints: &[Self]) -> Vec<Self> {\n-        lints.iter().filter(|l| l.deprecation.is_some()).cloned().collect()\n-    }\n-\n-    /// Returns the lints in a `HashMap`, grouped by the different lint groups\n-    #[must_use]\n-    pub fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n-        lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n-    }\n-}\n-\n-/// Generates the Vec items for `register_lint_group` calls in `clippy_lints/src/lib.rs`.\n-#[must_use]\n-pub fn gen_lint_group_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    lints\n-        .map(|l| format!(\"        LintId::of({}::{}),\", l.module, l.name.to_uppercase()))\n-        .sorted()\n-        .collect::<Vec<String>>()\n-}\n-\n-/// Generates the `pub mod module_name` list in `clippy_lints/src/lib.rs`.\n-#[must_use]\n-pub fn gen_modules_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    lints\n-        .map(|l| &l.module)\n-        .unique()\n-        .map(|module| format!(\"mod {};\", module))\n-        .sorted()\n-        .collect::<Vec<String>>()\n-}\n-\n-/// Generates the list of lint links at the bottom of the README\n-#[must_use]\n-pub fn gen_changelog_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    lints\n-        .sorted_by_key(|l| &l.name)\n-        .map(|l| format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n-        .collect()\n-}\n-\n-/// Generates the `register_removed` code in `./clippy_lints/src/lib.rs`.\n-#[must_use]\n-pub fn gen_deprecated<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    lints\n-        .flat_map(|l| {\n-            l.deprecation\n-                .clone()\n-                .map(|depr_text| {\n-                    vec![\n-                        \"    store.register_removed(\".to_string(),\n-                        format!(\"        \\\"clippy::{}\\\",\", l.name),\n-                        format!(\"        \\\"{}\\\",\", depr_text),\n-                        \"    );\".to_string(),\n-                    ]\n-                })\n-                .expect(\"only deprecated lints should be passed\")\n-        })\n-        .collect::<Vec<String>>()\n-}\n-\n-#[must_use]\n-pub fn gen_register_lint_list<'a>(\n-    internal_lints: impl Iterator<Item = &'a Lint>,\n-    usable_lints: impl Iterator<Item = &'a Lint>,\n-) -> Vec<String> {\n-    let header = \"    store.register_lints(&[\".to_string();\n-    let footer = \"    ]);\".to_string();\n-    let internal_lints = internal_lints\n-        .sorted_by_key(|l| format!(\"        {}::{},\", l.module, l.name.to_uppercase()))\n-        .map(|l| {\n-            format!(\n-                \"        #[cfg(feature = \\\"internal-lints\\\")]\\n        {}::{},\",\n-                l.module,\n-                l.name.to_uppercase()\n-            )\n-        });\n-    let other_lints = usable_lints\n-        .sorted_by_key(|l| format!(\"        {}::{},\", l.module, l.name.to_uppercase()))\n-        .map(|l| format!(\"        {}::{},\", l.module, l.name.to_uppercase()))\n-        .sorted();\n-    let mut lint_list = vec![header];\n-    lint_list.extend(internal_lints);\n-    lint_list.extend(other_lints);\n-    lint_list.push(footer);\n-    lint_list\n-}\n-\n-/// Gathers all files in `src/clippy_lints` and gathers all lints inside\n-pub fn gather_all() -> impl Iterator<Item = Lint> {\n-    lint_files().flat_map(|f| gather_from_file(&f))\n-}\n-\n-fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item = Lint> {\n-    let content = fs::read_to_string(dir_entry.path()).unwrap();\n-    let path = dir_entry.path();\n-    let filename = path.file_stem().unwrap();\n-    let path_buf = path.with_file_name(filename);\n-    let mut rel_path = path_buf\n-        .strip_prefix(clippy_project_root().join(\"clippy_lints/src\"))\n-        .expect(\"only files in `clippy_lints/src` should be looked at\");\n-    // If the lints are stored in mod.rs, we get the module name from\n-    // the containing directory:\n-    if filename == \"mod\" {\n-        rel_path = rel_path.parent().unwrap();\n-    }\n-\n-    let module = rel_path\n-        .components()\n-        .map(|c| c.as_os_str().to_str().unwrap())\n-        .collect::<Vec<_>>()\n-        .join(\"::\");\n-\n-    parse_contents(&content, &module)\n-}\n-\n-fn parse_contents(content: &str, module: &str) -> impl Iterator<Item = Lint> {\n-    let lints = DEC_CLIPPY_LINT_RE\n-        .captures_iter(content)\n-        .map(|m| Lint::new(&m[\"name\"], &m[\"cat\"], &m[\"desc\"], None, module));\n-    let deprecated = DEC_DEPRECATED_LINT_RE\n-        .captures_iter(content)\n-        .map(|m| Lint::new(&m[\"name\"], \"Deprecated\", &m[\"desc\"], Some(&m[\"desc\"]), module));\n-    // Removing the `.collect::<Vec<Lint>>().into_iter()` causes some lifetime issues due to the map\n-    lints.chain(deprecated).collect::<Vec<Lint>>().into_iter()\n-}\n-\n-/// Collects all .rs files in the `clippy_lints/src` directory\n-fn lint_files() -> impl Iterator<Item = walkdir::DirEntry> {\n-    // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n-    // Otherwise we would not collect all the lints, for example in `clippy_lints/src/methods/`.\n-    let path = clippy_project_root().join(\"clippy_lints/src\");\n-    WalkDir::new(path)\n-        .into_iter()\n-        .filter_map(Result::ok)\n-        .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n-}\n-\n-/// Whether a file has had its text changed or not\n-#[derive(PartialEq, Debug)]\n-pub struct FileChange {\n-    pub changed: bool,\n-    pub new_lines: String,\n-}\n-\n-/// Replaces a region in a file delimited by two lines matching regexes.\n-///\n-/// `path` is the relative path to the file on which you want to perform the replacement.\n-///\n-/// See `replace_region_in_text` for documentation of the other options.\n-///\n-/// # Panics\n-///\n-/// Panics if the path could not read or then written\n-pub fn replace_region_in_file<F>(\n-    path: &Path,\n-    start: &str,\n-    end: &str,\n-    replace_start: bool,\n-    write_back: bool,\n-    replacements: F,\n-) -> FileChange\n-where\n-    F: FnOnce() -> Vec<String>,\n-{\n-    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {}\", path.display(), e));\n-    let file_change = replace_region_in_text(&contents, start, end, replace_start, replacements);\n-\n-    if write_back {\n-        if let Err(e) = fs::write(path, file_change.new_lines.as_bytes()) {\n-            panic!(\"Cannot write to {}: {}\", path.display(), e);\n-        }\n-    }\n-    file_change\n-}\n-\n-/// Replaces a region in a text delimited by two lines matching regexes.\n-///\n-/// * `text` is the input text on which you want to perform the replacement\n-/// * `start` is a `&str` that describes the delimiter line before the region you want to replace.\n-///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n-/// * `end` is a `&str` that describes the delimiter line until where the replacement should happen.\n-///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n-/// * If `replace_start` is true, the `start` delimiter line is replaced as well. The `end`\n-///   delimiter line is never replaced.\n-/// * `replacements` is a closure that has to return a `Vec<String>` which contains the new text.\n-///\n-/// If you want to perform the replacement on files instead of already parsed text,\n-/// use `replace_region_in_file`.\n-///\n-/// # Example\n-///\n-/// ```\n-/// let the_text = \"replace_start\\nsome text\\nthat will be replaced\\nreplace_end\";\n-/// let result =\n-///     clippy_dev::replace_region_in_text(the_text, \"replace_start\", \"replace_end\", false, || {\n-///         vec![\"a different\".to_string(), \"text\".to_string()]\n-///     })\n-///     .new_lines;\n-/// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n-/// ```\n-///\n-/// # Panics\n-///\n-/// Panics if start or end is not valid regex\n-pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange\n-where\n-    F: FnOnce() -> Vec<String>,\n-{\n-    let replace_it = replacements();\n-    let mut in_old_region = false;\n-    let mut found = false;\n-    let mut new_lines = vec![];\n-    let start = Regex::new(start).unwrap();\n-    let end = Regex::new(end).unwrap();\n-\n-    for line in text.lines() {\n-        if in_old_region {\n-            if end.is_match(line) {\n-                in_old_region = false;\n-                new_lines.extend(replace_it.clone());\n-                new_lines.push(line.to_string());\n-            }\n-        } else if start.is_match(line) {\n-            if !replace_start {\n-                new_lines.push(line.to_string());\n-            }\n-            in_old_region = true;\n-            found = true;\n-        } else {\n-            new_lines.push(line.to_string());\n-        }\n-    }\n-\n-    if !found {\n-        // This happens if the provided regex in `clippy_dev/src/main.rs` does not match in the\n-        // given text or file. Most likely this is an error on the programmer's side and the Regex\n-        // is incorrect.\n-        eprintln!(\"error: regex \\n{:?}\\ndoesn't match. You may have to update it.\", start);\n-        std::process::exit(1);\n-    }\n-\n-    let mut new_lines = new_lines.join(\"\\n\");\n-    if text.ends_with('\\n') {\n-        new_lines.push('\\n');\n-    }\n-    let changed = new_lines != text;\n-    FileChange { changed, new_lines }\n-}\n-\n /// Returns the path to the Clippy project directory\n ///\n /// # Panics\n@@ -360,200 +36,3 @@ pub fn clippy_project_root() -> PathBuf {\n     }\n     panic!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n }\n-\n-#[test]\n-fn test_parse_contents() {\n-    let result: Vec<Lint> = parse_contents(\n-        r#\"\n-declare_clippy_lint! {\n-    pub PTR_ARG,\n-    style,\n-    \"really long \\\n-     text\"\n-}\n-\n-declare_clippy_lint!{\n-    pub DOC_MARKDOWN,\n-    pedantic,\n-    \"single line\"\n-}\n-\n-/// some doc comment\n-declare_deprecated_lint! {\n-    pub SHOULD_ASSERT_EQ,\n-    \"`assert!()` will be more flexible with RFC 2011\"\n-}\n-    \"#,\n-        \"module_name\",\n-    )\n-    .collect();\n-\n-    let expected = vec![\n-        Lint::new(\"ptr_arg\", \"style\", \"really long text\", None, \"module_name\"),\n-        Lint::new(\"doc_markdown\", \"pedantic\", \"single line\", None, \"module_name\"),\n-        Lint::new(\n-            \"should_assert_eq\",\n-            \"Deprecated\",\n-            \"`assert!()` will be more flexible with RFC 2011\",\n-            Some(\"`assert!()` will be more flexible with RFC 2011\"),\n-            \"module_name\",\n-        ),\n-    ];\n-    assert_eq!(expected, result);\n-}\n-\n-#[test]\n-fn test_replace_region() {\n-    let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n-    let expected = FileChange {\n-        changed: true,\n-        new_lines: \"\\nabc\\nhello world\\ndef\\nghi\".to_string(),\n-    };\n-    let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, false, || {\n-        vec![\"hello world\".to_string()]\n-    });\n-    assert_eq!(expected, result);\n-}\n-\n-#[test]\n-fn test_replace_region_with_start() {\n-    let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n-    let expected = FileChange {\n-        changed: true,\n-        new_lines: \"\\nhello world\\ndef\\nghi\".to_string(),\n-    };\n-    let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, true, || {\n-        vec![\"hello world\".to_string()]\n-    });\n-    assert_eq!(expected, result);\n-}\n-\n-#[test]\n-fn test_replace_region_no_changes() {\n-    let text = \"123\\n456\\n789\";\n-    let expected = FileChange {\n-        changed: false,\n-        new_lines: \"123\\n456\\n789\".to_string(),\n-    };\n-    let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, Vec::new);\n-    assert_eq!(expected, result);\n-}\n-\n-#[test]\n-fn test_usable_lints() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"Deprecated\", \"abc\", Some(\"Reason\"), \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"Not Deprecated\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"internal\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"internal_style\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = vec![Lint::new(\n-        \"should_assert_eq2\",\n-        \"Not Deprecated\",\n-        \"abc\",\n-        None,\n-        \"module_name\",\n-    )];\n-    assert_eq!(expected, Lint::usable_lints(&lints));\n-}\n-\n-#[test]\n-fn test_by_lint_group() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n-    ];\n-    let mut expected: HashMap<String, Vec<Lint>> = HashMap::new();\n-    expected.insert(\n-        \"group1\".to_string(),\n-        vec![\n-            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-            Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n-        ],\n-    );\n-    expected.insert(\n-        \"group2\".to_string(),\n-        vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")],\n-    );\n-    assert_eq!(expected, Lint::by_lint_group(lints.into_iter()));\n-}\n-\n-#[test]\n-fn test_gen_changelog_lint_list() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = vec![\n-        format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK.to_string()),\n-        format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string()),\n-    ];\n-    assert_eq!(expected, gen_changelog_lint_list(lints.iter()));\n-}\n-\n-#[test]\n-fn test_gen_deprecated() {\n-    let lints = vec![\n-        Lint::new(\n-            \"should_assert_eq\",\n-            \"group1\",\n-            \"abc\",\n-            Some(\"has been superseded by should_assert_eq2\"),\n-            \"module_name\",\n-        ),\n-        Lint::new(\n-            \"another_deprecated\",\n-            \"group2\",\n-            \"abc\",\n-            Some(\"will be removed\"),\n-            \"module_name\",\n-        ),\n-    ];\n-    let expected: Vec<String> = vec![\n-        \"    store.register_removed(\",\n-        \"        \\\"clippy::should_assert_eq\\\",\",\n-        \"        \\\"has been superseded by should_assert_eq2\\\",\",\n-        \"    );\",\n-        \"    store.register_removed(\",\n-        \"        \\\"clippy::another_deprecated\\\",\",\n-        \"        \\\"will be removed\\\",\",\n-        \"    );\",\n-    ]\n-    .into_iter()\n-    .map(String::from)\n-    .collect();\n-    assert_eq!(expected, gen_deprecated(lints.iter()));\n-}\n-\n-#[test]\n-#[should_panic]\n-fn test_gen_deprecated_fail() {\n-    let lints = vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")];\n-    let _deprecated_lints = gen_deprecated(lints.iter());\n-}\n-\n-#[test]\n-fn test_gen_modules_list() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"incorrect_stuff\", \"group3\", \"abc\", None, \"another_module\"),\n-    ];\n-    let expected = vec![\"mod another_module;\".to_string(), \"mod module_name;\".to_string()];\n-    assert_eq!(expected, gen_modules_list(lints.iter()));\n-}\n-\n-#[test]\n-fn test_gen_lint_group_list() {\n-    let lints = vec![\n-        Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = vec![\n-        \"        LintId::of(module_name::ABC),\".to_string(),\n-        \"        LintId::of(module_name::INTERNAL),\".to_string(),\n-        \"        LintId::of(module_name::SHOULD_ASSERT_EQ),\".to_string(),\n-    ];\n-    assert_eq!(expected, gen_lint_group_list(lints.iter()));\n-}"}, {"sha": "1ab8ad9b9207b90aff44d66b63f5ef1bd6094ec0", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 618, "deletions": 69, "changes": 687, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -1,15 +1,61 @@\n-use crate::{\n-    gather_all, gen_changelog_lint_list, gen_deprecated, gen_lint_group_list, gen_modules_list, gen_register_lint_list,\n-    replace_region_in_file, Lint, DOCS_LINK,\n-};\n+use itertools::Itertools;\n+use regex::Regex;\n+use std::collections::{BTreeSet, HashMap};\n+use std::ffi::OsStr;\n+use std::fs;\n+use std::lazy::SyncLazy;\n use std::path::Path;\n+use walkdir::WalkDir;\n+\n+use crate::clippy_project_root;\n+\n+const GENERATED_FILE_COMMENT: &str = \"// This file was generated by `cargo dev update_lints`.\\n\\\n+     // Use that command to update this file and do not edit by hand.\\n\\\n+     // Manual edits will be overwritten.\\n\\n\";\n+\n+static DEC_CLIPPY_LINT_RE: SyncLazy<Regex> = SyncLazy::new(|| {\n+    Regex::new(\n+        r#\"(?x)\n+    declare_clippy_lint!\\s*[\\{(]\n+    (?:\\s+///.*)*\n+    \\s+pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n+    (?P<cat>[a-z_]+)\\s*,\\s*\n+    \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n+\"#,\n+    )\n+    .unwrap()\n+});\n+\n+static DEC_DEPRECATED_LINT_RE: SyncLazy<Regex> = SyncLazy::new(|| {\n+    Regex::new(\n+        r#\"(?x)\n+    declare_deprecated_lint!\\s*[{(]\\s*\n+    (?:\\s+///.*)*\n+    \\s+pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n+    \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n+\"#,\n+    )\n+    .unwrap()\n+});\n+static NL_ESCAPE_RE: SyncLazy<Regex> = SyncLazy::new(|| Regex::new(r#\"\\\\\\n\\s*\"#).unwrap());\n+\n+static DOCS_LINK: &str = \"https://rust-lang.github.io/rust-clippy/master/index.html\";\n \n #[derive(Clone, Copy, PartialEq)]\n pub enum UpdateMode {\n     Check,\n     Change,\n }\n \n+/// Runs the `update_lints` command.\n+///\n+/// This updates various generated values from the lint source code.\n+///\n+/// `update_mode` indicates if the files should be updated or if updates should be checked for.\n+///\n+/// # Panics\n+///\n+/// Panics if a file path could not read from or then written to\n #[allow(clippy::too_many_lines)]\n pub fn run(update_mode: UpdateMode) {\n     let lint_list: Vec<Lint> = gather_all().collect();\n@@ -52,76 +98,42 @@ pub fn run(update_mode: UpdateMode) {\n     )\n     .changed;\n \n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin deprecated lints\",\n-        \"end deprecated lints\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_deprecated(deprecated_lints.iter()),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin register lints\",\n-        \"end register lints\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_register_lint_list(internal_lints.iter(), usable_lints.iter()),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin lints modules\",\n-        \"end lints modules\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_modules_list(usable_lints.iter()),\n-    )\n-    .changed;\n+    if file_change && update_mode == UpdateMode::Check {\n+        exit_with_failure();\n+    }\n \n-    // Generate lists of lints in the clippy::all lint group\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        r#\"store.register_group\\(true, \"clippy::all\"\"#,\n-        r#\"\\]\\);\"#,\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            // clippy::all should only include the following lint groups:\n-            let all_group_lints = usable_lints.iter().filter(|l| {\n-                matches!(\n-                    &*l.group,\n-                    \"correctness\" | \"suspicious\" | \"style\" | \"complexity\" | \"perf\"\n-                )\n-            });\n-\n-            gen_lint_group_list(all_group_lints)\n-        },\n-    )\n-    .changed;\n+    process_file(\n+        \"clippy_lints/src/lib.register_lints.rs\",\n+        update_mode,\n+        &gen_register_lint_list(internal_lints.iter(), usable_lints.iter()),\n+    );\n+    process_file(\n+        \"clippy_lints/src/lib.deprecated.rs\",\n+        update_mode,\n+        &gen_deprecated(deprecated_lints.iter()),\n+    );\n+    process_file(\n+        \"clippy_lints/src/lib.mods.rs\",\n+        update_mode,\n+        &gen_modules_list(usable_lints.iter()),\n+    );\n \n-    // Generate the list of lints for all other lint groups\n-    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n-        file_change |= replace_region_in_file(\n-            Path::new(\"clippy_lints/src/lib.rs\"),\n-            &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),\n-            r#\"\\]\\);\"#,\n-            false,\n-            update_mode == UpdateMode::Change,\n-            || gen_lint_group_list(lints.iter()),\n+    let all_group_lints = usable_lints.iter().filter(|l| {\n+        matches!(\n+            &*l.group,\n+            \"correctness\" | \"suspicious\" | \"style\" | \"complexity\" | \"perf\"\n         )\n-        .changed;\n-    }\n+    });\n+    let content = gen_lint_group_list(\"all\", all_group_lints);\n+    process_file(\"clippy_lints/src/lib.register_all.rs\", update_mode, &content);\n \n-    if update_mode == UpdateMode::Check && file_change {\n-        println!(\n-            \"Not all lints defined properly. \\\n-             Please run `cargo dev update_lints` to make sure all lints are defined properly.\"\n+    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n+        let content = gen_lint_group_list(&lint_group, lints.iter());\n+        process_file(\n+            &format!(\"clippy_lints/src/lib.register_{}.rs\", lint_group),\n+            update_mode,\n+            &content,\n         );\n-        std::process::exit(1);\n     }\n }\n \n@@ -150,3 +162,540 @@ pub fn print_lints() {\n fn round_to_fifty(count: usize) -> usize {\n     count / 50 * 50\n }\n+\n+fn process_file(path: impl AsRef<Path>, update_mode: UpdateMode, content: &str) {\n+    if update_mode == UpdateMode::Check {\n+        let old_content =\n+            fs::read_to_string(&path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {}\", path.as_ref().display(), e));\n+        if content != old_content {\n+            exit_with_failure();\n+        }\n+    } else {\n+        fs::write(&path, content.as_bytes())\n+            .unwrap_or_else(|e| panic!(\"Cannot write to {}: {}\", path.as_ref().display(), e));\n+    }\n+}\n+\n+fn exit_with_failure() {\n+    println!(\n+        \"Not all lints defined properly. \\\n+                 Please run `cargo dev update_lints` to make sure all lints are defined properly.\"\n+    );\n+    std::process::exit(1);\n+}\n+\n+/// Lint data parsed from the Clippy source code.\n+#[derive(Clone, PartialEq, Debug)]\n+struct Lint {\n+    name: String,\n+    group: String,\n+    desc: String,\n+    deprecation: Option<String>,\n+    module: String,\n+}\n+\n+impl Lint {\n+    #[must_use]\n+    fn new(name: &str, group: &str, desc: &str, deprecation: Option<&str>, module: &str) -> Self {\n+        Self {\n+            name: name.to_lowercase(),\n+            group: group.to_string(),\n+            desc: NL_ESCAPE_RE.replace(&desc.replace(\"\\\\\\\"\", \"\\\"\"), \"\").to_string(),\n+            deprecation: deprecation.map(ToString::to_string),\n+            module: module.to_string(),\n+        }\n+    }\n+\n+    /// Returns all non-deprecated lints and non-internal lints\n+    #[must_use]\n+    fn usable_lints(lints: &[Self]) -> Vec<Self> {\n+        lints\n+            .iter()\n+            .filter(|l| l.deprecation.is_none() && !l.group.starts_with(\"internal\"))\n+            .cloned()\n+            .collect()\n+    }\n+\n+    /// Returns all internal lints (not `internal_warn` lints)\n+    #[must_use]\n+    fn internal_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.group == \"internal\").cloned().collect()\n+    }\n+\n+    /// Returns all deprecated lints\n+    #[must_use]\n+    fn deprecated_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.deprecation.is_some()).cloned().collect()\n+    }\n+\n+    /// Returns the lints in a `HashMap`, grouped by the different lint groups\n+    #[must_use]\n+    fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n+        lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n+    }\n+}\n+\n+/// Generates the code for registering a group\n+fn gen_lint_group_list<'a>(group_name: &str, lints: impl Iterator<Item = &'a Lint>) -> String {\n+    let mut details: Vec<_> = lints.map(|l| (&l.module, l.name.to_uppercase())).collect();\n+    details.sort_unstable();\n+\n+    let mut output = GENERATED_FILE_COMMENT.to_string();\n+\n+    output.push_str(&format!(\n+        \"store.register_group(true, \\\"clippy::{0}\\\", Some(\\\"clippy_{0}\\\"), vec![\\n\",\n+        group_name\n+    ));\n+    for (module, name) in details {\n+        output.push_str(&format!(\"    LintId::of({}::{}),\\n\", module, name));\n+    }\n+    output.push_str(\"])\\n\");\n+\n+    output\n+}\n+\n+/// Generates the module declarations for `lints`\n+#[must_use]\n+fn gen_modules_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> String {\n+    let module_names: BTreeSet<_> = lints.map(|l| &l.module).collect();\n+\n+    let mut output = GENERATED_FILE_COMMENT.to_string();\n+    for name in module_names {\n+        output.push_str(&format!(\"mod {};\\n\", name));\n+    }\n+    output\n+}\n+\n+/// Generates the list of lint links at the bottom of the CHANGELOG\n+#[must_use]\n+fn gen_changelog_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n+    lints\n+        .sorted_by_key(|l| &l.name)\n+        .map(|l| format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n+        .collect()\n+}\n+\n+/// Generates the `register_removed` code\n+#[must_use]\n+fn gen_deprecated<'a>(lints: impl Iterator<Item = &'a Lint>) -> String {\n+    let mut output = GENERATED_FILE_COMMENT.to_string();\n+    output.push_str(\"{\\n\");\n+    for Lint { name, deprecation, .. } in lints {\n+        output.push_str(&format!(\n+            concat!(\n+                \"    store.register_removed(\\n\",\n+                \"        \\\"clippy::{}\\\",\\n\",\n+                \"        \\\"{}\\\",\\n\",\n+                \"    );\\n\"\n+            ),\n+            name,\n+            deprecation.as_ref().expect(\"`lints` are deprecated\")\n+        ));\n+    }\n+    output.push_str(\"}\\n\");\n+\n+    output\n+}\n+\n+/// Generates the code for registering lints\n+#[must_use]\n+fn gen_register_lint_list<'a>(\n+    internal_lints: impl Iterator<Item = &'a Lint>,\n+    usable_lints: impl Iterator<Item = &'a Lint>,\n+) -> String {\n+    let mut details: Vec<_> = internal_lints\n+        .map(|l| (false, &l.module, l.name.to_uppercase()))\n+        .chain(usable_lints.map(|l| (true, &l.module, l.name.to_uppercase())))\n+        .collect();\n+    details.sort_unstable();\n+\n+    let mut output = GENERATED_FILE_COMMENT.to_string();\n+    output.push_str(\"store.register_lints(&[\\n\");\n+\n+    for (is_public, module_name, lint_name) in details {\n+        if !is_public {\n+            output.push_str(\"    #[cfg(feature = \\\"internal-lints\\\")]\\n\");\n+        }\n+        output.push_str(&format!(\"    {}::{},\\n\", module_name, lint_name));\n+    }\n+    output.push_str(\"])\\n\");\n+\n+    output\n+}\n+\n+/// Gathers all files in `src/clippy_lints` and gathers all lints inside\n+fn gather_all() -> impl Iterator<Item = Lint> {\n+    lint_files().flat_map(|f| gather_from_file(&f))\n+}\n+\n+fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item = Lint> {\n+    let content = fs::read_to_string(dir_entry.path()).unwrap();\n+    let path = dir_entry.path();\n+    let filename = path.file_stem().unwrap();\n+    let path_buf = path.with_file_name(filename);\n+    let mut rel_path = path_buf\n+        .strip_prefix(clippy_project_root().join(\"clippy_lints/src\"))\n+        .expect(\"only files in `clippy_lints/src` should be looked at\");\n+    // If the lints are stored in mod.rs, we get the module name from\n+    // the containing directory:\n+    if filename == \"mod\" {\n+        rel_path = rel_path.parent().unwrap();\n+    }\n+\n+    let module = rel_path\n+        .components()\n+        .map(|c| c.as_os_str().to_str().unwrap())\n+        .collect::<Vec<_>>()\n+        .join(\"::\");\n+\n+    parse_contents(&content, &module)\n+}\n+\n+fn parse_contents(content: &str, module: &str) -> impl Iterator<Item = Lint> {\n+    let lints = DEC_CLIPPY_LINT_RE\n+        .captures_iter(content)\n+        .map(|m| Lint::new(&m[\"name\"], &m[\"cat\"], &m[\"desc\"], None, module));\n+    let deprecated = DEC_DEPRECATED_LINT_RE\n+        .captures_iter(content)\n+        .map(|m| Lint::new(&m[\"name\"], \"Deprecated\", &m[\"desc\"], Some(&m[\"desc\"]), module));\n+    // Removing the `.collect::<Vec<Lint>>().into_iter()` causes some lifetime issues due to the map\n+    lints.chain(deprecated).collect::<Vec<Lint>>().into_iter()\n+}\n+\n+/// Collects all .rs files in the `clippy_lints/src` directory\n+fn lint_files() -> impl Iterator<Item = walkdir::DirEntry> {\n+    // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n+    // Otherwise we would not collect all the lints, for example in `clippy_lints/src/methods/`.\n+    let path = clippy_project_root().join(\"clippy_lints/src\");\n+    WalkDir::new(path)\n+        .into_iter()\n+        .filter_map(Result::ok)\n+        .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n+}\n+\n+/// Whether a file has had its text changed or not\n+#[derive(PartialEq, Debug)]\n+struct FileChange {\n+    changed: bool,\n+    new_lines: String,\n+}\n+\n+/// Replaces a region in a file delimited by two lines matching regexes.\n+///\n+/// `path` is the relative path to the file on which you want to perform the replacement.\n+///\n+/// See `replace_region_in_text` for documentation of the other options.\n+///\n+/// # Panics\n+///\n+/// Panics if the path could not read or then written\n+fn replace_region_in_file<F>(\n+    path: &Path,\n+    start: &str,\n+    end: &str,\n+    replace_start: bool,\n+    write_back: bool,\n+    replacements: F,\n+) -> FileChange\n+where\n+    F: FnOnce() -> Vec<String>,\n+{\n+    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {}\", path.display(), e));\n+    let file_change = replace_region_in_text(&contents, start, end, replace_start, replacements);\n+\n+    if write_back {\n+        if let Err(e) = fs::write(path, file_change.new_lines.as_bytes()) {\n+            panic!(\"Cannot write to {}: {}\", path.display(), e);\n+        }\n+    }\n+    file_change\n+}\n+\n+/// Replaces a region in a text delimited by two lines matching regexes.\n+///\n+/// * `text` is the input text on which you want to perform the replacement\n+/// * `start` is a `&str` that describes the delimiter line before the region you want to replace.\n+///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n+/// * `end` is a `&str` that describes the delimiter line until where the replacement should happen.\n+///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n+/// * If `replace_start` is true, the `start` delimiter line is replaced as well. The `end`\n+///   delimiter line is never replaced.\n+/// * `replacements` is a closure that has to return a `Vec<String>` which contains the new text.\n+///\n+/// If you want to perform the replacement on files instead of already parsed text,\n+/// use `replace_region_in_file`.\n+///\n+/// # Example\n+///\n+/// ```ignore\n+/// let the_text = \"replace_start\\nsome text\\nthat will be replaced\\nreplace_end\";\n+/// let result =\n+///     replace_region_in_text(the_text, \"replace_start\", \"replace_end\", false, || {\n+///         vec![\"a different\".to_string(), \"text\".to_string()]\n+///     })\n+///     .new_lines;\n+/// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n+/// ```\n+///\n+/// # Panics\n+///\n+/// Panics if start or end is not valid regex\n+fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange\n+where\n+    F: FnOnce() -> Vec<String>,\n+{\n+    let replace_it = replacements();\n+    let mut in_old_region = false;\n+    let mut found = false;\n+    let mut new_lines = vec![];\n+    let start = Regex::new(start).unwrap();\n+    let end = Regex::new(end).unwrap();\n+\n+    for line in text.lines() {\n+        if in_old_region {\n+            if end.is_match(line) {\n+                in_old_region = false;\n+                new_lines.extend(replace_it.clone());\n+                new_lines.push(line.to_string());\n+            }\n+        } else if start.is_match(line) {\n+            if !replace_start {\n+                new_lines.push(line.to_string());\n+            }\n+            in_old_region = true;\n+            found = true;\n+        } else {\n+            new_lines.push(line.to_string());\n+        }\n+    }\n+\n+    if !found {\n+        // This happens if the provided regex in `clippy_dev/src/main.rs` does not match in the\n+        // given text or file. Most likely this is an error on the programmer's side and the Regex\n+        // is incorrect.\n+        eprintln!(\"error: regex \\n{:?}\\ndoesn't match. You may have to update it.\", start);\n+        std::process::exit(1);\n+    }\n+\n+    let mut new_lines = new_lines.join(\"\\n\");\n+    if text.ends_with('\\n') {\n+        new_lines.push('\\n');\n+    }\n+    let changed = new_lines != text;\n+    FileChange { changed, new_lines }\n+}\n+\n+#[test]\n+fn test_parse_contents() {\n+    let result: Vec<Lint> = parse_contents(\n+        r#\"\n+declare_clippy_lint! {\n+    pub PTR_ARG,\n+    style,\n+    \"really long \\\n+     text\"\n+}\n+\n+declare_clippy_lint!{\n+    pub DOC_MARKDOWN,\n+    pedantic,\n+    \"single line\"\n+}\n+\n+/// some doc comment\n+declare_deprecated_lint! {\n+    pub SHOULD_ASSERT_EQ,\n+    \"`assert!()` will be more flexible with RFC 2011\"\n+}\n+    \"#,\n+        \"module_name\",\n+    )\n+    .collect();\n+\n+    let expected = vec![\n+        Lint::new(\"ptr_arg\", \"style\", \"really long text\", None, \"module_name\"),\n+        Lint::new(\"doc_markdown\", \"pedantic\", \"single line\", None, \"module_name\"),\n+        Lint::new(\n+            \"should_assert_eq\",\n+            \"Deprecated\",\n+            \"`assert!()` will be more flexible with RFC 2011\",\n+            Some(\"`assert!()` will be more flexible with RFC 2011\"),\n+            \"module_name\",\n+        ),\n+    ];\n+    assert_eq!(expected, result);\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_replace_region() {\n+        let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n+        let expected = FileChange {\n+            changed: true,\n+            new_lines: \"\\nabc\\nhello world\\ndef\\nghi\".to_string(),\n+        };\n+        let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, false, || {\n+            vec![\"hello world\".to_string()]\n+        });\n+        assert_eq!(expected, result);\n+    }\n+\n+    #[test]\n+    fn test_replace_region_with_start() {\n+        let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n+        let expected = FileChange {\n+            changed: true,\n+            new_lines: \"\\nhello world\\ndef\\nghi\".to_string(),\n+        };\n+        let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, true, || {\n+            vec![\"hello world\".to_string()]\n+        });\n+        assert_eq!(expected, result);\n+    }\n+\n+    #[test]\n+    fn test_replace_region_no_changes() {\n+        let text = \"123\\n456\\n789\";\n+        let expected = FileChange {\n+            changed: false,\n+            new_lines: \"123\\n456\\n789\".to_string(),\n+        };\n+        let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, Vec::new);\n+        assert_eq!(expected, result);\n+    }\n+\n+    #[test]\n+    fn test_usable_lints() {\n+        let lints = vec![\n+            Lint::new(\"should_assert_eq\", \"Deprecated\", \"abc\", Some(\"Reason\"), \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"Not Deprecated\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"internal\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"internal_style\", \"abc\", None, \"module_name\"),\n+        ];\n+        let expected = vec![Lint::new(\n+            \"should_assert_eq2\",\n+            \"Not Deprecated\",\n+            \"abc\",\n+            None,\n+            \"module_name\",\n+        )];\n+        assert_eq!(expected, Lint::usable_lints(&lints));\n+    }\n+\n+    #[test]\n+    fn test_by_lint_group() {\n+        let lints = vec![\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n+        ];\n+        let mut expected: HashMap<String, Vec<Lint>> = HashMap::new();\n+        expected.insert(\n+            \"group1\".to_string(),\n+            vec![\n+                Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+                Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n+            ],\n+        );\n+        expected.insert(\n+            \"group2\".to_string(),\n+            vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")],\n+        );\n+        assert_eq!(expected, Lint::by_lint_group(lints.into_iter()));\n+    }\n+\n+    #[test]\n+    fn test_gen_changelog_lint_list() {\n+        let lints = vec![\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n+        ];\n+        let expected = vec![\n+            format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK.to_string()),\n+            format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string()),\n+        ];\n+        assert_eq!(expected, gen_changelog_lint_list(lints.iter()));\n+    }\n+\n+    #[test]\n+    fn test_gen_deprecated() {\n+        let lints = vec![\n+            Lint::new(\n+                \"should_assert_eq\",\n+                \"group1\",\n+                \"abc\",\n+                Some(\"has been superseded by should_assert_eq2\"),\n+                \"module_name\",\n+            ),\n+            Lint::new(\n+                \"another_deprecated\",\n+                \"group2\",\n+                \"abc\",\n+                Some(\"will be removed\"),\n+                \"module_name\",\n+            ),\n+        ];\n+\n+        let expected = GENERATED_FILE_COMMENT.to_string()\n+            + &[\n+                \"{\",\n+                \"    store.register_removed(\",\n+                \"        \\\"clippy::should_assert_eq\\\",\",\n+                \"        \\\"has been superseded by should_assert_eq2\\\",\",\n+                \"    );\",\n+                \"    store.register_removed(\",\n+                \"        \\\"clippy::another_deprecated\\\",\",\n+                \"        \\\"will be removed\\\",\",\n+                \"    );\",\n+                \"}\",\n+            ]\n+            .join(\"\\n\")\n+            + \"\\n\";\n+\n+        assert_eq!(expected, gen_deprecated(lints.iter()));\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_gen_deprecated_fail() {\n+        let lints = vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")];\n+        let _deprecated_lints = gen_deprecated(lints.iter());\n+    }\n+\n+    #[test]\n+    fn test_gen_modules_list() {\n+        let lints = vec![\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"incorrect_stuff\", \"group3\", \"abc\", None, \"another_module\"),\n+        ];\n+        let expected =\n+            GENERATED_FILE_COMMENT.to_string() + &[\"mod another_module;\", \"mod module_name;\"].join(\"\\n\") + \"\\n\";\n+        assert_eq!(expected, gen_modules_list(lints.iter()));\n+    }\n+\n+    #[test]\n+    fn test_gen_lint_group_list() {\n+        let lints = vec![\n+            Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n+        ];\n+        let expected = GENERATED_FILE_COMMENT.to_string()\n+            + &[\n+                \"store.register_group(true, \\\"clippy::group1\\\", Some(\\\"clippy_group1\\\"), vec![\",\n+                \"    LintId::of(module_name::ABC),\",\n+                \"    LintId::of(module_name::INTERNAL),\",\n+                \"    LintId::of(module_name::SHOULD_ASSERT_EQ),\",\n+                \"])\",\n+            ]\n+            .join(\"\\n\")\n+            + \"\\n\";\n+\n+        let result = gen_lint_group_list(\"group1\", lints.iter());\n+\n+        assert_eq!(expected, result);\n+    }\n+}"}, {"sha": "80bde1b11384bcdac112af06f27f88b63526dadb", "filename": "clippy_lints/src/lib.deprecated.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.deprecated.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,70 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+{\n+    store.register_removed(\n+        \"clippy::should_assert_eq\",\n+        \"`assert!()` will be more flexible with RFC 2011\",\n+    );\n+    store.register_removed(\n+        \"clippy::extend_from_slice\",\n+        \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\",\n+    );\n+    store.register_removed(\n+        \"clippy::range_step_by_zero\",\n+        \"`iterator.step_by(0)` panics nowadays\",\n+    );\n+    store.register_removed(\n+        \"clippy::unstable_as_slice\",\n+        \"`Vec::as_slice` has been stabilized in 1.7\",\n+    );\n+    store.register_removed(\n+        \"clippy::unstable_as_mut_slice\",\n+        \"`Vec::as_mut_slice` has been stabilized in 1.7\",\n+    );\n+    store.register_removed(\n+        \"clippy::misaligned_transmute\",\n+        \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\",\n+    );\n+    store.register_removed(\n+        \"clippy::assign_ops\",\n+        \"using compound assignment operators (e.g., `+=`) is harmless\",\n+    );\n+    store.register_removed(\n+        \"clippy::if_let_redundant_pattern_matching\",\n+        \"this lint has been changed to redundant_pattern_matching\",\n+    );\n+    store.register_removed(\n+        \"clippy::unsafe_vector_initialization\",\n+        \"the replacement suggested by this lint had substantially different behavior\",\n+    );\n+    store.register_removed(\n+        \"clippy::unused_collect\",\n+        \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\",\n+    );\n+    store.register_removed(\n+        \"clippy::replace_consts\",\n+        \"associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\",\n+    );\n+    store.register_removed(\n+        \"clippy::regex_macro\",\n+        \"the regex! macro has been removed from the regex crate in 2018\",\n+    );\n+    store.register_removed(\n+        \"clippy::find_map\",\n+        \"this lint has been replaced by `manual_find_map`, a more specific lint\",\n+    );\n+    store.register_removed(\n+        \"clippy::filter_map\",\n+        \"this lint has been replaced by `manual_filter_map`, a more specific lint\",\n+    );\n+    store.register_removed(\n+        \"clippy::pub_enum_variant_names\",\n+        \"set the `avoid-breaking-exported-api` config option to `false` to enable the `enum_variant_names` lint for public items\",\n+    );\n+    store.register_removed(\n+        \"clippy::wrong_pub_self_convention\",\n+        \"set the `avoid-breaking-exported-api` config option to `false` to enable the `wrong_self_convention` lint for public items\",\n+    );\n+}"}, {"sha": "2718604f9051dbb8fbdbf24274d772eb78cc628e", "filename": "clippy_lints/src/lib.mods.rs", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.mods.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,232 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+mod absurd_extreme_comparisons;\n+mod approx_const;\n+mod arithmetic;\n+mod as_conversions;\n+mod asm_syntax;\n+mod assertions_on_constants;\n+mod assign_ops;\n+mod async_yields_async;\n+mod attrs;\n+mod await_holding_invalid;\n+mod bit_mask;\n+mod blacklisted_name;\n+mod blocks_in_if_conditions;\n+mod bool_assert_comparison;\n+mod booleans;\n+mod bytecount;\n+mod cargo_common_metadata;\n+mod case_sensitive_file_extension_comparisons;\n+mod casts;\n+mod checked_conversions;\n+mod cognitive_complexity;\n+mod collapsible_if;\n+mod collapsible_match;\n+mod comparison_chain;\n+mod copies;\n+mod copy_iterator;\n+mod create_dir;\n+mod dbg_macro;\n+mod default;\n+mod default_numeric_fallback;\n+mod dereference;\n+mod derivable_impls;\n+mod derive;\n+mod disallowed_method;\n+mod disallowed_script_idents;\n+mod disallowed_type;\n+mod doc;\n+mod double_comparison;\n+mod double_parens;\n+mod drop_forget_ref;\n+mod duration_subsec;\n+mod else_if_without_else;\n+mod empty_enum;\n+mod entry;\n+mod enum_clike;\n+mod enum_variants;\n+mod eq_op;\n+mod erasing_op;\n+mod escape;\n+mod eta_reduction;\n+mod eval_order_dependence;\n+mod excessive_bools;\n+mod exhaustive_items;\n+mod exit;\n+mod explicit_write;\n+mod fallible_impl_from;\n+mod feature_name;\n+mod float_equality_without_abs;\n+mod float_literal;\n+mod floating_point_arithmetic;\n+mod format;\n+mod formatting;\n+mod from_over_into;\n+mod from_str_radix_10;\n+mod functions;\n+mod future_not_send;\n+mod get_last_with_len;\n+mod identity_op;\n+mod if_let_mutex;\n+mod if_not_else;\n+mod if_then_panic;\n+mod if_then_some_else_none;\n+mod implicit_hasher;\n+mod implicit_return;\n+mod implicit_saturating_sub;\n+mod inconsistent_struct_constructor;\n+mod indexing_slicing;\n+mod infinite_iter;\n+mod inherent_impl;\n+mod inherent_to_string;\n+mod inline_fn_without_body;\n+mod int_plus_one;\n+mod integer_division;\n+mod invalid_upcast_comparisons;\n+mod items_after_statements;\n+mod iter_not_returning_iterator;\n+mod large_const_arrays;\n+mod large_enum_variant;\n+mod large_stack_arrays;\n+mod len_zero;\n+mod let_if_seq;\n+mod let_underscore;\n+mod lifetimes;\n+mod literal_representation;\n+mod loops;\n+mod macro_use;\n+mod main_recursion;\n+mod manual_async_fn;\n+mod manual_map;\n+mod manual_non_exhaustive;\n+mod manual_ok_or;\n+mod manual_strip;\n+mod manual_unwrap_or;\n+mod map_clone;\n+mod map_err_ignore;\n+mod map_unit_fn;\n+mod match_on_vec_items;\n+mod match_result_ok;\n+mod matches;\n+mod mem_discriminant;\n+mod mem_forget;\n+mod mem_replace;\n+mod methods;\n+mod minmax;\n+mod misc;\n+mod misc_early;\n+mod missing_const_for_fn;\n+mod missing_doc;\n+mod missing_enforced_import_rename;\n+mod missing_inline;\n+mod module_style;\n+mod modulo_arithmetic;\n+mod multiple_crate_versions;\n+mod mut_key;\n+mod mut_mut;\n+mod mut_mutex_lock;\n+mod mut_reference;\n+mod mutable_debug_assertion;\n+mod mutex_atomic;\n+mod needless_arbitrary_self_type;\n+mod needless_bitwise_bool;\n+mod needless_bool;\n+mod needless_borrow;\n+mod needless_borrowed_ref;\n+mod needless_continue;\n+mod needless_for_each;\n+mod needless_option_as_deref;\n+mod needless_pass_by_value;\n+mod needless_question_mark;\n+mod needless_update;\n+mod neg_cmp_op_on_partial_ord;\n+mod neg_multiply;\n+mod new_without_default;\n+mod no_effect;\n+mod non_copy_const;\n+mod non_expressive_names;\n+mod non_octal_unix_permissions;\n+mod nonstandard_macro_braces;\n+mod open_options;\n+mod option_env_unwrap;\n+mod option_if_let_else;\n+mod overflow_check_conditional;\n+mod panic_in_result_fn;\n+mod panic_unimplemented;\n+mod partialeq_ne_impl;\n+mod pass_by_ref_or_value;\n+mod path_buf_push_overwrite;\n+mod pattern_type_mismatch;\n+mod precedence;\n+mod ptr;\n+mod ptr_eq;\n+mod ptr_offset_with_cast;\n+mod question_mark;\n+mod ranges;\n+mod redundant_clone;\n+mod redundant_closure_call;\n+mod redundant_else;\n+mod redundant_field_names;\n+mod redundant_pub_crate;\n+mod redundant_slicing;\n+mod redundant_static_lifetimes;\n+mod ref_option_ref;\n+mod reference;\n+mod regex;\n+mod repeat_once;\n+mod returns;\n+mod same_name_method;\n+mod self_assignment;\n+mod self_named_constructors;\n+mod semicolon_if_nothing_returned;\n+mod serde_api;\n+mod shadow;\n+mod single_component_path_imports;\n+mod size_of_in_element_count;\n+mod slow_vector_initialization;\n+mod stable_sort_primitive;\n+mod strings;\n+mod strlen_on_c_strings;\n+mod suspicious_operation_groupings;\n+mod suspicious_trait_impl;\n+mod swap;\n+mod tabs_in_doc_comments;\n+mod temporary_assignment;\n+mod to_digit_is_some;\n+mod to_string_in_display;\n+mod trait_bounds;\n+mod transmute;\n+mod transmuting_null;\n+mod try_err;\n+mod types;\n+mod undropped_manually_drops;\n+mod unicode;\n+mod unit_return_expecting_ord;\n+mod unit_types;\n+mod unnamed_address;\n+mod unnecessary_self_imports;\n+mod unnecessary_sort_by;\n+mod unnecessary_wraps;\n+mod unnested_or_patterns;\n+mod unsafe_removed_from_name;\n+mod unused_async;\n+mod unused_io_amount;\n+mod unused_self;\n+mod unused_unit;\n+mod unwrap;\n+mod unwrap_in_result;\n+mod upper_case_acronyms;\n+mod use_self;\n+mod useless_conversion;\n+mod vec;\n+mod vec_init_then_push;\n+mod vec_resize_to_zero;\n+mod verbose_file_reads;\n+mod wildcard_dependencies;\n+mod wildcard_imports;\n+mod write;\n+mod zero_div_zero;\n+mod zero_sized_map_values;"}, {"sha": "3e6e0244754fbc36de70b56eaba31e16ea363cc8", "filename": "clippy_lints/src/lib.register_all.rs", "status": "added", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,304 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n+    LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n+    LintId::of(approx_const::APPROX_CONSTANT),\n+    LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n+    LintId::of(assign_ops::ASSIGN_OP_PATTERN),\n+    LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n+    LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n+    LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n+    LintId::of(attrs::DEPRECATED_CFG_ATTR),\n+    LintId::of(attrs::DEPRECATED_SEMVER),\n+    LintId::of(attrs::MISMATCHED_TARGET_OS),\n+    LintId::of(attrs::USELESS_ATTRIBUTE),\n+    LintId::of(bit_mask::BAD_BIT_MASK),\n+    LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n+    LintId::of(blacklisted_name::BLACKLISTED_NAME),\n+    LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n+    LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n+    LintId::of(booleans::LOGIC_BUG),\n+    LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(casts::CAST_REF_TO_MUT),\n+    LintId::of(casts::CHAR_LIT_AS_U8),\n+    LintId::of(casts::FN_TO_NUMERIC_CAST),\n+    LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n+    LintId::of(casts::UNNECESSARY_CAST),\n+    LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n+    LintId::of(collapsible_if::COLLAPSIBLE_IF),\n+    LintId::of(collapsible_match::COLLAPSIBLE_MATCH),\n+    LintId::of(comparison_chain::COMPARISON_CHAIN),\n+    LintId::of(copies::IFS_SAME_COND),\n+    LintId::of(copies::IF_SAME_THEN_ELSE),\n+    LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n+    LintId::of(derivable_impls::DERIVABLE_IMPLS),\n+    LintId::of(derive::DERIVE_HASH_XOR_EQ),\n+    LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n+    LintId::of(doc::MISSING_SAFETY_DOC),\n+    LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n+    LintId::of(double_comparison::DOUBLE_COMPARISONS),\n+    LintId::of(double_parens::DOUBLE_PARENS),\n+    LintId::of(drop_forget_ref::DROP_COPY),\n+    LintId::of(drop_forget_ref::DROP_REF),\n+    LintId::of(drop_forget_ref::FORGET_COPY),\n+    LintId::of(drop_forget_ref::FORGET_REF),\n+    LintId::of(duration_subsec::DURATION_SUBSEC),\n+    LintId::of(entry::MAP_ENTRY),\n+    LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n+    LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n+    LintId::of(enum_variants::MODULE_INCEPTION),\n+    LintId::of(eq_op::EQ_OP),\n+    LintId::of(eq_op::OP_REF),\n+    LintId::of(erasing_op::ERASING_OP),\n+    LintId::of(escape::BOXED_LOCAL),\n+    LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n+    LintId::of(eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n+    LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n+    LintId::of(explicit_write::EXPLICIT_WRITE),\n+    LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n+    LintId::of(float_literal::EXCESSIVE_PRECISION),\n+    LintId::of(format::USELESS_FORMAT),\n+    LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n+    LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n+    LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n+    LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+    LintId::of(from_over_into::FROM_OVER_INTO),\n+    LintId::of(from_str_radix_10::FROM_STR_RADIX_10),\n+    LintId::of(functions::DOUBLE_MUST_USE),\n+    LintId::of(functions::MUST_USE_UNIT),\n+    LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n+    LintId::of(functions::RESULT_UNIT_ERR),\n+    LintId::of(functions::TOO_MANY_ARGUMENTS),\n+    LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n+    LintId::of(identity_op::IDENTITY_OP),\n+    LintId::of(if_let_mutex::IF_LET_MUTEX),\n+    LintId::of(if_then_panic::IF_THEN_PANIC),\n+    LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n+    LintId::of(infinite_iter::INFINITE_ITER),\n+    LintId::of(inherent_to_string::INHERENT_TO_STRING),\n+    LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n+    LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n+    LintId::of(int_plus_one::INT_PLUS_ONE),\n+    LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n+    LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n+    LintId::of(len_zero::COMPARISON_TO_EMPTY),\n+    LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n+    LintId::of(len_zero::LEN_ZERO),\n+    LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n+    LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n+    LintId::of(lifetimes::NEEDLESS_LIFETIMES),\n+    LintId::of(literal_representation::INCONSISTENT_DIGIT_GROUPING),\n+    LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n+    LintId::of(literal_representation::UNUSUAL_BYTE_GROUPINGS),\n+    LintId::of(loops::EMPTY_LOOP),\n+    LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n+    LintId::of(loops::FOR_KV_MAP),\n+    LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n+    LintId::of(loops::ITER_NEXT_LOOP),\n+    LintId::of(loops::MANUAL_FLATTEN),\n+    LintId::of(loops::MANUAL_MEMCPY),\n+    LintId::of(loops::MUT_RANGE_BOUND),\n+    LintId::of(loops::NEEDLESS_COLLECT),\n+    LintId::of(loops::NEEDLESS_RANGE_LOOP),\n+    LintId::of(loops::NEVER_LOOP),\n+    LintId::of(loops::SAME_ITEM_PUSH),\n+    LintId::of(loops::SINGLE_ELEMENT_LOOP),\n+    LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n+    LintId::of(loops::WHILE_LET_LOOP),\n+    LintId::of(loops::WHILE_LET_ON_ITERATOR),\n+    LintId::of(main_recursion::MAIN_RECURSION),\n+    LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n+    LintId::of(manual_map::MANUAL_MAP),\n+    LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n+    LintId::of(manual_strip::MANUAL_STRIP),\n+    LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n+    LintId::of(map_clone::MAP_CLONE),\n+    LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n+    LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n+    LintId::of(match_result_ok::MATCH_RESULT_OK),\n+    LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n+    LintId::of(matches::MATCH_AS_REF),\n+    LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n+    LintId::of(matches::MATCH_OVERLAPPING_ARM),\n+    LintId::of(matches::MATCH_REF_PATS),\n+    LintId::of(matches::MATCH_SINGLE_BINDING),\n+    LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n+    LintId::of(matches::SINGLE_MATCH),\n+    LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n+    LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n+    LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n+    LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n+    LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n+    LintId::of(methods::BIND_INSTEAD_OF_MAP),\n+    LintId::of(methods::BYTES_NTH),\n+    LintId::of(methods::CHARS_LAST_CMP),\n+    LintId::of(methods::CHARS_NEXT_CMP),\n+    LintId::of(methods::CLONE_DOUBLE_REF),\n+    LintId::of(methods::CLONE_ON_COPY),\n+    LintId::of(methods::EXPECT_FUN_CALL),\n+    LintId::of(methods::EXTEND_WITH_DRAIN),\n+    LintId::of(methods::FILTER_MAP_IDENTITY),\n+    LintId::of(methods::FILTER_NEXT),\n+    LintId::of(methods::FLAT_MAP_IDENTITY),\n+    LintId::of(methods::INSPECT_FOR_EACH),\n+    LintId::of(methods::INTO_ITER_ON_REF),\n+    LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n+    LintId::of(methods::ITER_CLONED_COLLECT),\n+    LintId::of(methods::ITER_COUNT),\n+    LintId::of(methods::ITER_NEXT_SLICE),\n+    LintId::of(methods::ITER_NTH),\n+    LintId::of(methods::ITER_NTH_ZERO),\n+    LintId::of(methods::ITER_SKIP_NEXT),\n+    LintId::of(methods::MANUAL_FILTER_MAP),\n+    LintId::of(methods::MANUAL_FIND_MAP),\n+    LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n+    LintId::of(methods::MANUAL_SPLIT_ONCE),\n+    LintId::of(methods::MANUAL_STR_REPEAT),\n+    LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n+    LintId::of(methods::MAP_IDENTITY),\n+    LintId::of(methods::NEW_RET_NO_SELF),\n+    LintId::of(methods::OK_EXPECT),\n+    LintId::of(methods::OPTION_AS_REF_DEREF),\n+    LintId::of(methods::OPTION_FILTER_MAP),\n+    LintId::of(methods::OPTION_MAP_OR_NONE),\n+    LintId::of(methods::OR_FUN_CALL),\n+    LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n+    LintId::of(methods::SEARCH_IS_SOME),\n+    LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),\n+    LintId::of(methods::SINGLE_CHAR_ADD_STR),\n+    LintId::of(methods::SINGLE_CHAR_PATTERN),\n+    LintId::of(methods::SKIP_WHILE_NEXT),\n+    LintId::of(methods::STRING_EXTEND_CHARS),\n+    LintId::of(methods::SUSPICIOUS_MAP),\n+    LintId::of(methods::SUSPICIOUS_SPLITN),\n+    LintId::of(methods::UNINIT_ASSUMED_INIT),\n+    LintId::of(methods::UNNECESSARY_FILTER_MAP),\n+    LintId::of(methods::UNNECESSARY_FOLD),\n+    LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n+    LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n+    LintId::of(methods::USELESS_ASREF),\n+    LintId::of(methods::WRONG_SELF_CONVENTION),\n+    LintId::of(methods::ZST_OFFSET),\n+    LintId::of(minmax::MIN_MAX),\n+    LintId::of(misc::CMP_NAN),\n+    LintId::of(misc::CMP_OWNED),\n+    LintId::of(misc::MODULO_ONE),\n+    LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n+    LintId::of(misc::TOPLEVEL_REF_ARG),\n+    LintId::of(misc::ZERO_PTR),\n+    LintId::of(misc_early::BUILTIN_TYPE_SHADOW),\n+    LintId::of(misc_early::DOUBLE_NEG),\n+    LintId::of(misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n+    LintId::of(misc_early::MIXED_CASE_HEX_LITERALS),\n+    LintId::of(misc_early::REDUNDANT_PATTERN),\n+    LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n+    LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n+    LintId::of(mut_key::MUTABLE_KEY_TYPE),\n+    LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n+    LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n+    LintId::of(mutex_atomic::MUTEX_ATOMIC),\n+    LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n+    LintId::of(needless_bool::BOOL_COMPARISON),\n+    LintId::of(needless_bool::NEEDLESS_BOOL),\n+    LintId::of(needless_borrow::NEEDLESS_BORROW),\n+    LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n+    LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n+    LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n+    LintId::of(needless_update::NEEDLESS_UPDATE),\n+    LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n+    LintId::of(neg_multiply::NEG_MULTIPLY),\n+    LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n+    LintId::of(no_effect::NO_EFFECT),\n+    LintId::of(no_effect::UNNECESSARY_OPERATION),\n+    LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n+    LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n+    LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n+    LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n+    LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n+    LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n+    LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n+    LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n+    LintId::of(precedence::PRECEDENCE),\n+    LintId::of(ptr::CMP_NULL),\n+    LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n+    LintId::of(ptr::MUT_FROM_REF),\n+    LintId::of(ptr::PTR_ARG),\n+    LintId::of(ptr_eq::PTR_EQ),\n+    LintId::of(ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n+    LintId::of(question_mark::QUESTION_MARK),\n+    LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n+    LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n+    LintId::of(ranges::REVERSED_EMPTY_RANGES),\n+    LintId::of(redundant_clone::REDUNDANT_CLONE),\n+    LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n+    LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),\n+    LintId::of(redundant_slicing::REDUNDANT_SLICING),\n+    LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n+    LintId::of(reference::DEREF_ADDROF),\n+    LintId::of(reference::REF_IN_DEREF),\n+    LintId::of(regex::INVALID_REGEX),\n+    LintId::of(repeat_once::REPEAT_ONCE),\n+    LintId::of(returns::LET_AND_RETURN),\n+    LintId::of(returns::NEEDLESS_RETURN),\n+    LintId::of(self_assignment::SELF_ASSIGNMENT),\n+    LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n+    LintId::of(serde_api::SERDE_API_MISUSE),\n+    LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n+    LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n+    LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n+    LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n+    LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n+    LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n+    LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n+    LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n+    LintId::of(swap::ALMOST_SWAPPED),\n+    LintId::of(swap::MANUAL_SWAP),\n+    LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n+    LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n+    LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n+    LintId::of(to_string_in_display::TO_STRING_IN_DISPLAY),\n+    LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n+    LintId::of(transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n+    LintId::of(transmute::TRANSMUTE_BYTES_TO_STR),\n+    LintId::of(transmute::TRANSMUTE_FLOAT_TO_INT),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n+    LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n+    LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n+    LintId::of(transmute::WRONG_TRANSMUTE),\n+    LintId::of(transmuting_null::TRANSMUTING_NULL),\n+    LintId::of(try_err::TRY_ERR),\n+    LintId::of(types::BORROWED_BOX),\n+    LintId::of(types::BOX_COLLECTION),\n+    LintId::of(types::REDUNDANT_ALLOCATION),\n+    LintId::of(types::TYPE_COMPLEXITY),\n+    LintId::of(types::VEC_BOX),\n+    LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n+    LintId::of(unicode::INVISIBLE_CHARACTERS),\n+    LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n+    LintId::of(unit_types::UNIT_ARG),\n+    LintId::of(unit_types::UNIT_CMP),\n+    LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),\n+    LintId::of(unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n+    LintId::of(unnecessary_sort_by::UNNECESSARY_SORT_BY),\n+    LintId::of(unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n+    LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n+    LintId::of(unused_unit::UNUSED_UNIT),\n+    LintId::of(unwrap::PANICKING_UNWRAP),\n+    LintId::of(unwrap::UNNECESSARY_UNWRAP),\n+    LintId::of(upper_case_acronyms::UPPER_CASE_ACRONYMS),\n+    LintId::of(useless_conversion::USELESS_CONVERSION),\n+    LintId::of(vec::USELESS_VEC),\n+    LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n+    LintId::of(vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n+    LintId::of(write::PRINTLN_EMPTY_STRING),\n+    LintId::of(write::PRINT_LITERAL),\n+    LintId::of(write::PRINT_WITH_NEWLINE),\n+    LintId::of(write::WRITELN_EMPTY_STRING),\n+    LintId::of(write::WRITE_LITERAL),\n+    LintId::of(write::WRITE_WITH_NEWLINE),\n+    LintId::of(zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n+])"}, {"sha": "1809f2cc7d46278cac14ff0488d59e415ef4521c", "filename": "clippy_lints/src/lib.register_cargo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_cargo.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,11 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::cargo\", Some(\"clippy_cargo\"), vec![\n+    LintId::of(cargo_common_metadata::CARGO_COMMON_METADATA),\n+    LintId::of(feature_name::NEGATIVE_FEATURE_NAMES),\n+    LintId::of(feature_name::REDUNDANT_FEATURE_NAMES),\n+    LintId::of(multiple_crate_versions::MULTIPLE_CRATE_VERSIONS),\n+    LintId::of(wildcard_dependencies::WILDCARD_DEPENDENCIES),\n+])"}, {"sha": "64b82fc0faac8593504e6de0b0653504c5eb442d", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,94 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n+    LintId::of(attrs::DEPRECATED_CFG_ATTR),\n+    LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(casts::CHAR_LIT_AS_U8),\n+    LintId::of(casts::UNNECESSARY_CAST),\n+    LintId::of(derivable_impls::DERIVABLE_IMPLS),\n+    LintId::of(double_comparison::DOUBLE_COMPARISONS),\n+    LintId::of(double_parens::DOUBLE_PARENS),\n+    LintId::of(duration_subsec::DURATION_SUBSEC),\n+    LintId::of(eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n+    LintId::of(explicit_write::EXPLICIT_WRITE),\n+    LintId::of(format::USELESS_FORMAT),\n+    LintId::of(functions::TOO_MANY_ARGUMENTS),\n+    LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n+    LintId::of(identity_op::IDENTITY_OP),\n+    LintId::of(int_plus_one::INT_PLUS_ONE),\n+    LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n+    LintId::of(lifetimes::NEEDLESS_LIFETIMES),\n+    LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n+    LintId::of(loops::MANUAL_FLATTEN),\n+    LintId::of(loops::SINGLE_ELEMENT_LOOP),\n+    LintId::of(loops::WHILE_LET_LOOP),\n+    LintId::of(manual_strip::MANUAL_STRIP),\n+    LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n+    LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n+    LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n+    LintId::of(matches::MATCH_AS_REF),\n+    LintId::of(matches::MATCH_SINGLE_BINDING),\n+    LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n+    LintId::of(methods::BIND_INSTEAD_OF_MAP),\n+    LintId::of(methods::CLONE_ON_COPY),\n+    LintId::of(methods::FILTER_MAP_IDENTITY),\n+    LintId::of(methods::FILTER_NEXT),\n+    LintId::of(methods::FLAT_MAP_IDENTITY),\n+    LintId::of(methods::INSPECT_FOR_EACH),\n+    LintId::of(methods::ITER_COUNT),\n+    LintId::of(methods::MANUAL_FILTER_MAP),\n+    LintId::of(methods::MANUAL_FIND_MAP),\n+    LintId::of(methods::MANUAL_SPLIT_ONCE),\n+    LintId::of(methods::MAP_IDENTITY),\n+    LintId::of(methods::OPTION_AS_REF_DEREF),\n+    LintId::of(methods::OPTION_FILTER_MAP),\n+    LintId::of(methods::SEARCH_IS_SOME),\n+    LintId::of(methods::SKIP_WHILE_NEXT),\n+    LintId::of(methods::UNNECESSARY_FILTER_MAP),\n+    LintId::of(methods::USELESS_ASREF),\n+    LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n+    LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n+    LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n+    LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n+    LintId::of(needless_bool::BOOL_COMPARISON),\n+    LintId::of(needless_bool::NEEDLESS_BOOL),\n+    LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n+    LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n+    LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n+    LintId::of(needless_update::NEEDLESS_UPDATE),\n+    LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n+    LintId::of(no_effect::NO_EFFECT),\n+    LintId::of(no_effect::UNNECESSARY_OPERATION),\n+    LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n+    LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n+    LintId::of(precedence::PRECEDENCE),\n+    LintId::of(ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n+    LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n+    LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n+    LintId::of(redundant_slicing::REDUNDANT_SLICING),\n+    LintId::of(reference::DEREF_ADDROF),\n+    LintId::of(reference::REF_IN_DEREF),\n+    LintId::of(repeat_once::REPEAT_ONCE),\n+    LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n+    LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n+    LintId::of(swap::MANUAL_SWAP),\n+    LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n+    LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n+    LintId::of(transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n+    LintId::of(transmute::TRANSMUTE_BYTES_TO_STR),\n+    LintId::of(transmute::TRANSMUTE_FLOAT_TO_INT),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n+    LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n+    LintId::of(types::BORROWED_BOX),\n+    LintId::of(types::TYPE_COMPLEXITY),\n+    LintId::of(types::VEC_BOX),\n+    LintId::of(unit_types::UNIT_ARG),\n+    LintId::of(unnecessary_sort_by::UNNECESSARY_SORT_BY),\n+    LintId::of(unwrap::UNNECESSARY_UNWRAP),\n+    LintId::of(useless_conversion::USELESS_CONVERSION),\n+    LintId::of(zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n+])"}, {"sha": "e0ef7b3b8af9f06f71953b8f6018a57750f54a49", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,73 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n+    LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n+    LintId::of(approx_const::APPROX_CONSTANT),\n+    LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n+    LintId::of(attrs::DEPRECATED_SEMVER),\n+    LintId::of(attrs::MISMATCHED_TARGET_OS),\n+    LintId::of(attrs::USELESS_ATTRIBUTE),\n+    LintId::of(bit_mask::BAD_BIT_MASK),\n+    LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n+    LintId::of(booleans::LOGIC_BUG),\n+    LintId::of(casts::CAST_REF_TO_MUT),\n+    LintId::of(copies::IFS_SAME_COND),\n+    LintId::of(copies::IF_SAME_THEN_ELSE),\n+    LintId::of(derive::DERIVE_HASH_XOR_EQ),\n+    LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n+    LintId::of(drop_forget_ref::DROP_COPY),\n+    LintId::of(drop_forget_ref::DROP_REF),\n+    LintId::of(drop_forget_ref::FORGET_COPY),\n+    LintId::of(drop_forget_ref::FORGET_REF),\n+    LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n+    LintId::of(eq_op::EQ_OP),\n+    LintId::of(erasing_op::ERASING_OP),\n+    LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n+    LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n+    LintId::of(if_let_mutex::IF_LET_MUTEX),\n+    LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n+    LintId::of(infinite_iter::INFINITE_ITER),\n+    LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n+    LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n+    LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n+    LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n+    LintId::of(loops::ITER_NEXT_LOOP),\n+    LintId::of(loops::NEVER_LOOP),\n+    LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n+    LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n+    LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n+    LintId::of(methods::CLONE_DOUBLE_REF),\n+    LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n+    LintId::of(methods::SUSPICIOUS_SPLITN),\n+    LintId::of(methods::UNINIT_ASSUMED_INIT),\n+    LintId::of(methods::ZST_OFFSET),\n+    LintId::of(minmax::MIN_MAX),\n+    LintId::of(misc::CMP_NAN),\n+    LintId::of(misc::MODULO_ONE),\n+    LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n+    LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n+    LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n+    LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n+    LintId::of(ptr::MUT_FROM_REF),\n+    LintId::of(ranges::REVERSED_EMPTY_RANGES),\n+    LintId::of(regex::INVALID_REGEX),\n+    LintId::of(self_assignment::SELF_ASSIGNMENT),\n+    LintId::of(serde_api::SERDE_API_MISUSE),\n+    LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n+    LintId::of(swap::ALMOST_SWAPPED),\n+    LintId::of(to_string_in_display::TO_STRING_IN_DISPLAY),\n+    LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n+    LintId::of(transmute::WRONG_TRANSMUTE),\n+    LintId::of(transmuting_null::TRANSMUTING_NULL),\n+    LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n+    LintId::of(unicode::INVISIBLE_CHARACTERS),\n+    LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n+    LintId::of(unit_types::UNIT_CMP),\n+    LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),\n+    LintId::of(unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n+    LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n+    LintId::of(unwrap::PANICKING_UNWRAP),\n+    LintId::of(vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n+])"}, {"sha": "c8c1e0262abaea8d62c774e6cad0b8764ab1c5b5", "filename": "clippy_lints/src/lib.register_internal.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_internal.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,18 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n+    LintId::of(utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n+    LintId::of(utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n+    LintId::of(utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n+    LintId::of(utils::internal_lints::DEFAULT_LINT),\n+    LintId::of(utils::internal_lints::IF_CHAIN_STYLE),\n+    LintId::of(utils::internal_lints::INTERNING_DEFINED_SYMBOL),\n+    LintId::of(utils::internal_lints::INVALID_PATHS),\n+    LintId::of(utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n+    LintId::of(utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),\n+    LintId::of(utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n+    LintId::of(utils::internal_lints::PRODUCE_ICE),\n+    LintId::of(utils::internal_lints::UNNECESSARY_SYMBOL_STR),\n+])"}, {"sha": "1ad27870b1a03fdd17fac011f5ee36092e22a7c7", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "added", "additions": 508, "deletions": 0, "changes": 508, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,508 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_lints(&[\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::DEFAULT_LINT,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::IF_CHAIN_STYLE,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::INTERNING_DEFINED_SYMBOL,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::INVALID_PATHS,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::PRODUCE_ICE,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::UNNECESSARY_SYMBOL_STR,\n+    absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS,\n+    approx_const::APPROX_CONSTANT,\n+    arithmetic::FLOAT_ARITHMETIC,\n+    arithmetic::INTEGER_ARITHMETIC,\n+    as_conversions::AS_CONVERSIONS,\n+    asm_syntax::INLINE_ASM_X86_ATT_SYNTAX,\n+    asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX,\n+    assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n+    assign_ops::ASSIGN_OP_PATTERN,\n+    assign_ops::MISREFACTORED_ASSIGN_OP,\n+    async_yields_async::ASYNC_YIELDS_ASYNC,\n+    attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n+    attrs::DEPRECATED_CFG_ATTR,\n+    attrs::DEPRECATED_SEMVER,\n+    attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n+    attrs::INLINE_ALWAYS,\n+    attrs::MISMATCHED_TARGET_OS,\n+    attrs::USELESS_ATTRIBUTE,\n+    await_holding_invalid::AWAIT_HOLDING_LOCK,\n+    await_holding_invalid::AWAIT_HOLDING_REFCELL_REF,\n+    bit_mask::BAD_BIT_MASK,\n+    bit_mask::INEFFECTIVE_BIT_MASK,\n+    bit_mask::VERBOSE_BIT_MASK,\n+    blacklisted_name::BLACKLISTED_NAME,\n+    blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS,\n+    bool_assert_comparison::BOOL_ASSERT_COMPARISON,\n+    booleans::LOGIC_BUG,\n+    booleans::NONMINIMAL_BOOL,\n+    bytecount::NAIVE_BYTECOUNT,\n+    cargo_common_metadata::CARGO_COMMON_METADATA,\n+    case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+    casts::CAST_LOSSLESS,\n+    casts::CAST_POSSIBLE_TRUNCATION,\n+    casts::CAST_POSSIBLE_WRAP,\n+    casts::CAST_PRECISION_LOSS,\n+    casts::CAST_PTR_ALIGNMENT,\n+    casts::CAST_REF_TO_MUT,\n+    casts::CAST_SIGN_LOSS,\n+    casts::CHAR_LIT_AS_U8,\n+    casts::FN_TO_NUMERIC_CAST,\n+    casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+    casts::PTR_AS_PTR,\n+    casts::UNNECESSARY_CAST,\n+    checked_conversions::CHECKED_CONVERSIONS,\n+    cognitive_complexity::COGNITIVE_COMPLEXITY,\n+    collapsible_if::COLLAPSIBLE_ELSE_IF,\n+    collapsible_if::COLLAPSIBLE_IF,\n+    collapsible_match::COLLAPSIBLE_MATCH,\n+    comparison_chain::COMPARISON_CHAIN,\n+    copies::BRANCHES_SHARING_CODE,\n+    copies::IFS_SAME_COND,\n+    copies::IF_SAME_THEN_ELSE,\n+    copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n+    copy_iterator::COPY_ITERATOR,\n+    create_dir::CREATE_DIR,\n+    dbg_macro::DBG_MACRO,\n+    default::DEFAULT_TRAIT_ACCESS,\n+    default::FIELD_REASSIGN_WITH_DEFAULT,\n+    default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK,\n+    dereference::EXPLICIT_DEREF_METHODS,\n+    derivable_impls::DERIVABLE_IMPLS,\n+    derive::DERIVE_HASH_XOR_EQ,\n+    derive::DERIVE_ORD_XOR_PARTIAL_ORD,\n+    derive::EXPL_IMPL_CLONE_ON_COPY,\n+    derive::UNSAFE_DERIVE_DESERIALIZE,\n+    disallowed_method::DISALLOWED_METHOD,\n+    disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS,\n+    disallowed_type::DISALLOWED_TYPE,\n+    doc::DOC_MARKDOWN,\n+    doc::MISSING_ERRORS_DOC,\n+    doc::MISSING_PANICS_DOC,\n+    doc::MISSING_SAFETY_DOC,\n+    doc::NEEDLESS_DOCTEST_MAIN,\n+    double_comparison::DOUBLE_COMPARISONS,\n+    double_parens::DOUBLE_PARENS,\n+    drop_forget_ref::DROP_COPY,\n+    drop_forget_ref::DROP_REF,\n+    drop_forget_ref::FORGET_COPY,\n+    drop_forget_ref::FORGET_REF,\n+    duration_subsec::DURATION_SUBSEC,\n+    else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n+    empty_enum::EMPTY_ENUM,\n+    entry::MAP_ENTRY,\n+    enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n+    enum_variants::ENUM_VARIANT_NAMES,\n+    enum_variants::MODULE_INCEPTION,\n+    enum_variants::MODULE_NAME_REPETITIONS,\n+    eq_op::EQ_OP,\n+    eq_op::OP_REF,\n+    erasing_op::ERASING_OP,\n+    escape::BOXED_LOCAL,\n+    eta_reduction::REDUNDANT_CLOSURE,\n+    eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n+    eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n+    eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n+    excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n+    excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n+    exhaustive_items::EXHAUSTIVE_ENUMS,\n+    exhaustive_items::EXHAUSTIVE_STRUCTS,\n+    exit::EXIT,\n+    explicit_write::EXPLICIT_WRITE,\n+    fallible_impl_from::FALLIBLE_IMPL_FROM,\n+    feature_name::NEGATIVE_FEATURE_NAMES,\n+    feature_name::REDUNDANT_FEATURE_NAMES,\n+    float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS,\n+    float_literal::EXCESSIVE_PRECISION,\n+    float_literal::LOSSY_FLOAT_LITERAL,\n+    floating_point_arithmetic::IMPRECISE_FLOPS,\n+    floating_point_arithmetic::SUBOPTIMAL_FLOPS,\n+    format::USELESS_FORMAT,\n+    formatting::POSSIBLE_MISSING_COMMA,\n+    formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n+    formatting::SUSPICIOUS_ELSE_FORMATTING,\n+    formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n+    from_over_into::FROM_OVER_INTO,\n+    from_str_radix_10::FROM_STR_RADIX_10,\n+    functions::DOUBLE_MUST_USE,\n+    functions::MUST_USE_CANDIDATE,\n+    functions::MUST_USE_UNIT,\n+    functions::NOT_UNSAFE_PTR_ARG_DEREF,\n+    functions::RESULT_UNIT_ERR,\n+    functions::TOO_MANY_ARGUMENTS,\n+    functions::TOO_MANY_LINES,\n+    future_not_send::FUTURE_NOT_SEND,\n+    get_last_with_len::GET_LAST_WITH_LEN,\n+    identity_op::IDENTITY_OP,\n+    if_let_mutex::IF_LET_MUTEX,\n+    if_not_else::IF_NOT_ELSE,\n+    if_then_panic::IF_THEN_PANIC,\n+    if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n+    implicit_hasher::IMPLICIT_HASHER,\n+    implicit_return::IMPLICIT_RETURN,\n+    implicit_saturating_sub::IMPLICIT_SATURATING_SUB,\n+    inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR,\n+    indexing_slicing::INDEXING_SLICING,\n+    indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n+    infinite_iter::INFINITE_ITER,\n+    infinite_iter::MAYBE_INFINITE_ITER,\n+    inherent_impl::MULTIPLE_INHERENT_IMPL,\n+    inherent_to_string::INHERENT_TO_STRING,\n+    inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n+    inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n+    int_plus_one::INT_PLUS_ONE,\n+    integer_division::INTEGER_DIVISION,\n+    invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS,\n+    items_after_statements::ITEMS_AFTER_STATEMENTS,\n+    iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n+    large_const_arrays::LARGE_CONST_ARRAYS,\n+    large_enum_variant::LARGE_ENUM_VARIANT,\n+    large_stack_arrays::LARGE_STACK_ARRAYS,\n+    len_zero::COMPARISON_TO_EMPTY,\n+    len_zero::LEN_WITHOUT_IS_EMPTY,\n+    len_zero::LEN_ZERO,\n+    let_if_seq::USELESS_LET_IF_SEQ,\n+    let_underscore::LET_UNDERSCORE_DROP,\n+    let_underscore::LET_UNDERSCORE_LOCK,\n+    let_underscore::LET_UNDERSCORE_MUST_USE,\n+    lifetimes::EXTRA_UNUSED_LIFETIMES,\n+    lifetimes::NEEDLESS_LIFETIMES,\n+    literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n+    literal_representation::INCONSISTENT_DIGIT_GROUPING,\n+    literal_representation::LARGE_DIGIT_GROUPS,\n+    literal_representation::MISTYPED_LITERAL_SUFFIXES,\n+    literal_representation::UNREADABLE_LITERAL,\n+    literal_representation::UNUSUAL_BYTE_GROUPINGS,\n+    loops::EMPTY_LOOP,\n+    loops::EXPLICIT_COUNTER_LOOP,\n+    loops::EXPLICIT_INTO_ITER_LOOP,\n+    loops::EXPLICIT_ITER_LOOP,\n+    loops::FOR_KV_MAP,\n+    loops::FOR_LOOPS_OVER_FALLIBLES,\n+    loops::ITER_NEXT_LOOP,\n+    loops::MANUAL_FLATTEN,\n+    loops::MANUAL_MEMCPY,\n+    loops::MUT_RANGE_BOUND,\n+    loops::NEEDLESS_COLLECT,\n+    loops::NEEDLESS_RANGE_LOOP,\n+    loops::NEVER_LOOP,\n+    loops::SAME_ITEM_PUSH,\n+    loops::SINGLE_ELEMENT_LOOP,\n+    loops::WHILE_IMMUTABLE_CONDITION,\n+    loops::WHILE_LET_LOOP,\n+    loops::WHILE_LET_ON_ITERATOR,\n+    macro_use::MACRO_USE_IMPORTS,\n+    main_recursion::MAIN_RECURSION,\n+    manual_async_fn::MANUAL_ASYNC_FN,\n+    manual_map::MANUAL_MAP,\n+    manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n+    manual_ok_or::MANUAL_OK_OR,\n+    manual_strip::MANUAL_STRIP,\n+    manual_unwrap_or::MANUAL_UNWRAP_OR,\n+    map_clone::MAP_CLONE,\n+    map_err_ignore::MAP_ERR_IGNORE,\n+    map_unit_fn::OPTION_MAP_UNIT_FN,\n+    map_unit_fn::RESULT_MAP_UNIT_FN,\n+    match_on_vec_items::MATCH_ON_VEC_ITEMS,\n+    match_result_ok::MATCH_RESULT_OK,\n+    matches::INFALLIBLE_DESTRUCTURING_MATCH,\n+    matches::MATCH_AS_REF,\n+    matches::MATCH_BOOL,\n+    matches::MATCH_LIKE_MATCHES_MACRO,\n+    matches::MATCH_OVERLAPPING_ARM,\n+    matches::MATCH_REF_PATS,\n+    matches::MATCH_SAME_ARMS,\n+    matches::MATCH_SINGLE_BINDING,\n+    matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n+    matches::MATCH_WILD_ERR_ARM,\n+    matches::REDUNDANT_PATTERN_MATCHING,\n+    matches::REST_PAT_IN_FULLY_BOUND_STRUCTS,\n+    matches::SINGLE_MATCH,\n+    matches::SINGLE_MATCH_ELSE,\n+    matches::WILDCARD_ENUM_MATCH_ARM,\n+    matches::WILDCARD_IN_OR_PATTERNS,\n+    mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n+    mem_forget::MEM_FORGET,\n+    mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n+    mem_replace::MEM_REPLACE_WITH_DEFAULT,\n+    mem_replace::MEM_REPLACE_WITH_UNINIT,\n+    methods::BIND_INSTEAD_OF_MAP,\n+    methods::BYTES_NTH,\n+    methods::CHARS_LAST_CMP,\n+    methods::CHARS_NEXT_CMP,\n+    methods::CLONED_INSTEAD_OF_COPIED,\n+    methods::CLONE_DOUBLE_REF,\n+    methods::CLONE_ON_COPY,\n+    methods::CLONE_ON_REF_PTR,\n+    methods::EXPECT_FUN_CALL,\n+    methods::EXPECT_USED,\n+    methods::EXTEND_WITH_DRAIN,\n+    methods::FILETYPE_IS_FILE,\n+    methods::FILTER_MAP_IDENTITY,\n+    methods::FILTER_MAP_NEXT,\n+    methods::FILTER_NEXT,\n+    methods::FLAT_MAP_IDENTITY,\n+    methods::FLAT_MAP_OPTION,\n+    methods::FROM_ITER_INSTEAD_OF_COLLECT,\n+    methods::GET_UNWRAP,\n+    methods::IMPLICIT_CLONE,\n+    methods::INEFFICIENT_TO_STRING,\n+    methods::INSPECT_FOR_EACH,\n+    methods::INTO_ITER_ON_REF,\n+    methods::ITERATOR_STEP_BY_ZERO,\n+    methods::ITER_CLONED_COLLECT,\n+    methods::ITER_COUNT,\n+    methods::ITER_NEXT_SLICE,\n+    methods::ITER_NTH,\n+    methods::ITER_NTH_ZERO,\n+    methods::ITER_SKIP_NEXT,\n+    methods::MANUAL_FILTER_MAP,\n+    methods::MANUAL_FIND_MAP,\n+    methods::MANUAL_SATURATING_ARITHMETIC,\n+    methods::MANUAL_SPLIT_ONCE,\n+    methods::MANUAL_STR_REPEAT,\n+    methods::MAP_COLLECT_RESULT_UNIT,\n+    methods::MAP_FLATTEN,\n+    methods::MAP_IDENTITY,\n+    methods::MAP_UNWRAP_OR,\n+    methods::NEW_RET_NO_SELF,\n+    methods::OK_EXPECT,\n+    methods::OPTION_AS_REF_DEREF,\n+    methods::OPTION_FILTER_MAP,\n+    methods::OPTION_MAP_OR_NONE,\n+    methods::OR_FUN_CALL,\n+    methods::RESULT_MAP_OR_INTO_OPTION,\n+    methods::SEARCH_IS_SOME,\n+    methods::SHOULD_IMPLEMENT_TRAIT,\n+    methods::SINGLE_CHAR_ADD_STR,\n+    methods::SINGLE_CHAR_PATTERN,\n+    methods::SKIP_WHILE_NEXT,\n+    methods::STRING_EXTEND_CHARS,\n+    methods::SUSPICIOUS_MAP,\n+    methods::SUSPICIOUS_SPLITN,\n+    methods::UNINIT_ASSUMED_INIT,\n+    methods::UNNECESSARY_FILTER_MAP,\n+    methods::UNNECESSARY_FOLD,\n+    methods::UNNECESSARY_LAZY_EVALUATIONS,\n+    methods::UNWRAP_OR_ELSE_DEFAULT,\n+    methods::UNWRAP_USED,\n+    methods::USELESS_ASREF,\n+    methods::WRONG_SELF_CONVENTION,\n+    methods::ZST_OFFSET,\n+    minmax::MIN_MAX,\n+    misc::CMP_NAN,\n+    misc::CMP_OWNED,\n+    misc::FLOAT_CMP,\n+    misc::FLOAT_CMP_CONST,\n+    misc::MODULO_ONE,\n+    misc::SHORT_CIRCUIT_STATEMENT,\n+    misc::TOPLEVEL_REF_ARG,\n+    misc::USED_UNDERSCORE_BINDING,\n+    misc::ZERO_PTR,\n+    misc_early::BUILTIN_TYPE_SHADOW,\n+    misc_early::DOUBLE_NEG,\n+    misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n+    misc_early::MIXED_CASE_HEX_LITERALS,\n+    misc_early::REDUNDANT_PATTERN,\n+    misc_early::UNNEEDED_FIELD_PATTERN,\n+    misc_early::UNNEEDED_WILDCARD_PATTERN,\n+    misc_early::UNSEPARATED_LITERAL_SUFFIX,\n+    misc_early::ZERO_PREFIXED_LITERAL,\n+    missing_const_for_fn::MISSING_CONST_FOR_FN,\n+    missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n+    missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES,\n+    missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n+    module_style::MOD_MODULE_FILES,\n+    module_style::SELF_NAMED_MODULE_FILES,\n+    modulo_arithmetic::MODULO_ARITHMETIC,\n+    multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n+    mut_key::MUTABLE_KEY_TYPE,\n+    mut_mut::MUT_MUT,\n+    mut_mutex_lock::MUT_MUTEX_LOCK,\n+    mut_reference::UNNECESSARY_MUT_PASSED,\n+    mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n+    mutex_atomic::MUTEX_ATOMIC,\n+    mutex_atomic::MUTEX_INTEGER,\n+    needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE,\n+    needless_bitwise_bool::NEEDLESS_BITWISE_BOOL,\n+    needless_bool::BOOL_COMPARISON,\n+    needless_bool::NEEDLESS_BOOL,\n+    needless_borrow::NEEDLESS_BORROW,\n+    needless_borrow::REF_BINDING_TO_REFERENCE,\n+    needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n+    needless_continue::NEEDLESS_CONTINUE,\n+    needless_for_each::NEEDLESS_FOR_EACH,\n+    needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF,\n+    needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n+    needless_question_mark::NEEDLESS_QUESTION_MARK,\n+    needless_update::NEEDLESS_UPDATE,\n+    neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n+    neg_multiply::NEG_MULTIPLY,\n+    new_without_default::NEW_WITHOUT_DEFAULT,\n+    no_effect::NO_EFFECT,\n+    no_effect::UNNECESSARY_OPERATION,\n+    non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n+    non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST,\n+    non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n+    non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n+    non_expressive_names::SIMILAR_NAMES,\n+    non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS,\n+    nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES,\n+    open_options::NONSENSICAL_OPEN_OPTIONS,\n+    option_env_unwrap::OPTION_ENV_UNWRAP,\n+    option_if_let_else::OPTION_IF_LET_ELSE,\n+    overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n+    panic_in_result_fn::PANIC_IN_RESULT_FN,\n+    panic_unimplemented::PANIC,\n+    panic_unimplemented::TODO,\n+    panic_unimplemented::UNIMPLEMENTED,\n+    panic_unimplemented::UNREACHABLE,\n+    partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n+    pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE,\n+    pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF,\n+    path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE,\n+    pattern_type_mismatch::PATTERN_TYPE_MISMATCH,\n+    precedence::PRECEDENCE,\n+    ptr::CMP_NULL,\n+    ptr::INVALID_NULL_PTR_USAGE,\n+    ptr::MUT_FROM_REF,\n+    ptr::PTR_ARG,\n+    ptr_eq::PTR_EQ,\n+    ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n+    question_mark::QUESTION_MARK,\n+    ranges::MANUAL_RANGE_CONTAINS,\n+    ranges::RANGE_MINUS_ONE,\n+    ranges::RANGE_PLUS_ONE,\n+    ranges::RANGE_ZIP_WITH_LEN,\n+    ranges::REVERSED_EMPTY_RANGES,\n+    redundant_clone::REDUNDANT_CLONE,\n+    redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n+    redundant_else::REDUNDANT_ELSE,\n+    redundant_field_names::REDUNDANT_FIELD_NAMES,\n+    redundant_pub_crate::REDUNDANT_PUB_CRATE,\n+    redundant_slicing::REDUNDANT_SLICING,\n+    redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n+    ref_option_ref::REF_OPTION_REF,\n+    reference::DEREF_ADDROF,\n+    reference::REF_IN_DEREF,\n+    regex::INVALID_REGEX,\n+    regex::TRIVIAL_REGEX,\n+    repeat_once::REPEAT_ONCE,\n+    returns::LET_AND_RETURN,\n+    returns::NEEDLESS_RETURN,\n+    same_name_method::SAME_NAME_METHOD,\n+    self_assignment::SELF_ASSIGNMENT,\n+    self_named_constructors::SELF_NAMED_CONSTRUCTORS,\n+    semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED,\n+    serde_api::SERDE_API_MISUSE,\n+    shadow::SHADOW_REUSE,\n+    shadow::SHADOW_SAME,\n+    shadow::SHADOW_UNRELATED,\n+    single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n+    size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n+    slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n+    stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n+    strings::STRING_ADD,\n+    strings::STRING_ADD_ASSIGN,\n+    strings::STRING_FROM_UTF8_AS_BYTES,\n+    strings::STRING_LIT_AS_BYTES,\n+    strings::STRING_TO_STRING,\n+    strings::STR_TO_STRING,\n+    strlen_on_c_strings::STRLEN_ON_C_STRINGS,\n+    suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS,\n+    suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n+    suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n+    swap::ALMOST_SWAPPED,\n+    swap::MANUAL_SWAP,\n+    tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n+    temporary_assignment::TEMPORARY_ASSIGNMENT,\n+    to_digit_is_some::TO_DIGIT_IS_SOME,\n+    to_string_in_display::TO_STRING_IN_DISPLAY,\n+    trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS,\n+    trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n+    transmute::CROSSPOINTER_TRANSMUTE,\n+    transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n+    transmute::TRANSMUTE_BYTES_TO_STR,\n+    transmute::TRANSMUTE_FLOAT_TO_INT,\n+    transmute::TRANSMUTE_INT_TO_BOOL,\n+    transmute::TRANSMUTE_INT_TO_CHAR,\n+    transmute::TRANSMUTE_INT_TO_FLOAT,\n+    transmute::TRANSMUTE_PTR_TO_PTR,\n+    transmute::TRANSMUTE_PTR_TO_REF,\n+    transmute::UNSOUND_COLLECTION_TRANSMUTE,\n+    transmute::USELESS_TRANSMUTE,\n+    transmute::WRONG_TRANSMUTE,\n+    transmuting_null::TRANSMUTING_NULL,\n+    try_err::TRY_ERR,\n+    types::BORROWED_BOX,\n+    types::BOX_COLLECTION,\n+    types::LINKEDLIST,\n+    types::OPTION_OPTION,\n+    types::RC_BUFFER,\n+    types::RC_MUTEX,\n+    types::REDUNDANT_ALLOCATION,\n+    types::TYPE_COMPLEXITY,\n+    types::VEC_BOX,\n+    undropped_manually_drops::UNDROPPED_MANUALLY_DROPS,\n+    unicode::INVISIBLE_CHARACTERS,\n+    unicode::NON_ASCII_LITERAL,\n+    unicode::UNICODE_NOT_NFC,\n+    unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n+    unit_types::LET_UNIT_VALUE,\n+    unit_types::UNIT_ARG,\n+    unit_types::UNIT_CMP,\n+    unnamed_address::FN_ADDRESS_COMPARISONS,\n+    unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n+    unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS,\n+    unnecessary_sort_by::UNNECESSARY_SORT_BY,\n+    unnecessary_wraps::UNNECESSARY_WRAPS,\n+    unnested_or_patterns::UNNESTED_OR_PATTERNS,\n+    unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n+    unused_async::UNUSED_ASYNC,\n+    unused_io_amount::UNUSED_IO_AMOUNT,\n+    unused_self::UNUSED_SELF,\n+    unused_unit::UNUSED_UNIT,\n+    unwrap::PANICKING_UNWRAP,\n+    unwrap::UNNECESSARY_UNWRAP,\n+    unwrap_in_result::UNWRAP_IN_RESULT,\n+    upper_case_acronyms::UPPER_CASE_ACRONYMS,\n+    use_self::USE_SELF,\n+    useless_conversion::USELESS_CONVERSION,\n+    vec::USELESS_VEC,\n+    vec_init_then_push::VEC_INIT_THEN_PUSH,\n+    vec_resize_to_zero::VEC_RESIZE_TO_ZERO,\n+    verbose_file_reads::VERBOSE_FILE_READS,\n+    wildcard_dependencies::WILDCARD_DEPENDENCIES,\n+    wildcard_imports::ENUM_GLOB_USE,\n+    wildcard_imports::WILDCARD_IMPORTS,\n+    write::PRINTLN_EMPTY_STRING,\n+    write::PRINT_LITERAL,\n+    write::PRINT_STDERR,\n+    write::PRINT_STDOUT,\n+    write::PRINT_WITH_NEWLINE,\n+    write::USE_DEBUG,\n+    write::WRITELN_EMPTY_STRING,\n+    write::WRITE_LITERAL,\n+    write::WRITE_WITH_NEWLINE,\n+    zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n+    zero_sized_map_values::ZERO_SIZED_MAP_VALUES,\n+])"}, {"sha": "b082f577a52fc7036a0ba4abbb7f19c1ccc9e7fa", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,28 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n+    LintId::of(attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n+    LintId::of(cognitive_complexity::COGNITIVE_COMPLEXITY),\n+    LintId::of(copies::BRANCHES_SHARING_CODE),\n+    LintId::of(disallowed_method::DISALLOWED_METHOD),\n+    LintId::of(disallowed_type::DISALLOWED_TYPE),\n+    LintId::of(fallible_impl_from::FALLIBLE_IMPL_FROM),\n+    LintId::of(floating_point_arithmetic::IMPRECISE_FLOPS),\n+    LintId::of(floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n+    LintId::of(future_not_send::FUTURE_NOT_SEND),\n+    LintId::of(let_if_seq::USELESS_LET_IF_SEQ),\n+    LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n+    LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n+    LintId::of(mutex_atomic::MUTEX_INTEGER),\n+    LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n+    LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n+    LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n+    LintId::of(redundant_pub_crate::REDUNDANT_PUB_CRATE),\n+    LintId::of(regex::TRIVIAL_REGEX),\n+    LintId::of(strings::STRING_LIT_AS_BYTES),\n+    LintId::of(suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n+    LintId::of(transmute::USELESS_TRANSMUTE),\n+    LintId::of(use_self::USE_SELF),\n+])"}, {"sha": "334e058c4ae5ad6a39566ca49f8c2202c68e596c", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,101 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n+    LintId::of(attrs::INLINE_ALWAYS),\n+    LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n+    LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n+    LintId::of(bit_mask::VERBOSE_BIT_MASK),\n+    LintId::of(bytecount::NAIVE_BYTECOUNT),\n+    LintId::of(case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n+    LintId::of(casts::CAST_LOSSLESS),\n+    LintId::of(casts::CAST_POSSIBLE_TRUNCATION),\n+    LintId::of(casts::CAST_POSSIBLE_WRAP),\n+    LintId::of(casts::CAST_PRECISION_LOSS),\n+    LintId::of(casts::CAST_PTR_ALIGNMENT),\n+    LintId::of(casts::CAST_SIGN_LOSS),\n+    LintId::of(casts::PTR_AS_PTR),\n+    LintId::of(checked_conversions::CHECKED_CONVERSIONS),\n+    LintId::of(copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n+    LintId::of(copy_iterator::COPY_ITERATOR),\n+    LintId::of(default::DEFAULT_TRAIT_ACCESS),\n+    LintId::of(dereference::EXPLICIT_DEREF_METHODS),\n+    LintId::of(derive::EXPL_IMPL_CLONE_ON_COPY),\n+    LintId::of(derive::UNSAFE_DERIVE_DESERIALIZE),\n+    LintId::of(doc::DOC_MARKDOWN),\n+    LintId::of(doc::MISSING_ERRORS_DOC),\n+    LintId::of(doc::MISSING_PANICS_DOC),\n+    LintId::of(empty_enum::EMPTY_ENUM),\n+    LintId::of(enum_variants::MODULE_NAME_REPETITIONS),\n+    LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n+    LintId::of(excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n+    LintId::of(excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n+    LintId::of(functions::MUST_USE_CANDIDATE),\n+    LintId::of(functions::TOO_MANY_LINES),\n+    LintId::of(if_not_else::IF_NOT_ELSE),\n+    LintId::of(implicit_hasher::IMPLICIT_HASHER),\n+    LintId::of(implicit_saturating_sub::IMPLICIT_SATURATING_SUB),\n+    LintId::of(inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR),\n+    LintId::of(infinite_iter::MAYBE_INFINITE_ITER),\n+    LintId::of(invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS),\n+    LintId::of(items_after_statements::ITEMS_AFTER_STATEMENTS),\n+    LintId::of(iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR),\n+    LintId::of(large_stack_arrays::LARGE_STACK_ARRAYS),\n+    LintId::of(let_underscore::LET_UNDERSCORE_DROP),\n+    LintId::of(literal_representation::LARGE_DIGIT_GROUPS),\n+    LintId::of(literal_representation::UNREADABLE_LITERAL),\n+    LintId::of(loops::EXPLICIT_INTO_ITER_LOOP),\n+    LintId::of(loops::EXPLICIT_ITER_LOOP),\n+    LintId::of(macro_use::MACRO_USE_IMPORTS),\n+    LintId::of(manual_ok_or::MANUAL_OK_OR),\n+    LintId::of(match_on_vec_items::MATCH_ON_VEC_ITEMS),\n+    LintId::of(matches::MATCH_BOOL),\n+    LintId::of(matches::MATCH_SAME_ARMS),\n+    LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n+    LintId::of(matches::MATCH_WILD_ERR_ARM),\n+    LintId::of(matches::SINGLE_MATCH_ELSE),\n+    LintId::of(methods::CLONED_INSTEAD_OF_COPIED),\n+    LintId::of(methods::FILTER_MAP_NEXT),\n+    LintId::of(methods::FLAT_MAP_OPTION),\n+    LintId::of(methods::FROM_ITER_INSTEAD_OF_COLLECT),\n+    LintId::of(methods::IMPLICIT_CLONE),\n+    LintId::of(methods::INEFFICIENT_TO_STRING),\n+    LintId::of(methods::MAP_FLATTEN),\n+    LintId::of(methods::MAP_UNWRAP_OR),\n+    LintId::of(misc::FLOAT_CMP),\n+    LintId::of(misc::USED_UNDERSCORE_BINDING),\n+    LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n+    LintId::of(mut_mut::MUT_MUT),\n+    LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n+    LintId::of(needless_borrow::REF_BINDING_TO_REFERENCE),\n+    LintId::of(needless_continue::NEEDLESS_CONTINUE),\n+    LintId::of(needless_for_each::NEEDLESS_FOR_EACH),\n+    LintId::of(needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n+    LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n+    LintId::of(non_expressive_names::SIMILAR_NAMES),\n+    LintId::of(pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE),\n+    LintId::of(pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n+    LintId::of(ranges::RANGE_MINUS_ONE),\n+    LintId::of(ranges::RANGE_PLUS_ONE),\n+    LintId::of(redundant_else::REDUNDANT_ELSE),\n+    LintId::of(ref_option_ref::REF_OPTION_REF),\n+    LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n+    LintId::of(shadow::SHADOW_UNRELATED),\n+    LintId::of(strings::STRING_ADD_ASSIGN),\n+    LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n+    LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n+    LintId::of(transmute::TRANSMUTE_PTR_TO_PTR),\n+    LintId::of(types::LINKEDLIST),\n+    LintId::of(types::OPTION_OPTION),\n+    LintId::of(unicode::NON_ASCII_LITERAL),\n+    LintId::of(unicode::UNICODE_NOT_NFC),\n+    LintId::of(unit_types::LET_UNIT_VALUE),\n+    LintId::of(unnecessary_wraps::UNNECESSARY_WRAPS),\n+    LintId::of(unnested_or_patterns::UNNESTED_OR_PATTERNS),\n+    LintId::of(unused_async::UNUSED_ASYNC),\n+    LintId::of(unused_self::UNUSED_SELF),\n+    LintId::of(wildcard_imports::ENUM_GLOB_USE),\n+    LintId::of(wildcard_imports::WILDCARD_IMPORTS),\n+    LintId::of(zero_sized_map_values::ZERO_SIZED_MAP_VALUES),\n+])"}, {"sha": "5432345760bc3242126b9f0978e8d90d44d62e70", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,27 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n+    LintId::of(entry::MAP_ENTRY),\n+    LintId::of(escape::BOXED_LOCAL),\n+    LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n+    LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n+    LintId::of(loops::MANUAL_MEMCPY),\n+    LintId::of(loops::NEEDLESS_COLLECT),\n+    LintId::of(methods::EXPECT_FUN_CALL),\n+    LintId::of(methods::EXTEND_WITH_DRAIN),\n+    LintId::of(methods::ITER_NTH),\n+    LintId::of(methods::MANUAL_STR_REPEAT),\n+    LintId::of(methods::OR_FUN_CALL),\n+    LintId::of(methods::SINGLE_CHAR_PATTERN),\n+    LintId::of(misc::CMP_OWNED),\n+    LintId::of(mutex_atomic::MUTEX_ATOMIC),\n+    LintId::of(redundant_clone::REDUNDANT_CLONE),\n+    LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n+    LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n+    LintId::of(types::BOX_COLLECTION),\n+    LintId::of(types::REDUNDANT_ALLOCATION),\n+    LintId::of(vec::USELESS_VEC),\n+    LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n+])"}, {"sha": "530662dfc0cf52ca2228df3f948f7a9764df0b02", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,64 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n+    LintId::of(arithmetic::FLOAT_ARITHMETIC),\n+    LintId::of(arithmetic::INTEGER_ARITHMETIC),\n+    LintId::of(as_conversions::AS_CONVERSIONS),\n+    LintId::of(asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n+    LintId::of(asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n+    LintId::of(create_dir::CREATE_DIR),\n+    LintId::of(dbg_macro::DBG_MACRO),\n+    LintId::of(default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK),\n+    LintId::of(disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS),\n+    LintId::of(else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n+    LintId::of(exhaustive_items::EXHAUSTIVE_ENUMS),\n+    LintId::of(exhaustive_items::EXHAUSTIVE_STRUCTS),\n+    LintId::of(exit::EXIT),\n+    LintId::of(float_literal::LOSSY_FLOAT_LITERAL),\n+    LintId::of(if_then_some_else_none::IF_THEN_SOME_ELSE_NONE),\n+    LintId::of(implicit_return::IMPLICIT_RETURN),\n+    LintId::of(indexing_slicing::INDEXING_SLICING),\n+    LintId::of(inherent_impl::MULTIPLE_INHERENT_IMPL),\n+    LintId::of(integer_division::INTEGER_DIVISION),\n+    LintId::of(let_underscore::LET_UNDERSCORE_MUST_USE),\n+    LintId::of(literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n+    LintId::of(map_err_ignore::MAP_ERR_IGNORE),\n+    LintId::of(matches::REST_PAT_IN_FULLY_BOUND_STRUCTS),\n+    LintId::of(matches::WILDCARD_ENUM_MATCH_ARM),\n+    LintId::of(mem_forget::MEM_FORGET),\n+    LintId::of(methods::CLONE_ON_REF_PTR),\n+    LintId::of(methods::EXPECT_USED),\n+    LintId::of(methods::FILETYPE_IS_FILE),\n+    LintId::of(methods::GET_UNWRAP),\n+    LintId::of(methods::UNWRAP_USED),\n+    LintId::of(misc::FLOAT_CMP_CONST),\n+    LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n+    LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n+    LintId::of(missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES),\n+    LintId::of(missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n+    LintId::of(module_style::MOD_MODULE_FILES),\n+    LintId::of(module_style::SELF_NAMED_MODULE_FILES),\n+    LintId::of(modulo_arithmetic::MODULO_ARITHMETIC),\n+    LintId::of(panic_in_result_fn::PANIC_IN_RESULT_FN),\n+    LintId::of(panic_unimplemented::PANIC),\n+    LintId::of(panic_unimplemented::TODO),\n+    LintId::of(panic_unimplemented::UNIMPLEMENTED),\n+    LintId::of(panic_unimplemented::UNREACHABLE),\n+    LintId::of(pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n+    LintId::of(same_name_method::SAME_NAME_METHOD),\n+    LintId::of(shadow::SHADOW_REUSE),\n+    LintId::of(shadow::SHADOW_SAME),\n+    LintId::of(strings::STRING_ADD),\n+    LintId::of(strings::STRING_TO_STRING),\n+    LintId::of(strings::STR_TO_STRING),\n+    LintId::of(types::RC_BUFFER),\n+    LintId::of(types::RC_MUTEX),\n+    LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n+    LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n+    LintId::of(verbose_file_reads::VERBOSE_FILE_READS),\n+    LintId::of(write::PRINT_STDERR),\n+    LintId::of(write::PRINT_STDOUT),\n+    LintId::of(write::USE_DEBUG),\n+])"}, {"sha": "a39c111c5742340d1a0d59723da29d722c8271c6", "filename": "clippy_lints/src/lib.register_style.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,114 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n+    LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n+    LintId::of(assign_ops::ASSIGN_OP_PATTERN),\n+    LintId::of(blacklisted_name::BLACKLISTED_NAME),\n+    LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n+    LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n+    LintId::of(casts::FN_TO_NUMERIC_CAST),\n+    LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n+    LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n+    LintId::of(collapsible_if::COLLAPSIBLE_IF),\n+    LintId::of(collapsible_match::COLLAPSIBLE_MATCH),\n+    LintId::of(comparison_chain::COMPARISON_CHAIN),\n+    LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n+    LintId::of(doc::MISSING_SAFETY_DOC),\n+    LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n+    LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n+    LintId::of(enum_variants::MODULE_INCEPTION),\n+    LintId::of(eq_op::OP_REF),\n+    LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n+    LintId::of(float_literal::EXCESSIVE_PRECISION),\n+    LintId::of(from_over_into::FROM_OVER_INTO),\n+    LintId::of(from_str_radix_10::FROM_STR_RADIX_10),\n+    LintId::of(functions::DOUBLE_MUST_USE),\n+    LintId::of(functions::MUST_USE_UNIT),\n+    LintId::of(functions::RESULT_UNIT_ERR),\n+    LintId::of(if_then_panic::IF_THEN_PANIC),\n+    LintId::of(inherent_to_string::INHERENT_TO_STRING),\n+    LintId::of(len_zero::COMPARISON_TO_EMPTY),\n+    LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n+    LintId::of(len_zero::LEN_ZERO),\n+    LintId::of(literal_representation::INCONSISTENT_DIGIT_GROUPING),\n+    LintId::of(literal_representation::UNUSUAL_BYTE_GROUPINGS),\n+    LintId::of(loops::FOR_KV_MAP),\n+    LintId::of(loops::NEEDLESS_RANGE_LOOP),\n+    LintId::of(loops::SAME_ITEM_PUSH),\n+    LintId::of(loops::WHILE_LET_ON_ITERATOR),\n+    LintId::of(main_recursion::MAIN_RECURSION),\n+    LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n+    LintId::of(manual_map::MANUAL_MAP),\n+    LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n+    LintId::of(map_clone::MAP_CLONE),\n+    LintId::of(match_result_ok::MATCH_RESULT_OK),\n+    LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n+    LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n+    LintId::of(matches::MATCH_OVERLAPPING_ARM),\n+    LintId::of(matches::MATCH_REF_PATS),\n+    LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n+    LintId::of(matches::SINGLE_MATCH),\n+    LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n+    LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n+    LintId::of(methods::BYTES_NTH),\n+    LintId::of(methods::CHARS_LAST_CMP),\n+    LintId::of(methods::CHARS_NEXT_CMP),\n+    LintId::of(methods::INTO_ITER_ON_REF),\n+    LintId::of(methods::ITER_CLONED_COLLECT),\n+    LintId::of(methods::ITER_NEXT_SLICE),\n+    LintId::of(methods::ITER_NTH_ZERO),\n+    LintId::of(methods::ITER_SKIP_NEXT),\n+    LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n+    LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n+    LintId::of(methods::NEW_RET_NO_SELF),\n+    LintId::of(methods::OK_EXPECT),\n+    LintId::of(methods::OPTION_MAP_OR_NONE),\n+    LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n+    LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),\n+    LintId::of(methods::SINGLE_CHAR_ADD_STR),\n+    LintId::of(methods::STRING_EXTEND_CHARS),\n+    LintId::of(methods::UNNECESSARY_FOLD),\n+    LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n+    LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n+    LintId::of(methods::WRONG_SELF_CONVENTION),\n+    LintId::of(misc::TOPLEVEL_REF_ARG),\n+    LintId::of(misc::ZERO_PTR),\n+    LintId::of(misc_early::BUILTIN_TYPE_SHADOW),\n+    LintId::of(misc_early::DOUBLE_NEG),\n+    LintId::of(misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n+    LintId::of(misc_early::MIXED_CASE_HEX_LITERALS),\n+    LintId::of(misc_early::REDUNDANT_PATTERN),\n+    LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n+    LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n+    LintId::of(needless_borrow::NEEDLESS_BORROW),\n+    LintId::of(neg_multiply::NEG_MULTIPLY),\n+    LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n+    LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n+    LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n+    LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n+    LintId::of(ptr::CMP_NULL),\n+    LintId::of(ptr::PTR_ARG),\n+    LintId::of(ptr_eq::PTR_EQ),\n+    LintId::of(question_mark::QUESTION_MARK),\n+    LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n+    LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),\n+    LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n+    LintId::of(returns::LET_AND_RETURN),\n+    LintId::of(returns::NEEDLESS_RETURN),\n+    LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n+    LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n+    LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n+    LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n+    LintId::of(try_err::TRY_ERR),\n+    LintId::of(unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n+    LintId::of(unused_unit::UNUSED_UNIT),\n+    LintId::of(upper_case_acronyms::UPPER_CASE_ACRONYMS),\n+    LintId::of(write::PRINTLN_EMPTY_STRING),\n+    LintId::of(write::PRINT_LITERAL),\n+    LintId::of(write::PRINT_WITH_NEWLINE),\n+    LintId::of(write::WRITELN_EMPTY_STRING),\n+    LintId::of(write::WRITE_LITERAL),\n+    LintId::of(write::WRITE_WITH_NEWLINE),\n+])"}, {"sha": "8859787fbc830c97e7b34a0ee21e053d586bcdcf", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -0,0 +1,20 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec![\n+    LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n+    LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n+    LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n+    LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n+    LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n+    LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n+    LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+    LintId::of(loops::EMPTY_LOOP),\n+    LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n+    LintId::of(loops::MUT_RANGE_BOUND),\n+    LintId::of(methods::SUSPICIOUS_MAP),\n+    LintId::of(mut_key::MUTABLE_KEY_TYPE),\n+    LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n+    LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n+])"}, {"sha": "d43ce4a87c66f070bc4855865cf023707aeed039", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1622, "changes": 1637, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -155,236 +155,7 @@ macro_rules! declare_clippy_lint {\n mod deprecated_lints;\n mod utils;\n \n-// begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n-mod absurd_extreme_comparisons;\n-mod approx_const;\n-mod arithmetic;\n-mod as_conversions;\n-mod asm_syntax;\n-mod assertions_on_constants;\n-mod assign_ops;\n-mod async_yields_async;\n-mod attrs;\n-mod await_holding_invalid;\n-mod bit_mask;\n-mod blacklisted_name;\n-mod blocks_in_if_conditions;\n-mod bool_assert_comparison;\n-mod booleans;\n-mod bytecount;\n-mod cargo_common_metadata;\n-mod case_sensitive_file_extension_comparisons;\n-mod casts;\n-mod checked_conversions;\n-mod cognitive_complexity;\n-mod collapsible_if;\n-mod collapsible_match;\n-mod comparison_chain;\n-mod copies;\n-mod copy_iterator;\n-mod create_dir;\n-mod dbg_macro;\n-mod default;\n-mod default_numeric_fallback;\n-mod dereference;\n-mod derivable_impls;\n-mod derive;\n-mod disallowed_method;\n-mod disallowed_script_idents;\n-mod disallowed_type;\n-mod doc;\n-mod double_comparison;\n-mod double_parens;\n-mod drop_forget_ref;\n-mod duration_subsec;\n-mod else_if_without_else;\n-mod empty_enum;\n-mod entry;\n-mod enum_clike;\n-mod enum_variants;\n-mod eq_op;\n-mod erasing_op;\n-mod escape;\n-mod eta_reduction;\n-mod eval_order_dependence;\n-mod excessive_bools;\n-mod exhaustive_items;\n-mod exit;\n-mod explicit_write;\n-mod fallible_impl_from;\n-mod feature_name;\n-mod float_equality_without_abs;\n-mod float_literal;\n-mod floating_point_arithmetic;\n-mod format;\n-mod formatting;\n-mod from_over_into;\n-mod from_str_radix_10;\n-mod functions;\n-mod future_not_send;\n-mod get_last_with_len;\n-mod identity_op;\n-mod if_let_mutex;\n-mod if_not_else;\n-mod if_then_panic;\n-mod if_then_some_else_none;\n-mod implicit_hasher;\n-mod implicit_return;\n-mod implicit_saturating_sub;\n-mod inconsistent_struct_constructor;\n-mod indexing_slicing;\n-mod infinite_iter;\n-mod inherent_impl;\n-mod inherent_to_string;\n-mod inline_fn_without_body;\n-mod int_plus_one;\n-mod integer_division;\n-mod invalid_upcast_comparisons;\n-mod items_after_statements;\n-mod iter_not_returning_iterator;\n-mod large_const_arrays;\n-mod large_enum_variant;\n-mod large_stack_arrays;\n-mod len_zero;\n-mod let_if_seq;\n-mod let_underscore;\n-mod lifetimes;\n-mod literal_representation;\n-mod loops;\n-mod macro_use;\n-mod main_recursion;\n-mod manual_async_fn;\n-mod manual_map;\n-mod manual_non_exhaustive;\n-mod manual_ok_or;\n-mod manual_strip;\n-mod manual_unwrap_or;\n-mod map_clone;\n-mod map_err_ignore;\n-mod map_unit_fn;\n-mod match_on_vec_items;\n-mod match_result_ok;\n-mod matches;\n-mod mem_discriminant;\n-mod mem_forget;\n-mod mem_replace;\n-mod methods;\n-mod minmax;\n-mod misc;\n-mod misc_early;\n-mod missing_const_for_fn;\n-mod missing_doc;\n-mod missing_enforced_import_rename;\n-mod missing_inline;\n-mod module_style;\n-mod modulo_arithmetic;\n-mod multiple_crate_versions;\n-mod mut_key;\n-mod mut_mut;\n-mod mut_mutex_lock;\n-mod mut_reference;\n-mod mutable_debug_assertion;\n-mod mutex_atomic;\n-mod needless_arbitrary_self_type;\n-mod needless_bitwise_bool;\n-mod needless_bool;\n-mod needless_borrow;\n-mod needless_borrowed_ref;\n-mod needless_continue;\n-mod needless_for_each;\n-mod needless_option_as_deref;\n-mod needless_pass_by_value;\n-mod needless_question_mark;\n-mod needless_update;\n-mod neg_cmp_op_on_partial_ord;\n-mod neg_multiply;\n-mod new_without_default;\n-mod no_effect;\n-mod non_copy_const;\n-mod non_expressive_names;\n-mod non_octal_unix_permissions;\n-mod nonstandard_macro_braces;\n-mod open_options;\n-mod option_env_unwrap;\n-mod option_if_let_else;\n-mod overflow_check_conditional;\n-mod panic_in_result_fn;\n-mod panic_unimplemented;\n-mod partialeq_ne_impl;\n-mod pass_by_ref_or_value;\n-mod path_buf_push_overwrite;\n-mod pattern_type_mismatch;\n-mod precedence;\n-mod ptr;\n-mod ptr_eq;\n-mod ptr_offset_with_cast;\n-mod question_mark;\n-mod ranges;\n-mod redundant_clone;\n-mod redundant_closure_call;\n-mod redundant_else;\n-mod redundant_field_names;\n-mod redundant_pub_crate;\n-mod redundant_slicing;\n-mod redundant_static_lifetimes;\n-mod ref_option_ref;\n-mod reference;\n-mod regex;\n-mod repeat_once;\n-mod returns;\n-mod same_name_method;\n-mod self_assignment;\n-mod self_named_constructors;\n-mod semicolon_if_nothing_returned;\n-mod serde_api;\n-mod shadow;\n-mod single_component_path_imports;\n-mod size_of_in_element_count;\n-mod slow_vector_initialization;\n-mod stable_sort_primitive;\n-mod strings;\n-mod strlen_on_c_strings;\n-mod suspicious_operation_groupings;\n-mod suspicious_trait_impl;\n-mod swap;\n-mod tabs_in_doc_comments;\n-mod temporary_assignment;\n-mod to_digit_is_some;\n-mod to_string_in_display;\n-mod trait_bounds;\n-mod transmute;\n-mod transmuting_null;\n-mod try_err;\n-mod types;\n-mod undropped_manually_drops;\n-mod unicode;\n-mod unit_return_expecting_ord;\n-mod unit_types;\n-mod unnamed_address;\n-mod unnecessary_self_imports;\n-mod unnecessary_sort_by;\n-mod unnecessary_wraps;\n-mod unnested_or_patterns;\n-mod unsafe_removed_from_name;\n-mod unused_async;\n-mod unused_io_amount;\n-mod unused_self;\n-mod unused_unit;\n-mod unwrap;\n-mod unwrap_in_result;\n-mod upper_case_acronyms;\n-mod use_self;\n-mod useless_conversion;\n-mod vec;\n-mod vec_init_then_push;\n-mod vec_resize_to_zero;\n-mod verbose_file_reads;\n-mod wildcard_dependencies;\n-mod wildcard_imports;\n-mod write;\n-mod zero_div_zero;\n-mod zero_sized_map_values;\n-// end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n+include!(\"lib.mods.rs\");\n \n pub use crate::utils::conf::Conf;\n use crate::utils::conf::TryConf;\n@@ -438,1401 +209,23 @@ pub fn read_conf(sess: &Session) -> Conf {\n pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf: &Conf) {\n     register_removed_non_tool_lints(store);\n \n-    // begin deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n-    store.register_removed(\n-        \"clippy::should_assert_eq\",\n-        \"`assert!()` will be more flexible with RFC 2011\",\n-    );\n-    store.register_removed(\n-        \"clippy::extend_from_slice\",\n-        \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\",\n-    );\n-    store.register_removed(\n-        \"clippy::range_step_by_zero\",\n-        \"`iterator.step_by(0)` panics nowadays\",\n-    );\n-    store.register_removed(\n-        \"clippy::unstable_as_slice\",\n-        \"`Vec::as_slice` has been stabilized in 1.7\",\n-    );\n-    store.register_removed(\n-        \"clippy::unstable_as_mut_slice\",\n-        \"`Vec::as_mut_slice` has been stabilized in 1.7\",\n-    );\n-    store.register_removed(\n-        \"clippy::misaligned_transmute\",\n-        \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\",\n-    );\n-    store.register_removed(\n-        \"clippy::assign_ops\",\n-        \"using compound assignment operators (e.g., `+=`) is harmless\",\n-    );\n-    store.register_removed(\n-        \"clippy::if_let_redundant_pattern_matching\",\n-        \"this lint has been changed to redundant_pattern_matching\",\n-    );\n-    store.register_removed(\n-        \"clippy::unsafe_vector_initialization\",\n-        \"the replacement suggested by this lint had substantially different behavior\",\n-    );\n-    store.register_removed(\n-        \"clippy::unused_collect\",\n-        \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\",\n-    );\n-    store.register_removed(\n-        \"clippy::replace_consts\",\n-        \"associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\",\n-    );\n-    store.register_removed(\n-        \"clippy::regex_macro\",\n-        \"the regex! macro has been removed from the regex crate in 2018\",\n-    );\n-    store.register_removed(\n-        \"clippy::find_map\",\n-        \"this lint has been replaced by `manual_find_map`, a more specific lint\",\n-    );\n-    store.register_removed(\n-        \"clippy::filter_map\",\n-        \"this lint has been replaced by `manual_filter_map`, a more specific lint\",\n-    );\n-    store.register_removed(\n-        \"clippy::pub_enum_variant_names\",\n-        \"set the `avoid-breaking-exported-api` config option to `false` to enable the `enum_variant_names` lint for public items\",\n-    );\n-    store.register_removed(\n-        \"clippy::wrong_pub_self_convention\",\n-        \"set the `avoid-breaking-exported-api` config option to `false` to enable the `wrong_self_convention` lint for public items\",\n-    );\n-    // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n-\n-    // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n-    store.register_lints(&[\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::DEFAULT_LINT,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::IF_CHAIN_STYLE,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::INTERNING_DEFINED_SYMBOL,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::INVALID_PATHS,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::PRODUCE_ICE,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::UNNECESSARY_SYMBOL_STR,\n-        absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS,\n-        approx_const::APPROX_CONSTANT,\n-        arithmetic::FLOAT_ARITHMETIC,\n-        arithmetic::INTEGER_ARITHMETIC,\n-        as_conversions::AS_CONVERSIONS,\n-        asm_syntax::INLINE_ASM_X86_ATT_SYNTAX,\n-        asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX,\n-        assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n-        assign_ops::ASSIGN_OP_PATTERN,\n-        assign_ops::MISREFACTORED_ASSIGN_OP,\n-        async_yields_async::ASYNC_YIELDS_ASYNC,\n-        attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n-        attrs::DEPRECATED_CFG_ATTR,\n-        attrs::DEPRECATED_SEMVER,\n-        attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n-        attrs::INLINE_ALWAYS,\n-        attrs::MISMATCHED_TARGET_OS,\n-        attrs::USELESS_ATTRIBUTE,\n-        await_holding_invalid::AWAIT_HOLDING_LOCK,\n-        await_holding_invalid::AWAIT_HOLDING_REFCELL_REF,\n-        bit_mask::BAD_BIT_MASK,\n-        bit_mask::INEFFECTIVE_BIT_MASK,\n-        bit_mask::VERBOSE_BIT_MASK,\n-        blacklisted_name::BLACKLISTED_NAME,\n-        blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS,\n-        bool_assert_comparison::BOOL_ASSERT_COMPARISON,\n-        booleans::LOGIC_BUG,\n-        booleans::NONMINIMAL_BOOL,\n-        bytecount::NAIVE_BYTECOUNT,\n-        cargo_common_metadata::CARGO_COMMON_METADATA,\n-        case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n-        casts::CAST_LOSSLESS,\n-        casts::CAST_POSSIBLE_TRUNCATION,\n-        casts::CAST_POSSIBLE_WRAP,\n-        casts::CAST_PRECISION_LOSS,\n-        casts::CAST_PTR_ALIGNMENT,\n-        casts::CAST_REF_TO_MUT,\n-        casts::CAST_SIGN_LOSS,\n-        casts::CHAR_LIT_AS_U8,\n-        casts::FN_TO_NUMERIC_CAST,\n-        casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n-        casts::PTR_AS_PTR,\n-        casts::UNNECESSARY_CAST,\n-        checked_conversions::CHECKED_CONVERSIONS,\n-        cognitive_complexity::COGNITIVE_COMPLEXITY,\n-        collapsible_if::COLLAPSIBLE_ELSE_IF,\n-        collapsible_if::COLLAPSIBLE_IF,\n-        collapsible_match::COLLAPSIBLE_MATCH,\n-        comparison_chain::COMPARISON_CHAIN,\n-        copies::BRANCHES_SHARING_CODE,\n-        copies::IFS_SAME_COND,\n-        copies::IF_SAME_THEN_ELSE,\n-        copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n-        copy_iterator::COPY_ITERATOR,\n-        create_dir::CREATE_DIR,\n-        dbg_macro::DBG_MACRO,\n-        default::DEFAULT_TRAIT_ACCESS,\n-        default::FIELD_REASSIGN_WITH_DEFAULT,\n-        default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK,\n-        dereference::EXPLICIT_DEREF_METHODS,\n-        derivable_impls::DERIVABLE_IMPLS,\n-        derive::DERIVE_HASH_XOR_EQ,\n-        derive::DERIVE_ORD_XOR_PARTIAL_ORD,\n-        derive::EXPL_IMPL_CLONE_ON_COPY,\n-        derive::UNSAFE_DERIVE_DESERIALIZE,\n-        disallowed_method::DISALLOWED_METHOD,\n-        disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS,\n-        disallowed_type::DISALLOWED_TYPE,\n-        doc::DOC_MARKDOWN,\n-        doc::MISSING_ERRORS_DOC,\n-        doc::MISSING_PANICS_DOC,\n-        doc::MISSING_SAFETY_DOC,\n-        doc::NEEDLESS_DOCTEST_MAIN,\n-        double_comparison::DOUBLE_COMPARISONS,\n-        double_parens::DOUBLE_PARENS,\n-        drop_forget_ref::DROP_COPY,\n-        drop_forget_ref::DROP_REF,\n-        drop_forget_ref::FORGET_COPY,\n-        drop_forget_ref::FORGET_REF,\n-        duration_subsec::DURATION_SUBSEC,\n-        else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n-        empty_enum::EMPTY_ENUM,\n-        entry::MAP_ENTRY,\n-        enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n-        enum_variants::ENUM_VARIANT_NAMES,\n-        enum_variants::MODULE_INCEPTION,\n-        enum_variants::MODULE_NAME_REPETITIONS,\n-        eq_op::EQ_OP,\n-        eq_op::OP_REF,\n-        erasing_op::ERASING_OP,\n-        escape::BOXED_LOCAL,\n-        eta_reduction::REDUNDANT_CLOSURE,\n-        eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n-        eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n-        eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n-        excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n-        excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n-        exhaustive_items::EXHAUSTIVE_ENUMS,\n-        exhaustive_items::EXHAUSTIVE_STRUCTS,\n-        exit::EXIT,\n-        explicit_write::EXPLICIT_WRITE,\n-        fallible_impl_from::FALLIBLE_IMPL_FROM,\n-        feature_name::NEGATIVE_FEATURE_NAMES,\n-        feature_name::REDUNDANT_FEATURE_NAMES,\n-        float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS,\n-        float_literal::EXCESSIVE_PRECISION,\n-        float_literal::LOSSY_FLOAT_LITERAL,\n-        floating_point_arithmetic::IMPRECISE_FLOPS,\n-        floating_point_arithmetic::SUBOPTIMAL_FLOPS,\n-        format::USELESS_FORMAT,\n-        formatting::POSSIBLE_MISSING_COMMA,\n-        formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n-        formatting::SUSPICIOUS_ELSE_FORMATTING,\n-        formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n-        from_over_into::FROM_OVER_INTO,\n-        from_str_radix_10::FROM_STR_RADIX_10,\n-        functions::DOUBLE_MUST_USE,\n-        functions::MUST_USE_CANDIDATE,\n-        functions::MUST_USE_UNIT,\n-        functions::NOT_UNSAFE_PTR_ARG_DEREF,\n-        functions::RESULT_UNIT_ERR,\n-        functions::TOO_MANY_ARGUMENTS,\n-        functions::TOO_MANY_LINES,\n-        future_not_send::FUTURE_NOT_SEND,\n-        get_last_with_len::GET_LAST_WITH_LEN,\n-        identity_op::IDENTITY_OP,\n-        if_let_mutex::IF_LET_MUTEX,\n-        if_not_else::IF_NOT_ELSE,\n-        if_then_panic::IF_THEN_PANIC,\n-        if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n-        implicit_hasher::IMPLICIT_HASHER,\n-        implicit_return::IMPLICIT_RETURN,\n-        implicit_saturating_sub::IMPLICIT_SATURATING_SUB,\n-        inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR,\n-        indexing_slicing::INDEXING_SLICING,\n-        indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n-        infinite_iter::INFINITE_ITER,\n-        infinite_iter::MAYBE_INFINITE_ITER,\n-        inherent_impl::MULTIPLE_INHERENT_IMPL,\n-        inherent_to_string::INHERENT_TO_STRING,\n-        inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n-        inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n-        int_plus_one::INT_PLUS_ONE,\n-        integer_division::INTEGER_DIVISION,\n-        invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS,\n-        items_after_statements::ITEMS_AFTER_STATEMENTS,\n-        iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n-        large_const_arrays::LARGE_CONST_ARRAYS,\n-        large_enum_variant::LARGE_ENUM_VARIANT,\n-        large_stack_arrays::LARGE_STACK_ARRAYS,\n-        len_zero::COMPARISON_TO_EMPTY,\n-        len_zero::LEN_WITHOUT_IS_EMPTY,\n-        len_zero::LEN_ZERO,\n-        let_if_seq::USELESS_LET_IF_SEQ,\n-        let_underscore::LET_UNDERSCORE_DROP,\n-        let_underscore::LET_UNDERSCORE_LOCK,\n-        let_underscore::LET_UNDERSCORE_MUST_USE,\n-        lifetimes::EXTRA_UNUSED_LIFETIMES,\n-        lifetimes::NEEDLESS_LIFETIMES,\n-        literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n-        literal_representation::INCONSISTENT_DIGIT_GROUPING,\n-        literal_representation::LARGE_DIGIT_GROUPS,\n-        literal_representation::MISTYPED_LITERAL_SUFFIXES,\n-        literal_representation::UNREADABLE_LITERAL,\n-        literal_representation::UNUSUAL_BYTE_GROUPINGS,\n-        loops::EMPTY_LOOP,\n-        loops::EXPLICIT_COUNTER_LOOP,\n-        loops::EXPLICIT_INTO_ITER_LOOP,\n-        loops::EXPLICIT_ITER_LOOP,\n-        loops::FOR_KV_MAP,\n-        loops::FOR_LOOPS_OVER_FALLIBLES,\n-        loops::ITER_NEXT_LOOP,\n-        loops::MANUAL_FLATTEN,\n-        loops::MANUAL_MEMCPY,\n-        loops::MUT_RANGE_BOUND,\n-        loops::NEEDLESS_COLLECT,\n-        loops::NEEDLESS_RANGE_LOOP,\n-        loops::NEVER_LOOP,\n-        loops::SAME_ITEM_PUSH,\n-        loops::SINGLE_ELEMENT_LOOP,\n-        loops::WHILE_IMMUTABLE_CONDITION,\n-        loops::WHILE_LET_LOOP,\n-        loops::WHILE_LET_ON_ITERATOR,\n-        macro_use::MACRO_USE_IMPORTS,\n-        main_recursion::MAIN_RECURSION,\n-        manual_async_fn::MANUAL_ASYNC_FN,\n-        manual_map::MANUAL_MAP,\n-        manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n-        manual_ok_or::MANUAL_OK_OR,\n-        manual_strip::MANUAL_STRIP,\n-        manual_unwrap_or::MANUAL_UNWRAP_OR,\n-        map_clone::MAP_CLONE,\n-        map_err_ignore::MAP_ERR_IGNORE,\n-        map_unit_fn::OPTION_MAP_UNIT_FN,\n-        map_unit_fn::RESULT_MAP_UNIT_FN,\n-        match_on_vec_items::MATCH_ON_VEC_ITEMS,\n-        match_result_ok::MATCH_RESULT_OK,\n-        matches::INFALLIBLE_DESTRUCTURING_MATCH,\n-        matches::MATCH_AS_REF,\n-        matches::MATCH_BOOL,\n-        matches::MATCH_LIKE_MATCHES_MACRO,\n-        matches::MATCH_OVERLAPPING_ARM,\n-        matches::MATCH_REF_PATS,\n-        matches::MATCH_SAME_ARMS,\n-        matches::MATCH_SINGLE_BINDING,\n-        matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n-        matches::MATCH_WILD_ERR_ARM,\n-        matches::REDUNDANT_PATTERN_MATCHING,\n-        matches::REST_PAT_IN_FULLY_BOUND_STRUCTS,\n-        matches::SINGLE_MATCH,\n-        matches::SINGLE_MATCH_ELSE,\n-        matches::WILDCARD_ENUM_MATCH_ARM,\n-        matches::WILDCARD_IN_OR_PATTERNS,\n-        mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n-        mem_forget::MEM_FORGET,\n-        mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n-        mem_replace::MEM_REPLACE_WITH_DEFAULT,\n-        mem_replace::MEM_REPLACE_WITH_UNINIT,\n-        methods::BIND_INSTEAD_OF_MAP,\n-        methods::BYTES_NTH,\n-        methods::CHARS_LAST_CMP,\n-        methods::CHARS_NEXT_CMP,\n-        methods::CLONED_INSTEAD_OF_COPIED,\n-        methods::CLONE_DOUBLE_REF,\n-        methods::CLONE_ON_COPY,\n-        methods::CLONE_ON_REF_PTR,\n-        methods::EXPECT_FUN_CALL,\n-        methods::EXPECT_USED,\n-        methods::EXTEND_WITH_DRAIN,\n-        methods::FILETYPE_IS_FILE,\n-        methods::FILTER_MAP_IDENTITY,\n-        methods::FILTER_MAP_NEXT,\n-        methods::FILTER_NEXT,\n-        methods::FLAT_MAP_IDENTITY,\n-        methods::FLAT_MAP_OPTION,\n-        methods::FROM_ITER_INSTEAD_OF_COLLECT,\n-        methods::GET_UNWRAP,\n-        methods::IMPLICIT_CLONE,\n-        methods::INEFFICIENT_TO_STRING,\n-        methods::INSPECT_FOR_EACH,\n-        methods::INTO_ITER_ON_REF,\n-        methods::ITERATOR_STEP_BY_ZERO,\n-        methods::ITER_CLONED_COLLECT,\n-        methods::ITER_COUNT,\n-        methods::ITER_NEXT_SLICE,\n-        methods::ITER_NTH,\n-        methods::ITER_NTH_ZERO,\n-        methods::ITER_SKIP_NEXT,\n-        methods::MANUAL_FILTER_MAP,\n-        methods::MANUAL_FIND_MAP,\n-        methods::MANUAL_SATURATING_ARITHMETIC,\n-        methods::MANUAL_SPLIT_ONCE,\n-        methods::MANUAL_STR_REPEAT,\n-        methods::MAP_COLLECT_RESULT_UNIT,\n-        methods::MAP_FLATTEN,\n-        methods::MAP_IDENTITY,\n-        methods::MAP_UNWRAP_OR,\n-        methods::NEW_RET_NO_SELF,\n-        methods::OK_EXPECT,\n-        methods::OPTION_AS_REF_DEREF,\n-        methods::OPTION_FILTER_MAP,\n-        methods::OPTION_MAP_OR_NONE,\n-        methods::OR_FUN_CALL,\n-        methods::RESULT_MAP_OR_INTO_OPTION,\n-        methods::SEARCH_IS_SOME,\n-        methods::SHOULD_IMPLEMENT_TRAIT,\n-        methods::SINGLE_CHAR_ADD_STR,\n-        methods::SINGLE_CHAR_PATTERN,\n-        methods::SKIP_WHILE_NEXT,\n-        methods::STRING_EXTEND_CHARS,\n-        methods::SUSPICIOUS_MAP,\n-        methods::SUSPICIOUS_SPLITN,\n-        methods::UNINIT_ASSUMED_INIT,\n-        methods::UNNECESSARY_FILTER_MAP,\n-        methods::UNNECESSARY_FOLD,\n-        methods::UNNECESSARY_LAZY_EVALUATIONS,\n-        methods::UNWRAP_OR_ELSE_DEFAULT,\n-        methods::UNWRAP_USED,\n-        methods::USELESS_ASREF,\n-        methods::WRONG_SELF_CONVENTION,\n-        methods::ZST_OFFSET,\n-        minmax::MIN_MAX,\n-        misc::CMP_NAN,\n-        misc::CMP_OWNED,\n-        misc::FLOAT_CMP,\n-        misc::FLOAT_CMP_CONST,\n-        misc::MODULO_ONE,\n-        misc::SHORT_CIRCUIT_STATEMENT,\n-        misc::TOPLEVEL_REF_ARG,\n-        misc::USED_UNDERSCORE_BINDING,\n-        misc::ZERO_PTR,\n-        misc_early::BUILTIN_TYPE_SHADOW,\n-        misc_early::DOUBLE_NEG,\n-        misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n-        misc_early::MIXED_CASE_HEX_LITERALS,\n-        misc_early::REDUNDANT_PATTERN,\n-        misc_early::UNNEEDED_FIELD_PATTERN,\n-        misc_early::UNNEEDED_WILDCARD_PATTERN,\n-        misc_early::UNSEPARATED_LITERAL_SUFFIX,\n-        misc_early::ZERO_PREFIXED_LITERAL,\n-        missing_const_for_fn::MISSING_CONST_FOR_FN,\n-        missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n-        missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES,\n-        missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n-        module_style::MOD_MODULE_FILES,\n-        module_style::SELF_NAMED_MODULE_FILES,\n-        modulo_arithmetic::MODULO_ARITHMETIC,\n-        multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n-        mut_key::MUTABLE_KEY_TYPE,\n-        mut_mut::MUT_MUT,\n-        mut_mutex_lock::MUT_MUTEX_LOCK,\n-        mut_reference::UNNECESSARY_MUT_PASSED,\n-        mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n-        mutex_atomic::MUTEX_ATOMIC,\n-        mutex_atomic::MUTEX_INTEGER,\n-        needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE,\n-        needless_bitwise_bool::NEEDLESS_BITWISE_BOOL,\n-        needless_bool::BOOL_COMPARISON,\n-        needless_bool::NEEDLESS_BOOL,\n-        needless_borrow::NEEDLESS_BORROW,\n-        needless_borrow::REF_BINDING_TO_REFERENCE,\n-        needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n-        needless_continue::NEEDLESS_CONTINUE,\n-        needless_for_each::NEEDLESS_FOR_EACH,\n-        needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF,\n-        needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n-        needless_question_mark::NEEDLESS_QUESTION_MARK,\n-        needless_update::NEEDLESS_UPDATE,\n-        neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n-        neg_multiply::NEG_MULTIPLY,\n-        new_without_default::NEW_WITHOUT_DEFAULT,\n-        no_effect::NO_EFFECT,\n-        no_effect::UNNECESSARY_OPERATION,\n-        non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n-        non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST,\n-        non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n-        non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n-        non_expressive_names::SIMILAR_NAMES,\n-        non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS,\n-        nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES,\n-        open_options::NONSENSICAL_OPEN_OPTIONS,\n-        option_env_unwrap::OPTION_ENV_UNWRAP,\n-        option_if_let_else::OPTION_IF_LET_ELSE,\n-        overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n-        panic_in_result_fn::PANIC_IN_RESULT_FN,\n-        panic_unimplemented::PANIC,\n-        panic_unimplemented::TODO,\n-        panic_unimplemented::UNIMPLEMENTED,\n-        panic_unimplemented::UNREACHABLE,\n-        partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n-        pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE,\n-        pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF,\n-        path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE,\n-        pattern_type_mismatch::PATTERN_TYPE_MISMATCH,\n-        precedence::PRECEDENCE,\n-        ptr::CMP_NULL,\n-        ptr::INVALID_NULL_PTR_USAGE,\n-        ptr::MUT_FROM_REF,\n-        ptr::PTR_ARG,\n-        ptr_eq::PTR_EQ,\n-        ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n-        question_mark::QUESTION_MARK,\n-        ranges::MANUAL_RANGE_CONTAINS,\n-        ranges::RANGE_MINUS_ONE,\n-        ranges::RANGE_PLUS_ONE,\n-        ranges::RANGE_ZIP_WITH_LEN,\n-        ranges::REVERSED_EMPTY_RANGES,\n-        redundant_clone::REDUNDANT_CLONE,\n-        redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n-        redundant_else::REDUNDANT_ELSE,\n-        redundant_field_names::REDUNDANT_FIELD_NAMES,\n-        redundant_pub_crate::REDUNDANT_PUB_CRATE,\n-        redundant_slicing::REDUNDANT_SLICING,\n-        redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n-        ref_option_ref::REF_OPTION_REF,\n-        reference::DEREF_ADDROF,\n-        reference::REF_IN_DEREF,\n-        regex::INVALID_REGEX,\n-        regex::TRIVIAL_REGEX,\n-        repeat_once::REPEAT_ONCE,\n-        returns::LET_AND_RETURN,\n-        returns::NEEDLESS_RETURN,\n-        same_name_method::SAME_NAME_METHOD,\n-        self_assignment::SELF_ASSIGNMENT,\n-        self_named_constructors::SELF_NAMED_CONSTRUCTORS,\n-        semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED,\n-        serde_api::SERDE_API_MISUSE,\n-        shadow::SHADOW_REUSE,\n-        shadow::SHADOW_SAME,\n-        shadow::SHADOW_UNRELATED,\n-        single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n-        size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n-        slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n-        stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n-        strings::STRING_ADD,\n-        strings::STRING_ADD_ASSIGN,\n-        strings::STRING_FROM_UTF8_AS_BYTES,\n-        strings::STRING_LIT_AS_BYTES,\n-        strings::STRING_TO_STRING,\n-        strings::STR_TO_STRING,\n-        strlen_on_c_strings::STRLEN_ON_C_STRINGS,\n-        suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS,\n-        suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n-        suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n-        swap::ALMOST_SWAPPED,\n-        swap::MANUAL_SWAP,\n-        tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n-        temporary_assignment::TEMPORARY_ASSIGNMENT,\n-        to_digit_is_some::TO_DIGIT_IS_SOME,\n-        to_string_in_display::TO_STRING_IN_DISPLAY,\n-        trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS,\n-        trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n-        transmute::CROSSPOINTER_TRANSMUTE,\n-        transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n-        transmute::TRANSMUTE_BYTES_TO_STR,\n-        transmute::TRANSMUTE_FLOAT_TO_INT,\n-        transmute::TRANSMUTE_INT_TO_BOOL,\n-        transmute::TRANSMUTE_INT_TO_CHAR,\n-        transmute::TRANSMUTE_INT_TO_FLOAT,\n-        transmute::TRANSMUTE_PTR_TO_PTR,\n-        transmute::TRANSMUTE_PTR_TO_REF,\n-        transmute::UNSOUND_COLLECTION_TRANSMUTE,\n-        transmute::USELESS_TRANSMUTE,\n-        transmute::WRONG_TRANSMUTE,\n-        transmuting_null::TRANSMUTING_NULL,\n-        try_err::TRY_ERR,\n-        types::BORROWED_BOX,\n-        types::BOX_COLLECTION,\n-        types::LINKEDLIST,\n-        types::OPTION_OPTION,\n-        types::RC_BUFFER,\n-        types::RC_MUTEX,\n-        types::REDUNDANT_ALLOCATION,\n-        types::TYPE_COMPLEXITY,\n-        types::VEC_BOX,\n-        undropped_manually_drops::UNDROPPED_MANUALLY_DROPS,\n-        unicode::INVISIBLE_CHARACTERS,\n-        unicode::NON_ASCII_LITERAL,\n-        unicode::UNICODE_NOT_NFC,\n-        unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n-        unit_types::LET_UNIT_VALUE,\n-        unit_types::UNIT_ARG,\n-        unit_types::UNIT_CMP,\n-        unnamed_address::FN_ADDRESS_COMPARISONS,\n-        unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n-        unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS,\n-        unnecessary_sort_by::UNNECESSARY_SORT_BY,\n-        unnecessary_wraps::UNNECESSARY_WRAPS,\n-        unnested_or_patterns::UNNESTED_OR_PATTERNS,\n-        unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n-        unused_async::UNUSED_ASYNC,\n-        unused_io_amount::UNUSED_IO_AMOUNT,\n-        unused_self::UNUSED_SELF,\n-        unused_unit::UNUSED_UNIT,\n-        unwrap::PANICKING_UNWRAP,\n-        unwrap::UNNECESSARY_UNWRAP,\n-        unwrap_in_result::UNWRAP_IN_RESULT,\n-        upper_case_acronyms::UPPER_CASE_ACRONYMS,\n-        use_self::USE_SELF,\n-        useless_conversion::USELESS_CONVERSION,\n-        vec::USELESS_VEC,\n-        vec_init_then_push::VEC_INIT_THEN_PUSH,\n-        vec_resize_to_zero::VEC_RESIZE_TO_ZERO,\n-        verbose_file_reads::VERBOSE_FILE_READS,\n-        wildcard_dependencies::WILDCARD_DEPENDENCIES,\n-        wildcard_imports::ENUM_GLOB_USE,\n-        wildcard_imports::WILDCARD_IMPORTS,\n-        write::PRINTLN_EMPTY_STRING,\n-        write::PRINT_LITERAL,\n-        write::PRINT_STDERR,\n-        write::PRINT_STDOUT,\n-        write::PRINT_WITH_NEWLINE,\n-        write::USE_DEBUG,\n-        write::WRITELN_EMPTY_STRING,\n-        write::WRITE_LITERAL,\n-        write::WRITE_WITH_NEWLINE,\n-        zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n-        zero_sized_map_values::ZERO_SIZED_MAP_VALUES,\n-    ]);\n-    // end register lints, do not remove this comment, it\u2019s used in `update_lints`\n+    include!(\"lib.deprecated.rs\");\n \n-    store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n-        LintId::of(arithmetic::FLOAT_ARITHMETIC),\n-        LintId::of(arithmetic::INTEGER_ARITHMETIC),\n-        LintId::of(as_conversions::AS_CONVERSIONS),\n-        LintId::of(asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n-        LintId::of(asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n-        LintId::of(create_dir::CREATE_DIR),\n-        LintId::of(dbg_macro::DBG_MACRO),\n-        LintId::of(default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK),\n-        LintId::of(disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS),\n-        LintId::of(else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n-        LintId::of(exhaustive_items::EXHAUSTIVE_ENUMS),\n-        LintId::of(exhaustive_items::EXHAUSTIVE_STRUCTS),\n-        LintId::of(exit::EXIT),\n-        LintId::of(float_literal::LOSSY_FLOAT_LITERAL),\n-        LintId::of(if_then_some_else_none::IF_THEN_SOME_ELSE_NONE),\n-        LintId::of(implicit_return::IMPLICIT_RETURN),\n-        LintId::of(indexing_slicing::INDEXING_SLICING),\n-        LintId::of(inherent_impl::MULTIPLE_INHERENT_IMPL),\n-        LintId::of(integer_division::INTEGER_DIVISION),\n-        LintId::of(let_underscore::LET_UNDERSCORE_MUST_USE),\n-        LintId::of(literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n-        LintId::of(map_err_ignore::MAP_ERR_IGNORE),\n-        LintId::of(matches::REST_PAT_IN_FULLY_BOUND_STRUCTS),\n-        LintId::of(matches::WILDCARD_ENUM_MATCH_ARM),\n-        LintId::of(mem_forget::MEM_FORGET),\n-        LintId::of(methods::CLONE_ON_REF_PTR),\n-        LintId::of(methods::EXPECT_USED),\n-        LintId::of(methods::FILETYPE_IS_FILE),\n-        LintId::of(methods::GET_UNWRAP),\n-        LintId::of(methods::UNWRAP_USED),\n-        LintId::of(misc::FLOAT_CMP_CONST),\n-        LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n-        LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n-        LintId::of(missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES),\n-        LintId::of(missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n-        LintId::of(module_style::MOD_MODULE_FILES),\n-        LintId::of(module_style::SELF_NAMED_MODULE_FILES),\n-        LintId::of(modulo_arithmetic::MODULO_ARITHMETIC),\n-        LintId::of(panic_in_result_fn::PANIC_IN_RESULT_FN),\n-        LintId::of(panic_unimplemented::PANIC),\n-        LintId::of(panic_unimplemented::TODO),\n-        LintId::of(panic_unimplemented::UNIMPLEMENTED),\n-        LintId::of(panic_unimplemented::UNREACHABLE),\n-        LintId::of(pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n-        LintId::of(same_name_method::SAME_NAME_METHOD),\n-        LintId::of(shadow::SHADOW_REUSE),\n-        LintId::of(shadow::SHADOW_SAME),\n-        LintId::of(strings::STRING_ADD),\n-        LintId::of(strings::STRING_TO_STRING),\n-        LintId::of(strings::STR_TO_STRING),\n-        LintId::of(types::RC_BUFFER),\n-        LintId::of(types::RC_MUTEX),\n-        LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n-        LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n-        LintId::of(verbose_file_reads::VERBOSE_FILE_READS),\n-        LintId::of(write::PRINT_STDERR),\n-        LintId::of(write::PRINT_STDOUT),\n-        LintId::of(write::USE_DEBUG),\n-    ]);\n-\n-    store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n-        LintId::of(attrs::INLINE_ALWAYS),\n-        LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n-        LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n-        LintId::of(bit_mask::VERBOSE_BIT_MASK),\n-        LintId::of(bytecount::NAIVE_BYTECOUNT),\n-        LintId::of(case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n-        LintId::of(casts::CAST_LOSSLESS),\n-        LintId::of(casts::CAST_POSSIBLE_TRUNCATION),\n-        LintId::of(casts::CAST_POSSIBLE_WRAP),\n-        LintId::of(casts::CAST_PRECISION_LOSS),\n-        LintId::of(casts::CAST_PTR_ALIGNMENT),\n-        LintId::of(casts::CAST_SIGN_LOSS),\n-        LintId::of(casts::PTR_AS_PTR),\n-        LintId::of(checked_conversions::CHECKED_CONVERSIONS),\n-        LintId::of(copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n-        LintId::of(copy_iterator::COPY_ITERATOR),\n-        LintId::of(default::DEFAULT_TRAIT_ACCESS),\n-        LintId::of(dereference::EXPLICIT_DEREF_METHODS),\n-        LintId::of(derive::EXPL_IMPL_CLONE_ON_COPY),\n-        LintId::of(derive::UNSAFE_DERIVE_DESERIALIZE),\n-        LintId::of(doc::DOC_MARKDOWN),\n-        LintId::of(doc::MISSING_ERRORS_DOC),\n-        LintId::of(doc::MISSING_PANICS_DOC),\n-        LintId::of(empty_enum::EMPTY_ENUM),\n-        LintId::of(enum_variants::MODULE_NAME_REPETITIONS),\n-        LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n-        LintId::of(excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n-        LintId::of(excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n-        LintId::of(functions::MUST_USE_CANDIDATE),\n-        LintId::of(functions::TOO_MANY_LINES),\n-        LintId::of(if_not_else::IF_NOT_ELSE),\n-        LintId::of(implicit_hasher::IMPLICIT_HASHER),\n-        LintId::of(implicit_saturating_sub::IMPLICIT_SATURATING_SUB),\n-        LintId::of(inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR),\n-        LintId::of(infinite_iter::MAYBE_INFINITE_ITER),\n-        LintId::of(invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS),\n-        LintId::of(items_after_statements::ITEMS_AFTER_STATEMENTS),\n-        LintId::of(iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR),\n-        LintId::of(large_stack_arrays::LARGE_STACK_ARRAYS),\n-        LintId::of(let_underscore::LET_UNDERSCORE_DROP),\n-        LintId::of(literal_representation::LARGE_DIGIT_GROUPS),\n-        LintId::of(literal_representation::UNREADABLE_LITERAL),\n-        LintId::of(loops::EXPLICIT_INTO_ITER_LOOP),\n-        LintId::of(loops::EXPLICIT_ITER_LOOP),\n-        LintId::of(macro_use::MACRO_USE_IMPORTS),\n-        LintId::of(manual_ok_or::MANUAL_OK_OR),\n-        LintId::of(match_on_vec_items::MATCH_ON_VEC_ITEMS),\n-        LintId::of(matches::MATCH_BOOL),\n-        LintId::of(matches::MATCH_SAME_ARMS),\n-        LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n-        LintId::of(matches::MATCH_WILD_ERR_ARM),\n-        LintId::of(matches::SINGLE_MATCH_ELSE),\n-        LintId::of(methods::CLONED_INSTEAD_OF_COPIED),\n-        LintId::of(methods::FILTER_MAP_NEXT),\n-        LintId::of(methods::FLAT_MAP_OPTION),\n-        LintId::of(methods::FROM_ITER_INSTEAD_OF_COLLECT),\n-        LintId::of(methods::IMPLICIT_CLONE),\n-        LintId::of(methods::INEFFICIENT_TO_STRING),\n-        LintId::of(methods::MAP_FLATTEN),\n-        LintId::of(methods::MAP_UNWRAP_OR),\n-        LintId::of(misc::FLOAT_CMP),\n-        LintId::of(misc::USED_UNDERSCORE_BINDING),\n-        LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n-        LintId::of(mut_mut::MUT_MUT),\n-        LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n-        LintId::of(needless_borrow::REF_BINDING_TO_REFERENCE),\n-        LintId::of(needless_continue::NEEDLESS_CONTINUE),\n-        LintId::of(needless_for_each::NEEDLESS_FOR_EACH),\n-        LintId::of(needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n-        LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n-        LintId::of(non_expressive_names::SIMILAR_NAMES),\n-        LintId::of(pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE),\n-        LintId::of(pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n-        LintId::of(ranges::RANGE_MINUS_ONE),\n-        LintId::of(ranges::RANGE_PLUS_ONE),\n-        LintId::of(redundant_else::REDUNDANT_ELSE),\n-        LintId::of(ref_option_ref::REF_OPTION_REF),\n-        LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n-        LintId::of(shadow::SHADOW_UNRELATED),\n-        LintId::of(strings::STRING_ADD_ASSIGN),\n-        LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n-        LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n-        LintId::of(transmute::TRANSMUTE_PTR_TO_PTR),\n-        LintId::of(types::LINKEDLIST),\n-        LintId::of(types::OPTION_OPTION),\n-        LintId::of(unicode::NON_ASCII_LITERAL),\n-        LintId::of(unicode::UNICODE_NOT_NFC),\n-        LintId::of(unit_types::LET_UNIT_VALUE),\n-        LintId::of(unnecessary_wraps::UNNECESSARY_WRAPS),\n-        LintId::of(unnested_or_patterns::UNNESTED_OR_PATTERNS),\n-        LintId::of(unused_async::UNUSED_ASYNC),\n-        LintId::of(unused_self::UNUSED_SELF),\n-        LintId::of(wildcard_imports::ENUM_GLOB_USE),\n-        LintId::of(wildcard_imports::WILDCARD_IMPORTS),\n-        LintId::of(zero_sized_map_values::ZERO_SIZED_MAP_VALUES),\n-    ]);\n+    include!(\"lib.register_lints.rs\");\n+    include!(\"lib.register_restriction.rs\");\n+    include!(\"lib.register_pedantic.rs\");\n \n     #[cfg(feature = \"internal-lints\")]\n-    store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n-        LintId::of(utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n-        LintId::of(utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n-        LintId::of(utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n-        LintId::of(utils::internal_lints::DEFAULT_LINT),\n-        LintId::of(utils::internal_lints::IF_CHAIN_STYLE),\n-        LintId::of(utils::internal_lints::INTERNING_DEFINED_SYMBOL),\n-        LintId::of(utils::internal_lints::INVALID_PATHS),\n-        LintId::of(utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n-        LintId::of(utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),\n-        LintId::of(utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n-        LintId::of(utils::internal_lints::PRODUCE_ICE),\n-        LintId::of(utils::internal_lints::UNNECESSARY_SYMBOL_STR),\n-    ]);\n-\n-    store.register_group(true, \"clippy::all\", Some(\"clippy\"), vec![\n-        LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n-        LintId::of(approx_const::APPROX_CONSTANT),\n-        LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n-        LintId::of(assign_ops::ASSIGN_OP_PATTERN),\n-        LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n-        LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n-        LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n-        LintId::of(attrs::DEPRECATED_CFG_ATTR),\n-        LintId::of(attrs::DEPRECATED_SEMVER),\n-        LintId::of(attrs::MISMATCHED_TARGET_OS),\n-        LintId::of(attrs::USELESS_ATTRIBUTE),\n-        LintId::of(bit_mask::BAD_BIT_MASK),\n-        LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n-        LintId::of(blacklisted_name::BLACKLISTED_NAME),\n-        LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n-        LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n-        LintId::of(booleans::LOGIC_BUG),\n-        LintId::of(booleans::NONMINIMAL_BOOL),\n-        LintId::of(casts::CAST_REF_TO_MUT),\n-        LintId::of(casts::CHAR_LIT_AS_U8),\n-        LintId::of(casts::FN_TO_NUMERIC_CAST),\n-        LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-        LintId::of(casts::UNNECESSARY_CAST),\n-        LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n-        LintId::of(collapsible_if::COLLAPSIBLE_IF),\n-        LintId::of(collapsible_match::COLLAPSIBLE_MATCH),\n-        LintId::of(comparison_chain::COMPARISON_CHAIN),\n-        LintId::of(copies::IFS_SAME_COND),\n-        LintId::of(copies::IF_SAME_THEN_ELSE),\n-        LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n-        LintId::of(derivable_impls::DERIVABLE_IMPLS),\n-        LintId::of(derive::DERIVE_HASH_XOR_EQ),\n-        LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n-        LintId::of(doc::MISSING_SAFETY_DOC),\n-        LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n-        LintId::of(double_comparison::DOUBLE_COMPARISONS),\n-        LintId::of(double_parens::DOUBLE_PARENS),\n-        LintId::of(drop_forget_ref::DROP_COPY),\n-        LintId::of(drop_forget_ref::DROP_REF),\n-        LintId::of(drop_forget_ref::FORGET_COPY),\n-        LintId::of(drop_forget_ref::FORGET_REF),\n-        LintId::of(duration_subsec::DURATION_SUBSEC),\n-        LintId::of(entry::MAP_ENTRY),\n-        LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n-        LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n-        LintId::of(enum_variants::MODULE_INCEPTION),\n-        LintId::of(eq_op::EQ_OP),\n-        LintId::of(eq_op::OP_REF),\n-        LintId::of(erasing_op::ERASING_OP),\n-        LintId::of(escape::BOXED_LOCAL),\n-        LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n-        LintId::of(eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n-        LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n-        LintId::of(explicit_write::EXPLICIT_WRITE),\n-        LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n-        LintId::of(float_literal::EXCESSIVE_PRECISION),\n-        LintId::of(format::USELESS_FORMAT),\n-        LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n-        LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n-        LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n-        LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n-        LintId::of(from_over_into::FROM_OVER_INTO),\n-        LintId::of(from_str_radix_10::FROM_STR_RADIX_10),\n-        LintId::of(functions::DOUBLE_MUST_USE),\n-        LintId::of(functions::MUST_USE_UNIT),\n-        LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n-        LintId::of(functions::RESULT_UNIT_ERR),\n-        LintId::of(functions::TOO_MANY_ARGUMENTS),\n-        LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n-        LintId::of(identity_op::IDENTITY_OP),\n-        LintId::of(if_let_mutex::IF_LET_MUTEX),\n-        LintId::of(if_then_panic::IF_THEN_PANIC),\n-        LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n-        LintId::of(infinite_iter::INFINITE_ITER),\n-        LintId::of(inherent_to_string::INHERENT_TO_STRING),\n-        LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n-        LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n-        LintId::of(int_plus_one::INT_PLUS_ONE),\n-        LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n-        LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n-        LintId::of(len_zero::COMPARISON_TO_EMPTY),\n-        LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n-        LintId::of(len_zero::LEN_ZERO),\n-        LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n-        LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n-        LintId::of(lifetimes::NEEDLESS_LIFETIMES),\n-        LintId::of(literal_representation::INCONSISTENT_DIGIT_GROUPING),\n-        LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n-        LintId::of(literal_representation::UNUSUAL_BYTE_GROUPINGS),\n-        LintId::of(loops::EMPTY_LOOP),\n-        LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n-        LintId::of(loops::FOR_KV_MAP),\n-        LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n-        LintId::of(loops::ITER_NEXT_LOOP),\n-        LintId::of(loops::MANUAL_FLATTEN),\n-        LintId::of(loops::MANUAL_MEMCPY),\n-        LintId::of(loops::MUT_RANGE_BOUND),\n-        LintId::of(loops::NEEDLESS_COLLECT),\n-        LintId::of(loops::NEEDLESS_RANGE_LOOP),\n-        LintId::of(loops::NEVER_LOOP),\n-        LintId::of(loops::SAME_ITEM_PUSH),\n-        LintId::of(loops::SINGLE_ELEMENT_LOOP),\n-        LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n-        LintId::of(loops::WHILE_LET_LOOP),\n-        LintId::of(loops::WHILE_LET_ON_ITERATOR),\n-        LintId::of(main_recursion::MAIN_RECURSION),\n-        LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n-        LintId::of(manual_map::MANUAL_MAP),\n-        LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n-        LintId::of(manual_strip::MANUAL_STRIP),\n-        LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n-        LintId::of(map_clone::MAP_CLONE),\n-        LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n-        LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n-        LintId::of(match_result_ok::MATCH_RESULT_OK),\n-        LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n-        LintId::of(matches::MATCH_AS_REF),\n-        LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n-        LintId::of(matches::MATCH_OVERLAPPING_ARM),\n-        LintId::of(matches::MATCH_REF_PATS),\n-        LintId::of(matches::MATCH_SINGLE_BINDING),\n-        LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n-        LintId::of(matches::SINGLE_MATCH),\n-        LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n-        LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n-        LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n-        LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n-        LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n-        LintId::of(methods::BIND_INSTEAD_OF_MAP),\n-        LintId::of(methods::BYTES_NTH),\n-        LintId::of(methods::CHARS_LAST_CMP),\n-        LintId::of(methods::CHARS_NEXT_CMP),\n-        LintId::of(methods::CLONE_DOUBLE_REF),\n-        LintId::of(methods::CLONE_ON_COPY),\n-        LintId::of(methods::EXPECT_FUN_CALL),\n-        LintId::of(methods::EXTEND_WITH_DRAIN),\n-        LintId::of(methods::FILTER_MAP_IDENTITY),\n-        LintId::of(methods::FILTER_NEXT),\n-        LintId::of(methods::FLAT_MAP_IDENTITY),\n-        LintId::of(methods::INSPECT_FOR_EACH),\n-        LintId::of(methods::INTO_ITER_ON_REF),\n-        LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n-        LintId::of(methods::ITER_CLONED_COLLECT),\n-        LintId::of(methods::ITER_COUNT),\n-        LintId::of(methods::ITER_NEXT_SLICE),\n-        LintId::of(methods::ITER_NTH),\n-        LintId::of(methods::ITER_NTH_ZERO),\n-        LintId::of(methods::ITER_SKIP_NEXT),\n-        LintId::of(methods::MANUAL_FILTER_MAP),\n-        LintId::of(methods::MANUAL_FIND_MAP),\n-        LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n-        LintId::of(methods::MANUAL_SPLIT_ONCE),\n-        LintId::of(methods::MANUAL_STR_REPEAT),\n-        LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n-        LintId::of(methods::MAP_IDENTITY),\n-        LintId::of(methods::NEW_RET_NO_SELF),\n-        LintId::of(methods::OK_EXPECT),\n-        LintId::of(methods::OPTION_AS_REF_DEREF),\n-        LintId::of(methods::OPTION_FILTER_MAP),\n-        LintId::of(methods::OPTION_MAP_OR_NONE),\n-        LintId::of(methods::OR_FUN_CALL),\n-        LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n-        LintId::of(methods::SEARCH_IS_SOME),\n-        LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),\n-        LintId::of(methods::SINGLE_CHAR_ADD_STR),\n-        LintId::of(methods::SINGLE_CHAR_PATTERN),\n-        LintId::of(methods::SKIP_WHILE_NEXT),\n-        LintId::of(methods::STRING_EXTEND_CHARS),\n-        LintId::of(methods::SUSPICIOUS_MAP),\n-        LintId::of(methods::SUSPICIOUS_SPLITN),\n-        LintId::of(methods::UNINIT_ASSUMED_INIT),\n-        LintId::of(methods::UNNECESSARY_FILTER_MAP),\n-        LintId::of(methods::UNNECESSARY_FOLD),\n-        LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n-        LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n-        LintId::of(methods::USELESS_ASREF),\n-        LintId::of(methods::WRONG_SELF_CONVENTION),\n-        LintId::of(methods::ZST_OFFSET),\n-        LintId::of(minmax::MIN_MAX),\n-        LintId::of(misc::CMP_NAN),\n-        LintId::of(misc::CMP_OWNED),\n-        LintId::of(misc::MODULO_ONE),\n-        LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n-        LintId::of(misc::TOPLEVEL_REF_ARG),\n-        LintId::of(misc::ZERO_PTR),\n-        LintId::of(misc_early::BUILTIN_TYPE_SHADOW),\n-        LintId::of(misc_early::DOUBLE_NEG),\n-        LintId::of(misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n-        LintId::of(misc_early::MIXED_CASE_HEX_LITERALS),\n-        LintId::of(misc_early::REDUNDANT_PATTERN),\n-        LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n-        LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n-        LintId::of(mut_key::MUTABLE_KEY_TYPE),\n-        LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n-        LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n-        LintId::of(mutex_atomic::MUTEX_ATOMIC),\n-        LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n-        LintId::of(needless_bool::BOOL_COMPARISON),\n-        LintId::of(needless_bool::NEEDLESS_BOOL),\n-        LintId::of(needless_borrow::NEEDLESS_BORROW),\n-        LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n-        LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n-        LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n-        LintId::of(needless_update::NEEDLESS_UPDATE),\n-        LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n-        LintId::of(neg_multiply::NEG_MULTIPLY),\n-        LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n-        LintId::of(no_effect::NO_EFFECT),\n-        LintId::of(no_effect::UNNECESSARY_OPERATION),\n-        LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n-        LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n-        LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n-        LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n-        LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n-        LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n-        LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n-        LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n-        LintId::of(precedence::PRECEDENCE),\n-        LintId::of(ptr::CMP_NULL),\n-        LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n-        LintId::of(ptr::MUT_FROM_REF),\n-        LintId::of(ptr::PTR_ARG),\n-        LintId::of(ptr_eq::PTR_EQ),\n-        LintId::of(ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n-        LintId::of(question_mark::QUESTION_MARK),\n-        LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n-        LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n-        LintId::of(ranges::REVERSED_EMPTY_RANGES),\n-        LintId::of(redundant_clone::REDUNDANT_CLONE),\n-        LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n-        LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),\n-        LintId::of(redundant_slicing::REDUNDANT_SLICING),\n-        LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n-        LintId::of(reference::DEREF_ADDROF),\n-        LintId::of(reference::REF_IN_DEREF),\n-        LintId::of(regex::INVALID_REGEX),\n-        LintId::of(repeat_once::REPEAT_ONCE),\n-        LintId::of(returns::LET_AND_RETURN),\n-        LintId::of(returns::NEEDLESS_RETURN),\n-        LintId::of(self_assignment::SELF_ASSIGNMENT),\n-        LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n-        LintId::of(serde_api::SERDE_API_MISUSE),\n-        LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n-        LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n-        LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-        LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n-        LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n-        LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n-        LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n-        LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n-        LintId::of(swap::ALMOST_SWAPPED),\n-        LintId::of(swap::MANUAL_SWAP),\n-        LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n-        LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n-        LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n-        LintId::of(to_string_in_display::TO_STRING_IN_DISPLAY),\n-        LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n-        LintId::of(transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n-        LintId::of(transmute::TRANSMUTE_BYTES_TO_STR),\n-        LintId::of(transmute::TRANSMUTE_FLOAT_TO_INT),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n-        LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n-        LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n-        LintId::of(transmute::WRONG_TRANSMUTE),\n-        LintId::of(transmuting_null::TRANSMUTING_NULL),\n-        LintId::of(try_err::TRY_ERR),\n-        LintId::of(types::BORROWED_BOX),\n-        LintId::of(types::BOX_COLLECTION),\n-        LintId::of(types::REDUNDANT_ALLOCATION),\n-        LintId::of(types::TYPE_COMPLEXITY),\n-        LintId::of(types::VEC_BOX),\n-        LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n-        LintId::of(unicode::INVISIBLE_CHARACTERS),\n-        LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n-        LintId::of(unit_types::UNIT_ARG),\n-        LintId::of(unit_types::UNIT_CMP),\n-        LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),\n-        LintId::of(unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n-        LintId::of(unnecessary_sort_by::UNNECESSARY_SORT_BY),\n-        LintId::of(unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n-        LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n-        LintId::of(unused_unit::UNUSED_UNIT),\n-        LintId::of(unwrap::PANICKING_UNWRAP),\n-        LintId::of(unwrap::UNNECESSARY_UNWRAP),\n-        LintId::of(upper_case_acronyms::UPPER_CASE_ACRONYMS),\n-        LintId::of(useless_conversion::USELESS_CONVERSION),\n-        LintId::of(vec::USELESS_VEC),\n-        LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n-        LintId::of(vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n-        LintId::of(write::PRINTLN_EMPTY_STRING),\n-        LintId::of(write::PRINT_LITERAL),\n-        LintId::of(write::PRINT_WITH_NEWLINE),\n-        LintId::of(write::WRITELN_EMPTY_STRING),\n-        LintId::of(write::WRITE_LITERAL),\n-        LintId::of(write::WRITE_WITH_NEWLINE),\n-        LintId::of(zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n-    ]);\n-\n-    store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n-        LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n-        LintId::of(assign_ops::ASSIGN_OP_PATTERN),\n-        LintId::of(blacklisted_name::BLACKLISTED_NAME),\n-        LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n-        LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n-        LintId::of(casts::FN_TO_NUMERIC_CAST),\n-        LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-        LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n-        LintId::of(collapsible_if::COLLAPSIBLE_IF),\n-        LintId::of(collapsible_match::COLLAPSIBLE_MATCH),\n-        LintId::of(comparison_chain::COMPARISON_CHAIN),\n-        LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n-        LintId::of(doc::MISSING_SAFETY_DOC),\n-        LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n-        LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n-        LintId::of(enum_variants::MODULE_INCEPTION),\n-        LintId::of(eq_op::OP_REF),\n-        LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n-        LintId::of(float_literal::EXCESSIVE_PRECISION),\n-        LintId::of(from_over_into::FROM_OVER_INTO),\n-        LintId::of(from_str_radix_10::FROM_STR_RADIX_10),\n-        LintId::of(functions::DOUBLE_MUST_USE),\n-        LintId::of(functions::MUST_USE_UNIT),\n-        LintId::of(functions::RESULT_UNIT_ERR),\n-        LintId::of(if_then_panic::IF_THEN_PANIC),\n-        LintId::of(inherent_to_string::INHERENT_TO_STRING),\n-        LintId::of(len_zero::COMPARISON_TO_EMPTY),\n-        LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n-        LintId::of(len_zero::LEN_ZERO),\n-        LintId::of(literal_representation::INCONSISTENT_DIGIT_GROUPING),\n-        LintId::of(literal_representation::UNUSUAL_BYTE_GROUPINGS),\n-        LintId::of(loops::FOR_KV_MAP),\n-        LintId::of(loops::NEEDLESS_RANGE_LOOP),\n-        LintId::of(loops::SAME_ITEM_PUSH),\n-        LintId::of(loops::WHILE_LET_ON_ITERATOR),\n-        LintId::of(main_recursion::MAIN_RECURSION),\n-        LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n-        LintId::of(manual_map::MANUAL_MAP),\n-        LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n-        LintId::of(map_clone::MAP_CLONE),\n-        LintId::of(match_result_ok::MATCH_RESULT_OK),\n-        LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n-        LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n-        LintId::of(matches::MATCH_OVERLAPPING_ARM),\n-        LintId::of(matches::MATCH_REF_PATS),\n-        LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n-        LintId::of(matches::SINGLE_MATCH),\n-        LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n-        LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n-        LintId::of(methods::BYTES_NTH),\n-        LintId::of(methods::CHARS_LAST_CMP),\n-        LintId::of(methods::CHARS_NEXT_CMP),\n-        LintId::of(methods::INTO_ITER_ON_REF),\n-        LintId::of(methods::ITER_CLONED_COLLECT),\n-        LintId::of(methods::ITER_NEXT_SLICE),\n-        LintId::of(methods::ITER_NTH_ZERO),\n-        LintId::of(methods::ITER_SKIP_NEXT),\n-        LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n-        LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n-        LintId::of(methods::NEW_RET_NO_SELF),\n-        LintId::of(methods::OK_EXPECT),\n-        LintId::of(methods::OPTION_MAP_OR_NONE),\n-        LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n-        LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),\n-        LintId::of(methods::SINGLE_CHAR_ADD_STR),\n-        LintId::of(methods::STRING_EXTEND_CHARS),\n-        LintId::of(methods::UNNECESSARY_FOLD),\n-        LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n-        LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n-        LintId::of(methods::WRONG_SELF_CONVENTION),\n-        LintId::of(misc::TOPLEVEL_REF_ARG),\n-        LintId::of(misc::ZERO_PTR),\n-        LintId::of(misc_early::BUILTIN_TYPE_SHADOW),\n-        LintId::of(misc_early::DOUBLE_NEG),\n-        LintId::of(misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n-        LintId::of(misc_early::MIXED_CASE_HEX_LITERALS),\n-        LintId::of(misc_early::REDUNDANT_PATTERN),\n-        LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n-        LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n-        LintId::of(needless_borrow::NEEDLESS_BORROW),\n-        LintId::of(neg_multiply::NEG_MULTIPLY),\n-        LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n-        LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n-        LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n-        LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n-        LintId::of(ptr::CMP_NULL),\n-        LintId::of(ptr::PTR_ARG),\n-        LintId::of(ptr_eq::PTR_EQ),\n-        LintId::of(question_mark::QUESTION_MARK),\n-        LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n-        LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),\n-        LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n-        LintId::of(returns::LET_AND_RETURN),\n-        LintId::of(returns::NEEDLESS_RETURN),\n-        LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n-        LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n-        LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n-        LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n-        LintId::of(try_err::TRY_ERR),\n-        LintId::of(unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n-        LintId::of(unused_unit::UNUSED_UNIT),\n-        LintId::of(upper_case_acronyms::UPPER_CASE_ACRONYMS),\n-        LintId::of(write::PRINTLN_EMPTY_STRING),\n-        LintId::of(write::PRINT_LITERAL),\n-        LintId::of(write::PRINT_WITH_NEWLINE),\n-        LintId::of(write::WRITELN_EMPTY_STRING),\n-        LintId::of(write::WRITE_LITERAL),\n-        LintId::of(write::WRITE_WITH_NEWLINE),\n-    ]);\n-\n-    store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n-        LintId::of(attrs::DEPRECATED_CFG_ATTR),\n-        LintId::of(booleans::NONMINIMAL_BOOL),\n-        LintId::of(casts::CHAR_LIT_AS_U8),\n-        LintId::of(casts::UNNECESSARY_CAST),\n-        LintId::of(derivable_impls::DERIVABLE_IMPLS),\n-        LintId::of(double_comparison::DOUBLE_COMPARISONS),\n-        LintId::of(double_parens::DOUBLE_PARENS),\n-        LintId::of(duration_subsec::DURATION_SUBSEC),\n-        LintId::of(eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n-        LintId::of(explicit_write::EXPLICIT_WRITE),\n-        LintId::of(format::USELESS_FORMAT),\n-        LintId::of(functions::TOO_MANY_ARGUMENTS),\n-        LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n-        LintId::of(identity_op::IDENTITY_OP),\n-        LintId::of(int_plus_one::INT_PLUS_ONE),\n-        LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n-        LintId::of(lifetimes::NEEDLESS_LIFETIMES),\n-        LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n-        LintId::of(loops::MANUAL_FLATTEN),\n-        LintId::of(loops::SINGLE_ELEMENT_LOOP),\n-        LintId::of(loops::WHILE_LET_LOOP),\n-        LintId::of(manual_strip::MANUAL_STRIP),\n-        LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n-        LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n-        LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n-        LintId::of(matches::MATCH_AS_REF),\n-        LintId::of(matches::MATCH_SINGLE_BINDING),\n-        LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n-        LintId::of(methods::BIND_INSTEAD_OF_MAP),\n-        LintId::of(methods::CLONE_ON_COPY),\n-        LintId::of(methods::FILTER_MAP_IDENTITY),\n-        LintId::of(methods::FILTER_NEXT),\n-        LintId::of(methods::FLAT_MAP_IDENTITY),\n-        LintId::of(methods::INSPECT_FOR_EACH),\n-        LintId::of(methods::ITER_COUNT),\n-        LintId::of(methods::MANUAL_FILTER_MAP),\n-        LintId::of(methods::MANUAL_FIND_MAP),\n-        LintId::of(methods::MANUAL_SPLIT_ONCE),\n-        LintId::of(methods::MAP_IDENTITY),\n-        LintId::of(methods::OPTION_AS_REF_DEREF),\n-        LintId::of(methods::OPTION_FILTER_MAP),\n-        LintId::of(methods::SEARCH_IS_SOME),\n-        LintId::of(methods::SKIP_WHILE_NEXT),\n-        LintId::of(methods::UNNECESSARY_FILTER_MAP),\n-        LintId::of(methods::USELESS_ASREF),\n-        LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n-        LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n-        LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n-        LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n-        LintId::of(needless_bool::BOOL_COMPARISON),\n-        LintId::of(needless_bool::NEEDLESS_BOOL),\n-        LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n-        LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n-        LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n-        LintId::of(needless_update::NEEDLESS_UPDATE),\n-        LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n-        LintId::of(no_effect::NO_EFFECT),\n-        LintId::of(no_effect::UNNECESSARY_OPERATION),\n-        LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n-        LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n-        LintId::of(precedence::PRECEDENCE),\n-        LintId::of(ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n-        LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n-        LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n-        LintId::of(redundant_slicing::REDUNDANT_SLICING),\n-        LintId::of(reference::DEREF_ADDROF),\n-        LintId::of(reference::REF_IN_DEREF),\n-        LintId::of(repeat_once::REPEAT_ONCE),\n-        LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n-        LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n-        LintId::of(swap::MANUAL_SWAP),\n-        LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n-        LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n-        LintId::of(transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n-        LintId::of(transmute::TRANSMUTE_BYTES_TO_STR),\n-        LintId::of(transmute::TRANSMUTE_FLOAT_TO_INT),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n-        LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n-        LintId::of(types::BORROWED_BOX),\n-        LintId::of(types::TYPE_COMPLEXITY),\n-        LintId::of(types::VEC_BOX),\n-        LintId::of(unit_types::UNIT_ARG),\n-        LintId::of(unnecessary_sort_by::UNNECESSARY_SORT_BY),\n-        LintId::of(unwrap::UNNECESSARY_UNWRAP),\n-        LintId::of(useless_conversion::USELESS_CONVERSION),\n-        LintId::of(zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n-    ]);\n-\n-    store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n-        LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n-        LintId::of(approx_const::APPROX_CONSTANT),\n-        LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n-        LintId::of(attrs::DEPRECATED_SEMVER),\n-        LintId::of(attrs::MISMATCHED_TARGET_OS),\n-        LintId::of(attrs::USELESS_ATTRIBUTE),\n-        LintId::of(bit_mask::BAD_BIT_MASK),\n-        LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n-        LintId::of(booleans::LOGIC_BUG),\n-        LintId::of(casts::CAST_REF_TO_MUT),\n-        LintId::of(copies::IFS_SAME_COND),\n-        LintId::of(copies::IF_SAME_THEN_ELSE),\n-        LintId::of(derive::DERIVE_HASH_XOR_EQ),\n-        LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n-        LintId::of(drop_forget_ref::DROP_COPY),\n-        LintId::of(drop_forget_ref::DROP_REF),\n-        LintId::of(drop_forget_ref::FORGET_COPY),\n-        LintId::of(drop_forget_ref::FORGET_REF),\n-        LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n-        LintId::of(eq_op::EQ_OP),\n-        LintId::of(erasing_op::ERASING_OP),\n-        LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n-        LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n-        LintId::of(if_let_mutex::IF_LET_MUTEX),\n-        LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n-        LintId::of(infinite_iter::INFINITE_ITER),\n-        LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n-        LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n-        LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n-        LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n-        LintId::of(loops::ITER_NEXT_LOOP),\n-        LintId::of(loops::NEVER_LOOP),\n-        LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n-        LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n-        LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n-        LintId::of(methods::CLONE_DOUBLE_REF),\n-        LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n-        LintId::of(methods::SUSPICIOUS_SPLITN),\n-        LintId::of(methods::UNINIT_ASSUMED_INIT),\n-        LintId::of(methods::ZST_OFFSET),\n-        LintId::of(minmax::MIN_MAX),\n-        LintId::of(misc::CMP_NAN),\n-        LintId::of(misc::MODULO_ONE),\n-        LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n-        LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n-        LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n-        LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n-        LintId::of(ptr::MUT_FROM_REF),\n-        LintId::of(ranges::REVERSED_EMPTY_RANGES),\n-        LintId::of(regex::INVALID_REGEX),\n-        LintId::of(self_assignment::SELF_ASSIGNMENT),\n-        LintId::of(serde_api::SERDE_API_MISUSE),\n-        LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n-        LintId::of(swap::ALMOST_SWAPPED),\n-        LintId::of(to_string_in_display::TO_STRING_IN_DISPLAY),\n-        LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n-        LintId::of(transmute::WRONG_TRANSMUTE),\n-        LintId::of(transmuting_null::TRANSMUTING_NULL),\n-        LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n-        LintId::of(unicode::INVISIBLE_CHARACTERS),\n-        LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n-        LintId::of(unit_types::UNIT_CMP),\n-        LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),\n-        LintId::of(unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n-        LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n-        LintId::of(unwrap::PANICKING_UNWRAP),\n-        LintId::of(vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n-    ]);\n-\n-    store.register_group(true, \"clippy::suspicious\", None, vec![\n-        LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n-        LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n-        LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n-        LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n-        LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n-        LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n-        LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n-        LintId::of(loops::EMPTY_LOOP),\n-        LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n-        LintId::of(loops::MUT_RANGE_BOUND),\n-        LintId::of(methods::SUSPICIOUS_MAP),\n-        LintId::of(mut_key::MUTABLE_KEY_TYPE),\n-        LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n-        LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n-    ]);\n-\n-    store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n-        LintId::of(entry::MAP_ENTRY),\n-        LintId::of(escape::BOXED_LOCAL),\n-        LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n-        LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n-        LintId::of(loops::MANUAL_MEMCPY),\n-        LintId::of(loops::NEEDLESS_COLLECT),\n-        LintId::of(methods::EXPECT_FUN_CALL),\n-        LintId::of(methods::EXTEND_WITH_DRAIN),\n-        LintId::of(methods::ITER_NTH),\n-        LintId::of(methods::MANUAL_STR_REPEAT),\n-        LintId::of(methods::OR_FUN_CALL),\n-        LintId::of(methods::SINGLE_CHAR_PATTERN),\n-        LintId::of(misc::CMP_OWNED),\n-        LintId::of(mutex_atomic::MUTEX_ATOMIC),\n-        LintId::of(redundant_clone::REDUNDANT_CLONE),\n-        LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-        LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n-        LintId::of(types::BOX_COLLECTION),\n-        LintId::of(types::REDUNDANT_ALLOCATION),\n-        LintId::of(vec::USELESS_VEC),\n-        LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n-    ]);\n-\n-    store.register_group(true, \"clippy::cargo\", Some(\"clippy_cargo\"), vec![\n-        LintId::of(cargo_common_metadata::CARGO_COMMON_METADATA),\n-        LintId::of(feature_name::NEGATIVE_FEATURE_NAMES),\n-        LintId::of(feature_name::REDUNDANT_FEATURE_NAMES),\n-        LintId::of(multiple_crate_versions::MULTIPLE_CRATE_VERSIONS),\n-        LintId::of(wildcard_dependencies::WILDCARD_DEPENDENCIES),\n-    ]);\n-\n-    store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n-        LintId::of(attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n-        LintId::of(cognitive_complexity::COGNITIVE_COMPLEXITY),\n-        LintId::of(copies::BRANCHES_SHARING_CODE),\n-        LintId::of(disallowed_method::DISALLOWED_METHOD),\n-        LintId::of(disallowed_type::DISALLOWED_TYPE),\n-        LintId::of(fallible_impl_from::FALLIBLE_IMPL_FROM),\n-        LintId::of(floating_point_arithmetic::IMPRECISE_FLOPS),\n-        LintId::of(floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n-        LintId::of(future_not_send::FUTURE_NOT_SEND),\n-        LintId::of(let_if_seq::USELESS_LET_IF_SEQ),\n-        LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n-        LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n-        LintId::of(mutex_atomic::MUTEX_INTEGER),\n-        LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n-        LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n-        LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n-        LintId::of(redundant_pub_crate::REDUNDANT_PUB_CRATE),\n-        LintId::of(regex::TRIVIAL_REGEX),\n-        LintId::of(strings::STRING_LIT_AS_BYTES),\n-        LintId::of(suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n-        LintId::of(transmute::USELESS_TRANSMUTE),\n-        LintId::of(use_self::USE_SELF),\n-    ]);\n+    include!(\"lib.register_internal.rs\");\n+\n+    include!(\"lib.register_all.rs\");\n+    include!(\"lib.register_style.rs\");\n+    include!(\"lib.register_complexity.rs\");\n+    include!(\"lib.register_correctness.rs\");\n+    include!(\"lib.register_suspicious.rs\");\n+    include!(\"lib.register_perf.rs\");\n+    include!(\"lib.register_cargo.rs\");\n+    include!(\"lib.register_nursery.rs\");\n \n     #[cfg(feature = \"metadata-collector-lint\")]\n     {"}, {"sha": "5dd2ba3d5f53b92cdcbd2a967d264e64a5428fa0", "filename": "util/etc/pre-commit.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/984d4661c7ea776a6ef7044e69666ef056bd5000/util%2Fetc%2Fpre-commit.sh", "raw_url": "https://github.com/rust-lang/rust/raw/984d4661c7ea776a6ef7044e69666ef056bd5000/util%2Fetc%2Fpre-commit.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fetc%2Fpre-commit.sh?ref=984d4661c7ea776a6ef7044e69666ef056bd5000", "patch": "@@ -6,6 +6,7 @@ set -e\n # Update lints\n cargo dev update_lints\n git add clippy_lints/src/lib.rs\n+git add clippy_lints/src/lib.*.rs\n \n # Formatting:\n #     Git will not automatically add the formatted code to the staged changes once"}]}