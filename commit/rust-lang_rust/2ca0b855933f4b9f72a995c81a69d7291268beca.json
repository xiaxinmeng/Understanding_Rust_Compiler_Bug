{"sha": "2ca0b855933f4b9f72a995c81a69d7291268beca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYTBiODU1OTMzZjRiOWY3MmE5OTVjODFhNjlkNzI5MTI2OGJlY2E=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-16T14:43:42Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-11-13T10:19:25Z"}, "message": "Allocate less in lower_block_noalloc", "tree": {"sha": "6682f5c2e2ba2961408e4343c218acf8e5b9236b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6682f5c2e2ba2961408e4343c218acf8e5b9236b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca0b855933f4b9f72a995c81a69d7291268beca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca0b855933f4b9f72a995c81a69d7291268beca", "html_url": "https://github.com/rust-lang/rust/commit/2ca0b855933f4b9f72a995c81a69d7291268beca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca0b855933f4b9f72a995c81a69d7291268beca/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660d8a6550a126797aa66a417137e39a5639451b", "url": "https://api.github.com/repos/rust-lang/rust/commits/660d8a6550a126797aa66a417137e39a5639451b", "html_url": "https://github.com/rust-lang/rust/commit/660d8a6550a126797aa66a417137e39a5639451b"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "ad3d3efe46a4f59624ef2de6acfd4f743b5a329d", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2ca0b855933f4b9f72a995c81a69d7291268beca/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca0b855933f4b9f72a995c81a69d7291268beca/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=2ca0b855933f4b9f72a995c81a69d7291268beca", "patch": "@@ -2312,29 +2312,30 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn lower_block_noalloc(&mut self, b: &Block, targeted_by_break: bool) -> hir::Block<'hir> {\n-        let mut stmts = vec![];\n         let mut expr: Option<&'hir _> = None;\n \n-        for (index, stmt) in b.stmts.iter().enumerate() {\n-            if index == b.stmts.len() - 1 {\n-                if let StmtKind::Expr(ref e) = stmt.kind {\n-                    expr = Some(self.lower_expr(e));\n-                } else {\n-                    stmts.extend(self.lower_stmt(stmt));\n-                }\n-            } else {\n-                stmts.extend(self.lower_stmt(stmt));\n-            }\n-        }\n+        let stmts = self.arena.alloc_from_iter(\n+            b.stmts\n+                .iter()\n+                .enumerate()\n+                .filter_map(|(index, stmt)| {\n+                    if index == b.stmts.len() - 1 {\n+                        if let StmtKind::Expr(ref e) = stmt.kind {\n+                            expr = Some(self.lower_expr(e));\n+                            None\n+                        } else {\n+                            Some(self.lower_stmt(stmt))\n+                        }\n+                    } else {\n+                        Some(self.lower_stmt(stmt))\n+                    }\n+                })\n+                .flatten(),\n+        );\n+        let rules = self.lower_block_check_mode(&b.rules);\n+        let hir_id = self.lower_node_id(b.id);\n \n-        hir::Block {\n-            hir_id: self.lower_node_id(b.id),\n-            stmts: self.arena.alloc_from_iter(stmts),\n-            expr,\n-            rules: self.lower_block_check_mode(&b.rules),\n-            span: b.span,\n-            targeted_by_break,\n-        }\n+        hir::Block { hir_id, stmts, expr, rules, span: b.span, targeted_by_break }\n     }\n \n     /// Lowers a block directly to an expression, presuming that it"}]}