{"sha": "b87e8eae29014ed3f07cc6c736100021facd8d48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4N2U4ZWFlMjkwMTRlZDNmMDdjYzZjNzM2MTAwMDIxZmFjZDhkNDg=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-10T10:25:23Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-11T15:24:01Z"}, "message": "Check associated opaque types in check_opaque_types", "tree": {"sha": "10bb17cfbacb5f41d0ece8c4946d5b03cf4dbcc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10bb17cfbacb5f41d0ece8c4946d5b03cf4dbcc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b87e8eae29014ed3f07cc6c736100021facd8d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b87e8eae29014ed3f07cc6c736100021facd8d48", "html_url": "https://github.com/rust-lang/rust/commit/b87e8eae29014ed3f07cc6c736100021facd8d48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b87e8eae29014ed3f07cc6c736100021facd8d48/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50c0192c64241d723066add22c53d472e2b9cba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c0192c64241d723066add22c53d472e2b9cba9", "html_url": "https://github.com/rust-lang/rust/commit/50c0192c64241d723066add22c53d472e2b9cba9"}], "stats": {"total": 85, "additions": 58, "deletions": 27}, "files": [{"sha": "5707127340d87fa92bec7359fc80fcb08cf0635b", "filename": "src/librustc_mir/borrow_check/type_check/free_region_relations.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=b87e8eae29014ed3f07cc6c736100021facd8d48", "patch": "@@ -259,7 +259,13 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n                     .param_env\n                     .and(type_op::normalize::Normalize::new(ty))\n                     .fully_perform(self.infcx)\n-                    .unwrap_or_else(|_| bug!(\"failed to normalize {:?}\", ty));\n+                    .unwrap_or_else(|_| {\n+                        self.infcx\n+                            .tcx\n+                            .sess\n+                            .delay_span_bug(DUMMY_SP, &format!(\"failed to normalize {:?}\", ty));\n+                        (self.infcx.tcx.types.err, None)\n+                    });\n                 let constraints2 = self.add_implied_bounds(ty);\n                 normalized_inputs_and_output.push(ty);\n                 constraints1.into_iter().chain(constraints2)"}, {"sha": "8a83952c4fc7f832d64f7775cf9670acd07fb346", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b87e8eae29014ed3f07cc6c736100021facd8d48", "patch": "@@ -806,7 +806,11 @@ fn check_where_clauses<'tcx, 'fcx>(\n \n     let mut predicates = predicates.instantiate_identity(fcx.tcx);\n \n-    if let Some((return_ty, span)) = return_ty {\n+    if let Some((mut return_ty, span)) = return_ty {\n+        if return_ty.has_infer_types_or_consts() {\n+            fcx.select_obligations_where_possible(false, |_| {});\n+            return_ty = fcx.resolve_vars_if_possible(&return_ty);\n+        }\n         let opaque_types = check_opaque_types(tcx, fcx, def_id.expect_local(), span, return_ty);\n         for _ in 0..opaque_types.len() {\n             predicates.spans.push(span);\n@@ -893,10 +897,16 @@ fn check_opaque_types<'fcx, 'tcx>(\n                 trace!(\"check_opaque_types: opaque_ty, {:?}, {:?}\", def_id, substs);\n                 let generics = tcx.generics_of(def_id);\n                 // Only check named `impl Trait` types defined in this crate.\n-                // FIXME(eddyb) is  `generics.parent.is_none()` correct? It seems\n-                // potentially risky wrt associated types in `impl`s.\n-                if generics.parent.is_none() && def_id.is_local() {\n+                if !def_id.is_local() {\n+                    return ty;\n+                }\n                     let opaque_hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n+                if let hir::ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn: Some(_), .. }) =\n+                    tcx.hir().expect_item(opaque_hir_id).kind\n+                {\n+                    // Don't check return position impl trait.\n+                    return ty;\n+                }\n                     if may_define_opaque_type(tcx, fn_def_id, opaque_hir_id) {\n                         trace!(\"check_opaque_types: may define, generics={:#?}\", generics);\n                         let mut seen_params: FxHashMap<_, Vec<_>> = FxHashMap::default();\n@@ -924,9 +934,7 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                     true\n                                 }\n \n-                                GenericArgKind::Const(ct) => {\n-                                    matches!(ct.val, ty::ConstKind::Param(_))\n-                                }\n+                            GenericArgKind::Const(ct) => matches!(ct.val, ty::ConstKind::Param(_)),\n                             };\n \n                             if arg_is_param {\n@@ -988,7 +996,6 @@ fn check_opaque_types<'fcx, 'tcx>(\n                             substituted_predicates.push(substituted_pred);\n                         }\n                     }\n-                } // if is_named_opaque_type\n             } // if let Opaque\n             ty\n         },"}, {"sha": "bc6543a9229db7ea8f2511646d820f79a2a81fb5", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs?ref=b87e8eae29014ed3f07cc6c736100021facd8d48", "patch": "@@ -0,0 +1,18 @@\n+// Ensure that we don't ICE if associated type impl trait is used in an impl\n+// with an unconstrained type parameter.\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait X {\n+    type I;\n+    fn f() -> Self::I;\n+}\n+\n+impl<T> X for () {\n+    type I = impl Sized;\n+    //~^ ERROR could not find defining uses\n+    fn f() -> Self::I {}\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "e8b677113dba779ad5703c4c21a4ddcd920374d4", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr?ref=b87e8eae29014ed3f07cc6c736100021facd8d48", "patch": "@@ -0,0 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/impl-with-unconstrained-param.rs:14:23\n+   |\n+LL |     fn f() -> Self::I {}\n+   |                       ^^ cannot infer type for type parameter `T`\n+\n+error: could not find defining uses\n+  --> $DIR/impl-with-unconstrained-param.rs:12:14\n+   |\n+LL |     type I = impl Sized;\n+   |              ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "78def0d1136de8c5e7d0c0afde4b3a57ce2bbe2e", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=b87e8eae29014ed3f07cc6c736100021facd8d48", "patch": "@@ -17,11 +17,8 @@ where\n {\n     type BitsIter = IterBitsIter<T, E, u8>;\n     fn iter_bits(self, n: u8) -> Self::BitsIter {\n-    //~^ ERROR non-defining opaque type use in defining scope\n-    //~| ERROR non-defining opaque type use in defining scope\n-        (0u8..n)\n-            .rev()\n-            .map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n+        //~^ ERROR non-defining opaque type use in defining scope\n+        (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n     }\n }\n "}, {"sha": "66fa862ef9d7aa5e827a55eb8ed456a1d53f7baf", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b87e8eae29014ed3f07cc6c736100021facd8d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=b87e8eae29014ed3f07cc6c736100021facd8d48", "patch": "@@ -1,15 +1,3 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-60564.rs:19:34\n-   |\n-LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n-   |                                  ^^^^^^^^^^^^^^\n-   |\n-note: used non-generic type `_` for generic parameter\n-  --> $DIR/issue-60564.rs:8:22\n-   |\n-LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n-   |                      ^\n-\n error: non-defining opaque type use in defining scope\n   --> $DIR/issue-60564.rs:19:34\n    |\n@@ -22,5 +10,5 @@ note: used non-generic type `u8` for generic parameter\n LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n    |                         ^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}