{"sha": "dee8313364185046670044f2f9faa0561166f882", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZTgzMTMzNjQxODUwNDY2NzAwNDRmMmY5ZmFhMDU2MTE2NmY4ODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-19T04:56:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-19T04:56:10Z"}, "message": "auto merge of #16573 : ruud-v-a/rust/timespec-arithmetic, r=alexcrichton\n\nThis implements `Add` and `Sub` for `Timespec`, which enables `Timespec` to be used as a time span. For example:\r\n\r\n```rust\r\nlet begin = get_time();\r\n// Do some stuff.\r\nlet end = get_time();\r\nlet delta = end - begin;\r\nprintln!(\"Doing stuff took {}.{:09d} seconds.\", delta.sec, delta.nsec);\r\n```\r\nThis resolves one of the points mentioned in #2153.", "tree": {"sha": "439737d38a93ad125582f4d76702e191793cb9cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/439737d38a93ad125582f4d76702e191793cb9cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee8313364185046670044f2f9faa0561166f882", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee8313364185046670044f2f9faa0561166f882", "html_url": "https://github.com/rust-lang/rust/commit/dee8313364185046670044f2f9faa0561166f882", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee8313364185046670044f2f9faa0561166f882/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf810a219b136fff67e75840ad3c5efde9ae1e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf810a219b136fff67e75840ad3c5efde9ae1e5", "html_url": "https://github.com/rust-lang/rust/commit/eaf810a219b136fff67e75840ad3c5efde9ae1e5"}, {"sha": "62b1fbe7de981a75ea96a9522a6d671eb75b114a", "url": "https://api.github.com/repos/rust-lang/rust/commits/62b1fbe7de981a75ea96a9522a6d671eb75b114a", "html_url": "https://github.com/rust-lang/rust/commit/62b1fbe7de981a75ea96a9522a6d671eb75b114a"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "d0b4c6b1e4c7411a6fce2b4f21728ae51549f830", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/dee8313364185046670044f2f9faa0561166f882/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8313364185046670044f2f9faa0561166f882/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=dee8313364185046670044f2f9faa0561166f882", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -90,6 +90,30 @@ impl Timespec {\n     }\n }\n \n+impl Add<Timespec, Timespec> for Timespec {\n+    fn add(&self, other: &Timespec) -> Timespec {\n+        let mut sec = self.sec + other.sec;\n+        let mut nsec = self.nsec + other.nsec;\n+        if nsec >= NSEC_PER_SEC {\n+            nsec -= NSEC_PER_SEC;\n+            sec += 1;\n+        }\n+        Timespec::new(sec, nsec)\n+    }\n+}\n+\n+impl Sub<Timespec, Timespec> for Timespec {\n+    fn sub(&self, other: &Timespec) -> Timespec {\n+        let mut sec = self.sec - other.sec;\n+        let mut nsec = self.nsec - other.nsec;\n+        if nsec < 0 {\n+            nsec += NSEC_PER_SEC;\n+            sec -= 1;\n+        }\n+        Timespec::new(sec, nsec)\n+    }\n+}\n+\n /**\n  * Returns the current time as a `timespec` containing the seconds and\n  * nanoseconds since 1970-01-01T00:00:00Z.\n@@ -1489,6 +1513,46 @@ mod tests {\n         assert!(d.gt(c));\n     }\n \n+    fn test_timespec_add() {\n+        let a = Timespec::new(1, 2);\n+        let b = Timespec::new(2, 3);\n+        let c = a + b;\n+        assert_eq!(c.sec, 3);\n+        assert_eq!(c.nsec, 5);\n+\n+        let p = Timespec::new(1, super::NSEC_PER_SEC - 2);\n+        let q = Timespec::new(2, 2);\n+        let r = p + q;\n+        assert_eq!(r.sec, 4);\n+        assert_eq!(r.nsec, 0);\n+\n+        let u = Timespec::new(1, super::NSEC_PER_SEC - 2);\n+        let v = Timespec::new(2, 3);\n+        let w = u + v;\n+        assert_eq!(w.sec, 4);\n+        assert_eq!(w.nsec, 1);\n+    }\n+\n+    fn test_timespec_sub() {\n+        let a = Timespec::new(2, 3);\n+        let b = Timespec::new(1, 2);\n+        let c = a - b;\n+        assert_eq!(c.sec, 1);\n+        assert_eq!(c.nsec, 1);\n+\n+        let p = Timespec::new(2, 0);\n+        let q = Timespec::new(1, 2);\n+        let r = p - q;\n+        assert_eq!(r.sec, 0);\n+        assert_eq!(r.nsec, super::NSEC_PER_SEC - 2);\n+\n+        let u = Timespec::new(1, 2);\n+        let v = Timespec::new(2, 3);\n+        let w = u - v;\n+        assert_eq!(w.sec, -2);\n+        assert_eq!(w.nsec, super::NSEC_PER_SEC - 1);\n+    }\n+\n     #[test]\n     #[ignore(cfg(target_os = \"android\"))] // FIXME #10958\n     fn run_tests() {\n@@ -1505,6 +1569,8 @@ mod tests {\n         test_ctime();\n         test_strftime();\n         test_timespec_eq_ord();\n+        test_timespec_add();\n+        test_timespec_sub();\n     }\n \n     #[bench]"}]}