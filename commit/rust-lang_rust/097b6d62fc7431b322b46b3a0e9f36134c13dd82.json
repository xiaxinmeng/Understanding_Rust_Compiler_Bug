{"sha": "097b6d62fc7431b322b46b3a0e9f36134c13dd82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5N2I2ZDYyZmM3NDMxYjMyMmI0NmIzYTBlOWYzNjEzNGMxM2RkODI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-20T00:23:32Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-01T22:30:25Z"}, "message": "item_like_imports: Allow glob imports with a given visibility\nto reexport some (but not all) names with less visibility.", "tree": {"sha": "1b9fb6087a5cd8e1b5422748356bb9abbcd087bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b9fb6087a5cd8e1b5422748356bb9abbcd087bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/097b6d62fc7431b322b46b3a0e9f36134c13dd82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/097b6d62fc7431b322b46b3a0e9f36134c13dd82", "html_url": "https://github.com/rust-lang/rust/commit/097b6d62fc7431b322b46b3a0e9f36134c13dd82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/097b6d62fc7431b322b46b3a0e9f36134c13dd82/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c56a5afd4d1c4717770efa693e69eead13abee34", "url": "https://api.github.com/repos/rust-lang/rust/commits/c56a5afd4d1c4717770efa693e69eead13abee34", "html_url": "https://github.com/rust-lang/rust/commit/c56a5afd4d1c4717770efa693e69eead13abee34"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "0c7c97037187721038d90870de3a762a26f9a74e", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/097b6d62fc7431b322b46b3a0e9f36134c13dd82/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097b6d62fc7431b322b46b3a0e9f36134c13dd82/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=097b6d62fc7431b322b46b3a0e9f36134c13dd82", "patch": "@@ -26,6 +26,8 @@ use rustc::hir::def::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::ty::{self, VariantKind};\n \n+use std::cell::Cell;\n+\n use syntax::ast::Name;\n use syntax::attr;\n use syntax::parse::token;\n@@ -176,7 +178,10 @@ impl<'b> Resolver<'b> {\n                         }\n                     }\n                     ViewPathGlob(_) => {\n-                        let subclass = GlobImport { is_prelude: is_prelude };\n+                        let subclass = GlobImport {\n+                            is_prelude: is_prelude,\n+                            max_vis: Cell::new(ty::Visibility::PrivateExternal),\n+                        };\n                         let span = view_path.span;\n                         self.add_import_directive(module_path, subclass, span, item.id, vis);\n                     }"}, {"sha": "189253348b0aa9aaab0f3986168ddc7f8c4d434f", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/097b6d62fc7431b322b46b3a0e9f36134c13dd82/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097b6d62fc7431b322b46b3a0e9f36134c13dd82/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=097b6d62fc7431b322b46b3a0e9f36134c13dd82", "patch": "@@ -52,7 +52,10 @@ pub enum ImportDirectiveSubclass<'a> {\n         value_result: Cell<Result<&'a NameBinding<'a>, Determinacy>>,\n         type_result: Cell<Result<&'a NameBinding<'a>, Determinacy>>,\n     },\n-    GlobImport { is_prelude: bool },\n+    GlobImport {\n+        is_prelude: bool,\n+        max_vis: Cell<ty::Visibility>, // The visibility of the greatest reexport.\n+    },\n }\n \n impl<'a> ImportDirectiveSubclass<'a> {\n@@ -276,7 +279,7 @@ impl<'a> Resolver<'a> {\n             }\n             // We don't add prelude imports to the globs since they only affect lexical scopes,\n             // which are not relevant to import resolution.\n-            GlobImport { is_prelude: true } => {}\n+            GlobImport { is_prelude: true, .. } => {}\n             GlobImport { .. } => self.current_module.globs.borrow_mut().push(directive),\n         }\n     }\n@@ -292,6 +295,12 @@ impl<'a> Resolver<'a> {\n             binding.pseudo_vis()\n         };\n \n+        if let GlobImport { ref max_vis, .. } = directive.subclass {\n+            if vis == directive.vis.get() || vis.is_at_least(max_vis.get(), self) {\n+                max_vis.set(vis)\n+            }\n+        }\n+\n         NameBinding {\n             kind: NameBindingKind::Import {\n                 binding: binding,\n@@ -562,7 +571,15 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 let msg = \"Cannot glob-import a module into itself.\".into();\n                 return Failed(Some((directive.span, msg)));\n             }\n-            GlobImport { .. } => return Success(()),\n+            GlobImport { is_prelude, ref max_vis } => {\n+                if !is_prelude &&\n+                   max_vis.get() != ty::Visibility::PrivateExternal && // Allow empty globs.\n+                   !max_vis.get().is_at_least(directive.vis.get(), self) {\n+                    let msg = \"A non-empty glob must import something with the glob's visibility\";\n+                    self.session.span_err(directive.span, msg);\n+                }\n+                return Success(());\n+            }\n         };\n \n         for &(ns, result) in &[(ValueNS, value_result), (TypeNS, type_result)] {\n@@ -677,7 +694,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             return;\n         } else if module.def_id() == directive.parent.def_id()  {\n             return;\n-        } else if let GlobImport { is_prelude: true } = directive.subclass {\n+        } else if let GlobImport { is_prelude: true, .. } = directive.subclass {\n             self.prelude = Some(module);\n             return;\n         }"}]}