{"sha": "aff9102afb2b6756b3935dedb9be30401975b262", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjkxMDJhZmIyYjY3NTZiMzkzNWRlZGI5YmUzMDQwMTk3NWIyNjI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-12T14:56:24Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-12T14:56:24Z"}, "message": "Rename FileReferences -> UsageSearchResult", "tree": {"sha": "34e38f7297ab93686f270bb03607e9e3590a6597", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34e38f7297ab93686f270bb03607e9e3590a6597"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff9102afb2b6756b3935dedb9be30401975b262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff9102afb2b6756b3935dedb9be30401975b262", "html_url": "https://github.com/rust-lang/rust/commit/aff9102afb2b6756b3935dedb9be30401975b262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff9102afb2b6756b3935dedb9be30401975b262/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c1777a2e264e58fccd5ace94b238c8a497ddbda", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1777a2e264e58fccd5ace94b238c8a497ddbda", "html_url": "https://github.com/rust-lang/rust/commit/2c1777a2e264e58fccd5ace94b238c8a497ddbda"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "7d4757e02523e817e807fc965c49aaeb1d23d7f5", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aff9102afb2b6756b3935dedb9be30401975b262/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9102afb2b6756b3935dedb9be30401975b262/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=aff9102afb2b6756b3935dedb9be30401975b262", "patch": "@@ -15,7 +15,7 @@ use hir::Semantics;\n use ide_db::{\n     base_db::FileId,\n     defs::{Definition, NameClass, NameRefClass},\n-    search::{FileReference, FileReferences, ReferenceAccess, ReferenceKind, SearchScope},\n+    search::{FileReference, ReferenceAccess, ReferenceKind, SearchScope, UsageSearchResult},\n     RootDatabase,\n };\n use syntax::{\n@@ -29,7 +29,7 @@ use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeI\n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n     declaration: Declaration,\n-    references: FileReferences,\n+    references: UsageSearchResult,\n }\n \n #[derive(Debug, Clone)]\n@@ -48,11 +48,11 @@ impl ReferenceSearchResult {\n         &self.declaration.nav\n     }\n \n-    pub fn references(&self) -> &FileReferences {\n+    pub fn references(&self) -> &UsageSearchResult {\n         &self.references\n     }\n \n-    pub fn references_with_declaration(mut self) -> FileReferences {\n+    pub fn references_with_declaration(mut self) -> UsageSearchResult {\n         let decl_ref = FileReference {\n             range: self.declaration.nav.focus_or_full_range(),\n             kind: self.declaration.kind,\n@@ -315,7 +315,7 @@ fn try_find_self_references(\n                 .collect()\n         })\n         .unwrap_or_default();\n-    let mut references = FileReferences::default();\n+    let mut references = UsageSearchResult::default();\n     references.references.insert(file_id, refs);\n \n     Some(RangeInfo::new("}, {"sha": "b5fa466427aaa2521653baa8962d1f61f0666e2e", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aff9102afb2b6756b3935dedb9be30401975b262/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9102afb2b6756b3935dedb9be30401975b262/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=aff9102afb2b6756b3935dedb9be30401975b262", "patch": "@@ -19,11 +19,11 @@ use crate::{\n };\n \n #[derive(Debug, Default, Clone)]\n-pub struct FileReferences {\n+pub struct UsageSearchResult {\n     pub references: FxHashMap<FileId, Vec<FileReference>>,\n }\n \n-impl FileReferences {\n+impl UsageSearchResult {\n     pub fn is_empty(&self) -> bool {\n         self.references.is_empty()\n     }\n@@ -43,7 +43,7 @@ impl FileReferences {\n     }\n }\n \n-impl IntoIterator for FileReferences {\n+impl IntoIterator for UsageSearchResult {\n     type Item = (FileId, Vec<FileReference>);\n     type IntoIter = <FxHashMap<FileId, Vec<FileReference>> as IntoIterator>::IntoIter;\n \n@@ -293,9 +293,8 @@ impl<'a> FindUsages<'a> {\n         found\n     }\n \n-    /// The [`FileReferences`] returned always have unique [`FileId`]s.\n-    pub fn all(self) -> FileReferences {\n-        let mut res = FileReferences::default();\n+    pub fn all(self) -> UsageSearchResult {\n+        let mut res = UsageSearchResult::default();\n         self.search(&mut |file_id, reference| {\n             res.references.entry(file_id).or_default().push(reference);\n             false"}, {"sha": "836eb94b2e22797f2ddb235a6d67bc137d5a2571", "filename": "crates/ssr/src/search.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aff9102afb2b6756b3935dedb9be30401975b262/crates%2Fssr%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9102afb2b6756b3935dedb9be30401975b262/crates%2Fssr%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fsearch.rs?ref=aff9102afb2b6756b3935dedb9be30401975b262", "patch": "@@ -8,7 +8,7 @@ use crate::{\n use ide_db::{\n     base_db::{FileId, FileRange},\n     defs::Definition,\n-    search::{FileReferences, SearchScope},\n+    search::{SearchScope, UsageSearchResult},\n };\n use rustc_hash::FxHashSet;\n use syntax::{ast, AstNode, SyntaxKind, SyntaxNode};\n@@ -20,7 +20,7 @@ use test_utils::mark;\n /// them more than once.\n #[derive(Default)]\n pub(crate) struct UsageCache {\n-    usages: Vec<(Definition, FileReferences)>,\n+    usages: Vec<(Definition, UsageSearchResult)>,\n }\n \n impl<'db> MatchFinder<'db> {\n@@ -108,7 +108,7 @@ impl<'db> MatchFinder<'db> {\n         &self,\n         usage_cache: &'a mut UsageCache,\n         definition: Definition,\n-    ) -> &'a FileReferences {\n+    ) -> &'a UsageSearchResult {\n         // Logically if a lookup succeeds we should just return it. Unfortunately returning it would\n         // extend the lifetime of the borrow, then we wouldn't be able to do the insertion on a\n         // cache miss. This is a limitation of NLL and is fixed with Polonius. For now we do two\n@@ -250,7 +250,7 @@ fn is_search_permitted(node: &SyntaxNode) -> bool {\n }\n \n impl UsageCache {\n-    fn find(&mut self, definition: &Definition) -> Option<&FileReferences> {\n+    fn find(&mut self, definition: &Definition) -> Option<&UsageSearchResult> {\n         // We expect a very small number of cache entries (generally 1), so a linear scan should be\n         // fast enough and avoids the need to implement Hash for Definition.\n         for (d, refs) in &self.usages {"}]}