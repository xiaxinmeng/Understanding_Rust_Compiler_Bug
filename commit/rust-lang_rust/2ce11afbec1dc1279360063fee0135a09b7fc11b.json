{"sha": "2ce11afbec1dc1279360063fee0135a09b7fc11b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZTExYWZiZWMxZGMxMjc5MzYwMDYzZmVlMDEzNWEwOWI3ZmMxMWI=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-10-15T16:52:49Z"}, "committer": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-10-16T16:55:26Z"}, "message": "Use double quote for rustdoc html", "tree": {"sha": "5c3f31dd88a4fd51b46134b196ac988113b016cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c3f31dd88a4fd51b46134b196ac988113b016cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ce11afbec1dc1279360063fee0135a09b7fc11b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce11afbec1dc1279360063fee0135a09b7fc11b", "html_url": "https://github.com/rust-lang/rust/commit/2ce11afbec1dc1279360063fee0135a09b7fc11b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ce11afbec1dc1279360063fee0135a09b7fc11b/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6999ff33c9234b04cf5273497546b6a878bdb349", "url": "https://api.github.com/repos/rust-lang/rust/commits/6999ff33c9234b04cf5273497546b6a878bdb349", "html_url": "https://github.com/rust-lang/rust/commit/6999ff33c9234b04cf5273497546b6a878bdb349"}], "stats": {"total": 259, "additions": 133, "deletions": 126}, "files": [{"sha": "b43ae9a46af3310c21f354a6e8627731fb6e6eb6", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 133, "deletions": 126, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/2ce11afbec1dc1279360063fee0135a09b7fc11b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce11afbec1dc1279360063fee0135a09b7fc11b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=2ce11afbec1dc1279360063fee0135a09b7fc11b", "patch": "@@ -540,11 +540,11 @@ impl FormatRenderer for Context {\n         };\n         let sidebar = if let Some(ref version) = cache.crate_version {\n             format!(\n-                \"<p class='location'>Crate {}</p>\\\n-                     <div class='block version'>\\\n+                \"<p class=\\\"location\\\">Crate {}</p>\\\n+                     <div class=\\\"block version\\\">\\\n                          <p>Version {}</p>\\\n                      </div>\\\n-                     <a id='all-types' href='index.html'><p>Back to index</p></a>\",\n+                     <a id=\\\"all-types\\\" href=\\\"index.html\\\"><p>Back to index</p></a>\",\n                 crate_name,\n                 Escape(version),\n             )\n@@ -567,7 +567,7 @@ impl FormatRenderer for Context {\n         page.root_path = \"./\";\n \n         let mut style_files = self.shared.style_files.clone();\n-        let sidebar = \"<p class='location'>Settings</p><div class='sidebar-elems'></div>\";\n+        let sidebar = \"<p class=\\\"location\\\">Settings</p><div class=\\\"sidebar-elems\\\"></div>\";\n         style_files.push(StylePath { path: PathBuf::from(\"settings.css\"), disabled: false });\n         let v = layout::render(\n             &self.shared.layout,\n@@ -808,7 +808,7 @@ function handleThemeButtonsBlur(e) {{\n themePicker.onclick = switchThemeButtonState;\n themePicker.onblur = handleThemeButtonsBlur;\n {}.forEach(function(item) {{\n-    var but = document.createElement('button');\n+    var but = document.createElement(\\\"button\\\");\n     but.textContent = item;\n     but.onclick = function(el) {{\n         switchTheme(currentTheme, mainTheme, item, true);\n@@ -1031,11 +1031,11 @@ themePicker.onblur = handleThemeButtonsBlur;\n     // with rustdoc running in parallel.\n     all_indexes.sort();\n     {\n-        let mut v = String::from(\"var searchIndex = JSON.parse('{\\\\\\n\");\n+        let mut v = String::from(\"var searchIndex = JSON.parse(\\\"{\\\\n\");\n         v.push_str(&all_indexes.join(\",\\\\\\n\"));\n         // \"addSearchOptions\" has to be called first so the crate filtering can be set before the\n         // search might start (if it's set into the URL for example).\n-        v.push_str(\"\\\\\\n}');\\naddSearchOptions(searchIndex);initSearch(searchIndex);\");\n+        v.push_str(\"\\\\\\n}\\\");\\naddSearchOptions(searchIndex);initSearch(searchIndex);\");\n         cx.shared.fs.write(&dst, &v)?;\n     }\n     if options.enable_index_page {\n@@ -1064,10 +1064,9 @@ themePicker.onblur = handleThemeButtonsBlur;\n             krates.dedup();\n \n             let content = format!(\n-                \"<h1 class='fqn'>\\\n-                     <span class='in-band'>List of all crates</span>\\\n-                </h1>\\\n-                <ul class='crate mod'>{}</ul>\",\n+                \"<h1 class=\\\"fqn\\\">\\\n+                     <span class=\\\"in-band\\\">List of all crates</span>\\\n+                </h1><ul class=\\\"crate mod\\\">{}</ul>\",\n                 krates\n                     .iter()\n                     .map(|s| {\n@@ -1211,7 +1210,7 @@ impl ItemEntry {\n impl ItemEntry {\n     crate fn print(&self) -> impl fmt::Display + '_ {\n         crate::html::format::display_fn(move |f| {\n-            write!(f, \"<a href='{}'>{}</a>\", self.url, Escape(&self.name))\n+            write!(f, \"<a href=\\\"{}\\\">{}</a>\", self.url, Escape(&self.name))\n         })\n     }\n }\n@@ -1302,7 +1301,7 @@ fn print_entries(f: &mut Buffer, e: &FxHashSet<ItemEntry>, title: &str, class: &\n         e.sort();\n         write!(\n             f,\n-            \"<h3 id='{}'>{}</h3><ul class='{} docblock'>{}</ul>\",\n+            \"<h3 id=\\\"{}\\\">{}</h3><ul class=\\\"{} docblock\\\">{}</ul>\",\n             title,\n             Escape(title),\n             class,\n@@ -1315,16 +1314,16 @@ impl AllTypes {\n     fn print(self, f: &mut Buffer) {\n         write!(\n             f,\n-            \"<h1 class='fqn'>\\\n-                 <span class='out-of-band'>\\\n-                     <span id='render-detail'>\\\n+            \"<h1 class=\\\"fqn\\\">\\\n+                 <span class=\\\"out-of-band\\\">\\\n+                     <span id=\\\"render-detail\\\">\\\n                          <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" \\\n                             title=\\\"collapse all docs\\\">\\\n-                             [<span class='inner'>&#x2212;</span>]\\\n+                             [<span class=\\\"inner\\\">&#x2212;</span>]\\\n                          </a>\\\n                      </span>\n                  </span>\n-                 <span class='in-band'>List of all items</span>\\\n+                 <span class=\\\"in-band\\\">List of all items</span>\\\n              </h1>\"\n         );\n         print_entries(f, &self.structs, \"Structs\", \"structs\");\n@@ -1367,18 +1366,18 @@ impl Setting {\n     fn display(&self, root_path: &str, suffix: &str) -> String {\n         match *self {\n             Setting::Section { description, ref sub_settings } => format!(\n-                \"<div class='setting-line'>\\\n-                     <div class='title'>{}</div>\\\n-                     <div class='sub-settings'>{}</div>\n+                \"<div class=\\\"setting-line\\\">\\\n+                     <div class=\\\"title\\\">{}</div>\\\n+                     <div class=\\\"sub-settings\\\">{}</div>\n                  </div>\",\n                 description,\n                 sub_settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>()\n             ),\n             Setting::Toggle { js_data_name, description, default_value } => format!(\n-                \"<div class='setting-line'>\\\n-                     <label class='toggle'>\\\n-                     <input type='checkbox' id='{}' {}>\\\n-                     <span class='slider'></span>\\\n+                \"<div class=\\\"setting-line\\\">\\\n+                     <label class=\\\"toggle\\\">\\\n+                     <input type=\\\"checkbox\\\" id=\\\"{}\\\" {}>\\\n+                     <span class=\\\"slider\\\"></span>\\\n                      </label>\\\n                      <div>{}</div>\\\n                  </div>\",\n@@ -1483,11 +1482,11 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n     ];\n \n     Ok(format!(\n-        \"<h1 class='fqn'>\\\n-            <span class='in-band'>Rustdoc settings</span>\\\n+        \"<h1 class=\\\"fqn\\\">\\\n+            <span class=\\\"in-band\\\">Rustdoc settings</span>\\\n         </h1>\\\n-        <div class='settings'>{}</div>\\\n-        <script src='{}settings{}.js'></script>\",\n+        <div class=\\\"settings\\\">{}</div>\\\n+        <script src=\\\"{}settings{}.js\\\"></script>\",\n         settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>(),\n         root_path,\n         suffix\n@@ -1680,20 +1679,20 @@ where\n fn print_item(cx: &Context, item: &clean::Item, buf: &mut Buffer, cache: &Cache) {\n     debug_assert!(!item.is_stripped());\n     // Write the breadcrumb trail header for the top\n-    write!(buf, \"<h1 class='fqn'><span class='out-of-band'>\");\n+    write!(buf, \"<h1 class=\\\"fqn\\\"><span class=\\\"out-of-band\\\">\");\n     if let Some(version) = item.stable_since() {\n         write!(\n             buf,\n-            \"<span class='since' title='Stable since Rust version {0}'>{0}</span>\",\n+            \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}\\\">{0}</span>\",\n             version\n         );\n     }\n     write!(\n         buf,\n-        \"<span id='render-detail'>\\\n+        \"<span id=\\\"render-detail\\\">\\\n                 <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" \\\n                     title=\\\"collapse all docs\\\">\\\n-                    [<span class='inner'>&#x2212;</span>]\\\n+                    [<span class=\\\"inner\\\">&#x2212;</span>]\\\n                 </a>\\\n             </span>\"\n     );\n@@ -1706,12 +1705,16 @@ fn print_item(cx: &Context, item: &clean::Item, buf: &mut Buffer, cache: &Cache)\n     // used to find the link to auto-click.\n     if cx.shared.include_sources && !item.is_primitive() {\n         if let Some(l) = cx.src_href(item, cache) {\n-            write!(buf, \"<a class='srclink' href='{}' title='{}'>[src]</a>\", l, \"goto source code\");\n+            write!(\n+                buf,\n+                \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"{}\\\">[src]</a>\",\n+                l, \"goto source code\"\n+            );\n         }\n     }\n \n     write!(buf, \"</span>\"); // out-of-band\n-    write!(buf, \"<span class='in-band'>\");\n+    write!(buf, \"<span class=\\\"in-band\\\">\");\n     let name = match item.inner {\n         clean::ModuleItem(ref m) => {\n             if m.is_crate {\n@@ -1751,13 +1754,13 @@ fn print_item(cx: &Context, item: &clean::Item, buf: &mut Buffer, cache: &Cache)\n         for (i, component) in cur.iter().enumerate().take(amt) {\n             write!(\n                 buf,\n-                \"<a href='{}index.html'>{}</a>::<wbr>\",\n+                \"<a href=\\\"{}index.html\\\">{}</a>::<wbr>\",\n                 \"../\".repeat(cur.len() - i - 1),\n                 component\n             );\n         }\n     }\n-    write!(buf, \"<a class=\\\"{}\\\" href=''>{}</a>\", item.type_(), item.name.as_ref().unwrap());\n+    write!(buf, \"<a class=\\\"{}\\\" href=\\\"\\\">{}</a>\", item.type_(), item.name.as_ref().unwrap());\n \n     write!(buf, \"</span></h1>\"); // in-band\n \n@@ -1851,7 +1854,7 @@ fn render_markdown(\n     let mut ids = cx.id_map.borrow_mut();\n     write!(\n         w,\n-        \"<div class='docblock{}'>{}{}</div>\",\n+        \"<div class=\\\"docblock{}\\\">{}{}</div>\",\n         if is_hidden { \" hidden\" } else { \"\" },\n         prefix,\n         Markdown(\n@@ -1898,7 +1901,7 @@ fn document_short(\n     } else if !prefix.is_empty() {\n         write!(\n             w,\n-            \"<div class='docblock{}'>{}</div>\",\n+            \"<div class=\\\"docblock{}\\\">{}</div>\",\n             if is_hidden { \" hidden\" } else { \"\" },\n             prefix\n         );\n@@ -1912,7 +1915,7 @@ fn document_full(w: &mut Buffer, item: &clean::Item, cx: &Context, prefix: &str,\n     } else if !prefix.is_empty() {\n         write!(\n             w,\n-            \"<div class='docblock{}'>{}</div>\",\n+            \"<div class=\\\"docblock{}\\\">{}</div>\",\n             if is_hidden { \" hidden\" } else { \"\" },\n             prefix\n         );\n@@ -1928,7 +1931,7 @@ fn document_stability(\n ) {\n     let stabilities = short_stability(item, cx, parent);\n     if !stabilities.is_empty() {\n-        write!(w, \"<div class='stability{}'>\", if is_hidden { \" hidden\" } else { \"\" });\n+        write!(w, \"<div class=\\\"stability{}\\\">\", if is_hidden { \" hidden\" } else { \"\" });\n         for stability in stabilities {\n             write!(w, \"{}\", stability);\n         }\n@@ -1942,7 +1945,7 @@ fn document_non_exhaustive_header(item: &clean::Item) -> &str {\n \n fn document_non_exhaustive(w: &mut Buffer, item: &clean::Item) {\n     if item.is_non_exhaustive() {\n-        write!(w, \"<div class='docblock non-exhaustive non-exhaustive-{}'>\", {\n+        write!(w, \"<div class=\\\"docblock non-exhaustive non-exhaustive-{}\\\">\", {\n             if item.is_struct() {\n                 \"struct\"\n             } else if item.is_enum() {\n@@ -2121,7 +2124,7 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n             let (short, name) = item_ty_to_strs(&myty.unwrap());\n             write!(\n                 w,\n-                \"<h2 id='{id}' class='section-header'>\\\n+                \"<h2 id=\\\"{id}\\\" class=\\\"section-header\\\">\\\n                        <a href=\\\"#{id}\\\">{name}</a></h2>\\n<table>\",\n                 id = cx.derive_id(short.to_owned()),\n                 name = name\n@@ -2168,7 +2171,7 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                     clean::FunctionItem(ref func) | clean::ForeignFunctionItem(ref func)\n                         if func.header.unsafety == hir::Unsafety::Unsafe =>\n                     {\n-                        \"<a title='unsafe function' href='#'><sup>\u26a0</sup></a>\"\n+                        \"<a title=\\\"unsafe function\\\" href=\\\"#\\\"><sup>\u26a0</sup></a>\"\n                     }\n                     _ => \"\",\n                 };\n@@ -2179,10 +2182,10 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                 let doc_value = myitem.doc_value().unwrap_or(\"\");\n                 write!(\n                     w,\n-                    \"<tr class='{stab}{add}module-item'>\\\n+                    \"<tr class=\\\"{stab}{add}module-item\\\">\\\n                          <td><a class=\\\"{class}\\\" href=\\\"{href}\\\" \\\n-                             title='{title}'>{name}</a>{unsafety_flag}</td>\\\n-                         <td class='docblock-short'>{stab_tags}{docs}</td>\\\n+                             title=\\\"{title}\\\">{name}</a>{unsafety_flag}</td>\\\n+                         <td class=\\\"docblock-short\\\">{stab_tags}{docs}</td>\\\n                      </tr>\",\n                     name = *myitem.name.as_ref().unwrap(),\n                     stab_tags = stability_tags(myitem, item),\n@@ -2277,7 +2280,7 @@ fn short_stability(item: &clean::Item, cx: &Context, parent: Option<&clean::Item\n             message.push_str(&format!(\": {}\", html.into_string()));\n         }\n         stability.push(format!(\n-            \"<div class='stab deprecated'><span class='emoji'>\ud83d\udc4e</span> {}</div>\",\n+            \"<div class=\\\"stab deprecated\\\"><span class=\\\"emoji\\\">\ud83d\udc4e</span> {}</div>\",\n             message,\n         ));\n     }\n@@ -2291,7 +2294,7 @@ fn short_stability(item: &clean::Item, cx: &Context, parent: Option<&clean::Item\n         .map(|stab| (stab.level, stab.feature))\n     {\n         let mut message =\n-            \"<span class='emoji'>\ud83d\udd2c</span> This is a nightly-only experimental API.\".to_owned();\n+            \"<span class=\\\"emoji\\\">\ud83d\udd2c</span> This is a nightly-only experimental API.\".to_owned();\n \n         let mut feature = format!(\"<code>{}</code>\", Escape(&feature.as_str()));\n         if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, issue) {\n@@ -2320,7 +2323,7 @@ fn short_stability(item: &clean::Item, cx: &Context, parent: Option<&clean::Item\n             );\n         }\n \n-        stability.push(format!(\"<div class='stab unstable'>{}</div>\", message));\n+        stability.push(format!(\"<div class=\\\"stab unstable\\\">{}</div>\", message));\n     }\n \n     let cfg = match (&item.attrs.cfg, parent.and_then(|p| p.attrs.cfg.as_ref())) {\n@@ -2335,14 +2338,14 @@ fn short_stability(item: &clean::Item, cx: &Context, parent: Option<&clean::Item\n         cfg\n     );\n     if let Some(cfg) = cfg {\n-        stability.push(format!(\"<div class='stab portability'>{}</div>\", cfg.render_long_html()));\n+        stability.push(format!(\"<div class=\\\"stab portability\\\">{}</div>\", cfg.render_long_html()));\n     }\n \n     stability\n }\n \n fn item_constant(w: &mut Buffer, cx: &Context, it: &clean::Item, c: &clean::Constant) {\n-    write!(w, \"<pre class='rust const'>\");\n+    write!(w, \"<pre class=\\\"rust const\\\">\");\n     render_attributes(w, it, false);\n \n     write!(\n@@ -2377,7 +2380,7 @@ fn item_constant(w: &mut Buffer, cx: &Context, it: &clean::Item, c: &clean::Cons\n }\n \n fn item_static(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Static) {\n-    write!(w, \"<pre class='rust static'>\");\n+    write!(w, \"<pre class=\\\"rust static\\\">\");\n     render_attributes(w, it, false);\n     write!(\n         w,\n@@ -2402,7 +2405,7 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n         f.generics.print()\n     )\n     .len();\n-    write!(w, \"<pre class='rust fn'>\");\n+    write!(w, \"<pre class=\\\"rust fn\\\">\");\n     render_attributes(w, it, false);\n     write!(\n         w,\n@@ -2526,7 +2529,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n \n     // Output the trait definition\n     wrap_into_docblock(w, |w| {\n-        write!(w, \"<pre class='rust trait'>\");\n+        write!(w, \"<pre class=\\\"rust trait\\\">\");\n         render_attributes(w, it, true);\n         write!(\n             w,\n@@ -2569,7 +2572,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                 write!(w, \";\\n\");\n \n                 if pos < required.len() - 1 {\n-                    write!(w, \"<div class='item-spacer'></div>\");\n+                    write!(w, \"<div class=\\\"item-spacer\\\"></div>\");\n                 }\n             }\n             if !required.is_empty() && !provided.is_empty() {\n@@ -2586,7 +2589,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                     }\n                 }\n                 if pos < provided.len() - 1 {\n-                    write!(w, \"<div class='item-spacer'></div>\");\n+                    write!(w, \"<div class=\\\"item-spacer\\\"></div>\");\n                 }\n             }\n             write!(w, \"}}\");\n@@ -2600,23 +2603,23 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n     fn write_small_section_header(w: &mut Buffer, id: &str, title: &str, extra_content: &str) {\n         write!(\n             w,\n-            \"<h2 id='{0}' class='small-section-header'>\\\n-                {1}<a href='#{0}' class='anchor'></a>\\\n+            \"<h2 id=\\\"{0}\\\" class=\\\"small-section-header\\\">\\\n+                {1}<a href=\\\"#{0}\\\" class=\\\"anchor\\\"></a>\\\n              </h2>{2}\",\n             id, title, extra_content\n         )\n     }\n \n     fn write_loading_content(w: &mut Buffer, extra_content: &str) {\n-        write!(w, \"{}<span class='loading-content'>Loading content...</span>\", extra_content)\n+        write!(w, \"{}<span class=\\\"loading-content\\\">Loading content...</span>\", extra_content)\n     }\n \n     fn trait_item(w: &mut Buffer, cx: &Context, m: &clean::Item, t: &clean::Item) {\n         let name = m.name.as_ref().unwrap();\n         info!(\"Documenting {} on {}\", name, t.name.as_deref().unwrap_or_default());\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-        write!(w, \"<h3 id='{id}' class='method'><code>\", id = id,);\n+        write!(w, \"<h3 id=\\\"{id}\\\" class=\\\"method\\\"><code>\", id = id,);\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n         render_stability_since(w, m, t);\n@@ -2629,7 +2632,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             w,\n             \"associated-types\",\n             \"Associated Types\",\n-            \"<div class='methods'>\",\n+            \"<div class=\\\"methods\\\">\",\n         );\n         for t in &types {\n             trait_item(w, cx, *t, it);\n@@ -2642,7 +2645,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             w,\n             \"associated-const\",\n             \"Associated Constants\",\n-            \"<div class='methods'>\",\n+            \"<div class=\\\"methods\\\">\",\n         );\n         for t in &consts {\n             trait_item(w, cx, *t, it);\n@@ -2656,7 +2659,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             w,\n             \"required-methods\",\n             \"Required methods\",\n-            \"<div class='methods'>\",\n+            \"<div class=\\\"methods\\\">\",\n         );\n         for m in &required {\n             trait_item(w, cx, *m, it);\n@@ -2668,7 +2671,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             w,\n             \"provided-methods\",\n             \"Provided methods\",\n-            \"<div class='methods'>\",\n+            \"<div class=\\\"methods\\\">\",\n         );\n         for m in &provided {\n             trait_item(w, cx, *m, it);\n@@ -2741,7 +2744,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             w,\n             \"implementors\",\n             \"Implementors\",\n-            \"<div class='item-list' id='implementors-list'>\",\n+            \"<div class=\\\"item-list\\\" id=\\\"implementors-list\\\">\",\n         );\n         for implementor in concrete {\n             render_implementor(cx, implementor, w, &implementor_dups, &[], cache);\n@@ -2753,7 +2756,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                 w,\n                 \"synthetic-implementors\",\n                 \"Auto implementors\",\n-                \"<div class='item-list' id='synthetic-implementors-list'>\",\n+                \"<div class=\\\"item-list\\\" id=\\\"synthetic-implementors-list\\\">\",\n             );\n             for implementor in synthetic {\n                 render_implementor(\n@@ -2774,7 +2777,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             w,\n             \"implementors\",\n             \"Implementors\",\n-            \"<div class='item-list' id='implementors-list'>\",\n+            \"<div class=\\\"item-list\\\" id=\\\"implementors-list\\\">\",\n         );\n         write_loading_content(w, \"</div>\");\n \n@@ -2783,7 +2786,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                 w,\n                 \"synthetic-implementors\",\n                 \"Auto implementors\",\n-                \"<div class='item-list' id='synthetic-implementors-list'>\",\n+                \"<div class=\\\"item-list\\\" id=\\\"synthetic-implementors-list\\\">\",\n             );\n             write_loading_content(w, \"</div>\");\n         }\n@@ -2835,7 +2838,7 @@ fn assoc_const(\n ) {\n     write!(\n         w,\n-        \"{}{}const <a href='{}' class=\\\"constant\\\"><b>{}</b></a>: {}\",\n+        \"{}{}const <a href=\\\"{}\\\" class=\\\"constant\\\"><b>{}</b></a>: {}\",\n         extra,\n         it.visibility.print_with_space(),\n         naive_assoc_href(it, link),\n@@ -2854,7 +2857,7 @@ fn assoc_type(\n ) {\n     write!(\n         w,\n-        \"{}type <a href='{}' class=\\\"type\\\">{}</a>\",\n+        \"{}type <a href=\\\"{}\\\" class=\\\"type\\\">{}</a>\",\n         extra,\n         naive_assoc_href(it, link),\n         it.name.as_ref().unwrap()\n@@ -2870,7 +2873,7 @@ fn assoc_type(\n fn render_stability_since_raw(w: &mut Buffer, ver: Option<&str>, containing_ver: Option<&str>) {\n     if let Some(v) = ver {\n         if containing_ver != ver && !v.is_empty() {\n-            write!(w, \"<span class='since' title='Stable since Rust version {0}'>{0}</span>\", v)\n+            write!(w, \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}\\\">{0}</span>\", v)\n         }\n     }\n }\n@@ -2936,7 +2939,7 @@ fn render_assoc_item(\n         render_attributes(w, meth, false);\n         write!(\n             w,\n-            \"{}{}{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n+            \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n              {generics}{decl}{spotlight}{where_clause}\",\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n             meth.visibility.print_with_space(),\n@@ -2979,7 +2982,7 @@ fn render_assoc_item(\n \n fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct, cache: &Cache) {\n     wrap_into_docblock(w, |w| {\n-        write!(w, \"<pre class='rust struct'>\");\n+        write!(w, \"<pre class=\\\"rust struct\\\">\");\n         render_attributes(w, it, true);\n         render_struct(w, it, Some(&s.generics), s.struct_type, &s.fields, \"\", true);\n         write!(w, \"</pre>\")\n@@ -2998,8 +3001,8 @@ fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct\n         if fields.peek().is_some() {\n             write!(\n                 w,\n-                \"<h2 id='fields' class='fields small-section-header'>\n-                       Fields{}<a href='#fields' class='anchor'></a></h2>\",\n+                \"<h2 id=\\\"fields\\\" class=\\\"fields small-section-header\\\">\n+                       Fields{}<a href=\\\"#fields\\\" class=\\\"anchor\\\"></a></h2>\",\n                 document_non_exhaustive_header(it)\n             );\n             document_non_exhaustive(w, it);\n@@ -3029,7 +3032,7 @@ fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct\n \n fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union, cache: &Cache) {\n     wrap_into_docblock(w, |w| {\n-        write!(w, \"<pre class='rust union'>\");\n+        write!(w, \"<pre class=\\\"rust union\\\">\");\n         render_attributes(w, it, true);\n         render_union(w, it, Some(&s.generics), &s.fields, \"\", true);\n         write!(w, \"</pre>\")\n@@ -3047,8 +3050,8 @@ fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union,\n     if fields.peek().is_some() {\n         write!(\n             w,\n-            \"<h2 id='fields' class='fields small-section-header'>\n-                   Fields<a href='#fields' class='anchor'></a></h2>\"\n+            \"<h2 id=\\\"fields\\\" class=\\\"fields small-section-header\\\">\n+                   Fields<a href=\\\"#fields\\\" class=\\\"anchor\\\"></a></h2>\"\n         );\n         for (field, ty) in fields {\n             let name = field.name.as_ref().expect(\"union field name\");\n@@ -3065,7 +3068,7 @@ fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union,\n                 ty = ty.print()\n             );\n             if let Some(stability_class) = field.stability_class() {\n-                write!(w, \"<span class='stab {stab}'></span>\", stab = stability_class);\n+                write!(w, \"<span class=\\\"stab {stab}\\\"></span>\", stab = stability_class);\n             }\n             document(w, cx, field, Some(it));\n         }\n@@ -3075,7 +3078,7 @@ fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union,\n \n fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum, cache: &Cache) {\n     wrap_into_docblock(w, |w| {\n-        write!(w, \"<pre class='rust enum'>\");\n+        write!(w, \"<pre class=\\\"rust enum\\\">\");\n         render_attributes(w, it, true);\n         write!(\n             w,\n@@ -3126,8 +3129,8 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum, ca\n     if !e.variants.is_empty() {\n         write!(\n             w,\n-            \"<h2 id='variants' class='variants small-section-header'>\n-                   Variants{}<a href='#variants' class='anchor'></a></h2>\\n\",\n+            \"<h2 id=\\\"variants\\\" class=\\\"variants small-section-header\\\">\n+                   Variants{}<a href=\\\"#variants\\\" class=\\\"anchor\\\"></a></h2>\\n\",\n             document_non_exhaustive_header(it)\n         );\n         document_non_exhaustive(w, it);\n@@ -3166,7 +3169,7 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum, ca\n                     ItemType::Variant,\n                     variant.name.as_ref().unwrap()\n                 ));\n-                write!(w, \"<div class='autohide sub-variant' id='{id}'>\", id = variant_id);\n+                write!(w, \"<div class=\\\"autohide sub-variant\\\" id=\\\"{id}\\\">\", id = variant_id);\n                 write!(\n                     w,\n                     \"<h3>Fields of <b>{name}</b></h3><div>\",\n@@ -3402,18 +3405,18 @@ fn render_assoc_items(\n             AssocItemRender::All => {\n                 write!(\n                     w,\n-                    \"<h2 id='implementations' class='small-section-header'>\\\n-                         Implementations<a href='#implementations' class='anchor'></a>\\\n+                    \"<h2 id=\\\"implementations\\\" class=\\\"small-section-header\\\">\\\n+                         Implementations<a href=\\\"#implementations\\\" class=\\\"anchor\\\"></a>\\\n                     </h2>\"\n                 );\n                 RenderMode::Normal\n             }\n             AssocItemRender::DerefFor { trait_, type_, deref_mut_ } => {\n                 write!(\n                     w,\n-                    \"<h2 id='deref-methods' class='small-section-header'>\\\n+                    \"<h2 id=\\\"deref-methods\\\" class=\\\"small-section-header\\\">\\\n                          Methods from {}&lt;Target = {}&gt;\\\n-                         <a href='#deref-methods' class='anchor'></a>\\\n+                         <a href=\\\"#deref-methods\\\" class=\\\"anchor\\\"></a>\\\n                      </h2>\",\n                     trait_.print(),\n                     type_.print()\n@@ -3462,22 +3465,22 @@ fn render_assoc_items(\n         if !impls.is_empty() {\n             write!(\n                 w,\n-                \"<h2 id='trait-implementations' class='small-section-header'>\\\n-                     Trait Implementations<a href='#trait-implementations' class='anchor'></a>\\\n+                \"<h2 id=\\\"trait-implementations\\\" class=\\\"small-section-header\\\">\\\n+                     Trait Implementations<a href=\\\"#trait-implementations\\\" class=\\\"anchor\\\"></a>\\\n                  </h2>\\\n-                 <div id='trait-implementations-list'>{}</div>\",\n+                 <div id=\\\"trait-implementations-list\\\">{}</div>\",\n                 impls\n             );\n         }\n \n         if !synthetic.is_empty() {\n             write!(\n                 w,\n-                \"<h2 id='synthetic-implementations' class='small-section-header'>\\\n+                \"<h2 id=\\\"synthetic-implementations\\\" class=\\\"small-section-header\\\">\\\n                      Auto Trait Implementations\\\n-                     <a href='#synthetic-implementations' class='anchor'></a>\\\n+                     <a href=\\\"#synthetic-implementations\\\" class=\\\"anchor\\\"></a>\\\n                  </h2>\\\n-                 <div id='synthetic-implementations-list'>\"\n+                 <div id=\\\"synthetic-implementations-list\\\">\"\n             );\n             render_impls(cx, w, &synthetic, containing_item, cache);\n             write!(w, \"</div>\");\n@@ -3486,11 +3489,11 @@ fn render_assoc_items(\n         if !blanket_impl.is_empty() {\n             write!(\n                 w,\n-                \"<h2 id='blanket-implementations' class='small-section-header'>\\\n+                \"<h2 id=\\\"blanket-implementations\\\" class=\\\"small-section-header\\\">\\\n                      Blanket Implementations\\\n-                     <a href='#blanket-implementations' class='anchor'></a>\\\n+                     <a href=\\\"#blanket-implementations\\\" class=\\\"anchor\\\"></a>\\\n                  </h2>\\\n-                 <div id='blanket-implementations-list'>\"\n+                 <div id=\\\"blanket-implementations-list\\\">\"\n             );\n             render_impls(cx, w, &blanket_impl, containing_item, cache);\n             write!(w, \"</div>\");\n@@ -3605,8 +3608,8 @@ fn spotlight_decl(decl: &clean::FnDecl) -> String {\n     if !out.is_empty() {\n         out.insert_str(\n             0,\n-            \"<span class=\\\"notable-traits\\\"><span class=\\\"notable-traits-tooltip\\\">\u24d8<div class='notable-traits-tooltiptext'><span class=\\\"docblock\\\">\"\n-\n+            \"<span class=\\\"notable-traits\\\"><span class=\\\"notable-traits-tooltip\\\">\u24d8\\\n+            <div class=\\\"notable-traits-tooltiptext\\\"><span class=\\\"docblock\\\">\",\n         );\n         out.push_str(\"</code></span></div></span></span>\");\n     }\n@@ -3648,7 +3651,7 @@ fn render_impl(\n             format!(\" aliases=\\\"{}\\\"\", aliases.join(\",\"))\n         };\n         if let Some(use_absolute) = use_absolute {\n-            write!(w, \"<h3 id='{}' class='impl'{}><code class='in-band'>\", id, aliases);\n+            write!(w, \"<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">\", id, aliases);\n             fmt_impl_for_trait_page(&i.inner_impl(), w, use_absolute);\n             if show_def_docs {\n                 for it in &i.inner_impl().items {\n@@ -3663,27 +3666,31 @@ fn render_impl(\n         } else {\n             write!(\n                 w,\n-                \"<h3 id='{}' class='impl'{}><code class='in-band'>{}</code>\",\n+                \"<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">{}</code>\",\n                 id,\n                 aliases,\n                 i.inner_impl().print()\n             );\n         }\n-        write!(w, \"<a href='#{}' class='anchor'></a>\", id);\n+        write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n         let since = i.impl_item.stability.as_ref().and_then(|s| match s.level {\n             StabilityLevel::Stable { since } => Some(since.as_str()),\n             StabilityLevel::Unstable { .. } => None,\n         });\n         render_stability_since_raw(w, since.as_deref(), outer_version);\n         if let Some(l) = cx.src_href(&i.impl_item, cache) {\n-            write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\", l, \"goto source code\");\n+            write!(\n+                w,\n+                \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"{}\\\">[src]</a>\",\n+                l, \"goto source code\"\n+            );\n         }\n         write!(w, \"</h3>\");\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             let mut ids = cx.id_map.borrow_mut();\n             write!(\n                 w,\n-                \"<div class='docblock'>{}</div>\",\n+                \"<div class=\\\"docblock\\\">{}</div>\",\n                 Markdown(\n                     &*dox,\n                     &i.impl_item.links(),\n@@ -3732,15 +3739,15 @@ fn render_impl(\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n+                    write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, extra_class);\n                     write!(w, \"<code>\");\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n                     render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n                     if let Some(l) = cx.src_href(item, cache) {\n                         write!(\n                             w,\n-                            \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n+                            \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"{}\\\">[src]</a>\",\n                             l, \"goto source code\"\n                         );\n                     }\n@@ -3749,28 +3756,28 @@ fn render_impl(\n             }\n             clean::TypedefItem(ref tydef, _) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", ItemType::AssocType, name));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n+                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id), \"\");\n                 write!(w, \"</code></h4>\");\n             }\n             clean::AssocConstItem(ref ty, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n+                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code>\");\n                 render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n                 if let Some(l) = cx.src_href(item, cache) {\n                     write!(\n                         w,\n-                        \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n+                        \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"{}\\\">[src]</a>\",\n                         l, \"goto source code\"\n                     );\n                 }\n                 write!(w, \"</h4>\");\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n+                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code></h4>\");\n             }\n@@ -3813,7 +3820,7 @@ fn render_impl(\n     let traits = &cache.traits;\n     let trait_ = i.trait_did().map(|did| &traits[&did]);\n \n-    write!(w, \"<div class='impl-items'>\");\n+    write!(w, \"<div class=\\\"impl-items\\\">\");\n     for trait_item in &i.inner_impl().items {\n         doc_impl_item(\n             w,\n@@ -3894,7 +3901,7 @@ fn item_opaque_ty(\n     t: &clean::OpaqueTy,\n     cache: &Cache,\n ) {\n-    write!(w, \"<pre class='rust opaque'>\");\n+    write!(w, \"<pre class=\\\"rust opaque\\\">\");\n     render_attributes(w, it, false);\n     write!(\n         w,\n@@ -3921,7 +3928,7 @@ fn item_trait_alias(\n     t: &clean::TraitAlias,\n     cache: &Cache,\n ) {\n-    write!(w, \"<pre class='rust trait-alias'>\");\n+    write!(w, \"<pre class=\\\"rust trait-alias\\\">\");\n     render_attributes(w, it, false);\n     write!(\n         w,\n@@ -3942,7 +3949,7 @@ fn item_trait_alias(\n }\n \n fn item_typedef(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Typedef, cache: &Cache) {\n-    write!(w, \"<pre class='rust typedef'>\");\n+    write!(w, \"<pre class=\\\"rust typedef\\\">\");\n     render_attributes(w, it, false);\n     write!(\n         w,\n@@ -3963,7 +3970,7 @@ fn item_typedef(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Typed\n }\n \n fn item_foreign_type(w: &mut Buffer, cx: &Context, it: &clean::Item, cache: &Cache) {\n-    writeln!(w, \"<pre class='rust foreigntype'>extern {{\");\n+    writeln!(w, \"<pre class=\\\"rust foreigntype\\\">extern {{\");\n     render_attributes(w, it, false);\n     write!(\n         w,\n@@ -3990,7 +3997,7 @@ fn print_sidebar(cx: &Context, it: &clean::Item, buffer: &mut Buffer, cache: &Ca\n     {\n         write!(\n             buffer,\n-            \"<p class='location'>{}{}</p>\",\n+            \"<p class=\\\"location\\\">{}{}</p>\",\n             match it.inner {\n                 clean::StructItem(..) => \"Struct \",\n                 clean::TraitItem(..) => \"Trait \",\n@@ -4015,7 +4022,7 @@ fn print_sidebar(cx: &Context, it: &clean::Item, buffer: &mut Buffer, cache: &Ca\n         if let Some(ref version) = cache.crate_version {\n             write!(\n                 buffer,\n-                \"<div class='block version'>\\\n+                \"<div class=\\\"block version\\\">\\\n                      <p>Version {}</p>\\\n                  </div>\",\n                 Escape(version)\n@@ -4027,7 +4034,7 @@ fn print_sidebar(cx: &Context, it: &clean::Item, buffer: &mut Buffer, cache: &Ca\n     if it.is_crate() {\n         write!(\n             buffer,\n-            \"<a id='all-types' href='all.html'><p>See all {}'s items</p></a>\",\n+            \"<a id=\\\"all-types\\\" href=\\\"all.html\\\"><p>See all {}'s items</p></a>\",\n             it.name.as_ref().expect(\"crates always have a name\")\n         );\n     }\n@@ -4051,14 +4058,14 @@ fn print_sidebar(cx: &Context, it: &clean::Item, buffer: &mut Buffer, cache: &Ca\n     // as much HTML as possible in order to allow non-JS-enabled browsers\n     // to navigate the documentation (though slightly inefficiently).\n \n-    write!(buffer, \"<p class='location'>\");\n+    write!(buffer, \"<p class=\\\"location\\\">\");\n     for (i, name) in cx.current.iter().take(parentlen).enumerate() {\n         if i > 0 {\n             write!(buffer, \"::<wbr>\");\n         }\n         write!(\n             buffer,\n-            \"<a href='{}index.html'>{}</a>\",\n+            \"<a href=\\\"{}index.html\\\">{}</a>\",\n             &cx.root_path()[..(cx.current.len() - i - 1) * 3],\n             *name\n         );\n@@ -4070,9 +4077,9 @@ fn print_sidebar(cx: &Context, it: &clean::Item, buffer: &mut Buffer, cache: &Ca\n     write!(\n         buffer,\n         \"<script>window.sidebarCurrent = {{\\\n-                name: '{name}', \\\n-                ty: '{ty}', \\\n-                relpath: '{path}'\\\n+                name: \\\"{name}\\\", \\\n+                ty: \\\"{ty}\\\", \\\n+                relpath: \\\"{path}\\\"\\\n             }};</script>\",\n         name = it.name.as_ref().map(|x| &x[..]).unwrap_or(\"\"),\n         ty = it.type_(),\n@@ -4624,17 +4631,17 @@ fn item_proc_macro(w: &mut Buffer, cx: &Context, it: &clean::Item, m: &clean::Pr\n     let name = it.name.as_ref().expect(\"proc-macros always have names\");\n     match m.kind {\n         MacroKind::Bang => {\n-            write!(w, \"<pre class='rust macro'>\");\n+            write!(w, \"<pre class=\\\"rust macro\\\">\");\n             write!(w, \"{}!() {{ /* proc-macro */ }}\", name);\n             write!(w, \"</pre>\");\n         }\n         MacroKind::Attr => {\n-            write!(w, \"<pre class='rust attr'>\");\n+            write!(w, \"<pre class=\\\"rust attr\\\">\");\n             write!(w, \"#[{}]\", name);\n             write!(w, \"</pre>\");\n         }\n         MacroKind::Derive => {\n-            write!(w, \"<pre class='rust derive'>\");\n+            write!(w, \"<pre class=\\\"rust derive\\\">\");\n             write!(w, \"#[derive({})]\", name);\n             if !m.helpers.is_empty() {\n                 writeln!(w, \"\\n{{\");"}]}