{"sha": "7714cccf2657151b634ae0cdcf908573e838e4d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MTRjY2NmMjY1NzE1MWI2MzRhZTBjZGNmOTA4NTczZTgzOGU0ZDc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-23T08:38:30Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-23T08:38:30Z"}, "message": "implement \"type_name\" intrinsic", "tree": {"sha": "65fc03a588f7f9a0c9bcf67f1aa0692e83f5ddcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65fc03a588f7f9a0c9bcf67f1aa0692e83f5ddcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7714cccf2657151b634ae0cdcf908573e838e4d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX5OoGAAoJEFbW7qD8Z6xGkKoP+waYbP3s1MVfwBq61IPbrL/R\nnbxbOSPOcWsdBpcgcHRCnYzr5NnxwyeKhdoK6PCyvG3G+2UYENXedbyymDGuyCRW\nPpmyEV4TRGCmc9Hvx3mtGSqWJKQzk8ibakMTRAbXE9x9bU7VHWEnUYyCxYWxTeuf\nRSA8LvjTKXQtG+5GqeepDvdQWHWRGx7CM20LdJeCCU9LAKLxxaz95t5YTP26GF+U\nJw9WPLOpOkTtAb8R/wwXzloHJyuBaDDZjghQwaenFiavgRl6C0F3xhTqm+8vpeL1\nKmTMNLpJjYPlg9I9+RgKR60CyxpWXzDZ1ihHlckhBgA5KlmGiI7nncfSqGpuxoMl\nWuK02OhTOAj2xeY2eWphHUV8uR+XSAn/QT+A6xfh0qvj9d8C52NAyUGL6n+0x46n\nWhla9xPsFh5sfpGSu2PC6RghucW+FNAsuSWRCHAL9/m59FyW+0VZFq/uLl9t2qN9\nKayTHKDeAIk1ilH1ElAWpsmfvVLvdE9BvnPKGIstQGkaGrxRwcohsDUZUzTyZXPf\nkj5FY7uEJtC0moYPI3QITWBAVzu87ogyW0+NoHdhTHmEuW0e0qr40wIvbp8SnHij\n3YxIN1lmQR1efs7Chds/HLq6QsodpmGs6WNLNuwTM7zL3W4ndjft4mu3YfVYugOt\nPoW9D3WsvqugdZJzRsyi\n=5axe\n-----END PGP SIGNATURE-----", "payload": "tree 65fc03a588f7f9a0c9bcf67f1aa0692e83f5ddcd\nparent 2282289ad5fbfaaaffd6b4fe4ceb6665ab9ab391\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474619910 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474619910 +0200\n\nimplement \"type_name\" intrinsic"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7714cccf2657151b634ae0cdcf908573e838e4d7", "html_url": "https://github.com/rust-lang/rust/commit/7714cccf2657151b634ae0cdcf908573e838e4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7714cccf2657151b634ae0cdcf908573e838e4d7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2282289ad5fbfaaaffd6b4fe4ceb6665ab9ab391", "url": "https://api.github.com/repos/rust-lang/rust/commits/2282289ad5fbfaaaffd6b4fe4ceb6665ab9ab391", "html_url": "https://github.com/rust-lang/rust/commit/2282289ad5fbfaaaffd6b4fe4ceb6665ab9ab391"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "dcca9605b1a4480006cf0a8e4ee38c51b26a83f7", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7714cccf2657151b634ae0cdcf908573e838e4d7/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7714cccf2657151b634ae0cdcf908573e838e4d7/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=7714cccf2657151b634ae0cdcf908573e838e4d7", "patch": "@@ -204,42 +204,45 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n-    fn const_to_value(&mut self, const_val: &ConstVal) -> EvalResult<'tcx, Value> {\n+    pub fn str_to_primval(&mut self, s: &str) -> EvalResult<'tcx, PrimVal> {\n+        // FIXME: cache these allocs\n+        let ptr = self.memory.allocate(s.len(), 1)?;\n+        self.memory.write_bytes(ptr, s.as_bytes())?;\n+        self.memory.freeze(ptr.alloc_id)?;\n+        Ok(PrimVal::SlicePtr(ptr, s.len() as u64))\n+    }\n+\n+    fn const_to_primval(&mut self, const_val: &ConstVal) -> EvalResult<'tcx, PrimVal> {\n         use rustc::middle::const_val::ConstVal::*;\n         use rustc_const_math::{ConstInt, ConstIsize, ConstUsize, ConstFloat};\n \n         let primval = match *const_val {\n-            Integral(ConstInt::I8(i)) => Value::ByVal(PrimVal::I8(i)),\n-            Integral(ConstInt::U8(i)) => Value::ByVal(PrimVal::U8(i)),\n+            Integral(ConstInt::I8(i)) => PrimVal::I8(i),\n+            Integral(ConstInt::U8(i)) => PrimVal::U8(i),\n             Integral(ConstInt::Isize(ConstIsize::Is16(i))) |\n-            Integral(ConstInt::I16(i)) => Value::ByVal(PrimVal::I16(i)),\n+            Integral(ConstInt::I16(i)) => PrimVal::I16(i),\n             Integral(ConstInt::Usize(ConstUsize::Us16(i))) |\n-            Integral(ConstInt::U16(i)) => Value::ByVal(PrimVal::U16(i)),\n+            Integral(ConstInt::U16(i)) => PrimVal::U16(i),\n             Integral(ConstInt::Isize(ConstIsize::Is32(i))) |\n-            Integral(ConstInt::I32(i)) => Value::ByVal(PrimVal::I32(i)),\n+            Integral(ConstInt::I32(i)) => PrimVal::I32(i),\n             Integral(ConstInt::Usize(ConstUsize::Us32(i))) |\n-            Integral(ConstInt::U32(i)) => Value::ByVal(PrimVal::U32(i)),\n+            Integral(ConstInt::U32(i)) => PrimVal::U32(i),\n             Integral(ConstInt::Isize(ConstIsize::Is64(i))) |\n-            Integral(ConstInt::I64(i)) => Value::ByVal(PrimVal::I64(i)),\n+            Integral(ConstInt::I64(i)) => PrimVal::I64(i),\n             Integral(ConstInt::Usize(ConstUsize::Us64(i))) |\n-            Integral(ConstInt::U64(i)) => Value::ByVal(PrimVal::U64(i)),\n-            Float(ConstFloat::F32(f)) => Value::ByVal(PrimVal::F32(f)),\n-            Float(ConstFloat::F64(f)) => Value::ByVal(PrimVal::F64(f)),\n-            Bool(b) => Value::ByVal(PrimVal::Bool(b)),\n-            Char(c) => Value::ByVal(PrimVal::Char(c)),\n-\n-            Str(ref s) => {\n-                let ptr = self.memory.allocate(s.len(), 1)?;\n-                self.memory.write_bytes(ptr, s.as_bytes())?;\n-                self.memory.freeze(ptr.alloc_id)?;\n-                Value::ByVal(PrimVal::SlicePtr(ptr, s.len() as u64))\n-            }\n+            Integral(ConstInt::U64(i)) => PrimVal::U64(i),\n+            Float(ConstFloat::F32(f)) => PrimVal::F32(f),\n+            Float(ConstFloat::F64(f)) => PrimVal::F64(f),\n+            Bool(b) => PrimVal::Bool(b),\n+            Char(c) => PrimVal::Char(c),\n+\n+            Str(ref s) => self.str_to_primval(s)?,\n \n             ByteStr(ref bs) => {\n                 let ptr = self.memory.allocate(bs.len(), 1)?;\n                 self.memory.write_bytes(ptr, bs)?;\n                 self.memory.freeze(ptr.alloc_id)?;\n-                Value::ByVal(PrimVal::Ptr(ptr))\n+                PrimVal::Ptr(ptr)\n             }\n \n             Struct(_)    => unimplemented!(),\n@@ -787,7 +790,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Constant(mir::Constant { ref literal, ty, .. }) => {\n                 use rustc::mir::repr::Literal;\n                 let value = match *literal {\n-                    Literal::Value { ref value } => self.const_to_value(value)?,\n+                    Literal::Value { ref value } => Value::ByVal(self.const_to_primval(value)?),\n \n                     Literal::Item { def_id, substs } => {\n                         if let ty::TyFnDef(..) = ty.sty {"}, {"sha": "103fe111fa353ddb57530afcecbc94c84f488b73", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7714cccf2657151b634ae0cdcf908573e838e4d7/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7714cccf2657151b634ae0cdcf908573e838e4d7/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=7714cccf2657151b634ae0cdcf908573e838e4d7", "patch": "@@ -199,14 +199,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let (size, _) = self.size_and_align_of_dst(ty, args_ptrs[0])?;\n                 self.memory.write_uint(dest, size, pointer_size)?;\n             }\n-            // FIXME: wait for eval_operand_to_ptr to be gone\n-            /*\n             \"type_name\" => {\n                 let ty = substs.type_at(0);\n                 let ty_name = ty.to_string();\n-                let s = self.str_to_value(&ty_name)?;\n-                self.memory.write_ptr(dest, s)?;\n-            }*/\n+                let s = self.str_to_primval(&ty_name)?;\n+                self.memory.write_primval(dest, s)?;\n+            }\n             \"type_id\" => {\n                 let ty = substs.type_at(0);\n                 let n = self.tcx.type_id_hash(ty);"}]}