{"sha": "62fba55670f3f54356cd757ac6d221be42745fad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZmJhNTU2NzBmM2Y1NDM1NmNkNzU3YWM2ZDIyMWJlNDI3NDVmYWQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-18T23:33:31Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-12T12:30:58Z"}, "message": "Make trivial dropck outlives a query\n\nThis allows caching some recursive types and getting to an error much\nmore quickly.", "tree": {"sha": "9cc18170e46f127a94ffb5b6c26522780bb6480b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc18170e46f127a94ffb5b6c26522780bb6480b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62fba55670f3f54356cd757ac6d221be42745fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62fba55670f3f54356cd757ac6d221be42745fad", "html_url": "https://github.com/rust-lang/rust/commit/62fba55670f3f54356cd757ac6d221be42745fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62fba55670f3f54356cd757ac6d221be42745fad/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "026447b9b0816bfc92d8072145a7a330ec8e3298", "url": "https://api.github.com/repos/rust-lang/rust/commits/026447b9b0816bfc92d8072145a7a330ec8e3298", "html_url": "https://github.com/rust-lang/rust/commit/026447b9b0816bfc92d8072145a7a330ec8e3298"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "2a012c5274191c903c8366373c97af387e8f7453", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62fba55670f3f54356cd757ac6d221be42745fad/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fba55670f3f54356cd757ac6d221be42745fad/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=62fba55670f3f54356cd757ac6d221be42745fad", "patch": "@@ -231,6 +231,12 @@ rustc_queries! {\n             cycle_delay_bug\n         }\n \n+        query trivial_dropck_outlives(ty: Ty<'tcx>) -> bool {\n+            anon\n+            no_force\n+            desc { \"checking if `{:?}` has trivial dropck\", ty }\n+        }\n+\n         query adt_dtorck_constraint(\n             _: DefId\n         ) -> Result<DtorckConstraint<'tcx>, NoSolution> {}"}, {"sha": "e84c91daf293f39fbbea8dfc04592a1384406264", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62fba55670f3f54356cd757ac6d221be42745fad/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fba55670f3f54356cd757ac6d221be42745fad/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=62fba55670f3f54356cd757ac6d221be42745fad", "patch": "@@ -5,6 +5,7 @@ use std::iter::FromIterator;\n use syntax::source_map::Span;\n use crate::ty::subst::GenericArg;\n use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::query::Providers;\n \n impl<'cx, 'tcx> At<'cx, 'tcx> {\n     /// Given a type `ty` of some value being dropped, computes a set\n@@ -33,7 +34,7 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n         // Quick check: there are a number of cases that we know do not require\n         // any destructor.\n         let tcx = self.infcx.tcx;\n-        if trivial_dropck_outlives(tcx, ty) {\n+        if tcx.trivial_dropck_outlives(ty) {\n             return InferOk {\n                 value: vec![],\n                 obligations: vec![],\n@@ -207,15 +208,15 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         | ty::Error => true,\n \n         // [T; N] and [T] have same properties as T.\n-        ty::Array(ty, _) | ty::Slice(ty) => trivial_dropck_outlives(tcx, ty),\n+        ty::Array(ty, _) | ty::Slice(ty) => tcx.trivial_dropck_outlives(ty),\n \n         // (T1..Tn) and closures have same properties as T1..Tn --\n         // check if *any* of those are trivial.\n-        ty::Tuple(ref tys) => tys.iter().all(|t| trivial_dropck_outlives(tcx, t.expect_ty())),\n+        ty::Tuple(ref tys) => tys.iter().all(|t| tcx.trivial_dropck_outlives(t.expect_ty())),\n         ty::Closure(def_id, ref substs) => substs\n             .as_closure()\n             .upvar_tys(def_id, tcx)\n-            .all(|t| trivial_dropck_outlives(tcx, t)),\n+            .all(|t| tcx.trivial_dropck_outlives(t)),\n \n         ty::Adt(def, _) => {\n             if Some(def.did) == tcx.lang_items().manually_drop() {\n@@ -243,3 +244,10 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n     }\n }\n+\n+crate fn provide(p: &mut Providers<'_>) {\n+    *p = Providers {\n+        trivial_dropck_outlives,\n+        ..*p\n+    };\n+}"}, {"sha": "86a32d68fc09eca78d414b9f393028e39db53cae", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62fba55670f3f54356cd757ac6d221be42745fad/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fba55670f3f54356cd757ac6d221be42745fad/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=62fba55670f3f54356cd757ac6d221be42745fad", "patch": "@@ -1,5 +1,4 @@\n use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n-use crate::traits::query::dropck_outlives::trivial_dropck_outlives;\n use crate::traits::query::dropck_outlives::DropckOutlivesResult;\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n@@ -22,7 +21,7 @@ impl super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         key: &ParamEnvAnd<'tcx, Self>,\n     ) -> Option<Self::QueryResponse> {\n-        if trivial_dropck_outlives(tcx, key.value.dropped_ty) {\n+        if tcx.trivial_dropck_outlives(key.value.dropped_ty) {\n             Some(DropckOutlivesResult::default())\n         } else {\n             None"}, {"sha": "01b7cda6fe9147397ce69669d44efea9a9604a49", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62fba55670f3f54356cd757ac6d221be42745fad/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fba55670f3f54356cd757ac6d221be42745fad/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=62fba55670f3f54356cd757ac6d221be42745fad", "patch": "@@ -3394,6 +3394,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     layout::provide(providers);\n     util::provide(providers);\n     constness::provide(providers);\n+    crate::traits::query::dropck_outlives::provide(providers);\n     *providers = ty::query::Providers {\n         asyncness,\n         associated_item,"}, {"sha": "e751c94f23d11b6b08da07087ecaec1bdf83f837", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62fba55670f3f54356cd757ac6d221be42745fad/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fba55670f3f54356cd757ac6d221be42745fad/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=62fba55670f3f54356cd757ac6d221be42745fad", "patch": "@@ -166,6 +166,10 @@ fn dtorck_constraint_for_ty<'tcx>(\n         });\n     }\n \n+    if tcx.trivial_dropck_outlives(ty) {\n+        return Ok(DtorckConstraint::empty());\n+    }\n+\n     let result = match ty.kind {\n         ty::Bool\n         | ty::Char"}]}