{"sha": "8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZGM4ZjM5MmMzZjVkMWJkZjYwMTc1NmJmZTQ0MmI3Njk4ZTYzMTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-22T05:46:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-24T01:00:32Z"}, "message": "Support foreign 'static mut' variables as well", "tree": {"sha": "09175a847c4f73b5804195e60e3638f9aeee67c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09175a847c4f73b5804195e60e3638f9aeee67c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "html_url": "https://github.com/rust-lang/rust/commit/8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1841b31c61c2cca9c54264edd2a78b994b9638e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1841b31c61c2cca9c54264edd2a78b994b9638e9", "html_url": "https://github.com/rust-lang/rust/commit/1841b31c61c2cca9c54264edd2a78b994b9638e9"}], "stats": {"total": 169, "additions": 129, "deletions": 40}, "files": [{"sha": "7d18bdb77efef27c3c0942860eca43556216255f", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -1111,9 +1111,13 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n         }\n         encode_path(ecx, ebml_w, path, ast_map::path_name(nitem.ident));\n       }\n-      foreign_item_const(*) => {\n+      foreign_item_static(_, mutbl) => {\n         encode_def_id(ebml_w, local_def(nitem.id));\n-        encode_family(ebml_w, 'c');\n+        if mutbl {\n+            encode_family(ebml_w, 'b');\n+        } else {\n+            encode_family(ebml_w, 'c');\n+        }\n         encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, nitem.id));\n         encode_symbol(ecx, ebml_w, nitem.id);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(nitem.ident));"}, {"sha": "17ff5930078df40a27580b3556ac90562b3aa5a0", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -709,40 +709,42 @@ fn check_item_default_methods(cx: &Context, item: @ast::item) {\n }\n \n fn check_item_ctypes(cx: &Context, it: @ast::item) {\n+    fn check_ty(cx: &Context, ty: @ast::Ty) {\n+        match ty.node {\n+            ast::ty_path(_, _, id) => {\n+                match cx.tcx.def_map.get_copy(&id) {\n+                    ast::def_prim_ty(ast::ty_int(ast::ty_i)) => {\n+                        cx.span_lint(ctypes, ty.span,\n+                                \"found rust type `int` in foreign module, while \\\n+                                libc::c_int or libc::c_long should be used\");\n+                    }\n+                    ast::def_prim_ty(ast::ty_uint(ast::ty_u)) => {\n+                        cx.span_lint(ctypes, ty.span,\n+                                \"found rust type `uint` in foreign module, while \\\n+                                libc::c_uint or libc::c_ulong should be used\");\n+                    }\n+                    _ => ()\n+                }\n+            }\n+            _ => ()\n+        }\n+    }\n \n     fn check_foreign_fn(cx: &Context, decl: &ast::fn_decl) {\n         let tys = vec::map(decl.inputs, |a| a.ty );\n         for vec::each(vec::append_one(tys, decl.output)) |ty| {\n-            match ty.node {\n-              ast::ty_path(_, _, id) => {\n-                match cx.tcx.def_map.get_copy(&id) {\n-                  ast::def_prim_ty(ast::ty_int(ast::ty_i)) => {\n-                    cx.span_lint(ctypes, ty.span,\n-                        \"found rust type `int` in foreign module, while \\\n-                         libc::c_int or libc::c_long should be used\");\n-                  }\n-                  ast::def_prim_ty(ast::ty_uint(ast::ty_u)) => {\n-                    cx.span_lint(ctypes, ty.span,\n-                        \"found rust type `uint` in foreign module, while \\\n-                         libc::c_uint or libc::c_ulong should be used\");\n-                  }\n-                  _ => ()\n-                }\n-              }\n-              _ => ()\n-            }\n+            check_ty(cx, *ty);\n         }\n     }\n \n     match it.node {\n       ast::item_foreign_mod(ref nmod) if !nmod.abis.is_intrinsic() => {\n         for nmod.items.iter().advance |ni| {\n             match ni.node {\n-              ast::foreign_item_fn(ref decl, _, _) => {\n-                check_foreign_fn(cx, decl);\n-              }\n-              // FIXME #4622: Not implemented.\n-              ast::foreign_item_const(*) => {}\n+                ast::foreign_item_fn(ref decl, _, _) => {\n+                    check_foreign_fn(cx, decl);\n+                }\n+                ast::foreign_item_static(t, _) => { check_ty(cx, t); }\n             }\n         }\n       }"}, {"sha": "ed385ae542154c580111d7cd51497a9a69b0235f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -1566,8 +1566,8 @@ impl Resolver {\n                     visit_foreign_item(foreign_item, (new_parent, visitor));\n                 }\n             }\n-            foreign_item_const(*) => {\n-                let def = def_static(local_def(foreign_item.id), false);\n+            foreign_item_static(_, m) => {\n+                let def = def_static(local_def(foreign_item.id), m);\n                 name_bindings.define_value(Public, def, foreign_item.span);\n \n                 visit_foreign_item(foreign_item, (new_parent, visitor));\n@@ -3665,7 +3665,7 @@ impl Resolver {\n                                     || visit_foreign_item(*foreign_item,\n                                                           ((), visitor)));\n                             }\n-                            foreign_item_const(_) => {\n+                            foreign_item_static(*) => {\n                                 visit_foreign_item(*foreign_item,\n                                                    ((), visitor));\n                             }"}, {"sha": "0e322c187af2b02c2cd61a5d406b027216090fed", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -2463,7 +2463,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::node_id) -> ValueRef {\n                                 ni.id,\n                                 ni.attrs)\n                 }\n-                ast::foreign_item_const(*) => {\n+                ast::foreign_item_static(*) => {\n                     let typ = ty::node_id_to_type(ccx.tcx, ni.id);\n                     let ident = token::ident_to_str(&ni.ident);\n                     let g = do str::as_c_str(ident) |buf| {"}, {"sha": "54bfc25244f0d3cc1fcf51e42b2b44e8ab867622", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -332,7 +332,7 @@ pub fn trans_foreign_mod(ccx: @mut CrateContext,\n                     }\n                 }\n             }\n-            ast::foreign_item_const(*) => {\n+            ast::foreign_item_static(*) => {\n                 let ident = token::ident_to_str(&foreign_item.ident);\n                 ccx.item_symbols.insert(foreign_item.id, /* bad */ident.to_owned());\n             }"}, {"sha": "33e483e552a74a451f222a81148c093be6afdb1e", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -1153,7 +1153,7 @@ pub fn ty_of_foreign_item(ccx: &CrateCtxt,\n                                   generics,\n                                   abis)\n         }\n-        ast::foreign_item_const(t) => {\n+        ast::foreign_item_static(t, _) => {\n             ty::ty_param_bounds_and_ty {\n                 generics: ty::Generics {\n                     type_param_defs: @~[],"}, {"sha": "b7b2b70769bbdb5c6b37a5cf1ffccef5c68cb57e", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -150,7 +150,7 @@ fn nmoddoc_from_mod(\n           ast::foreign_item_fn(*) => {\n             fns.push(fndoc_from_fn(ItemDoc));\n           }\n-          ast::foreign_item_const(*) => {} // XXX: Not implemented.\n+          ast::foreign_item_static(*) => {} // XXX: Not implemented.\n         }\n     }\n     doc::NmodDoc {"}, {"sha": "c7f3b41475f0723f3ab2d5ad6864cda6ce34f4a6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -1124,7 +1124,7 @@ pub struct foreign_item {\n #[deriving(Eq, Encodable, Decodable)]\n pub enum foreign_item_ {\n     foreign_item_fn(fn_decl, purity, Generics),\n-    foreign_item_const(@Ty)\n+    foreign_item_static(@Ty, /* is_mutbl */ bool),\n }\n \n // The data we save and restore about an inlined item or method.  This is not"}, {"sha": "25839fb46339608117acf12a461ba28df2191385", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -236,8 +236,8 @@ fn noop_fold_foreign_item(ni: @foreign_item, fld: @ast_fold)\n                         purity,\n                         fold_generics(generics, fld))\n                 }\n-                foreign_item_const(t) => {\n-                    foreign_item_const(fld.fold_ty(t))\n+                foreign_item_static(t, m) => {\n+                    foreign_item_static(fld.fold_ty(t), m)\n                 }\n             },\n         id: fld.new_id(ni.id),"}, {"sha": "cc4a1f4572267af9bae2e47c1f0c9bd28ecfd202", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -33,7 +33,7 @@ use ast::{expr_vec, expr_vstore, expr_vstore_mut_box};\n use ast::{expr_vstore_slice, expr_vstore_box};\n use ast::{expr_vstore_mut_slice, expr_while, extern_fn, field, fn_decl};\n use ast::{expr_vstore_uniq, Onceness, Once, Many};\n-use ast::{foreign_item, foreign_item_const, foreign_item_fn, foreign_mod};\n+use ast::{foreign_item, foreign_item_static, foreign_item_fn, foreign_mod};\n use ast::{ident, impure_fn, inherited, item, item_, item_static};\n use ast::{item_enum, item_fn, item_foreign_mod, item_impl};\n use ast::{item_mac, item_mod, item_struct, item_trait, item_ty, lit, lit_};\n@@ -3684,6 +3684,7 @@ impl Parser {\n         } else {\n             self.expect_keyword(keywords::Static);\n         }\n+        let mutbl = self.eat_keyword(keywords::Mut);\n \n         let ident = self.parse_ident();\n         self.expect(&token::COLON);\n@@ -3692,7 +3693,7 @@ impl Parser {\n         self.expect(&token::SEMI);\n         @ast::foreign_item { ident: ident,\n                              attrs: attrs,\n-                             node: foreign_item_const(ty),\n+                             node: foreign_item_static(ty, mutbl),\n                              id: self.get_id(),\n                              span: mk_sp(lo, hi),\n                              vis: vis }"}, {"sha": "1a3155337a5e3df6eb2f5f6f6c564bde38a4d67a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -458,8 +458,11 @@ pub fn print_foreign_item(s: @ps, item: @ast::foreign_item) {\n         word(s.s, \";\");\n         end(s); // end the outer fn box\n       }\n-      ast::foreign_item_const(t) => {\n+      ast::foreign_item_static(t, m) => {\n         head(s, \"static\");\n+        if m {\n+            word_space(s, \"mut\");\n+        }\n         print_ident(s, item.ident);\n         word_space(s, \":\");\n         print_type(s, t);"}, {"sha": "d7914832835ac59c685f7b1b3a3053bee3366da8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -326,7 +326,7 @@ pub fn visit_foreign_item<E: Copy>(ni: @foreign_item, (e, v): (E, vt<E>)) {\n             visit_fn_decl(fd, (copy e, v));\n             (v.visit_generics)(generics, (e, v));\n         }\n-        foreign_item_const(t) => {\n+        foreign_item_static(t, _) => {\n             (v.visit_ty)(t, (e, v));\n         }\n     }"}, {"sha": "6ae5e978106e417abb84dc28cda2c959193c88a6", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -154,6 +154,16 @@ debug_abi_2(floats f) {\n     return ff;\n }\n \n+extern \"C\" int\n+debug_static_mut;\n+\n+int debug_static_mut = 3;\n+\n+extern \"C\" void\n+debug_static_mut_check_four() {\n+    assert(debug_static_mut == 4);\n+}\n+\n /* Debug builtins for std::dbg. */\n \n static void"}, {"sha": "505de6e20b700f3a65a911c5bfd1331509be6a53", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -7,6 +7,8 @@ debug_tydesc\n debug_get_stk_seg\n debug_abi_1\n debug_abi_2\n+debug_static_mut\n+debug_static_mut_check_four\n get_task_id\n get_time\n rust_tzset\n@@ -239,4 +241,4 @@ rust_valgrind_stack_deregister\n rust_take_env_lock\n rust_drop_env_lock\n rust_update_log_settings\n-rust_running_on_valgrind\n\\ No newline at end of file\n+rust_running_on_valgrind"}, {"sha": "7b371cf708dc1af76df0858c66a0b85271defd56", "filename": "src/test/compile-fail/static-mut-foreign-requires-unsafe.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::libc;\n+\n+extern {\n+    static mut a: libc::c_int;\n+}\n+\n+fn main() {\n+    a += 3;     //~ ERROR: requires unsafe\n+    a = 4;      //~ ERROR: requires unsafe\n+    let _b = a; //~ ERROR: requires unsafe\n+}"}, {"sha": "66d34c7e454d069844093c50aebab8f16a411d72", "filename": "src/test/run-pass/static-mut-foreign.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc8f392c3f5d1bdf601756bfe442b7698e6315/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs?ref=8fdc8f392c3f5d1bdf601756bfe442b7698e6315", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Constants (static variables) can be used to match in patterns, but mutable\n+// statics cannot. This ensures that there's some form of error if this is\n+// attempted.\n+\n+use std::libc;\n+\n+#[nolink]\n+extern {\n+    static mut debug_static_mut: libc::c_int;\n+    pub fn debug_static_mut_check_four();\n+}\n+\n+unsafe fn static_bound(_: &'static libc::c_int) {}\n+\n+fn static_bound_set(a: &'static mut libc::c_int) {\n+    *a = 3;\n+}\n+\n+unsafe fn run() {\n+    assert!(debug_static_mut == 3);\n+    debug_static_mut = 4;\n+    assert!(debug_static_mut == 4);\n+    debug_static_mut_check_four();\n+    debug_static_mut += 1;\n+    assert!(debug_static_mut == 5);\n+    debug_static_mut *= 3;\n+    assert!(debug_static_mut == 15);\n+    debug_static_mut = -3;\n+    assert!(debug_static_mut == -3);\n+    static_bound(&debug_static_mut);\n+    static_bound_set(&mut debug_static_mut);\n+}\n+\n+fn main() {\n+    unsafe { run() }\n+}"}]}