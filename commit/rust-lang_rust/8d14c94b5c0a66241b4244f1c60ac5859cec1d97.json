{"sha": "8d14c94b5c0a66241b4244f1c60ac5859cec1d97", "node_id": "C_kwDOAAsO6NoAKDhkMTRjOTRiNWMwYTY2MjQxYjQyNDRmMWM2MGFjNTg1OWNlYzFkOTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-17T12:08:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-17T12:08:30Z"}, "message": "Auto merge of #8292 - marekdownar:8239, r=xFrednet\n\nissue #8239: Printed hint for lint or_fun_call is cropped and does no\u2026\n\nfixes rust-lang/rust-clippy#8239\n\nchangelog: [`or_fun_call`]: if suggestion contains more lines than MAX_SUGGESTION_HIGHLIGHT_LINES it is stripped to one line", "tree": {"sha": "7778ea24bc04bc0e609f34af52461c5ebb2b16c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7778ea24bc04bc0e609f34af52461c5ebb2b16c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d14c94b5c0a66241b4244f1c60ac5859cec1d97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d14c94b5c0a66241b4244f1c60ac5859cec1d97", "html_url": "https://github.com/rust-lang/rust/commit/8d14c94b5c0a66241b4244f1c60ac5859cec1d97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d14c94b5c0a66241b4244f1c60ac5859cec1d97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72c59fda27650b56a60b0a81afde6911b6feba5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/72c59fda27650b56a60b0a81afde6911b6feba5d", "html_url": "https://github.com/rust-lang/rust/commit/72c59fda27650b56a60b0a81afde6911b6feba5d"}, {"sha": "69d78ceeba0627d650d6058a456fdfb2df0eaa7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/69d78ceeba0627d650d6058a456fdfb2df0eaa7f", "html_url": "https://github.com/rust-lang/rust/commit/69d78ceeba0627d650d6058a456fdfb2df0eaa7f"}], "stats": {"total": 178, "additions": 171, "deletions": 7}, "files": [{"sha": "448dc4e6147ffb97470ad021a674bab68c8ed432", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8d14c94b5c0a66241b4244f1c60ac5859cec1d97/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d14c94b5c0a66241b4244f1c60ac5859cec1d97/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=8d14c94b5c0a66241b4244f1c60ac5859cec1d97", "patch": "@@ -4,6 +4,7 @@ use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_mac\n use clippy_utils::ty::{implements_trait, match_type};\n use clippy_utils::{contains_return, is_trait_item, last_path_segment, paths};\n use if_chain::if_chain;\n+use rustc_errors::emitter::MAX_SUGGESTION_HIGHLIGHT_LINES;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -23,6 +24,7 @@ pub(super) fn check<'tcx>(\n     args: &'tcx [hir::Expr<'_>],\n ) {\n     /// Checks for `unwrap_or(T::new())` or `unwrap_or(T::default())`.\n+    #[allow(clippy::too_many_arguments)]\n     fn check_unwrap_or_default(\n         cx: &LateContext<'_>,\n         name: &str,\n@@ -31,6 +33,7 @@ pub(super) fn check<'tcx>(\n         arg: &hir::Expr<'_>,\n         or_has_args: bool,\n         span: Span,\n+        method_span: Span,\n     ) -> bool {\n         let is_default_default = || is_trait_item(cx, fun, sym::Default);\n \n@@ -52,16 +55,27 @@ pub(super) fn check<'tcx>(\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n+                let hint = \"unwrap_or_default()\";\n+                let mut sugg_span = span;\n+\n+                let mut sugg: String = format!(\n+                    \"{}.{}\",\n+                    snippet_with_applicability(cx, self_expr.span, \"..\", &mut applicability),\n+                    hint\n+                );\n+\n+                if sugg.lines().count() > MAX_SUGGESTION_HIGHLIGHT_LINES {\n+                    sugg_span = method_span.with_hi(span.hi());\n+                    sugg = hint.to_string();\n+                }\n+\n                 span_lint_and_sugg(\n                     cx,\n                     OR_FUN_CALL,\n-                    span,\n+                    sugg_span,\n                     &format!(\"use of `{}` followed by a call to `{}`\", name, path),\n                     \"try this\",\n-                    format!(\n-                        \"{}.unwrap_or_default()\",\n-                        snippet_with_applicability(cx, self_expr.span, \"..\", &mut applicability)\n-                    ),\n+                    sugg,\n                     applicability,\n                 );\n \n@@ -164,7 +178,7 @@ pub(super) fn check<'tcx>(\n         match inner_arg.kind {\n             hir::ExprKind::Call(fun, or_args) => {\n                 let or_has_args = !or_args.is_empty();\n-                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span) {\n+                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span, method_span) {\n                     let fun_span = if or_has_args { None } else { Some(fun.span) };\n                     check_general_case(cx, name, method_span, self_arg, arg, expr.span, fun_span);\n                 }"}, {"sha": "3208048e0d53c82e87407376138c0d0923db3bef", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8d14c94b5c0a66241b4244f1c60ac5859cec1d97/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8d14c94b5c0a66241b4244f1c60ac5859cec1d97/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=8d14c94b5c0a66241b4244f1c60ac5859cec1d97", "patch": "@@ -176,4 +176,52 @@ mod issue6675 {\n     }\n }\n \n+mod issue8239 {\n+    fn more_than_max_suggestion_highest_lines_0() {\n+        let frames = Vec::new();\n+        frames\n+            .iter()\n+            .map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or_default();\n+    }\n+\n+    fn more_to_max_suggestion_highest_lines_1() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or_default();\n+    }\n+\n+    fn equal_to_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            }).unwrap_or_default();\n+    }\n+\n+    fn less_than_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        let map = iter.map(|f: &String| f.to_lowercase());\n+        map.reduce(|mut acc, f| {\n+            acc.push_str(&f);\n+            acc\n+        }).unwrap_or_default();\n+    }\n+}\n+\n fn main() {}"}, {"sha": "57ab5f03ee2851318b3ba58d9fcc2c72d23e442e", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8d14c94b5c0a66241b4244f1c60ac5859cec1d97/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d14c94b5c0a66241b4244f1c60ac5859cec1d97/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=8d14c94b5c0a66241b4244f1c60ac5859cec1d97", "patch": "@@ -176,4 +176,54 @@ mod issue6675 {\n     }\n }\n \n+mod issue8239 {\n+    fn more_than_max_suggestion_highest_lines_0() {\n+        let frames = Vec::new();\n+        frames\n+            .iter()\n+            .map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or(String::new());\n+    }\n+\n+    fn more_to_max_suggestion_highest_lines_1() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or(String::new());\n+    }\n+\n+    fn equal_to_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or(String::new());\n+    }\n+\n+    fn less_than_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        let map = iter.map(|f: &String| f.to_lowercase());\n+        map.reduce(|mut acc, f| {\n+            acc.push_str(&f);\n+            acc\n+        })\n+        .unwrap_or(String::new());\n+    }\n+}\n+\n fn main() {}"}, {"sha": "549b00ae3c45980c75ac3b229d2139e7375e7ccb", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8d14c94b5c0a66241b4244f1c60ac5859cec1d97/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d14c94b5c0a66241b4244f1c60ac5859cec1d97/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=8d14c94b5c0a66241b4244f1c60ac5859cec1d97", "patch": "@@ -108,5 +108,57 @@ error: use of `unwrap_or` followed by a function call\n LL |         None.unwrap_or( unsafe { ptr_to_ref(s) }    );\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| unsafe { ptr_to_ref(s) })`\n \n-error: aborting due to 18 previous errors\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:189:14\n+   |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:202:14\n+   |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:208:9\n+   |\n+LL | /         iter.map(|f: &String| f.to_lowercase())\n+LL | |             .reduce(|mut acc, f| {\n+LL | |                 let _ = \"\";\n+LL | |                 acc.push_str(&f);\n+LL | |                 acc\n+LL | |             })\n+LL | |             .unwrap_or(String::new());\n+   | |_____________________________________^\n+   |\n+help: try this\n+   |\n+LL ~         iter.map(|f: &String| f.to_lowercase())\n+LL +             .reduce(|mut acc, f| {\n+LL +                 let _ = \"\";\n+LL +                 acc.push_str(&f);\n+LL +                 acc\n+LL ~             }).unwrap_or_default();\n+   |\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:221:9\n+   |\n+LL | /         map.reduce(|mut acc, f| {\n+LL | |             acc.push_str(&f);\n+LL | |             acc\n+LL | |         })\n+LL | |         .unwrap_or(String::new());\n+   | |_________________________________^\n+   |\n+help: try this\n+   |\n+LL ~         map.reduce(|mut acc, f| {\n+LL +             acc.push_str(&f);\n+LL +             acc\n+LL ~         }).unwrap_or_default();\n+   |\n+\n+error: aborting due to 22 previous errors\n "}]}