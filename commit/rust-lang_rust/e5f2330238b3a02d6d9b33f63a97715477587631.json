{"sha": "e5f2330238b3a02d6d9b33f63a97715477587631", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZjIzMzAyMzhiM2EwMmQ2ZDliMzNmNjNhOTc3MTU0Nzc1ODc2MzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-19T05:31:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-19T05:31:31Z"}, "message": "Auto merge of #4285 - matthiaskrgr:rustup_backticks, r=phansch\n\nrustup https://github.com/rust-lang/rust/pull/62764\n\n(was merged as part of https://github.com/rust-lang/rust/pull/62782 )\n\nchangelog: none", "tree": {"sha": "a900e02a789b8071550756d378edcbced0ac7f8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a900e02a789b8071550756d378edcbced0ac7f8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5f2330238b3a02d6d9b33f63a97715477587631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f2330238b3a02d6d9b33f63a97715477587631", "html_url": "https://github.com/rust-lang/rust/commit/e5f2330238b3a02d6d9b33f63a97715477587631", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5f2330238b3a02d6d9b33f63a97715477587631/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c46727319e374f8e32d5e18cbef25ece9ee7a4cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46727319e374f8e32d5e18cbef25ece9ee7a4cb", "html_url": "https://github.com/rust-lang/rust/commit/c46727319e374f8e32d5e18cbef25ece9ee7a4cb"}, {"sha": "deb586a0c6987d6babd94f466765b97242592a7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/deb586a0c6987d6babd94f466765b97242592a7c", "html_url": "https://github.com/rust-lang/rust/commit/deb586a0c6987d6babd94f466765b97242592a7c"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "c22c7eb75b46174bcf42b4be6fbbee78eb4d20c6", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -141,7 +141,7 @@ error: <-comparison of unit values detected. This will always be false\n LL |     () < {};\n    |     ^^^^^^^\n    |\n-   = note: #[deny(clippy::unit_cmp)] on by default\n+   = note: `#[deny(clippy::unit_cmp)]` on by default\n \n error: aborting due to 18 previous errors\n "}, {"sha": "dc5ad6dfbdff99b390755739f763c1eb3f0cc5a9", "filename": "tests/ui/bit_masks.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -12,7 +12,7 @@ error: this operation will always return zero. This is likely not the intended o\n LL |     x & 0 == 0;\n    |     ^^^^^\n    |\n-   = note: #[deny(clippy::erasing_op)] on by default\n+   = note: `#[deny(clippy::erasing_op)]` on by default\n \n error: incompatible bit mask: `_ & 2` can never be equal to `1`\n   --> $DIR/bit_masks.rs:17:5"}, {"sha": "8c86249dc8452a37425efb96e955c897a695b964", "filename": "tests/ui/cstring.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -4,7 +4,7 @@ error: you are getting the inner pointer of a temporary `CString`\n LL |     CString::new(\"foo\").unwrap().as_ptr();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(clippy::temporary_cstring_as_ptr)] on by default\n+   = note: `#[deny(clippy::temporary_cstring_as_ptr)]` on by default\n    = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n   --> $DIR/cstring.rs:7:5"}, {"sha": "875018961090714a64f3c55161333715fb308d51", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -4,7 +4,7 @@ error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n LL | #[derive(Hash)]\n    |          ^^^^\n    |\n-   = note: #[deny(clippy::derive_hash_xor_eq)] on by default\n+   = note: `#[deny(clippy::derive_hash_xor_eq)]` on by default\n note: `PartialEq` implemented here\n   --> $DIR/derive.rs:19:1\n    |"}, {"sha": "5d360ef30a1d89048c017a061e64167a2acbd9a5", "filename": "tests/ui/drop_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fdrop_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fdrop_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_bounds.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -4,7 +4,7 @@ error: Bounds of the form `T: Drop` are useless. Use `std::mem::needs_drop` to d\n LL | fn foo<T: Drop>() {}\n    |           ^^^^\n    |\n-   = note: #[deny(clippy::drop_bounds)] on by default\n+   = note: `#[deny(clippy::drop_bounds)]` on by default\n \n error: Bounds of the form `T: Drop` are useless. Use `std::mem::needs_drop` to detect if a type has drop glue.\n   --> $DIR/drop_bounds.rs:5:8"}, {"sha": "194a0bfec5b32ef9e9393c13c489f662ef06fe15", "filename": "tests/ui/for_loop_over_option_result.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Ffor_loop_over_option_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Ffor_loop_over_option_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_over_option_result.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -30,7 +30,7 @@ error: you are iterating over `Iterator::next()` which is an Option; this will c\n LL |     for x in v.iter().next() {\n    |              ^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(clippy::iter_next_loop)] on by default\n+   = note: `#[deny(clippy::iter_next_loop)]` on by default\n \n error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n   --> $DIR/for_loop_over_option_result.rs:31:14\n@@ -57,7 +57,7 @@ LL | |         break;\n LL | |     }\n    | |_____^\n    |\n-   = note: #[deny(clippy::never_loop)] on by default\n+   = note: `#[deny(clippy::never_loop)]` on by default\n \n error: this loop never actually loops\n   --> $DIR/for_loop_over_option_result.rs:53:5"}, {"sha": "d9424334c09c6e111e84945c8e2438b320665632", "filename": "tests/ui/if_same_then_else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -236,7 +236,7 @@ error: this `if` has the same condition as a previous if\n LL |     } else if true {\n    |               ^^^^\n    |\n-   = note: #[deny(clippy::ifs_same_cond)] on by default\n+   = note: `#[deny(clippy::ifs_same_cond)]` on by default\n note: same as this\n   --> $DIR/if_same_then_else.rs:235:8\n    |"}, {"sha": "b2840f7b5ccc0c9a9f7a33a8be630af0cc5d6306", "filename": "tests/ui/indexing_slicing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -4,7 +4,7 @@ error: index out of bounds: the len is 4 but the index is 4\n LL |     x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n    |     ^^^^\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: index out of bounds: the len is 4 but the index is 8\n   --> $DIR/indexing_slicing.rs:19:5"}, {"sha": "ec30a54d38178324b9690c7e80fe9debcb4ea35e", "filename": "tests/ui/infinite_iter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -111,7 +111,7 @@ error: infinite iteration detected\n LL |         let _: HashSet<i32> = (0..).collect(); // Infinite iter\n    |                               ^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(clippy::infinite_iter)] on by default\n+   = note: `#[deny(clippy::infinite_iter)]` on by default\n \n error: aborting due to 15 previous errors\n "}, {"sha": "6f0332fa8c4a726b84d3195ac568c3844816173a", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -4,7 +4,7 @@ error: Variable in the condition are not mutated in the loop body. This either l\n LL |     while y < 10 {\n    |           ^^^^^^\n    |\n-   = note: #[deny(clippy::while_immutable_condition)] on by default\n+   = note: `#[deny(clippy::while_immutable_condition)]` on by default\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n   --> $DIR/infinite_loop.rs:28:11"}, {"sha": "aeef3892dbe7e2e745b39c37bac65b14b86cdd28", "filename": "tests/ui/invalid_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Finvalid_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Finvalid_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -4,7 +4,7 @@ error: reference to zeroed memory\n LL |     let ref_zero: &T = std::mem::zeroed(); // warning\n    |                        ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(clippy::invalid_ref)] on by default\n+   = note: `#[deny(clippy::invalid_ref)]` on by default\n    = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n \n error: reference to zeroed memory"}, {"sha": "0559cee70efb4ec7525b063b4bd93351c2dcec3c", "filename": "tests/ui/lint_without_lint_pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Flint_without_lint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Flint_without_lint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_without_lint_pass.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -13,7 +13,7 @@ note: lint level defined here\n    |\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[deny(clippy::lint_without_lint_pass)] implied by #[deny(clippy::internal)]\n+   = note: `#[deny(clippy::lint_without_lint_pass)]` implied by `#[deny(clippy::internal)]`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "5c65d2fed3dab7fabfe45aee5763d5d14555145b", "filename": "tests/ui/match_bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fmatch_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fmatch_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_bool.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -83,7 +83,7 @@ error: equal expressions as operands to `&&`\n LL |     match test && test {\n    |           ^^^^^^^^^^^^\n    |\n-   = note: #[deny(clippy::eq_op)] on by default\n+   = note: `#[deny(clippy::eq_op)]` on by default\n \n error: you seem to be trying to match on a boolean expression\n   --> $DIR/match_bool.rs:36:5"}, {"sha": "17c8b3230273b8bc84a402b1a2150f9244784cf2", "filename": "tests/ui/mistyped_literal_suffix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fmistyped_literal_suffix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fmistyped_literal_suffix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmistyped_literal_suffix.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -4,7 +4,7 @@ error: mistyped literal suffix\n LL |     let fail14 = 2_32;\n    |                  ^^^^ help: did you mean to write: `2_i32`\n    |\n-   = note: #[deny(clippy::mistyped_literal_suffixes)] on by default\n+   = note: `#[deny(clippy::mistyped_literal_suffixes)]` on by default\n \n error: mistyped literal suffix\n   --> $DIR/mistyped_literal_suffix.rs:7:18"}, {"sha": "c00b4c78cf28b49182ec4441d84bcc9b10230ea9", "filename": "tests/ui/never_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -10,7 +10,7 @@ LL | |         break;\n LL | |     }\n    | |_____^\n    |\n-   = note: #[deny(clippy::never_loop)] on by default\n+   = note: `#[deny(clippy::never_loop)]` on by default\n \n error: this loop never actually loops\n   --> $DIR/never_loop.rs:32:5"}, {"sha": "634933eac6186262009dbebb84543f6deabe3cb7", "filename": "tests/ui/non_copy_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fnon_copy_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fnon_copy_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -6,7 +6,7 @@ LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n    | |\n    | help: make this a static item: `static`\n    |\n-   = note: #[deny(clippy::declare_interior_mutable_const)] on by default\n+   = note: `#[deny(clippy::declare_interior_mutable_const)]` on by default\n \n error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:11:1\n@@ -132,7 +132,7 @@ error: a const item with interior mutability should not be borrowed\n LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^\n    |\n-   = note: #[deny(clippy::borrow_interior_mutable_const)] on by default\n+   = note: `#[deny(clippy::borrow_interior_mutable_const)]` on by default\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed"}, {"sha": "cda78a47ec73e91c15e8d3242a73e8c52df3129e", "filename": "tests/ui/out_of_bounds_indexing/empty_array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -4,7 +4,7 @@ error: index out of bounds: the len is 0 but the index is 0\n LL |     empty[0];\n    |     ^^^^^^^^\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: range is out of bounds\n   --> $DIR/empty_array.rs:7:12"}, {"sha": "d9efc91da8e4413106f55c7194132379adca7b31", "filename": "tests/ui/outer_expn_info.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fouter_expn_info.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fouter_expn_info.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_info.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[deny(clippy::outer_expn_info)] implied by #[deny(clippy::internal)]\n+   = note: `#[deny(clippy::outer_expn_info)]` implied by `#[deny(clippy::internal)]`\n \n error: aborting due to previous error\n "}, {"sha": "78c3880db4993517d47ae52e4c27a6a102d93b48", "filename": "tests/ui/proc_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fproc_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fproc_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc_macro.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -4,7 +4,7 @@ error: approximate value of `f{32, 64}::consts::PI` found. Consider using it dir\n LL |     let _x = 3.14;\n    |              ^^^^\n    |\n-   = note: #[deny(clippy::approx_constant)] on by default\n+   = note: `#[deny(clippy::approx_constant)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "e8a6efc4c4d26b2ae7d5b232457b2f6cc02ae709", "filename": "tests/ui/suspicious_arithmetic_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -12,7 +12,7 @@ error: Suspicious use of binary operator in `AddAssign` impl\n LL |         *self = *self - other;\n    |                       ^\n    |\n-   = note: #[deny(clippy::suspicious_op_assign_impl)] on by default\n+   = note: `#[deny(clippy::suspicious_op_assign_impl)]` on by default\n \n error: aborting due to 2 previous errors\n "}, {"sha": "79b99ff1d1d21ea52edf2af8a1696f5be53a6ffd", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -68,7 +68,7 @@ error: using `clone` on a double-reference; this will copy the reference instead\n LL |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n    |\n-   = note: #[deny(clippy::clone_double_ref)] on by default\n+   = note: `#[deny(clippy::clone_double_ref)]` on by default\n help: try dereferencing it\n    |\n LL |     let z: &Vec<_> = &(*y).clone();"}, {"sha": "c599da8baf9b36ddf5c1050c9fd81d83ca073358", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f2330238b3a02d6d9b33f63a97715477587631/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=e5f2330238b3a02d6d9b33f63a97715477587631", "patch": "@@ -4,7 +4,7 @@ error: equal expressions as operands to `/`\n LL |     let nan = 0.0 / 0.0;\n    |               ^^^^^^^^^\n    |\n-   = note: #[deny(clippy::eq_op)] on by default\n+   = note: `#[deny(clippy::eq_op)]` on by default\n \n error: constant division of 0.0 with 0.0 will always result in NaN\n   --> $DIR/zero_div_zero.rs:4:15"}]}