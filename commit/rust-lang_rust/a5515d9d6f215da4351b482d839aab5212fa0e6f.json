{"sha": "a5515d9d6f215da4351b482d839aab5212fa0e6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NTE1ZDlkNmYyMTVkYTQzNTFiNDgyZDgzOWFhYjUyMTJmYTBlNmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-16T10:11:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-16T10:11:20Z"}, "message": "Add derive handles cursor", "tree": {"sha": "a0557e07f57fad65ad32b80010cce08b5559f9e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0557e07f57fad65ad32b80010cce08b5559f9e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5515d9d6f215da4351b482d839aab5212fa0e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5515d9d6f215da4351b482d839aab5212fa0e6f", "html_url": "https://github.com/rust-lang/rust/commit/a5515d9d6f215da4351b482d839aab5212fa0e6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5515d9d6f215da4351b482d839aab5212fa0e6f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7094291573dc819e3115950ec3b2316bd5e9ea33", "url": "https://api.github.com/repos/rust-lang/rust/commits/7094291573dc819e3115950ec3b2316bd5e9ea33", "html_url": "https://github.com/rust-lang/rust/commit/7094291573dc819e3115950ec3b2316bd5e9ea33"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "6df64be127b9203f249d4a383815e7050cd674e4", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a5515d9d6f215da4351b482d839aab5212fa0e6f/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5515d9d6f215da4351b482d839aab5212fa0e6f/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=a5515d9d6f215da4351b482d839aab5212fa0e6f", "patch": "@@ -1,6 +1,6 @@\n use {TextUnit, File, EditBuilder, Edit};\n use libsyntax2::{\n-    ast::{self, AstNode},\n+    ast::{self, AstNode, AttrsOwner},\n     SyntaxKind::COMMA,\n     SyntaxNodeRef,\n     SyntaxRoot,\n@@ -39,18 +39,28 @@ pub fn flip_comma<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce()\n }\n \n pub fn add_derive<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> ActionResult + 'a> {\n-    let syntax = file.syntax();\n-    let syntax = syntax.as_ref();\n-    let nominal = find_node::<ast::NominalDef<_>>(syntax, offset)?;\n+    let nominal = find_node::<ast::NominalDef<_>>(file.syntax_ref(), offset)?;\n     Some(move || {\n+        let derive_attr = nominal\n+            .attrs()\n+            .filter_map(|x| x.as_call())\n+            .filter(|(name, _arg)| name == \"derive\")\n+            .map(|(_name, arg)| arg)\n+            .next();\n         let mut edit = EditBuilder::new();\n-        let node_start = nominal.syntax().range().start();\n-        edit.insert(node_start, \"#[derive()]\\n\".to_string());\n+        let offset = match derive_attr {\n+            None => {\n+                let node_start = nominal.syntax().range().start();\n+                edit.insert(node_start, \"#[derive()]\\n\".to_string());\n+                node_start + TextUnit::of_str(\"#[derive(\")\n+            }\n+            Some(tt) => {\n+                tt.syntax().range().end() - TextUnit::of_char(')')\n+            }\n+        };\n         ActionResult {\n             edit: edit.finish(),\n-            cursor_position: CursorPosition::Offset(\n-                node_start + TextUnit::of_str(\"#[derive(\")\n-            ),\n+            cursor_position: CursorPosition::Offset(offset),\n         }\n     })\n }"}, {"sha": "97919d347a6e32d2a9049eeb052e8838bc9bc36b", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5515d9d6f215da4351b482d839aab5212fa0e6f/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5515d9d6f215da4351b482d839aab5212fa0e6f/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=a5515d9d6f215da4351b482d839aab5212fa0e6f", "patch": "@@ -116,7 +116,12 @@ fn test_add_derive() {\n         \"struct Foo { a: i32, <|>}\",\n         \"#[derive(<|>)]\\nstruct Foo { a: i32, }\",\n         |file, off| add_derive(file, off).map(|f| f()),\n-    )\n+    );\n+    check_action(\n+        \"#[derive(Clone)]\\nstruct Foo { a: i32<|>, }\",\n+        \"#[derive(Clone<|>)]\\nstruct Foo { a: i32, }\",\n+        |file, off| add_derive(file, off).map(|f| f()),\n+    );\n }\n \n #[test]"}, {"sha": "be3f73f7ea2a7c07cf48f4fb58ca91fb4719a8d5", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5515d9d6f215da4351b482d839aab5212fa0e6f/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5515d9d6f215da4351b482d839aab5212fa0e6f/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=a5515d9d6f215da4351b482d839aab5212fa0e6f", "patch": "@@ -339,6 +339,7 @@ impl<R: TreeRoot> AstNode<R> for NominalDef<R> {\n     }\n }\n \n+impl<R: TreeRoot> ast::AttrsOwner<R> for NominalDef<R> {}\n impl<R: TreeRoot> NominalDef<R> {}\n \n // ParenType"}, {"sha": "d53b12ab8688905bccddf20e5c5518f1fb457ffc", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a5515d9d6f215da4351b482d839aab5212fa0e6f/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5515d9d6f215da4351b482d839aab5212fa0e6f/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=a5515d9d6f215da4351b482d839aab5212fa0e6f", "patch": "@@ -52,19 +52,31 @@ impl<R: TreeRoot> File<R> {\n impl<R: TreeRoot> FnDef<R> {\n     pub fn has_atom_attr(&self, atom: &str) -> bool {\n         self.attrs()\n-            .filter_map(|x| x.value())\n-            .filter_map(|x| as_atom(x))\n+            .filter_map(|x| x.as_atom())\n             .any(|x| x == atom)\n     }\n }\n \n-fn as_atom<R: TreeRoot>(tt: TokenTree<R>) -> Option<SmolStr> {\n-    let syntax = tt.syntax_ref();\n-    let (_bra, attr, _ket) = syntax.children().collect_tuple()?;\n-    if attr.kind() == IDENT {\n-        Some(attr.leaf_text().unwrap())\n-    } else {\n-        None\n+impl<R: TreeRoot> Attr<R> {\n+    pub fn as_atom(&self) -> Option<SmolStr> {\n+        let tt = self.value()?;\n+        let (_bra, attr, _ket) = tt.syntax().children().collect_tuple()?;\n+        if attr.kind() == IDENT {\n+            Some(attr.leaf_text().unwrap())\n+        } else {\n+            None\n+        }\n+    }\n+\n+    pub fn as_call(&self) -> Option<(SmolStr, TokenTree<R>)> {\n+        let tt = self.value()?;\n+        let (_bra, attr, args, _ket) = tt.syntax().children().collect_tuple()?;\n+        let args = TokenTree::cast(args)?;\n+        if attr.kind() == IDENT {\n+            Some((attr.leaf_text().unwrap(), args))\n+        } else {\n+            None\n+        }\n     }\n }\n "}, {"sha": "abeffb2c393c7598fa2c7697247ee376b285275b", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5515d9d6f215da4351b482d839aab5212fa0e6f/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/a5515d9d6f215da4351b482d839aab5212fa0e6f/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=a5515d9d6f215da4351b482d839aab5212fa0e6f", "patch": "@@ -272,6 +272,9 @@ Grammar(\n             \"DynTraitType\",\n         ]),\n \n-        \"NominalDef\": ( enum: [\"StructDef\", \"EnumDef\"]),\n+        \"NominalDef\": (\n+            enum: [\"StructDef\", \"EnumDef\"],\n+            traits: [ \"AttrsOwner\" ],\n+        ),\n     },\n )"}]}