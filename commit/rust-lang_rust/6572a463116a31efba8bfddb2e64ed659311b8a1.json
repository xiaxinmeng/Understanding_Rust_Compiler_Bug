{"sha": "6572a463116a31efba8bfddb2e64ed659311b8a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NzJhNDYzMTE2YTMxZWZiYThiZmRkYjJlNjRlZDY1OTMxMWI4YTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-16T11:22:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-16T11:22:21Z"}, "message": "Auto merge of #37129 - arielb1:erased-normal, r=eddyb\n\nnormalize types every time HR regions are erased\n\nAssociated type normalization is inhibited by higher-ranked regions.\nTherefore, every time we erase them, we must re-normalize.\n\nI was meaning to introduce this change some time ago, but we used\nto erase regions in generic context, which broke this terribly (because\nyou can't always normalize in a generic context). That seems to be gone\nnow.\n\nEnsure this by having a `erase_late_bound_regions_and_normalize`\nfunction.\n\nFixes #37109 (the missing call was in mir::block).\n\nr? @eddyb", "tree": {"sha": "835cbaae4e34a7c09d878ad3b41e35d506d8334c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/835cbaae4e34a7c09d878ad3b41e35d506d8334c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6572a463116a31efba8bfddb2e64ed659311b8a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6572a463116a31efba8bfddb2e64ed659311b8a1", "html_url": "https://github.com/rust-lang/rust/commit/6572a463116a31efba8bfddb2e64ed659311b8a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6572a463116a31efba8bfddb2e64ed659311b8a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "html_url": "https://github.com/rust-lang/rust/commit/6dc035ed911672c6a1f7afc9eed15fb08e574e5b"}, {"sha": "ee338c31fe1185848ad1aecfb39b4d3ff149a306", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee338c31fe1185848ad1aecfb39b4d3ff149a306", "html_url": "https://github.com/rust-lang/rust/commit/ee338c31fe1185848ad1aecfb39b4d3ff149a306"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "af994e884fe47638aebfaebf5f2fbc784005232c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -583,7 +583,8 @@ impl_trans_normalize!('gcx,\n     ty::FnSig<'gcx>,\n     &'gcx ty::BareFnTy<'gcx>,\n     ty::ClosureSubsts<'gcx>,\n-    ty::PolyTraitRef<'gcx>\n+    ty::PolyTraitRef<'gcx>,\n+    ty::ExistentialTraitRef<'gcx>\n );\n \n impl<'gcx> TransNormalize<'gcx> for LvalueTy<'gcx> {\n@@ -603,6 +604,18 @@ impl<'gcx> TransNormalize<'gcx> for LvalueTy<'gcx> {\n \n // NOTE: Callable from trans only!\n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n+    /// Currently, higher-ranked type bounds inhibit normalization. Therefore,\n+    /// each time we erase them in translation, we need to normalize\n+    /// the contents.\n+    pub fn erase_late_bound_regions_and_normalize<T>(self, value: &ty::Binder<T>)\n+        -> T\n+        where T: TransNormalize<'tcx>\n+    {\n+        assert!(!value.needs_subst());\n+        let value = self.erase_late_bound_regions(value);\n+        self.normalize_associated_type(&value)\n+    }\n+\n     pub fn normalize_associated_type<T>(self, value: &T) -> T\n         where T: TransNormalize<'tcx>\n     {"}, {"sha": "3caf8c9e4c3b85c94c5f7c5caab5225648bf7178", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -1050,8 +1050,7 @@ pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance\n     let fn_ty = ccx.tcx().erase_regions(&fn_ty);\n     let fn_ty = monomorphize::apply_param_substs(ccx.shared(), instance.substs, &fn_ty);\n \n-    let sig = ccx.tcx().erase_late_bound_regions(fn_ty.fn_sig());\n-    let sig = ccx.tcx().normalize_associated_type(&sig);\n+    let sig = ccx.tcx().erase_late_bound_regions_and_normalize(fn_ty.fn_sig());\n     let abi = fn_ty.fn_abi();\n \n     let lldecl = match ccx.instances().borrow().get(&instance) {\n@@ -1073,8 +1072,7 @@ pub fn trans_ctor_shim<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let ctor_ty = ccx.tcx().lookup_item_type(def_id).ty;\n     let ctor_ty = monomorphize::apply_param_substs(ccx.shared(), substs, &ctor_ty);\n \n-    let sig = ccx.tcx().erase_late_bound_regions(&ctor_ty.fn_sig());\n-    let sig = ccx.tcx().normalize_associated_type(&sig);\n+    let sig = ccx.tcx().erase_late_bound_regions_and_normalize(&ctor_ty.fn_sig());\n     let fn_ty = FnType::new(ccx, Abi::Rust, &sig, &[]);\n \n     let (arena, fcx): (TypedArena<_>, FunctionContext);"}, {"sha": "05e22896c4006cba6d09edbd8a4f2f2be02f332d", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -184,8 +184,7 @@ impl<'tcx> Callee<'tcx> {\n     pub fn direct_fn_type<'a>(&self, ccx: &CrateContext<'a, 'tcx>,\n                               extra_args: &[Ty<'tcx>]) -> FnType {\n         let abi = self.ty.fn_abi();\n-        let sig = ccx.tcx().erase_late_bound_regions(self.ty.fn_sig());\n-        let sig = ccx.tcx().normalize_associated_type(&sig);\n+        let sig = ccx.tcx().erase_late_bound_regions_and_normalize(self.ty.fn_sig());\n         let mut fn_ty = FnType::unadjusted(ccx, abi, &sig, extra_args);\n         if let Virtual(_) = self.data {\n             // Don't pass the vtable, it's not an argument of the virtual fn.\n@@ -327,8 +326,7 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n                  bare_fn_ty);\n         }\n     };\n-    let sig = tcx.erase_late_bound_regions(sig);\n-    let sig = ccx.tcx().normalize_associated_type(&sig);\n+    let sig = tcx.erase_late_bound_regions_and_normalize(sig);\n     let tuple_input_ty = tcx.mk_tup(sig.inputs.to_vec());\n     let sig = ty::FnSig {\n         inputs: vec![bare_fn_ty_maybe_ref,"}, {"sha": "a1d645fb993b01987d86ff513ab30608610808b1", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -61,8 +61,7 @@ fn get_or_create_closure_declaration<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     // Compute the rust-call form of the closure call method.\n     let sig = &tcx.closure_type(closure_id, substs).sig;\n-    let sig = tcx.erase_late_bound_regions(sig);\n-    let sig = tcx.normalize_associated_type(&sig);\n+    let sig = tcx.erase_late_bound_regions_and_normalize(sig);\n     let closure_type = tcx.mk_closure_from_closure_substs(closure_id, substs);\n     let function_type = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n         unsafety: hir::Unsafety::Normal,\n@@ -126,8 +125,7 @@ pub fn trans_closure_body_via_mir<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // of the closure expression.\n \n         let sig = &tcx.closure_type(closure_def_id, closure_substs).sig;\n-        let sig = tcx.erase_late_bound_regions(sig);\n-        let sig = tcx.normalize_associated_type(&sig);\n+        let sig = tcx.erase_late_bound_regions_and_normalize(sig);\n \n         let closure_type = tcx.mk_closure_from_closure_substs(closure_def_id,\n                                                               closure_substs);\n@@ -249,8 +247,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     assert_eq!(abi, Abi::RustCall);\n     sig.0.inputs[0] = closure_ty;\n \n-    let sig = tcx.erase_late_bound_regions(&sig);\n-    let sig = tcx.normalize_associated_type(&sig);\n+    let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n     let fn_ty = FnType::new(ccx, abi, &sig, &[]);\n \n     let llonce_fn_ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {"}, {"sha": "6ae5fc1657aa728359f7b8f27df4743b537ec15a", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -114,8 +114,7 @@ pub fn type_pair_fields<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>)\n             if tys.len() != 2 {\n                 return None;\n             }\n-            Some([ccx.tcx().normalize_associated_type(&tys[0]),\n-                  ccx.tcx().normalize_associated_type(&tys[1])])\n+            Some([tys[0], tys[1]])\n         }\n         _ => None\n     }"}, {"sha": "570b844f80adf51b1bbadfae3d9354bd8e631bfe", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -236,7 +236,8 @@ impl<'tcx> TypeMap<'tcx> {\n             ty::TyTrait(ref trait_data) => {\n                 unique_type_id.push_str(\"trait \");\n \n-                let principal = cx.tcx().erase_late_bound_regions(&trait_data.principal);\n+                let principal = cx.tcx().erase_late_bound_regions_and_normalize(\n+                    &trait_data.principal);\n \n                 from_def_id_and_substs(self,\n                                        cx,\n@@ -254,8 +255,7 @@ impl<'tcx> TypeMap<'tcx> {\n \n                 unique_type_id.push_str(\" fn(\");\n \n-                let sig = cx.tcx().erase_late_bound_regions(sig);\n-                let sig = cx.tcx().normalize_associated_type(&sig);\n+                let sig = cx.tcx().erase_late_bound_regions_and_normalize(sig);\n \n                 for &parameter_type in &sig.inputs {\n                     let parameter_type_id ="}, {"sha": "956402edc11665ca1eace8763dc26673e55f5f60", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -94,7 +94,8 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             output.push(']');\n         },\n         ty::TyTrait(ref trait_data) => {\n-            let principal = cx.tcx().erase_late_bound_regions(&trait_data.principal);\n+            let principal = cx.tcx().erase_late_bound_regions_and_normalize(\n+                &trait_data.principal);\n             push_item_name(cx, principal.def_id, false, output);\n             push_type_params(cx, principal.substs, output);\n         },\n@@ -112,8 +113,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             output.push_str(\"fn(\");\n \n-            let sig = cx.tcx().erase_late_bound_regions(sig);\n-            let sig = cx.tcx().normalize_associated_type(&sig);\n+            let sig = cx.tcx().erase_late_bound_regions_and_normalize(sig);\n             if !sig.inputs.is_empty() {\n                 for &parameter_type in &sig.inputs {\n                     push_debuginfo_type_name(cx, parameter_type, true, output);"}, {"sha": "1ec5ca4a563a056d25fd5b5357b3add4ecdf6e8d", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -104,8 +104,7 @@ pub fn declare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n                             fn_type: ty::Ty<'tcx>) -> ValueRef {\n     debug!(\"declare_rust_fn(name={:?}, fn_type={:?})\", name, fn_type);\n     let abi = fn_type.fn_abi();\n-    let sig = ccx.tcx().erase_late_bound_regions(fn_type.fn_sig());\n-    let sig = ccx.tcx().normalize_associated_type(&sig);\n+    let sig = ccx.tcx().erase_late_bound_regions_and_normalize(fn_type.fn_sig());\n     debug!(\"declare_rust_fn (after region erasure) sig={:?}\", sig);\n \n     let fty = FnType::new(ccx, abi, &sig, &[]);"}, {"sha": "b1b09d3ca20dee77f2a1454acc4cea0e258b8fc9", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -99,13 +99,12 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n     let _icx = push_ctxt(\"trans_intrinsic_call\");\n \n-    let (def_id, substs, sig) = match callee_ty.sty {\n-        ty::TyFnDef(def_id, substs, fty) => {\n-            let sig = tcx.erase_late_bound_regions(&fty.sig);\n-            (def_id, substs, tcx.normalize_associated_type(&sig))\n-        }\n+    let (def_id, substs, fty) = match callee_ty.sty {\n+        ty::TyFnDef(def_id, substs, ref fty) => (def_id, substs, fty),\n         _ => bug!(\"expected fn item type, found {}\", callee_ty)\n     };\n+\n+    let sig = tcx.erase_late_bound_regions_and_normalize(&fty.sig);\n     let arg_tys = sig.inputs;\n     let ret_ty = sig.output;\n     let name = tcx.item_name(def_id).as_str();\n@@ -1108,8 +1107,7 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n \n \n     let tcx = bcx.tcx();\n-    let sig = tcx.erase_late_bound_regions(callee_ty.fn_sig());\n-    let sig = tcx.normalize_associated_type(&sig);\n+    let sig = tcx.erase_late_bound_regions_and_normalize(callee_ty.fn_sig());\n     let arg_tys = sig.inputs;\n \n     // every intrinsic takes a SIMD vector as its first argument"}, {"sha": "dac70d4a1de70f92f45b9745b1f1e99e77f8de28", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -80,8 +80,7 @@ pub fn trans_object_shim<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n         _ => bug!()\n     };\n \n-    let sig = tcx.erase_late_bound_regions(sig);\n-    let sig = tcx.normalize_associated_type(&sig);\n+    let sig = tcx.erase_late_bound_regions_and_normalize(sig);\n     let fn_ty = FnType::new(ccx, abi, &sig, &[]);\n \n     let llfn = declare::define_internal_fn(ccx, &function_name, callee.ty);"}, {"sha": "d60dc3fe843f94646960a9ccceacaa68bbe0f455", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -418,7 +418,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     _ => bug!(\"{} is not callable\", callee.ty)\n                 };\n \n-                let sig = bcx.tcx().erase_late_bound_regions(sig);\n+                let sig = bcx.tcx().erase_late_bound_regions_and_normalize(sig);\n \n                 // Handle intrinsics old trans wants Expr's for, ourselves.\n                 let intrinsic = match (&callee.ty.sty, &callee.data) {"}, {"sha": "6c317eb994849c58732bec3539ebda7e0a52bdf0", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -452,7 +452,7 @@ pub fn push_unique_type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             output.push_str(\"fn(\");\n \n-            let sig = tcx.erase_late_bound_regions(sig);\n+            let sig = tcx.erase_late_bound_regions_and_normalize(sig);\n             if !sig.inputs.is_empty() {\n                 for &parameter_type in &sig.inputs {\n                     push_unique_type_name(tcx, parameter_type, output);"}, {"sha": "132b0a910b9c12a3ae22125eead17e378d99c1d4", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572a463116a31efba8bfddb2e64ed659311b8a1/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=6572a463116a31efba8bfddb2e64ed659311b8a1", "patch": "@@ -264,8 +264,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n \n       ty::TyFnDef(..) => Type::nil(cx),\n       ty::TyFnPtr(f) => {\n-        let sig = cx.tcx().erase_late_bound_regions(&f.sig);\n-        let sig = cx.tcx().normalize_associated_type(&sig);\n+        let sig = cx.tcx().erase_late_bound_regions_and_normalize(&f.sig);\n         FnType::new(cx, f.abi, &sig, &[]).llvm_type(cx).ptr_to()\n       }\n       ty::TyTuple(ref tys) if tys.is_empty() => Type::nil(cx),"}]}