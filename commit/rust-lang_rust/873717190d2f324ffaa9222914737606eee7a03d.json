{"sha": "873717190d2f324ffaa9222914737606eee7a03d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MzcxNzE5MGQyZjMyNGZmYWE5MjIyOTE0NzM3NjA2ZWVlN2EwM2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-14T13:28:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-14T13:28:59Z"}, "message": "internal: remove more of the SyntaxRewriter", "tree": {"sha": "96068cb30270346cf19df8f156ad128ccd1ff17d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96068cb30270346cf19df8f156ad128ccd1ff17d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/873717190d2f324ffaa9222914737606eee7a03d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/873717190d2f324ffaa9222914737606eee7a03d", "html_url": "https://github.com/rust-lang/rust/commit/873717190d2f324ffaa9222914737606eee7a03d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/873717190d2f324ffaa9222914737606eee7a03d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0650f77dd9defaf352f81c5ee4ee73a1eae942b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0650f77dd9defaf352f81c5ee4ee73a1eae942b7", "html_url": "https://github.com/rust-lang/rust/commit/0650f77dd9defaf352f81c5ee4ee73a1eae942b7"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "78c0dc1021b053e8bfee2fce68c2360922e98d38", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/873717190d2f324ffaa9222914737606eee7a03d/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/873717190d2f324ffaa9222914737606eee7a03d/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=873717190d2f324ffaa9222914737606eee7a03d", "patch": "@@ -15,7 +15,7 @@ use crate::{\n         make::{self, tokens},\n         AstNode, GenericParamsOwner, NameOwner, TypeBoundsOwner,\n     },\n-    AstToken, Direction, InsertPosition, SmolStr, SyntaxElement, SyntaxKind,\n+    ted, AstToken, Direction, InsertPosition, NodeOrToken, SmolStr, SyntaxElement, SyntaxKind,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n     SyntaxNode, SyntaxToken, T,\n };\n@@ -588,37 +588,39 @@ impl IndentLevel {\n     /// ```\n     /// if you indent the block, the `{` token would stay put.\n     fn increase_indent(self, node: SyntaxNode) -> SyntaxNode {\n-        let mut rewriter = SyntaxRewriter::default();\n-        node.descendants_with_tokens()\n-            .filter_map(|el| el.into_token())\n-            .filter_map(ast::Whitespace::cast)\n-            .filter(|ws| {\n-                let text = ws.syntax().text();\n-                text.contains('\\n')\n-            })\n-            .for_each(|ws| {\n-                let new_ws = make::tokens::whitespace(&format!(\"{}{}\", ws.syntax(), self,));\n-                rewriter.replace(ws.syntax(), &new_ws)\n-            });\n-        rewriter.rewrite(&node)\n+        let res = node.clone_subtree().clone_for_update();\n+        let tokens = res.preorder_with_tokens().filter_map(|event| match event {\n+            rowan::WalkEvent::Leave(NodeOrToken::Token(it)) => Some(it),\n+            _ => None,\n+        });\n+        for token in tokens {\n+            if let Some(ws) = ast::Whitespace::cast(token) {\n+                if ws.text().contains('\\n') {\n+                    let new_ws = make::tokens::whitespace(&format!(\"{}{}\", ws.syntax(), self));\n+                    ted::replace(ws.syntax(), &new_ws)\n+                }\n+            }\n+        }\n+        res.clone_subtree()\n     }\n \n     fn decrease_indent(self, node: SyntaxNode) -> SyntaxNode {\n-        let mut rewriter = SyntaxRewriter::default();\n-        node.descendants_with_tokens()\n-            .filter_map(|el| el.into_token())\n-            .filter_map(ast::Whitespace::cast)\n-            .filter(|ws| {\n-                let text = ws.syntax().text();\n-                text.contains('\\n')\n-            })\n-            .for_each(|ws| {\n-                let new_ws = make::tokens::whitespace(\n-                    &ws.syntax().text().replace(&format!(\"\\n{}\", self), \"\\n\"),\n-                );\n-                rewriter.replace(ws.syntax(), &new_ws)\n-            });\n-        rewriter.rewrite(&node)\n+        let res = node.clone_subtree().clone_for_update();\n+        let tokens = res.preorder_with_tokens().filter_map(|event| match event {\n+            rowan::WalkEvent::Leave(NodeOrToken::Token(it)) => Some(it),\n+            _ => None,\n+        });\n+        for token in tokens {\n+            if let Some(ws) = ast::Whitespace::cast(token) {\n+                if ws.text().contains('\\n') {\n+                    let new_ws = make::tokens::whitespace(\n+                        &ws.syntax().text().replace(&format!(\"\\n{}\", self), \"\\n\"),\n+                    );\n+                    ted::replace(ws.syntax(), &new_ws)\n+                }\n+            }\n+        }\n+        res.clone_subtree()\n     }\n }\n "}]}