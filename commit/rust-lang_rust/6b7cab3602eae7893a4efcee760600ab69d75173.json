{"sha": "6b7cab3602eae7893a4efcee760600ab69d75173", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiN2NhYjM2MDJlYWU3ODkzYTRlZmNlZTc2MDYwMGFiNjlkNzUxNzM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-01-28T05:09:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-28T19:12:57Z"}, "message": "Teach rustc to fail", "tree": {"sha": "0e73b029562b16641daae1b11ddf6a4396948016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e73b029562b16641daae1b11ddf6a4396948016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b7cab3602eae7893a4efcee760600ab69d75173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b7cab3602eae7893a4efcee760600ab69d75173", "html_url": "https://github.com/rust-lang/rust/commit/6b7cab3602eae7893a4efcee760600ab69d75173", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b7cab3602eae7893a4efcee760600ab69d75173/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cac20dae3272728282466467cb0193d7dbbf00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cac20dae3272728282466467cb0193d7dbbf00c", "html_url": "https://github.com/rust-lang/rust/commit/3cac20dae3272728282466467cb0193d7dbbf00c"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "10bcd5c4562f8d31fbea544c179833ca28ec1793", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cab3602eae7893a4efcee760600ab69d75173/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cab3602eae7893a4efcee760600ab69d75173/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=6b7cab3602eae7893a4efcee760600ab69d75173", "patch": "@@ -116,6 +116,7 @@ tag stmt_ {\n     stmt_ret(option.t[@expr]);\n     stmt_log(@expr);\n     stmt_check_expr(@expr);\n+    stmt_fail;\n     stmt_expr(@expr);\n }\n "}, {"sha": "bef37a3cc7ea4c7d7eb160a30523c50a8cd2e5be", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cab3602eae7893a4efcee760600ab69d75173/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cab3602eae7893a4efcee760600ab69d75173/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=6b7cab3602eae7893a4efcee760600ab69d75173", "patch": "@@ -1158,6 +1158,11 @@ impure fn parse_stmt(parser p) -> @ast.stmt {\n             }\n         }\n \n+        case (token.FAIL) {\n+            p.bump();\n+            ret @spanned(lo, p.get_span(), ast.stmt_fail);\n+        }\n+\n         case (token.RET) {\n             p.bump();\n             alt (p.peek()) {\n@@ -1315,6 +1320,7 @@ fn stmt_ends_with_semi(@ast.stmt stmt) -> bool {\n         case (ast.stmt_ret(_))                  { ret true; }\n         case (ast.stmt_log(_))                  { ret true; }\n         case (ast.stmt_check_expr(_))           { ret true; }\n+        case (ast.stmt_fail)                    { ret true; }\n         case (ast.stmt_expr(?e)) {\n             alt (e.node) {\n                 case (ast.expr_vec(_,_))        { ret true; }"}, {"sha": "67c260140b727c6cbf3c473a185709005396c353", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cab3602eae7893a4efcee760600ab69d75173/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cab3602eae7893a4efcee760600ab69d75173/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=6b7cab3602eae7893a4efcee760600ab69d75173", "patch": "@@ -615,6 +615,10 @@ fn fold_stmt[ENV](&ENV env, ast_fold[ENV] fld, &@stmt s) -> @stmt {\n             ret fld.fold_stmt_check_expr(env_, s.span, ee);\n         }\n \n+        case (ast.stmt_fail) {\n+            ret s;\n+        }\n+\n         case (ast.stmt_expr(?e)) {\n             auto ee = fold_expr(env_, fld, e);\n             ret fld.fold_stmt_expr(env_, s.span, ee);"}, {"sha": "54e9426e4d54f8a8f9733b43fde9e021a304dc50", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cab3602eae7893a4efcee760600ab69d75173/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cab3602eae7893a4efcee760600ab69d75173/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6b7cab3602eae7893a4efcee760600ab69d75173", "patch": "@@ -2251,11 +2251,7 @@ fn trans_index(@block_ctxt cx, &ast.span sp, @ast.expr base,\n     ix.bcx.build.CondBr(bounds_check, next_cx.llbb, fail_cx.llbb);\n \n     // fail: bad bounds check.\n-    auto V_expr_str = p2i(C_cstr(cx.fcx.ccx, \"out-of-bounds access\"));\n-    auto V_filename = p2i(C_cstr(cx.fcx.ccx, sp.filename));\n-    auto V_line = sp.lo.line as int;\n-    auto args = vec(V_expr_str, V_filename, C_int(V_line));\n-    auto fail_res = trans_upcall(fail_cx, \"upcall_fail\", args);\n+    auto fail_res = trans_fail(fail_cx, sp, \"bounds check\");\n     fail_res.bcx.build.Br(next_cx.llbb);\n \n     auto body = next_cx.build.GEP(v, vec(C_int(0), C_int(abi.vec_elt_data)));\n@@ -2904,13 +2900,9 @@ fn trans_check_expr(@block_ctxt cx, @ast.expr e) -> result {\n     auto cond_res = trans_expr(cx, e);\n \n     // FIXME: need pretty-printer.\n-    auto V_expr_str = p2i(C_cstr(cx.fcx.ccx, \"<expr>\"));\n-    auto V_filename = p2i(C_cstr(cx.fcx.ccx, e.span.filename));\n-    auto V_line = e.span.lo.line as int;\n-    auto args = vec(V_expr_str, V_filename, C_int(V_line));\n-\n+    auto expr_str = \"<expr>\";\n     auto fail_cx = new_sub_block_ctxt(cx, \"fail\");\n-    auto fail_res = trans_upcall(fail_cx, \"upcall_fail\", args);\n+    auto fail_res = trans_fail(fail_cx, e.span, expr_str);\n \n     auto next_cx = new_sub_block_ctxt(cx, \"next\");\n     fail_res.bcx.build.Br(next_cx.llbb);\n@@ -2920,6 +2912,15 @@ fn trans_check_expr(@block_ctxt cx, @ast.expr e) -> result {\n     ret res(next_cx, C_nil());\n }\n \n+fn trans_fail(@block_ctxt cx, common.span sp, str fail_str) -> result {\n+    auto V_fail_str = p2i(C_cstr(cx.fcx.ccx, fail_str));\n+    auto V_filename = p2i(C_cstr(cx.fcx.ccx, sp.filename));\n+    auto V_line = sp.lo.line as int;\n+    auto args = vec(V_fail_str, V_filename, C_int(V_line));\n+\n+    ret trans_upcall(cx, \"upcall_fail\", args);\n+}\n+\n fn trans_ret(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n     auto bcx = cx;\n     auto val = C_nil();\n@@ -3035,6 +3036,10 @@ fn trans_stmt(@block_ctxt cx, &ast.stmt s) -> result {\n             bcx = trans_check_expr(cx, a).bcx;\n         }\n \n+        case (ast.stmt_fail) {\n+            bcx = trans_fail(cx, s.span, \"explicit failure\").bcx;\n+        }\n+\n         case (ast.stmt_ret(?e)) {\n             bcx = trans_ret(cx, e).bcx;\n         }"}, {"sha": "ea9002aeccbee954e3e3ac0cc0861219ff0de956", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b7cab3602eae7893a4efcee760600ab69d75173/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7cab3602eae7893a4efcee760600ab69d75173/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=6b7cab3602eae7893a4efcee760600ab69d75173", "patch": "@@ -1682,6 +1682,10 @@ fn check_stmt(&@fn_ctxt fcx, &@ast.stmt stmt) -> @ast.stmt {\n                                         ast.stmt_check_expr(expr_t));\n         }\n \n+        case (ast.stmt_fail) {\n+            ret stmt;\n+        }\n+\n         case (ast.stmt_expr(?expr)) {\n             auto expr_t = check_expr(fcx, expr);\n             ret @fold.respan[ast.stmt_](stmt.span, ast.stmt_expr(expr_t));"}]}