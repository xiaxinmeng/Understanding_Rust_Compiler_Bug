{"sha": "fd7819c3c09161986c3e1398d546e7503886760b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNzgxOWMzYzA5MTYxOTg2YzNlMTM5OGQ1NDZlNzUwMzg4Njc2MGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T19:29:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T19:29:51Z"}, "message": "Simplify", "tree": {"sha": "7bd76092006eb022d711f6d62af6fcba62343101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bd76092006eb022d711f6d62af6fcba62343101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd7819c3c09161986c3e1398d546e7503886760b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7819c3c09161986c3e1398d546e7503886760b", "html_url": "https://github.com/rust-lang/rust/commit/fd7819c3c09161986c3e1398d546e7503886760b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd7819c3c09161986c3e1398d546e7503886760b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42370610ce03c1bb5893d9e29c2c215482e8d8ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/42370610ce03c1bb5893d9e29c2c215482e8d8ca", "html_url": "https://github.com/rust-lang/rust/commit/42370610ce03c1bb5893d9e29c2c215482e8d8ca"}], "stats": {"total": 59, "additions": 24, "deletions": 35}, "files": [{"sha": "84a2bf02b943308dc0100b75b9f6d567004568fe", "filename": "crates/ra_hir/src/test_db.rs", "status": "modified", "additions": 24, "deletions": 35, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/fd7819c3c09161986c3e1398d546e7503886760b/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7819c3c09161986c3e1398d546e7503886760b/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftest_db.rs?ref=fd7819c3c09161986c3e1398d546e7503886760b", "patch": "@@ -5,10 +5,7 @@ use std::{panic, sync::Arc};\n use hir_def::{db::DefDatabase2, ModuleId};\n use hir_expand::diagnostics::DiagnosticSink;\n use parking_lot::Mutex;\n-use ra_db::{\n-    salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath, SourceDatabase,\n-    SourceRootId,\n-};\n+use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath, SourceDatabase};\n \n use crate::{db, debug::HirDebugHelper};\n \n@@ -21,12 +18,34 @@ use crate::{db, debug::HirDebugHelper};\n     db::DefDatabase2Storage,\n     db::HirDatabaseStorage\n )]\n-#[derive(Debug)]\n+#[derive(Debug, Default)]\n pub struct TestDB {\n     events: Mutex<Option<Vec<salsa::Event<TestDB>>>>,\n     runtime: salsa::Runtime<TestDB>,\n }\n \n+impl salsa::Database for TestDB {\n+    fn salsa_runtime(&self) -> &salsa::Runtime<TestDB> {\n+        &self.runtime\n+    }\n+\n+    fn salsa_event(&self, event: impl Fn() -> salsa::Event<TestDB>) {\n+        let mut events = self.events.lock();\n+        if let Some(events) = &mut *events {\n+            events.push(event());\n+        }\n+    }\n+}\n+\n+impl salsa::ParallelDatabase for TestDB {\n+    fn snapshot(&self) -> salsa::Snapshot<TestDB> {\n+        salsa::Snapshot::new(TestDB {\n+            events: Default::default(),\n+            runtime: self.runtime.snapshot(self),\n+        })\n+    }\n+}\n+\n impl panic::RefUnwindSafe for TestDB {}\n \n impl FileLoader for TestDB {\n@@ -77,36 +96,6 @@ impl TestDB {\n     }\n }\n \n-impl salsa::Database for TestDB {\n-    fn salsa_runtime(&self) -> &salsa::Runtime<TestDB> {\n-        &self.runtime\n-    }\n-\n-    fn salsa_event(&self, event: impl Fn() -> salsa::Event<TestDB>) {\n-        let mut events = self.events.lock();\n-        if let Some(events) = &mut *events {\n-            events.push(event());\n-        }\n-    }\n-}\n-\n-impl Default for TestDB {\n-    fn default() -> TestDB {\n-        let mut db = TestDB { events: Default::default(), runtime: salsa::Runtime::default() };\n-        db.set_crate_graph(Default::default());\n-        db\n-    }\n-}\n-\n-impl salsa::ParallelDatabase for TestDB {\n-    fn snapshot(&self) -> salsa::Snapshot<TestDB> {\n-        salsa::Snapshot::new(TestDB {\n-            events: Default::default(),\n-            runtime: self.runtime.snapshot(self),\n-        })\n-    }\n-}\n-\n impl TestDB {\n     pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<TestDB>> {\n         *self.events.lock() = Some(Vec::new());"}]}