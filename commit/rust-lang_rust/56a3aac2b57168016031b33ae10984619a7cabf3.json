{"sha": "56a3aac2b57168016031b33ae10984619a7cabf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YTNhYWMyYjU3MTY4MDE2MDMxYjMzYWUxMDk4NDYxOWE3Y2FiZjM=", "commit": {"author": {"name": "Victor M. Suarez", "email": "svmnotn@gmail.com", "date": "2016-01-03T04:21:55Z"}, "committer": {"name": "Victor M. Suarez", "email": "svmnotn@gmail.com", "date": "2016-01-10T21:37:13Z"}, "message": "stop creating bk files if there are no changes. Fixes #733", "tree": {"sha": "f28f116394a3a1fadbc73bd8944e0d2eb6a669ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f28f116394a3a1fadbc73bd8944e0d2eb6a669ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56a3aac2b57168016031b33ae10984619a7cabf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56a3aac2b57168016031b33ae10984619a7cabf3", "html_url": "https://github.com/rust-lang/rust/commit/56a3aac2b57168016031b33ae10984619a7cabf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56a3aac2b57168016031b33ae10984619a7cabf3/comments", "author": {"login": "svmnotn", "id": 12618337, "node_id": "MDQ6VXNlcjEyNjE4MzM3", "avatar_url": "https://avatars.githubusercontent.com/u/12618337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svmnotn", "html_url": "https://github.com/svmnotn", "followers_url": "https://api.github.com/users/svmnotn/followers", "following_url": "https://api.github.com/users/svmnotn/following{/other_user}", "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}", "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions", "organizations_url": "https://api.github.com/users/svmnotn/orgs", "repos_url": "https://api.github.com/users/svmnotn/repos", "events_url": "https://api.github.com/users/svmnotn/events{/privacy}", "received_events_url": "https://api.github.com/users/svmnotn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "svmnotn", "id": 12618337, "node_id": "MDQ6VXNlcjEyNjE4MzM3", "avatar_url": "https://avatars.githubusercontent.com/u/12618337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svmnotn", "html_url": "https://github.com/svmnotn", "followers_url": "https://api.github.com/users/svmnotn/followers", "following_url": "https://api.github.com/users/svmnotn/following{/other_user}", "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}", "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions", "organizations_url": "https://api.github.com/users/svmnotn/orgs", "repos_url": "https://api.github.com/users/svmnotn/repos", "events_url": "https://api.github.com/users/svmnotn/events{/privacy}", "received_events_url": "https://api.github.com/users/svmnotn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0698f0255a1895460b0f497dd17b2ab809529d0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0698f0255a1895460b0f497dd17b2ab809529d0a", "html_url": "https://github.com/rust-lang/rust/commit/0698f0255a1895460b0f497dd17b2ab809529d0a"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "95ae95e66bc23afd32bcb25b6ad10c9adf6b4dd8", "filename": "src/filemap.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/56a3aac2b57168016031b33ae10984619a7cabf3/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a3aac2b57168016031b33ae10984619a7cabf3/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=56a3aac2b57168016031b33ae10984619a7cabf3", "patch": "@@ -85,21 +85,38 @@ pub fn write_file(text: &StringBuffer,\n         }\n     }\n \n+    fn source_and_formatted_text(text: &StringBuffer,\n+                                 filename: &str,\n+                                 config: &Config)\n+                                 -> Result<(String, String), io::Error> {\n+        let mut f = try!(File::open(filename));\n+        let mut ori_text = String::new();\n+        try!(f.read_to_string(&mut ori_text));\n+        let mut v = Vec::new();\n+        try!(write_system_newlines(&mut v, text, config));\n+        let fmt_text = String::from_utf8(v).unwrap();\n+        Ok((ori_text, fmt_text))\n+    }\n+\n     match mode {\n         WriteMode::Replace => {\n-            // Do a little dance to make writing safer - write to a temp file\n-            // rename the original to a .bk, then rename the temp file to the\n-            // original.\n-            let tmp_name = filename.to_owned() + \".tmp\";\n-            let bk_name = filename.to_owned() + \".bk\";\n-            {\n-                // Write text to temp file\n-                let tmp_file = try!(File::create(&tmp_name));\n-                try!(write_system_newlines(tmp_file, text, config));\n-            }\n+            if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n+                if fmt != ori {\n+                    // Do a little dance to make writing safer - write to a temp file\n+                    // rename the original to a .bk, then rename the temp file to the\n+                    // original.\n+                    let tmp_name = filename.to_owned() + \".tmp\";\n+                    let bk_name = filename.to_owned() + \".bk\";\n+                    {\n+                        // Write text to temp file\n+                        let tmp_file = try!(File::create(&tmp_name));\n+                        try!(write_system_newlines(tmp_file, text, config));\n+                    }\n \n-            try!(fs::rename(filename, bk_name));\n-            try!(fs::rename(tmp_name, filename));\n+                    try!(fs::rename(filename, bk_name));\n+                    try!(fs::rename(tmp_name, filename));\n+                }\n+            }\n         }\n         WriteMode::Overwrite => {\n             // Write text directly over original file.\n@@ -124,14 +141,10 @@ pub fn write_file(text: &StringBuffer,\n         }\n         WriteMode::Diff => {\n             println!(\"Diff of {}:\\n\", filename);\n-            let mut f = try!(File::open(filename));\n-            let mut ori_text = String::new();\n-            try!(f.read_to_string(&mut ori_text));\n-            let mut v = Vec::new();\n-            try!(write_system_newlines(&mut v, text, config));\n-            let fmt_text = String::from_utf8(v).unwrap();\n-            let diff = make_diff(&ori_text, &fmt_text, 3);\n-            print_diff(diff, |line_num| format!(\"\\nDiff at line {}:\", line_num));\n+            if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n+                print_diff(make_diff(&ori, &fmt, 3),\n+                           |line_num| format!(\"\\nDiff at line {}:\", line_num));\n+            }\n         }\n         WriteMode::Return => {\n             // io::Write is not implemented for String, working around with"}]}