{"sha": "12ceed013cdbd5d431a6908d49b2b6cb6fe1d032", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyY2VlZDAxM2NkYmQ1ZDQzMWE2OTA4ZDQ5YjJiNmNiNmZlMWQwMzI=", "commit": {"author": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2017-08-22T21:24:29Z"}, "committer": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2017-08-22T21:24:29Z"}, "message": "Introduce target feature crt_static_allows_dylibs\n\nMost UNIX-like platforms do not allow shared libraries to statically\nlink their own libc, as libc expects to have consistent process-global\nstate. On those platforms, when we do not have a shared libc available,\nwe must not attempt to link dylibs or cdylibs. On Windows, however, it\nis expected to statically link the CRT into dynamic libraries.\n\nThis feature is only relevant for targets that support both fully-static\nand fully-dynamic linkage, such as musl on Linux.", "tree": {"sha": "aacbf2a92dbe3cdd43fa92c8e7e81094c7c37ace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aacbf2a92dbe3cdd43fa92c8e7e81094c7c37ace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ceed013cdbd5d431a6908d49b2b6cb6fe1d032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ceed013cdbd5d431a6908d49b2b6cb6fe1d032", "html_url": "https://github.com/rust-lang/rust/commit/12ceed013cdbd5d431a6908d49b2b6cb6fe1d032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ceed013cdbd5d431a6908d49b2b6cb6fe1d032/comments", "author": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beb8abe9a5045a232b423b909b7aaffecbf8bafc", "url": "https://api.github.com/repos/rust-lang/rust/commits/beb8abe9a5045a232b423b909b7aaffecbf8bafc", "html_url": "https://github.com/rust-lang/rust/commit/beb8abe9a5045a232b423b909b7aaffecbf8bafc"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "130e1b695dbd5b7bbcdab87d5bb3edc6fab29588", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12ceed013cdbd5d431a6908d49b2b6cb6fe1d032/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ceed013cdbd5d431a6908d49b2b6cb6fe1d032/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=12ceed013cdbd5d431a6908d49b2b6cb6fe1d032", "patch": "@@ -416,6 +416,8 @@ pub struct TargetOptions {\n     /// ABIs are considered to be supported on all platforms and cannot be blacklisted.\n     pub abi_blacklist: Vec<Abi>,\n \n+    /// Whether or not linking dylibs to a static CRT is allowed.\n+    pub crt_static_allows_dylibs: bool,\n     /// Whether or not the CRT is statically linked by default.\n     pub crt_static_default: bool,\n     /// Whether or not crt-static is respected by the compiler (or is a no-op).\n@@ -480,6 +482,7 @@ impl Default for TargetOptions {\n             max_atomic_width: None,\n             panic_strategy: PanicStrategy::Unwind,\n             abi_blacklist: vec![],\n+            crt_static_allows_dylibs: false,\n             crt_static_default: false,\n             crt_static_respected: false,\n             stack_probes: false,\n@@ -717,6 +720,7 @@ impl Target {\n         key!(max_atomic_width, Option<u64>);\n         key!(min_atomic_width, Option<u64>);\n         try!(key!(panic_strategy, PanicStrategy));\n+        key!(crt_static_allows_dylibs, bool);\n         key!(crt_static_default, bool);\n         key!(crt_static_respected, bool);\n         key!(stack_probes, bool);\n@@ -906,6 +910,7 @@ impl ToJson for Target {\n         target_option_val!(min_atomic_width);\n         target_option_val!(max_atomic_width);\n         target_option_val!(panic_strategy);\n+        target_option_val!(crt_static_allows_dylibs);\n         target_option_val!(crt_static_default);\n         target_option_val!(crt_static_respected);\n         target_option_val!(stack_probes);"}, {"sha": "42a4e6f5f11885e873f933603830d884dad74180", "filename": "src/librustc_back/target/windows_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ceed013cdbd5d431a6908d49b2b6cb6fe1d032/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ceed013cdbd5d431a6908d49b2b6cb6fe1d032/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs?ref=12ceed013cdbd5d431a6908d49b2b6cb6fe1d032", "patch": "@@ -63,6 +63,7 @@ pub fn opts() -> TargetOptions {\n         is_like_windows: true,\n         is_like_msvc: true,\n         pre_link_args: args,\n+        crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n \n         .. Default::default()"}, {"sha": "aa8637fabe85f0e10cf7b95c9992cc861eb5eb21", "filename": "src/librustc_trans_utils/link.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/12ceed013cdbd5d431a6908d49b2b6cb6fe1d032/src%2Flibrustc_trans_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ceed013cdbd5d431a6908d49b2b6cb6fe1d032/src%2Flibrustc_trans_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flink.rs?ref=12ceed013cdbd5d431a6908d49b2b6cb6fe1d032", "patch": "@@ -123,8 +123,11 @@ pub fn invalid_output_for_target(sess: &Session,\n     match (sess.target.target.options.dynamic_linking,\n            sess.target.target.options.executables, crate_type) {\n         (false, _, config::CrateTypeCdylib) |\n-        (false, _, config::CrateTypeProcMacro) |\n-        (false, _, config::CrateTypeDylib) => true,\n+        (false, _, config::CrateTypeDylib) |\n+        (false, _, config::CrateTypeProcMacro) => true,\n+        (true, _, config::CrateTypeCdylib) |\n+        (true, _, config::CrateTypeDylib) => sess.crt_static() &&\n+            !sess.target.target.options.crt_static_allows_dylibs,\n         (_, false, config::CrateTypeExecutable) => true,\n         _ => false\n     }"}]}