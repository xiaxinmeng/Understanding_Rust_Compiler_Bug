{"sha": "c5354877c98bf804eaa6148204386dd392eb3b39", "node_id": "C_kwDOAAsO6NoAKGM1MzU0ODc3Yzk4YmY4MDRlYWE2MTQ4MjA0Mzg2ZGQzOTJlYjNiMzk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-14T11:42:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-14T11:42:53Z"}, "message": "Merge #10503\n\n10503: Only include targets of packages that are workspace members r=Veykril a=bcully\n\nCargoWorkspace's package list includes packages that are path\r\ndependencies, even if those packages aren't actually members of the\r\ncargo workspace. As a result, rust-analyzer's runnable finder, which\r\nreturns the target from the first workspace that has a matching package,\r\nmay select the wrong working directory, causing runnables to fail, e.g.,\r\n```\r\nerror: package `root` cannot be tested because it requires dev-dependencies and is not a member of the workspace\r\n```\r\n\r\nTo fix this, we filter out packages that aren't members of the workspace\r\nwhen searching for targets.\r\n\r\nFixes #7764\n\nCo-authored-by: Brendan Cully <brendan@cully.org>", "tree": {"sha": "26c1331cadfa19d15490d50f2df32f5487b7b3db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26c1331cadfa19d15490d50f2df32f5487b7b3db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5354877c98bf804eaa6148204386dd392eb3b39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhaBe9CRBK7hj4Ov3rIwAAx8oIAGfnzG9obAV61EazA3JGOrh8\nGFJ89Izi+s8+VvnhfwG9O7EIdFF3xSYIlixE3EdtrSqMyfPBe5jbEXtO0e6fnukr\n8JRDIm329BRDOUEqYkVZ5V534+idHkKdy8cyPWhwH7dygoJUfhKypRqWNT5YFkR8\nh1JMosltsvFH56vHEEcYbniAPS9rLHc7m/2tHSII7MeDHCZgL5Ef79aKfhGX8EQA\nmXTLrDs8sUpKY14o7qOBPgFdabwLDy0DZvaeH/ZqgUdUuO5VOSDpgrpU6e3+8Ap3\nd5r3rt4q2ye7ZRY+M2uSnMChUiTl0lDV0K73SMHLixpJZYyjNoakPDctjPCZyJM=\n=EVRe\n-----END PGP SIGNATURE-----\n", "payload": "tree 26c1331cadfa19d15490d50f2df32f5487b7b3db\nparent f87debcf87c16690e8d5e185a35d03a402a2d5bf\nparent 841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634211773 +0000\ncommitter GitHub <noreply@github.com> 1634211773 +0000\n\nMerge #10503\n\n10503: Only include targets of packages that are workspace members r=Veykril a=bcully\n\nCargoWorkspace's package list includes packages that are path\r\ndependencies, even if those packages aren't actually members of the\r\ncargo workspace. As a result, rust-analyzer's runnable finder, which\r\nreturns the target from the first workspace that has a matching package,\r\nmay select the wrong working directory, causing runnables to fail, e.g.,\r\n```\r\nerror: package `root` cannot be tested because it requires dev-dependencies and is not a member of the workspace\r\n```\r\n\r\nTo fix this, we filter out packages that aren't members of the workspace\r\nwhen searching for targets.\r\n\r\nFixes #7764\n\nCo-authored-by: Brendan Cully <brendan@cully.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5354877c98bf804eaa6148204386dd392eb3b39", "html_url": "https://github.com/rust-lang/rust/commit/c5354877c98bf804eaa6148204386dd392eb3b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5354877c98bf804eaa6148204386dd392eb3b39/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f87debcf87c16690e8d5e185a35d03a402a2d5bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f87debcf87c16690e8d5e185a35d03a402a2d5bf", "html_url": "https://github.com/rust-lang/rust/commit/f87debcf87c16690e8d5e185a35d03a402a2d5bf"}, {"sha": "841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3", "html_url": "https://github.com/rust-lang/rust/commit/841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3"}], "stats": {"total": 97, "additions": 95, "deletions": 2}, "files": [{"sha": "739f29b014df5cf0bd664f0768c2b3bb374d0c07", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5354877c98bf804eaa6148204386dd392eb3b39/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5354877c98bf804eaa6148204386dd392eb3b39/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=c5354877c98bf804eaa6148204386dd392eb3b39", "patch": "@@ -137,6 +137,8 @@ pub struct PackageData {\n     pub targets: Vec<Target>,\n     /// Does this package come from the local filesystem (and is editable)?\n     pub is_local: bool,\n+    // Whether this package is a member of the workspace\n+    pub is_member: bool,\n     /// List of packages this package depends on\n     pub dependencies: Vec<PackageDependency>,\n     /// Rust edition for this package\n@@ -296,6 +298,8 @@ impl CargoWorkspace {\n         let mut packages = Arena::default();\n         let mut targets = Arena::default();\n \n+        let ws_members = &meta.workspace_members;\n+\n         meta.packages.sort_by(|a, b| a.id.cmp(&b.id));\n         for meta_pkg in &meta.packages {\n             let cargo_metadata::Package {\n@@ -309,6 +313,7 @@ impl CargoWorkspace {\n             // We treat packages without source as \"local\" packages. That includes all members of\n             // the current workspace, as well as any path dependency outside the workspace.\n             let is_local = meta_pkg.source.is_none();\n+            let is_member = ws_members.contains(id);\n \n             let pkg = packages.alloc(PackageData {\n                 id: id.repr.clone(),\n@@ -317,6 +322,7 @@ impl CargoWorkspace {\n                 manifest: AbsPathBuf::assert(PathBuf::from(&manifest_path)).try_into().unwrap(),\n                 targets: Vec::new(),\n                 is_local,\n+                is_member,\n                 edition,\n                 dependencies: Vec::new(),\n                 features: meta_pkg.features.clone().into_iter().collect(),\n@@ -383,8 +389,8 @@ impl CargoWorkspace {\n \n     pub fn target_by_root(&self, root: &AbsPath) -> Option<Target> {\n         self.packages()\n-            .filter_map(|pkg| self[pkg].targets.iter().find(|&&it| &self[it].root == root))\n-            .next()\n+            .filter(|&pkg| self[pkg].is_member)\n+            .find_map(|pkg| self[pkg].targets.iter().find(|&&it| &self[it].root == root))\n             .copied()\n     }\n "}, {"sha": "9eb8ad1b720f4374d61d438c7a4cad6f20b45f72", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c5354877c98bf804eaa6148204386dd392eb3b39/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5354877c98bf804eaa6148204386dd392eb3b39/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=c5354877c98bf804eaa6148204386dd392eb3b39", "patch": "@@ -202,6 +202,93 @@ fn main() {}\n     );\n }\n \n+// Each package in these workspaces should be run from its own root\n+#[test]\n+fn test_path_dependency_runnables() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let server = Project::with_fixture(\n+        r#\"\n+//- /consumer/Cargo.toml\n+[package]\n+name = \"consumer\"\n+version = \"0.1.0\"\n+[dependencies]\n+dependency = { path = \"../dependency\" }\n+\n+//- /consumer/src/lib.rs\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn consumer() {}\n+}\n+\n+//- /dependency/Cargo.toml\n+[package]\n+name = \"dependency\"\n+version = \"0.1.0\"\n+[dev-dependencies]\n+devdependency = { path = \"../devdependency\" }\n+\n+//- /dependency/src/lib.rs\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn dependency() {}\n+}\n+\n+//- /devdependency/Cargo.toml\n+[package]\n+name = \"devdependency\"\n+version = \"0.1.0\"\n+\n+//- /devdependency/src/lib.rs\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn devdependency() {}\n+}\n+        \"#,\n+    )\n+    .root(\"consumer\")\n+    .root(\"dependency\")\n+    .root(\"devdependency\")\n+    .server()\n+    .wait_until_workspace_is_loaded();\n+\n+    for runnable in [\"consumer\", \"dependency\", \"devdependency\"] {\n+        server.request::<Runnables>(\n+            RunnablesParams {\n+                text_document: server.doc_id(&format!(\"{}/src/lib.rs\", runnable)),\n+                position: None,\n+            },\n+            json!([\n+                \"{...}\",\n+                {\n+                    \"label\": \"cargo test -p [..] --all-targets\",\n+                    \"kind\": \"cargo\",\n+                    \"args\": {\n+                        \"overrideCargo\": null,\n+                        \"workspaceRoot\": server.path().join(runnable),\n+                        \"cargoArgs\": [\n+                            \"test\",\n+                            \"--package\",\n+                            runnable,\n+                            \"--all-targets\"\n+                        ],\n+                        \"cargoExtraArgs\": [],\n+                        \"executableArgs\": []\n+                    },\n+                },\n+                \"{...}\",\n+                \"{...}\"\n+            ]),\n+        );\n+    }\n+}\n+\n #[test]\n fn test_format_document() {\n     if skip_slow_tests() {"}]}