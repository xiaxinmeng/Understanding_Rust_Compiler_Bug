{"sha": "facefa7c8d1adf6c851dca88fcf4f5d26f72caa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhY2VmYTdjOGQxYWRmNmM4NTFkY2E4OGZjZjRmNWQyNmY3MmNhYTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-07T20:25:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-10T10:38:51Z"}, "message": "Implement rt::io::stdio\n\nAdditionally, this moves the prelude imports of print/println from std::io to\nstd::rt::io.\n\nCloses #6846", "tree": {"sha": "95e08a16097fb774d8c2c1f9e20fd362b2530de7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95e08a16097fb774d8c2c1f9e20fd362b2530de7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/facefa7c8d1adf6c851dca88fcf4f5d26f72caa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/facefa7c8d1adf6c851dca88fcf4f5d26f72caa9", "html_url": "https://github.com/rust-lang/rust/commit/facefa7c8d1adf6c851dca88fcf4f5d26f72caa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/facefa7c8d1adf6c851dca88fcf4f5d26f72caa9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d2f71e8e64d7994f20932caedab1b8dccc5539", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d2f71e8e64d7994f20932caedab1b8dccc5539", "html_url": "https://github.com/rust-lang/rust/commit/a0d2f71e8e64d7994f20932caedab1b8dccc5539"}], "stats": {"total": 110, "additions": 84, "deletions": 26}, "files": [{"sha": "3da337add948c8ac6e0d510fddda1924354b2425", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/facefa7c8d1adf6c851dca88fcf4f5d26f72caa9/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/facefa7c8d1adf6c851dca88fcf4f5d26f72caa9/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=facefa7c8d1adf6c851dca88fcf4f5d26f72caa9", "patch": "@@ -39,7 +39,7 @@ pub use option::{Option, Some, None};\n pub use result::{Result, Ok, Err};\n \n // Reexported functions\n-pub use io::{print, println};\n+pub use rt::io::stdio::{print, println};\n pub use iter::range;\n pub use from_str::from_str;\n "}, {"sha": "dc8d34d1b11058c5cd2a6654b38ddaa78ab779d9", "filename": "src/libstd/rt/io/native/file.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/facefa7c8d1adf6c851dca88fcf4f5d26f72caa9/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/facefa7c8d1adf6c851dca88fcf4f5d26f72caa9/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs?ref=facefa7c8d1adf6c851dca88fcf4f5d26f72caa9", "patch": "@@ -223,6 +223,7 @@ mod tests {\n     use super::*;\n \n     #[test] #[fixed_stack_segment]\n+    #[ignore(cfg(target_os = \"freebsd\"))] // hmm, maybe pipes have a tiny buffer\n     fn test_file_desc() {\n         // Run this test with some pipes so we don't have to mess around with\n         // opening or closing files.\n@@ -258,7 +259,7 @@ mod tests {\n     }\n \n     #[test] #[fixed_stack_segment]\n-    #[ignore(windows)] // apparently windows doesn't like tmpfile\n+    #[ignore(cfg(windows))] // apparently windows doesn't like tmpfile\n     fn test_cfile() {\n         unsafe {\n             let f = libc::tmpfile();"}, {"sha": "e3ca148862fbe9fe88d3cf96a68c0af3853f2248", "filename": "src/libstd/rt/io/stdio.rs", "status": "modified", "additions": 81, "deletions": 24, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/facefa7c8d1adf6c851dca88fcf4f5d26f72caa9/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/facefa7c8d1adf6c851dca88fcf4f5d26f72caa9/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fstdio.rs?ref=facefa7c8d1adf6c851dca88fcf4f5d26f72caa9", "patch": "@@ -8,45 +8,102 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n-use super::{Reader, Writer};\n+use libc;\n+use option::{Option, Some, None};\n+use result::{Ok, Err};\n+use rt::local::Local;\n+use rt::rtio::{RtioFileStream, IoFactoryObject, IoFactory};\n+use super::{Reader, Writer, io_error};\n \n-pub fn stdin() -> StdReader { fail2!() }\n-\n-pub fn stdout() -> StdWriter { fail2!() }\n-\n-pub fn stderr() -> StdReader { fail2!() }\n+/// Creates a new non-blocking handle to the stdin of the current process.\n+///\n+/// See `stdout()` for notes about this function.\n+pub fn stdin() -> StdReader {\n+    let stream = unsafe {\n+        let io: *mut IoFactoryObject = Local::unsafe_borrow();\n+        (*io).fs_from_raw_fd(libc::STDIN_FILENO, false)\n+    };\n+    StdReader { inner: stream }\n+}\n \n-pub fn print(_s: &str) { fail2!() }\n+/// Creates a new non-blocking handle to the stdout of the current process.\n+///\n+/// Note that this is a fairly expensive operation in that at least one memory\n+/// allocation is performed. Additionally, this must be called from a runtime\n+/// task context because the stream returned will be a non-blocking object using\n+/// the local scheduler to perform the I/O.\n+pub fn stdout() -> StdWriter {\n+    let stream = unsafe {\n+        let io: *mut IoFactoryObject = Local::unsafe_borrow();\n+        (*io).fs_from_raw_fd(libc::STDOUT_FILENO, false)\n+    };\n+    StdWriter { inner: stream }\n+}\n \n-pub fn println(_s: &str) { fail2!() }\n+/// Creates a new non-blocking handle to the stderr of the current process.\n+///\n+/// See `stdout()` for notes about this function.\n+pub fn stderr() -> StdWriter {\n+    let stream = unsafe {\n+        let io: *mut IoFactoryObject = Local::unsafe_borrow();\n+        (*io).fs_from_raw_fd(libc::STDERR_FILENO, false)\n+    };\n+    StdWriter { inner: stream }\n+}\n \n-pub enum StdStream {\n-    StdIn,\n-    StdOut,\n-    StdErr\n+/// Prints a string to the stdout of the current process. No newline is emitted\n+/// after the string is printed.\n+pub fn print(s: &str) {\n+    // XXX: need to see if not caching stdin() is the cause of performance\n+    //      issues, it should be possible to cache a stdout handle in each Task\n+    //      and then re-use that across calls to print/println\n+    stdout().write(s.as_bytes());\n }\n \n-pub struct StdReader;\n+/// Prints a string as a line. to the stdout of the current process. A literal\n+/// `\\n` character is printed to the console after the string.\n+pub fn println(s: &str) {\n+    let mut out = stdout();\n+    out.write(s.as_bytes());\n+    out.write(['\\n' as u8]);\n+}\n \n-impl StdReader {\n-    pub fn new(_stream: StdStream) -> StdReader { fail2!() }\n+/// Representation of a reader of a standard input stream\n+pub struct StdReader {\n+    priv inner: ~RtioFileStream\n }\n \n impl Reader for StdReader {\n-    fn read(&mut self, _buf: &mut [u8]) -> Option<uint> { fail2!() }\n+    fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n+        match self.inner.read(buf) {\n+            Ok(amt) => Some(amt as uint),\n+            Err(e) => {\n+                io_error::cond.raise(e);\n+                None\n+            }\n+        }\n+    }\n \n-    fn eof(&mut self) -> bool { fail2!() }\n+    fn eof(&mut self) -> bool { false }\n }\n \n-pub struct StdWriter;\n-\n-impl StdWriter {\n-    pub fn new(_stream: StdStream) -> StdWriter { fail2!() }\n+/// Representation of a writer to a standard output stream\n+pub struct StdWriter {\n+    priv inner: ~RtioFileStream\n }\n \n impl Writer for StdWriter {\n-    fn write(&mut self, _buf: &[u8]) { fail2!() }\n+    fn write(&mut self, buf: &[u8]) {\n+        match self.inner.write(buf) {\n+            Ok(()) => {}\n+            Err(e) => io_error::cond.raise(e)\n+        }\n+    }\n \n-    fn flush(&mut self) { fail2!() }\n+    fn flush(&mut self) {\n+        match self.inner.flush() {\n+            Ok(()) => {}\n+            Err(e) => io_error::cond.raise(e)\n+        }\n+    }\n }"}]}