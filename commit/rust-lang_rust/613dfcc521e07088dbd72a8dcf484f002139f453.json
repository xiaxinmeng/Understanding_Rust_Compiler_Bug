{"sha": "613dfcc521e07088dbd72a8dcf484f002139f453", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxM2RmY2M1MjFlMDcwODhkYmQ3MmE4ZGNmNDg0ZjAwMjEzOWY0NTM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-17T20:55:21Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-18T02:38:57Z"}, "message": "Remove various feature flags", "tree": {"sha": "a133ae3217f0540f3db7050cfd576344b086208d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a133ae3217f0540f3db7050cfd576344b086208d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/613dfcc521e07088dbd72a8dcf484f002139f453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/613dfcc521e07088dbd72a8dcf484f002139f453", "html_url": "https://github.com/rust-lang/rust/commit/613dfcc521e07088dbd72a8dcf484f002139f453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/613dfcc521e07088dbd72a8dcf484f002139f453/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d07646858698a1d904c63d3ccc4d9c041928ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d07646858698a1d904c63d3ccc4d9c041928ed8", "html_url": "https://github.com/rust-lang/rust/commit/3d07646858698a1d904c63d3ccc4d9c041928ed8"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "419cd06436ffadb704fe63b82fe54c037c567f6b", "filename": "src/config/config_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/613dfcc521e07088dbd72a8dcf484f002139f453/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613dfcc521e07088dbd72a8dcf484f002139f453/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=613dfcc521e07088dbd72a8dcf484f002139f453", "patch": "@@ -243,7 +243,7 @@ macro_rules! create_config {\n                         if !err.is_empty() {\n                             eprint!(\"{}\", err);\n                         }\n-                        Ok(Config::default().fill_from_parsed_config(parsed_config, dir: &Path))\n+                        Ok(Config::default().fill_from_parsed_config(parsed_config, dir))\n                     }\n                     Err(e) => {\n                         err.push_str(\"Error: Decoding config file failed:\\n\");"}, {"sha": "e7817c175b4e835e39245a8625a4d326c79745c3", "filename": "src/imports.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/613dfcc521e07088dbd72a8dcf484f002139f453/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613dfcc521e07088dbd72a8dcf484f002139f453/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=613dfcc521e07088dbd72a8dcf484f002139f453", "patch": "@@ -925,19 +925,23 @@ mod test {\n         parser.parse_in_list()\n     }\n \n-    macro parse_use_trees($($s:expr),* $(,)*) {\n-        vec![\n-            $(parse_use_tree($s),)*\n-        ]\n+    macro_rules! parse_use_trees {\n+        ($($s:expr),* $(,)*) => {\n+            vec![\n+                $(parse_use_tree($s),)*\n+            ]\n+        }\n     }\n \n     #[test]\n     fn test_use_tree_merge() {\n-        macro test_merge([$($input:expr),* $(,)*], [$($output:expr),* $(,)*]) {\n-            assert_eq!(\n-                merge_use_trees(parse_use_trees!($($input,)*)),\n-                parse_use_trees!($($output,)*),\n-            );\n+        macro_rules! test_merge {\n+            ([$($input:expr),* $(,)*], [$($output:expr),* $(,)*]) => {\n+                assert_eq!(\n+                    merge_use_trees(parse_use_trees!($($input,)*)),\n+                    parse_use_trees!($($output,)*),\n+                );\n+            }\n         }\n \n         test_merge!([\"a::b::{c, d}\", \"a::b::{e, f}\"], [\"a::b::{c, d, e, f}\"]);"}, {"sha": "a8958abab39df1e5e7b5811d8485c8a838ded084", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/613dfcc521e07088dbd72a8dcf484f002139f453/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613dfcc521e07088dbd72a8dcf484f002139f453/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=613dfcc521e07088dbd72a8dcf484f002139f453", "patch": "@@ -8,10 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(decl_macro)]\n-#![allow(unused_attributes)]\n-#![feature(type_ascription)]\n-#![feature(unicode_internals)]\n #![feature(nll)]\n \n #[macro_use]"}, {"sha": "a7a6a7fc6b7a846270da912b2b9ebe7fb9ffe1ff", "filename": "src/macros.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/613dfcc521e07088dbd72a8dcf484f002139f453/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613dfcc521e07088dbd72a8dcf484f002139f453/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=613dfcc521e07088dbd72a8dcf484f002139f453", "patch": "@@ -867,7 +867,8 @@ impl MacroArgParser {\n \n     /// Returns a collection of parsed macro def's arguments.\n     pub fn parse(mut self, tokens: ThinTokenStream) -> Option<Vec<ParsedMacroArg>> {\n-        let mut iter = (tokens.into(): TokenStream).trees();\n+        let stream: TokenStream = tokens.into();\n+        let mut iter = stream.trees();\n \n         while let Some(ref tok) = iter.next() {\n             match tok {\n@@ -1398,21 +1399,23 @@ fn format_lazy_static(context: &RewriteContext, shape: Shape, ts: &TokenStream)\n     result.push_str(\"lazy_static! {\");\n     result.push_str(&nested_shape.indent.to_string_with_newline(context.config));\n \n-    macro parse_or($method:ident $(,)* $($arg:expr),* $(,)*) {\n-        match parser.$method($($arg,)*) {\n-            Ok(val) => {\n-                if parser.sess.span_diagnostic.has_errors() {\n+    macro_rules! parse_or {\n+        ($method:ident $(,)* $($arg:expr),* $(,)*) => {\n+            match parser.$method($($arg,)*) {\n+                Ok(val) => {\n+                    if parser.sess.span_diagnostic.has_errors() {\n+                        parser.sess.span_diagnostic.reset_err_count();\n+                        return None;\n+                    } else {\n+                        val\n+                    }\n+                }\n+                Err(mut err) => {\n+                    err.cancel();\n                     parser.sess.span_diagnostic.reset_err_count();\n                     return None;\n-                } else {\n-                    val\n                 }\n             }\n-            Err(mut err) => {\n-                err.cancel();\n-                parser.sess.span_diagnostic.reset_err_count();\n-                return None;\n-            }\n         }\n     }\n "}, {"sha": "5336b86eb4bc7678099d966f6bba4224ce445d89", "filename": "src/overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/613dfcc521e07088dbd72a8dcf484f002139f453/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613dfcc521e07088dbd72a8dcf484f002139f453/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=613dfcc521e07088dbd72a8dcf484f002139f453", "patch": "@@ -200,7 +200,7 @@ impl<'a, T: 'a + IntoOverflowableItem<'a>> IntoOverflowableItem<'a> for ptr::P<T\n     }\n }\n \n-macro impl_into_overflowable_item_for_ast_node {\n+macro_rules! impl_into_overflowable_item_for_ast_node {\n     ($($ast_node:ident),*) => {\n         $(\n             impl<'a> IntoOverflowableItem<'a> for ast::$ast_node {\n@@ -212,7 +212,7 @@ macro impl_into_overflowable_item_for_ast_node {\n     }\n }\n \n-macro impl_into_overflowable_item_for_rustfmt_types {\n+macro_rules! impl_into_overflowable_item_for_rustfmt_types {\n     ([$($ty:ident),*], [$($ty_with_lifetime:ident),*]) => {\n         $(\n             impl<'a> IntoOverflowableItem<'a> for $ty {"}]}