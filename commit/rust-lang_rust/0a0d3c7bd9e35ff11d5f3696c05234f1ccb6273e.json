{"sha": "0a0d3c7bd9e35ff11d5f3696c05234f1ccb6273e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMGQzYzdiZDllMzVmZjExZDVmMzY5NmMwNTIzNGYxY2NiNjI3M2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-25T21:53:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-26T16:20:40Z"}, "message": "rustdoc: Handle impl method visibility correctly. #5533", "tree": {"sha": "bf564129a2db36c42c76f29e20fe0bfbeca23b10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf564129a2db36c42c76f29e20fe0bfbeca23b10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0d3c7bd9e35ff11d5f3696c05234f1ccb6273e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0d3c7bd9e35ff11d5f3696c05234f1ccb6273e", "html_url": "https://github.com/rust-lang/rust/commit/0a0d3c7bd9e35ff11d5f3696c05234f1ccb6273e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0d3c7bd9e35ff11d5f3696c05234f1ccb6273e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a346def8b24f2d0c59e7b1d6212fc351fdbc1745", "url": "https://api.github.com/repos/rust-lang/rust/commits/a346def8b24f2d0c59e7b1d6212fc351fdbc1745", "html_url": "https://github.com/rust-lang/rust/commit/a346def8b24f2d0c59e7b1d6212fc351fdbc1745"}], "stats": {"total": 174, "additions": 161, "deletions": 13}, "files": [{"sha": "b6aebf8b14fe619ba76d49f05b2a9b82039cebb6", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 161, "deletions": 13, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/0a0d3c7bd9e35ff11d5f3696c05234f1ccb6273e/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0d3c7bd9e35ff11d5f3696c05234f1ccb6273e/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=0a0d3c7bd9e35ff11d5f3696c05234f1ccb6273e", "patch": "@@ -12,6 +12,9 @@\n \n use core::prelude::*;\n \n+use extract;\n+use syntax::ast;\n+use syntax::ast_map;\n use astsrv;\n use doc;\n use fold::Fold;\n@@ -28,12 +31,73 @@ pub fn mk_pass() -> Pass {\n }\n \n pub fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+    // First strip private methods out of impls\n+    let fold = Fold {\n+        ctxt: srv.clone(),\n+        fold_impl: fold_impl,\n+        .. fold::default_any_fold(srv.clone())\n+    };\n+    let doc = (fold.fold_doc)(&fold, doc);\n+\n+    // Then strip private items and empty impls\n     let fold = Fold {\n         ctxt: srv.clone(),\n         fold_mod: fold_mod,\n         .. fold::default_any_fold(srv)\n     };\n-    (fold.fold_doc)(&fold, doc)\n+    let doc = (fold.fold_doc)(&fold, doc);\n+\n+    return doc;\n+}\n+\n+fn fold_impl(\n+    fold: &fold::Fold<astsrv::Srv>,\n+    doc: doc::ImplDoc\n+) -> doc::ImplDoc {\n+    let doc = fold::default_seq_fold_impl(fold, doc);\n+\n+    do astsrv::exec(fold.ctxt.clone()) |ctxt| {\n+        match ctxt.ast_map.get(&doc.item.id) {\n+            ast_map::node_item(item, _) => {\n+                match item.node {\n+                    ast::item_impl(_, None, _, ref methods) => {\n+                        // Associated impls have complex rules for method visibility\n+                        strip_priv_methods(copy doc, *methods, item.vis)\n+                    }\n+                    ast::item_impl(_, Some(_), _ ,_) => {\n+                        // Trait impls don't\n+                        copy doc\n+                    }\n+                    _ => fail!()\n+                }\n+            }\n+            _ => fail!()\n+        }\n+    }\n+}\n+\n+fn strip_priv_methods(\n+    doc: doc::ImplDoc,\n+    methods: &[@ast::method],\n+    item_vis: ast::visibility\n+) -> doc::ImplDoc {\n+    let methods = do (&doc.methods).filtered |method| {\n+        let ast_method = do methods.find |m| {\n+            extract::to_str(m.ident) == method.name\n+        };\n+        fail_unless!(ast_method.is_some());\n+        let ast_method = ast_method.unwrap();\n+        match ast_method.vis {\n+            ast::public => true,\n+            ast::private => false,\n+            ast::inherited => item_vis == ast::public\n+        }\n+    };\n+\n+    doc::ImplDoc {\n+        methods: methods,\n+        .. doc\n+    }\n }\n \n fn fold_mod(\n@@ -44,28 +108,40 @@ fn fold_mod(\n \n     doc::ModDoc {\n         items: doc.items.filtered(|ItemTag| {\n-            is_visible(fold.ctxt.clone(), ItemTag.item())\n+            match ItemTag {\n+                &doc::ImplTag(ref doc) => {\n+                    if doc.trait_types.is_empty() {\n+                        // This is an associated impl. We have already pruned the\n+                        // non-visible methods. If there are any left then\n+                        // retain the impl, otherwise throw it away\n+                        !doc.methods.is_empty()\n+                    } else {\n+                        // This is a trait implementation, make it visible\n+                        // NOTE: This is not quite right since this could be an impl\n+                        // of a private trait. We can't know that without running\n+                        // resolve though.\n+                        true\n+                    }\n+                }\n+                _ => {\n+                    is_visible(fold.ctxt.clone(), ItemTag.item())\n+                }\n+            }\n         }),\n         .. doc\n     }\n }\n \n fn is_visible(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n-    use syntax::ast_map;\n-    use syntax::ast;\n-\n     let id = doc.id;\n \n     do astsrv::exec(srv) |ctxt| {\n         match ctxt.ast_map.get(&id) {\n             ast_map::node_item(item, _) => {\n-                match item.node {\n-                    ast::item_impl(_, Some(_), _, _) => {\n-                        // This is a trait implementation, make it visible\n-                        // NOTE: This is not quite right since this could be an impl\n-                        // of a private trait. We can't know that without running\n-                        // resolve though.\n-                        true\n+                match &item.node {\n+                    &ast::item_impl(*) => {\n+                        // Impls handled elsewhere\n+                        fail!()\n                     }\n                     _ => {\n                         // Otherwise just look at the visibility\n@@ -85,7 +161,8 @@ fn should_prune_items_without_pub_modifier() {\n }\n \n #[test]\n-fn unless_they_are_trait_impls() {\n+fn should_not_prune_trait_impls() {\n+    // Impls are more complicated\n     let doc = test::mk_doc(\n         ~\" \\\n           trait Foo { } \\\n@@ -94,16 +171,87 @@ fn unless_they_are_trait_impls() {\n     fail_unless!(!doc.cratemod().impls().is_empty());\n }\n \n+#[test]\n+fn should_prune_associated_methods_without_vis_modifier_on_impls_without_vis_modifier() {\n+    let doc = test::mk_doc(\n+        ~\"impl Foo {\\\n+          pub fn bar() { }\\\n+          fn baz() { }\\\n+          }\");\n+    fail_unless!(doc.cratemod().impls()[0].methods.len() == 1);\n+}\n+\n+#[test]\n+fn should_prune_priv_associated_methods_on_impls_without_vis_modifier() {\n+    let doc = test::mk_doc(\n+        ~\"impl Foo {\\\n+          pub fn bar() { }\\\n+          priv fn baz() { }\\\n+          }\");\n+    fail_unless!(doc.cratemod().impls()[0].methods.len() == 1);\n+}\n+\n+#[test]\n+fn should_prune_priv_associated_methods_on_pub_impls() {\n+    let doc = test::mk_doc(\n+        ~\"pub impl Foo {\\\n+          fn bar() { }\\\n+          priv fn baz() { }\\\n+          }\");\n+    fail_unless!(doc.cratemod().impls()[0].methods.len() == 1);\n+}\n+\n+#[test]\n+fn should_prune_associated_methods_without_vis_modifier_on_priv_impls() {\n+    let doc = test::mk_doc(\n+        ~\"priv impl Foo {\\\n+          pub fn bar() { }\\\n+          fn baz() { }\\\n+          }\");\n+    fail_unless!(doc.cratemod().impls()[0].methods.len() == 1);\n+}\n+\n+#[test]\n+fn should_prune_priv_associated_methods_on_priv_impls() {\n+    let doc = test::mk_doc(\n+        ~\"priv impl Foo {\\\n+          pub fn bar() { }\\\n+          priv fn baz() { }\\\n+          }\");\n+    fail_unless!(doc.cratemod().impls()[0].methods.len() == 1);\n+}\n+\n+#[test]\n+fn should_prune_associated_impls_with_no_pub_methods() {\n+    let doc = test::mk_doc(\n+        ~\"priv impl Foo {\\\n+          fn baz() { }\\\n+          }\");\n+    fail_unless!(doc.cratemod().impls().is_empty());\n+}\n+\n+#[test]\n+fn should_not_prune_associated_impls_with_pub_methods() {\n+    let doc = test::mk_doc(\n+        ~\" \\\n+          impl Foo { pub fn bar() { } } \\\n+          \");\n+    fail_unless!(!doc.cratemod().impls().is_empty());\n+}\n+\n+\n #[cfg(test)]\n pub mod test {\n     use astsrv;\n     use doc;\n     use extract;\n+    use tystr_pass;\n     use prune_private_pass::run;\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv.clone(), ~\"\");\n+            let doc = tystr_pass::run(srv.clone(), doc);\n             run(srv.clone(), doc)\n         }\n     }"}]}