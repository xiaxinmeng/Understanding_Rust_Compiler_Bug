{"sha": "63523e4d1c2fe6683b035c6818cafa9f77614711", "node_id": "C_kwDOAAsO6NoAKDYzNTIzZTRkMWMyZmU2NjgzYjAzNWM2ODE4Y2FmYTlmNzc2MTQ3MTE", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-04T19:34:20Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-04T19:34:20Z"}, "message": "Stabilize `-Z emit-future-incompat` as `--json future-incompat`", "tree": {"sha": "978ae7e0261b3490e7f59813d34c6d0efe3e6a4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/978ae7e0261b3490e7f59813d34c6d0efe3e6a4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63523e4d1c2fe6683b035c6818cafa9f77614711", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmGrwtMACgkQtAh+UQ6Y\nsWTa7xAAkw7qHOKDhla2qwga9xbKuQNYzK1zvonb5DFzmuKSi41brY9v7q3baFZp\n8UVFhMiHeHf3RQxX1TSo1bNCdi4V8Tl3mOFI0nGalcy6B6uRjgQOUJcNJmABZ5TC\nPeLTuf4ztMQDSE8bKUUbZYMWm0eSNVB9QVPTIduEGQdJn1+lbqw03HqNfeRcEiZN\nAn118zcbwgm5Mw1jYtOazks8L1vTcd0qkavrUgT57MT0vHiYEuFqq1kX3CYxV7Hs\nxx1lmfZEF+QX8C5+aHUBEtxnnB4IFeZlAgzP4WDBxmE+m5+n9liYz5lq86XzUDOw\nB6jIvdZIXRMobTctw3lK7zonykaLc2Dzy4RbwvaZ9D0SSbonJUF/tV7d+LRXLTIF\naZmnrs7xQJj7bHru0s/aFEiHNuYjkqT9ighX4+fySEYk7qgIkhAw4yEwH8Io9xJs\nBrFjpBvFIpmgybIDqnGKw/ezXPw8ZMFQuRUGgLdbA+sovjKa/eBuiSynlF69eyJ4\nnU1i5/hr5Ea3oJrNQGrxCMj9MZyGDCznABn1DFre7gGAyv/kjnKP+OckhxJgaZjF\nHEiNtWRz4xPyzd6MFt5ifL6M/sNBaWjFmsFkd/UNyS+B/98LPUDVji6LjDgvsSkB\n8jdWWgakrkVCu3XF0VcGWpbD5Mv3uEayvBAiBL6it/W+odWmhcw=\n=cWGT\n-----END PGP SIGNATURE-----", "payload": "tree 978ae7e0261b3490e7f59813d34c6d0efe3e6a4c\nparent ff23ad3179014ba258f2b540fb39dd0f26852b7a\nauthor Aaron Hill <aa1ronham@gmail.com> 1638646460 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1638646460 -0500\n\nStabilize `-Z emit-future-incompat` as `--json future-incompat`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63523e4d1c2fe6683b035c6818cafa9f77614711", "html_url": "https://github.com/rust-lang/rust/commit/63523e4d1c2fe6683b035c6818cafa9f77614711", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63523e4d1c2fe6683b035c6818cafa9f77614711/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff23ad3179014ba258f2b540fb39dd0f26852b7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff23ad3179014ba258f2b540fb39dd0f26852b7a", "html_url": "https://github.com/rust-lang/rust/commit/ff23ad3179014ba258f2b540fb39dd0f26852b7a"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "c651feaaa66f62cf5b0d1718ce6eb193bc5833d0", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63523e4d1c2fe6683b035c6818cafa9f77614711/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63523e4d1c2fe6683b035c6818cafa9f77614711/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=63523e4d1c2fe6683b035c6818cafa9f77614711", "patch": "@@ -651,7 +651,6 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(dump_mir_dir, String::from(\"abc\"));\n     untracked!(dump_mir_exclude_pass_number, true);\n     untracked!(dump_mir_graphviz, true);\n-    untracked!(emit_future_incompat_report, true);\n     untracked!(emit_stack_sizes, true);\n     untracked!(future_incompat_test, true);\n     untracked!(hir_stats, true);"}, {"sha": "87e8e57611765ab053b69a42c4e4f0339a1bc7eb", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63523e4d1c2fe6683b035c6818cafa9f77614711/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63523e4d1c2fe6683b035c6818cafa9f77614711/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=63523e4d1c2fe6683b035c6818cafa9f77614711", "patch": "@@ -746,6 +746,7 @@ impl Default for Options {\n             edition: DEFAULT_EDITION,\n             json_artifact_notifications: false,\n             json_unused_externs: false,\n+            json_future_incompat: false,\n             pretty: None,\n             working_dir: RealFileName::LocalPath(std::env::current_dir().unwrap()),\n         }\n@@ -1257,6 +1258,7 @@ pub struct JsonConfig {\n     pub json_rendered: HumanReadableErrorType,\n     pub json_artifact_notifications: bool,\n     pub json_unused_externs: bool,\n+    pub json_future_incompat: bool,\n }\n \n /// Parse the `--json` flag.\n@@ -1269,6 +1271,7 @@ pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n     let mut json_color = ColorConfig::Never;\n     let mut json_artifact_notifications = false;\n     let mut json_unused_externs = false;\n+    let mut json_future_incompat = false;\n     for option in matches.opt_strs(\"json\") {\n         // For now conservatively forbid `--color` with `--json` since `--json`\n         // won't actually be emitting any colors and anything colorized is\n@@ -1286,6 +1289,7 @@ pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n                 \"diagnostic-rendered-ansi\" => json_color = ColorConfig::Always,\n                 \"artifacts\" => json_artifact_notifications = true,\n                 \"unused-externs\" => json_unused_externs = true,\n+                \"future-incompat\" => json_future_incompat = true,\n                 s => early_error(\n                     ErrorOutputType::default(),\n                     &format!(\"unknown `--json` option `{}`\", s),\n@@ -1298,6 +1302,7 @@ pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n         json_rendered: json_rendered(json_color),\n         json_artifact_notifications,\n         json_unused_externs,\n+        json_future_incompat,\n     }\n }\n \n@@ -2011,8 +2016,12 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let edition = parse_crate_edition(matches);\n \n-    let JsonConfig { json_rendered, json_artifact_notifications, json_unused_externs } =\n-        parse_json(matches);\n+    let JsonConfig {\n+        json_rendered,\n+        json_artifact_notifications,\n+        json_unused_externs,\n+        json_future_incompat,\n+    } = parse_json(matches);\n \n     let error_format = parse_error_format(matches, color, json_rendered);\n \n@@ -2248,6 +2257,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         edition,\n         json_artifact_notifications,\n         json_unused_externs,\n+        json_future_incompat,\n         pretty,\n         working_dir,\n     }"}, {"sha": "8610d8c64bd2eb26e31758177eeb4dfcba027151", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63523e4d1c2fe6683b035c6818cafa9f77614711/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63523e4d1c2fe6683b035c6818cafa9f77614711/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=63523e4d1c2fe6683b035c6818cafa9f77614711", "patch": "@@ -205,6 +205,9 @@ top_level_options!(\n         /// `true` if we're emitting a JSON blob containing the unused externs\n         json_unused_externs: bool [UNTRACKED],\n \n+        /// `true` if we're emitting a JSON job containg a future-incompat report for lints\n+        json_future_incompat: bool [TRACKED],\n+\n         pretty: Option<PpMode> [UNTRACKED],\n \n         /// The (potentially remapped) working directory\n@@ -1124,8 +1127,6 @@ options! {\n         computed `block` spans (one span encompassing a block's terminator and \\\n         all statements). If `-Z instrument-coverage` is also enabled, create \\\n         an additional `.html` file showing the computed coverage spans.\"),\n-    emit_future_incompat_report: bool = (false, parse_bool, [UNTRACKED],\n-        \"emits a future-incompatibility report for lints (RFC 2834)\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n         \"emit a section containing stack size metadata (default: no)\"),\n     fewer_names: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "3f15de3ba6931c0d132c8e0e2b4e5bc62702c6b3", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63523e4d1c2fe6683b035c6818cafa9f77614711/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63523e4d1c2fe6683b035c6818cafa9f77614711/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=63523e4d1c2fe6683b035c6818cafa9f77614711", "patch": "@@ -280,7 +280,7 @@ impl Session {\n     }\n \n     fn emit_future_breakage(&self) {\n-        if !self.opts.debugging_opts.emit_future_incompat_report {\n+        if !self.opts.json_future_incompat {\n             return;\n         }\n "}, {"sha": "c5f477cc4500ee9de04640c8ccfe41668266b561", "filename": "src/test/ui/lint/future-incompat-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63523e4d1c2fe6683b035c6818cafa9f77614711/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63523e4d1c2fe6683b035c6818cafa9f77614711/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.rs?ref=63523e4d1c2fe6683b035c6818cafa9f77614711", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zfuture-incompat-test -Zemit-future-incompat-report\n+// compile-flags: -Zfuture-incompat-test\n // check-pass\n \n // The `-Zfuture-incompat-test flag causes any normal warning to be included"}, {"sha": "f1f285ace173b854487568620fdc0bf5674cb8f2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63523e4d1c2fe6683b035c6818cafa9f77614711/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63523e4d1c2fe6683b035c6818cafa9f77614711/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=63523e4d1c2fe6683b035c6818cafa9f77614711", "patch": "@@ -1802,18 +1802,19 @@ impl<'test> TestCx<'test> {\n                 // patterns still match the raw compiler output.\n                 if self.props.error_patterns.is_empty() {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n+                    rustc.args(&[\"--json\", \"future-incompat\"]);\n                 }\n                 rustc.arg(\"-Zui-testing\");\n                 rustc.arg(\"-Zdeduplicate-diagnostics=no\");\n             }\n             Ui => {\n                 if !self.props.compile_flags.iter().any(|s| s.starts_with(\"--error-format\")) {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n+                    rustc.args(&[\"--json\", \"future-incompat\"]);\n                 }\n                 rustc.arg(\"-Ccodegen-units=1\");\n                 rustc.arg(\"-Zui-testing\");\n                 rustc.arg(\"-Zdeduplicate-diagnostics=no\");\n-                rustc.arg(\"-Zemit-future-incompat-report\");\n             }\n             MirOpt => {\n                 rustc.args(&["}]}