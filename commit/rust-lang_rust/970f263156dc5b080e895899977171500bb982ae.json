{"sha": "970f263156dc5b080e895899977171500bb982ae", "node_id": "C_kwDOAAsO6NoAKDk3MGYyNjMxNTZkYzViMDgwZTg5NTg5OTk3NzE3MTUwMGJiOTgyYWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-05T19:57:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-05T19:57:22Z"}, "message": "Rollup merge of #108770 - GuillaumeGomez:improve-doc-and-naming, r=cjgillot\n\nImprove documentation and argument naming of some TyCtxt methods\n\nI got bit by this recently so better prevent others to end up the same as me.", "tree": {"sha": "3366dfa7627a1c4318816e99bb9fd55d0d63a145", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3366dfa7627a1c4318816e99bb9fd55d0d63a145"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/970f263156dc5b080e895899977171500bb982ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkBPQiCRBK7hj4Ov3rIwAArBYIAB7xSIlSVkmWvCU9FKmPXp4K\nRiJz2ExCUXssD1fBtOncWzCjDAeXJYx8zVAbPQ/w4AKrkOdZIKlubpNTVpOSB+OD\n1AySe2NN9fulE/cHNOxfRJhoSWWhrq2yyp/b4DpHGPHyOhqvASPBM/F8Mq5BATiI\nzGSu83KV4ZwXVm3xZI4y2iGIQzcjWc36IgVeUpNUOHyjYiLEFZYwYMXADa7shju4\ns/KDRO6gVsMLs42q2kEbL7O/IGGGZ+8mSpvyJhKpyDI0b8oXLWVZ3jXY2UM/CIn+\nXltX0l8EDxAvdGt8oGUatJ0Dc3yX0QiSqj0ymkvYhtinAts6HzRu6TcMhZVy2d4=\n=RKj2\n-----END PGP SIGNATURE-----\n", "payload": "tree 3366dfa7627a1c4318816e99bb9fd55d0d63a145\nparent 1c2f641e15a91f38cb5b67381de474bdcb1d5e0c\nparent 1836fe44b51f5e3bd15a998de42641f5fa99cba1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678046242 +0100\ncommitter GitHub <noreply@github.com> 1678046242 +0100\n\nRollup merge of #108770 - GuillaumeGomez:improve-doc-and-naming, r=cjgillot\n\nImprove documentation and argument naming of some TyCtxt methods\n\nI got bit by this recently so better prevent others to end up the same as me.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/970f263156dc5b080e895899977171500bb982ae", "html_url": "https://github.com/rust-lang/rust/commit/970f263156dc5b080e895899977171500bb982ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/970f263156dc5b080e895899977171500bb982ae/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2f641e15a91f38cb5b67381de474bdcb1d5e0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2f641e15a91f38cb5b67381de474bdcb1d5e0c", "html_url": "https://github.com/rust-lang/rust/commit/1c2f641e15a91f38cb5b67381de474bdcb1d5e0c"}, {"sha": "1836fe44b51f5e3bd15a998de42641f5fa99cba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1836fe44b51f5e3bd15a998de42641f5fa99cba1", "html_url": "https://github.com/rust-lang/rust/commit/1836fe44b51f5e3bd15a998de42641f5fa99cba1"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "649a58c9170731896aa16dcda2ef1ae9156c9a38", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/970f263156dc5b080e895899977171500bb982ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970f263156dc5b080e895899977171500bb982ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=970f263156dc5b080e895899977171500bb982ae", "patch": "@@ -100,8 +100,9 @@ impl<'tcx> TraitDef {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn for_each_impl<F: FnMut(DefId)>(self, def_id: DefId, mut f: F) {\n-        let impls = self.trait_impls_of(def_id);\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n+    pub fn for_each_impl<F: FnMut(DefId)>(self, trait_def_id: DefId, mut f: F) {\n+        let impls = self.trait_impls_of(trait_def_id);\n \n         for &impl_def_id in impls.blanket_impls.iter() {\n             f(impl_def_id);\n@@ -114,26 +115,28 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// Iterate over every impl that could possibly match the\n-    /// self type `self_ty`.\n+    /// Iterate over every impl that could possibly match the self type `self_ty`.\n+    ///\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n     pub fn for_each_relevant_impl<F: FnMut(DefId)>(\n         self,\n-        def_id: DefId,\n+        trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         mut f: F,\n     ) {\n-        let _: Option<()> = self.find_map_relevant_impl(def_id, self_ty, |did| {\n+        let _: Option<()> = self.find_map_relevant_impl(trait_def_id, self_ty, |did| {\n             f(did);\n             None\n         });\n     }\n \n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n     pub fn non_blanket_impls_for_ty(\n         self,\n-        def_id: DefId,\n+        trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n     ) -> impl Iterator<Item = DefId> + 'tcx {\n-        let impls = self.trait_impls_of(def_id);\n+        let impls = self.trait_impls_of(trait_def_id);\n         if let Some(simp) = fast_reject::simplify_type(self, self_ty, TreatParams::AsInfer) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 return impls.iter().copied();\n@@ -145,9 +148,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Applies function to every impl that could possibly match the self type `self_ty` and returns\n     /// the first non-none value.\n+    ///\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n     pub fn find_map_relevant_impl<T, F: FnMut(DefId) -> Option<T>>(\n         self,\n-        def_id: DefId,\n+        trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         mut f: F,\n     ) -> Option<T> {\n@@ -156,7 +161,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         //\n         // If we want to be faster, we could have separate queries for\n         // blanket and non-blanket impls, and compare them separately.\n-        let impls = self.trait_impls_of(def_id);\n+        let impls = self.trait_impls_of(trait_def_id);\n \n         for &impl_def_id in impls.blanket_impls.iter() {\n             if let result @ Some(_) = f(impl_def_id) {\n@@ -190,9 +195,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         None\n     }\n \n-    /// Returns an iterator containing all impls\n-    pub fn all_impls(self, def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n-        let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(def_id);\n+    /// Returns an iterator containing all impls for `trait_def_id`.\n+    ///\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n+    pub fn all_impls(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n+        let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(trait_def_id);\n \n         blanket_impls.iter().chain(non_blanket_impls.iter().flat_map(|(_, v)| v)).cloned()\n     }"}]}