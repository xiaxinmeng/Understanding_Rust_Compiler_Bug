{"sha": "400070ae55f78f9a7a66caf880207473ebc5aa93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMDA3MGFlNTVmNzhmOWE3YTY2Y2FmODgwMjA3NDczZWJjNWFhOTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-06T21:11:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-06T21:11:38Z"}, "message": "auto merge of #10826 : SimonSapin/rust/str-insert, r=brson\n\nI could not run the tests because of unrelated building issue, sorry about that.", "tree": {"sha": "475c75863efaa8fef7f6f830a98448e136ba30c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/475c75863efaa8fef7f6f830a98448e136ba30c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/400070ae55f78f9a7a66caf880207473ebc5aa93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/400070ae55f78f9a7a66caf880207473ebc5aa93", "html_url": "https://github.com/rust-lang/rust/commit/400070ae55f78f9a7a66caf880207473ebc5aa93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/400070ae55f78f9a7a66caf880207473ebc5aa93/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3afa0b97c4ce81b3bbfd1e0dd4a6609742957678", "url": "https://api.github.com/repos/rust-lang/rust/commits/3afa0b97c4ce81b3bbfd1e0dd4a6609742957678", "html_url": "https://github.com/rust-lang/rust/commit/3afa0b97c4ce81b3bbfd1e0dd4a6609742957678"}, {"sha": "80d0f60d29dfb24dcb5483ae3e7d7cf10b5264d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d0f60d29dfb24dcb5483ae3e7d7cf10b5264d2", "html_url": "https://github.com/rust-lang/rust/commit/80d0f60d29dfb24dcb5483ae3e7d7cf10b5264d2"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "4d3fa5d65fd475d8d80ea66520b4d8d10ad1e1d8", "filename": "src/libstd/str.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/400070ae55f78f9a7a66caf880207473ebc5aa93/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400070ae55f78f9a7a66caf880207473ebc5aa93/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=400070ae55f78f9a7a66caf880207473ebc5aa93", "patch": "@@ -2514,6 +2514,16 @@ pub trait OwnedStr {\n     /// Prepend a char to a string\n     fn unshift_char(&mut self, ch: char);\n \n+    /// Insert a new sub-string at the given position in a string, in O(n + m) time\n+    /// (with n and m the lengths of the string and the substring.)\n+    /// This fails if `position` is not at a character boundary.\n+    fn insert(&mut self, position: uint, substring: &str);\n+\n+    /// Insert a char at the given position in a string, in O(n + m) time\n+    /// (with n and m the lengths of the string and the substring.)\n+    /// This fails if `position` is not at a character boundary.\n+    fn insert_char(&mut self, position: uint, ch: char);\n+\n     /// Concatenate two strings together.\n     fn append(self, rhs: &str) -> ~str;\n \n@@ -2626,6 +2636,24 @@ impl OwnedStr for ~str {\n         *self = new_str;\n     }\n \n+    #[inline]\n+    fn insert(&mut self, position: uint, substring: &str) {\n+        // This could be more efficient.\n+        let mut new_str = self.slice_to(position).to_owned();\n+        new_str.push_str(substring);\n+        new_str.push_str(self.slice_from(position));\n+        *self = new_str;\n+    }\n+\n+    #[inline]\n+    fn insert_char(&mut self, position: uint, ch: char) {\n+        // This could be more efficient.\n+        let mut new_str = self.slice_to(position).to_owned();\n+        new_str.push_char(ch);\n+        new_str.push_str(self.slice_from(position));\n+        *self = new_str;\n+    }\n+\n     #[inline]\n     fn append(self, rhs: &str) -> ~str {\n         let mut new_str = self;\n@@ -2878,6 +2906,20 @@ mod tests {\n         assert_eq!(~\"\u534e\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\", data);\n     }\n \n+    #[test]\n+    fn test_insert_char() {\n+        let mut data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\";\n+        data.insert_char(15, '\u534e');\n+        assert_eq!(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u534e\u0e28\u0e44\u0e17\u0e22\u4e2d\", data);\n+    }\n+\n+    #[test]\n+    fn test_insert() {\n+        let mut data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\";\n+        data.insert(15, \"\u534e\u4e2d\");\n+        assert_eq!(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u534e\u4e2d\u0e28\u0e44\u0e17\u0e22\u4e2d\", data);\n+    }\n+\n     #[test]\n     fn test_collect() {\n         let empty = ~\"\";"}]}