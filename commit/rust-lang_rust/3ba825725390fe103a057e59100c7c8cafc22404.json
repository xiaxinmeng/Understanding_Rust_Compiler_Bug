{"sha": "3ba825725390fe103a057e59100c7c8cafc22404", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYTgyNTcyNTM5MGZlMTAzYTA1N2U1OTEwMGM3YzhjYWZjMjI0MDQ=", "commit": {"author": {"name": "Ross MacArthur", "email": "ross@macarthur.io", "date": "2019-11-11T17:33:30Z"}, "committer": {"name": "Ross MacArthur", "email": "ross@macarthur.io", "date": "2019-11-11T17:33:30Z"}, "message": "support issue = \"none\" in unstable attributes\n\n- Use `Option<NonZeroU32>` to represent issue numbers.", "tree": {"sha": "3aeab2e182aa7ba6f24c6be5b208048a7226b9fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aeab2e182aa7ba6f24c6be5b208048a7226b9fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ba825725390fe103a057e59100c7c8cafc22404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba825725390fe103a057e59100c7c8cafc22404", "html_url": "https://github.com/rust-lang/rust/commit/3ba825725390fe103a057e59100c7c8cafc22404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ba825725390fe103a057e59100c7c8cafc22404/comments", "author": {"login": "rossmacarthur", "id": 17109887, "node_id": "MDQ6VXNlcjE3MTA5ODg3", "avatar_url": "https://avatars.githubusercontent.com/u/17109887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmacarthur", "html_url": "https://github.com/rossmacarthur", "followers_url": "https://api.github.com/users/rossmacarthur/followers", "following_url": "https://api.github.com/users/rossmacarthur/following{/other_user}", "gists_url": "https://api.github.com/users/rossmacarthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmacarthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmacarthur/subscriptions", "organizations_url": "https://api.github.com/users/rossmacarthur/orgs", "repos_url": "https://api.github.com/users/rossmacarthur/repos", "events_url": "https://api.github.com/users/rossmacarthur/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmacarthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rossmacarthur", "id": 17109887, "node_id": "MDQ6VXNlcjE3MTA5ODg3", "avatar_url": "https://avatars.githubusercontent.com/u/17109887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmacarthur", "html_url": "https://github.com/rossmacarthur", "followers_url": "https://api.github.com/users/rossmacarthur/followers", "following_url": "https://api.github.com/users/rossmacarthur/following{/other_user}", "gists_url": "https://api.github.com/users/rossmacarthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmacarthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmacarthur/subscriptions", "organizations_url": "https://api.github.com/users/rossmacarthur/orgs", "repos_url": "https://api.github.com/users/rossmacarthur/repos", "events_url": "https://api.github.com/users/rossmacarthur/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmacarthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9248b019b22224b6d99cc504edd50bd9ed015d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9248b019b22224b6d99cc504edd50bd9ed015d3f", "html_url": "https://github.com/rust-lang/rust/commit/9248b019b22224b6d99cc504edd50bd9ed015d3f"}], "stats": {"total": 121, "additions": 82, "deletions": 39}, "files": [{"sha": "fabb0a59da81dadf3f8731a1ce57d0995a7adc04", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=3ba825725390fe103a057e59100c7c8cafc22404", "patch": "@@ -22,8 +22,9 @@ use syntax::attr::{self, Stability, Deprecation, RustcDeprecation};\n use crate::ty::{self, TyCtxt};\n use crate::util::nodemap::{FxHashSet, FxHashMap};\n \n-use std::mem::replace;\n use std::cmp::Ordering;\n+use std::mem::replace;\n+use std::num::NonZeroU32;\n \n #[derive(PartialEq, Clone, Copy, Debug)]\n pub enum StabilityLevel {\n@@ -441,7 +442,7 @@ impl<'tcx> Index<'tcx> {\n                 let stability = tcx.intern_stability(Stability {\n                     level: attr::StabilityLevel::Unstable {\n                         reason: Some(Symbol::intern(reason)),\n-                        issue: 27812,\n+                        issue: NonZeroU32::new(27812),\n                         is_soft: false,\n                     },\n                     feature: sym::rustc_private,\n@@ -488,7 +489,7 @@ pub fn report_unstable(\n     sess: &Session,\n     feature: Symbol,\n     reason: Option<Symbol>,\n-    issue: u32,\n+    issue: Option<NonZeroU32>,\n     is_soft: bool,\n     span: Span,\n     soft_handler: impl FnOnce(&'static lint::Lint, Span, &str),\n@@ -520,7 +521,7 @@ pub fn report_unstable(\n             soft_handler(lint::builtin::SOFT_UNSTABLE, span, &msg)\n         } else {\n             emit_feature_err(\n-                &sess.parse_sess, feature, span, GateIssue::Library(Some(issue)), &msg\n+                &sess.parse_sess, feature, span, GateIssue::Library(issue), &msg\n             );\n         }\n     }\n@@ -637,7 +638,7 @@ pub enum EvalResult {\n     Deny {\n         feature: Symbol,\n         reason: Option<Symbol>,\n-        issue: u32,\n+        issue: Option<NonZeroU32>,\n         is_soft: bool,\n     },\n     /// The item does not have the `#[stable]` or `#[unstable]` marker assigned.\n@@ -758,7 +759,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 // the `-Z force-unstable-if-unmarked` flag present (we're\n                 // compiling a compiler crate), then let this missing feature\n                 // annotation slide.\n-                if feature == sym::rustc_private && issue == 27812 {\n+                if feature == sym::rustc_private && issue == NonZeroU32::new(27812) {\n                     if self.sess.opts.debugging_opts.force_unstable_if_unmarked {\n                         return EvalResult::Allow;\n                     }"}, {"sha": "c1fc5614ae4026e4ea66e9c8793f60887d697406", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=3ba825725390fe103a057e59100c7c8cafc22404", "patch": "@@ -41,6 +41,7 @@ use std::cell::{self, RefCell};\n use std::env;\n use std::fmt;\n use std::io::Write;\n+use std::num::NonZeroU32;\n use std::path::PathBuf;\n use std::time::Duration;\n use std::sync::Arc;\n@@ -183,7 +184,7 @@ enum DiagnosticBuilderMethod {\n pub enum DiagnosticMessageId {\n     ErrorId(u16), // EXXXX error code as integer\n     LintId(lint::LintId),\n-    StabilityId(u32), // issue number\n+    StabilityId(Option<NonZeroU32>), // issue number\n }\n \n impl From<&'static lint::Lint> for DiagnosticMessageId {"}, {"sha": "05cb5b1d54eca649cdd4c1d29daabcd6d70ecc98", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3ba825725390fe103a057e59100c7c8cafc22404", "patch": "@@ -39,6 +39,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::default::Default;\n use std::{mem, slice, vec};\n+use std::num::NonZeroU32;\n use std::iter::FromIterator;\n use std::rc::Rc;\n use std::cell::RefCell;\n@@ -4399,7 +4400,7 @@ pub struct Stability {\n     pub since: String,\n     pub deprecation: Option<Deprecation>,\n     pub unstable_reason: Option<String>,\n-    pub issue: Option<u32>,\n+    pub issue: Option<NonZeroU32>,\n }\n \n #[derive(Clone, Debug)]\n@@ -4428,7 +4429,7 @@ impl Clean<Stability> for attr::Stability {\n                 _ => None,\n             },\n             issue: match self.level {\n-                attr::Unstable {issue, ..} => Some(issue),\n+                attr::Unstable {issue, ..} => issue,\n                 _ => None,\n             }\n         }"}, {"sha": "2b759c205f54edaf51133de8e77e91610736b7d8", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=3ba825725390fe103a057e59100c7c8cafc22404", "patch": "@@ -6,6 +6,7 @@ use crate::print::pprust;\n use crate::sess::ParseSess;\n \n use errors::{Applicability, Handler};\n+use std::num::NonZeroU32;\n use syntax_pos::hygiene::Transparency;\n use syntax_pos::{symbol::Symbol, symbol::sym, Span};\n \n@@ -157,7 +158,7 @@ pub struct Stability {\n #[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n-    Unstable { reason: Option<Symbol>, issue: u32, is_soft: bool },\n+    Unstable { reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n     Stable { since: Symbol },\n }\n \n@@ -394,18 +395,28 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n \n                     match (feature, reason, issue) {\n                         (Some(feature), reason, Some(issue)) => {\n+                            let issue = match &*issue.as_str() {\n+                                // FIXME(rossmacarthur): remove \"0\" because \"none\" should be used\n+                                // See #41260\n+                                \"none\" | \"0\" => None,\n+                                issue => {\n+                                    if let Ok(num) = issue.parse() {\n+                                        NonZeroU32::new(num)\n+                                    } else {\n+                                        span_err!(\n+                                            diagnostic,\n+                                            attr.span,\n+                                            E0545,\n+                                            \"incorrect 'issue'\"\n+                                        );\n+                                        continue\n+                                    }\n+                                }\n+                            };\n                             stab = Some(Stability {\n                                 level: Unstable {\n                                     reason,\n-                                    issue: {\n-                                        if let Ok(issue) = issue.as_str().parse() {\n-                                            issue\n-                                        } else {\n-                                            span_err!(diagnostic, attr.span, E0545,\n-                                                      \"incorrect 'issue'\");\n-                                            continue\n-                                        }\n-                                    },\n+                                    issue,\n                                     is_soft,\n                                 },\n                                 feature,"}, {"sha": "2819ee273d9f042029956ef097f4d2ed122b3f0e", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=3ba825725390fe103a057e59100c7c8cafc22404", "patch": "@@ -207,10 +207,10 @@ declare_features! (\n     /// Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n     (active, allocator_internals, \"1.20.0\", None, None),\n \n-    // no-tracking-issue-end\n-\n     /// Added for testing E0705; perma-unstable.\n-    (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n+    (active, test_2018_feature, \"1.31.0\", None, Some(Edition::Edition2018)),\n+\n+    // no-tracking-issue-end\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: internal feature gates"}, {"sha": "3bf1e24bf12796d8734d183a537fd7963f231cf8", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=3ba825725390fe103a057e59100c7c8cafc22404", "patch": "@@ -18,6 +18,7 @@ use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use log::debug;\n \n use std::env;\n+use std::num::NonZeroU32;\n \n #[derive(Copy, Clone, Debug)]\n pub enum Stability {\n@@ -55,25 +56,28 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n     PostExpansionVisitor { parse_sess, features }.visit_attribute(attr)\n }\n \n-fn find_lang_feature_issue(feature: Symbol) -> Option<u32> {\n+fn find_lang_feature_issue(feature: Symbol) -> Option<NonZeroU32> {\n     if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {\n         // FIXME (#28244): enforce that active features have issue numbers\n-        // assert!(info.issue.is_some())\n-        info.issue\n+        // assert!(info.issue().is_some())\n+        info.issue()\n     } else {\n         // search in Accepted, Removed, or Stable Removed features\n-        let found = ACCEPTED_FEATURES.iter().chain(REMOVED_FEATURES).chain(STABLE_REMOVED_FEATURES)\n+        let found = ACCEPTED_FEATURES\n+            .iter()\n+            .chain(REMOVED_FEATURES)\n+            .chain(STABLE_REMOVED_FEATURES)\n             .find(|t| t.name == feature);\n         match found {\n-            Some(&Feature { issue, .. }) => issue,\n-            None => panic!(\"Feature `{}` is not declared anywhere\", feature),\n+            Some(found) => found.issue(),\n+            None => panic!(\"feature `{}` is not declared anywhere\", feature),\n         }\n     }\n }\n \n pub enum GateIssue {\n     Language,\n-    Library(Option<u32>)\n+    Library(Option<NonZeroU32>)\n }\n \n #[derive(Debug, Copy, Clone, PartialEq)]\n@@ -126,14 +130,11 @@ fn leveled_feature_err<'a, S: Into<MultiSpan>>(\n         GateStrength::Soft => diag.struct_span_warn(span, explain),\n     };\n \n-    match issue {\n-        None | Some(0) => {}  // We still accept `0` as a stand-in for backwards compatibility\n-        Some(n) => {\n-            err.note(&format!(\n-                \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n-                n,\n-            ));\n-        }\n+    if let Some(n) = issue {\n+        err.note(&format!(\n+            \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n+            n,\n+        ));\n     }\n \n     // #23973: do not suggest `#![feature(...)]` if we are in beta/stable"}, {"sha": "c4418c0f0f632b26cf26ec0e1e900ca0868d76c8", "filename": "src/libsyntax/feature_gate/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba825725390fe103a057e59100c7c8cafc22404/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs?ref=3ba825725390fe103a057e59100c7c8cafc22404", "patch": "@@ -18,8 +18,9 @@ mod active;\n mod builtin_attrs;\n mod check;\n \n-use std::fmt;\n use crate::{edition::Edition, symbol::Symbol};\n+use std::fmt;\n+use std::num::NonZeroU32;\n use syntax_pos::Span;\n \n #[derive(Clone, Copy)]\n@@ -46,11 +47,17 @@ pub struct Feature {\n     state: State,\n     name: Symbol,\n     since: &'static str,\n-    issue: Option<u32>,\n+    issue: Option<u32>,  // FIXME: once #58732 is done make this an Option<NonZeroU32>\n     edition: Option<Edition>,\n     description: &'static str,\n }\n \n+impl Feature {\n+    fn issue(&self) -> Option<NonZeroU32> {\n+        self.issue.and_then(|i| NonZeroU32::new(i))\n+    }\n+}\n+\n pub use active::{Features, INCOMPLETE_FEATURES};\n pub use builtin_attrs::{\n     AttributeGate, AttributeType, GatedCfg,"}, {"sha": "3ce9de3fb1b4673ea2b6c074aa469c889bc27703", "filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-none.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3ba825725390fe103a057e59100c7c8cafc22404/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba825725390fe103a057e59100c7c8cafc22404/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.rs?ref=3ba825725390fe103a057e59100c7c8cafc22404", "patch": "@@ -0,0 +1,13 @@\n+// Check that an issue value can be explicitly set to \"none\" instead of \"0\"\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+fn unstable_issue_0() {}\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+fn unstable_issue_none() {}\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"something\")] //~ ERROR incorrect 'issue'\n+fn unstable_issue_not_allowed() {}"}, {"sha": "fc031f5f8c5d163c43970dac78934b8e91bdef88", "filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-none.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ba825725390fe103a057e59100c7c8cafc22404/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ba825725390fe103a057e59100c7c8cafc22404/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.stderr?ref=3ba825725390fe103a057e59100c7c8cafc22404", "patch": "@@ -0,0 +1,8 @@\n+error[E0545]: incorrect 'issue'\n+  --> $DIR/unstable-attribute-allow-issue-none.rs:12:1\n+   |\n+LL | #[unstable(feature = \"unstable_test_feature\", issue = \"something\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}