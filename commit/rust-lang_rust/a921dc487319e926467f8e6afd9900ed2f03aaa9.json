{"sha": "a921dc487319e926467f8e6afd9900ed2f03aaa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MjFkYzQ4NzMxOWU5MjY0NjdmOGU2YWZkOTkwMGVkMmYwM2FhYTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-09T06:36:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-16T05:26:36Z"}, "message": "rustc: Remove compiler support for __log_level()\n\nThis commit removes all internal support for the previously used __log_level()\nexpression. The logging subsystem was previously modified to not rely on this\nmagical expression. This also removes the only other function to use the\nmodule_data map in trans, decl_gc_metadata. It appears that this is an ancient\nfunction from a GC only used long ago.\n\nThis does not remove the crate map entirely, as libgreen still uses it to hook\nin to the event loop provided by libgreen.", "tree": {"sha": "19f167d50b0ee94975646b205188f1a70c6fb437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19f167d50b0ee94975646b205188f1a70c6fb437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a921dc487319e926467f8e6afd9900ed2f03aaa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a921dc487319e926467f8e6afd9900ed2f03aaa9", "html_url": "https://github.com/rust-lang/rust/commit/a921dc487319e926467f8e6afd9900ed2f03aaa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a921dc487319e926467f8e6afd9900ed2f03aaa9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66", "html_url": "https://github.com/rust-lang/rust/commit/cc6ec8df95fbd8163b7c2c6c34469fb96b704e66"}], "stats": {"total": 306, "additions": 22, "deletions": 284}, "files": [{"sha": "2306a25592bf44298d61b2910bd2584ad2bf7165", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -408,7 +408,6 @@ impl CFGBuilder {\n                 self.straightline(expr, pred, [e])\n             }\n \n-            ast::ExprLogLevel |\n             ast::ExprMac(..) |\n             ast::ExprInlineAsm(..) |\n             ast::ExprFnBlock(..) |"}, {"sha": "683ef11aff152b1adef41d81dc1a949de56fb88f", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -613,7 +613,6 @@ impl<'a, O:DataFlowOperator> PropagationContext<'a, O> {\n                 self.walk_exprs([l, r], in_out, loop_scopes);\n             }\n \n-            ast::ExprLogLevel |\n             ast::ExprLit(..) |\n             ast::ExprPath(..) => {}\n "}, {"sha": "38cbde70ad18bf5999e3629e1881a04c1fc2f365", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -541,7 +541,7 @@ fn visit_expr(v: &mut LivenessVisitor, expr: &Expr, this: @IrMaps) {\n \n       // otherwise, live nodes are not required:\n       ExprIndex(..) | ExprField(..) | ExprVstore(..) | ExprVec(..) |\n-      ExprCall(..) | ExprMethodCall(..) | ExprTup(..) | ExprLogLevel |\n+      ExprCall(..) | ExprMethodCall(..) | ExprTup(..) |\n       ExprBinary(..) | ExprAddrOf(..) |\n       ExprCast(..) | ExprUnary(..) | ExprBreak(_) |\n       ExprAgain(_) | ExprLit(_) | ExprRet(..) | ExprBlock(..) |\n@@ -1271,7 +1271,6 @@ impl Liveness {\n             })\n           }\n \n-          ExprLogLevel |\n           ExprLit(..) => {\n             succ\n           }\n@@ -1521,7 +1520,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       // no correctness conditions related to liveness\n       ExprCall(..) | ExprMethodCall(..) | ExprIf(..) | ExprMatch(..) |\n       ExprWhile(..) | ExprLoop(..) | ExprIndex(..) | ExprField(..) |\n-      ExprVstore(..) | ExprVec(..) | ExprTup(..) | ExprLogLevel |\n+      ExprVstore(..) | ExprVec(..) | ExprTup(..) |\n       ExprBinary(..) |\n       ExprCast(..) | ExprUnary(..) | ExprRet(..) | ExprBreak(..) |\n       ExprAgain(..) | ExprLit(_) | ExprBlock(..) |"}, {"sha": "127f835d5f6ef369c736ba56b583d4ff41cf0be3", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -469,7 +469,7 @@ impl<TYPER:Typer> MemCategorizationContext<TYPER> {\n           ast::ExprUnary(..) |\n           ast::ExprMethodCall(..) | ast::ExprCast(..) | ast::ExprVstore(..) |\n           ast::ExprVec(..) | ast::ExprTup(..) | ast::ExprIf(..) |\n-          ast::ExprLogLevel | ast::ExprBinary(..) | ast::ExprWhile(..) |\n+          ast::ExprBinary(..) | ast::ExprWhile(..) |\n           ast::ExprBlock(..) | ast::ExprLoop(..) | ast::ExprMatch(..) |\n           ast::ExprLit(..) | ast::ExprBreak(..) | ast::ExprMac(..) |\n           ast::ExprAgain(..) | ast::ExprStruct(..) | ast::ExprRepeat(..) |"}, {"sha": "22b3fb8ad6e4f7d03952c8960ea2a02875434fbb", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -503,7 +503,6 @@ impl VisitContext {\n                 self.use_expr(base, Read);\n             }\n \n-            ExprLogLevel |\n             ExprInlineAsm(..) |\n             ExprBreak(..) |\n             ExprAgain(..) |"}, {"sha": "a2ee57d6df1ae857c71c5c655579c0a0827b758f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 103, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -32,7 +32,7 @@ use driver::session::{Session, NoDebugInfo, FullDebugInfo};\n use driver::driver::OutputFilenames;\n use driver::driver::{CrateAnalysis, CrateTranslation};\n use lib::llvm::{ModuleRef, ValueRef, BasicBlockRef};\n-use lib::llvm::{llvm, True, Vector};\n+use lib::llvm::{llvm, Vector};\n use lib;\n use metadata::common::LinkMeta;\n use metadata::{csearch, encoder};\n@@ -2404,70 +2404,6 @@ pub fn trap(bcx: &Block) {\n     }\n }\n \n-pub fn decl_gc_metadata(ccx: &CrateContext, llmod_id: &str) {\n-    if !ccx.sess.opts.gc || !ccx.uses_gc {\n-        return;\n-    }\n-\n-    let gc_metadata_name = ~\"_gc_module_metadata_\" + llmod_id;\n-    let gc_metadata = gc_metadata_name.with_c_str(|buf| {\n-        unsafe {\n-            llvm::LLVMAddGlobal(ccx.llmod, Type::i32().to_ref(), buf)\n-        }\n-    });\n-    unsafe {\n-        llvm::LLVMSetGlobalConstant(gc_metadata, True);\n-        lib::llvm::SetLinkage(gc_metadata, lib::llvm::ExternalLinkage);\n-\n-        let mut module_data = ccx.module_data.borrow_mut();\n-        module_data.get().insert(~\"_gc_module_metadata\", gc_metadata);\n-    }\n-}\n-\n-pub fn create_module_map(ccx: &CrateContext) -> (ValueRef, uint) {\n-    let str_slice_type = Type::struct_([Type::i8p(), ccx.int_type], false);\n-    let elttype = Type::struct_([str_slice_type, ccx.int_type], false);\n-    let maptype = {\n-        let module_data = ccx.module_data.borrow();\n-        Type::array(&elttype, module_data.get().len() as u64)\n-    };\n-    let map = \"_rust_mod_map\".with_c_str(|buf| {\n-        unsafe {\n-            llvm::LLVMAddGlobal(ccx.llmod, maptype.to_ref(), buf)\n-        }\n-    });\n-    lib::llvm::SetLinkage(map, lib::llvm::InternalLinkage);\n-    let mut elts: Vec<ValueRef> = Vec::new();\n-\n-    // This is not ideal, but the borrow checker doesn't\n-    // like the multiple borrows. At least, it doesn't\n-    // like them on the current snapshot. (2013-06-14)\n-    let keys = {\n-        let mut keys = Vec::new();\n-        let module_data = ccx.module_data.borrow();\n-        for (k, _) in module_data.get().iter() {\n-            keys.push(k.clone());\n-        }\n-        keys\n-    };\n-\n-    for key in keys.iter() {\n-        let llstrval = C_str_slice(ccx, token::intern_and_get_ident(*key));\n-        let module_data = ccx.module_data.borrow();\n-        let val = *module_data.get().find_equiv(key).unwrap();\n-        let v_ptr = p2i(ccx, val);\n-        let elt = C_struct([\n-            llstrval,\n-            v_ptr\n-        ], false);\n-        elts.push(elt);\n-    }\n-    unsafe {\n-        llvm::LLVMSetInitializer(map, C_array(elttype, elts.as_slice()));\n-    }\n-    return (map, keys.len())\n-}\n-\n pub fn symname(name: &str, hash: &str, vers: &str) -> ~str {\n     let path = [PathName(token::intern(name))];\n     link::exported_name(ast_map::Values(path.iter()).chain(None), hash, vers)\n@@ -2489,11 +2425,8 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n                 mapmeta.crateid.version_or_default())\n     };\n \n-    let slicetype = Type::struct_([int_type, int_type], false);\n     let maptype = Type::struct_([\n         Type::i32(),        // version\n-        slicetype,          // child modules\n-        slicetype,          // sub crate-maps\n         int_type.ptr_to(),  // event loop factory\n     ], false);\n     let map = sym_name.with_c_str(|buf| {\n@@ -2513,22 +2446,6 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n }\n \n pub fn fill_crate_map(ccx: @CrateContext, map: ValueRef) {\n-    let mut subcrates: Vec<ValueRef> = Vec::new();\n-    let mut i = 1;\n-    let cstore = ccx.sess.cstore;\n-    while cstore.have_crate_data(i) {\n-        let cdata = cstore.get_crate_data(i);\n-        let nm = symname(format!(\"_rust_crate_map_{}\", cdata.name),\n-                         cstore.get_crate_hash(i).as_str(),\n-                         cstore.get_crate_id(i).version_or_default());\n-        let cr = nm.with_c_str(|buf| {\n-            unsafe {\n-                llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type.to_ref(), buf)\n-            }\n-        });\n-        subcrates.push(p2i(ccx, cr));\n-        i += 1;\n-    }\n     let event_loop_factory = match ccx.tcx.lang_items.event_loop_factory() {\n         Some(did) => unsafe {\n             if is_local(did) {\n@@ -2545,26 +2462,8 @@ pub fn fill_crate_map(ccx: @CrateContext, map: ValueRef) {\n         None => C_null(ccx.int_type.ptr_to())\n     };\n     unsafe {\n-        let maptype = Type::array(&ccx.int_type, subcrates.len() as u64);\n-        let vec_elements = \"_crate_map_child_vectors\".with_c_str(|buf| {\n-            llvm::LLVMAddGlobal(ccx.llmod, maptype.to_ref(), buf)\n-        });\n-        lib::llvm::SetLinkage(vec_elements, lib::llvm::InternalLinkage);\n-\n-        llvm::LLVMSetInitializer(vec_elements,\n-                                 C_array(ccx.int_type, subcrates.as_slice()));\n-        let (mod_map, mod_count) = create_module_map(ccx);\n-\n         llvm::LLVMSetInitializer(map, C_struct(\n             [C_i32(2),\n-             C_struct([\n-                p2i(ccx, mod_map),\n-                C_uint(ccx, mod_count)\n-             ], false),\n-             C_struct([\n-                p2i(ccx, vec_elements),\n-                C_uint(ccx, subcrates.len())\n-             ], false),\n             event_loop_factory,\n         ], false));\n     }\n@@ -2667,7 +2566,6 @@ pub fn trans_crate(sess: session::Session,\n         trans_mod(ccx, &krate.module);\n     }\n \n-    decl_gc_metadata(ccx, llmod_id);\n     fill_crate_map(ccx, ccx.crate_map);\n \n     // win32: wart with exporting crate_map symbol"}, {"sha": "80dcfc90287150de85052a874ac779056bbf3983", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -95,7 +95,6 @@ pub struct CrateContext {\n     // Cache of closure wrappers for bare fn's.\n     closure_bare_wrapper_cache: RefCell<HashMap<ValueRef, ValueRef>>,\n \n-    module_data: RefCell<HashMap<~str, ValueRef>>,\n     lltypes: RefCell<HashMap<ty::t, Type>>,\n     llsizingtypes: RefCell<HashMap<ty::t, Type>>,\n     adt_reprs: RefCell<HashMap<ty::t, @adt::Repr>>,\n@@ -207,7 +206,6 @@ impl CrateContext {\n                  extern_const_values: RefCell::new(DefIdMap::new()),\n                  impl_method_cache: RefCell::new(HashMap::new()),\n                  closure_bare_wrapper_cache: RefCell::new(HashMap::new()),\n-                 module_data: RefCell::new(HashMap::new()),\n                  lltypes: RefCell::new(HashMap::new()),\n                  llsizingtypes: RefCell::new(HashMap::new()),\n                  adt_reprs: RefCell::new(HashMap::new()),"}, {"sha": "dd6a3e61b69e78e8bf5d6b186cd8f00116987b47", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -2539,7 +2539,6 @@ fn populate_scope_map(cx: &CrateContext,\n         scope_map.insert(exp.id, scope_stack.last().unwrap().scope_metadata);\n \n         match exp.node {\n-            ast::ExprLogLevel |\n             ast::ExprLit(_)   |\n             ast::ExprBreak(_) |\n             ast::ExprAgain(_) |"}, {"sha": "bf2d192d0de23ad99413b86d24040bc996c5a3ee", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 65, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -34,8 +34,7 @@\n #[allow(non_camel_case_types)];\n \n use back::abi;\n-use back::link;\n-use lib::llvm::{ValueRef, llvm, SetLinkage, False};\n+use lib::llvm::{ValueRef, llvm};\n use lib;\n use metadata::csearch;\n use middle::trans::_match;\n@@ -74,9 +73,7 @@ use middle::trans::type_::Type;\n use std::vec;\n use std::vec_ng::Vec;\n use syntax::ast;\n-use syntax::ast_map;\n use syntax::codemap;\n-use syntax::parse::token;\n use syntax::print::pprust::{expr_to_str};\n \n // Destinations\n@@ -455,9 +452,6 @@ fn trans_datum_unadjusted<'a>(bcx: &'a Block<'a>,\n             // Datum output mode means this is a scalar cast:\n             trans_imm_cast(bcx, val, expr.id)\n         }\n-        ast::ExprLogLevel => {\n-            trans_log_level(bcx)\n-        }\n         _ => {\n             bcx.tcx().sess.span_bug(\n                 expr.span,\n@@ -1671,64 +1665,6 @@ fn trans_assign_op<'a>(\n     return result_datum.store_to(bcx, dst_datum.val);\n }\n \n-fn trans_log_level<'a>(bcx: &'a Block<'a>) -> DatumBlock<'a, Expr> {\n-    let _icx = push_ctxt(\"trans_log_level\");\n-    let ccx = bcx.ccx();\n-\n-    let (modpath, modname) = {\n-        let srccrate = {\n-            let external_srcs = ccx.external_srcs.borrow();\n-            match external_srcs.get().find(&bcx.fcx.id) {\n-                Some(&src) => {\n-                    ccx.sess.cstore.get_crate_data(src.krate).name.clone()\n-                }\n-                None => ccx.link_meta.crateid.name.to_str(),\n-            }\n-        };\n-        bcx.tcx().map.with_path(bcx.fcx.id, |path| {\n-            let first = ast_map::PathMod(token::intern(srccrate));\n-            let mut path = Some(first).move_iter().chain(path).filter(|e| {\n-                match *e {\n-                    ast_map::PathMod(_) => true,\n-                    _ => false\n-                }\n-            });\n-            let modpath: Vec<ast_map::PathElem> = path.collect();\n-            let modname = ast_map::path_to_str(ast_map::Values(modpath.iter()));\n-            (modpath, modname)\n-        })\n-    };\n-\n-    let module_data_exists;\n-    {\n-        let module_data = ccx.module_data.borrow();\n-        module_data_exists = module_data.get().contains_key(&modname);\n-    }\n-\n-    let global = if module_data_exists {\n-        let mut module_data = ccx.module_data.borrow_mut();\n-        module_data.get().get_copy(&modname)\n-    } else {\n-        let s = link::mangle_internal_name_by_path_and_seq(\n-            ast_map::Values(modpath.iter()).chain(None), \"loglevel\");\n-        let global;\n-        unsafe {\n-            global = s.with_c_str(|buf| {\n-                llvm::LLVMAddGlobal(ccx.llmod, Type::i32().to_ref(), buf)\n-            });\n-            llvm::LLVMSetGlobalConstant(global, False);\n-            llvm::LLVMSetInitializer(global, C_null(Type::i32()));\n-            lib::llvm::SetLinkage(global, lib::llvm::InternalLinkage);\n-        }\n-        {\n-            let mut module_data = ccx.module_data.borrow_mut();\n-            module_data.get().insert(modname, global);\n-            global\n-        }\n-    };\n-\n-    immediate_rvalue_bcx(bcx, Load(bcx, global), ty::mk_u32()).to_expr_datumblock()\n-}\n \n fn auto_ref<'a>(bcx: &'a Block<'a>,\n                 datum: Datum<Expr>,"}, {"sha": "e1dddda01f7e1a2bc533a23f2e868b0661f3cf8b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -3391,7 +3391,6 @@ pub fn expr_kind(tcx: ctxt,\n \n         ast::ExprForLoop(..) => fail!(\"non-desugared expr_for_loop\"),\n \n-        ast::ExprLogLevel |\n         ast::ExprLit(_) | // Note: LitStr is carved out above\n         ast::ExprUnary(..) |\n         ast::ExprAddrOf(..) |"}, {"sha": "b3f7adc89e898481d709750c21d3d8ac35454182", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -2848,9 +2848,6 @@ fn check_expr_with_unifier(fcx: @FnCtxt,\n         }\n         fcx.write_bot(id);\n       }\n-      ast::ExprLogLevel => {\n-        fcx.write_ty(id, ty::mk_u32())\n-      }\n       ast::ExprParen(a) => {\n         check_expr_with_opt_hint_and_lvalue_pref(fcx, a, expected, lvalue_pref);\n         fcx.write_ty(id, fcx.expr_ty(a));"}, {"sha": "c6d5a80208b1f98359dd4896448478558001beda", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 15, "deletions": 84, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -9,13 +9,14 @@\n // except according to those terms.\n \n use cast;\n-use cmp::TotalOrd;\n-use container::MutableSet;\n-use iter::Iterator;\n use option::{Some, None, Option};\n use ptr::RawPtr;\n use rt::rtio::EventLoop;\n-use vec::{ImmutableVector, OwnedVector};\n+\n+#[cfg(stage0)] use cmp::TotalOrd;\n+#[cfg(stage0)] use container::MutableSet;\n+#[cfg(stage0)] use iter::Iterator;\n+#[cfg(stage0)] use vec::{ImmutableVector, OwnedVector};\n \n // Need to tell the linker on OS X to not barf on undefined symbols\n // and instead look them up at runtime, which we need to resolve\n@@ -24,17 +25,24 @@ use vec::{ImmutableVector, OwnedVector};\n #[link_args = \"-Wl,-U,__rust_crate_map_toplevel\"]\n extern {}\n \n+#[cfg(stage0)]\n pub struct ModEntry<'a> {\n     name: &'a str,\n     log_level: *mut u32\n }\n \n+#[cfg(stage0)]\n pub struct CrateMap<'a> {\n     version: i32,\n     entries: &'a [ModEntry<'a>],\n     children: &'a [&'a CrateMap<'a>],\n     event_loop_factory: Option<fn() -> ~EventLoop>,\n }\n+#[cfg(not(stage0))]\n+pub struct CrateMap<'a> {\n+    version: i32,\n+    event_loop_factory: Option<fn() -> ~EventLoop>,\n+}\n \n // When working on android, apparently weak symbols don't work so well for\n // finding the crate map, and neither does dlopen + dlsym. This is mainly a\n@@ -114,13 +122,15 @@ pub fn get_crate_map() -> Option<&'static CrateMap<'static>> {\n     }\n }\n \n+#[cfg(stage0)]\n fn version(crate_map: &CrateMap) -> i32 {\n     match crate_map.version {\n         2 => return 2,\n         _ => return 0\n     }\n }\n \n+#[cfg(stage0)]\n fn do_iter_crate_map<'a>(\n                      crate_map: &'a CrateMap<'a>,\n                      f: |&'a ModEntry<'a>|,\n@@ -149,87 +159,8 @@ fn do_iter_crate_map<'a>(\n }\n \n /// Iterates recursively over `crate_map` and all child crate maps\n+#[cfg(stage0)]\n pub fn iter_crate_map<'a>(crate_map: &'a CrateMap<'a>, f: |&'a ModEntry<'a>|) {\n     let mut v = ~[];\n     do_iter_crate_map(crate_map, f, &mut v);\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use option::None;\n-    use rt::crate_map::{CrateMap, ModEntry, iter_crate_map};\n-\n-    #[test]\n-    fn iter_crate_map_duplicates() {\n-        let mut level3: u32 = 3;\n-\n-        let entries = [\n-            ModEntry { name: \"c::m1\", log_level: &mut level3},\n-        ];\n-\n-        let child_crate = CrateMap {\n-            version: 2,\n-            entries: entries,\n-            children: &[],\n-            event_loop_factory: None,\n-        };\n-\n-        let root_crate = CrateMap {\n-            version: 2,\n-            entries: &[],\n-            children: &[&child_crate, &child_crate],\n-            event_loop_factory: None,\n-        };\n-\n-        let mut cnt = 0;\n-        unsafe {\n-            iter_crate_map(&root_crate, |entry| {\n-                assert!(*entry.log_level == 3);\n-                cnt += 1;\n-            });\n-            assert!(cnt == 1);\n-        }\n-    }\n-\n-    #[test]\n-    fn iter_crate_map_follow_children() {\n-        let mut level2: u32 = 2;\n-        let mut level3: u32 = 3;\n-        let child_crate2 = CrateMap {\n-            version: 2,\n-            entries: &[\n-                ModEntry { name: \"c::m1\", log_level: &mut level2},\n-                ModEntry { name: \"c::m2\", log_level: &mut level3},\n-            ],\n-            children: &[],\n-            event_loop_factory: None,\n-        };\n-\n-        let child_crate1 = CrateMap {\n-            version: 2,\n-            entries: &[\n-                ModEntry { name: \"t::f1\", log_level: &mut 1},\n-            ],\n-            children: &[&child_crate2],\n-            event_loop_factory: None,\n-        };\n-\n-        let root_crate = CrateMap {\n-            version: 2,\n-            entries: &[\n-                ModEntry { name: \"t::f2\", log_level: &mut 0},\n-            ],\n-            children: &[&child_crate1],\n-            event_loop_factory: None,\n-        };\n-\n-        let mut cnt = 0;\n-        unsafe {\n-            iter_crate_map(&root_crate, |entry| {\n-                assert!(*entry.log_level == cnt);\n-                cnt += 1;\n-            });\n-            assert!(cnt == 4);\n-        }\n-    }\n-}"}, {"sha": "4ef46573e23a5d0240c3179d4ab13efcd3a8c195", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -529,9 +529,6 @@ pub enum Expr_ {\n     ExprAgain(Option<Ident>),\n     ExprRet(Option<@Expr>),\n \n-    /// Gets the log level for the enclosing module\n-    ExprLogLevel,\n-\n     ExprInlineAsm(InlineAsm),\n \n     ExprMac(Mac),"}, {"sha": "997bfcc2e94dafceb525701e6c080faec8c5d25b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -120,7 +120,7 @@ impl MacResult {\n     pub fn raw_dummy_expr(sp: codemap::Span) -> @ast::Expr {\n         @ast::Expr {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::ExprLogLevel,\n+            node: ast::ExprTup(Vec::new()),\n             span: sp\n         }\n     }"}, {"sha": "8cc74641db85f37b8ad717dbc9b26e9e6894107d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -816,7 +816,6 @@ pub fn noop_fold_expr<T: Folder>(e: @Expr, folder: &mut T) -> @Expr {\n             ExprIndex(folder.fold_expr(el), folder.fold_expr(er))\n         }\n         ExprPath(ref pth) => ExprPath(folder.fold_path(pth)),\n-        ExprLogLevel => ExprLogLevel,\n         ExprBreak(opt_ident) => ExprBreak(opt_ident.map(|x| folder.fold_ident(x))),\n         ExprAgain(opt_ident) => ExprAgain(opt_ident.map(|x| folder.fold_ident(x))),\n         ExprRet(ref e) => {"}, {"sha": "f52effb8c81d7a29484a815e50a43d2582dfcee3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -25,7 +25,7 @@ use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n use ast::{ExprBreak, ExprCall, ExprCast};\n use ast::{ExprField, ExprFnBlock, ExprIf, ExprIndex};\n-use ast::{ExprLit, ExprLogLevel, ExprLoop, ExprMac};\n+use ast::{ExprLit, ExprLoop, ExprMac};\n use ast::{ExprMethodCall, ExprParen, ExprPath, ExprProc};\n use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n use ast::{ExprVec, ExprVstore, ExprVstoreSlice};\n@@ -1886,12 +1886,6 @@ impl Parser {\n                 }\n             }\n             hi = self.last_span.hi;\n-        } else if self.eat_keyword(keywords::__LogLevel) {\n-            // LOG LEVEL expression\n-            self.expect(&token::LPAREN);\n-            ex = ExprLogLevel;\n-            hi = self.span.hi;\n-            self.expect(&token::RPAREN);\n         } else if self.eat_keyword(keywords::Return) {\n             // RETURN expression\n             if can_begin_expr(&self.token) {"}, {"sha": "b1990476094936c4af4c9fdb793511b3cf823c09", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -1490,11 +1490,6 @@ pub fn print_expr(s: &mut State, expr: &ast::Expr) -> io::IoResult<()> {\n           _ => ()\n         }\n       }\n-      ast::ExprLogLevel => {\n-        try!(word(&mut s.s, \"__log_level\"));\n-        try!(popen(s));\n-        try!(pclose(s));\n-      }\n       ast::ExprInlineAsm(ref a) => {\n         if a.volatile {\n             try!(word(&mut s.s, \"__volatile__ asm!\"));"}, {"sha": "880fce580831b36d58f215511b0e57b9d0de1ceb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a921dc487319e926467f8e6afd9900ed2f03aaa9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=a921dc487319e926467f8e6afd9900ed2f03aaa9", "patch": "@@ -743,7 +743,6 @@ pub fn walk_expr<E: Clone, V: Visitor<E>>(visitor: &mut V, expression: &Expr, en\n         ExprRet(optional_expression) => {\n             walk_expr_opt(visitor, optional_expression, env.clone())\n         }\n-        ExprLogLevel => {}\n         ExprMac(ref macro) => visitor.visit_mac(macro, env.clone()),\n         ExprParen(subexpression) => {\n             visitor.visit_expr(subexpression, env.clone())"}]}