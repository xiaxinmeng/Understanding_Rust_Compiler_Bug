{"sha": "47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7", "node_id": "C_kwDOAAsO6NoAKDQ3NzA0YmJjYzA2M2MyYThmM2U4OGIwNmNmMmY1NGY2YjY0YjVhZTc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-23T19:35:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-23T19:36:19Z"}, "message": "Do not consider repeated lifetime params for elision.", "tree": {"sha": "f029e43e94bba6b3570aa30feaf6dd7711018ba5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f029e43e94bba6b3570aa30feaf6dd7711018ba5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7", "html_url": "https://github.com/rust-lang/rust/commit/47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9c2d862dd10718ba2b2a320c3390995ad414bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9c2d862dd10718ba2b2a320c3390995ad414bc", "html_url": "https://github.com/rust-lang/rust/commit/6c9c2d862dd10718ba2b2a320c3390995ad414bc"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "40e71d4fc751df6f9de518b772a3d94000894794", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7", "patch": "@@ -565,7 +565,7 @@ struct LateResolutionVisitor<'a, 'b, 'ast> {\n     /// They will be used to determine the correct lifetime for the fn return type.\n     /// The `LifetimeElisionCandidate` is used for diagnostics, to suggest introducing named\n     /// lifetimes.\n-    lifetime_elision_candidates: Option<FxIndexMap<LifetimeRes, LifetimeElisionCandidate>>,\n+    lifetime_elision_candidates: Option<Vec<(LifetimeRes, LifetimeElisionCandidate)>>,\n \n     /// The trait that the current context can refer to.\n     current_trait_ref: Option<(Module<'a>, TraitRef)>,\n@@ -1799,7 +1799,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         match res {\n             LifetimeRes::Param { .. } | LifetimeRes::Fresh { .. } | LifetimeRes::Static => {\n                 if let Some(ref mut candidates) = self.lifetime_elision_candidates {\n-                    candidates.insert(res, candidate);\n+                    candidates.push((res, candidate));\n                 }\n             }\n             LifetimeRes::Infer | LifetimeRes::Error | LifetimeRes::ElidedAnchor { .. } => {}\n@@ -1910,8 +1910,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n         // We do not have a `self` candidate, look at the full list.\n         let all_candidates = all_candidates.unwrap();\n-        if all_candidates.len() == 1 {\n-            Ok(*all_candidates.first().unwrap().0)\n+        if let [(res, _)] = &all_candidates[..] {\n+            Ok(*res)\n         } else {\n             let all_candidates = all_candidates\n                 .into_iter()\n@@ -2391,7 +2391,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         // Do not account for the parameters we just bound for function lifetime elision.\n         if let Some(ref mut candidates) = self.lifetime_elision_candidates {\n             for (_, res) in function_lifetime_rib.bindings.values() {\n-                candidates.remove(res);\n+                candidates.retain(|(r, _)| r != res);\n             }\n         }\n "}, {"sha": "ba769a4bcc0a9c0142ccf8e2d9bf103e9ce1602a", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.rs?ref=47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7", "patch": "@@ -42,4 +42,7 @@ fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &isize {\n     panic!()\n }\n \n+fn l<'a>(_: &'a str, _: &'a str) -> &str { \"\" }\n+//~^ ERROR missing lifetime specifier\n+\n fn main() {}"}, {"sha": "5eee953ef189fb190e180ace7867f0f44de4ca94", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=47704bbcc063c2a8f3e88b06cf2f54f6b64b5ae7", "patch": "@@ -70,6 +70,18 @@ help: consider using the `'a` lifetime\n LL | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &'a isize {\n    |                                                  ++\n \n-error: aborting due to 6 previous errors\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:45:37\n+   |\n+LL | fn l<'a>(_: &'a str, _: &'a str) -> &str { \"\" }\n+   |             -------     -------     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'a` lifetime\n+   |\n+LL | fn l<'a>(_: &'a str, _: &'a str) -> &'a str { \"\" }\n+   |                                      ++\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0106`."}]}