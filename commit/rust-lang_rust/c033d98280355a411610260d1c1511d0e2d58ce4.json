{"sha": "c033d98280355a411610260d1c1511d0e2d58ce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMzNkOTgyODAzNTVhNDExNjEwMjYwZDFjMTUxMWQwZTJkNThjZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-09T00:18:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-09T00:18:49Z"}, "message": "Auto merge of #25162 - seanmonstar:asref-bytes, r=alexcrichton\n\nr? @aturon", "tree": {"sha": "22f554ef00b36787e09afff4db205a386c1cbd08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22f554ef00b36787e09afff4db205a386c1cbd08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c033d98280355a411610260d1c1511d0e2d58ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c033d98280355a411610260d1c1511d0e2d58ce4", "html_url": "https://github.com/rust-lang/rust/commit/c033d98280355a411610260d1c1511d0e2d58ce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c033d98280355a411610260d1c1511d0e2d58ce4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3958c6bc35db1a39dcb252b3a76c3ae1c45288d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3958c6bc35db1a39dcb252b3a76c3ae1c45288d", "html_url": "https://github.com/rust-lang/rust/commit/d3958c6bc35db1a39dcb252b3a76c3ae1c45288d"}, {"sha": "8e491ef0193f48fc000ff62c75544f8dcaa6548d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e491ef0193f48fc000ff62c75544f8dcaa6548d", "html_url": "https://github.com/rust-lang/rust/commit/8e491ef0193f48fc000ff62c75544f8dcaa6548d"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "b9e9800f7a0e78fcb1cd730c5bce0a441cb4c69b", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c033d98280355a411610260d1c1511d0e2d58ce4/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c033d98280355a411610260d1c1511d0e2d58ce4/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c033d98280355a411610260d1c1511d0e2d58ce4", "patch": "@@ -80,7 +80,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use alloc::boxed::Box;\n-use core::convert::AsRef;\n use core::clone::Clone;\n use core::cmp::Ordering::{self, Greater, Less};\n use core::cmp::{self, Ord, PartialEq};\n@@ -1024,25 +1023,25 @@ pub trait SliceConcatExt<T: ?Sized> {\n     fn connect(&self, sep: &T) -> Self::Output;\n }\n \n-impl<T: Clone, V: AsRef<[T]>> SliceConcatExt<T> for [V] {\n+impl<T: Clone, V: Borrow<[T]>> SliceConcatExt<T> for [V] {\n     type Output = Vec<T>;\n \n     fn concat(&self) -> Vec<T> {\n-        let size = self.iter().fold(0, |acc, v| acc + v.as_ref().len());\n+        let size = self.iter().fold(0, |acc, v| acc + v.borrow().len());\n         let mut result = Vec::with_capacity(size);\n         for v in self {\n-            result.push_all(v.as_ref())\n+            result.push_all(v.borrow())\n         }\n         result\n     }\n \n     fn connect(&self, sep: &T) -> Vec<T> {\n-        let size = self.iter().fold(0, |acc, v| acc + v.as_ref().len());\n+        let size = self.iter().fold(0, |acc, v| acc + v.borrow().len());\n         let mut result = Vec::with_capacity(size + self.len());\n         let mut first = true;\n         for v in self {\n             if first { first = false } else { result.push(sep.clone()) }\n-            result.push_all(v.as_ref())\n+            result.push_all(v.borrow())\n         }\n         result\n     }"}, {"sha": "baef6ba6f01f368b2e9ec466c748d61cba1cbb44", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c033d98280355a411610260d1c1511d0e2d58ce4/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c033d98280355a411610260d1c1511d0e2d58ce4/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c033d98280355a411610260d1c1511d0e2d58ce4", "patch": "@@ -59,7 +59,6 @@ use core::str::pattern::Pattern;\n use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n use rustc_unicode::str::{UnicodeStr, Utf16Encoder};\n \n-use core::convert::AsRef;\n use vec_deque::VecDeque;\n use borrow::{Borrow, ToOwned};\n use string::String;\n@@ -83,7 +82,7 @@ pub use core::str::pattern;\n Section: Creating a string\n */\n \n-impl<S: AsRef<str>> SliceConcatExt<str> for [S] {\n+impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n     type Output = String;\n \n     fn concat(&self) -> String {\n@@ -92,11 +91,11 @@ impl<S: AsRef<str>> SliceConcatExt<str> for [S] {\n         }\n \n         // `len` calculation may overflow but push_str will check boundaries\n-        let len = self.iter().map(|s| s.as_ref().len()).sum();\n+        let len = self.iter().map(|s| s.borrow().len()).sum();\n         let mut result = String::with_capacity(len);\n \n         for s in self {\n-            result.push_str(s.as_ref())\n+            result.push_str(s.borrow())\n         }\n \n         result\n@@ -115,7 +114,7 @@ impl<S: AsRef<str>> SliceConcatExt<str> for [S] {\n         // this is wrong without the guarantee that `self` is non-empty\n         // `len` calculation may overflow but push_str but will check boundaries\n         let len = sep.len() * (self.len() - 1)\n-            + self.iter().map(|s| s.as_ref().len()).sum::<usize>();\n+            + self.iter().map(|s| s.borrow().len()).sum::<usize>();\n         let mut result = String::with_capacity(len);\n         let mut first = true;\n \n@@ -125,7 +124,7 @@ impl<S: AsRef<str>> SliceConcatExt<str> for [S] {\n             } else {\n                 result.push_str(sep);\n             }\n-            result.push_str(s.as_ref());\n+            result.push_str(s.borrow());\n         }\n         result\n     }"}, {"sha": "52d72501b4a9bafa465c65a40bb49fdf6a6874ab", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c033d98280355a411610260d1c1511d0e2d58ce4/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c033d98280355a411610260d1c1511d0e2d58ce4/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=c033d98280355a411610260d1c1511d0e2d58ce4", "patch": "@@ -1057,6 +1057,14 @@ impl AsRef<str> for String {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl AsRef<[u8]> for String {\n+    #[inline]\n+    fn as_ref(&self) -> &[u8] {\n+        self.as_bytes()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<&'a str> for String {\n     #[cfg(not(test))]"}, {"sha": "c10e1443cfcbebefb79092e8e5fc3b8353c642f6", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c033d98280355a411610260d1c1511d0e2d58ce4/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c033d98280355a411610260d1c1511d0e2d58ce4/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c033d98280355a411610260d1c1511d0e2d58ce4", "patch": "@@ -21,6 +21,7 @@ use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n use char::CharExt;\n use clone::Clone;\n use cmp::{self, Eq};\n+use convert::AsRef;\n use default::Default;\n use fmt;\n use iter::ExactSizeIterator;\n@@ -1842,6 +1843,14 @@ impl StrExt for str {\n     fn parse<T: FromStr>(&self) -> Result<T, T::Err> { FromStr::from_str(self) }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl AsRef<[u8]> for str {\n+    #[inline]\n+    fn as_ref(&self) -> &[u8] {\n+        self.as_bytes()\n+    }\n+}\n+\n /// Pluck a code point out of a UTF-8-like byte slice and return the\n /// index of the next code point.\n #[inline]"}]}