{"sha": "f6ef043a887835ee78be43f18340ce36f99925e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZWYwNDNhODg3ODM1ZWU3OGJlNDNmMTgzNDBjZTM2Zjk5OTI1ZTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-10T13:08:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-10T13:08:58Z"}, "message": "Merge #9845\n\n9845: fix: Do not drop `..Default::default()` completion when typing `..` r=Veykril a=Veykril\n\ncc https://github.com/rust-analyzer/rust-analyzer/issues/9839\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "584faf33052d1c6651384ce2bfb2c7cb4c48a816", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/584faf33052d1c6651384ce2bfb2c7cb4c48a816"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6ef043a887835ee78be43f18340ce36f99925e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhEnpqCRBK7hj4Ov3rIwAA+iMIALCpWq4OwkTVb40VVN/kM+Je\nDNZi4xistQhp5Bs+/oo8ea/FrTysjYr16G6uJ6xHX9fLH6YGpK79zcV7gwLALc8i\n5a/0x5DtwYIViC5gt0D94rS7b3wa+5NB5gb07hmO1forc2ppLk/W7e3hXigXmxB7\nC0lVjmarP9w+wSJz+IgQLTezehZTFXLzCSzNnjpQIiHzoybclx+/fi/hVb22grS2\nJ+YWoiXtR27kOqms0qHMqGZe4RyLDhN9niACt9CAmppMhuWQRlDgUQG5FpsinlGo\n3zlaMQyU6VSDrvuxIRQ5MHhw9SQgC8cGuFBaYiyfnR1In1Kj0mlEct6LlRA3168=\n=A4NV\n-----END PGP SIGNATURE-----\n", "payload": "tree 584faf33052d1c6651384ce2bfb2c7cb4c48a816\nparent cb3201188fda8cbb1fb3644b22c783e64c1385f4\nparent e7295294103665a747bde485286491c7e601d96e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628600938 +0000\ncommitter GitHub <noreply@github.com> 1628600938 +0000\n\nMerge #9845\n\n9845: fix: Do not drop `..Default::default()` completion when typing `..` r=Veykril a=Veykril\n\ncc https://github.com/rust-analyzer/rust-analyzer/issues/9839\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ef043a887835ee78be43f18340ce36f99925e1", "html_url": "https://github.com/rust-lang/rust/commit/f6ef043a887835ee78be43f18340ce36f99925e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6ef043a887835ee78be43f18340ce36f99925e1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3201188fda8cbb1fb3644b22c783e64c1385f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3201188fda8cbb1fb3644b22c783e64c1385f4", "html_url": "https://github.com/rust-lang/rust/commit/cb3201188fda8cbb1fb3644b22c783e64c1385f4"}, {"sha": "e7295294103665a747bde485286491c7e601d96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7295294103665a747bde485286491c7e601d96e", "html_url": "https://github.com/rust-lang/rust/commit/e7295294103665a747bde485286491c7e601d96e"}], "stats": {"total": 133, "additions": 84, "deletions": 49}, "files": [{"sha": "acce10addf72c38de9b64846d56f2f7251372858", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f6ef043a887835ee78be43f18340ce36f99925e1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ef043a887835ee78be43f18340ce36f99925e1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=f6ef043a887835ee78be43f18340ce36f99925e1", "patch": "@@ -178,6 +178,38 @@ impl Default for Struct {\n     fn default() -> Self {}\n }\n \n+fn foo() {\n+    let other = Struct {\n+        foo: 5,\n+        ..Default::default()\n+    };\n+}\n+\"#,\n+        );\n+        check_edit(\n+            \"..Default::default()\",\n+            r#\"\n+//- minicore: default\n+struct Struct { foo: u32, bar: usize }\n+\n+impl Default for Struct {\n+    fn default() -> Self {}\n+}\n+\n+fn foo() {\n+    let other = Struct {\n+        foo: 5,\n+        ..$0\n+    };\n+}\n+\"#,\n+            r#\"\n+struct Struct { foo: u32, bar: usize }\n+\n+impl Default for Struct {\n+    fn default() -> Self {}\n+}\n+\n fn foo() {\n     let other = Struct {\n         foo: 5,"}, {"sha": "ac34a3fac81c445a0be8c2881b56f27de14b3457", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6ef043a887835ee78be43f18340ce36f99925e1/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ef043a887835ee78be43f18340ce36f99925e1/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=f6ef043a887835ee78be43f18340ce36f99925e1", "patch": "@@ -191,6 +191,7 @@ pub(crate) fn determine_location(\n             }\n         }\n     };\n+\n     let res = match_ast! {\n         match parent {\n             ast::IdentPat(_it) => ImmediateLocation::IdentPat,\n@@ -206,6 +207,9 @@ pub(crate) fn determine_location(\n             } else {\n                 ImmediateLocation::RecordField\n             },\n+            ast::RecordExprFieldList(_it) => sema\n+                .find_node_at_offset_with_macros(original_file, offset)\n+                .map(ImmediateLocation::RecordExpr)?,\n             ast::TupleField(_it) => ImmediateLocation::TupleField,\n             ast::TupleFieldList(_it) => ImmediateLocation::TupleField,\n             ast::TypeBound(_it) => ImmediateLocation::TypeBound,"}, {"sha": "2a26fc3dabc54604d8d7e338bec33c6cf970d83f", "filename": "crates/ide_completion/src/tests/record.rs", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/f6ef043a887835ee78be43f18340ce36f99925e1/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ef043a887835ee78be43f18340ce36f99925e1/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs?ref=f6ef043a887835ee78be43f18340ce36f99925e1", "patch": "@@ -7,36 +7,6 @@ fn check(ra_fixture: &str, expect: Expect) {\n     expect.assert_eq(&actual);\n }\n \n-#[test]\n-fn with_default_impl() {\n-    check(\n-        r#\"\n-//- minicore: default\n-struct Struct { foo: u32, bar: usize }\n-\n-impl Default for Struct {\n-    fn default() -> Self {\n-        Struct {\n-            foo: 0,\n-            bar: 0,\n-        }\n-    }\n-}\n-\n-fn foo() {\n-    let other = Struct {\n-        foo: 5,\n-        $0\n-    };\n-}\n-\"#,\n-        expect![[r#\"\n-            fd ..Default::default()\n-            fd bar                  usize\n-        \"#]],\n-    );\n-}\n-\n #[test]\n fn without_default_impl() {\n     check(\n@@ -129,9 +99,54 @@ fn foo(f: Struct) {\n #[test]\n fn functional_update() {\n     // FIXME: This should filter out all completions that do not have the type `Foo`\n+    // FIXME: Fields should not show up after `.`\n     check(\n         r#\"\n+//- minicore:default\n struct Foo { foo1: u32, foo2: u32 }\n+impl Default for Foo {\n+    fn default() -> Self { loop {} }\n+}\n+\n+fn main() {\n+    let thing = 1;\n+    let foo = Foo { foo1: 0, foo2: 0 };\n+    let foo2 = Foo { thing, $0 }\n+}\n+\"#,\n+        expect![[r#\"\n+            fd ..Default::default()\n+            fd foo1                 u32\n+            fd foo2                 u32\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+//- minicore:default\n+struct Foo { foo1: u32, foo2: u32 }\n+impl Default for Foo {\n+    fn default() -> Self { loop {} }\n+}\n+\n+fn main() {\n+    let thing = 1;\n+    let foo = Foo { foo1: 0, foo2: 0 };\n+    let foo2 = Foo { thing, .$0 }\n+}\n+\"#,\n+        expect![[r#\"\n+            fd ..Default::default()\n+            fd foo1                 u32\n+            fd foo2                 u32\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+//- minicore:default\n+struct Foo { foo1: u32, foo2: u32 }\n+impl Default for Foo {\n+    fn default() -> Self { loop {} }\n+}\n \n fn main() {\n     let thing = 1;\n@@ -140,25 +155,9 @@ fn main() {\n }\n \"#,\n         expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n-            kw if\n-            kw if let\n-            kw for\n-            kw true\n-            kw false\n-            kw return\n-            kw self\n-            kw super\n-            kw crate\n-            lc foo       Foo\n-            lc thing     i32\n-            st Foo\n-            fn main()    fn()\n-            bt u32\n+            fd ..Default::default()\n+            fd foo1                 u32\n+            fd foo2                 u32\n         \"#]],\n     );\n }"}]}