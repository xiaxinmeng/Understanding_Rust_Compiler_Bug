{"sha": "2e216896e4778738b4ed01e427f711f3a0b2c44c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMjE2ODk2ZTQ3Nzg3MzhiNGVkMDFlNDI3ZjcxMWYzYTBiMmM0NGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-04T20:23:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-06T23:27:50Z"}, "message": "Add stricter orphan rules for cross-crate impls of default traits.", "tree": {"sha": "171983f2556f569ce8c9a5219bc6227d79432aef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/171983f2556f569ce8c9a5219bc6227d79432aef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e216896e4778738b4ed01e427f711f3a0b2c44c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e216896e4778738b4ed01e427f711f3a0b2c44c", "html_url": "https://github.com/rust-lang/rust/commit/2e216896e4778738b4ed01e427f711f3a0b2c44c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e216896e4778738b4ed01e427f711f3a0b2c44c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbec033e29417ab01bae5749b58f8866b300f005", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbec033e29417ab01bae5749b58f8866b300f005", "html_url": "https://github.com/rust-lang/rust/commit/dbec033e29417ab01bae5749b58f8866b300f005"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "fc49a555ad325d52602247ebdc6710b3c1ed178e", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2e216896e4778738b4ed01e427f711f3a0b2c44c/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e216896e4778738b4ed01e427f711f3a0b2c44c/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=2e216896e4778738b4ed01e427f711f3a0b2c44c", "patch": "@@ -69,7 +69,8 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n             ast::ItemImpl(_, _, _, Some(_), _, _) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: trait impl {}\", item.repr(self.tcx));\n-                let trait_def_id = ty::impl_trait_ref(self.tcx, def_id).unwrap().def_id;\n+                let trait_ref = ty::impl_trait_ref(self.tcx, def_id).unwrap();\n+                let trait_def_id = trait_ref.def_id;\n                 match traits::orphan_check(self.tcx, def_id) {\n                     Ok(()) => { }\n                     Err(traits::OrphanCheckErr::NoLocalInputType) => {\n@@ -92,6 +93,40 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                         }\n                     }\n                 }\n+\n+                // Impls of a defaulted trait face additional rules.\n+                debug!(\"trait_ref={} trait_def_id={} trait_has_default_impl={}\",\n+                       trait_ref.repr(self.tcx),\n+                       trait_def_id.repr(self.tcx),\n+                       ty::trait_has_default_impl(self.tcx, trait_def_id));\n+                if\n+                    ty::trait_has_default_impl(self.tcx, trait_def_id) &&\n+                    trait_def_id.krate != ast::LOCAL_CRATE\n+                {\n+                    let self_ty = trait_ref.self_ty();\n+                    match self_ty.sty {\n+                        ty::ty_struct(self_def_id, _) | ty::ty_enum(self_def_id, _) => {\n+                            // The orphan check often rules this out,\n+                            // but not always. For example, the orphan\n+                            // check would accept `impl Send for\n+                            // Box<SomethingLocal>`, but we want to\n+                            // forbid that.\n+                            if self_def_id.krate != ast::LOCAL_CRATE {\n+                                self.tcx.sess.span_err(\n+                                    item.span,\n+                                    \"cross-crate traits with a default impl \\\n+                                     can only be implemented for a struct/enum type \\\n+                                     defined in the current crate\");\n+                            }\n+                        }\n+                        _ => {\n+                            self.tcx.sess.span_err(\n+                                item.span,\n+                                \"cross-crate traits with a default impl \\\n+                                 can only be implemented for a struct or enum type\");\n+                        }\n+                    }\n+                }\n             }\n             ast::ItemDefaultImpl(..) => {\n                 // \"Trait\" impl"}, {"sha": "579b9b0192555e53417dcc25e4a171abfd436383", "filename": "src/test/auxiliary/typeck-default-trait-impl-cross-crate-coherence-lib.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e216896e4778738b4ed01e427f711f3a0b2c44c/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e216896e4778738b4ed01e427f711f3a0b2c44c/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeck-default-trait-impl-cross-crate-coherence-lib.rs?ref=2e216896e4778738b4ed01e427f711f3a0b2c44c", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+#![crate_type = \"rlib\"]\n+\n+use std::marker::MarkerTrait;\n+\n+pub trait DefaultedTrait : MarkerTrait { }\n+impl DefaultedTrait for .. { }"}, {"sha": "bcc01d1a0a72b1f699eb337167bed340b7087686", "filename": "src/test/compile-fail/typeck-default-trait-impl-cross-crate-coherence.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2e216896e4778738b4ed01e427f711f3a0b2c44c/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e216896e4778738b4ed01e427f711f3a0b2c44c/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs?ref=2e216896e4778738b4ed01e427f711f3a0b2c44c", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:typeck-default-trait-impl-cross-crate-coherence-lib.rs\n+\n+// Test that we do not consider associated types to be sendable without\n+// some applicable trait bound (and we don't ICE).\n+\n+#![feature(optin_builtin_traits)]\n+\n+extern crate \"typeck-default-trait-impl-cross-crate-coherence-lib\" as lib;\n+\n+use lib::DefaultedTrait;\n+\n+struct A;\n+impl DefaultedTrait for (A,) { }\n+//~^ ERROR can only be implemented for a struct or enum type\n+\n+struct B;\n+impl !DefaultedTrait for (B,) { }\n+//~^ ERROR can only be implemented for a struct or enum type\n+\n+struct C;\n+impl DefaultedTrait for Box<C> { }\n+//~^ ERROR can only be implemented for a struct or enum type\n+\n+fn main() { }"}]}