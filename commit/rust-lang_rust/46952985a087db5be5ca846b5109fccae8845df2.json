{"sha": "46952985a087db5be5ca846b5109fccae8845df2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OTUyOTg1YTA4N2RiNWJlNWNhODQ2YjUxMDlmY2NhZTg4NDVkZjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-31T13:11:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-31T13:11:49Z"}, "message": "Merge #2702\n\n2702: Drop support for legacy colorization r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bb62a5d32f3999cd1bc430cef64ce13320f8132b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb62a5d32f3999cd1bc430cef64ce13320f8132b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46952985a087db5be5ca846b5109fccae8845df2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeC0kVCRBK7hj4Ov3rIwAAdHIIADZz8AvEKZ/g31RvbinDWkxe\nQSUsg8Z1x2aEK/Tt00Wn1ygJsYx1n4m6E5HoCcDGtdJvdWLxGXklkHrn7S40svf0\niIgenqLC0FRr2IFfOCAFyqgW7d8ojOkd4wIZwczWhPgmpeeUO2imONjLPZSTNh1i\nIGVzOUUYVw8p3uDqieRv1tGtNr5PFh5uHgbIV05abaQKbp87WTbigSCeoAb4JNKy\nKSqxmFr/Sn7GsCSu7ZSztBVkMJphKOzGYpsMYMZra6ig9+QYdtvfcbMim7vTS/KW\nKsKhrd9cT+Bj3KIvOa5Kw3TxeKqgcdO3xiXfK7SM7k/+EQfQPuHUzvlG/udKNfI=\n=yoiZ\n-----END PGP SIGNATURE-----\n", "payload": "tree bb62a5d32f3999cd1bc430cef64ce13320f8132b\nparent 7c4d4e113bc039712aa3996e57eaef19d12bd9ff\nparent 26bd7a896b4bbc4a2432df47dceff939aac921fa\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577797909 +0000\ncommitter GitHub <noreply@github.com> 1577797909 +0000\n\nMerge #2702\n\n2702: Drop support for legacy colorization r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46952985a087db5be5ca846b5109fccae8845df2", "html_url": "https://github.com/rust-lang/rust/commit/46952985a087db5be5ca846b5109fccae8845df2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46952985a087db5be5ca846b5109fccae8845df2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c4d4e113bc039712aa3996e57eaef19d12bd9ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4d4e113bc039712aa3996e57eaef19d12bd9ff", "html_url": "https://github.com/rust-lang/rust/commit/7c4d4e113bc039712aa3996e57eaef19d12bd9ff"}, {"sha": "26bd7a896b4bbc4a2432df47dceff939aac921fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/26bd7a896b4bbc4a2432df47dceff939aac921fa", "html_url": "https://github.com/rust-lang/rust/commit/26bd7a896b4bbc4a2432df47dceff939aac921fa"}], "stats": {"total": 458, "additions": 187, "deletions": 271}, "files": [{"sha": "1d130544fdc17005ed2495d7d333665a9a69278b", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46952985a087db5be5ca846b5109fccae8845df2/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/46952985a087db5be5ca846b5109fccae8845df2/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=46952985a087db5be5ca846b5109fccae8845df2", "patch": "@@ -38,12 +38,12 @@\n <span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n     <span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string\">\"Hello, {}!\"</span>, <span class=\"literal.numeric\">92</span>);\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable.mut\">vec</span> = <span class=\"text\">Vec</span>::<span class=\"text\">new</span>();\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable.mut\">vec</span> = Vec::new();\n     <span class=\"keyword.control\">if</span> <span class=\"keyword\">true</span> {\n         <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"literal.numeric\">92</span>;\n-        <span class=\"variable.mut\">vec</span>.<span class=\"text\">push</span>(<span class=\"type\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"literal.numeric\">1</span> });\n+        <span class=\"variable.mut\">vec</span>.push(<span class=\"type\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"literal.numeric\">1</span> });\n     }\n-    <span class=\"keyword.unsafe\">unsafe</span> { <span class=\"variable.mut\">vec</span>.<span class=\"text\">set_len</span>(<span class=\"literal.numeric\">0</span>); }\n+    <span class=\"keyword.unsafe\">unsafe</span> { <span class=\"variable.mut\">vec</span>.set_len(<span class=\"literal.numeric\">0</span>); }\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable.mut\">x</span> = <span class=\"literal.numeric\">42</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable.mut\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable.mut\">x</span>;"}, {"sha": "d90ee85404f3efffd9b2ef96ffbb6599845dae2a", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46952985a087db5be5ca846b5109fccae8845df2/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/46952985a087db5be5ca846b5109fccae8845df2/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=46952985a087db5be5ca846b5109fccae8845df2", "patch": "@@ -25,11 +25,11 @@\n </style>\n <pre><code><span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n     <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"8723171760279909834\" style=\"color: hsl(307,91%,75%);\">hello</span> = <span class=\"string\">\"hello\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"14702933417323009544\" style=\"color: hsl(108,90%,49%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8723171760279909834\" style=\"color: hsl(307,91%,75%);\">hello</span>.<span class=\"text\">to_string</span>();\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"5443150872754369068\" style=\"color: hsl(215,43%,43%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8723171760279909834\" style=\"color: hsl(307,91%,75%);\">hello</span>.<span class=\"text\">to_string</span>();\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"14702933417323009544\" style=\"color: hsl(108,90%,49%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8723171760279909834\" style=\"color: hsl(307,91%,75%);\">hello</span>.to_string();\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"5443150872754369068\" style=\"color: hsl(215,43%,43%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8723171760279909834\" style=\"color: hsl(307,91%,75%);\">hello</span>.to_string();\n \n     <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"17358108296605513516\" style=\"color: hsl(331,46%,60%);\">x</span> = <span class=\"string\">\"other color please!\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"2073121142529774969\" style=\"color: hsl(320,43%,74%);\">y</span> = <span class=\"variable\" data-binding-hash=\"17358108296605513516\" style=\"color: hsl(331,46%,60%);\">x</span>.<span class=\"text\">to_string</span>();\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"2073121142529774969\" style=\"color: hsl(320,43%,74%);\">y</span> = <span class=\"variable\" data-binding-hash=\"17358108296605513516\" style=\"color: hsl(331,46%,60%);\">x</span>.to_string();\n }\n \n <span class=\"keyword\">fn</span> <span class=\"function\">bar</span>() {"}, {"sha": "56a36f58739cf5f2e9fb483d84a6bc4d1e96d73c", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/46952985a087db5be5ca846b5109fccae8845df2/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46952985a087db5be5ca846b5109fccae8845df2/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=46952985a087db5be5ca846b5109fccae8845df2", "patch": "@@ -20,13 +20,13 @@ pub mod tags {\n     pub(crate) const FIELD: &str = \"field\";\n     pub(crate) const FUNCTION: &str = \"function\";\n     pub(crate) const MODULE: &str = \"module\";\n-    pub(crate) const TYPE: &str = \"type\";\n     pub(crate) const CONSTANT: &str = \"constant\";\n     pub(crate) const MACRO: &str = \"macro\";\n+\n     pub(crate) const VARIABLE: &str = \"variable\";\n     pub(crate) const VARIABLE_MUT: &str = \"variable.mut\";\n-    pub(crate) const TEXT: &str = \"text\";\n \n+    pub(crate) const TYPE: &str = \"type\";\n     pub(crate) const TYPE_BUILTIN: &str = \"type.builtin\";\n     pub(crate) const TYPE_SELF: &str = \"type.self\";\n     pub(crate) const TYPE_PARAM: &str = \"type.param\";\n@@ -35,13 +35,14 @@ pub mod tags {\n     pub(crate) const LITERAL_BYTE: &str = \"literal.byte\";\n     pub(crate) const LITERAL_NUMERIC: &str = \"literal.numeric\";\n     pub(crate) const LITERAL_CHAR: &str = \"literal.char\";\n+\n     pub(crate) const LITERAL_COMMENT: &str = \"comment\";\n     pub(crate) const LITERAL_STRING: &str = \"string\";\n     pub(crate) const LITERAL_ATTRIBUTE: &str = \"attribute\";\n \n+    pub(crate) const KEYWORD: &str = \"keyword\";\n     pub(crate) const KEYWORD_UNSAFE: &str = \"keyword.unsafe\";\n     pub(crate) const KEYWORD_CONTROL: &str = \"keyword.control\";\n-    pub(crate) const KEYWORD: &str = \"keyword\";\n }\n \n #[derive(Debug)]\n@@ -109,15 +110,21 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 let name_ref = node.as_node().cloned().and_then(ast::NameRef::cast).unwrap();\n                 let name_kind =\n                     classify_name_ref(db, InFile::new(file_id.into(), &name_ref)).map(|d| d.kind);\n+                match name_kind {\n+                    Some(name_kind) => {\n+                        if let Local(local) = &name_kind {\n+                            if let Some(name) = local.name(db) {\n+                                let shadow_count =\n+                                    bindings_shadow_count.entry(name.clone()).or_default();\n+                                binding_hash =\n+                                    Some(calc_binding_hash(file_id, &name, *shadow_count))\n+                            }\n+                        };\n \n-                if let Some(Local(local)) = &name_kind {\n-                    if let Some(name) = local.name(db) {\n-                        let shadow_count = bindings_shadow_count.entry(name.clone()).or_default();\n-                        binding_hash = Some(calc_binding_hash(file_id, &name, *shadow_count))\n+                        highlight_name(db, name_kind)\n                     }\n-                };\n-\n-                name_kind.map_or(tags::TEXT, |it| highlight_name(db, it))\n+                    _ => continue,\n+                }\n             }\n             NAME => {\n                 let name = node.as_node().cloned().and_then(ast::Name::cast).unwrap();"}, {"sha": "1df7eba7a4a2768ebd48056aa2bbd5192895885f", "filename": "editors/code/src/color_theme.ts", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/46952985a087db5be5ca846b5109fccae8845df2/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46952985a087db5be5ca846b5109fccae8845df2/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcolor_theme.ts?ref=46952985a087db5be5ca846b5109fccae8845df2", "patch": "@@ -0,0 +1,123 @@\n+import * as fs from 'fs';\n+import * as jsonc from 'jsonc-parser';\n+import * as path from 'path';\n+import * as vscode from 'vscode';\n+\n+export interface TextMateRuleSettings {\n+    foreground?: string;\n+    background?: string;\n+    fontStyle?: string;\n+}\n+\n+export class ColorTheme {\n+    private rules: Map<string, TextMateRuleSettings> = new Map();\n+\n+    static load(): ColorTheme {\n+        // Find out current color theme\n+        const themeName = vscode.workspace\n+            .getConfiguration('workbench')\n+            .get('colorTheme');\n+\n+        if (typeof themeName !== 'string') {\n+            // console.warn('workbench.colorTheme is', themeName)\n+            return new ColorTheme();\n+        }\n+        return loadThemeNamed(themeName);\n+    }\n+\n+    static fromRules(rules: TextMateRule[]): ColorTheme {\n+        const res = new ColorTheme();\n+        for (const rule of rules) {\n+            const scopes = typeof rule.scope === 'string'\n+                ? [rule.scope]\n+                : rule.scope;\n+            for (const scope of scopes) {\n+                res.rules.set(scope, rule.settings)\n+            }\n+        }\n+        return res\n+    }\n+\n+    lookup(scopes: string[]): TextMateRuleSettings {\n+        let res: TextMateRuleSettings = {}\n+        for (const scope of scopes) {\n+            this.rules.forEach((value, key) => {\n+                if (scope.startsWith(key)) {\n+                    res = mergeRuleSettings(res, value)\n+                }\n+            })\n+        }\n+        return res\n+    }\n+\n+    mergeFrom(other: ColorTheme) {\n+        other.rules.forEach((value, key) => {\n+            const merged = mergeRuleSettings(this.rules.get(key), value)\n+            this.rules.set(key, merged)\n+        })\n+    }\n+}\n+\n+function loadThemeNamed(themeName: string): ColorTheme {\n+    function isTheme(extension: vscode.Extension<any>): boolean {\n+        return (\n+            extension.extensionKind === vscode.ExtensionKind.UI &&\n+            extension.packageJSON.contributes &&\n+            extension.packageJSON.contributes.themes\n+        );\n+    }\n+\n+    let themePaths = vscode.extensions.all\n+        .filter(isTheme)\n+        .flatMap(ext => {\n+            return ext.packageJSON.contributes.themes\n+                .filter((it: any) => (it.id || it.label) === themeName)\n+                .map((it: any) => path.join(ext.extensionPath, it.path));\n+        })\n+\n+    const res = new ColorTheme();\n+    for (const themePath of themePaths) {\n+        res.mergeFrom(loadThemeFile(themePath))\n+    }\n+\n+    const customizations: any = vscode.workspace.getConfiguration('editor').get('tokenColorCustomizations');\n+    res.mergeFrom(ColorTheme.fromRules(customizations?.textMateRules ?? []))\n+\n+    return res;\n+}\n+\n+function loadThemeFile(themePath: string): ColorTheme {\n+    let text;\n+    try {\n+        text = fs.readFileSync(themePath, 'utf8')\n+    } catch {\n+        return new ColorTheme();\n+    }\n+    const obj = jsonc.parse(text);\n+    const tokenColors = obj?.tokenColors ?? [];\n+    const res = ColorTheme.fromRules(tokenColors);\n+\n+    for (const include in obj?.include ?? []) {\n+        const includePath = path.join(path.dirname(themePath), include);\n+        const tmp = loadThemeFile(includePath);\n+        res.mergeFrom(tmp);\n+    }\n+\n+    return res;\n+}\n+\n+interface TextMateRule {\n+    scope: string | string[];\n+    settings: TextMateRuleSettings;\n+}\n+\n+function mergeRuleSettings(\n+    defaultSetting: TextMateRuleSettings | undefined,\n+    override: TextMateRuleSettings,\n+): TextMateRuleSettings {\n+    return {\n+        foreground: override.foreground ?? defaultSetting?.foreground,\n+        background: override.background ?? defaultSetting?.background,\n+        fontStyle: override.fontStyle ?? defaultSetting?.fontStyle,\n+    }\n+}"}, {"sha": "ccb0ee2b7ec8b0c8368e259532008bf1f79935c6", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46952985a087db5be5ca846b5109fccae8845df2/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46952985a087db5be5ca846b5109fccae8845df2/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=46952985a087db5be5ca846b5109fccae8845df2", "patch": "@@ -1,5 +1,4 @@\n import * as vscode from 'vscode';\n-import * as scopesMapper from './scopes_mapper';\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n@@ -58,9 +57,6 @@ export class Config {\n \n         if (config.has('highlightingOn')) {\n             this.highlightingOn = config.get('highlightingOn') as boolean;\n-            if (this.highlightingOn) {\n-                scopesMapper.load();\n-            }\n         }\n \n         if (config.has('rainbowHighlightingOn')) {"}, {"sha": "d383d87ef931182a6a3167d6b62040ce3af08a91", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 41, "deletions": 65, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/46952985a087db5be5ca846b5109fccae8845df2/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46952985a087db5be5ca846b5109fccae8845df2/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=46952985a087db5be5ca846b5109fccae8845df2", "patch": "@@ -3,8 +3,7 @@ import * as lc from 'vscode-languageclient';\n import * as seedrandom_ from 'seedrandom';\n const seedrandom = seedrandom_; // https://github.com/jvandemo/generator-angular2-library/issues/221#issuecomment-355945207\n \n-import { loadThemeColors, TextMateRuleSettings } from './scopes';\n-import * as scopesMapper from './scopes_mapper';\n+import { ColorTheme, TextMateRuleSettings } from './color_theme';\n \n import { Ctx } from './ctx';\n \n@@ -168,69 +167,16 @@ class Highlighter {\n     }\n }\n \n-function initDecorations(): Map<\n-    string,\n-    vscode.TextEditorDecorationType\n-> {\n-    const themeColors = loadThemeColors();\n-\n-    const decoration = (\n-        tag: string,\n-        textDecoration?: string,\n-    ): [string, vscode.TextEditorDecorationType] => {\n-        const rule = scopesMapper.toRule(tag, it => themeColors.get(it));\n-\n-        if (rule) {\n-            const decor = createDecorationFromTextmate(rule);\n-            return [tag, decor];\n-        } else {\n-            const fallBackTag = 'ralsp.' + tag;\n-            // console.log(' ');\n-            // console.log('Missing theme for: <\"' + tag + '\"> for following mapped scopes:');\n-            // console.log(scopesMapper.find(tag));\n-            // console.log('Falling back to values defined in: ' + fallBackTag);\n-            // console.log(' ');\n-            const color = new vscode.ThemeColor(fallBackTag);\n-            const decor = vscode.window.createTextEditorDecorationType({\n-                color,\n-                textDecoration,\n-            });\n-            return [tag, decor];\n-        }\n-    };\n-\n-    const decorations: Iterable<[\n-        string,\n-        vscode.TextEditorDecorationType,\n-    ]> = [\n-            decoration('comment'),\n-            decoration('string'),\n-            decoration('keyword'),\n-            decoration('keyword.control'),\n-            decoration('keyword.unsafe'),\n-            decoration('function'),\n-            decoration('parameter'),\n-            decoration('constant'),\n-            decoration('type.builtin'),\n-            decoration('type.generic'),\n-            decoration('type.lifetime'),\n-            decoration('type.param'),\n-            decoration('type.self'),\n-            decoration('type'),\n-            decoration('text'),\n-            decoration('attribute'),\n-            decoration('literal'),\n-            decoration('literal.numeric'),\n-            decoration('literal.char'),\n-            decoration('literal.byte'),\n-            decoration('macro'),\n-            decoration('variable'),\n-            decoration('variable.mut', 'underline'),\n-            decoration('field'),\n-            decoration('module'),\n-        ];\n-\n-    return new Map<string, vscode.TextEditorDecorationType>(decorations);\n+function initDecorations(): Map<string, vscode.TextEditorDecorationType> {\n+    const theme = ColorTheme.load();\n+    const res = new Map()\n+    TAG_TO_SCOPES.forEach((scopes, tag) => {\n+        if (!scopes) throw `unmapped tag: ${tag}`\n+        let rule = theme.lookup(scopes)\n+        const decor = createDecorationFromTextmate(rule);\n+        res.set(tag, decor)\n+    })\n+    return res;\n }\n \n function createDecorationFromTextmate(\n@@ -267,3 +213,33 @@ function createDecorationFromTextmate(\n     }\n     return vscode.window.createTextEditorDecorationType(decorationOptions);\n }\n+\n+// sync with tags from `syntax_highlighting.rs`.\n+const TAG_TO_SCOPES = new Map<string, string[]>([\n+    [\"field\", [\"entity.name.field\"]],\n+    [\"function\", [\"entity.name.function\"]],\n+    [\"module\", [\"entity.name.module\"]],\n+    [\"constant\", [\"entity.name.constant\"]],\n+    [\"macro\", [\"entity.name.macro\"]],\n+\n+    [\"variable\", [\"variable\"]],\n+    [\"variable.mut\", [\"variable\", \"meta.mutable\"]],\n+\n+    [\"type\", [\"entity.name.type\"]],\n+    [\"type.builtin\", [\"entity.name.type\", \"support.type.primitive\"]],\n+    [\"type.self\", [\"entity.name.type.parameter.self\"]],\n+    [\"type.param\", [\"entity.name.type.parameter\"]],\n+    [\"type.lifetime\", [\"entity.name.type.lifetime\"]],\n+\n+    [\"literal.byte\", [\"constant.character.byte\"]],\n+    [\"literal.char\", [\"constant.character\"]],\n+    [\"literal.numeric\", [\"constant.numeric\"]],\n+\n+    [\"comment\", [\"comment\"]],\n+    [\"string\", [\"string.quoted\"]],\n+    [\"attribute\", [\"meta.attribute\"]],\n+\n+    [\"keyword\", [\"keyword\"]],\n+    [\"keyword.unsafe\", [\"keyword.other.unsafe\"]],\n+    [\"keyword.control\", [\"keyword.control\"]],\n+]);"}, {"sha": "73fabbf549adb2fa154a27d86d7eafaff70421f9", "filename": "editors/code/src/scopes.ts", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/7c4d4e113bc039712aa3996e57eaef19d12bd9ff/editors%2Fcode%2Fsrc%2Fscopes.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c4d4e113bc039712aa3996e57eaef19d12bd9ff/editors%2Fcode%2Fsrc%2Fscopes.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes.ts?ref=7c4d4e113bc039712aa3996e57eaef19d12bd9ff", "patch": "@@ -1,108 +0,0 @@\n-import * as fs from 'fs';\n-import * as jsonc from 'jsonc-parser';\n-import * as path from 'path';\n-import * as vscode from 'vscode';\n-\n-export interface TextMateRuleSettings {\n-    foreground?: string;\n-    background?: string;\n-    fontStyle?: string;\n-}\n-\n-// Load all textmate scopes in the currently active theme\n-export function loadThemeColors(): Map<string, TextMateRuleSettings> {\n-    // Find out current color theme\n-    const themeName = vscode.workspace\n-        .getConfiguration('workbench')\n-        .get('colorTheme');\n-\n-    if (typeof themeName !== 'string') {\n-        // console.warn('workbench.colorTheme is', themeName)\n-        return new Map();\n-    }\n-    return loadThemeNamed(themeName);\n-}\n-\n-function loadThemeNamed(themeName: string): Map<string, TextMateRuleSettings> {\n-    function isTheme(extension: vscode.Extension<any>): boolean {\n-        return (\n-            extension.extensionKind === vscode.ExtensionKind.UI &&\n-            extension.packageJSON.contributes &&\n-            extension.packageJSON.contributes.themes\n-        );\n-    }\n-\n-    let themePaths = vscode.extensions.all\n-        .filter(isTheme)\n-        .flatMap(ext => {\n-            return ext.packageJSON.contributes.themes\n-                .filter((it: any) => (it.id || it.label) === themeName)\n-                .map((it: any) => path.join(ext.extensionPath, it.path));\n-        })\n-\n-    const res = new Map();\n-    for (const themePath of themePaths) {\n-        mergeInto(res, loadThemeFile(themePath))\n-    }\n-\n-    const customizations: any = vscode.workspace.getConfiguration('editor').get('tokenColorCustomizations');\n-    mergeInto(res, loadColors(customizations?.textMateRules ?? []))\n-\n-    return res;\n-}\n-\n-function loadThemeFile(themePath: string): Map<string, TextMateRuleSettings> {\n-    let text;\n-    try {\n-        text = fs.readFileSync(themePath, 'utf8')\n-    } catch {\n-        return new Map();\n-    }\n-    const obj = jsonc.parse(text);\n-    const tokenColors = obj?.tokenColors ?? [];\n-    const res = loadColors(tokenColors);\n-\n-    for (const include in obj?.include ?? []) {\n-        const includePath = path.join(path.dirname(themePath), include);\n-        const tmp = loadThemeFile(includePath);\n-        mergeInto(res, tmp);\n-    }\n-\n-    return res;\n-}\n-\n-interface TextMateRule {\n-    scope: string | string[];\n-    settings: TextMateRuleSettings;\n-}\n-\n-function loadColors(textMateRules: TextMateRule[]): Map<string, TextMateRuleSettings> {\n-    const res = new Map();\n-    for (const rule of textMateRules) {\n-        const scopes = typeof rule.scope === 'string'\n-            ? [rule.scope]\n-            : rule.scope;\n-        for (const scope of scopes) {\n-            res.set(scope, rule.settings)\n-        }\n-    }\n-    return res\n-}\n-\n-function mergeRuleSettings(\n-    defaultSetting: TextMateRuleSettings | undefined,\n-    override: TextMateRuleSettings,\n-): TextMateRuleSettings {\n-    return {\n-        foreground: defaultSetting?.foreground ?? override.foreground,\n-        background: defaultSetting?.background ?? override.background,\n-        fontStyle: defaultSetting?.fontStyle ?? override.fontStyle,\n-    }\n-}\n-\n-function mergeInto(dst: Map<string, TextMateRuleSettings>, addition: Map<string, TextMateRuleSettings>) {\n-    addition.forEach((value, key) => {\n-        const merged = mergeRuleSettings(dst.get(key), value)\n-        dst.set(key, merged)\n-    })\n-}"}, {"sha": "e738fa2396d6c9f7fe22a3dbaca3147fcc1d9e0d", "filename": "editors/code/src/scopes_mapper.ts", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7c4d4e113bc039712aa3996e57eaef19d12bd9ff/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c4d4e113bc039712aa3996e57eaef19d12bd9ff/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts?ref=7c4d4e113bc039712aa3996e57eaef19d12bd9ff", "patch": "@@ -1,78 +0,0 @@\n-import * as vscode from 'vscode';\n-import { TextMateRuleSettings } from './scopes';\n-\n-let mappings = new Map<string, string[]>();\n-\n-const defaultMapping = new Map<string, string[]>([\n-    [\n-        'comment',\n-        [\n-            'comment',\n-            'comment.block',\n-            'comment.line',\n-            'comment.block.documentation',\n-        ],\n-    ],\n-    ['string', ['string']],\n-    ['keyword', ['keyword']],\n-    ['keyword.control', ['keyword.control', 'keyword', 'keyword.other']],\n-    [\n-        'keyword.unsafe',\n-        ['storage.modifier', 'keyword.other', 'keyword.control', 'keyword'],\n-    ],\n-    ['function', ['entity.name.function']],\n-    ['parameter', ['variable.parameter']],\n-    ['constant', ['constant', 'variable']],\n-    ['type', ['entity.name.type']],\n-    ['builtin', ['variable.language', 'support.type', 'support.type']],\n-    ['text', ['string', 'string.quoted', 'string.regexp']],\n-    ['attribute', ['keyword']],\n-    ['literal', ['string', 'string.quoted', 'string.regexp']],\n-    ['macro', ['entity.name.function', 'keyword.other', 'entity.name.macro']],\n-    ['variable', ['variable']],\n-    ['variable.mut', ['variable', 'storage.modifier']],\n-    [\n-        'field',\n-        [\n-            'variable.object.property',\n-            'meta.field.declaration',\n-            'meta.definition.property',\n-            'variable.other',\n-        ],\n-    ],\n-    ['module', ['entity.name.section', 'entity.other']],\n-]);\n-\n-export function find(scope: string): string[] {\n-    return mappings.get(scope) || [];\n-}\n-\n-export function toRule(\n-    scope: string,\n-    intoRule: (scope: string) => TextMateRuleSettings | undefined,\n-): TextMateRuleSettings | undefined {\n-    return find(scope)\n-        .map(intoRule)\n-        .filter(rule => rule !== undefined)[0];\n-}\n-\n-function isString(value: any): value is string {\n-    return typeof value === 'string';\n-}\n-\n-function isArrayOfString(value: any): value is string[] {\n-    return Array.isArray(value) && value.every(item => isString(item));\n-}\n-\n-export function load() {\n-    const rawConfig: { [key: string]: any } =\n-        vscode.workspace\n-            .getConfiguration('rust-analyzer')\n-            .get('scopeMappings') || {};\n-\n-    mappings = Object.entries(rawConfig)\n-        .filter(([_, value]) => isString(value) || isArrayOfString(value))\n-        .reduce((list, [key, value]: [string, string | string[]]) => {\n-            return list.set(key, isString(value) ? [value] : value);\n-        }, defaultMapping);\n-}"}]}