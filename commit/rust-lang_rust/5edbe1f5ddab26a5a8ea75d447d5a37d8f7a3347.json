{"sha": "5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZGJlMWY1ZGRhYjI2YTVhOGVhNzVkNDQ3ZDVhMzdkOGY3YTMzNDc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-14T14:08:22Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-16T11:49:39Z"}, "message": "Add `Type::int_width` for retrieving integer's bit width.", "tree": {"sha": "73a61a3d0d87a66fd686bf286eeff31d1922fb35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a61a3d0d87a66fd686bf286eeff31d1922fb35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "html_url": "https://github.com/rust-lang/rust/commit/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d59a476e56b855fb27405016f0592ca7913b624", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d59a476e56b855fb27405016f0592ca7913b624", "html_url": "https://github.com/rust-lang/rust/commit/3d59a476e56b855fb27405016f0592ca7913b624"}], "stats": {"total": 118, "additions": 41, "deletions": 77}, "files": [{"sha": "cee6018d9c0743df651420302ecb5d13be233fd5", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "patch": "@@ -847,26 +847,24 @@ pub fn cast_shift_rhs<F, G>(op: ast::BinOp,\n     G: FnOnce(ValueRef, Type) -> ValueRef,\n {\n     // Shifts may have any size int on the rhs\n-    unsafe {\n-        if ast_util::is_shift_binop(op) {\n-            let mut rhs_llty = val_ty(rhs);\n-            let mut lhs_llty = val_ty(lhs);\n-            if rhs_llty.kind() == Vector { rhs_llty = rhs_llty.element_type() }\n-            if lhs_llty.kind() == Vector { lhs_llty = lhs_llty.element_type() }\n-            let rhs_sz = llvm::LLVMGetIntTypeWidth(rhs_llty.to_ref());\n-            let lhs_sz = llvm::LLVMGetIntTypeWidth(lhs_llty.to_ref());\n-            if lhs_sz < rhs_sz {\n-                trunc(rhs, lhs_llty)\n-            } else if lhs_sz > rhs_sz {\n-                // FIXME (#1877: If shifting by negative\n-                // values becomes not undefined then this is wrong.\n-                zext(rhs, lhs_llty)\n-            } else {\n-                rhs\n-            }\n+    if ast_util::is_shift_binop(op) {\n+        let mut rhs_llty = val_ty(rhs);\n+        let mut lhs_llty = val_ty(lhs);\n+        if rhs_llty.kind() == Vector { rhs_llty = rhs_llty.element_type() }\n+        if lhs_llty.kind() == Vector { lhs_llty = lhs_llty.element_type() }\n+        let rhs_sz = rhs_llty.int_width();\n+        let lhs_sz = lhs_llty.int_width();\n+        if lhs_sz < rhs_sz {\n+            trunc(rhs, lhs_llty)\n+        } else if lhs_sz > rhs_sz {\n+            // FIXME (#1877: If shifting by negative\n+            // values becomes not undefined then this is wrong.\n+            zext(rhs, lhs_llty)\n         } else {\n             rhs\n         }\n+    } else {\n+        rhs\n     }\n }\n "}, {"sha": "3485e29707aa26d9d87526117ceb1ec51ee9843b", "filename": "src/librustc_trans/trans/cabi_aarch64.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs?ref=5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(non_upper_case_globals)]\n \n-use llvm;\n use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n use llvm::{StructRetAttribute, ZExtAttribute};\n use trans::cabi::{FnType, ArgType};\n@@ -30,11 +29,7 @@ fn align(off: uint, ty: Type) -> uint {\n \n fn ty_align(ty: Type) -> uint {\n     match ty.kind() {\n-        Integer => {\n-            unsafe {\n-                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n-            }\n-        }\n+        Integer => ((ty.int_width() as uint) + 7) / 8,\n         Pointer => 8,\n         Float => 4,\n         Double => 8,\n@@ -61,11 +56,7 @@ fn ty_align(ty: Type) -> uint {\n \n fn ty_size(ty: Type) -> uint {\n     match ty.kind() {\n-        Integer => {\n-            unsafe {\n-                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n-            }\n-        }\n+        Integer => ((ty.int_width() as uint) + 7) / 8,\n         Pointer => 8,\n         Float => 4,\n         Double => 8,"}, {"sha": "13c70875f689ae38aa1adcb32654feefb7b4d9c1", "filename": "src/librustc_trans/trans/cabi_arm.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs?ref=5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(non_upper_case_globals)]\n \n-use llvm;\n use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n use llvm::{StructRetAttribute, ZExtAttribute};\n use trans::cabi::{FnType, ArgType};\n@@ -37,11 +36,7 @@ fn align(off: uint, ty: Type, align_fn: TyAlignFn) -> uint {\n \n fn general_ty_align(ty: Type) -> uint {\n     match ty.kind() {\n-        Integer => {\n-            unsafe {\n-                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n-            }\n-        }\n+        Integer => ((ty.int_width() as uint) + 7) / 8,\n         Pointer => 4,\n         Float => 4,\n         Double => 8,\n@@ -75,11 +70,7 @@ fn general_ty_align(ty: Type) -> uint {\n //    /iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html\n fn ios_ty_align(ty: Type) -> uint {\n     match ty.kind() {\n-        Integer => {\n-            unsafe {\n-                cmp::min(4, ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8)\n-            }\n-        }\n+        Integer => cmp::min(4, ((ty.int_width() as uint) + 7) / 8),\n         Pointer => 4,\n         Float => 4,\n         Double => 4,\n@@ -106,11 +97,7 @@ fn ios_ty_align(ty: Type) -> uint {\n \n fn ty_size(ty: Type, align_fn: TyAlignFn) -> uint {\n     match ty.kind() {\n-        Integer => {\n-            unsafe {\n-                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n-            }\n-        }\n+        Integer => ((ty.int_width() as uint) + 7) / 8,\n         Pointer => 4,\n         Float => 4,\n         Double => 8,"}, {"sha": "70b29b5fb758ee29e16fcd5847b427d30e13bbe8", "filename": "src/librustc_trans/trans/cabi_mips.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs?ref=5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "patch": "@@ -30,11 +30,7 @@ fn align(off: uint, ty: Type) -> uint {\n \n fn ty_align(ty: Type) -> uint {\n     match ty.kind() {\n-        Integer => {\n-            unsafe {\n-                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n-            }\n-        }\n+        Integer => ((ty.int_width() as uint) + 7) / 8,\n         Pointer => 4,\n         Float => 4,\n         Double => 8,\n@@ -61,11 +57,7 @@ fn ty_align(ty: Type) -> uint {\n \n fn ty_size(ty: Type) -> uint {\n     match ty.kind() {\n-        Integer => {\n-            unsafe {\n-                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n-            }\n-        }\n+        Integer => ((ty.int_width() as uint) + 7) / 8,\n         Pointer => 4,\n         Float => 4,\n         Double => 8,"}, {"sha": "d8bd57785d21317e7b9b7d56e062350bc3685713", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "patch": "@@ -14,7 +14,6 @@\n #![allow(non_upper_case_globals)]\n use self::RegClass::*;\n \n-use llvm;\n use llvm::{Integer, Pointer, Float, Double};\n use llvm::{Struct, Array, Attribute, Vector};\n use llvm::{StructRetAttribute, ByValAttribute, ZExtAttribute};\n@@ -94,11 +93,7 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n \n     fn ty_align(ty: Type) -> uint {\n         match ty.kind() {\n-            Integer => {\n-                unsafe {\n-                    ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n-                }\n-            }\n+            Integer => ((ty.int_width() as uint) + 7) / 8,\n             Pointer => 8,\n             Float => 4,\n             Double => 8,\n@@ -125,11 +120,7 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n \n     fn ty_size(ty: Type) -> uint {\n         match ty.kind() {\n-            Integer => {\n-                unsafe {\n-                    ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n-                }\n-            }\n+            Integer => (ty.int_width() as uint + 7) / 8,\n             Pointer => 8,\n             Float => 4,\n             Double => 8,"}, {"sha": "433d989f22c963f295d4cde927c21a360e2f8607", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "patch": "@@ -1906,18 +1906,16 @@ fn int_cast(bcx: Block,\n             signed: bool)\n             -> ValueRef {\n     let _icx = push_ctxt(\"int_cast\");\n-    unsafe {\n-        let srcsz = llvm::LLVMGetIntTypeWidth(llsrctype.to_ref());\n-        let dstsz = llvm::LLVMGetIntTypeWidth(lldsttype.to_ref());\n-        return if dstsz == srcsz {\n-            BitCast(bcx, llsrc, lldsttype)\n-        } else if srcsz > dstsz {\n-            TruncOrBitCast(bcx, llsrc, lldsttype)\n-        } else if signed {\n-            SExtOrBitCast(bcx, llsrc, lldsttype)\n-        } else {\n-            ZExtOrBitCast(bcx, llsrc, lldsttype)\n-        };\n+    let srcsz = llsrctype.int_width();\n+    let dstsz = lldsttype.int_width();\n+    return if dstsz == srcsz {\n+        BitCast(bcx, llsrc, lldsttype)\n+    } else if srcsz > dstsz {\n+        TruncOrBitCast(bcx, llsrc, lldsttype)\n+    } else if signed {\n+        SExtOrBitCast(bcx, llsrc, lldsttype)\n+    } else {\n+        ZExtOrBitCast(bcx, llsrc, lldsttype)\n     }\n }\n "}, {"sha": "0124ab72f6b08ed4ba30ac96f4765b61712ab049", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "patch": "@@ -333,6 +333,13 @@ impl Type {\n             _ => panic!(\"llvm_float_width called on a non-float type\")\n         }\n     }\n+\n+    /// Retrieve the bit width of the integer type `self`.\n+    pub fn int_width(&self) -> u64 {\n+        unsafe {\n+            llvm::LLVMGetIntTypeWidth(self.to_ref()) as u64\n+        }\n+    }\n }\n \n "}]}