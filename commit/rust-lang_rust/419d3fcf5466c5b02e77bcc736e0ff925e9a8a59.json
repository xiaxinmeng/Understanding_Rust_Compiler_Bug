{"sha": "419d3fcf5466c5b02e77bcc736e0ff925e9a8a59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOWQzZmNmNTQ2NmM1YjAyZTc3YmNjNzM2ZTBmZjkyNWU5YThhNTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-25T15:25:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-25T15:25:45Z"}, "message": "move ABI check out to cover all calls", "tree": {"sha": "a6f97a1e5226f8d36eb0db3fb852ca294ca8972c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6f97a1e5226f8d36eb0db3fb852ca294ca8972c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/419d3fcf5466c5b02e77bcc736e0ff925e9a8a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/419d3fcf5466c5b02e77bcc736e0ff925e9a8a59", "html_url": "https://github.com/rust-lang/rust/commit/419d3fcf5466c5b02e77bcc736e0ff925e9a8a59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/419d3fcf5466c5b02e77bcc736e0ff925e9a8a59/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be", "html_url": "https://github.com/rust-lang/rust/commit/5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "d6699752d7c413f6c72d0622ed2bb08eb166d762", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/419d3fcf5466c5b02e77bcc736e0ff925e9a8a59/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d3fcf5466c5b02e77bcc736e0ff925e9a8a59/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=419d3fcf5466c5b02e77bcc736e0ff925e9a8a59", "patch": "@@ -251,6 +251,30 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         };\n \n+        // ABI check\n+        {\n+            let callee_abi = {\n+                let instance_ty = instance.ty(*self.tcx);\n+                match instance_ty.kind {\n+                    ty::FnDef(..) =>\n+                        instance_ty.fn_sig(*self.tcx).abi(),\n+                    ty::Closure(..) => Abi::RustCall,\n+                    ty::Generator(..) => Abi::Rust,\n+                    _ => bug!(\"unexpected callee ty: {:?}\", instance_ty),\n+                }\n+            };\n+            let normalize_abi = |abi| match abi {\n+                Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic =>\n+                    // These are all the same ABI, really.\n+                    Abi::Rust,\n+                abi =>\n+                    abi,\n+            };\n+            if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n+                throw_unsup!(FunctionAbiMismatch(caller_abi, callee_abi))\n+            }\n+        }\n+\n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n                 assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n@@ -263,30 +287,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::InstanceDef::DropGlue(..) |\n             ty::InstanceDef::CloneShim(..) |\n             ty::InstanceDef::Item(_) => {\n-                // ABI check\n-                {\n-                    let callee_abi = {\n-                        let instance_ty = instance.ty(*self.tcx);\n-                        match instance_ty.kind {\n-                            ty::FnDef(..) =>\n-                                instance_ty.fn_sig(*self.tcx).abi(),\n-                            ty::Closure(..) => Abi::RustCall,\n-                            ty::Generator(..) => Abi::Rust,\n-                            _ => bug!(\"unexpected callee ty: {:?}\", instance_ty),\n-                        }\n-                    };\n-                    let normalize_abi = |abi| match abi {\n-                        Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic =>\n-                            // These are all the same ABI, really.\n-                            Abi::Rust,\n-                        abi =>\n-                            abi,\n-                    };\n-                    if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n-                        throw_unsup!(FunctionAbiMismatch(caller_abi, callee_abi))\n-                    }\n-                }\n-\n                 // We need MIR for this fn\n                 let body = match M::find_fn(self, instance, args, dest, ret, unwind)? {\n                     Some(body) => body,"}]}