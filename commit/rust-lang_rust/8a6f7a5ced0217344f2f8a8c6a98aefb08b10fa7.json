{"sha": "8a6f7a5ced0217344f2f8a8c6a98aefb08b10fa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNmY3YTVjZWQwMjE3MzQ0ZjJmOGE4YzZhOThhZWZiMDhiMTBmYTc=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-23T23:12:24Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-25T06:27:25Z"}, "message": "Implement `From<ast::IntTy>` for `PrimitiveType`.", "tree": {"sha": "09fcc58c3d2b2ec2817090c9e41acff7db1d0839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09fcc58c3d2b2ec2817090c9e41acff7db1d0839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a6f7a5ced0217344f2f8a8c6a98aefb08b10fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6f7a5ced0217344f2f8a8c6a98aefb08b10fa7", "html_url": "https://github.com/rust-lang/rust/commit/8a6f7a5ced0217344f2f8a8c6a98aefb08b10fa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a6f7a5ced0217344f2f8a8c6a98aefb08b10fa7/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c849f4a50a6e6d42776847144e06d1405cb4189", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c849f4a50a6e6d42776847144e06d1405cb4189", "html_url": "https://github.com/rust-lang/rust/commit/5c849f4a50a6e6d42776847144e06d1405cb4189"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "3abc7e985366ac5eeb413a0d9213eda771730eb8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8a6f7a5ced0217344f2f8a8c6a98aefb08b10fa7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a6f7a5ced0217344f2f8a8c6a98aefb08b10fa7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8a6f7a5ced0217344f2f8a8c6a98aefb08b10fa7", "patch": "@@ -1619,6 +1619,17 @@ impl PrimitiveType {\n     }\n }\n \n+impl From<ast::IntTy> for PrimitiveType {\n+    fn from(int_ty: ast::IntTy) -> PrimitiveType {\n+        match int_ty {\n+            ast::IntTy::Is => PrimitiveType::Isize,\n+            ast::IntTy::I8 => PrimitiveType::I8,\n+            ast::IntTy::I16 => PrimitiveType::I16,\n+            ast::IntTy::I32 => PrimitiveType::I32,\n+            ast::IntTy::I64 => PrimitiveType::I64,\n+        }\n+    }\n+}\n \n // Poor man's type parameter substitution at HIR level.\n // Used to replace private type aliases in public signatures with their aliased types.\n@@ -1772,11 +1783,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             ty::TyNever => Never,\n             ty::TyBool => Primitive(PrimitiveType::Bool),\n             ty::TyChar => Primitive(PrimitiveType::Char),\n-            ty::TyInt(ast::IntTy::Is) => Primitive(PrimitiveType::Isize),\n-            ty::TyInt(ast::IntTy::I8) => Primitive(PrimitiveType::I8),\n-            ty::TyInt(ast::IntTy::I16) => Primitive(PrimitiveType::I16),\n-            ty::TyInt(ast::IntTy::I32) => Primitive(PrimitiveType::I32),\n-            ty::TyInt(ast::IntTy::I64) => Primitive(PrimitiveType::I64),\n+            ty::TyInt(int_ty) => Primitive(int_ty.into()),\n             ty::TyUint(ast::UintTy::Us) => Primitive(PrimitiveType::Usize),\n             ty::TyUint(ast::UintTy::U8) => Primitive(PrimitiveType::U8),\n             ty::TyUint(ast::UintTy::U16) => Primitive(PrimitiveType::U16),\n@@ -2741,11 +2748,7 @@ fn resolve_type(cx: &DocContext,\n             hir::TyStr => return Primitive(PrimitiveType::Str),\n             hir::TyBool => return Primitive(PrimitiveType::Bool),\n             hir::TyChar => return Primitive(PrimitiveType::Char),\n-            hir::TyInt(ast::IntTy::Is) => return Primitive(PrimitiveType::Isize),\n-            hir::TyInt(ast::IntTy::I8) => return Primitive(PrimitiveType::I8),\n-            hir::TyInt(ast::IntTy::I16) => return Primitive(PrimitiveType::I16),\n-            hir::TyInt(ast::IntTy::I32) => return Primitive(PrimitiveType::I32),\n-            hir::TyInt(ast::IntTy::I64) => return Primitive(PrimitiveType::I64),\n+            hir::TyInt(int_ty) => return Primitive(int_ty.into()),\n             hir::TyUint(ast::UintTy::Us) => return Primitive(PrimitiveType::Usize),\n             hir::TyUint(ast::UintTy::U8) => return Primitive(PrimitiveType::U8),\n             hir::TyUint(ast::UintTy::U16) => return Primitive(PrimitiveType::U16),"}]}