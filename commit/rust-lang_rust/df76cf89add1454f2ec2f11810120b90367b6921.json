{"sha": "df76cf89add1454f2ec2f11810120b90367b6921", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNzZjZjg5YWRkMTQ1NGYyZWMyZjExODEwMTIwYjkwMzY3YjY5MjE=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-08-09T10:25:20Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-01T11:20:39Z"}, "message": "BTreeMap: admit the existence of leaf edges in comments", "tree": {"sha": "c68f670d82417cea38c0570feac7382e4d2c9f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c68f670d82417cea38c0570feac7382e4d2c9f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df76cf89add1454f2ec2f11810120b90367b6921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df76cf89add1454f2ec2f11810120b90367b6921", "html_url": "https://github.com/rust-lang/rust/commit/df76cf89add1454f2ec2f11810120b90367b6921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df76cf89add1454f2ec2f11810120b90367b6921/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc42fb8e70af6ad63998f4bfbf62451551eda073", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc42fb8e70af6ad63998f4bfbf62451551eda073", "html_url": "https://github.com/rust-lang/rust/commit/fc42fb8e70af6ad63998f4bfbf62451551eda073"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "b39a1b6fd6a79469decc790303f024ebaa385265", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/df76cf89add1454f2ec2f11810120b90367b6921/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df76cf89add1454f2ec2f11810120b90367b6921/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=df76cf89add1454f2ec2f11810120b90367b6921", "patch": "@@ -9,11 +9,8 @@\n // struct Node<K, V, height: usize> {\n //     keys: [K; 2 * B - 1],\n //     vals: [V; 2 * B - 1],\n-//     edges: if height > 0 {\n-//         [Box<Node<K, V, height - 1>>; 2 * B]\n-//     } else { () },\n-//     parent: Option<NonNull<Node<K, V, height + 1>>>,\n-//     parent_idx: u16,\n+//     edges: [if height > 0 { Box<Node<K, V, height - 1>> } else { () }; 2 * B],\n+//     parent: Option<(NonNull<Node<K, V, height + 1>>, u16)>,\n //     len: u16,\n // }\n // ```\n@@ -28,8 +25,8 @@\n //\n // - Trees must have uniform depth/height. This means that every path down to a leaf from a\n //   given node has exactly the same length.\n-// - A node of length `n` has `n` keys, `n` values, and (in an internal node) `n + 1` edges.\n-//   This implies that even an empty internal node has at least one edge.\n+// - A node of length `n` has `n` keys, `n` values, and `n + 1` edges.\n+//   This implies that even an empty node has at least one edge.\n \n use core::cmp::Ordering;\n use core::marker::PhantomData;\n@@ -298,9 +295,8 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n }\n \n impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n-    /// Finds the length of the node. This is the number of keys or values. In an\n-    /// internal node, the number of edges is `len() + 1`.\n-    /// For any node, the number of possible edge handles is also `len() + 1`.\n+    /// Finds the length of the node. This is the number of keys or values.\n+    /// The number of edges is `len() + 1`.\n     /// Note that, despite being safe, calling this function can have the side effect\n     /// of invalidating mutable references that unsafe code has created.\n     pub fn len(&self) -> usize {\n@@ -321,9 +317,6 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     }\n \n     /// Exposes the leaf portion of any leaf or internal node.\n-    /// If the node is a leaf, this function simply opens up its data.\n-    /// If the node is an internal node, so not a leaf, it does have all the data a leaf has\n-    /// (header, keys and values), and this function exposes that.\n     ///\n     /// Returns a raw ptr to avoid invalidating other references to this node,\n     /// which is possible when BorrowType is marker::ValMut.\n@@ -471,9 +464,6 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     }\n \n     /// Exposes the leaf portion of any leaf or internal node for writing.\n-    /// If the node is a leaf, this function simply opens up its data.\n-    /// If the node is an internal node, so not a leaf, it does have all the data a leaf has\n-    /// (header, keys and values), and this function exposes that.\n     ///\n     /// We don't need to return a raw ptr because we have unique access to the entire node.\n     fn as_leaf_mut(&mut self) -> &'a mut LeafNode<K, V> {\n@@ -679,9 +669,9 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n-    /// Removes a key/value pair from the end of this node and returns the pair.\n-    /// If this is an internal node, also removes the edge that was to the right\n-    /// of that pair and returns the orphaned node that this edge owned.\n+    /// Removes a key/value pair from the end of the node and returns the pair.\n+    /// Also removes the edge that was to the right of that pair and, if the node\n+    /// is internal, returns the orphaned subtree that this edge owned.\n     fn pop(&mut self) -> (K, V, Option<Root<K, V>>) {\n         debug_assert!(self.len() > 0);\n \n@@ -705,9 +695,9 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n         }\n     }\n \n-    /// Removes a key/value pair from the beginning of this node and returns the pair.\n-    /// If this is an internal node, also removes the edge that was to the left\n-    /// of that pair and returns the orphaned node that this edge owned.\n+    /// Removes a key/value pair from the beginning of the node and returns the pair.\n+    /// Also removes the edge that was to the left of that pair and, if the node is\n+    /// internal, returns the orphaned subtree that this edge owned.\n     fn pop_front(&mut self) -> (K, V, Option<Root<K, V>>) {\n         debug_assert!(self.len() > 0);\n "}]}