{"sha": "c23748c59ce0969bf9251f6d4bb1882ca0045a78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMzc0OGM1OWNlMDk2OWJmOTI1MWY2ZDRiYjE4ODJjYTAwNDVhNzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-10T21:39:10Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-11T20:23:04Z"}, "message": "librustc: Forbid identifiers that shadow in the same pattern in let\nbindings and function arguments.\n\nIssue #14581.\n\nTo fix code that this breaks, give the pattern identifiers different names.\n\n[breaking-change]", "tree": {"sha": "1f81fa102cadaa0e97784d8d3590603da356fd42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f81fa102cadaa0e97784d8d3590603da356fd42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c23748c59ce0969bf9251f6d4bb1882ca0045a78", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c23748c59ce0969bf9251f6d4bb1882ca0045a78", "html_url": "https://github.com/rust-lang/rust/commit/c23748c59ce0969bf9251f6d4bb1882ca0045a78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c23748c59ce0969bf9251f6d4bb1882ca0045a78/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0f9095f1daa3814c9589f38b574e51d394d1bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f9095f1daa3814c9589f38b574e51d394d1bbc", "html_url": "https://github.com/rust-lang/rust/commit/f0f9095f1daa3814c9589f38b574e51d394d1bbc"}], "stats": {"total": 88, "additions": 46, "deletions": 42}, "files": [{"sha": "85de170ed99e941e700d87dca777b29e9352eebf", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c23748c59ce0969bf9251f6d4bb1882ca0045a78/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23748c59ce0969bf9251f6d4bb1882ca0045a78/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=c23748c59ce0969bf9251f6d4bb1882ca0045a78", "patch": "@@ -3812,9 +3812,10 @@ impl<'a> Resolver<'a> {\n                 }\n                 Some(declaration) => {\n                     for argument in declaration.inputs.iter() {\n+                        let mut bindings_list = HashMap::new();\n                         this.resolve_pattern(&*argument.pat,\n                                              ArgumentIrrefutableMode,\n-                                             None);\n+                                             &mut bindings_list);\n \n                         this.resolve_type(&*argument.ty);\n \n@@ -4045,7 +4046,10 @@ impl<'a> Resolver<'a> {\n         }\n \n         // Resolve the pattern.\n-        self.resolve_pattern(&*local.pat, LocalIrrefutableMode, None);\n+        let mut bindings_list = HashMap::new();\n+        self.resolve_pattern(&*local.pat,\n+                             LocalIrrefutableMode,\n+                             &mut bindings_list);\n     }\n \n     // build a map from pattern identifiers to binding-info's.\n@@ -4114,9 +4118,7 @@ impl<'a> Resolver<'a> {\n \n         let mut bindings_list = HashMap::new();\n         for pattern in arm.pats.iter() {\n-            self.resolve_pattern(&**pattern,\n-                                 RefutableMode,\n-                                 Some(&mut bindings_list));\n+            self.resolve_pattern(&**pattern, RefutableMode, &mut bindings_list);\n         }\n \n         // This has to happen *after* we determine which\n@@ -4262,7 +4264,7 @@ impl<'a> Resolver<'a> {\n                        mode: PatternBindingMode,\n                        // Maps idents to the node ID for the (outermost)\n                        // pattern that binds them\n-                       mut bindings_list: Option<&mut HashMap<Name,NodeId>>) {\n+                       bindings_list: &mut HashMap<Name,NodeId>) {\n         let pat_id = pattern.id;\n         walk_pat(pattern, |pattern| {\n             match pattern.node {\n@@ -4351,43 +4353,27 @@ impl<'a> Resolver<'a> {\n                             // because that breaks the assumptions later\n                             // passes make about or-patterns.)\n \n-                            match bindings_list {\n-                                Some(ref mut bindings_list)\n-                                if !bindings_list.contains_key(&renamed) => {\n-                                    let this = &mut *self;\n-                                    let value_ribs = this.value_ribs.borrow();\n-                                    let length = value_ribs.len();\n-                                    let last_rib = value_ribs.get(\n-                                        length - 1);\n-                                    last_rib.bindings.borrow_mut()\n-                                            .insert(renamed, DlDef(def));\n-                                    bindings_list.insert(renamed, pat_id);\n-                                }\n-                                Some(ref mut b) => {\n-                                  if b.find(&renamed) == Some(&pat_id) {\n-                                      // Then this is a duplicate variable\n-                                      // in the same disjunct, which is an\n-                                      // error\n-                                     self.resolve_error(pattern.span,\n-                                       format!(\"identifier `{}` is bound \\\n-                                                more than once in the same \\\n-                                                pattern\",\n-                                               path_to_str(path)).as_slice());\n-                                  }\n-                                  // Not bound in the same pattern: do nothing\n-                                }\n-                                None => {\n-                                    let this = &mut *self;\n-                                    {\n-                                        let value_ribs = this.value_ribs.borrow();\n-                                        let length = value_ribs.len();\n-                                        let last_rib = value_ribs.get(\n-                                                length - 1);\n-                                        last_rib.bindings.borrow_mut()\n-                                                .insert(renamed, DlDef(def));\n-                                    }\n-                                }\n+                            if !bindings_list.contains_key(&renamed) {\n+                                let this = &mut *self;\n+                                let value_ribs = this.value_ribs.borrow();\n+                                let length = value_ribs.len();\n+                                let last_rib = value_ribs.get(\n+                                    length - 1);\n+                                last_rib.bindings.borrow_mut()\n+                                        .insert(renamed, DlDef(def));\n+                                bindings_list.insert(renamed, pat_id);\n+                            } else if bindings_list.find(&renamed) ==\n+                                    Some(&pat_id) {\n+                                // Then this is a duplicate variable in the\n+                                // same disjunction, which is an error.\n+                                self.resolve_error(pattern.span,\n+                                    format!(\"identifier `{}` is bound \\\n+                                             more than once in the same \\\n+                                             pattern\",\n+                                            path_to_str(path)).as_slice());\n                             }\n+                            // Else, not bound in the same pattern: do\n+                            // nothing.\n                         }\n                     }\n "}, {"sha": "0b78023d318af0bf03976223d30c68dc5897aca6", "filename": "src/test/compile-fail/shadowing-in-the-same-pattern.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c23748c59ce0969bf9251f6d4bb1882ca0045a78/src%2Ftest%2Fcompile-fail%2Fshadowing-in-the-same-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23748c59ce0969bf9251f6d4bb1882ca0045a78/src%2Ftest%2Fcompile-fail%2Fshadowing-in-the-same-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowing-in-the-same-pattern.rs?ref=c23748c59ce0969bf9251f6d4bb1882ca0045a78", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for issue #14581.\n+\n+fn f((a, a): (int, int)) {} //~ ERROR identifier `a` is bound more than once\n+\n+fn main() {\n+    let (a, a) = (1, 1);    //~ ERROR identifier `a` is bound more than once\n+}\n+"}]}