{"sha": "68f2934a154abac9a2af72c55e4c08277172e087", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZjI5MzRhMTU0YWJhYzlhMmFmNzJjNTVlNGMwODI3NzE3MmUwODc=", "commit": {"author": {"name": "Mara", "email": "m-ou.se@m-ou.se", "date": "2021-03-05T09:57:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-05T09:57:20Z"}, "message": "Rollup merge of #82728 - calebsander:refactor/bufreader-buf, r=m-ou-se\n\nAvoid unnecessary Vec construction in BufReader\n\nAs mentioned in #80460, creating a `Vec` and calling `Vec::into_boxed_slice()` emits unnecessary calls to `realloc()` and `free()`. Updated the code to use `Box::new_uninit_slice()` to create a boxed slice directly. I think this also makes it more explicit that the initial contents of the buffer are uninitialized.\n\nr? ``@m-ou-se``", "tree": {"sha": "6fdc69254f2cf9b45b014cd0c02b72060b064e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fdc69254f2cf9b45b014cd0c02b72060b064e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68f2934a154abac9a2af72c55e4c08277172e087", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQgCBCRBK7hj4Ov3rIwAAdHIIADx9Zs4i2f9/9urcEhRGpq8U\nckaZrvD/X8sUMnOi3IJpJLEsbILmgBXl8iaU4g36AcKVnyIC51TNeIOUTFsgLmuT\nEadzEpLejkNoUzItbfVuZTvHhJpUMRsZc37lUMOISDZZMwQKrTsE9jL/mkU4hTGR\ne23t8ofTKzujDXBRM27XK76hL8rM4Uts8rVvqVL47SExQQN0LwByQxwKis+JwBAG\nOfT7JYymkRocdztPsXWIaVRz7VOcVY2I5YC6cFSyQbS99l6iypApEee6C57Iohj1\nAksgclnBhZASyY3O7+Azu1G+7GoSH8Ahnmrpzv/PRHgwA5yRDNE9MnZCLmyjqhg=\n=BAvs\n-----END PGP SIGNATURE-----\n", "payload": "tree 6fdc69254f2cf9b45b014cd0c02b72060b064e7f\nparent ee796c65233e24f76c6867bb393416608364500f\nparent 9425e304b13e5cfc6f5d36f0a872fc8313da40aa\nauthor Mara <m-ou.se@m-ou.se> 1614938240 +0100\ncommitter GitHub <noreply@github.com> 1614938240 +0100\n\nRollup merge of #82728 - calebsander:refactor/bufreader-buf, r=m-ou-se\n\nAvoid unnecessary Vec construction in BufReader\n\nAs mentioned in #80460, creating a `Vec` and calling `Vec::into_boxed_slice()` emits unnecessary calls to `realloc()` and `free()`. Updated the code to use `Box::new_uninit_slice()` to create a boxed slice directly. I think this also makes it more explicit that the initial contents of the buffer are uninitialized.\n\nr? ``@m-ou-se``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68f2934a154abac9a2af72c55e4c08277172e087", "html_url": "https://github.com/rust-lang/rust/commit/68f2934a154abac9a2af72c55e4c08277172e087", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68f2934a154abac9a2af72c55e4c08277172e087/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee796c65233e24f76c6867bb393416608364500f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee796c65233e24f76c6867bb393416608364500f", "html_url": "https://github.com/rust-lang/rust/commit/ee796c65233e24f76c6867bb393416608364500f"}, {"sha": "9425e304b13e5cfc6f5d36f0a872fc8313da40aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9425e304b13e5cfc6f5d36f0a872fc8313da40aa", "html_url": "https://github.com/rust-lang/rust/commit/9425e304b13e5cfc6f5d36f0a872fc8313da40aa"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "02b0fc0c57d559e85e37f9eca6296c659d6a1000", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68f2934a154abac9a2af72c55e4c08277172e087/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f2934a154abac9a2af72c55e4c08277172e087/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=68f2934a154abac9a2af72c55e4c08277172e087", "patch": "@@ -92,10 +92,9 @@ impl<R: Read> BufReader<R> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize, inner: R) -> BufReader<R> {\n         unsafe {\n-            let mut buffer = Vec::with_capacity(capacity);\n-            buffer.set_len(capacity);\n-            inner.initializer().initialize(&mut buffer);\n-            BufReader { inner, buf: buffer.into_boxed_slice(), pos: 0, cap: 0 }\n+            let mut buf = Box::new_uninit_slice(capacity).assume_init();\n+            inner.initializer().initialize(&mut buf);\n+            BufReader { inner, buf, pos: 0, cap: 0 }\n         }\n     }\n }"}, {"sha": "f62fb83533ca2e3a61660027aa0278c461683f97", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68f2934a154abac9a2af72c55e4c08277172e087/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f2934a154abac9a2af72c55e4c08277172e087/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=68f2934a154abac9a2af72c55e4c08277172e087", "patch": "@@ -289,6 +289,7 @@\n #![feature(needs_panic_runtime)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n+#![feature(new_uninit)]\n #![feature(nll)]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(once_cell)]"}]}