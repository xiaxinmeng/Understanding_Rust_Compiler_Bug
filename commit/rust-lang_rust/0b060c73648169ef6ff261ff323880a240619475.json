{"sha": "0b060c73648169ef6ff261ff323880a240619475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMDYwYzczNjQ4MTY5ZWY2ZmYyNjFmZjMyMzg4MGEyNDA2MTk0NzU=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-05-19T13:57:31Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-05-19T13:57:31Z"}, "message": "Review comments", "tree": {"sha": "d397a8574807ae6fc62a533e4a16bbe596fe1d6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d397a8574807ae6fc62a533e4a16bbe596fe1d6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b060c73648169ef6ff261ff323880a240619475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b060c73648169ef6ff261ff323880a240619475", "html_url": "https://github.com/rust-lang/rust/commit/0b060c73648169ef6ff261ff323880a240619475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b060c73648169ef6ff261ff323880a240619475/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87c46944482a8cc5a7256fc0d5dcd9fd015b51d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6", "html_url": "https://github.com/rust-lang/rust/commit/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "14d072d8e3c08e7c836b97b5d51d7f37b526f3ea", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b060c73648169ef6ff261ff323880a240619475/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b060c73648169ef6ff261ff323880a240619475/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=0b060c73648169ef6ff261ff323880a240619475", "patch": "@@ -137,11 +137,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i64(result), dest)?;\n             }\n             \"fsync\" => {\n-                let result = this.fsync(args[0])?;\n+                let &[fd] = check_arg_count(args)?;\n+                let result = this.fsync(fd)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"fdatasync\" => {\n-                let result = this.fdatasync(args[0])?;\n+                let &[fd] = check_arg_count(args)?;\n+                let result = this.fdatasync(fd)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n "}, {"sha": "bc6ae89966d7cdc872eed8fc7eb21d944256ecab", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b060c73648169ef6ff261ff323880a240619475/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b060c73648169ef6ff261ff323880a240619475/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=0b060c73648169ef6ff261ff323880a240619475", "patch": "@@ -54,9 +54,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // fadvise is only informational, we can ignore it.\n                 this.write_null(dest)?;\n             }\n-            // Linux-only\n             \"sync_file_range\" => {\n-                let result = this.sync_file_range(args[0], args[1], args[2], args[3])?;\n+                let &[fd, offset, nbytes, flags] = check_arg_count(args)?;\n+                let result = this.sync_file_range(fd, offset, nbytes, flags)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n "}, {"sha": "ac405138f5244b648ddf23b30d3920d087eb1105", "filename": "src/shims/fs.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0b060c73648169ef6ff261ff323880a240619475/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b060c73648169ef6ff261ff323880a240619475/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=0b060c73648169ef6ff261ff323880a240619475", "patch": "@@ -378,6 +378,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else if this.tcx.sess.target.target.target_os == \"macos\"\n             && cmd == this.eval_libc_i32(\"F_FULLFSYNC\")?\n         {\n+            // On macOS, fsync does not wait for the underlying disk to finish writing, while this\n+            // F_FULLFSYNC operation does. The standard library uses F_FULLFSYNC for both\n+            // File::sync_data() and File::sync_all().\n+            let &[_, _] = check_arg_count(args)?;\n             if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n                 let result = file.sync_all();\n                 this.try_unwrap_io_result(result.map(|_| 0i32))\n@@ -1153,9 +1157,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"sync_file_range\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n-        let _offset = this.read_scalar(offset_op)?.to_i64()?;\n-        let _nbytes = this.read_scalar(nbytes_op)?.to_i64()?;\n-        let _flags = this.read_scalar(flags_op)?.to_u32()?;\n+        let offset = this.read_scalar(offset_op)?.to_i64()?;\n+        let nbytes = this.read_scalar(nbytes_op)?.to_i64()?;\n+        let flags = this.read_scalar(flags_op)?.to_i32()?;\n+\n+        if offset < 0 || nbytes < 0 {\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n+            return Ok(-1);\n+        }\n+        let allowed_flags = this.eval_libc_i32(\"SYNC_FILE_RANGE_WAIT_BEFORE\")?\n+            | this.eval_libc_i32(\"SYNC_FILE_RANGE_WRITE\")?\n+            | this.eval_libc_i32(\"SYNC_FILE_RANGE_WAIT_AFTER\")?;\n+        if flags & allowed_flags != flags {\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n+            return Ok(-1);\n+        }\n+\n         if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n             // In the interest of host compatibility, we conservatively ignore\n             // offset, nbytes, and flags, and sync the entire file."}, {"sha": "d831129dc80fbc4a1d1b9ac1ae870eebda9fb9a8", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0b060c73648169ef6ff261ff323880a240619475/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b060c73648169ef6ff261ff323880a240619475/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=0b060c73648169ef6ff261ff323880a240619475", "patch": "@@ -14,8 +14,7 @@ fn main() {\n     test_seek();\n     test_metadata();\n     test_file_set_len();\n-    test_file_sync_all();\n-    test_file_sync_data();\n+    test_file_sync();\n     test_symlink();\n     test_errors();\n     test_rename();\n@@ -184,24 +183,14 @@ fn test_file_set_len() {\n     remove_file(&path).unwrap();\n }\n \n-fn test_file_sync_all() {\n+fn test_file_sync() {\n     let bytes = b\"Hello, World!\\n\";\n-    let path = prepare_with_content(\"miri_test_fs_sync_all.txt\", bytes);\n+    let path = prepare_with_content(\"miri_test_fs_sync.txt\", bytes);\n \n-    // Test that we can call sync_all (can't readily test effects of this operation)\n-    let file = File::open(&path).unwrap();\n-    file.sync_all().unwrap();\n-\n-    remove_file(&path).unwrap();\n-}\n-\n-fn test_file_sync_data() {\n-    let bytes = b\"Hello, World!\\n\";\n-    let path = prepare_with_content(\"miri_test_fs_sync_data.txt\", bytes);\n-\n-    // Test that we can call sync_data (can't readily test effects of this operation)\n+    // Test that we can call sync_data and sync_all (can't readily test effects of this operation)\n     let file = File::open(&path).unwrap();\n     file.sync_data().unwrap();\n+    file.sync_all().unwrap();\n \n     remove_file(&path).unwrap();\n }"}]}