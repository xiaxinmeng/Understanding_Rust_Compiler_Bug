{"sha": "68e0e6ba848087734be581afe5478635a647aa7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZTBlNmJhODQ4MDg3NzM0YmU1ODFhZmU1NDc4NjM1YTY0N2FhN2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-10T10:48:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-10T10:48:53Z"}, "message": "Rollup merge of #70975 - lcnr:ok, r=petrochenkov\n\nFix internal doc comment nits.", "tree": {"sha": "6f72a6f9ac9dfae7c31450cc0ca52e9222d3ee7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f72a6f9ac9dfae7c31450cc0ca52e9222d3ee7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68e0e6ba848087734be581afe5478635a647aa7c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekE8VCRBK7hj4Ov3rIwAAdHIIAAazvW3pAWOm1C2RqcyT0pwA\nzL2j6Nw+7ud0FhX6lb4iKBIpTuD6EKTSKqeaq/HBNxkh9d6kJmX0Id6PsJC+wQu2\nES+AT4n+53basG/42kizZY/G+kc3t8vnX0GG1a66GjYQmaez6RLwz/XGvP5k7LNd\nU5S/rUx1vqTsT74LppvfZo+gIEbLCK3Ypxs5gQaeL/CRMJ097Nl3a0Hra4hI5SBw\n5T/z5liiqS/YQpOjR1Dbn0dlvoNZoIa3WUK0Xak8JHm7CcjlRo03meguQLPQQOYX\neBY1/hxmmVoYYwnXUHPGi/vLB7FJL7MB0FHYYvK2CFjmN5wlyAv+PvzfSTxiFIw=\n=uOit\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f72a6f9ac9dfae7c31450cc0ca52e9222d3ee7f\nparent 6f118f2149bd4a359d9983055968122cc636b8a9\nparent e39d958b8eba240b806761c2972009c7bfcee24f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586515733 +0200\ncommitter GitHub <noreply@github.com> 1586515733 +0200\n\nRollup merge of #70975 - lcnr:ok, r=petrochenkov\n\nFix internal doc comment nits.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68e0e6ba848087734be581afe5478635a647aa7c", "html_url": "https://github.com/rust-lang/rust/commit/68e0e6ba848087734be581afe5478635a647aa7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68e0e6ba848087734be581afe5478635a647aa7c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f118f2149bd4a359d9983055968122cc636b8a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f118f2149bd4a359d9983055968122cc636b8a9", "html_url": "https://github.com/rust-lang/rust/commit/6f118f2149bd4a359d9983055968122cc636b8a9"}, {"sha": "e39d958b8eba240b806761c2972009c7bfcee24f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e39d958b8eba240b806761c2972009c7bfcee24f", "html_url": "https://github.com/rust-lang/rust/commit/e39d958b8eba240b806761c2972009c7bfcee24f"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "a5490696ba0b4355ba18f2b4cc6c7b0d98c58ad1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68e0e6ba848087734be581afe5478635a647aa7c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e0e6ba848087734be581afe5478635a647aa7c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=68e0e6ba848087734be581afe5478635a647aa7c", "patch": "@@ -1161,7 +1161,7 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n     fn assign(&mut self, span: Span, nid: hir::HirId, ty_opt: Option<LocalTy<'tcx>>) -> Ty<'tcx> {\n         match ty_opt {\n             None => {\n-                // infer the variable's type\n+                // Infer the variable's type.\n                 let var_ty = self.fcx.next_ty_var(TypeVariableOrigin {\n                     kind: TypeVariableOriginKind::TypeInference,\n                     span,\n@@ -1173,7 +1173,7 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n                 var_ty\n             }\n             Some(typ) => {\n-                // take type that the user specified\n+                // Take type that the user specified.\n                 self.fcx.locals.borrow_mut().insert(nid, typ);\n                 typ.revealed_ty\n             }\n@@ -1244,7 +1244,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n         intravisit::walk_pat(self, p);\n     }\n \n-    // Don't descend into the bodies of nested closures\n+    // Don't descend into the bodies of nested closures.\n     fn visit_fn(\n         &mut self,\n         _: intravisit::FnKind<'tcx>,\n@@ -1292,7 +1292,7 @@ fn check_fn<'a, 'tcx>(\n \n     debug!(\"check_fn(sig={:?}, fn_id={}, param_env={:?})\", fn_sig, fn_id, param_env);\n \n-    // Create the function context.  This is either derived from scratch or,\n+    // Create the function context. This is either derived from scratch or,\n     // in the case of closures, based on the outer context.\n     let mut fcx = FnCtxt::new(inherited, param_env, body.value.hir_id);\n     *fcx.ps.borrow_mut() = UnsafetyState::function(fn_sig.unsafety, fn_id);"}, {"sha": "146fc04bc27cbf9fba34ce1533f03bcc16f98e92", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68e0e6ba848087734be581afe5478635a647aa7c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e0e6ba848087734be581afe5478635a647aa7c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=68e0e6ba848087734be581afe5478635a647aa7c", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let item_def_id = self.tcx.hir().local_def_id(item_id);\n \n         // This attribute causes us to dump some writeback information\n-        // in the form of errors, which is uSymbolfor unit tests.\n+        // in the form of errors, which is uSymbol for unit tests.\n         let rustc_dump_user_substs = self.tcx.has_attr(item_def_id, sym::rustc_dump_user_substs);\n \n         let mut wbcx = WritebackCx::new(self, body, rustc_dump_user_substs);"}]}