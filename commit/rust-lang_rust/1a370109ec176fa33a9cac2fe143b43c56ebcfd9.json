{"sha": "1a370109ec176fa33a9cac2fe143b43c56ebcfd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMzcwMTA5ZWMxNzZmYTMzYTljYWMyZmUxNDNiNDNjNTZlYmNmZDk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-24T08:44:14Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-28T15:47:03Z"}, "message": "Fix `cfg(parallel_compiler)` mode\n\nFix rebase", "tree": {"sha": "9b5bf1b2ca690e2ffe8b24ecfebc8f895b4a25fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b5bf1b2ca690e2ffe8b24ecfebc8f895b4a25fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a370109ec176fa33a9cac2fe143b43c56ebcfd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a370109ec176fa33a9cac2fe143b43c56ebcfd9", "html_url": "https://github.com/rust-lang/rust/commit/1a370109ec176fa33a9cac2fe143b43c56ebcfd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a370109ec176fa33a9cac2fe143b43c56ebcfd9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "676d282dd3cd2dedba651e98c9a41af42983f08b", "url": "https://api.github.com/repos/rust-lang/rust/commits/676d282dd3cd2dedba651e98c9a41af42983f08b", "html_url": "https://github.com/rust-lang/rust/commit/676d282dd3cd2dedba651e98c9a41af42983f08b"}], "stats": {"total": 57, "additions": 19, "deletions": 38}, "files": [{"sha": "23f81c2c8769242f015a11d28a3b72710ec5cd13", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a370109ec176fa33a9cac2fe143b43c56ebcfd9/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a370109ec176fa33a9cac2fe143b43c56ebcfd9/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=1a370109ec176fa33a9cac2fe143b43c56ebcfd9", "patch": "@@ -127,6 +127,8 @@ fn main() {\n \n     if env::var_os(\"RUSTC_DENY_WARNINGS\").is_some() &&\n        env::var_os(\"RUSTC_EXTERNAL_TOOL\").is_none() {\n+        // When extending this list, search for `NO-RUSTC-WRAPPER` and add the new lints\n+        // there as well, some code doesn't go through this `rustc` wrapper.\n         cmd.arg(\"-Dwarnings\");\n         cmd.arg(\"-Drust_2018_idioms\");\n         cmd.arg(\"-Dunused_lifetimes\");"}, {"sha": "517893a1967dc63b39801bc06ec2e4e4891a2e70", "filename": "src/libcore/array.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a370109ec176fa33a9cac2fe143b43c56ebcfd9/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a370109ec176fa33a9cac2fe143b43c56ebcfd9/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=1a370109ec176fa33a9cac2fe143b43c56ebcfd9", "patch": "@@ -217,7 +217,7 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b, A, B, const N: usize> PartialEq<[B; N]> for [A; N]\n+impl<A, B, const N: usize> PartialEq<[B; N]> for [A; N]\n where\n     A: PartialEq<B>,\n     [A; N]: LengthAtMost32,\n@@ -234,7 +234,7 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b, A, B, const N: usize> PartialEq<[B]> for [A; N]\n+impl<A, B, const N: usize> PartialEq<[B]> for [A; N]\n where\n     A: PartialEq<B>,\n     [A; N]: LengthAtMost32,"}, {"sha": "a25560ff762a1115d1bb74b4fa69df1ab98204f6", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1a370109ec176fa33a9cac2fe143b43c56ebcfd9/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a370109ec176fa33a9cac2fe143b43c56ebcfd9/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=1a370109ec176fa33a9cac2fe143b43c56ebcfd9", "patch": "@@ -1,35 +1,25 @@\n-#![allow(unused_imports)] // `cfg(parallel_compiler)`\n-\n-use std::mem;\n-use std::process;\n-use std::{fmt, ptr};\n+use crate::ty::context::TyCtxt;\n+use crate::ty::query::plumbing::CycleError;\n+use crate::ty::query::Query;\n+use crate::ty::tls;\n \n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::{Lock, LockGuard, Lrc, Weak};\n-use rustc_data_structures::OnDrop;\n-use rustc_data_structures::jobserver;\n+use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n \n-use crate::ty::tls;\n-use crate::ty::query::Query;\n-use crate::ty::query::plumbing::CycleError;\n #[cfg(not(parallel_compiler))]\n-use crate::ty::query::{\n-    plumbing::TryGetJob,\n-    config::QueryDescription,\n-};\n-use crate::ty::context::TyCtxt;\n+use std::ptr;\n \n #[cfg(parallel_compiler)]\n use {\n-    rustc_rayon_core as rayon_core,\n     parking_lot::{Mutex, Condvar},\n-    std::sync::atomic::Ordering,\n-    std::thread,\n-    std::iter,\n-    std::iter::FromIterator,\n+    rustc_data_structures::{jobserver, OnDrop},\n+    rustc_data_structures::fx::FxHashSet,\n+    rustc_data_structures::stable_hasher::{StableHasher, HashStable},\n+    rustc_data_structures::sync::Lock,\n+    rustc_rayon_core as rayon_core,\n     syntax_pos::DUMMY_SP,\n-    rustc_data_structures::stable_hasher::{StableHasherResult, StableHasher, HashStable},\n+    std::{mem, process, thread},\n+    std::iter::FromIterator,\n };\n \n /// Indicates the state of a query for a given key in a query map.\n@@ -81,7 +71,7 @@ impl<'tcx> QueryJob<'tcx> {\n         span: Span,\n     ) -> Result<(), CycleError<'tcx>> {\n         tls::with_related_context(tcx, move |icx| {\n-            let mut waiter = Lrc::new(QueryWaiter {\n+            let waiter = Lrc::new(QueryWaiter {\n                 query: icx.query.clone(),\n                 span,\n                 cycle: Lock::new(None),\n@@ -432,7 +422,7 @@ fn remove_cycle<'tcx>(\n         let usage = usage.as_ref().map(|(span, query)| (*span, query.info.query.clone()));\n \n         // Create the cycle error\n-        let mut error = CycleError {\n+        let error = CycleError {\n             usage,\n             cycle: stack.iter().map(|&(s, ref q)| QueryInfo {\n                 span: s,\n@@ -464,21 +454,13 @@ fn remove_cycle<'tcx>(\n /// Must only be called when a deadlock is about to happen.\n #[cfg(parallel_compiler)]\n pub unsafe fn handle_deadlock() {\n-    use syntax;\n-    use syntax_pos;\n-\n     let registry = rayon_core::Registry::current();\n \n     let gcx_ptr = tls::GCX_PTR.with(|gcx_ptr| {\n         gcx_ptr as *const _\n     });\n     let gcx_ptr = &*gcx_ptr;\n \n-    let syntax_globals = syntax::GLOBALS.with(|syntax_globals| {\n-        syntax_globals as *const _\n-    });\n-    let syntax_globals = &*syntax_globals;\n-\n     let syntax_pos_globals = syntax_pos::GLOBALS.with(|syntax_pos_globals| {\n         syntax_pos_globals as *const _\n     });"}, {"sha": "8dd2595967fd79130e0e108b86d52650070cab87", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a370109ec176fa33a9cac2fe143b43c56ebcfd9/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a370109ec176fa33a9cac2fe143b43c56ebcfd9/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=1a370109ec176fa33a9cac2fe143b43c56ebcfd9", "patch": "@@ -17,7 +17,6 @@ use rustc::util::common::{time, ErrorReported};\n use rustc::session::Session;\n use rustc::session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n-use rustc_allocator as allocator;\n use rustc_ast_borrowck as borrowck;\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;"}, {"sha": "f007a0cf2abee5ef23437a4d0ff8a7abedf27606", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a370109ec176fa33a9cac2fe143b43c56ebcfd9/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a370109ec176fa33a9cac2fe143b43c56ebcfd9/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=1a370109ec176fa33a9cac2fe143b43c56ebcfd9", "patch": "@@ -203,8 +203,6 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     f: F,\n ) -> R {\n     use rayon::{ThreadPool, ThreadPoolBuilder};\n-    use syntax;\n-    use syntax_pos;\n \n     let gcx_ptr = &Lock::new(0);\n "}]}