{"sha": "324ca7acd59be59abe0562287d5493f78a60823a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNGNhN2FjZDU5YmU1OWFiZTA1NjIyODdkNTQ5M2Y3OGE2MDgyM2E=", "commit": {"author": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2018-02-19T00:57:12Z"}, "committer": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2018-03-25T01:30:04Z"}, "message": "rustc_llvm: rustc_trans: Thread the PGO config down to the pass manager builder.\n\nSigned-off-by: Emilio Cobos \u00c1lvarez <emilio@crisal.io>", "tree": {"sha": "6625e70d0c0eec2fb29e3aa47c2522f9d063e0c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6625e70d0c0eec2fb29e3aa47c2522f9d063e0c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/324ca7acd59be59abe0562287d5493f78a60823a", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE+uMrE+H37zcdV8pyBWtye7nBAnwFAlq2+5wACgkQBWtye7nB\nAnxeaQf+JKVTxodOU5hWNnQkLTmC/pZAqCgY9XMu7/cD0rElPrZ1DByqL3cOfeKF\n7CqUN+GKHmq4rTQgKnrbCixOMC4H3007uNap2+KnMjaiN+AjcWnsMwif5jfxk66m\nSiOkdZB6I+XIuqIW8y9Z11VoSpqFBT831sspd2avDUtDQffrL3isMUmeCNHpGrSo\nZG5wDe2jJ7MGwYSp5IYk+L0kkxQRLKlPDNIuzvcys1YKvEkhC6pfxnnDlS8dZN44\nvmSulaqyO7dJicWDEC6t/JFAR6hlveGpKxOuX5haU/PnyNayK7hKU8jsveQyoZKN\nYKb4Pmvbz0EyQTloOs3laPdX3CrvGA==\n=pW9Q\n-----END PGP SIGNATURE-----", "payload": "tree 6625e70d0c0eec2fb29e3aa47c2522f9d063e0c6\nparent 50a38725e1841aa2283f198dbc8ef2bd5bd1370b\nauthor Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1519001832 +0100\ncommitter Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1521941404 +0200\n\nrustc_llvm: rustc_trans: Thread the PGO config down to the pass manager builder.\n\nSigned-off-by: Emilio Cobos \u00c1lvarez <emilio@crisal.io>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/324ca7acd59be59abe0562287d5493f78a60823a", "html_url": "https://github.com/rust-lang/rust/commit/324ca7acd59be59abe0562287d5493f78a60823a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/324ca7acd59be59abe0562287d5493f78a60823a/comments", "author": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a38725e1841aa2283f198dbc8ef2bd5bd1370b", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a38725e1841aa2283f198dbc8ef2bd5bd1370b", "html_url": "https://github.com/rust-lang/rust/commit/50a38725e1841aa2283f198dbc8ef2bd5bd1370b"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "25506f6a86e896eb0d00bd13887ed35501dd9e86", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/324ca7acd59be59abe0562287d5493f78a60823a/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324ca7acd59be59abe0562287d5493f78a60823a/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=324ca7acd59be59abe0562287d5493f78a60823a", "patch": "@@ -1641,7 +1641,9 @@ extern \"C\" {\n                                                OptLevel: CodeGenOptLevel,\n                                                MergeFunctions: bool,\n                                                SLPVectorize: bool,\n-                                               LoopVectorize: bool);\n+                                               LoopVectorize: bool,\n+                                               PGOGenPath: *const c_char,\n+                                               PGOUsePath: *const c_char);\n     pub fn LLVMRustAddLibraryInfo(PM: PassManagerRef,\n                                   M: ModuleRef,\n                                   DisableSimplifyLibCalls: bool);"}, {"sha": "2a8d280ee26324747600eb5a3648e60712e8aeff", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/324ca7acd59be59abe0562287d5493f78a60823a/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324ca7acd59be59abe0562287d5493f78a60823a/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=324ca7acd59be59abe0562287d5493f78a60823a", "patch": "@@ -240,6 +240,9 @@ pub struct ModuleConfig {\n     /// Some(level) to optimize binary size, or None to not affect program size.\n     opt_size: Option<llvm::CodeGenOptSize>,\n \n+    pgo_gen: Option<String>,\n+    pgo_use: String,\n+\n     // Flags indicating which outputs to produce.\n     emit_no_opt_bc: bool,\n     emit_bc: bool,\n@@ -274,6 +277,9 @@ impl ModuleConfig {\n             opt_level: None,\n             opt_size: None,\n \n+            pgo_gen: None,\n+            pgo_use: String::new(),\n+\n             emit_no_opt_bc: false,\n             emit_bc: false,\n             emit_bc_compressed: false,\n@@ -932,6 +938,9 @@ pub fn start_async_translation(tcx: TyCtxt,\n         modules_config.passes.push(\"insert-gcov-profiling\".to_owned())\n     }\n \n+    modules_config.pgo_gen = sess.opts.cg.pgo_gen.clone();\n+    modules_config.pgo_use = sess.opts.cg.pgo_use.clone();\n+\n     modules_config.opt_level = Some(get_llvm_opt_level(sess.opts.optimize));\n     modules_config.opt_size = Some(get_llvm_opt_size(sess.opts.optimize));\n \n@@ -2046,18 +2055,36 @@ pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n                             config: &ModuleConfig,\n                             opt_level: llvm::CodeGenOptLevel,\n                             f: &mut FnMut(llvm::PassManagerBuilderRef)) {\n+    use std::ptr;\n+\n     // Create the PassManagerBuilder for LLVM. We configure it with\n     // reasonable defaults and prepare it to actually populate the pass\n     // manager.\n     let builder = llvm::LLVMPassManagerBuilderCreate();\n     let opt_size = config.opt_size.unwrap_or(llvm::CodeGenOptSizeNone);\n     let inline_threshold = config.inline_threshold;\n \n-    llvm::LLVMRustConfigurePassManagerBuilder(builder,\n-                                              opt_level,\n-                                              config.merge_functions,\n-                                              config.vectorize_slp,\n-                                              config.vectorize_loop);\n+    let pgo_gen_path = config.pgo_gen.as_ref().map(|s| {\n+        let s = if s.is_empty() { \"default_%m.profraw\" } else { s };\n+        CString::new(s.as_bytes()).unwrap()\n+    });\n+\n+    let pgo_use_path = if config.pgo_use.is_empty() {\n+        None\n+    } else {\n+        Some(CString::new(config.pgo_use.as_bytes()).unwrap())\n+    };\n+\n+    llvm::LLVMRustConfigurePassManagerBuilder(\n+        builder,\n+        opt_level,\n+        config.merge_functions,\n+        config.vectorize_slp,\n+        config.vectorize_loop,\n+        pgo_gen_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n+        pgo_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n+    );\n+\n     llvm::LLVMPassManagerBuilderSetSizeLevel(builder, opt_size as u32);\n \n     if opt_size != llvm::CodeGenOptSizeNone {"}, {"sha": "bee8ae5853f86c511f3fd5b116159531e2d50365", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/324ca7acd59be59abe0562287d5493f78a60823a/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/324ca7acd59be59abe0562287d5493f78a60823a/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=324ca7acd59be59abe0562287d5493f78a60823a", "patch": "@@ -428,12 +428,22 @@ extern \"C\" void LLVMRustAddAnalysisPasses(LLVMTargetMachineRef TM,\n \n extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n-    bool MergeFunctions, bool SLPVectorize, bool LoopVectorize) {\n+    bool MergeFunctions, bool SLPVectorize, bool LoopVectorize,\n+    const char* PGOGenPath, const char* PGOUsePath) {\n   // Ignore mergefunc for now as enabling it causes crashes.\n   // unwrap(PMBR)->MergeFunctions = MergeFunctions;\n   unwrap(PMBR)->SLPVectorize = SLPVectorize;\n   unwrap(PMBR)->OptLevel = fromRust(OptLevel);\n   unwrap(PMBR)->LoopVectorize = LoopVectorize;\n+  if (PGOGenPath) {\n+    assert(!PGOUsePath);\n+    unwrap(PMBR)->EnablePGOInstrGen = true;\n+    unwrap(PMBR)->PGOInstrGen = PGOGenPath;\n+  }\n+  if (PGOUsePath) {\n+    assert(!PGOGenPath);\n+    unwrap(PMBR)->PGOInstrUse = PGOUsePath;\n+  }\n }\n \n // Unfortunately, the LLVM C API doesn't provide a way to set the `LibraryInfo`"}]}