{"sha": "f372476d2cd19fbd4baff24e767f5ee3d8264b49", "node_id": "C_kwDOAAsO6NoAKGYzNzI0NzZkMmNkMTlmYmQ0YmFmZjI0ZTc2N2Y1ZWUzZDgyNjRiNDk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-18T21:00:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-18T21:00:43Z"}, "message": "Rollup merge of #91150 - dtolnay:qpath, r=davidtwco\n\nLet qpath contain NtTy: `<$:ty as $:ty>::\u2026`\n\nExample:\n\n```rust\nmacro_rules! m {\n    (<$type:ty as $trait:ty>::$name:ident) => {\n        <$type as $trait>::$name\n    };\n}\n\nfn main() {\n    let _: m!(<str as ToOwned>::Owned);\n}\n```\n\nPrevious behavior:\n\n```console\nerror: expected identifier, found `ToOwned`\n --> src/main.rs:3:19\n  |\n3 |         <$type as $trait>::$name\n  |                   ^^^^^^ expected identifier\n...\n8 |     let _: m!(<str as ToOwned>::Owned);\n  |            ---------------------------\n  |            |\n  |            this macro call doesn't expand to a type\n  |            in this macro invocation\n```\n\nThe <code>expected identifier, found \\`ToOwned\\`</code> error is particularly silly. I think it should be fine to accept this code as long as $trait is of the form `TyKind::Path(None, path)`; if it is any other kind of `NtTy`, we'll keep the same behavior as before.", "tree": {"sha": "aec2a7192a1ce7d5630ddfb9d2a6b574ebc1d310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aec2a7192a1ce7d5630ddfb9d2a6b574ebc1d310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f372476d2cd19fbd4baff24e767f5ee3d8264b49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5yp7CRBK7hj4Ov3rIwAApksIAAUQXeFAo6/6blsZhOthZxt7\n1URVEwfk+vne6mEbndv4PCGFgXwcMIDYZ/g44zdOMxT4v0OpQkkDM9rQbNWEJ4PV\neHCIfKxclvRgGEwQVZA/LQdrm4d0INkFIsjjd6JUFdTTUhtbFhuIkmiSpnfuhLk8\nWS8ckYQVC1Ga/RNLBVXnAmNHDmXQcpgaDwu90H2V7lOijLtpL4up/2Xd59ZkI2U2\nnjddfhcrkkLlF7v5J6Ds8ASpUY7ALQ1ZYY4CqswuHbHlm38myubXO56T/EwzrRNM\nwKCSkFeMQETvkSH5gYb+CS3yLmzRYNN0KPAENTGOCQ0OXmelRJtBUuNu1kkVX4k=\n=t+EI\n-----END PGP SIGNATURE-----\n", "payload": "tree aec2a7192a1ce7d5630ddfb9d2a6b574ebc1d310\nparent dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839\nparent 87a7defa8e08c971a30b152509c6c1ab9f718092\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642539643 +0100\ncommitter GitHub <noreply@github.com> 1642539643 +0100\n\nRollup merge of #91150 - dtolnay:qpath, r=davidtwco\n\nLet qpath contain NtTy: `<$:ty as $:ty>::\u2026`\n\nExample:\n\n```rust\nmacro_rules! m {\n    (<$type:ty as $trait:ty>::$name:ident) => {\n        <$type as $trait>::$name\n    };\n}\n\nfn main() {\n    let _: m!(<str as ToOwned>::Owned);\n}\n```\n\nPrevious behavior:\n\n```console\nerror: expected identifier, found `ToOwned`\n --> src/main.rs:3:19\n  |\n3 |         <$type as $trait>::$name\n  |                   ^^^^^^ expected identifier\n...\n8 |     let _: m!(<str as ToOwned>::Owned);\n  |            ---------------------------\n  |            |\n  |            this macro call doesn't expand to a type\n  |            in this macro invocation\n```\n\nThe <code>expected identifier, found \\`ToOwned\\`</code> error is particularly silly. I think it should be fine to accept this code as long as $trait is of the form `TyKind::Path(None, path)`; if it is any other kind of `NtTy`, we'll keep the same behavior as before.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f372476d2cd19fbd4baff24e767f5ee3d8264b49", "html_url": "https://github.com/rust-lang/rust/commit/f372476d2cd19fbd4baff24e767f5ee3d8264b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f372476d2cd19fbd4baff24e767f5ee3d8264b49/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "html_url": "https://github.com/rust-lang/rust/commit/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839"}, {"sha": "87a7defa8e08c971a30b152509c6c1ab9f718092", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a7defa8e08c971a30b152509c6c1ab9f718092", "html_url": "https://github.com/rust-lang/rust/commit/87a7defa8e08c971a30b152509c6c1ab9f718092"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "48502112e3a715420ace19a46ecd5c6aff154228", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f372476d2cd19fbd4baff24e767f5ee3d8264b49/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f372476d2cd19fbd4baff24e767f5ee3d8264b49/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=f372476d2cd19fbd4baff24e767f5ee3d8264b49", "patch": "@@ -139,22 +139,46 @@ impl<'a> Parser<'a> {\n         style: PathStyle,\n         ty_generics: Option<&Generics>,\n     ) -> PResult<'a, Path> {\n-        maybe_whole!(self, NtPath, |path| {\n+        let reject_generics_if_mod_style = |parser: &Parser<'_>, path: &Path| {\n+            // Ensure generic arguments don't end up in attribute paths, such as:\n+            //\n+            //     macro_rules! m {\n+            //         ($p:path) => { #[$p] struct S; }\n+            //     }\n+            //\n+            //     m!(inline<u8>); //~ ERROR: unexpected generic arguments in path\n+            //\n             if style == PathStyle::Mod && path.segments.iter().any(|segment| segment.args.is_some())\n             {\n-                self.struct_span_err(\n-                    path.segments\n-                        .iter()\n-                        .filter_map(|segment| segment.args.as_ref())\n-                        .map(|arg| arg.span())\n-                        .collect::<Vec<_>>(),\n-                    \"unexpected generic arguments in path\",\n-                )\n-                .emit();\n+                parser\n+                    .struct_span_err(\n+                        path.segments\n+                            .iter()\n+                            .filter_map(|segment| segment.args.as_ref())\n+                            .map(|arg| arg.span())\n+                            .collect::<Vec<_>>(),\n+                        \"unexpected generic arguments in path\",\n+                    )\n+                    .emit();\n             }\n+        };\n+\n+        maybe_whole!(self, NtPath, |path| {\n+            reject_generics_if_mod_style(self, &path);\n             path\n         });\n \n+        if let token::Interpolated(nt) = &self.token.kind {\n+            if let token::NtTy(ty) = &**nt {\n+                if let ast::TyKind::Path(None, path) = &ty.kind {\n+                    let path = path.clone();\n+                    self.bump();\n+                    reject_generics_if_mod_style(self, &path);\n+                    return Ok(path);\n+                }\n+            }\n+        }\n+\n         let lo = self.token.span;\n         let mut segments = Vec::new();\n         let mod_sep_ctxt = self.token.span.ctxt();"}, {"sha": "35003a79ad703daf9145cd0cd7030b4305277352", "filename": "src/test/ui/macros/macro-interpolation.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f372476d2cd19fbd4baff24e767f5ee3d8264b49/src%2Ftest%2Fui%2Fmacros%2Fmacro-interpolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f372476d2cd19fbd4baff24e767f5ee3d8264b49/src%2Ftest%2Fui%2Fmacros%2Fmacro-interpolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-interpolation.rs?ref=f372476d2cd19fbd4baff24e767f5ee3d8264b49", "patch": "@@ -14,8 +14,20 @@ macro_rules! overly_complicated {\n \n }\n \n+macro_rules! qpath {\n+    (path, <$type:ty as $trait:path>::$name:ident) => {\n+        <$type as $trait>::$name\n+    };\n+\n+    (ty, <$type:ty as $trait:ty>::$name:ident) => {\n+        <$type as $trait>::$name\n+    };\n+}\n+\n pub fn main() {\n+    let _: qpath!(path, <str as ToOwned>::Owned);\n+    let _: qpath!(ty, <str as ToOwned>::Owned);\n+\n     assert!(overly_complicated!(f, x, Option<usize>, { return Some(x); },\n                                Some(8), Some(y), y) == 8)\n-\n }"}]}