{"sha": "8068302fefc75440b823f4bf1731a5f347d7c767", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNjgzMDJmZWZjNzU0NDBiODIzZjRiZjE3MzFhNWYzNDdkN2M3Njc=", "commit": {"author": {"name": "Dmitry", "email": "mamhigtt@gmail.com", "date": "2020-08-09T13:35:51Z"}, "committer": {"name": "Dmitry", "email": "mamhigtt@gmail.com", "date": "2020-08-09T13:39:32Z"}, "message": "Merge remote-tracking branch 'origin/master'", "tree": {"sha": "251b967182e79bc82a58c2fb208c688f6152df1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/251b967182e79bc82a58c2fb208c688f6152df1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8068302fefc75440b823f4bf1731a5f347d7c767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8068302fefc75440b823f4bf1731a5f347d7c767", "html_url": "https://github.com/rust-lang/rust/commit/8068302fefc75440b823f4bf1731a5f347d7c767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8068302fefc75440b823f4bf1731a5f347d7c767/comments", "author": {"login": "godcodehunter", "id": 22272886, "node_id": "MDQ6VXNlcjIyMjcyODg2", "avatar_url": "https://avatars.githubusercontent.com/u/22272886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godcodehunter", "html_url": "https://github.com/godcodehunter", "followers_url": "https://api.github.com/users/godcodehunter/followers", "following_url": "https://api.github.com/users/godcodehunter/following{/other_user}", "gists_url": "https://api.github.com/users/godcodehunter/gists{/gist_id}", "starred_url": "https://api.github.com/users/godcodehunter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godcodehunter/subscriptions", "organizations_url": "https://api.github.com/users/godcodehunter/orgs", "repos_url": "https://api.github.com/users/godcodehunter/repos", "events_url": "https://api.github.com/users/godcodehunter/events{/privacy}", "received_events_url": "https://api.github.com/users/godcodehunter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "godcodehunter", "id": 22272886, "node_id": "MDQ6VXNlcjIyMjcyODg2", "avatar_url": "https://avatars.githubusercontent.com/u/22272886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godcodehunter", "html_url": "https://github.com/godcodehunter", "followers_url": "https://api.github.com/users/godcodehunter/followers", "following_url": "https://api.github.com/users/godcodehunter/following{/other_user}", "gists_url": "https://api.github.com/users/godcodehunter/gists{/gist_id}", "starred_url": "https://api.github.com/users/godcodehunter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godcodehunter/subscriptions", "organizations_url": "https://api.github.com/users/godcodehunter/orgs", "repos_url": "https://api.github.com/users/godcodehunter/repos", "events_url": "https://api.github.com/users/godcodehunter/events{/privacy}", "received_events_url": "https://api.github.com/users/godcodehunter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a43a0f63e0008787225abb6fb2baef97b6a39e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a43a0f63e0008787225abb6fb2baef97b6a39e0", "html_url": "https://github.com/rust-lang/rust/commit/1a43a0f63e0008787225abb6fb2baef97b6a39e0"}, {"sha": "8a57afe5a4bfab40072a83f7dc4ca560bf860919", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a57afe5a4bfab40072a83f7dc4ca560bf860919", "html_url": "https://github.com/rust-lang/rust/commit/8a57afe5a4bfab40072a83f7dc4ca560bf860919"}], "stats": {"total": 16936, "additions": 7876, "deletions": 9060}, "files": [{"sha": "2acd440122b670e57905c12ef15401b92ee22d2c", "filename": ".github/workflows/ci.yaml", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/.github%2Fworkflows%2Fci.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/.github%2Fworkflows%2Fci.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yaml?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -61,9 +61,6 @@ jobs:\n         override: true\n         components: rustfmt, rust-src\n \n-    - if: matrix.os == 'ubuntu-latest'\n-      run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/\n-\n     - name: Cache cargo directories\n       uses: actions/cache@v2\n       with:\n@@ -108,8 +105,6 @@ jobs:\n         override: true\n         target: 'powerpc-unknown-linux-gnu'\n \n-    - run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/\n-\n     - name: Cache cargo directories\n       uses: actions/cache@v2\n       with:"}, {"sha": "dc49fc4bdc0a495588cb05833031cd9cbe3e9354", "filename": "Cargo.lock", "status": "modified", "additions": 77, "deletions": 112, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -102,13 +102,12 @@ checksum = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.10.0\"\n+version = \"0.11.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b8de60b887edf6d74370fc8eb177040da4847d971d6234c7b13a6da324ef0caf\"\n+checksum = \"89fec17b16f1ac67908af82e47d0a90a7afd0e1827b181cd77504323d3263d35\"\n dependencies = [\n  \"semver\",\n  \"serde\",\n- \"serde_derive\",\n  \"serde_json\",\n ]\n \n@@ -126,9 +125,9 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.18.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eea3a22f0c30b2504ac4ab58934dac0d00b92a4d7788df32795cabca24c3f929\"\n+checksum = \"c1df0dbb57d74b4acd20f20fa66ab2acd09776b79eaeb9d8f947b2f3e01c40bf\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -138,19 +137,19 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.18.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fb617b643e145e3b151502799e91a9625dd5daf1cf05dc2cb821bc75ae0c9cbd\"\n+checksum = \"44361a25dbdb1dc428f56ad7a3c21ba9ca12f3225c26a47919ff6fcb10a583d4\"\n dependencies = [\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-recursive\"\n-version = \"0.18.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d280565c8eefbf9b2bc615df49c7dfd971faad37774bf65734e626fd23864bd6\"\n+checksum = \"dd89556b98de156d5eaf21077d297cd2198628f10f2df140798ea3a5dd84bc86\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -161,9 +160,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.18.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"be906fbca3f3077dce0e76d9864771d0f450c946af0d86b569fb9504148a065a\"\n+checksum = \"a886da37a0dc457057d86f78f026f7a09c6d8088aa13f4f4127fdb8dc80119a3\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -280,9 +279,9 @@ checksum = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \n [[package]]\n name = \"drop_bomb\"\n-version = \"0.1.4\"\n+version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"69b26e475fd29098530e709294e94e661974c851aed42512793f120fed4e199f\"\n+checksum = \"9bda8e21c04aca2ae33ffc2fd8c23134f3cac46db123ba97bd9d3f3b8a4a85e1\"\n \n [[package]]\n name = \"either\"\n@@ -319,9 +318,9 @@ dependencies = [\n \n [[package]]\n name = \"filetime\"\n-version = \"0.2.10\"\n+version = \"0.2.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"affc17579b132fc2461adf7c575cc6e8b134ebca52c51f5411388965227dc695\"\n+checksum = \"3ed85775dcc68644b5c950ac06a2b23768d3bc9390464151aaf27136998dcf9e\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n@@ -400,17 +399,6 @@ version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n \n-[[package]]\n-name = \"getrandom\"\n-version = \"0.1.14\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb\"\n-dependencies = [\n- \"cfg-if\",\n- \"libc\",\n- \"wasi\",\n-]\n-\n [[package]]\n name = \"gimli\"\n version = \"0.22.0\"\n@@ -565,9 +553,9 @@ checksum = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.73\"\n+version = \"0.2.74\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bd7d4bd64732af4bf3a67f367c27df8520ad7e230c5817b8ff485864d80242b9\"\n+checksum = \"a2f02823cf78b754822df5f7f268fb59822e7296276d3e069d8e8cb26a14bd10\"\n \n [[package]]\n name = \"libloading\"\n@@ -619,9 +607,9 @@ dependencies = [\n \n [[package]]\n name = \"lsp-types\"\n-version = \"0.78.0\"\n+version = \"0.79.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d2e6cf68e3492cfa2035f0382c1da1b6ab045db0320feca505b86b4f13d66c27\"\n+checksum = \"7f1f86677fdbe8df5f88b99131b1424e50aad27bbe3e5900d221bc414bd72e9b\"\n dependencies = [\n  \"base64\",\n  \"bitflags\",\n@@ -810,6 +798,12 @@ version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"0b631f7e854af39a1739f401cf34a8a013dfe09eac4fa4dba91e9768bd28168d\"\n \n+[[package]]\n+name = \"oorandom\"\n+version = \"11.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a170cebd8021a008ea92e4db85a72f80b35df514ec664b296fdcbb654eac0b2c\"\n+\n [[package]]\n name = \"parking_lot\"\n version = \"0.11.0\"\n@@ -846,6 +840,25 @@ version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \n+[[package]]\n+name = \"perf-event\"\n+version = \"0.4.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"76c42ba5d85a2f4472b99f475fb60cf336d9b4c85b1ea8bb300fef2e3c7c8f89\"\n+dependencies = [\n+ \"libc\",\n+ \"perf-event-open-sys\",\n+]\n+\n+[[package]]\n+name = \"perf-event-open-sys\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"95db63e37862bc1b842135d2234ef9418f222cc660c6752f45e7cf9ddfb97f96\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n [[package]]\n name = \"petgraph\"\n version = \"0.5.1\"\n@@ -868,12 +881,6 @@ version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"b4596b6d070b27117e987119b4dac604f3c58cfb0b191112e24771b2faeac1a6\"\n \n-[[package]]\n-name = \"ppv-lite86\"\n-version = \"0.2.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"237a5ed80e274dbc66f86bd59c1e25edc039660be53194b5fe0a482e0f2612ea\"\n-\n [[package]]\n name = \"proc-macro2\"\n version = \"1.0.19\"\n@@ -1046,6 +1053,7 @@ dependencies = [\n  \"indexmap\",\n  \"itertools\",\n  \"log\",\n+ \"oorandom\",\n  \"ra_assists\",\n  \"ra_cfg\",\n  \"ra_db\",\n@@ -1056,7 +1064,6 @@ dependencies = [\n  \"ra_ssr\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n- \"rand\",\n  \"rustc-hash\",\n  \"stdx\",\n  \"test_utils\",\n@@ -1138,6 +1145,7 @@ dependencies = [\n  \"cfg-if\",\n  \"libc\",\n  \"once_cell\",\n+ \"perf-event\",\n  \"ra_arena\",\n ]\n \n@@ -1217,57 +1225,6 @@ dependencies = [\n  \"stdx\",\n ]\n \n-[[package]]\n-name = \"rand\"\n-version = \"0.7.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\n-dependencies = [\n- \"getrandom\",\n- \"libc\",\n- \"rand_chacha\",\n- \"rand_core\",\n- \"rand_hc\",\n- \"rand_pcg\",\n-]\n-\n-[[package]]\n-name = \"rand_chacha\"\n-version = \"0.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402\"\n-dependencies = [\n- \"ppv-lite86\",\n- \"rand_core\",\n-]\n-\n-[[package]]\n-name = \"rand_core\"\n-version = \"0.5.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n-dependencies = [\n- \"getrandom\",\n-]\n-\n-[[package]]\n-name = \"rand_hc\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n-dependencies = [\n- \"rand_core\",\n-]\n-\n-[[package]]\n-name = \"rand_pcg\"\n-version = \"0.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"16abd0c1b639e9eb4d7c50c0b8100b0d0f849be2349829c740fe8e6eb4816429\"\n-dependencies = [\n- \"rand_core\",\n-]\n-\n [[package]]\n name = \"rayon\"\n version = \"1.3.1\"\n@@ -1354,6 +1311,7 @@ dependencies = [\n  \"lsp-server\",\n  \"lsp-types\",\n  \"mimalloc\",\n+ \"oorandom\",\n  \"parking_lot\",\n  \"pico-args\",\n  \"ra_cfg\",\n@@ -1372,7 +1330,6 @@ dependencies = [\n  \"ra_text_edit\",\n  \"ra_toolchain\",\n  \"ra_tt\",\n- \"rand\",\n  \"rayon\",\n  \"rustc-hash\",\n  \"serde\",\n@@ -1387,9 +1344,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"669.0.0\"\n+version = \"671.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"456af5f09c006cf6c22c1a433ee0232c4bb74bdc6c647a010166a47c94ed2a63\"\n+checksum = \"22e1221f3bfa2943c942cf8da319ab2346887f8757778c29c7f1822cd27b521f\"\n dependencies = [\n  \"unicode-xid\",\n ]\n@@ -1414,26 +1371,26 @@ checksum = \"71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e\"\n \n [[package]]\n name = \"salsa\"\n-version = \"0.15.0\"\n+version = \"0.15.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"885b4b99dde959decc84e85dd943bd140b4aabd62db2f8206ef5270f77ec20b9\"\n+checksum = \"9ab29056d4fb4048a5f0d169c9b6e5526160c9ec37aded5a6879c2c9c445a8e4\"\n dependencies = [\n  \"crossbeam-utils\",\n  \"indexmap\",\n  \"lock_api\",\n  \"log\",\n+ \"oorandom\",\n  \"parking_lot\",\n- \"rand\",\n  \"rustc-hash\",\n  \"salsa-macros\",\n  \"smallvec\",\n ]\n \n [[package]]\n name = \"salsa-macros\"\n-version = \"0.15.0\"\n+version = \"0.15.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2c280ac85b15ac214b86ac4b407626a48e6a1c4f90769a582fec74aa57942b9f\"\n+checksum = \"a1c3aec007c63c4ed4cd7a018529fb0b5575c4562575fc6a40d6cd2ae0b792ef\"\n dependencies = [\n  \"heck\",\n  \"proc-macro2\",\n@@ -1484,9 +1441,9 @@ dependencies = [\n \n [[package]]\n name = \"semver\"\n-version = \"0.9.0\"\n+version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n+checksum = \"394cec28fa623e00903caf7ba4fa6fb9a0e260280bb8cdbbba029611108a0190\"\n dependencies = [\n  \"semver-parser\",\n  \"serde\",\n@@ -1576,9 +1533,9 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.36\"\n+version = \"1.0.38\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4cdb98bcb1f9d81d07b536179c269ea15999b5d14ea958196413869445bb5250\"\n+checksum = \"e69abc24912995b3038597a7a593be5053eb0fb44f3cc5beec0deb421790c1f4\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -1665,9 +1622,9 @@ checksum = \"53953d2d3a5ad81d9f844a32f14ebb121f50b650cd59d0ee2a07cf13c617efed\"\n \n [[package]]\n name = \"tracing\"\n-version = \"0.1.17\"\n+version = \"0.1.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dbdf4ccd1652592b01286a5dbe1e2a77d78afaa34beadd9872a5f7396f92aaa9\"\n+checksum = \"f0aae59226cf195d8e74d4b34beae1859257efb4e5fed3f147d2dc2c7d372178\"\n dependencies = [\n  \"cfg-if\",\n  \"tracing-attributes\",\n@@ -1687,9 +1644,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-core\"\n-version = \"0.1.11\"\n+version = \"0.1.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"94ae75f0d28ae10786f3b1895c55fe72e79928fd5ccdebb5438c75e93fec178f\"\n+checksum = \"d593f98af59ebc017c0648f0117525db358745a8894a8d684e185ba3f45954f9\"\n dependencies = [\n  \"lazy_static\",\n ]\n@@ -1717,9 +1674,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-subscriber\"\n-version = \"0.2.9\"\n+version = \"0.2.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e4f5dd7095c2481b7b3cbed71c8de53085fb3542bc3c2b4c73cba43e8f11c7ba\"\n+checksum = \"f7b33f8b2ef2ab0c3778c12646d9c42a24f7772bee4cdafc72199644a9f58fdc\"\n dependencies = [\n  \"ansi_term\",\n  \"chrono\",\n@@ -1749,6 +1706,12 @@ dependencies = [\n  \"tracing-subscriber\",\n ]\n \n+[[package]]\n+name = \"ungrammar\"\n+version = \"1.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c4e20e58a08ee1bcf8a4695cf74550cf054d6c489105f594beacb2c684210aad\"\n+\n [[package]]\n name = \"unicode-bidi\"\n version = \"0.3.4\"\n@@ -1825,12 +1788,6 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n-[[package]]\n-name = \"wasi\"\n-version = \"0.9.0+wasi-snapshot-preview1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n-\n [[package]]\n name = \"winapi\"\n version = \"0.2.8\"\n@@ -1874,6 +1831,12 @@ version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \n+[[package]]\n+name = \"write-json\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"06069a848f95fceae3e5e03c0ddc8cb78452b56654ee0c8e68f938cf790fb9e3\"\n+\n [[package]]\n name = \"ws2_32-sys\"\n version = \"0.2.1\"\n@@ -1893,5 +1856,7 @@ dependencies = [\n  \"pico-args\",\n  \"proc-macro2\",\n  \"quote\",\n+ \"ungrammar\",\n  \"walkdir\",\n+ \"write-json\",\n ]"}, {"sha": "ff8a1e5689d595e5ba27c1efcb06ae8a4fc88f7f", "filename": "crates/flycheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fflycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fflycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2FCargo.toml?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -11,7 +11,7 @@ doctest = false\n [dependencies]\n crossbeam-channel = \"0.4.0\"\n log = \"0.4.8\"\n-cargo_metadata = \"0.10.0\"\n+cargo_metadata = \"0.11.1\"\n serde_json = \"1.0.48\"\n jod-thread = \"0.1.1\"\n ra_toolchain = { path = \"../ra_toolchain\" }"}, {"sha": "7c38f5ef9d5381ece6f62fea0fc796a0b1d6859e", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -24,6 +24,7 @@ pub enum FlycheckConfig {\n         command: String,\n         target_triple: Option<String>,\n         all_targets: bool,\n+        no_default_features: bool,\n         all_features: bool,\n         features: Vec<String>,\n         extra_args: Vec<String>,\n@@ -180,6 +181,7 @@ impl FlycheckActor {\n             FlycheckConfig::CargoCommand {\n                 command,\n                 target_triple,\n+                no_default_features,\n                 all_targets,\n                 all_features,\n                 extra_args,\n@@ -198,9 +200,14 @@ impl FlycheckActor {\n                 }\n                 if *all_features {\n                     cmd.arg(\"--all-features\");\n-                } else if !features.is_empty() {\n-                    cmd.arg(\"--features\");\n-                    cmd.arg(features.join(\" \"));\n+                } else {\n+                    if *no_default_features {\n+                        cmd.arg(\"--no-default-features\");\n+                    }\n+                    if !features.is_empty() {\n+                        cmd.arg(\"--features\");\n+                        cmd.arg(features.join(\" \"));\n+                    }\n                 }\n                 cmd.args(extra_args);\n                 cmd"}, {"sha": "afd3fd4b9e37c8d8211aed5cf0b675b316506f7b", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -73,6 +73,10 @@ impl<'a> AssistContext<'a> {\n         self.sema.db\n     }\n \n+    pub(crate) fn source_file(&self) -> &SourceFile {\n+        &self.source_file\n+    }\n+\n     // NB, this ignores active selection.\n     pub(crate) fn offset(&self) -> TextSize {\n         self.frange.range.start()"}, {"sha": "15ec75c956a50827b982a86a5832ec338ff1680b", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -32,7 +32,7 @@ impl<'a> AstTransform<'a> for NullTransformer {\n \n pub struct SubstituteTypeParams<'a> {\n     source_scope: &'a SemanticsScope<'a>,\n-    substs: FxHashMap<hir::TypeParam, ast::TypeRef>,\n+    substs: FxHashMap<hir::TypeParam, ast::Type>,\n     previous: Box<dyn AstTransform<'a> + 'a>,\n }\n \n@@ -41,7 +41,7 @@ impl<'a> SubstituteTypeParams<'a> {\n         source_scope: &'a SemanticsScope<'a>,\n         // FIXME: there's implicit invariant that `trait_` and  `source_scope` match...\n         trait_: hir::Trait,\n-        impl_def: ast::ImplDef,\n+        impl_def: ast::Impl,\n     ) -> SubstituteTypeParams<'a> {\n         let substs = get_syntactic_substs(impl_def).unwrap_or_default();\n         let generic_def: hir::GenericDef = trait_.into();\n@@ -63,7 +63,7 @@ impl<'a> SubstituteTypeParams<'a> {\n                     let default = k.default(source_scope.db)?;\n                     Some((\n                         k,\n-                        ast::make::type_ref(\n+                        ast::make::ty(\n                             &default\n                                 .display_source_code(source_scope.db, source_scope.module()?.into())\n                                 .ok()?,\n@@ -79,29 +79,35 @@ impl<'a> SubstituteTypeParams<'a> {\n         };\n \n         // FIXME: It would probably be nicer if we could get this via HIR (i.e. get the\n-        // trait ref, and then go from the types in the substs back to the syntax)\n-        fn get_syntactic_substs(impl_def: ast::ImplDef) -> Option<Vec<ast::TypeRef>> {\n-            let target_trait = impl_def.target_trait()?;\n+        // trait ref, and then go from the types in the substs back to the syntax).\n+        fn get_syntactic_substs(impl_def: ast::Impl) -> Option<Vec<ast::Type>> {\n+            let target_trait = impl_def.trait_()?;\n             let path_type = match target_trait {\n-                ast::TypeRef::PathType(path) => path,\n+                ast::Type::PathType(path) => path,\n                 _ => return None,\n             };\n-            let type_arg_list = path_type.path()?.segment()?.type_arg_list()?;\n+            let generic_arg_list = path_type.path()?.segment()?.generic_arg_list()?;\n+\n             let mut result = Vec::new();\n-            for type_arg in type_arg_list.type_args() {\n-                let type_arg: ast::TypeArg = type_arg;\n-                result.push(type_arg.type_ref()?);\n+            for generic_arg in generic_arg_list.generic_args() {\n+                match generic_arg {\n+                    ast::GenericArg::TypeArg(type_arg) => result.push(type_arg.ty()?),\n+                    ast::GenericArg::AssocTypeArg(_)\n+                    | ast::GenericArg::LifetimeArg(_)\n+                    | ast::GenericArg::ConstArg(_) => (),\n+                }\n             }\n+\n             Some(result)\n         }\n     }\n     fn get_substitution_inner(\n         &self,\n         node: &ra_syntax::SyntaxNode,\n     ) -> Option<ra_syntax::SyntaxNode> {\n-        let type_ref = ast::TypeRef::cast(node.clone())?;\n+        let type_ref = ast::Type::cast(node.clone())?;\n         let path = match &type_ref {\n-            ast::TypeRef::PathType(path_type) => path_type.path()?,\n+            ast::Type::PathType(path_type) => path_type.path()?,\n             _ => return None,\n         };\n         // FIXME: use `hir::Path::from_src` instead.\n@@ -157,7 +163,7 @@ impl<'a> QualifyPaths<'a> {\n \n                 let type_args = p\n                     .segment()\n-                    .and_then(|s| s.type_arg_list())\n+                    .and_then(|s| s.generic_arg_list())\n                     .map(|arg_list| apply(self, arg_list));\n                 if let Some(type_args) = type_args {\n                     let last_segment = path.segment().unwrap();"}, {"sha": "b67438b6ba26689dac22012ed73c58eae14fb259", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -29,8 +29,8 @@ use crate::{\n // }\n // ```\n pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let input = ctx.find_node_at_offset::<ast::AttrInput>()?;\n-    let attr = input.syntax().parent().and_then(ast::Attr::cast)?;\n+    let attr = ctx.find_node_at_offset::<ast::Attr>()?;\n+    let input = attr.token_tree()?;\n \n     let attr_name = attr\n         .syntax()"}, {"sha": "135a2ac9c90f96170f7e69f4da4e6e1a87bc4781", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,6 +1,6 @@\n use hir::HirDisplay;\n use ra_syntax::{\n-    ast::{self, AstNode, LetStmt, NameOwner, TypeAscriptionOwner},\n+    ast::{self, AstNode, LetStmt, NameOwner},\n     TextRange,\n };\n \n@@ -22,20 +22,20 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let stmt = ctx.find_node_at_offset::<LetStmt>()?;\n-    let module = ctx.sema.scope(stmt.syntax()).module()?;\n-    let expr = stmt.initializer()?;\n+    let let_stmt = ctx.find_node_at_offset::<LetStmt>()?;\n+    let module = ctx.sema.scope(let_stmt.syntax()).module()?;\n+    let expr = let_stmt.initializer()?;\n     // Must be a binding\n-    let pat = match stmt.pat()? {\n-        ast::Pat::BindPat(bind_pat) => bind_pat,\n+    let pat = match let_stmt.pat()? {\n+        ast::Pat::IdentPat(bind_pat) => bind_pat,\n         _ => return None,\n     };\n     let pat_range = pat.syntax().text_range();\n     // The binding must have a name\n     let name = pat.name()?;\n     let name_range = name.syntax().text_range();\n-    let stmt_range = stmt.syntax().text_range();\n-    let eq_range = stmt.eq_token()?.text_range();\n+    let stmt_range = let_stmt.syntax().text_range();\n+    let eq_range = let_stmt.eq_token()?.text_range();\n     // Assist should only be applicable if cursor is between 'let' and '='\n     let let_range = TextRange::new(stmt_range.start(), eq_range.start());\n     let cursor_in_range = let_range.contains_range(ctx.frange.range);\n@@ -44,9 +44,9 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     }\n     // Assist not applicable if the type has already been specified\n     // and it has no placeholders\n-    let ascribed_ty = stmt.ascribed_type();\n+    let ascribed_ty = let_stmt.ty();\n     if let Some(ty) = &ascribed_ty {\n-        if ty.syntax().descendants().find_map(ast::PlaceholderType::cast).is_none() {\n+        if ty.syntax().descendants().find_map(ast::InferType::cast).is_none() {\n             return None;\n         }\n     }"}, {"sha": "95a750aeec2fbf3feeb5c3eb6b6c4250baed19a6", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -111,30 +111,31 @@ fn add_missing_impl_members_inner(\n     label: &'static str,\n ) -> Option<()> {\n     let _p = ra_prof::profile(\"add_missing_impl_members_inner\");\n-    let impl_def = ctx.find_node_at_offset::<ast::ImplDef>()?;\n-    let impl_item_list = impl_def.item_list()?;\n+    let impl_def = ctx.find_node_at_offset::<ast::Impl>()?;\n+    let impl_item_list = impl_def.assoc_item_list()?;\n \n     let trait_ = resolve_target_trait(&ctx.sema, &impl_def)?;\n \n     let def_name = |item: &ast::AssocItem| -> Option<SmolStr> {\n         match item {\n-            ast::AssocItem::FnDef(def) => def.name(),\n-            ast::AssocItem::TypeAliasDef(def) => def.name(),\n-            ast::AssocItem::ConstDef(def) => def.name(),\n+            ast::AssocItem::Fn(def) => def.name(),\n+            ast::AssocItem::TypeAlias(def) => def.name(),\n+            ast::AssocItem::Const(def) => def.name(),\n+            ast::AssocItem::MacroCall(_) => None,\n         }\n         .map(|it| it.text().clone())\n     };\n \n     let missing_items = get_missing_assoc_items(&ctx.sema, &impl_def)\n         .iter()\n         .map(|i| match i {\n-            hir::AssocItem::Function(i) => ast::AssocItem::FnDef(i.source(ctx.db()).value),\n-            hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAliasDef(i.source(ctx.db()).value),\n-            hir::AssocItem::Const(i) => ast::AssocItem::ConstDef(i.source(ctx.db()).value),\n+            hir::AssocItem::Function(i) => ast::AssocItem::Fn(i.source(ctx.db()).value),\n+            hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAlias(i.source(ctx.db()).value),\n+            hir::AssocItem::Const(i) => ast::AssocItem::Const(i.source(ctx.db()).value),\n         })\n         .filter(|t| def_name(&t).is_some())\n         .filter(|t| match t {\n-            ast::AssocItem::FnDef(def) => match mode {\n+            ast::AssocItem::Fn(def) => match mode {\n                 AddMissingImplMembersMode::DefaultMethodsOnly => def.body().is_some(),\n                 AddMissingImplMembersMode::NoDefaultMethods => def.body().is_none(),\n             },\n@@ -157,10 +158,8 @@ fn add_missing_impl_members_inner(\n             .into_iter()\n             .map(|it| ast_transform::apply(&*ast_transform, it))\n             .map(|it| match it {\n-                ast::AssocItem::FnDef(def) => ast::AssocItem::FnDef(add_body(def)),\n-                ast::AssocItem::TypeAliasDef(def) => {\n-                    ast::AssocItem::TypeAliasDef(def.remove_bounds())\n-                }\n+                ast::AssocItem::Fn(def) => ast::AssocItem::Fn(add_body(def)),\n+                ast::AssocItem::TypeAlias(def) => ast::AssocItem::TypeAlias(def.remove_bounds()),\n                 _ => it,\n             })\n             .map(|it| edit::remove_attrs_and_docs(&it));\n@@ -173,7 +172,7 @@ fn add_missing_impl_members_inner(\n             Some(cap) => {\n                 let mut cursor = Cursor::Before(first_new_item.syntax());\n                 let placeholder;\n-                if let ast::AssocItem::FnDef(func) = &first_new_item {\n+                if let ast::AssocItem::Fn(func) = &first_new_item {\n                     if let Some(m) = func.syntax().descendants().find_map(ast::MacroCall::cast) {\n                         if m.syntax().text() == \"todo!()\" {\n                             placeholder = m;\n@@ -191,7 +190,7 @@ fn add_missing_impl_members_inner(\n     })\n }\n \n-fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n+fn add_body(fn_def: ast::Fn) -> ast::Fn {\n     if fn_def.body().is_some() {\n         return fn_def;\n     }"}, {"sha": "01e7b7a44cba776197fbf55e7d7b5eed69cb5c6c", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -92,7 +92,7 @@ impl AutoImportAssets {\n \n     fn for_regular_path(path_under_caret: ast::Path, ctx: &AssistContext) -> Option<Self> {\n         let syntax_under_caret = path_under_caret.syntax().to_owned();\n-        if syntax_under_caret.ancestors().find_map(ast::UseItem::cast).is_some() {\n+        if syntax_under_caret.ancestors().find_map(ast::Use::cast).is_some() {\n             return None;\n         }\n "}, {"sha": "b83c944049c75555ab328b3c10716d4606265cb4", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -20,9 +20,9 @@ use test_utils::mark;\n pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let ret_type = ctx.find_node_at_offset::<ast::RetType>()?;\n     // FIXME: extend to lambdas as well\n-    let fn_def = ret_type.syntax().parent().and_then(ast::FnDef::cast)?;\n+    let fn_def = ret_type.syntax().parent().and_then(ast::Fn::cast)?;\n \n-    let type_ref = &ret_type.type_ref()?;\n+    let type_ref = &ret_type.ty()?;\n     let ret_type_str = type_ref.syntax().text().to_string();\n     let first_part_ret_type = ret_type_str.splitn(2, '<').next();\n     if let Some(ret_type_first_part) = first_part_ret_type {\n@@ -74,6 +74,7 @@ impl TailReturnCollector {\n             let expr = match &stmt {\n                 ast::Stmt::ExprStmt(stmt) => stmt.expr(),\n                 ast::Stmt::LetStmt(stmt) => stmt.initializer(),\n+                ast::Stmt::Item(_) => continue,\n             };\n             if let Some(expr) = &expr {\n                 self.handle_exprs(expr, collect_break);\n@@ -94,6 +95,7 @@ impl TailReturnCollector {\n                         let expr_stmt = match &expr_stmt {\n                             ast::Stmt::ExprStmt(stmt) => stmt.expr(),\n                             ast::Stmt::LetStmt(stmt) => stmt.initializer(),\n+                            ast::Stmt::Item(_) => None,\n                         };\n                         if let Some(expr) = &expr_stmt {\n                             self.handle_exprs(expr, collect_break);\n@@ -239,8 +241,7 @@ fn get_tail_expr_from_block(expr: &Expr) -> Option<Vec<NodeType>> {\n         Expr::ArrayExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::ParenExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::PathExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n-        Expr::Label(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n-        Expr::RecordLit(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n+        Expr::RecordExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::IndexExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::MethodCallExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::AwaitExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),"}, {"sha": "724daa93f41b75b5d12330f123336b02d3b14c37", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,9 +1,7 @@\n use ra_syntax::{\n     ast::{self, NameOwner, VisibilityOwner},\n     AstNode,\n-    SyntaxKind::{\n-        CONST_DEF, ENUM_DEF, FN_DEF, MODULE, STATIC_DEF, STRUCT_DEF, TRAIT_DEF, VISIBILITY,\n-    },\n+    SyntaxKind::{CONST, ENUM, FN, MODULE, STATIC, STRUCT, TRAIT, VISIBILITY},\n     T,\n };\n use test_utils::mark;\n@@ -38,7 +36,7 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     let (offset, target) = if let Some(keyword) = item_keyword {\n         let parent = keyword.parent();\n-        let def_kws = vec![CONST_DEF, STATIC_DEF, FN_DEF, MODULE, STRUCT_DEF, ENUM_DEF, TRAIT_DEF];\n+        let def_kws = vec![CONST, STATIC, FN, MODULE, STRUCT, ENUM, TRAIT];\n         // Parent is not a definition, can't add visibility\n         if !def_kws.iter().any(|&def_kw| def_kw == parent.kind()) {\n             return None;\n@@ -49,7 +47,7 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         }\n         (vis_offset(&parent), keyword.text_range())\n     } else if let Some(field_name) = ctx.find_node_at_offset::<ast::Name>() {\n-        let field = field_name.syntax().ancestors().find_map(ast::RecordFieldDef::cast)?;\n+        let field = field_name.syntax().ancestors().find_map(ast::RecordField::cast)?;\n         if field.name()? != field_name {\n             mark::hit!(change_visibility_field_false_positive);\n             return None;\n@@ -58,7 +56,7 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n             return None;\n         }\n         (vis_offset(field.syntax()), field_name.syntax().text_range())\n-    } else if let Some(field) = ctx.find_node_at_offset::<ast::TupleFieldDef>() {\n+    } else if let Some(field) = ctx.find_node_at_offset::<ast::TupleField>() {\n         if field.visibility().is_some() {\n             return None;\n         }"}, {"sha": "6816a2709e47c5ed949509c0ced1141dc125ca9b", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n         make,\n     },\n     AstNode,\n-    SyntaxKind::{FN_DEF, LOOP_EXPR, L_CURLY, R_CURLY, WHILE_EXPR, WHITESPACE},\n+    SyntaxKind::{FN, LOOP_EXPR, L_CURLY, R_CURLY, WHILE_EXPR, WHITESPACE},\n     SyntaxNode,\n };\n \n@@ -51,11 +51,11 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n     // Check if there is an IfLet that we can handle.\n     let if_let_pat = match cond.pat() {\n         None => None, // No IfLet, supported.\n-        Some(ast::Pat::TupleStructPat(pat)) if pat.args().count() == 1 => {\n+        Some(ast::Pat::TupleStructPat(pat)) if pat.fields().count() == 1 => {\n             let path = pat.path()?;\n             match path.qualifier() {\n                 None => {\n-                    let bound_ident = pat.args().next().unwrap();\n+                    let bound_ident = pat.fields().next().unwrap();\n                     Some((path, bound_ident))\n                 }\n                 Some(_) => return None,\n@@ -88,7 +88,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n \n     let early_expression: ast::Expr = match parent_container.kind() {\n         WHILE_EXPR | LOOP_EXPR => make::expr_continue(),\n-        FN_DEF => make::expr_return(),\n+        FN => make::expr_return(),\n         _ => return None,\n     };\n \n@@ -123,7 +123,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                         let happy_arm = {\n                             let pat = make::tuple_struct_pat(\n                                 path,\n-                                once(make::bind_pat(make::name(\"it\")).into()),\n+                                once(make::ident_pat(make::name(\"it\")).into()),\n                             );\n                             let expr = {\n                                 let name_ref = make::name_ref(\"it\");\n@@ -136,15 +136,15 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n \n                         let sad_arm = make::match_arm(\n                             // FIXME: would be cool to use `None` or `Err(_)` if appropriate\n-                            once(make::placeholder_pat().into()),\n+                            once(make::wildcard_pat().into()),\n                             early_expression,\n                         );\n \n                         make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n                     };\n \n                     let let_stmt = make::let_stmt(\n-                        make::bind_pat(make::name(&bound_ident.syntax().to_string())).into(),\n+                        make::ident_pat(make::name(&bound_ident.syntax().to_string())).into(),\n                         Some(match_expr),\n                     );\n                     let let_stmt = let_stmt.indent(if_indent_level);"}, {"sha": "eb216a81a11a86e4beacb94b15a80d49d97f02af", "filename": "crates/ra_assists/src/handlers/expand_glob_import.rs", "status": "added", "additions": 391, "deletions": 0, "changes": 391, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -0,0 +1,391 @@\n+use hir::{AssocItem, MacroDef, ModuleDef, Name, PathResolution, ScopeDef, SemanticsScope};\n+use ra_ide_db::{\n+    defs::{classify_name_ref, Definition, NameRefClass},\n+    RootDatabase,\n+};\n+use ra_syntax::{algo, ast, match_ast, AstNode, SyntaxNode, SyntaxToken, T};\n+\n+use crate::{\n+    assist_context::{AssistBuilder, AssistContext, Assists},\n+    AssistId, AssistKind,\n+};\n+\n+use either::Either;\n+\n+// Assist: expand_glob_import\n+//\n+// Expands glob imports.\n+//\n+// ```\n+// mod foo {\n+//     pub struct Bar;\n+//     pub struct Baz;\n+// }\n+//\n+// use foo::*<|>;\n+//\n+// fn qux(bar: Bar, baz: Baz) {}\n+// ```\n+// ->\n+// ```\n+// mod foo {\n+//     pub struct Bar;\n+//     pub struct Baz;\n+// }\n+//\n+// use foo::{Baz, Bar};\n+//\n+// fn qux(bar: Bar, baz: Baz) {}\n+// ```\n+pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let star = ctx.find_token_at_offset(T![*])?;\n+    let mod_path = find_mod_path(&star)?;\n+\n+    let source_file = ctx.source_file();\n+    let scope = ctx.sema.scope_at_offset(source_file.syntax(), ctx.offset());\n+\n+    let defs_in_mod = find_defs_in_mod(ctx, scope, &mod_path)?;\n+    let name_refs_in_source_file =\n+        source_file.syntax().descendants().filter_map(ast::NameRef::cast).collect();\n+    let used_names = find_used_names(ctx, defs_in_mod, name_refs_in_source_file);\n+\n+    let parent = star.parent().parent()?;\n+    acc.add(\n+        AssistId(\"expand_glob_import\", AssistKind::RefactorRewrite),\n+        \"Expand glob import\",\n+        parent.text_range(),\n+        |builder| {\n+            replace_ast(builder, &parent, mod_path, used_names);\n+        },\n+    )\n+}\n+\n+fn find_mod_path(star: &SyntaxToken) -> Option<ast::Path> {\n+    star.ancestors().find_map(|n| ast::UseTree::cast(n).and_then(|u| u.path()))\n+}\n+\n+#[derive(PartialEq)]\n+enum Def {\n+    ModuleDef(ModuleDef),\n+    MacroDef(MacroDef),\n+}\n+\n+impl Def {\n+    fn name(&self, db: &RootDatabase) -> Option<Name> {\n+        match self {\n+            Def::ModuleDef(def) => def.name(db),\n+            Def::MacroDef(def) => def.name(db),\n+        }\n+    }\n+}\n+\n+fn find_defs_in_mod(\n+    ctx: &AssistContext,\n+    from: SemanticsScope<'_>,\n+    path: &ast::Path,\n+) -> Option<Vec<Def>> {\n+    let hir_path = ctx.sema.lower_path(&path)?;\n+    let module = if let Some(PathResolution::Def(ModuleDef::Module(module))) =\n+        from.resolve_hir_path_qualifier(&hir_path)\n+    {\n+        module\n+    } else {\n+        return None;\n+    };\n+\n+    let module_scope = module.scope(ctx.db(), from.module());\n+\n+    let mut defs = vec![];\n+    for (_, def) in module_scope {\n+        match def {\n+            ScopeDef::ModuleDef(def) => defs.push(Def::ModuleDef(def)),\n+            ScopeDef::MacroDef(def) => defs.push(Def::MacroDef(def)),\n+            _ => continue,\n+        }\n+    }\n+\n+    Some(defs)\n+}\n+\n+fn find_used_names(\n+    ctx: &AssistContext,\n+    defs_in_mod: Vec<Def>,\n+    name_refs_in_source_file: Vec<ast::NameRef>,\n+) -> Vec<Name> {\n+    let defs_in_source_file = name_refs_in_source_file\n+        .iter()\n+        .filter_map(|r| classify_name_ref(&ctx.sema, r))\n+        .filter_map(|rc| match rc {\n+            NameRefClass::Definition(Definition::ModuleDef(def)) => Some(Def::ModuleDef(def)),\n+            NameRefClass::Definition(Definition::Macro(def)) => Some(Def::MacroDef(def)),\n+            _ => None,\n+        })\n+        .collect::<Vec<Def>>();\n+\n+    defs_in_mod\n+        .iter()\n+        .filter(|def| {\n+            if let Def::ModuleDef(ModuleDef::Trait(tr)) = def {\n+                for item in tr.items(ctx.db()) {\n+                    if let AssocItem::Function(f) = item {\n+                        if defs_in_source_file.contains(&Def::ModuleDef(ModuleDef::Function(f))) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+\n+            defs_in_source_file.contains(def)\n+        })\n+        .filter_map(|d| d.name(ctx.db()))\n+        .collect()\n+}\n+\n+fn replace_ast(\n+    builder: &mut AssistBuilder,\n+    node: &SyntaxNode,\n+    path: ast::Path,\n+    used_names: Vec<Name>,\n+) {\n+    let replacement: Either<ast::UseTree, ast::UseTreeList> = match used_names.as_slice() {\n+        [name] => Either::Left(ast::make::use_tree(\n+            ast::make::path_from_text(&format!(\"{}::{}\", path, name)),\n+            None,\n+            None,\n+            false,\n+        )),\n+        names => Either::Right(ast::make::use_tree_list(names.iter().map(|n| {\n+            ast::make::use_tree(ast::make::path_from_text(&n.to_string()), None, None, false)\n+        }))),\n+    };\n+\n+    let mut replace_node = |replacement: Either<ast::UseTree, ast::UseTreeList>| {\n+        algo::diff(node, &replacement.either(|u| u.syntax().clone(), |ut| ut.syntax().clone()))\n+            .into_text_edit(builder.text_edit_builder());\n+    };\n+\n+    match_ast! {\n+        match node {\n+            ast::UseTree(use_tree) => {\n+                replace_node(replacement);\n+            },\n+            ast::UseTreeList(use_tree_list) => {\n+                replace_node(replacement);\n+            },\n+            ast::Use(use_item) => {\n+                builder.replace_ast(use_item, ast::make::use_(replacement.left_or_else(|ut| ast::make::use_tree(path, Some(ut), None, false))));\n+            },\n+            _ => {},\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn expanding_glob_import() {\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    pub struct Bar;\n+    pub struct Baz;\n+    pub struct Qux;\n+\n+    pub fn f() {}\n+}\n+\n+use foo::*<|>;\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+}\n+\",\n+            r\"\n+mod foo {\n+    pub struct Bar;\n+    pub struct Baz;\n+    pub struct Qux;\n+\n+    pub fn f() {}\n+}\n+\n+use foo::{Baz, Bar, f};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn expanding_glob_import_with_existing_explicit_names() {\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    pub struct Bar;\n+    pub struct Baz;\n+    pub struct Qux;\n+\n+    pub fn f() {}\n+}\n+\n+use foo::{*<|>, f};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+}\n+\",\n+            r\"\n+mod foo {\n+    pub struct Bar;\n+    pub struct Baz;\n+    pub struct Qux;\n+\n+    pub fn f() {}\n+}\n+\n+use foo::{Baz, Bar, f};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn expanding_nested_glob_import() {\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    mod baz {\n+        pub fn g() {}\n+    }\n+}\n+\n+use foo::{bar::{*<|>, f}, baz::*};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+}\n+\",\n+            r\"\n+mod foo {\n+    mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    mod baz {\n+        pub fn g() {}\n+    }\n+}\n+\n+use foo::{bar::{Baz, Bar, f}, baz::*};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn expanding_glob_import_with_macro_defs() {\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+//- /lib.rs crate:foo\n+#[macro_export]\n+macro_rules! bar {\n+    () => ()\n+}\n+\n+pub fn baz() {}\n+\n+//- /main.rs crate:main deps:foo\n+use foo::*<|>;\n+\n+fn main() {\n+    bar!();\n+    baz();\n+}\n+\",\n+            r\"\n+use foo::{bar, baz};\n+\n+fn main() {\n+    bar!();\n+    baz();\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn expanding_glob_import_with_trait_method_uses() {\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+//- /lib.rs crate:foo\n+pub trait Tr {\n+    fn method(&self) {}\n+}\n+impl Tr for () {}\n+\n+//- /main.rs crate:main deps:foo\n+use foo::*<|>;\n+\n+fn main() {\n+    ().method();\n+}\n+\",\n+            r\"\n+use foo::Tr;\n+\n+fn main() {\n+    ().method();\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn expanding_is_not_applicable_if_cursor_is_not_in_star_token() {\n+        check_assist_not_applicable(\n+            expand_glob_import,\n+            r\"\n+    mod foo {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+    }\n+\n+    use foo::Bar<|>;\n+\n+    fn qux(bar: Bar, baz: Baz) {}\n+    \",\n+        )\n+    }\n+}"}, {"sha": "ccec688caee1a4858b809b27234ac98ecc79d77f", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n     acc: &mut Assists,\n     ctx: &AssistContext,\n ) -> Option<()> {\n-    let variant = ctx.find_node_at_offset::<ast::EnumVariant>()?;\n+    let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let field_list = match variant.kind() {\n         ast::StructKind::Tuple(field_list) => field_list,\n         _ => return None,"}, {"sha": "cc62db0c446ae10041dd0b27e739350dcdc2b7d4", "filename": "crates/ra_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,7 +1,7 @@\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxKind::{\n-        BLOCK_EXPR, BREAK_EXPR, COMMENT, LAMBDA_EXPR, LOOP_EXPR, MATCH_ARM, PATH_EXPR, RETURN_EXPR,\n+        BLOCK_EXPR, BREAK_EXPR, CLOSURE_EXPR, COMMENT, LOOP_EXPR, MATCH_ARM, PATH_EXPR, RETURN_EXPR,\n     },\n     SyntaxNode,\n };\n@@ -45,7 +45,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         target,\n         move |edit| {\n             let field_shorthand =\n-                match to_extract.syntax().parent().and_then(ast::RecordField::cast) {\n+                match to_extract.syntax().parent().and_then(ast::RecordExprField::cast) {\n                     Some(field) => field.name_ref(),\n                     None => None,\n                 };\n@@ -148,7 +148,7 @@ impl Anchor {\n             }\n \n             if let Some(parent) = node.parent() {\n-                if parent.kind() == MATCH_ARM || parent.kind() == LAMBDA_EXPR {\n+                if parent.kind() == MATCH_ARM || parent.kind() == CLOSURE_EXPR {\n                     return Some(Anchor::WrapInBlock(node));\n                 }\n             }"}, {"sha": "6698d1a27a21b3e5f06d534878c08c88c8912b8d", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n \n     let mut arms: Vec<MatchArm> = match_arm_list.arms().collect();\n     if arms.len() == 1 {\n-        if let Some(Pat::PlaceholderPat(..)) = arms[0].pat() {\n+        if let Some(Pat::WildcardPat(..)) = arms[0].pat() {\n             arms.clear();\n         }\n     }\n@@ -116,17 +116,15 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             match (first_new_arm, ctx.config.snippet_cap) {\n                 (Some(first_new_arm), Some(cap)) => {\n                     let extend_lifetime;\n-                    let cursor = match first_new_arm\n-                        .syntax()\n-                        .descendants()\n-                        .find_map(ast::PlaceholderPat::cast)\n-                    {\n-                        Some(it) => {\n-                            extend_lifetime = it.syntax().clone();\n-                            Cursor::Replace(&extend_lifetime)\n-                        }\n-                        None => Cursor::Before(first_new_arm.syntax()),\n-                    };\n+                    let cursor =\n+                        match first_new_arm.syntax().descendants().find_map(ast::WildcardPat::cast)\n+                        {\n+                            Some(it) => {\n+                                extend_lifetime = it.syntax().clone();\n+                                Cursor::Replace(&extend_lifetime)\n+                            }\n+                            None => Cursor::Before(first_new_arm.syntax()),\n+                        };\n                     let snippet = render_snippet(cap, new_arm_list.syntax(), cursor);\n                     builder.replace_snippet(cap, old_range, snippet);\n                 }\n@@ -152,7 +150,7 @@ fn does_pat_match_variant(pat: &Pat, var: &Pat) -> bool {\n     let first_node_text = |pat: &Pat| pat.syntax().first_child().map(|node| node.text());\n \n     let pat_head = match pat {\n-        Pat::BindPat(bind_pat) => {\n+        Pat::IdentPat(bind_pat) => {\n             if let Some(p) = bind_pat.pat() {\n                 first_node_text(&p)\n             } else {\n@@ -199,12 +197,11 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> O\n     // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though\n     let pat: ast::Pat = match var.source(db).value.kind() {\n         ast::StructKind::Tuple(field_list) => {\n-            let pats =\n-                iter::repeat(make::placeholder_pat().into()).take(field_list.fields().count());\n+            let pats = iter::repeat(make::wildcard_pat().into()).take(field_list.fields().count());\n             make::tuple_struct_pat(path, pats).into()\n         }\n         ast::StructKind::Record(field_list) => {\n-            let pats = field_list.fields().map(|f| make::bind_pat(f.name().unwrap()).into());\n+            let pats = field_list.fields().map(|f| make::ident_pat(f.name().unwrap()).into());\n             make::record_pat(path, pats).into()\n         }\n         ast::StructKind::Unit => make::path_pat(path),"}, {"sha": "1aefa79cc3052b9f4a617b1717ff125769b5bdf9", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -82,7 +82,7 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n }\n \n fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let record_field: ast::RecordField = ctx.find_node_at_offset()?;\n+    let record_field: ast::RecordExprField = ctx.find_node_at_offset()?;\n     let (record_field_def, _) = ctx.sema.resolve_record_field(&record_field)?;\n \n     let current_module = ctx.sema.scope(record_field.syntax()).module()?;"}, {"sha": "90ece9fab050eb5386ca5b9b6ab57aa0f915c3f2", "filename": "crates/ra_assists/src/handlers/generate_derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -26,7 +26,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n pub(crate) fn generate_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let cap = ctx.config.snippet_cap?;\n-    let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n+    let nominal = ctx.find_node_at_offset::<ast::AdtDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     let target = nominal.syntax().text_range();\n     acc.add(\n@@ -58,7 +58,7 @@ pub(crate) fn generate_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<\n }\n \n // Insert `derive` after doc comments.\n-fn derive_insertion_offset(nominal: &ast::NominalDef) -> Option<TextSize> {\n+fn derive_insertion_offset(nominal: &ast::AdtDef) -> Option<TextSize> {\n     let non_ws_child = nominal\n         .syntax()\n         .children_with_tokens()"}, {"sha": "4c1aef8a21f90543a6039e3399bf12f4b135e06d", "filename": "crates/ra_assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -22,7 +22,7 @@ use crate::{utils::FamousDefs, AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let variant = ctx.find_node_at_offset::<ast::EnumVariant>()?;\n+    let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let variant_name = variant.name()?;\n     let enum_name = variant.parent_enum().name()?;\n     let field_list = match variant.kind() {\n@@ -32,9 +32,9 @@ pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext\n     if field_list.fields().count() != 1 {\n         return None;\n     }\n-    let field_type = field_list.fields().next()?.type_ref()?;\n+    let field_type = field_list.fields().next()?.ty()?;\n     let path = match field_type {\n-        ast::TypeRef::PathType(it) => it,\n+        ast::Type::PathType(it) => it,\n         _ => return None,\n     };\n \n@@ -69,7 +69,7 @@ impl From<{0}> for {1} {{\n \n fn existing_from_impl(\n     sema: &'_ hir::Semantics<'_, RootDatabase>,\n-    variant: &ast::EnumVariant,\n+    variant: &ast::Variant,\n ) -> Option<()> {\n     let variant = sema.to_def(variant)?;\n     let enum_ = variant.parent_enum(sema.db);"}, {"sha": "acc97e64820e43304746879ec0d86026f66b2e77", "filename": "crates/ra_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -82,7 +82,7 @@ struct FunctionTemplate {\n     insert_offset: TextSize,\n     placeholder_expr: ast::MacroCall,\n     leading_ws: String,\n-    fn_def: ast::FnDef,\n+    fn_def: ast::Fn,\n     trailing_ws: String,\n     file: FileId,\n }\n@@ -104,7 +104,7 @@ impl FunctionTemplate {\n struct FunctionBuilder {\n     target: GeneratedFunctionTarget,\n     fn_name: ast::Name,\n-    type_params: Option<ast::TypeParamList>,\n+    type_params: Option<ast::GenericParamList>,\n     params: ast::ParamList,\n     file: FileId,\n     needs_pub: bool,\n@@ -142,7 +142,7 @@ impl FunctionBuilder {\n         let fn_body = make::block_expr(vec![], Some(placeholder_expr));\n         let visibility = if self.needs_pub { Some(make::visibility_pub_crate()) } else { None };\n         let mut fn_def =\n-            make::fn_def(visibility, self.fn_name, self.type_params, self.params, fn_body);\n+            make::fn_(visibility, self.fn_name, self.type_params, self.params, fn_body);\n         let leading_ws;\n         let trailing_ws;\n \n@@ -200,7 +200,7 @@ fn fn_args(\n     ctx: &AssistContext,\n     target_module: hir::Module,\n     call: &ast::CallExpr,\n-) -> Option<(Option<ast::TypeParamList>, ast::ParamList)> {\n+) -> Option<(Option<ast::GenericParamList>, ast::ParamList)> {\n     let mut arg_names = Vec::new();\n     let mut arg_types = Vec::new();\n     for arg in call.arg_list()?.args() {"}, {"sha": "d9b87c9c0dd79795e1a4ef6b78a60fe143b70044", "filename": "crates/ra_assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,4 +1,4 @@\n-use ra_syntax::ast::{self, AstNode, NameOwner, TypeParamsOwner};\n+use ra_syntax::ast::{self, AstNode, GenericParamsOwner, NameOwner};\n use stdx::{format_to, SepBy};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -23,15 +23,15 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n+    let nominal = ctx.find_node_at_offset::<ast::AdtDef>()?;\n     let name = nominal.name()?;\n     let target = nominal.syntax().text_range();\n     acc.add(\n         AssistId(\"generate_impl\", AssistKind::Generate),\n         format!(\"Generate impl for `{}`\", name),\n         target,\n         |edit| {\n-            let type_params = nominal.type_param_list();\n+            let type_params = nominal.generic_param_list();\n             let start_offset = nominal.syntax().text_range().end();\n             let mut buf = String::new();\n             buf.push_str(\"\\n\\nimpl\");"}, {"sha": "b84aa24b6c760b5e8a27a37dfa03627b9d5b1865", "filename": "crates/ra_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,8 +1,6 @@\n use hir::Adt;\n use ra_syntax::{\n-    ast::{\n-        self, AstNode, NameOwner, StructKind, TypeAscriptionOwner, TypeParamsOwner, VisibilityOwner,\n-    },\n+    ast::{self, AstNode, GenericParamsOwner, NameOwner, StructKind, VisibilityOwner},\n     T,\n };\n use stdx::{format_to, SepBy};\n@@ -30,7 +28,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let strukt = ctx.find_node_at_offset::<ast::StructDef>()?;\n+    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n \n     // We want to only apply this to non-union structs with named fields\n     let field_list = match strukt.kind() {\n@@ -53,9 +51,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n         let params = field_list\n             .fields()\n-            .filter_map(|f| {\n-                Some(format!(\"{}: {}\", f.name()?.syntax(), f.ascribed_type()?.syntax()))\n-            })\n+            .filter_map(|f| Some(format!(\"{}: {}\", f.name()?.syntax(), f.ty()?.syntax())))\n             .sep_by(\", \");\n         let fields = field_list.fields().filter_map(|f| f.name()).sep_by(\", \");\n \n@@ -90,8 +86,8 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n // Generates the surrounding `impl Type { <code> }` including type and lifetime\n // parameters\n-fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n-    let type_params = strukt.type_param_list();\n+fn generate_impl_text(strukt: &ast::Struct, code: &str) -> String {\n+    let type_params = strukt.generic_param_list();\n     let mut buf = String::with_capacity(code.len());\n     buf.push_str(\"\\n\\nimpl\");\n     if let Some(type_params) = &type_params {\n@@ -121,15 +117,15 @@ fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n //\n // FIXME: change the new fn checking to a more semantic approach when that's more\n // viable (e.g. we process proc macros, etc)\n-fn find_struct_impl(ctx: &AssistContext, strukt: &ast::StructDef) -> Option<Option<ast::ImplDef>> {\n+fn find_struct_impl(ctx: &AssistContext, strukt: &ast::Struct) -> Option<Option<ast::Impl>> {\n     let db = ctx.db();\n     let module = strukt.syntax().ancestors().find(|node| {\n         ast::Module::can_cast(node.kind()) || ast::SourceFile::can_cast(node.kind())\n     })?;\n \n     let struct_def = ctx.sema.to_def(strukt)?;\n \n-    let block = module.descendants().filter_map(ast::ImplDef::cast).find_map(|impl_blk| {\n+    let block = module.descendants().filter_map(ast::Impl::cast).find_map(|impl_blk| {\n         let blk = ctx.sema.to_def(&impl_blk)?;\n \n         // FIXME: handle e.g. `struct S<T>; impl<U> S<U> {}`\n@@ -157,10 +153,10 @@ fn find_struct_impl(ctx: &AssistContext, strukt: &ast::StructDef) -> Option<Opti\n     Some(block)\n }\n \n-fn has_new_fn(imp: &ast::ImplDef) -> bool {\n-    if let Some(il) = imp.item_list() {\n+fn has_new_fn(imp: &ast::Impl) -> bool {\n+    if let Some(il) = imp.assoc_item_list() {\n         for item in il.assoc_items() {\n-            if let ast::AssocItem::FnDef(f) = item {\n+            if let ast::AssocItem::Fn(f) = item {\n                 if let Some(name) = f.name() {\n                     if name.text().eq_ignore_ascii_case(\"new\") {\n                         return true;"}, {"sha": "3c58020f803be7c64f7f575f31b09f4d64ee6e8f", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -29,7 +29,7 @@ use crate::{\n pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let let_stmt = ctx.find_node_at_offset::<ast::LetStmt>()?;\n     let bind_pat = match let_stmt.pat()? {\n-        ast::Pat::BindPat(pat) => pat,\n+        ast::Pat::IdentPat(pat) => pat,\n         _ => return None,\n     };\n     if bind_pat.mut_token().is_some() {"}, {"sha": "fbaf3c06b52b943e7f25955543652ddeaa937835", "filename": "crates/ra_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n use ra_syntax::{\n-    ast::{self, NameOwner, TypeAscriptionOwner, TypeParamsOwner},\n+    ast::{self, GenericParamsOwner, NameOwner},\n     AstNode, SyntaxKind, TextRange, TextSize,\n };\n use rustc_hash::FxHashSet;\n@@ -38,9 +38,9 @@ pub(crate) fn introduce_named_lifetime(acc: &mut Assists, ctx: &AssistContext) -\n     let lifetime_token = ctx\n         .find_token_at_offset(SyntaxKind::LIFETIME)\n         .filter(|lifetime| lifetime.text() == \"'_\")?;\n-    if let Some(fn_def) = lifetime_token.ancestors().find_map(ast::FnDef::cast) {\n+    if let Some(fn_def) = lifetime_token.ancestors().find_map(ast::Fn::cast) {\n         generate_fn_def_assist(acc, &fn_def, lifetime_token.text_range())\n-    } else if let Some(impl_def) = lifetime_token.ancestors().find_map(ast::ImplDef::cast) {\n+    } else if let Some(impl_def) = lifetime_token.ancestors().find_map(ast::Impl::cast) {\n         generate_impl_def_assist(acc, &impl_def, lifetime_token.text_range())\n     } else {\n         None\n@@ -50,11 +50,11 @@ pub(crate) fn introduce_named_lifetime(acc: &mut Assists, ctx: &AssistContext) -\n /// Generate the assist for the fn def case\n fn generate_fn_def_assist(\n     acc: &mut Assists,\n-    fn_def: &ast::FnDef,\n+    fn_def: &ast::Fn,\n     lifetime_loc: TextRange,\n ) -> Option<()> {\n     let param_list: ast::ParamList = fn_def.param_list()?;\n-    let new_lifetime_param = generate_unique_lifetime_param_name(&fn_def.type_param_list())?;\n+    let new_lifetime_param = generate_unique_lifetime_param_name(&fn_def.generic_param_list())?;\n     let end_of_fn_ident = fn_def.name()?.ident_token()?.text_range().end();\n     let self_param =\n         // use the self if it's a reference and has no explicit lifetime\n@@ -67,8 +67,8 @@ fn generate_fn_def_assist(\n         // otherwise, if there's a single reference parameter without a named liftime, use that\n         let fn_params_without_lifetime: Vec<_> = param_list\n             .params()\n-            .filter_map(|param| match param.ascribed_type() {\n-                Some(ast::TypeRef::ReferenceType(ascribed_type))\n+            .filter_map(|param| match param.ty() {\n+                Some(ast::Type::RefType(ascribed_type))\n                     if ascribed_type.lifetime_token() == None =>\n                 {\n                     Some(ascribed_type.amp_token()?.text_range().end())\n@@ -93,10 +93,10 @@ fn generate_fn_def_assist(\n /// Generate the assist for the impl def case\n fn generate_impl_def_assist(\n     acc: &mut Assists,\n-    impl_def: &ast::ImplDef,\n+    impl_def: &ast::Impl,\n     lifetime_loc: TextRange,\n ) -> Option<()> {\n-    let new_lifetime_param = generate_unique_lifetime_param_name(&impl_def.type_param_list())?;\n+    let new_lifetime_param = generate_unique_lifetime_param_name(&impl_def.generic_param_list())?;\n     let end_of_impl_kw = impl_def.impl_token()?.text_range().end();\n     acc.add(AssistId(ASSIST_NAME, AssistKind::Refactor), ASSIST_LABEL, lifetime_loc, |builder| {\n         add_lifetime_param(impl_def, builder, end_of_impl_kw, new_lifetime_param);\n@@ -107,7 +107,7 @@ fn generate_impl_def_assist(\n /// Given a type parameter list, generate a unique lifetime parameter name\n /// which is not in the list\n fn generate_unique_lifetime_param_name(\n-    existing_type_param_list: &Option<ast::TypeParamList>,\n+    existing_type_param_list: &Option<ast::GenericParamList>,\n ) -> Option<char> {\n     match existing_type_param_list {\n         Some(type_params) => {\n@@ -123,13 +123,13 @@ fn generate_unique_lifetime_param_name(\n \n /// Add the lifetime param to `builder`. If there are type parameters in `type_params_owner`, add it to the end. Otherwise\n /// add new type params brackets with the lifetime parameter at `new_type_params_loc`.\n-fn add_lifetime_param<TypeParamsOwner: ast::TypeParamsOwner>(\n+fn add_lifetime_param<TypeParamsOwner: ast::GenericParamsOwner>(\n     type_params_owner: &TypeParamsOwner,\n     builder: &mut AssistBuilder,\n     new_type_params_loc: TextSize,\n     new_lifetime_param: char,\n ) {\n-    match type_params_owner.type_param_list() {\n+    match type_params_owner.generic_param_list() {\n         // add the new lifetime parameter to an existing type param list\n         Some(type_params) => {\n             builder.insert("}, {"sha": "c775fe25c52fdfcf8f79dc01facf93d42e6273ab", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     let mut rewriter = SyntaxRewriter::default();\n     let mut offset = ctx.offset();\n \n-    if let Some(use_item) = tree.syntax().parent().and_then(ast::UseItem::cast) {\n+    if let Some(use_item) = tree.syntax().parent().and_then(ast::Use::cast) {\n         let (merged, to_delete) = next_prev()\n             .filter_map(|dir| neighbor(&use_item, dir))\n             .filter_map(|it| Some((it.clone(), it.use_tree()?)))"}, {"sha": "56329228233e84e3b4163808c336485fb99a8033", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -86,7 +86,7 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n }\n \n fn contains_placeholder(a: &ast::MatchArm) -> bool {\n-    matches!(a.pat(), Some(ast::Pat::PlaceholderPat(..)))\n+    matches!(a.pat(), Some(ast::Pat::WildcardPat(..)))\n }\n \n #[cfg(test)]"}, {"sha": "6d394443ebf4d51d0319feb55f8135fddcc18731", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -23,7 +23,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let type_param_list = ctx.find_node_at_offset::<ast::TypeParamList>()?;\n+    let type_param_list = ctx.find_node_at_offset::<ast::GenericParamList>()?;\n \n     let mut type_params = type_param_list.type_params();\n     if type_params.all(|p| p.type_bound_list().is_none()) {\n@@ -37,13 +37,13 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n \n     let anchor = match_ast! {\n         match parent {\n-            ast::FnDef(it) => it.body()?.syntax().clone().into(),\n-            ast::TraitDef(it) => it.item_list()?.syntax().clone().into(),\n-            ast::ImplDef(it) => it.item_list()?.syntax().clone().into(),\n-            ast::EnumDef(it) => it.variant_list()?.syntax().clone().into(),\n-            ast::StructDef(it) => {\n+            ast::Fn(it) => it.body()?.syntax().clone().into(),\n+            ast::Trait(it) => it.assoc_item_list()?.syntax().clone().into(),\n+            ast::Impl(it) => it.assoc_item_list()?.syntax().clone().into(),\n+            ast::Enum(it) => it.variant_list()?.syntax().clone().into(),\n+            ast::Struct(it) => {\n                 it.syntax().children_with_tokens()\n-                    .find(|it| it.kind() == RECORD_FIELD_DEF_LIST || it.kind() == T![;])?\n+                    .find(|it| it.kind() == RECORD_FIELD_LIST || it.kind() == T![;])?\n             },\n             _ => return None\n         }"}, {"sha": "4c797178f1c586d73c5d4d4cd71489658ada16a1", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -173,7 +173,7 @@ fn test_required_hashes() {\n }\n \n #[cfg(test)]\n-mod test {\n+mod tests {\n     use test_utils::mark;\n \n     use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};"}, {"sha": "9430ce1b5b85a3d6ef1b2027e811f7abc11cd2ce", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 85, "deletions": 9, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::{\n     ast::{self, AstNode},\n-    TextSize, T,\n+    TextRange, TextSize, T,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -27,19 +27,33 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         return None;\n     }\n \n-    let macro_range = macro_call.syntax().text_range();\n+    let is_leaf = macro_call.syntax().next_sibling().is_none();\n \n-    let macro_content = {\n-        let macro_args = macro_call.token_tree()?.syntax().clone();\n+    let macro_end = if macro_call.semicolon_token().is_some() {\n+        macro_call.syntax().text_range().end() - TextSize::of(';')\n+    } else {\n+        macro_call.syntax().text_range().end()\n+    };\n \n-        let text = macro_args.text();\n-        let without_parens = TextSize::of('(')..text.len() - TextSize::of(')');\n-        text.slice(without_parens).to_string()\n+    // macro_range determines what will be deleted and replaced with macro_content\n+    let macro_range = TextRange::new(macro_call.syntax().text_range().start(), macro_end);\n+    let paste_instead_of_dbg = {\n+        let text = macro_call.token_tree()?.syntax().text();\n+\n+        // leafiness determines if we should include the parenthesis or not\n+        let slice_index: TextRange = if is_leaf {\n+            // leaf means - we can extract the contents of the dbg! in text\n+            TextRange::new(TextSize::of('('), text.len() - TextSize::of(')'))\n+        } else {\n+            // not leaf - means we should keep the parens\n+            TextRange::up_to(text.len())\n+        };\n+        text.slice(slice_index).to_string()\n     };\n \n     let target = macro_call.syntax().text_range();\n     acc.add(AssistId(\"remove_dbg\", AssistKind::Refactor), \"Remove dbg!()\", target, |builder| {\n-        builder.replace(macro_range, macro_content);\n+        builder.replace(macro_range, paste_instead_of_dbg);\n     })\n }\n \n@@ -99,6 +113,7 @@ fn foo(n: usize) {\n \",\n         );\n     }\n+\n     #[test]\n     fn test_remove_dbg_with_brackets_and_braces() {\n         check_assist(remove_dbg, \"dbg![<|>1 + 1]\", \"1 + 1\");\n@@ -113,7 +128,7 @@ fn foo(n: usize) {\n     }\n \n     #[test]\n-    fn remove_dbg_target() {\n+    fn test_remove_dbg_target() {\n         check_assist_target(\n             remove_dbg,\n             \"\n@@ -126,4 +141,65 @@ fn foo(n: usize) {\n             \"dbg!(n.checked_sub(4))\",\n         );\n     }\n+\n+    #[test]\n+    fn test_remove_dbg_keep_semicolon() {\n+        // https://github.com/rust-analyzer/rust-analyzer/issues/5129#issuecomment-651399779\n+        // not quite though\n+        // adding a comment at the end of the line makes\n+        // the ast::MacroCall to include the semicolon at the end\n+        check_assist(\n+            remove_dbg,\n+            r#\"let res = <|>dbg!(1 * 20); // needless comment\"#,\n+            r#\"let res = 1 * 20; // needless comment\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_remove_dbg_keep_expression() {\n+        check_assist(\n+            remove_dbg,\n+            r#\"let res = <|>dbg!(a + b).foo();\"#,\n+            r#\"let res = (a + b).foo();\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_remove_dbg_from_inside_fn() {\n+        check_assist_target(\n+            remove_dbg,\n+            r#\"\n+fn square(x: u32) -> u32 {\n+    x * x\n+}\n+\n+fn main() {\n+    let x = square(dbg<|>!(5 + 10));\n+    println!(\"{}\", x);\n+}\"#,\n+            \"dbg!(5 + 10)\",\n+        );\n+\n+        check_assist(\n+            remove_dbg,\n+            r#\"\n+fn square(x: u32) -> u32 {\n+    x * x\n+}\n+\n+fn main() {\n+    let x = square(dbg<|>!(5 + 10));\n+    println!(\"{}\", x);\n+}\"#,\n+            r#\"\n+fn square(x: u32) -> u32 {\n+    x * x\n+}\n+\n+fn main() {\n+    let x = square(5 + 10);\n+    println!(\"{}\", x);\n+}\"#,\n+        );\n+    }\n }"}, {"sha": "c9b743a06b399ad4fdf6eba60b5a97ebda89ffab", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -23,7 +23,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n //\n pub(crate) fn reorder_fields(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    reorder::<ast::RecordLit>(acc, ctx).or_else(|| reorder::<ast::RecordPat>(acc, ctx))\n+    reorder::<ast::RecordExpr>(acc, ctx).or_else(|| reorder::<ast::RecordPat>(acc, ctx))\n }\n \n fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -56,17 +56,17 @@ fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n fn get_fields_kind(node: &SyntaxNode) -> Vec<SyntaxKind> {\n     match node.kind() {\n-        RECORD_LIT => vec![RECORD_FIELD],\n-        RECORD_PAT => vec![RECORD_FIELD_PAT, BIND_PAT],\n+        RECORD_EXPR => vec![RECORD_EXPR_FIELD],\n+        RECORD_PAT => vec![RECORD_PAT_FIELD, IDENT_PAT],\n         _ => vec![],\n     }\n }\n \n fn get_field_name(node: &SyntaxNode) -> String {\n     let res = match_ast! {\n         match node {\n-            ast::RecordField(field) => field.field_name().map(|it| it.to_string()),\n-            ast::RecordFieldPat(field) => field.field_name().map(|it| it.to_string()),\n+            ast::RecordExprField(field) => field.field_name().map(|it| it.to_string()),\n+            ast::RecordPatField(field) => field.field_name().map(|it| it.to_string()),\n             _ => None,\n         }\n     };"}, {"sha": "ecafb74a1e1d94e85a2c1ed28346b931851ba215", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -65,7 +65,7 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                         .type_of_pat(&pat)\n                         .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty))\n                         .map(|it| it.sad_pattern())\n-                        .unwrap_or_else(|| make::placeholder_pat().into());\n+                        .unwrap_or_else(|| make::wildcard_pat().into());\n                     let else_expr = unwrap_trivial_block(else_block);\n                     make::match_arm(vec![pattern], else_expr)\n                 };"}, {"sha": "e4d436decc8c77a306973a074ef59e1dcea6ae2d", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -50,10 +50,10 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n         target,\n         |edit| {\n             let with_placeholder: ast::Pat = match happy_variant {\n-                None => make::placeholder_pat().into(),\n+                None => make::wildcard_pat().into(),\n                 Some(var_name) => make::tuple_struct_pat(\n                     make::path_unqualified(make::path_segment(make::name_ref(var_name))),\n-                    once(make::placeholder_pat().into()),\n+                    once(make::wildcard_pat().into()),\n                 )\n                 .into(),\n             };\n@@ -62,8 +62,7 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n             let if_ = make::expr_if(make::condition(init, Some(with_placeholder)), block);\n             let stmt = make::expr_stmt(if_);\n \n-            let placeholder =\n-                stmt.syntax().descendants().find_map(ast::PlaceholderPat::cast).unwrap();\n+            let placeholder = stmt.syntax().descendants().find_map(ast::WildcardPat::cast).unwrap();\n             let stmt = stmt.replace_descendant(placeholder.into(), original_pat);\n \n             edit.replace_ast(ast::Stmt::from(let_stmt), ast::Stmt::from(stmt));"}, {"sha": "da0a860c599fdb9776cd74af55ef004f18fa0b80", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn replace_qualified_name_with_use(\n ) -> Option<()> {\n     let path: ast::Path = ctx.find_node_at_offset()?;\n     // We don't want to mess with use statements\n-    if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n+    if path.syntax().ancestors().find_map(ast::Use::cast).is_some() {\n         return None;\n     }\n \n@@ -85,7 +85,7 @@ fn shorten_paths(rewriter: &mut SyntaxRewriter<'static>, node: SyntaxNode, path:\n             match child {\n                 // Don't modify `use` items, as this can break the `use` item when injecting a new\n                 // import into the use tree.\n-                ast::UseItem(_it) => continue,\n+                ast::Use(_it) => continue,\n                 // Don't descend into submodules, they don't have the same `use` items in scope.\n                 ast::Module(_it) => continue,\n \n@@ -639,6 +639,48 @@ use std::fmt::{self, Display};\n \n fn main() {\n     fmt;\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn does_not_replace_pub_use() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            r\"\n+pub use std::fmt;\n+\n+impl std::io<|> for Foo {\n+}\n+    \",\n+            r\"\n+use std::io;\n+\n+pub use std::fmt;\n+\n+impl io for Foo {\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn does_not_replace_pub_crate_use() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            r\"\n+pub(crate) use std::fmt;\n+\n+impl std::io<|> for Foo {\n+}\n+    \",\n+            r\"\n+use std::io;\n+\n+pub(crate) use std::fmt;\n+\n+impl io for Foo {\n }\n     \",\n         );"}, {"sha": "d69f2c1b0e2d13f6d1973f9ceae4752b949853aa", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -52,15 +52,15 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n         target,\n         |builder| {\n             let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n-            let it = make::bind_pat(make::name(\"a\")).into();\n+            let it = make::ident_pat(make::name(\"a\")).into();\n             let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n \n             let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n             let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n \n             let unreachable_call = make::expr_unreachable();\n             let err_arm =\n-                make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n+                make::match_arm(iter::once(make::wildcard_pat().into()), unreachable_call);\n \n             let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n             let match_expr = make::expr_match(caller.clone(), match_arm_list)"}, {"sha": "507646cc802899573e1b8a1807b43b5fb4ea0fb1", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -140,6 +140,7 @@ mod handlers {\n     mod change_return_type_to_result;\n     mod change_visibility;\n     mod early_return;\n+    mod expand_glob_import;\n     mod extract_struct_from_enum_variant;\n     mod extract_variable;\n     mod fill_match_arms;\n@@ -181,6 +182,7 @@ mod handlers {\n             change_return_type_to_result::change_return_type_to_result,\n             change_visibility::change_visibility,\n             early_return::convert_to_guarded_return,\n+            expand_glob_import::expand_glob_import,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             extract_variable::extract_variable,\n             fill_match_arms::fill_match_arms,"}, {"sha": "97978e7a2e4b9e40b7e1574dfd28d7d975d6718b", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -228,6 +228,33 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_expand_glob_import() {\n+    check_doc_test(\n+        \"expand_glob_import\",\n+        r#####\"\n+mod foo {\n+    pub struct Bar;\n+    pub struct Baz;\n+}\n+\n+use foo::*<|>;\n+\n+fn qux(bar: Bar, baz: Baz) {}\n+\"#####,\n+        r#####\"\n+mod foo {\n+    pub struct Bar;\n+    pub struct Baz;\n+}\n+\n+use foo::{Baz, Bar};\n+\n+fn qux(bar: Bar, baz: Baz) {}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_extract_struct_from_enum_variant() {\n     check_doc_test("}, {"sha": "54d5678d14dbb4219ae76d05cd6b9baddbb11199", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -56,33 +56,34 @@ pub(crate) fn render_snippet(_cap: SnippetCap, node: &SyntaxNode, cursor: Cursor\n \n pub fn get_missing_assoc_items(\n     sema: &Semantics<RootDatabase>,\n-    impl_def: &ast::ImplDef,\n+    impl_def: &ast::Impl,\n ) -> Vec<hir::AssocItem> {\n     // Names must be unique between constants and functions. However, type aliases\n     // may share the same name as a function or constant.\n     let mut impl_fns_consts = FxHashSet::default();\n     let mut impl_type = FxHashSet::default();\n \n-    if let Some(item_list) = impl_def.item_list() {\n+    if let Some(item_list) = impl_def.assoc_item_list() {\n         for item in item_list.assoc_items() {\n             match item {\n-                ast::AssocItem::FnDef(f) => {\n+                ast::AssocItem::Fn(f) => {\n                     if let Some(n) = f.name() {\n                         impl_fns_consts.insert(n.syntax().to_string());\n                     }\n                 }\n \n-                ast::AssocItem::TypeAliasDef(t) => {\n+                ast::AssocItem::TypeAlias(t) => {\n                     if let Some(n) = t.name() {\n                         impl_type.insert(n.syntax().to_string());\n                     }\n                 }\n \n-                ast::AssocItem::ConstDef(c) => {\n+                ast::AssocItem::Const(c) => {\n                     if let Some(n) = c.name() {\n                         impl_fns_consts.insert(n.syntax().to_string());\n                     }\n                 }\n+                ast::AssocItem::MacroCall(_) => (),\n             }\n         }\n     }\n@@ -108,13 +109,10 @@ pub fn get_missing_assoc_items(\n \n pub(crate) fn resolve_target_trait(\n     sema: &Semantics<RootDatabase>,\n-    impl_def: &ast::ImplDef,\n+    impl_def: &ast::Impl,\n ) -> Option<hir::Trait> {\n-    let ast_path = impl_def\n-        .target_trait()\n-        .map(|it| it.syntax().clone())\n-        .and_then(ast::PathType::cast)?\n-        .path()?;\n+    let ast_path =\n+        impl_def.trait_().map(|it| it.syntax().clone()).and_then(ast::PathType::cast)?.path()?;\n \n     match sema.resolve_path(&ast_path) {\n         Some(hir::PathResolution::Def(hir::ModuleDef::Trait(def))) => Some(def),\n@@ -183,10 +181,10 @@ impl TryEnum {\n         match self {\n             TryEnum::Result => make::tuple_struct_pat(\n                 make::path_unqualified(make::path_segment(make::name_ref(\"Err\"))),\n-                iter::once(make::placeholder_pat().into()),\n+                iter::once(make::wildcard_pat().into()),\n             )\n             .into(),\n-            TryEnum::Option => make::bind_pat(make::name(\"None\")).into(),\n+            TryEnum::Option => make::ident_pat(make::name(\"None\")).into(),\n         }\n     }\n "}, {"sha": "32780fceb59b997c12c0e237eb6f43ec42cca320", "filename": "crates/ra_assists/src/utils/insert_use.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -4,7 +4,7 @@\n \n use hir::{self, ModPath};\n use ra_syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, NameOwner, VisibilityOwner},\n     AstNode, Direction, SmolStr,\n     SyntaxKind::{PATH, PATH_SEGMENT},\n     SyntaxNode, T,\n@@ -215,7 +215,7 @@ fn walk_use_tree_for_best_action(\n     let prev_len = current_path_segments.len();\n \n     let tree_list = current_use_tree.use_tree_list();\n-    let alias = current_use_tree.alias();\n+    let alias = current_use_tree.rename();\n \n     let path = match current_use_tree.path() {\n         Some(path) => path,\n@@ -225,7 +225,7 @@ fn walk_use_tree_for_best_action(\n                 current_use_tree\n                     .syntax()\n                     .ancestors()\n-                    .find_map(ast::UseItem::cast)\n+                    .find_map(ast::Use::cast)\n                     .map(|it| it.syntax().clone()),\n                 true,\n             );\n@@ -254,7 +254,7 @@ fn walk_use_tree_for_best_action(\n             current_use_tree\n                 .syntax()\n                 .ancestors()\n-                .find_map(ast::UseItem::cast)\n+                .find_map(ast::Use::cast)\n                 .map(|it| it.syntax().clone()),\n             true,\n         ),\n@@ -304,7 +304,7 @@ fn walk_use_tree_for_best_action(\n                 current_use_tree\n                     .syntax()\n                     .ancestors()\n-                    .find_map(ast::UseItem::cast)\n+                    .find_map(ast::Use::cast)\n                     .map(|it| it.syntax().clone()),\n                 true,\n             );\n@@ -377,7 +377,8 @@ fn best_action_for_target(\n     let mut storage = Vec::with_capacity(16); // this should be the only allocation\n     let best_action = container\n         .children()\n-        .filter_map(ast::UseItem::cast)\n+        .filter_map(ast::Use::cast)\n+        .filter(|u| u.visibility().is_none())\n         .filter_map(|it| it.use_tree())\n         .map(|u| walk_use_tree_for_best_action(&mut storage, None, u, target))\n         .fold(None, |best, a| match best {"}, {"sha": "fe73dc01574fb3fafb74c57f3d23ae19c88439c7", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -9,7 +9,7 @@ license = \"MIT OR Apache-2.0\"\n doctest = false\n \n [dependencies]\n-salsa = \"0.15.0\"\n+salsa = \"0.15.2\"\n rustc-hash = \"1.1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }"}, {"sha": "27cdabea03e8ce37794d47d6dfded7336d2fe87b", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -361,8 +361,8 @@ pub struct Field {\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum FieldSource {\n-    Named(ast::RecordFieldDef),\n-    Pos(ast::TupleFieldDef),\n+    Named(ast::RecordField),\n+    Pos(ast::TupleField),\n }\n \n impl Field {\n@@ -1002,7 +1002,7 @@ impl Local {\n         Type::new(db, krate, def, ty)\n     }\n \n-    pub fn source(self, db: &dyn HirDatabase) -> InFile<Either<ast::BindPat, ast::SelfParam>> {\n+    pub fn source(self, db: &dyn HirDatabase) -> InFile<Either<ast::IdentPat, ast::SelfParam>> {\n         let (_body, source_map) = db.body_with_source_map(self.parent.into());\n         let src = source_map.pat_syntax(self.pat_id).unwrap(); // Hmm...\n         let root = src.file_syntax(db.upcast());"}, {"sha": "07333c453f0e0c9f902ae0d636d7e0b94fdd61e7", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -13,14 +13,7 @@ pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, InternEagerExpansionQuery, InternMacroQuery,\n     MacroArgTextQuery, MacroDefQuery, MacroExpandQuery, ParseMacroQuery,\n };\n-pub use hir_ty::db::{\n-    AssociatedTyDataQuery, AssociatedTyValueQuery, CallableItemSignatureQuery, FieldTypesQuery,\n-    GenericDefaultsQuery, GenericPredicatesForParamQuery, GenericPredicatesQuery, HirDatabase,\n-    HirDatabaseStorage, ImplDatumQuery, ImplSelfTyQuery, ImplTraitQuery, InferQueryQuery,\n-    InherentImplsInCrateQuery, InternTypeParamIdQuery, ReturnTypeImplTraitsQuery, StructDatumQuery,\n-    TraitDatumQuery, TraitImplsInCrateQuery, TraitImplsInDepsQuery, TraitSolveQuery, TyQuery,\n-    ValueTyQuery,\n-};\n+pub use hir_ty::db::*;\n \n #[test]\n fn hir_database_is_object_safe() {"}, {"sha": "db9228d67c4a07cdacbf2d070b98ab5c6dd7f6ae", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -57,56 +57,56 @@ impl HasSource for Field {\n     }\n }\n impl HasSource for Struct {\n-    type Ast = ast::StructDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::StructDef> {\n+    type Ast = ast::Struct;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Struct> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Union {\n-    type Ast = ast::UnionDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::UnionDef> {\n+    type Ast = ast::Union;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Union> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Enum {\n-    type Ast = ast::EnumDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::EnumDef> {\n+    type Ast = ast::Enum;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Enum> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for EnumVariant {\n-    type Ast = ast::EnumVariant;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::EnumVariant> {\n+    type Ast = ast::Variant;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Variant> {\n         self.parent.id.child_source(db.upcast()).map(|map| map[self.id].clone())\n     }\n }\n impl HasSource for Function {\n-    type Ast = ast::FnDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::FnDef> {\n+    type Ast = ast::Fn;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Fn> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Const {\n-    type Ast = ast::ConstDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::ConstDef> {\n+    type Ast = ast::Const;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Const> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Static {\n-    type Ast = ast::StaticDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::StaticDef> {\n+    type Ast = ast::Static;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Static> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Trait {\n-    type Ast = ast::TraitDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::TraitDef> {\n+    type Ast = ast::Trait;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Trait> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for TypeAlias {\n-    type Ast = ast::TypeAliasDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::TypeAliasDef> {\n+    type Ast = ast::TypeAlias;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::TypeAlias> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n@@ -120,14 +120,14 @@ impl HasSource for MacroDef {\n     }\n }\n impl HasSource for ImplDef {\n-    type Ast = ast::ImplDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::ImplDef> {\n+    type Ast = ast::Impl;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Impl> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n \n impl HasSource for TypeParam {\n-    type Ast = Either<ast::TraitDef, ast::TypeParam>;\n+    type Ast = Either<ast::Trait, ast::TypeParam>;\n     fn source(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n         let child_source = self.id.parent.child_source(db.upcast());\n         child_source.map(|it| it[self.id.local_id].clone())"}, {"sha": "307b336f20619b802639e111311157442bb854c6", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -209,11 +209,14 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_field(field)\n     }\n \n-    pub fn resolve_record_field(&self, field: &ast::RecordField) -> Option<(Field, Option<Local>)> {\n+    pub fn resolve_record_field(\n+        &self,\n+        field: &ast::RecordExprField,\n+    ) -> Option<(Field, Option<Local>)> {\n         self.imp.resolve_record_field(field)\n     }\n \n-    pub fn resolve_record_field_pat(&self, field: &ast::RecordFieldPat) -> Option<Field> {\n+    pub fn resolve_record_field_pat(&self, field: &ast::RecordPatField) -> Option<Field> {\n         self.imp.resolve_record_field_pat(field)\n     }\n \n@@ -225,22 +228,22 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_path(path)\n     }\n \n-    pub fn resolve_variant(&self, record_lit: ast::RecordLit) -> Option<VariantDef> {\n+    pub fn resolve_variant(&self, record_lit: ast::RecordExpr) -> Option<VariantDef> {\n         self.imp.resolve_variant(record_lit).map(VariantDef::from)\n     }\n \n     pub fn lower_path(&self, path: &ast::Path) -> Option<Path> {\n         self.imp.lower_path(path)\n     }\n \n-    pub fn resolve_bind_pat_to_const(&self, pat: &ast::BindPat) -> Option<ModuleDef> {\n+    pub fn resolve_bind_pat_to_const(&self, pat: &ast::IdentPat) -> Option<ModuleDef> {\n         self.imp.resolve_bind_pat_to_const(pat)\n     }\n \n     // FIXME: use this instead?\n     // pub fn resolve_name_ref(&self, name_ref: &ast::NameRef) -> Option<???>;\n \n-    pub fn record_literal_missing_fields(&self, literal: &ast::RecordLit) -> Vec<(Field, Type)> {\n+    pub fn record_literal_missing_fields(&self, literal: &ast::RecordExpr) -> Vec<(Field, Type)> {\n         self.imp.record_literal_missing_fields(literal)\n     }\n \n@@ -422,11 +425,11 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(field.syntax()).resolve_field(self.db, field)\n     }\n \n-    fn resolve_record_field(&self, field: &ast::RecordField) -> Option<(Field, Option<Local>)> {\n+    fn resolve_record_field(&self, field: &ast::RecordExprField) -> Option<(Field, Option<Local>)> {\n         self.analyze(field.syntax()).resolve_record_field(self.db, field)\n     }\n \n-    fn resolve_record_field_pat(&self, field: &ast::RecordFieldPat) -> Option<Field> {\n+    fn resolve_record_field_pat(&self, field: &ast::RecordPatField) -> Option<Field> {\n         self.analyze(field.syntax()).resolve_record_field_pat(self.db, field)\n     }\n \n@@ -440,7 +443,7 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }\n \n-    fn resolve_variant(&self, record_lit: ast::RecordLit) -> Option<VariantId> {\n+    fn resolve_variant(&self, record_lit: ast::RecordExpr) -> Option<VariantId> {\n         self.analyze(record_lit.syntax()).resolve_variant(self.db, record_lit)\n     }\n \n@@ -449,11 +452,11 @@ impl<'db> SemanticsImpl<'db> {\n         Path::from_src(path.clone(), &Hygiene::new(self.db.upcast(), src.file_id.into()))\n     }\n \n-    fn resolve_bind_pat_to_const(&self, pat: &ast::BindPat) -> Option<ModuleDef> {\n+    fn resolve_bind_pat_to_const(&self, pat: &ast::IdentPat) -> Option<ModuleDef> {\n         self.analyze(pat.syntax()).resolve_bind_pat_to_const(self.db, pat)\n     }\n \n-    fn record_literal_missing_fields(&self, literal: &ast::RecordLit) -> Vec<(Field, Type)> {\n+    fn record_literal_missing_fields(&self, literal: &ast::RecordExpr) -> Vec<(Field, Type)> {\n         self.analyze(literal.syntax())\n             .record_literal_missing_fields(self.db, literal)\n             .unwrap_or_default()\n@@ -577,21 +580,21 @@ macro_rules! to_def_impls {\n \n to_def_impls![\n     (crate::Module, ast::Module, module_to_def),\n-    (crate::Struct, ast::StructDef, struct_to_def),\n-    (crate::Enum, ast::EnumDef, enum_to_def),\n-    (crate::Union, ast::UnionDef, union_to_def),\n-    (crate::Trait, ast::TraitDef, trait_to_def),\n-    (crate::ImplDef, ast::ImplDef, impl_to_def),\n-    (crate::TypeAlias, ast::TypeAliasDef, type_alias_to_def),\n-    (crate::Const, ast::ConstDef, const_to_def),\n-    (crate::Static, ast::StaticDef, static_to_def),\n-    (crate::Function, ast::FnDef, fn_to_def),\n-    (crate::Field, ast::RecordFieldDef, record_field_to_def),\n-    (crate::Field, ast::TupleFieldDef, tuple_field_to_def),\n-    (crate::EnumVariant, ast::EnumVariant, enum_variant_to_def),\n+    (crate::Struct, ast::Struct, struct_to_def),\n+    (crate::Enum, ast::Enum, enum_to_def),\n+    (crate::Union, ast::Union, union_to_def),\n+    (crate::Trait, ast::Trait, trait_to_def),\n+    (crate::ImplDef, ast::Impl, impl_to_def),\n+    (crate::TypeAlias, ast::TypeAlias, type_alias_to_def),\n+    (crate::Const, ast::Const, const_to_def),\n+    (crate::Static, ast::Static, static_to_def),\n+    (crate::Function, ast::Fn, fn_to_def),\n+    (crate::Field, ast::RecordField, record_field_to_def),\n+    (crate::Field, ast::TupleField, tuple_field_to_def),\n+    (crate::EnumVariant, ast::Variant, enum_variant_to_def),\n     (crate::TypeParam, ast::TypeParam, type_param_to_def),\n     (crate::MacroDef, ast::MacroCall, macro_call_to_def), // this one is dubious, not all calls are macros\n-    (crate::Local, ast::BindPat, bind_pat_to_def),\n+    (crate::Local, ast::IdentPat, bind_pat_to_def),\n ];\n \n fn find_root(node: &SyntaxNode) -> SyntaxNode {"}, {"sha": "863e8e5ff7b46c456985a808bcb1b9ee16de39d5", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 32, "deletions": 41, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -65,57 +65,48 @@ impl SourceToDefCtx<'_, '_> {\n         Some(ModuleId { krate: parent_module.krate, local_id: child_id })\n     }\n \n-    pub(super) fn trait_to_def(&mut self, src: InFile<ast::TraitDef>) -> Option<TraitId> {\n+    pub(super) fn trait_to_def(&mut self, src: InFile<ast::Trait>) -> Option<TraitId> {\n         self.to_def(src, keys::TRAIT)\n     }\n-    pub(super) fn impl_to_def(&mut self, src: InFile<ast::ImplDef>) -> Option<ImplId> {\n+    pub(super) fn impl_to_def(&mut self, src: InFile<ast::Impl>) -> Option<ImplId> {\n         self.to_def(src, keys::IMPL)\n     }\n-    pub(super) fn fn_to_def(&mut self, src: InFile<ast::FnDef>) -> Option<FunctionId> {\n+    pub(super) fn fn_to_def(&mut self, src: InFile<ast::Fn>) -> Option<FunctionId> {\n         self.to_def(src, keys::FUNCTION)\n     }\n-    pub(super) fn struct_to_def(&mut self, src: InFile<ast::StructDef>) -> Option<StructId> {\n+    pub(super) fn struct_to_def(&mut self, src: InFile<ast::Struct>) -> Option<StructId> {\n         self.to_def(src, keys::STRUCT)\n     }\n-    pub(super) fn enum_to_def(&mut self, src: InFile<ast::EnumDef>) -> Option<EnumId> {\n+    pub(super) fn enum_to_def(&mut self, src: InFile<ast::Enum>) -> Option<EnumId> {\n         self.to_def(src, keys::ENUM)\n     }\n-    pub(super) fn union_to_def(&mut self, src: InFile<ast::UnionDef>) -> Option<UnionId> {\n+    pub(super) fn union_to_def(&mut self, src: InFile<ast::Union>) -> Option<UnionId> {\n         self.to_def(src, keys::UNION)\n     }\n-    pub(super) fn static_to_def(&mut self, src: InFile<ast::StaticDef>) -> Option<StaticId> {\n+    pub(super) fn static_to_def(&mut self, src: InFile<ast::Static>) -> Option<StaticId> {\n         self.to_def(src, keys::STATIC)\n     }\n-    pub(super) fn const_to_def(&mut self, src: InFile<ast::ConstDef>) -> Option<ConstId> {\n+    pub(super) fn const_to_def(&mut self, src: InFile<ast::Const>) -> Option<ConstId> {\n         self.to_def(src, keys::CONST)\n     }\n-    pub(super) fn type_alias_to_def(\n-        &mut self,\n-        src: InFile<ast::TypeAliasDef>,\n-    ) -> Option<TypeAliasId> {\n+    pub(super) fn type_alias_to_def(&mut self, src: InFile<ast::TypeAlias>) -> Option<TypeAliasId> {\n         self.to_def(src, keys::TYPE_ALIAS)\n     }\n-    pub(super) fn record_field_to_def(\n-        &mut self,\n-        src: InFile<ast::RecordFieldDef>,\n-    ) -> Option<FieldId> {\n+    pub(super) fn record_field_to_def(&mut self, src: InFile<ast::RecordField>) -> Option<FieldId> {\n         self.to_def(src, keys::RECORD_FIELD)\n     }\n-    pub(super) fn tuple_field_to_def(\n-        &mut self,\n-        src: InFile<ast::TupleFieldDef>,\n-    ) -> Option<FieldId> {\n+    pub(super) fn tuple_field_to_def(&mut self, src: InFile<ast::TupleField>) -> Option<FieldId> {\n         self.to_def(src, keys::TUPLE_FIELD)\n     }\n     pub(super) fn enum_variant_to_def(\n         &mut self,\n-        src: InFile<ast::EnumVariant>,\n+        src: InFile<ast::Variant>,\n     ) -> Option<EnumVariantId> {\n-        self.to_def(src, keys::ENUM_VARIANT)\n+        self.to_def(src, keys::VARIANT)\n     }\n     pub(super) fn bind_pat_to_def(\n         &mut self,\n-        src: InFile<ast::BindPat>,\n+        src: InFile<ast::IdentPat>,\n     ) -> Option<(DefWithBodyId, PatId)> {\n         let container = self.find_pat_container(src.as_ref().map(|it| it.syntax()))?;\n         let (_body, source_map) = self.db.body_with_source_map(container);\n@@ -163,39 +154,39 @@ impl SourceToDefCtx<'_, '_> {\n                         let def = self.module_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n-                    ast::TraitDef(it) => {\n+                    ast::Trait(it) => {\n                         let def = self.trait_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n-                    ast::ImplDef(it) => {\n+                    ast::Impl(it) => {\n                         let def = self.impl_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n-                    ast::FnDef(it) => {\n+                    ast::Fn(it) => {\n                         let def = self.fn_to_def(container.with_value(it))?;\n                         DefWithBodyId::from(def).into()\n                     },\n-                    ast::StructDef(it) => {\n+                    ast::Struct(it) => {\n                         let def = self.struct_to_def(container.with_value(it))?;\n                         VariantId::from(def).into()\n                     },\n-                    ast::EnumDef(it) => {\n+                    ast::Enum(it) => {\n                         let def = self.enum_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n-                    ast::UnionDef(it) => {\n+                    ast::Union(it) => {\n                         let def = self.union_to_def(container.with_value(it))?;\n                         VariantId::from(def).into()\n                     },\n-                    ast::StaticDef(it) => {\n+                    ast::Static(it) => {\n                         let def = self.static_to_def(container.with_value(it))?;\n                         DefWithBodyId::from(def).into()\n                     },\n-                    ast::ConstDef(it) => {\n+                    ast::Const(it) => {\n                         let def = self.const_to_def(container.with_value(it))?;\n                         DefWithBodyId::from(def).into()\n                     },\n-                    ast::TypeAliasDef(it) => {\n+                    ast::TypeAlias(it) => {\n                         let def = self.type_alias_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n@@ -213,12 +204,12 @@ impl SourceToDefCtx<'_, '_> {\n         for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n             let res: GenericDefId = match_ast! {\n                 match (container.value) {\n-                    ast::FnDef(it) => self.fn_to_def(container.with_value(it))?.into(),\n-                    ast::StructDef(it) => self.struct_to_def(container.with_value(it))?.into(),\n-                    ast::EnumDef(it) => self.enum_to_def(container.with_value(it))?.into(),\n-                    ast::TraitDef(it) => self.trait_to_def(container.with_value(it))?.into(),\n-                    ast::TypeAliasDef(it) => self.type_alias_to_def(container.with_value(it))?.into(),\n-                    ast::ImplDef(it) => self.impl_to_def(container.with_value(it))?.into(),\n+                    ast::Fn(it) => self.fn_to_def(container.with_value(it))?.into(),\n+                    ast::Struct(it) => self.struct_to_def(container.with_value(it))?.into(),\n+                    ast::Enum(it) => self.enum_to_def(container.with_value(it))?.into(),\n+                    ast::Trait(it) => self.trait_to_def(container.with_value(it))?.into(),\n+                    ast::TypeAlias(it) => self.type_alias_to_def(container.with_value(it))?.into(),\n+                    ast::Impl(it) => self.impl_to_def(container.with_value(it))?.into(),\n                     _ => continue,\n                 }\n             };\n@@ -231,9 +222,9 @@ impl SourceToDefCtx<'_, '_> {\n         for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n             let res: DefWithBodyId = match_ast! {\n                 match (container.value) {\n-                    ast::ConstDef(it) => self.const_to_def(container.with_value(it))?.into(),\n-                    ast::StaticDef(it) => self.static_to_def(container.with_value(it))?.into(),\n-                    ast::FnDef(it) => self.fn_to_def(container.with_value(it))?.into(),\n+                    ast::Const(it) => self.const_to_def(container.with_value(it))?.into(),\n+                    ast::Static(it) => self.static_to_def(container.with_value(it))?.into(),\n+                    ast::Fn(it) => self.fn_to_def(container.with_value(it))?.into(),\n                     _ => continue,\n                 }\n             };"}, {"sha": "d0cb62ef0188923a016e3215e6d387e3a826d793", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -159,7 +159,7 @@ impl SourceAnalyzer {\n     pub(crate) fn resolve_record_field(\n         &self,\n         db: &dyn HirDatabase,\n-        field: &ast::RecordField,\n+        field: &ast::RecordExprField,\n     ) -> Option<(Field, Option<Local>)> {\n         let expr = field.expr()?;\n         let expr_id = self.expr_id(db, &expr)?;\n@@ -182,7 +182,7 @@ impl SourceAnalyzer {\n     pub(crate) fn resolve_record_field_pat(\n         &self,\n         _db: &dyn HirDatabase,\n-        field: &ast::RecordFieldPat,\n+        field: &ast::RecordPatField,\n     ) -> Option<Field> {\n         let pat_id = self.pat_id(&field.pat()?)?;\n         let struct_field = self.infer.as_ref()?.record_field_pat_resolution(pat_id)?;\n@@ -202,7 +202,7 @@ impl SourceAnalyzer {\n     pub(crate) fn resolve_bind_pat_to_const(\n         &self,\n         db: &dyn HirDatabase,\n-        pat: &ast::BindPat,\n+        pat: &ast::IdentPat,\n     ) -> Option<ModuleDef> {\n         let pat_id = self.pat_id(&pat.clone().into())?;\n         let body = self.body.as_ref()?;\n@@ -246,7 +246,7 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        if let Some(rec_lit) = path.syntax().parent().and_then(ast::RecordLit::cast) {\n+        if let Some(rec_lit) = path.syntax().parent().and_then(ast::RecordExpr::cast) {\n             let expr_id = self.expr_id(db, &rec_lit.into())?;\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n@@ -284,7 +284,7 @@ impl SourceAnalyzer {\n     pub(crate) fn record_literal_missing_fields(\n         &self,\n         db: &dyn HirDatabase,\n-        literal: &ast::RecordLit,\n+        literal: &ast::RecordExpr,\n     ) -> Option<Vec<(Field, Type)>> {\n         let krate = self.resolver.krate()?;\n         let body = self.body.as_ref()?;\n@@ -358,7 +358,7 @@ impl SourceAnalyzer {\n     pub(crate) fn resolve_variant(\n         &self,\n         db: &dyn HirDatabase,\n-        record_lit: ast::RecordLit,\n+        record_lit: ast::RecordExpr,\n     ) -> Option<VariantId> {\n         let infer = self.infer.as_ref()?;\n         let expr_id = self.expr_id(db, &record_lit.into())?;\n@@ -405,8 +405,7 @@ fn scope_for_offset(\n             )\n         })\n         .map(|(expr_range, scope)| {\n-            adjust(db, scopes, source_map, expr_range, offset.file_id, offset.value)\n-                .unwrap_or(*scope)\n+            adjust(db, scopes, source_map, expr_range, offset).unwrap_or(*scope)\n         })\n }\n \n@@ -417,24 +416,23 @@ fn adjust(\n     scopes: &ExprScopes,\n     source_map: &BodySourceMap,\n     expr_range: TextRange,\n-    file_id: HirFileId,\n-    offset: TextSize,\n+    offset: InFile<TextSize>,\n ) -> Option<ScopeId> {\n     let child_scopes = scopes\n         .scope_by_expr()\n         .iter()\n         .filter_map(|(id, scope)| {\n             let source = source_map.expr_syntax(*id).ok()?;\n             // FIXME: correctly handle macro expansion\n-            if source.file_id != file_id {\n+            if source.file_id != offset.file_id {\n                 return None;\n             }\n             let root = source.file_syntax(db.upcast());\n             let node = source.value.to_node(&root);\n             Some((node.syntax().text_range(), scope))\n         })\n         .filter(|&(range, _)| {\n-            range.start() <= offset && expr_range.contains_range(range) && range != expr_range\n+            range.start() <= offset.value && expr_range.contains_range(range) && range != expr_range\n         });\n \n     child_scopes"}, {"sha": "6cb56a1cd00e6e8dc4d4036801f7cf3b21ba2d6b", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -8,7 +8,7 @@ use hir_expand::{\n     InFile,\n };\n use ra_arena::{map::ArenaMap, Arena};\n-use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n+use ra_syntax::ast::{self, NameOwner, VisibilityOwner};\n \n use crate::{\n     body::{CfgExpander, LowerCtx},\n@@ -112,7 +112,7 @@ impl EnumData {\n \n impl HasChildSource for EnumId {\n     type ChildId = LocalEnumVariantId;\n-    type Value = ast::EnumVariant;\n+    type Value = ast::Variant;\n     fn child_source(&self, db: &dyn DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n         let src = self.lookup(db).source(db);\n         let mut trace = Trace::new_for_map();\n@@ -123,8 +123,8 @@ impl HasChildSource for EnumId {\n \n fn lower_enum(\n     db: &dyn DefDatabase,\n-    trace: &mut Trace<EnumVariantData, ast::EnumVariant>,\n-    ast: &InFile<ast::EnumDef>,\n+    trace: &mut Trace<EnumVariantData, ast::Variant>,\n+    ast: &InFile<ast::Enum>,\n     module_id: ModuleId,\n ) {\n     let expander = CfgExpander::new(db, ast.file_id, module_id.krate);\n@@ -179,7 +179,7 @@ impl VariantData {\n \n impl HasChildSource for VariantId {\n     type ChildId = LocalFieldId;\n-    type Value = Either<ast::TupleFieldDef, ast::RecordFieldDef>;\n+    type Value = Either<ast::TupleField, ast::RecordField>;\n \n     fn child_source(&self, db: &dyn DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n         let (src, module_id) = match self {\n@@ -194,7 +194,7 @@ impl HasChildSource for VariantId {\n             }\n             VariantId::UnionId(it) => (\n                 it.lookup(db).source(db).map(|it| {\n-                    it.record_field_def_list()\n+                    it.record_field_list()\n                         .map(ast::StructKind::Record)\n                         .unwrap_or(ast::StructKind::Unit)\n                 }),\n@@ -218,7 +218,7 @@ pub enum StructKind {\n fn lower_struct(\n     db: &dyn DefDatabase,\n     expander: &mut CfgExpander,\n-    trace: &mut Trace<FieldData, Either<ast::TupleFieldDef, ast::RecordFieldDef>>,\n+    trace: &mut Trace<FieldData, Either<ast::TupleField, ast::RecordField>>,\n     ast: &InFile<ast::StructKind>,\n ) -> StructKind {\n     let ctx = LowerCtx::new(db, ast.file_id);\n@@ -234,7 +234,7 @@ fn lower_struct(\n                     || Either::Left(fd.clone()),\n                     || FieldData {\n                         name: Name::new_tuple_field(i),\n-                        type_ref: TypeRef::from_ast_opt(&ctx, fd.type_ref()),\n+                        type_ref: TypeRef::from_ast_opt(&ctx, fd.ty()),\n                         visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),\n                     },\n                 );\n@@ -251,7 +251,7 @@ fn lower_struct(\n                     || Either::Right(fd.clone()),\n                     || FieldData {\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n-                        type_ref: TypeRef::from_ast_opt(&ctx, fd.ascribed_type()),\n+                        type_ref: TypeRef::from_ast_opt(&ctx, fd.ty()),\n                         visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),\n                     },\n                 );"}, {"sha": "050832ce01be0cd51d2dccc00c23882624bcb7b1", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -151,18 +151,15 @@ pub enum AttrInput {\n impl Attr {\n     fn from_src(ast: ast::Attr, hygiene: &Hygiene) -> Option<Attr> {\n         let path = ModPath::from_src(ast.path()?, hygiene)?;\n-        let input = match ast.input() {\n-            None => None,\n-            Some(ast::AttrInput::Literal(lit)) => {\n-                // FIXME: escape? raw string?\n-                let value = lit.syntax().first_token()?.text().trim_matches('\"').into();\n-                Some(AttrInput::Literal(value))\n-            }\n-            Some(ast::AttrInput::TokenTree(tt)) => {\n-                Some(AttrInput::TokenTree(ast_to_token_tree(&tt)?.0))\n-            }\n+        let input = if let Some(lit) = ast.literal() {\n+            // FIXME: escape? raw string?\n+            let value = lit.syntax().first_token()?.text().trim_matches('\"').into();\n+            Some(AttrInput::Literal(value))\n+        } else if let Some(tt) = ast.token_tree() {\n+            Some(AttrInput::TokenTree(ast_to_token_tree(&tt)?.0))\n+        } else {\n+            None\n         };\n-\n         Some(Attr { path, input })\n     }\n }"}, {"sha": "d5f18b9201c401a07773e6960a380a2bedf34071", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -216,7 +216,7 @@ pub struct BodySourceMap {\n     expr_map_back: ArenaMap<ExprId, Result<ExprSource, SyntheticSyntax>>,\n     pat_map: FxHashMap<PatSource, PatId>,\n     pat_map_back: ArenaMap<PatId, Result<PatSource, SyntheticSyntax>>,\n-    field_map: FxHashMap<(ExprId, usize), InFile<AstPtr<ast::RecordField>>>,\n+    field_map: FxHashMap<(ExprId, usize), InFile<AstPtr<ast::RecordExprField>>>,\n     expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n }\n \n@@ -314,7 +314,7 @@ impl BodySourceMap {\n         self.pat_map.get(&src).cloned()\n     }\n \n-    pub fn field_syntax(&self, expr: ExprId, field: usize) -> InFile<AstPtr<ast::RecordField>> {\n+    pub fn field_syntax(&self, expr: ExprId, field: usize) -> InFile<AstPtr<ast::RecordExprField>> {\n         self.field_map[&(expr, field)].clone()\n     }\n }"}, {"sha": "f5c37edb30a2b3486134a5929c5a0bc6c10c402b", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 87, "deletions": 76, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,6 +1,8 @@\n //! Transforms `ast::Expr` into an equivalent `hir_def::expr::Expr`\n //! representation.\n \n+use std::{any::type_name, sync::Arc};\n+\n use either::Either;\n use hir_expand::{\n     hygiene::Hygiene,\n@@ -10,11 +12,12 @@ use hir_expand::{\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n-        self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, ModuleItemOwner, NameOwner,\n-        SlicePatComponents, TypeAscriptionOwner,\n+        self, ArgListOwner, ArrayExprKind, AstChildren, LiteralKind, LoopBodyOwner, NameOwner,\n+        SlicePatComponents,\n     },\n     AstNode, AstPtr,\n };\n+use rustc_hash::FxHashMap;\n use test_utils::mark;\n \n use crate::{\n@@ -35,9 +38,6 @@ use crate::{\n };\n \n use super::{ExprSource, PatSource};\n-use ast::AstChildren;\n-use rustc_hash::FxHashMap;\n-use std::{any::type_name, sync::Arc};\n \n pub(crate) struct LowerCtx {\n     hygiene: Hygiene,\n@@ -224,9 +224,22 @@ impl ExprCollector<'_> {\n                     self.alloc_expr(Expr::Unsafe { body }, syntax_ptr)\n                 }\n                 // FIXME: we need to record these effects somewhere...\n-                ast::Effect::Async(_) | ast::Effect::Label(_) => {\n-                    self.collect_block_opt(e.block_expr())\n-                }\n+                ast::Effect::Label(label) => match e.block_expr() {\n+                    Some(block) => {\n+                        let res = self.collect_block(block);\n+                        match &mut self.body.exprs[res] {\n+                            Expr::Block { label: block_label, .. } => {\n+                                *block_label =\n+                                    label.lifetime_token().map(|t| Name::new_lifetime(&t))\n+                            }\n+                            _ => unreachable!(),\n+                        }\n+                        res\n+                    }\n+                    None => self.missing_expr(),\n+                },\n+                // FIXME: we need to record these effects somewhere...\n+                ast::Effect::Async(_) => self.collect_block_opt(e.block_expr()),\n             },\n             ast::Expr::BlockExpr(e) => self.collect_block(e),\n             ast::Expr::LoopExpr(e) => {\n@@ -324,7 +337,7 @@ impl ExprCollector<'_> {\n                 };\n                 let method_name = e.name_ref().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n                 let generic_args =\n-                    e.type_arg_list().and_then(|it| GenericArgs::from_ast(&self.ctx(), it));\n+                    e.generic_arg_list().and_then(|it| GenericArgs::from_ast(&self.ctx(), it));\n                 self.alloc_expr(\n                     Expr::MethodCall { receiver, method_name, args, generic_args },\n                     syntax_ptr,\n@@ -379,10 +392,10 @@ impl ExprCollector<'_> {\n                 let expr = e.expr().map(|e| self.collect_expr(e));\n                 self.alloc_expr(Expr::Return { expr }, syntax_ptr)\n             }\n-            ast::Expr::RecordLit(e) => {\n+            ast::Expr::RecordExpr(e) => {\n                 let path = e.path().and_then(|path| self.expander.parse_path(path));\n                 let mut field_ptrs = Vec::new();\n-                let record_lit = if let Some(nfl) = e.record_field_list() {\n+                let record_lit = if let Some(nfl) = e.record_expr_field_list() {\n                     let fields = nfl\n                         .fields()\n                         .inspect(|field| field_ptrs.push(AstPtr::new(field)))\n@@ -432,7 +445,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::CastExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                let type_ref = TypeRef::from_ast_opt(&self.ctx(), e.type_ref());\n+                let type_ref = TypeRef::from_ast_opt(&self.ctx(), e.ty());\n                 self.alloc_expr(Expr::Cast { expr, type_ref }, syntax_ptr)\n             }\n             ast::Expr::RefExpr(e) => {\n@@ -460,22 +473,19 @@ impl ExprCollector<'_> {\n                     self.alloc_expr(Expr::Missing, syntax_ptr)\n                 }\n             }\n-            ast::Expr::LambdaExpr(e) => {\n+            ast::Expr::ClosureExpr(e) => {\n                 let mut args = Vec::new();\n                 let mut arg_types = Vec::new();\n                 if let Some(pl) = e.param_list() {\n                     for param in pl.params() {\n                         let pat = self.collect_pat_opt(param.pat());\n-                        let type_ref =\n-                            param.ascribed_type().map(|it| TypeRef::from_ast(&self.ctx(), it));\n+                        let type_ref = param.ty().map(|it| TypeRef::from_ast(&self.ctx(), it));\n                         args.push(pat);\n                         arg_types.push(type_ref);\n                     }\n                 }\n-                let ret_type = e\n-                    .ret_type()\n-                    .and_then(|r| r.type_ref())\n-                    .map(|it| TypeRef::from_ast(&self.ctx(), it));\n+                let ret_type =\n+                    e.ret_type().and_then(|r| r.ty()).map(|it| TypeRef::from_ast(&self.ctx(), it));\n                 let body = self.collect_expr_opt(e.body());\n                 self.alloc_expr(Expr::Lambda { args, arg_types, ret_type, body }, syntax_ptr)\n             }\n@@ -486,7 +496,7 @@ impl ExprCollector<'_> {\n                 self.alloc_expr(Expr::BinaryOp { lhs, rhs, op }, syntax_ptr)\n             }\n             ast::Expr::TupleExpr(e) => {\n-                let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n+                let exprs = e.fields().map(|expr| self.collect_expr(expr)).collect();\n                 self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n             }\n             ast::Expr::BoxExpr(e) => {\n@@ -559,9 +569,6 @@ impl ExprCollector<'_> {\n                     }\n                 }\n             }\n-\n-            // FIXME implement HIR for these:\n-            ast::Expr::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n         }\n     }\n \n@@ -604,76 +611,84 @@ impl ExprCollector<'_> {\n         self.collect_block_items(&block);\n         let statements = block\n             .statements()\n-            .map(|s| match s {\n-                ast::Stmt::LetStmt(stmt) => {\n-                    let pat = self.collect_pat_opt(stmt.pat());\n-                    let type_ref =\n-                        stmt.ascribed_type().map(|it| TypeRef::from_ast(&self.ctx(), it));\n-                    let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n-                    Statement::Let { pat, type_ref, initializer }\n-                }\n-                ast::Stmt::ExprStmt(stmt) => Statement::Expr(self.collect_expr_opt(stmt.expr())),\n+            .filter_map(|s| {\n+                let stmt = match s {\n+                    ast::Stmt::LetStmt(stmt) => {\n+                        let pat = self.collect_pat_opt(stmt.pat());\n+                        let type_ref = stmt.ty().map(|it| TypeRef::from_ast(&self.ctx(), it));\n+                        let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n+                        Statement::Let { pat, type_ref, initializer }\n+                    }\n+                    ast::Stmt::ExprStmt(stmt) => {\n+                        Statement::Expr(self.collect_expr_opt(stmt.expr()))\n+                    }\n+                    ast::Stmt::Item(_) => return None,\n+                };\n+                Some(stmt)\n             })\n             .collect();\n         let tail = block.expr().map(|e| self.collect_expr(e));\n-        let label = block.label().and_then(|l| l.lifetime_token()).map(|t| Name::new_lifetime(&t));\n-        self.alloc_expr(Expr::Block { statements, tail, label }, syntax_node_ptr)\n+        self.alloc_expr(Expr::Block { statements, tail, label: None }, syntax_node_ptr)\n     }\n \n     fn collect_block_items(&mut self, block: &ast::BlockExpr) {\n         let container = ContainerId::DefWithBodyId(self.def);\n \n         let items = block\n-            .items()\n+            .statements()\n+            .filter_map(|stmt| match stmt {\n+                ast::Stmt::Item(it) => Some(it),\n+                ast::Stmt::LetStmt(_) | ast::Stmt::ExprStmt(_) => None,\n+            })\n             .filter_map(|item| {\n                 let (def, name): (ModuleDefId, Option<ast::Name>) = match item {\n-                    ast::ModuleItem::FnDef(def) => {\n+                    ast::Item::Fn(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (\n                             FunctionLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n-                    ast::ModuleItem::TypeAliasDef(def) => {\n+                    ast::Item::TypeAlias(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (\n                             TypeAliasLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n-                    ast::ModuleItem::ConstDef(def) => {\n+                    ast::Item::Const(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (\n                             ConstLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n-                    ast::ModuleItem::StaticDef(def) => {\n+                    ast::Item::Static(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (StaticLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n-                    ast::ModuleItem::StructDef(def) => {\n+                    ast::Item::Struct(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (StructLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n-                    ast::ModuleItem::EnumDef(def) => {\n+                    ast::Item::Enum(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (EnumLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n-                    ast::ModuleItem::UnionDef(def) => {\n+                    ast::Item::Union(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (UnionLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n-                    ast::ModuleItem::TraitDef(def) => {\n+                    ast::Item::Trait(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (TraitLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n-                    ast::ModuleItem::ExternBlock(_) => return None, // FIXME: collect from extern blocks\n-                    ast::ModuleItem::ImplDef(_)\n-                    | ast::ModuleItem::UseItem(_)\n-                    | ast::ModuleItem::ExternCrateItem(_)\n-                    | ast::ModuleItem::Module(_)\n-                    | ast::ModuleItem::MacroCall(_) => return None,\n+                    ast::Item::ExternBlock(_) => return None, // FIXME: collect from extern blocks\n+                    ast::Item::Impl(_)\n+                    | ast::Item::Use(_)\n+                    | ast::Item::ExternCrate(_)\n+                    | ast::Item::Module(_)\n+                    | ast::Item::MacroCall(_) => return None,\n                 };\n \n                 Some((def, name))\n@@ -708,7 +723,7 @@ impl ExprCollector<'_> {\n \n     fn collect_pat(&mut self, pat: ast::Pat) -> PatId {\n         let pattern = match &pat {\n-            ast::Pat::BindPat(bp) => {\n+            ast::Pat::IdentPat(bp) => {\n                 let name = bp.name().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n                 let annotation =\n                     BindingAnnotation::new(bp.mut_token().is_some(), bp.ref_token().is_some());\n@@ -747,7 +762,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Pat::TupleStructPat(p) => {\n                 let path = p.path().and_then(|path| self.expander.parse_path(path));\n-                let (args, ellipsis) = self.collect_tuple_pat(p.args());\n+                let (args, ellipsis) = self.collect_tuple_pat(p.fields());\n                 Pat::TupleStruct { path, args, ellipsis }\n             }\n             ast::Pat::RefPat(p) => {\n@@ -765,40 +780,36 @@ impl ExprCollector<'_> {\n             }\n             ast::Pat::ParenPat(p) => return self.collect_pat_opt(p.pat()),\n             ast::Pat::TuplePat(p) => {\n-                let (args, ellipsis) = self.collect_tuple_pat(p.args());\n+                let (args, ellipsis) = self.collect_tuple_pat(p.fields());\n                 Pat::Tuple { args, ellipsis }\n             }\n-            ast::Pat::PlaceholderPat(_) => Pat::Wild,\n+            ast::Pat::WildcardPat(_) => Pat::Wild,\n             ast::Pat::RecordPat(p) => {\n                 let path = p.path().and_then(|path| self.expander.parse_path(path));\n-                let record_field_pat_list =\n-                    p.record_field_pat_list().expect(\"every struct should have a field list\");\n-                let mut fields: Vec<_> = record_field_pat_list\n-                    .bind_pats()\n-                    .filter_map(|bind_pat| {\n-                        let ast_pat =\n-                            ast::Pat::cast(bind_pat.syntax().clone()).expect(\"bind pat is a pat\");\n+                let args: Vec<_> = p\n+                    .record_pat_field_list()\n+                    .expect(\"every struct should have a field list\")\n+                    .fields()\n+                    .filter_map(|f| {\n+                        let ast_pat = f.pat()?;\n                         let pat = self.collect_pat(ast_pat);\n-                        let name = bind_pat.name()?.as_name();\n+                        let name = f.field_name()?.as_name();\n                         Some(RecordFieldPat { name, pat })\n                     })\n                     .collect();\n-                let iter = record_field_pat_list.record_field_pats().filter_map(|f| {\n-                    let ast_pat = f.pat()?;\n-                    let pat = self.collect_pat(ast_pat);\n-                    let name = f.field_name()?.as_name();\n-                    Some(RecordFieldPat { name, pat })\n-                });\n-                fields.extend(iter);\n \n-                let ellipsis = record_field_pat_list.dotdot_token().is_some();\n+                let ellipsis = p\n+                    .record_pat_field_list()\n+                    .expect(\"every struct should have a field list\")\n+                    .dotdot_token()\n+                    .is_some();\n \n-                Pat::Record { path, args: fields, ellipsis }\n+                Pat::Record { path, args, ellipsis }\n             }\n             ast::Pat::SlicePat(p) => {\n                 let SlicePatComponents { prefix, slice, suffix } = p.components();\n \n-                // FIXME properly handle `DotDotPat`\n+                // FIXME properly handle `RestPat`\n                 Pat::Slice {\n                     prefix: prefix.into_iter().map(|p| self.collect_pat(p)).collect(),\n                     slice: slice.map(|p| self.collect_pat(p)),\n@@ -815,10 +826,10 @@ impl ExprCollector<'_> {\n                     Pat::Missing\n                 }\n             }\n-            ast::Pat::DotDotPat(_) => {\n-                // `DotDotPat` requires special handling and should not be mapped\n+            ast::Pat::RestPat(_) => {\n+                // `RestPat` requires special handling and should not be mapped\n                 // to a Pat. Here we are using `Pat::Missing` as a fallback for\n-                // when `DotDotPat` is mapped to `Pat`, which can easily happen\n+                // when `RestPat` is mapped to `Pat`, which can easily happen\n                 // when the source code being analyzed has a malformed pattern\n                 // which includes `..` in a place where it isn't valid.\n \n@@ -842,10 +853,10 @@ impl ExprCollector<'_> {\n     fn collect_tuple_pat(&mut self, args: AstChildren<ast::Pat>) -> (Vec<PatId>, Option<usize>) {\n         // Find the location of the `..`, if there is one. Note that we do not\n         // consider the possiblity of there being multiple `..` here.\n-        let ellipsis = args.clone().position(|p| matches!(p, ast::Pat::DotDotPat(_)));\n+        let ellipsis = args.clone().position(|p| matches!(p, ast::Pat::RestPat(_)));\n         // We want to skip the `..` pattern here, since we account for it above.\n         let args = args\n-            .filter(|p| !matches!(p, ast::Pat::DotDotPat(_)))\n+            .filter(|p| !matches!(p, ast::Pat::RestPat(_)))\n             .map(|p| self.collect_pat(p))\n             .collect();\n "}, {"sha": "dcb00a1d9a0ba916cc83b3bcc0015f7a9c79aab7", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -162,7 +162,7 @@ impl ChildBySource for EnumId {\n         let arena_map = arena_map.as_ref();\n         for (local_id, source) in arena_map.value.iter() {\n             let id = EnumVariantId { parent: *self, local_id };\n-            res[keys::ENUM_VARIANT].insert(arena_map.with_value(source.clone()), id)\n+            res[keys::VARIANT].insert(arena_map.with_value(source.clone()), id)\n         }\n \n         res"}, {"sha": "699ba9c923524f406596991c2d5e1b4b1f73b51d", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -12,7 +12,7 @@ use hir_expand::{\n use ra_arena::{map::ArenaMap, Arena};\n use ra_db::FileId;\n use ra_prof::profile;\n-use ra_syntax::ast::{self, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n+use ra_syntax::ast::{self, GenericParamsOwner, NameOwner, TypeBoundsOwner};\n \n use crate::{\n     body::LowerCtx,\n@@ -66,7 +66,7 @@ pub enum WherePredicateTarget {\n     TypeParam(LocalTypeParamId),\n }\n \n-type SourceMap = ArenaMap<LocalTypeParamId, Either<ast::TraitDef, ast::TypeParam>>;\n+type SourceMap = ArenaMap<LocalTypeParamId, Either<ast::Trait, ast::TypeParam>>;\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n@@ -205,9 +205,9 @@ impl GenericParams {\n         &mut self,\n         lower_ctx: &LowerCtx,\n         sm: &mut SourceMap,\n-        node: &dyn TypeParamsOwner,\n+        node: &dyn GenericParamsOwner,\n     ) {\n-        if let Some(params) = node.type_param_list() {\n+        if let Some(params) = node.generic_param_list() {\n             self.fill_params(lower_ctx, sm, params)\n         }\n         if let Some(where_clause) = node.where_clause() {\n@@ -232,7 +232,7 @@ impl GenericParams {\n         &mut self,\n         lower_ctx: &LowerCtx,\n         sm: &mut SourceMap,\n-        params: ast::TypeParamList,\n+        params: ast::GenericParamList,\n     ) {\n         for type_param in params.type_params() {\n             let name = type_param.name().map_or_else(Name::missing, |it| it.as_name());\n@@ -253,7 +253,7 @@ impl GenericParams {\n \n     fn fill_where_predicates(&mut self, lower_ctx: &LowerCtx, where_clause: ast::WhereClause) {\n         for pred in where_clause.predicates() {\n-            let type_ref = match pred.type_ref() {\n+            let type_ref = match pred.ty() {\n                 Some(type_ref) => type_ref,\n                 None => continue,\n             };\n@@ -270,7 +270,7 @@ impl GenericParams {\n         bound: ast::TypeBound,\n         type_ref: TypeRef,\n     ) {\n-        if bound.question_token().is_some() {\n+        if bound.question_mark_token().is_some() {\n             // FIXME: remove this bound\n             return;\n         }\n@@ -317,7 +317,7 @@ impl GenericParams {\n \n impl HasChildSource for GenericDefId {\n     type ChildId = LocalTypeParamId;\n-    type Value = Either<ast::TraitDef, ast::TypeParam>;\n+    type Value = Either<ast::Trait, ast::TypeParam>;\n     fn child_source(&self, db: &dyn DefDatabase) -> InFile<SourceMap> {\n         let (_, sm) = GenericParams::new(db, *self);\n         sm"}, {"sha": "a67e75dac069000341344ae64240b792e2ab202f", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -13,7 +13,7 @@ use std::{\n     sync::Arc,\n };\n \n-use ast::{AstNode, AttrsOwner, NameOwner, StructKind, TypeAscriptionOwner};\n+use ast::{AstNode, AttrsOwner, NameOwner, StructKind};\n use either::Either;\n use hir_expand::{\n     ast_id_map::FileAstId,\n@@ -70,7 +70,7 @@ impl GenericParamsId {\n pub struct ItemTree {\n     top_level: SmallVec<[ModItem; 1]>,\n     attrs: FxHashMap<AttrOwner, Attrs>,\n-    inner_items: FxHashMap<FileAstId<ast::ModuleItem>, SmallVec<[ModItem; 1]>>,\n+    inner_items: FxHashMap<FileAstId<ast::Item>, SmallVec<[ModItem; 1]>>,\n \n     data: Option<Box<ItemTreeData>>,\n }\n@@ -187,7 +187,7 @@ impl ItemTree {\n     ///\n     /// Most AST items are lowered to a single `ModItem`, but some (eg. `use` items) may be lowered\n     /// to multiple items in the `ItemTree`.\n-    pub fn inner_items(&self, ast: FileAstId<ast::ModuleItem>) -> &[ModItem] {\n+    pub fn inner_items(&self, ast: FileAstId<ast::Item>) -> &[ModItem] {\n         &self.inner_items[&ast]\n     }\n \n@@ -310,7 +310,7 @@ from_attrs!(ModItem(ModItem), Variant(Idx<Variant>), Field(Idx<Field>));\n \n /// Trait implemented by all item nodes in the item tree.\n pub trait ItemTreeNode: Clone {\n-    type Source: AstNode + Into<ast::ModuleItem>;\n+    type Source: AstNode + Into<ast::Item>;\n \n     fn ast_id(&self) -> FileAstId<Self::Source>;\n \n@@ -411,17 +411,17 @@ macro_rules! mod_items {\n }\n \n mod_items! {\n-    Import in imports -> ast::UseItem,\n-    ExternCrate in extern_crates -> ast::ExternCrateItem,\n-    Function in functions -> ast::FnDef,\n-    Struct in structs -> ast::StructDef,\n-    Union in unions -> ast::UnionDef,\n-    Enum in enums -> ast::EnumDef,\n-    Const in consts -> ast::ConstDef,\n-    Static in statics -> ast::StaticDef,\n-    Trait in traits -> ast::TraitDef,\n-    Impl in impls -> ast::ImplDef,\n-    TypeAlias in type_aliases -> ast::TypeAliasDef,\n+    Import in imports -> ast::Use,\n+    ExternCrate in extern_crates -> ast::ExternCrate,\n+    Function in functions -> ast::Fn,\n+    Struct in structs -> ast::Struct,\n+    Union in unions -> ast::Union,\n+    Enum in enums -> ast::Enum,\n+    Const in consts -> ast::Const,\n+    Static in statics -> ast::Static,\n+    Trait in traits -> ast::Trait,\n+    Impl in impls -> ast::Impl,\n+    TypeAlias in type_aliases -> ast::TypeAlias,\n     Mod in mods -> ast::Module,\n     MacroCall in macro_calls -> ast::MacroCall,\n }\n@@ -482,7 +482,7 @@ pub struct Import {\n     pub is_prelude: bool,\n     /// AST ID of the `use` or `extern crate` item this import was derived from. Note that many\n     /// `Import`s can map to the same `use` item.\n-    pub ast_id: FileAstId<ast::UseItem>,\n+    pub ast_id: FileAstId<ast::Use>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -492,7 +492,7 @@ pub struct ExternCrate {\n     pub visibility: RawVisibilityId,\n     /// Whether this is a `#[macro_use] extern crate ...`.\n     pub is_macro_use: bool,\n-    pub ast_id: FileAstId<ast::ExternCrateItem>,\n+    pub ast_id: FileAstId<ast::ExternCrate>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -505,7 +505,7 @@ pub struct Function {\n     pub params: Box<[TypeRef]>,\n     pub is_varargs: bool,\n     pub ret_type: TypeRef,\n-    pub ast_id: FileAstId<ast::FnDef>,\n+    pub ast_id: FileAstId<ast::Fn>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -514,7 +514,7 @@ pub struct Struct {\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n     pub fields: Fields,\n-    pub ast_id: FileAstId<ast::StructDef>,\n+    pub ast_id: FileAstId<ast::Struct>,\n     pub kind: StructDefKind,\n }\n \n@@ -534,7 +534,7 @@ pub struct Union {\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n     pub fields: Fields,\n-    pub ast_id: FileAstId<ast::UnionDef>,\n+    pub ast_id: FileAstId<ast::Union>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -543,7 +543,7 @@ pub struct Enum {\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n     pub variants: IdRange<Variant>,\n-    pub ast_id: FileAstId<ast::EnumDef>,\n+    pub ast_id: FileAstId<ast::Enum>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -552,7 +552,7 @@ pub struct Const {\n     pub name: Option<Name>,\n     pub visibility: RawVisibilityId,\n     pub type_ref: TypeRef,\n-    pub ast_id: FileAstId<ast::ConstDef>,\n+    pub ast_id: FileAstId<ast::Const>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -561,7 +561,7 @@ pub struct Static {\n     pub visibility: RawVisibilityId,\n     pub mutable: bool,\n     pub type_ref: TypeRef,\n-    pub ast_id: FileAstId<ast::StaticDef>,\n+    pub ast_id: FileAstId<ast::Static>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -571,7 +571,7 @@ pub struct Trait {\n     pub generic_params: GenericParamsId,\n     pub auto: bool,\n     pub items: Box<[AssocItem]>,\n-    pub ast_id: FileAstId<ast::TraitDef>,\n+    pub ast_id: FileAstId<ast::Trait>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -581,7 +581,7 @@ pub struct Impl {\n     pub target_type: TypeRef,\n     pub is_negative: bool,\n     pub items: Box<[AssocItem]>,\n-    pub ast_id: FileAstId<ast::ImplDef>,\n+    pub ast_id: FileAstId<ast::Impl>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -592,7 +592,7 @@ pub struct TypeAlias {\n     pub bounds: Box<[TypeBound]>,\n     pub generic_params: GenericParamsId,\n     pub type_ref: Option<TypeRef>,\n-    pub ast_id: FileAstId<ast::TypeAliasDef>,\n+    pub ast_id: FileAstId<ast::TypeAlias>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "450ef879814e06a1c13e7468dd027f0e18c6a901", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 86, "deletions": 89, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,18 +1,21 @@\n //! AST -> `ItemTree` lowering code.\n \n-use super::*;\n-use crate::{\n-    attr::Attrs,\n-    generics::{GenericParams, TypeParamData, TypeParamProvenance},\n-};\n+use std::{collections::hash_map::Entry, mem, sync::Arc};\n+\n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, HirFileId};\n use ra_arena::map::ArenaMap;\n use ra_syntax::{\n     ast::{self, ModuleItemOwner},\n     SyntaxNode,\n };\n use smallvec::SmallVec;\n-use std::{collections::hash_map::Entry, mem, sync::Arc};\n+\n+use crate::{\n+    attr::Attrs,\n+    generics::{GenericParams, TypeParamData, TypeParamProvenance},\n+};\n+\n+use super::*;\n \n fn id<N: ItemTreeNode>(index: Idx<N>) -> FileItemTreeId<N> {\n     FileItemTreeId { index, _p: PhantomData }\n@@ -70,19 +73,19 @@ impl Ctx {\n         self.tree.data_mut()\n     }\n \n-    fn lower_mod_item(&mut self, item: &ast::ModuleItem, inner: bool) -> Option<ModItems> {\n+    fn lower_mod_item(&mut self, item: &ast::Item, inner: bool) -> Option<ModItems> {\n         assert!(inner || self.inner_items.is_empty());\n \n         // Collect inner items for 1-to-1-lowered items.\n         match item {\n-            ast::ModuleItem::StructDef(_)\n-            | ast::ModuleItem::UnionDef(_)\n-            | ast::ModuleItem::EnumDef(_)\n-            | ast::ModuleItem::FnDef(_)\n-            | ast::ModuleItem::TypeAliasDef(_)\n-            | ast::ModuleItem::ConstDef(_)\n-            | ast::ModuleItem::StaticDef(_)\n-            | ast::ModuleItem::MacroCall(_) => {\n+            ast::Item::Struct(_)\n+            | ast::Item::Union(_)\n+            | ast::Item::Enum(_)\n+            | ast::Item::Fn(_)\n+            | ast::Item::TypeAlias(_)\n+            | ast::Item::Const(_)\n+            | ast::Item::Static(_)\n+            | ast::Item::MacroCall(_) => {\n                 // Skip this if we're already collecting inner items. We'll descend into all nodes\n                 // already.\n                 if !inner {\n@@ -92,34 +95,30 @@ impl Ctx {\n \n             // These are handled in their respective `lower_X` method (since we can't just blindly\n             // walk them).\n-            ast::ModuleItem::TraitDef(_)\n-            | ast::ModuleItem::ImplDef(_)\n-            | ast::ModuleItem::ExternBlock(_) => {}\n+            ast::Item::Trait(_) | ast::Item::Impl(_) | ast::Item::ExternBlock(_) => {}\n \n             // These don't have inner items.\n-            ast::ModuleItem::Module(_)\n-            | ast::ModuleItem::ExternCrateItem(_)\n-            | ast::ModuleItem::UseItem(_) => {}\n+            ast::Item::Module(_) | ast::Item::ExternCrate(_) | ast::Item::Use(_) => {}\n         };\n \n         let attrs = Attrs::new(item, &self.hygiene);\n         let items = match item {\n-            ast::ModuleItem::StructDef(ast) => self.lower_struct(ast).map(Into::into),\n-            ast::ModuleItem::UnionDef(ast) => self.lower_union(ast).map(Into::into),\n-            ast::ModuleItem::EnumDef(ast) => self.lower_enum(ast).map(Into::into),\n-            ast::ModuleItem::FnDef(ast) => self.lower_function(ast).map(Into::into),\n-            ast::ModuleItem::TypeAliasDef(ast) => self.lower_type_alias(ast).map(Into::into),\n-            ast::ModuleItem::StaticDef(ast) => self.lower_static(ast).map(Into::into),\n-            ast::ModuleItem::ConstDef(ast) => Some(self.lower_const(ast).into()),\n-            ast::ModuleItem::Module(ast) => self.lower_module(ast).map(Into::into),\n-            ast::ModuleItem::TraitDef(ast) => self.lower_trait(ast).map(Into::into),\n-            ast::ModuleItem::ImplDef(ast) => self.lower_impl(ast).map(Into::into),\n-            ast::ModuleItem::UseItem(ast) => Some(ModItems(\n+            ast::Item::Struct(ast) => self.lower_struct(ast).map(Into::into),\n+            ast::Item::Union(ast) => self.lower_union(ast).map(Into::into),\n+            ast::Item::Enum(ast) => self.lower_enum(ast).map(Into::into),\n+            ast::Item::Fn(ast) => self.lower_function(ast).map(Into::into),\n+            ast::Item::TypeAlias(ast) => self.lower_type_alias(ast).map(Into::into),\n+            ast::Item::Static(ast) => self.lower_static(ast).map(Into::into),\n+            ast::Item::Const(ast) => Some(self.lower_const(ast).into()),\n+            ast::Item::Module(ast) => self.lower_module(ast).map(Into::into),\n+            ast::Item::Trait(ast) => self.lower_trait(ast).map(Into::into),\n+            ast::Item::Impl(ast) => self.lower_impl(ast).map(Into::into),\n+            ast::Item::Use(ast) => Some(ModItems(\n                 self.lower_use(ast).into_iter().map(Into::into).collect::<SmallVec<_>>(),\n             )),\n-            ast::ModuleItem::ExternCrateItem(ast) => self.lower_extern_crate(ast).map(Into::into),\n-            ast::ModuleItem::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n-            ast::ModuleItem::ExternBlock(ast) => {\n+            ast::Item::ExternCrate(ast) => self.lower_extern_crate(ast).map(Into::into),\n+            ast::Item::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n+            ast::Item::ExternBlock(ast) => {\n                 Some(ModItems(self.lower_extern_block(ast).into_iter().collect::<SmallVec<_>>()))\n             }\n         };\n@@ -147,27 +146,26 @@ impl Ctx {\n     fn collect_inner_items(&mut self, container: &SyntaxNode) {\n         let forced_vis = self.forced_visibility.take();\n         let mut inner_items = mem::take(&mut self.tree.inner_items);\n-        inner_items.extend(\n-            container.descendants().skip(1).filter_map(ast::ModuleItem::cast).filter_map(|item| {\n+        inner_items.extend(container.descendants().skip(1).filter_map(ast::Item::cast).filter_map(\n+            |item| {\n                 let ast_id = self.source_ast_id_map.ast_id(&item);\n                 Some((ast_id, self.lower_mod_item(&item, true)?.0))\n-            }),\n-        );\n+            },\n+        ));\n         self.tree.inner_items = inner_items;\n         self.forced_visibility = forced_vis;\n     }\n \n-    fn lower_assoc_item(&mut self, item: &ast::ModuleItem) -> Option<AssocItem> {\n+    fn lower_assoc_item(&mut self, item: &ast::AssocItem) -> Option<AssocItem> {\n         match item {\n-            ast::ModuleItem::FnDef(ast) => self.lower_function(ast).map(Into::into),\n-            ast::ModuleItem::TypeAliasDef(ast) => self.lower_type_alias(ast).map(Into::into),\n-            ast::ModuleItem::ConstDef(ast) => Some(self.lower_const(ast).into()),\n-            ast::ModuleItem::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n-            _ => None,\n+            ast::AssocItem::Fn(ast) => self.lower_function(ast).map(Into::into),\n+            ast::AssocItem::TypeAlias(ast) => self.lower_type_alias(ast).map(Into::into),\n+            ast::AssocItem::Const(ast) => Some(self.lower_const(ast).into()),\n+            ast::AssocItem::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n         }\n     }\n \n-    fn lower_struct(&mut self, strukt: &ast::StructDef) -> Option<FileItemTreeId<Struct>> {\n+    fn lower_struct(&mut self, strukt: &ast::Struct) -> Option<FileItemTreeId<Struct>> {\n         let visibility = self.lower_visibility(strukt);\n         let name = strukt.name()?.as_name();\n         let generic_params = self.lower_generic_params(GenericsOwner::Struct, strukt);\n@@ -196,7 +194,7 @@ impl Ctx {\n         }\n     }\n \n-    fn lower_record_fields(&mut self, fields: &ast::RecordFieldDefList) -> IdRange<Field> {\n+    fn lower_record_fields(&mut self, fields: &ast::RecordFieldList) -> IdRange<Field> {\n         let start = self.next_field_idx();\n         for field in fields.fields() {\n             if let Some(data) = self.lower_record_field(&field) {\n@@ -208,15 +206,15 @@ impl Ctx {\n         IdRange::new(start..end)\n     }\n \n-    fn lower_record_field(&mut self, field: &ast::RecordFieldDef) -> Option<Field> {\n+    fn lower_record_field(&mut self, field: &ast::RecordField) -> Option<Field> {\n         let name = field.name()?.as_name();\n         let visibility = self.lower_visibility(field);\n-        let type_ref = self.lower_type_ref_opt(field.ascribed_type());\n+        let type_ref = self.lower_type_ref_opt(field.ty());\n         let res = Field { name, type_ref, visibility };\n         Some(res)\n     }\n \n-    fn lower_tuple_fields(&mut self, fields: &ast::TupleFieldDefList) -> IdRange<Field> {\n+    fn lower_tuple_fields(&mut self, fields: &ast::TupleFieldList) -> IdRange<Field> {\n         let start = self.next_field_idx();\n         for (i, field) in fields.fields().enumerate() {\n             let data = self.lower_tuple_field(i, &field);\n@@ -227,30 +225,28 @@ impl Ctx {\n         IdRange::new(start..end)\n     }\n \n-    fn lower_tuple_field(&mut self, idx: usize, field: &ast::TupleFieldDef) -> Field {\n+    fn lower_tuple_field(&mut self, idx: usize, field: &ast::TupleField) -> Field {\n         let name = Name::new_tuple_field(idx);\n         let visibility = self.lower_visibility(field);\n-        let type_ref = self.lower_type_ref_opt(field.type_ref());\n+        let type_ref = self.lower_type_ref_opt(field.ty());\n         let res = Field { name, type_ref, visibility };\n         res\n     }\n \n-    fn lower_union(&mut self, union: &ast::UnionDef) -> Option<FileItemTreeId<Union>> {\n+    fn lower_union(&mut self, union: &ast::Union) -> Option<FileItemTreeId<Union>> {\n         let visibility = self.lower_visibility(union);\n         let name = union.name()?.as_name();\n         let generic_params = self.lower_generic_params(GenericsOwner::Union, union);\n-        let fields = match union.record_field_def_list() {\n-            Some(record_field_def_list) => {\n-                self.lower_fields(&StructKind::Record(record_field_def_list))\n-            }\n+        let fields = match union.record_field_list() {\n+            Some(record_field_list) => self.lower_fields(&StructKind::Record(record_field_list)),\n             None => Fields::Record(IdRange::new(self.next_field_idx()..self.next_field_idx())),\n         };\n         let ast_id = self.source_ast_id_map.ast_id(union);\n         let res = Union { name, visibility, generic_params, fields, ast_id };\n         Some(id(self.data().unions.alloc(res)))\n     }\n \n-    fn lower_enum(&mut self, enum_: &ast::EnumDef) -> Option<FileItemTreeId<Enum>> {\n+    fn lower_enum(&mut self, enum_: &ast::Enum) -> Option<FileItemTreeId<Enum>> {\n         let visibility = self.lower_visibility(enum_);\n         let name = enum_.name()?.as_name();\n         let generic_params = self.lower_generic_params(GenericsOwner::Enum, enum_);\n@@ -263,7 +259,7 @@ impl Ctx {\n         Some(id(self.data().enums.alloc(res)))\n     }\n \n-    fn lower_variants(&mut self, variants: &ast::EnumVariantList) -> IdRange<Variant> {\n+    fn lower_variants(&mut self, variants: &ast::VariantList) -> IdRange<Variant> {\n         let start = self.next_variant_idx();\n         for variant in variants.variants() {\n             if let Some(data) = self.lower_variant(&variant) {\n@@ -275,22 +271,22 @@ impl Ctx {\n         IdRange::new(start..end)\n     }\n \n-    fn lower_variant(&mut self, variant: &ast::EnumVariant) -> Option<Variant> {\n+    fn lower_variant(&mut self, variant: &ast::Variant) -> Option<Variant> {\n         let name = variant.name()?.as_name();\n         let fields = self.lower_fields(&variant.kind());\n         let res = Variant { name, fields };\n         Some(res)\n     }\n \n-    fn lower_function(&mut self, func: &ast::FnDef) -> Option<FileItemTreeId<Function>> {\n+    fn lower_function(&mut self, func: &ast::Fn) -> Option<FileItemTreeId<Function>> {\n         let visibility = self.lower_visibility(func);\n         let name = func.name()?.as_name();\n \n         let mut params = Vec::new();\n         let mut has_self_param = false;\n         if let Some(param_list) = func.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n-                let self_type = match self_param.ascribed_type() {\n+                let self_type = match self_param.ty() {\n                     Some(type_ref) => TypeRef::from_ast(&self.body_ctx, type_ref),\n                     None => {\n                         let self_type = TypeRef::Path(name![Self].into());\n@@ -309,7 +305,7 @@ impl Ctx {\n                 has_self_param = true;\n             }\n             for param in param_list.params() {\n-                let type_ref = TypeRef::from_ast_opt(&self.body_ctx, param.ascribed_type());\n+                let type_ref = TypeRef::from_ast_opt(&self.body_ctx, param.ty());\n                 params.push(type_ref);\n             }\n         }\n@@ -321,7 +317,7 @@ impl Ctx {\n             }\n         }\n \n-        let ret_type = match func.ret_type().and_then(|rt| rt.type_ref()) {\n+        let ret_type = match func.ret_type().and_then(|rt| rt.ty()) {\n             Some(type_ref) => TypeRef::from_ast(&self.body_ctx, type_ref),\n             _ => TypeRef::unit(),\n         };\n@@ -353,10 +349,10 @@ impl Ctx {\n \n     fn lower_type_alias(\n         &mut self,\n-        type_alias: &ast::TypeAliasDef,\n+        type_alias: &ast::TypeAlias,\n     ) -> Option<FileItemTreeId<TypeAlias>> {\n         let name = type_alias.name()?.as_name();\n-        let type_ref = type_alias.type_ref().map(|it| self.lower_type_ref(&it));\n+        let type_ref = type_alias.ty().map(|it| self.lower_type_ref(&it));\n         let visibility = self.lower_visibility(type_alias);\n         let bounds = self.lower_type_bounds(type_alias);\n         let generic_params = self.lower_generic_params(GenericsOwner::TypeAlias, type_alias);\n@@ -372,19 +368,19 @@ impl Ctx {\n         Some(id(self.data().type_aliases.alloc(res)))\n     }\n \n-    fn lower_static(&mut self, static_: &ast::StaticDef) -> Option<FileItemTreeId<Static>> {\n+    fn lower_static(&mut self, static_: &ast::Static) -> Option<FileItemTreeId<Static>> {\n         let name = static_.name()?.as_name();\n-        let type_ref = self.lower_type_ref_opt(static_.ascribed_type());\n+        let type_ref = self.lower_type_ref_opt(static_.ty());\n         let visibility = self.lower_visibility(static_);\n         let mutable = static_.mut_token().is_some();\n         let ast_id = self.source_ast_id_map.ast_id(static_);\n         let res = Static { name, visibility, mutable, type_ref, ast_id };\n         Some(id(self.data().statics.alloc(res)))\n     }\n \n-    fn lower_const(&mut self, konst: &ast::ConstDef) -> FileItemTreeId<Const> {\n+    fn lower_const(&mut self, konst: &ast::Const) -> FileItemTreeId<Const> {\n         let name = konst.name().map(|it| it.as_name());\n-        let type_ref = self.lower_type_ref_opt(konst.ascribed_type());\n+        let type_ref = self.lower_type_ref_opt(konst.ty());\n         let visibility = self.lower_visibility(konst);\n         let ast_id = self.source_ast_id_map.ast_id(konst);\n         let res = Const { name, visibility, type_ref, ast_id };\n@@ -417,15 +413,15 @@ impl Ctx {\n         Some(id(self.data().mods.alloc(res)))\n     }\n \n-    fn lower_trait(&mut self, trait_def: &ast::TraitDef) -> Option<FileItemTreeId<Trait>> {\n+    fn lower_trait(&mut self, trait_def: &ast::Trait) -> Option<FileItemTreeId<Trait>> {\n         let name = trait_def.name()?.as_name();\n         let visibility = self.lower_visibility(trait_def);\n         let generic_params =\n             self.lower_generic_params_and_inner_items(GenericsOwner::Trait(trait_def), trait_def);\n         let auto = trait_def.auto_token().is_some();\n-        let items = trait_def.item_list().map(|list| {\n+        let items = trait_def.assoc_item_list().map(|list| {\n             self.with_inherited_visibility(visibility, |this| {\n-                list.items()\n+                list.assoc_items()\n                     .filter_map(|item| {\n                         let attrs = Attrs::new(&item, &this.hygiene);\n                         this.collect_inner_items(item.syntax());\n@@ -449,18 +445,18 @@ impl Ctx {\n         Some(id(self.data().traits.alloc(res)))\n     }\n \n-    fn lower_impl(&mut self, impl_def: &ast::ImplDef) -> Option<FileItemTreeId<Impl>> {\n+    fn lower_impl(&mut self, impl_def: &ast::Impl) -> Option<FileItemTreeId<Impl>> {\n         let generic_params =\n             self.lower_generic_params_and_inner_items(GenericsOwner::Impl, impl_def);\n-        let target_trait = impl_def.target_trait().map(|tr| self.lower_type_ref(&tr));\n-        let target_type = self.lower_type_ref(&impl_def.target_type()?);\n+        let target_trait = impl_def.trait_().map(|tr| self.lower_type_ref(&tr));\n+        let target_type = self.lower_type_ref(&impl_def.self_ty()?);\n         let is_negative = impl_def.excl_token().is_some();\n \n         // We cannot use `assoc_items()` here as that does not include macro calls.\n         let items = impl_def\n-            .item_list()\n+            .assoc_item_list()\n             .into_iter()\n-            .flat_map(|it| it.items())\n+            .flat_map(|it| it.assoc_items())\n             .filter_map(|item| {\n                 self.collect_inner_items(item.syntax());\n                 let assoc = self.lower_assoc_item(&item)?;\n@@ -474,7 +470,7 @@ impl Ctx {\n         Some(id(self.data().impls.alloc(res)))\n     }\n \n-    fn lower_use(&mut self, use_item: &ast::UseItem) -> Vec<FileItemTreeId<Import>> {\n+    fn lower_use(&mut self, use_item: &ast::Use) -> Vec<FileItemTreeId<Import>> {\n         // FIXME: cfg_attr\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n         let visibility = self.lower_visibility(use_item);\n@@ -503,10 +499,10 @@ impl Ctx {\n \n     fn lower_extern_crate(\n         &mut self,\n-        extern_crate: &ast::ExternCrateItem,\n+        extern_crate: &ast::ExternCrate,\n     ) -> Option<FileItemTreeId<ExternCrate>> {\n         let path = ModPath::from_name_ref(&extern_crate.name_ref()?);\n-        let alias = extern_crate.alias().map(|a| {\n+        let alias = extern_crate.rename().map(|a| {\n             a.name().map(|it| it.as_name()).map_or(ImportAlias::Underscore, ImportAlias::Alias)\n         });\n         let visibility = self.lower_visibility(extern_crate);\n@@ -552,15 +548,16 @@ impl Ctx {\n                     self.collect_inner_items(item.syntax());\n                     let attrs = Attrs::new(&item, &self.hygiene);\n                     let id: ModItem = match item {\n-                        ast::ExternItem::FnDef(ast) => {\n+                        ast::ExternItem::Fn(ast) => {\n                             let func = self.lower_function(&ast)?;\n                             self.data().functions[func.index].is_unsafe = true;\n                             func.into()\n                         }\n-                        ast::ExternItem::StaticDef(ast) => {\n+                        ast::ExternItem::Static(ast) => {\n                             let statik = self.lower_static(&ast)?;\n                             statik.into()\n                         }\n+                        ast::ExternItem::MacroCall(_) => return None,\n                     };\n                     self.add_attrs(id.into(), attrs);\n                     Some(id)\n@@ -573,10 +570,10 @@ impl Ctx {\n     fn lower_generic_params_and_inner_items(\n         &mut self,\n         owner: GenericsOwner<'_>,\n-        node: &impl ast::TypeParamsOwner,\n+        node: &impl ast::GenericParamsOwner,\n     ) -> GenericParamsId {\n         // Generics are part of item headers and may contain inner items we need to collect.\n-        if let Some(params) = node.type_param_list() {\n+        if let Some(params) = node.generic_param_list() {\n             self.collect_inner_items(params.syntax());\n         }\n         if let Some(clause) = node.where_clause() {\n@@ -589,7 +586,7 @@ impl Ctx {\n     fn lower_generic_params(\n         &mut self,\n         owner: GenericsOwner<'_>,\n-        node: &impl ast::TypeParamsOwner,\n+        node: &impl ast::GenericParamsOwner,\n     ) -> GenericParamsId {\n         let mut sm = &mut ArenaMap::default();\n         let mut generics = GenericParams::default();\n@@ -651,10 +648,10 @@ impl Ctx {\n         self.data().vis.alloc(vis)\n     }\n \n-    fn lower_type_ref(&self, type_ref: &ast::TypeRef) -> TypeRef {\n+    fn lower_type_ref(&self, type_ref: &ast::Type) -> TypeRef {\n         TypeRef::from_ast(&self.body_ctx, type_ref.clone())\n     }\n-    fn lower_type_ref_opt(&self, type_ref: Option<ast::TypeRef>) -> TypeRef {\n+    fn lower_type_ref_opt(&self, type_ref: Option<ast::Type>) -> TypeRef {\n         type_ref.map(|ty| self.lower_type_ref(&ty)).unwrap_or(TypeRef::Error)\n     }\n \n@@ -702,7 +699,7 @@ enum GenericsOwner<'a> {\n     Enum,\n     Union,\n     /// The `TraitDef` is needed to fill the source map for the implicit `Self` parameter.\n-    Trait(&'a ast::TraitDef),\n+    Trait(&'a ast::Trait),\n     TypeAlias,\n     Impl,\n }"}, {"sha": "a81497fa8a9e56f9c760a7a0e6b07d43856bdf3b", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -21,7 +21,7 @@ fn test_inner_items(ra_fixture: &str) {\n     let mut outer_items = FxHashSet::default();\n     let mut worklist = tree.top_level_items().to_vec();\n     while let Some(item) = worklist.pop() {\n-        let node: ast::ModuleItem = match item {\n+        let node: ast::Item = match item {\n             ModItem::Import(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n             ModItem::ExternCrate(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n             ModItem::Function(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n@@ -53,7 +53,7 @@ fn test_inner_items(ra_fixture: &str) {\n \n     // Now descend the root node and check that all `ast::ModuleItem`s are either recorded above, or\n     // registered as inner items.\n-    for item in root.descendants().skip(1).filter_map(ast::ModuleItem::cast) {\n+    for item in root.descendants().skip(1).filter_map(ast::Item::cast) {\n         if outer_items.contains(&item) {\n             continue;\n         }\n@@ -228,31 +228,31 @@ fn smoke() {\n \n             top-level items:\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n-            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"a\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: false, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UseItem>(0) }\n+            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"a\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: false, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Use>(0) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n-            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: true, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UseItem>(0) }\n+            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: true, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Use>(0) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"ext_crate\"))] }, input: None }]) }]\n-            ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_macro_use: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ExternCrateItem>(1) }\n+            ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_macro_use: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ExternCrate>(1) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_trait\"))] }, input: None }]) }]\n-            Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(2) }\n+            Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Trait>(2) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_ty\"))] }, input: None }]) }]\n-            > TypeAlias { name: Name(Text(\"AssocTy\")), visibility: RawVisibilityId(\"pub(self)\"), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParamsId(4294967295), type_ref: None, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TypeAliasDef>(8) }\n+            > TypeAlias { name: Name(Text(\"AssocTy\")), visibility: RawVisibilityId(\"pub(self)\"), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParamsId(4294967295), type_ref: None, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TypeAlias>(8) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_const\"))] }, input: None }]) }]\n-            > Const { name: Some(Name(Text(\"CONST\"))), visibility: RawVisibilityId(\"pub(self)\"), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ConstDef>(9) }\n+            > Const { name: Some(Name(Text(\"CONST\"))), visibility: RawVisibilityId(\"pub(self)\"), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Const>(9) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_method\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(10) }\n+            > Function { name: Name(Text(\"method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(10) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_dfl_method\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"dfl_method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(11) }\n+            > Function { name: Name(Text(\"dfl_method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(11) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct0\"))] }, input: None }]) }]\n-            Struct { name: Name(Text(\"Struct0\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(3), kind: Unit }\n+            Struct { name: Name(Text(\"Struct0\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Struct>(3), kind: Unit }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct1\"))] }, input: None }]) }]\n-            Struct { name: Name(Text(\"Struct1\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(2), fields: Tuple(IdRange::<ra_hir_def::item_tree::Field>(0..1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n+            Struct { name: Name(Text(\"Struct1\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(2), fields: Tuple(IdRange::<ra_hir_def::item_tree::Field>(0..1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Struct>(4), kind: Tuple }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct2\"))] }, input: None }]) }]\n-            Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(3), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(1..2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n+            Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(3), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(1..2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Struct>(5), kind: Record }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"en\"))] }, input: None }]) }]\n-            Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), variants: IdRange::<ra_hir_def::item_tree::Variant>(0..1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n+            Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), variants: IdRange::<ra_hir_def::item_tree::Variant>(0..1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Enum>(6) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"un\"))] }, input: None }]) }]\n-            Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(3..4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n+            Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(3..4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Union>(7) }\n         \"##]],\n     );\n }\n@@ -274,13 +274,13 @@ fn simple_inner_items() {\n             inner attrs: Attrs { entries: None }\n \n             top-level items:\n-            Impl { generic_params: GenericParamsId(0), target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n-            > Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+            Impl { generic_params: GenericParamsId(0), target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Impl>(0) }\n+            > Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(1) }\n \n             inner items:\n \n-            for AST FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(2):\n-            Function { name: Name(Text(\"end\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+            for AST FileAstId::<ra_syntax::ast::generated::nodes::Item>(2):\n+            Function { name: Name(Text(\"end\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(2) }\n \n         \"#]],\n     );\n@@ -303,9 +303,9 @@ fn extern_attrs() {\n \n             top-level items:\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n-            Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: true, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+            Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: true, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(1) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n-            Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: true, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+            Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: true, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(2) }\n         \"##]],\n     );\n }\n@@ -327,11 +327,11 @@ fn trait_attrs() {\n \n             top-level items:\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"trait_attr\"))] }, input: None }]) }]\n-            Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(0) }\n+            Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Trait>(0) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(1) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(2) }\n         \"##]],\n     );\n }\n@@ -353,11 +353,11 @@ fn impl_attrs() {\n \n             top-level items:\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"impl_attr\"))] }, input: None }]) }]\n-            Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Ty\"))] }, generic_args: [None] }), is_negative: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+            Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Ty\"))] }, generic_args: [None] }), is_negative: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Impl>(0) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(1) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(2) }\n         \"##]],\n     );\n }\n@@ -408,13 +408,13 @@ fn inner_item_attrs() {\n             inner attrs: Attrs { entries: None }\n \n             top-level items:\n-            Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(0) }\n+            Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(0) }\n \n             inner items:\n \n-            for AST FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(1):\n+            for AST FileAstId::<ra_syntax::ast::generated::nodes::Item>(1):\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_inner\"))] }, input: None }]) }]\n-            Function { name: Name(Text(\"inner\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+            Function { name: Name(Text(\"inner\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(1) }\n \n         \"##]],\n     );\n@@ -432,7 +432,7 @@ fn assoc_item_macros() {\n             inner attrs: Attrs { entries: None }\n \n             top-level items:\n-            Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"S\"))] }, generic_args: [None] }), is_negative: false, items: [MacroCall(Idx::<MacroCall>(0))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+            Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"S\"))] }, generic_args: [None] }), is_negative: false, items: [MacroCall(Idx::<MacroCall>(0))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Impl>(0) }\n             > MacroCall { name: None, path: ModPath { kind: Plain, segments: [Name(Text(\"items\"))] }, is_export: false, is_local_inner: false, is_builtin: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::MacroCall>(1) }\n         \"#]],\n     );"}, {"sha": "441bdbead88542a2a424b31e9e5a2df6039d4604", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -14,19 +14,19 @@ use crate::{\n \n pub type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n \n-pub const FUNCTION: Key<ast::FnDef, FunctionId> = Key::new();\n-pub const CONST: Key<ast::ConstDef, ConstId> = Key::new();\n-pub const STATIC: Key<ast::StaticDef, StaticId> = Key::new();\n-pub const TYPE_ALIAS: Key<ast::TypeAliasDef, TypeAliasId> = Key::new();\n-pub const IMPL: Key<ast::ImplDef, ImplId> = Key::new();\n-pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n-pub const STRUCT: Key<ast::StructDef, StructId> = Key::new();\n-pub const UNION: Key<ast::UnionDef, UnionId> = Key::new();\n-pub const ENUM: Key<ast::EnumDef, EnumId> = Key::new();\n-\n-pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n-pub const TUPLE_FIELD: Key<ast::TupleFieldDef, FieldId> = Key::new();\n-pub const RECORD_FIELD: Key<ast::RecordFieldDef, FieldId> = Key::new();\n+pub const FUNCTION: Key<ast::Fn, FunctionId> = Key::new();\n+pub const CONST: Key<ast::Const, ConstId> = Key::new();\n+pub const STATIC: Key<ast::Static, StaticId> = Key::new();\n+pub const TYPE_ALIAS: Key<ast::TypeAlias, TypeAliasId> = Key::new();\n+pub const IMPL: Key<ast::Impl, ImplId> = Key::new();\n+pub const TRAIT: Key<ast::Trait, TraitId> = Key::new();\n+pub const STRUCT: Key<ast::Struct, StructId> = Key::new();\n+pub const UNION: Key<ast::Union, UnionId> = Key::new();\n+pub const ENUM: Key<ast::Enum, EnumId> = Key::new();\n+\n+pub const VARIANT: Key<ast::Variant, EnumVariantId> = Key::new();\n+pub const TUPLE_FIELD: Key<ast::TupleField, FieldId> = Key::new();\n+pub const RECORD_FIELD: Key<ast::RecordField, FieldId> = Key::new();\n pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();\n \n pub const MACRO: Key<ast::MacroCall, MacroDefId> = Key::new();"}, {"sha": "237b1038afcfe52447b1cc347330f24c3c085916", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -521,7 +521,7 @@ impl AsMacroCall for AstIdWithPath<ast::MacroCall> {\n     }\n }\n \n-impl AsMacroCall for AstIdWithPath<ast::ModuleItem> {\n+impl AsMacroCall for AstIdWithPath<ast::Item> {\n     fn as_call_id(\n         &self,\n         db: &dyn db::DefDatabase,"}, {"sha": "28b7a20c552910b7f35e5217b5a09a4742861606", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -170,7 +170,7 @@ struct MacroDirective {\n #[derive(Clone, Debug, Eq, PartialEq)]\n struct DeriveDirective {\n     module_id: LocalModuleId,\n-    ast_id: AstIdWithPath<ast::ModuleItem>,\n+    ast_id: AstIdWithPath<ast::Item>,\n }\n \n struct DefData<'a> {\n@@ -1100,7 +1100,7 @@ impl ModCollector<'_, '_> {\n         res\n     }\n \n-    fn collect_derives(&mut self, attrs: &Attrs, ast_id: FileAstId<ast::ModuleItem>) {\n+    fn collect_derives(&mut self, attrs: &Attrs, ast_id: FileAstId<ast::Item>) {\n         for derive_subtree in attrs.by_key(\"derive\").tt_values() {\n             // for #[derive(Copy, Clone)], `derive_subtree` is the `(Copy, Clone)` subtree\n             for tt in &derive_subtree.token_trees {"}, {"sha": "cc1726e9e054524c3284b03a55a7dade849af627", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -67,7 +67,7 @@ impl ModPath {\n \n     /// Calls `cb` with all paths, represented by this use item.\n     pub(crate) fn expand_use_item(\n-        item_src: InFile<ast::UseItem>,\n+        item_src: InFile<ast::Use>,\n         hygiene: &Hygiene,\n         mut cb: impl FnMut(ModPath, &ast::UseTree, /* is_glob */ bool, Option<ImportAlias>),\n     ) {\n@@ -258,7 +258,7 @@ impl<'a> PathSegments<'a> {\n }\n \n impl GenericArgs {\n-    pub(crate) fn from_ast(lower_ctx: &LowerCtx, node: ast::TypeArgList) -> Option<GenericArgs> {\n+    pub(crate) fn from_ast(lower_ctx: &LowerCtx, node: ast::GenericArgList) -> Option<GenericArgs> {\n         lower::lower_generic_args(lower_ctx, node)\n     }\n "}, {"sha": "d09fc66e4dcec0998d80dddde2961d9c56edd61b", "filename": "crates/ra_hir_def/src/path/lower.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -9,7 +9,7 @@ use hir_expand::{\n     hygiene::Hygiene,\n     name::{name, AsName},\n };\n-use ra_syntax::ast::{self, AstNode, TypeAscriptionOwner, TypeBoundsOwner};\n+use ra_syntax::ast::{self, AstNode, TypeBoundsOwner};\n \n use super::AssociatedTypeBinding;\n use crate::{\n@@ -41,7 +41,7 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n                 match hygiene.name_ref_to_name(name_ref) {\n                     Either::Left(name) => {\n                         let args = segment\n-                            .type_arg_list()\n+                            .generic_arg_list()\n                             .and_then(|it| lower_generic_args(&ctx, it))\n                             .or_else(|| {\n                                 lower_generic_args_from_fn_path(\n@@ -148,33 +148,37 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n \n pub(super) fn lower_generic_args(\n     lower_ctx: &LowerCtx,\n-    node: ast::TypeArgList,\n+    node: ast::GenericArgList,\n ) -> Option<GenericArgs> {\n     let mut args = Vec::new();\n-    for type_arg in node.type_args() {\n-        let type_ref = TypeRef::from_ast_opt(lower_ctx, type_arg.type_ref());\n-        args.push(GenericArg::Type(type_ref));\n-    }\n-    // lifetimes ignored for now\n     let mut bindings = Vec::new();\n-    for assoc_type_arg in node.assoc_type_args() {\n-        let assoc_type_arg: ast::AssocTypeArg = assoc_type_arg;\n-        if let Some(name_ref) = assoc_type_arg.name_ref() {\n-            let name = name_ref.as_name();\n-            let type_ref = assoc_type_arg.type_ref().map(|it| TypeRef::from_ast(lower_ctx, it));\n-            let bounds = if let Some(l) = assoc_type_arg.type_bound_list() {\n-                l.bounds().map(|it| TypeBound::from_ast(lower_ctx, it)).collect()\n-            } else {\n-                Vec::new()\n-            };\n-            bindings.push(AssociatedTypeBinding { name, type_ref, bounds });\n+    for generic_arg in node.generic_args() {\n+        match generic_arg {\n+            ast::GenericArg::TypeArg(type_arg) => {\n+                let type_ref = TypeRef::from_ast_opt(lower_ctx, type_arg.ty());\n+                args.push(GenericArg::Type(type_ref));\n+            }\n+            ast::GenericArg::AssocTypeArg(assoc_type_arg) => {\n+                if let Some(name_ref) = assoc_type_arg.name_ref() {\n+                    let name = name_ref.as_name();\n+                    let type_ref = assoc_type_arg.ty().map(|it| TypeRef::from_ast(lower_ctx, it));\n+                    let bounds = if let Some(l) = assoc_type_arg.type_bound_list() {\n+                        l.bounds().map(|it| TypeBound::from_ast(lower_ctx, it)).collect()\n+                    } else {\n+                        Vec::new()\n+                    };\n+                    bindings.push(AssociatedTypeBinding { name, type_ref, bounds });\n+                }\n+            }\n+            // Lifetimes and constants are ignored for now.\n+            ast::GenericArg::LifetimeArg(_) | ast::GenericArg::ConstArg(_) => (),\n         }\n     }\n+\n     if args.is_empty() && bindings.is_empty() {\n-        None\n-    } else {\n-        Some(GenericArgs { args, has_self_type: false, bindings })\n+        return None;\n     }\n+    Some(GenericArgs { args, has_self_type: false, bindings })\n }\n \n /// Collect `GenericArgs` from the parts of a fn-like path, i.e. `Fn(X, Y)\n@@ -189,14 +193,14 @@ fn lower_generic_args_from_fn_path(\n     if let Some(params) = params {\n         let mut param_types = Vec::new();\n         for param in params.params() {\n-            let type_ref = TypeRef::from_ast_opt(&ctx, param.ascribed_type());\n+            let type_ref = TypeRef::from_ast_opt(&ctx, param.ty());\n             param_types.push(type_ref);\n         }\n         let arg = GenericArg::Type(TypeRef::Tuple(param_types));\n         args.push(arg);\n     }\n     if let Some(ret_type) = ret_type {\n-        let type_ref = TypeRef::from_ast_opt(&ctx, ret_type.type_ref());\n+        let type_ref = TypeRef::from_ast_opt(&ctx, ret_type.ty());\n         bindings.push(AssociatedTypeBinding {\n             name: name![Output],\n             type_ref: Some(type_ref),"}, {"sha": "794be45e894c88bf08fbc70eeaee6dfe359d521b", "filename": "crates/ra_hir_def/src/path/lower/lower_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn lower_use_tree(\n             lower_use_tree(prefix.clone(), child_tree, hygiene, cb);\n         }\n     } else {\n-        let alias = tree.alias().map(|a| {\n+        let alias = tree.rename().map(|a| {\n             a.name().map(|it| it.as_name()).map_or(ImportAlias::Underscore, ImportAlias::Alias)\n         });\n         let is_glob = tree.star_token().is_some();"}, {"sha": "6f7884ffe5958d2116fb5edc6d850d66de5fa2ff", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,7 +1,6 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n-\n-use ra_syntax::ast::{self, TypeAscriptionOwner, TypeBoundsOwner};\n+use ra_syntax::ast::{self};\n \n use crate::{body::LowerCtx, path::Path};\n \n@@ -80,42 +79,42 @@ pub enum TypeBound {\n \n impl TypeRef {\n     /// Converts an `ast::TypeRef` to a `hir::TypeRef`.\n-    pub(crate) fn from_ast(ctx: &LowerCtx, node: ast::TypeRef) -> Self {\n+    pub(crate) fn from_ast(ctx: &LowerCtx, node: ast::Type) -> Self {\n         match node {\n-            ast::TypeRef::ParenType(inner) => TypeRef::from_ast_opt(&ctx, inner.type_ref()),\n-            ast::TypeRef::TupleType(inner) => {\n+            ast::Type::ParenType(inner) => TypeRef::from_ast_opt(&ctx, inner.ty()),\n+            ast::Type::TupleType(inner) => {\n                 TypeRef::Tuple(inner.fields().map(|it| TypeRef::from_ast(ctx, it)).collect())\n             }\n-            ast::TypeRef::NeverType(..) => TypeRef::Never,\n-            ast::TypeRef::PathType(inner) => {\n+            ast::Type::NeverType(..) => TypeRef::Never,\n+            ast::Type::PathType(inner) => {\n                 // FIXME: Use `Path::from_src`\n                 inner\n                     .path()\n                     .and_then(|it| ctx.lower_path(it))\n                     .map(TypeRef::Path)\n                     .unwrap_or(TypeRef::Error)\n             }\n-            ast::TypeRef::PointerType(inner) => {\n-                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.type_ref());\n+            ast::Type::PtrType(inner) => {\n+                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.ty());\n                 let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::RawPtr(Box::new(inner_ty), mutability)\n             }\n-            ast::TypeRef::ArrayType(inner) => {\n-                TypeRef::Array(Box::new(TypeRef::from_ast_opt(&ctx, inner.type_ref())))\n+            ast::Type::ArrayType(inner) => {\n+                TypeRef::Array(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())))\n             }\n-            ast::TypeRef::SliceType(inner) => {\n-                TypeRef::Slice(Box::new(TypeRef::from_ast_opt(&ctx, inner.type_ref())))\n+            ast::Type::SliceType(inner) => {\n+                TypeRef::Slice(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())))\n             }\n-            ast::TypeRef::ReferenceType(inner) => {\n-                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.type_ref());\n+            ast::Type::RefType(inner) => {\n+                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.ty());\n                 let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::Reference(Box::new(inner_ty), mutability)\n             }\n-            ast::TypeRef::PlaceholderType(_inner) => TypeRef::Placeholder,\n-            ast::TypeRef::FnPointerType(inner) => {\n+            ast::Type::InferType(_inner) => TypeRef::Placeholder,\n+            ast::Type::FnPtrType(inner) => {\n                 let ret_ty = inner\n                     .ret_type()\n-                    .and_then(|rt| rt.type_ref())\n+                    .and_then(|rt| rt.ty())\n                     .map(|it| TypeRef::from_ast(ctx, it))\n                     .unwrap_or_else(|| TypeRef::Tuple(Vec::new()));\n                 let mut is_varargs = false;\n@@ -124,28 +123,25 @@ impl TypeRef {\n                         is_varargs = param.dotdotdot_token().is_some();\n                     }\n \n-                    pl.params()\n-                        .map(|p| p.ascribed_type())\n-                        .map(|it| TypeRef::from_ast_opt(&ctx, it))\n-                        .collect()\n+                    pl.params().map(|p| p.ty()).map(|it| TypeRef::from_ast_opt(&ctx, it)).collect()\n                 } else {\n                     Vec::new()\n                 };\n                 params.push(ret_ty);\n                 TypeRef::Fn(params, is_varargs)\n             }\n             // for types are close enough for our purposes to the inner type for now...\n-            ast::TypeRef::ForType(inner) => TypeRef::from_ast_opt(&ctx, inner.type_ref()),\n-            ast::TypeRef::ImplTraitType(inner) => {\n+            ast::Type::ForType(inner) => TypeRef::from_ast_opt(&ctx, inner.ty()),\n+            ast::Type::ImplTraitType(inner) => {\n                 TypeRef::ImplTrait(type_bounds_from_ast(ctx, inner.type_bound_list()))\n             }\n-            ast::TypeRef::DynTraitType(inner) => {\n+            ast::Type::DynTraitType(inner) => {\n                 TypeRef::DynTrait(type_bounds_from_ast(ctx, inner.type_bound_list()))\n             }\n         }\n     }\n \n-    pub(crate) fn from_ast_opt(ctx: &LowerCtx, node: Option<ast::TypeRef>) -> Self {\n+    pub(crate) fn from_ast_opt(ctx: &LowerCtx, node: Option<ast::Type>) -> Self {\n         if let Some(node) = node {\n             TypeRef::from_ast(ctx, node)\n         } else {"}, {"sha": "8bfe1b4ba7d3357f36682c56e76cf2515d8cbc30", "filename": "crates/ra_hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -73,7 +73,7 @@ impl AstIdMap {\n         // change parent's id. This means that, say, adding a new function to a\n         // trait does not change ids of top-level items, which helps caching.\n         bfs(node, |it| {\n-            if let Some(module_item) = ast::ModuleItem::cast(it) {\n+            if let Some(module_item) = ast::Item::cast(it) {\n                 res.alloc(module_item.syntax());\n             }\n         });"}, {"sha": "69fa907cb89b90aa8f1ae15aa6a9504830162a5c", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -4,7 +4,7 @@ use log::debug;\n \n use ra_parser::FragmentKind;\n use ra_syntax::{\n-    ast::{self, AstNode, ModuleItemOwner, NameOwner, TypeParamsOwner},\n+    ast::{self, AstNode, GenericParamsOwner, ModuleItemOwner, NameOwner},\n     match_ast,\n };\n \n@@ -72,9 +72,9 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, mbe::ExpandError> {\n     let node = item.syntax();\n     let (name, params) = match_ast! {\n         match node {\n-            ast::StructDef(it) => (it.name(), it.type_param_list()),\n-            ast::EnumDef(it) => (it.name(), it.type_param_list()),\n-            ast::UnionDef(it) => (it.name(), it.type_param_list()),\n+            ast::Struct(it) => (it.name(), it.generic_param_list()),\n+            ast::Enum(it) => (it.name(), it.generic_param_list()),\n+            ast::Union(it) => (it.name(), it.generic_param_list()),\n             _ => {\n                 debug!(\"unexpected node is {:?}\", node);\n                 return Err(mbe::ExpandError::ConversionError)\n@@ -276,7 +276,7 @@ mod tests {\n         let file_id = file_pos.file_id;\n         let parsed = db.parse(file_id);\n         let items: Vec<_> =\n-            parsed.syntax_node().descendants().filter_map(ast::ModuleItem::cast).collect();\n+            parsed.syntax_node().descendants().filter_map(ast::Item::cast).collect();\n \n         let ast_id_map = db.ast_id_map(file_id.into());\n "}, {"sha": "f3b7cd492c0bcf9d328a2a281312e360462eb5d5", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -379,14 +379,14 @@ fn to_fragment_kind(db: &dyn AstDatabase, id: MacroCallId) -> FragmentKind {\n \n         FOR_EXPR => FragmentKind::Expr,\n         PATH_EXPR => FragmentKind::Expr,\n-        LAMBDA_EXPR => FragmentKind::Expr,\n+        CLOSURE_EXPR => FragmentKind::Expr,\n         CONDITION => FragmentKind::Expr,\n         BREAK_EXPR => FragmentKind::Expr,\n         RETURN_EXPR => FragmentKind::Expr,\n         MATCH_EXPR => FragmentKind::Expr,\n         MATCH_ARM => FragmentKind::Expr,\n         MATCH_GUARD => FragmentKind::Expr,\n-        RECORD_FIELD => FragmentKind::Expr,\n+        RECORD_EXPR_FIELD => FragmentKind::Expr,\n         CALL_EXPR => FragmentKind::Expr,\n         INDEX_EXPR => FragmentKind::Expr,\n         METHOD_CALL_EXPR => FragmentKind::Expr,"}, {"sha": "2e8d63691716b9f1190a5b5604bc65711464da18", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -159,7 +159,7 @@ impl HirFileId {\n     }\n \n     /// Indicate it is macro file generated for builtin derive\n-    pub fn is_builtin_derive(&self, db: &dyn db::AstDatabase) -> Option<InFile<ast::ModuleItem>> {\n+    pub fn is_builtin_derive(&self, db: &dyn db::AstDatabase) -> Option<InFile<ast::Item>> {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n@@ -174,7 +174,7 @@ impl HirFileId {\n                     MacroDefKind::BuiltInDerive(_) => loc.kind.node(db),\n                     _ => return None,\n                 };\n-                Some(item.with_value(ast::ModuleItem::cast(item.value.clone())?))\n+                Some(item.with_value(ast::Item::cast(item.value.clone())?))\n             }\n         }\n     }\n@@ -258,7 +258,7 @@ pub struct MacroCallLoc {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum MacroCallKind {\n     FnLike(AstId<ast::MacroCall>),\n-    Attr(AstId<ast::ModuleItem>, String),\n+    Attr(AstId<ast::Item>, String),\n }\n \n impl MacroCallKind {"}, {"sha": "2c0ec41d248176bca687ff7f2e1328534d53513f", "filename": "crates/ra_hir_expand/src/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -101,7 +101,7 @@ fn remove_derive_attrs(tt: &tt::Subtree) -> Option<tt::Subtree> {\n }\n \n #[cfg(test)]\n-mod test {\n+mod tests {\n     use super::*;\n     use test_utils::assert_eq_text;\n "}, {"sha": "83397d5793b4814bdceb49f67a2ef4da82ea641b", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -28,9 +28,9 @@ test_utils = { path = \"../test_utils\" }\n \n scoped-tls = \"1\"\n \n-chalk-solve = { version = \"0.18.0\" }\n-chalk-ir = { version = \"0.18.0\" }\n-chalk-recursive = { version = \"0.18.0\" }\n+chalk-solve = { version = \"0.21.0\" }\n+chalk-ir = { version = \"0.21.0\" }\n+chalk-recursive = { version = \"0.21.0\" }\n \n [dev-dependencies]\n expect = { path = \"../expect\" }"}, {"sha": "977c0525b526f55fff4228a949a8fd993ab287af", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -29,7 +29,7 @@ pub fn validate_body(db: &dyn HirDatabase, owner: DefWithBodyId, sink: &mut Diag\n #[derive(Debug)]\n pub struct NoSuchField {\n     pub file: HirFileId,\n-    pub field: AstPtr<ast::RecordField>,\n+    pub field: AstPtr<ast::RecordExprField>,\n }\n \n impl Diagnostic for NoSuchField {\n@@ -47,19 +47,19 @@ impl Diagnostic for NoSuchField {\n }\n \n impl AstDiagnostic for NoSuchField {\n-    type AST = ast::RecordField;\n+    type AST = ast::RecordExprField;\n \n     fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.source().file_id).unwrap();\n         let node = self.source().value.to_node(&root);\n-        ast::RecordField::cast(node).unwrap()\n+        ast::RecordExprField::cast(node).unwrap()\n     }\n }\n \n #[derive(Debug)]\n pub struct MissingFields {\n     pub file: HirFileId,\n-    pub field_list: AstPtr<ast::RecordFieldList>,\n+    pub field_list: AstPtr<ast::RecordExprFieldList>,\n     pub missed_fields: Vec<Name>,\n }\n \n@@ -80,19 +80,19 @@ impl Diagnostic for MissingFields {\n }\n \n impl AstDiagnostic for MissingFields {\n-    type AST = ast::RecordFieldList;\n+    type AST = ast::RecordExprFieldList;\n \n     fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.source().file_id).unwrap();\n         let node = self.source().value.to_node(&root);\n-        ast::RecordFieldList::cast(node).unwrap()\n+        ast::RecordExprFieldList::cast(node).unwrap()\n     }\n }\n \n #[derive(Debug)]\n pub struct MissingPatFields {\n     pub file: HirFileId,\n-    pub field_list: AstPtr<ast::RecordFieldPatList>,\n+    pub field_list: AstPtr<ast::RecordPatFieldList>,\n     pub missed_fields: Vec<Name>,\n }\n "}, {"sha": "95bbf2d955e9985b267e2570c6bc28a7de6cca53", "filename": "crates/ra_hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -100,8 +100,8 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n \n         if let Ok(source_ptr) = source_map.expr_syntax(id) {\n             let root = source_ptr.file_syntax(db.upcast());\n-            if let ast::Expr::RecordLit(record_lit) = &source_ptr.value.to_node(&root) {\n-                if let Some(field_list) = record_lit.record_field_list() {\n+            if let ast::Expr::RecordExpr(record_lit) = &source_ptr.value.to_node(&root) {\n+                if let Some(field_list) = record_lit.record_expr_field_list() {\n                     let variant_data = variant_data(db.upcast(), variant_def);\n                     let missed_fields = missed_fields\n                         .into_iter()\n@@ -131,7 +131,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             if let Some(expr) = source_ptr.value.as_ref().left() {\n                 let root = source_ptr.file_syntax(db.upcast());\n                 if let ast::Pat::RecordPat(record_pat) = expr.to_node(&root) {\n-                    if let Some(field_list) = record_pat.record_field_pat_list() {\n+                    if let Some(field_list) = record_pat.record_pat_field_list() {\n                         let variant_data = variant_data(db.upcast(), variant_def);\n                         let missed_fields = missed_fields\n                             .into_iter()"}, {"sha": "61ffbf5d1519111c71ed52f6637252dbcc26f342", "filename": "crates/ra_hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -6,6 +6,7 @@ use std::sync::Arc;\n use hir_def::{\n     body::Body,\n     expr::{Expr, ExprId, UnaryOp},\n+    resolver::{resolver_for_expr, ResolveValueResult, ValueNs},\n     DefWithBodyId,\n };\n use hir_expand::diagnostics::DiagnosticSink;\n@@ -70,7 +71,7 @@ pub fn unsafe_expressions(\n ) -> Vec<UnsafeExpr> {\n     let mut unsafe_exprs = vec![];\n     let body = db.body(def);\n-    walk_unsafe(&mut unsafe_exprs, db, infer, &body, body.body_expr, false);\n+    walk_unsafe(&mut unsafe_exprs, db, infer, def, &body, body.body_expr, false);\n \n     unsafe_exprs\n }\n@@ -79,6 +80,7 @@ fn walk_unsafe(\n     unsafe_exprs: &mut Vec<UnsafeExpr>,\n     db: &dyn HirDatabase,\n     infer: &InferenceResult,\n+    def: DefWithBodyId,\n     body: &Body,\n     current: ExprId,\n     inside_unsafe_block: bool,\n@@ -97,6 +99,15 @@ fn walk_unsafe(\n                 }\n             }\n         }\n+        Expr::Path(path) => {\n+            let resolver = resolver_for_expr(db.upcast(), def, current);\n+            let value_or_partial = resolver.resolve_path_in_value_ns(db.upcast(), path.mod_path());\n+            if let Some(ResolveValueResult::ValueNs(ValueNs::StaticId(id))) = value_or_partial {\n+                if db.static_data(id).mutable {\n+                    unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n+                }\n+            }\n+        }\n         Expr::MethodCall { .. } => {\n             if infer\n                 .method_resolution(current)\n@@ -112,13 +123,13 @@ fn walk_unsafe(\n             }\n         }\n         Expr::Unsafe { body: child } => {\n-            return walk_unsafe(unsafe_exprs, db, infer, body, *child, true);\n+            return walk_unsafe(unsafe_exprs, db, infer, def, body, *child, true);\n         }\n         _ => {}\n     }\n \n     expr.walk_child_exprs(|child| {\n-        walk_unsafe(unsafe_exprs, db, infer, body, child, inside_unsafe_block);\n+        walk_unsafe(unsafe_exprs, db, infer, def, body, child, inside_unsafe_block);\n     });\n }\n \n@@ -167,6 +178,27 @@ fn main() {\n         HasUnsafe.unsafe_fn();\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn missing_unsafe_diagnostic_with_static_mut() {\n+        check_diagnostics(\n+            r#\"\n+struct Ty {\n+    a: u8,\n+}\n+\n+static mut static_mut: Ty = Ty { a: 0 };\n+\n+fn main() {\n+    let x = static_mut.a;\n+          //^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n+    unsafe {\n+        let x = static_mut.a;\n+    }\n+}\n \"#,\n         );\n     }"}, {"sha": "3d12039a6d20bdd9db858dbfd3293cb8a98eadbb", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -440,6 +440,12 @@ impl<'a> InferenceContext<'a> {\n                 let ty = self.insert_type_vars(ty.subst(&substs));\n                 forbid_unresolved_segments((ty, Some(strukt.into())), unresolved)\n             }\n+            TypeNs::AdtId(AdtId::UnionId(u)) => {\n+                let substs = Ty::substs_from_path(&ctx, path, u.into(), true);\n+                let ty = self.db.ty(u.into());\n+                let ty = self.insert_type_vars(ty.subst(&substs));\n+                forbid_unresolved_segments((ty, Some(u.into())), unresolved)\n+            }\n             TypeNs::EnumVariantId(var) => {\n                 let substs = Ty::substs_from_path(&ctx, path, var.into(), true);\n                 let ty = self.db.ty(var.parent.into());\n@@ -490,10 +496,7 @@ impl<'a> InferenceContext<'a> {\n                 // FIXME potentially resolve assoc type\n                 (Ty::Unknown, None)\n             }\n-            TypeNs::AdtId(AdtId::EnumId(_))\n-            | TypeNs::AdtId(AdtId::UnionId(_))\n-            | TypeNs::BuiltinType(_)\n-            | TypeNs::TraitId(_) => {\n+            TypeNs::AdtId(AdtId::EnumId(_)) | TypeNs::BuiltinType(_) | TypeNs::TraitId(_) => {\n                 // FIXME diagnostic\n                 (Ty::Unknown, None)\n             }"}, {"sha": "7638f167b5b6d6878c81add1abb49c990d601992", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -518,6 +518,7 @@ impl Ty {\n         let (segment, generic_def) = match resolved {\n             ValueTyDefId::FunctionId(it) => (last, Some(it.into())),\n             ValueTyDefId::StructId(it) => (last, Some(it.into())),\n+            ValueTyDefId::UnionId(it) => (last, Some(it.into())),\n             ValueTyDefId::ConstId(it) => (last, Some(it.into())),\n             ValueTyDefId::StaticId(_) => (last, None),\n             ValueTyDefId::EnumVariantId(var) => {\n@@ -1148,11 +1149,12 @@ impl_from!(BuiltinType, AdtId(StructId, EnumId, UnionId), TypeAliasId for TyDefI\n pub enum ValueTyDefId {\n     FunctionId(FunctionId),\n     StructId(StructId),\n+    UnionId(UnionId),\n     EnumVariantId(EnumVariantId),\n     ConstId(ConstId),\n     StaticId(StaticId),\n }\n-impl_from!(FunctionId, StructId, EnumVariantId, ConstId, StaticId for ValueTyDefId);\n+impl_from!(FunctionId, StructId, UnionId, EnumVariantId, ConstId, StaticId for ValueTyDefId);\n \n /// Build the declared type of an item. This depends on the namespace; e.g. for\n /// `struct Foo(usize)`, we have two types: The type of the struct itself, and\n@@ -1179,6 +1181,7 @@ pub(crate) fn value_ty_query(db: &dyn HirDatabase, def: ValueTyDefId) -> Binders\n     match def {\n         ValueTyDefId::FunctionId(it) => type_for_fn(db, it),\n         ValueTyDefId::StructId(it) => type_for_struct_constructor(db, it),\n+        ValueTyDefId::UnionId(it) => type_for_adt(db, it.into()),\n         ValueTyDefId::EnumVariantId(it) => type_for_enum_variant_constructor(db, it),\n         ValueTyDefId::ConstId(it) => type_for_const(db, it),\n         ValueTyDefId::StaticId(it) => type_for_static(db, it),"}, {"sha": "016e689fff22524e3d380e64b61bf98818b066b0", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -81,7 +81,7 @@ fn check_types_impl(ra_fixture: &str, display_source: bool) {\n fn type_at_range(db: &TestDB, pos: FileRange) -> Ty {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_range::<ast::Expr>(file.syntax(), pos.range).unwrap();\n-    let fn_def = expr.syntax().ancestors().find_map(ast::FnDef::cast).unwrap();\n+    let fn_def = expr.syntax().ancestors().find_map(ast::Fn::cast).unwrap();\n     let module = db.module_for_file(pos.file_id);\n     let func = *module.child_by_source(db)[keys::FUNCTION]\n         .get(&InFile::new(pos.file_id.into(), fn_def))"}, {"sha": "5a7cf9455b5e739d1033830c5296266e43067d8f", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -334,16 +334,44 @@ fn infer_union() {\n             bar: f32,\n         }\n \n+        fn test() {\n+            let u = MyUnion { foo: 0 };\n+            unsafe { baz(u); }\n+            let u = MyUnion { bar: 0.0 };\n+            unsafe { baz(u); }\n+        }\n+\n         unsafe fn baz(u: MyUnion) {\n             let inner = u.foo;\n+            let inner = u.bar;\n         }\n         \"#,\n         expect![[r#\"\n-            61..62 'u': MyUnion\n-            73..99 '{     ...foo; }': ()\n-            83..88 'inner': u32\n-            91..92 'u': MyUnion\n-            91..96 'u.foo': u32\n+            57..172 '{     ...); } }': ()\n+            67..68 'u': MyUnion\n+            71..89 'MyUnio...o: 0 }': MyUnion\n+            86..87 '0': u32\n+            95..113 'unsafe...(u); }': ()\n+            102..113 '{ baz(u); }': ()\n+            104..107 'baz': fn baz(MyUnion)\n+            104..110 'baz(u)': ()\n+            108..109 'u': MyUnion\n+            122..123 'u': MyUnion\n+            126..146 'MyUnio... 0.0 }': MyUnion\n+            141..144 '0.0': f32\n+            152..170 'unsafe...(u); }': ()\n+            159..170 '{ baz(u); }': ()\n+            161..164 'baz': fn baz(MyUnion)\n+            161..167 'baz(u)': ()\n+            165..166 'u': MyUnion\n+            188..189 'u': MyUnion\n+            200..249 '{     ...bar; }': ()\n+            210..215 'inner': u32\n+            218..219 'u': MyUnion\n+            218..223 'u.foo': u32\n+            233..238 'inner': f32\n+            241..242 'u': MyUnion\n+            241..246 'u.bar': f32\n         \"#]],\n     );\n }"}, {"sha": "1c7065364450c26d2da0e2ed2e50d9d888c9eed4", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -183,6 +183,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                     .collect(),\n                 1,\n             ),\n+            where_clauses: make_binders(vec![], 0),\n         };\n         let num_vars = datas.num_binders;\n         Arc::new(OpaqueTyDatum { opaque_ty_id: id, bound: make_binders(bound, num_vars) })\n@@ -193,15 +194,6 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         Ty::Unknown.to_chalk(self.db)\n     }\n \n-    fn force_impl_for(\n-        &self,\n-        _well_known: rust_ir::WellKnownTrait,\n-        _ty: &chalk_ir::TyData<Interner>,\n-    ) -> Option<bool> {\n-        // this method is mostly for rustc\n-        None\n-    }\n-\n     fn is_object_safe(&self, _trait_id: chalk_ir::TraitId<Interner>) -> bool {\n         // FIXME: implement actual object safety\n         true\n@@ -547,8 +539,13 @@ pub(crate) fn fn_def_datum_query(\n         ),\n         where_clauses,\n     };\n-    let datum =\n-        FnDefDatum { id: fn_def_id, binders: make_binders(bound, sig.num_binders), abi: () };\n+    let datum = FnDefDatum {\n+        id: fn_def_id,\n+        abi: (),\n+        safety: chalk_ir::Safety::Safe,\n+        variadic: sig.value.is_varargs,\n+        binders: make_binders(bound, sig.num_binders),\n+    };\n     Arc::new(datum)\n }\n "}, {"sha": "b3e92993d2dd3f5d4f28a18d3bcb3f0c6f6b0af6", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -30,11 +30,16 @@ impl ToChalk for Ty {\n             Ty::Apply(apply_ty) => match apply_ty.ctor {\n                 TypeCtor::Ref(m) => ref_to_chalk(db, m, apply_ty.parameters),\n                 TypeCtor::Array => array_to_chalk(db, apply_ty.parameters),\n-                TypeCtor::FnPtr { num_args: _, is_varargs: _ } => {\n-                    // FIXME: handle is_varargs\n+                TypeCtor::FnPtr { num_args: _, is_varargs } => {\n                     let substitution = apply_ty.parameters.to_chalk(db).shifted_in(&Interner);\n-                    chalk_ir::TyData::Function(chalk_ir::Fn { num_binders: 0, substitution })\n-                        .intern(&Interner)\n+                    chalk_ir::TyData::Function(chalk_ir::FnPointer {\n+                        num_binders: 0,\n+                        abi: (),\n+                        safety: chalk_ir::Safety::Safe,\n+                        variadic: is_varargs,\n+                        substitution,\n+                    })\n+                    .intern(&Interner)\n                 }\n                 _ => {\n                     let name = apply_ty.ctor.to_chalk(db);\n@@ -118,7 +123,12 @@ impl ToChalk for Ty {\n                 let parameters = from_chalk(db, opaque_ty.substitution);\n                 Ty::Opaque(OpaqueTy { opaque_ty_id: impl_trait_id, parameters })\n             }\n-            chalk_ir::TyData::Function(chalk_ir::Fn { num_binders, substitution }) => {\n+            chalk_ir::TyData::Function(chalk_ir::FnPointer {\n+                num_binders,\n+                variadic,\n+                substitution,\n+                ..\n+            }) => {\n                 assert_eq!(num_binders, 0);\n                 let parameters: Substs = from_chalk(\n                     db,\n@@ -127,7 +137,7 @@ impl ToChalk for Ty {\n                 Ty::Apply(ApplicationTy {\n                     ctor: TypeCtor::FnPtr {\n                         num_args: (parameters.len() - 1) as u16,\n-                        is_varargs: false,\n+                        is_varargs: variadic,\n                     },\n                     parameters,\n                 })"}, {"sha": "f4181c4eb81c242d75aed3052d7325e582bea0e2", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -17,7 +17,7 @@ indexmap = \"1.3.2\"\n itertools = \"0.9.0\"\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n-rand = { version = \"0.7.3\", features = [\"small_rng\"] }\n+oorandom = \"11.1.2\"\n \n stdx = { path = \"../stdx\" }\n "}, {"sha": "1fcaf4a32b75d07ed5663e0d2ccb5e17e92b053f", "filename": "crates/ra_ide/src/call_hierarchy.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn incoming_calls(db: &RootDatabase, position: FilePosition) -> Optio\n         if let Some(nav) = syntax.ancestors().find_map(|node| {\n             match_ast! {\n                 match node {\n-                    ast::FnDef(it) => {\n+                    ast::Fn(it) => {\n                         let def = sema.to_def(&it)?;\n                         Some(def.to_nav(sema.db))\n                     },\n@@ -181,8 +181,8 @@ fn caller() {\n     call<|>ee();\n }\n \"#,\n-            \"callee FN_DEF FileId(1) 0..14 3..9\",\n-            &[\"caller FN_DEF FileId(1) 15..44 18..24 : [33..39]\"],\n+            \"callee FN FileId(1) 0..14 3..9\",\n+            &[\"caller FN FileId(1) 15..44 18..24 : [33..39]\"],\n             &[],\n         );\n     }\n@@ -197,8 +197,8 @@ fn caller() {\n     callee();\n }\n \"#,\n-            \"callee FN_DEF FileId(1) 0..14 3..9\",\n-            &[\"caller FN_DEF FileId(1) 15..44 18..24 : [33..39]\"],\n+            \"callee FN FileId(1) 0..14 3..9\",\n+            &[\"caller FN FileId(1) 15..44 18..24 : [33..39]\"],\n             &[],\n         );\n     }\n@@ -214,8 +214,8 @@ fn caller() {\n     callee();\n }\n \"#,\n-            \"callee FN_DEF FileId(1) 0..14 3..9\",\n-            &[\"caller FN_DEF FileId(1) 15..58 18..24 : [33..39, 47..53]\"],\n+            \"callee FN FileId(1) 0..14 3..9\",\n+            &[\"caller FN FileId(1) 15..58 18..24 : [33..39, 47..53]\"],\n             &[],\n         );\n     }\n@@ -234,10 +234,10 @@ fn caller2() {\n     callee();\n }\n \"#,\n-            \"callee FN_DEF FileId(1) 0..14 3..9\",\n+            \"callee FN FileId(1) 0..14 3..9\",\n             &[\n-                \"caller1 FN_DEF FileId(1) 15..45 18..25 : [34..40]\",\n-                \"caller2 FN_DEF FileId(1) 47..77 50..57 : [66..72]\",\n+                \"caller1 FN FileId(1) 15..45 18..25 : [34..40]\",\n+                \"caller2 FN FileId(1) 47..77 50..57 : [66..72]\",\n             ],\n             &[],\n         );\n@@ -263,10 +263,10 @@ mod tests {\n     }\n }\n \"#,\n-            \"callee FN_DEF FileId(1) 0..14 3..9\",\n+            \"callee FN FileId(1) 0..14 3..9\",\n             &[\n-                \"caller1 FN_DEF FileId(1) 15..45 18..25 : [34..40]\",\n-                \"test_caller FN_DEF FileId(1) 95..149 110..121 : [134..140]\",\n+                \"caller1 FN FileId(1) 15..45 18..25 : [34..40]\",\n+                \"test_caller FN FileId(1) 95..149 110..121 : [134..140]\",\n             ],\n             &[],\n         );\n@@ -287,8 +287,8 @@ fn caller() {\n //- /foo/mod.rs\n pub fn callee() {}\n \"#,\n-            \"callee FN_DEF FileId(2) 0..18 7..13\",\n-            &[\"caller FN_DEF FileId(1) 27..56 30..36 : [45..51]\"],\n+            \"callee FN FileId(2) 0..18 7..13\",\n+            &[\"caller FN FileId(1) 27..56 30..36 : [45..51]\"],\n             &[],\n         );\n     }\n@@ -304,9 +304,9 @@ fn call<|>er() {\n     callee();\n }\n \"#,\n-            \"caller FN_DEF FileId(1) 15..58 18..24\",\n+            \"caller FN FileId(1) 15..58 18..24\",\n             &[],\n-            &[\"callee FN_DEF FileId(1) 0..14 3..9 : [33..39, 47..53]\"],\n+            &[\"callee FN FileId(1) 0..14 3..9 : [33..39, 47..53]\"],\n         );\n     }\n \n@@ -325,9 +325,9 @@ fn call<|>er() {\n //- /foo/mod.rs\n pub fn callee() {}\n \"#,\n-            \"caller FN_DEF FileId(1) 27..56 30..36\",\n+            \"caller FN FileId(1) 27..56 30..36\",\n             &[],\n-            &[\"callee FN_DEF FileId(2) 0..18 7..13 : [45..51]\"],\n+            &[\"callee FN FileId(2) 0..18 7..13 : [45..51]\"],\n         );\n     }\n \n@@ -348,9 +348,9 @@ fn caller3() {\n \n }\n \"#,\n-            \"caller2 FN_DEF FileId(1) 33..64 36..43\",\n-            &[\"caller1 FN_DEF FileId(1) 0..31 3..10 : [19..26]\"],\n-            &[\"caller3 FN_DEF FileId(1) 66..83 69..76 : [52..59]\"],\n+            \"caller2 FN FileId(1) 33..64 36..43\",\n+            &[\"caller1 FN FileId(1) 0..31 3..10 : [19..26]\"],\n+            &[\"caller3 FN FileId(1) 66..83 69..76 : [52..59]\"],\n         );\n     }\n \n@@ -368,9 +368,9 @@ fn main() {\n     a<|>()\n }\n \"#,\n-            \"a FN_DEF FileId(1) 0..18 3..4\",\n-            &[\"main FN_DEF FileId(1) 31..52 34..38 : [47..48]\"],\n-            &[\"b FN_DEF FileId(1) 20..29 23..24 : [13..14]\"],\n+            \"a FN FileId(1) 0..18 3..4\",\n+            &[\"main FN FileId(1) 31..52 34..38 : [47..48]\"],\n+            &[\"b FN FileId(1) 20..29 23..24 : [13..14]\"],\n         );\n \n         check_hierarchy(\n@@ -385,8 +385,8 @@ fn main() {\n     a()\n }\n \"#,\n-            \"b FN_DEF FileId(1) 20..29 23..24\",\n-            &[\"a FN_DEF FileId(1) 0..18 3..4 : [13..14]\"],\n+            \"b FN FileId(1) 20..29 23..24\",\n+            &[\"a FN FileId(1) 0..18 3..4 : [13..14]\"],\n             &[],\n         );\n     }"}, {"sha": "089d806d8c75f7ae2cd6d3842a74f83a292c62a8", "filename": "crates/ra_ide/src/completion/complete_attribute.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -16,25 +16,23 @@ use crate::completion::UNSTABLE_FEATURE_DESCRIPTOR;\n \n pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let attribute = ctx.attribute_under_caret.as_ref()?;\n-    match (attribute.path(), attribute.input()) {\n-        (Some(path), Some(ast::AttrInput::TokenTree(token_tree)))\n-            if path.to_string() == \"derive\" =>\n-        {\n+    match (attribute.path(), attribute.token_tree()) {\n+        (Some(path), Some(token_tree)) if path.to_string() == \"derive\" => {\n             complete_derive(acc, ctx, token_tree)\n         }\n-        (Some(path), Some(ast::AttrInput::TokenTree(token_tree)))\n+        (Some(path), Some(token_tree))\n             if path.to_string() == \"feature\" =>\n         {\n             complete_lint(acc, ctx, token_tree, UNSTABLE_FEATURE_DESCRIPTOR);\n         }\n-        (Some(path), Some(ast::AttrInput::TokenTree(token_tree)))\n+        (Some(path), Some(token_tree))\n             if [\"allow\", \"warn\", \"deny\", \"forbid\"]\n                 .iter()\n                 .any(|lint_level| lint_level == &path.to_string()) =>\n         {\n             complete_lint(acc, ctx, token_tree, DEFAULT_LINT_COMPLETIONS)\n         }\n-        (_, Some(ast::AttrInput::TokenTree(_token_tree))) => {}\n+        (_, Some(_token_tree)) => {}\n         _ => complete_attribute_start(acc, ctx, attribute),\n     }\n     Some(())"}, {"sha": "4063342572bfcb8b31289184f7592d3019f4c0e8", "filename": "crates/ra_ide/src/completion/complete_fn_param.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -18,26 +18,36 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     let mut params = FxHashMap::default();\n-    let me = ctx.token.ancestors().find_map(ast::FnDef::cast);\n+\n+    let me = ctx.token.ancestors().find_map(ast::Fn::cast);\n+    let mut process_fn = |func: ast::Fn| {\n+        if Some(&func) == me.as_ref() {\n+            return;\n+        }\n+        func.param_list().into_iter().flat_map(|it| it.params()).for_each(|param| {\n+            let text = param.syntax().text().to_string();\n+            params.entry(text).or_insert(param);\n+        })\n+    };\n+\n     for node in ctx.token.parent().ancestors() {\n-        let items = match_ast! {\n+        match_ast! {\n             match node {\n-                ast::SourceFile(it) => it.items(),\n-                ast::ItemList(it) => it.items(),\n+                ast::SourceFile(it) => it.items().filter_map(|item| match item {\n+                    ast::Item::Fn(it) => Some(it),\n+                    _ => None,\n+                }).for_each(&mut process_fn),\n+                ast::ItemList(it) => it.items().filter_map(|item| match item {\n+                    ast::Item::Fn(it) => Some(it),\n+                    _ => None,\n+                }).for_each(&mut process_fn),\n+                ast::AssocItemList(it) => it.assoc_items().filter_map(|item| match item {\n+                    ast::AssocItem::Fn(it) => Some(it),\n+                    _ => None,\n+                }).for_each(&mut process_fn),\n                 _ => continue,\n             }\n         };\n-        for item in items {\n-            if let ast::ModuleItem::FnDef(func) = item {\n-                if Some(&func) == me.as_ref() {\n-                    continue;\n-                }\n-                func.param_list().into_iter().flat_map(|it| it.params()).for_each(|param| {\n-                    let text = param.syntax().text().to_string();\n-                    params.entry(text).or_insert(param);\n-                })\n-            }\n-        }\n     }\n \n     params"}, {"sha": "b62064797b0b79e471006cceb04a725937b1332a", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -66,27 +66,24 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n             add_keyword(ctx, acc, \"fn\", \"fn $0() {}\")\n         }\n \n-        if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-            || ctx.block_expr_parent\n-        {\n+        if (ctx.has_item_list_or_source_file_parent) || ctx.block_expr_parent {\n             add_keyword(ctx, acc, \"trait\", \"trait $0 {}\");\n             add_keyword(ctx, acc, \"impl\", \"impl $0 {}\");\n         }\n \n         return;\n     }\n-    if ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent {\n+    if ctx.has_item_list_or_source_file_parent || has_trait_or_impl_parent || ctx.block_expr_parent\n+    {\n         add_keyword(ctx, acc, \"fn\", \"fn $0() {}\");\n     }\n-    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-        || ctx.block_expr_parent\n-    {\n+    if (ctx.has_item_list_or_source_file_parent) || ctx.block_expr_parent {\n         add_keyword(ctx, acc, \"use\", \"use \");\n         add_keyword(ctx, acc, \"impl\", \"impl $0 {}\");\n         add_keyword(ctx, acc, \"trait\", \"trait $0 {}\");\n     }\n \n-    if ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent {\n+    if ctx.has_item_list_or_source_file_parent {\n         add_keyword(ctx, acc, \"enum\", \"enum $0 {}\");\n         add_keyword(ctx, acc, \"struct\", \"struct $0\");\n         add_keyword(ctx, acc, \"union\", \"union $0 {}\");\n@@ -108,29 +105,28 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(ctx, acc, \"else\", \"else {$0}\");\n         add_keyword(ctx, acc, \"else if\", \"else if $0 {}\");\n     }\n-    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-        || ctx.block_expr_parent\n-    {\n+    if (ctx.has_item_list_or_source_file_parent) || ctx.block_expr_parent {\n         add_keyword(ctx, acc, \"mod\", \"mod $0 {}\");\n     }\n     if ctx.bind_pat_parent || ctx.ref_pat_parent {\n         add_keyword(ctx, acc, \"mut\", \"mut \");\n     }\n-    if ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent {\n+    if ctx.has_item_list_or_source_file_parent || has_trait_or_impl_parent || ctx.block_expr_parent\n+    {\n         add_keyword(ctx, acc, \"const\", \"const \");\n         add_keyword(ctx, acc, \"type\", \"type \");\n     }\n-    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-        || ctx.block_expr_parent\n-    {\n+    if (ctx.has_item_list_or_source_file_parent) || ctx.block_expr_parent {\n         add_keyword(ctx, acc, \"static\", \"static \");\n     };\n-    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-        || ctx.block_expr_parent\n-    {\n+    if (ctx.has_item_list_or_source_file_parent) || ctx.block_expr_parent {\n         add_keyword(ctx, acc, \"extern\", \"extern \");\n     }\n-    if ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent || ctx.is_match_arm {\n+    if ctx.has_item_list_or_source_file_parent\n+        || has_trait_or_impl_parent\n+        || ctx.block_expr_parent\n+        || ctx.is_match_arm\n+    {\n         add_keyword(ctx, acc, \"unsafe\", \"unsafe \");\n     }\n     if ctx.in_loop_body {\n@@ -142,7 +138,7 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n             add_keyword(ctx, acc, \"break\", \"break\");\n         }\n     }\n-    if ctx.has_item_list_or_source_file_parent && !ctx.has_trait_parent {\n+    if ctx.has_item_list_or_source_file_parent || ctx.has_impl_parent {\n         add_keyword(ctx, acc, \"pub\", \"pub \")\n     }\n \n@@ -173,7 +169,7 @@ fn add_keyword(ctx: &CompletionContext, acc: &mut Completions, kw: &str, snippet\n \n fn complete_return(\n     ctx: &CompletionContext,\n-    fn_def: &ast::FnDef,\n+    fn_def: &ast::Fn,\n     can_be_stmt: bool,\n ) -> Option<CompletionItem> {\n     let snip = match (can_be_stmt, fn_def.ret_type().is_some()) {"}, {"sha": "d9a0ef167dbdc7cb2cc3e9ba614e6afa896fd08e", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -2,8 +2,8 @@\n //!\n //! This module adds the completion items related to implementing associated\n //! items within a `impl Trait for Struct` block. The current context node\n-//! must be within either a `FN_DEF`, `TYPE_ALIAS_DEF`, or `CONST_DEF` node\n-//! and an direct child of an `IMPL_DEF`.\n+//! must be within either a `FN`, `TYPE_ALIAS`, or `CONST` node\n+//! and an direct child of an `IMPL`.\n //!\n //! # Examples\n //!\n@@ -34,7 +34,7 @@\n use hir::{self, Docs, HasSource};\n use ra_assists::utils::get_missing_assoc_items;\n use ra_syntax::{\n-    ast::{self, edit, ImplDef},\n+    ast::{self, edit, Impl},\n     AstNode, SyntaxKind, SyntaxNode, TextRange, T,\n };\n use ra_text_edit::TextEdit;\n@@ -63,7 +63,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n                     }\n                 }),\n \n-            SyntaxKind::FN_DEF => {\n+            SyntaxKind::FN => {\n                 for missing_fn in get_missing_assoc_items(&ctx.sema, &impl_def)\n                     .into_iter()\n                     .filter_map(|item| match item {\n@@ -75,7 +75,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n                 }\n             }\n \n-            SyntaxKind::TYPE_ALIAS_DEF => {\n+            SyntaxKind::TYPE_ALIAS => {\n                 for missing_fn in get_missing_assoc_items(&ctx.sema, &impl_def)\n                     .into_iter()\n                     .filter_map(|item| match item {\n@@ -87,7 +87,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n                 }\n             }\n \n-            SyntaxKind::CONST_DEF => {\n+            SyntaxKind::CONST => {\n                 for missing_fn in get_missing_assoc_items(&ctx.sema, &impl_def)\n                     .into_iter()\n                     .filter_map(|item| match item {\n@@ -104,18 +104,17 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n     }\n }\n \n-fn completion_match(ctx: &CompletionContext) -> Option<(SyntaxNode, ImplDef)> {\n+fn completion_match(ctx: &CompletionContext) -> Option<(SyntaxNode, Impl)> {\n     let (trigger, impl_def_offset) = ctx.token.ancestors().find_map(|p| match p.kind() {\n-        SyntaxKind::FN_DEF\n-        | SyntaxKind::TYPE_ALIAS_DEF\n-        | SyntaxKind::CONST_DEF\n-        | SyntaxKind::BLOCK_EXPR => Some((p, 2)),\n+        SyntaxKind::FN | SyntaxKind::TYPE_ALIAS | SyntaxKind::CONST | SyntaxKind::BLOCK_EXPR => {\n+            Some((p, 2))\n+        }\n         SyntaxKind::NAME_REF => Some((p, 5)),\n         _ => None,\n     })?;\n     let impl_def = (0..impl_def_offset - 1)\n         .try_fold(trigger.parent()?, |t, _| t.parent())\n-        .and_then(ast::ImplDef::cast)?;\n+        .and_then(ast::Impl::cast)?;\n     Some((trigger, impl_def))\n }\n \n@@ -201,7 +200,7 @@ fn add_const_impl(\n     }\n }\n \n-fn make_const_compl_syntax(const_: &ast::ConstDef) -> String {\n+fn make_const_compl_syntax(const_: &ast::Const) -> String {\n     let const_ = edit::remove_attrs_and_docs(const_);\n \n     let const_start = const_.syntax().text_range().start();"}, {"sha": "6b03b30bb5d1ae81343efe9359e2949d65a600bb", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -35,12 +35,12 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) krate: Option<hir::Crate>,\n     pub(super) expected_type: Option<Type>,\n     pub(super) name_ref_syntax: Option<ast::NameRef>,\n-    pub(super) function_syntax: Option<ast::FnDef>,\n-    pub(super) use_item_syntax: Option<ast::UseItem>,\n-    pub(super) record_lit_syntax: Option<ast::RecordLit>,\n+    pub(super) function_syntax: Option<ast::Fn>,\n+    pub(super) use_item_syntax: Option<ast::Use>,\n+    pub(super) record_lit_syntax: Option<ast::RecordExpr>,\n     pub(super) record_pat_syntax: Option<ast::RecordPat>,\n-    pub(super) record_field_syntax: Option<ast::RecordField>,\n-    pub(super) impl_def: Option<ast::ImplDef>,\n+    pub(super) record_field_syntax: Option<ast::RecordExprField>,\n+    pub(super) impl_def: Option<ast::Impl>,\n     /// FIXME: `ActiveParameter` is string-based, which is very very wrong\n     pub(super) active_parameter: Option<ActiveParameter>,\n     pub(super) is_param: bool,\n@@ -265,7 +265,7 @@ impl<'a> CompletionContext<'a> {\n                 return;\n             }\n             // FIXME: remove this (V) duplication and make the check more precise\n-            if name_ref.syntax().ancestors().find_map(ast::RecordFieldPatList::cast).is_some() {\n+            if name_ref.syntax().ancestors().find_map(ast::RecordPatFieldList::cast).is_some() {\n                 self.record_pat_syntax =\n                     self.sema.find_node_at_offset_with_macros(&original_file, offset);\n             }\n@@ -275,15 +275,15 @@ impl<'a> CompletionContext<'a> {\n         // Otherwise, see if this is a declaration. We can use heuristics to\n         // suggest declaration names, see `CompletionKind::Magic`.\n         if let Some(name) = find_node_at_offset::<ast::Name>(&file_with_fake_ident, offset) {\n-            if let Some(bind_pat) = name.syntax().ancestors().find_map(ast::BindPat::cast) {\n+            if let Some(bind_pat) = name.syntax().ancestors().find_map(ast::IdentPat::cast) {\n                 self.is_pat_binding_or_const = true;\n                 if bind_pat.at_token().is_some()\n                     || bind_pat.ref_token().is_some()\n                     || bind_pat.mut_token().is_some()\n                 {\n                     self.is_pat_binding_or_const = false;\n                 }\n-                if bind_pat.syntax().parent().and_then(ast::RecordFieldPatList::cast).is_some() {\n+                if bind_pat.syntax().parent().and_then(ast::RecordPatFieldList::cast).is_some() {\n                     self.is_pat_binding_or_const = false;\n                 }\n                 if let Some(let_stmt) = bind_pat.syntax().ancestors().find_map(ast::LetStmt::cast) {\n@@ -300,7 +300,7 @@ impl<'a> CompletionContext<'a> {\n                 return;\n             }\n             // FIXME: remove this (^) duplication and make the check more precise\n-            if name.syntax().ancestors().find_map(ast::RecordFieldPatList::cast).is_some() {\n+            if name.syntax().ancestors().find_map(ast::RecordPatFieldList::cast).is_some() {\n                 self.record_pat_syntax =\n                     self.sema.find_node_at_offset_with_macros(&original_file, offset);\n             }\n@@ -316,7 +316,7 @@ impl<'a> CompletionContext<'a> {\n         self.name_ref_syntax =\n             find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n         let name_range = name_ref.syntax().text_range();\n-        if ast::RecordField::for_field_name(&name_ref).is_some() {\n+        if ast::RecordExprField::for_field_name(&name_ref).is_some() {\n             self.record_lit_syntax =\n                 self.sema.find_node_at_offset_with_macros(&original_file, offset);\n         }\n@@ -325,7 +325,7 @@ impl<'a> CompletionContext<'a> {\n             .sema\n             .ancestors_with_macros(self.token.parent())\n             .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n-            .find_map(ast::ImplDef::cast);\n+            .find_map(ast::Impl::cast);\n \n         let top_node = name_ref\n             .syntax()\n@@ -343,21 +343,21 @@ impl<'a> CompletionContext<'a> {\n         }\n \n         self.use_item_syntax =\n-            self.sema.ancestors_with_macros(self.token.parent()).find_map(ast::UseItem::cast);\n+            self.sema.ancestors_with_macros(self.token.parent()).find_map(ast::Use::cast);\n \n         self.function_syntax = self\n             .sema\n             .ancestors_with_macros(self.token.parent())\n             .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n-            .find_map(ast::FnDef::cast);\n+            .find_map(ast::Fn::cast);\n \n         self.record_field_syntax = self\n             .sema\n             .ancestors_with_macros(self.token.parent())\n             .take_while(|it| {\n                 it.kind() != SOURCE_FILE && it.kind() != MODULE && it.kind() != CALL_EXPR\n             })\n-            .find_map(ast::RecordField::cast);\n+            .find_map(ast::RecordExprField::cast);\n \n         let parent = match name_ref.syntax().parent() {\n             Some(it) => it,\n@@ -377,7 +377,7 @@ impl<'a> CompletionContext<'a> {\n                 path.syntax().parent().and_then(ast::TupleStructPat::cast).is_some();\n \n             self.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n-            self.has_type_args = segment.type_arg_list().is_some();\n+            self.has_type_args = segment.generic_arg_list().is_some();\n \n             #[allow(deprecated)]\n             if let Some(path) = hir::Path::from_ast(path.clone()) {"}, {"sha": "7c4feff6d16ae49be44a1d0a00f414171ef91c2a", "filename": "crates/ra_ide/src/completion/patterns.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -13,9 +13,9 @@ use crate::completion::test_utils::check_pattern_is_applicable;\n \n pub(crate) fn has_trait_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)\n-        .filter(|it| it.kind() == ITEM_LIST)\n+        .filter(|it| it.kind() == ASSOC_ITEM_LIST)\n         .and_then(|it| it.parent())\n-        .filter(|it| it.kind() == TRAIT_DEF)\n+        .filter(|it| it.kind() == TRAIT)\n         .is_some()\n }\n #[test]\n@@ -25,9 +25,9 @@ fn test_has_trait_parent() {\n \n pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)\n-        .filter(|it| it.kind() == ITEM_LIST)\n+        .filter(|it| it.kind() == ASSOC_ITEM_LIST)\n         .and_then(|it| it.parent())\n-        .filter(|it| it.kind() == IMPL_DEF)\n+        .filter(|it| it.kind() == IMPL)\n         .is_some()\n }\n #[test]\n@@ -44,7 +44,7 @@ fn test_has_block_expr_parent() {\n }\n \n pub(crate) fn has_bind_pat_parent(element: SyntaxElement) -> bool {\n-    element.ancestors().find(|it| it.kind() == BIND_PAT).is_some()\n+    element.ancestors().find(|it| it.kind() == IDENT_PAT).is_some()\n }\n #[test]\n fn test_has_bind_pat_parent() {\n@@ -73,7 +73,7 @@ pub(crate) fn has_item_list_or_source_file_parent(element: SyntaxElement) -> boo\n #[test]\n fn test_has_item_list_or_source_file_parent() {\n     check_pattern_is_applicable(r\"i<|>\", has_item_list_or_source_file_parent);\n-    check_pattern_is_applicable(r\"impl { f<|> }\", has_item_list_or_source_file_parent);\n+    check_pattern_is_applicable(r\"mod foo { f<|> }\", has_item_list_or_source_file_parent);\n }\n \n pub(crate) fn is_match_arm(element: SyntaxElement) -> bool {\n@@ -113,15 +113,15 @@ fn test_if_is_prev() {\n }\n \n pub(crate) fn has_trait_as_prev_sibling(element: SyntaxElement) -> bool {\n-    previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == TRAIT_DEF).is_some()\n+    previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == TRAIT).is_some()\n }\n #[test]\n fn test_has_trait_as_prev_sibling() {\n     check_pattern_is_applicable(r\"trait A w<|> {}\", has_trait_as_prev_sibling);\n }\n \n pub(crate) fn has_impl_as_prev_sibling(element: SyntaxElement) -> bool {\n-    previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == IMPL_DEF).is_some()\n+    previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == IMPL).is_some()\n }\n #[test]\n fn test_has_impl_as_prev_sibling() {\n@@ -134,7 +134,7 @@ pub(crate) fn is_in_loop_body(element: SyntaxElement) -> bool {\n         NodeOrToken::Token(token) => token.parent(),\n     };\n     for node in leaf.ancestors() {\n-        if node.kind() == FN_DEF || node.kind() == LAMBDA_EXPR {\n+        if node.kind() == FN || node.kind() == CLOSURE_EXPR {\n             break;\n         }\n         let loop_body = match_ast! {"}, {"sha": "a40071a26fca6425f5b6956eb97973b302fb61ef", "filename": "crates/ra_ide/src/completion/unstable_feature_descriptor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767"}, {"sha": "73c0b82754e57779636a81eddeb708d7188daaf8", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -78,8 +78,10 @@ pub(crate) fn diagnostics(\n             } else {\n                 let mut field_list = d.ast(db);\n                 for f in d.missed_fields.iter() {\n-                    let field =\n-                        make::record_field(make::name_ref(&f.to_string()), Some(make::expr_unit()));\n+                    let field = make::record_expr_field(\n+                        make::name_ref(&f.to_string()),\n+                        Some(make::expr_unit()),\n+                    );\n                     field_list = field_list.append_field(&field);\n                 }\n \n@@ -146,7 +148,7 @@ fn missing_struct_field_fix(\n ) -> Option<Fix> {\n     let record_expr = sema.ast(d);\n \n-    let record_lit = ast::RecordLit::cast(record_expr.syntax().parent()?.parent()?)?;\n+    let record_lit = ast::RecordExpr::cast(record_expr.syntax().parent()?.parent()?)?;\n     let def_id = sema.resolve_variant(record_lit)?;\n     let module;\n     let def_file_id;\n@@ -155,21 +157,21 @@ fn missing_struct_field_fix(\n             module = s.module(sema.db);\n             let source = s.source(sema.db);\n             def_file_id = source.file_id;\n-            let fields = source.value.field_def_list()?;\n-            record_field_def_list(fields)?\n+            let fields = source.value.field_list()?;\n+            record_field_list(fields)?\n         }\n         VariantDef::Union(u) => {\n             module = u.module(sema.db);\n             let source = u.source(sema.db);\n             def_file_id = source.file_id;\n-            source.value.record_field_def_list()?\n+            source.value.record_field_list()?\n         }\n         VariantDef::EnumVariant(e) => {\n             module = e.module(sema.db);\n             let source = e.source(sema.db);\n             def_file_id = source.file_id;\n-            let fields = source.value.field_def_list()?;\n-            record_field_def_list(fields)?\n+            let fields = source.value.field_list()?;\n+            record_field_list(fields)?\n         }\n     };\n     let def_file_id = def_file_id.original_file(sema.db);\n@@ -178,9 +180,9 @@ fn missing_struct_field_fix(\n     if new_field_type.is_unknown() {\n         return None;\n     }\n-    let new_field = make::record_field_def(\n+    let new_field = make::record_field(\n         record_expr.field_name()?,\n-        make::type_ref(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n+        make::ty(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n     );\n \n     let last_field = record_fields.fields().last()?;\n@@ -205,10 +207,10 @@ fn missing_struct_field_fix(\n     let fix = Fix::new(\"Create field\", source_change.into());\n     return Some(fix);\n \n-    fn record_field_def_list(field_def_list: ast::FieldDefList) -> Option<ast::RecordFieldDefList> {\n+    fn record_field_list(field_def_list: ast::FieldList) -> Option<ast::RecordFieldList> {\n         match field_def_list {\n-            ast::FieldDefList::RecordFieldDefList(it) => Some(it),\n-            ast::FieldDefList::TupleFieldDefList(_) => None,\n+            ast::FieldList::RecordFieldList(it) => Some(it),\n+            ast::FieldList::TupleFieldList(_) => None,\n         }\n     }\n }\n@@ -263,8 +265,8 @@ fn check_struct_shorthand_initialization(\n     file_id: FileId,\n     node: &SyntaxNode,\n ) -> Option<()> {\n-    let record_lit = ast::RecordLit::cast(node.clone())?;\n-    let record_field_list = record_lit.record_field_list()?;\n+    let record_lit = ast::RecordExpr::cast(node.clone())?;\n+    let record_field_list = record_lit.record_expr_field_list()?;\n     for record_field in record_field_list.fields() {\n         if let (Some(name_ref), Some(expr)) = (record_field.name_ref(), record_field.expr()) {\n             let field_name = name_ref.syntax().text().to_string();"}, {"sha": "fd42aa4352e6280a23a64b2c5a6c85dc7cfe3d33", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -5,7 +5,7 @@ mod navigation_target;\n mod short_label;\n \n use ra_syntax::{\n-    ast::{self, AstNode, AttrsOwner, NameOwner, TypeParamsOwner},\n+    ast::{self, AstNode, AttrsOwner, GenericParamsOwner, NameOwner},\n     SyntaxKind::{ATTR, COMMENT},\n };\n \n@@ -16,7 +16,7 @@ pub use navigation_target::NavigationTarget;\n pub(crate) use navigation_target::{ToNav, TryToNav};\n pub(crate) use short_label::ShortLabel;\n \n-pub(crate) fn function_declaration(node: &ast::FnDef) -> String {\n+pub(crate) fn function_declaration(node: &ast::Fn) -> String {\n     let mut buf = String::new();\n     if let Some(vis) = node.visibility() {\n         format_to!(buf, \"{} \", vis);\n@@ -37,14 +37,14 @@ pub(crate) fn function_declaration(node: &ast::FnDef) -> String {\n     if let Some(name) = node.name() {\n         format_to!(buf, \"fn {}\", name)\n     }\n-    if let Some(type_params) = node.type_param_list() {\n+    if let Some(type_params) = node.generic_param_list() {\n         format_to!(buf, \"{}\", type_params);\n     }\n     if let Some(param_list) = node.param_list() {\n         format_to!(buf, \"{}\", param_list);\n     }\n     if let Some(ret_type) = node.ret_type() {\n-        if ret_type.type_ref().is_some() {\n+        if ret_type.ty().is_some() {\n             format_to!(buf, \" {}\", ret_type);\n         }\n     }\n@@ -54,7 +54,7 @@ pub(crate) fn function_declaration(node: &ast::FnDef) -> String {\n     buf\n }\n \n-pub(crate) fn const_label(node: &ast::ConstDef) -> String {\n+pub(crate) fn const_label(node: &ast::Const) -> String {\n     let label: String = node\n         .syntax()\n         .children_with_tokens()\n@@ -65,7 +65,7 @@ pub(crate) fn const_label(node: &ast::ConstDef) -> String {\n     label.trim().to_owned()\n }\n \n-pub(crate) fn type_label(node: &ast::TypeAliasDef) -> String {\n+pub(crate) fn type_label(node: &ast::TypeAlias) -> String {\n     let label: String = node\n         .syntax()\n         .children_with_tokens()"}, {"sha": "fdbf75abd9188a83a78c23d490f101d2abec90eb", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -7,7 +7,7 @@ use ra_ide_db::{defs::Definition, RootDatabase};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},\n     match_ast, AstNode, SmolStr,\n-    SyntaxKind::{self, BIND_PAT, TYPE_PARAM},\n+    SyntaxKind::{self, IDENT_PAT, TYPE_PARAM},\n     TextRange,\n };\n \n@@ -253,7 +253,7 @@ impl ToNav for hir::ImplDef {\n         let focus_range = if derive_attr.is_some() {\n             None\n         } else {\n-            src.value.target_type().map(|ty| original_range(db, src.with_value(ty.syntax())).range)\n+            src.value.self_ty().map(|ty| original_range(db, src.with_value(ty.syntax())).range)\n         };\n \n         NavigationTarget::from_syntax(\n@@ -339,7 +339,7 @@ impl ToNav for hir::Local {\n         NavigationTarget {\n             file_id: full_range.file_id,\n             name,\n-            kind: BIND_PAT,\n+            kind: IDENT_PAT,\n             full_range: full_range.range,\n             focus_range: None,\n             container_name: None,\n@@ -379,16 +379,16 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n \n     match_ast! {\n         match node {\n-            ast::FnDef(it) => it.doc_comment_text(),\n-            ast::StructDef(it) => it.doc_comment_text(),\n-            ast::EnumDef(it) => it.doc_comment_text(),\n-            ast::TraitDef(it) => it.doc_comment_text(),\n+            ast::Fn(it) => it.doc_comment_text(),\n+            ast::Struct(it) => it.doc_comment_text(),\n+            ast::Enum(it) => it.doc_comment_text(),\n+            ast::Trait(it) => it.doc_comment_text(),\n             ast::Module(it) => it.doc_comment_text(),\n-            ast::TypeAliasDef(it) => it.doc_comment_text(),\n-            ast::ConstDef(it) => it.doc_comment_text(),\n-            ast::StaticDef(it) => it.doc_comment_text(),\n-            ast::RecordFieldDef(it) => it.doc_comment_text(),\n-            ast::EnumVariant(it) => it.doc_comment_text(),\n+            ast::TypeAlias(it) => it.doc_comment_text(),\n+            ast::Const(it) => it.doc_comment_text(),\n+            ast::Static(it) => it.doc_comment_text(),\n+            ast::RecordField(it) => it.doc_comment_text(),\n+            ast::Variant(it) => it.doc_comment_text(),\n             ast::MacroCall(it) => it.doc_comment_text(),\n             _ => None,\n         }\n@@ -404,16 +404,16 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n \n     match_ast! {\n         match node {\n-            ast::FnDef(it) => it.short_label(),\n-            ast::StructDef(it) => it.short_label(),\n-            ast::EnumDef(it) => it.short_label(),\n-            ast::TraitDef(it) => it.short_label(),\n+            ast::Fn(it) => it.short_label(),\n+            ast::Struct(it) => it.short_label(),\n+            ast::Enum(it) => it.short_label(),\n+            ast::Trait(it) => it.short_label(),\n             ast::Module(it) => it.short_label(),\n-            ast::TypeAliasDef(it) => it.short_label(),\n-            ast::ConstDef(it) => it.short_label(),\n-            ast::StaticDef(it) => it.short_label(),\n-            ast::RecordFieldDef(it) => it.short_label(),\n-            ast::EnumVariant(it) => it.short_label(),\n+            ast::TypeAlias(it) => it.short_label(),\n+            ast::Const(it) => it.short_label(),\n+            ast::Static(it) => it.short_label(),\n+            ast::RecordField(it) => it.short_label(),\n+            ast::Variant(it) => it.short_label(),\n             _ => None,\n         }\n     }\n@@ -446,7 +446,7 @@ fn foo() { enum FooInner { } }\n                         5..13,\n                     ),\n                     name: \"FooInner\",\n-                    kind: ENUM_DEF,\n+                    kind: ENUM,\n                     container_name: None,\n                     description: Some(\n                         \"enum FooInner\",\n@@ -462,7 +462,7 @@ fn foo() { enum FooInner { } }\n                         34..42,\n                     ),\n                     name: \"FooInner\",\n-                    kind: ENUM_DEF,\n+                    kind: ENUM,\n                     container_name: Some(\n                         \"foo\",\n                     ),"}, {"sha": "0fdf8e9a58db9c24cc69252b386828c32cdc0680", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,37 +1,37 @@\n //! FIXME: write short doc here\n \n-use ra_syntax::ast::{self, AstNode, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n+use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n use stdx::format_to;\n \n pub(crate) trait ShortLabel {\n     fn short_label(&self) -> Option<String>;\n }\n \n-impl ShortLabel for ast::FnDef {\n+impl ShortLabel for ast::Fn {\n     fn short_label(&self) -> Option<String> {\n         Some(crate::display::function_declaration(self))\n     }\n }\n \n-impl ShortLabel for ast::StructDef {\n+impl ShortLabel for ast::Struct {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"struct \")\n     }\n }\n \n-impl ShortLabel for ast::UnionDef {\n+impl ShortLabel for ast::Union {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"union \")\n     }\n }\n \n-impl ShortLabel for ast::EnumDef {\n+impl ShortLabel for ast::Enum {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"enum \")\n     }\n }\n \n-impl ShortLabel for ast::TraitDef {\n+impl ShortLabel for ast::Trait {\n     fn short_label(&self) -> Option<String> {\n         if self.unsafe_token().is_some() {\n             short_label_from_node(self, \"unsafe trait \")\n@@ -47,43 +47,43 @@ impl ShortLabel for ast::Module {\n     }\n }\n \n-impl ShortLabel for ast::TypeAliasDef {\n+impl ShortLabel for ast::TypeAlias {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"type \")\n     }\n }\n \n-impl ShortLabel for ast::ConstDef {\n+impl ShortLabel for ast::Const {\n     fn short_label(&self) -> Option<String> {\n-        short_label_from_ascribed_node(self, \"const \")\n+        short_label_from_ty(self, self.ty(), \"const \")\n     }\n }\n \n-impl ShortLabel for ast::StaticDef {\n+impl ShortLabel for ast::Static {\n     fn short_label(&self) -> Option<String> {\n-        short_label_from_ascribed_node(self, \"static \")\n+        short_label_from_ty(self, self.ty(), \"static \")\n     }\n }\n \n-impl ShortLabel for ast::RecordFieldDef {\n+impl ShortLabel for ast::RecordField {\n     fn short_label(&self) -> Option<String> {\n-        short_label_from_ascribed_node(self, \"\")\n+        short_label_from_ty(self, self.ty(), \"\")\n     }\n }\n \n-impl ShortLabel for ast::EnumVariant {\n+impl ShortLabel for ast::Variant {\n     fn short_label(&self) -> Option<String> {\n         Some(self.name()?.text().to_string())\n     }\n }\n \n-fn short_label_from_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n+fn short_label_from_ty<T>(node: &T, ty: Option<ast::Type>, prefix: &str) -> Option<String>\n where\n-    T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n+    T: NameOwner + VisibilityOwner,\n {\n     let mut buf = short_label_from_node(node, prefix)?;\n \n-    if let Some(type_ref) = node.ascribed_type() {\n+    if let Some(type_ref) = ty {\n         format_to!(buf, \": {}\", type_ref.syntax());\n     }\n "}, {"sha": "7230a0ff9ee2dd6cdb5af822b75452b45d2fecb7", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -37,15 +37,15 @@ fn try_extend_selection(\n \n     let string_kinds = [COMMENT, STRING, RAW_STRING, BYTE_STRING, RAW_BYTE_STRING];\n     let list_kinds = [\n-        RECORD_FIELD_PAT_LIST,\n+        RECORD_PAT_FIELD_LIST,\n         MATCH_ARM_LIST,\n-        RECORD_FIELD_DEF_LIST,\n-        TUPLE_FIELD_DEF_LIST,\n         RECORD_FIELD_LIST,\n-        ENUM_VARIANT_LIST,\n+        TUPLE_FIELD_LIST,\n+        RECORD_EXPR_FIELD_LIST,\n+        VARIANT_LIST,\n         USE_TREE_LIST,\n-        TYPE_PARAM_LIST,\n-        TYPE_ARG_LIST,\n+        GENERIC_PARAM_LIST,\n+        GENERIC_ARG_LIST,\n         TYPE_BOUND_LIST,\n         PARAM_LIST,\n         ARG_LIST,"}, {"sha": "87cab4503731faca64f694fb93db75b668cb213e", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n use ra_syntax::{\n-    ast::{self, AttrsOwner, NameOwner, TypeAscriptionOwner, TypeParamsOwner},\n+    ast::{self, AttrsOwner, GenericParamsOwner, NameOwner},\n     match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, WalkEvent,\n };\n \n@@ -52,19 +52,12 @@ pub fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n \n fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n     fn decl<N: NameOwner + AttrsOwner>(node: N) -> Option<StructureNode> {\n-        decl_with_detail(node, None)\n-    }\n-\n-    fn decl_with_ascription<N: NameOwner + AttrsOwner + TypeAscriptionOwner>(\n-        node: N,\n-    ) -> Option<StructureNode> {\n-        let ty = node.ascribed_type();\n-        decl_with_type_ref(node, ty)\n+        decl_with_detail(&node, None)\n     }\n \n     fn decl_with_type_ref<N: NameOwner + AttrsOwner>(\n-        node: N,\n-        type_ref: Option<ast::TypeRef>,\n+        node: &N,\n+        type_ref: Option<ast::Type>,\n     ) -> Option<StructureNode> {\n         let detail = type_ref.map(|type_ref| {\n             let mut detail = String::new();\n@@ -75,7 +68,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n     }\n \n     fn decl_with_detail<N: NameOwner + AttrsOwner>(\n-        node: N,\n+        node: &N,\n         detail: Option<String>,\n     ) -> Option<StructureNode> {\n         let name = node.name()?;\n@@ -111,9 +104,9 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n \n     match_ast! {\n         match node {\n-            ast::FnDef(it) => {\n+            ast::Fn(it) => {\n                 let mut detail = String::from(\"fn\");\n-                if let Some(type_param_list) = it.type_param_list() {\n+                if let Some(type_param_list) = it.generic_param_list() {\n                     collapse_ws(type_param_list.syntax(), &mut detail);\n                 }\n                 if let Some(param_list) = it.param_list() {\n@@ -124,24 +117,21 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                     collapse_ws(ret_type.syntax(), &mut detail);\n                 }\n \n-                decl_with_detail(it, Some(detail))\n+                decl_with_detail(&it, Some(detail))\n             },\n-            ast::StructDef(it) => decl(it),\n-            ast::UnionDef(it) => decl(it),\n-            ast::EnumDef(it) => decl(it),\n-            ast::EnumVariant(it) => decl(it),\n-            ast::TraitDef(it) => decl(it),\n+            ast::Struct(it) => decl(it),\n+            ast::Union(it) => decl(it),\n+            ast::Enum(it) => decl(it),\n+            ast::Variant(it) => decl(it),\n+            ast::Trait(it) => decl(it),\n             ast::Module(it) => decl(it),\n-            ast::TypeAliasDef(it) => {\n-                let ty = it.type_ref();\n-                decl_with_type_ref(it, ty)\n-            },\n-            ast::RecordFieldDef(it) => decl_with_ascription(it),\n-            ast::ConstDef(it) => decl_with_ascription(it),\n-            ast::StaticDef(it) => decl_with_ascription(it),\n-            ast::ImplDef(it) => {\n-                let target_type = it.target_type()?;\n-                let target_trait = it.target_trait();\n+            ast::TypeAlias(it) => decl_with_type_ref(&it, it.ty()),\n+            ast::RecordField(it) => decl_with_type_ref(&it, it.ty()),\n+            ast::Const(it) => decl_with_type_ref(&it, it.ty()),\n+            ast::Static(it) => decl_with_type_ref(&it, it.ty()),\n+            ast::Impl(it) => {\n+                let target_type = it.self_ty()?;\n+                let target_trait = it.trait_();\n                 let label = match target_trait {\n                     None => format!(\"impl {}\", target_type.syntax().text()),\n                     Some(t) => {\n@@ -238,7 +228,7 @@ fn very_obsolete() {}\n                         label: \"Foo\",\n                         navigation_range: 8..11,\n                         node_range: 1..26,\n-                        kind: STRUCT_DEF,\n+                        kind: STRUCT,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -249,7 +239,7 @@ fn very_obsolete() {}\n                         label: \"x\",\n                         navigation_range: 18..19,\n                         node_range: 18..24,\n-                        kind: RECORD_FIELD_DEF,\n+                        kind: RECORD_FIELD,\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -271,7 +261,7 @@ fn very_obsolete() {}\n                         label: \"bar1\",\n                         navigation_range: 43..47,\n                         node_range: 40..52,\n-                        kind: FN_DEF,\n+                        kind: FN,\n                         detail: Some(\n                             \"fn()\",\n                         ),\n@@ -284,7 +274,7 @@ fn very_obsolete() {}\n                         label: \"bar2\",\n                         navigation_range: 60..64,\n                         node_range: 57..81,\n-                        kind: FN_DEF,\n+                        kind: FN,\n                         detail: Some(\n                             \"fn<T>(t: T) -> T\",\n                         ),\n@@ -297,7 +287,7 @@ fn very_obsolete() {}\n                         label: \"bar3\",\n                         navigation_range: 89..93,\n                         node_range: 86..156,\n-                        kind: FN_DEF,\n+                        kind: FN,\n                         detail: Some(\n                             \"fn<A, B>(a: A, b: B) -> Vec< u32 >\",\n                         ),\n@@ -308,7 +298,7 @@ fn very_obsolete() {}\n                         label: \"E\",\n                         navigation_range: 165..166,\n                         node_range: 160..180,\n-                        kind: ENUM_DEF,\n+                        kind: ENUM,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -319,7 +309,7 @@ fn very_obsolete() {}\n                         label: \"X\",\n                         navigation_range: 169..170,\n                         node_range: 169..170,\n-                        kind: ENUM_VARIANT,\n+                        kind: VARIANT,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -330,7 +320,7 @@ fn very_obsolete() {}\n                         label: \"Y\",\n                         navigation_range: 172..173,\n                         node_range: 172..178,\n-                        kind: ENUM_VARIANT,\n+                        kind: VARIANT,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -339,7 +329,7 @@ fn very_obsolete() {}\n                         label: \"T\",\n                         navigation_range: 186..187,\n                         node_range: 181..193,\n-                        kind: TYPE_ALIAS_DEF,\n+                        kind: TYPE_ALIAS,\n                         detail: Some(\n                             \"()\",\n                         ),\n@@ -350,7 +340,7 @@ fn very_obsolete() {}\n                         label: \"S\",\n                         navigation_range: 201..202,\n                         node_range: 194..213,\n-                        kind: STATIC_DEF,\n+                        kind: STATIC,\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -361,7 +351,7 @@ fn very_obsolete() {}\n                         label: \"C\",\n                         navigation_range: 220..221,\n                         node_range: 214..232,\n-                        kind: CONST_DEF,\n+                        kind: CONST,\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -372,7 +362,7 @@ fn very_obsolete() {}\n                         label: \"impl E\",\n                         navigation_range: 239..240,\n                         node_range: 234..243,\n-                        kind: IMPL_DEF,\n+                        kind: IMPL,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -381,7 +371,7 @@ fn very_obsolete() {}\n                         label: \"impl fmt::Debug for E\",\n                         navigation_range: 265..266,\n                         node_range: 245..269,\n-                        kind: IMPL_DEF,\n+                        kind: IMPL,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -417,7 +407,7 @@ fn very_obsolete() {}\n                         label: \"obsolete\",\n                         navigation_range: 428..436,\n                         node_range: 411..441,\n-                        kind: FN_DEF,\n+                        kind: FN,\n                         detail: Some(\n                             \"fn()\",\n                         ),\n@@ -428,7 +418,7 @@ fn very_obsolete() {}\n                         label: \"very_obsolete\",\n                         navigation_range: 481..494,\n                         node_range: 443..499,\n-                        kind: FN_DEF,\n+                        kind: FN,\n                         detail: Some(\n                             \"fn()\",\n                         ),"}, {"sha": "0fbc9babd583d062c5b481f53f7305bbca476366", "filename": "crates/ra_ide/src/folding_ranges.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n             }\n             NodeOrToken::Node(node) => {\n                 // Fold groups of imports\n-                if node.kind() == USE_ITEM && !visited_imports.contains(&node) {\n+                if node.kind() == USE && !visited_imports.contains(&node) {\n                     if let Some(range) = contiguous_range_for_group(&node, &mut visited_imports) {\n                         res.push(Fold { range, kind: FoldKind::Imports })\n                     }\n@@ -83,17 +83,18 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n     match kind {\n         COMMENT => Some(FoldKind::Comment),\n-        USE_ITEM => Some(FoldKind::Imports),\n+        USE => Some(FoldKind::Imports),\n         ARG_LIST | PARAM_LIST => Some(FoldKind::ArgList),\n-        RECORD_FIELD_DEF_LIST\n-        | RECORD_FIELD_PAT_LIST\n+        ASSOC_ITEM_LIST\n         | RECORD_FIELD_LIST\n+        | RECORD_PAT_FIELD_LIST\n+        | RECORD_EXPR_FIELD_LIST\n         | ITEM_LIST\n         | EXTERN_ITEM_LIST\n         | USE_TREE_LIST\n         | BLOCK_EXPR\n         | MATCH_ARM_LIST\n-        | ENUM_VARIANT_LIST\n+        | VARIANT_LIST\n         | TOKEN_TREE => Some(FoldKind::Block),\n         _ => None,\n     }\n@@ -336,6 +337,26 @@ fn main() <fold block>{\n         );\n     }\n \n+    #[test]\n+    fn test_folds_structs() {\n+        check(\n+            r#\"\n+struct Foo <fold block>{\n+}</fold>\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_folds_traits() {\n+        check(\n+            r#\"\n+trait Foo <fold block>{\n+}</fold>\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_folds_macros() {\n         check("}, {"sha": "9912b714214e8b4e338b664c86c7faa665c1a86a", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -23,12 +23,12 @@ pub(crate) fn goto_implementation(\n \n     let krate = sema.to_module_def(position.file_id)?.krate();\n \n-    if let Some(nominal_def) = find_node_at_offset::<ast::NominalDef>(&syntax, position.offset) {\n+    if let Some(nominal_def) = find_node_at_offset::<ast::AdtDef>(&syntax, position.offset) {\n         return Some(RangeInfo::new(\n             nominal_def.syntax().text_range(),\n             impls_for_def(&sema, &nominal_def, krate)?,\n         ));\n-    } else if let Some(trait_def) = find_node_at_offset::<ast::TraitDef>(&syntax, position.offset) {\n+    } else if let Some(trait_def) = find_node_at_offset::<ast::Trait>(&syntax, position.offset) {\n         return Some(RangeInfo::new(\n             trait_def.syntax().text_range(),\n             impls_for_trait(&sema, &trait_def, krate)?,\n@@ -40,13 +40,13 @@ pub(crate) fn goto_implementation(\n \n fn impls_for_def(\n     sema: &Semantics<RootDatabase>,\n-    node: &ast::NominalDef,\n+    node: &ast::AdtDef,\n     krate: Crate,\n ) -> Option<Vec<NavigationTarget>> {\n     let ty = match node {\n-        ast::NominalDef::StructDef(def) => sema.to_def(def)?.ty(sema.db),\n-        ast::NominalDef::EnumDef(def) => sema.to_def(def)?.ty(sema.db),\n-        ast::NominalDef::UnionDef(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::AdtDef::Struct(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::AdtDef::Enum(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::AdtDef::Union(def) => sema.to_def(def)?.ty(sema.db),\n     };\n \n     let impls = ImplDef::all_in_crate(sema.db, krate);\n@@ -62,7 +62,7 @@ fn impls_for_def(\n \n fn impls_for_trait(\n     sema: &Semantics<RootDatabase>,\n-    node: &ast::TraitDef,\n+    node: &ast::Trait,\n     krate: Crate,\n ) -> Option<Vec<NavigationTarget>> {\n     let tr = sema.to_def(node)?;"}, {"sha": "aa48cb412ff8659763549236ae88120e3b7f2843", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1361,7 +1361,7 @@ fn foo_<|>test() {}\n                                     11..19,\n                                 ),\n                                 name: \"foo_test\",\n-                                kind: FN_DEF,\n+                                kind: FN,\n                                 container_name: None,\n                                 description: None,\n                                 docs: None,\n@@ -1443,7 +1443,7 @@ fn main() { let s<|>t = S{ f1:0 }; }\n                                         7..8,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1482,7 +1482,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                         24..25,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1501,7 +1501,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                         7..10,\n                                     ),\n                                     name: \"Arg\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct Arg\",\n@@ -1540,7 +1540,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                         24..25,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1559,7 +1559,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                         7..10,\n                                     ),\n                                     name: \"Arg\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct Arg\",\n@@ -1601,7 +1601,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         7..8,\n                                     ),\n                                     name: \"A\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct A\",\n@@ -1620,7 +1620,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         22..23,\n                                     ),\n                                     name: \"B\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -1639,7 +1639,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         53..54,\n                                     ),\n                                     name: \"C\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"pub struct C\",\n@@ -1678,7 +1678,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1718,7 +1718,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1737,7 +1737,7 @@ fn main() { let s<|>t = foo(); }\n                                         23..24,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1777,7 +1777,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1796,7 +1796,7 @@ fn main() { let s<|>t = foo(); }\n                                         19..22,\n                                     ),\n                                     name: \"Bar\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -1839,7 +1839,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1858,7 +1858,7 @@ fn main() { let s<|>t = foo(); }\n                                         22..25,\n                                     ),\n                                     name: \"Bar\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -1877,7 +1877,7 @@ fn main() { let s<|>t = foo(); }\n                                         39..41,\n                                     ),\n                                     name: \"S1\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S1\",\n@@ -1896,7 +1896,7 @@ fn main() { let s<|>t = foo(); }\n                                         52..54,\n                                     ),\n                                     name: \"S2\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S2\",\n@@ -1933,7 +1933,7 @@ fn foo(ar<|>g: &impl Foo) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1973,7 +1973,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1992,7 +1992,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         19..22,\n                                     ),\n                                     name: \"Bar\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -2011,7 +2011,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         36..37,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2049,7 +2049,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2068,7 +2068,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                         23..24,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2111,7 +2111,7 @@ fn main() { let s<|>t = foo(); }\n                                         49..50,\n                                     ),\n                                     name: \"B\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -2130,7 +2130,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2167,7 +2167,7 @@ fn foo(ar<|>g: &dyn Foo) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2205,7 +2205,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2224,7 +2224,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                         23..24,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2265,7 +2265,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         6..15,\n                                     ),\n                                     name: \"ImplTrait\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait ImplTrait\",\n@@ -2284,7 +2284,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         50..51,\n                                     ),\n                                     name: \"B\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -2303,7 +2303,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         28..36,\n                                     ),\n                                     name: \"DynTrait\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait DynTrait\",\n@@ -2322,7 +2322,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         65..66,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2370,7 +2370,7 @@ fn main() { let s<|>t = test().get(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n+                                    kind: TRAIT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\","}, {"sha": "1bacead63cee7bd90a7b7b03e19c8e05e13888c6", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -2,7 +2,7 @@ use hir::{Adt, Callable, HirDisplay, Semantics, Type};\n use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n-    ast::{self, ArgListOwner, AstNode, TypeAscriptionOwner},\n+    ast::{self, ArgListOwner, AstNode},\n     match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, TextRange, T,\n };\n use stdx::to_lower_snake_case;\n@@ -78,7 +78,7 @@ pub(crate) fn inlay_hints(\n             match node {\n                 ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it)); },\n                 ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it)); },\n-                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, config, it); },\n+                ast::IdentPat(it) => { get_bind_pat_hints(&mut res, &sema, config, it); },\n                 _ => (),\n             }\n         }\n@@ -96,7 +96,7 @@ fn get_chaining_hints(\n         return None;\n     }\n \n-    if matches!(expr, ast::Expr::RecordLit(_)) {\n+    if matches!(expr, ast::Expr::RecordExpr(_)) {\n         return None;\n     }\n \n@@ -161,7 +161,7 @@ fn get_param_name_hints(\n             Either::Left(self_param) => Some((self_param.to_string(), arg)),\n             Either::Right(pat) => {\n                 let param_name = match pat {\n-                    ast::Pat::BindPat(it) => it.name()?.to_string(),\n+                    ast::Pat::IdentPat(it) => it.name()?.to_string(),\n                     it => it.to_string(),\n                 };\n                 Some((param_name, arg))\n@@ -182,7 +182,7 @@ fn get_bind_pat_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n-    pat: ast::BindPat,\n+    pat: ast::IdentPat,\n ) -> Option<()> {\n     if !config.type_hints {\n         return None;\n@@ -202,7 +202,7 @@ fn get_bind_pat_hints(\n     Some(())\n }\n \n-fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::BindPat, pat_ty: &Type) -> bool {\n+fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &Type) -> bool {\n     if let Some(Adt::Enum(enum_data)) = pat_ty.as_adt() {\n         let pat_text = bind_pat.to_string();\n         enum_data\n@@ -215,7 +215,11 @@ fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::BindPat, pat_ty: &Type\n     }\n }\n \n-fn should_not_display_type_hint(db: &RootDatabase, bind_pat: &ast::BindPat, pat_ty: &Type) -> bool {\n+fn should_not_display_type_hint(\n+    db: &RootDatabase,\n+    bind_pat: &ast::IdentPat,\n+    pat_ty: &Type,\n+) -> bool {\n     if pat_ty.is_unknown() {\n         return true;\n     }\n@@ -230,10 +234,10 @@ fn should_not_display_type_hint(db: &RootDatabase, bind_pat: &ast::BindPat, pat_\n         match_ast! {\n             match node {\n                 ast::LetStmt(it) => {\n-                    return it.ascribed_type().is_some()\n+                    return it.ty().is_some()\n                 },\n                 ast::Param(it) => {\n-                    return it.ascribed_type().is_some()\n+                    return it.ty().is_some()\n                 },\n                 ast::MatchArm(_it) => {\n                     return pat_is_enum_variant(db, bind_pat, pat_ty);"}, {"sha": "0fede0d87952db10d6094b88d39cbfcb27d172d8", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -510,9 +510,10 @@ impl Analysis {\n         query: &str,\n         parse_only: bool,\n         position: FilePosition,\n+        selections: Vec<FileRange>,\n     ) -> Cancelable<Result<SourceChange, SsrError>> {\n         self.with_db(|db| {\n-            let edits = ssr::parse_search_replace(query, parse_only, db, position)?;\n+            let edits = ssr::parse_search_replace(query, parse_only, db, position, selections)?;\n             Ok(SourceChange::from(edits))\n         })\n     }"}, {"sha": "cf456630a5df5e9c7e0a010cfd7b2c7fdf72c122", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -150,7 +150,7 @@ fn decl_access(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> Optio\n     let stmt = find_node_at_offset::<ast::LetStmt>(syntax, range.start())?;\n     if stmt.initializer().is_some() {\n         let pat = stmt.pat()?;\n-        if let ast::Pat::BindPat(it) = pat {\n+        if let ast::Pat::IdentPat(it) = pat {\n             if it.mut_token().is_some() {\n                 return Some(ReferenceAccess::Write);\n             }\n@@ -172,16 +172,16 @@ fn get_struct_def_name_for_struct_literal_search(\n         if let Some(name) =\n             sema.find_node_at_offset_with_descend::<ast::Name>(&syntax, left.text_range().start())\n         {\n-            return name.syntax().ancestors().find_map(ast::StructDef::cast).and_then(|l| l.name());\n+            return name.syntax().ancestors().find_map(ast::Struct::cast).and_then(|l| l.name());\n         }\n         if sema\n-            .find_node_at_offset_with_descend::<ast::TypeParamList>(\n+            .find_node_at_offset_with_descend::<ast::GenericParamList>(\n                 &syntax,\n                 left.text_range().start(),\n             )\n             .is_some()\n         {\n-            return left.ancestors().find_map(ast::StructDef::cast).and_then(|l| l.name());\n+            return left.ancestors().find_map(ast::Struct::cast).and_then(|l| l.name());\n         }\n     }\n     None\n@@ -212,7 +212,7 @@ fn main() {\n         );\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(1) 0..26 7..10 Other\",\n+            \"Foo STRUCT FileId(1) 0..26 7..10 Other\",\n             &[\"FileId(1) 101..104 StructLiteral\"],\n         );\n     }\n@@ -230,7 +230,7 @@ struct Foo<|> {}\n         );\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(1) 0..13 7..10 Other\",\n+            \"Foo STRUCT FileId(1) 0..13 7..10 Other\",\n             &[\"FileId(1) 41..44 Other\", \"FileId(1) 54..57 StructLiteral\"],\n         );\n     }\n@@ -248,7 +248,7 @@ struct Foo<T> <|>{}\n         );\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(1) 0..16 7..10 Other\",\n+            \"Foo STRUCT FileId(1) 0..16 7..10 Other\",\n             &[\"FileId(1) 64..67 StructLiteral\"],\n         );\n     }\n@@ -267,7 +267,7 @@ fn main() {\n         );\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(1) 0..16 7..10 Other\",\n+            \"Foo STRUCT FileId(1) 0..16 7..10 Other\",\n             &[\"FileId(1) 54..57 StructLiteral\"],\n         );\n     }\n@@ -290,7 +290,7 @@ fn main() {\n         );\n         check_result(\n             refs,\n-            \"i BIND_PAT FileId(1) 24..25 Other Write\",\n+            \"i IDENT_PAT FileId(1) 24..25 Other Write\",\n             &[\n                 \"FileId(1) 50..51 Other Write\",\n                 \"FileId(1) 54..55 Other Read\",\n@@ -316,7 +316,7 @@ fn bar() {\n         );\n         check_result(\n             refs,\n-            \"spam BIND_PAT FileId(1) 19..23 Other\",\n+            \"spam IDENT_PAT FileId(1) 19..23 Other\",\n             &[\"FileId(1) 34..38 Other Read\", \"FileId(1) 41..45 Other Read\"],\n         );\n     }\n@@ -330,7 +330,7 @@ fn foo(i : u32) -> u32 {\n }\n \"#,\n         );\n-        check_result(refs, \"i BIND_PAT FileId(1) 7..8 Other\", &[\"FileId(1) 29..30 Other Read\"]);\n+        check_result(refs, \"i IDENT_PAT FileId(1) 7..8 Other\", &[\"FileId(1) 29..30 Other Read\"]);\n     }\n \n     #[test]\n@@ -342,7 +342,7 @@ fn foo(i<|> : u32) -> u32 {\n }\n \"#,\n         );\n-        check_result(refs, \"i BIND_PAT FileId(1) 7..8 Other\", &[\"FileId(1) 29..30 Other Read\"]);\n+        check_result(refs, \"i IDENT_PAT FileId(1) 7..8 Other\", &[\"FileId(1) 29..30 Other Read\"]);\n     }\n \n     #[test]\n@@ -361,7 +361,7 @@ fn main(s: Foo) {\n         );\n         check_result(\n             refs,\n-            \"spam RECORD_FIELD_DEF FileId(1) 17..30 21..25 Other\",\n+            \"spam RECORD_FIELD FileId(1) 17..30 21..25 Other\",\n             &[\"FileId(1) 67..71 Other Read\"],\n         );\n     }\n@@ -376,7 +376,7 @@ impl Foo {\n }\n \"#,\n         );\n-        check_result(refs, \"f FN_DEF FileId(1) 27..43 30..31 Other\", &[]);\n+        check_result(refs, \"f FN FileId(1) 27..43 30..31 Other\", &[]);\n     }\n \n     #[test]\n@@ -390,7 +390,7 @@ enum Foo {\n }\n \"#,\n         );\n-        check_result(refs, \"B ENUM_VARIANT FileId(1) 22..23 22..23 Other\", &[]);\n+        check_result(refs, \"B VARIANT FileId(1) 22..23 22..23 Other\", &[]);\n     }\n \n     #[test]\n@@ -431,7 +431,7 @@ fn f() {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(2) 17..51 28..31 Other\",\n+            \"Foo STRUCT FileId(2) 17..51 28..31 Other\",\n             &[\"FileId(1) 53..56 StructLiteral\", \"FileId(3) 79..82 StructLiteral\"],\n         );\n     }\n@@ -486,7 +486,7 @@ pub(super) struct Foo<|> {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(3) 0..41 18..21 Other\",\n+            \"Foo STRUCT FileId(3) 0..41 18..21 Other\",\n             &[\"FileId(2) 20..23 Other\", \"FileId(2) 47..50 StructLiteral\"],\n         );\n     }\n@@ -514,15 +514,15 @@ pub(super) struct Foo<|> {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"quux FN_DEF FileId(1) 19..35 26..30 Other\",\n+            \"quux FN FileId(1) 19..35 26..30 Other\",\n             &[\"FileId(2) 16..20 StructLiteral\", \"FileId(3) 16..20 StructLiteral\"],\n         );\n \n         let refs =\n             analysis.find_all_refs(pos, Some(SearchScope::single_file(bar))).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"quux FN_DEF FileId(1) 19..35 26..30 Other\",\n+            \"quux FN FileId(1) 19..35 26..30 Other\",\n             &[\"FileId(3) 16..20 StructLiteral\"],\n         );\n     }\n@@ -559,7 +559,7 @@ fn foo() {\n         );\n         check_result(\n             refs,\n-            \"i BIND_PAT FileId(1) 23..24 Other Write\",\n+            \"i IDENT_PAT FileId(1) 23..24 Other Write\",\n             &[\"FileId(1) 34..35 Other Write\", \"FileId(1) 38..39 Other Read\"],\n         );\n     }\n@@ -580,7 +580,7 @@ fn foo() {\n         );\n         check_result(\n             refs,\n-            \"f RECORD_FIELD_DEF FileId(1) 15..21 15..16 Other\",\n+            \"f RECORD_FIELD FileId(1) 15..21 15..16 Other\",\n             &[\"FileId(1) 55..56 Other Read\", \"FileId(1) 68..69 Other Write\"],\n         );\n     }\n@@ -595,7 +595,7 @@ fn foo() {\n }\n \"#,\n         );\n-        check_result(refs, \"i BIND_PAT FileId(1) 19..20 Other\", &[\"FileId(1) 26..27 Other Write\"]);\n+        check_result(refs, \"i IDENT_PAT FileId(1) 19..20 Other\", &[\"FileId(1) 26..27 Other Write\"]);\n     }\n \n     #[test]\n@@ -619,7 +619,7 @@ fn main() {\n         );\n         check_result(\n             refs,\n-            \"new FN_DEF FileId(1) 54..101 61..64 Other\",\n+            \"new FN FileId(1) 54..101 61..64 Other\",\n             &[\"FileId(1) 146..149 StructLiteral\"],\n         );\n     }\n@@ -646,7 +646,7 @@ fn main() {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"f FN_DEF FileId(1) 26..35 29..30 Other\",\n+            \"f FN FileId(1) 26..35 29..30 Other\",\n             &[\"FileId(2) 11..12 Other\", \"FileId(2) 28..29 StructLiteral\"],\n         );\n     }"}, {"sha": "c8d80fcf7cb52c55ce6d211b2f15fa2c3bc77cdd", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -7,7 +7,8 @@ use ra_ide_db::{\n     RootDatabase,\n };\n use ra_syntax::{\n-    algo::find_node_at_offset, ast, ast::NameOwner, ast::TypeAscriptionOwner,\n+    algo::find_node_at_offset,\n+    ast::{self, NameOwner},\n     lex_single_valid_syntax_kind, match_ast, AstNode, SyntaxKind, SyntaxNode, SyntaxToken,\n };\n use ra_text_edit::TextEdit;\n@@ -149,14 +150,14 @@ fn rename_to_self(\n     let source_file = sema.parse(position.file_id);\n     let syn = source_file.syntax();\n \n-    let fn_def = find_node_at_offset::<ast::FnDef>(syn, position.offset)?;\n+    let fn_def = find_node_at_offset::<ast::Fn>(syn, position.offset)?;\n     let params = fn_def.param_list()?;\n     if params.self_param().is_some() {\n         return None; // method already has self param\n     }\n     let first_param = params.params().next()?;\n-    let mutable = match first_param.ascribed_type() {\n-        Some(ast::TypeRef::ReferenceType(rt)) => rt.mut_token().is_some(),\n+    let mutable = match first_param.ty() {\n+        Some(ast::Type::RefType(rt)) => rt.mut_token().is_some(),\n         _ => return None, // not renaming other types\n     };\n \n@@ -192,15 +193,14 @@ fn text_edit_from_self_param(\n     self_param: &ast::SelfParam,\n     new_name: &str,\n ) -> Option<TextEdit> {\n-    fn target_type_name(impl_def: &ast::ImplDef) -> Option<String> {\n-        if let Some(ast::TypeRef::PathType(p)) = impl_def.target_type() {\n+    fn target_type_name(impl_def: &ast::Impl) -> Option<String> {\n+        if let Some(ast::Type::PathType(p)) = impl_def.self_ty() {\n             return Some(p.path()?.segment()?.name_ref()?.text().to_string());\n         }\n         None\n     }\n \n-    let impl_def =\n-        find_node_at_offset::<ast::ImplDef>(syn, self_param.syntax().text_range().start())?;\n+    let impl_def = find_node_at_offset::<ast::Impl>(syn, self_param.syntax().text_range().start())?;\n     let type_name = target_type_name(&impl_def)?;\n \n     let mut replacement_text = String::from(new_name);\n@@ -221,7 +221,7 @@ fn rename_self_to_param(\n     let syn = source_file.syntax();\n \n     let text = sema.db.file_text(position.file_id);\n-    let fn_def = find_node_at_offset::<ast::FnDef>(syn, position.offset)?;\n+    let fn_def = find_node_at_offset::<ast::Fn>(syn, position.offset)?;\n     let search_range = fn_def.syntax().text_range();\n \n     let mut edits: Vec<SourceFileEdit> = vec![];"}, {"sha": "3b7162b8416ba462fee1f7b9cd82d5e331bc283d", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 128, "deletions": 72, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -102,7 +102,7 @@ pub(crate) fn runnable(\n ) -> Option<Runnable> {\n     match_ast! {\n         match item {\n-            ast::FnDef(it) => runnable_fn(sema, it, file_id),\n+            ast::Fn(it) => runnable_fn(sema, it, file_id),\n             ast::Module(it) => runnable_mod(sema, it, file_id),\n             _ => None,\n         }\n@@ -111,7 +111,7 @@ pub(crate) fn runnable(\n \n fn runnable_fn(\n     sema: &Semantics<RootDatabase>,\n-    fn_def: ast::FnDef,\n+    fn_def: ast::Fn,\n     file_id: FileId,\n ) -> Option<Runnable> {\n     let name_string = fn_def.name()?.text().to_string();\n@@ -188,7 +188,7 @@ pub struct TestAttr {\n }\n \n impl TestAttr {\n-    fn from_fn(fn_def: &ast::FnDef) -> TestAttr {\n+    fn from_fn(fn_def: &ast::Fn) -> TestAttr {\n         let ignore = fn_def\n             .attrs()\n             .filter_map(|attr| attr.simple_name())\n@@ -203,15 +203,15 @@ impl TestAttr {\n ///\n /// It may produce false positives, for example, `#[wasm_bindgen_test]` requires a different command to run the test,\n /// but it's better than not to have the runnables for the tests at all.\n-fn has_test_related_attribute(fn_def: &ast::FnDef) -> bool {\n+fn has_test_related_attribute(fn_def: &ast::Fn) -> bool {\n     fn_def\n         .attrs()\n         .filter_map(|attr| attr.path())\n         .map(|path| path.syntax().to_string().to_lowercase())\n         .any(|attribute_text| attribute_text.contains(\"test\"))\n }\n \n-fn has_doc_test(fn_def: &ast::FnDef) -> bool {\n+fn has_doc_test(fn_def: &ast::Fn) -> bool {\n     fn_def.doc_comment_text().map_or(false, |comment| comment.contains(\"```\"))\n }\n \n@@ -220,15 +220,7 @@ fn runnable_mod(\n     module: ast::Module,\n     file_id: FileId,\n ) -> Option<Runnable> {\n-    let has_test_function = module\n-        .item_list()?\n-        .items()\n-        .filter_map(|it| match it {\n-            ast::ModuleItem::FnDef(it) => Some(it),\n-            _ => None,\n-        })\n-        .any(|f| has_test_related_attribute(&f));\n-    if !has_test_function {\n+    if !has_test_function_or_multiple_test_submodules(&module) {\n         return None;\n     }\n     let module_def = sema.to_def(&module)?;\n@@ -246,6 +238,34 @@ fn runnable_mod(\n     Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg_exprs })\n }\n \n+// We could create runnables for modules with number_of_test_submodules > 0,\n+// but that bloats the runnables for no real benefit, since all tests can be run by the submodule already\n+fn has_test_function_or_multiple_test_submodules(module: &ast::Module) -> bool {\n+    if let Some(item_list) = module.item_list() {\n+        let mut number_of_test_submodules = 0;\n+\n+        for item in item_list.items() {\n+            match item {\n+                ast::Item::Fn(f) => {\n+                    if has_test_related_attribute(&f) {\n+                        return true;\n+                    }\n+                }\n+                ast::Item::Module(submodule) => {\n+                    if has_test_function_or_multiple_test_submodules(&submodule) {\n+                        number_of_test_submodules += 1;\n+                    }\n+                }\n+                _ => (),\n+            }\n+        }\n+\n+        number_of_test_submodules > 1\n+    } else {\n+        false\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect::{expect, Expect};\n@@ -300,7 +320,7 @@ fn bench() {}\n                                 4..8,\n                             ),\n                             name: \"main\",\n-                            kind: FN_DEF,\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -318,7 +338,7 @@ fn bench() {}\n                                 26..34,\n                             ),\n                             name: \"test_foo\",\n-                            kind: FN_DEF,\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -343,7 +363,7 @@ fn bench() {}\n                                 62..70,\n                             ),\n                             name: \"test_foo\",\n-                            kind: FN_DEF,\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -368,7 +388,7 @@ fn bench() {}\n                                 89..94,\n                             ),\n                             name: \"bench\",\n-                            kind: FN_DEF,\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -411,7 +431,7 @@ fn foo() {}\n                                 4..8,\n                             ),\n                             name: \"main\",\n-                            kind: FN_DEF,\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -427,7 +447,7 @@ fn foo() {}\n                             full_range: 15..57,\n                             focus_range: None,\n                             name: \"foo\",\n-                            kind: FN_DEF,\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -473,7 +493,7 @@ impl Data {\n                                 4..8,\n                             ),\n                             name: \"main\",\n-                            kind: FN_DEF,\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -489,7 +509,7 @@ impl Data {\n                             full_range: 44..98,\n                             focus_range: None,\n                             name: \"foo\",\n-                            kind: FN_DEF,\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -550,7 +570,7 @@ mod test_mod {\n                                 35..44,\n                             ),\n                             name: \"test_foo1\",\n-                            kind: FN_DEF,\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -571,38 +591,52 @@ mod test_mod {\n     }\n \n     #[test]\n-    fn test_runnables_one_depth_layer_module() {\n+    fn only_modules_with_test_functions_or_more_than_one_test_submodule_have_runners() {\n         check(\n             r#\"\n //- /lib.rs\n <|>\n-mod foo {\n-    mod test_mod {\n-        #[test]\n-        fn test_foo1() {}\n+mod root_tests {\n+    mod nested_tests_0 {\n+        mod nested_tests_1 {\n+            #[test]\n+            fn nested_test_11() {}\n+\n+            #[test]\n+            fn nested_test_12() {}\n+        }\n+\n+        mod nested_tests_2 {\n+            #[test]\n+            fn nested_test_2() {}\n+        }\n+\n+        mod nested_tests_3 {}\n     }\n+\n+    mod nested_tests_4 {}\n }\n \"#,\n-            &[&TEST, &TEST],\n+            &[&TEST, &TEST, &TEST, &TEST, &TEST, &TEST],\n             expect![[r#\"\n                 [\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 1,\n                             ),\n-                            full_range: 15..77,\n+                            full_range: 22..323,\n                             focus_range: Some(\n-                                19..27,\n+                                26..40,\n                             ),\n-                            name: \"test_mod\",\n+                            name: \"nested_tests_0\",\n                             kind: MODULE,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n                         },\n                         kind: TestMod {\n-                            path: \"foo::test_mod\",\n+                            path: \"root_tests::nested_tests_0\",\n                         },\n                         cfg_exprs: [],\n                     },\n@@ -611,66 +645,88 @@ mod foo {\n                             file_id: FileId(\n                                 1,\n                             ),\n-                            full_range: 38..71,\n+                            full_range: 51..192,\n                             focus_range: Some(\n-                                57..66,\n+                                55..69,\n                             ),\n-                            name: \"test_foo1\",\n-                            kind: FN_DEF,\n+                            name: \"nested_tests_1\",\n+                            kind: MODULE,\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: TestMod {\n+                            path: \"root_tests::nested_tests_0::nested_tests_1\",\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 84..126,\n+                            focus_range: Some(\n+                                107..121,\n+                            ),\n+                            name: \"nested_test_11\",\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n                         },\n                         kind: Test {\n                             test_id: Path(\n-                                \"foo::test_mod::test_foo1\",\n+                                \"root_tests::nested_tests_0::nested_tests_1::nested_test_11\",\n                             ),\n                             attr: TestAttr {\n                                 ignore: false,\n                             },\n                         },\n                         cfg_exprs: [],\n                     },\n-                ]\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_runnables_multiple_depth_module() {\n-        check(\n-            r#\"\n-//- /lib.rs\n-<|>\n-mod foo {\n-    mod bar {\n-        mod test_mod {\n-            #[test]\n-            fn test_foo1() {}\n-        }\n-    }\n-}\n-\"#,\n-            &[&TEST, &TEST],\n-            expect![[r#\"\n-                [\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 1,\n                             ),\n-                            full_range: 33..107,\n+                            full_range: 140..182,\n                             focus_range: Some(\n-                                37..45,\n+                                163..177,\n                             ),\n-                            name: \"test_mod\",\n+                            name: \"nested_test_12\",\n+                            kind: FN,\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"root_tests::nested_tests_0::nested_tests_1::nested_test_12\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 202..286,\n+                            focus_range: Some(\n+                                206..220,\n+                            ),\n+                            name: \"nested_tests_2\",\n                             kind: MODULE,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n                         },\n                         kind: TestMod {\n-                            path: \"foo::bar::test_mod\",\n+                            path: \"root_tests::nested_tests_0::nested_tests_2\",\n                         },\n                         cfg_exprs: [],\n                     },\n@@ -679,19 +735,19 @@ mod foo {\n                             file_id: FileId(\n                                 1,\n                             ),\n-                            full_range: 60..97,\n+                            full_range: 235..276,\n                             focus_range: Some(\n-                                83..92,\n+                                258..271,\n                             ),\n-                            name: \"test_foo1\",\n-                            kind: FN_DEF,\n+                            name: \"nested_test_2\",\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n                         },\n                         kind: Test {\n                             test_id: Path(\n-                                \"foo::bar::test_mod::test_foo1\",\n+                                \"root_tests::nested_tests_0::nested_tests_2::nested_test_2\",\n                             ),\n                             attr: TestAttr {\n                                 ignore: false,\n@@ -727,7 +783,7 @@ fn test_foo1() {}\n                                 36..45,\n                             ),\n                             name: \"test_foo1\",\n-                            kind: FN_DEF,\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -775,7 +831,7 @@ fn test_foo1() {}\n                                 58..67,\n                             ),\n                             name: \"test_foo1\",\n-                            kind: FN_DEF,\n+                            kind: FN,\n                             container_name: None,\n                             description: None,\n                             docs: None,"}, {"sha": "4348b43beb53bc39d0ac77ac225569cd7e939c2c", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,4 +1,4 @@\n-use ra_db::FilePosition;\n+use ra_db::{FilePosition, FileRange};\n use ra_ide_db::RootDatabase;\n \n use crate::SourceFileEdit;\n@@ -24,6 +24,9 @@ use ra_ssr::{MatchFinder, SsrError, SsrRule};\n // Method calls should generally be written in UFCS form. e.g. `foo::Bar::baz($s, $a)` will match\n // `$s.baz($a)`, provided the method call `baz` resolves to the method `foo::Bar::baz`.\n //\n+// The scope of the search / replace will be restricted to the current selection if any, otherwise\n+// it will apply to the whole workspace.\n+//\n // Placeholders may be given constraints by writing them as `${<name>:<constraint1>:<constraint2>...}`.\n //\n // Supported constraints:\n@@ -56,10 +59,11 @@ pub fn parse_search_replace(\n     rule: &str,\n     parse_only: bool,\n     db: &RootDatabase,\n-    position: FilePosition,\n+    resolve_context: FilePosition,\n+    selections: Vec<FileRange>,\n ) -> Result<Vec<SourceFileEdit>, SsrError> {\n     let rule: SsrRule = rule.parse()?;\n-    let mut match_finder = MatchFinder::in_context(db, position);\n+    let mut match_finder = MatchFinder::in_context(db, resolve_context, selections);\n     match_finder.add_rule(rule)?;\n     if parse_only {\n         return Ok(Vec::new());"}, {"sha": "f71b804fe9ebee594f5d4d972fa86e6862ebc5df", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 72, "deletions": 25, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -4,7 +4,7 @@ mod injection;\n #[cfg(test)]\n mod tests;\n \n-use hir::{Name, Semantics};\n+use hir::{Name, Semantics, VariantDef};\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -455,6 +455,18 @@ fn macro_call_range(macro_call: &ast::MacroCall) -> Option<TextRange> {\n     Some(TextRange::new(range_start, range_end))\n }\n \n+fn is_possibly_unsafe(name_ref: &ast::NameRef) -> bool {\n+    name_ref\n+        .syntax()\n+        .parent()\n+        .and_then(|parent| {\n+            ast::FieldExpr::cast(parent.clone())\n+                .map(|_| true)\n+                .or_else(|| ast::RecordPatField::cast(parent).map(|_| true))\n+        })\n+        .unwrap_or(false)\n+}\n+\n fn highlight_element(\n     sema: &Semantics<RootDatabase>,\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n@@ -464,7 +476,7 @@ fn highlight_element(\n     let db = sema.db;\n     let mut binding_hash = None;\n     let highlight: Highlight = match element.kind() {\n-        FN_DEF => {\n+        FN => {\n             bindings_shadow_count.clear();\n             return None;\n         }\n@@ -484,10 +496,19 @@ fn highlight_element(\n \n             match name_kind {\n                 Some(NameClass::Definition(def)) => {\n-                    highlight_name(db, def) | HighlightModifier::Definition\n+                    highlight_name(db, def, false) | HighlightModifier::Definition\n+                }\n+                Some(NameClass::ConstReference(def)) => highlight_name(db, def, false),\n+                Some(NameClass::FieldShorthand { field, .. }) => {\n+                    let mut h = HighlightTag::Field.into();\n+                    if let Definition::Field(field) = field {\n+                        if let VariantDef::Union(_) = field.parent_def(db) {\n+                            h |= HighlightModifier::Unsafe;\n+                        }\n+                    }\n+\n+                    h\n                 }\n-                Some(NameClass::ConstReference(def)) => highlight_name(db, def),\n-                Some(NameClass::FieldShorthand { .. }) => HighlightTag::Field.into(),\n                 None => highlight_name_by_syntax(name) | HighlightModifier::Definition,\n             }\n         }\n@@ -498,6 +519,7 @@ fn highlight_element(\n         }\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n+            let possibly_unsafe = is_possibly_unsafe(&name_ref);\n             match classify_name_ref(sema, &name_ref) {\n                 Some(name_kind) => match name_kind {\n                     NameRefClass::Definition(def) => {\n@@ -508,11 +530,13 @@ fn highlight_element(\n                                 binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n                             }\n                         };\n-                        highlight_name(db, def)\n+                        highlight_name(db, def, possibly_unsafe)\n                     }\n                     NameRefClass::FieldShorthand { .. } => HighlightTag::Field.into(),\n                 },\n-                None if syntactic_name_ref_highlighting => highlight_name_ref_by_syntax(name_ref),\n+                None if syntactic_name_ref_highlighting => {\n+                    highlight_name_ref_by_syntax(name_ref, sema)\n+                }\n                 None => HighlightTag::UnresolvedReference.into(),\n             }\n         }\n@@ -546,7 +570,7 @@ fn highlight_element(\n             T![!] if element.parent().and_then(ast::MacroCall::cast).is_some() => {\n                 HighlightTag::Macro.into()\n             }\n-            T![*] if element.parent().and_then(ast::PointerType::cast).is_some() => {\n+            T![*] if element.parent().and_then(ast::PtrType::cast).is_some() => {\n                 HighlightTag::Keyword.into()\n             }\n             T![*] if element.parent().and_then(ast::PrefixExpr::cast).is_some() => {\n@@ -577,7 +601,7 @@ fn highlight_element(\n             _ if element.parent().and_then(ast::RangePat::cast).is_some() => {\n                 HighlightTag::Operator.into()\n             }\n-            _ if element.parent().and_then(ast::DotDotPat::cast).is_some() => {\n+            _ if element.parent().and_then(ast::RestPat::cast).is_some() => {\n                 HighlightTag::Operator.into()\n             }\n             _ if element.parent().and_then(ast::Attr::cast).is_some() => {\n@@ -647,15 +671,24 @@ fn highlight_element(\n \n fn is_child_of_impl(element: &SyntaxElement) -> bool {\n     match element.parent() {\n-        Some(e) => e.kind() == IMPL_DEF,\n+        Some(e) => e.kind() == IMPL,\n         _ => false,\n     }\n }\n \n-fn highlight_name(db: &RootDatabase, def: Definition) -> Highlight {\n+fn highlight_name(db: &RootDatabase, def: Definition, possibly_unsafe: bool) -> Highlight {\n     match def {\n         Definition::Macro(_) => HighlightTag::Macro,\n-        Definition::Field(_) => HighlightTag::Field,\n+        Definition::Field(field) => {\n+            let mut h = HighlightTag::Field.into();\n+            if possibly_unsafe {\n+                if let VariantDef::Union(_) = field.parent_def(db) {\n+                    h |= HighlightModifier::Unsafe;\n+                }\n+            }\n+\n+            return h;\n+        }\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HighlightTag::Module,\n             hir::ModuleDef::Function(func) => {\n@@ -677,6 +710,7 @@ fn highlight_name(db: &RootDatabase, def: Definition) -> Highlight {\n                 let mut h = Highlight::new(HighlightTag::Static);\n                 if s.is_mut(db) {\n                     h |= HighlightModifier::Mutable;\n+                    h |= HighlightModifier::Unsafe;\n                 }\n                 return h;\n             }\n@@ -705,26 +739,26 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     };\n \n     let tag = match parent.kind() {\n-        STRUCT_DEF => HighlightTag::Struct,\n-        ENUM_DEF => HighlightTag::Enum,\n-        UNION_DEF => HighlightTag::Union,\n-        TRAIT_DEF => HighlightTag::Trait,\n-        TYPE_ALIAS_DEF => HighlightTag::TypeAlias,\n+        STRUCT => HighlightTag::Struct,\n+        ENUM => HighlightTag::Enum,\n+        UNION => HighlightTag::Union,\n+        TRAIT => HighlightTag::Trait,\n+        TYPE_ALIAS => HighlightTag::TypeAlias,\n         TYPE_PARAM => HighlightTag::TypeParam,\n-        RECORD_FIELD_DEF => HighlightTag::Field,\n+        RECORD_FIELD => HighlightTag::Field,\n         MODULE => HighlightTag::Module,\n-        FN_DEF => HighlightTag::Function,\n-        CONST_DEF => HighlightTag::Constant,\n-        STATIC_DEF => HighlightTag::Static,\n-        ENUM_VARIANT => HighlightTag::EnumVariant,\n-        BIND_PAT => HighlightTag::Local,\n+        FN => HighlightTag::Function,\n+        CONST => HighlightTag::Constant,\n+        STATIC => HighlightTag::Static,\n+        VARIANT => HighlightTag::EnumVariant,\n+        IDENT_PAT => HighlightTag::Local,\n         _ => default,\n     };\n \n     tag.into()\n }\n \n-fn highlight_name_ref_by_syntax(name: ast::NameRef) -> Highlight {\n+fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabase>) -> Highlight {\n     let default = HighlightTag::UnresolvedReference;\n \n     let parent = match name.syntax().parent() {\n@@ -734,7 +768,20 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef) -> Highlight {\n \n     let tag = match parent.kind() {\n         METHOD_CALL_EXPR => HighlightTag::Function,\n-        FIELD_EXPR => HighlightTag::Field,\n+        FIELD_EXPR => {\n+            let h = HighlightTag::Field;\n+            let is_union = ast::FieldExpr::cast(parent)\n+                .and_then(|field_expr| {\n+                    let field = sema.resolve_field(&field_expr)?;\n+                    Some(if let VariantDef::Union(_) = field.parent_def(sema.db) {\n+                        true\n+                    } else {\n+                        false\n+                    })\n+                })\n+                .unwrap_or(false);\n+            return if is_union { h | HighlightModifier::Unsafe } else { h.into() };\n+        }\n         PATH_SEGMENT => {\n             let path = match parent.parent().and_then(ast::Path::cast) {\n                 Some(it) => it,"}, {"sha": "a5e7d28676dd7f46dbbe722f7c570368dd39c088", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,6 @@\n //! Renders a bit of code as HTML.\n \n+use oorandom::Rand32;\n use ra_db::SourceDatabase;\n use ra_syntax::{AstNode, TextRange, TextSize};\n \n@@ -9,13 +10,12 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n     let parse = db.parse(file_id);\n \n     fn rainbowify(seed: u64) -> String {\n-        use rand::prelude::*;\n-        let mut rng = SmallRng::seed_from_u64(seed);\n+        let mut rng = Rand32::new(seed);\n         format!(\n             \"hsl({h},{s}%,{l}%)\",\n-            h = rng.gen_range::<u16, _, _>(0, 361),\n-            s = rng.gen_range::<u16, _, _>(42, 99),\n-            l = rng.gen_range::<u16, _, _>(40, 91),\n+            h = rng.rand_range(0..361),\n+            s = rng.rand_range(42..99),\n+            l = rng.rand_range(40..91),\n         )\n     }\n "}, {"sha": "730efff0de1f891d04ea38e6c09918dda8222fa5", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -9,6 +9,9 @@ use crate::{mock_analysis::single_file, FileRange, TextRange};\n fn test_highlighting() {\n     check_highlighting(\n         r#\"\n+use inner::{self as inner_mod};\n+mod inner {}\n+\n #[derive(Clone, Debug)]\n struct Foo {\n     pub x: i32,\n@@ -272,19 +275,37 @@ fn test_unsafe_highlighting() {\n         r#\"\n unsafe fn unsafe_fn() {}\n \n+union Union {\n+    a: u32,\n+    b: f32,\n+}\n+\n struct HasUnsafeFn;\n \n impl HasUnsafeFn {\n     unsafe fn unsafe_method(&self) {}\n }\n \n+struct TypeForStaticMut {\n+    a: u8\n+}\n+\n+static mut global_mut: TypeForStaticMut = TypeForStaticMut { a: 0 };\n+\n fn main() {\n     let x = &5 as *const usize;\n+    let u = Union { b: 0 };\n     unsafe {\n         unsafe_fn();\n+        let b = u.b;\n+        match u {\n+            Union { b: 0 } => (),\n+            Union { a } => (),\n+        }\n         HasUnsafeFn.unsafe_method();\n         let y = *(x);\n         let z = -x;\n+        let a = global_mut.a;\n     }\n }\n \"#"}, {"sha": "07217e8087a205fc683f0858b7da74bb92c6e7cb", "filename": "crates/ra_ide/src/syntax_tree.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -116,7 +116,7 @@ mod tests {\n             syn.trim(),\n             r#\"\n SOURCE_FILE@0..11\n-  FN_DEF@0..11\n+  FN@0..11\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -148,7 +148,7 @@ fn test() {\n             syn.trim(),\n             r#\"\n SOURCE_FILE@0..60\n-  FN_DEF@0..60\n+  FN@0..60\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7\n@@ -190,7 +190,7 @@ SOURCE_FILE@0..60\n         assert_eq_text!(\n             syn.trim(),\n             r#\"\n-FN_DEF@0..11\n+FN@0..11\n   FN_KW@0..2 \"fn\"\n   WHITESPACE@2..3 \" \"\n   NAME@3..6\n@@ -258,7 +258,7 @@ fn bar() {\n             syn.trim(),\n             r#\"\n SOURCE_FILE@0..12\n-  FN_DEF@0..12\n+  FN@0..12\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -292,7 +292,7 @@ fn bar() {\n             syn.trim(),\n             r#\"\n SOURCE_FILE@0..12\n-  FN_DEF@0..12\n+  FN@0..12\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -325,7 +325,7 @@ fn bar() {\n             syn.trim(),\n             r#\"\n SOURCE_FILE@0..25\n-  FN_DEF@0..12\n+  FN@0..12\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -339,7 +339,7 @@ SOURCE_FILE@0..25\n       WHITESPACE@10..11 \"\\n\"\n       R_CURLY@11..12 \"}\"\n   WHITESPACE@12..13 \"\\n\"\n-  FN_DEF@13..25\n+  FN@13..25\n     FN_KW@13..15 \"fn\"\n     WHITESPACE@15..16 \" \"\n     NAME@16..19"}, {"sha": "79409fe816b2cb8fefe4e47d2f9055f5d2cbfc11", "filename": "crates/ra_ide/test_data/highlight_unsafe.html", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -37,18 +37,36 @@\n </style>\n <pre><code><span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n \n+<span class=\"keyword\">union</span> <span class=\"union declaration\">Union</span> <span class=\"punctuation\">{</span>\n+    <span class=\"field declaration\">a</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">u32</span><span class=\"punctuation\">,</span>\n+    <span class=\"field declaration\">b</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">f32</span><span class=\"punctuation\">,</span>\n+<span class=\"punctuation\">}</span>\n+\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span><span class=\"punctuation\">;</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> <span class=\"punctuation\">{</span>\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">TypeForStaticMut</span> <span class=\"punctuation\">{</span>\n+    <span class=\"field declaration\">a</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">u8</span>\n+<span class=\"punctuation\">}</span>\n+\n+<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">global_mut</span><span class=\"punctuation\">:</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"operator\">=</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">u</span> <span class=\"operator\">=</span> <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"punctuation\">{</span>\n         <span class=\"function unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">b</span> <span class=\"operator\">=</span> <span class=\"variable\">u</span><span class=\"punctuation\">.</span><span class=\"field unsafe\">b</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword control\">match</span> <span class=\"variable\">u</span> <span class=\"punctuation\">{</span>\n+            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n+            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n+        <span class=\"punctuation\">}</span>\n         <span class=\"struct\">HasUnsafeFn</span><span class=\"punctuation\">.</span><span class=\"function unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"punctuation\">(</span><span class=\"variable\">x</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">-</span><span class=\"variable\">x</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"static mutable unsafe\">global_mut</span><span class=\"punctuation\">.</span><span class=\"field\">a</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "8e0160eee5b47dd945c106d23d47e4933f4e8b53", "filename": "crates/ra_ide/test_data/highlighting.html", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -35,7 +35,10 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"function attribute\">derive</span><span class=\"punctuation\">(</span><span class=\"attribute\">Clone</span><span class=\"punctuation\">,</span><span class=\"attribute\"> Debug</span><span class=\"punctuation\">)</span><span class=\"attribute\">]</span>\n+<pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"punctuation\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+<span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+\n+<span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"function attribute\">derive</span><span class=\"punctuation\">(</span><span class=\"attribute\">Clone</span><span class=\"punctuation\">,</span><span class=\"attribute\"> Debug</span><span class=\"punctuation\">)</span><span class=\"attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"punctuation\">{</span>\n     <span class=\"keyword\">pub</span> <span class=\"field declaration\">x</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">,</span>\n     <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">,</span>\n@@ -61,7 +64,7 @@\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n-<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable\">STATIC_MUT</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n+<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">STATIC_MUT</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"punctuation\">,</span> <span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"type_param\">T</span> <span class=\"punctuation\">{</span>\n     <span class=\"function\">foo</span><span class=\"operator\">::</span><span class=\"punctuation\">&lt;</span><span class=\"lifetime\">'a</span><span class=\"punctuation\">,</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>\n@@ -94,7 +97,7 @@\n     <span class=\"punctuation\">}</span>\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"punctuation\">{</span>\n         <span class=\"variable mutable\">vec</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">set_len</span><span class=\"punctuation\">(</span><span class=\"numeric_literal\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"static mutable\">STATIC_MUT</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">;</span>\n+        <span class=\"static mutable unsafe\">STATIC_MUT</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">}</span>\n \n     <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> <span class=\"punctuation\">{</span>"}, {"sha": "401e87a73d3bc12d0e464d1f30b5caff9d03f59c", "filename": "crates/ra_ide/test_data/rainbow_highlighting.html", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Ftest_data%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide%2Ftest_data%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Frainbow_highlighting.html?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -36,14 +36,14 @@\n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n <pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(76,47%,83%);\">x</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(15,86%,51%);\">y</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"other color please!\"</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(127,71%,87%);\">x</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"other color please!\"</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(90,74%,79%);\">y</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(127,71%,87%);\">x</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"punctuation\">;</span>\n <span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "b13df8b855b2a40afbe68d89d6c98c57f672c70e", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -190,11 +190,24 @@ impl RootDatabase {\n                 let q: $q = Default::default();\n                 let name = format!(\"{:?} (deps)\", q);\n                 acc.push((name, before - after));\n+\n+                let before = memory_usage().allocated;\n+                $q.in_db(self).purge();\n+                let after = memory_usage().allocated;\n+                let q: $q = Default::default();\n+                let name = format!(\"{:?} (purge)\", q);\n+                acc.push((name, before - after));\n             )*}\n         }\n         sweep_each_query![\n             // SourceDatabase\n             ra_db::ParseQuery\n+            ra_db::CrateGraphQuery\n+\n+            // SourceDatabaseExt\n+            ra_db::FileTextQuery\n+            ra_db::FileSourceRootQuery\n+            ra_db::SourceRootQuery\n             ra_db::SourceRootCratesQuery\n \n             // AstDatabase\n@@ -242,15 +255,24 @@ impl RootDatabase {\n             hir::db::TraitImplsInCrateQuery\n             hir::db::TraitImplsInDepsQuery\n             hir::db::AssociatedTyDataQuery\n+            hir::db::AssociatedTyDataQuery\n             hir::db::TraitDatumQuery\n             hir::db::StructDatumQuery\n             hir::db::ImplDatumQuery\n+            hir::db::FnDefDatumQuery\n+            hir::db::ReturnTypeImplTraitsQuery\n+            hir::db::InternCallableDefQuery\n+            hir::db::InternTypeParamIdQuery\n+            hir::db::InternImplTraitIdQuery\n+            hir::db::InternClosureQuery\n             hir::db::AssociatedTyValueQuery\n             hir::db::TraitSolveQuery\n-            hir::db::ReturnTypeImplTraitsQuery\n \n             // SymbolsDatabase\n             crate::symbol_index::FileSymbolsQuery\n+            crate::symbol_index::LibrarySymbolsQuery\n+            crate::symbol_index::LocalRootsQuery\n+            crate::symbol_index::LibraryRootsQuery\n \n             // LineIndexDatabase\n             crate::LineIndexQuery"}, {"sha": "b51000b03fb9e16ae1ff103571c709463d88a4d7", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -12,7 +12,7 @@ use hir::{\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode},\n-    match_ast,\n+    match_ast, SyntaxNode,\n };\n \n use crate::RootDatabase;\n@@ -111,27 +111,46 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n \n     let parent = name.syntax().parent()?;\n \n-    if let Some(bind_pat) = ast::BindPat::cast(parent.clone()) {\n+    if let Some(bind_pat) = ast::IdentPat::cast(parent.clone()) {\n         if let Some(def) = sema.resolve_bind_pat_to_const(&bind_pat) {\n             return Some(NameClass::ConstReference(Definition::ModuleDef(def)));\n         }\n     }\n \n     match_ast! {\n         match parent {\n-            ast::Alias(it) => {\n+            ast::Rename(it) => {\n                 let use_tree = it.syntax().parent().and_then(ast::UseTree::cast)?;\n                 let path = use_tree.path()?;\n                 let path_segment = path.segment()?;\n-                let name_ref = path_segment.name_ref()?;\n-                let name_ref_class = classify_name_ref(sema, &name_ref)?;\n+                let name_ref_class = path_segment\n+                    .name_ref()\n+                    // The rename might be from a `self` token, so fallback to the name higher\n+                    // in the use tree.\n+                    .or_else(||{\n+                        if path_segment.self_token().is_none() {\n+                            return None;\n+                        }\n+\n+                        let use_tree = use_tree\n+                            .syntax()\n+                            .parent()\n+                            .as_ref()\n+                            // Skip over UseTreeList\n+                            .and_then(SyntaxNode::parent)\n+                            .and_then(ast::UseTree::cast)?;\n+                        let path = use_tree.path()?;\n+                        let path_segment = path.segment()?;\n+                        path_segment.name_ref()\n+                    })\n+                    .and_then(|name_ref| classify_name_ref(sema, &name_ref))?;\n \n                 Some(NameClass::Definition(name_ref_class.definition()))\n             },\n-            ast::BindPat(it) => {\n+            ast::IdentPat(it) => {\n                 let local = sema.to_def(&it)?;\n \n-                if let Some(record_field_pat) = it.syntax().parent().and_then(ast::RecordFieldPat::cast) {\n+                if let Some(record_field_pat) = it.syntax().parent().and_then(ast::RecordPatField::cast) {\n                     if record_field_pat.name_ref().is_none() {\n                         if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n                             let field = Definition::Field(field);\n@@ -142,47 +161,47 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n \n                 Some(NameClass::Definition(Definition::Local(local)))\n             },\n-            ast::RecordFieldDef(it) => {\n+            ast::RecordField(it) => {\n                 let field: hir::Field = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::Field(field)))\n             },\n             ast::Module(it) => {\n                 let def = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::StructDef(it) => {\n+            ast::Struct(it) => {\n                 let def: hir::Struct = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::UnionDef(it) => {\n+            ast::Union(it) => {\n                 let def: hir::Union = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::EnumDef(it) => {\n+            ast::Enum(it) => {\n                 let def: hir::Enum = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::TraitDef(it) => {\n+            ast::Trait(it) => {\n                 let def: hir::Trait = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::StaticDef(it) => {\n+            ast::Static(it) => {\n                 let def: hir::Static = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::EnumVariant(it) => {\n+            ast::Variant(it) => {\n                 let def: hir::EnumVariant = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::FnDef(it) => {\n+            ast::Fn(it) => {\n                 let def: hir::Function = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::ConstDef(it) => {\n+            ast::Const(it) => {\n                 let def: hir::Const = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::TypeAliasDef(it) => {\n+            ast::TypeAlias(it) => {\n                 let def: hir::TypeAlias = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n@@ -236,7 +255,7 @@ pub fn classify_name_ref(\n         }\n     }\n \n-    if let Some(record_field) = ast::RecordField::for_field_name(name_ref) {\n+    if let Some(record_field) = ast::RecordExprField::for_field_name(name_ref) {\n         if let Some((field, local)) = sema.resolve_record_field(&record_field) {\n             let field = Definition::Field(field);\n             let res = match local {\n@@ -247,7 +266,7 @@ pub fn classify_name_ref(\n         }\n     }\n \n-    if let Some(record_field_pat) = ast::RecordFieldPat::cast(parent.clone()) {\n+    if let Some(record_field_pat) = ast::RecordPatField::cast(parent.clone()) {\n         if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n             let field = Definition::Field(field);\n             return Some(NameRefClass::Definition(field));"}, {"sha": "0b862b449f7548cdedad228b938ee0a2f4eb52d5", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -315,7 +315,7 @@ fn is_record_lit_name_ref(name_ref: &ast::NameRef) -> bool {\n     name_ref\n         .syntax()\n         .ancestors()\n-        .find_map(ast::RecordLit::cast)\n+        .find_map(ast::RecordExpr::cast)\n         .and_then(|l| l.path())\n         .and_then(|p| p.segment())\n         .map(|p| p.name_ref().as_ref() == Some(name_ref))"}, {"sha": "35a2c5be3b2769eb4ee3463c5fd98b04e4b9dea5", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -344,7 +344,7 @@ impl Query {\n }\n \n fn is_type(kind: SyntaxKind) -> bool {\n-    matches!(kind, STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF)\n+    matches!(kind, STRUCT | ENUM | TRAIT | TYPE_ALIAS)\n }\n \n /// The actual data that is stored in the index. It should be as compact as\n@@ -397,14 +397,14 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n     }\n     match_ast! {\n         match node {\n-            ast::FnDef(it) => decl(it),\n-            ast::StructDef(it) => decl(it),\n-            ast::EnumDef(it) => decl(it),\n-            ast::TraitDef(it) => decl(it),\n+            ast::Fn(it) => decl(it),\n+            ast::Struct(it) => decl(it),\n+            ast::Enum(it) => decl(it),\n+            ast::Trait(it) => decl(it),\n             ast::Module(it) => decl(it),\n-            ast::TypeAliasDef(it) => decl(it),\n-            ast::ConstDef(it) => decl(it),\n-            ast::StaticDef(it) => decl(it),\n+            ast::TypeAlias(it) => decl(it),\n+            ast::Const(it) => decl(it),\n+            ast::Static(it) => decl(it),\n             ast::MacroCall(it) => {\n                 if it.is_macro_rules().is_some() {\n                     decl(it)"}, {"sha": "5fc48507ff589d91d71b1ee6eafb6f8c60cb2b95", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -825,7 +825,7 @@ mod tests {\n     #[test]\n     fn test_token_tree_multi_char_punct() {\n         let source_file = ast::SourceFile::parse(\"struct Foo { a: x::Y }\").ok().unwrap();\n-        let struct_def = source_file.syntax().descendants().find_map(ast::StructDef::cast).unwrap();\n+        let struct_def = source_file.syntax().descendants().find_map(ast::Struct::cast).unwrap();\n         let tt = ast_to_token_tree(&struct_def).unwrap().0;\n         token_tree_to_syntax_node(&tt, FragmentKind::Item).unwrap();\n     }"}, {"sha": "286983d60bcf3070e18d305d0fd7957b15f0d6f2", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -258,7 +258,7 @@ fn test_expr_order() {\n     assert_eq_text!(\n         dump.trim(),\n         r#\"MACRO_ITEMS@0..15\n-  FN_DEF@0..15\n+  FN@0..15\n     FN_KW@0..2 \"fn\"\n     NAME@2..5\n       IDENT@2..5 \"bar\"\n@@ -490,13 +490,13 @@ fn test_expand_to_item_list() {\n         format!(\"{:#?}\", tree).trim(),\n         r#\"\n MACRO_ITEMS@0..40\n-  STRUCT_DEF@0..20\n+  STRUCT@0..20\n     STRUCT_KW@0..6 \"struct\"\n     NAME@6..9\n       IDENT@6..9 \"Foo\"\n-    RECORD_FIELD_DEF_LIST@9..20\n+    RECORD_FIELD_LIST@9..20\n       L_CURLY@9..10 \"{\"\n-      RECORD_FIELD_DEF@10..19\n+      RECORD_FIELD@10..19\n         NAME@10..15\n           IDENT@10..15 \"field\"\n         COLON@15..16 \":\"\n@@ -506,13 +506,13 @@ MACRO_ITEMS@0..40\n               NAME_REF@16..19\n                 IDENT@16..19 \"u32\"\n       R_CURLY@19..20 \"}\"\n-  STRUCT_DEF@20..40\n+  STRUCT@20..40\n     STRUCT_KW@20..26 \"struct\"\n     NAME@26..29\n       IDENT@26..29 \"Bar\"\n-    RECORD_FIELD_DEF_LIST@29..40\n+    RECORD_FIELD_LIST@29..40\n       L_CURLY@29..30 \"{\"\n-      RECORD_FIELD_DEF@30..39\n+      RECORD_FIELD@30..39\n         NAME@30..35\n           IDENT@30..35 \"field\"\n         COLON@35..36 \":\"\n@@ -625,7 +625,7 @@ fn test_tt_to_stmts() {\n         r#\"MACRO_STMTS@0..15\n   LET_STMT@0..7\n     LET_KW@0..3 \"let\"\n-    BIND_PAT@3..4\n+    IDENT_PAT@3..4\n       NAME@3..4\n         IDENT@3..4 \"a\"\n     EQ@4..5 \"=\"\n@@ -1116,7 +1116,7 @@ fn test_vec() {\n   L_CURLY@0..1 \"{\"\n   LET_STMT@1..20\n     LET_KW@1..4 \"let\"\n-    BIND_PAT@4..8\n+    IDENT_PAT@4..8\n       MUT_KW@4..7 \"mut\"\n       NAME@7..8\n         IDENT@7..8 \"v\"\n@@ -1467,7 +1467,7 @@ macro_rules! quick_error {\n         buf [ ]\n         queue [ ]\n     ) => {\n-        quick_error!(ENUM_DEFINITION [enum $name $( #[$meta] )*]\n+        quick_error!(ENUMINITION [enum $name $( #[$meta] )*]\n             body []\n             queue [$(\n                 $( #[$imeta] )*\n@@ -1489,7 +1489,7 @@ quick_error ! (SORT [enum Wrapped # [derive (Debug)]] items [\n \"#,\n     );\n \n-    assert_eq!(expanded.to_string(), \"quick_error ! (ENUM_DEFINITION [enum Wrapped # [derive (Debug)]] body [] queue [=> One : UNIT [] => Two : TUPLE [s : String]]) ;\");\n+    assert_eq!(expanded.to_string(), \"quick_error ! (ENUMINITION [enum Wrapped # [derive (Debug)]] body [] queue [=> One : UNIT [] => Two : TUPLE [s : String]]) ;\");\n }\n \n #[test]"}, {"sha": "c2e1d701e2247e2ccee1422e9a5de6f574951619", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -142,19 +142,19 @@ pub(crate) fn reparser(\n ) -> Option<fn(&mut Parser)> {\n     let res = match node {\n         BLOCK_EXPR => expressions::block_expr,\n-        RECORD_FIELD_DEF_LIST => items::record_field_def_list,\n-        RECORD_FIELD_LIST => items::record_field_list,\n-        ENUM_VARIANT_LIST => items::enum_variant_list,\n+        RECORD_FIELD_LIST => items::record_field_def_list,\n+        RECORD_EXPR_FIELD_LIST => items::record_field_list,\n+        VARIANT_LIST => items::enum_variant_list,\n         MATCH_ARM_LIST => items::match_arm_list,\n         USE_TREE_LIST => items::use_tree_list,\n         EXTERN_ITEM_LIST => items::extern_item_list,\n         TOKEN_TREE if first_child? == T!['{'] => items::token_tree,\n-        ITEM_LIST => match parent? {\n-            IMPL_DEF => items::impl_item_list,\n-            TRAIT_DEF => items::trait_item_list,\n-            MODULE => items::mod_item_list,\n+        ASSOC_ITEM_LIST => match parent? {\n+            IMPL => items::impl_item_list,\n+            TRAIT => items::trait_item_list,\n             _ => return None,\n         },\n+        ITEM_LIST => items::mod_item_list,\n         _ => return None,\n     };\n     Some(res)\n@@ -224,7 +224,7 @@ fn opt_alias(p: &mut Parser) {\n         if !p.eat(T![_]) {\n             name(p);\n         }\n-        m.complete(p, ALIAS);\n+        m.complete(p, RENAME);\n     }\n }\n \n@@ -270,10 +270,6 @@ fn name_ref(p: &mut Parser) {\n         let m = p.start();\n         p.bump(IDENT);\n         m.complete(p, NAME_REF);\n-    } else if p.at(T![self]) {\n-        let m = p.start();\n-        p.bump(T![self]);\n-        m.complete(p, T![self]);\n     } else {\n         p.err_and_bump(\"expected identifier\");\n     }"}, {"sha": "e1c25a838fb70eb32782137d6b23564d32b35713", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -587,7 +587,7 @@ fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, BlockLike) {\n     match p.current() {\n         T!['{'] if !r.forbid_structs => {\n             record_field_list(p);\n-            (m.complete(p, RECORD_LIT), BlockLike::NotBlock)\n+            (m.complete(p, RECORD_EXPR), BlockLike::NotBlock)\n         }\n         T![!] if !p.at(T![!=]) => {\n             let block_like = items::macro_call_after_excl(p);\n@@ -627,7 +627,7 @@ pub(crate) fn record_field_list(p: &mut Parser) {\n                     p.expect(T![:]);\n                 }\n                 expr(p);\n-                m.complete(p, RECORD_FIELD);\n+                m.complete(p, RECORD_EXPR_FIELD);\n             }\n             T![.] if p.at(T![..]) => {\n                 m.abandon(p);\n@@ -648,5 +648,5 @@ pub(crate) fn record_field_list(p: &mut Parser) {\n         }\n     }\n     p.expect(T!['}']);\n-    m.complete(p, RECORD_FIELD_LIST);\n+    m.complete(p, RECORD_EXPR_FIELD_LIST);\n }"}, {"sha": "0b01d3bc64640f4d3e6aeb69ce3262757a7676cd", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -250,7 +250,7 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n             p.error(\"expected expression\");\n         }\n     }\n-    m.complete(p, LAMBDA_EXPR)\n+    m.complete(p, CLOSURE_EXPR)\n }\n \n // test if_expr"}, {"sha": "cca524ceaa036be80ed1f4f2fa8634f79241e1a2", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -180,7 +180,7 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n         // unsafe const fn bar() {}\n         T![fn] => {\n             fn_def(p);\n-            m.complete(p, FN_DEF);\n+            m.complete(p, FN);\n         }\n \n         // test unsafe_trait\n@@ -193,7 +193,7 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n         // unsafe auto trait T {}\n         T![trait] => {\n             traits::trait_def(p);\n-            m.complete(p, TRAIT_DEF);\n+            m.complete(p, TRAIT);\n         }\n \n         // test unsafe_impl\n@@ -221,7 +221,7 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n         // unsafe default impl Foo {}\n         T![impl] => {\n             traits::impl_def(p);\n-            m.complete(p, IMPL_DEF);\n+            m.complete(p, IMPL);\n         }\n \n         // test existential_type\n@@ -304,10 +304,16 @@ fn extern_crate_item(p: &mut Parser, m: Marker) {\n     p.bump(T![extern]);\n     assert!(p.at(T![crate]));\n     p.bump(T![crate]);\n-    name_ref(p);\n+\n+    if p.at(T![self]) {\n+        p.bump(T![self]);\n+    } else {\n+        name_ref(p);\n+    }\n+\n     opt_alias(p);\n     p.expect(T![;]);\n-    m.complete(p, EXTERN_CRATE_ITEM);\n+    m.complete(p, EXTERN_CRATE);\n }\n \n pub(crate) fn extern_item_list(p: &mut Parser) {\n@@ -374,7 +380,7 @@ fn type_def(p: &mut Parser, m: Marker) {\n         types::type_(p);\n     }\n     p.expect(T![;]);\n-    m.complete(p, TYPE_ALIAS_DEF);\n+    m.complete(p, TYPE_ALIAS);\n }\n \n pub(crate) fn mod_item(p: &mut Parser, m: Marker) {"}, {"sha": "addfb59d4b1a98377f243d4bbb7c300a053aa10a", "filename": "crates/ra_parser/src/grammar/items/adt.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -5,13 +5,13 @@ use super::*;\n pub(super) fn struct_def(p: &mut Parser, m: Marker) {\n     assert!(p.at(T![struct]));\n     p.bump(T![struct]);\n-    struct_or_union(p, m, T![struct], STRUCT_DEF);\n+    struct_or_union(p, m, T![struct], STRUCT);\n }\n \n pub(super) fn union_def(p: &mut Parser, m: Marker) {\n     assert!(p.at_contextual_kw(\"union\"));\n     p.bump_remap(T![union]);\n-    struct_or_union(p, m, T![union], UNION_DEF);\n+    struct_or_union(p, m, T![union], UNION);\n }\n \n fn struct_or_union(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n@@ -64,7 +64,7 @@ pub(super) fn enum_def(p: &mut Parser, m: Marker) {\n     } else {\n         p.error(\"expected `{`\")\n     }\n-    m.complete(p, ENUM_DEF);\n+    m.complete(p, ENUM);\n }\n \n pub(crate) fn enum_variant_list(p: &mut Parser) {\n@@ -91,7 +91,7 @@ pub(crate) fn enum_variant_list(p: &mut Parser) {\n             if p.eat(T![=]) {\n                 expressions::expr(p);\n             }\n-            var.complete(p, ENUM_VARIANT);\n+            var.complete(p, VARIANT);\n         } else {\n             var.abandon(p);\n             p.err_and_bump(\"expected enum variant\");\n@@ -101,7 +101,7 @@ pub(crate) fn enum_variant_list(p: &mut Parser) {\n         }\n     }\n     p.expect(T!['}']);\n-    m.complete(p, ENUM_VARIANT_LIST);\n+    m.complete(p, VARIANT_LIST);\n }\n \n pub(crate) fn record_field_def_list(p: &mut Parser) {\n@@ -119,7 +119,7 @@ pub(crate) fn record_field_def_list(p: &mut Parser) {\n         }\n     }\n     p.expect(T!['}']);\n-    m.complete(p, RECORD_FIELD_DEF_LIST);\n+    m.complete(p, RECORD_FIELD_LIST);\n \n     fn record_field_def(p: &mut Parser) {\n         let m = p.start();\n@@ -134,7 +134,7 @@ pub(crate) fn record_field_def_list(p: &mut Parser) {\n             name(p);\n             p.expect(T![:]);\n             types::type_(p);\n-            m.complete(p, RECORD_FIELD_DEF);\n+            m.complete(p, RECORD_FIELD);\n         } else {\n             m.abandon(p);\n             p.err_and_bump(\"expected field declaration\");\n@@ -167,12 +167,12 @@ fn tuple_field_def_list(p: &mut Parser) {\n             break;\n         }\n         types::type_(p);\n-        m.complete(p, TUPLE_FIELD_DEF);\n+        m.complete(p, TUPLE_FIELD);\n \n         if !p.at(T![')']) {\n             p.expect(T![,]);\n         }\n     }\n     p.expect(T![')']);\n-    m.complete(p, TUPLE_FIELD_DEF_LIST);\n+    m.complete(p, TUPLE_FIELD_LIST);\n }"}, {"sha": "35ad766dcee8882f6bec5aa007182bb8a5590400", "filename": "crates/ra_parser/src/grammar/items/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -3,11 +3,11 @@\n use super::*;\n \n pub(super) fn static_def(p: &mut Parser, m: Marker) {\n-    const_or_static(p, m, T![static], STATIC_DEF)\n+    const_or_static(p, m, T![static], STATIC)\n }\n \n pub(super) fn const_def(p: &mut Parser, m: Marker) {\n-    const_or_static(p, m, T![const], CONST_DEF)\n+    const_or_static(p, m, T![const], CONST)\n }\n \n fn const_or_static(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {"}, {"sha": "ef9c8ff5b03f2d00d2a2ad95d17f77d2b9d26a2e", "filename": "crates/ra_parser/src/grammar/items/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn trait_item_list(p: &mut Parser) {\n         item_or_macro(p, true, ItemFlavor::Trait);\n     }\n     p.expect(T!['}']);\n-    m.complete(p, ITEM_LIST);\n+    m.complete(p, ASSOC_ITEM_LIST);\n }\n \n // test impl_def\n@@ -107,7 +107,7 @@ pub(crate) fn impl_item_list(p: &mut Parser) {\n         item_or_macro(p, true, ItemFlavor::Mod);\n     }\n     p.expect(T!['}']);\n-    m.complete(p, ITEM_LIST);\n+    m.complete(p, ASSOC_ITEM_LIST);\n }\n \n // test impl_type_params"}, {"sha": "8e836a77e1d4c27b11d39794dff9925b74b83a66", "filename": "crates/ra_parser/src/grammar/items/use_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -7,7 +7,7 @@ pub(super) fn use_item(p: &mut Parser, m: Marker) {\n     p.bump(T![use]);\n     use_tree(p, true);\n     p.expect(T![;]);\n-    m.complete(p, USE_ITEM);\n+    m.complete(p, USE);\n }\n \n /// Parse a use 'tree', such as `some::path` in `use some::path;`"}, {"sha": "716bdc978402bc07346e8acc5925f91d18931158", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -192,7 +192,7 @@ fn record_field_pat_list(p: &mut Parser) {\n     p.bump(T!['{']);\n     while !p.at(EOF) && !p.at(T!['}']) {\n         match p.current() {\n-            // A trailing `..` is *not* treated as a DOT_DOT_PAT.\n+            // A trailing `..` is *not* treated as a REST_PAT.\n             T![.] if p.at(T![..]) => p.bump(T![..]),\n             T!['{'] => error_block(p, \"expected ident\"),\n \n@@ -217,15 +217,15 @@ fn record_field_pat_list(p: &mut Parser) {\n                         bind_pat(p, false);\n                     }\n                 }\n-                m.complete(p, RECORD_FIELD_PAT);\n+                m.complete(p, RECORD_PAT_FIELD);\n             }\n         }\n         if !p.at(T!['}']) {\n             p.expect(T![,]);\n         }\n     }\n     p.expect(T!['}']);\n-    m.complete(p, RECORD_FIELD_PAT_LIST);\n+    m.complete(p, RECORD_PAT_FIELD_LIST);\n }\n \n // test placeholder_pat\n@@ -234,7 +234,7 @@ fn placeholder_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![_]));\n     let m = p.start();\n     p.bump(T![_]);\n-    m.complete(p, PLACEHOLDER_PAT)\n+    m.complete(p, WILDCARD_PAT)\n }\n \n // test dot_dot_pat\n@@ -267,7 +267,7 @@ fn dot_dot_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![..]));\n     let m = p.start();\n     p.bump(T![..]);\n-    m.complete(p, DOT_DOT_PAT)\n+    m.complete(p, REST_PAT)\n }\n \n // test ref_pat\n@@ -361,7 +361,7 @@ fn bind_pat(p: &mut Parser, with_at: bool) -> CompletedMarker {\n     if with_at && p.eat(T![@]) {\n         pattern_single(p);\n     }\n-    m.complete(p, BIND_PAT)\n+    m.complete(p, IDENT_PAT)\n }\n \n // test box_pat"}, {"sha": "aef7cd6fbb2d5f86fe2bc537bead3b0dcf68fd1f", "filename": "crates/ra_parser/src/grammar/type_args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -22,7 +22,7 @@ pub(super) fn opt_type_arg_list(p: &mut Parser, colon_colon_required: bool) {\n         }\n     }\n     p.expect(T![>]);\n-    m.complete(p, TYPE_ARG_LIST);\n+    m.complete(p, GENERIC_ARG_LIST);\n }\n \n // test type_arg\n@@ -52,7 +52,7 @@ fn type_arg(p: &mut Parser) {\n             m.complete(p, CONST_ARG);\n         }\n         k if k.is_literal() => {\n-            p.bump(k);\n+            expressions::literal(p);\n             m.complete(p, CONST_ARG);\n         }\n         _ => {"}, {"sha": "90dabb4c0f109c703d25e2356c58e5d27442e9be", "filename": "crates/ra_parser/src/grammar/type_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -36,7 +36,7 @@ fn type_param_list(p: &mut Parser) {\n         }\n     }\n     p.expect(T![>]);\n-    m.complete(p, TYPE_PARAM_LIST);\n+    m.complete(p, GENERIC_PARAM_LIST);\n }\n \n fn lifetime_param(p: &mut Parser, m: Marker) {"}, {"sha": "0aa173a52b2f35bbf49802b77d8f38a0847ad6f7", "filename": "crates/ra_parser/src/grammar/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -117,7 +117,7 @@ fn pointer_type(p: &mut Parser) {\n     };\n \n     type_no_bounds(p);\n-    m.complete(p, POINTER_TYPE);\n+    m.complete(p, PTR_TYPE);\n }\n \n fn array_or_slice_type(p: &mut Parser) {\n@@ -163,7 +163,7 @@ fn reference_type(p: &mut Parser) {\n     p.eat(LIFETIME);\n     p.eat(T![mut]);\n     type_no_bounds(p);\n-    m.complete(p, REFERENCE_TYPE);\n+    m.complete(p, REF_TYPE);\n }\n \n // test placeholder_type\n@@ -172,7 +172,7 @@ fn placeholder_type(p: &mut Parser) {\n     assert!(p.at(T![_]));\n     let m = p.start();\n     p.bump(T![_]);\n-    m.complete(p, PLACEHOLDER_TYPE);\n+    m.complete(p, INFER_TYPE);\n }\n \n // test fn_pointer_type\n@@ -201,7 +201,7 @@ fn fn_pointer_type(p: &mut Parser) {\n     // test fn_pointer_type_with_ret\n     // type F = fn() -> ();\n     opt_fn_ret_type(p);\n-    m.complete(p, FN_POINTER_TYPE);\n+    m.complete(p, FN_PTR_TYPE);\n }\n \n pub(super) fn for_binder(p: &mut Parser) {"}, {"sha": "192ecd864e93ffda16ce7e8b0e324c5b0bf256e1", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,7 +1,7 @@\n //! Generated file, do not edit by hand, see `xtask/src/codegen`\n \n #![allow(bad_style, missing_docs, unreachable_pub)]\n-#[doc = r\" The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\"]\n+#[doc = r\" The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT`.\"]\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n #[repr(u16)]\n pub enum SyntaxKind {\n@@ -123,46 +123,46 @@ pub enum SyntaxKind {\n     L_DOLLAR,\n     R_DOLLAR,\n     SOURCE_FILE,\n-    STRUCT_DEF,\n-    UNION_DEF,\n-    ENUM_DEF,\n-    FN_DEF,\n+    STRUCT,\n+    UNION,\n+    ENUM,\n+    FN,\n     RET_TYPE,\n-    EXTERN_CRATE_ITEM,\n+    EXTERN_CRATE,\n     MODULE,\n-    USE_ITEM,\n-    STATIC_DEF,\n-    CONST_DEF,\n-    TRAIT_DEF,\n-    IMPL_DEF,\n-    TYPE_ALIAS_DEF,\n+    USE,\n+    STATIC,\n+    CONST,\n+    TRAIT,\n+    IMPL,\n+    TYPE_ALIAS,\n     MACRO_CALL,\n     TOKEN_TREE,\n     MACRO_DEF,\n     PAREN_TYPE,\n     TUPLE_TYPE,\n     NEVER_TYPE,\n     PATH_TYPE,\n-    POINTER_TYPE,\n+    PTR_TYPE,\n     ARRAY_TYPE,\n     SLICE_TYPE,\n-    REFERENCE_TYPE,\n-    PLACEHOLDER_TYPE,\n-    FN_POINTER_TYPE,\n+    REF_TYPE,\n+    INFER_TYPE,\n+    FN_PTR_TYPE,\n     FOR_TYPE,\n     IMPL_TRAIT_TYPE,\n     DYN_TRAIT_TYPE,\n     OR_PAT,\n     PAREN_PAT,\n     REF_PAT,\n     BOX_PAT,\n-    BIND_PAT,\n-    PLACEHOLDER_PAT,\n-    DOT_DOT_PAT,\n+    IDENT_PAT,\n+    WILDCARD_PAT,\n+    REST_PAT,\n     PATH_PAT,\n     RECORD_PAT,\n-    RECORD_FIELD_PAT_LIST,\n-    RECORD_FIELD_PAT,\n+    RECORD_PAT_FIELD_LIST,\n+    RECORD_PAT_FIELD,\n     TUPLE_STRUCT_PAT,\n     TUPLE_PAT,\n     SLICE_PAT,\n@@ -173,7 +173,7 @@ pub enum SyntaxKind {\n     ARRAY_EXPR,\n     PAREN_EXPR,\n     PATH_EXPR,\n-    LAMBDA_EXPR,\n+    CLOSURE_EXPR,\n     IF_EXPR,\n     WHILE_EXPR,\n     CONDITION,\n@@ -188,9 +188,9 @@ pub enum SyntaxKind {\n     MATCH_ARM_LIST,\n     MATCH_ARM,\n     MATCH_GUARD,\n-    RECORD_LIT,\n-    RECORD_FIELD_LIST,\n-    RECORD_FIELD,\n+    RECORD_EXPR,\n+    RECORD_EXPR_FIELD_LIST,\n+    RECORD_EXPR_FIELD,\n     EFFECT_EXPR,\n     BOX_EXPR,\n     CALL_EXPR,\n@@ -206,21 +206,22 @@ pub enum SyntaxKind {\n     BIN_EXPR,\n     EXTERN_BLOCK,\n     EXTERN_ITEM_LIST,\n-    ENUM_VARIANT,\n-    RECORD_FIELD_DEF_LIST,\n-    RECORD_FIELD_DEF,\n-    TUPLE_FIELD_DEF_LIST,\n-    TUPLE_FIELD_DEF,\n-    ENUM_VARIANT_LIST,\n+    VARIANT,\n+    RECORD_FIELD_LIST,\n+    RECORD_FIELD,\n+    TUPLE_FIELD_LIST,\n+    TUPLE_FIELD,\n+    VARIANT_LIST,\n     ITEM_LIST,\n+    ASSOC_ITEM_LIST,\n     ATTR,\n     META_ITEM,\n     USE_TREE,\n     USE_TREE_LIST,\n     PATH,\n     PATH_SEGMENT,\n     LITERAL,\n-    ALIAS,\n+    RENAME,\n     VISIBILITY,\n     WHERE_CLAUSE,\n     WHERE_PRED,\n@@ -229,11 +230,12 @@ pub enum SyntaxKind {\n     NAME_REF,\n     LET_STMT,\n     EXPR_STMT,\n-    TYPE_PARAM_LIST,\n+    GENERIC_PARAM_LIST,\n+    GENERIC_PARAM,\n     LIFETIME_PARAM,\n     TYPE_PARAM,\n     CONST_PARAM,\n-    TYPE_ARG_LIST,\n+    GENERIC_ARG_LIST,\n     LIFETIME_ARG,\n     TYPE_ARG,\n     ASSOC_TYPE_ARG,\n@@ -362,4 +364,4 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [ ; ] => { $ crate :: SyntaxKind :: SEMICOLON } ; [ , ] => { $ crate :: SyntaxKind :: COMMA } ; [ '(' ] => { $ crate :: SyntaxKind :: L_PAREN } ; [ ')' ] => { $ crate :: SyntaxKind :: R_PAREN } ; [ '{' ] => { $ crate :: SyntaxKind :: L_CURLY } ; [ '}' ] => { $ crate :: SyntaxKind :: R_CURLY } ; [ '[' ] => { $ crate :: SyntaxKind :: L_BRACK } ; [ ']' ] => { $ crate :: SyntaxKind :: R_BRACK } ; [ < ] => { $ crate :: SyntaxKind :: L_ANGLE } ; [ > ] => { $ crate :: SyntaxKind :: R_ANGLE } ; [ @ ] => { $ crate :: SyntaxKind :: AT } ; [ # ] => { $ crate :: SyntaxKind :: POUND } ; [ ~ ] => { $ crate :: SyntaxKind :: TILDE } ; [ ? ] => { $ crate :: SyntaxKind :: QUESTION } ; [ $ ] => { $ crate :: SyntaxKind :: DOLLAR } ; [ & ] => { $ crate :: SyntaxKind :: AMP } ; [ | ] => { $ crate :: SyntaxKind :: PIPE } ; [ + ] => { $ crate :: SyntaxKind :: PLUS } ; [ * ] => { $ crate :: SyntaxKind :: STAR } ; [ / ] => { $ crate :: SyntaxKind :: SLASH } ; [ ^ ] => { $ crate :: SyntaxKind :: CARET } ; [ % ] => { $ crate :: SyntaxKind :: PERCENT } ; [ _ ] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [ . ] => { $ crate :: SyntaxKind :: DOT } ; [ .. ] => { $ crate :: SyntaxKind :: DOT2 } ; [ ... ] => { $ crate :: SyntaxKind :: DOT3 } ; [ ..= ] => { $ crate :: SyntaxKind :: DOT2EQ } ; [ : ] => { $ crate :: SyntaxKind :: COLON } ; [ :: ] => { $ crate :: SyntaxKind :: COLON2 } ; [ = ] => { $ crate :: SyntaxKind :: EQ } ; [ == ] => { $ crate :: SyntaxKind :: EQ2 } ; [ => ] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [ ! ] => { $ crate :: SyntaxKind :: BANG } ; [ != ] => { $ crate :: SyntaxKind :: NEQ } ; [ - ] => { $ crate :: SyntaxKind :: MINUS } ; [ -> ] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [ <= ] => { $ crate :: SyntaxKind :: LTEQ } ; [ >= ] => { $ crate :: SyntaxKind :: GTEQ } ; [ += ] => { $ crate :: SyntaxKind :: PLUSEQ } ; [ -= ] => { $ crate :: SyntaxKind :: MINUSEQ } ; [ |= ] => { $ crate :: SyntaxKind :: PIPEEQ } ; [ &= ] => { $ crate :: SyntaxKind :: AMPEQ } ; [ ^= ] => { $ crate :: SyntaxKind :: CARETEQ } ; [ /= ] => { $ crate :: SyntaxKind :: SLASHEQ } ; [ *= ] => { $ crate :: SyntaxKind :: STAREQ } ; [ %= ] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [ && ] => { $ crate :: SyntaxKind :: AMP2 } ; [ || ] => { $ crate :: SyntaxKind :: PIPE2 } ; [ << ] => { $ crate :: SyntaxKind :: SHL } ; [ >> ] => { $ crate :: SyntaxKind :: SHR } ; [ <<= ] => { $ crate :: SyntaxKind :: SHLEQ } ; [ >>= ] => { $ crate :: SyntaxKind :: SHREQ } ; [ as ] => { $ crate :: SyntaxKind :: AS_KW } ; [ async ] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [ await ] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [ box ] => { $ crate :: SyntaxKind :: BOX_KW } ; [ break ] => { $ crate :: SyntaxKind :: BREAK_KW } ; [ const ] => { $ crate :: SyntaxKind :: CONST_KW } ; [ continue ] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [ crate ] => { $ crate :: SyntaxKind :: CRATE_KW } ; [ dyn ] => { $ crate :: SyntaxKind :: DYN_KW } ; [ else ] => { $ crate :: SyntaxKind :: ELSE_KW } ; [ enum ] => { $ crate :: SyntaxKind :: ENUM_KW } ; [ extern ] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [ false ] => { $ crate :: SyntaxKind :: FALSE_KW } ; [ fn ] => { $ crate :: SyntaxKind :: FN_KW } ; [ for ] => { $ crate :: SyntaxKind :: FOR_KW } ; [ if ] => { $ crate :: SyntaxKind :: IF_KW } ; [ impl ] => { $ crate :: SyntaxKind :: IMPL_KW } ; [ in ] => { $ crate :: SyntaxKind :: IN_KW } ; [ let ] => { $ crate :: SyntaxKind :: LET_KW } ; [ loop ] => { $ crate :: SyntaxKind :: LOOP_KW } ; [ macro ] => { $ crate :: SyntaxKind :: MACRO_KW } ; [ match ] => { $ crate :: SyntaxKind :: MATCH_KW } ; [ mod ] => { $ crate :: SyntaxKind :: MOD_KW } ; [ move ] => { $ crate :: SyntaxKind :: MOVE_KW } ; [ mut ] => { $ crate :: SyntaxKind :: MUT_KW } ; [ pub ] => { $ crate :: SyntaxKind :: PUB_KW } ; [ ref ] => { $ crate :: SyntaxKind :: REF_KW } ; [ return ] => { $ crate :: SyntaxKind :: RETURN_KW } ; [ self ] => { $ crate :: SyntaxKind :: SELF_KW } ; [ static ] => { $ crate :: SyntaxKind :: STATIC_KW } ; [ struct ] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [ super ] => { $ crate :: SyntaxKind :: SUPER_KW } ; [ trait ] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [ true ] => { $ crate :: SyntaxKind :: TRUE_KW } ; [ try ] => { $ crate :: SyntaxKind :: TRY_KW } ; [ type ] => { $ crate :: SyntaxKind :: TYPE_KW } ; [ unsafe ] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [ use ] => { $ crate :: SyntaxKind :: USE_KW } ; [ where ] => { $ crate :: SyntaxKind :: WHERE_KW } ; [ while ] => { $ crate :: SyntaxKind :: WHILE_KW } ; [ auto ] => { $ crate :: SyntaxKind :: AUTO_KW } ; [ default ] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [ existential ] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [ union ] => { $ crate :: SyntaxKind :: UNION_KW } ; [ raw ] => { $ crate :: SyntaxKind :: RAW_KW } ; [ lifetime ] => { $ crate :: SyntaxKind :: LIFETIME } ; [ ident ] => { $ crate :: SyntaxKind :: IDENT } ; }\n+macro_rules ! T { [ ; ] => { $ crate :: SyntaxKind :: SEMICOLON } ; [ , ] => { $ crate :: SyntaxKind :: COMMA } ; [ '(' ] => { $ crate :: SyntaxKind :: L_PAREN } ; [ ')' ] => { $ crate :: SyntaxKind :: R_PAREN } ; [ '{' ] => { $ crate :: SyntaxKind :: L_CURLY } ; [ '}' ] => { $ crate :: SyntaxKind :: R_CURLY } ; [ '[' ] => { $ crate :: SyntaxKind :: L_BRACK } ; [ ']' ] => { $ crate :: SyntaxKind :: R_BRACK } ; [ < ] => { $ crate :: SyntaxKind :: L_ANGLE } ; [ > ] => { $ crate :: SyntaxKind :: R_ANGLE } ; [ @ ] => { $ crate :: SyntaxKind :: AT } ; [ # ] => { $ crate :: SyntaxKind :: POUND } ; [ ~ ] => { $ crate :: SyntaxKind :: TILDE } ; [ ? ] => { $ crate :: SyntaxKind :: QUESTION } ; [ $ ] => { $ crate :: SyntaxKind :: DOLLAR } ; [ & ] => { $ crate :: SyntaxKind :: AMP } ; [ | ] => { $ crate :: SyntaxKind :: PIPE } ; [ + ] => { $ crate :: SyntaxKind :: PLUS } ; [ * ] => { $ crate :: SyntaxKind :: STAR } ; [ / ] => { $ crate :: SyntaxKind :: SLASH } ; [ ^ ] => { $ crate :: SyntaxKind :: CARET } ; [ % ] => { $ crate :: SyntaxKind :: PERCENT } ; [ _ ] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [ . ] => { $ crate :: SyntaxKind :: DOT } ; [ .. ] => { $ crate :: SyntaxKind :: DOT2 } ; [ ... ] => { $ crate :: SyntaxKind :: DOT3 } ; [ ..= ] => { $ crate :: SyntaxKind :: DOT2EQ } ; [ : ] => { $ crate :: SyntaxKind :: COLON } ; [ :: ] => { $ crate :: SyntaxKind :: COLON2 } ; [ = ] => { $ crate :: SyntaxKind :: EQ } ; [ == ] => { $ crate :: SyntaxKind :: EQ2 } ; [ => ] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [ ! ] => { $ crate :: SyntaxKind :: BANG } ; [ != ] => { $ crate :: SyntaxKind :: NEQ } ; [ - ] => { $ crate :: SyntaxKind :: MINUS } ; [ -> ] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [ <= ] => { $ crate :: SyntaxKind :: LTEQ } ; [ >= ] => { $ crate :: SyntaxKind :: GTEQ } ; [ += ] => { $ crate :: SyntaxKind :: PLUSEQ } ; [ -= ] => { $ crate :: SyntaxKind :: MINUSEQ } ; [ |= ] => { $ crate :: SyntaxKind :: PIPEEQ } ; [ &= ] => { $ crate :: SyntaxKind :: AMPEQ } ; [ ^= ] => { $ crate :: SyntaxKind :: CARETEQ } ; [ /= ] => { $ crate :: SyntaxKind :: SLASHEQ } ; [ *= ] => { $ crate :: SyntaxKind :: STAREQ } ; [ %= ] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [ && ] => { $ crate :: SyntaxKind :: AMP2 } ; [ || ] => { $ crate :: SyntaxKind :: PIPE2 } ; [ << ] => { $ crate :: SyntaxKind :: SHL } ; [ >> ] => { $ crate :: SyntaxKind :: SHR } ; [ <<= ] => { $ crate :: SyntaxKind :: SHLEQ } ; [ >>= ] => { $ crate :: SyntaxKind :: SHREQ } ; [ as ] => { $ crate :: SyntaxKind :: AS_KW } ; [ async ] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [ await ] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [ box ] => { $ crate :: SyntaxKind :: BOX_KW } ; [ break ] => { $ crate :: SyntaxKind :: BREAK_KW } ; [ const ] => { $ crate :: SyntaxKind :: CONST_KW } ; [ continue ] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [ crate ] => { $ crate :: SyntaxKind :: CRATE_KW } ; [ dyn ] => { $ crate :: SyntaxKind :: DYN_KW } ; [ else ] => { $ crate :: SyntaxKind :: ELSE_KW } ; [ enum ] => { $ crate :: SyntaxKind :: ENUM_KW } ; [ extern ] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [ false ] => { $ crate :: SyntaxKind :: FALSE_KW } ; [ fn ] => { $ crate :: SyntaxKind :: FN_KW } ; [ for ] => { $ crate :: SyntaxKind :: FOR_KW } ; [ if ] => { $ crate :: SyntaxKind :: IF_KW } ; [ impl ] => { $ crate :: SyntaxKind :: IMPL_KW } ; [ in ] => { $ crate :: SyntaxKind :: IN_KW } ; [ let ] => { $ crate :: SyntaxKind :: LET_KW } ; [ loop ] => { $ crate :: SyntaxKind :: LOOP_KW } ; [ macro ] => { $ crate :: SyntaxKind :: MACRO_KW } ; [ match ] => { $ crate :: SyntaxKind :: MATCH_KW } ; [ mod ] => { $ crate :: SyntaxKind :: MOD_KW } ; [ move ] => { $ crate :: SyntaxKind :: MOVE_KW } ; [ mut ] => { $ crate :: SyntaxKind :: MUT_KW } ; [ pub ] => { $ crate :: SyntaxKind :: PUB_KW } ; [ ref ] => { $ crate :: SyntaxKind :: REF_KW } ; [ return ] => { $ crate :: SyntaxKind :: RETURN_KW } ; [ self ] => { $ crate :: SyntaxKind :: SELF_KW } ; [ static ] => { $ crate :: SyntaxKind :: STATIC_KW } ; [ struct ] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [ super ] => { $ crate :: SyntaxKind :: SUPER_KW } ; [ trait ] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [ true ] => { $ crate :: SyntaxKind :: TRUE_KW } ; [ try ] => { $ crate :: SyntaxKind :: TRY_KW } ; [ type ] => { $ crate :: SyntaxKind :: TYPE_KW } ; [ unsafe ] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [ use ] => { $ crate :: SyntaxKind :: USE_KW } ; [ where ] => { $ crate :: SyntaxKind :: WHERE_KW } ; [ while ] => { $ crate :: SyntaxKind :: WHILE_KW } ; [ auto ] => { $ crate :: SyntaxKind :: AUTO_KW } ; [ default ] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [ existential ] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [ union ] => { $ crate :: SyntaxKind :: UNION_KW } ; [ raw ] => { $ crate :: SyntaxKind :: RAW_KW } ; [ lifetime ] => { $ crate :: SyntaxKind :: LIFETIME } ; [ ident ] => { $ crate :: SyntaxKind :: IDENT } ; [ shebang ] => { $ crate :: SyntaxKind :: SHEBANG } ; }"}, {"sha": "bc119a6c710227f23ece9cd3ae7c6709eebc83dd", "filename": "crates/ra_proc_macro_srv/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_proc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_proc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2FCargo.toml?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -19,7 +19,7 @@ memmap = \"0.7\"\n test_utils = { path = \"../test_utils\" }\n \n [dev-dependencies]\n-cargo_metadata = \"0.10.0\"\n+cargo_metadata = \"0.11.1\"\n difference = \"2.0.0\"\n # used as proc macro test target\n serde_derive = \"1.0.106\""}, {"sha": "c82b9f76d4817873319ec5098738802e405d2c69", "filename": "crates/ra_prof/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_prof%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_prof%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2FCargo.toml?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -16,6 +16,9 @@ backtrace = { version = \"0.3.44\", optional = true }\n cfg-if = \"0.1.10\"\n libc = \"0.2.73\"\n \n+[target.'cfg(target_os = \"linux\")'.dependencies]\n+perf-event = \"0.4\"\n+\n [features]\n cpu_profiler = []\n "}, {"sha": "eb50965ae6f07e7ad032ed4696699f8f02697d6a", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,6 @@\n //! A collection of tools for profiling rust-analyzer.\n \n+mod stop_watch;\n mod memory_usage;\n #[cfg(feature = \"cpu_profiler\")]\n mod google_cpu_profiler;\n@@ -11,6 +12,7 @@ use std::cell::RefCell;\n pub use crate::{\n     hprof::{init, init_from, profile},\n     memory_usage::{Bytes, MemoryUsage},\n+    stop_watch::{StopWatch, StopWatchSpan},\n };\n \n /// Prints backtrace to stderr, useful for debugging."}, {"sha": "c2ecbd33cf4103b8acc8909b99ddc8b6ecdbdc76", "filename": "crates/ra_prof/src/memory_usage.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -3,36 +3,43 @@ use std::fmt;\n \n use cfg_if::cfg_if;\n \n+#[derive(Copy, Clone)]\n pub struct MemoryUsage {\n     pub allocated: Bytes,\n-    pub resident: Bytes,\n+}\n+\n+impl fmt::Display for MemoryUsage {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{}\", self.allocated)\n+    }\n+}\n+\n+impl std::ops::Sub for MemoryUsage {\n+    type Output = MemoryUsage;\n+    fn sub(self, rhs: MemoryUsage) -> MemoryUsage {\n+        MemoryUsage { allocated: self.allocated - rhs.allocated }\n+    }\n }\n \n impl MemoryUsage {\n     pub fn current() -> MemoryUsage {\n         cfg_if! {\n             if #[cfg(target_os = \"linux\")] {\n                 // Note: This is incredibly slow.\n-                let alloc = unsafe { libc::mallinfo() }.uordblks as u32 as usize;\n-                MemoryUsage { allocated: Bytes(alloc), resident: Bytes(0) }\n+                let alloc = unsafe { libc::mallinfo() }.uordblks as isize;\n+                MemoryUsage { allocated: Bytes(alloc) }\n             } else {\n-                MemoryUsage { allocated: Bytes(0), resident: Bytes(0) }\n+                MemoryUsage { allocated: Bytes(0) }\n             }\n         }\n     }\n }\n \n-impl fmt::Display for MemoryUsage {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{} allocated {} resident\", self.allocated, self.resident,)\n-    }\n-}\n-\n #[derive(Default, PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]\n-pub struct Bytes(usize);\n+pub struct Bytes(isize);\n \n impl Bytes {\n-    pub fn megabytes(self) -> usize {\n+    pub fn megabytes(self) -> isize {\n         self.0 / 1024 / 1024\n     }\n }\n@@ -42,10 +49,10 @@ impl fmt::Display for Bytes {\n         let bytes = self.0;\n         let mut value = bytes;\n         let mut suffix = \"b\";\n-        if value > 4096 {\n+        if value.abs() > 4096 {\n             value /= 1024;\n             suffix = \"kb\";\n-            if value > 4096 {\n+            if value.abs() > 4096 {\n                 value /= 1024;\n                 suffix = \"mb\";\n             }\n@@ -56,7 +63,7 @@ impl fmt::Display for Bytes {\n \n impl std::ops::AddAssign<usize> for Bytes {\n     fn add_assign(&mut self, x: usize) {\n-        self.0 += x;\n+        self.0 += x as isize;\n     }\n }\n "}, {"sha": "5e276190e5c0ace0b6a087977f917fdcc0657d67", "filename": "crates/ra_prof/src/stop_watch.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_prof%2Fsrc%2Fstop_watch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_prof%2Fsrc%2Fstop_watch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fstop_watch.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -0,0 +1,86 @@\n+//! Like `std::time::Instant`, but also measures memory & CPU cycles.\n+use std::{\n+    fmt,\n+    time::{Duration, Instant},\n+};\n+\n+use crate::MemoryUsage;\n+\n+pub struct StopWatch {\n+    time: Instant,\n+    #[cfg(target_os = \"linux\")]\n+    counter: Option<perf_event::Counter>,\n+    memory: Option<MemoryUsage>,\n+}\n+\n+pub struct StopWatchSpan {\n+    pub time: Duration,\n+    pub instructions: Option<u64>,\n+    pub memory: Option<MemoryUsage>,\n+}\n+\n+impl StopWatch {\n+    pub fn start() -> StopWatch {\n+        #[cfg(target_os = \"linux\")]\n+        let counter = {\n+            let mut counter = perf_event::Builder::new()\n+                .build()\n+                .map_err(|err| eprintln!(\"Failed to create perf counter: {}\", err))\n+                .ok();\n+            if let Some(counter) = &mut counter {\n+                if let Err(err) = counter.enable() {\n+                    eprintln!(\"Failed to start perf counter: {}\", err)\n+                }\n+            }\n+            counter\n+        };\n+        let time = Instant::now();\n+        StopWatch {\n+            time,\n+            #[cfg(target_os = \"linux\")]\n+            counter,\n+            memory: None,\n+        }\n+    }\n+    pub fn memory(mut self, yes: bool) -> StopWatch {\n+        if yes {\n+            self.memory = Some(MemoryUsage::current());\n+        }\n+        self\n+    }\n+    pub fn elapsed(&mut self) -> StopWatchSpan {\n+        let time = self.time.elapsed();\n+\n+        #[cfg(target_os = \"linux\")]\n+        let instructions = self.counter.as_mut().and_then(|it| {\n+            it.read().map_err(|err| eprintln!(\"Failed to read perf counter: {}\", err)).ok()\n+        });\n+        #[cfg(not(target_os = \"linux\"))]\n+        let instructions = None;\n+\n+        let memory = self.memory.map(|it| MemoryUsage::current() - it);\n+        StopWatchSpan { time, instructions, memory }\n+    }\n+}\n+\n+impl fmt::Display for StopWatchSpan {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:.2?}\", self.time)?;\n+        if let Some(mut instructions) = self.instructions {\n+            let mut prefix = \"\";\n+            if instructions > 10000 {\n+                instructions /= 1000;\n+                prefix = \"k\"\n+            }\n+            if instructions > 10000 {\n+                instructions /= 1000;\n+                prefix = \"m\"\n+            }\n+            write!(f, \", {}{}i\", instructions, prefix)?;\n+        }\n+        if let Some(memory) = self.memory {\n+            write!(f, \", {}\", memory)?;\n+        }\n+        Ok(())\n+    }\n+}"}, {"sha": "99adea8e44b25c7dbc6e5f79607257bd2c5457f4", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -12,7 +12,7 @@ doctest = false\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n \n-cargo_metadata = \"0.10.0\"\n+cargo_metadata = \"0.11.1\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_cfg = { path = \"../ra_cfg\" }"}, {"sha": "10513542e262d3b4c0d549463fa9c07fcdcddcf2", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -144,12 +144,15 @@ impl CargoWorkspace {\n         meta.manifest_path(cargo_toml.to_path_buf());\n         if cargo_features.all_features {\n             meta.features(CargoOpt::AllFeatures);\n-        } else if cargo_features.no_default_features {\n-            // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n-            // https://github.com/oli-obk/cargo_metadata/issues/79\n-            meta.features(CargoOpt::NoDefaultFeatures);\n-        } else if !cargo_features.features.is_empty() {\n-            meta.features(CargoOpt::SomeFeatures(cargo_features.features.clone()));\n+        } else {\n+            if cargo_features.no_default_features {\n+                // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n+                // https://github.com/oli-obk/cargo_metadata/issues/79\n+                meta.features(CargoOpt::NoDefaultFeatures);\n+            }\n+            if !cargo_features.features.is_empty() {\n+                meta.features(CargoOpt::SomeFeatures(cargo_features.features.clone()));\n+            }\n         }\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent.to_path_buf());\n@@ -289,12 +292,16 @@ pub fn load_extern_resources(\n     cmd.args(&[\"check\", \"--message-format=json\", \"--manifest-path\"]).arg(cargo_toml);\n     if cargo_features.all_features {\n         cmd.arg(\"--all-features\");\n-    } else if cargo_features.no_default_features {\n-        // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n-        // https://github.com/oli-obk/cargo_metadata/issues/79\n-        cmd.arg(\"--no-default-features\");\n     } else {\n-        cmd.args(&cargo_features.features);\n+        if cargo_features.no_default_features {\n+            // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n+            // https://github.com/oli-obk/cargo_metadata/issues/79\n+            cmd.arg(\"--no-default-features\");\n+        }\n+        if !cargo_features.features.is_empty() {\n+            cmd.arg(\"--features\");\n+            cmd.arg(cargo_features.features.join(\" \"));\n+        }\n     }\n \n     let output = cmd.output()?;"}, {"sha": "bd50056c689f8fd95dcf2a8a37d7c7bd0a1bd048", "filename": "crates/ra_project_model/src/cfg_flag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_project_model%2Fsrc%2Fcfg_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_project_model%2Fsrc%2Fcfg_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcfg_flag.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -4,7 +4,7 @@\n use std::str::FromStr;\n \n use ra_cfg::CfgOptions;\n-use stdx::split_delim;\n+use stdx::split_once;\n \n #[derive(Clone, Eq, PartialEq, Debug)]\n pub enum CfgFlag {\n@@ -15,7 +15,7 @@ pub enum CfgFlag {\n impl FromStr for CfgFlag {\n     type Err = String;\n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        let res = match split_delim(s, '=') {\n+        let res = match split_once(s, '=') {\n             Some((key, value)) => {\n                 if !(value.starts_with('\"') && value.ends_with('\"')) {\n                     return Err(format!(\"Invalid cfg ({:?}), value should be in quotes\", s));"}, {"sha": "a10ade3757aff5b4f6095b64d5bc4982ba513734", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 51, "deletions": 39, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -54,13 +54,24 @@ impl Sysroot {\n         let src = get_or_install_rust_src(cargo_toml)?;\n         let mut sysroot = Sysroot { crates: Arena::default() };\n         for name in SYSROOT_CRATES.trim().lines() {\n+            // FIXME: remove this path when 1.47 comes out\n+            // https://github.com/rust-lang/rust/pull/73265\n             let root = src.join(format!(\"lib{}\", name)).join(\"lib.rs\");\n             if root.exists() {\n                 sysroot.crates.alloc(SysrootCrateData {\n                     name: name.into(),\n                     root,\n                     deps: Vec::new(),\n                 });\n+            } else {\n+                let root = src.join(name).join(\"src/lib.rs\");\n+                if root.exists() {\n+                    sysroot.crates.alloc(SysrootCrateData {\n+                        name: name.into(),\n+                        root,\n+                        deps: Vec::new(),\n+                    });\n+                }\n             }\n         }\n         if let Some(std) = sysroot.std() {\n@@ -94,23 +105,38 @@ fn get_or_install_rust_src(cargo_toml: &AbsPath) -> Result<AbsPathBuf> {\n     rustc.current_dir(current_dir).args(&[\"--print\", \"sysroot\"]);\n     let stdout = utf8_stdout(rustc)?;\n     let sysroot_path = AbsPath::assert(Path::new(stdout.trim()));\n-    let src_path = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n-\n-    if !src_path.exists() {\n+    let mut src = get_rust_src(sysroot_path);\n+    if src.is_none() {\n         let mut rustup = Command::new(ra_toolchain::rustup());\n         rustup.current_dir(current_dir).args(&[\"component\", \"add\", \"rust-src\"]);\n         utf8_stdout(rustup)?;\n+        src = get_rust_src(sysroot_path);\n     }\n-    if !src_path.exists() {\n-        bail!(\n+    match src {\n+        Some(r) => Ok(r),\n+        None => bail!(\n             \"can't load standard library from sysroot\\n\\\n             {}\\n\\\n             (discovered via `rustc --print sysroot`)\\n\\\n             try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n-            src_path.display(),\n-        )\n+            sysroot_path.display(),\n+        ),\n+    }\n+}\n+\n+fn get_rust_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n+    // try the new path first since the old one still exists\n+    let mut src_path = sysroot_path.join(\"lib/rustlib/src/rust/library\");\n+    if !src_path.exists() {\n+        // FIXME: remove this path when 1.47 comes out\n+        // https://github.com/rust-lang/rust/pull/73265\n+        src_path = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n+    }\n+    if src_path.exists() {\n+        Some(src_path)\n+    } else {\n+        None\n     }\n-    Ok(src_path)\n }\n \n impl SysrootCrateData {\n@@ -120,42 +146,28 @@ impl SysrootCrateData {\n }\n \n const SYSROOT_CRATES: &str = \"\n-std\n-core\n alloc\n-collections\n-libc\n-proc_macro\n-rustc_unicode\n-std_unicode\n-test\n-alloc_jemalloc\n-alloc_system\n-compiler_builtins\n-getopts\n-panic_unwind\n+core\n panic_abort\n-rand\n+panic_unwind\n+proc_macro\n+profiler_builtins\n+rtstartup\n+std\n+stdarch\n term\n-unwind\n-build_helper\n-rustc_asan\n-rustc_lsan\n-rustc_msan\n-rustc_tsan\n-syntax\";\n+test\n+unwind\";\n \n const STD_DEPS: &str = \"\n alloc\n-alloc_jemalloc\n-alloc_system\n core\n panic_abort\n-rand\n-compiler_builtins\n-unwind\n-rustc_asan\n-rustc_lsan\n-rustc_msan\n-rustc_tsan\n-build_helper\";\n+panic_unwind\n+profiler_builtins\n+rtstartup\n+proc_macro\n+stdarch\n+term\n+test\n+unwind\";"}, {"sha": "c780b460a72ffffe7c006392f79ff80d331cca49", "filename": "crates/ra_ssr/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Flib.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -52,6 +52,7 @@ pub struct MatchFinder<'db> {\n     sema: Semantics<'db, ra_ide_db::RootDatabase>,\n     rules: Vec<ResolvedRule>,\n     resolution_scope: resolving::ResolutionScope<'db>,\n+    restrict_ranges: Vec<FileRange>,\n }\n \n impl<'db> MatchFinder<'db> {\n@@ -60,10 +61,12 @@ impl<'db> MatchFinder<'db> {\n     pub fn in_context(\n         db: &'db ra_ide_db::RootDatabase,\n         lookup_context: FilePosition,\n+        mut restrict_ranges: Vec<FileRange>,\n     ) -> MatchFinder<'db> {\n+        restrict_ranges.retain(|range| !range.range.is_empty());\n         let sema = Semantics::new(db);\n         let resolution_scope = resolving::ResolutionScope::new(&sema, lookup_context);\n-        MatchFinder { sema: Semantics::new(db), rules: Vec::new(), resolution_scope }\n+        MatchFinder { sema, rules: Vec::new(), resolution_scope, restrict_ranges }\n     }\n \n     /// Constructs an instance using the start of the first file in `db` as the lookup context.\n@@ -79,6 +82,7 @@ impl<'db> MatchFinder<'db> {\n             Ok(MatchFinder::in_context(\n                 db,\n                 FilePosition { file_id: first_file_id, offset: 0.into() },\n+                vec![],\n             ))\n         } else {\n             bail!(\"No files to search\");"}, {"sha": "0f72fea69113b8dd576438993f2404975fa94884", "filename": "crates/ra_ssr/src/matching.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fmatching.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -209,7 +209,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         // Some kinds of nodes have special handling. For everything else, we fall back to default\n         // matching.\n         match code.kind() {\n-            SyntaxKind::RECORD_FIELD_LIST => {\n+            SyntaxKind::RECORD_EXPR_FIELD_LIST => {\n                 self.attempt_match_record_field_list(phase, pattern, code)\n             }\n             SyntaxKind::TOKEN_TREE => self.attempt_match_token_tree(phase, pattern, code),\n@@ -348,8 +348,8 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n                 // separately via comparing what the path resolves to below.\n                 self.attempt_match_opt(\n                     phase,\n-                    pattern_segment.type_arg_list(),\n-                    code_segment.type_arg_list(),\n+                    pattern_segment.generic_arg_list(),\n+                    code_segment.generic_arg_list(),\n                 )?;\n                 self.attempt_match_opt(\n                     phase,\n@@ -399,7 +399,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         // Build a map keyed by field name.\n         let mut fields_by_name = FxHashMap::default();\n         for child in code.children() {\n-            if let Some(record) = ast::RecordField::cast(child.clone()) {\n+            if let Some(record) = ast::RecordExprField::cast(child.clone()) {\n                 if let Some(name) = record.field_name() {\n                     fields_by_name.insert(name.text().clone(), child.clone());\n                 }\n@@ -706,8 +706,8 @@ mod tests {\n         let rule: SsrRule = \"foo($x) ==>> bar($x)\".parse().unwrap();\n         let input = \"fn foo() {} fn bar() {} fn main() { foo(1+2); }\";\n \n-        let (db, position) = crate::tests::single_file(input);\n-        let mut match_finder = MatchFinder::in_context(&db, position);\n+        let (db, position, selections) = crate::tests::single_file(input);\n+        let mut match_finder = MatchFinder::in_context(&db, position, selections);\n         match_finder.add_rule(rule).unwrap();\n         let matches = match_finder.matches();\n         assert_eq!(matches.matches.len(), 1);"}, {"sha": "f455eb5b7e58d79617f2780e58ef069ef4ef02b0", "filename": "crates/ra_ssr/src/parsing.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fparsing.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -10,6 +10,7 @@ use crate::{SsrError, SsrPattern, SsrRule};\n use ra_syntax::{ast, AstNode, SmolStr, SyntaxKind, SyntaxNode, T};\n use rustc_hash::{FxHashMap, FxHashSet};\n use std::str::FromStr;\n+use test_utils::mark;\n \n #[derive(Debug)]\n pub(crate) struct ParsedRule {\n@@ -69,11 +70,8 @@ impl ParsedRule {\n             rules: Vec::new(),\n         };\n         builder.try_add(ast::Expr::parse(&raw_pattern), raw_template.map(ast::Expr::parse));\n-        builder.try_add(ast::TypeRef::parse(&raw_pattern), raw_template.map(ast::TypeRef::parse));\n-        builder.try_add(\n-            ast::ModuleItem::parse(&raw_pattern),\n-            raw_template.map(ast::ModuleItem::parse),\n-        );\n+        builder.try_add(ast::Type::parse(&raw_pattern), raw_template.map(ast::Type::parse));\n+        builder.try_add(ast::Item::parse(&raw_pattern), raw_template.map(ast::Item::parse));\n         builder.try_add(ast::Path::parse(&raw_pattern), raw_template.map(ast::Path::parse));\n         builder.try_add(ast::Pat::parse(&raw_pattern), raw_template.map(ast::Pat::parse));\n         builder.build()\n@@ -102,14 +100,35 @@ impl RuleBuilder {\n         }\n     }\n \n-    fn build(self) -> Result<Vec<ParsedRule>, SsrError> {\n+    fn build(mut self) -> Result<Vec<ParsedRule>, SsrError> {\n         if self.rules.is_empty() {\n             bail!(\"Not a valid Rust expression, type, item, path or pattern\");\n         }\n+        // If any rules contain paths, then we reject any rules that don't contain paths. Allowing a\n+        // mix leads to strange semantics, since the path-based rules only match things where the\n+        // path refers to semantically the same thing, whereas the non-path-based rules could match\n+        // anything. Specifically, if we have a rule like `foo ==>> bar` we only want to match the\n+        // `foo` that is in the current scope, not any `foo`. However \"foo\" can be parsed as a\n+        // pattern (IDENT_PAT -> NAME -> IDENT). Allowing such a rule through would result in\n+        // renaming everything called `foo` to `bar`. It'd also be slow, since without a path, we'd\n+        // have to use the slow-scan search mechanism.\n+        if self.rules.iter().any(|rule| contains_path(&rule.pattern)) {\n+            let old_len = self.rules.len();\n+            self.rules.retain(|rule| contains_path(&rule.pattern));\n+            if self.rules.len() < old_len {\n+                mark::hit!(pattern_is_a_single_segment_path);\n+            }\n+        }\n         Ok(self.rules)\n     }\n }\n \n+/// Returns whether there are any paths in `node`.\n+fn contains_path(node: &SyntaxNode) -> bool {\n+    node.kind() == SyntaxKind::PATH\n+        || node.descendants().any(|node| node.kind() == SyntaxKind::PATH)\n+}\n+\n impl FromStr for SsrRule {\n     type Err = SsrError;\n "}, {"sha": "0943244ff9f2a909c2fc37c0cfd396f03fcc80ca", "filename": "crates/ra_ssr/src/replacing.rs", "status": "modified", "additions": 88, "deletions": 18, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Freplacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Freplacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Freplacing.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -3,8 +3,9 @@\n use crate::matching::Var;\n use crate::{resolving::ResolvedRule, Match, SsrMatches};\n use ra_syntax::ast::{self, AstToken};\n-use ra_syntax::{SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextSize};\n+use ra_syntax::{SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, TextSize};\n use ra_text_edit::TextEdit;\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n /// Returns a text edit that will replace each match in `matches` with its corresponding replacement\n /// template. Placeholders in the template will have been substituted with whatever they matched to\n@@ -38,62 +39,79 @@ struct ReplacementRenderer<'a> {\n     file_src: &'a str,\n     rules: &'a [ResolvedRule],\n     rule: &'a ResolvedRule,\n+    out: String,\n+    // Map from a range within `out` to a token in `template` that represents a placeholder. This is\n+    // used to validate that the generated source code doesn't split any placeholder expansions (see\n+    // below).\n+    placeholder_tokens_by_range: FxHashMap<TextRange, SyntaxToken>,\n+    // Which placeholder tokens need to be wrapped in parenthesis in order to ensure that when `out`\n+    // is parsed, placeholders don't get split. e.g. if a template of `$a.to_string()` results in `1\n+    // + 2.to_string()` then the placeholder value `1 + 2` was split and needs parenthesis.\n+    placeholder_tokens_requiring_parenthesis: FxHashSet<SyntaxToken>,\n }\n \n fn render_replace(match_info: &Match, file_src: &str, rules: &[ResolvedRule]) -> String {\n-    let mut out = String::new();\n     let rule = &rules[match_info.rule_index];\n     let template = rule\n         .template\n         .as_ref()\n         .expect(\"You called MatchFinder::edits after calling MatchFinder::add_search_pattern\");\n-    let renderer = ReplacementRenderer { match_info, file_src, rules, rule };\n-    renderer.render_node(&template.node, &mut out);\n+    let mut renderer = ReplacementRenderer {\n+        match_info,\n+        file_src,\n+        rules,\n+        rule,\n+        out: String::new(),\n+        placeholder_tokens_requiring_parenthesis: FxHashSet::default(),\n+        placeholder_tokens_by_range: FxHashMap::default(),\n+    };\n+    renderer.render_node(&template.node);\n+    renderer.maybe_rerender_with_extra_parenthesis(&template.node);\n     for comment in &match_info.ignored_comments {\n-        out.push_str(&comment.syntax().to_string());\n+        renderer.out.push_str(&comment.syntax().to_string());\n     }\n-    out\n+    renderer.out\n }\n \n impl ReplacementRenderer<'_> {\n-    fn render_node_children(&self, node: &SyntaxNode, out: &mut String) {\n+    fn render_node_children(&mut self, node: &SyntaxNode) {\n         for node_or_token in node.children_with_tokens() {\n-            self.render_node_or_token(&node_or_token, out);\n+            self.render_node_or_token(&node_or_token);\n         }\n     }\n \n-    fn render_node_or_token(&self, node_or_token: &SyntaxElement, out: &mut String) {\n+    fn render_node_or_token(&mut self, node_or_token: &SyntaxElement) {\n         match node_or_token {\n             SyntaxElement::Token(token) => {\n-                self.render_token(&token, out);\n+                self.render_token(&token);\n             }\n             SyntaxElement::Node(child_node) => {\n-                self.render_node(&child_node, out);\n+                self.render_node(&child_node);\n             }\n         }\n     }\n \n-    fn render_node(&self, node: &SyntaxNode, out: &mut String) {\n+    fn render_node(&mut self, node: &SyntaxNode) {\n         use ra_syntax::ast::AstNode;\n         if let Some(mod_path) = self.match_info.rendered_template_paths.get(&node) {\n-            out.push_str(&mod_path.to_string());\n+            self.out.push_str(&mod_path.to_string());\n             // Emit everything except for the segment's name-ref, since we already effectively\n             // emitted that as part of `mod_path`.\n             if let Some(path) = ast::Path::cast(node.clone()) {\n                 if let Some(segment) = path.segment() {\n                     for node_or_token in segment.syntax().children_with_tokens() {\n                         if node_or_token.kind() != SyntaxKind::NAME_REF {\n-                            self.render_node_or_token(&node_or_token, out);\n+                            self.render_node_or_token(&node_or_token);\n                         }\n                     }\n                 }\n             }\n         } else {\n-            self.render_node_children(&node, out);\n+            self.render_node_children(&node);\n         }\n     }\n \n-    fn render_token(&self, token: &SyntaxToken, out: &mut String) {\n+    fn render_token(&mut self, token: &SyntaxToken) {\n         if let Some(placeholder) = self.rule.get_placeholder(&token) {\n             if let Some(placeholder_value) =\n                 self.match_info.placeholder_values.get(&Var(placeholder.ident.to_string()))\n@@ -107,8 +125,23 @@ impl ReplacementRenderer<'_> {\n                     range.start(),\n                     self.rules,\n                 );\n+                let needs_parenthesis =\n+                    self.placeholder_tokens_requiring_parenthesis.contains(token);\n                 edit.apply(&mut matched_text);\n-                out.push_str(&matched_text);\n+                if needs_parenthesis {\n+                    self.out.push('(');\n+                }\n+                self.placeholder_tokens_by_range.insert(\n+                    TextRange::new(\n+                        TextSize::of(&self.out),\n+                        TextSize::of(&self.out) + TextSize::of(&matched_text),\n+                    ),\n+                    token.clone(),\n+                );\n+                self.out.push_str(&matched_text);\n+                if needs_parenthesis {\n+                    self.out.push(')');\n+                }\n             } else {\n                 // We validated that all placeholder references were valid before we\n                 // started, so this shouldn't happen.\n@@ -118,7 +151,44 @@ impl ReplacementRenderer<'_> {\n                 );\n             }\n         } else {\n-            out.push_str(token.text().as_str());\n+            self.out.push_str(token.text().as_str());\n+        }\n+    }\n+\n+    // Checks if the resulting code, when parsed doesn't split any placeholders due to different\n+    // order of operations between the search pattern and the replacement template. If any do, then\n+    // we rerender the template and wrap the problematic placeholders with parenthesis.\n+    fn maybe_rerender_with_extra_parenthesis(&mut self, template: &SyntaxNode) {\n+        if let Some(node) = parse_as_kind(&self.out, template.kind()) {\n+            self.remove_node_ranges(node);\n+            if self.placeholder_tokens_by_range.is_empty() {\n+                return;\n+            }\n+            self.placeholder_tokens_requiring_parenthesis =\n+                self.placeholder_tokens_by_range.values().cloned().collect();\n+            self.out.clear();\n+            self.render_node(template);\n+        }\n+    }\n+\n+    fn remove_node_ranges(&mut self, node: SyntaxNode) {\n+        self.placeholder_tokens_by_range.remove(&node.text_range());\n+        for child in node.children() {\n+            self.remove_node_ranges(child);\n+        }\n+    }\n+}\n+\n+fn parse_as_kind(code: &str, kind: SyntaxKind) -> Option<SyntaxNode> {\n+    use ra_syntax::ast::AstNode;\n+    if ast::Expr::can_cast(kind) {\n+        if let Ok(expr) = ast::Expr::parse(code) {\n+            return Some(expr.syntax().clone());\n+        }\n+    } else if ast::Item::can_cast(kind) {\n+        if let Ok(item) = ast::Item::parse(code) {\n+            return Some(item.syntax().clone());\n         }\n     }\n+    None\n }"}, {"sha": "df60048eb2e6e0a41acb8cee0d83fd42aad47d55", "filename": "crates/ra_ssr/src/resolving.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fresolving.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -11,6 +11,7 @@ use test_utils::mark;\n pub(crate) struct ResolutionScope<'db> {\n     scope: hir::SemanticsScope<'db>,\n     hygiene: hir::Hygiene,\n+    node: SyntaxNode,\n }\n \n pub(crate) struct ResolvedRule {\n@@ -25,6 +26,7 @@ pub(crate) struct ResolvedPattern {\n     // Paths in `node` that we've resolved.\n     pub(crate) resolved_paths: FxHashMap<SyntaxNode, ResolvedPath>,\n     pub(crate) ufcs_function_calls: FxHashMap<SyntaxNode, hir::Function>,\n+    pub(crate) contains_self: bool,\n }\n \n pub(crate) struct ResolvedPath {\n@@ -68,6 +70,7 @@ struct Resolver<'a, 'db> {\n \n impl Resolver<'_, '_> {\n     fn resolve_pattern_tree(&self, pattern: SyntaxNode) -> Result<ResolvedPattern, SsrError> {\n+        use ra_syntax::{SyntaxElement, T};\n         let mut resolved_paths = FxHashMap::default();\n         self.resolve(pattern.clone(), 0, &mut resolved_paths)?;\n         let ufcs_function_calls = resolved_paths\n@@ -85,11 +88,17 @@ impl Resolver<'_, '_> {\n                 None\n             })\n             .collect();\n+        let contains_self =\n+            pattern.descendants_with_tokens().any(|node_or_token| match node_or_token {\n+                SyntaxElement::Token(t) => t.kind() == T![self],\n+                _ => false,\n+            });\n         Ok(ResolvedPattern {\n             node: pattern,\n             resolved_paths,\n             placeholders_by_stand_in: self.placeholders_by_stand_in.clone(),\n             ufcs_function_calls,\n+            contains_self,\n         })\n     }\n \n@@ -101,6 +110,10 @@ impl Resolver<'_, '_> {\n     ) -> Result<(), SsrError> {\n         use ra_syntax::ast::AstNode;\n         if let Some(path) = ast::Path::cast(node.clone()) {\n+            if is_self(&path) {\n+                // Self cannot be resolved like other paths.\n+                return Ok(());\n+            }\n             // Check if this is an appropriate place in the path to resolve. If the path is\n             // something like `a::B::<i32>::c` then we want to resolve `a::B`. If the path contains\n             // a placeholder. e.g. `a::$b::c` then we want to resolve `a`.\n@@ -141,25 +154,31 @@ impl Resolver<'_, '_> {\n impl<'db> ResolutionScope<'db> {\n     pub(crate) fn new(\n         sema: &hir::Semantics<'db, ra_ide_db::RootDatabase>,\n-        lookup_context: FilePosition,\n+        resolve_context: FilePosition,\n     ) -> ResolutionScope<'db> {\n         use ra_syntax::ast::AstNode;\n-        let file = sema.parse(lookup_context.file_id);\n+        let file = sema.parse(resolve_context.file_id);\n         // Find a node at the requested position, falling back to the whole file.\n         let node = file\n             .syntax()\n-            .token_at_offset(lookup_context.offset)\n+            .token_at_offset(resolve_context.offset)\n             .left_biased()\n             .map(|token| token.parent())\n             .unwrap_or_else(|| file.syntax().clone());\n         let node = pick_node_for_resolution(node);\n         let scope = sema.scope(&node);\n         ResolutionScope {\n             scope,\n-            hygiene: hir::Hygiene::new(sema.db, lookup_context.file_id.into()),\n+            hygiene: hir::Hygiene::new(sema.db, resolve_context.file_id.into()),\n+            node,\n         }\n     }\n \n+    /// Returns the function in which SSR was invoked, if any.\n+    pub(crate) fn current_function(&self) -> Option<SyntaxNode> {\n+        self.node.ancestors().find(|node| node.kind() == SyntaxKind::FN).map(|node| node.clone())\n+    }\n+\n     fn resolve_path(&self, path: &ast::Path) -> Option<hir::PathResolution> {\n         let hir_path = hir::Path::from_src(path.clone(), &self.hygiene)?;\n         // First try resolving the whole path. This will work for things like\n@@ -186,6 +205,10 @@ impl<'db> ResolutionScope<'db> {\n     }\n }\n \n+fn is_self(path: &ast::Path) -> bool {\n+    path.segment().map(|segment| segment.self_token().is_some()).unwrap_or(false)\n+}\n+\n /// Returns a suitable node for resolving paths in the current scope. If we create a scope based on\n /// a statement node, then we can't resolve local variables that were defined in the current scope\n /// (only in parent scopes). So we find another node, ideally a child of the statement where local\n@@ -198,7 +221,7 @@ fn pick_node_for_resolution(node: SyntaxNode) -> SyntaxNode {\n                 return n;\n             }\n         }\n-        SyntaxKind::LET_STMT | SyntaxKind::BIND_PAT => {\n+        SyntaxKind::LET_STMT | SyntaxKind::IDENT_PAT => {\n             if let Some(next) = node.next_sibling() {\n                 return pick_node_for_resolution(next);\n             }\n@@ -217,7 +240,7 @@ fn pick_node_for_resolution(node: SyntaxNode) -> SyntaxNode {\n fn path_contains_type_arguments(path: Option<ast::Path>) -> bool {\n     if let Some(path) = path {\n         if let Some(segment) = path.segment() {\n-            if segment.type_arg_list().is_some() {\n+            if segment.generic_arg_list().is_some() {\n                 mark::hit!(type_arguments_within_path);\n                 return true;\n             }"}, {"sha": "85ffa2ac23fc101b311b19c5d8ea86ce61f698fb", "filename": "crates/ra_ssr/src/search.rs", "status": "modified", "additions": 74, "deletions": 24, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fsearch.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -5,12 +5,13 @@ use crate::{\n     resolving::{ResolvedPath, ResolvedPattern, ResolvedRule},\n     Match, MatchFinder,\n };\n-use ra_db::FileRange;\n+use ra_db::{FileId, FileRange};\n use ra_ide_db::{\n     defs::Definition,\n     search::{Reference, SearchScope},\n };\n use ra_syntax::{ast, AstNode, SyntaxKind, SyntaxNode};\n+use rustc_hash::FxHashSet;\n use test_utils::mark;\n \n /// A cache for the results of find_usages. This is for when we have multiple patterns that have the\n@@ -32,6 +33,15 @@ impl<'db> MatchFinder<'db> {\n         usage_cache: &mut UsageCache,\n         matches_out: &mut Vec<Match>,\n     ) {\n+        if rule.pattern.contains_self {\n+            // If the pattern contains `self` we restrict the scope of the search to just the\n+            // current method. No other method can reference the same `self`. This makes the\n+            // behavior of `self` consistent with other variables.\n+            if let Some(current_function) = self.resolution_scope.current_function() {\n+                self.slow_scan_node(&current_function, rule, &None, matches_out);\n+            }\n+            return;\n+        }\n         if pick_path_for_usages(&rule.pattern).is_none() {\n             self.slow_scan(rule, matches_out);\n             return;\n@@ -54,11 +64,7 @@ impl<'db> MatchFinder<'db> {\n                         mark::hit!(use_declaration_with_braces);\n                         continue;\n                     }\n-                    if let Ok(m) =\n-                        matching::get_match(false, rule, &node_to_match, &None, &self.sema)\n-                    {\n-                        matches_out.push(m);\n-                    }\n+                    self.try_add_match(rule, &node_to_match, &None, matches_out);\n                 }\n             }\n         }\n@@ -121,25 +127,39 @@ impl<'db> MatchFinder<'db> {\n         // FIXME: We should ideally have a test that checks that we edit local roots and not library\n         // roots. This probably would require some changes to fixtures, since currently everything\n         // seems to get put into a single source root.\n-        use ra_db::SourceDatabaseExt;\n-        use ra_ide_db::symbol_index::SymbolsDatabase;\n         let mut files = Vec::new();\n-        for &root in self.sema.db.local_roots().iter() {\n-            let sr = self.sema.db.source_root(root);\n-            files.extend(sr.iter());\n-        }\n+        self.search_files_do(|file_id| {\n+            files.push(file_id);\n+        });\n         SearchScope::files(&files)\n     }\n \n     fn slow_scan(&self, rule: &ResolvedRule, matches_out: &mut Vec<Match>) {\n-        use ra_db::SourceDatabaseExt;\n-        use ra_ide_db::symbol_index::SymbolsDatabase;\n-        for &root in self.sema.db.local_roots().iter() {\n-            let sr = self.sema.db.source_root(root);\n-            for file_id in sr.iter() {\n-                let file = self.sema.parse(file_id);\n-                let code = file.syntax();\n-                self.slow_scan_node(code, rule, &None, matches_out);\n+        self.search_files_do(|file_id| {\n+            let file = self.sema.parse(file_id);\n+            let code = file.syntax();\n+            self.slow_scan_node(code, rule, &None, matches_out);\n+        })\n+    }\n+\n+    fn search_files_do(&self, mut callback: impl FnMut(FileId)) {\n+        if self.restrict_ranges.is_empty() {\n+            // Unrestricted search.\n+            use ra_db::SourceDatabaseExt;\n+            use ra_ide_db::symbol_index::SymbolsDatabase;\n+            for &root in self.sema.db.local_roots().iter() {\n+                let sr = self.sema.db.source_root(root);\n+                for file_id in sr.iter() {\n+                    callback(file_id);\n+                }\n+            }\n+        } else {\n+            // Search is restricted, deduplicate file IDs (generally only one).\n+            let mut files = FxHashSet::default();\n+            for range in &self.restrict_ranges {\n+                if files.insert(range.file_id) {\n+                    callback(range.file_id);\n+                }\n             }\n         }\n     }\n@@ -154,9 +174,7 @@ impl<'db> MatchFinder<'db> {\n         if !is_search_permitted(code) {\n             return;\n         }\n-        if let Ok(m) = matching::get_match(false, rule, &code, restrict_range, &self.sema) {\n-            matches_out.push(m);\n-        }\n+        self.try_add_match(rule, &code, restrict_range, matches_out);\n         // If we've got a macro call, we already tried matching it pre-expansion, which is the only\n         // way to match the whole macro, now try expanding it and matching the expansion.\n         if let Some(macro_call) = ast::MacroCall::cast(code.clone()) {\n@@ -178,6 +196,38 @@ impl<'db> MatchFinder<'db> {\n             self.slow_scan_node(&child, rule, restrict_range, matches_out);\n         }\n     }\n+\n+    fn try_add_match(\n+        &self,\n+        rule: &ResolvedRule,\n+        code: &SyntaxNode,\n+        restrict_range: &Option<FileRange>,\n+        matches_out: &mut Vec<Match>,\n+    ) {\n+        if !self.within_range_restrictions(code) {\n+            mark::hit!(replace_nonpath_within_selection);\n+            return;\n+        }\n+        if let Ok(m) = matching::get_match(false, rule, code, restrict_range, &self.sema) {\n+            matches_out.push(m);\n+        }\n+    }\n+\n+    /// Returns whether `code` is within one of our range restrictions if we have any. No range\n+    /// restrictions is considered unrestricted and always returns true.\n+    fn within_range_restrictions(&self, code: &SyntaxNode) -> bool {\n+        if self.restrict_ranges.is_empty() {\n+            // There is no range restriction.\n+            return true;\n+        }\n+        let node_range = self.sema.original_range(code);\n+        for range in &self.restrict_ranges {\n+            if range.file_id == node_range.file_id && range.range.contains_range(node_range.range) {\n+                return true;\n+            }\n+        }\n+        false\n+    }\n }\n \n /// Returns whether we support matching within `node` and all of its ancestors.\n@@ -196,7 +246,7 @@ fn is_search_permitted(node: &SyntaxNode) -> bool {\n     // and the code is `use foo::{baz, bar}`, we'll match `bar`, since it resolves to `foo::bar`.\n     // However we'll then replace just the part we matched `bar`. We probably need to instead remove\n     // `bar` and insert a new use declaration.\n-    node.kind() != SyntaxKind::USE_ITEM\n+    node.kind() != SyntaxKind::USE\n }\n \n impl UsageCache {"}, {"sha": "d483640df1c4572dfb7ed80eb0617e40605d8102", "filename": "crates/ra_ssr/src/tests.rs", "status": "modified", "additions": 176, "deletions": 19, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Ftests.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,9 +1,9 @@\n use crate::{MatchFinder, SsrRule};\n use expect::{expect, Expect};\n-use ra_db::{salsa::Durability, FileId, FilePosition, SourceDatabaseExt};\n+use ra_db::{salsa::Durability, FileId, FilePosition, FileRange, SourceDatabaseExt};\n use rustc_hash::FxHashSet;\n use std::sync::Arc;\n-use test_utils::mark;\n+use test_utils::{mark, RangeOrOffset};\n \n fn parse_error_text(query: &str) -> String {\n     format!(\"{}\", query.parse::<SsrRule>().unwrap_err())\n@@ -60,29 +60,41 @@ fn parser_undefined_placeholder_in_replacement() {\n }\n \n /// `code` may optionally contain a cursor marker `<|>`. If it doesn't, then the position will be\n-/// the start of the file.\n-pub(crate) fn single_file(code: &str) -> (ra_ide_db::RootDatabase, FilePosition) {\n+/// the start of the file. If there's a second cursor marker, then we'll return a single range.\n+pub(crate) fn single_file(code: &str) -> (ra_ide_db::RootDatabase, FilePosition, Vec<FileRange>) {\n     use ra_db::fixture::WithFixture;\n     use ra_ide_db::symbol_index::SymbolsDatabase;\n-    let (mut db, position) = if code.contains(test_utils::CURSOR_MARKER) {\n-        ra_ide_db::RootDatabase::with_position(code)\n+    let (mut db, file_id, range_or_offset) = if code.contains(test_utils::CURSOR_MARKER) {\n+        ra_ide_db::RootDatabase::with_range_or_offset(code)\n     } else {\n         let (db, file_id) = ra_ide_db::RootDatabase::with_single_file(code);\n-        (db, FilePosition { file_id, offset: 0.into() })\n+        (db, file_id, RangeOrOffset::Offset(0.into()))\n     };\n+    let selections;\n+    let position;\n+    match range_or_offset {\n+        RangeOrOffset::Range(range) => {\n+            position = FilePosition { file_id, offset: range.start() };\n+            selections = vec![FileRange { file_id, range: range }];\n+        }\n+        RangeOrOffset::Offset(offset) => {\n+            position = FilePosition { file_id, offset };\n+            selections = vec![];\n+        }\n+    }\n     let mut local_roots = FxHashSet::default();\n     local_roots.insert(ra_db::fixture::WORKSPACE);\n     db.set_local_roots_with_durability(Arc::new(local_roots), Durability::HIGH);\n-    (db, position)\n+    (db, position, selections)\n }\n \n fn assert_ssr_transform(rule: &str, input: &str, expected: Expect) {\n     assert_ssr_transforms(&[rule], input, expected);\n }\n \n fn assert_ssr_transforms(rules: &[&str], input: &str, expected: Expect) {\n-    let (db, position) = single_file(input);\n-    let mut match_finder = MatchFinder::in_context(&db, position);\n+    let (db, position, selections) = single_file(input);\n+    let mut match_finder = MatchFinder::in_context(&db, position, selections);\n     for rule in rules {\n         let rule: SsrRule = rule.parse().unwrap();\n         match_finder.add_rule(rule).unwrap();\n@@ -112,8 +124,8 @@ fn print_match_debug_info(match_finder: &MatchFinder, file_id: FileId, snippet:\n }\n \n fn assert_matches(pattern: &str, code: &str, expected: &[&str]) {\n-    let (db, position) = single_file(code);\n-    let mut match_finder = MatchFinder::in_context(&db, position);\n+    let (db, position, selections) = single_file(code);\n+    let mut match_finder = MatchFinder::in_context(&db, position, selections);\n     match_finder.add_search_pattern(pattern.parse().unwrap()).unwrap();\n     let matched_strings: Vec<String> =\n         match_finder.matches().flattened().matches.iter().map(|m| m.matched_text()).collect();\n@@ -124,8 +136,8 @@ fn assert_matches(pattern: &str, code: &str, expected: &[&str]) {\n }\n \n fn assert_no_match(pattern: &str, code: &str) {\n-    let (db, position) = single_file(code);\n-    let mut match_finder = MatchFinder::in_context(&db, position);\n+    let (db, position, selections) = single_file(code);\n+    let mut match_finder = MatchFinder::in_context(&db, position, selections);\n     match_finder.add_search_pattern(pattern.parse().unwrap()).unwrap();\n     let matches = match_finder.matches().flattened().matches;\n     if !matches.is_empty() {\n@@ -135,8 +147,8 @@ fn assert_no_match(pattern: &str, code: &str) {\n }\n \n fn assert_match_failure_reason(pattern: &str, code: &str, snippet: &str, expected_reason: &str) {\n-    let (db, position) = single_file(code);\n-    let mut match_finder = MatchFinder::in_context(&db, position);\n+    let (db, position, selections) = single_file(code);\n+    let mut match_finder = MatchFinder::in_context(&db, position, selections);\n     match_finder.add_search_pattern(pattern.parse().unwrap()).unwrap();\n     let mut reasons = Vec::new();\n     for d in match_finder.debug_where_text_equal(position.file_id, snippet) {\n@@ -490,9 +502,10 @@ fn no_match_split_expression() {\n \n #[test]\n fn replace_function_call() {\n+    // This test also makes sure that we ignore empty-ranges.\n     assert_ssr_transform(\n         \"foo() ==>> bar()\",\n-        \"fn foo() {} fn bar() {} fn f1() {foo(); foo();}\",\n+        \"fn foo() {<|><|>} fn bar() {} fn f1() {foo(); foo();}\",\n         expect![[\"fn foo() {} fn bar() {} fn f1() {bar(); bar();}\"]],\n     );\n }\n@@ -651,7 +664,7 @@ fn replace_binary_op() {\n     assert_ssr_transform(\n         \"$a + $b ==>> $b + $a\",\n         \"fn f() {1 + 2 + 3 + 4}\",\n-        expect![[\"fn f() {4 + 3 + 2 + 1}\"]],\n+        expect![[r#\"fn f() {4 + (3 + (2 + 1))}\"#]],\n     );\n }\n \n@@ -760,11 +773,32 @@ fn preserves_whitespace_within_macro_expansion() {\n             macro_rules! macro1 {\n                 ($a:expr) => {$a}\n             }\n-            fn f() {macro1!(4 - 3 - 1   *   2}\n+            fn f() {macro1!(4 - (3 - 1   *   2)}\n             \"#]],\n     )\n }\n \n+#[test]\n+fn add_parenthesis_when_necessary() {\n+    assert_ssr_transform(\n+        \"foo($a) ==>> $a.to_string()\",\n+        r#\"\n+        fn foo(_: i32) {}\n+        fn bar3(v: i32) {\n+            foo(1 + 2);\n+            foo(-v);\n+        }\n+        \"#,\n+        expect![[r#\"\n+            fn foo(_: i32) {}\n+            fn bar3(v: i32) {\n+                (1 + 2).to_string();\n+                (-v).to_string();\n+            }\n+        \"#]],\n+    )\n+}\n+\n #[test]\n fn match_failure_reasons() {\n     let code = r#\"\n@@ -886,6 +920,45 @@ fn ufcs_matches_method_call() {\n     );\n }\n \n+#[test]\n+fn pattern_is_a_single_segment_path() {\n+    mark::check!(pattern_is_a_single_segment_path);\n+    // The first function should not be altered because the `foo` in scope at the cursor position is\n+    // a different `foo`. This case is special because \"foo\" can be parsed as a pattern (IDENT_PAT ->\n+    // NAME -> IDENT), which contains no path. If we're not careful we'll end up matching the `foo`\n+    // in `let foo` from the first function. Whether we should match the `let foo` in the second\n+    // function is less clear. At the moment, we don't. Doing so sounds like a rename operation,\n+    // which isn't really what SSR is for, especially since the replacement `bar` must be able to be\n+    // resolved, which means if we rename `foo` we'll get a name collision.\n+    assert_ssr_transform(\n+        \"foo ==>> bar\",\n+        r#\"\n+        fn f1() -> i32 {\n+            let foo = 1;\n+            let bar = 2;\n+            foo\n+        }\n+        fn f1() -> i32 {\n+            let foo = 1;\n+            let bar = 2;\n+            foo<|>\n+        }\n+        \"#,\n+        expect![[r#\"\n+            fn f1() -> i32 {\n+                let foo = 1;\n+                let bar = 2;\n+                foo\n+            }\n+            fn f1() -> i32 {\n+                let foo = 1;\n+                let bar = 2;\n+                bar\n+            }\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn replace_local_variable_reference() {\n     // The pattern references a local variable `foo` in the block containing the cursor. We should\n@@ -922,3 +995,87 @@ fn replace_local_variable_reference() {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn replace_path_within_selection() {\n+    assert_ssr_transform(\n+        \"foo ==>> bar\",\n+        r#\"\n+        fn main() {\n+            let foo = 41;\n+            let bar = 42;\n+            do_stuff(foo);\n+            do_stuff(foo);<|>\n+            do_stuff(foo);\n+            do_stuff(foo);<|>\n+            do_stuff(foo);\n+        }\"#,\n+        expect![[r#\"\n+            fn main() {\n+                let foo = 41;\n+                let bar = 42;\n+                do_stuff(foo);\n+                do_stuff(foo);\n+                do_stuff(bar);\n+                do_stuff(bar);\n+                do_stuff(foo);\n+            }\"#]],\n+    );\n+}\n+\n+#[test]\n+fn replace_nonpath_within_selection() {\n+    mark::check!(replace_nonpath_within_selection);\n+    assert_ssr_transform(\n+        \"$a + $b ==>> $b * $a\",\n+        r#\"\n+        fn main() {\n+            let v = 1 + 2;<|>\n+            let v2 = 3 + 3;\n+            let v3 = 4 + 5;<|>\n+            let v4 = 6 + 7;\n+        }\"#,\n+        expect![[r#\"\n+            fn main() {\n+                let v = 1 + 2;\n+                let v2 = 3 * 3;\n+                let v3 = 5 * 4;\n+                let v4 = 6 + 7;\n+            }\"#]],\n+    );\n+}\n+\n+#[test]\n+fn replace_self() {\n+    // `foo(self)` occurs twice in the code, however only the first occurrence is the `self` that's\n+    // in scope where the rule is invoked.\n+    assert_ssr_transform(\n+        \"foo(self) ==>> bar(self)\",\n+        r#\"\n+        struct S1 {}\n+        fn foo(_: &S1) {}\n+        fn bar(_: &S1) {}\n+        impl S1 {\n+            fn f1(&self) {\n+                foo(self)<|>\n+            }\n+            fn f2(&self) {\n+                foo(self)\n+            }\n+        }\n+        \"#,\n+        expect![[r#\"\n+            struct S1 {}\n+            fn foo(_: &S1) {}\n+            fn bar(_: &S1) {}\n+            impl S1 {\n+                fn f1(&self) {\n+                    bar(self)\n+                }\n+                fn f2(&self) {\n+                    foo(self)\n+                }\n+            }\n+        \"#]],\n+    );\n+}"}, {"sha": "fc4d7aa048b80551460d2c2df9639cf4d3e7b58d", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -13,7 +13,7 @@ doctest = false\n [dependencies]\n itertools = \"0.9.0\"\n rowan = \"0.10.0\"\n-rustc_lexer = { version = \"669.0.0\", package = \"rustc-ap-rustc_lexer\" }\n+rustc_lexer = { version = \"671.0.0\", package = \"rustc-ap-rustc_lexer\" }\n rustc-hash = \"1.1.0\"\n arrayvec = \"0.5.1\"\n once_cell = \"1.3.1\""}, {"sha": "d536bb1e7d63492418248b07e3c3f5db548fd4d5", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -17,7 +17,7 @@ use crate::{\n \n pub use self::{\n     expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n-    generated::{nodes::*, tokens::*},\n+    generated::*,\n     node_ext::{\n         AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,\n         StructKind, TypeBoundKind, VisibilityKind,\n@@ -139,7 +139,7 @@ fn test_doc_comment_of_statics() {\n     )\n     .ok()\n     .unwrap();\n-    let st = file.syntax().descendants().find_map(StaticDef::cast).unwrap();\n+    let st = file.syntax().descendants().find_map(Static::cast).unwrap();\n     assert_eq!(\"Number of levels\", st.doc_comment_text().unwrap());\n }\n \n@@ -235,7 +235,7 @@ fn test_comments_preserve_trailing_whitespace() {\n     )\n     .ok()\n     .unwrap();\n-    let def = file.syntax().descendants().find_map(StructDef::cast).unwrap();\n+    let def = file.syntax().descendants().find_map(Struct::cast).unwrap();\n     assert_eq!(\n         \"Representation of a Realm.   \\nIn the specification these are called Realm Records.\",\n         def.doc_comment_text().unwrap()\n@@ -286,8 +286,8 @@ where\n     let mut bounds = pred.type_bound_list().unwrap().bounds();\n \n     assert!(pred.for_token().is_none());\n-    assert!(pred.type_param_list().is_none());\n-    assert_eq!(\"T\", pred.type_ref().unwrap().syntax().text().to_string());\n+    assert!(pred.generic_param_list().is_none());\n+    assert_eq!(\"T\", pred.ty().unwrap().syntax().text().to_string());\n     assert_bound(\"Clone\", bounds.next());\n     assert_bound(\"Copy\", bounds.next());\n     assert_bound(\"Debug\", bounds.next());\n@@ -304,28 +304,28 @@ where\n     let pred = predicates.next().unwrap();\n     let mut bounds = pred.type_bound_list().unwrap().bounds();\n \n-    assert_eq!(\"Iterator::Item\", pred.type_ref().unwrap().syntax().text().to_string());\n+    assert_eq!(\"Iterator::Item\", pred.ty().unwrap().syntax().text().to_string());\n     assert_bound(\"'a\", bounds.next());\n \n     let pred = predicates.next().unwrap();\n     let mut bounds = pred.type_bound_list().unwrap().bounds();\n \n-    assert_eq!(\"Iterator::Item\", pred.type_ref().unwrap().syntax().text().to_string());\n+    assert_eq!(\"Iterator::Item\", pred.ty().unwrap().syntax().text().to_string());\n     assert_bound(\"Debug\", bounds.next());\n     assert_bound(\"'a\", bounds.next());\n \n     let pred = predicates.next().unwrap();\n     let mut bounds = pred.type_bound_list().unwrap().bounds();\n \n-    assert_eq!(\"<T as Iterator>::Item\", pred.type_ref().unwrap().syntax().text().to_string());\n+    assert_eq!(\"<T as Iterator>::Item\", pred.ty().unwrap().syntax().text().to_string());\n     assert_bound(\"Debug\", bounds.next());\n     assert_bound(\"'a\", bounds.next());\n \n     let pred = predicates.next().unwrap();\n     let mut bounds = pred.type_bound_list().unwrap().bounds();\n \n     assert!(pred.for_token().is_some());\n-    assert_eq!(\"<'a>\", pred.type_param_list().unwrap().syntax().text().to_string());\n-    assert_eq!(\"F\", pred.type_ref().unwrap().syntax().text().to_string());\n+    assert_eq!(\"<'a>\", pred.generic_param_list().unwrap().syntax().text().to_string());\n+    assert_eq!(\"F\", pred.ty().unwrap().syntax().text().to_string());\n     assert_bound(\"Fn(&'a str)\", bounds.next());\n }"}, {"sha": "5ed123f91fe048983811ac0b991723b727c1f99a", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -29,9 +29,9 @@ impl ast::BinExpr {\n     }\n }\n \n-impl ast::FnDef {\n+impl ast::Fn {\n     #[must_use]\n-    pub fn with_body(&self, body: ast::BlockExpr) -> ast::FnDef {\n+    pub fn with_body(&self, body: ast::BlockExpr) -> ast::Fn {\n         let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n         let old_body_or_semi: SyntaxElement = if let Some(old_body) = self.body() {\n             old_body.syntax().clone().into()\n@@ -80,9 +80,12 @@ where\n     }\n }\n \n-impl ast::ItemList {\n+impl ast::AssocItemList {\n     #[must_use]\n-    pub fn append_items(&self, items: impl IntoIterator<Item = ast::AssocItem>) -> ast::ItemList {\n+    pub fn append_items(\n+        &self,\n+        items: impl IntoIterator<Item = ast::AssocItem>,\n+    ) -> ast::AssocItemList {\n         let mut res = self.clone();\n         if !self.syntax().text().contains_char('\\n') {\n             res = make_multiline(res);\n@@ -92,7 +95,7 @@ impl ast::ItemList {\n     }\n \n     #[must_use]\n-    pub fn append_item(&self, item: ast::AssocItem) -> ast::ItemList {\n+    pub fn append_item(&self, item: ast::AssocItem) -> ast::AssocItemList {\n         let (indent, position) = match self.assoc_items().last() {\n             Some(it) => (\n                 leading_indent(it.syntax()).unwrap_or_default().to_string(),\n@@ -113,18 +116,18 @@ impl ast::ItemList {\n     }\n }\n \n-impl ast::RecordFieldList {\n+impl ast::RecordExprFieldList {\n     #[must_use]\n-    pub fn append_field(&self, field: &ast::RecordField) -> ast::RecordFieldList {\n+    pub fn append_field(&self, field: &ast::RecordExprField) -> ast::RecordExprFieldList {\n         self.insert_field(InsertPosition::Last, field)\n     }\n \n     #[must_use]\n     pub fn insert_field(\n         &self,\n-        position: InsertPosition<&'_ ast::RecordField>,\n-        field: &ast::RecordField,\n-    ) -> ast::RecordFieldList {\n+        position: InsertPosition<&'_ ast::RecordExprField>,\n+        field: &ast::RecordExprField,\n+    ) -> ast::RecordExprFieldList {\n         let is_multiline = self.syntax().text().contains_char('\\n');\n         let ws;\n         let space = if is_multiline {\n@@ -189,9 +192,9 @@ impl ast::RecordFieldList {\n     }\n }\n \n-impl ast::TypeAliasDef {\n+impl ast::TypeAlias {\n     #[must_use]\n-    pub fn remove_bounds(&self) -> ast::TypeAliasDef {\n+    pub fn remove_bounds(&self) -> ast::TypeAlias {\n         let colon = match self.colon_token() {\n             Some(it) => it,\n             None => return self.clone(),\n@@ -234,17 +237,17 @@ impl ast::Path {\n \n impl ast::PathSegment {\n     #[must_use]\n-    pub fn with_type_args(&self, type_args: ast::TypeArgList) -> ast::PathSegment {\n+    pub fn with_type_args(&self, type_args: ast::GenericArgList) -> ast::PathSegment {\n         self._with_type_args(type_args, false)\n     }\n \n     #[must_use]\n-    pub fn with_turbo_fish(&self, type_args: ast::TypeArgList) -> ast::PathSegment {\n+    pub fn with_turbo_fish(&self, type_args: ast::GenericArgList) -> ast::PathSegment {\n         self._with_type_args(type_args, true)\n     }\n \n-    fn _with_type_args(&self, type_args: ast::TypeArgList, turbo: bool) -> ast::PathSegment {\n-        if let Some(old) = self.type_arg_list() {\n+    fn _with_type_args(&self, type_args: ast::GenericArgList, turbo: bool) -> ast::PathSegment {\n+        if let Some(old) = self.generic_arg_list() {\n             return self.replace_children(\n                 single_node(old.syntax().clone()),\n                 iter::once(type_args.syntax().clone().into()),\n@@ -259,9 +262,9 @@ impl ast::PathSegment {\n     }\n }\n \n-impl ast::UseItem {\n+impl ast::Use {\n     #[must_use]\n-    pub fn with_use_tree(&self, use_tree: ast::UseTree) -> ast::UseItem {\n+    pub fn with_use_tree(&self, use_tree: ast::UseTree) -> ast::Use {\n         if let Some(old) = self.use_tree() {\n             return self.replace_descendant(old, use_tree);\n         }\n@@ -314,8 +317,12 @@ impl ast::UseTree {\n             Some(it) => it,\n             None => return self.clone(),\n         };\n-        let use_tree =\n-            make::use_tree(suffix, self.use_tree_list(), self.alias(), self.star_token().is_some());\n+        let use_tree = make::use_tree(\n+            suffix,\n+            self.use_tree_list(),\n+            self.rename(),\n+            self.star_token().is_some(),\n+        );\n         let nested = make::use_tree_list(iter::once(use_tree));\n         return make::use_tree(prefix.clone(), Some(nested), None, false);\n \n@@ -383,7 +390,7 @@ impl ast::MatchArmList {\n     #[must_use]\n     pub fn remove_placeholder(&self) -> ast::MatchArmList {\n         let placeholder =\n-            self.arms().find(|arm| matches!(arm.pat(), Some(ast::Pat::PlaceholderPat(_))));\n+            self.arms().find(|arm| matches!(arm.pat(), Some(ast::Pat::WildcardPat(_))));\n         if let Some(placeholder) = placeholder {\n             self.remove_arm(&placeholder)\n         } else {\n@@ -614,7 +621,7 @@ fn single_node(element: impl Into<SyntaxElement>) -> RangeInclusive<SyntaxElemen\n #[test]\n fn test_increase_indent() {\n     let arm_list = {\n-        let arm = make::match_arm(iter::once(make::placeholder_pat().into()), make::expr_unit());\n+        let arm = make::match_arm(iter::once(make::wildcard_pat().into()), make::expr_unit());\n         make::match_arm_list(vec![arm.clone(), arm])\n     };\n     assert_eq!("}, {"sha": "f5ba872233f9e7f6fbf60e1b22258d4e9e3546a5", "filename": "crates/ra_syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -7,6 +7,8 @@ use crate::{\n     SyntaxToken, T,\n };\n \n+impl ast::AttrsOwner for ast::Expr {}\n+\n impl ast::Expr {\n     pub fn is_block_like(&self) -> bool {\n         match self {\n@@ -331,13 +333,12 @@ impl ast::Literal {\n \n         match token.kind() {\n             INT_NUMBER => {\n-                // FYI: there was a bug here previously, thus an if statement bellow is necessary.\n+                // FYI: there was a bug here previously, thus the if statement below is necessary.\n                 // The lexer treats e.g. `1f64` as an integer literal. See\n                 // https://github.com/rust-analyzer/rust-analyzer/issues/1592\n                 // and the comments on the linked PR.\n \n                 let text = token.text();\n-\n                 if let suffix @ Some(_) = Self::find_suffix(&text, &FLOAT_SUFFIXES) {\n                     LiteralKind::FloatNumber { suffix }\n                 } else {\n@@ -399,7 +400,7 @@ impl ast::BlockExpr {\n             Some(it) => it,\n             None => return true,\n         };\n-        !matches!(parent.kind(), FN_DEF | IF_EXPR | WHILE_EXPR | LOOP_EXPR | EFFECT_EXPR)\n+        !matches!(parent.kind(), FN | IF_EXPR | WHILE_EXPR | LOOP_EXPR | EFFECT_EXPR)\n     }\n }\n \n@@ -410,8 +411,8 @@ fn test_literal_with_attr() {\n     assert_eq!(lit.token().text(), r#\"\"Hello\"\"#);\n }\n \n-impl ast::RecordField {\n-    pub fn parent_record_lit(&self) -> ast::RecordLit {\n-        self.syntax().ancestors().find_map(ast::RecordLit::cast).unwrap()\n+impl ast::RecordExprField {\n+    pub fn parent_record_lit(&self) -> ast::RecordExpr {\n+        self.syntax().ancestors().find_map(ast::RecordExpr::cast).unwrap()\n     }\n }"}, {"sha": "4a6f41ee71fa1b43ee61df97e1aedd8120711371", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,6 +1,41 @@\n //! This file is actually hand-written, but the submodules are indeed generated.\n-\n #[rustfmt::skip]\n-pub(super) mod nodes;\n+mod nodes;\n #[rustfmt::skip]\n-pub(super) mod tokens;\n+mod tokens;\n+\n+use crate::{\n+    AstNode,\n+    SyntaxKind::{self, *},\n+    SyntaxNode,\n+};\n+\n+pub use {nodes::*, tokens::*};\n+\n+// Stmt is the only nested enum, so it's easier to just hand-write it\n+impl AstNode for Stmt {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            LET_STMT | EXPR_STMT => true,\n+            _ => Item::can_cast(kind),\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        let res = match syntax.kind() {\n+            LET_STMT => Stmt::LetStmt(LetStmt { syntax }),\n+            EXPR_STMT => Stmt::ExprStmt(ExprStmt { syntax }),\n+            _ => {\n+                let item = Item::cast(syntax)?;\n+                Stmt::Item(item)\n+            }\n+        };\n+        Some(res)\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            Stmt::LetStmt(it) => &it.syntax,\n+            Stmt::ExprStmt(it) => &it.syntax,\n+            Stmt::Item(it) => it.syntax(),\n+        }\n+    }\n+}"}, {"sha": "3d49309d1488eb7b66398e6b83f379b6294a1154", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 1685, "deletions": 3155, "changes": 4840, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767"}, {"sha": "254a37fe3e4709d4f343612d82c94b023f55a6cb", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -17,7 +17,7 @@ pub fn name_ref(text: &str) -> ast::NameRef {\n     ast_from_text(&format!(\"fn f() {{ {}; }}\", text))\n }\n \n-pub fn type_ref(text: &str) -> ast::TypeRef {\n+pub fn ty(text: &str) -> ast::Type {\n     ast_from_text(&format!(\"impl {} for D {{}};\", text))\n }\n \n@@ -30,14 +30,14 @@ pub fn path_unqualified(segment: ast::PathSegment) -> ast::Path {\n pub fn path_qualified(qual: ast::Path, segment: ast::PathSegment) -> ast::Path {\n     path_from_text(&format!(\"{}::{}\", qual, segment))\n }\n-fn path_from_text(text: &str) -> ast::Path {\n+pub fn path_from_text(text: &str) -> ast::Path {\n     ast_from_text(text)\n }\n \n pub fn use_tree(\n     path: ast::Path,\n     use_tree_list: Option<ast::UseTreeList>,\n-    alias: Option<ast::Alias>,\n+    alias: Option<ast::Rename>,\n     add_star: bool,\n ) -> ast::UseTree {\n     let mut buf = \"use \".to_string();\n@@ -60,22 +60,22 @@ pub fn use_tree_list(use_trees: impl IntoIterator<Item = ast::UseTree>) -> ast::\n     ast_from_text(&format!(\"use {{{}}};\", use_trees))\n }\n \n-pub fn use_item(use_tree: ast::UseTree) -> ast::UseItem {\n+pub fn use_(use_tree: ast::UseTree) -> ast::Use {\n     ast_from_text(&format!(\"use {};\", use_tree))\n }\n \n-pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordField {\n+pub fn record_expr_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordExprField {\n     return match expr {\n         Some(expr) => from_text(&format!(\"{}: {}\", name, expr)),\n         None => from_text(&name.to_string()),\n     };\n \n-    fn from_text(text: &str) -> ast::RecordField {\n+    fn from_text(text: &str) -> ast::RecordExprField {\n         ast_from_text(&format!(\"fn f() {{ S {{ {}, }} }}\", text))\n     }\n }\n \n-pub fn record_field_def(name: ast::NameRef, ty: ast::TypeRef) -> ast::RecordFieldDef {\n+pub fn record_field(name: ast::NameRef, ty: ast::Type) -> ast::RecordField {\n     ast_from_text(&format!(\"struct S {{ {}: {}, }}\", name, ty))\n }\n \n@@ -148,18 +148,18 @@ pub fn condition(expr: ast::Expr, pattern: Option<ast::Pat>) -> ast::Condition {\n     }\n }\n \n-pub fn bind_pat(name: ast::Name) -> ast::BindPat {\n+pub fn ident_pat(name: ast::Name) -> ast::IdentPat {\n     return from_text(name.text());\n \n-    fn from_text(text: &str) -> ast::BindPat {\n+    fn from_text(text: &str) -> ast::IdentPat {\n         ast_from_text(&format!(\"fn f({}: ())\", text))\n     }\n }\n \n-pub fn placeholder_pat() -> ast::PlaceholderPat {\n+pub fn wildcard_pat() -> ast::WildcardPat {\n     return from_text(\"_\");\n \n-    fn from_text(text: &str) -> ast::PlaceholderPat {\n+    fn from_text(text: &str) -> ast::WildcardPat {\n         ast_from_text(&format!(\"fn f({}: ())\", text))\n     }\n }\n@@ -288,13 +288,13 @@ pub fn visibility_pub_crate() -> ast::Visibility {\n     ast_from_text(\"pub(crate) struct S\")\n }\n \n-pub fn fn_def(\n+pub fn fn_(\n     visibility: Option<ast::Visibility>,\n     fn_name: ast::Name,\n-    type_params: Option<ast::TypeParamList>,\n+    type_params: Option<ast::GenericParamList>,\n     params: ast::ParamList,\n     body: ast::BlockExpr,\n-) -> ast::FnDef {\n+) -> ast::Fn {\n     let type_params =\n         if let Some(type_params) = type_params { format!(\"<{}>\", type_params) } else { \"\".into() };\n     let visibility = match visibility {"}, {"sha": "733e978772c3a08bc25372a81b8b4cbf40c4a640", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 76, "deletions": 65, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -7,7 +7,7 @@ use itertools::Itertools;\n use ra_parser::SyntaxKind;\n \n use crate::{\n-    ast::{self, support, AstNode, AttrInput, NameOwner, SyntaxNode},\n+    ast::{self, support, AstNode, NameOwner, SyntaxNode},\n     SmolStr, SyntaxElement, SyntaxToken, T,\n };\n \n@@ -39,29 +39,23 @@ pub enum AttrKind {\n \n impl ast::Attr {\n     pub fn as_simple_atom(&self) -> Option<SmolStr> {\n-        match self.input() {\n-            None => self.simple_name(),\n-            Some(_) => None,\n+        if self.eq_token().is_some() || self.token_tree().is_some() {\n+            return None;\n         }\n+        self.simple_name()\n     }\n \n     pub fn as_simple_call(&self) -> Option<(SmolStr, ast::TokenTree)> {\n-        match self.input() {\n-            Some(AttrInput::TokenTree(tt)) => Some((self.simple_name()?, tt)),\n-            _ => None,\n-        }\n+        let tt = self.token_tree()?;\n+        Some((self.simple_name()?, tt))\n     }\n \n     pub fn as_simple_key_value(&self) -> Option<(SmolStr, SmolStr)> {\n-        match self.input() {\n-            Some(AttrInput::Literal(lit)) => {\n-                let key = self.simple_name()?;\n-                // FIXME: escape? raw string?\n-                let value = lit.syntax().first_token()?.text().trim_matches('\"').into();\n-                Some((key, value))\n-            }\n-            _ => None,\n-        }\n+        let lit = self.literal()?;\n+        let key = self.simple_name()?;\n+        // FIXME: escape? raw string?\n+        let value = lit.syntax().first_token()?.text().trim_matches('\"').into();\n+        Some((key, value))\n     }\n \n     pub fn simple_name(&self) -> Option<SmolStr> {\n@@ -88,7 +82,7 @@ impl ast::Attr {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum PathSegmentKind {\n     Name(ast::NameRef),\n-    Type { type_ref: Option<ast::TypeRef>, trait_ref: Option<ast::PathType> },\n+    Type { type_ref: Option<ast::Type>, trait_ref: Option<ast::PathType> },\n     SelfKw,\n     SuperKw,\n     CrateKw,\n@@ -114,8 +108,8 @@ impl ast::PathSegment {\n                     // <T> or <T as Trait>\n                     // T is any TypeRef, Trait has to be a PathType\n                     let mut type_refs =\n-                        self.syntax().children().filter(|node| ast::TypeRef::can_cast(node.kind()));\n-                    let type_ref = type_refs.next().and_then(ast::TypeRef::cast);\n+                        self.syntax().children().filter(|node| ast::Type::can_cast(node.kind()));\n+                    let type_ref = type_refs.next().and_then(ast::Type::cast);\n                     let trait_ref = type_refs.next().and_then(ast::PathType::cast);\n                     PathSegmentKind::Type { type_ref, trait_ref }\n                 }\n@@ -141,22 +135,22 @@ impl ast::UseTreeList {\n     }\n }\n \n-impl ast::ImplDef {\n-    pub fn target_type(&self) -> Option<ast::TypeRef> {\n+impl ast::Impl {\n+    pub fn self_ty(&self) -> Option<ast::Type> {\n         match self.target() {\n             (Some(t), None) | (_, Some(t)) => Some(t),\n             _ => None,\n         }\n     }\n \n-    pub fn target_trait(&self) -> Option<ast::TypeRef> {\n+    pub fn trait_(&self) -> Option<ast::Type> {\n         match self.target() {\n             (Some(t), Some(_)) => Some(t),\n             _ => None,\n         }\n     }\n \n-    fn target(&self) -> (Option<ast::TypeRef>, Option<ast::TypeRef>) {\n+    fn target(&self) -> (Option<ast::Type>, Option<ast::Type>) {\n         let mut types = support::children(self.syntax());\n         let first = types.next();\n         let second = types.next();\n@@ -166,34 +160,34 @@ impl ast::ImplDef {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum StructKind {\n-    Record(ast::RecordFieldDefList),\n-    Tuple(ast::TupleFieldDefList),\n+    Record(ast::RecordFieldList),\n+    Tuple(ast::TupleFieldList),\n     Unit,\n }\n \n impl StructKind {\n     fn from_node<N: AstNode>(node: &N) -> StructKind {\n-        if let Some(nfdl) = support::child::<ast::RecordFieldDefList>(node.syntax()) {\n+        if let Some(nfdl) = support::child::<ast::RecordFieldList>(node.syntax()) {\n             StructKind::Record(nfdl)\n-        } else if let Some(pfl) = support::child::<ast::TupleFieldDefList>(node.syntax()) {\n+        } else if let Some(pfl) = support::child::<ast::TupleFieldList>(node.syntax()) {\n             StructKind::Tuple(pfl)\n         } else {\n             StructKind::Unit\n         }\n     }\n }\n \n-impl ast::StructDef {\n+impl ast::Struct {\n     pub fn kind(&self) -> StructKind {\n         StructKind::from_node(self)\n     }\n }\n \n-impl ast::RecordField {\n-    pub fn for_field_name(field_name: &ast::NameRef) -> Option<ast::RecordField> {\n+impl ast::RecordExprField {\n+    pub fn for_field_name(field_name: &ast::NameRef) -> Option<ast::RecordExprField> {\n         let candidate =\n-            field_name.syntax().parent().and_then(ast::RecordField::cast).or_else(|| {\n-                field_name.syntax().ancestors().nth(4).and_then(ast::RecordField::cast)\n+            field_name.syntax().parent().and_then(ast::RecordExprField::cast).or_else(|| {\n+                field_name.syntax().ancestors().nth(4).and_then(ast::RecordExprField::cast)\n             })?;\n         if candidate.field_name().as_ref() == Some(field_name) {\n             Some(candidate)\n@@ -233,26 +227,26 @@ impl fmt::Display for NameOrNameRef {\n     }\n }\n \n-impl ast::RecordFieldPat {\n+impl ast::RecordPatField {\n     /// Deals with field init shorthand\n     pub fn field_name(&self) -> Option<NameOrNameRef> {\n         if let Some(name_ref) = self.name_ref() {\n             return Some(NameOrNameRef::NameRef(name_ref));\n         }\n-        if let Some(ast::Pat::BindPat(pat)) = self.pat() {\n+        if let Some(ast::Pat::IdentPat(pat)) = self.pat() {\n             let name = pat.name()?;\n             return Some(NameOrNameRef::Name(name));\n         }\n         None\n     }\n }\n \n-impl ast::EnumVariant {\n-    pub fn parent_enum(&self) -> ast::EnumDef {\n+impl ast::Variant {\n+    pub fn parent_enum(&self) -> ast::Enum {\n         self.syntax()\n             .parent()\n             .and_then(|it| it.parent())\n-            .and_then(ast::EnumDef::cast)\n+            .and_then(ast::Enum::cast)\n             .expect(\"EnumVariants are always nested in Enums\")\n     }\n     pub fn kind(&self) -> StructKind {\n@@ -296,18 +290,18 @@ pub struct SlicePatComponents {\n \n impl ast::SlicePat {\n     pub fn components(&self) -> SlicePatComponents {\n-        let mut args = self.args().peekable();\n+        let mut args = self.pats().peekable();\n         let prefix = args\n             .peeking_take_while(|p| match p {\n-                ast::Pat::DotDotPat(_) => false,\n-                ast::Pat::BindPat(bp) => match bp.pat() {\n-                    Some(ast::Pat::DotDotPat(_)) => false,\n+                ast::Pat::RestPat(_) => false,\n+                ast::Pat::IdentPat(bp) => match bp.pat() {\n+                    Some(ast::Pat::RestPat(_)) => false,\n                     _ => true,\n                 },\n                 ast::Pat::RefPat(rp) => match rp.pat() {\n-                    Some(ast::Pat::DotDotPat(_)) => false,\n-                    Some(ast::Pat::BindPat(bp)) => match bp.pat() {\n-                        Some(ast::Pat::DotDotPat(_)) => false,\n+                    Some(ast::Pat::RestPat(_)) => false,\n+                    Some(ast::Pat::IdentPat(bp)) => match bp.pat() {\n+                        Some(ast::Pat::RestPat(_)) => false,\n                         _ => true,\n                     },\n                     _ => true,\n@@ -368,26 +362,6 @@ impl ast::TypeBound {\n             unreachable!()\n         }\n     }\n-\n-    pub fn const_question_token(&self) -> Option<SyntaxToken> {\n-        self.syntax()\n-            .children_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .take_while(|it| it.kind() != T![const])\n-            .find(|it| it.kind() == T![?])\n-    }\n-\n-    pub fn question_token(&self) -> Option<SyntaxToken> {\n-        if self.const_token().is_some() {\n-            self.syntax()\n-                .children_with_tokens()\n-                .filter_map(|it| it.into_token())\n-                .skip_while(|it| it.kind() != T![const])\n-                .find(|it| it.kind() == T![?])\n-        } else {\n-            support::token(&self.syntax, T![?])\n-        }\n-    }\n }\n \n pub enum VisibilityKind {\n@@ -472,3 +446,40 @@ impl ast::TokenTree {\n             .filter(|it| matches!(it.kind(), T!['}'] | T![')'] | T![']']))\n     }\n }\n+\n+impl ast::GenericParamList {\n+    pub fn lifetime_params(&self) -> impl Iterator<Item = ast::LifetimeParam> {\n+        self.generic_params().filter_map(|param| match param {\n+            ast::GenericParam::LifetimeParam(it) => Some(it),\n+            ast::GenericParam::TypeParam(_) | ast::GenericParam::ConstParam(_) => None,\n+        })\n+    }\n+    pub fn type_params(&self) -> impl Iterator<Item = ast::TypeParam> {\n+        self.generic_params().filter_map(|param| match param {\n+            ast::GenericParam::TypeParam(it) => Some(it),\n+            ast::GenericParam::LifetimeParam(_) | ast::GenericParam::ConstParam(_) => None,\n+        })\n+    }\n+    pub fn const_params(&self) -> impl Iterator<Item = ast::ConstParam> {\n+        self.generic_params().filter_map(|param| match param {\n+            ast::GenericParam::ConstParam(it) => Some(it),\n+            ast::GenericParam::TypeParam(_) | ast::GenericParam::LifetimeParam(_) => None,\n+        })\n+    }\n+}\n+\n+impl ast::DocCommentsOwner for ast::SourceFile {}\n+impl ast::DocCommentsOwner for ast::Fn {}\n+impl ast::DocCommentsOwner for ast::Struct {}\n+impl ast::DocCommentsOwner for ast::Union {}\n+impl ast::DocCommentsOwner for ast::RecordField {}\n+impl ast::DocCommentsOwner for ast::TupleField {}\n+impl ast::DocCommentsOwner for ast::Enum {}\n+impl ast::DocCommentsOwner for ast::Variant {}\n+impl ast::DocCommentsOwner for ast::Trait {}\n+impl ast::DocCommentsOwner for ast::Module {}\n+impl ast::DocCommentsOwner for ast::Static {}\n+impl ast::DocCommentsOwner for ast::Const {}\n+impl ast::DocCommentsOwner for ast::TypeAlias {}\n+impl ast::DocCommentsOwner for ast::Impl {}\n+impl ast::DocCommentsOwner for ast::MacroCall {}"}, {"sha": "3a56b1674c8d5d7be400ef76b5f5fd5f1ff75eb0", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -9,12 +9,6 @@ use crate::{\n     SyntaxToken, T,\n };\n \n-pub trait TypeAscriptionOwner: AstNode {\n-    fn ascribed_type(&self) -> Option<ast::TypeRef> {\n-        support::child(self.syntax())\n-    }\n-}\n-\n pub trait NameOwner: AstNode {\n     fn name(&self) -> Option<ast::Name> {\n         support::child(self.syntax())\n@@ -44,13 +38,13 @@ pub trait ArgListOwner: AstNode {\n }\n \n pub trait ModuleItemOwner: AstNode {\n-    fn items(&self) -> AstChildren<ast::ModuleItem> {\n+    fn items(&self) -> AstChildren<ast::Item> {\n         support::children(self.syntax())\n     }\n }\n \n-pub trait TypeParamsOwner: AstNode {\n-    fn type_param_list(&self) -> Option<ast::TypeParamList> {\n+pub trait GenericParamsOwner: AstNode {\n+    fn generic_param_list(&self) -> Option<ast::GenericParamList> {\n         support::child(self.syntax())\n     }\n "}, {"sha": "8a4d4538622bf2db4664c4140cc5bd4eadeb0867", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -187,14 +187,14 @@ impl ast::Expr {\n     }\n }\n \n-impl ast::ModuleItem {\n+impl ast::Item {\n     /// Returns `text`, parsed as an item, but only if it has no errors.\n     pub fn parse(text: &str) -> Result<Self, ()> {\n         parsing::parse_text_fragment(text, ra_parser::FragmentKind::Item)\n     }\n }\n \n-impl ast::TypeRef {\n+impl ast::Type {\n     /// Returns `text`, parsed as an type reference, but only if it has no errors.\n     pub fn parse(text: &str) -> Result<Self, ()> {\n         parsing::parse_text_fragment(text, ra_parser::FragmentKind::Type)\n@@ -255,11 +255,11 @@ fn api_walkthrough() {\n     let mut func = None;\n     for item in file.items() {\n         match item {\n-            ast::ModuleItem::FnDef(f) => func = Some(f),\n+            ast::Item::Fn(f) => func = Some(f),\n             _ => unreachable!(),\n         }\n     }\n-    let func: ast::FnDef = func.unwrap();\n+    let func: ast::Fn = func.unwrap();\n \n     // Each AST node has a bunch of getters for children. All getters return\n     // `Option`s though, to account for incomplete code. Some getters are common\n@@ -316,7 +316,7 @@ fn api_walkthrough() {\n     );\n \n     // As well as some iterator helpers:\n-    let f = expr_syntax.ancestors().find_map(ast::FnDef::cast);\n+    let f = expr_syntax.ancestors().find_map(ast::Fn::cast);\n     assert_eq!(f, Some(func));\n     assert!(expr_syntax.siblings_with_tokens(Direction::Next).any(|it| it.kind() == T!['}']));\n     assert_eq!("}, {"sha": "6d1828d203946b0d7fe9b69731ee71c593be5301", "filename": "crates/ra_syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -146,8 +146,8 @@ fn n_attached_trivias<'a>(\n     trivias: impl Iterator<Item = (SyntaxKind, &'a str)>,\n ) -> usize {\n     match kind {\n-        MACRO_CALL | CONST_DEF | TYPE_ALIAS_DEF | STRUCT_DEF | ENUM_DEF | ENUM_VARIANT | FN_DEF\n-        | TRAIT_DEF | MODULE | RECORD_FIELD_DEF | STATIC_DEF => {\n+        MACRO_CALL | CONST | TYPE_ALIAS | STRUCT | ENUM | VARIANT | FN | TRAIT | MODULE\n+        | RECORD_FIELD | STATIC => {\n             let mut res = 0;\n             let mut trivias = trivias.enumerate().peekable();\n "}, {"sha": "ca79577471321414ba7da95bfdde01e8f0cb7177", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -98,7 +98,7 @@ fn test_local_syntax_ptr() {\n     use crate::{ast, AstNode, SourceFile};\n \n     let file = SourceFile::parse(\"struct Foo { f: u32, }\").ok().unwrap();\n-    let field = file.syntax().descendants().find_map(ast::RecordFieldDef::cast).unwrap();\n+    let field = file.syntax().descendants().find_map(ast::RecordField::cast).unwrap();\n     let ptr = SyntaxNodePtr::new(field.syntax());\n     let field_syntax = ptr.to_node(file.syntax());\n     assert_eq!(field.syntax(), &field_syntax);"}, {"sha": "00b957f434772dea91a2520c585b10026ea63352", "filename": "crates/ra_syntax/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftests.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -89,7 +89,7 @@ fn item_parser_tests() {\n     fragment_parser_dir_test(\n         &[\"parser/fragments/item/ok\"],\n         &[\"parser/fragments/item/err\"],\n-        crate::ast::ModuleItem::parse,\n+        crate::ast::Item::parse,\n     );\n }\n \n@@ -98,7 +98,7 @@ fn type_parser_tests() {\n     fragment_parser_dir_test(\n         &[\"parser/fragments/type/ok\"],\n         &[\"parser/fragments/type/err\"],\n-        crate::ast::TypeRef::parse,\n+        crate::ast::Type::parse,\n     );\n }\n "}, {"sha": "2dddaf09a405fab03a475ab3f9fc9b156d90f03b", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -4,7 +4,7 @@ mod block;\n \n use crate::{\n     ast, match_ast, AstNode, SyntaxError,\n-    SyntaxKind::{BYTE, BYTE_STRING, CHAR, CONST_DEF, FN_DEF, INT_NUMBER, STRING, TYPE_ALIAS_DEF},\n+    SyntaxKind::{BYTE, BYTE_STRING, CHAR, CONST, FN, INT_NUMBER, STRING, TYPE_ALIAS},\n     SyntaxNode, SyntaxToken, TextSize, T,\n };\n use rustc_lexer::unescape::{\n@@ -91,7 +91,7 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n                 ast::Literal(it) => validate_literal(it, &mut errors),\n                 ast::BlockExpr(it) => block::validate_block_expr(it, &mut errors),\n                 ast::FieldExpr(it) => validate_numeric_name(it.name_ref(), &mut errors),\n-                ast::RecordField(it) => validate_numeric_name(it.name_ref(), &mut errors),\n+                ast::RecordExprField(it) => validate_numeric_name(it.name_ref(), &mut errors),\n                 ast::Visibility(it) => validate_visibility(it, &mut errors),\n                 ast::RangeExpr(it) => validate_range_expr(it, &mut errors),\n                 ast::PathSegment(it) => validate_path_keywords(it, &mut errors),\n@@ -200,15 +200,15 @@ fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n         None => return,\n     };\n     match parent.kind() {\n-        FN_DEF | CONST_DEF | TYPE_ALIAS_DEF => (),\n+        FN | CONST | TYPE_ALIAS => (),\n         _ => return,\n     }\n \n-    let impl_def = match parent.parent().and_then(|it| it.parent()).and_then(ast::ImplDef::cast) {\n+    let impl_def = match parent.parent().and_then(|it| it.parent()).and_then(ast::Impl::cast) {\n         Some(it) => it,\n         None => return,\n     };\n-    if impl_def.target_trait().is_some() {\n+    if impl_def.trait_().is_some() {\n         errors.push(SyntaxError::new(\"Unnecessary visibility qualifier\", vis.syntax.text_range()));\n     }\n }"}, {"sha": "ad99014688586d447f12154a5c4730bb21d3b47c", "filename": "crates/ra_syntax/src/validation/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -9,7 +9,7 @@ use crate::{\n pub(crate) fn validate_block_expr(block: ast::BlockExpr, errors: &mut Vec<SyntaxError>) {\n     if let Some(parent) = block.syntax().parent() {\n         match parent.kind() {\n-            FN_DEF | EXPR_STMT | BLOCK_EXPR => return,\n+            FN | EXPR_STMT | BLOCK_EXPR => return,\n             _ => {}\n         }\n     }"}, {"sha": "bbbf496c82de40fe356d88ccb045355f1173f6e2", "filename": "crates/ra_syntax/test_data/parser/err/0000_struct_field_missing_comma.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,14 +1,14 @@\n SOURCE_FILE@0..34\n-  STRUCT_DEF@0..34\n+  STRUCT@0..34\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    RECORD_FIELD_DEF_LIST@9..34\n+    RECORD_FIELD_LIST@9..34\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      RECORD_FIELD_DEF@15..21\n+      RECORD_FIELD@15..21\n         NAME@15..16\n           IDENT@15..16 \"a\"\n         COLON@16..17 \":\"\n@@ -19,7 +19,7 @@ SOURCE_FILE@0..34\n               NAME_REF@18..21\n                 IDENT@18..21 \"u32\"\n       WHITESPACE@21..26 \"\\n    \"\n-      RECORD_FIELD_DEF@26..32\n+      RECORD_FIELD@26..32\n         NAME@26..27\n           IDENT@26..27 \"b\"\n         COLON@27..28 \":\""}, {"sha": "6dc73bfdbae629b87f2079460814489f8fcc7cd1", "filename": "crates/ra_syntax/test_data/parser/err/0001_item_recovery_in_file.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -5,13 +5,13 @@ SOURCE_FILE@0..21\n   ERROR@3..8\n     MATCH_KW@3..8 \"match\"\n   WHITESPACE@8..10 \"\\n\\n\"\n-  STRUCT_DEF@10..21\n+  STRUCT@10..21\n     STRUCT_KW@10..16 \"struct\"\n     WHITESPACE@16..17 \" \"\n     NAME@17..18\n       IDENT@17..18 \"S\"\n     WHITESPACE@18..19 \" \"\n-    RECORD_FIELD_DEF_LIST@19..21\n+    RECORD_FIELD_LIST@19..21\n       L_CURLY@19..20 \"{\"\n       R_CURLY@20..21 \"}\"\n error 0..0: expected an item"}, {"sha": "4cfd1bce4b1739768ff4b50796e921e9b1b42a30", "filename": "crates/ra_syntax/test_data/parser/err/0002_duplicate_shebang.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -6,7 +6,7 @@ SOURCE_FILE@0..42\n     BANG@22..23 \"!\"\n   ERROR@23..24\n     SLASH@23..24 \"/\"\n-  USE_ITEM@24..28\n+  USE@24..28\n     USE_KW@24..27 \"use\"\n     ERROR@27..28\n       SLASH@27..28 \"/\""}, {"sha": "7763fad840b69062e8f7af2d4409086a4879e90b", "filename": "crates/ra_syntax/test_data/parser/err/0003_C++_semicolon.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,14 +1,14 @@\n SOURCE_FILE@0..40\n-  STRUCT_DEF@0..39\n+  STRUCT@0..39\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    RECORD_FIELD_DEF_LIST@9..39\n+    RECORD_FIELD_LIST@9..39\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      RECORD_FIELD_DEF@15..21\n+      RECORD_FIELD@15..21\n         NAME@15..16\n           IDENT@15..16 \"a\"\n         COLON@16..17 \":\"\n@@ -20,7 +20,7 @@ SOURCE_FILE@0..40\n                 IDENT@18..21 \"i32\"\n       COMMA@21..22 \",\"\n       WHITESPACE@22..27 \"\\n    \"\n-      RECORD_FIELD_DEF@27..36\n+      RECORD_FIELD@27..36\n         NAME@27..28\n           IDENT@27..28 \"b\"\n         COLON@28..29 \":\""}, {"sha": "9a0f4665efc9981009ae559a266789794427a600", "filename": "crates/ra_syntax/test_data/parser/err/0004_use_path_bad_segment.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..12\n-  USE_ITEM@0..12\n+  USE@0..12\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..11"}, {"sha": "4845a6563cb83c9bd4cfe1ff20faebba78091d0a", "filename": "crates/ra_syntax/test_data/parser/err/0005_attribute_recover.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..54\n-  FN_DEF@0..31\n+  FN@0..31\n     ATTR@0..18\n       POUND@0..1 \"#\"\n       L_BRACK@1..2 \"[\""}, {"sha": "5f85c3943ab9c95cdf531001ec28745eaa480a8a", "filename": "crates/ra_syntax/test_data/parser/err/0006_named_field_recovery.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,14 +1,14 @@\n SOURCE_FILE@0..74\n-  STRUCT_DEF@0..73\n+  STRUCT@0..73\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    RECORD_FIELD_DEF_LIST@9..73\n+    RECORD_FIELD_LIST@9..73\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      RECORD_FIELD_DEF@15..21\n+      RECORD_FIELD@15..21\n         NAME@15..16\n           IDENT@15..16 \"f\"\n         COLON@16..17 \":\"\n@@ -35,7 +35,7 @@ SOURCE_FILE@0..74\n       ERROR@42..43\n         STAR@42..43 \"*\"\n       WHITESPACE@43..48 \"\\n    \"\n-      RECORD_FIELD_DEF@48..58\n+      RECORD_FIELD@48..58\n         VISIBILITY@48..51\n           PUB_KW@48..51 \"pub\"\n         WHITESPACE@51..52 \" \"\n@@ -50,7 +50,7 @@ SOURCE_FILE@0..74\n                 IDENT@55..58 \"u32\"\n       COMMA@58..59 \",\"\n       WHITESPACE@59..64 \"\\n    \"\n-      RECORD_FIELD_DEF@64..70\n+      RECORD_FIELD@64..70\n         NAME@64..65\n           IDENT@64..65 \"z\"\n         COLON@65..66 \":\""}, {"sha": "560bfd7518602b02ddf027b2e91521a5d4afd317", "filename": "crates/ra_syntax/test_data/parser/err/0007_stray_curly_in_file.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -2,7 +2,7 @@ SOURCE_FILE@0..31\n   ERROR@0..1\n     R_CURLY@0..1 \"}\"\n   WHITESPACE@1..3 \"\\n\\n\"\n-  STRUCT_DEF@3..12\n+  STRUCT@3..12\n     STRUCT_KW@3..9 \"struct\"\n     WHITESPACE@9..10 \" \"\n     NAME@10..11\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..31\n   ERROR@14..15\n     R_CURLY@14..15 \"}\"\n   WHITESPACE@15..17 \"\\n\\n\"\n-  FN_DEF@17..27\n+  FN@17..27\n     FN_KW@17..19 \"fn\"\n     WHITESPACE@19..20 \" \"\n     NAME@20..23"}, {"sha": "1e9637c26d57f21d906a689a0bf0b286dec4ac38", "filename": "crates/ra_syntax/test_data/parser/err/0008_item_block_recovery.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..95\n-  FN_DEF@0..12\n+  FN@0..12\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -58,7 +58,7 @@ SOURCE_FILE@0..95\n     WHITESPACE@78..79 \"\\n\"\n     R_CURLY@79..80 \"}\"\n   WHITESPACE@80..82 \"\\n\\n\"\n-  FN_DEF@82..94\n+  FN@82..94\n     FN_KW@82..84 \"fn\"\n     WHITESPACE@84..85 \" \"\n     NAME@85..88"}, {"sha": "dacf71aa16514eda790ddad05628b4a39b86c91c", "filename": "crates/ra_syntax/test_data/parser/err/0009_broken_struct_type_parameter.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,10 +1,10 @@\n SOURCE_FILE@0..43\n-  STRUCT_DEF@0..11\n+  STRUCT@0..11\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8\n       IDENT@7..8 \"S\"\n-    TYPE_PARAM_LIST@8..11\n+    GENERIC_PARAM_LIST@8..11\n       L_ANGLE@8..9 \"<\"\n       ERROR@9..11\n         INT_NUMBER@9..11 \"90\"\n@@ -38,7 +38,7 @@ SOURCE_FILE@0..43\n     WHITESPACE@29..30 \"\\n\"\n     R_CURLY@30..31 \"}\"\n   WHITESPACE@31..33 \"\\n\\n\"\n-  STRUCT_DEF@33..42\n+  STRUCT@33..42\n     STRUCT_KW@33..39 \"struct\"\n     WHITESPACE@39..40 \" \"\n     NAME@40..41"}, {"sha": "e0f1d0c27499d1feaf414bb2c77a81c58e58476a", "filename": "crates/ra_syntax/test_data/parser/err/0010_unsafe_lambda_block.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..42\n-  FN_DEF@0..41\n+  FN@0..41\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..42\n       L_CURLY@10..11 \"{\"\n       WHITESPACE@11..16 \"\\n    \"\n       EXPR_STMT@16..24\n-        LAMBDA_EXPR@16..24\n+        CLOSURE_EXPR@16..24\n           PARAM_LIST@16..18\n             PIPE@16..17 \"|\"\n             PIPE@17..18 \"|\""}, {"sha": "b02d390af9b6adcdbead6beb231437be87e9298d", "filename": "crates/ra_syntax/test_data/parser/err/0011_extern_struct.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -3,7 +3,7 @@ SOURCE_FILE@0..19\n     ABI@0..6\n       EXTERN_KW@0..6 \"extern\"\n   WHITESPACE@6..7 \" \"\n-  STRUCT_DEF@7..18\n+  STRUCT@7..18\n     STRUCT_KW@7..13 \"struct\"\n     WHITESPACE@13..14 \" \"\n     NAME@14..17"}, {"sha": "f31c27633982ca337d5d4ca2f0677ea48517a4ea", "filename": "crates/ra_syntax/test_data/parser/err/0012_broken_lambda.rast", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..389\n-  FN_DEF@0..389\n+  FN@0..389\n     VISIBILITY@0..10\n       PUB_KW@0..3\n       L_PAREN@3..4\n@@ -10,7 +10,7 @@ SOURCE_FILE@0..389\n     WHITESPACE@13..14\n     NAME@14..21\n       IDENT@14..21 \"process\"\n-    TYPE_PARAM_LIST@21..38\n+    GENERIC_PARAM_LIST@21..38\n       L_ANGLE@21..22\n       LIFETIME_PARAM@22..24\n         LIFETIME@22..24 \"'a\"\n@@ -25,7 +25,7 @@ SOURCE_FILE@0..389\n           PATH_SEGMENT@29..37\n             NAME_REF@29..33\n               IDENT@29..33 \"Sink\"\n-            TYPE_ARG_LIST@33..37\n+            GENERIC_ARG_LIST@33..37\n               L_ANGLE@33..34\n               LIFETIME_ARG@34..36\n                 LIFETIME@34..36 \"'a\"\n@@ -34,12 +34,12 @@ SOURCE_FILE@0..389\n     PARAM_LIST@38..93\n       L_PAREN@38..39\n       PARAM@39..54\n-        BIND_PAT@39..46\n+        IDENT_PAT@39..46\n           NAME@39..46\n             IDENT@39..46 \"builder\"\n         COLON@46..47\n         WHITESPACE@47..48\n-        REFERENCE_TYPE@48..54\n+        REF_TYPE@48..54\n           AMP@48..49\n           MUT_KW@49..52\n           WHITESPACE@52..53\n@@ -51,12 +51,12 @@ SOURCE_FILE@0..389\n       COMMA@54..55\n       WHITESPACE@55..56\n       PARAM@56..72\n-        BIND_PAT@56..62\n+        IDENT_PAT@56..62\n           NAME@56..62\n             IDENT@56..62 \"tokens\"\n         COLON@62..63\n         WHITESPACE@63..64\n-        REFERENCE_TYPE@64..72\n+        REF_TYPE@64..72\n           AMP@64..65\n           SLICE_TYPE@65..72\n             L_BRACK@65..66\n@@ -69,7 +69,7 @@ SOURCE_FILE@0..389\n       COMMA@72..73\n       WHITESPACE@73..74\n       PARAM@74..92\n-        BIND_PAT@74..80\n+        IDENT_PAT@74..80\n           NAME@74..80\n             IDENT@74..80 \"events\"\n         COLON@80..81\n@@ -79,7 +79,7 @@ SOURCE_FILE@0..389\n             PATH_SEGMENT@82..92\n               NAME_REF@82..85\n                 IDENT@82..85 \"Vec\"\n-              TYPE_ARG_LIST@85..92\n+              GENERIC_ARG_LIST@85..92\n                 L_ANGLE@85..86\n                 TYPE_ARG@86..91\n                   PATH_TYPE@86..91\n@@ -96,7 +96,7 @@ SOURCE_FILE@0..389\n       LET_STMT@100..125\n         LET_KW@100..103\n         WHITESPACE@103..104\n-        BIND_PAT@104..120\n+        IDENT_PAT@104..120\n           MUT_KW@104..107\n           WHITESPACE@107..108\n           NAME@108..120\n@@ -111,22 +111,22 @@ SOURCE_FILE@0..389\n       LET_STMT@130..389\n         LET_KW@130..133\n         WHITESPACE@133..134\n-        BIND_PAT@134..140\n+        IDENT_PAT@134..140\n           NAME@134..140\n             IDENT@134..140 \"eat_ws\"\n         WHITESPACE@140..141\n         EQ@141..142\n         WHITESPACE@142..143\n-        LAMBDA_EXPR@143..389\n+        CLOSURE_EXPR@143..389\n           PARAM_LIST@143..388\n             PIPE@143..144\n             PARAM@144..159\n-              BIND_PAT@144..147\n+              IDENT_PAT@144..147\n                 NAME@144..147\n                   IDENT@144..147 \"idx\"\n               COLON@147..148\n               WHITESPACE@148..149\n-              REFERENCE_TYPE@149..159\n+              REF_TYPE@149..159\n                 AMP@149..150\n                 MUT_KW@150..153\n                 WHITESPACE@153..154\n@@ -172,7 +172,7 @@ SOURCE_FILE@0..389\n                     NAME_REF@188..192\n                       IDENT@188..192 \"Some\"\n                 L_PAREN@192..193\n-                BIND_PAT@193..198\n+                IDENT_PAT@193..198\n                   NAME@193..198\n                     IDENT@193..198 \"token\"\n                 R_PAREN@198..199\n@@ -185,7 +185,7 @@ SOURCE_FILE@0..389\n                 err: `expected COMMA`\n             WHITESPACE@201..202\n             PARAM@202..208\n-              BIND_PAT@202..208\n+              IDENT_PAT@202..208\n                 NAME@202..208\n                   IDENT@202..208 \"tokens\"\n                   err: `expected COMMA`\n@@ -205,7 +205,7 @@ SOURCE_FILE@0..389\n                 ERROR@213..214\n                   STAR@213..214\n                   err: `expected COMMA`\n-                BIND_PAT@214..217\n+                IDENT_PAT@214..217\n                   NAME@214..217\n                     IDENT@214..217 \"idx\"\n                 R_PAREN@217..218\n@@ -229,7 +229,7 @@ SOURCE_FILE@0..389\n                 BANG@236..237\n                 err: `expected COMMA`\n             PARAM@237..242\n-              BIND_PAT@237..242\n+              IDENT_PAT@237..242\n                 NAME@237..242\n                   IDENT@237..242 \"token\"\n                   err: `expected COMMA`\n@@ -239,7 +239,7 @@ SOURCE_FILE@0..389\n                 DOT@242..243\n                 err: `expected COMMA`\n             PARAM@243..247\n-              BIND_PAT@243..247\n+              IDENT_PAT@243..247\n                 NAME@243..247\n                   IDENT@243..247 \"kind\"\n                   err: `expected COMMA`\n@@ -265,7 +265,7 @@ SOURCE_FILE@0..389\n                 err: `expected COMMA`\n             WHITESPACE@261..278\n             PARAM@278..283\n-              BIND_PAT@278..283\n+              IDENT_PAT@278..283\n                 NAME@278..283\n                   IDENT@278..283 \"break\"\n                   err: `expected COMMA`\n@@ -282,7 +282,7 @@ SOURCE_FILE@0..389\n                 err: `expected COMMA`\n             WHITESPACE@298..311\n             PARAM@311..318\n-              BIND_PAT@311..318\n+              IDENT_PAT@311..318\n                 NAME@311..318\n                   IDENT@311..318 \"builder\"\n                   err: `expected COMMA`\n@@ -298,28 +298,28 @@ SOURCE_FILE@0..389\n                     NAME_REF@319..323\n                       IDENT@319..323 \"leaf\"\n                 L_PAREN@323..324\n-                BIND_PAT@324..329\n+                IDENT_PAT@324..329\n                   NAME@324..329\n                     IDENT@324..329 \"token\"\n                     err: `expected COMMA`\n                     err: `expected pattern`\n                 ERROR@329..330\n                   DOT@329..330\n                   err: `expected COMMA`\n-                BIND_PAT@330..334\n+                IDENT_PAT@330..334\n                   NAME@330..334\n                     IDENT@330..334 \"kind\"\n                 COMMA@334..335\n                 WHITESPACE@335..336\n-                BIND_PAT@336..341\n+                IDENT_PAT@336..341\n                   NAME@336..341\n                     IDENT@336..341 \"token\"\n                     err: `expected COMMA`\n                     err: `expected pattern`\n                 ERROR@341..342\n                   DOT@341..342\n                   err: `expected COMMA`\n-                BIND_PAT@342..345\n+                IDENT_PAT@342..345\n                   NAME@342..345\n                     IDENT@342..345 \"len\"\n                 R_PAREN@345..346\n@@ -336,7 +336,7 @@ SOURCE_FILE@0..389\n                 STAR@360..361\n                 err: `expected COMMA`\n             PARAM@361..364\n-              BIND_PAT@361..364\n+              IDENT_PAT@361..364\n                 NAME@361..364\n                   IDENT@361..364 \"idx\"\n                   err: `expected COMMA`"}, {"sha": "f48ab6e712478964bd048e3142b497abe76e304c", "filename": "crates/ra_syntax/test_data/parser/err/0013_invalid_type.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,30 +1,30 @@\n SOURCE_FILE@0..86\n-  STRUCT_DEF@0..72\n+  STRUCT@0..72\n     VISIBILITY@0..3\n       PUB_KW@0..3 \"pub\"\n     WHITESPACE@3..4 \" \"\n     STRUCT_KW@4..10 \"struct\"\n     WHITESPACE@10..11 \" \"\n     NAME@11..16\n       IDENT@11..16 \"Cache\"\n-    TUPLE_FIELD_DEF_LIST@16..72\n+    TUPLE_FIELD_LIST@16..72\n       L_PAREN@16..17 \"(\"\n       WHITESPACE@17..22 \"\\n    \"\n-      TUPLE_FIELD_DEF@22..68\n+      TUPLE_FIELD@22..68\n         PATH_TYPE@22..68\n           PATH@22..68\n             PATH_SEGMENT@22..68\n               NAME_REF@22..29\n                 IDENT@22..29 \"RefCell\"\n-              TYPE_ARG_LIST@29..68\n+              GENERIC_ARG_LIST@29..68\n                 L_ANGLE@29..30 \"<\"\n                 TYPE_ARG@30..68\n                   PATH_TYPE@30..68\n                     PATH@30..68\n                       PATH_SEGMENT@30..68\n                         NAME_REF@30..37\n                           IDENT@30..37 \"HashMap\"\n-                        TYPE_ARG_LIST@37..68\n+                        GENERIC_ARG_LIST@37..68\n                           L_ANGLE@37..38 \"<\"\n                           WHITESPACE@38..47 \"\\n        \"\n                           TYPE_ARG@47..53\n@@ -41,13 +41,13 @@ SOURCE_FILE@0..86\n                                 PATH_SEGMENT@63..68\n                                   NAME_REF@63..66\n                                     IDENT@63..66 \"Box\"\n-                                  TYPE_ARG_LIST@66..68\n+                                  GENERIC_ARG_LIST@66..68\n                                     L_ANGLE@66..67 \"<\"\n                                     TYPE_ARG@67..68\n                                       ERROR@67..68\n                                         AT@67..68 \"@\"\n       WHITESPACE@68..69 \" \"\n-      TUPLE_FIELD_DEF@69..72\n+      TUPLE_FIELD@69..72\n         PATH_TYPE@69..72\n           PATH@69..72\n             PATH_SEGMENT@69..72"}, {"sha": "a1f39b22a52b3c1528ae088ae7523d78368037f9", "filename": "crates/ra_syntax/test_data/parser/err/0014_where_no_bounds.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,10 +1,10 @@\n SOURCE_FILE@0..23\n-  FN_DEF@0..22\n+  FN@0..22\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n       IDENT@3..6 \"foo\"\n-    TYPE_PARAM_LIST@6..9\n+    GENERIC_PARAM_LIST@6..9\n       L_ANGLE@6..7 \"<\"\n       TYPE_PARAM@7..8\n         NAME@7..8"}, {"sha": "a3c25b450a9870d7b157119c1023206bde4a8203", "filename": "crates/ra_syntax/test_data/parser/err/0015_curly_in_params.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0015_curly_in_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0015_curly_in_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0015_curly_in_params.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..14\n-  FN_DEF@0..7\n+  FN@0..7\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "66157c3dce9d78ce702a3aa5f33ce55ab08b6656", "filename": "crates/ra_syntax/test_data/parser/err/0016_missing_semi.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..56\n-  FN_DEF@0..55\n+  FN@0..55\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "fe094f61c17430fa653a9c71bef64cb984bfd1f0", "filename": "crates/ra_syntax/test_data/parser/err/0017_incomplete_binexpr.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,13 +1,13 @@\n SOURCE_FILE@0..47\n-  FN_DEF@0..46\n+  FN@0..46\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n       IDENT@3..6 \"foo\"\n     PARAM_LIST@6..16\n       L_PAREN@6..7 \"(\"\n       PARAM@7..15\n-        BIND_PAT@7..10\n+        IDENT_PAT@7..10\n           NAME@7..10\n             IDENT@7..10 \"foo\"\n         COLON@10..11 \":\"\n@@ -25,7 +25,7 @@ SOURCE_FILE@0..47\n       LET_STMT@23..36\n         LET_KW@23..26 \"let\"\n         WHITESPACE@26..27 \" \"\n-        BIND_PAT@27..30\n+        IDENT_PAT@27..30\n           NAME@27..30\n             IDENT@27..30 \"bar\"\n         WHITESPACE@30..31 \" \""}, {"sha": "72939fc981a8c5533a79f17b6b6ce1b2698a29a6", "filename": "crates/ra_syntax/test_data/parser/err/0018_incomplete_fn.rast", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..183\n-  IMPL_DEF@0..182\n+  IMPL@0..182\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..13\n@@ -8,10 +8,10 @@ SOURCE_FILE@0..183\n           NAME_REF@5..13\n             IDENT@5..13 \"FnScopes\"\n     WHITESPACE@13..14 \" \"\n-    ITEM_LIST@14..182\n+    ASSOC_ITEM_LIST@14..182\n       L_CURLY@14..15 \"{\"\n       WHITESPACE@15..20 \"\\n    \"\n-      FN_DEF@20..161\n+      FN@20..161\n         FN_KW@20..22 \"fn\"\n         WHITESPACE@22..23 \" \"\n         NAME@23..32\n@@ -38,7 +38,7 @@ SOURCE_FILE@0..183\n           LET_STMT@57..85\n             LET_KW@57..60 \"let\"\n             WHITESPACE@60..61 \" \"\n-            BIND_PAT@61..64\n+            IDENT_PAT@61..64\n               NAME@61..64\n                 IDENT@61..64 \"res\"\n             WHITESPACE@64..65 \" \"\n@@ -75,16 +75,16 @@ SOURCE_FILE@0..183\n               IDENT@106..110 \"push\"\n             ARG_LIST@110..155\n               L_PAREN@110..111 \"(\"\n-              RECORD_LIT@111..154\n+              RECORD_EXPR@111..154\n                 PATH@111..120\n                   PATH_SEGMENT@111..120\n                     NAME_REF@111..120\n                       IDENT@111..120 \"ScopeData\"\n                 WHITESPACE@120..121 \" \"\n-                RECORD_FIELD_LIST@121..154\n+                RECORD_EXPR_FIELD_LIST@121..154\n                   L_CURLY@121..122 \"{\"\n                   WHITESPACE@122..123 \" \"\n-                  RECORD_FIELD@123..135\n+                  RECORD_EXPR_FIELD@123..135\n                     NAME_REF@123..129\n                       IDENT@123..129 \"parent\"\n                     COLON@129..130 \":\"\n@@ -96,7 +96,7 @@ SOURCE_FILE@0..183\n                             IDENT@131..135 \"None\"\n                   COMMA@135..136 \",\"\n                   WHITESPACE@136..137 \" \"\n-                  RECORD_FIELD@137..152\n+                  RECORD_EXPR_FIELD@137..152\n                     NAME_REF@137..144\n                       IDENT@137..144 \"entries\"\n                     COLON@144..145 \":\"\n@@ -116,7 +116,7 @@ SOURCE_FILE@0..183\n           WHITESPACE@155..160 \"\\n    \"\n           R_CURLY@160..161 \"}\"\n       WHITESPACE@161..167 \"\\n\\n    \"\n-      FN_DEF@167..180\n+      FN@167..180\n         FN_KW@167..169 \"fn\"\n         WHITESPACE@169..170 \" \"\n         NAME@170..180"}, {"sha": "72c05bd964a9a45c9462d7567fc94f1da7e6b6c6", "filename": "crates/ra_syntax/test_data/parser/err/0019_let_recover.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..139\n-  FN_DEF@0..138\n+  FN@0..138\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..139\n       LET_STMT@15..24\n         LET_KW@15..18 \"let\"\n         WHITESPACE@18..19 \" \"\n-        BIND_PAT@19..22\n+        IDENT_PAT@19..22\n           NAME@19..22\n             IDENT@19..22 \"foo\"\n         WHITESPACE@22..23 \" \"\n@@ -23,7 +23,7 @@ SOURCE_FILE@0..139\n       LET_STMT@29..41\n         LET_KW@29..32 \"let\"\n         WHITESPACE@32..33 \" \"\n-        BIND_PAT@33..36\n+        IDENT_PAT@33..36\n           NAME@33..36\n             IDENT@33..36 \"bar\"\n         WHITESPACE@36..37 \" \"\n@@ -39,7 +39,7 @@ SOURCE_FILE@0..139\n       LET_STMT@54..67\n         LET_KW@54..57 \"let\"\n         WHITESPACE@57..58 \" \"\n-        BIND_PAT@58..61\n+        IDENT_PAT@58..61\n           NAME@58..61\n             IDENT@58..61 \"baz\"\n         WHITESPACE@61..62 \" \""}, {"sha": "6f6feba5a833e02c96a34bb7d3ba52d5013696fe", "filename": "crates/ra_syntax/test_data/parser/err/0020_fn_recover.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,8 +1,8 @@\n SOURCE_FILE@0..16\n-  FN_DEF@0..2\n+  FN@0..2\n     FN_KW@0..2 \"fn\"\n   WHITESPACE@2..4 \"\\n\\n\"\n-  FN_DEF@4..15\n+  FN@4..15\n     FN_KW@4..6 \"fn\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..10"}, {"sha": "b32845537709290e1c28550ef7b7a3b6efab9569", "filename": "crates/ra_syntax/test_data/parser/err/0021_incomplete_param.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,13 +1,13 @@\n SOURCE_FILE@0..22\n-  FN_DEF@0..21\n+  FN@0..21\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n       IDENT@3..6 \"foo\"\n     PARAM_LIST@6..17\n       L_PAREN@6..7 \"(\"\n       PARAM@7..13\n-        BIND_PAT@7..8\n+        IDENT_PAT@7..8\n           NAME@7..8\n             IDENT@7..8 \"x\"\n         COLON@8..9 \":\"\n@@ -20,7 +20,7 @@ SOURCE_FILE@0..22\n       COMMA@13..14 \",\"\n       WHITESPACE@14..15 \" \"\n       PARAM@15..16\n-        BIND_PAT@15..16\n+        IDENT_PAT@15..16\n           NAME@15..16\n             IDENT@15..16 \"y\"\n       R_PAREN@16..17 \")\""}, {"sha": "71fb19783ad155005f3f666be64b4124998a1e1c", "filename": "crates/ra_syntax/test_data/parser/err/0022_bad_exprs.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..112\n-  FN_DEF@0..33\n+  FN@0..33\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..4\n@@ -28,7 +28,7 @@ SOURCE_FILE@0..112\n         ERROR@17..18\n           COMMA@17..18 \",\"\n       WHITESPACE@18..19 \" \"\n-      STRUCT_DEF@19..26\n+      STRUCT@19..26\n         STRUCT_KW@19..25 \"struct\"\n         ERROR@25..26\n           COMMA@25..26 \",\"\n@@ -40,7 +40,7 @@ SOURCE_FILE@0..112\n       WHITESPACE@31..32 \" \"\n       R_CURLY@32..33 \"}\"\n   WHITESPACE@33..34 \"\\n\"\n-  FN_DEF@34..68\n+  FN@34..68\n     FN_KW@34..36 \"fn\"\n     WHITESPACE@36..37 \" \"\n     NAME@37..38\n@@ -75,7 +75,7 @@ SOURCE_FILE@0..112\n         ERROR@54..55\n           COMMA@54..55 \",\"\n       WHITESPACE@55..56 \" \"\n-      IMPL_DEF@56..60\n+      IMPL@56..60\n         IMPL_KW@56..60 \"impl\"\n       EXPR_STMT@60..61\n         ERROR@60..61\n@@ -88,7 +88,7 @@ SOURCE_FILE@0..112\n       WHITESPACE@66..67 \" \"\n       R_CURLY@67..68 \"}\"\n   WHITESPACE@68..69 \"\\n\"\n-  FN_DEF@69..111\n+  FN@69..111\n     FN_KW@69..71 \"fn\"\n     WHITESPACE@71..72 \" \"\n     NAME@72..73\n@@ -133,7 +133,7 @@ SOURCE_FILE@0..112\n         ERROR@96..97\n           COMMA@96..97 \",\"\n       WHITESPACE@97..98 \" \"\n-      TRAIT_DEF@98..104\n+      TRAIT@98..104\n         TRAIT_KW@98..103 \"trait\"\n         ERROR@103..104\n           COMMA@103..104 \",\""}, {"sha": "5ffefd74290fba04506ad79984f4704ccae13540", "filename": "crates/ra_syntax/test_data/parser/err/0023_mismatched_paren.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..94\n-  FN_DEF@0..55\n+  FN@0..55\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7"}, {"sha": "e3be6b22e11ad8b0792806b9a3ca5be82f3513c1", "filename": "crates/ra_syntax/test_data/parser/err/0024_many_type_parens.rast", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,10 +1,10 @@\n SOURCE_FILE@0..240\n-  FN_DEF@0..53\n+  FN@0..53\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..4\n       IDENT@3..4 \"f\"\n-    TYPE_PARAM_LIST@4..48\n+    GENERIC_PARAM_LIST@4..48\n       L_ANGLE@4..5 \"<\"\n       TYPE_PARAM@5..47\n         NAME@5..6\n@@ -39,7 +39,7 @@ SOURCE_FILE@0..240\n             L_PAREN@28..29 \"(\"\n             FOR_TYPE@29..46\n               FOR_KW@29..32 \"for\"\n-              TYPE_PARAM_LIST@32..36\n+              GENERIC_PARAM_LIST@32..36\n                 L_ANGLE@32..33 \"<\"\n                 LIFETIME_PARAM@33..35\n                   LIFETIME@33..35 \"\\'a\"\n@@ -50,7 +50,7 @@ SOURCE_FILE@0..240\n                   PATH_SEGMENT@37..46\n                     NAME_REF@37..42\n                       IDENT@37..42 \"Trait\"\n-                    TYPE_ARG_LIST@42..46\n+                    GENERIC_ARG_LIST@42..46\n                       L_ANGLE@42..43 \"<\"\n                       LIFETIME_ARG@43..45\n                         LIFETIME@43..45 \"\\'a\"\n@@ -65,7 +65,7 @@ SOURCE_FILE@0..240\n       L_CURLY@51..52 \"{\"\n       R_CURLY@52..53 \"}\"\n   WHITESPACE@53..55 \"\\n\\n\"\n-  FN_DEF@55..239\n+  FN@55..239\n     FN_KW@55..57 \"fn\"\n     WHITESPACE@57..58 \" \"\n     NAME@58..62\n@@ -80,7 +80,7 @@ SOURCE_FILE@0..240\n       LET_STMT@71..121\n         LET_KW@71..74 \"let\"\n         WHITESPACE@74..75 \" \"\n-        PLACEHOLDER_PAT@75..76\n+        WILDCARD_PAT@75..76\n           UNDERSCORE@75..76 \"_\"\n         COLON@76..77 \":\"\n         WHITESPACE@77..78 \" \"\n@@ -92,7 +92,7 @@ SOURCE_FILE@0..240\n                   PATH_SEGMENT@78..88\n                     NAME_REF@78..81\n                       IDENT@78..81 \"Box\"\n-                    TYPE_ARG_LIST@81..88\n+                    GENERIC_ARG_LIST@81..88\n                       L_ANGLE@81..82 \"<\"\n                       TYPE_ARG@82..88\n                         PAREN_TYPE@82..88\n@@ -122,7 +122,7 @@ SOURCE_FILE@0..240\n               L_PAREN@102..103 \"(\"\n               FOR_TYPE@103..120\n                 FOR_KW@103..106 \"for\"\n-                TYPE_PARAM_LIST@106..110\n+                GENERIC_PARAM_LIST@106..110\n                   L_ANGLE@106..107 \"<\"\n                   LIFETIME_PARAM@107..109\n                     LIFETIME@107..109 \"\\'a\"\n@@ -133,7 +133,7 @@ SOURCE_FILE@0..240\n                     PATH_SEGMENT@111..120\n                       NAME_REF@111..116\n                         IDENT@111..116 \"Trait\"\n-                      TYPE_ARG_LIST@116..120\n+                      GENERIC_ARG_LIST@116..120\n                         L_ANGLE@116..117 \"<\"\n                         LIFETIME_ARG@117..119\n                           LIFETIME@117..119 \"\\'a\"\n@@ -147,7 +147,7 @@ SOURCE_FILE@0..240\n       LET_STMT@128..141\n         LET_KW@128..131 \"let\"\n         WHITESPACE@131..132 \" \"\n-        PLACEHOLDER_PAT@132..133\n+        WILDCARD_PAT@132..133\n           UNDERSCORE@132..133 \"_\"\n         COLON@133..134 \":\"\n         WHITESPACE@134..135 \" \"\n@@ -156,7 +156,7 @@ SOURCE_FILE@0..240\n             PATH_SEGMENT@135..141\n               NAME_REF@135..138\n                 IDENT@135..138 \"Box\"\n-              TYPE_ARG_LIST@138..141\n+              GENERIC_ARG_LIST@138..141\n                 L_ANGLE@138..139 \"<\"\n                 TYPE_ARG@139..141\n                   PAREN_TYPE@139..141\n@@ -223,7 +223,7 @@ SOURCE_FILE@0..240\n       LET_STMT@185..235\n         LET_KW@185..188 \"let\"\n         WHITESPACE@188..189 \" \"\n-        PLACEHOLDER_PAT@189..190\n+        WILDCARD_PAT@189..190\n           UNDERSCORE@189..190 \"_\"\n         COLON@190..191 \":\"\n         WHITESPACE@191..192 \" \"\n@@ -235,14 +235,14 @@ SOURCE_FILE@0..240\n                   PATH_SEGMENT@192..215\n                     NAME_REF@192..195\n                       IDENT@192..195 \"Box\"\n-                    TYPE_ARG_LIST@195..215\n+                    GENERIC_ARG_LIST@195..215\n                       L_ANGLE@195..196 \"<\"\n                       TYPE_ARG@196..215\n                         PAREN_TYPE@196..215\n                           L_PAREN@196..197 \"(\"\n                           FOR_TYPE@197..214\n                             FOR_KW@197..200 \"for\"\n-                            TYPE_PARAM_LIST@200..204\n+                            GENERIC_PARAM_LIST@200..204\n                               L_ANGLE@200..201 \"<\"\n                               LIFETIME_PARAM@201..203\n                                 LIFETIME@201..203 \"\\'a\"\n@@ -253,7 +253,7 @@ SOURCE_FILE@0..240\n                                 PATH_SEGMENT@205..214\n                                   NAME_REF@205..210\n                                     IDENT@205..210 \"Trait\"\n-                                  TYPE_ARG_LIST@210..214\n+                                  GENERIC_ARG_LIST@210..214\n                                     L_ANGLE@210..211 \"<\"\n                                     LIFETIME_ARG@211..213\n                                       LIFETIME@211..213 \"\\'a\""}, {"sha": "83fc9fe776c015bdea4f8d70bb6374ff4c4ece62", "filename": "crates/ra_syntax/test_data/parser/err/0025_nope.rast", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..575\n-  FN_DEF@0..574\n+  FN@0..574\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7\n@@ -11,26 +11,26 @@ SOURCE_FILE@0..575\n     BLOCK_EXPR@10..574\n       L_CURLY@10..11 \"{\"\n       WHITESPACE@11..16 \"\\n    \"\n-      ENUM_DEF@16..152\n+      ENUM@16..152\n         ENUM_KW@16..20 \"enum\"\n         WHITESPACE@20..21 \" \"\n         NAME@21..25\n           IDENT@21..25 \"Test\"\n         WHITESPACE@25..26 \" \"\n-        ENUM_VARIANT_LIST@26..152\n+        VARIANT_LIST@26..152\n           L_CURLY@26..27 \"{\"\n           WHITESPACE@27..36 \"\\n        \"\n-          ENUM_VARIANT@36..40\n+          VARIANT@36..40\n             NAME@36..40\n               IDENT@36..40 \"Var1\"\n           COMMA@40..41 \",\"\n           WHITESPACE@41..50 \"\\n        \"\n-          ENUM_VARIANT@50..62\n+          VARIANT@50..62\n             NAME@50..54\n               IDENT@50..54 \"Var2\"\n-            TUPLE_FIELD_DEF_LIST@54..62\n+            TUPLE_FIELD_LIST@54..62\n               L_PAREN@54..55 \"(\"\n-              TUPLE_FIELD_DEF@55..61\n+              TUPLE_FIELD@55..61\n                 PATH_TYPE@55..61\n                   PATH@55..61\n                     PATH_SEGMENT@55..61\n@@ -39,14 +39,14 @@ SOURCE_FILE@0..575\n               R_PAREN@61..62 \")\"\n           COMMA@62..63 \",\"\n           WHITESPACE@63..72 \"\\n        \"\n-          ENUM_VARIANT@72..145\n+          VARIANT@72..145\n             NAME@72..76\n               IDENT@72..76 \"Var3\"\n             WHITESPACE@76..77 \" \"\n-            RECORD_FIELD_DEF_LIST@77..145\n+            RECORD_FIELD_LIST@77..145\n               L_CURLY@77..78 \"{\"\n               WHITESPACE@78..91 \"\\n            \"\n-              RECORD_FIELD_DEF@91..95\n+              RECORD_FIELD@91..95\n                 NAME@91..94\n                   IDENT@91..94 \"abc\"\n                 COLON@94..95 \":\"\n@@ -69,7 +69,7 @@ SOURCE_FILE@0..575\n       LET_STMT@176..186\n         LET_KW@176..179 \"let\"\n         WHITESPACE@179..180 \" \"\n-        BIND_PAT@180..181\n+        IDENT_PAT@180..181\n           NAME@180..181\n             IDENT@180..181 \"a\"\n         WHITESPACE@181..182 \" \"\n@@ -79,39 +79,39 @@ SOURCE_FILE@0..575\n           INT_NUMBER@184..185 \"1\"\n         SEMICOLON@185..186 \";\"\n       WHITESPACE@186..191 \"\\n    \"\n-      ENUM_DEF@191..223\n+      ENUM@191..223\n         ENUM_KW@191..195 \"enum\"\n         WHITESPACE@195..196 \" \"\n         NAME@196..201\n           IDENT@196..201 \"Test2\"\n         WHITESPACE@201..202 \" \"\n-        ENUM_VARIANT_LIST@202..223\n+        VARIANT_LIST@202..223\n           L_CURLY@202..203 \"{\"\n           WHITESPACE@203..212 \"\\n        \"\n-          ENUM_VARIANT@212..216\n+          VARIANT@212..216\n             NAME@212..216\n               IDENT@212..216 \"Fine\"\n           COMMA@216..217 \",\"\n           WHITESPACE@217..222 \"\\n    \"\n           R_CURLY@222..223 \"}\"\n       WHITESPACE@223..229 \"\\n\\n    \"\n-      ENUM_DEF@229..300\n+      ENUM@229..300\n         ENUM_KW@229..233 \"enum\"\n         WHITESPACE@233..234 \" \"\n         NAME@234..239\n           IDENT@234..239 \"Test3\"\n         WHITESPACE@239..240 \" \"\n-        ENUM_VARIANT_LIST@240..300\n+        VARIANT_LIST@240..300\n           L_CURLY@240..241 \"{\"\n           WHITESPACE@241..250 \"\\n        \"\n-          ENUM_VARIANT@250..293\n+          VARIANT@250..293\n             NAME@250..259\n               IDENT@250..259 \"StillFine\"\n             WHITESPACE@259..260 \" \"\n-            RECORD_FIELD_DEF_LIST@260..293\n+            RECORD_FIELD_LIST@260..293\n               L_CURLY@260..261 \"{\"\n               WHITESPACE@261..274 \"\\n            \"\n-              RECORD_FIELD_DEF@274..282\n+              RECORD_FIELD@274..282\n                 NAME@274..277\n                   IDENT@274..277 \"def\"\n                 COLON@277..278 \":\"\n@@ -132,23 +132,23 @@ SOURCE_FILE@0..575\n         BLOCK_EXPR@306..459\n           L_CURLY@306..307 \"{\"\n           WHITESPACE@307..316 \"\\n        \"\n-          ENUM_DEF@316..453\n+          ENUM@316..453\n             COMMENT@316..329 \"// fail again\"\n             WHITESPACE@329..338 \"\\n        \"\n             ENUM_KW@338..342 \"enum\"\n             WHITESPACE@342..343 \" \"\n             NAME@343..348\n               IDENT@343..348 \"Test4\"\n             WHITESPACE@348..349 \" \"\n-            ENUM_VARIANT_LIST@349..453\n+            VARIANT_LIST@349..453\n               L_CURLY@349..350 \"{\"\n               WHITESPACE@350..363 \"\\n            \"\n-              ENUM_VARIANT@363..372\n+              VARIANT@363..372\n                 NAME@363..367\n                   IDENT@363..367 \"Nope\"\n-                TUPLE_FIELD_DEF_LIST@367..372\n+                TUPLE_FIELD_LIST@367..372\n                   L_PAREN@367..368 \"(\"\n-                  TUPLE_FIELD_DEF@368..371\n+                  TUPLE_FIELD@368..371\n                     PATH_TYPE@368..371\n                       PATH@368..371\n                         PATH_SEGMENT@368..371\n@@ -175,7 +175,7 @@ SOURCE_FILE@0..575\n       LET_STMT@491..510\n         LET_KW@491..494 \"let\"\n         WHITESPACE@494..495 \" \"\n-        BIND_PAT@495..505\n+        IDENT_PAT@495..505\n           NAME@495..505\n             IDENT@495..505 \"bad_syntax\"\n         WHITESPACE@505..506 \" \""}, {"sha": "1b08c834eb8224fe0b01c96930358b97dbbc50ec", "filename": "crates/ra_syntax/test_data/parser/err/0026_imp_recovery.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,7 +1,7 @@\n SOURCE_FILE@0..38\n-  IMPL_DEF@0..14\n+  IMPL@0..14\n     IMPL_KW@0..4 \"impl\"\n-    TYPE_PARAM_LIST@4..14\n+    GENERIC_PARAM_LIST@4..14\n       L_ANGLE@4..5 \"<\"\n       TYPE_PARAM@5..13\n         NAME@5..6\n@@ -17,9 +17,9 @@ SOURCE_FILE@0..38\n                     IDENT@8..13 \"Clone\"\n       R_ANGLE@13..14 \">\"\n   WHITESPACE@14..15 \"\\n\"\n-  IMPL_DEF@15..37\n+  IMPL@15..37\n     IMPL_KW@15..19 \"impl\"\n-    TYPE_PARAM_LIST@19..22\n+    GENERIC_PARAM_LIST@19..22\n       L_ANGLE@19..20 \"<\"\n       TYPE_PARAM@20..21\n         NAME@20..21\n@@ -31,7 +31,7 @@ SOURCE_FILE@0..38\n         PATH_SEGMENT@23..34\n           NAME_REF@23..31\n             IDENT@23..31 \"OnceCell\"\n-          TYPE_ARG_LIST@31..34\n+          GENERIC_ARG_LIST@31..34\n             L_ANGLE@31..32 \"<\"\n             TYPE_ARG@32..33\n               PATH_TYPE@32..33\n@@ -41,7 +41,7 @@ SOURCE_FILE@0..38\n                       IDENT@32..33 \"T\"\n             R_ANGLE@33..34 \">\"\n     WHITESPACE@34..35 \" \"\n-    ITEM_LIST@35..37\n+    ASSOC_ITEM_LIST@35..37\n       L_CURLY@35..36 \"{\"\n       R_CURLY@36..37 \"}\"\n   WHITESPACE@37..38 \"\\n\""}, {"sha": "a8e42e6eaaece32f7d872826fe3ccb7f5ac0c909", "filename": "crates/ra_syntax/test_data/parser/err/0027_incomplere_where_for.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..30\n-  FN_DEF@0..29\n+  FN@0..29\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -13,7 +13,7 @@ SOURCE_FILE@0..30\n       WHITESPACE@18..19 \" \"\n       WHERE_PRED@19..26\n         FOR_KW@19..22 \"for\"\n-        TYPE_PARAM_LIST@22..26\n+        GENERIC_PARAM_LIST@22..26\n           L_ANGLE@22..23 \"<\"\n           LIFETIME_PARAM@23..25\n             LIFETIME@23..25 \"\\'a\""}, {"sha": "c6402cdd8478c6c5755eb4bd41ff1ecf8ce933fa", "filename": "crates/ra_syntax/test_data/parser/err/0029_field_completion.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,13 +1,13 @@\n SOURCE_FILE@0..24\n-  FN_DEF@0..23\n+  FN@0..23\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n       IDENT@3..6 \"foo\"\n     PARAM_LIST@6..12\n       L_PAREN@6..7 \"(\"\n       PARAM@7..11\n-        BIND_PAT@7..8\n+        IDENT_PAT@7..8\n           NAME@7..8\n             IDENT@7..8 \"a\"\n         COLON@8..9 \":\""}, {"sha": "a443b37db17e47028eb0d45410d0531d9cf71ac0", "filename": "crates/ra_syntax/test_data/parser/err/0031_block_inner_attrs.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0031_block_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0031_block_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0031_block_inner_attrs.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..350\n-  FN_DEF@0..349\n+  FN@0..349\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..8\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..350\n       LET_STMT@17..129\n         LET_KW@17..20 \"let\"\n         WHITESPACE@20..21 \" \"\n-        BIND_PAT@21..26\n+        IDENT_PAT@21..26\n           NAME@21..26\n             IDENT@21..26 \"inner\"\n         WHITESPACE@26..27 \" \""}, {"sha": "672dd054ac588b043d79bc2177bc0e1b0b04f710", "filename": "crates/ra_syntax/test_data/parser/err/0032_match_arms_inner_attrs.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..293\n-  FN_DEF@0..292\n+  FN@0..292\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -23,7 +23,7 @@ SOURCE_FILE@0..293\n             L_CURLY@24..25 \"{\"\n             WHITESPACE@25..34 \"\\n        \"\n             MATCH_ARM@34..41\n-              PLACEHOLDER_PAT@34..35\n+              WILDCARD_PAT@34..35\n                 UNDERSCORE@34..35 \"_\"\n               WHITESPACE@35..36 \" \"\n               FAT_ARROW@36..38 \"=>\"\n@@ -54,7 +54,7 @@ SOURCE_FILE@0..293\n                 R_BRACK@77..78 \"]\"\n             WHITESPACE@78..87 \"\\n        \"\n             MATCH_ARM@87..94\n-              PLACEHOLDER_PAT@87..88\n+              WILDCARD_PAT@87..88\n                 UNDERSCORE@87..88 \"_\"\n               WHITESPACE@88..89 \" \"\n               FAT_ARROW@89..91 \"=>\"\n@@ -78,7 +78,7 @@ SOURCE_FILE@0..293\n             L_CURLY@116..117 \"{\"\n             WHITESPACE@117..126 \"\\n        \"\n             MATCH_ARM@126..133\n-              PLACEHOLDER_PAT@126..127\n+              WILDCARD_PAT@126..127\n                 UNDERSCORE@126..127 \"_\"\n               WHITESPACE@127..128 \" \"\n               FAT_ARROW@128..130 \"=>\"\n@@ -89,7 +89,7 @@ SOURCE_FILE@0..293\n             COMMA@133..134 \",\"\n             WHITESPACE@134..143 \"\\n        \"\n             MATCH_ARM@143..150\n-              PLACEHOLDER_PAT@143..144\n+              WILDCARD_PAT@143..144\n                 UNDERSCORE@143..144 \"_\"\n               WHITESPACE@144..145 \" \"\n               FAT_ARROW@145..147 \"=>\"\n@@ -165,7 +165,7 @@ SOURCE_FILE@0..293\n               R_BRACK@249..250 \"]\"\n           WHITESPACE@250..259 \"\\n        \"\n           MATCH_ARM@259..266\n-            PLACEHOLDER_PAT@259..260\n+            WILDCARD_PAT@259..260\n               UNDERSCORE@259..260 \"_\"\n             WHITESPACE@260..261 \" \"\n             FAT_ARROW@261..263 \"=>\"\n@@ -176,7 +176,7 @@ SOURCE_FILE@0..293\n           COMMA@266..267 \",\"\n           WHITESPACE@267..276 \"\\n        \"\n           MATCH_ARM@276..283\n-            PLACEHOLDER_PAT@276..277\n+            WILDCARD_PAT@276..277\n               UNDERSCORE@276..277 \"_\"\n             WHITESPACE@277..278 \" \"\n             FAT_ARROW@278..280 \"=>\""}, {"sha": "33bb085e9186d42ed440225fc47173e2ec646793", "filename": "crates/ra_syntax/test_data/parser/err/0033_match_arms_outer_attrs.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..89\n-  FN_DEF@0..88\n+  FN@0..88\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -22,7 +22,7 @@ SOURCE_FILE@0..89\n           L_CURLY@24..25 \"{\"\n           WHITESPACE@25..34 \"\\n        \"\n           MATCH_ARM@34..41\n-            PLACEHOLDER_PAT@34..35\n+            WILDCARD_PAT@34..35\n               UNDERSCORE@34..35 \"_\"\n             WHITESPACE@35..36 \" \"\n             FAT_ARROW@36..38 \"=>\"\n@@ -33,7 +33,7 @@ SOURCE_FILE@0..89\n           COMMA@41..42 \",\"\n           WHITESPACE@42..51 \"\\n        \"\n           MATCH_ARM@51..58\n-            PLACEHOLDER_PAT@51..52\n+            WILDCARD_PAT@51..52\n               UNDERSCORE@51..52 \"_\"\n             WHITESPACE@52..53 \" \"\n             FAT_ARROW@53..55 \"=>\""}, {"sha": "d9d49bfb5ff32955fbf2c13e67db029c7b2a5261", "filename": "crates/ra_syntax/test_data/parser/err/0034_bad_box_pattern.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..91\n-  FN_DEF@0..89\n+  FN@0..89\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..91\n       LET_STMT@16..27\n         LET_KW@16..19 \"let\"\n         WHITESPACE@19..20 \" \"\n-        BIND_PAT@20..27\n+        IDENT_PAT@20..27\n           REF_KW@20..23 \"ref\"\n           WHITESPACE@23..24 \" \"\n           ERROR@24..27\n@@ -38,7 +38,7 @@ SOURCE_FILE@0..91\n       LET_STMT@40..51\n         LET_KW@40..43 \"let\"\n         WHITESPACE@43..44 \" \"\n-        BIND_PAT@44..51\n+        IDENT_PAT@44..51\n           MUT_KW@44..47 \"mut\"\n           WHITESPACE@47..48 \" \"\n           ERROR@48..51\n@@ -62,7 +62,7 @@ SOURCE_FILE@0..91\n       LET_STMT@64..79\n         LET_KW@64..67 \"let\"\n         WHITESPACE@67..68 \" \"\n-        BIND_PAT@68..79\n+        IDENT_PAT@68..79\n           REF_KW@68..71 \"ref\"\n           WHITESPACE@71..72 \" \"\n           MUT_KW@72..75 \"mut\""}, {"sha": "2f03709ebad829646125354ea8156dacf38e1bfc", "filename": "crates/ra_syntax/test_data/parser/err/0035_use_recover.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..48\n-  USE_ITEM@0..13\n+  USE@0..13\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..12\n@@ -14,10 +14,10 @@ SOURCE_FILE@0..48\n             IDENT@9..12 \"bar\"\n     SEMICOLON@12..13 \";\"\n   WHITESPACE@13..14 \"\\n\"\n-  USE_ITEM@14..17\n+  USE@14..17\n     USE_KW@14..17 \"use\"\n   WHITESPACE@17..18 \"\\n\"\n-  USE_ITEM@18..33\n+  USE@18..33\n     USE_KW@18..21 \"use\"\n     WHITESPACE@21..22 \" \"\n     USE_TREE@22..32\n@@ -31,10 +31,10 @@ SOURCE_FILE@0..48\n             IDENT@29..32 \"baz\"\n     SEMICOLON@32..33 \";\"\n   WHITESPACE@33..34 \"\\n\"\n-  USE_ITEM@34..37\n+  USE@34..37\n     USE_KW@34..37 \"use\"\n   WHITESPACE@37..38 \"\\n\"\n-  FN_DEF@38..47\n+  FN@38..47\n     FN_KW@38..40 \"fn\"\n     WHITESPACE@40..41 \" \"\n     NAME@41..42"}, {"sha": "ef6172f8a1ad0991e92a23fa784581a17d4238e2", "filename": "crates/ra_syntax/test_data/parser/err/0036_partial_use.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..37\n-  USE_ITEM@0..36\n+  USE@0..36\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..36"}, {"sha": "faf87d6e5cc78e4109362fe6182bcf4c9c5bf2fa", "filename": "crates/ra_syntax/test_data/parser/err/0037_visibility_in_traits.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..118\n-  IMPL_DEF@0..117\n+  IMPL@0..117\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6\n@@ -14,10 +14,10 @@ SOURCE_FILE@0..118\n       L_PAREN@11..12 \"(\"\n       R_PAREN@12..13 \")\"\n     WHITESPACE@13..14 \" \"\n-    ITEM_LIST@14..117\n+    ASSOC_ITEM_LIST@14..117\n       L_CURLY@14..15 \"{\"\n       WHITESPACE@15..20 \"\\n    \"\n-      FN_DEF@20..31\n+      FN@20..31\n         FN_KW@20..22 \"fn\"\n         WHITESPACE@22..23 \" \"\n         NAME@23..26\n@@ -30,7 +30,7 @@ SOURCE_FILE@0..118\n           L_CURLY@29..30 \"{\"\n           R_CURLY@30..31 \"}\"\n       WHITESPACE@31..36 \"\\n    \"\n-      FN_DEF@36..51\n+      FN@36..51\n         VISIBILITY@36..39\n           PUB_KW@36..39 \"pub\"\n         WHITESPACE@39..40 \" \"\n@@ -46,7 +46,7 @@ SOURCE_FILE@0..118\n           L_CURLY@49..50 \"{\"\n           R_CURLY@50..51 \"}\"\n       WHITESPACE@51..56 \"\\n    \"\n-      TYPE_ALIAS_DEF@56..81\n+      TYPE_ALIAS@56..81\n         VISIBILITY@56..66\n           PUB_KW@56..59 \"pub\"\n           L_PAREN@59..60 \"(\"\n@@ -65,7 +65,7 @@ SOURCE_FILE@0..118\n           R_PAREN@79..80 \")\"\n         SEMICOLON@80..81 \";\"\n       WHITESPACE@81..86 \"\\n    \"\n-      CONST_DEF@86..115\n+      CONST@86..115\n         VISIBILITY@86..96\n           PUB_KW@86..89 \"pub\"\n           L_PAREN@89..90 \"(\""}, {"sha": "bed7ad6c33211323fb8938d12b9485379d6edeca", "filename": "crates/ra_syntax/test_data/parser/err/0038_endless_inclusive_range.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..33\n-  FN_DEF@0..32\n+  FN@0..32\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7"}, {"sha": "a9c5b70fd3d85abeb6810cd7e2cac8a920b38423", "filename": "crates/ra_syntax/test_data/parser/err/0039_lambda_recovery.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..83\n-  FN_DEF@0..82\n+  FN@0..82\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -49,11 +49,11 @@ SOURCE_FILE@0..83\n               IDENT@48..51 \"map\"\n             ARG_LIST@51..57\n               L_PAREN@51..52 \"(\"\n-              LAMBDA_EXPR@52..56\n+              CLOSURE_EXPR@52..56\n                 PARAM_LIST@52..56\n                   PIPE@52..53 \"|\"\n                   PARAM@53..55\n-                    BIND_PAT@53..55\n+                    IDENT_PAT@53..55\n                       NAME@53..55\n                         IDENT@53..55 \"it\"\n                   PIPE@55..56 \"|\"\n@@ -62,7 +62,7 @@ SOURCE_FILE@0..83\n           DOT@66..67 \".\"\n           NAME_REF@67..70\n             IDENT@67..70 \"max\"\n-          TYPE_ARG_LIST@70..77\n+          GENERIC_ARG_LIST@70..77\n             COLON2@70..72 \"::\"\n             L_ANGLE@72..73 \"<\"\n             TYPE_ARG@73..76"}, {"sha": "284c8715b35f3d02cf54d23e7fee6120471e3e16", "filename": "crates/ra_syntax/test_data/parser/err/0040_illegal_crate_kw_location.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..98\n-  USE_ITEM@0..12\n+  USE@0..12\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..11\n@@ -9,7 +9,7 @@ SOURCE_FILE@0..98\n           CRATE_KW@6..11 \"crate\"\n     SEMICOLON@11..12 \";\"\n   WHITESPACE@12..13 \"\\n\"\n-  USE_ITEM@13..54\n+  USE@13..54\n     USE_KW@13..16 \"use\"\n     WHITESPACE@16..17 \" \"\n     USE_TREE@17..53\n@@ -52,7 +52,7 @@ SOURCE_FILE@0..98\n         R_CURLY@52..53 \"}\"\n     SEMICOLON@53..54 \";\"\n   WHITESPACE@54..55 \"\\n\"\n-  USE_ITEM@55..72\n+  USE@55..72\n     USE_KW@55..58 \"use\"\n     WHITESPACE@58..59 \" \"\n     USE_TREE@59..71\n@@ -66,7 +66,7 @@ SOURCE_FILE@0..98\n           CRATE_KW@66..71 \"crate\"\n     SEMICOLON@71..72 \";\"\n   WHITESPACE@72..73 \"\\n\"\n-  USE_ITEM@73..97\n+  USE@73..97\n     USE_KW@73..76 \"use\"\n     WHITESPACE@76..77 \" \"\n     USE_TREE@77..96"}, {"sha": "2049a9d724f4fb8221878e31e70f77342b7478a7", "filename": "crates/ra_syntax/test_data/parser/err/0041_illegal_super_keyword_location.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..67\n-  USE_ITEM@0..12\n+  USE@0..12\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..11\n@@ -9,7 +9,7 @@ SOURCE_FILE@0..67\n           SUPER_KW@6..11 \"super\"\n     SEMICOLON@11..12 \";\"\n   WHITESPACE@12..13 \"\\n\"\n-  USE_ITEM@13..26\n+  USE@13..26\n     USE_KW@13..16 \"use\"\n     WHITESPACE@16..17 \" \"\n     USE_TREE@17..25\n@@ -23,7 +23,7 @@ SOURCE_FILE@0..67\n           SUPER_KW@20..25 \"super\"\n     SEMICOLON@25..26 \";\"\n   WHITESPACE@26..27 \"\\n\"\n-  USE_ITEM@27..47\n+  USE@27..47\n     USE_KW@27..30 \"use\"\n     WHITESPACE@30..31 \" \"\n     USE_TREE@31..46\n@@ -41,7 +41,7 @@ SOURCE_FILE@0..67\n           SUPER_KW@41..46 \"super\"\n     SEMICOLON@46..47 \";\"\n   WHITESPACE@47..48 \"\\n\"\n-  USE_ITEM@48..66\n+  USE@48..66\n     USE_KW@48..51 \"use\"\n     WHITESPACE@51..52 \" \"\n     USE_TREE@52..65"}, {"sha": "deadf56b4b5a08d0e08ecfd80c28b63c9b2c67db", "filename": "crates/ra_syntax/test_data/parser/err/0042_illegal_self_keyword_location.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..25\n-  USE_ITEM@0..11\n+  USE@0..11\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..10\n@@ -9,7 +9,7 @@ SOURCE_FILE@0..25\n           SELF_KW@6..10 \"self\"\n     SEMICOLON@10..11 \";\"\n   WHITESPACE@11..12 \"\\n\"\n-  USE_ITEM@12..24\n+  USE@12..24\n     USE_KW@12..15 \"use\"\n     WHITESPACE@15..16 \" \"\n     USE_TREE@16..23"}, {"sha": "51ad2a846fadef0e193f9d85719c729cb4fd116f", "filename": "crates/ra_syntax/test_data/parser/err/0043_default_const.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,11 +1,11 @@\n SOURCE_FILE@0..39\n-  TRAIT_DEF@0..38\n+  TRAIT@0..38\n     TRAIT_KW@0..5 \"trait\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7\n       IDENT@6..7 \"T\"\n     WHITESPACE@7..8 \" \"\n-    ITEM_LIST@8..38\n+    ASSOC_ITEM_LIST@8..38\n       L_CURLY@8..9 \"{\"\n       WHITESPACE@9..12 \"\\n  \"\n       MACRO_CALL@12..19\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..39\n             NAME_REF@12..19\n               IDENT@12..19 \"default\"\n       WHITESPACE@19..20 \" \"\n-      CONST_DEF@20..36\n+      CONST@20..36\n         CONST_KW@20..25 \"const\"\n         WHITESPACE@25..26 \" \"\n         NAME@26..27"}, {"sha": "71aa864943f8a53ed3fa91353341141b918d581e", "filename": "crates/ra_syntax/test_data/parser/err/0044_unexpected_for_type.rast", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0044_unexpected_for_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0044_unexpected_for_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0044_unexpected_for_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..239\n-  TYPE_ALIAS_DEF@0..30\n+  TYPE_ALIAS@0..30\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..11\n@@ -9,13 +9,13 @@ SOURCE_FILE@0..239\n     WHITESPACE@13..14 \" \"\n     FOR_TYPE@14..29\n       FOR_KW@14..17 \"for\"\n-      TYPE_PARAM_LIST@17..21\n+      GENERIC_PARAM_LIST@17..21\n         L_ANGLE@17..18 \"<\"\n         LIFETIME_PARAM@18..20\n           LIFETIME@18..20 \"\\'a\"\n         R_ANGLE@20..21 \">\"\n       WHITESPACE@21..22 \" \"\n-      REFERENCE_TYPE@22..29\n+      REF_TYPE@22..29\n         AMP@22..23 \"&\"\n         LIFETIME@23..25 \"\\'a\"\n         WHITESPACE@25..26 \" \"\n@@ -26,7 +26,7 @@ SOURCE_FILE@0..239\n                 IDENT@26..29 \"u32\"\n     SEMICOLON@29..30 \";\"\n   WHITESPACE@30..31 \"\\n\"\n-  TYPE_ALIAS_DEF@31..64\n+  TYPE_ALIAS@31..64\n     TYPE_KW@31..35 \"type\"\n     WHITESPACE@35..36 \" \"\n     NAME@36..42\n@@ -36,15 +36,15 @@ SOURCE_FILE@0..239\n     WHITESPACE@44..45 \" \"\n     FOR_TYPE@45..63\n       FOR_KW@45..48 \"for\"\n-      TYPE_PARAM_LIST@48..52\n+      GENERIC_PARAM_LIST@48..52\n         L_ANGLE@48..49 \"<\"\n         LIFETIME_PARAM@49..51\n           LIFETIME@49..51 \"\\'a\"\n         R_ANGLE@51..52 \">\"\n       WHITESPACE@52..53 \" \"\n       TUPLE_TYPE@53..63\n         L_PAREN@53..54 \"(\"\n-        REFERENCE_TYPE@54..61\n+        REF_TYPE@54..61\n           AMP@54..55 \"&\"\n           LIFETIME@55..57 \"\\'a\"\n           WHITESPACE@57..58 \" \"\n@@ -57,7 +57,7 @@ SOURCE_FILE@0..239\n         R_PAREN@62..63 \")\"\n     SEMICOLON@63..64 \";\"\n   WHITESPACE@64..65 \"\\n\"\n-  TYPE_ALIAS_DEF@65..95\n+  TYPE_ALIAS@65..95\n     TYPE_KW@65..69 \"type\"\n     WHITESPACE@69..70 \" \"\n     NAME@70..78\n@@ -67,7 +67,7 @@ SOURCE_FILE@0..239\n     WHITESPACE@80..81 \" \"\n     FOR_TYPE@81..94\n       FOR_KW@81..84 \"for\"\n-      TYPE_PARAM_LIST@84..88\n+      GENERIC_PARAM_LIST@84..88\n         L_ANGLE@84..85 \"<\"\n         LIFETIME_PARAM@85..87\n           LIFETIME@85..87 \"\\'a\"\n@@ -83,7 +83,7 @@ SOURCE_FILE@0..239\n         R_BRACK@93..94 \"]\"\n     SEMICOLON@94..95 \";\"\n   WHITESPACE@95..96 \"\\n\"\n-  TYPE_ALIAS_DEF@96..149\n+  TYPE_ALIAS@96..149\n     TYPE_KW@96..100 \"type\"\n     WHITESPACE@100..101 \" \"\n     NAME@101..109\n@@ -93,26 +93,26 @@ SOURCE_FILE@0..239\n     WHITESPACE@111..112 \" \"\n     FOR_TYPE@112..148\n       FOR_KW@112..115 \"for\"\n-      TYPE_PARAM_LIST@115..119\n+      GENERIC_PARAM_LIST@115..119\n         L_ANGLE@115..116 \"<\"\n         LIFETIME_PARAM@116..118\n           LIFETIME@116..118 \"\\'a\"\n         R_ANGLE@118..119 \">\"\n       WHITESPACE@119..120 \" \"\n       FOR_TYPE@120..148\n         FOR_KW@120..123 \"for\"\n-        TYPE_PARAM_LIST@123..127\n+        GENERIC_PARAM_LIST@123..127\n           L_ANGLE@123..124 \"<\"\n           LIFETIME_PARAM@124..126\n             LIFETIME@124..126 \"\\'b\"\n           R_ANGLE@126..127 \">\"\n         WHITESPACE@127..128 \" \"\n-        FN_POINTER_TYPE@128..148\n+        FN_PTR_TYPE@128..148\n           FN_KW@128..130 \"fn\"\n           PARAM_LIST@130..148\n             L_PAREN@130..131 \"(\"\n             PARAM@131..138\n-              REFERENCE_TYPE@131..138\n+              REF_TYPE@131..138\n                 AMP@131..132 \"&\"\n                 LIFETIME@132..134 \"\\'a\"\n                 WHITESPACE@134..135 \" \"\n@@ -124,7 +124,7 @@ SOURCE_FILE@0..239\n             COMMA@138..139 \",\"\n             WHITESPACE@139..140 \" \"\n             PARAM@140..147\n-              REFERENCE_TYPE@140..147\n+              REF_TYPE@140..147\n                 AMP@140..141 \"&\"\n                 LIFETIME@141..143 \"\\'b\"\n                 WHITESPACE@143..144 \" \"\n@@ -136,12 +136,12 @@ SOURCE_FILE@0..239\n             R_PAREN@147..148 \")\"\n     SEMICOLON@148..149 \";\"\n   WHITESPACE@149..150 \"\\n\"\n-  FN_DEF@150..238\n+  FN@150..238\n     FN_KW@150..152 \"fn\"\n     WHITESPACE@152..153 \" \"\n     NAME@153..164\n       IDENT@153..164 \"for_for_for\"\n-    TYPE_PARAM_LIST@164..167\n+    GENERIC_PARAM_LIST@164..167\n       L_ANGLE@164..165 \"<\"\n       TYPE_PARAM@165..166\n         NAME@165..166\n@@ -156,34 +156,34 @@ SOURCE_FILE@0..239\n       WHITESPACE@175..180 \"\\n    \"\n       WHERE_PRED@180..233\n         FOR_KW@180..183 \"for\"\n-        TYPE_PARAM_LIST@183..187\n+        GENERIC_PARAM_LIST@183..187\n           L_ANGLE@183..184 \"<\"\n           LIFETIME_PARAM@184..186\n             LIFETIME@184..186 \"\\'a\"\n           R_ANGLE@186..187 \">\"\n         WHITESPACE@187..188 \" \"\n         FOR_TYPE@188..227\n           FOR_KW@188..191 \"for\"\n-          TYPE_PARAM_LIST@191..195\n+          GENERIC_PARAM_LIST@191..195\n             L_ANGLE@191..192 \"<\"\n             LIFETIME_PARAM@192..194\n               LIFETIME@192..194 \"\\'b\"\n             R_ANGLE@194..195 \">\"\n           WHITESPACE@195..196 \" \"\n           FOR_TYPE@196..227\n             FOR_KW@196..199 \"for\"\n-            TYPE_PARAM_LIST@199..203\n+            GENERIC_PARAM_LIST@199..203\n               L_ANGLE@199..200 \"<\"\n               LIFETIME_PARAM@200..202\n                 LIFETIME@200..202 \"\\'c\"\n               R_ANGLE@202..203 \">\"\n             WHITESPACE@203..204 \" \"\n-            FN_POINTER_TYPE@204..227\n+            FN_PTR_TYPE@204..227\n               FN_KW@204..206 \"fn\"\n               PARAM_LIST@206..227\n                 L_PAREN@206..207 \"(\"\n                 PARAM@207..212\n-                  REFERENCE_TYPE@207..212\n+                  REF_TYPE@207..212\n                     AMP@207..208 \"&\"\n                     LIFETIME@208..210 \"\\'a\"\n                     WHITESPACE@210..211 \" \"\n@@ -195,7 +195,7 @@ SOURCE_FILE@0..239\n                 COMMA@212..213 \",\"\n                 WHITESPACE@213..214 \" \"\n                 PARAM@214..219\n-                  REFERENCE_TYPE@214..219\n+                  REF_TYPE@214..219\n                     AMP@214..215 \"&\"\n                     LIFETIME@215..217 \"\\'b\"\n                     WHITESPACE@217..218 \" \"\n@@ -207,7 +207,7 @@ SOURCE_FILE@0..239\n                 COMMA@219..220 \",\"\n                 WHITESPACE@220..221 \" \"\n                 PARAM@221..226\n-                  REFERENCE_TYPE@221..226\n+                  REF_TYPE@221..226\n                     AMP@221..222 \"&\"\n                     LIFETIME@222..224 \"\\'c\"\n                     WHITESPACE@224..225 \" \""}, {"sha": "df29017e7f2352a7a0e87eea22bb21333a136af7", "filename": "crates/ra_syntax/test_data/parser/err/0163_weird_blocks.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..83\n-  FN_DEF@0..82\n+  FN@0..82\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7"}, {"sha": "93c429e128ce61c551166859a6a79f00a3ecf3ca", "filename": "crates/ra_syntax/test_data/parser/fragments/item/ok/0000_fn.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Fok%2F0000_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Fok%2F0000_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Fok%2F0000_fn.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,4 +1,4 @@\n-FN_DEF@0..11\n+FN@0..11\n   FN_KW@0..2 \"fn\"\n   WHITESPACE@2..3 \" \"\n   NAME@3..6"}, {"sha": "dcf102339aa9f3a81a76b36a4d65d3170ec26f5a", "filename": "crates/ra_syntax/test_data/parser/fragments/pattern/ok/0000_enum.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Fok%2F0000_enum.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Fok%2F0000_enum.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Fok%2F0000_enum.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -4,7 +4,7 @@ TUPLE_STRUCT_PAT@0..7\n       NAME_REF@0..4\n         IDENT@0..4 \"Some\"\n   L_PAREN@4..5 \"(\"\n-  BIND_PAT@5..6\n+  IDENT_PAT@5..6\n     NAME@5..6\n       IDENT@5..6 \"x\"\n   R_PAREN@6..7 \")\""}, {"sha": "38c15b5815e45bd2ef8d49032202a4cfd59e2683", "filename": "crates/ra_syntax/test_data/parser/fragments/type/ok/0000_result.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -3,7 +3,7 @@ PATH_TYPE@0..16\n     PATH_SEGMENT@0..16\n       NAME_REF@0..6\n         IDENT@0..6 \"Result\"\n-      TYPE_ARG_LIST@6..16\n+      GENERIC_ARG_LIST@6..16\n         L_ANGLE@6..7 \"<\"\n         TYPE_ARG@7..10\n           PATH_TYPE@7..10"}, {"sha": "f1d0dc343829fd547c77be871eb824a7ed1cce35", "filename": "crates/ra_syntax/test_data/parser/fuzz-failures/0000.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -86,7 +86,7 @@ fn find_reparsable_node(node: SyntaxNodeRef, range: TextRange) -> Option<(Syntax\n     fn reparser(node: SyntaxNodeRef) -> Option<fn(&mut Parser)> {\n         let res = match node.kind() {\n             BLOCK => grammar::block,\n-            RECORD_FIELD_DEF_LIST => grammar::record_field_def_list,\n+            RECORD_FIELD_LIST => grammar::record_field_list,\n             _ => return None,\n         };\n         Some(res)\n@@ -138,7 +138,7 @@ fn find_reparsable_node(node: SyntaxNodeRef, range: TextRange) -> Option<(Syntax\n         let res = match node.kind() {\n      ;\n     let end = u32::from(range.end()) as usize;\n-    text.replaT => grammar::record_field_def_list,\n+    text.replaT => grammar::record_field_list,\n             _ => return None,\n         };\n         Some(res)"}, {"sha": "0b9bbec0776803e92e5632ce67307eea1ecb3031", "filename": "crates/ra_syntax/test_data/parser/inline/err/0001_array_type_missing_semi.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..18\n-  TYPE_ALIAS_DEF@0..12\n+  TYPE_ALIAS@0..12\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "a4271fc87ab216f695f7f1bece8458b8de1181b8", "filename": "crates/ra_syntax/test_data/parser/inline/err/0002_misplaced_label_err.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..30\n-  FN_DEF@0..29\n+  FN@0..29\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7\n@@ -17,7 +17,7 @@ SOURCE_FILE@0..30\n             LIFETIME@16..21 \"\\'loop\"\n             COLON@21..22 \":\"\n       WHITESPACE@22..23 \" \"\n-      IMPL_DEF@23..27\n+      IMPL@23..27\n         IMPL_KW@23..27 \"impl\"\n       WHITESPACE@27..28 \"\\n\"\n       R_CURLY@28..29 \"}\""}, {"sha": "0d8bf6dd6b6ea715993b0a53a5643f98a56edf82", "filename": "crates/ra_syntax/test_data/parser/inline/err/0003_pointer_type_no_mutability.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,13 +1,13 @@\n SOURCE_FILE@0..14\n-  TYPE_ALIAS_DEF@0..13\n+  TYPE_ALIAS@0..13\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n       IDENT@5..6 \"T\"\n     WHITESPACE@6..7 \" \"\n     EQ@7..8 \"=\"\n     WHITESPACE@8..9 \" \"\n-    POINTER_TYPE@9..12\n+    PTR_TYPE@9..12\n       STAR@9..10 \"*\"\n       TUPLE_TYPE@10..12\n         L_PAREN@10..11 \"(\""}, {"sha": "29d6b3974021da4741b72f53fce77c173acbac75", "filename": "crates/ra_syntax/test_data/parser/inline/err/0004_impl_type.rast", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..87\n-  IMPL_DEF@0..12\n+  IMPL@0..12\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..9\n@@ -8,11 +8,11 @@ SOURCE_FILE@0..87\n           NAME_REF@5..9\n             IDENT@5..9 \"Type\"\n     WHITESPACE@9..10 \" \"\n-    ITEM_LIST@10..12\n+    ASSOC_ITEM_LIST@10..12\n       L_CURLY@10..11 \"{\"\n       R_CURLY@11..12 \"}\"\n   WHITESPACE@12..13 \"\\n\"\n-  IMPL_DEF@13..33\n+  IMPL@13..33\n     IMPL_KW@13..17 \"impl\"\n     WHITESPACE@17..18 \" \"\n     PATH_TYPE@18..24\n@@ -29,14 +29,14 @@ SOURCE_FILE@0..87\n           NAME_REF@29..30\n             IDENT@29..30 \"T\"\n     WHITESPACE@30..31 \" \"\n-    ITEM_LIST@31..33\n+    ASSOC_ITEM_LIST@31..33\n       L_CURLY@31..32 \"{\"\n       R_CURLY@32..33 \"}\"\n   WHITESPACE@33..34 \"\\n\"\n-  IMPL_DEF@34..38\n+  IMPL@34..38\n     IMPL_KW@34..38 \"impl\"\n   WHITESPACE@38..39 \" \"\n-  IMPL_DEF@39..54\n+  IMPL@39..54\n     IMPL_KW@39..43 \"impl\"\n     WHITESPACE@43..44 \" \"\n     PATH_TYPE@44..51\n@@ -45,11 +45,11 @@ SOURCE_FILE@0..87\n           NAME_REF@44..51\n             IDENT@44..51 \"NotType\"\n     WHITESPACE@51..52 \" \"\n-    ITEM_LIST@52..54\n+    ASSOC_ITEM_LIST@52..54\n       L_CURLY@52..53 \"{\"\n       R_CURLY@53..54 \"}\"\n   WHITESPACE@54..55 \"\\n\"\n-  IMPL_DEF@55..70\n+  IMPL@55..70\n     IMPL_KW@55..59 \"impl\"\n     WHITESPACE@59..60 \" \"\n     PATH_TYPE@60..66\n@@ -60,7 +60,7 @@ SOURCE_FILE@0..87\n     WHITESPACE@66..67 \" \"\n     FOR_KW@67..70 \"for\"\n   WHITESPACE@70..71 \" \"\n-  IMPL_DEF@71..86\n+  IMPL@71..86\n     IMPL_KW@71..75 \"impl\"\n     WHITESPACE@75..76 \" \"\n     PATH_TYPE@76..83\n@@ -69,7 +69,7 @@ SOURCE_FILE@0..87\n           NAME_REF@76..83\n             IDENT@76..83 \"NotType\"\n     WHITESPACE@83..84 \" \"\n-    ITEM_LIST@84..86\n+    ASSOC_ITEM_LIST@84..86\n       L_CURLY@84..85 \"{\"\n       R_CURLY@85..86 \"}\"\n   WHITESPACE@86..87 \"\\n\""}, {"sha": "776022fd936d1bbef313e58a54b43738ab56f219", "filename": "crates/ra_syntax/test_data/parser/inline/err/0005_fn_pointer_type_missing_fn.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..20\n-  TYPE_ALIAS_DEF@0..15\n+  TYPE_ALIAS@0..15\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "cc0f8bcaf9f7721f8b3be00836eb2ed9ae54872d", "filename": "crates/ra_syntax/test_data/parser/inline/err/0006_unsafe_block_in_mod.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..33\n-  FN_DEF@0..10\n+  FN@0..10\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -19,7 +19,7 @@ SOURCE_FILE@0..33\n     WHITESPACE@19..20 \" \"\n     R_CURLY@20..21 \"}\"\n   WHITESPACE@21..22 \" \"\n-  FN_DEF@22..32\n+  FN@22..32\n     FN_KW@22..24 \"fn\"\n     WHITESPACE@24..25 \" \"\n     NAME@25..28"}, {"sha": "2c9570678ed3232f47e554eaa92b6c622dd93097", "filename": "crates/ra_syntax/test_data/parser/inline/err/0007_async_without_semicolon.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..30\n-  FN_DEF@0..29\n+  FN@0..29\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..30\n       LET_STMT@11..27\n         LET_KW@11..14 \"let\"\n         WHITESPACE@14..15 \" \"\n-        PLACEHOLDER_PAT@15..16\n+        WILDCARD_PAT@15..16\n           UNDERSCORE@15..16 \"_\"\n         WHITESPACE@16..17 \" \"\n         EQ@17..18 \"=\""}, {"sha": "63a10127dd9ebce1efb18fba9c14f5dfad06e38a", "filename": "crates/ra_syntax/test_data/parser/inline/err/0008_pub_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..21\n-  FN_DEF@0..20\n+  FN@0..20\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "8fd8d5e593abce5a02b69dda07b577f67b29fb82", "filename": "crates/ra_syntax/test_data/parser/inline/err/0009_attr_on_expr_not_allowed.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..48\n-  FN_DEF@0..47\n+  FN@0..47\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "fa14e1e6de5b3df2a6e0385947e1913a26938691", "filename": "crates/ra_syntax/test_data/parser/inline/err/0010_bad_tuple_index_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..47\n-  FN_DEF@0..46\n+  FN@0..46\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "a6e6552a99e44eaaa95a9140dee417b5ccdcc512", "filename": "crates/ra_syntax/test_data/parser/inline/err/0010_wrong_order_fns.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -2,7 +2,7 @@ SOURCE_FILE@0..50\n   ERROR@0..6\n     UNSAFE_KW@0..6 \"unsafe\"\n   WHITESPACE@6..7 \" \"\n-  FN_DEF@7..24\n+  FN@7..24\n     ASYNC_KW@7..12 \"async\"\n     WHITESPACE@12..13 \" \"\n     FN_KW@13..15 \"fn\"\n@@ -17,7 +17,7 @@ SOURCE_FILE@0..50\n       L_CURLY@22..23 \"{\"\n       R_CURLY@23..24 \"}\"\n   WHITESPACE@24..25 \"\\n\"\n-  CONST_DEF@25..46\n+  CONST@25..46\n     UNSAFE_KW@25..31 \"unsafe\"\n     WHITESPACE@31..32 \" \"\n     CONST_KW@32..37 \"const\""}, {"sha": "8d761b9074144d7c1a3d7531080042dfd43ad40f", "filename": "crates/ra_syntax/test_data/parser/inline/err/0013_static_underscore.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..19\n-  STATIC_DEF@0..18\n+  STATIC@0..18\n     STATIC_KW@0..6 \"static\"\n     WHITESPACE@6..7 \" \"\n     ERROR@7..8"}, {"sha": "acd72094b95a27e10b855df56ea19453fcbfeda7", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_default_fn_type.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,11 +1,11 @@\n SOURCE_FILE@0..62\n-  TRAIT_DEF@0..61\n+  TRAIT@0..61\n     TRAIT_KW@0..5 \"trait\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7\n       IDENT@6..7 \"T\"\n     WHITESPACE@7..8 \" \"\n-    ITEM_LIST@8..61\n+    ASSOC_ITEM_LIST@8..61\n       L_CURLY@8..9 \"{\"\n       WHITESPACE@9..14 \"\\n    \"\n       MACRO_CALL@14..21\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..62\n             NAME_REF@14..21\n               IDENT@14..21 \"default\"\n       WHITESPACE@21..22 \" \"\n-      TYPE_ALIAS_DEF@22..35\n+      TYPE_ALIAS@22..35\n         TYPE_KW@22..26 \"type\"\n         WHITESPACE@26..27 \" \"\n         NAME@27..28\n@@ -35,7 +35,7 @@ SOURCE_FILE@0..62\n             NAME_REF@40..47\n               IDENT@40..47 \"default\"\n       WHITESPACE@47..48 \" \"\n-      FN_DEF@48..59\n+      FN@48..59\n         FN_KW@48..50 \"fn\"\n         WHITESPACE@50..51 \" \"\n         NAME@51..54"}, {"sha": "a81c442c0d8542030850fdc25e139b8a0fd13e34", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_record_literal_before_ellipsis_recovery.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..45\n-  FN_DEF@0..44\n+  FN@0..44\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7\n@@ -11,16 +11,16 @@ SOURCE_FILE@0..45\n     BLOCK_EXPR@10..44\n       L_CURLY@10..11 \"{\"\n       WHITESPACE@11..16 \"\\n    \"\n-      RECORD_LIT@16..42\n+      RECORD_EXPR@16..42\n         PATH@16..17\n           PATH_SEGMENT@16..17\n             NAME_REF@16..17\n               IDENT@16..17 \"S\"\n         WHITESPACE@17..18 \" \"\n-        RECORD_FIELD_LIST@18..42\n+        RECORD_EXPR_FIELD_LIST@18..42\n           L_CURLY@18..19 \"{\"\n           WHITESPACE@19..20 \" \"\n-          RECORD_FIELD@20..40\n+          RECORD_EXPR_FIELD@20..40\n             NAME_REF@20..25\n               IDENT@20..25 \"field\"\n             WHITESPACE@25..26 \" \""}, {"sha": "2f59d0606c09d4527befe77fc4c2ffd6ea7c9253", "filename": "crates/ra_syntax/test_data/parser/inline/err/0015_empty_segment.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_empty_segment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_empty_segment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_empty_segment.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..13\n-  USE_ITEM@0..12\n+  USE@0..12\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..12"}, {"sha": "c7289e4008adf9a2431729e56fe5fe55d682751d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0001_trait_item_list.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..83\n-  IMPL_DEF@0..82\n+  IMPL@0..82\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6\n@@ -8,10 +8,10 @@ SOURCE_FILE@0..83\n           NAME_REF@5..6\n             IDENT@5..6 \"F\"\n     WHITESPACE@6..7 \" \"\n-    ITEM_LIST@7..82\n+    ASSOC_ITEM_LIST@7..82\n       L_CURLY@7..8 \"{\"\n       WHITESPACE@8..13 \"\\n    \"\n-      TYPE_ALIAS_DEF@13..27\n+      TYPE_ALIAS@13..27\n         TYPE_KW@13..17 \"type\"\n         WHITESPACE@17..18 \" \"\n         NAME@18..19\n@@ -27,7 +27,7 @@ SOURCE_FILE@0..83\n                     IDENT@21..26 \"Clone\"\n         SEMICOLON@26..27 \";\"\n       WHITESPACE@27..32 \"\\n    \"\n-      CONST_DEF@32..45\n+      CONST@32..45\n         CONST_KW@32..37 \"const\"\n         WHITESPACE@37..38 \" \"\n         NAME@38..39\n@@ -41,7 +41,7 @@ SOURCE_FILE@0..83\n                 IDENT@41..44 \"i32\"\n         SEMICOLON@44..45 \";\"\n       WHITESPACE@45..50 \"\\n    \"\n-      FN_DEF@50..61\n+      FN@50..61\n         FN_KW@50..52 \"fn\"\n         WHITESPACE@52..53 \" \"\n         NAME@53..56\n@@ -54,7 +54,7 @@ SOURCE_FILE@0..83\n           L_CURLY@59..60 \"{\"\n           R_CURLY@60..61 \"}\"\n       WHITESPACE@61..66 \"\\n    \"\n-      FN_DEF@66..80\n+      FN@66..80\n         FN_KW@66..68 \"fn\"\n         WHITESPACE@68..69 \" \"\n         NAME@69..72"}, {"sha": "1e80dd7e27f02740fe636aed24b9bd6a859900c6", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0002_use_tree_list.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..249\n-  USE_ITEM@0..58\n+  USE@0..58\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..57\n@@ -51,7 +51,7 @@ SOURCE_FILE@0..249\n   WHITESPACE@58..59 \" \"\n   COMMENT@59..97 \"// Rust 2018 (with a  ...\"\n   WHITESPACE@97..98 \"\\n\"\n-  USE_ITEM@98..121\n+  USE@98..121\n     USE_KW@98..101 \"use\"\n     WHITESPACE@101..102 \" \"\n     USE_TREE@102..120\n@@ -77,7 +77,7 @@ SOURCE_FILE@0..249\n   WHITESPACE@121..122 \" \"\n   COMMENT@122..134 \"// Rust 2015\"\n   WHITESPACE@134..135 \"\\n\"\n-  USE_ITEM@135..166\n+  USE@135..166\n     USE_KW@135..138 \"use\"\n     WHITESPACE@138..139 \" \"\n     USE_TREE@139..165\n@@ -104,7 +104,7 @@ SOURCE_FILE@0..249\n   WHITESPACE@166..167 \" \"\n   COMMENT@167..179 \"// Rust 2015\"\n   WHITESPACE@179..180 \"\\n\"\n-  USE_ITEM@180..205\n+  USE@180..205\n     USE_KW@180..183 \"use\"\n     WHITESPACE@183..184 \" \"\n     USE_TREE@184..204"}, {"sha": "62da7b887343966978ffde92350434f47c31e56a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0003_where_pred_for.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0003_where_pred_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0003_where_pred_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0003_where_pred_for.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,10 +1,10 @@\n SOURCE_FILE@0..54\n-  FN_DEF@0..53\n+  FN@0..53\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..12\n       IDENT@3..12 \"for_trait\"\n-    TYPE_PARAM_LIST@12..15\n+    GENERIC_PARAM_LIST@12..15\n       L_ANGLE@12..13 \"<\"\n       TYPE_PARAM@13..14\n         NAME@13..14\n@@ -19,7 +19,7 @@ SOURCE_FILE@0..54\n       WHITESPACE@23..27 \"\\n   \"\n       WHERE_PRED@27..49\n         FOR_KW@27..30 \"for\"\n-        TYPE_PARAM_LIST@30..34\n+        GENERIC_PARAM_LIST@30..34\n           L_ANGLE@30..31 \"<\"\n           LIFETIME_PARAM@31..33\n             LIFETIME@31..33 \"\\'a\"\n@@ -42,7 +42,7 @@ SOURCE_FILE@0..54\n                   PARAM_LIST@40..49\n                     L_PAREN@40..41 \"(\"\n                     PARAM@41..48\n-                      REFERENCE_TYPE@41..48\n+                      REF_TYPE@41..48\n                         AMP@41..42 \"&\"\n                         LIFETIME@42..44 \"\\'a\"\n                         WHITESPACE@44..45 \" \""}, {"sha": "b650735ba1d90bea264e220954218bba131345f5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0004_value_parameters_no_patterns.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..39\n-  TYPE_ALIAS_DEF@0..38\n+  TYPE_ALIAS@0..38\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..39\n         PATH_SEGMENT@9..37\n           NAME_REF@9..12\n             IDENT@9..12 \"Box\"\n-          TYPE_ARG_LIST@12..37\n+          GENERIC_ARG_LIST@12..37\n             L_ANGLE@12..13 \"<\"\n             TYPE_ARG@13..36\n               PATH_TYPE@13..36\n@@ -31,7 +31,7 @@ SOURCE_FILE@0..39\n                       COMMA@19..20 \",\"\n                       WHITESPACE@20..21 \" \"\n                       PARAM@21..25\n-                        REFERENCE_TYPE@21..25\n+                        REF_TYPE@21..25\n                           AMP@21..22 \"&\"\n                           PATH_TYPE@22..25\n                             PATH@22..25\n@@ -41,7 +41,7 @@ SOURCE_FILE@0..39\n                       COMMA@25..26 \",\"\n                       WHITESPACE@26..27 \" \"\n                       PARAM@27..31\n-                        REFERENCE_TYPE@27..31\n+                        REF_TYPE@27..31\n                           AMP@27..28 \"&\"\n                           PATH_TYPE@28..31\n                             PATH@28..31"}, {"sha": "8e0252ce743b465af36e70083b546044ef42fd3f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0005_function_type_params.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0005_function_type_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0005_function_type_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0005_function_type_params.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,10 +1,10 @@\n SOURCE_FILE@0..28\n-  FN_DEF@0..27\n+  FN@0..27\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n       IDENT@3..6 \"foo\"\n-    TYPE_PARAM_LIST@6..23\n+    GENERIC_PARAM_LIST@6..23\n       L_ANGLE@6..7 \"<\"\n       TYPE_PARAM@7..22\n         NAME@7..8"}, {"sha": "d24ad74232e65a01c55be9fbdc01e90bcd10125b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0006_self_param.rast", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..128\n-  IMPL_DEF@0..127\n+  IMPL@0..127\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6\n@@ -8,10 +8,10 @@ SOURCE_FILE@0..128\n           NAME_REF@5..6\n             IDENT@5..6 \"S\"\n     WHITESPACE@6..7 \" \"\n-    ITEM_LIST@7..127\n+    ASSOC_ITEM_LIST@7..127\n       L_CURLY@7..8 \"{\"\n       WHITESPACE@8..13 \"\\n    \"\n-      FN_DEF@13..26\n+      FN@13..26\n         FN_KW@13..15 \"fn\"\n         WHITESPACE@15..16 \" \"\n         NAME@16..17\n@@ -26,7 +26,7 @@ SOURCE_FILE@0..128\n           L_CURLY@24..25 \"{\"\n           R_CURLY@25..26 \"}\"\n       WHITESPACE@26..31 \"\\n    \"\n-      FN_DEF@31..46\n+      FN@31..46\n         FN_KW@31..33 \"fn\"\n         WHITESPACE@33..34 \" \"\n         NAME@34..35\n@@ -43,7 +43,7 @@ SOURCE_FILE@0..128\n           L_CURLY@44..45 \"{\"\n           R_CURLY@45..46 \"}\"\n       WHITESPACE@46..51 \"\\n    \"\n-      FN_DEF@51..69\n+      FN@51..69\n         FN_KW@51..53 \"fn\"\n         WHITESPACE@53..54 \" \"\n         NAME@54..55\n@@ -62,7 +62,7 @@ SOURCE_FILE@0..128\n           L_CURLY@67..68 \"{\"\n           R_CURLY@68..69 \"}\"\n       WHITESPACE@69..74 \"\\n    \"\n-      FN_DEF@74..103\n+      FN@74..103\n         FN_KW@74..76 \"fn\"\n         WHITESPACE@76..77 \" \"\n         NAME@77..78\n@@ -79,7 +79,7 @@ SOURCE_FILE@0..128\n           COMMA@91..92 \",\"\n           WHITESPACE@92..93 \" \"\n           PARAM@93..99\n-            BIND_PAT@93..94\n+            IDENT_PAT@93..94\n               NAME@93..94\n                 IDENT@93..94 \"x\"\n             COLON@94..95 \":\"\n@@ -95,7 +95,7 @@ SOURCE_FILE@0..128\n           L_CURLY@101..102 \"{\"\n           R_CURLY@102..103 \"}\"\n       WHITESPACE@103..108 \"\\n    \"\n-      FN_DEF@108..125\n+      FN@108..125\n         FN_KW@108..110 \"fn\"\n         WHITESPACE@110..111 \" \"\n         NAME@111..112"}, {"sha": "e95688f56a58d40120e320617e9edf5f37446e21", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0007_type_param_bounds.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,10 +1,10 @@\n SOURCE_FILE@0..35\n-  STRUCT_DEF@0..34\n+  STRUCT@0..34\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8\n       IDENT@7..8 \"S\"\n-    TYPE_PARAM_LIST@8..33\n+    GENERIC_PARAM_LIST@8..33\n       L_ANGLE@8..9 \"<\"\n       TYPE_PARAM@9..32\n         NAME@9..10"}, {"sha": "7d2f7eab05b0accc7af904b9f0c8ef541aaa15d1", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0008_path_part.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..103\n-  FN_DEF@0..102\n+  FN@0..102\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -58,7 +58,7 @@ SOURCE_FILE@0..103\n               NAME_REF@62..65\n                 IDENT@62..65 \"Bar\"\n           WHITESPACE@65..66 \" \"\n-          RECORD_FIELD_PAT_LIST@66..72\n+          RECORD_PAT_FIELD_LIST@66..72\n             L_CURLY@66..67 \"{\"\n             WHITESPACE@67..68 \" \"\n             DOT2@68..70 \"..\"\n@@ -81,7 +81,7 @@ SOURCE_FILE@0..103\n               NAME_REF@87..90\n                 IDENT@87..90 \"Bar\"\n           L_PAREN@90..91 \"(\"\n-          DOT_DOT_PAT@91..93\n+          REST_PAT@91..93\n             DOT2@91..93 \"..\"\n           R_PAREN@93..94 \")\"\n         WHITESPACE@94..95 \" \""}, {"sha": "f62826fd55daffa0023d4b19d02b32cf4d9fd005", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0009_loop_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0009_loop_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0009_loop_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0009_loop_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..26\n-  FN_DEF@0..25\n+  FN@0..25\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "66a609346ae7bc3e7f1badfc5a7d6172350df991", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0011_field_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..48\n-  FN_DEF@0..47\n+  FN@0..47\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "28c94bfd64fb5436f090bd8611d92cb307877bcd", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0012_type_item_where_clause.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0012_type_item_where_clause.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0012_type_item_where_clause.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0012_type_item_where_clause.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..31\n-  TYPE_ALIAS_DEF@0..30\n+  TYPE_ALIAS@0..30\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..8"}, {"sha": "d33215b507cfe5d96dd4c8f80720d788dd1da5c3", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0013_pointer_type_mut.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0013_pointer_type_mut.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0013_pointer_type_mut.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0013_pointer_type_mut.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,13 +1,13 @@\n SOURCE_FILE@0..36\n-  TYPE_ALIAS_DEF@0..17\n+  TYPE_ALIAS@0..17\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n       IDENT@5..6 \"M\"\n     WHITESPACE@6..7 \" \"\n     EQ@7..8 \"=\"\n     WHITESPACE@8..9 \" \"\n-    POINTER_TYPE@9..16\n+    PTR_TYPE@9..16\n       STAR@9..10 \"*\"\n       MUT_KW@10..13 \"mut\"\n       WHITESPACE@13..14 \" \"\n@@ -16,15 +16,15 @@ SOURCE_FILE@0..36\n         R_PAREN@15..16 \")\"\n     SEMICOLON@16..17 \";\"\n   WHITESPACE@17..18 \"\\n\"\n-  TYPE_ALIAS_DEF@18..35\n+  TYPE_ALIAS@18..35\n     TYPE_KW@18..22 \"type\"\n     WHITESPACE@22..23 \" \"\n     NAME@23..24\n       IDENT@23..24 \"C\"\n     WHITESPACE@24..25 \" \"\n     EQ@25..26 \"=\"\n     WHITESPACE@26..27 \" \"\n-    POINTER_TYPE@27..34\n+    PTR_TYPE@27..34\n       STAR@27..28 \"*\"\n       MUT_KW@28..31 \"mut\"\n       WHITESPACE@31..32 \" \""}, {"sha": "b1d5106ce9acc9d7a9d4fe9946637c83eb7a2c05", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0014_never_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0014_never_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0014_never_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0014_never_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..16\n-  TYPE_ALIAS_DEF@0..15\n+  TYPE_ALIAS@0..15\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..10"}, {"sha": "104e153ce69d5ac477b5f42509ba183ba7c87a36", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0015_continue_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..69\n-  FN_DEF@0..68\n+  FN@0..68\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "625ab4c2d9f6ac80b06ad841948a708b200457c5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0016_unsafe_trait.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,13 +1,13 @@\n SOURCE_FILE@0..18\n-  TRAIT_DEF@0..17\n+  TRAIT@0..17\n     UNSAFE_KW@0..6 \"unsafe\"\n     WHITESPACE@6..7 \" \"\n     TRAIT_KW@7..12 \"trait\"\n     WHITESPACE@12..13 \" \"\n     NAME@13..14\n       IDENT@13..14 \"T\"\n     WHITESPACE@14..15 \" \"\n-    ITEM_LIST@15..17\n+    ASSOC_ITEM_LIST@15..17\n       L_CURLY@15..16 \"{\"\n       R_CURLY@16..17 \"}\"\n   WHITESPACE@17..18 \"\\n\""}, {"sha": "c131df1c95137fa3148f07a4845acb0a36f00602", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0017_array_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0017_array_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0017_array_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0017_array_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..19\n-  TYPE_ALIAS_DEF@0..18\n+  TYPE_ALIAS@0..18\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "ddbd665888f03b3cd65e72106a269876da42c602", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0018_arb_self_types.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..69\n-  IMPL_DEF@0..68\n+  IMPL@0..68\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6\n@@ -8,10 +8,10 @@ SOURCE_FILE@0..69\n           NAME_REF@5..6\n             IDENT@5..6 \"S\"\n     WHITESPACE@6..7 \" \"\n-    ITEM_LIST@7..68\n+    ASSOC_ITEM_LIST@7..68\n       L_CURLY@7..8 \"{\"\n       WHITESPACE@8..13 \"\\n    \"\n-      FN_DEF@13..33\n+      FN@13..33\n         FN_KW@13..15 \"fn\"\n         WHITESPACE@15..16 \" \"\n         NAME@16..17\n@@ -22,7 +22,7 @@ SOURCE_FILE@0..69\n             SELF_KW@18..22 \"self\"\n             COLON@22..23 \":\"\n             WHITESPACE@23..24 \" \"\n-            REFERENCE_TYPE@24..29\n+            REF_TYPE@24..29\n               AMP@24..25 \"&\"\n               PATH_TYPE@25..29\n                 PATH@25..29\n@@ -35,7 +35,7 @@ SOURCE_FILE@0..69\n           L_CURLY@31..32 \"{\"\n           R_CURLY@32..33 \"}\"\n       WHITESPACE@33..38 \"\\n    \"\n-      FN_DEF@38..66\n+      FN@38..66\n         FN_KW@38..40 \"fn\"\n         WHITESPACE@40..41 \" \"\n         NAME@41..42\n@@ -53,7 +53,7 @@ SOURCE_FILE@0..69\n                 PATH_SEGMENT@53..62\n                   NAME_REF@53..56\n                     IDENT@53..56 \"Box\"\n-                  TYPE_ARG_LIST@56..62\n+                  GENERIC_ARG_LIST@56..62\n                     L_ANGLE@56..57 \"<\"\n                     TYPE_ARG@57..61\n                       PATH_TYPE@57..61"}, {"sha": "7db38ea4da5f6a95f2f3ec40e5ab55ca6a8fa5dd", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0019_unary_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0019_unary_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0019_unary_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0019_unary_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..44\n-  FN_DEF@0..43\n+  FN@0..43\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "b3623c4455de650ea2dc7ccec9547bf204e77691", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0020_use_star.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0020_use_star.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0020_use_star.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0020_use_star.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,20 +1,20 @@\n SOURCE_FILE@0..60\n-  USE_ITEM@0..6\n+  USE@0..6\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..5\n       STAR@4..5 \"*\"\n     SEMICOLON@5..6 \";\"\n   WHITESPACE@6..7 \"\\n\"\n-  USE_ITEM@7..15\n+  USE@7..15\n     USE_KW@7..10 \"use\"\n     WHITESPACE@10..11 \" \"\n     USE_TREE@11..14\n       COLON2@11..13 \"::\"\n       STAR@13..14 \"*\"\n     SEMICOLON@14..15 \";\"\n   WHITESPACE@15..16 \"\\n\"\n-  USE_ITEM@16..36\n+  USE@16..36\n     USE_KW@16..19 \"use\"\n     WHITESPACE@19..20 \" \"\n     USE_TREE@20..35\n@@ -35,7 +35,7 @@ SOURCE_FILE@0..60\n         R_CURLY@34..35 \"}\"\n     SEMICOLON@35..36 \";\"\n   WHITESPACE@36..37 \"\\n\"\n-  USE_ITEM@37..59\n+  USE@37..59\n     USE_KW@37..40 \"use\"\n     WHITESPACE@40..41 \" \"\n     USE_TREE@41..58"}, {"sha": "ca0702aba599bc446ca02910ec9ad5004e5963c7", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0021_impl_item_list.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..89\n-  IMPL_DEF@0..88\n+  IMPL@0..88\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6\n@@ -8,10 +8,10 @@ SOURCE_FILE@0..89\n           NAME_REF@5..6\n             IDENT@5..6 \"F\"\n     WHITESPACE@6..7 \" \"\n-    ITEM_LIST@7..88\n+    ASSOC_ITEM_LIST@7..88\n       L_CURLY@7..8 \"{\"\n       WHITESPACE@8..13 \"\\n    \"\n-      TYPE_ALIAS_DEF@13..26\n+      TYPE_ALIAS@13..26\n         TYPE_KW@13..17 \"type\"\n         WHITESPACE@17..18 \" \"\n         NAME@18..19\n@@ -26,7 +26,7 @@ SOURCE_FILE@0..89\n                 IDENT@22..25 \"i32\"\n         SEMICOLON@25..26 \";\"\n       WHITESPACE@26..31 \"\\n    \"\n-      CONST_DEF@31..49\n+      CONST@31..49\n         CONST_KW@31..36 \"const\"\n         WHITESPACE@36..37 \" \"\n         NAME@37..38\n@@ -45,7 +45,7 @@ SOURCE_FILE@0..89\n           INT_NUMBER@46..48 \"92\"\n         SEMICOLON@48..49 \";\"\n       WHITESPACE@49..54 \"\\n    \"\n-      FN_DEF@54..65\n+      FN@54..65\n         FN_KW@54..56 \"fn\"\n         WHITESPACE@56..57 \" \"\n         NAME@57..60\n@@ -58,7 +58,7 @@ SOURCE_FILE@0..89\n           L_CURLY@63..64 \"{\"\n           R_CURLY@64..65 \"}\"\n       WHITESPACE@65..70 \"\\n    \"\n-      FN_DEF@70..86\n+      FN@70..86\n         FN_KW@70..72 \"fn\"\n         WHITESPACE@72..73 \" \"\n         NAME@73..76"}, {"sha": "50742cbcf1f6f70e53c1f3dfac44ec02dacb9437", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0022_crate_visibility.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..81\n-  STRUCT_DEF@0..20\n+  STRUCT@0..20\n     VISIBILITY@0..10\n       PUB_KW@0..3 \"pub\"\n       L_PAREN@3..4 \"(\"\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..81\n       IDENT@18..19 \"S\"\n     SEMICOLON@19..20 \";\"\n   WHITESPACE@20..21 \"\\n\"\n-  STRUCT_DEF@21..40\n+  STRUCT@21..40\n     VISIBILITY@21..30\n       PUB_KW@21..24 \"pub\"\n       L_PAREN@24..25 \"(\"\n@@ -25,7 +25,7 @@ SOURCE_FILE@0..81\n       IDENT@38..39 \"S\"\n     SEMICOLON@39..40 \";\"\n   WHITESPACE@40..41 \"\\n\"\n-  STRUCT_DEF@41..60\n+  STRUCT@41..60\n     VISIBILITY@41..50\n       PUB_KW@41..44 \"pub\"\n       L_PAREN@44..45 \"(\"\n@@ -38,7 +38,7 @@ SOURCE_FILE@0..81\n       IDENT@58..59 \"S\"\n     SEMICOLON@59..60 \";\"\n   WHITESPACE@60..61 \"\\n\"\n-  STRUCT_DEF@61..80\n+  STRUCT@61..80\n     VISIBILITY@61..70\n       PUB_KW@61..64 \"pub\"\n       L_PAREN@64..65 \"(\""}, {"sha": "e4fe2b948b0b5a34bdd28dbe2efde62721b9e649", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0023_placeholder_type.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,13 +1,13 @@\n SOURCE_FILE@0..22\n-  TYPE_ALIAS_DEF@0..21\n+  TYPE_ALIAS@0..21\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..16\n       IDENT@5..16 \"Placeholder\"\n     WHITESPACE@16..17 \" \"\n     EQ@17..18 \"=\"\n     WHITESPACE@18..19 \" \"\n-    PLACEHOLDER_TYPE@19..20\n+    INFER_TYPE@19..20\n       UNDERSCORE@19..20 \"_\"\n     SEMICOLON@20..21 \";\"\n   WHITESPACE@21..22 \"\\n\""}, {"sha": "2dbce34b61e4a3a56f7a6b14da2552e59ce1528e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0024_slice_pat.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0024_slice_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0024_slice_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0024_slice_pat.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..39\n-  FN_DEF@0..38\n+  FN@0..38\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7\n@@ -16,17 +16,17 @@ SOURCE_FILE@0..39\n         WHITESPACE@19..20 \" \"\n         SLICE_PAT@20..30\n           L_BRACK@20..21 \"[\"\n-          BIND_PAT@21..22\n+          IDENT_PAT@21..22\n             NAME@21..22\n               IDENT@21..22 \"a\"\n           COMMA@22..23 \",\"\n           WHITESPACE@23..24 \" \"\n-          BIND_PAT@24..25\n+          IDENT_PAT@24..25\n             NAME@24..25\n               IDENT@24..25 \"b\"\n           COMMA@25..26 \",\"\n           WHITESPACE@26..27 \" \"\n-          DOT_DOT_PAT@27..29\n+          REST_PAT@27..29\n             DOT2@27..29 \"..\"\n           R_BRACK@29..30 \"]\"\n         WHITESPACE@30..31 \" \""}, {"sha": "fd819ea370e60c0cd37073e646d1ba93d96f0ea0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0025_slice_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0025_slice_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0025_slice_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0025_slice_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..15\n-  TYPE_ALIAS_DEF@0..14\n+  TYPE_ALIAS@0..14\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "467a30134699c2a7de7a7612f64bb4948dba2394", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0026_tuple_pat_fields.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0026_tuple_pat_fields.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0026_tuple_pat_fields.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0026_tuple_pat_fields.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..97\n-  FN_DEF@0..96\n+  FN@0..96\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -38,7 +38,7 @@ SOURCE_FILE@0..97\n               NAME_REF@37..38\n                 IDENT@37..38 \"S\"\n           L_PAREN@38..39 \"(\"\n-          PLACEHOLDER_PAT@39..40\n+          WILDCARD_PAT@39..40\n             UNDERSCORE@39..40 \"_\"\n           R_PAREN@40..41 \")\"\n         WHITESPACE@41..42 \" \"\n@@ -58,7 +58,7 @@ SOURCE_FILE@0..97\n               NAME_REF@56..57\n                 IDENT@56..57 \"S\"\n           L_PAREN@57..58 \"(\"\n-          PLACEHOLDER_PAT@58..59\n+          WILDCARD_PAT@58..59\n             UNDERSCORE@58..59 \"_\"\n           COMMA@59..60 \",\"\n           R_PAREN@60..61 \")\"\n@@ -79,16 +79,16 @@ SOURCE_FILE@0..97\n               NAME_REF@76..77\n                 IDENT@76..77 \"S\"\n           L_PAREN@77..78 \"(\"\n-          PLACEHOLDER_PAT@78..79\n+          WILDCARD_PAT@78..79\n             UNDERSCORE@78..79 \"_\"\n           COMMA@79..80 \",\"\n           WHITESPACE@80..81 \" \"\n-          DOT_DOT_PAT@81..83\n+          REST_PAT@81..83\n             DOT2@81..83 \"..\"\n           WHITESPACE@83..84 \" \"\n           COMMA@84..85 \",\"\n           WHITESPACE@85..86 \" \"\n-          BIND_PAT@86..87\n+          IDENT_PAT@86..87\n             NAME@86..87\n               IDENT@86..87 \"x\"\n           R_PAREN@87..88 \")\""}, {"sha": "348b54dc9d80dd6a73c505f7c44abd996d151d24", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0027_ref_pat.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0027_ref_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0027_ref_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0027_ref_pat.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..52\n-  FN_DEF@0..51\n+  FN@0..51\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7\n@@ -16,7 +16,7 @@ SOURCE_FILE@0..52\n         WHITESPACE@19..20 \" \"\n         REF_PAT@20..22\n           AMP@20..21 \"&\"\n-          BIND_PAT@21..22\n+          IDENT_PAT@21..22\n             NAME@21..22\n               IDENT@21..22 \"a\"\n         WHITESPACE@22..23 \" \"\n@@ -34,7 +34,7 @@ SOURCE_FILE@0..52\n           AMP@37..38 \"&\"\n           MUT_KW@38..41 \"mut\"\n           WHITESPACE@41..42 \" \"\n-          BIND_PAT@42..43\n+          IDENT_PAT@42..43\n             NAME@42..43\n               IDENT@42..43 \"b\"\n         WHITESPACE@43..44 \" \""}, {"sha": "32b2959bdfc65b803b3305d031f41bc71e59a5f4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0028_impl_trait_type.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..43\n-  TYPE_ALIAS_DEF@0..42\n+  TYPE_ALIAS@0..42\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -17,7 +17,7 @@ SOURCE_FILE@0..43\n               PATH_SEGMENT@14..36\n                 NAME_REF@14..22\n                   IDENT@14..22 \"Iterator\"\n-                TYPE_ARG_LIST@22..36\n+                GENERIC_ARG_LIST@22..36\n                   L_ANGLE@22..23 \"<\"\n                   ASSOC_TYPE_ARG@23..35\n                     NAME_REF@23..27\n@@ -28,7 +28,7 @@ SOURCE_FILE@0..43\n                         PATH_SEGMENT@28..35\n                           NAME_REF@28..31\n                             IDENT@28..31 \"Foo\"\n-                          TYPE_ARG_LIST@31..35\n+                          GENERIC_ARG_LIST@31..35\n                             L_ANGLE@31..32 \"<\"\n                             LIFETIME_ARG@32..34\n                               LIFETIME@32..34 \"\\'a\""}, {"sha": "e096b3a1f645c43ca97a1d5a524357bc9637cbc0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0029_cast_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0029_cast_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0029_cast_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0029_cast_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..89\n-  FN_DEF@0..88\n+  FN@0..88\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "58a97d3ad89262d72456e5e2c4d46881aa0ef03a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0030_cond.rast", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..197\n-  FN_DEF@0..37\n+  FN@0..37\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -23,7 +23,7 @@ SOURCE_FILE@0..197\n                 NAME_REF@18..22\n                   IDENT@18..22 \"Some\"\n             L_PAREN@22..23 \"(\"\n-            PLACEHOLDER_PAT@23..24\n+            WILDCARD_PAT@23..24\n               UNDERSCORE@23..24 \"_\"\n             R_PAREN@24..25 \")\"\n           WHITESPACE@25..26 \" \"\n@@ -41,7 +41,7 @@ SOURCE_FILE@0..197\n       WHITESPACE@35..36 \" \"\n       R_CURLY@36..37 \"}\"\n   WHITESPACE@37..38 \"\\n\"\n-  FN_DEF@38..196\n+  FN@38..196\n     FN_KW@38..40 \"fn\"\n     WHITESPACE@40..41 \" \"\n     NAME@41..44\n@@ -67,7 +67,7 @@ SOURCE_FILE@0..197\n                     NAME_REF@60..64\n                       IDENT@60..64 \"Some\"\n                 L_PAREN@64..65 \"(\"\n-                PLACEHOLDER_PAT@65..66\n+                WILDCARD_PAT@65..66\n                   UNDERSCORE@65..66 \"_\"\n                 R_PAREN@66..67 \")\"\n               WHITESPACE@67..68 \" \"\n@@ -79,7 +79,7 @@ SOURCE_FILE@0..197\n                     NAME_REF@70..74\n                       IDENT@70..74 \"Some\"\n                 L_PAREN@74..75 \"(\"\n-                PLACEHOLDER_PAT@75..76\n+                WILDCARD_PAT@75..76\n                   UNDERSCORE@75..76 \"_\"\n                 R_PAREN@76..77 \")\"\n             WHITESPACE@77..78 \" \"\n@@ -110,7 +110,7 @@ SOURCE_FILE@0..197\n                   NAME_REF@101..105\n                     IDENT@101..105 \"Some\"\n               L_PAREN@105..106 \"(\"\n-              PLACEHOLDER_PAT@106..107\n+              WILDCARD_PAT@106..107\n                 UNDERSCORE@106..107 \"_\"\n               R_PAREN@107..108 \")\"\n             WHITESPACE@108..109 \" \"\n@@ -140,7 +140,7 @@ SOURCE_FILE@0..197\n                     NAME_REF@133..137\n                       IDENT@133..137 \"Some\"\n                 L_PAREN@137..138 \"(\"\n-                PLACEHOLDER_PAT@138..139\n+                WILDCARD_PAT@138..139\n                   UNDERSCORE@138..139 \"_\"\n                 R_PAREN@139..140 \")\"\n               WHITESPACE@140..141 \" \"\n@@ -152,7 +152,7 @@ SOURCE_FILE@0..197\n                     NAME_REF@143..147\n                       IDENT@143..147 \"Some\"\n                 L_PAREN@147..148 \"(\"\n-                PLACEHOLDER_PAT@148..149\n+                WILDCARD_PAT@148..149\n                   UNDERSCORE@148..149 \"_\"\n                 R_PAREN@149..150 \")\"\n             WHITESPACE@150..151 \" \"\n@@ -182,7 +182,7 @@ SOURCE_FILE@0..197\n                 NAME_REF@177..181\n                   IDENT@177..181 \"Some\"\n             L_PAREN@181..182 \"(\"\n-            PLACEHOLDER_PAT@182..183\n+            WILDCARD_PAT@182..183\n               UNDERSCORE@182..183 \"_\"\n             R_PAREN@183..184 \")\"\n           WHITESPACE@184..185 \" \""}, {"sha": "173cecf6d9d4ee8a5760217df5c660989cef7dcb", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0031_while_expr.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..93\n-  FN_DEF@0..92\n+  FN@0..92\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -37,7 +37,7 @@ SOURCE_FILE@0..93\n                   NAME_REF@44..48\n                     IDENT@44..48 \"Some\"\n               L_PAREN@48..49 \"(\"\n-              BIND_PAT@49..50\n+              IDENT_PAT@49..50\n                 NAME@49..50\n                   IDENT@49..50 \"x\"\n               R_PAREN@50..51 \")\""}, {"sha": "dda6577eda8cd7e624a7fc0e5927ab362829a84c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0032_fn_pointer_type.rast", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0032_fn_pointer_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0032_fn_pointer_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0032_fn_pointer_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,28 +1,28 @@\n SOURCE_FILE@0..113\n-  TYPE_ALIAS_DEF@0..14\n+  TYPE_ALIAS@0..14\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n       IDENT@5..6 \"A\"\n     WHITESPACE@6..7 \" \"\n     EQ@7..8 \"=\"\n     WHITESPACE@8..9 \" \"\n-    FN_POINTER_TYPE@9..13\n+    FN_PTR_TYPE@9..13\n       FN_KW@9..11 \"fn\"\n       PARAM_LIST@11..13\n         L_PAREN@11..12 \"(\"\n         R_PAREN@12..13 \")\"\n     SEMICOLON@13..14 \";\"\n   WHITESPACE@14..15 \"\\n\"\n-  TYPE_ALIAS_DEF@15..36\n+  TYPE_ALIAS@15..36\n     TYPE_KW@15..19 \"type\"\n     WHITESPACE@19..20 \" \"\n     NAME@20..21\n       IDENT@20..21 \"B\"\n     WHITESPACE@21..22 \" \"\n     EQ@22..23 \"=\"\n     WHITESPACE@23..24 \" \"\n-    FN_POINTER_TYPE@24..35\n+    FN_PTR_TYPE@24..35\n       UNSAFE_KW@24..30 \"unsafe\"\n       WHITESPACE@30..31 \" \"\n       FN_KW@31..33 \"fn\"\n@@ -31,15 +31,15 @@ SOURCE_FILE@0..113\n         R_PAREN@34..35 \")\"\n     SEMICOLON@35..36 \";\"\n   WHITESPACE@36..37 \"\\n\"\n-  TYPE_ALIAS_DEF@37..69\n+  TYPE_ALIAS@37..69\n     TYPE_KW@37..41 \"type\"\n     WHITESPACE@41..42 \" \"\n     NAME@42..43\n       IDENT@42..43 \"C\"\n     WHITESPACE@43..44 \" \"\n     EQ@44..45 \"=\"\n     WHITESPACE@45..46 \" \"\n-    FN_POINTER_TYPE@46..68\n+    FN_PTR_TYPE@46..68\n       UNSAFE_KW@46..52 \"unsafe\"\n       WHITESPACE@52..53 \" \"\n       ABI@53..63\n@@ -53,15 +53,15 @@ SOURCE_FILE@0..113\n         R_PAREN@67..68 \")\"\n     SEMICOLON@68..69 \";\"\n   WHITESPACE@69..70 \"\\n\"\n-  TYPE_ALIAS_DEF@70..112\n+  TYPE_ALIAS@70..112\n     TYPE_KW@70..74 \"type\"\n     WHITESPACE@74..75 \" \"\n     NAME@75..76\n       IDENT@75..76 \"D\"\n     WHITESPACE@76..77 \" \"\n     EQ@77..78 \"=\"\n     WHITESPACE@78..79 \" \"\n-    FN_POINTER_TYPE@79..111\n+    FN_PTR_TYPE@79..111\n       ABI@79..89\n         EXTERN_KW@79..85 \"extern\"\n         WHITESPACE@85..86 \" \""}, {"sha": "974df9f9aa13635f1c1e2d48bfd649283d826cb2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0033_reference_type;.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,28 +1,28 @@\n SOURCE_FILE@0..54\n-  TYPE_ALIAS_DEF@0..13\n+  TYPE_ALIAS@0..13\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n       IDENT@5..6 \"A\"\n     WHITESPACE@6..7 \" \"\n     EQ@7..8 \"=\"\n     WHITESPACE@8..9 \" \"\n-    REFERENCE_TYPE@9..12\n+    REF_TYPE@9..12\n       AMP@9..10 \"&\"\n       TUPLE_TYPE@10..12\n         L_PAREN@10..11 \"(\"\n         R_PAREN@11..12 \")\"\n     SEMICOLON@12..13 \";\"\n   WHITESPACE@13..14 \"\\n\"\n-  TYPE_ALIAS_DEF@14..35\n+  TYPE_ALIAS@14..35\n     TYPE_KW@14..18 \"type\"\n     WHITESPACE@18..19 \" \"\n     NAME@19..20\n       IDENT@19..20 \"B\"\n     WHITESPACE@20..21 \" \"\n     EQ@21..22 \"=\"\n     WHITESPACE@22..23 \" \"\n-    REFERENCE_TYPE@23..34\n+    REF_TYPE@23..34\n       AMP@23..24 \"&\"\n       LIFETIME@24..31 \"\\'static\"\n       WHITESPACE@31..32 \" \"\n@@ -31,15 +31,15 @@ SOURCE_FILE@0..54\n         R_PAREN@33..34 \")\"\n     SEMICOLON@34..35 \";\"\n   WHITESPACE@35..36 \"\\n\"\n-  TYPE_ALIAS_DEF@36..53\n+  TYPE_ALIAS@36..53\n     TYPE_KW@36..40 \"type\"\n     WHITESPACE@40..41 \" \"\n     NAME@41..42\n       IDENT@41..42 \"C\"\n     WHITESPACE@42..43 \" \"\n     EQ@43..44 \"=\"\n     WHITESPACE@44..45 \" \"\n-    REFERENCE_TYPE@45..52\n+    REF_TYPE@45..52\n       AMP@45..46 \"&\"\n       MUT_KW@46..49 \"mut\"\n       WHITESPACE@49..50 \" \""}, {"sha": "f905def6ff00c938a70ef7564a867408bd9ca321", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0034_break_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..102\n-  FN_DEF@0..101\n+  FN@0..101\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "293b1d64c7ec6b3926b654f9f3691ca2b504174e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0036_unsafe_extern_fn.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..30\n-  FN_DEF@0..29\n+  FN@0..29\n     UNSAFE_KW@0..6 \"unsafe\"\n     WHITESPACE@6..7 \" \"\n     ABI@7..17"}, {"sha": "b6379e62f8c1590eebbd5f5b1e43aef3aa5c7cce", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0037_qual_paths.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..71\n-  TYPE_ALIAS_DEF@0..26\n+  TYPE_ALIAS@0..26\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -32,7 +32,7 @@ SOURCE_FILE@0..71\n             IDENT@19..25 \"Output\"\n     SEMICOLON@25..26 \";\"\n   WHITESPACE@26..27 \"\\n\"\n-  FN_DEF@27..70\n+  FN@27..70\n     FN_KW@27..29 \"fn\"\n     WHITESPACE@29..30 \" \"\n     NAME@30..33"}, {"sha": "64e705fb3d2250d31b69d24b450b142d7c235696", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0038_full_range_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0038_full_range_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0038_full_range_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0038_full_range_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..21\n-  FN_DEF@0..20\n+  FN@0..20\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "69e98b9d6c0267beb49835a90e9f946d324c905a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0039_type_arg.rast", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..46\n-  TYPE_ALIAS_DEF@0..45\n+  TYPE_ALIAS@0..45\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..46\n         PATH_SEGMENT@9..44\n           NAME_REF@9..10\n             IDENT@9..10 \"B\"\n-          TYPE_ARG_LIST@10..44\n+          GENERIC_ARG_LIST@10..44\n             L_ANGLE@10..11 \"<\"\n             LIFETIME_ARG@11..18\n               LIFETIME@11..18 \"\\'static\"\n@@ -27,7 +27,8 @@ SOURCE_FILE@0..46\n             COMMA@23..24 \",\"\n             WHITESPACE@24..25 \" \"\n             CONST_ARG@25..26\n-              INT_NUMBER@25..26 \"1\"\n+              LITERAL@25..26\n+                INT_NUMBER@25..26 \"1\"\n             COMMA@26..27 \",\"\n             WHITESPACE@27..28 \" \"\n             CONST_ARG@28..33"}, {"sha": "db5bd28496933e6629f7455dd3023ab6c82effdf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0040_crate_keyword_vis.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..71\n-  FN_DEF@0..19\n+  FN@0..19\n     VISIBILITY@0..5\n       CRATE_KW@0..5 \"crate\"\n     WHITESPACE@5..6 \" \"\n@@ -16,16 +16,16 @@ SOURCE_FILE@0..71\n       WHITESPACE@17..18 \" \"\n       R_CURLY@18..19 \"}\"\n   WHITESPACE@19..20 \"\\n\"\n-  STRUCT_DEF@20..49\n+  STRUCT@20..49\n     STRUCT_KW@20..26 \"struct\"\n     WHITESPACE@26..27 \" \"\n     NAME@27..28\n       IDENT@27..28 \"S\"\n     WHITESPACE@28..29 \" \"\n-    RECORD_FIELD_DEF_LIST@29..49\n+    RECORD_FIELD_LIST@29..49\n       L_CURLY@29..30 \"{\"\n       WHITESPACE@30..31 \" \"\n-      RECORD_FIELD_DEF@31..47\n+      RECORD_FIELD@31..47\n         VISIBILITY@31..36\n           CRATE_KW@31..36 \"crate\"\n         WHITESPACE@36..37 \" \"\n@@ -41,14 +41,14 @@ SOURCE_FILE@0..71\n       WHITESPACE@47..48 \" \"\n       R_CURLY@48..49 \"}\"\n   WHITESPACE@49..50 \"\\n\"\n-  STRUCT_DEF@50..70\n+  STRUCT@50..70\n     STRUCT_KW@50..56 \"struct\"\n     WHITESPACE@56..57 \" \"\n     NAME@57..58\n       IDENT@57..58 \"T\"\n-    TUPLE_FIELD_DEF_LIST@58..69\n+    TUPLE_FIELD_LIST@58..69\n       L_PAREN@58..59 \"(\"\n-      TUPLE_FIELD_DEF@59..68\n+      TUPLE_FIELD@59..68\n         VISIBILITY@59..64\n           CRATE_KW@59..64 \"crate\"\n         WHITESPACE@64..65 \" \""}, {"sha": "3638462f8b2664dc05099eb744c9d7cd70c50c12", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0041_trait_item.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,10 +1,10 @@\n SOURCE_FILE@0..101\n-  TRAIT_DEF@0..41\n+  TRAIT@0..41\n     TRAIT_KW@0..5 \"trait\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7\n       IDENT@6..7 \"T\"\n-    TYPE_PARAM_LIST@7..10\n+    GENERIC_PARAM_LIST@7..10\n       L_ANGLE@7..8 \"<\"\n       TYPE_PARAM@8..9\n         NAME@8..9\n@@ -48,16 +48,16 @@ SOURCE_FILE@0..101\n                   NAME_REF@34..38\n                     IDENT@34..38 \"Copy\"\n     WHITESPACE@38..39 \" \"\n-    ITEM_LIST@39..41\n+    ASSOC_ITEM_LIST@39..41\n       L_CURLY@39..40 \"{\"\n       R_CURLY@40..41 \"}\"\n   WHITESPACE@41..42 \"\\n\"\n-  TRAIT_DEF@42..100\n+  TRAIT@42..100\n     TRAIT_KW@42..47 \"trait\"\n     WHITESPACE@47..48 \" \"\n     NAME@48..49\n       IDENT@48..49 \"X\"\n-    TYPE_PARAM_LIST@49..69\n+    GENERIC_PARAM_LIST@49..69\n       L_ANGLE@49..50 \"<\"\n       TYPE_PARAM@50..68\n         NAME@50..51\n@@ -119,7 +119,7 @@ SOURCE_FILE@0..101\n                   NAME_REF@93..97\n                     IDENT@93..97 \"Copy\"\n     WHITESPACE@97..98 \" \"\n-    ITEM_LIST@98..100\n+    ASSOC_ITEM_LIST@98..100\n       L_CURLY@98..99 \"{\"\n       R_CURLY@99..100 \"}\"\n   WHITESPACE@100..101 \"\\n\""}, {"sha": "fa38e946673eaec05e5997fec0f1bf2ff2ea614a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0042_call_expr.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0042_call_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0042_call_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0042_call_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..118\n-  FN_DEF@0..117\n+  FN@0..117\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..118\n       LET_STMT@15..27\n         LET_KW@15..18 \"let\"\n         WHITESPACE@18..19 \" \"\n-        PLACEHOLDER_PAT@19..20\n+        WILDCARD_PAT@19..20\n           UNDERSCORE@19..20 \"_\"\n         WHITESPACE@20..21 \" \"\n         EQ@21..22 \"=\"\n@@ -33,7 +33,7 @@ SOURCE_FILE@0..118\n       LET_STMT@32..54\n         LET_KW@32..35 \"let\"\n         WHITESPACE@35..36 \" \"\n-        PLACEHOLDER_PAT@36..37\n+        WILDCARD_PAT@36..37\n           UNDERSCORE@36..37 \"_\"\n         WHITESPACE@37..38 \" \"\n         EQ@38..39 \"=\"\n@@ -69,7 +69,7 @@ SOURCE_FILE@0..118\n       LET_STMT@59..84\n         LET_KW@59..62 \"let\"\n         WHITESPACE@62..63 \" \"\n-        PLACEHOLDER_PAT@63..64\n+        WILDCARD_PAT@63..64\n           UNDERSCORE@63..64 \"_\"\n         WHITESPACE@64..65 \" \"\n         EQ@65..66 \"=\""}, {"sha": "60b517230e8b3a70b7db131054d60ef3a7ffc58c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0043_use_alias.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0043_use_alias.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0043_use_alias.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0043_use_alias.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..198\n-  USE_ITEM@0..28\n+  USE@0..28\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..27\n@@ -13,14 +13,14 @@ SOURCE_FILE@0..198\n           NAME_REF@10..14\n             IDENT@10..14 \"path\"\n       WHITESPACE@14..15 \" \"\n-      ALIAS@15..27\n+      RENAME@15..27\n         AS_KW@15..17 \"as\"\n         WHITESPACE@17..18 \" \"\n         NAME@18..27\n           IDENT@18..27 \"some_name\"\n     SEMICOLON@27..28 \";\"\n   WHITESPACE@28..29 \"\\n\"\n-  USE_ITEM@29..181\n+  USE@29..181\n     USE_KW@29..32 \"use\"\n     WHITESPACE@32..33 \" \"\n     USE_TREE@33..180\n@@ -43,7 +43,7 @@ SOURCE_FILE@0..198\n               NAME_REF@49..53\n                 IDENT@49..53 \"path\"\n           WHITESPACE@53..54 \" \"\n-          ALIAS@54..72\n+          RENAME@54..72\n             AS_KW@54..56 \"as\"\n             WHITESPACE@56..57 \" \"\n             NAME@57..72\n@@ -61,7 +61,7 @@ SOURCE_FILE@0..198\n               NAME_REF@86..90\n                 IDENT@86..90 \"path\"\n           WHITESPACE@90..91 \" \"\n-          ALIAS@91..108\n+          RENAME@91..108\n             AS_KW@91..93 \"as\"\n             WHITESPACE@93..94 \" \"\n             NAME@94..108\n@@ -121,7 +121,7 @@ SOURCE_FILE@0..198\n         R_CURLY@179..180 \"}\"\n     SEMICOLON@180..181 \";\"\n   WHITESPACE@181..182 \"\\n\"\n-  USE_ITEM@182..197\n+  USE@182..197\n     USE_KW@182..185 \"use\"\n     WHITESPACE@185..186 \" \"\n     USE_TREE@186..196\n@@ -130,7 +130,7 @@ SOURCE_FILE@0..198\n           NAME_REF@186..191\n             IDENT@186..191 \"Trait\"\n       WHITESPACE@191..192 \" \"\n-      ALIAS@192..196\n+      RENAME@192..196\n         AS_KW@192..194 \"as\"\n         WHITESPACE@194..195 \" \"\n         UNDERSCORE@195..196 \"_\""}, {"sha": "1fd3cd0e783c50cd4664b213e800c2796640c0bc", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0044_block_items.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0044_block_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0044_block_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0044_block_items.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..21\n-  FN_DEF@0..20\n+  FN@0..20\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..4\n@@ -11,7 +11,7 @@ SOURCE_FILE@0..21\n     BLOCK_EXPR@7..20\n       L_CURLY@7..8 \"{\"\n       WHITESPACE@8..9 \" \"\n-      FN_DEF@9..18\n+      FN@9..18\n         FN_KW@9..11 \"fn\"\n         WHITESPACE@11..12 \" \"\n         NAME@12..13"}, {"sha": "6baea6e3ca2ad912a6eb6d58491205c123082e34", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0045_param_list_opt_patterns.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,10 +1,10 @@\n SOURCE_FILE@0..35\n-  FN_DEF@0..34\n+  FN@0..34\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n       IDENT@3..6 \"foo\"\n-    TYPE_PARAM_LIST@6..30\n+    GENERIC_PARAM_LIST@6..30\n       L_ANGLE@6..7 \"<\"\n       TYPE_PARAM@7..29\n         NAME@7..8\n@@ -21,7 +21,7 @@ SOURCE_FILE@0..35\n                   PARAM_LIST@15..29\n                     L_PAREN@15..16 \"(\"\n                     PARAM@16..28\n-                      REFERENCE_TYPE@16..28\n+                      REF_TYPE@16..28\n                         AMP@16..17 \"&\"\n                         MUT_KW@17..20 \"mut\"\n                         WHITESPACE@20..21 \" \"\n@@ -30,7 +30,7 @@ SOURCE_FILE@0..35\n                             PATH_SEGMENT@21..28\n                               NAME_REF@21..24\n                                 IDENT@21..24 \"Foo\"\n-                              TYPE_ARG_LIST@24..28\n+                              GENERIC_ARG_LIST@24..28\n                                 L_ANGLE@24..25 \"<\"\n                                 LIFETIME_ARG@25..27\n                                   LIFETIME@25..27 \"\\'a\""}, {"sha": "e89284c1405b2d6f4113bb6897d4057eab86066b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0046_singleton_tuple_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0046_singleton_tuple_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0046_singleton_tuple_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0046_singleton_tuple_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..17\n-  TYPE_ALIAS_DEF@0..16\n+  TYPE_ALIAS@0..16\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "d6dfa83b709bfc5e1d605cf845b11a6b3bb33212", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0047_unsafe_default_impl.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..27\n-  IMPL_DEF@0..26\n+  IMPL@0..26\n     UNSAFE_KW@0..6 \"unsafe\"\n     WHITESPACE@6..7 \" \"\n     DEFAULT_KW@7..14 \"default\"\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..27\n           NAME_REF@20..23\n             IDENT@20..23 \"Foo\"\n     WHITESPACE@23..24 \" \"\n-    ITEM_LIST@24..26\n+    ASSOC_ITEM_LIST@24..26\n       L_CURLY@24..25 \"{\"\n       R_CURLY@25..26 \"}\"\n   WHITESPACE@26..27 \"\\n\""}, {"sha": "4d8404e7c09ff31b998269ad30a45953be6fabd8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0048_path_type_with_bounds.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..58\n-  FN_DEF@0..26\n+  FN@0..26\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -16,7 +16,7 @@ SOURCE_FILE@0..58\n           PATH_SEGMENT@12..23\n             NAME_REF@12..15\n               IDENT@12..15 \"Box\"\n-            TYPE_ARG_LIST@15..23\n+            GENERIC_ARG_LIST@15..23\n               L_ANGLE@15..16 \"<\"\n               TYPE_ARG@16..22\n                 DYN_TRAIT_TYPE@16..22\n@@ -38,7 +38,7 @@ SOURCE_FILE@0..58\n       L_CURLY@24..25 \"{\"\n       R_CURLY@25..26 \"}\"\n   WHITESPACE@26..27 \"\\n\"\n-  FN_DEF@27..57\n+  FN@27..57\n     FN_KW@27..29 \"fn\"\n     WHITESPACE@29..30 \" \"\n     NAME@30..33\n@@ -55,7 +55,7 @@ SOURCE_FILE@0..58\n           PATH_SEGMENT@39..54\n             NAME_REF@39..42\n               IDENT@39..42 \"Box\"\n-            TYPE_ARG_LIST@42..54\n+            GENERIC_ARG_LIST@42..54\n               L_ANGLE@42..43 \"<\"\n               TYPE_ARG@43..53\n                 DYN_TRAIT_TYPE@43..53"}, {"sha": "a5bf55131dd5d7aa883e3376c9683d1c42d6ddc0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0050_fn_decl.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0050_fn_decl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0050_fn_decl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0050_fn_decl.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,14 +1,14 @@\n SOURCE_FILE@0..22\n-  TRAIT_DEF@0..21\n+  TRAIT@0..21\n     TRAIT_KW@0..5 \"trait\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7\n       IDENT@6..7 \"T\"\n     WHITESPACE@7..8 \" \"\n-    ITEM_LIST@8..21\n+    ASSOC_ITEM_LIST@8..21\n       L_CURLY@8..9 \"{\"\n       WHITESPACE@9..10 \" \"\n-      FN_DEF@10..19\n+      FN@10..19\n         FN_KW@10..12 \"fn\"\n         WHITESPACE@12..13 \" \"\n         NAME@13..16"}, {"sha": "6330dbf9e6041f093da5a0629114813d81afeca8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0051_unit_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0051_unit_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0051_unit_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0051_unit_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..13\n-  TYPE_ALIAS_DEF@0..12\n+  TYPE_ALIAS@0..12\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "9bc36bea70a4bfb416b57ba00ac30aac79a8dc05", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0052_path_type.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..71\n-  TYPE_ALIAS_DEF@0..13\n+  TYPE_ALIAS@0..13\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..71\n             IDENT@9..12 \"Foo\"\n     SEMICOLON@12..13 \";\"\n   WHITESPACE@13..14 \"\\n\"\n-  TYPE_ALIAS_DEF@14..29\n+  TYPE_ALIAS@14..29\n     TYPE_KW@14..18 \"type\"\n     WHITESPACE@18..19 \" \"\n     NAME@19..20\n@@ -30,7 +30,7 @@ SOURCE_FILE@0..71\n             IDENT@25..28 \"Foo\"\n     SEMICOLON@28..29 \";\"\n   WHITESPACE@29..30 \"\\n\"\n-  TYPE_ALIAS_DEF@30..49\n+  TYPE_ALIAS@30..49\n     TYPE_KW@30..34 \"type\"\n     WHITESPACE@34..35 \" \"\n     NAME@35..36\n@@ -49,7 +49,7 @@ SOURCE_FILE@0..71\n             IDENT@45..48 \"Foo\"\n     SEMICOLON@48..49 \";\"\n   WHITESPACE@49..50 \"\\n\"\n-  TYPE_ALIAS_DEF@50..70\n+  TYPE_ALIAS@50..70\n     TYPE_KW@50..54 \"type\"\n     WHITESPACE@54..55 \" \"\n     NAME@55..56"}, {"sha": "c34cfeb3155f4b910eb7cda434379881fa157931", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0053_path_expr.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..91\n-  FN_DEF@0..90\n+  FN@0..90\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..91\n       LET_STMT@15..25\n         LET_KW@15..18 \"let\"\n         WHITESPACE@18..19 \" \"\n-        PLACEHOLDER_PAT@19..20\n+        WILDCARD_PAT@19..20\n           UNDERSCORE@19..20 \"_\"\n         WHITESPACE@20..21 \" \"\n         EQ@21..22 \"=\"\n@@ -29,7 +29,7 @@ SOURCE_FILE@0..91\n       LET_STMT@30..43\n         LET_KW@30..33 \"let\"\n         WHITESPACE@33..34 \" \"\n-        PLACEHOLDER_PAT@34..35\n+        WILDCARD_PAT@34..35\n           UNDERSCORE@34..35 \"_\"\n         WHITESPACE@35..36 \" \"\n         EQ@36..37 \"=\"\n@@ -49,7 +49,7 @@ SOURCE_FILE@0..91\n       LET_STMT@48..65\n         LET_KW@48..51 \"let\"\n         WHITESPACE@51..52 \" \"\n-        PLACEHOLDER_PAT@52..53\n+        WILDCARD_PAT@52..53\n           UNDERSCORE@52..53 \"_\"\n         WHITESPACE@53..54 \" \"\n         EQ@54..55 \"=\"\n@@ -60,7 +60,7 @@ SOURCE_FILE@0..91\n               COLON2@56..58 \"::\"\n               NAME_REF@58..59\n                 IDENT@58..59 \"a\"\n-              TYPE_ARG_LIST@59..64\n+              GENERIC_ARG_LIST@59..64\n                 COLON2@59..61 \"::\"\n                 L_ANGLE@61..62 \"<\"\n                 TYPE_ARG@62..63\n@@ -75,7 +75,7 @@ SOURCE_FILE@0..91\n       LET_STMT@70..88\n         LET_KW@70..73 \"let\"\n         WHITESPACE@73..74 \" \"\n-        PLACEHOLDER_PAT@74..75\n+        WILDCARD_PAT@74..75\n           UNDERSCORE@74..75 \"_\"\n         WHITESPACE@75..76 \" \"\n         EQ@76..77 \"=\""}, {"sha": "9ae271817e95562f713bcc7d8def8c60829a4aea", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0054_record_field_attrs.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,14 +1,14 @@\n SOURCE_FILE@0..64\n-  STRUCT_DEF@0..63\n+  STRUCT@0..63\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    RECORD_FIELD_DEF_LIST@9..63\n+    RECORD_FIELD_LIST@9..63\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      RECORD_FIELD_DEF@15..60\n+      RECORD_FIELD@15..60\n         ATTR@15..43\n           POUND@15..16 \"#\"\n           L_BRACK@16..17 \"[\""}, {"sha": "68bb43852566ae8a7dde307d22d06cdb17173994", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0055_literal_pattern.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0055_literal_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0055_literal_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0055_literal_pattern.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..113\n-  FN_DEF@0..112\n+  FN@0..112\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7"}, {"sha": "28129c50c61882fd5532c539c2c32c21e41089a3", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0056_where_clause.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..116\n-  FN_DEF@0..115\n+  FN@0..115\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "97548a5eebcbd5041ca6c15086154d7fab4c1060", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0057_const_fn.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..18\n-  FN_DEF@0..17\n+  FN@0..17\n     CONST_KW@0..5 \"const\"\n     WHITESPACE@5..6 \" \"\n     FN_KW@6..8 \"fn\""}, {"sha": "3e72f9671c37628cab2545a27e792d9ea141f42d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0058_range_pat.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..112\n-  FN_DEF@0..111\n+  FN@0..111\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7"}, {"sha": "984829317e27caa9eb65bc42530aa94278ac5938", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0059_match_arms_commas.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0059_match_arms_commas.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0059_match_arms_commas.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0059_match_arms_commas.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..83\n-  FN_DEF@0..82\n+  FN@0..82\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -22,7 +22,7 @@ SOURCE_FILE@0..83\n           L_CURLY@24..25 \"{\"\n           WHITESPACE@25..34 \"\\n        \"\n           MATCH_ARM@34..41\n-            PLACEHOLDER_PAT@34..35\n+            WILDCARD_PAT@34..35\n               UNDERSCORE@34..35 \"_\"\n             WHITESPACE@35..36 \" \"\n             FAT_ARROW@36..38 \"=>\"\n@@ -33,7 +33,7 @@ SOURCE_FILE@0..83\n           COMMA@41..42 \",\"\n           WHITESPACE@42..51 \"\\n        \"\n           MATCH_ARM@51..58\n-            PLACEHOLDER_PAT@51..52\n+            WILDCARD_PAT@51..52\n               UNDERSCORE@51..52 \"_\"\n             WHITESPACE@52..53 \" \"\n             FAT_ARROW@53..55 \"=>\"\n@@ -43,7 +43,7 @@ SOURCE_FILE@0..83\n               R_CURLY@57..58 \"}\"\n           WHITESPACE@58..67 \"\\n        \"\n           MATCH_ARM@67..74\n-            PLACEHOLDER_PAT@67..68\n+            WILDCARD_PAT@67..68\n               UNDERSCORE@67..68 \"_\"\n             WHITESPACE@68..69 \" \"\n             FAT_ARROW@69..71 \"=>\""}, {"sha": "25e1777d1ab3778a0c79e3fee338a73290e00e60", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0060_extern_crate.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0060_extern_crate.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0060_extern_crate.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0060_extern_crate.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..18\n-  EXTERN_CRATE_ITEM@0..17\n+  EXTERN_CRATE@0..17\n     EXTERN_KW@0..6 \"extern\"\n     WHITESPACE@6..7 \" \"\n     CRATE_KW@7..12 \"crate\""}, {"sha": "a9ae1aa5953e93fb57173dad88e9e731ac094c61", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0061_record_lit.rast", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..112\n-  FN_DEF@0..111\n+  FN@0..111\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -12,36 +12,36 @@ SOURCE_FILE@0..112\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n       EXPR_STMT@15..20\n-        RECORD_LIT@15..19\n+        RECORD_EXPR@15..19\n           PATH@15..16\n             PATH_SEGMENT@15..16\n               NAME_REF@15..16\n                 IDENT@15..16 \"S\"\n           WHITESPACE@16..17 \" \"\n-          RECORD_FIELD_LIST@17..19\n+          RECORD_EXPR_FIELD_LIST@17..19\n             L_CURLY@17..18 \"{\"\n             R_CURLY@18..19 \"}\"\n         SEMICOLON@19..20 \";\"\n       WHITESPACE@20..25 \"\\n    \"\n       EXPR_STMT@25..41\n-        RECORD_LIT@25..40\n+        RECORD_EXPR@25..40\n           PATH@25..26\n             PATH_SEGMENT@25..26\n               NAME_REF@25..26\n                 IDENT@25..26 \"S\"\n           WHITESPACE@26..27 \" \"\n-          RECORD_FIELD_LIST@27..40\n+          RECORD_EXPR_FIELD_LIST@27..40\n             L_CURLY@27..28 \"{\"\n             WHITESPACE@28..29 \" \"\n-            RECORD_FIELD@29..30\n+            RECORD_EXPR_FIELD@29..30\n               PATH_EXPR@29..30\n                 PATH@29..30\n                   PATH_SEGMENT@29..30\n                     NAME_REF@29..30\n                       IDENT@29..30 \"x\"\n             COMMA@30..31 \",\"\n             WHITESPACE@31..32 \" \"\n-            RECORD_FIELD@32..37\n+            RECORD_EXPR_FIELD@32..37\n               NAME_REF@32..33\n                 IDENT@32..33 \"y\"\n               COLON@33..34 \":\"\n@@ -54,24 +54,24 @@ SOURCE_FILE@0..112\n         SEMICOLON@40..41 \";\"\n       WHITESPACE@41..46 \"\\n    \"\n       EXPR_STMT@46..83\n-        RECORD_LIT@46..82\n+        RECORD_EXPR@46..82\n           PATH@46..47\n             PATH_SEGMENT@46..47\n               NAME_REF@46..47\n                 IDENT@46..47 \"S\"\n           WHITESPACE@47..48 \" \"\n-          RECORD_FIELD_LIST@48..82\n+          RECORD_EXPR_FIELD_LIST@48..82\n             L_CURLY@48..49 \"{\"\n             WHITESPACE@49..50 \" \"\n-            RECORD_FIELD@50..51\n+            RECORD_EXPR_FIELD@50..51\n               PATH_EXPR@50..51\n                 PATH@50..51\n                   PATH_SEGMENT@50..51\n                     NAME_REF@50..51\n                       IDENT@50..51 \"x\"\n             COMMA@51..52 \",\"\n             WHITESPACE@52..53 \" \"\n-            RECORD_FIELD@53..58\n+            RECORD_EXPR_FIELD@53..58\n               NAME_REF@53..54\n                 IDENT@53..54 \"y\"\n               COLON@54..55 \":\"\n@@ -100,16 +100,16 @@ SOURCE_FILE@0..112\n         SEMICOLON@82..83 \";\"\n       WHITESPACE@83..88 \"\\n    \"\n       EXPR_STMT@88..109\n-        RECORD_LIT@88..108\n+        RECORD_EXPR@88..108\n           PATH@88..99\n             PATH_SEGMENT@88..99\n               NAME_REF@88..99\n                 IDENT@88..99 \"TupleStruct\"\n           WHITESPACE@99..100 \" \"\n-          RECORD_FIELD_LIST@100..108\n+          RECORD_EXPR_FIELD_LIST@100..108\n             L_CURLY@100..101 \"{\"\n             WHITESPACE@101..102 \" \"\n-            RECORD_FIELD@102..106\n+            RECORD_EXPR_FIELD@102..106\n               NAME_REF@102..103\n                 INT_NUMBER@102..103 \"0\"\n               COLON@103..104 \":\""}, {"sha": "de8217064f1f096b0395add11947fdc837218142", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0062_mod_contents.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..70\n-  FN_DEF@0..11\n+  FN@0..11\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -57,7 +57,7 @@ SOURCE_FILE@0..70\n       L_CURLY@57..58 \"{\"\n       R_CURLY@58..59 \"}\"\n   WHITESPACE@59..60 \"\\n\"\n-  STRUCT_DEF@60..69\n+  STRUCT@60..69\n     STRUCT_KW@60..66 \"struct\"\n     WHITESPACE@66..67 \" \"\n     NAME@67..68"}, {"sha": "4368930cc9130f3861624e1b3a03fa4d0641d44b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0063_impl_def_neg.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..20\n-  IMPL_DEF@0..19\n+  IMPL@0..19\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     BANG@5..6 \"!\"\n@@ -17,7 +17,7 @@ SOURCE_FILE@0..20\n           NAME_REF@15..16\n             IDENT@15..16 \"X\"\n     WHITESPACE@16..17 \" \"\n-    ITEM_LIST@17..19\n+    ASSOC_ITEM_LIST@17..19\n       L_CURLY@17..18 \"{\"\n       R_CURLY@18..19 \"}\"\n   WHITESPACE@19..20 \"\\n\""}, {"sha": "5871600034474d1c58a72d6f16b2d098cdcdb2d2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0064_if_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..137\n-  FN_DEF@0..136\n+  FN@0..136\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "3a7fcfe2487e63b821afcab22467f03113d539d4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0065_dyn_trait_type.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..42\n-  TYPE_ALIAS_DEF@0..41\n+  TYPE_ALIAS@0..41\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -17,7 +17,7 @@ SOURCE_FILE@0..42\n               PATH_SEGMENT@13..35\n                 NAME_REF@13..21\n                   IDENT@13..21 \"Iterator\"\n-                TYPE_ARG_LIST@21..35\n+                GENERIC_ARG_LIST@21..35\n                   L_ANGLE@21..22 \"<\"\n                   ASSOC_TYPE_ARG@22..34\n                     NAME_REF@22..26\n@@ -28,7 +28,7 @@ SOURCE_FILE@0..42\n                         PATH_SEGMENT@27..34\n                           NAME_REF@27..30\n                             IDENT@27..30 \"Foo\"\n-                          TYPE_ARG_LIST@30..34\n+                          GENERIC_ARG_LIST@30..34\n                             L_ANGLE@30..31 \"<\"\n                             LIFETIME_ARG@31..33\n                               LIFETIME@31..33 \"\\'a\""}, {"sha": "57d0661a54d09c4055b9b5537ce0e6e1fb643505", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0066_match_arm.rast", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..167\n-  FN_DEF@0..166\n+  FN@0..166\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -23,7 +23,7 @@ SOURCE_FILE@0..167\n             L_CURLY@24..25 \"{\"\n             WHITESPACE@25..34 \"\\n        \"\n             MATCH_ARM@34..41\n-              PLACEHOLDER_PAT@34..35\n+              WILDCARD_PAT@34..35\n                 UNDERSCORE@34..35 \"_\"\n               WHITESPACE@35..36 \" \"\n               FAT_ARROW@36..38 \"=>\"\n@@ -34,7 +34,7 @@ SOURCE_FILE@0..167\n             COMMA@41..42 \",\"\n             WHITESPACE@42..51 \"\\n        \"\n             MATCH_ARM@51..83\n-              PLACEHOLDER_PAT@51..52\n+              WILDCARD_PAT@51..52\n                 UNDERSCORE@51..52 \"_\"\n               WHITESPACE@52..53 \" \"\n               MATCH_GUARD@53..77\n@@ -49,14 +49,14 @@ SOURCE_FILE@0..167\n                   WHITESPACE@60..61 \" \"\n                   R_ANGLE@61..62 \">\"\n                   WHITESPACE@62..63 \" \"\n-                  RECORD_LIT@63..77\n+                  RECORD_EXPR@63..77\n                     PATH@63..67\n                       PATH_SEGMENT@63..67\n                         NAME_REF@63..67\n                           IDENT@63..67 \"Test\"\n-                    RECORD_FIELD_LIST@67..77\n+                    RECORD_EXPR_FIELD_LIST@67..77\n                       L_CURLY@67..68 \"{\"\n-                      RECORD_FIELD@68..76\n+                      RECORD_EXPR_FIELD@68..76\n                         NAME_REF@68..73\n                           IDENT@68..73 \"field\"\n                         COLON@73..74 \":\"\n@@ -74,13 +74,13 @@ SOURCE_FILE@0..167\n             WHITESPACE@84..93 \"\\n        \"\n             MATCH_ARM@93..109\n               OR_PAT@93..98\n-                BIND_PAT@93..94\n+                IDENT_PAT@93..94\n                   NAME@93..94\n                     IDENT@93..94 \"X\"\n                 WHITESPACE@94..95 \" \"\n                 PIPE@95..96 \"|\"\n                 WHITESPACE@96..97 \" \"\n-                BIND_PAT@97..98\n+                IDENT_PAT@97..98\n                   NAME@97..98\n                     IDENT@97..98 \"Y\"\n               WHITESPACE@98..99 \" \"\n@@ -104,13 +104,13 @@ SOURCE_FILE@0..167\n               PIPE@119..120 \"|\"\n               WHITESPACE@120..121 \" \"\n               OR_PAT@121..126\n-                BIND_PAT@121..122\n+                IDENT_PAT@121..122\n                   NAME@121..122\n                     IDENT@121..122 \"X\"\n                 WHITESPACE@122..123 \" \"\n                 PIPE@123..124 \"|\"\n                 WHITESPACE@124..125 \" \"\n-                BIND_PAT@125..126\n+                IDENT_PAT@125..126\n                   NAME@125..126\n                     IDENT@125..126 \"Y\"\n               WHITESPACE@126..127 \" \"\n@@ -133,7 +133,7 @@ SOURCE_FILE@0..167\n             MATCH_ARM@147..156\n               PIPE@147..148 \"|\"\n               WHITESPACE@148..149 \" \"\n-              BIND_PAT@149..150\n+              IDENT_PAT@149..150\n                 NAME@149..150\n                   IDENT@149..150 \"X\"\n               WHITESPACE@150..151 \" \""}, {"sha": "702f2e0b0aab124715ef14d300833d2e8491536f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0067_crate_path.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..16\n-  USE_ITEM@0..15\n+  USE@0..15\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..14"}, {"sha": "6589e479519323b1d20d20d81f778011fe563e40", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0068_union_items.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,24 +1,24 @@\n SOURCE_FILE@0..51\n-  UNION_DEF@0..12\n+  UNION@0..12\n     UNION_KW@0..5 \"union\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..9\n       IDENT@6..9 \"Foo\"\n     WHITESPACE@9..10 \" \"\n-    RECORD_FIELD_DEF_LIST@10..12\n+    RECORD_FIELD_LIST@10..12\n       L_CURLY@10..11 \"{\"\n       R_CURLY@11..12 \"}\"\n   WHITESPACE@12..13 \"\\n\"\n-  UNION_DEF@13..50\n+  UNION@13..50\n     UNION_KW@13..18 \"union\"\n     WHITESPACE@18..19 \" \"\n     NAME@19..22\n       IDENT@19..22 \"Foo\"\n     WHITESPACE@22..23 \" \"\n-    RECORD_FIELD_DEF_LIST@23..50\n+    RECORD_FIELD_LIST@23..50\n       L_CURLY@23..24 \"{\"\n       WHITESPACE@24..29 \"\\n    \"\n-      RECORD_FIELD_DEF@29..35\n+      RECORD_FIELD@29..35\n         NAME@29..30\n           IDENT@29..30 \"a\"\n         COLON@30..31 \":\"\n@@ -30,7 +30,7 @@ SOURCE_FILE@0..51\n                 IDENT@32..35 \"i32\"\n       COMMA@35..36 \",\"\n       WHITESPACE@36..41 \"\\n    \"\n-      RECORD_FIELD_DEF@41..47\n+      RECORD_FIELD@41..47\n         NAME@41..42\n           IDENT@41..42 \"b\"\n         COLON@42..43 \":\""}, {"sha": "c4c5bc51e3e3d7330e1dced1af4a9ec00a16800f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0069_use_tree_list_after_path.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..37\n-  USE_ITEM@0..18\n+  USE@0..18\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..17\n@@ -17,7 +17,7 @@ SOURCE_FILE@0..37\n         R_CURLY@16..17 \"}\"\n     SEMICOLON@17..18 \";\"\n   WHITESPACE@18..19 \"\\n\"\n-  USE_ITEM@19..36\n+  USE@19..36\n     USE_KW@19..22 \"use\"\n     WHITESPACE@22..23 \" \"\n     USE_TREE@23..35"}, {"sha": "36c9cd5bb2b38f84b0a5d9c672ec2e488e6e6243", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0070_stmt_bin_expr_ambiguity.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0070_stmt_bin_expr_ambiguity.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0070_stmt_bin_expr_ambiguity.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0070_stmt_bin_expr_ambiguity.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..46\n-  FN_DEF@0..45\n+  FN@0..45\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..46\n       LET_STMT@15..31\n         LET_KW@15..18 \"let\"\n         WHITESPACE@18..19 \" \"\n-        PLACEHOLDER_PAT@19..20\n+        WILDCARD_PAT@19..20\n           UNDERSCORE@19..20 \"_\"\n         WHITESPACE@20..21 \" \"\n         EQ@21..22 \"=\""}, {"sha": "d34d98ced0cc7de2e93a06a137e6fcade8c45255", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0071_match_expr.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..97\n-  FN_DEF@0..96\n+  FN@0..96\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -53,7 +53,7 @@ SOURCE_FILE@0..97\n             L_CURLY@59..60 \"{\"\n             WHITESPACE@60..61 \" \"\n             MATCH_ARM@61..68\n-              PLACEHOLDER_PAT@61..62\n+              WILDCARD_PAT@61..62\n                 UNDERSCORE@61..62 \"_\"\n               WHITESPACE@62..63 \" \"\n               FAT_ARROW@63..65 \"=>\"\n@@ -72,13 +72,13 @@ SOURCE_FILE@0..97\n           BLOCK_EXPR@82..90\n             L_CURLY@82..83 \"{\"\n             WHITESPACE@83..84 \" \"\n-            RECORD_LIT@84..88\n+            RECORD_EXPR@84..88\n               PATH@84..85\n                 PATH_SEGMENT@84..85\n                   NAME_REF@84..85\n                     IDENT@84..85 \"S\"\n               WHITESPACE@85..86 \" \"\n-              RECORD_FIELD_LIST@86..88\n+              RECORD_EXPR_FIELD_LIST@86..88\n                 L_CURLY@86..87 \"{\"\n                 R_CURLY@87..88 \"}\"\n             WHITESPACE@88..89 \" \""}, {"sha": "437d7ac0424bd2ead8b1d8e73733ddcbe5222e1b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0072_return_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0072_return_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0072_return_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0072_return_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..40\n-  FN_DEF@0..39\n+  FN@0..39\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "00cce69e6c75d7d64b65b51cc2cb1fec6bf62144", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0073_type_item_type_params.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0073_type_item_type_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0073_type_item_type_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0073_type_item_type_params.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,10 +1,10 @@\n SOURCE_FILE@0..21\n-  TYPE_ALIAS_DEF@0..20\n+  TYPE_ALIAS@0..20\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..11\n       IDENT@5..11 \"Result\"\n-    TYPE_PARAM_LIST@11..14\n+    GENERIC_PARAM_LIST@11..14\n       L_ANGLE@11..12 \"<\"\n       TYPE_PARAM@12..13\n         NAME@12..13"}, {"sha": "3a789b9f5100dcb4db639a082bd44bd211a8f5ed", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0074_stmt_postfix_expr_ambiguity.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0074_stmt_postfix_expr_ambiguity.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0074_stmt_postfix_expr_ambiguity.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0074_stmt_postfix_expr_ambiguity.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..84\n-  FN_DEF@0..83\n+  FN@0..83\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -22,7 +22,7 @@ SOURCE_FILE@0..84\n           L_CURLY@24..25 \"{\"\n           WHITESPACE@25..34 \"\\n        \"\n           MATCH_ARM@34..41\n-            PLACEHOLDER_PAT@34..35\n+            WILDCARD_PAT@34..35\n               UNDERSCORE@34..35 \"_\"\n             WHITESPACE@35..36 \" \"\n             FAT_ARROW@36..38 \"=>\""}, {"sha": "e847ce9b26878a72bb53dff1eed0f7088b3395fe", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0075_block.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0075_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0075_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0075_block.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..65\n-  FN_DEF@0..9\n+  FN@0..9\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..4\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..65\n       L_CURLY@7..8 \"{\"\n       R_CURLY@8..9 \"}\"\n   WHITESPACE@9..10 \"\\n\"\n-  FN_DEF@10..31\n+  FN@10..31\n     FN_KW@10..12 \"fn\"\n     WHITESPACE@12..13 \" \"\n     NAME@13..14\n@@ -27,7 +27,7 @@ SOURCE_FILE@0..65\n       LET_STMT@19..29\n         LET_KW@19..22 \"let\"\n         WHITESPACE@22..23 \" \"\n-        PLACEHOLDER_PAT@23..24\n+        WILDCARD_PAT@23..24\n           UNDERSCORE@23..24 \"_\"\n         WHITESPACE@24..25 \" \"\n         EQ@25..26 \"=\"\n@@ -38,7 +38,7 @@ SOURCE_FILE@0..65\n       WHITESPACE@29..30 \" \"\n       R_CURLY@30..31 \"}\"\n   WHITESPACE@31..32 \"\\n\"\n-  FN_DEF@32..48\n+  FN@32..48\n     FN_KW@32..34 \"fn\"\n     WHITESPACE@34..35 \" \"\n     NAME@35..36\n@@ -62,7 +62,7 @@ SOURCE_FILE@0..65\n       WHITESPACE@46..47 \" \"\n       R_CURLY@47..48 \"}\"\n   WHITESPACE@48..49 \"\\n\"\n-  FN_DEF@49..64\n+  FN@49..64\n     FN_KW@49..51 \"fn\"\n     WHITESPACE@51..52 \" \"\n     NAME@52..53"}, {"sha": "96217a7fdb4289ab11b1662c8a925b0730941f08", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0076_function_where_clause.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0076_function_where_clause.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0076_function_where_clause.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0076_function_where_clause.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,10 +1,10 @@\n SOURCE_FILE@0..29\n-  FN_DEF@0..28\n+  FN@0..28\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n       IDENT@3..6 \"foo\"\n-    TYPE_PARAM_LIST@6..9\n+    GENERIC_PARAM_LIST@6..9\n       L_ANGLE@6..7 \"<\"\n       TYPE_PARAM@7..8\n         NAME@7..8"}, {"sha": "33e6fb93f7a5e3db5478bf4a5867c3cd16deeb23", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0077_try_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0077_try_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0077_try_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0077_try_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..21\n-  FN_DEF@0..20\n+  FN@0..20\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6"}, {"sha": "2befc8388ec70abcb7c245c0b679a425780f0850", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0078_type_item.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_item.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..16\n-  TYPE_ALIAS_DEF@0..15\n+  TYPE_ALIAS@0..15\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..8"}, {"sha": "209711fc49637711f6895a09babdfeb1e4648f04", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0079_impl_def.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..12\n-  IMPL_DEF@0..11\n+  IMPL@0..11\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..8\n@@ -8,7 +8,7 @@ SOURCE_FILE@0..12\n           NAME_REF@5..8\n             IDENT@5..8 \"Foo\"\n     WHITESPACE@8..9 \" \"\n-    ITEM_LIST@9..11\n+    ASSOC_ITEM_LIST@9..11\n       L_CURLY@9..10 \"{\"\n       R_CURLY@10..11 \"}\"\n   WHITESPACE@11..12 \"\\n\""}, {"sha": "b3003577cc0f47b0cba6b2c0ad7c8c8e59fed15a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0080_postfix_range.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..89\n-  FN_DEF@0..88\n+  FN@0..88\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -14,7 +14,7 @@ SOURCE_FILE@0..89\n       LET_STMT@15..27\n         LET_KW@15..18 \"let\"\n         WHITESPACE@18..19 \" \"\n-        BIND_PAT@19..20\n+        IDENT_PAT@19..20\n           NAME@19..20\n             IDENT@19..20 \"x\"\n         WHITESPACE@20..21 \" \"\n@@ -39,7 +39,7 @@ SOURCE_FILE@0..89\n             L_CURLY@42..43 \"{\"\n             WHITESPACE@43..44 \" \"\n             MATCH_ARM@44..51\n-              PLACEHOLDER_PAT@44..45\n+              WILDCARD_PAT@44..45\n                 UNDERSCORE@44..45 \"_\"\n               WHITESPACE@45..46 \" \"\n               FAT_ARROW@46..48 \"=>\"\n@@ -79,7 +79,7 @@ SOURCE_FILE@0..89\n             L_CURLY@74..75 \"{\"\n             WHITESPACE@75..76 \" \"\n             MATCH_ARM@76..83\n-              PLACEHOLDER_PAT@76..77\n+              WILDCARD_PAT@76..77\n                 UNDERSCORE@76..77 \"_\"\n               WHITESPACE@77..78 \" \"\n               FAT_ARROW@78..80 \"=>\""}, {"sha": "f319d5141d509acf84ec219762b79e2e71bc3aed", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0081_for_type.rast", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..121\n-  TYPE_ALIAS_DEF@0..28\n+  TYPE_ALIAS@0..28\n     TYPE_KW@0..4 \"type\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n@@ -9,13 +9,13 @@ SOURCE_FILE@0..121\n     WHITESPACE@8..9 \" \"\n     FOR_TYPE@9..27\n       FOR_KW@9..12 \"for\"\n-      TYPE_PARAM_LIST@12..16\n+      GENERIC_PARAM_LIST@12..16\n         L_ANGLE@12..13 \"<\"\n         LIFETIME_PARAM@13..15\n           LIFETIME@13..15 \"\\'a\"\n         R_ANGLE@15..16 \">\"\n       WHITESPACE@16..17 \" \"\n-      FN_POINTER_TYPE@17..27\n+      FN_PTR_TYPE@17..27\n         FN_KW@17..19 \"fn\"\n         PARAM_LIST@19..21\n           L_PAREN@19..20 \"(\"\n@@ -29,7 +29,7 @@ SOURCE_FILE@0..121\n             R_PAREN@26..27 \")\"\n     SEMICOLON@27..28 \";\"\n   WHITESPACE@28..29 \"\\n\"\n-  TYPE_ALIAS_DEF@29..81\n+  TYPE_ALIAS@29..81\n     TYPE_KW@29..33 \"type\"\n     WHITESPACE@33..34 \" \"\n     NAME@34..35\n@@ -39,13 +39,13 @@ SOURCE_FILE@0..121\n     WHITESPACE@37..38 \" \"\n     FOR_TYPE@38..80\n       FOR_KW@38..41 \"for\"\n-      TYPE_PARAM_LIST@41..45\n+      GENERIC_PARAM_LIST@41..45\n         L_ANGLE@41..42 \"<\"\n         LIFETIME_PARAM@42..44\n           LIFETIME@42..44 \"\\'a\"\n         R_ANGLE@44..45 \">\"\n       WHITESPACE@45..46 \" \"\n-      FN_POINTER_TYPE@46..80\n+      FN_PTR_TYPE@46..80\n         UNSAFE_KW@46..52 \"unsafe\"\n         WHITESPACE@52..53 \" \"\n         ABI@53..63\n@@ -57,7 +57,7 @@ SOURCE_FILE@0..121\n         PARAM_LIST@66..74\n           L_PAREN@66..67 \"(\"\n           PARAM@67..73\n-            REFERENCE_TYPE@67..73\n+            REF_TYPE@67..73\n               AMP@67..68 \"&\"\n               LIFETIME@68..70 \"\\'a\"\n               WHITESPACE@70..71 \" \"\n@@ -74,7 +74,7 @@ SOURCE_FILE@0..121\n             R_PAREN@79..80 \")\"\n     SEMICOLON@80..81 \";\"\n   WHITESPACE@81..82 \"\\n\"\n-  TYPE_ALIAS_DEF@82..120\n+  TYPE_ALIAS@82..120\n     TYPE_KW@82..86 \"type\"\n     WHITESPACE@86..87 \" \"\n     NAME@87..90\n@@ -84,7 +84,7 @@ SOURCE_FILE@0..121\n     WHITESPACE@92..93 \" \"\n     FOR_TYPE@93..119\n       FOR_KW@93..96 \"for\"\n-      TYPE_PARAM_LIST@96..100\n+      GENERIC_PARAM_LIST@96..100\n         L_ANGLE@96..97 \"<\"\n         LIFETIME_PARAM@97..99\n           LIFETIME@97..99 \"\\'a\"\n@@ -95,10 +95,10 @@ SOURCE_FILE@0..121\n           PATH_SEGMENT@101..119\n             NAME_REF@101..110\n               IDENT@101..110 \"PartialEq\"\n-            TYPE_ARG_LIST@110..119\n+            GENERIC_ARG_LIST@110..119\n               L_ANGLE@110..111 \"<\"\n               TYPE_ARG@111..118\n-                REFERENCE_TYPE@111..118\n+                REF_TYPE@111..118\n                   AMP@111..112 \"&\"\n                   LIFETIME@112..114 \"\\'a\"\n                   WHITESPACE@114..115 \" \""}, {"sha": "70b975c0b14eabafa7b7a42093a8f95d6cf1403b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0082_ref_expr.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/8068302fefc75440b823f4bf1731a5f347d7c767/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast?ref=8068302fefc75440b823f4bf1731a5f347d7c767", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..200\n-  FN_DEF@0..199\n+  FN@0..199\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -16,7 +16,7 @@ SOURCE_FILE@0..200\n       LET_STMT@41..52\n         LET_KW@41..44 \"let\"\n         WHITESPACE@44..45 \" \"\n-        PLACEHOLDER_PAT@45..46\n+        WILDCARD_PAT@45..46\n           UNDERSCORE@45..46 \"_\"\n         WHITESPACE@46..47 \" \"\n         EQ@47..48 \"=\"\n@@ -30,7 +30,7 @@ SOURCE_FILE@0..200\n       LET_STMT@57..75\n         LET_KW@57..60 \"let\"\n         WHITESPACE@60..61 \" \"\n-        PLACEHOLDER_PAT@61..62\n+        WILDCARD_PAT@61..62\n           UNDERSCORE@61..62 \"_\"\n         WHITESPACE@62..63 \" \"\n         EQ@63..64 \"=\"\n@@ -55,7 +55,7 @@ SOURCE_FILE@0..200\n       LET_STMT@80..93\n         LET_KW@80..83 \"let\"\n         WHITESPACE@83..84 \" \"\n-        PLACEHOLDER_PAT@84..85\n+        WILDCARD_PAT@84..85\n           UNDERSCORE@84..85 \"_\"\n         WHITESPACE@85..86 \" \"\n         EQ@86..87 \"=\"\n@@ -72,7 +72,7 @@ SOURCE_FILE@0..200\n       LET_STMT@98..113\n         LET_KW@98..101 \"let\"\n         WHITESPACE@101..102 \" \"\n-        PLACEHOLDER_PAT@102..103\n+        WILDCARD_PAT@102..103\n           UNDERSCORE@102..103 \"_\"\n         WHITESPACE@103..104 \" \"\n         EQ@104..105 \"=\"\n@@ -95,7 +95,7 @@ SOURCE_FILE@0..200\n       LET_STMT@148..169\n         LET_KW@148..151 \"let\"\n         WHITESPACE@151..152 \" \"\n-        PLACEHOLDER_PAT@152..153\n+        WILDCARD_PAT@152..153\n           UNDERSCORE@152..153 \"_\"\n         WHITESPACE@153..154 \" \"\n         EQ@154..155 \"=\"\n@@ -116,7 +116,7 @@ SOURCE_FILE@0..200\n       LET_STMT@174..197\n         LET_KW@174..177 \"let\"\n         WHITESPACE@177..178 \" \"\n-        PLACEHOLDER_PAT@178..179\n+        WILDCARD_PAT@178..179\n           UNDERSCORE@178..179 \"_\"\n         WHITESPACE@179..180 \" \"\n         EQ@180..181 \"=\""}]}