{"sha": "d6a7c1d47fdf68626b5535ff24bd115e4aba7d71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YTdjMWQ0N2ZkZjY4NjI2YjU1MzVmZjI0YmQxMTVlNGFiYTdkNzE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-03-15T19:54:25Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-03-15T20:00:49Z"}, "message": "Extend `proc_macro_back_compat` lint to `procedural-masquerade`\n\nWe now lint on *any* use of `procedural-masquerade` crate. While this\ncrate still exists, its main reverse dependency (`cssparser`) no longer\ndepends on it. Any crates still depending off should stop doing so, as\nit only exists to support very old Rust versions.\n\nIf a crate actually needs to support old versions of rustc via\n`procedural-masquerade`, then they'll just need to accept the warning\nuntil we remove it entirely (at the same time as the back-compat hack).\nThe latest version of `procedural-masquerade` does not work with the\nlatest rustc, but trying to check for the version seems like more\ntrouble than it's worth.\n\nWhile working on this, I realized that the `proc-macro-hack` check was\nnever actually doing anything. The corresponding enum variant in\n`proc-macro-hack` is named `Value` or `Nested` - it has never been\ncalled `Input`. Due to a strange Crater issue, the Crater run that\ntested adding this did *not* end up testing it - some of the crates that\nwould have failed did not actually have their tests checked, making it\nseem as though the `proc-macro-hack` check was working.\n\nThe Crater issue is being discussed at\nhttps://rust-lang.zulipchat.com/#narrow/stream/242791-t-infra/topic/Nearly.20identical.20Crater.20runs.20processed.20a.20crate.20differently/near/230406661\n\nDespite the `proc-macro-hack` check not actually doing anything, we\nhaven't gotten any reports from users about their build being broken.\nI went ahead and removed it entirely, since it's clear that no one is\nbeing affected by the `proc-macro-hack` regression in practice.", "tree": {"sha": "222e08b5e26bbc8232089128e88b771cdf7c9c0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/222e08b5e26bbc8232089128e88b771cdf7c9c0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmBPvVYACgkQtAh+UQ6Y\nsWRhVA/+JODO2fzzkhQhmXvFCANkiV9ZMCS1mqKH4ROSLAkvCjonoI8Svr3qy0x4\nLIsSVb0VTSm/lkcQplvI/LVWFwldk4eNA6eKCrFhdoMSW/Ge+q6S0Kr4iQeeCv75\ncAPilzYfr+LacZ+xon+se9HUsY0A8N6c7s+Rtj7QatMUJKljHLdlO9apO/FVY4vY\n/ODuXI2aKPvrFuUGFnRtUYCjyLcfEouvJYmcXIeB7docXljBono/4JJURaZnLXg6\n8FOiRFzLEAFF8n+zoN3YAHOrKGxdn+P081DDw76MhbZs6mn8a9PtDLAHPXQGyD9N\nR4ENFdsfog8asWji30+f0fgnIBJ3M5s39iMEsiqiBX0HK93OE93tC79foEm3HRtf\n80KCvuWXd+zyTvyqTFIP3AFSw45OUcdvrMFoFkNrXA1KJM43h4TnNctDNIHfP/Dy\nQoJOorMR+tt3IS34jiYMDnbNAMQ3TShSfzJICE38RL+ZqCDzITrNBdeYHdiD2Wb8\nrjZSOFyJMtmTE9UZOnUflSzrRyCkghXa47ToqySaYdkPgOQ2goPOQy0S2MoyCGna\nOJHhdKvLjl1VfZbR339Jzow1hJ9yLHZmASkij/T5D5VF7QET2tQ7p30cNR7CokJm\nvUPiVfmgEK+lQhOY72Wyg3S31TxK347U09zloPL3O632JfkfTic=\n=TFlY\n-----END PGP SIGNATURE-----", "payload": "tree 222e08b5e26bbc8232089128e88b771cdf7c9c0c\nparent 2ccf06302c08d7d4911aad40e66a9a3ee731c6f9\nauthor Aaron Hill <aa1ronham@gmail.com> 1615838065 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1615838449 -0400\n\nExtend `proc_macro_back_compat` lint to `procedural-masquerade`\n\nWe now lint on *any* use of `procedural-masquerade` crate. While this\ncrate still exists, its main reverse dependency (`cssparser`) no longer\ndepends on it. Any crates still depending off should stop doing so, as\nit only exists to support very old Rust versions.\n\nIf a crate actually needs to support old versions of rustc via\n`procedural-masquerade`, then they'll just need to accept the warning\nuntil we remove it entirely (at the same time as the back-compat hack).\nThe latest version of `procedural-masquerade` does not work with the\nlatest rustc, but trying to check for the version seems like more\ntrouble than it's worth.\n\nWhile working on this, I realized that the `proc-macro-hack` check was\nnever actually doing anything. The corresponding enum variant in\n`proc-macro-hack` is named `Value` or `Nested` - it has never been\ncalled `Input`. Due to a strange Crater issue, the Crater run that\ntested adding this did *not* end up testing it - some of the crates that\nwould have failed did not actually have their tests checked, making it\nseem as though the `proc-macro-hack` check was working.\n\nThe Crater issue is being discussed at\nhttps://rust-lang.zulipchat.com/#narrow/stream/242791-t-infra/topic/Nearly.20identical.20Crater.20runs.20processed.20a.20crate.20differently/near/230406661\n\nDespite the `proc-macro-hack` check not actually doing anything, we\nhaven't gotten any reports from users about their build being broken.\nI went ahead and removed it entirely, since it's clear that no one is\nbeing affected by the `proc-macro-hack` regression in practice.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71", "html_url": "https://github.com/rust-lang/rust/commit/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "html_url": "https://github.com/rust-lang/rust/commit/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9"}], "stats": {"total": 132, "additions": 103, "deletions": 29}, "files": [{"sha": "7e58426d27de4b63aa6a541ca963a7326e73d405", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=d6a7c1d47fdf68626b5535ff24bd115e4aba7d71", "patch": "@@ -784,33 +784,6 @@ impl Nonterminal {\n             NtTT(tt) => tt.span(),\n         }\n     }\n-\n-    /// This nonterminal looks like some specific enums from\n-    /// `proc-macro-hack` and `procedural-masquerade` crates.\n-    /// We need to maintain some special pretty-printing behavior for them due to incorrect\n-    /// asserts in old versions of those crates and their wide use in the ecosystem.\n-    /// See issue #73345 for more details.\n-    /// FIXME(#73933): Remove this eventually.\n-    pub fn pretty_printing_compatibility_hack(&self) -> bool {\n-        let item = match self {\n-            NtItem(item) => item,\n-            NtStmt(stmt) => match &stmt.kind {\n-                ast::StmtKind::Item(item) => item,\n-                _ => return false,\n-            },\n-            _ => return false,\n-        };\n-\n-        let name = item.ident.name;\n-        if name == sym::ProceduralMasqueradeDummyType || name == sym::ProcMacroHack {\n-            if let ast::ItemKind::Enum(enum_def, _) = &item.kind {\n-                if let [variant] = &*enum_def.variants {\n-                    return variant.ident.name == sym::Input;\n-                }\n-            }\n-        }\n-        false\n-    }\n }\n \n impl PartialEq for Nonterminal {"}, {"sha": "ce65793051837833131288c6c23d1cda81825d49", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=d6a7c1d47fdf68626b5535ff24bd115e4aba7d71", "patch": "@@ -10,6 +10,8 @@ use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{DiagnosticBuilder, ErrorReported};\n+use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n+use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n use rustc_session::{parse::ParseSess, Limit, Session};\n use rustc_span::def_id::DefId;\n@@ -1241,3 +1243,41 @@ pub fn get_exprs_from_tts(\n     }\n     Some(es)\n }\n+\n+/// This nonterminal looks like some specific enums from\n+/// `proc-macro-hack` and `procedural-masquerade` crates.\n+/// We need to maintain some special pretty-printing behavior for them due to incorrect\n+/// asserts in old versions of those crates and their wide use in the ecosystem.\n+/// See issue #73345 for more details.\n+/// FIXME(#73933): Remove this eventually.\n+pub(crate) fn pretty_printing_compatibility_hack(nt: &Nonterminal, sess: &ParseSess) -> bool {\n+    let item = match nt {\n+        Nonterminal::NtItem(item) => item,\n+        Nonterminal::NtStmt(stmt) => match &stmt.kind {\n+            ast::StmtKind::Item(item) => item,\n+            _ => return false,\n+        },\n+        _ => return false,\n+    };\n+\n+    let name = item.ident.name;\n+    if name == sym::ProceduralMasqueradeDummyType {\n+        if let ast::ItemKind::Enum(enum_def, _) = &item.kind {\n+            if let [variant] = &*enum_def.variants {\n+                if variant.ident.name == sym::Input {\n+                    sess.buffer_lint_with_diagnostic(\n+                        &PROC_MACRO_BACK_COMPAT,\n+                        item.ident.span,\n+                        ast::CRATE_NODE_ID,\n+                        \"using `procedural-masquerade` crate\",\n+                        BuiltinLintDiagnostics::ProcMacroBackCompat(\n+                        \"The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. \\\n+                        Versions of this crate below 0.1.7 will eventually stop compiling.\".to_string())\n+                    );\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    false\n+}"}, {"sha": "61b776ff2d280af6d98082085c261715e67521e9", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=d6a7c1d47fdf68626b5535ff24bd115e4aba7d71", "patch": "@@ -90,7 +90,8 @@ impl MultiItemModifier for ProcMacroDerive {\n             }\n             _ => unreachable!(),\n         };\n-        let input = if item.pretty_printing_compatibility_hack() {\n+        let input = if crate::base::pretty_printing_compatibility_hack(&item, &ecx.sess.parse_sess)\n+        {\n             TokenTree::token(token::Interpolated(Lrc::new(item)), DUMMY_SP).into()\n         } else {\n             nt_to_tokenstream(&item, &ecx.sess.parse_sess, CanSynthesizeMissingTokens::Yes)"}, {"sha": "67edfe19da383d7ac659ce0e486fe74d2c59d85c", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=d6a7c1d47fdf68626b5535ff24bd115e4aba7d71", "patch": "@@ -187,7 +187,7 @@ impl FromInternal<(TreeAndSpacing, &'_ ParseSess, &'_ mut Vec<Self>)>\n                         delimiter: Delimiter::None,\n                         stream,\n                         span: DelimSpan::from_single(span),\n-                        flatten: nt.pretty_printing_compatibility_hack(),\n+                        flatten: crate::base::pretty_printing_compatibility_hack(&nt, sess),\n                     })\n                 }\n             }"}, {"sha": "abc3d2691a307bed549216a34b9dc70897022f48", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs?ref=d6a7c1d47fdf68626b5535ff24bd115e4aba7d71", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+// aux-build:test-macros.rs\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[derive(Print)]\n+enum ProceduralMasqueradeDummyType { //~ WARN using\n+//~| WARN this was previously\n+    Input\n+}\n+\n+fn main() {}"}, {"sha": "0b930705e35105dd1df67abc970ef59fe1c755b3", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr?ref=d6a7c1d47fdf68626b5535ff24bd115e4aba7d71", "patch": "@@ -0,0 +1,25 @@\n+warning: using `procedural-masquerade` crate\n+  --> $DIR/issue-73933-procedural-masquerade.rs:8:6\n+   |\n+LL | enum ProceduralMasqueradeDummyType {\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.\n+\n+warning: 1 warning emitted\n+\n+Future incompatibility report: Future breakage date: None, diagnostic:\n+warning: using `procedural-masquerade` crate\n+  --> $DIR/issue-73933-procedural-masquerade.rs:8:6\n+   |\n+LL | enum ProceduralMasqueradeDummyType {\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.\n+"}, {"sha": "8edd68f8a3b849dc0605203bf52b68a9f4e038d0", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.stdout", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d6a7c1d47fdf68626b5535ff24bd115e4aba7d71/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout?ref=d6a7c1d47fdf68626b5535ff24bd115e4aba7d71", "patch": "@@ -0,0 +1,22 @@\n+PRINT-DERIVE INPUT (DISPLAY): enum ProceduralMasqueradeDummyType { Input, }\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): enum ProceduralMasqueradeDummyType { Input }\n+PRINT-DERIVE INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"enum\",\n+        span: #0 bytes(100..104),\n+    },\n+    Ident {\n+        ident: \"ProceduralMasqueradeDummyType\",\n+        span: #0 bytes(105..134),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"Input\",\n+                span: #0 bytes(186..191),\n+            },\n+        ],\n+        span: #0 bytes(135..193),\n+    },\n+]"}]}