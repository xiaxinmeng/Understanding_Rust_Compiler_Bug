{"sha": "33bdddb75c4daf708da24c363c1ea6375bf9c9ae", "node_id": "C_kwDOAAsO6NoAKDMzYmRkZGI3NWM0ZGFmNzA4ZGEyNGMzNjNjMWVhNjM3NWJmOWM5YWU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-07T09:41:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-07T12:29:18Z"}, "message": "remove FFI support for macOS", "tree": {"sha": "0e82c6578d611a8d068802f43c5dc7a992f65472", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e82c6578d611a8d068802f43c5dc7a992f65472"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33bdddb75c4daf708da24c363c1ea6375bf9c9ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33bdddb75c4daf708da24c363c1ea6375bf9c9ae", "html_url": "https://github.com/rust-lang/rust/commit/33bdddb75c4daf708da24c363c1ea6375bf9c9ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33bdddb75c4daf708da24c363c1ea6375bf9c9ae/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cc11e262f1c8313ec11154a2d5440ff5664aec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc11e262f1c8313ec11154a2d5440ff5664aec4", "html_url": "https://github.com/rust-lang/rust/commit/9cc11e262f1c8313ec11154a2d5440ff5664aec4"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "b63186f98a700eebb86514116a26447c8b6c1509", "filename": "src/tools/miri/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33bdddb75c4daf708da24c363c1ea6375bf9c9ae/src%2Ftools%2Fmiri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/33bdddb75c4daf708da24c363c1ea6375bf9c9ae/src%2Ftools%2Fmiri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.toml?ref=33bdddb75c4daf708da24c363c1ea6375bf9c9ae", "patch": "@@ -31,8 +31,10 @@ smallvec = \"1.7\"\n rustc-workspace-hack = \"1.0.0\"\n measureme = \"10.0.0\"\n \n-[target.\"cfg(unix)\".dependencies]\n+[target.'cfg(unix)'.dependencies]\n libc = \"0.2\"\n+\n+[target.'cfg(target_os = \"linux\")'.dependencies]\n libffi = \"3.0.0\"\n libloading = \"0.7\"\n "}, {"sha": "fc9a1170d2942fa6d7a0004012b56774f9d7ff22", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/33bdddb75c4daf708da24c363c1ea6375bf9c9ae/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bdddb75c4daf708da24c363c1ea6375bf9c9ae/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=33bdddb75c4daf708da24c363c1ea6375bf9c9ae", "patch": "@@ -421,8 +421,10 @@ pub struct MiriMachine<'mir, 'tcx> {\n     pub(crate) basic_block_count: u64,\n \n     /// Handle of the optional shared object file for external functions.\n-    #[cfg(unix)]\n+    #[cfg(target_os = \"linux\")]\n     pub external_so_lib: Option<(libloading::Library, std::path::PathBuf)>,\n+    #[cfg(not(target_os = \"linux\"))]\n+    pub external_so_lib: Option<!>,\n \n     /// Run a garbage collector for SbTags every N basic blocks.\n     pub(crate) gc_interval: u32,\n@@ -485,7 +487,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             report_progress: config.report_progress,\n             basic_block_count: 0,\n             clock: Clock::new(config.isolated_op == IsolatedOp::Allow),\n-            #[cfg(unix)]\n+            #[cfg(target_os = \"linux\")]\n             external_so_lib: config.external_so_file.as_ref().map(|lib_file_path| {\n                 let target_triple = layout_cx.tcx.sess.opts.target_triple.triple();\n                 // Check if host target == the session target.\n@@ -507,6 +509,10 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n                     lib_file_path.clone(),\n                 )\n             }),\n+            #[cfg(not(target_os = \"linux\"))]\n+            external_so_lib: config.external_so_file.as_ref().map(|_| {\n+                panic!(\"loading external .so files is only supported on Linux\")\n+            }),\n             gc_interval: config.gc_interval,\n             since_gc: 0,\n             num_cpus: config.num_cpus,\n@@ -648,7 +654,6 @@ impl VisitTags for MiriMachine<'_, '_> {\n             preemption_rate: _,\n             report_progress: _,\n             basic_block_count: _,\n-            #[cfg(unix)]\n             external_so_lib: _,\n             gc_interval: _,\n             since_gc: _,"}, {"sha": "c5db868cdc7c5879931e6af33913291760a0b052", "filename": "src/tools/miri/src/shims/ffi_support.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33bdddb75c4daf708da24c363c1ea6375bf9c9ae/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fffi_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bdddb75c4daf708da24c363c1ea6375bf9c9ae/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fffi_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fffi_support.rs?ref=33bdddb75c4daf708da24c363c1ea6375bf9c9ae", "patch": "@@ -183,9 +183,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         // from: https://docs.rs/libloading/0.7.3/src/libloading/os/unix/mod.rs.html#411\n         // using the `libc` crate where this interface is public.\n         // No `libc::dladdr` on windows.\n-        #[cfg(unix)]\n         let mut info = std::mem::MaybeUninit::<libc::Dl_info>::uninit();\n-        #[cfg(unix)]\n         unsafe {\n             if libc::dladdr(*func.deref() as *const _, info.as_mut_ptr()) != 0 {\n                 if std::ffi::CStr::from_ptr(info.assume_init().dli_fname).to_str().unwrap()"}, {"sha": "26184fdc3c09a0cece2172b7b99ece2023dda0b5", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33bdddb75c4daf708da24c363c1ea6375bf9c9ae/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bdddb75c4daf708da24c363c1ea6375bf9c9ae/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=33bdddb75c4daf708da24c363c1ea6375bf9c9ae", "patch": "@@ -23,8 +23,6 @@ use rustc_target::{\n \n use super::backtrace::EvalContextExt as _;\n use crate::helpers::{convert::Truncate, target_os_is_unix};\n-#[cfg(unix)]\n-use crate::shims::ffi_support::EvalContextExt as _;\n use crate::*;\n \n /// Returned by `emulate_foreign_item_by_name`.\n@@ -372,8 +370,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let this = self.eval_context_mut();\n \n         // First deal with any external C functions in linked .so file.\n-        #[cfg(unix)]\n+        #[cfg(target_os = \"linux\")]\n         if this.machine.external_so_lib.as_ref().is_some() {\n+            use crate::shims::ffi_support::EvalContextExt as _;\n             // An Ok(false) here means that the function being called was not exported\n             // by the specified `.so` file; we should continue and check if it corresponds to\n             // a provided shim."}, {"sha": "dcb99a27668261dc35553f411e5437374bbe9f2a", "filename": "src/tools/miri/src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33bdddb75c4daf708da24c363c1ea6375bf9c9ae/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bdddb75c4daf708da24c363c1ea6375bf9c9ae/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs?ref=33bdddb75c4daf708da24c363c1ea6375bf9c9ae", "patch": "@@ -1,7 +1,7 @@\n #![warn(clippy::integer_arithmetic)]\n \n mod backtrace;\n-#[cfg(unix)]\n+#[cfg(target_os = \"linux\")]\n pub mod ffi_support;\n pub mod foreign_items;\n pub mod intrinsics;"}]}