{"sha": "e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "node_id": "C_kwDOAAsO6NoAKGU1MjZkMTIzYWE0NzAzYWE3Yjg1YzViOGU3MGMyMGI1ZWUwZGVhZGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-02T23:00:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-02T23:00:48Z"}, "message": "Auto merge of #105187 - matthiaskrgr:rollup-nxyxpko, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #105026 (v8a as default aarch64 target)\n - #105033 (sparc-struct-abi: work around new tail-call optimization)\n - #105144 (Document normalization methods `At::{normalize,query_normalize}`)\n - #105155 (rustdoc: clean up help and settings button CSS)\n - #105162 (Properly synthesize `FnSig` value during cycle)\n - #105163 (Check lifetime param count in `collect_trait_impl_trait_tys`)\n - #105185 (Move `normalize_fn_sig` to `TypeErrCtxt`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ad0429b5719974ff56f53bad7067cd3d827b9bc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad0429b5719974ff56f53bad7067cd3d827b9bc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "html_url": "https://github.com/rust-lang/rust/commit/e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32e613bbaafee1bcabba48a2257b838f8d1c03d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/32e613bbaafee1bcabba48a2257b838f8d1c03d3", "html_url": "https://github.com/rust-lang/rust/commit/32e613bbaafee1bcabba48a2257b838f8d1c03d3"}, {"sha": "8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67", "html_url": "https://github.com/rust-lang/rust/commit/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67"}], "stats": {"total": 349, "additions": 198, "deletions": 151}, "files": [{"sha": "2fa602520dcb0d72e02132a481f86fe6b0ec8f82", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -494,6 +494,11 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n         .flatten();\n     features.extend(feats);\n \n+    // FIXME: Move v8a to target definition list when earliest supported LLVM is 14.\n+    if get_version() >= (14, 0, 0) && sess.target.arch == \"aarch64\" {\n+        features.push(\"+v8a\".into());\n+    }\n+\n     if diagnostics && let Some(f) = check_tied_features(sess, &featsmap) {\n         sess.emit_err(TargetFeatureDisableOrEnable {\n             features: f,"}, {"sha": "82a77416a190c44c60c0ffa92c3768233509b8e9", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -173,13 +173,11 @@ fn compare_predicate_entailment<'tcx>(\n         impl_to_placeholder_substs.rebase_onto(tcx, impl_m.container_id(tcx), trait_to_impl_substs);\n     debug!(\"compare_impl_method: trait_to_placeholder_substs={:?}\", trait_to_placeholder_substs);\n \n-    let impl_m_generics = tcx.generics_of(impl_m.def_id);\n-    let trait_m_generics = tcx.generics_of(trait_m.def_id);\n     let impl_m_predicates = tcx.predicates_of(impl_m.def_id);\n     let trait_m_predicates = tcx.predicates_of(trait_m.def_id);\n \n     // Check region bounds.\n-    check_region_bounds_on_impl_item(tcx, impl_m, trait_m, &trait_m_generics, &impl_m_generics)?;\n+    check_region_bounds_on_impl_item(tcx, impl_m, trait_m, false)?;\n \n     // Create obligations for each predicate declared by the impl\n     // definition in the context of the trait's parameter\n@@ -338,6 +336,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     // First, check a few of the same thing as `compare_impl_method`, just so we don't ICE during substitutions later.\n     compare_number_of_generics(tcx, impl_m, trait_m, tcx.hir().span_if_local(impl_m.def_id), true)?;\n     compare_generic_param_kinds(tcx, impl_m, trait_m, true)?;\n+    check_region_bounds_on_impl_item(tcx, impl_m, trait_m, true)?;\n \n     let trait_to_impl_substs = impl_trait_ref.substs;\n \n@@ -722,12 +721,14 @@ fn check_region_bounds_on_impl_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: &ty::AssocItem,\n     trait_m: &ty::AssocItem,\n-    trait_generics: &ty::Generics,\n-    impl_generics: &ty::Generics,\n+    delay: bool,\n ) -> Result<(), ErrorGuaranteed> {\n-    let trait_params = trait_generics.own_counts().lifetimes;\n+    let impl_generics = tcx.generics_of(impl_m.def_id);\n     let impl_params = impl_generics.own_counts().lifetimes;\n \n+    let trait_generics = tcx.generics_of(trait_m.def_id);\n+    let trait_params = trait_generics.own_counts().lifetimes;\n+\n     debug!(\n         \"check_region_bounds_on_impl_item: \\\n             trait_generics={:?} \\\n@@ -761,12 +762,16 @@ fn check_region_bounds_on_impl_item<'tcx>(\n             None\n         };\n \n-        let reported = tcx.sess.emit_err(LifetimesOrBoundsMismatchOnTrait {\n-            span,\n-            item_kind: assoc_item_kind_str(impl_m),\n-            ident: impl_m.ident(tcx),\n-            generics_span,\n-        });\n+        let reported = tcx\n+            .sess\n+            .create_err(LifetimesOrBoundsMismatchOnTrait {\n+                span,\n+                item_kind: assoc_item_kind_str(impl_m),\n+                ident: impl_m.ident(tcx),\n+                generics_span,\n+            })\n+            .emit_unless(delay);\n+\n         return Err(reported);\n     }\n \n@@ -1504,18 +1509,10 @@ fn compare_type_predicate_entailment<'tcx>(\n     let trait_to_impl_substs =\n         impl_substs.rebase_onto(tcx, impl_ty.container_id(tcx), impl_trait_ref.substs);\n \n-    let impl_ty_generics = tcx.generics_of(impl_ty.def_id);\n-    let trait_ty_generics = tcx.generics_of(trait_ty.def_id);\n     let impl_ty_predicates = tcx.predicates_of(impl_ty.def_id);\n     let trait_ty_predicates = tcx.predicates_of(trait_ty.def_id);\n \n-    check_region_bounds_on_impl_item(\n-        tcx,\n-        impl_ty,\n-        trait_ty,\n-        &trait_ty_generics,\n-        &impl_ty_generics,\n-    )?;\n+    check_region_bounds_on_impl_item(tcx, impl_ty, trait_ty, false)?;\n \n     let impl_ty_own_bounds = impl_ty_predicates.instantiate_own(tcx, impl_substs);\n "}, {"sha": "1e9b57521308580fe83adfb40e844bfc38606dc9", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::{self, Span};\n-use rustc_trait_selection::traits::{ObligationCause, ObligationCauseCode};\n+use rustc_trait_selection::traits::{ObligationCause, ObligationCauseCode, ObligationCtxt};\n \n use std::cell::{Cell, RefCell};\n use std::ops::Deref;\n@@ -162,6 +162,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             infcx: &self.infcx,\n             typeck_results: Some(self.typeck_results.borrow()),\n             fallback_has_occurred: self.fallback_has_occurred.get(),\n+            normalize_fn_sig: Box::new(|fn_sig| {\n+                if fn_sig.has_escaping_bound_vars() {\n+                    return fn_sig;\n+                }\n+                self.probe(|_| {\n+                    let ocx = ObligationCtxt::new_in_snapshot(self);\n+                    let normalized_fn_sig =\n+                        ocx.normalize(&ObligationCause::dummy(), self.param_env, fn_sig);\n+                    if ocx.select_all_or_error().is_empty() {\n+                        let normalized_fn_sig = self.resolve_vars_if_possible(normalized_fn_sig);\n+                        if !normalized_fn_sig.needs_infer() {\n+                            return normalized_fn_sig;\n+                        }\n+                    }\n+                    fn_sig\n+                })\n+            }),\n         }\n     }\n "}, {"sha": "b33e7b8d68cf927251a4e85a9c57a672fcabf9b5", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -1,7 +1,6 @@\n use super::callee::DeferredCallResolution;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::HirIdMap;\n@@ -11,9 +10,7 @@ use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefIdMap;\n use rustc_span::{self, Span};\n-use rustc_trait_selection::traits::{\n-    self, ObligationCause, ObligationCtxt, TraitEngine, TraitEngineExt as _,\n-};\n+use rustc_trait_selection::traits::{self, TraitEngine, TraitEngineExt as _};\n \n use std::cell::RefCell;\n use std::ops::Deref;\n@@ -92,29 +89,7 @@ impl<'tcx> Inherited<'tcx> {\n             infcx: tcx\n                 .infer_ctxt()\n                 .ignoring_regions()\n-                .with_opaque_type_inference(DefiningAnchor::Bind(hir_owner.def_id))\n-                .with_normalize_fn_sig_for_diagnostic(Lrc::new(move |infcx, fn_sig| {\n-                    if fn_sig.has_escaping_bound_vars() {\n-                        return fn_sig;\n-                    }\n-                    infcx.probe(|_| {\n-                        let ocx = ObligationCtxt::new_in_snapshot(infcx);\n-                        let normalized_fn_sig = ocx.normalize(\n-                            &ObligationCause::dummy(),\n-                            // FIXME(compiler-errors): This is probably not the right param-env...\n-                            infcx.tcx.param_env(def_id),\n-                            fn_sig,\n-                        );\n-                        if ocx.select_all_or_error().is_empty() {\n-                            let normalized_fn_sig =\n-                                infcx.resolve_vars_if_possible(normalized_fn_sig);\n-                            if !normalized_fn_sig.needs_infer() {\n-                                return normalized_fn_sig;\n-                            }\n-                        }\n-                        fn_sig\n-                    })\n-                })),\n+                .with_opaque_type_inference(DefiningAnchor::Bind(hir_owner.def_id)),\n             def_id,\n             typeck_results: RefCell::new(ty::TypeckResults::new(hir_owner)),\n         }"}, {"sha": "4429e4f43629a885543c06a5ac61426e96825760", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -77,10 +77,6 @@ impl<'tcx> InferCtxt<'tcx> {\n             err_count_on_creation: self.err_count_on_creation,\n             in_snapshot: self.in_snapshot.clone(),\n             universe: self.universe.clone(),\n-            normalize_fn_sig_for_diagnostic: self\n-                .normalize_fn_sig_for_diagnostic\n-                .as_ref()\n-                .map(|f| f.clone()),\n             intercrate: self.intercrate,\n         }\n     }"}, {"sha": "6bd1df97c16b844ed2edcf3ae2158a56fbf51138", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -95,6 +95,7 @@ pub mod nice_region_error;\n pub struct TypeErrCtxt<'a, 'tcx> {\n     pub infcx: &'a InferCtxt<'tcx>,\n     pub typeck_results: Option<std::cell::Ref<'a, ty::TypeckResults<'tcx>>>,\n+    pub normalize_fn_sig: Box<dyn Fn(ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx> + 'a>,\n     pub fallback_has_occurred: bool,\n }\n \n@@ -1007,22 +1008,14 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n-    fn normalize_fn_sig_for_diagnostic(&self, sig: ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        if let Some(normalize) = &self.normalize_fn_sig_for_diagnostic {\n-            normalize(self, sig)\n-        } else {\n-            sig\n-        }\n-    }\n-\n     /// Given two `fn` signatures highlight only sub-parts that are different.\n     fn cmp_fn_sig(\n         &self,\n         sig1: &ty::PolyFnSig<'tcx>,\n         sig2: &ty::PolyFnSig<'tcx>,\n     ) -> (DiagnosticStyledString, DiagnosticStyledString) {\n-        let sig1 = &self.normalize_fn_sig_for_diagnostic(*sig1);\n-        let sig2 = &self.normalize_fn_sig_for_diagnostic(*sig2);\n+        let sig1 = &(self.normalize_fn_sig)(*sig1);\n+        let sig2 = &(self.normalize_fn_sig)(*sig2);\n \n         let get_lifetimes = |sig| {\n             use rustc_hir::def::Namespace;"}, {"sha": "2ce7cd8beba98a5e8cf4f154161e0e325df5f484", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -80,7 +80,6 @@ pub struct InferOk<'tcx, T> {\n }\n pub type InferResult<'tcx, T> = Result<InferOk<'tcx, T>, TypeError<'tcx>>;\n \n-pub type Bound<T> = Option<T>;\n pub type UnitResult<'tcx> = RelateResult<'tcx, ()>; // \"unify result\"\n pub type FixupResult<'tcx, T> = Result<T, FixupError<'tcx>>; // \"fixup result\"\n \n@@ -334,9 +333,6 @@ pub struct InferCtxt<'tcx> {\n     /// bound.\n     universe: Cell<ty::UniverseIndex>,\n \n-    normalize_fn_sig_for_diagnostic:\n-        Option<Lrc<dyn Fn(&InferCtxt<'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n-\n     /// During coherence we have to assume that other crates may add\n     /// additional impls which we currently don't know about.\n     ///\n@@ -573,8 +569,6 @@ pub struct InferCtxtBuilder<'tcx> {\n     considering_regions: bool,\n     /// Whether we are in coherence mode.\n     intercrate: bool,\n-    normalize_fn_sig_for_diagnostic:\n-        Option<Lrc<dyn Fn(&InferCtxt<'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n }\n \n pub trait TyCtxtInferExt<'tcx> {\n@@ -587,7 +581,6 @@ impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n             tcx: self,\n             defining_use_anchor: DefiningAnchor::Error,\n             considering_regions: true,\n-            normalize_fn_sig_for_diagnostic: None,\n             intercrate: false,\n         }\n     }\n@@ -615,14 +608,6 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n         self\n     }\n \n-    pub fn with_normalize_fn_sig_for_diagnostic(\n-        mut self,\n-        fun: Lrc<dyn Fn(&InferCtxt<'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>,\n-    ) -> Self {\n-        self.normalize_fn_sig_for_diagnostic = Some(fun);\n-        self\n-    }\n-\n     /// Given a canonical value `C` as a starting point, create an\n     /// inference context that contains each of the bound values\n     /// within instantiated as a fresh variable. The `f` closure is\n@@ -644,13 +629,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n     }\n \n     pub fn build(&mut self) -> InferCtxt<'tcx> {\n-        let InferCtxtBuilder {\n-            tcx,\n-            defining_use_anchor,\n-            considering_regions,\n-            ref normalize_fn_sig_for_diagnostic,\n-            intercrate,\n-        } = *self;\n+        let InferCtxtBuilder { tcx, defining_use_anchor, considering_regions, intercrate } = *self;\n         InferCtxt {\n             tcx,\n             defining_use_anchor,\n@@ -666,9 +645,6 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             in_snapshot: Cell::new(false),\n             skip_leak_check: Cell::new(false),\n             universe: Cell::new(ty::UniverseIndex::ROOT),\n-            normalize_fn_sig_for_diagnostic: normalize_fn_sig_for_diagnostic\n-                .as_ref()\n-                .map(|f| f.clone()),\n             intercrate,\n         }\n     }\n@@ -709,7 +685,12 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// Creates a `TypeErrCtxt` for emitting various inference errors.\n     /// During typeck, use `FnCtxt::err_ctxt` instead.\n     pub fn err_ctxt(&self) -> TypeErrCtxt<'_, 'tcx> {\n-        TypeErrCtxt { infcx: self, typeck_results: None, fallback_has_occurred: false }\n+        TypeErrCtxt {\n+            infcx: self,\n+            typeck_results: None,\n+            fallback_has_occurred: false,\n+            normalize_fn_sig: Box::new(|fn_sig| fn_sig),\n+        }\n     }\n \n     pub fn is_in_snapshot(&self) -> bool {"}, {"sha": "70b98e59a8beab34f6e801b412526d6d5ac15aed", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -32,13 +32,23 @@ impl<'tcx> Value<TyCtxt<'tcx>> for ty::SymbolName<'_> {\n }\n \n impl<'tcx> Value<TyCtxt<'tcx>> for ty::Binder<'_, ty::FnSig<'_>> {\n-    fn from_cycle_error(tcx: TyCtxt<'tcx>, _: &[QueryInfo]) -> Self {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx>, stack: &[QueryInfo]) -> Self {\n         let err = tcx.ty_error();\n-        // FIXME(compiler-errors): It would be nice if we could get the\n-        // query key, so we could at least generate a fn signature that\n-        // has the right arity.\n+\n+        let arity = if let Some(frame) = stack.get(0)\n+            && frame.query.name == \"fn_sig\"\n+            && let Some(def_id) = frame.query.def_id\n+            && let Some(node) = tcx.hir().get_if_local(def_id)\n+            && let Some(sig) = node.fn_sig()\n+        {\n+            sig.decl.inputs.len() + sig.decl.implicit_self.has_implicit_self() as usize\n+        } else {\n+            tcx.sess.abort_if_errors();\n+            unreachable!()\n+        };\n+\n         let fn_sig = ty::Binder::dummy(tcx.mk_fn_sig(\n-            [].into_iter(),\n+            std::iter::repeat(err).take(arity),\n             err,\n             false,\n             rustc_hir::Unsafety::Normal,"}, {"sha": "899e30275a05296eb2de1958b29b41286f3f51d0", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -11,8 +11,8 @@ use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::util::impl_subject_and_oblig;\n use crate::traits::SkipLeakCheck;\n use crate::traits::{\n-    self, Normalized, Obligation, ObligationCause, ObligationCtxt, PredicateObligation,\n-    PredicateObligations, SelectionContext,\n+    self, Obligation, ObligationCause, ObligationCtxt, PredicateObligation, PredicateObligations,\n+    SelectionContext,\n };\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Diagnostic;\n@@ -30,6 +30,8 @@ use std::fmt::Debug;\n use std::iter;\n use std::ops::ControlFlow;\n \n+use super::NormalizeExt;\n+\n /// Whether we do the orphan check relative to this crate or\n /// to some remote crate.\n #[derive(Copy, Clone, Debug)]\n@@ -128,8 +130,8 @@ fn with_fresh_ty_vars<'cx, 'tcx>(\n         predicates: tcx.predicates_of(impl_def_id).instantiate(tcx, impl_substs).predicates,\n     };\n \n-    let Normalized { value: mut header, obligations } =\n-        traits::normalize(selcx, param_env, ObligationCause::dummy(), header);\n+    let InferOk { value: mut header, obligations } =\n+        selcx.infcx.at(&ObligationCause::dummy(), param_env).normalize(header);\n \n     header.predicates.extend(obligations.into_iter().map(|o| o.predicate));\n     header"}, {"sha": "c6818a4e57d424cb04355b43f1451bf5caecdfa3", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -56,7 +56,6 @@ pub use self::object_safety::astconv_object_safety_violations;\n pub use self::object_safety::is_vtable_safe_method;\n pub use self::object_safety::MethodViolationCode;\n pub use self::object_safety::ObjectSafetyViolation;\n-pub(crate) use self::project::{normalize, normalize_to};\n pub use self::project::{normalize_projection_type, NormalizeExt};\n pub use self::select::{EvaluationCache, SelectionCache, SelectionContext};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};"}, {"sha": "051660be9c474abb77ada510476f05f55426dc14", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 7, "deletions": 33, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -50,14 +50,18 @@ pub type ProjectionTyObligation<'tcx> = Obligation<'tcx, ty::ProjectionTy<'tcx>>\n pub(super) struct InProgress;\n \n pub trait NormalizeExt<'tcx> {\n+    /// Normalize a value using the `AssocTypeNormalizer`.\n+    ///\n+    /// This normalization should be used when the type contains inference variables or the\n+    /// projection may be fallible.\n     fn normalize<T: TypeFoldable<'tcx>>(&self, t: T) -> InferOk<'tcx, T>;\n }\n \n impl<'tcx> NormalizeExt<'tcx> for At<'_, 'tcx> {\n     fn normalize<T: TypeFoldable<'tcx>>(&self, value: T) -> InferOk<'tcx, T> {\n         let mut selcx = SelectionContext::new(self.infcx);\n         let Normalized { value, obligations } =\n-            normalize(&mut selcx, self.param_env, self.cause.clone(), value);\n+            normalize_with_depth(&mut selcx, self.param_env, self.cause.clone(), 0, value);\n         InferOk { value, obligations }\n     }\n }\n@@ -303,37 +307,6 @@ fn project_and_unify_type<'cx, 'tcx>(\n     }\n }\n \n-/// Normalizes any associated type projections in `value`, replacing\n-/// them with a fully resolved type where possible. The return value\n-/// combines the normalized result and any additional obligations that\n-/// were incurred as result.\n-pub(crate) fn normalize<'a, 'b, 'tcx, T>(\n-    selcx: &'a mut SelectionContext<'b, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    cause: ObligationCause<'tcx>,\n-    value: T,\n-) -> Normalized<'tcx, T>\n-where\n-    T: TypeFoldable<'tcx>,\n-{\n-    let mut obligations = Vec::new();\n-    let value = normalize_to(selcx, param_env, cause, value, &mut obligations);\n-    Normalized { value, obligations }\n-}\n-\n-pub(crate) fn normalize_to<'a, 'b, 'tcx, T>(\n-    selcx: &'a mut SelectionContext<'b, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    cause: ObligationCause<'tcx>,\n-    value: T,\n-    obligations: &mut Vec<PredicateObligation<'tcx>>,\n-) -> T\n-where\n-    T: TypeFoldable<'tcx>,\n-{\n-    normalize_with_depth_to(selcx, param_env, cause, 0, value, obligations)\n-}\n-\n /// As `normalize`, but with a custom depth.\n pub(crate) fn normalize_with_depth<'a, 'b, 'tcx, T>(\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n@@ -2324,10 +2297,11 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         },\n     ));\n \n-    let ty = super::normalize_to(\n+    let ty = normalize_with_depth_to(\n         selcx,\n         obligation.param_env,\n         cause.clone(),\n+        obligation.recursion_depth + 1,\n         tcx.bound_trait_impl_trait_tys(impl_fn_def_id)\n             .map_bound(|tys| {\n                 tys.map_or_else(|_| tcx.ty_error(), |tys| tys[&obligation.predicate.item_def_id])"}, {"sha": "f899321fc01e1e4d1a13ea625b4185871c67fe41", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -23,6 +23,13 @@ use super::NoSolution;\n pub use rustc_middle::traits::query::NormalizationResult;\n \n pub trait QueryNormalizeExt<'tcx> {\n+    /// Normalize a value using the `QueryNormalizer`.\n+    ///\n+    /// This normalization should *only* be used when the projection does not\n+    /// have possible ambiguity or may not be well-formed.\n+    ///\n+    /// After codegen, when lifetimes do not matter, it is preferable to instead\n+    /// use [`TyCtxt::normalize_erasing_regions`], which wraps this procedure.\n     fn query_normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n     where\n         T: TypeFoldable<'tcx>;"}, {"sha": "e9f2e025774e59e8220f08ce511a542f4bbca7db", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -908,6 +908,7 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \n .popover {\n \tposition: absolute;\n+\ttop: 100%;\n \tright: 0;\n \tz-index: 2;\n \tdisplay: block;\n@@ -1357,22 +1358,24 @@ a.test-arrow:hover {\n }\n #settings-menu, #help-button {\n \tmargin-left: 4px;\n-\toutline: none;\n+\tdisplay: flex;\n }\n \n #settings-menu > a, #help-button > a, #copy-path {\n \twidth: 33px;\n-\tline-height: 1.5;\n }\n \n #settings-menu > a, #help-button > a {\n-\tpadding: 5px;\n-\theight: 100%;\n-\tdisplay: block;\n+\tdisplay: flex;\n+\talign-items: center;\n+\tjustify-content: center;\n \tbackground-color: var(--button-background-color);\n \tborder: 1px solid var(--border-color);\n \tborder-radius: 2px;\n \tcolor: var(--settings-button-color);\n+\t/* Rare exception to specifying font sizes in rem. Since this is acting\n+\t   as an icon, it's okay to specify their sizes in pixels. */\n+\tfont-size: 20px;\n }\n \n #settings-menu > a:hover, #settings-menu > a:focus,\n@@ -1408,14 +1411,6 @@ a.test-arrow:hover {\n \tanimation: rotating 2s linear infinite;\n }\n \n-#help-button > a {\n-\ttext-align: center;\n-\t/* Rare exception to specifying font sizes in rem. Since this is acting\n-\t   as an icon, it's okay to specify their sizes in pixels. */\n-\tfont-size: 20px;\n-\tpadding-top: 2px;\n-}\n-\n kbd {\n \tdisplay: inline-block;\n \tpadding: 3px 5px;\n@@ -1658,10 +1653,6 @@ in storage.js\n \t\tcontent: \"Since \";\n \t}\n \n-\t#copy-path {\n-\t\tdisplay: none;\n-\t}\n-\n \t/* Hide the logo and item name from the sidebar. Those are displayed\n \t   in the mobile-topbar instead. */\n \t.sidebar .sidebar-logo,\n@@ -1795,8 +1786,8 @@ in storage.js\n \t\tborder-bottom: 1px solid;\n \t}\n \n-\t/* We don't display the help button on mobile devices. */\n-\t#help-button {\n+\t/* We don't display these buttons on mobile devices. */\n+\t#copy-path, #help-button {\n \t\tdisplay: none;\n \t}\n "}, {"sha": "1908ffb8ff3f0aad5efc6aeb10f01dba49dc65ed", "filename": "src/test/assembly/asm/aarch64-el2vmsa.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fassembly%2Fasm%2Faarch64-el2vmsa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fassembly%2Fasm%2Faarch64-el2vmsa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-el2vmsa.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -0,0 +1,37 @@\n+// assembly-output: emit-asm\n+// compile-flags: --target aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+// CHECK-LABEL: ttbr0_el2:\n+#[no_mangle]\n+pub fn ttbr0_el2() {\n+    // CHECK: //APP\n+    // CHECK-NEXT: msr TTBR0_EL2, x0\n+    // CHECK-NEXT: //NO_APP\n+    unsafe {\n+        asm!(\"msr ttbr0_el2, x0\");\n+    }\n+}\n+\n+// CHECK-LABEL: vttbr_el2:\n+#[no_mangle]\n+pub fn vttbr_el2() {\n+    // CHECK: //APP\n+    // CHECK-NEXT: msr VTTBR_EL2, x0\n+    // CHECK-NEXT: //NO_APP\n+    unsafe {\n+        asm!(\"msr vttbr_el2, x0\");\n+    }\n+}"}, {"sha": "6309dd420ffa4d5c8c42915fdbfd6a9e86b43924", "filename": "src/test/assembly/sparc-struct-abi.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fassembly%2Fsparc-struct-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fassembly%2Fsparc-struct-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fsparc-struct-abi.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -44,12 +44,16 @@ pub unsafe extern \"C\" fn callee(arg: Franta) {\n     tst_use(arg.b);\n     tst_use(arg.c);\n     tst_use(arg.d);\n+    tail_call_avoidance_fn();\n }\n \n extern \"C\" {\n     fn opaque_callee(arg: Franta, intarg: i32);\n     fn tst_use(arg: f32);\n     fn clobber();\n+    // This exists so that post-https://reviews.llvm.org/D138741 LLVM doesn't\n+    // tail-call away some of our assertions.\n+    fn tail_call_avoidance_fn();\n }\n \n #[no_mangle]\n@@ -62,4 +66,5 @@ pub unsafe extern \"C\" fn caller() {\n     // CHECK: call opaque_callee\n     // CHECK: mov     3, %o2\n     opaque_callee(Franta { a: 1.0, b: 2.0, c: 3.0, d: 4.0 }, 3);\n+    tail_call_avoidance_fn();\n }"}, {"sha": "45ede193c0fc633bd3b8a4b56b359d664e81d244", "filename": "src/test/ui/async-await/in-trait/lifetime-mismatch.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -0,0 +1,20 @@\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait MyTrait {\n+    async fn foo<'a>(&self);\n+    async fn bar(&self);\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo(&self) {}\n+    //~^ ERROR lifetime parameters or bounds on method `foo` do not match the trait declaration\n+\n+    async fn bar(&self) {\n+        self.foo();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d87adcc78b6c8bb9fbb282eb57ae3a894e6c87db", "filename": "src/test/ui/async-await/in-trait/lifetime-mismatch.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.stderr?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/lifetime-mismatch.rs:3:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n+  --> $DIR/lifetime-mismatch.rs:12:17\n+   |\n+LL |     async fn foo<'a>(&self);\n+   |                 ---- lifetimes in impl do not match this method in trait\n+...\n+LL |     async fn foo(&self) {}\n+   |                 ^ lifetimes do not match method in trait\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0195`."}, {"sha": "7a9b8469c9e19ebfdffa471c6b834f976e6b5c52", "filename": "src/test/ui/query-system/fn-sig-cycle-arity.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.rs?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -0,0 +1,8 @@\n+trait Dancer {\n+    fn dance(&self) -> _ {\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+        self.dance()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "67e0c2545515eb402f7dd479034a44a1c39146d8", "filename": "src/test/ui/query-system/fn-sig-cycle-arity.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e526d123aa4703aa7b85c5b8e70c20b5ee0deade/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.stderr?ref=e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "patch": "@@ -0,0 +1,9 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/fn-sig-cycle-arity.rs:2:24\n+   |\n+LL |     fn dance(&self) -> _ {\n+   |                        ^ not allowed in type signatures\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}]}