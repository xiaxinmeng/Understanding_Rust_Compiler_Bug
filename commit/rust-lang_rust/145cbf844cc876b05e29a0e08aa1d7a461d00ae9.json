{"sha": "145cbf844cc876b05e29a0e08aa1d7a461d00ae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NWNiZjg0NGNjODc2YjA1ZTI5YTBlMDhhYTFkN2E0NjFkMDBhZTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-21T16:00:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-21T16:00:04Z"}, "message": "enable A<Struct> -> A<Trait> downcasting", "tree": {"sha": "cbbe35d2f9f733db0509e32af554acf797d42bc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbbe35d2f9f733db0509e32af554acf797d42bc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/145cbf844cc876b05e29a0e08aa1d7a461d00ae9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX4q6EAAoJEFbW7qD8Z6xGn3YQAJYPK+q6AKaY35yVf5aVya00\nNHdOIkTB6ISXtmraIyWkp0IvCT6tincxoDBHPeAWNZqQpy1tOIH4ExoFRtIl8VC1\nujn8Q/ZhazoHem0g9Y3MNzo6WXJYEn6McLb/GbBAtKSAPEOvT03Ld9UdoxAC+xIR\noIENuP6MX+bmVqtEdxvJBExuPLl90ZR69TKtylbGvIENFnr/YnfIp0Fdqz/afknY\n3A1E2tDWIJK6SOVWG2ugVKVK5WKpg5JrRDF2nTly0lqPixpBGADTzj2vE6dHG6fm\nOSza4BxVBtxKsBkm6smcBvNWXAez/gJzACwo6rSKjLWAuY2jf61mhVkGm3blvv4d\nFGGya4G4NpsQkh9o0KuUQCXjmiVy3YRUxCVKF13kQYLPFOFwx8qd5eyXIoPvgpB7\nLwjp4aY084P8qckIxKE6Ot2XBbgjaVGtl8NJiEaybRXUnnSQe9Pf38zPz+ZMePt4\nBML9XrGeZRTuW20L0l9mIAaJ7cP3UqtFrtoXehSa1CQrBVuvzrt4Qeydem0/9vgJ\now+xTRto91prVnNMUmN46F6WCOiQWeiagXv520h0zFlB/Ly6Z57iJ+lTYL00yD7Q\n9/zcGJeq4bPcsEfafHNaQJBy5un0WdBmAY7H2Z216o2ylG1kZHulwOfan+SY9WMa\nwELyRUtdqLo4QTPglcUX\n=s2X2\n-----END PGP SIGNATURE-----", "payload": "tree cbbe35d2f9f733db0509e32af554acf797d42bc7\nparent d5e44712a454dd19bfde00c6cce109ee3f664f8e\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474473604 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474473604 +0200\n\nenable A<Struct> -> A<Trait> downcasting"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/145cbf844cc876b05e29a0e08aa1d7a461d00ae9", "html_url": "https://github.com/rust-lang/rust/commit/145cbf844cc876b05e29a0e08aa1d7a461d00ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/145cbf844cc876b05e29a0e08aa1d7a461d00ae9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5e44712a454dd19bfde00c6cce109ee3f664f8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e44712a454dd19bfde00c6cce109ee3f664f8e", "html_url": "https://github.com/rust-lang/rust/commit/d5e44712a454dd19bfde00c6cce109ee3f664f8e"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "60f5a75d46c6396116837b6548df6e1b4438c849", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/145cbf844cc876b05e29a0e08aa1d7a461d00ae9/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145cbf844cc876b05e29a0e08aa1d7a461d00ae9/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=145cbf844cc876b05e29a0e08aa1d7a461d00ae9", "patch": "@@ -627,6 +627,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let src_pointee_ty = pointee_type(src_ty).unwrap();\n                         let dest_pointee_ty = pointee_type(dest_ty).unwrap();\n \n+                        // A<Struct> -> A<Trait> conversion\n+                        let (src_pointee_ty, dest_pointee_ty) = self.tcx.struct_lockstep_tails(src_pointee_ty, dest_pointee_ty);\n+\n                         match (&src_pointee_ty.sty, &dest_pointee_ty.sty) {\n                             (&ty::TyArray(_, length), &ty::TySlice(_)) => {\n                                 self.memory.write_usize(extra, length as u64)?;\n@@ -881,7 +884,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                 use rustc::mir::repr::ProjectionElem::*;\n                 match proj.elem {\n-                    Field(field, _) => {\n+                    Field(field, field_ty) => {\n                         use rustc::ty::layout::Layout::*;\n                         let variant = match *base_layout {\n                             Univariant { ref variant, .. } => variant,\n@@ -901,7 +904,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         };\n \n                         let offset = variant.field_offset(field.index()).bytes();\n-                        base.ptr.offset(offset as isize)\n+                        let ptr = base.ptr.offset(offset as isize);\n+                        match (&field_ty.sty, base.extra) {\n+                            (&ty::TyTrait(_), extra @ LvalueExtra::Vtable(_)) => return Ok(Lvalue {\n+                                ptr: ptr,\n+                                extra: extra,\n+                            }),\n+                            (&ty::TyTrait(_), _) => bug!(\"trait field without vtable\"),\n+                            _ => ptr,\n+                        }\n                     },\n \n                     Downcast(_, variant) => {\n@@ -922,6 +933,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     Deref => {\n                         let pointee_ty = pointee_type(base_ty).expect(\"Deref of non-pointer\");\n+                        let pointee_ty = self.tcx.struct_tail(pointee_ty);\n                         let ptr = self.memory.read_ptr(base.ptr)?;\n                         let extra = match pointee_ty.sty {\n                             ty::TySlice(_) | ty::TyStr => {"}, {"sha": "e3d93957fd96bc3ef20447703d7005a0eccbc2c2", "filename": "tests/run-pass/traits.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/145cbf844cc876b05e29a0e08aa1d7a461d00ae9/tests%2Frun-pass%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145cbf844cc876b05e29a0e08aa1d7a461d00ae9/tests%2Frun-pass%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftraits.rs?ref=145cbf844cc876b05e29a0e08aa1d7a461d00ae9", "patch": "@@ -10,9 +10,14 @@ impl Trait for Struct {\n     }\n }\n \n+struct Foo<T: ?Sized>(T);\n+\n fn main() {\n     let y: &Trait = &Struct(42);\n     y.method();\n+    let x: Foo<Struct> = Foo(Struct(42));\n+    let y: &Foo<Trait> = &x;\n+    y.0.method();\n     /*\n     let x: Box<Fn(i32) -> i32> = Box::new(|x| x * 2);\n     assert_eq!(x(21), 42);"}]}