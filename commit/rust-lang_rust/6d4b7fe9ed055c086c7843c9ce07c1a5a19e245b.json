{"sha": "6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b", "node_id": "C_kwDOAAsO6NoAKDZkNGI3ZmU5ZWQwNTVjMDg2Yzc4NDNjOWNlMDdjMWE1YTE5ZTI0NWI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-20T12:41:46Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-20T12:41:46Z"}, "message": "Remove an unused `&[Ty]` <-> `&[GenericArg]`", "tree": {"sha": "5dc4d34cc9fe85b6a338a868f43fa10f8ac1bcf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dc4d34cc9fe85b6a338a868f43fa10f8ac1bcf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b", "html_url": "https://github.com/rust-lang/rust/commit/6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13fc33e3f299f475a0c64d9a5f052bedf3eccc11", "url": "https://api.github.com/repos/rust-lang/rust/commits/13fc33e3f299f475a0c64d9a5f052bedf3eccc11", "html_url": "https://github.com/rust-lang/rust/commit/13fc33e3f299f475a0c64d9a5f052bedf3eccc11"}], "stats": {"total": 13, "additions": 0, "deletions": 13}, "files": [{"sha": "ee078a9abf241bd7d9bf9fc54e98169231130ac4", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b", "patch": "@@ -21,7 +21,6 @@ use std::marker::PhantomData;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::ops::{ControlFlow, Deref};\n-use std::slice;\n \n /// An entity in the Rust type system, which can be one of\n /// several kinds (types, lifetimes, and consts).\n@@ -55,18 +54,6 @@ pub enum GenericArgKind<'tcx> {\n     Const(ty::Const<'tcx>),\n }\n \n-/// This function goes from `&'a [Ty<'tcx>]` to `&'a [GenericArg<'tcx>]`\n-///\n-/// This is sound as, for types, `GenericArg` is just\n-/// `NonZeroUsize::new_unchecked(ty as *const _ as usize)` as\n-/// long as we use `0` for the `TYPE_TAG`.\n-pub fn ty_slice_as_generic_args<'a, 'tcx>(ts: &'a [Ty<'tcx>]) -> &'a [GenericArg<'tcx>] {\n-    assert_eq!(TYPE_TAG, 0);\n-    // SAFETY: the whole slice is valid and immutable.\n-    // `Ty` and `GenericArg` is explained above.\n-    unsafe { slice::from_raw_parts(ts.as_ptr().cast(), ts.len()) }\n-}\n-\n impl<'tcx> GenericArgKind<'tcx> {\n     #[inline]\n     fn pack(self) -> GenericArg<'tcx> {"}]}