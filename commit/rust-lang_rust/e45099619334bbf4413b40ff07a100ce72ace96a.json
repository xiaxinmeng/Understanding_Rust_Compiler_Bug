{"sha": "e45099619334bbf4413b40ff07a100ce72ace96a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NTA5OTYxOTMzNGJiZjQ0MTNiNDBmZjA3YTEwMGNlNzJhY2U5NmE=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-02-05T17:18:40Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-02-11T09:50:26Z"}, "message": "Avoid allocs in a few places.\n\n- AnonymousParameters::check_trait_item\n- TypeAliasBounds::check_item\n- NonSnakeCase::check_snake_case", "tree": {"sha": "b8419c96f84de0df8fa35c4669b17b790a0a829d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8419c96f84de0df8fa35c4669b17b790a0a829d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e45099619334bbf4413b40ff07a100ce72ace96a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e45099619334bbf4413b40ff07a100ce72ace96a", "html_url": "https://github.com/rust-lang/rust/commit/e45099619334bbf4413b40ff07a100ce72ace96a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e45099619334bbf4413b40ff07a100ce72ace96a/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "284982df6047ad8a259a3cb0698706ccdfd20946", "url": "https://api.github.com/repos/rust-lang/rust/commits/284982df6047ad8a259a3cb0698706ccdfd20946", "html_url": "https://github.com/rust-lang/rust/commit/284982df6047ad8a259a3cb0698706ccdfd20946"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "c827a7f3d5283ed4944527f1324ee430c88517f1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e45099619334bbf4413b40ff07a100ce72ace96a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45099619334bbf4413b40ff07a100ce72ace96a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e45099619334bbf4413b40ff07a100ce72ace96a", "patch": "@@ -648,10 +648,10 @@ impl EarlyLintPass for AnonymousParameters {\n                                 cx.struct_span_lint(ANONYMOUS_PARAMETERS, arg.pat.span, |lint| {\n                                     let ty_snip = cx.sess.source_map().span_to_snippet(arg.ty.span);\n \n-                                    let (ty_snip, appl) = if let Ok(snip) = ty_snip {\n-                                        (snip, Applicability::MachineApplicable)\n+                                    let (ty_snip, appl) = if let Ok(ref snip) = ty_snip {\n+                                        (snip.as_str(), Applicability::MachineApplicable)\n                                     } else {\n-                                        (\"<type>\".to_owned(), Applicability::HasPlaceholders)\n+                                        (\"<type>\", Applicability::HasPlaceholders)\n                                     };\n \n                                     lint.build(\n@@ -1132,17 +1132,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n         let mut suggested_changing_assoc_types = false;\n         // There must not be a where clause\n         if !type_alias_generics.where_clause.predicates.is_empty() {\n-            let spans: Vec<_> = type_alias_generics\n-                .where_clause\n-                .predicates\n-                .iter()\n-                .map(|pred| pred.span())\n-                .collect();\n-            cx.struct_span_lint(\n+            cx.lint(\n                 TYPE_ALIAS_BOUNDS,\n-                spans,\n                 |lint| {\n                     let mut err = lint.build(\"where clauses are not enforced in type aliases\");\n+                    let spans: Vec<_> = type_alias_generics\n+                        .where_clause\n+                        .predicates\n+                        .iter()\n+                        .map(|pred| pred.span())\n+                        .collect();\n+                    err.set_span(spans);\n                     err.span_suggestion(\n                         type_alias_generics.where_clause.span_for_predicates_or_empty_place(),\n                         \"the clause will not be checked when the type alias is used, and should be removed\","}, {"sha": "8e8beefa72f1397114d5184b0993e76bca3917a6", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e45099619334bbf4413b40ff07a100ce72ace96a/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45099619334bbf4413b40ff07a100ce72ace96a/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=e45099619334bbf4413b40ff07a100ce72ace96a", "patch": "@@ -571,6 +571,8 @@ pub trait LintContext: Sized {\n         });\n     }\n \n+    // FIXME: These methods should not take an Into<MultiSpan> -- instead, callers should need to\n+    // set the span in their `decorate` function (preferably using set_span).\n     fn lookup<S: Into<MultiSpan>>(\n         &self,\n         lint: &'static Lint,"}, {"sha": "8c58f2ba4c07ad5a8b76ea887cce15aa361067b1", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e45099619334bbf4413b40ff07a100ce72ace96a/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45099619334bbf4413b40ff07a100ce72ace96a/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=e45099619334bbf4413b40ff07a100ce72ace96a", "patch": "@@ -225,9 +225,8 @@ impl NonSnakeCase {\n         let name = &ident.name.as_str();\n \n         if !is_snake_case(name) {\n-            let sc = NonSnakeCase::to_snake_case(name);\n-\n             cx.struct_span_lint(NON_SNAKE_CASE, ident.span, |lint| {\n+                let sc = NonSnakeCase::to_snake_case(name);\n                 let msg = format!(\"{} `{}` should have a snake case name\", sort, name);\n                 let mut err = lint.build(&msg);\n                 // We have a valid span in almost all cases, but we don't have one when linting a crate"}]}