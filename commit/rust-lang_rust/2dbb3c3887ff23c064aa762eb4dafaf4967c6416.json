{"sha": "2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYmIzYzM4ODdmZjIzYzA2NGFhNzYyZWI0ZGFmYWY0OTY3YzY0MTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-11T19:05:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-17T21:57:54Z"}, "message": "test: Fix tests.", "tree": {"sha": "6d143b2480375aa7a5e56a22a37e29e215a51af3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d143b2480375aa7a5e56a22a37e29e215a51af3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "html_url": "https://github.com/rust-lang/rust/commit/2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e20549ff192edec9d625f1119bcb077c3abaf070", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20549ff192edec9d625f1119bcb077c3abaf070", "html_url": "https://github.com/rust-lang/rust/commit/e20549ff192edec9d625f1119bcb077c3abaf070"}], "stats": {"total": 462, "additions": 218, "deletions": 244}, "files": [{"sha": "f58d420bff58c0494f4c6c61eb8d7fe3ac1c211d", "filename": "doc/rust.md", "status": "modified", "additions": 58, "deletions": 118, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -206,7 +206,6 @@ The keywords are the following strings:\n ~~~~~~~~ {.keyword}\n as\n break\n-copy\n do\n else enum extern\n false fn for\n@@ -443,7 +442,7 @@ Two examples of paths with type arguments:\n ~~~~\n # use std::hashmap::HashMap;\n # fn f() {\n-# fn id<T:Copy>(t: T) -> T { t }\n+# fn id<T>(t: T) -> T { t }\n type t = HashMap<int,~str>;  // Type arguments used in a type expression\n let x = id::<int>(10);         // Type arguments used in a call expression\n # }\n@@ -907,11 +906,10 @@ example, `sys::size_of::<u32>() == 4`.\n \n Since a parameter type is opaque to the generic function, the set of\n operations that can be performed on it is limited. Values of parameter\n-type can always be moved, but they can only be copied when the\n-parameter is given a [`Copy` bound](#type-kinds).\n+type can only be moved, not copied.\n \n ~~~~\n-fn id<T: Copy>(x: T) -> T { x }\n+fn id<T>(x: T) -> T { x }\n ~~~~\n \n Similarly, [trait](#traits) bounds can be specified for type\n@@ -1519,8 +1517,6 @@ A complete list of the built-in language items follows:\n \n `const`\n   : Cannot be mutated.\n-`copy`\n-  : Can be implicitly copied.\n `owned`\n   : Are uniquely owned.\n `durable`\n@@ -1587,7 +1583,8 @@ A complete list of the built-in language items follows:\n `check_not_borrowed`\n   : Fail if a value has existing borrowed pointers to it.\n `strdup_uniq`\n-  : Return a new unique string containing a copy of the contents of a unique string.\n+  : Return a new unique string\n+    containing a copy of the contents of a unique string.\n \n > **Note:** This list is likely to become out of date. We should auto-generate it\n > from `librustc/middle/lang_items.rs`.\n@@ -1736,10 +1733,13 @@ A temporary's lifetime equals the largest lifetime of any borrowed pointer that\n \n #### Moved and copied types\n \n-When a [local variable](#memory-slots) is used as an [rvalue](#lvalues-rvalues-and-temporaries)\n-the variable will either be [moved](#move-expressions) or [copied](#copy-expressions),\n+When a [local variable](#memory-slots) is used\n+as an [rvalue](#lvalues-rvalues-and-temporaries)\n+the variable will either be [moved](#move-expressions) or copied,\n depending on its type.\n-For types that contain mutable fields or [owning pointers](#owning-pointers), the variable is moved.\n+For types that contain [owning pointers](#owning-pointers)\n+or values that implement the special trait `Drop`,\n+the variable is moved.\n All other types are copied.\n \n \n@@ -1918,9 +1918,9 @@ task in a _failing state_.\n \n ### Unary operator expressions\n \n-Rust defines six symbolic unary operators,\n-in addition to the unary [copy](#unary-copy-expressions) and [move](#unary-move-expressions) operators.\n-They are all written as prefix operators, before the expression they apply to.\n+Rust defines six symbolic unary operators.\n+They are all written as prefix operators,\n+before the expression they apply to.\n \n `-`\n   : Negation. May only be applied to numeric types.\n@@ -2119,60 +2119,6 @@ An example of a parenthesized expression:\n let x = (2 + 3) * 4;\n ~~~~\n \n-### Unary copy expressions\n-\n-~~~~~~~~{.ebnf .gram}\n-copy_expr : \"copy\" expr ;\n-~~~~~~~~\n-\n-> **Note:** `copy` expressions are deprecated. It's preferable to use\n-> the `Clone` trait and `clone()` method.\n-\n-A _unary copy expression_ consists of the unary `copy` operator applied to\n-some argument expression.\n-\n-Evaluating a copy expression first evaluates the argument expression, then\n-copies the resulting value, allocating any memory necessary to hold the new\n-copy.\n-\n-[Managed boxes](#pointer-types) (type `@`) are, as usual, shallow-copied,\n-as are raw and borrowed pointers.\n-[Owned boxes](#pointer-types), [owned vectors](#vector-types) and similar owned types are deep-copied.\n-\n-Since the binary [assignment operator](#assignment-expressions) `=` performs a copy or move implicitly,\n-the unary copy operator is typically only used to cause an argument to a function to be copied and passed by value.\n-\n-An example of a copy expression:\n-\n-~~~~\n-fn mutate(mut vec: ~[int]) {\n-   vec[0] = 10;\n-}\n-\n-let v = ~[1,2,3];\n-\n-mutate(copy v);   // Pass a copy\n-\n-assert!(v[0] == 1); // Original was not modified\n-~~~~\n-\n-### Unary move expressions\n-\n-~~~~~~~~{.ebnf .gram}\n-move_expr : \"move\" expr ;\n-~~~~~~~~\n-\n-A _unary move expression_ is similar to a [unary copy](#unary-copy-expressions) expression,\n-except that it can only be applied to a [local variable](#memory-slots),\n-and it performs a _move_ on its operand, rather than a copy.\n-That is, the memory location denoted by its operand is de-initialized after evaluation,\n-and the resulting value is a shallow copy of the operand,\n-even if the operand is an [owning type](#type-kinds).\n-\n-\n-> **Note:** In future versions of Rust, `move` may be removed as a separate operator;\n-> moves are now [automatically performed](#moved-and-copied-types) for most cases `move` would be appropriate.\n-\n \n ### Call expressions\n \n@@ -2507,10 +2453,11 @@ match x {\n }\n ~~~~\n \n-Patterns that bind variables default to binding to a copy or move of the matched value\n+Patterns that bind variables\n+default to binding to a copy or move of the matched value\n (depending on the matched value's type).\n-This can be made explicit using the ```copy``` keyword,\n-changed to bind to a borrowed pointer by using the ```ref``` keyword,\n+This can be changed to bind to a borrowed pointer by\n+using the ```ref``` keyword,\n or to a mutable borrowed pointer using ```ref mut```.\n \n A pattern that's just an identifier,\n@@ -2896,16 +2843,18 @@ and the cast expression in `main`.\n Within the body of an item that has type parameter declarations, the names of its type parameters are types:\n \n ~~~~~~~\n-fn map<A: Copy, B: Copy>(f: &fn(A) -> B, xs: &[A]) -> ~[B] {\n-   if xs.len() == 0 { return ~[]; }\n-   let first: B = f(copy xs[0]);\n-   let rest: ~[B] = map(f, xs.slice(1, xs.len()));\n-   return ~[first] + rest;\n+fn map<A: Clone, B: Clone>(f: &fn(A) -> B, xs: &[A]) -> ~[B] {\n+    if xs.len() == 0 {\n+       return ~[];\n+    }\n+    let first: B = f(xs[0].clone());\n+    let rest: ~[B] = map(f, xs.slice(1, xs.len()));\n+    return ~[first] + rest;\n }\n ~~~~~~~\n \n-Here, `first` has type `B`, referring to `map`'s `B` type parameter; and `rest` has\n-type `~[B]`, a vector type with element type `B`.\n+Here, `first` has type `B`, referring to `map`'s `B` type parameter;\n+and `rest` has type `~[B]`, a vector type with element type `B`.\n \n ### Self types\n \n@@ -2919,7 +2868,9 @@ trait Printable {\n }\n \n impl Printable for ~str {\n-  fn make_string(&self) -> ~str { copy *self }\n+    fn make_string(&self) -> ~str {\n+        (*self).clone()\n+    }\n }\n ~~~~~~~~\n \n@@ -2933,23 +2884,29 @@ The kinds are:\n \n `Freeze`\n   : Types of this kind are deeply immutable;\n-    they contain no mutable memory locations directly or indirectly via pointers.\n+    they contain no mutable memory locations\n+    directly or indirectly via pointers.\n `Send`\n   : Types of this kind can be safely sent between tasks.\n     This kind includes scalars, owning pointers, owned closures, and\n-    structural types containing only other owned types. All `Send` types are `Static`.\n-`Copy`\n-  : This kind includes all types that can be copied. All types with\n-    sendable kind are copyable, as are managed boxes, managed closures,\n-    trait types, and structural types built out of these.\n-    Types with destructors (types that implement `Drop`) can not implement `Copy`.\n+    structural types containing only other owned types.\n+    All `Send` types are `'static`.\n+`'static`\n+  : Types of this kind do not contain any borrowed pointers;\n+    this can be a useful guarantee for code\n+    that breaks borrowing assumptions\n+    using [`unsafe` operations](#unsafe-functions).\n `Drop`\n-  : This is not strictly a kind, but its presence interacts with kinds: the `Drop`\n-    trait provides a single method `drop` that takes no parameters, and is run\n-    when values of the type are dropped. Such a method is called a \"destructor\",\n-    and are always executed in \"top-down\" order: a value is completely destroyed\n-    before any of the values it owns run their destructors. Only `Send` types\n-    that do not implement `Copy` can implement `Drop`.\n+  : This is not strictly a kind,\n+    but its presence interacts with kinds:\n+    the `Drop` trait provides a single method `drop`\n+    that takes no parameters,\n+    and is run when values of the type are dropped.\n+    Such a method is called a \"destructor\",\n+    and are always executed in \"top-down\" order:\n+    a value is completely destroyed\n+    before any of the values it owns run their destructors.\n+    Only `Send` types can implement `Drop`.\n \n _Default_\n   : Types with destructors, closure environments,\n@@ -2962,30 +2919,15 @@ Kinds can be supplied as _bounds_ on type parameters, like traits,\n in which case the parameter is constrained to types satisfying that kind.\n \n By default, type parameters do not carry any assumed kind-bounds at all.\n+When instantiating a type parameter,\n+the kind bounds on the parameter are checked\n+to be the same or narrower than the kind\n+of the type that it is instantiated with.\n \n-Any operation that causes a value to be copied requires the type of that value to be of copyable kind,\n-so the `Copy` bound is frequently required on function type parameters.\n-For example, this is not a valid program:\n-\n-~~~~{.xfail-test}\n-fn box<T>(x: T) -> @T { @x }\n-~~~~\n-\n-Putting `x` into a managed box involves copying, and the `T` parameter has the default (non-copyable) kind.\n-To change that, a bound is declared:\n-\n-~~~~\n-fn box<T: Copy>(x: T) -> @T { @x }\n-~~~~\n-\n-Calling this second version of `box` on a noncopyable type is not\n-allowed. When instantiating a type parameter, the kind bounds on the\n-parameter are checked to be the same or narrower than the kind of the\n-type that it is instantiated with.\n-\n-Sending operations are not part of the Rust language, but are\n-implemented in the library. Generic functions that send values bound\n-the kind of these values to sendable.\n+Sending operations are not part of the Rust language,\n+but are implemented in the library.\n+Generic functions that send values\n+bound the kind of these values to sendable.\n \n # Memory and concurrency models\n \n@@ -3093,9 +3035,7 @@ managed box value makes a shallow copy of the pointer (optionally incrementing\n a reference count, if the managed box is implemented through\n reference-counting).\n \n-Owned box values exist in 1:1 correspondence with their heap allocation;\n-copying an owned box value makes a deep copy of the heap allocation and\n-produces a pointer to the new allocation.\n+Owned box values exist in 1:1 correspondence with their heap allocation.\n \n An example of constructing one managed box type and value, and one owned box\n type and value:"}, {"sha": "3c0400cd3afb5c449c6adab061c3c6f097940747", "filename": "doc/tutorial.md", "status": "modified", "additions": 51, "deletions": 42, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -1275,6 +1275,11 @@ The `+` operator means concatenation when applied to vector types.\n # enum Crayon { Almond, AntiqueBrass, Apricot,\n #               Aquamarine, Asparagus, AtomicTangerine,\n #               BananaMania, Beaver, Bittersweet };\n+# impl Clone for Crayon {\n+#     fn clone(&self) -> Crayon {\n+#         *self\n+#     }\n+# }\n \n let my_crayons = ~[Almond, AntiqueBrass, Apricot];\n let your_crayons = ~[BananaMania, Beaver, Bittersweet];\n@@ -1827,15 +1832,17 @@ similarities to type classes. Rust's traits are a form of *bounded\n polymorphism*: a trait is a way of limiting the set of possible types\n that a type parameter could refer to.\n \n-As motivation, let us consider copying in Rust. The `copy` operation\n-is not defined for all Rust types. One reason is user-defined\n-destructors: copying a type that has a destructor could result in the\n-destructor running multiple times. Therefore, types with user-defined\n-destructors cannot be copied, either implicitly or explicitly, and\n-neither can types that own other types containing destructors.\n-\n-This complicates handling of generic functions. If you have a type\n-parameter `T`, can you copy values of that type? In Rust, you can't,\n+As motivation, let us consider copying in Rust.\n+The `clone` method is not defined for all Rust types.\n+One reason is user-defined destructors:\n+copying a type that has a destructor\n+could result in the destructor running multiple times.\n+Therefore, types with destructors cannot be copied\n+unless you explicitly implement `Clone` for them.\n+\n+This complicates handling of generic functions.\n+If you have a type parameter `T`, can you copy values of that type?\n+In Rust, you can't,\n and if you try to run the following code the compiler will complain.\n \n ~~~~ {.xfail-test}\n@@ -1845,42 +1852,43 @@ fn head_bad<T>(v: &[T]) -> T {\n }\n ~~~~\n \n-However, we can tell the compiler that the `head` function is only for\n-copyable types: that is, those that have the `Copy` trait. In that\n-case, we can explicitly create a second copy of the value we are\n-returning using the `copy` keyword:\n+However, we can tell the compiler\n+that the `head` function is only for copyable types:\n+that is, those that implement the `Clone` trait.\n+In that case,\n+we can explicitly create a second copy of the value we are returning\n+using the `clone` keyword:\n \n ~~~~\n // This does\n-fn head<T: Copy>(v: &[T]) -> T {\n-    copy v[0]\n+fn head<T: Clone>(v: &[T]) -> T {\n+    v[0].clone()\n }\n ~~~~\n \n-This says that we can call `head` on any type `T` as long as that type\n-implements the `Copy` trait. When instantiating a generic function,\n-you can only instantiate it with types that implement the correct\n-trait, so you could not apply `head` to a type with a\n-destructor. (`Copy` is a special trait that is built in to the\n-compiler, making it possible for the compiler to enforce this\n-restriction.)\n-\n-While most traits can be defined and implemented by user code, three\n-traits are automatically derived and implemented for all applicable\n-types by the compiler, and may not be overridden:\n+This says that we can call `head` on any type `T`\n+as long as that type implements the `Clone` trait.\n+When instantiating a generic function,\n+you can only instantiate it with types\n+that implement the correct trait,\n+so you could not apply `head` to a type\n+that does not implement `Clone`.\n \n-* `Copy` - Types that can be copied, either implicitly, or explicitly with the\n-  `copy` operator. All types are copyable unless they have destructors or\n-  contain types with destructors.\n+While most traits can be defined and implemented by user code,\n+two traits are automatically derived and implemented\n+for all applicable types by the compiler,\n+and may not be overridden:\n \n-* `Owned` - Owned types. Types are owned unless they contain managed\n-  boxes, managed closures, or borrowed pointers. Owned types may or\n-  may not be copyable.\n+* `Send` - Sendable types.\n+Types are sendable\n+unless they contain managed boxes, managed closures, or borrowed pointers.\n \n-* `Const` - Constant (immutable) types. These are types that do not contain\n-  mutable fields.\n+* `Freeze` - Constant (immutable) types.\n+These are types that do not contain anything intrinsically mutable.\n+Intrinsically mutable values include `@mut`\n+and `Cell` in the standard library.\n \n-> ***Note:*** These three traits were referred to as 'kinds' in earlier\n+> ***Note:*** These two traits were referred to as 'kinds' in earlier\n > iterations of the language, and often still are.\n \n Additionally, the `Drop` trait is used to define destructors. This\n@@ -1908,10 +1916,11 @@ may call it.\n \n ## Declaring and implementing traits\n \n-A trait consists of a set of methods, without bodies, or may be empty,\n-as is the case with `Copy`, `Owned`, and `Const`. For example, we could\n-declare the trait `Printable` for things that can be printed to the\n-console, with a single method:\n+A trait consists of a set of methods without bodies,\n+or may be empty, as is the case with `Send` and `Freeze`.\n+For example, we could declare the trait\n+`Printable` for things that can be printed to the console,\n+with a single method:\n \n ~~~~\n trait Printable {\n@@ -2030,7 +2039,7 @@ fn print_all<T: Printable>(printable_things: ~[T]) {\n ~~~~\n \n Declaring `T` as conforming to the `Printable` trait (as we earlier\n-did with `Copy`) makes it possible to call methods from that trait\n+did with `Clone`) makes it possible to call methods from that trait\n on values of type `T` inside the function. It will also cause a\n compile-time error when anyone tries to call `print_all` on an array\n whose element type does not have a `Printable` implementation.\n@@ -2040,10 +2049,10 @@ as in this version of `print_all` that copies elements.\n \n ~~~\n # trait Printable { fn print(&self); }\n-fn print_all<T: Printable + Copy>(printable_things: ~[T]) {\n+fn print_all<T: Printable + Clone>(printable_things: ~[T]) {\n     let mut i = 0;\n     while i < printable_things.len() {\n-        let copy_of_thing = copy printable_things[i];\n+        let copy_of_thing = printable_things[i].clone();\n         copy_of_thing.print();\n         i += 1;\n     }"}, {"sha": "bc5741de2b98f5723e83450a415dc7d940c36d0d", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Eq)]\n+#[deriving(Clone, Eq)]\n pub enum mode {\n     mode_compile_fail,\n     mode_run_fail,\n@@ -18,6 +18,7 @@ pub enum mode {\n     mode_codegen\n }\n \n+#[deriving(Clone)]\n pub struct config {\n     // The library paths required for running the compiler\n     compile_lib_path: ~str,"}, {"sha": "012db7409a487703de8e166a0beddc1832282e25", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -40,6 +40,17 @@ pub mod runtest;\n pub mod common;\n pub mod errors;\n \n+<<<<<<< HEAD\n+=======\n+mod std {\n+    pub use core::clone;\n+    pub use core::cmp;\n+    pub use core::str;\n+    pub use core::sys;\n+    pub use core::unstable;\n+}\n+\n+>>>>>>> test: Fix tests.\n pub fn main() {\n     let args = os::args();\n     let config = parse_config(args);\n@@ -117,10 +128,17 @@ pub fn parse_config(args: ~[~str]) -> config {\n         mode: str_mode(getopts::opt_str(matches, \"mode\")),\n         run_ignored: getopts::opt_present(matches, \"ignored\"),\n         filter:\n+<<<<<<< HEAD\n             if !matches.free.is_empty() {\n                  Some(matches.free[0].clone())\n             } else {\n                 None\n+=======\n+             if !matches.free.is_empty() {\n+                option::Some(matches.free[0].clone())\n+             } else {\n+                option::None\n+>>>>>>> test: Fix tests.\n             },\n         logfile: getopts::opt_maybe_str(matches, \"logfile\").map(|s| Path(*s)),\n         save_metrics: getopts::opt_maybe_str(matches, \"save-metrics\").map(|s| Path(*s)),"}, {"sha": "b044f19dcd6292bca19191c26083d3112b95b11b", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -15,7 +15,7 @@ pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n // Load any test directives embedded in the file\n pub fn load_errors(testfile: &Path) -> ~[ExpectedError] {\n     let mut error_patterns = ~[];\n-    let rdr = io::file_reader(testfile).get();\n+    let rdr = io::file_reader(testfile).unwrap();\n     let mut line_num = 1u;\n     while !rdr.eof() {\n         let ln = rdr.read_line();"}, {"sha": "0860219e1a999723a89171aaf2b38045f609eaba", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -101,7 +101,7 @@ pub fn is_test_ignored(config: &config, testfile: &Path) -> bool {\n }\n \n fn iter_header(testfile: &Path, it: &fn(~str) -> bool) -> bool {\n-    let rdr = io::file_reader(testfile).get();\n+    let rdr = io::file_reader(testfile).unwrap();\n     while !rdr.eof() {\n         let ln = rdr.read_line();\n "}, {"sha": "76e5d3e6b4e3448b878fc9c6c760a2935a367599", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -672,7 +672,7 @@ fn dump_output_file(config: &config, testfile: &Path,\n                     out: &str, extension: &str) {\n     let outfile = make_out_name(config, testfile, extension);\n     let writer =\n-        io::file_writer(&outfile, [io::Create, io::Truncate]).get();\n+        io::file_writer(&outfile, [io::Create, io::Truncate]).unwrap();\n     writer.write_str(out);\n }\n "}, {"sha": "106b7c80f18f42bc8ebd710e499fe16ce7815db7", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -1453,7 +1453,7 @@ mod tests {\n     fn bench_big_bitv_big(b: &mut BenchHarness) {\n         let mut r = rng();\n         let mut storage = ~[];\n-        storage.grow(BENCH_BITS / uint::bits, &0);\n+        storage.grow(BENCH_BITS / uint::bits, &0u);\n         let mut bitv = BigBitv::new(storage);\n         do b.iter {\n             bitv.set((r.next() as uint) % BENCH_BITS, true);"}, {"sha": "83cef9972d7356c36d0aa99afa250be4607c9333", "filename": "src/libextra/crypto/sha1.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fcrypto%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fcrypto%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha1.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -244,14 +244,15 @@ mod tests {\n     use digest::{Digest, DigestUtil};\n     use sha1::Sha1;\n \n+    #[deriving(Clone)]\n+    struct Test {\n+        input: ~str,\n+        output: ~[u8],\n+        output_str: ~str,\n+    }\n+\n     #[test]\n     fn test() {\n-        struct Test {\n-            input: ~str,\n-            output: ~[u8],\n-            output_str: ~str,\n-        }\n-\n         fn a_million_letter_a() -> ~str {\n             let mut i = 0;\n             let mut rs = ~\"\";"}, {"sha": "f7c54634fe4c208bea7a723337fde8b10669ee3d", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -417,7 +417,7 @@ mod test {\n     use std::vec;\n \n     fn make_file(path : &Path, contents: &[~str]) {\n-        let file = io::file_writer(path, [io::Create, io::Truncate]).get();\n+        let file = io::file_writer(path, [io::Create, io::Truncate]).unwrap();\n \n         for contents.iter().advance |str| {\n             file.write_str(*str);\n@@ -562,9 +562,11 @@ mod test {\n         let f2 =\n             Some(Path(\"tmp/lib-fileinput-test-no-trailing-newline-2.tmp\"));\n \n-        let wr = io::file_writer(f1.get_ref(), [io::Create, io::Truncate]).get();\n+        let wr = io::file_writer(f1.get_ref(),\n+                                 [io::Create, io::Truncate]).unwrap();\n         wr.write_str(\"1\\n2\");\n-        let wr = io::file_writer(f2.get_ref(), [io::Create, io::Truncate]).get();\n+        let wr = io::file_writer(f2.get_ref(),\n+                                 [io::Create, io::Truncate]).unwrap();\n         wr.write_str(\"3\\n4\");\n \n         let mut lines = ~[];"}, {"sha": "0348176057960ef0cc416e714ab6c86748387916", "filename": "src/libextra/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flist.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -12,7 +12,7 @@\n \n \n \n-#[deriving(Eq)]\n+#[deriving(Clone, Eq)]\n pub enum List<T> {\n     Cons(T, @List<T>),\n     Nil,"}, {"sha": "c1633ffa04114aea8ffe4a669123ed7fbeff3170", "filename": "src/libextra/net/ip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet%2Fip.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -38,6 +38,7 @@ use get_data_for_req = uv_ll::get_data_for_req;\n use ll = uv_ll;\n \n /// An IP address\n+#[deriving(Clone)]\n pub enum IpAddr {\n     /// An IPv4 address\n     Ipv4(sockaddr_in),"}, {"sha": "122d4b85628e2294293de9ca40366acae0a22392", "filename": "src/libextra/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet%2Ftcp.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -93,6 +93,7 @@ pub struct TcpErrData {\n }\n \n /// Details returned as part of a `Result::Err` result from `tcp::listen`\n+#[deriving(Clone)]\n pub enum TcpListenErrData {\n     /**\n      * Some unplanned-for error. The first and second fields correspond\n@@ -120,6 +121,7 @@ pub enum TcpListenErrData {\n     AccessDenied\n }\n /// Details returned as part of a `Result::Err` result from `tcp::connect`\n+#[deriving(Clone)]\n pub enum TcpConnectErrData {\n     /**\n      * Some unplanned-for error. The first and second fields correspond"}, {"sha": "d07b645a541d22e9c9f229aa5eeb14a915bde6c5", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -12,13 +12,14 @@\n \n #[allow(missing_doc)];\n \n-\n+use std::clone::Clone;\n use std::unstable::intrinsics::{move_val_init, init};\n use std::util::{replace, swap};\n use std::vec;\n use std::iterator::FromIterator;\n \n /// A priority queue implemented with a binary heap\n+#[deriving(Clone)]\n pub struct PriorityQueue<T> {\n     priv data: ~[T],\n }"}, {"sha": "a1cd2dfb2400b46afc1842ae7d6bde44cd7bdb55", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -926,6 +926,7 @@ mod test_tim_sort {\n     use std::rand;\n     use std::vec;\n \n+    #[deriving(Clone)]\n     struct CVal {\n         val: float,\n     }\n@@ -992,7 +993,10 @@ mod test_tim_sort {\n         fail!(\"Guarantee the fail\");\n     }\n \n-    struct DVal { val: uint }\n+    #[deriving(Clone)]\n+    struct DVal {\n+        val: uint,\n+    }\n \n     impl Ord for DVal {\n         fn lt(&self, _x: &DVal) -> bool { true }"}, {"sha": "0a1811968f02af4db050c830291b5eeb7f583c26", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -1245,7 +1245,7 @@ mod tests {\n                         ignore: false,\n                         should_fail: false\n                     },\n-                    testfn: DynTestFn(testfn.clone()),\n+                    testfn: DynTestFn(testfn),\n                 };\n                 tests.push(test);\n             }"}, {"sha": "1527b090f94c8c6c7cccdc3503fa346face04a6d", "filename": "src/libextra/uv_ll.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibextra%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_ll.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -266,6 +266,7 @@ pub struct uv_timer_t {\n }\n \n // unix size: 16\n+#[deriving(Clone)]\n pub struct sockaddr_in {\n     sin_family: u16,\n     sin_port: u16,\n@@ -280,6 +281,7 @@ pub struct sockaddr_in6 {\n     a0: *u8, a1: *u8,\n     a2: *u8, a3: *u8,\n }\n+\n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n #[cfg(target_arch=\"mips\")]\n@@ -290,6 +292,12 @@ pub struct sockaddr_in6 {\n     a6: *u8, a7: *u8,\n }\n \n+impl Clone for sockaddr_in6 {\n+    fn clone(&self) -> sockaddr_in6 {\n+        *self\n+    }\n+}\n+\n // unix size: 28 .. FIXME #1645\n // stuck with 32 because of rust padding structs?\n pub type addr_in = addr_in_impl::addr_in;"}, {"sha": "7c75b9c34b3020c5da347de1bd84f14104102d84", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -63,8 +63,8 @@ fn git_repo_pkg() -> PkgId {\n \n fn writeFile(file_path: &Path, contents: &str) {\n     let out: @io::Writer =\n-        result::get(&io::file_writer(file_path,\n-                                     [io::Create, io::Truncate]));\n+        result::unwrap(io::file_writer(file_path,\n+                                       [io::Create, io::Truncate]));\n     out.write_line(contents);\n }\n "}, {"sha": "ebd6f9bf9d8cd920b5a37b1ad60de527b7966bb4", "filename": "src/librustpkg/testsuite/pass/src/fancy-lib/pkg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -44,7 +44,7 @@ pub fn main() {\n     }\n \n     let file = io::file_writer(&out_path.push(\"generated.rs\"),\n-                               [io::Create]).get();\n+                               [io::Create]).unwrap();\n     file.write_str(\"pub fn wheeeee() { for [1, 2, 3].each() |_| { assert!(true); } }\");\n \n "}, {"sha": "338f9335806dd5cba93f20ff1a89f4f84c2a8954", "filename": "src/libstd/io.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -1856,11 +1856,11 @@ mod tests {\n         debug!(frood.clone());\n         {\n             let out: @io::Writer =\n-                result::get(\n-                    &io::file_writer(tmpfile, [io::Create, io::Truncate]));\n+                result::unwrap(\n+                    io::file_writer(tmpfile, [io::Create, io::Truncate]));\n             out.write_str(frood);\n         }\n-        let inp: @io::Reader = result::get(&io::file_reader(tmpfile));\n+        let inp: @io::Reader = result::unwrap(io::file_reader(tmpfile));\n         let frood2: ~str = inp.read_c_str();\n         debug!(frood2.clone());\n         assert_eq!(frood, frood2);\n@@ -1958,28 +1958,28 @@ mod tests {\n     fn test_read_buffer_too_small() {\n         let path = &Path(\"tmp/lib-io-test-read-buffer-too-small.tmp\");\n         // ensure the file exists\n-        io::file_writer(path, [io::Create]).get();\n+        io::file_writer(path, [io::Create]).unwrap();\n \n-        let file = io::file_reader(path).get();\n-        let mut buf = vec::from_elem(5, 0);\n+        let file = io::file_reader(path).unwrap();\n+        let mut buf = vec::from_elem(5, 0u8);\n         file.read(buf, 6); // this should fail because buf is too small\n     }\n \n     #[test]\n     fn test_read_buffer_big_enough() {\n         let path = &Path(\"tmp/lib-io-test-read-buffer-big-enough.tmp\");\n         // ensure the file exists\n-        io::file_writer(path, [io::Create]).get();\n+        io::file_writer(path, [io::Create]).unwrap();\n \n-        let file = io::file_reader(path).get();\n-        let mut buf = vec::from_elem(5, 0);\n+        let file = io::file_reader(path).unwrap();\n+        let mut buf = vec::from_elem(5, 0u8);\n         file.read(buf, 4); // this should succeed because buf is big enough\n     }\n \n     #[test]\n     fn test_write_empty() {\n         let file = io::file_writer(&Path(\"tmp/lib-io-test-write-empty.tmp\"),\n-                                   [io::Create]).get();\n+                                   [io::Create]).unwrap();\n         file.write([]);\n     }\n \n@@ -2025,15 +2025,15 @@ mod tests {\n \n         // write the ints to the file\n         {\n-            let file = io::file_writer(&path, [io::Create]).get();\n+            let file = io::file_writer(&path, [io::Create]).unwrap();\n             for uints.iter().advance |i| {\n                 file.write_le_u64(*i);\n             }\n         }\n \n         // then read them back and check that they are the same\n         {\n-            let file = io::file_reader(&path).get();\n+            let file = io::file_reader(&path).unwrap();\n             for uints.iter().advance |i| {\n                 assert_eq!(file.read_le_u64(), *i);\n             }\n@@ -2047,15 +2047,15 @@ mod tests {\n \n         // write the ints to the file\n         {\n-            let file = io::file_writer(&path, [io::Create]).get();\n+            let file = io::file_writer(&path, [io::Create]).unwrap();\n             for uints.iter().advance |i| {\n                 file.write_be_u64(*i);\n             }\n         }\n \n         // then read them back and check that they are the same\n         {\n-            let file = io::file_reader(&path).get();\n+            let file = io::file_reader(&path).unwrap();\n             for uints.iter().advance |i| {\n                 assert_eq!(file.read_be_u64(), *i);\n             }\n@@ -2069,15 +2069,15 @@ mod tests {\n \n         // write the ints to the file\n         {\n-            let file = io::file_writer(&path, [io::Create]).get();\n+            let file = io::file_writer(&path, [io::Create]).unwrap();\n             for ints.iter().advance |i| {\n                 file.write_be_i32(*i);\n             }\n         }\n \n         // then read them back and check that they are the same\n         {\n-            let file = io::file_reader(&path).get();\n+            let file = io::file_reader(&path).unwrap();\n             for ints.iter().advance |i| {\n                 // this tests that the sign extension is working\n                 // (comparing the values as i32 would not test this)\n@@ -2093,12 +2093,12 @@ mod tests {\n         let buf = ~[0x41, 0x02, 0x00, 0x00];\n \n         {\n-            let file = io::file_writer(&path, [io::Create]).get();\n+            let file = io::file_writer(&path, [io::Create]).unwrap();\n             file.write(buf);\n         }\n \n         {\n-            let file = io::file_reader(&path).get();\n+            let file = io::file_reader(&path).unwrap();\n             let f = file.read_be_f32();\n             assert_eq!(f, 8.1250);\n         }\n@@ -2110,13 +2110,13 @@ mod tests {\n         let f:f32 = 8.1250;\n \n         {\n-            let file = io::file_writer(&path, [io::Create]).get();\n+            let file = io::file_writer(&path, [io::Create]).unwrap();\n             file.write_be_f32(f);\n             file.write_le_f32(f);\n         }\n \n         {\n-            let file = io::file_reader(&path).get();\n+            let file = io::file_reader(&path).unwrap();\n             assert_eq!(file.read_be_f32(), 8.1250);\n             assert_eq!(file.read_le_f32(), 8.1250);\n         }"}, {"sha": "ec6e909219dbb251d2990ba1dae9e795f6fa33ea", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -736,7 +736,7 @@ mod test {\n                 let server_stream_watcher = server_stream_watcher;\n                 rtdebug!(\"starting read\");\n                 let alloc: AllocCallback = |size| {\n-                    vec_to_uv_buf(vec::from_elem(size, 0))\n+                    vec_to_uv_buf(vec::from_elem(size, 0u8))\n                 };\n                 do client_tcp_watcher.read_start(alloc)\n                     |stream_watcher, nread, buf, status| {"}, {"sha": "b655dc828bf0ab15d9fac8562a1c12cf2d2c8720", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -178,7 +178,6 @@ impl<A:ToStr> ToStr for @[A] {\n }\n \n #[cfg(test)]\n-#[allow(non_implicitly_copyable_typarams)]\n mod tests {\n     use hashmap::HashMap;\n     use hashmap::HashSet;"}, {"sha": "e380cc36b324ca36826acdd2e937405f707c7f82", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -3049,7 +3049,6 @@ mod tests {\n     #[test]\n     #[ignore(windows)]\n     #[should_fail]\n-    #[allow(non_implicitly_copyable_typarams)]\n     fn test_grow_fn_fail() {\n         let mut v = ~[];\n         do v.grow_fn(100) |i| {\n@@ -3108,7 +3107,6 @@ mod tests {\n     #[test]\n     #[ignore(windows)]\n     #[should_fail]\n-    #[allow(non_implicitly_copyable_typarams)]\n     fn test_permute_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         let mut i = 0;"}, {"sha": "09fea560f37b2fa0f2f82c40961b62d14160e215", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -835,7 +835,7 @@ mod test {\n \n     // because of the SCTable, I now need a tidy way of\n     // creating syntax objects. Sigh.\n-    #[deriving(Eq)]\n+    #[deriving(Clone, Eq)]\n     enum TestSC {\n         M(Mrk),\n         R(ident,Name)"}, {"sha": "1f98865a10c02cd73bd1f21e0d7e6eab0cfcf732", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -75,7 +75,7 @@ fn read_line() {\n         .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n \n     for int::range(0, 3) |_i| {\n-        let reader = result::get(&io::file_reader(&path));\n+        let reader = result::unwrap(io::file_reader(&path));\n         while !reader.eof() {\n             reader.read_line();\n         }"}, {"sha": "6280fca1cc63ac468097611dbe28102b6a62f1b4", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -154,6 +154,15 @@ fn bfs(graph: graph, key: node_id) -> bfs_result {\n     marks\n }\n \n+#[deriving(Clone)]\n+enum color {\n+    white,\n+    // node_id marks which node turned this gray/black.\n+    // the node id later becomes the parent.\n+    gray(node_id),\n+    black(node_id)\n+}\n+\n /**\n  * Another version of the bfs function.\n  *\n@@ -163,14 +172,6 @@ fn bfs(graph: graph, key: node_id) -> bfs_result {\n fn bfs2(graph: graph, key: node_id) -> bfs_result {\n     // This works by doing functional updates of a color vector.\n \n-    enum color {\n-        white,\n-        // node_id marks which node turned this gray/black.\n-        // the node id later becomes the parent.\n-        gray(node_id),\n-        black(node_id)\n-    };\n-\n     let mut colors = do vec::from_fn(graph.len()) |i| {\n         if i as node_id == key {\n             gray(key)\n@@ -236,14 +237,6 @@ fn bfs2(graph: graph, key: node_id) -> bfs_result {\n fn pbfs(graph: &arc::ARC<graph>, key: node_id) -> bfs_result {\n     // This works by doing functional updates of a color vector.\n \n-    enum color {\n-        white,\n-        // node_id marks which node turned this gray/black.\n-        // the node id later becomes the parent.\n-        gray(node_id),\n-        black(node_id)\n-    };\n-\n     let graph_vec = graph.get(); // FIXME #3387 requires this temp\n     let mut colors = do vec::from_fn(graph_vec.len()) |i| {\n         if i as node_id == key {"}, {"sha": "5d05817e512a0e59ca1831365b34222af82637d2", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -124,8 +124,8 @@ fn main() {\n     };\n \n     let writer = if os::getenv(\"RUST_BENCH\").is_some() {\n-        result::get(&io::file_writer(&Path(\"./shootout-fasta.data\"),\n-                                    [io::Truncate, io::Create]))\n+        result::unwrap(io::file_writer(&Path(\"./shootout-fasta.data\"),\n+                                       [io::Truncate, io::Create]))\n     } else {\n         io::stdout()\n     };"}, {"sha": "6a09238c2f2745ac9a2134adc0a61df9ffa5729b", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -162,7 +162,7 @@ fn main() {\n        // get to this massive data set, but include_bin! chokes on it (#2598)\n        let path = Path(env!(\"CFG_SRC_DIR\"))\n            .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n-       result::get(&io::file_reader(&path))\n+       result::unwrap(io::file_reader(&path))\n    } else {\n       io::stdin()\n    };"}, {"sha": "f04da0575b9540a75e7d2bcd020a0cc014b492ba", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -11,7 +11,7 @@ fn give_any(f: &fn:()) {\n \n fn give_owned(f: &fn:Send()) {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR expected bounds `Freeze+Send` but found bounds `Send`\n+    take_const_owned(f); //~ ERROR expected bounds `Send+Freeze` but found bounds `Send`\n }\n \n fn main() {}"}, {"sha": "cb0b8afbf8ba4454f4bf688c4d6468e675145b20", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -37,7 +37,7 @@ fn main() {\n         let mut res = foo(x);\n \n         let mut v = ~[];\n-        v = ~[(res)] + v; //~ instantiating a type parameter with an incompatible type `foo`, which does not fulfill `Clone`\n+        v = ~[(res)] + v; //~ failed to find an implementation of trait\n         assert_eq!(v.len(), 2);\n     }\n "}, {"sha": "7f8a26716cd8585d6a1b1c71922668359c065335", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -14,11 +14,8 @@ trait Foo {\n fn a(_x: ~Foo:Send) {\n }\n \n-fn b(_x: ~Foo:Send+Clone) {\n-}\n-\n fn c(x: ~Foo:Freeze+Send) {\n-    b(x); //~ ERROR expected bounds `Clone+Send`\n+    a(x);\n }\n \n fn d(x: ~Foo:) {"}, {"sha": "2d59e490e0d7b21140dd38952cee9fb96c1f1df7", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: instantiating a type parameter with an incompatible type\n+// error-pattern: failed to find an implementation\n \n struct r {\n   i:int"}, {"sha": "5b3333fb998cc205ad71f54a5a497231dc27187a", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -20,7 +20,7 @@ trait methods {\n \n impl methods for () {\n     fn to_bytes(&self) -> ~[u8] {\n-        vec::from_elem(0, 0)\n+        vec::from_elem(0, 0u8)\n     }\n }\n "}, {"sha": "d7897223d47107a19e21eff3b124c5f07867ad8d", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -13,6 +13,7 @@\n extern mod extra;\n use extra::list;\n \n+#[deriving(Clone)]\n enum foo {\n   a(uint),\n   b(~str),"}, {"sha": "f4026c83c3e1fb98755c09fa2f1e9e5a530b6ff3", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -14,15 +14,15 @@ extern mod extra;\n \n use extra::list::*;\n \n-fn pure_length_go<T>(ls: @List<T>, acc: uint) -> uint {\n+fn pure_length_go<T:Clone>(ls: @List<T>, acc: uint) -> uint {\n     match *ls { Nil => { acc } Cons(_, tl) => { pure_length_go(tl, acc + 1u) } }\n }\n \n-fn pure_length<T>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n+fn pure_length<T:Clone>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n \n-fn nonempty_list<T>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n+fn nonempty_list<T:Clone>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n \n-fn safe_head<T>(ls: @List<T>) -> T {\n+fn safe_head<T:Clone>(ls: @List<T>) -> T {\n     assert!(!is_empty(ls));\n     return head(ls);\n }"}, {"sha": "40ce248f28625ec986eedbacd53c46f52152969e", "filename": "src/test/run-pass/repeated-vector-syntax.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbb3c3887ff23c064aa762eb4dafaf4967c6416/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs?ref=2dbb3c3887ff23c064aa762eb4dafaf4967c6416", "patch": "@@ -8,16 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn main() {\n-    struct Foo { a: ~str }\n+#[deriving(Clone)]\n+struct Foo {\n+    a: ~str,\n+}\n \n-    let v = [ ~Foo { a: ~\"Hello!\" }, ..129 ];\n-    let w = [ ~\"Hello!\", ..129 ];\n+pub fn main() {\n     let x = [ @[true], ..512 ];\n     let y = [ 0, ..1 ];\n \n-    error!(\"%?\", v);\n-    error!(\"%?\", w);\n     error!(\"%?\", x);\n     error!(\"%?\", y);\n }"}]}