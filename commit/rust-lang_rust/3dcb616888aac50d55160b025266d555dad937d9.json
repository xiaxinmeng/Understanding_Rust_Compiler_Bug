{"sha": "3dcb616888aac50d55160b025266d555dad937d9", "node_id": "C_kwDOAAsO6NoAKDNkY2I2MTY4ODhhYWM1MGQ1NTE2MGIwMjUyNjZkNTU1ZGFkOTM3ZDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-06T17:38:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-06T17:38:48Z"}, "message": "Auto merge of #98959 - cjgillot:late-bound-order, r=michaelwoerister\n\nReturn a FxIndexSet in is_late_bound query.\n\nThis return value is iterated upon by borrowck, hence the need to preserve\na deterministic iteration order.\n\nFixes https://github.com/rust-lang/rust/issues/98890\nAffects https://github.com/rust-lang/rust/issues/96655\n\nI don't know if this supersedes https://github.com/rust-lang/rust/pull/98924 or fixes an unrelated bug.\n\nr? `@michaelwoerister`\nThis may deserve a backport.", "tree": {"sha": "4598da76350d6a9eccff7b0002eb6082d827f5b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4598da76350d6a9eccff7b0002eb6082d827f5b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dcb616888aac50d55160b025266d555dad937d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dcb616888aac50d55160b025266d555dad937d9", "html_url": "https://github.com/rust-lang/rust/commit/3dcb616888aac50d55160b025266d555dad937d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dcb616888aac50d55160b025266d555dad937d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "049308cf8b48e9d67e54d6d0b01c10c79d1efc3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/049308cf8b48e9d67e54d6d0b01c10c79d1efc3a", "html_url": "https://github.com/rust-lang/rust/commit/049308cf8b48e9d67e54d6d0b01c10c79d1efc3a"}, {"sha": "8ff4115b5b24095d6abde141957b0c3659ff1d55", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff4115b5b24095d6abde141957b0c3659ff1d55", "html_url": "https://github.com/rust-lang/rust/commit/8ff4115b5b24095d6abde141957b0c3659ff1d55"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "661a9b1944c580646e22ffe79fbe650856d17b44", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dcb616888aac50d55160b025266d555dad937d9/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dcb616888aac50d55160b025266d555dad937d9/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=3dcb616888aac50d55160b025266d555dad937d9", "patch": "@@ -96,6 +96,7 @@ macro_rules! arena_types {\n             // (during lowering) and the `librustc_middle` arena (for decoding MIR)\n             [decode] asm_template: rustc_ast::InlineAsmTemplatePiece,\n             [decode] used_trait_imports: rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>,\n+            [decode] is_late_bound_map: rustc_data_structures::fx::FxIndexSet<rustc_hir::def_id::LocalDefId>,\n             [decode] impl_source: rustc_middle::traits::ImplSource<'tcx, ()>,\n \n             [] dep_kind: rustc_middle::dep_graph::DepKindStruct,"}, {"sha": "57c4f3f3ba3922fe7abcfcfe253f3a44b6ccbb48", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dcb616888aac50d55160b025266d555dad937d9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dcb616888aac50d55160b025266d555dad937d9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3dcb616888aac50d55160b025266d555dad937d9", "patch": "@@ -1573,7 +1573,7 @@ rustc_queries! {\n         Option<&'tcx FxHashMap<ItemLocalId, Region>> {\n         desc { \"looking up a named region\" }\n     }\n-    query is_late_bound_map(_: LocalDefId) -> Option<&'tcx FxHashSet<LocalDefId>> {\n+    query is_late_bound_map(_: LocalDefId) -> Option<&'tcx FxIndexSet<LocalDefId>> {\n         desc { \"testing if a region is late bound\" }\n     }\n     /// For a given item (like a struct), gets the default lifetimes to be used"}, {"sha": "557dbecfabe097bb3b00aa10e59571776b91bcb6", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dcb616888aac50d55160b025266d555dad937d9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dcb616888aac50d55160b025266d555dad937d9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=3dcb616888aac50d55160b025266d555dad937d9", "patch": "@@ -2539,12 +2539,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n /// \"Constrained\" basically means that it appears in any type but\n /// not amongst the inputs to a projection. In other words, `<&'a\n /// T as Trait<''b>>::Foo` does not constrain `'a` or `'b`.\n-fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxHashSet<LocalDefId>> {\n+fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<LocalDefId>> {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let decl = tcx.hir().fn_decl_by_hir_id(hir_id)?;\n     let generics = tcx.hir().get_generics(def_id)?;\n \n-    let mut late_bound = FxHashSet::default();\n+    let mut late_bound = FxIndexSet::default();\n \n     let mut constrained_by_input = ConstrainedCollector::default();\n     for arg_ty in decl.inputs {"}, {"sha": "90a0b93b99a13f1bb0a2cc4aec217385f30f1ce0", "filename": "src/test/incremental/async-lifetimes.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3dcb616888aac50d55160b025266d555dad937d9/src%2Ftest%2Fincremental%2Fasync-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dcb616888aac50d55160b025266d555dad937d9/src%2Ftest%2Fincremental%2Fasync-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fasync-lifetimes.rs?ref=3dcb616888aac50d55160b025266d555dad937d9", "patch": "@@ -0,0 +1,19 @@\n+// revisions: rpass1 rpass2\n+// edition:2021\n+\n+// See https://github.com/rust-lang/rust/issues/98890\n+\n+#![allow(unused)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    async fn f(&self, _: &&()) -> &() {\n+        &()\n+    }\n+}\n+\n+#[cfg(rpass2)]\n+enum Bar {}\n+\n+fn main() {}"}]}