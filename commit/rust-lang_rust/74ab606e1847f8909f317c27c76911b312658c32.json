{"sha": "74ab606e1847f8909f317c27c76911b312658c32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YWI2MDZlMTg0N2Y4OTA5ZjMxN2MyN2M3NjkxMWIzMTI2NThjMzI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-24T08:44:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-24T08:44:47Z"}, "message": "rustdoc: Prune undocumented consts", "tree": {"sha": "df084e6705ff9533a0133cae882182fdc3cfa061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df084e6705ff9533a0133cae882182fdc3cfa061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74ab606e1847f8909f317c27c76911b312658c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74ab606e1847f8909f317c27c76911b312658c32", "html_url": "https://github.com/rust-lang/rust/commit/74ab606e1847f8909f317c27c76911b312658c32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74ab606e1847f8909f317c27c76911b312658c32/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3be8e689da66e772a1fd5cbf749abb5280f89d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3be8e689da66e772a1fd5cbf749abb5280f89d2", "html_url": "https://github.com/rust-lang/rust/commit/e3be8e689da66e772a1fd5cbf749abb5280f89d2"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "85751d98a4b642619a44d01cbc0e05ffdd463d59", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ab606e1847f8909f317c27c76911b312658c32/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ab606e1847f8909f317c27c76911b312658c32/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=74ab606e1847f8909f317c27c76911b312658c32", "patch": "@@ -7,6 +7,7 @@ export default_seq_fold;\n export default_seq_fold_crate;\n export default_seq_fold_mod;\n export default_seq_fold_fn;\n+export default_seq_fold_const;\n export default_seq_fold_fnlist;\n \n enum fold<T> = t<T>;"}, {"sha": "d447d4e472d9ff30716e441cb1890b2bd41205fb", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/74ab606e1847f8909f317c27c76911b312658c32/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ab606e1847f8909f317c27c76911b312658c32/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=74ab606e1847f8909f317c27c76911b312658c32", "patch": "@@ -20,8 +20,10 @@ fn run(\n     let fold = fold::fold({\n         fold_mod: fold_mod,\n         fold_fn: fold_fn,\n+        fold_const: fold_const,\n         fold_modlist: fold_modlist,\n-        fold_fnlist: fold_fnlist\n+        fold_fnlist: fold_fnlist,\n+        fold_constlist: fold_constlist\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n@@ -109,7 +111,7 @@ fn fold_modlist(\n     list: doc::modlist\n ) -> doc::modlist {\n     doc::modlist(vec::filter_map(*list) {|doc|\n-        let doc = fold_mod(fold, doc);\n+        let doc = fold.fold_mod(fold, doc);\n         if fold.ctxt.have_docs {\n             some(doc)\n         } else {\n@@ -152,7 +154,7 @@ fn fold_fnlist(\n     list: doc::fnlist\n ) -> doc::fnlist {\n     doc::fnlist(vec::filter_map(*list) {|doc|\n-        let doc = fold_fn(fold, doc);\n+        let doc = fold.fold_fn(fold, doc);\n         if fold.ctxt.have_docs {\n             some(doc)\n         } else {\n@@ -169,3 +171,37 @@ fn should_elide_undocumented_fns() {\n     let doc = run(srv, doc);\n     assert vec::is_empty(*doc.topmod.fns);\n }\n+\n+fn fold_const(\n+    fold: fold::fold<ctxt>,\n+    doc: doc::constdoc\n+) -> doc::constdoc {\n+    let doc = fold::default_seq_fold_const(fold, doc);\n+    fold.ctxt.have_docs =\n+        doc.brief != none\n+        || doc.desc != none;\n+    ret doc;\n+}\n+\n+fn fold_constlist(\n+    fold: fold::fold<ctxt>,\n+    list: doc::constlist\n+) -> doc::constlist {\n+    doc::constlist(vec::filter_map(*list) {|doc|\n+        let doc = fold.fold_const(fold, doc);\n+        if fold.ctxt.have_docs {\n+            some(doc)\n+        } else {\n+            none\n+        }\n+    })\n+}\n+\n+#[test]\n+fn should_elide_undocumented_consts() {\n+    let source = \"const a: bool = true;\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::is_empty(*doc.topmod.consts);\n+}"}]}