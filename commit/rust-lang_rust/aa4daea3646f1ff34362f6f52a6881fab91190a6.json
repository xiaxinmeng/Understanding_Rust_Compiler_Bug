{"sha": "aa4daea3646f1ff34362f6f52a6881fab91190a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNGRhZWEzNjQ2ZjFmZjM0MzYyZjZmNTJhNjg4MWZhYjkxMTkwYTY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-08T23:48:10Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-12T13:52:06Z"}, "message": "Lint function with too many arguments", "tree": {"sha": "67724caf70929741db9800993cbea608f808a6f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67724caf70929741db9800993cbea608f808a6f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa4daea3646f1ff34362f6f52a6881fab91190a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4daea3646f1ff34362f6f52a6881fab91190a6", "html_url": "https://github.com/rust-lang/rust/commit/aa4daea3646f1ff34362f6f52a6881fab91190a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa4daea3646f1ff34362f6f52a6881fab91190a6/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e582a338068a840d0d5a9be6ae4b2b9c93c053", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e582a338068a840d0d5a9be6ae4b2b9c93c053", "html_url": "https://github.com/rust-lang/rust/commit/95e582a338068a840d0d5a9be6ae4b2b9c93c053"}], "stats": {"total": 116, "additions": 114, "deletions": 2}, "files": [{"sha": "93edf4a81faacc5b5d965d88ea95cd958821532b", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa4daea3646f1ff34362f6f52a6881fab91190a6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/aa4daea3646f1ff34362f6f52a6881fab91190a6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=aa4daea3646f1ff34362f6f52a6881fab91190a6", "patch": "@@ -14,7 +14,7 @@ Table of contents:\n * [License](#license)\n \n ##Lints\n-There are 135 lints included in this crate:\n+There are 136 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -130,6 +130,7 @@ name\n [suspicious_assignment_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting) | warn    | suspicious formatting of `*=`, `-=` or `!=`\n [suspicious_else_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_else_formatting)             | warn    | suspicious formatting of `else if`\n [temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                         | warn    | assignments to temporaries\n+[too_many_arguments](https://github.com/Manishearth/rust-clippy/wiki#too_many_arguments)                             | warn    | functions with too many arguments\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                                 | warn    | An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take references with `&`.\n [trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                       | warn    | finds trivial regular expressions in `Regex::new(_)` invocations\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                                   | warn    | usage of very complex types; recommends factoring out parts into `type` definitions"}, {"sha": "5ac5aae51a4082162bf46eeef5023a1be6a10257", "filename": "src/functions.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/aa4daea3646f1ff34362f6f52a6881fab91190a6/src%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4daea3646f1ff34362f6f52a6881fab91190a6/src%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffunctions.rs?ref=aa4daea3646f1ff34362f6f52a6881fab91190a6", "patch": "@@ -0,0 +1,75 @@\n+use rustc::lint::*;\n+use rustc_front::hir;\n+use rustc_front::intravisit;\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use utils::span_lint;\n+\n+/// **What it does:** Check for functions with too many parameters.\n+///\n+/// **Why is this bad?** Functions with lots of parameters are considered bad style and reduce\n+/// readability (\u201cwhat does the 5th parameter means?\u201d). Consider grouping some parameters into a\n+/// new type.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+///\n+/// ```\n+/// fn foo(x: u32, y: u32, name: &str, c: Color, w: f32, h: f32, a: f32, b: f32) { .. }\n+/// ```\n+declare_lint! {\n+    pub TOO_MANY_ARGUMENTS,\n+    Warn,\n+    \"functions with too many arguments\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct Functions {\n+    threshold: u64,\n+}\n+\n+impl Functions {\n+    pub fn new(threshold: u64) -> Functions {\n+        Functions {\n+            threshold: threshold\n+        }\n+    }\n+}\n+\n+impl LintPass for Functions {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TOO_MANY_ARGUMENTS)\n+    }\n+}\n+\n+impl LateLintPass for Functions {\n+    fn check_fn(&mut self, cx: &LateContext, _: intravisit::FnKind, decl: &hir::FnDecl, _: &hir::Block, span: Span, nodeid: ast::NodeId) {\n+        use rustc::front::map::Node::*;\n+\n+        if let Some(NodeItem(ref item)) = cx.tcx.map.find(cx.tcx.map.get_parent_node(nodeid)) {\n+            match item.node {\n+                hir::ItemImpl(_, _, _, Some(_), _, _) | hir::ItemDefaultImpl(..) => return,\n+                _ => (),\n+            }\n+        }\n+\n+        self.check_arg_number(cx, decl, span);\n+    }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n+        if let hir::MethodTraitItem(ref sig, _) = item.node {\n+            self.check_arg_number(cx, &sig.decl, item.span);\n+        }\n+    }\n+}\n+\n+impl Functions {\n+    fn check_arg_number(&self, cx: &LateContext, decl: &hir::FnDecl, span: Span) {\n+        let args = decl.inputs.len() as u64;\n+        if args > self.threshold {\n+            span_lint(cx, TOO_MANY_ARGUMENTS, span,\n+                      &format!(\"this function has to many arguments ({}/{})\", args, self.threshold));\n+        }\n+    }\n+}"}, {"sha": "d65294b56b88c2ae9840e26e96544fe6354b37dc", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa4daea3646f1ff34362f6f52a6881fab91190a6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4daea3646f1ff34362f6f52a6881fab91190a6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=aa4daea3646f1ff34362f6f52a6881fab91190a6", "patch": "@@ -63,6 +63,7 @@ pub mod escape;\n pub mod eta_reduction;\n pub mod format;\n pub mod formatting;\n+pub mod functions;\n pub mod identity_op;\n pub mod if_not_else;\n pub mod items_after_statements;\n@@ -211,6 +212,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box unused_label::UnusedLabel);\n     reg.register_late_lint_pass(box new_without_default::NewWithoutDefault);\n     reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(conf.blacklisted_names));\n+    reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold));\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         array_indexing::INDEXING_SLICING,\n@@ -263,6 +265,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         format::USELESS_FORMAT,\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n+        functions::TOO_MANY_ARGUMENTS,\n         identity_op::IDENTITY_OP,\n         if_not_else::IF_NOT_ELSE,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,"}, {"sha": "6636e30ab38ade8b5395151b6de6bcb4c932837a", "filename": "src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa4daea3646f1ff34362f6f52a6881fab91190a6/src%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4daea3646f1ff34362f6f52a6881fab91190a6/src%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fconf.rs?ref=aa4daea3646f1ff34362f6f52a6881fab91190a6", "patch": "@@ -150,7 +150,7 @@ define_Conf! {\n     /// Lint: CYCLOMATIC_COMPLEXITY. The maximum cyclomatic complexity a function can have\n     (\"cyclomatic-complexity-threshold\", cyclomatic_complexity_threshold, 25 => u64),\n     /// Lint: TOO_MANY_ARGUMENTS. The maximum number of argument a function or method can have\n-    (\"too-many-arguments-threshold\", too_many_arguments_threshold, 6 => u64),\n+    (\"too-many-arguments-threshold\", too_many_arguments_threshold, 7 => u64),\n     /// Lint: TYPE_COMPLEXITY. The maximum complexity a type can have\n     (\"type-complexity-threshold\", type_complexity_threshold, 250 => u64),\n }"}, {"sha": "d3d5eee335a067c4eb28cf469516978173e89ad9", "filename": "tests/compile-fail/functions.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/aa4daea3646f1ff34362f6f52a6881fab91190a6/tests%2Fcompile-fail%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4daea3646f1ff34362f6f52a6881fab91190a6/tests%2Fcompile-fail%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunctions.rs?ref=aa4daea3646f1ff34362f6f52a6881fab91190a6", "patch": "@@ -0,0 +1,33 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(clippy)]\n+#![allow(dead_code)]\n+\n+fn good(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool) {}\n+\n+fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {\n+    //~^ ERROR: this function has to many arguments (8/7)\n+}\n+\n+trait Foo {\n+    fn good(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool);\n+    fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ());\n+    //~^ ERROR: this function has to many arguments (8/7)\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn good_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool) {}\n+    fn bad_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n+    //~^ ERROR: this function has to many arguments (8/7)\n+}\n+\n+// ok, we don\u2019t want to warn implementations\n+impl Foo for Bar {\n+    fn good(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool) {}\n+    fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n+}\n+\n+fn main() {}"}]}