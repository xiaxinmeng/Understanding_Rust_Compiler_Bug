{"sha": "3c652032c0223de205c28e6e0ded117ca4e46e61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNjUyMDMyYzAyMjNkZTIwNWMyOGU2ZTBkZWQxMTdjYTRlNDZlNjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-12T09:51:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-12T09:51:03Z"}, "message": "be more clear which stack we are talking about", "tree": {"sha": "af88362081ae627ab00145c6fd7bb2d85ef8b465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af88362081ae627ab00145c6fd7bb2d85ef8b465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c652032c0223de205c28e6e0ded117ca4e46e61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c652032c0223de205c28e6e0ded117ca4e46e61", "html_url": "https://github.com/rust-lang/rust/commit/3c652032c0223de205c28e6e0ded117ca4e46e61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c652032c0223de205c28e6e0ded117ca4e46e61/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "258cc493ef3951ed5451e75110f6ea27c04f170f", "url": "https://api.github.com/repos/rust-lang/rust/commits/258cc493ef3951ed5451e75110f6ea27c04f170f", "html_url": "https://github.com/rust-lang/rust/commit/258cc493ef3951ed5451e75110f6ea27c04f170f"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "be4a607961f3e5a8b493ac7ea1d983e6447a5805", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -221,7 +221,7 @@ impl<'tcx> Stack {\n             }\n         }\n         // If we got here, we did not find our item.  We have to error to satisfy U3.\n-        Err(format!(\"Borrow being dereferenced ({:?}) does not exist on the stack\", bor))\n+        Err(format!(\"Borrow being dereferenced ({:?}) does not exist on the borrow stack\", bor))\n     }\n \n     /// Perform an actual memory access using `bor`.  We do not know any types here\n@@ -294,7 +294,7 @@ impl<'tcx> Stack {\n         }\n         // If we got here, we did not find our item.\n         err!(MachineError(format!(\n-            \"Borrow being accessed ({:?}) does not exist on the stack\",\n+            \"Borrow being accessed ({:?}) does not exist on the borrow stack\",\n             bor\n         )))\n     }"}, {"sha": "30f5921202c3ffb02b76fc126ee06bf03fcf21da", "filename": "tests/compile-fail/stacked_borrows/alias_through_mutation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     retarget(&mut target_alias, target);\n     // now `target_alias` points to the same thing as `target`\n     *target = 13;\n-    let _val = *target_alias; //~ ERROR does not exist on the stack\n+    let _val = *target_alias; //~ ERROR does not exist on the borrow stack\n }"}, {"sha": "e3c59d1566142f6255dea8ea5addf2316564ea82", "filename": "tests/compile-fail/stacked_borrows/aliasing_mut3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -1,6 +1,6 @@\n use std::mem;\n \n-pub fn safe(_x: &mut i32, _y: &i32) {} //~ ERROR does not exist on the stack\n+pub fn safe(_x: &mut i32, _y: &i32) {} //~ ERROR does not exist on the borrow stack\n \n fn main() {\n     let mut x = 0;"}, {"sha": "481915faed0401260af9e9a76a0004b1bbc250ac", "filename": "tests/compile-fail/stacked_borrows/box_exclusive_violation1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -8,7 +8,7 @@ fn demo_mut_advanced_unique(mut our: Box<i32>) -> i32 {\n   unknown_code_2();\n \n   // We know this will return 5\n-  *our //~ ERROR does not exist on the stack\n+  *our //~ ERROR does not exist on the borrow stack\n }\n \n // Now comes the evil context"}, {"sha": "98d4e6f22965dd24353bafe66f7e9ac430cbd394", "filename": "tests/compile-fail/stacked_borrows/buggy_as_mut_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -13,5 +13,5 @@ fn main() {\n     let v1 = safe::as_mut_slice(&v);\n     let _v2 = safe::as_mut_slice(&v);\n     v1[1] = 5;\n-    //~^ ERROR does not exist on the stack\n+    //~^ ERROR does not exist on the borrow stack\n }"}, {"sha": "42f345f55144cd8a718d71fc860892d381d6397c", "filename": "tests/compile-fail/stacked_borrows/buggy_split_at_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -9,7 +9,7 @@ mod safe {\n             assert!(mid <= len);\n \n             (from_raw_parts_mut(ptr, len - mid), // BUG: should be \"mid\" instead of \"len - mid\"\n-            //~^ ERROR does not exist on the stack\n+            //~^ ERROR does not exist on the borrow stack\n             from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n         }\n     }"}, {"sha": "0181f739a899d5d6478c371767ee236e47534553", "filename": "tests/compile-fail/stacked_borrows/illegal_read1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still okay...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n-    //~^ ERROR: does not exist on the stack\n+    //~^ ERROR: does not exist on the borrow stack\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "b55fe1c6c88a443b113fd3ff9f117ba0e86f543e", "filename": "tests/compile-fail/stacked_borrows/illegal_read2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still okay...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n-    //~^ ERROR: does not exist on the stack\n+    //~^ ERROR: does not exist on the borrow stack\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "9da4ca09606e73e3347532871688c10cb2aa9632", "filename": "tests/compile-fail/stacked_borrows/illegal_read3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let xref2 = &mut *xref1; // derived from xref1, so using raw is still okay...\n     callee(xref1_sneaky);\n     let _val = *xref2; // ...but any use of it will invalidate our ref.\n-    //~^ ERROR: does not exist on the stack\n+    //~^ ERROR: does not exist on the borrow stack\n }\n \n fn callee(xref1: usize) {"}, {"sha": "bb889de8f839eb7fdc07b16e369a50a4f3291dc5", "filename": "tests/compile-fail/stacked_borrows/illegal_read4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let xraw = xref1 as *mut _;\n     let xref2 = unsafe { &mut *xraw };\n     let _val = unsafe { *xraw }; // use the raw again, this invalidates xref2 *even* with the special read except for uniq refs\n-    let _illegal = *xref2; //~ ERROR does not exist on the stack\n+    let _illegal = *xref2; //~ ERROR does not exist on the borrow stack\n }"}, {"sha": "5f800e754a5d02749346efbd0f0e5d9302cd6aeb", "filename": "tests/compile-fail/stacked_borrows/illegal_read5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     let _val = *xref; // we can even still use our mutable reference\n     mem::forget(unsafe { ptr::read(xshr) }); // but after reading through the shared ref\n     let _val = *xref; // the mutable one is dead and gone\n-    //~^ ERROR does not exist on the stack\n+    //~^ ERROR does not exist on the borrow stack\n }"}, {"sha": "affa21c7625ead98ae207921dc55d799ca4545f1", "filename": "tests/compile-fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     let target2 = target as *mut _;\n     drop(&mut *target); // reborrow\n     // Now make sure our ref is still the only one.\n-    unsafe { *target2 = 13; } //~ ERROR does not exist on the stack\n+    unsafe { *target2 = 13; } //~ ERROR does not exist on the borrow stack\n     let _val = *target;\n }"}, {"sha": "dc4edcc3a5b4496c5e0424ba68905379f2f52368", "filename": "tests/compile-fail/stacked_borrows/illegal_write3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     // Make sure raw ptr with raw tag cannot mutate frozen location without breaking the shared ref.\n     let r#ref = &target; // freeze\n     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n-    unsafe { *ptr = 42; } //~ ERROR does not exist on the stack\n+    unsafe { *ptr = 42; } //~ ERROR does not exist on the borrow stack\n     let _val = *r#ref;\n }"}, {"sha": "af57221260ce893750beecef0161092edc22676f", "filename": "tests/compile-fail/stacked_borrows/illegal_write5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still okay...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n-    //~^ ERROR: does not exist on the stack\n+    //~^ ERROR: does not exist on the borrow stack\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "f2e4b36f85cc242234914854df72397a0b8eedea", "filename": "tests/compile-fail/stacked_borrows/load_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let xref = unsafe { &mut *xraw };\n     let xref_in_mem = Box::new(xref);\n     let _val = unsafe { *xraw }; // invalidate xref\n-    let _val = *xref_in_mem; //~ ERROR does not exist on the stack\n+    let _val = *xref_in_mem; //~ ERROR does not exist on the borrow stack\n }"}, {"sha": "ba36e43e0c5d4c39ab960bdc0bc0c9d2f2ce8aa2", "filename": "tests/compile-fail/stacked_borrows/outdated_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let y: *const i32 = &x;\n     x = 1; // this invalidates y by reactivating the lowermost uniq borrow for this local\n \n-    assert_eq!(unsafe { *y }, 1); //~ ERROR does not exist on the stack\n+    assert_eq!(unsafe { *y }, 1); //~ ERROR does not exist on the borrow stack\n \n     assert_eq!(x, 1);\n }"}, {"sha": "b239237f019928e4a22209fba51a97859f143128", "filename": "tests/compile-fail/stacked_borrows/pass_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let xraw = x as *mut _;\n     let xref = unsafe { &mut *xraw };\n     let _val = unsafe { *xraw }; // invalidate xref\n-    foo(xref); //~ ERROR does not exist on the stack\n+    foo(xref); //~ ERROR does not exist on the borrow stack\n }"}, {"sha": "a8207d58e99b23dccaf4a144175b61c8c96ab8d4", "filename": "tests/compile-fail/stacked_borrows/pointer_smuggling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -8,7 +8,7 @@ fn fun1(x: &mut u8) {\n \n fn fun2() {\n     // Now we use a pointer we are not allowed to use\n-    let _x = unsafe { *PTR }; //~ ERROR does not exist on the stack\n+    let _x = unsafe { *PTR }; //~ ERROR does not exist on the borrow stack\n }\n \n fn main() {"}, {"sha": "31f8a4e33afd906a77efb2d6ee58622d374bdc59", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> &mut i32 {\n     let xraw = x as *mut (i32, i32);\n     let ret = unsafe { &mut (*xraw).1 };\n     let _val = unsafe { *xraw }; // invalidate xref\n-    ret //~ ERROR does not exist on the stack\n+    ret //~ ERROR does not exist on the borrow stack\n }\n \n fn main() {"}, {"sha": "750d507d6f660150f7ef96d20cbd2dea93768e59", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&mut i32> {\n     let xraw = x as *mut (i32, i32);\n     let ret = Some(unsafe { &mut (*xraw).1 });\n     let _val = unsafe { *xraw }; // invalidate xref\n-    ret //~ ERROR does not exist on the stack\n+    ret //~ ERROR does not exist on the borrow stack\n }\n \n fn main() {"}, {"sha": "bb712e9e486cd6d977edaa4cafe5b5e18c2f24d3", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> (&mut i32,) {\n     let xraw = x as *mut (i32, i32);\n     let ret = (unsafe { &mut (*xraw).1 },);\n     let _val = unsafe { *xraw }; // invalidate xref\n-    ret //~ ERROR does not exist on the stack\n+    ret //~ ERROR does not exist on the borrow stack\n }\n \n fn main() {"}, {"sha": "45ada88977788968f3f15be18ed4cae423f02ae1", "filename": "tests/compile-fail/stacked_borrows/transmute-is-no-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let _raw: *mut i32 = unsafe { mem::transmute(&mut x[0]) };\n     // `raw` still carries a tag, so we get another pointer to the same location that does not carry a tag\n     let raw = (&mut x[1] as *mut i32).wrapping_offset(-1);\n-    unsafe { *raw = 13; } //~ ERROR does not exist on the stack\n+    unsafe { *raw = 13; } //~ ERROR does not exist on the borrow stack\n }"}, {"sha": "1db14ea7eda545e6f0bc72162fb05e5516a07452", "filename": "tests/compile-fail/stacked_borrows/unescaped_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Funescaped_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c652032c0223de205c28e6e0ded117ca4e46e61/tests%2Fcompile-fail%2Fstacked_borrows%2Funescaped_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Funescaped_local.rs?ref=3c652032c0223de205c28e6e0ded117ca4e46e61", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let mut x = 42;\n     let raw = &mut x as *mut i32 as usize as *mut i32;\n     let _ptr = &mut x;\n-    unsafe { *raw = 13; } //~ ERROR does not exist on the stack\n+    unsafe { *raw = 13; } //~ ERROR does not exist on the borrow stack\n }"}]}