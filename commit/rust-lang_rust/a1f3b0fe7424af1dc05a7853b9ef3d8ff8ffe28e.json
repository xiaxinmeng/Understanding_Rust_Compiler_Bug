{"sha": "a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZjNiMGZlNzQyNGFmMWRjMDVhNzg1M2I5ZWYzZDhmZjhmZmUyOGU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-01T08:12:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-01T08:12:55Z"}, "message": "Rollup merge of #54308 - dsciarra:issue-22692, r=estebank\n\nBetter user experience when attempting to call associated functions with dot notation\n\nCloses #22692", "tree": {"sha": "3c041663e81617dcf7ea8242d6001ff9672ecb0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c041663e81617dcf7ea8242d6001ff9672ecb0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbsdcHCRBK7hj4Ov3rIwAAdHIIADF9wtKHZ/j6ty4veGF3Kxk1\nSI93CbSCQ2a2w5j2m1uigPxYmqtDcMHxG6q0sPulYihAIrr68QGm6DXVrMF4S8jr\nvU0QSbuVbYtylanGsDe4wPeGfImrKPrqF6AhwWwsqDR550fKGAvysGueutQhkyII\nI7P5IcywmIQj8rNLGgnZujvEgkdJrj6rgnbWLEJAO2s+8jD958S/hIEge8uAwdr4\nJLYkuqQyrD+3vk8SewjsGtlVOH0BcPFgXMNvNW9JqW1VXtGmR+F/Z5qUC+riAZ9a\neDR4R8KJx3soH21oovi/H5Ot96Drk0sMm3/XPh6yoaKKYiTo079t0t/bIjpxBGc=\n=jS6r\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c041663e81617dcf7ea8242d6001ff9672ecb0c\nparent 818a05d6e3243cd3ea9dcc655db5c9882f850cb7\nparent 0390736dce86cb97880e3eb144de9ec5759bec14\nauthor kennytm <kennytm@gmail.com> 1538381575 +0800\ncommitter GitHub <noreply@github.com> 1538381575 +0800\n\nRollup merge of #54308 - dsciarra:issue-22692, r=estebank\n\nBetter user experience when attempting to call associated functions with dot notation\n\nCloses #22692\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e", "html_url": "https://github.com/rust-lang/rust/commit/a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "818a05d6e3243cd3ea9dcc655db5c9882f850cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/818a05d6e3243cd3ea9dcc655db5c9882f850cb7", "html_url": "https://github.com/rust-lang/rust/commit/818a05d6e3243cd3ea9dcc655db5c9882f850cb7"}, {"sha": "0390736dce86cb97880e3eb144de9ec5759bec14", "url": "https://api.github.com/repos/rust-lang/rust/commits/0390736dce86cb97880e3eb144de9ec5759bec14", "html_url": "https://github.com/rust-lang/rust/commit/0390736dce86cb97880e3eb144de9ec5759bec14"}], "stats": {"total": 83, "additions": 69, "deletions": 14}, "files": [{"sha": "15bf837b526b1b2e8fdc436346f2884cbbff5e0c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e", "patch": "@@ -3147,11 +3147,11 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                             // parser issue where a struct literal is being used on an expression\n                             // where a brace being opened means a block is being started. Look\n                             // ahead for the next text to see if `span` is followed by a `{`.\n-                            let cm = this.session.source_map();\n+                            let sm = this.session.source_map();\n                             let mut sp = span;\n                             loop {\n-                                sp = cm.next_point(sp);\n-                                match cm.span_to_snippet(sp) {\n+                                sp = sm.next_point(sp);\n+                                match sm.span_to_snippet(sp) {\n                                     Ok(ref snippet) => {\n                                         if snippet.chars().any(|c| { !c.is_whitespace() }) {\n                                             break;\n@@ -3160,20 +3160,51 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                     _ => break,\n                                 }\n                             }\n-                            let followed_by_brace = match cm.span_to_snippet(sp) {\n+                            let followed_by_brace = match sm.span_to_snippet(sp) {\n                                 Ok(ref snippet) if snippet == \"{\" => true,\n                                 _ => false,\n                             };\n-                            if let (PathSource::Expr(None), true) = (source, followed_by_brace) {\n-                                err.span_label(\n-                                    span,\n-                                    format!(\"did you mean `({} {{ /* fields */ }})`?\", path_str),\n-                                );\n-                            } else {\n-                                err.span_label(\n-                                    span,\n-                                    format!(\"did you mean `{} {{ /* fields */ }}`?\", path_str),\n-                                );\n+                            match source {\n+                                PathSource::Expr(Some(parent)) => {\n+                                    match parent.node {\n+                                        ExprKind::MethodCall(ref path_assignment, _)  => {\n+                                            err.span_suggestion_with_applicability(\n+                                                sm.start_point(parent.span)\n+                                                  .to(path_assignment.ident.span),\n+                                                \"use `::` to access an associated function\",\n+                                                format!(\"{}::{}\",\n+                                                        path_str,\n+                                                        path_assignment.ident),\n+                                                Applicability::MaybeIncorrect\n+                                            );\n+                                            return (err, candidates);\n+                                        },\n+                                        _ => {\n+                                            err.span_label(\n+                                                span,\n+                                                format!(\"did you mean `{} {{ /* fields */ }}`?\",\n+                                                        path_str),\n+                                            );\n+                                            return (err, candidates);\n+                                        },\n+                                    }\n+                                },\n+                                PathSource::Expr(None) if followed_by_brace == true => {\n+                                    err.span_label(\n+                                        span,\n+                                        format!(\"did you mean `({} {{ /* fields */ }})`?\",\n+                                                path_str),\n+                                    );\n+                                    return (err, candidates);\n+                                },\n+                                _ => {\n+                                    err.span_label(\n+                                        span,\n+                                        format!(\"did you mean `{} {{ /* fields */ }}`?\",\n+                                                path_str),\n+                                    );\n+                                    return (err, candidates);\n+                                },\n                             }\n                         }\n                         return (err, candidates);"}, {"sha": "06648c599534f60ba1a85145e8107c982ca44198", "filename": "src/test/ui/resolve/issue-22692.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs?ref=a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _ = String.new();\n+}"}, {"sha": "ecdd4ff855fb930c6abbc200dfa851bed9ad2040", "filename": "src/test/ui/resolve/issue-22692.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr?ref=a1f3b0fe7424af1dc05a7853b9ef3d8ff8ffe28e", "patch": "@@ -0,0 +1,11 @@\n+error[E0423]: expected value, found struct `String`\n+  --> $DIR/issue-22692.rs:12:13\n+   |\n+LL |     let _ = String.new();\n+   |             ^^^^^^----\n+   |             |\n+   |             help: use `::` to access an associated function: `String::new`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0423`."}]}