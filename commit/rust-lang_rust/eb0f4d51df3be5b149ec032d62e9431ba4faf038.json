{"sha": "eb0f4d51df3be5b149ec032d62e9431ba4faf038", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMGY0ZDUxZGYzYmU1YjE0OWVjMDMyZDYyZTk0MzFiYTRmYWYwMzg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-22T21:53:01Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-27T23:28:20Z"}, "message": "Tweak output for mismatched impl item\n\nDetect type parameter that might require lifetime constraint.\nDo not name `ReVar`s in expected/found output.\nReword text suggesting to check the lifetimes.", "tree": {"sha": "6ba42e17336319c88ee43226f7bf478424e63a92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ba42e17336319c88ee43226f7bf478424e63a92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb0f4d51df3be5b149ec032d62e9431ba4faf038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0f4d51df3be5b149ec032d62e9431ba4faf038", "html_url": "https://github.com/rust-lang/rust/commit/eb0f4d51df3be5b149ec032d62e9431ba4faf038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb0f4d51df3be5b149ec032d62e9431ba4faf038/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba22205a48f3c4232a899effc47fa1925ed9900", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba22205a48f3c4232a899effc47fa1925ed9900", "html_url": "https://github.com/rust-lang/rust/commit/5ba22205a48f3c4232a899effc47fa1925ed9900"}], "stats": {"total": 182, "additions": 126, "deletions": 56}, "files": [{"sha": "ae9019828170f80ebfcc389c34cecb9ada0c2596", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -993,10 +993,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             s: &mut DiagnosticStyledString,\n         ) {\n             let mut r = region.to_string();\n-            if let ty::RegionKind::ReVar(var) = region {\n-                // Show these named, not as `'_` or elide them in \"expected/found\" notes.\n-                r = format!(\"'z{} \", var.index());\n-            } else if r == \"'_\" {\n+            if r == \"'_\" {\n                 r.clear();\n             } else {\n                 r.push(' ');"}, {"sha": "5aa55d253aa1eb024f6622e600de8705ee398ea8", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -1,5 +1,6 @@\n //! Error Reporting for `impl` items that do not match the obligations from their `trait`.\n \n+use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n@@ -40,7 +41,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                                 var_origin.span(),\n                                 sub_expected_found.expected,\n                                 sub_expected_found.found,\n-                                self.tcx().def_span(*trait_item_def_id),\n+                                *trait_item_def_id,\n                             );\n                             return Some(ErrorReported);\n                         }\n@@ -51,23 +52,56 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         None\n     }\n \n-    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>, impl_sp: Span) {\n+    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>, trait_def_id: DefId) {\n+        let tcx = self.tcx();\n+        let trait_sp = self.tcx().def_span(trait_def_id);\n         let mut err = self\n             .tcx()\n             .sess\n             .struct_span_err(sp, \"`impl` item signature doesn't match `trait` item signature\");\n         err.span_label(sp, &format!(\"found {:?}\", found));\n-        err.span_label(impl_sp, &format!(\"expected {:?}\", expected));\n+        err.span_label(trait_sp, &format!(\"expected {:?}\", expected));\n+        let trait_fn_sig = tcx.fn_sig(trait_def_id);\n+\n+        struct AssocTypeFinder(FxHashSet<ty::ParamTy>);\n+        impl<'tcx> ty::fold::TypeVisitor<'tcx> for AssocTypeFinder {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n+                debug!(\"assoc type finder ty {:?} {:?}\", ty, ty.kind);\n+                match ty.kind {\n+                    ty::Param(param) => {\n+                        self.0.insert(param);\n+                    }\n+                    _ => {}\n+                }\n+                ty.super_visit_with(self)\n+            }\n+        }\n+        let mut visitor = AssocTypeFinder(FxHashSet::default());\n+        trait_fn_sig.output().visit_with(&mut visitor);\n+\n+        if let Some(id) = tcx.hir().as_local_hir_id(trait_def_id) {\n+            let parent_id = tcx.hir().get_parent_item(id);\n+            let trait_item = tcx.hir().expect_item(parent_id);\n+            if let hir::ItemKind::Trait(_, _, generics, _, _) = &trait_item.kind {\n+                for param_ty in visitor.0 {\n+                    if let Some(generic) = generics.get_named(param_ty.name) {\n+                        err.span_label(generic.span, &format!(\n+                            \"in order for `impl` items to be able to implement the method, this \\\n+                             type parameter might need a lifetime restriction like `{}: 'a`\",\n+                            param_ty.name,\n+                        ));\n+                    }\n+                }\n+            }\n+        }\n \n         struct EarlyBoundRegionHighlighter(FxHashSet<DefId>);\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for EarlyBoundRegionHighlighter {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n-                debug!(\"LateBoundRegionNameCollector visit_region {:?}\", r);\n                 match *r {\n                     ty::ReFree(free) => {\n                         self.0.insert(free.scope);\n                     }\n-\n                     ty::ReEarlyBound(bound) => {\n                         self.0.insert(bound.def_id);\n                     }\n@@ -94,12 +128,11 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n         if note {\n             err.note(\n-                \"the lifetime requirements from the `trait` could not be fulfilled by the \\\n-                      `impl`\",\n+                \"the lifetime requirements from the `trait` could not be fulfilled by the `impl`\",\n             );\n             err.help(\n-                \"consider adding a named lifetime to the `trait` that constrains the item's \\\n-                      `self` argument, its inputs and its output with it\",\n+                \"verify the lifetime relationships in the `trait` and `impl` between the \\\n+                 `self` argument, the other inputs and its output\",\n             );\n         }\n         err.emit();"}, {"sha": "43f0b55856d3c6eba5908cd584b83d67297973bc", "filename": "src/test/ui/coercion/coerce-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let x = 0;\n     f(&x);\n     //~^ ERROR mismatched types\n-    //~| expected mutable reference `&'z1 mut i32`\n-    //~| found reference `&'z2 {integer}`\n+    //~| expected mutable reference `&mut i32`\n+    //~| found reference `&{integer}`\n     //~| types differ in mutability\n }"}, {"sha": "2601ca5e91e5b4253a85258d7998dced020b674f", "filename": "src/test/ui/coercion/coerce-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     f(&x);\n    |       ^^ types differ in mutability\n    |\n-   = note: expected mutable reference `&'z1 mut i32`\n-                      found reference `&'z2 {integer}`\n+   = note: expected mutable reference `&mut i32`\n+                      found reference `&{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "f1f8a663f21209f45f803517c1560da72861238c", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -11,7 +11,7 @@ LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n    |        expected type parameter\n    |\n    = note: expected fn pointer `fn(&E, F) -> F`\n-              found fn pointer `fn(&'z0 E, G) -> G`\n+              found fn pointer `fn(&E, G) -> G`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "328e98657effb179aa1f90cc61ec76274c533b00", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -7,7 +7,7 @@ LL |     let _: for<'b> fn(&'b u32) = foo();\n    |            expected due to this\n    |\n    = note: expected fn pointer `for<'b> fn(&'b u32)`\n-              found fn pointer `fn(&'z0 u32)`\n+              found fn pointer `fn(&u32)`\n \n error: aborting due to previous error\n "}, {"sha": "638a0093fb21d1df5a86e4b97b741786517c2873", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -10,7 +10,7 @@ LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n    |            expected type parameter\n    |\n    = note: expected fn pointer `fn(&(), &B, &impl Debug)`\n-              found fn pointer `fn(&'z0 (), &impl Debug, &B)`\n+              found fn pointer `fn(&(), &impl Debug, &B)`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "748bc639a03c2af16b6d99248ca5490321025604", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -5,7 +5,7 @@ LL |    fn fmt(&self, x: &str) -> () { }\n    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n    |\n    = note: expected fn pointer `fn(&MyType, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n-              found fn pointer `fn(&'z0 MyType, &str)`\n+              found fn pointer `fn(&MyType, &str)`\n \n error[E0050]: method `fmt` has 1 parameter but the declaration in trait `std::fmt::Display::fmt` has 2\n   --> $DIR/trait_type.rs:12:11"}, {"sha": "d8a2fa14333eaa1e2e2e5b3be63a5e6ee7021f6b", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -10,9 +10,9 @@ LL |     fn deref(&self) -> &Self::Target;\n    |     --------------------------------- expected fn(&Struct) -> &(dyn Trait + 'static)\n    |\n    = note: expected `fn(&Struct) -> &(dyn Trait + 'static)`\n-              found `fn(&'z0 Struct) -> &dyn Trait`\n+              found `fn(&Struct) -> &dyn Trait`\n    = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n-   = help: consider adding a named lifetime to the `trait` that constrains the item's `self` argument, its inputs and its output with it\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error\n "}, {"sha": "88edf10a66f0ce6186fc3d3ac8eabd9ba1444c6e", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -9,6 +9,8 @@ LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n    |\n    = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n               found `fn(&i32, &u32, &u32) -> &u32`\n+   = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error\n "}, {"sha": "dcdc6d330c0e73f04732161da71b535a3bac6a82", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -8,9 +8,9 @@ LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &u32, &u32) -> &u32\n    |\n    = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n-              found `fn(&'z0 i32, &'z1 u32, &'z2 u32) -> &'z2 u32`\n+              found `fn(&i32, &u32, &u32) -> &u32`\n    = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n-   = help: consider adding a named lifetime to the `trait` that constrains the item's `self` argument, its inputs and its output with it\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error[E0623]: lifetime mismatch\n   --> $DIR/mismatched_trait_impl.rs:10:9"}, {"sha": "7631831a81a5b2787be1811730173a858a65e188", "filename": "src/test/ui/issues/issue-13033.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -8,7 +8,7 @@ impl Foo for Baz {\n     fn bar(&mut self, other: &dyn Foo) {}\n     //~^ ERROR method `bar` has an incompatible type for trait\n     //~| expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n-    //~| found fn pointer `fn(&'z0 mut Baz, &dyn Foo)`\n+    //~| found fn pointer `fn(&mut Baz, &dyn Foo)`\n }\n \n fn main() {}"}, {"sha": "a8473c8a5241327d8e05636cec816261c4ce6e6e", "filename": "src/test/ui/issues/issue-13033.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -8,7 +8,7 @@ LL |     fn bar(&mut self, other: &dyn Foo) {}\n    |                              ^^^^^^^^ types differ in mutability\n    |\n    = note: expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n-              found fn pointer `fn(&'z0 mut Baz, &dyn Foo)`\n+              found fn pointer `fn(&mut Baz, &dyn Foo)`\n help: consider change the type to match the mutability in trait\n    |\n LL |     fn bar(&mut self, other: &mut dyn Foo) {}"}, {"sha": "4f658330758141f7b842dd7fd1f9c8037267c4b1", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -27,7 +27,7 @@ note: ...so that the types are compatible\n LL |         self.a();\n    |              ^\n    = note: expected `&'a Self`\n-              found `&'z0 Self`\n+              found `&Self`\n \n error: aborting due to previous error\n "}, {"sha": "31788cfa61c4cf262ebb3f3628363134e65bb503", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -28,7 +28,7 @@ note: ...so that the types are compatible\n LL |         self.foo();\n    |              ^^^\n    = note: expected `&'a Self`\n-              found `&'z0 Self`\n+              found `&Self`\n \n error: aborting due to previous error\n "}, {"sha": "133dbc554c089c9ec0f1bfdc7b7b14d2f6874bbe", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -7,7 +7,7 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n-              found fn pointer `extern \"rust-call\" fn(&'z0 Foo, (T,))`\n+              found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n@@ -20,7 +20,7 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n-              found fn pointer `extern \"rust-call\" fn(&'z0 mut Foo, (T,))`\n+              found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "ace3e014647c9d9421869ba9a8d89bef589984de", "filename": "src/test/ui/issues/issue-21332.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -5,7 +5,7 @@ LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n    = note: expected fn pointer `fn(&mut S) -> std::option::Option<i32>`\n-              found fn pointer `fn(&'z0 mut S) -> std::result::Result<i32, i32>`\n+              found fn pointer `fn(&mut S) -> std::result::Result<i32, i32>`\n \n error: aborting due to previous error\n "}, {"sha": "fa2ea83deefb72198ffa0ede57bc78ddc0b98723", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -8,9 +8,9 @@ LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &i32) -> &i32\n    |\n    = note: expected `fn(&i32, &'a i32) -> &'a i32`\n-              found `fn(&'z0 i32, &'z0 i32) -> &'z0 i32`\n+              found `fn(&i32, &i32) -> &i32`\n    = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n-   = help: consider adding a named lifetime to the `trait` that constrains the item's `self` argument, its inputs and its output with it\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error\n "}, {"sha": "fef83e6bbe2b6acd19408ba1bbe1317cee04ba4d", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -20,7 +20,7 @@ LL |     fn bar(&mut self) { }\n    |            ^^^^^^^^^ types differ in mutability\n    |\n    = note: expected fn pointer `fn(&Bar)`\n-              found fn pointer `fn(&'z0 mut Bar)`\n+              found fn pointer `fn(&mut Bar)`\n help: consider change the type to match the mutability in trait\n    |\n LL |     fn bar(&self) { }"}, {"sha": "b20fddb05acf1f5b81879a178095f60b2a38b4bb", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -20,7 +20,7 @@ LL |     fn bar(&mut self, bar: &Bar) { }\n    |                            ^^^^ types differ in mutability\n    |\n    = note: expected fn pointer `fn(&mut Bar, &mut Bar)`\n-              found fn pointer `fn(&'z0 mut Bar, &'z1 Bar)`\n+              found fn pointer `fn(&mut Bar, &Bar)`\n help: consider change the type to match the mutability in trait\n    |\n LL |     fn bar(&mut self, bar: &mut Bar) { }"}, {"sha": "3317aae83bb08a2e621e552d0d573b0c0e9dcdb0", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -16,7 +16,7 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: b }\n    |                ^\n-   = note: expected `std::boxed::Box<std::boxed::Box<&'z0 isize>>`\n+   = note: expected `std::boxed::Box<std::boxed::Box<&isize>>`\n               found `std::boxed::Box<std::boxed::Box<&isize>>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 15:6...\n   --> $DIR/type-alias-free-regions.rs:15:6\n@@ -49,7 +49,7 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: Box::new(b.0) }\n    |                         ^^^\n-   = note: expected `std::boxed::Box<&'z1 isize>`\n+   = note: expected `std::boxed::Box<&isize>`\n               found `std::boxed::Box<&isize>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 25:6...\n   --> $DIR/type-alias-free-regions.rs:25:6"}, {"sha": "27704b3e0a8c7421414764b1fb62e28d74f11b33", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -5,7 +5,7 @@ LL |     want_F(bar);\n    |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'cx S`\n-                 found fn item `for<'a> fn(&'a S) -> &'z2 S {bar::<'_>}`\n+                 found fn item `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n \n error[E0308]: mismatched types\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:12"}, {"sha": "069b897603cb916ac32b458f3fae5ed10e9fcebd", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -39,7 +39,7 @@ note: ...so that the expression is assignable\n    |\n LL |     Box::new(v)\n    |              ^\n-   = note: expected `&'z1 [u8]`\n+   = note: expected `&[u8]`\n               found `&'a [u8]`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 25:9...\n   --> $DIR/region-object-lifetime-in-coercion.rs:25:9"}, {"sha": "a8a7e97e6acf66a11660662851060962ff03557b", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -5,7 +5,7 @@ LL |     want_F(bar);\n    |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'cx S`\n-                 found fn item `for<'a> fn(&'a S) -> &'z2 S {bar::<'_>}`\n+                 found fn item `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n \n error: aborting due to previous error\n "}, {"sha": "9e405d83140d8d2b66f18d8ae9828f179d6ee787", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -40,7 +40,7 @@ LL | |         return z;\n LL | |     }));\n    | |_____^\n    = note: expected `&isize`\n-              found `&'z13 isize`\n+              found `&isize`\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n   --> $DIR/regions-nested-fns.rs:14:27"}, {"sha": "2c4769d8e37516e996192a5141f9e8eabf65b25c", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -14,7 +14,7 @@ note: ...so that the expression is assignable\n    |\n LL |     with(|o| o)\n    |              ^\n-   = note: expected `&'z0 isize`\n+   = note: expected `&isize`\n               found `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 9:14...\n   --> $DIR/regions-ret-borrowed-1.rs:9:14"}, {"sha": "da560107cea997ef81166664786b9ba0b26ddb3c", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -14,7 +14,7 @@ note: ...so that the expression is assignable\n    |\n LL |     with(|o| o)\n    |              ^\n-   = note: expected `&'z0 isize`\n+   = note: expected `&isize`\n               found `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 12:14...\n   --> $DIR/regions-ret-borrowed.rs:12:14"}, {"sha": "60ac7c09f04145ec4784f7b7a75d4509941a1940", "filename": "src/test/ui/regions/regions-trait-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -5,7 +5,7 @@ LL |     fn get_ctxt(&self) -> &'a Ctxt {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&HasCtxt<'a>) -> &Ctxt`\n-              found fn pointer `fn(&'z0 HasCtxt<'a>) -> &'a Ctxt`\n+              found fn pointer `fn(&HasCtxt<'a>) -> &'a Ctxt`\n note: the lifetime `'a` as defined on the impl at 12:6...\n   --> $DIR/regions-trait-1.rs:12:6\n    |"}, {"sha": "7478b53bd3ccc02c7097f35f8aef4bad0918e205", "filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -42,7 +42,7 @@ note: ...so that the expression is assignable\n LL |     x\n    |     ^\n    = note: expected `&'b mut (dyn Dummy + 'b)`\n-              found `&'z1 mut (dyn Dummy + 'b)`\n+              found `&mut (dyn Dummy + 'b)`\n \n error[E0308]: mismatched types\n   --> $DIR/regions-trait-object-subtyping.rs:22:5"}, {"sha": "c14dfa3601a8c0bf9d8919e74611bb4dd2c3ae61", "filename": "src/test/ui/resolve/resolve-inconsistent-binding-mode.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -54,8 +54,8 @@ LL |         Opts::A(ref mut i) | Opts::B(ref i) => {}\n    |                 |\n    |                 first introduced with type `&mut isize` here\n    |\n-   = note: expected type `&'z0 mut isize`\n-              found type `&'z1 isize`\n+   = note: expected type `&mut isize`\n+              found type `&isize`\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error: aborting due to 6 previous errors"}, {"sha": "d1960a8aab3001c9cb03df27b2c9ce4a58ad90cc", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -22,8 +22,8 @@ error[E0308]: mismatched types\n LL |     test(&y);\n    |          ^^ types differ in mutability\n    |\n-   = note: expected mutable reference `&'z2 mut std::string::String`\n-                      found reference `&'z3 std::string::String`\n+   = note: expected mutable reference `&mut std::string::String`\n+                      found reference `&std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:14:11"}, {"sha": "52e491862416801c5df3510dfe2dce2feb43f069", "filename": "src/test/ui/traits/trait-impl-method-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-method-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-method-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-method-mismatch.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe fn jumbo(&self, x: &usize) { *self + *x; }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected normal fn, found unsafe fn\n    |\n    = note: expected fn pointer `fn(&usize, &usize) -> usize`\n-              found fn pointer `unsafe fn(&'z0 usize, &'z1 usize)`\n+              found fn pointer `unsafe fn(&usize, &usize)`\n \n error: aborting due to previous error\n "}, {"sha": "a79b74dcddead0cba82cf036ebddc215c55b3632", "filename": "src/test/ui/traits/trait-param-without-lifetime-constraint.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.rs?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -0,0 +1,20 @@\n+struct Article {\n+    proof_reader: ProofReader,\n+}\n+\n+struct ProofReader {\n+    name: String,\n+}\n+\n+pub trait HaveRelationship<To> {\n+    fn get_relation(&self) -> To;\n+}\n+\n+impl HaveRelationship<&ProofReader> for Article {\n+    fn get_relation(&self) -> &ProofReader {\n+    //~^ ERROR `impl` item signature doesn't match `trait` item signature\n+        &self.proof_reader\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "912d3a8d28de1fe9e4bb0d80bbf4006c6f4b0c12", "filename": "src/test/ui/traits/trait-param-without-lifetime-constraint.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -0,0 +1,18 @@\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/trait-param-without-lifetime-constraint.rs:14:5\n+   |\n+LL | pub trait HaveRelationship<To> {\n+   |                            -- in order for `impl` items to be able to implement the method, this type parameter might need a lifetime restriction like `To: 'a`\n+LL |     fn get_relation(&self) -> To;\n+   |     ----------------------------- expected fn(&Article) -> &ProofReader\n+...\n+LL |     fn get_relation(&self) -> &ProofReader {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&Article) -> &ProofReader\n+   |\n+   = note: expected `fn(&Article) -> &ProofReader`\n+              found `fn(&Article) -> &ProofReader`\n+   = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n+\n+error: aborting due to previous error\n+"}, {"sha": "24c71c63103d3e79ec06a6cdf880129253e5fc80", "filename": "src/test/ui/type/type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -211,7 +211,7 @@ LL |     want::<&Foo<foo>>(f);\n    |                       expected `&Foo<foo>`, found struct `Foo`\n    |                       help: consider borrowing here: `&f`\n    |\n-   = note: expected reference `&'z0 Foo<foo>`\n+   = note: expected reference `&Foo<foo>`\n                  found struct `Foo<foo>`\n \n error[E0308]: mismatched types\n@@ -313,7 +313,7 @@ LL |     want::<&Foo<foo, B>>(f);\n    |                          expected `&Foo<foo, B>`, found struct `Foo`\n    |                          help: consider borrowing here: `&f`\n    |\n-   = note: expected reference `&'z1 Foo<foo, B>`\n+   = note: expected reference `&Foo<foo, B>`\n                  found struct `Foo<foo, B>`\n \n error[E0308]: mismatched types"}, {"sha": "03a251be1a9141572c001b7ad5ce2822e79533ee", "filename": "src/test/ui/unsafe/unsafe-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -8,7 +8,7 @@ impl Foo for u32 {\n     fn len(&self) -> u32 { *self }\n     //~^ ERROR method `len` has an incompatible type for trait\n     //~| expected fn pointer `unsafe fn(&u32) -> _`\n-    //~| found fn pointer `fn(&'z0 u32) -> _`\n+    //~| found fn pointer `fn(&u32) -> _`\n }\n \n fn main() { }"}, {"sha": "1c3d057cbc9ce0ddf5ae6895faae682c1ce6bcc3", "filename": "src/test/ui/unsafe/unsafe-trait-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -8,7 +8,7 @@ LL |     fn len(&self) -> u32 { *self }\n    |     ^^^^^^^^^^^^^^^^^^^^ expected unsafe fn, found normal fn\n    |\n    = note: expected fn pointer `unsafe fn(&u32) -> _`\n-              found fn pointer `fn(&'z0 u32) -> _`\n+              found fn pointer `fn(&u32) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "4c367fb9e9caf4460b87414c0d2c2e79b15c87a3", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0f4d51df3be5b149ec032d62e9431ba4faf038/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=eb0f4d51df3be5b149ec032d62e9431ba4faf038", "patch": "@@ -5,7 +5,7 @@ LL |     fn mul(self, s: &f64) -> Vec1 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n    |\n    = note: expected fn pointer `fn(Vec1, f64) -> Vec1`\n-              found fn pointer `fn(Vec1, &'z0 f64) -> Vec1`\n+              found fn pointer `fn(Vec1, &f64) -> Vec1`\n \n error[E0053]: method `mul` has an incompatible type for trait\n   --> $DIR/wrong-mul-method-signature.rs:33:5"}]}