{"sha": "59ab146ec317917d7c71e8947a7ff90d40ee8694", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YWIxNDZlYzMxNzkxN2Q3YzcxZTg5NDdhN2ZmOTBkNDBlZTg2OTQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-28T11:15:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-28T11:15:40Z"}, "message": "Rollup merge of #48548 - alexcrichton:msvc-linker-utf16, r=alexcrichton\n\nEncode linker arguments as UTF-16 on MSVC platforms\n\nThis is a forward-port of #48455 to the master branch", "tree": {"sha": "5a53ef9158a52ce6f317d5d9154cea40ee0f81d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a53ef9158a52ce6f317d5d9154cea40ee0f81d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59ab146ec317917d7c71e8947a7ff90d40ee8694", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJalo9cCRBK7hj4Ov3rIwAAdHIIAARdSDb8U4f02kmAlRbq9erc\nTbJxl0PRtRgHSS2FddETFxolVGUOiK2c37RF43q17VoDfVhaI6PP06QY8Zhw15iw\nNHvSLtKeDLIk+Z7Nnxo1S/Tgk7xHrLpWI6Q4CQ9/ubONau4xpebDCnMAiBErJvEM\nXS4X/dfK/hes/6zOb4eUeUXRYtfqZr0vVMvrkRhPnfrnp2OLFk6i8GglGwyZTYGU\nTZ6k6qkpwPIavits8gLGdA3Yqg01/Kak9GIxVSxAFvbBy0mWKzUCDVOKLUbv9hZa\n2jOEeH1DsEpaXXQRQrMXZDw+DCibP7tSf4xRQLcmY7wtxR6ofUep4hXyaL5i1aI=\n=Fw8k\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a53ef9158a52ce6f317d5d9154cea40ee0f81d8\nparent 62f4fe5132b4dd06e1b208ee7138ffc050d247e7\nparent 5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed\nauthor kennytm <kennytm@gmail.com> 1519816540 +0800\ncommitter GitHub <noreply@github.com> 1519816540 +0800\n\nRollup merge of #48548 - alexcrichton:msvc-linker-utf16, r=alexcrichton\n\nEncode linker arguments as UTF-16 on MSVC platforms\n\nThis is a forward-port of #48455 to the master branch\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59ab146ec317917d7c71e8947a7ff90d40ee8694", "html_url": "https://github.com/rust-lang/rust/commit/59ab146ec317917d7c71e8947a7ff90d40ee8694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59ab146ec317917d7c71e8947a7ff90d40ee8694/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62f4fe5132b4dd06e1b208ee7138ffc050d247e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f4fe5132b4dd06e1b208ee7138ffc050d247e7", "html_url": "https://github.com/rust-lang/rust/commit/62f4fe5132b4dd06e1b208ee7138ffc050d247e7"}, {"sha": "5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed", "html_url": "https://github.com/rust-lang/rust/commit/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "8f308e726865cd938714c29592d6db61fce9b5a6", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59ab146ec317917d7c71e8947a7ff90d40ee8694/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab146ec317917d7c71e8947a7ff90d40ee8694/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=59ab146ec317917d7c71e8947a7ff90d40ee8694", "patch": "@@ -849,7 +849,19 @@ fn exec_linker(sess: &Session, cmd: &mut Command, tmpdir: &Path)\n         args.push_str(\"\\n\");\n     }\n     let file = tmpdir.join(\"linker-arguments\");\n-    fs::write(&file, args.as_bytes())?;\n+    let bytes = if sess.target.target.options.is_like_msvc {\n+        let mut out = vec![];\n+        // start the stream with a UTF-16 BOM\n+        for c in vec![0xFEFF].into_iter().chain(args.encode_utf16()) {\n+            // encode in little endian\n+            out.push(c as u8);\n+            out.push((c >> 8) as u8);\n+        }\n+        out\n+    } else {\n+        args.into_bytes()\n+    };\n+    fs::write(&file, &bytes)?;\n     cmd2.arg(format!(\"@{}\", file.display()));\n     return cmd2.output();\n "}, {"sha": "67d8ad0b67255bf25e7fc9ac58cf1c569d8616be", "filename": "src/test/run-make/long-linker-command-lines-cmd-exe/foo.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/59ab146ec317917d7c71e8947a7ff90d40ee8694/src%2Ftest%2Frun-make%2Flong-linker-command-lines-cmd-exe%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab146ec317917d7c71e8947a7ff90d40ee8694/src%2Ftest%2Frun-make%2Flong-linker-command-lines-cmd-exe%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flong-linker-command-lines-cmd-exe%2Ffoo.rs?ref=59ab146ec317917d7c71e8947a7ff90d40ee8694", "patch": "@@ -36,8 +36,11 @@ fn main() {\n     let ok = tmpdir.join(\"ok\");\n     let not_ok = tmpdir.join(\"not_ok\");\n     if env::var(\"YOU_ARE_A_LINKER\").is_ok() {\n-        match env::args().find(|a| a.contains(\"@\")) {\n-            Some(file) => { fs::copy(&file[1..], &ok).unwrap(); }\n+        match env::args_os().find(|a| a.to_string_lossy().contains(\"@\")) {\n+            Some(file) => {\n+                let file = file.to_str().unwrap();\n+                fs::copy(&file[1..], &ok).unwrap();\n+            }\n             None => { File::create(&not_ok).unwrap(); }\n         }\n         return\n@@ -84,11 +87,23 @@ fn main() {\n             continue\n         }\n \n-        let mut contents = String::new();\n-        File::open(&ok).unwrap().read_to_string(&mut contents).unwrap();\n+        let mut contents = Vec::new();\n+        File::open(&ok).unwrap().read_to_end(&mut contents).unwrap();\n \n         for j in 0..i {\n-            assert!(contents.contains(&format!(\"{}{}\", lib_name, j)));\n+            let exp = format!(\"{}{}\", lib_name, j);\n+            let exp = if cfg!(target_env = \"msvc\") {\n+                let mut out = Vec::with_capacity(exp.len() * 2);\n+                for c in exp.encode_utf16() {\n+                    // encode in little endian\n+                    out.push(c as u8);\n+                    out.push((c >> 8) as u8);\n+                }\n+                out\n+            } else {\n+                exp.into_bytes()\n+            };\n+            assert!(contents.windows(exp.len()).any(|w| w == &exp[..]));\n         }\n \n         break"}, {"sha": "2ac240982afc4d5c4fe650f5dc3786de8313aec3", "filename": "src/test/run-make/long-linker-command-lines/foo.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/59ab146ec317917d7c71e8947a7ff90d40ee8694/src%2Ftest%2Frun-make%2Flong-linker-command-lines%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ab146ec317917d7c71e8947a7ff90d40ee8694/src%2Ftest%2Frun-make%2Flong-linker-command-lines%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flong-linker-command-lines%2Ffoo.rs?ref=59ab146ec317917d7c71e8947a7ff90d40ee8694", "patch": "@@ -27,7 +27,8 @@ fn main() {\n     let tmpdir = PathBuf::from(env::var_os(\"TMPDIR\").unwrap());\n     let ok = tmpdir.join(\"ok\");\n     if env::var(\"YOU_ARE_A_LINKER\").is_ok() {\n-        if let Some(file) = env::args().find(|a| a.contains(\"@\")) {\n+        if let Some(file) = env::args_os().find(|a| a.to_string_lossy().contains(\"@\")) {\n+            let file = file.to_str().expect(\"non-utf8 file argument\");\n             fs::copy(&file[1..], &ok).unwrap();\n         }\n         return\n@@ -76,11 +77,23 @@ fn main() {\n             continue\n         }\n \n-        let mut contents = String::new();\n-        File::open(&ok).unwrap().read_to_string(&mut contents).unwrap();\n+        let mut contents = Vec::new();\n+        File::open(&ok).unwrap().read_to_end(&mut contents).unwrap();\n \n         for j in 0..i {\n-            assert!(contents.contains(&format!(\"{}{}\", lib_name, j)));\n+            let exp = format!(\"{}{}\", lib_name, j);\n+            let exp = if cfg!(target_env = \"msvc\") {\n+                let mut out = Vec::with_capacity(exp.len() * 2);\n+                for c in exp.encode_utf16() {\n+                    // encode in little endian\n+                    out.push(c as u8);\n+                    out.push((c >> 8) as u8);\n+                }\n+                out\n+            } else {\n+                exp.into_bytes()\n+            };\n+            assert!(contents.windows(exp.len()).any(|w| w == &exp[..]));\n         }\n \n         break"}]}