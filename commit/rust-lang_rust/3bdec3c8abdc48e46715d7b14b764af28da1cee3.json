{"sha": "3bdec3c8abdc48e46715d7b14b764af28da1cee3", "node_id": "C_kwDOAAsO6NoAKDNiZGVjM2M4YWJkYzQ4ZTQ2NzE1ZDdiMTRiNzY0YWYyOGRhMWNlZTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-13T23:36:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-13T23:36:51Z"}, "message": "Auto merge of #98075 - JohnTitor:rollup-nqwodnk, r=JohnTitor\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #95211 (Improve parser diagnostics)\n - #95243 (Add Apple WatchOS compile targets)\n - #97385 (Add WIP stable MIR crate)\n - #97508 (Harden bad placeholder checks on statics/consts)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b72fb84b835e64cc9e6de4c5fc71491b96711fb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b72fb84b835e64cc9e6de4c5fc71491b96711fb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bdec3c8abdc48e46715d7b14b764af28da1cee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdec3c8abdc48e46715d7b14b764af28da1cee3", "html_url": "https://github.com/rust-lang/rust/commit/3bdec3c8abdc48e46715d7b14b764af28da1cee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bdec3c8abdc48e46715d7b14b764af28da1cee3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca122c7ebb3ab50149c9d3d24ddb59c252b32272", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca122c7ebb3ab50149c9d3d24ddb59c252b32272", "html_url": "https://github.com/rust-lang/rust/commit/ca122c7ebb3ab50149c9d3d24ddb59c252b32272"}, {"sha": "aa71be1b39d7b672414c622093e906e81aa06351", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa71be1b39d7b672414c622093e906e81aa06351", "html_url": "https://github.com/rust-lang/rust/commit/aa71be1b39d7b672414c622093e906e81aa06351"}], "stats": {"total": 672, "additions": 621, "deletions": 51}, "files": [{"sha": "e5df61d61ce9b0fc4a5a0859f417a645f58b7337", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -3440,6 +3440,7 @@ dependencies = [\n  \"jemalloc-sys\",\n  \"rustc_codegen_ssa\",\n  \"rustc_driver\",\n+ \"rustc_smir\",\n ]\n \n [[package]]\n@@ -4437,6 +4438,21 @@ dependencies = [\n  \"tracing\",\n ]\n \n+[[package]]\n+name = \"rustc_smir\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"rustc_borrowck\",\n+ \"rustc_driver\",\n+ \"rustc_hir\",\n+ \"rustc_interface\",\n+ \"rustc_middle\",\n+ \"rustc_mir_dataflow\",\n+ \"rustc_mir_transform\",\n+ \"rustc_serialize\",\n+ \"rustc_trait_selection\",\n+]\n+\n [[package]]\n name = \"rustc_span\"\n version = \"0.0.0\""}, {"sha": "27ee3dd2aeafc7086cde881e22713d73006800e8", "filename": "compiler/rustc/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc%2FCargo.toml?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -9,6 +9,9 @@ rustc_driver = { path = \"../rustc_driver\" }\n # Make sure rustc_codegen_ssa ends up in the sysroot, because this\n # crate is intended to be used by codegen backends, which may not be in-tree.\n rustc_codegen_ssa = { path = \"../rustc_codegen_ssa\" }\n+# Make sure rustc_smir ends up in the sysroot, because this\n+# crate is intended to be used by stable MIR consumers, which are not in-tree\n+rustc_smir = { path = \"../rustc_smir\" }\n \n [dependencies.jemalloc-sys]\n version = \"0.5.0\""}, {"sha": "d05d09a11eacddaa5203547ef3e608facced3b46", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -1036,7 +1036,8 @@ unsafe fn embed_bitcode(\n     // reason (see issue #90326 for historical background).\n     let is_apple = cgcx.opts.target_triple.triple().contains(\"-ios\")\n         || cgcx.opts.target_triple.triple().contains(\"-darwin\")\n-        || cgcx.opts.target_triple.triple().contains(\"-tvos\");\n+        || cgcx.opts.target_triple.triple().contains(\"-tvos\")\n+        || cgcx.opts.target_triple.triple().contains(\"-watchos\");\n     if is_apple\n         || cgcx.opts.target_triple.triple().starts_with(\"wasm\")\n         || cgcx.opts.target_triple.triple().starts_with(\"asmjs\")"}, {"sha": "e70509f3ecc4bcd578916f862dd47e10a0a232ae", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -2606,7 +2606,7 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     let os = &sess.target.os;\n     let llvm_target = &sess.target.llvm_target;\n     if sess.target.vendor != \"apple\"\n-        || !matches!(os.as_ref(), \"ios\" | \"tvos\")\n+        || !matches!(os.as_ref(), \"ios\" | \"tvos\" | \"watchos\")\n         || flavor != LinkerFlavor::Gcc\n     {\n         return;\n@@ -2616,11 +2616,16 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n         (\"x86_64\", \"tvos\") => \"appletvsimulator\",\n         (\"arm\", \"ios\") => \"iphoneos\",\n         (\"aarch64\", \"ios\") if llvm_target.contains(\"macabi\") => \"macosx\",\n-        (\"aarch64\", \"ios\") if llvm_target.contains(\"sim\") => \"iphonesimulator\",\n+        (\"aarch64\", \"ios\") if llvm_target.ends_with(\"-simulator\") => \"iphonesimulator\",\n         (\"aarch64\", \"ios\") => \"iphoneos\",\n         (\"x86\", \"ios\") => \"iphonesimulator\",\n         (\"x86_64\", \"ios\") if llvm_target.contains(\"macabi\") => \"macosx\",\n         (\"x86_64\", \"ios\") => \"iphonesimulator\",\n+        (\"x86_64\", \"watchos\") => \"watchsimulator\",\n+        (\"arm64_32\", \"watchos\") => \"watchos\",\n+        (\"aarch64\", \"watchos\") if llvm_target.ends_with(\"-simulator\") => \"watchsimulator\",\n+        (\"aarch64\", \"watchos\") => \"watchos\",\n+        (\"arm\", \"watchos\") => \"watchos\",\n         _ => {\n             sess.err(&format!(\"unsupported arch `{}` for os `{}`\", arch, os));\n             return;\n@@ -2667,6 +2672,11 @@ fn get_apple_sdk_root(sdk_name: &str) -> Result<String, String> {\n             \"macosx10.15\"\n                 if sdkroot.contains(\"iPhoneOS.platform\")\n                     || sdkroot.contains(\"iPhoneSimulator.platform\") => {}\n+            \"watchos\"\n+                if sdkroot.contains(\"WatchSimulator.platform\")\n+                    || sdkroot.contains(\"MacOSX.platform\") => {}\n+            \"watchsimulator\"\n+                if sdkroot.contains(\"WatchOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {}\n             // Ignore `SDKROOT` if it's not a valid path.\n             _ if !p.is_absolute() || p == Path::new(\"/\") || !p.exists() => {}\n             _ => return Ok(sdkroot),"}, {"sha": "c56f70e853daa68f79c3643497ba4793cb867037", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -28,6 +28,7 @@ use std::ops::{Deref, DerefMut};\n \n use std::mem::take;\n \n+use crate::parser;\n use tracing::{debug, trace};\n \n const TURBOFISH_SUGGESTION_STR: &str =\n@@ -481,6 +482,35 @@ impl<'a> Parser<'a> {\n             .map(|x| TokenType::Token(x.clone()))\n             .chain(inedible.iter().map(|x| TokenType::Token(x.clone())))\n             .chain(self.expected_tokens.iter().cloned())\n+            .filter_map(|token| {\n+                // filter out suggestions which suggest the same token which was found and deemed incorrect\n+                fn is_ident_eq_keyword(found: &TokenKind, expected: &TokenType) -> bool {\n+                    if let TokenKind::Ident(current_sym, _) = found {\n+                        if let TokenType::Keyword(suggested_sym) = expected {\n+                            return current_sym == suggested_sym;\n+                        }\n+                    }\n+                    false\n+                }\n+                if token != parser::TokenType::Token(self.token.kind.clone()) {\n+                    let eq = is_ident_eq_keyword(&self.token.kind, &token);\n+                    // if the suggestion is a keyword and the found token is an ident,\n+                    // the content of which are equal to the suggestion's content,\n+                    // we can remove that suggestion (see the return None statement below)\n+\n+                    // if this isn't the case however, and the suggestion is a token the\n+                    // content of which is the same as the found token's, we remove it as well\n+                    if !eq {\n+                        if let TokenType::Token(kind) = &token {\n+                            if kind == &self.token.kind {\n+                                return None;\n+                            }\n+                        }\n+                        return Some(token);\n+                    }\n+                }\n+                return None;\n+            })\n             .collect::<Vec<_>>();\n         expected.sort_by_cached_key(|x| x.to_string());\n         expected.dedup();"}, {"sha": "b224fa9596eb8a07d35b14aac152b9b8ada1f990", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -980,12 +980,26 @@ impl<'a> Parser<'a> {\n \n     fn parse_dot_or_call_expr_with_(&mut self, mut e: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         loop {\n-            if self.eat(&token::Question) {\n+            let has_question = if self.prev_token.kind == TokenKind::Ident(kw::Return, false) {\n+                // we are using noexpect here because we don't expect a `?` directly after a `return`\n+                // which could be suggested otherwise\n+                self.eat_noexpect(&token::Question)\n+            } else {\n+                self.eat(&token::Question)\n+            };\n+            if has_question {\n                 // `expr?`\n                 e = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Try(e), AttrVec::new());\n                 continue;\n             }\n-            if self.eat(&token::Dot) {\n+            let has_dot = if self.prev_token.kind == TokenKind::Ident(kw::Return, false) {\n+                // we are using noexpect here because we don't expect a `.` directly after a `return`\n+                // which could be suggested otherwise\n+                self.eat_noexpect(&token::Dot)\n+            } else {\n+                self.eat(&token::Dot)\n+            };\n+            if has_dot {\n                 // expr.f\n                 e = self.parse_dot_suffix_expr(lo, e)?;\n                 continue;\n@@ -1541,9 +1555,13 @@ impl<'a> Parser<'a> {\n             self.parse_for_expr(label, lo, attrs)\n         } else if self.eat_keyword(kw::Loop) {\n             self.parse_loop_expr(label, lo, attrs)\n-        } else if self.check(&token::OpenDelim(Delimiter::Brace)) || self.token.is_whole_block() {\n+        } else if self.check_noexpect(&token::OpenDelim(Delimiter::Brace))\n+            || self.token.is_whole_block()\n+        {\n             self.parse_block_expr(label, lo, BlockCheckMode::Default, attrs)\n-        } else if !ate_colon && (self.check(&TokenKind::Comma) || self.check(&TokenKind::Gt)) {\n+        } else if !ate_colon\n+            && (self.check_noexpect(&TokenKind::Comma) || self.check_noexpect(&TokenKind::Gt))\n+        {\n             // We're probably inside of a `Path<'a>` that needs a turbofish\n             let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n             self.struct_span_err(self.token.span, msg).span_label(self.token.span, msg).emit();"}, {"sha": "6d6667717f0a383f6bed2e38fe3649afccb2b357", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -547,6 +547,22 @@ impl<'a> Parser<'a> {\n         is_present\n     }\n \n+    fn check_noexpect(&self, tok: &TokenKind) -> bool {\n+        self.token == *tok\n+    }\n+\n+    /// Consumes a token 'tok' if it exists. Returns whether the given token was present.\n+    ///\n+    /// the main purpose of this function is to reduce the cluttering of the suggestions list\n+    /// which using the normal eat method could introduce in some cases.\n+    pub fn eat_noexpect(&mut self, tok: &TokenKind) -> bool {\n+        let is_present = self.check_noexpect(tok);\n+        if is_present {\n+            self.bump()\n+        }\n+        is_present\n+    }\n+\n     /// Consumes a token 'tok' if it exists. Returns whether the given token was present.\n     pub fn eat(&mut self, tok: &TokenKind) -> bool {\n         let is_present = self.check(tok);"}, {"sha": "5cf1758c31f7730a0f63247bbbb8824b75951f0f", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -2,7 +2,7 @@ use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{Parser, Restrictions, TokenType};\n use crate::maybe_whole;\n use rustc_ast::ptr::P;\n-use rustc_ast::token::{self, Delimiter, Token};\n+use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n use rustc_ast::{\n     self as ast, AngleBracketedArg, AngleBracketedArgs, AnonConst, AssocConstraint,\n     AssocConstraintKind, BlockCheckMode, GenericArg, GenericArgs, Generics, ParenthesizedArgs,\n@@ -96,7 +96,7 @@ impl<'a> Parser<'a> {\n     ///                ^ help: use double colon\n     /// ```\n     fn recover_colon_before_qpath_proj(&mut self) -> bool {\n-        if self.token.kind != token::Colon\n+        if !self.check_noexpect(&TokenKind::Colon)\n             || self.look_ahead(1, |t| !t.is_ident() || t.is_reserved_ident())\n         {\n             return false;\n@@ -478,7 +478,7 @@ impl<'a> Parser<'a> {\n         while let Some(arg) = self.parse_angle_arg(ty_generics)? {\n             args.push(arg);\n             if !self.eat(&token::Comma) {\n-                if self.token.kind == token::Semi\n+                if self.check_noexpect(&TokenKind::Semi)\n                     && self.look_ahead(1, |t| t.is_ident() || t.is_lifetime())\n                 {\n                     // Add `>` to the list of expected tokens.\n@@ -517,7 +517,11 @@ impl<'a> Parser<'a> {\n         let arg = self.parse_generic_arg(ty_generics)?;\n         match arg {\n             Some(arg) => {\n-                if self.check(&token::Colon) | self.check(&token::Eq) {\n+                // we are using noexpect here because we first want to find out if either `=` or `:`\n+                // is present and then use that info to push the other token onto the tokens list\n+                let separated =\n+                    self.check_noexpect(&token::Colon) || self.check_noexpect(&token::Eq);\n+                if separated && (self.check(&token::Colon) | self.check(&token::Eq)) {\n                     let arg_span = arg.span();\n                     let (binder, ident, gen_args) = match self.get_ident_from_generic_arg(&arg) {\n                         Ok(ident_gen_args) => ident_gen_args,\n@@ -553,6 +557,14 @@ impl<'a> Parser<'a> {\n                         AssocConstraint { id: ast::DUMMY_NODE_ID, ident, gen_args, kind, span };\n                     Ok(Some(AngleBracketedArg::Constraint(constraint)))\n                 } else {\n+                    // we only want to suggest `:` and `=` in contexts where the previous token\n+                    // is an ident and the current token or the next token is an ident\n+                    if self.prev_token.is_ident()\n+                        && (self.token.is_ident() || self.look_ahead(1, |token| token.is_ident()))\n+                    {\n+                        self.check(&token::Colon);\n+                        self.check(&token::Eq);\n+                    }\n                     Ok(Some(AngleBracketedArg::Arg(arg)))\n                 }\n             }"}, {"sha": "42355dd93a7a53d28d1721f3a33dd05380ca560f", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -260,7 +260,10 @@ impl<'a> Parser<'a> {\n                     if let Ok(snip) = self.span_to_snippet(pat.span) {\n                         err.span_label(pat.span, format!(\"while parsing the type for `{}`\", snip));\n                     }\n-                    let err = if self.check(&token::Eq) {\n+                    // we use noexpect here because we don't actually expect Eq to be here\n+                    // but we are still checking for it in order to be able to handle it if\n+                    // it is there\n+                    let err = if self.check_noexpect(&token::Eq) {\n                         err.emit();\n                         None\n                     } else {"}, {"sha": "eb5a316cbd195d26e3f768c7dd8e1b47299e17f8", "filename": "compiler/rustc_smir/.gitignore", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2F.gitignore?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1 @@\n+target"}, {"sha": "5e0d1f369a6a21144cd2702dba186df917916e84", "filename": "compiler/rustc_smir/Cargo.toml", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2FCargo.toml?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,28 @@\n+[package]\n+name = \"rustc_smir\"\n+version = \"0.0.0\"\n+edition = \"2021\"\n+\n+[dependencies]\n+rustc_borrowck = { path = \"../rustc_borrowck\", optional = true }\n+rustc_driver = { path = \"../rustc_driver\", optional = true }\n+rustc_hir = { path = \"../rustc_hir\", optional = true }\n+rustc_interface = { path = \"../rustc_interface\", optional = true }\n+rustc_middle = { path = \"../rustc_middle\", optional = true }\n+rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\", optional = true }\n+rustc_mir_transform = { path = \"../rustc_mir_transform\", optional = true }\n+rustc_serialize = { path = \"../rustc_serialize\", optional = true }\n+rustc_trait_selection = { path = \"../rustc_trait_selection\", optional = true }\n+\n+[features]\n+default = [\n+    \"rustc_borrowck\",\n+    \"rustc_driver\",\n+    \"rustc_hir\",\n+    \"rustc_interface\",\n+    \"rustc_middle\",\n+    \"rustc_mir_dataflow\",\n+    \"rustc_mir_transform\",\n+    \"rustc_serialize\",\n+    \"rustc_trait_selection\",\n+]"}, {"sha": "ae49098dd0ce65095f859f79eb069c4e0b39befa", "filename": "compiler/rustc_smir/README.md", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2FREADME.md?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,75 @@\n+This crate is regularly synced with its mirror in the rustc repo at `compiler/rustc_smir`.\n+\n+We use `git subtree` for this to preserve commits and allow the rustc repo to\n+edit these crates without having to touch this repo. This keeps the crates compiling\n+while allowing us to independently work on them here. The effort of keeping them in\n+sync is pushed entirely onto us, without affecting rustc workflows negatively.\n+This may change in the future, but changes to policy should only be done via a\n+compiler team MCP.\n+\n+## Instructions for working on this crate locally\n+\n+Since the crate is the same in the rustc repo and here, the dependencies on rustc_* crates\n+will only either work here or there, but never in both places at the same time. Thus we use\n+optional dependencies on the rustc_* crates, requiring local development to use\n+\n+```\n+cargo build --no-default-features -Zavoid-dev-deps\n+```\n+\n+in order to compile successfully.\n+\n+## Instructions for syncing\n+\n+### Updating this repository\n+\n+In the rustc repo, execute\n+\n+```\n+git subtree push --prefix=compiler/rustc_smir url_to_your_fork_of_project_stable_mir some_feature_branch\n+```\n+\n+and then open a PR of your `some_feature_branch` against https://github.com/rust-lang/project-stable-mir\n+\n+### Updating the rustc library\n+\n+First we need to bump our stack limit, as the rustc repo otherwise quickly hits that:\n+\n+```\n+ulimit -s 60000\n+```\n+\n+#### Maximum function recursion depth (1000) reached\n+\n+Then we need to disable `dash` as the default shell for sh scripts, as otherwise we run into a\n+hard limit of a recursion depth of 1000:\n+\n+```\n+sudo dpkg-reconfigure dash\n+```\n+\n+and then select `No` to disable dash.\n+\n+\n+#### Patching your `git worktree`\n+\n+The regular git worktree does not scale to repos of the size of the rustc repo.\n+So download the `git-subtree.sh` from https://github.com/gitgitgadget/git/pull/493/files and run\n+\n+```\n+sudo cp --backup /path/to/patched/git-subtree.sh /usr/lib/git-core/git-subtree\n+sudo chmod --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree\n+sudo chown --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree\n+```\n+\n+#### Actually doing a sync\n+\n+In the rustc repo, execute\n+\n+```\n+git subtree pull --prefix=compiler/rustc_smir https://github.com/rust-lang/project-stable-mir smir\n+```\n+\n+Note: only ever sync to rustc from the project-stable-mir's `smir` branch. Do not sync with your own forks.\n+\n+Then open a PR against rustc just like a regular PR."}, {"sha": "7b696fc1f5cecba18def14414c85a39ef4e64716", "filename": "compiler/rustc_smir/rust-toolchain.toml", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2Frust-toolchain.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2Frust-toolchain.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Frust-toolchain.toml?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,3 @@\n+[toolchain]\n+channel = \"nightly-2022-06-01\"\n+components = [ \"rustfmt\", \"rustc-dev\" ]"}, {"sha": "5c7aaf35b90326eb6d33a00e513bed6d33db2a9f", "filename": "compiler/rustc_smir/src/lib.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Flib.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,17 @@\n+//! The WIP stable interface to rustc internals.\n+//!\n+//! For more information see https://github.com/rust-lang/project-stable-mir\n+//!\n+//! # Note\n+//!\n+//! This API is still completely unstable and subject to change.\n+\n+#![doc(\n+    html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n+    test(attr(allow(unused_variables), deny(warnings)))\n+)]\n+#![cfg_attr(not(feature = \"default\"), feature(rustc_private))]\n+\n+pub mod mir;\n+\n+pub mod very_unstable;"}, {"sha": "855605b1a4f9d449a761c55a531080fb8807b2f0", "filename": "compiler/rustc_smir/src/mir.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2Fsrc%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2Fsrc%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fmir.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,10 @@\n+pub use crate::very_unstable::middle::mir::{\n+    visit::MutVisitor, AggregateKind, AssertKind, BasicBlock, BasicBlockData, BinOp, BindingForm,\n+    BlockTailInfo, Body, BorrowKind, CastKind, ClearCrossCrate, Constant, ConstantKind,\n+    CopyNonOverlapping, Coverage, FakeReadCause, Field, GeneratorInfo, ImplicitSelfKind,\n+    InlineAsmOperand, Local, LocalDecl, LocalInfo, LocalKind, Location, MirPhase, MirSource,\n+    NullOp, Operand, Place, PlaceRef, ProjectionElem, ProjectionKind, Promoted, RetagKind, Rvalue,\n+    Safety, SourceInfo, SourceScope, SourceScopeData, SourceScopeLocalData, Statement,\n+    StatementKind, UnOp, UserTypeProjection, UserTypeProjections, VarBindingForm, VarDebugInfo,\n+    VarDebugInfoContents,\n+};"}, {"sha": "12ba133dbb169403305825f59f39eba7cff394a6", "filename": "compiler/rustc_smir/src/very_unstable.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2Fsrc%2Fvery_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_smir%2Fsrc%2Fvery_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fvery_unstable.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,27 @@\n+//! This module reexports various crates and modules from unstable rustc APIs.\n+//! Add anything you need here and it will get slowly transferred to a stable API.\n+//! Only use rustc_smir in your dependencies and use the reexports here instead of\n+//! directly referring to the unstable crates.\n+\n+macro_rules! crates {\n+    ($($rustc_name:ident -> $name:ident,)*) => {\n+        $(\n+            #[cfg(not(feature = \"default\"))]\n+            pub extern crate $rustc_name as $name;\n+            #[cfg(feature = \"default\")]\n+            pub use $rustc_name as $name;\n+        )*\n+    }\n+}\n+\n+crates! {\n+    rustc_borrowck -> borrowck,\n+    rustc_driver -> driver,\n+    rustc_hir -> hir,\n+    rustc_interface -> interface,\n+    rustc_middle -> middle,\n+    rustc_mir_dataflow -> dataflow,\n+    rustc_mir_transform -> transform,\n+    rustc_serialize -> serialize,\n+    rustc_trait_selection -> trait_selection,\n+}"}, {"sha": "3059f42140be4178bbc63b7d561c39a22eb2529e", "filename": "compiler/rustc_target/src/spec/aarch64_apple_watchos_sim.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,38 @@\n+use super::apple_sdk_base::{opts, Arch};\n+use crate::spec::{FramePointer, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let base = opts(\"watchos\", Arch::Arm64_sim);\n+\n+    // Clang automatically chooses a more specific target based on\n+    // WATCHOS_DEPLOYMENT_TARGET.\n+    // This is required for the simulator target to pick the right\n+    // MACH-O commands, so we do too.\n+    let arch = \"arm64\";\n+    let llvm_target = super::apple_base::watchos_sim_llvm_target(arch);\n+\n+    Target {\n+        llvm_target: llvm_target.into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n+        options: TargetOptions {\n+            features: \"+neon,+fp-armv8,+apple-a7\".into(),\n+            max_atomic_width: Some(128),\n+            forces_embed_bitcode: true,\n+            frame_pointer: FramePointer::NonLeaf,\n+            // Taken from a clang build on Xcode 11.4.1.\n+            // These arguments are not actually invoked - they just have\n+            // to look right to pass App Store validation.\n+            bitcode_llvm_cmdline: \"-triple\\0\\\n+                arm64-apple-watchos5.0-simulator\\0\\\n+                -emit-obj\\0\\\n+                -disable-llvm-passes\\0\\\n+                -target-abi\\0\\\n+                darwinpcs\\0\\\n+                -Os\\0\"\n+                .into(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "e8460a509e2ba6b3cacad150045ab4e5b5b3ee1d", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -114,3 +114,12 @@ pub fn ios_sim_llvm_target(arch: &str) -> String {\n     let (major, minor) = ios_deployment_target();\n     format!(\"{}-apple-ios{}.{}.0-simulator\", arch, major, minor)\n }\n+\n+fn watchos_deployment_target() -> (u32, u32) {\n+    deployment_target(\"WATCHOS_DEPLOYMENT_TARGET\").unwrap_or((5, 0))\n+}\n+\n+pub fn watchos_sim_llvm_target(arch: &str) -> String {\n+    let (major, minor) = watchos_deployment_target();\n+    format!(\"{}-apple-watchos{}.{}.0-simulator\", arch, major, minor)\n+}"}, {"sha": "ecb6cbd9f8a498657ca29f0bae93f06823a833f1", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -6,8 +6,10 @@ use Arch::*;\n #[derive(Copy, Clone)]\n pub enum Arch {\n     Armv7,\n+    Armv7k,\n     Armv7s,\n     Arm64,\n+    Arm64_32,\n     I386,\n     X86_64,\n     X86_64_macabi,\n@@ -17,7 +19,7 @@ pub enum Arch {\n \n fn target_abi(arch: Arch) -> &'static str {\n     match arch {\n-        Armv7 | Armv7s | Arm64 | I386 | X86_64 => \"\",\n+        Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 => \"\",\n         X86_64_macabi | Arm64_macabi => \"macabi\",\n         Arm64_sim => \"sim\",\n     }\n@@ -26,8 +28,10 @@ fn target_abi(arch: Arch) -> &'static str {\n fn target_cpu(arch: Arch) -> &'static str {\n     match arch {\n         Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n+        Armv7k => \"cortex-a8\",\n         Armv7s => \"cortex-a9\",\n         Arm64 => \"apple-a7\",\n+        Arm64_32 => \"apple-s4\",\n         I386 => \"yonah\",\n         X86_64 => \"core2\",\n         X86_64_macabi => \"core2\",\n@@ -38,7 +42,7 @@ fn target_cpu(arch: Arch) -> &'static str {\n \n fn link_env_remove(arch: Arch) -> Cow<'static, [Cow<'static, str>]> {\n     match arch {\n-        Armv7 | Armv7s | Arm64 | I386 | X86_64 | Arm64_sim => {\n+        Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 | Arm64_sim => {\n             cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n         }\n         X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],"}, {"sha": "7b23fe1c482e1d6448a926c20b9b421b4325de70", "filename": "compiler/rustc_target/src/spec/arm64_32_apple_watchos.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,28 @@\n+use super::apple_sdk_base::{opts, Arch};\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let base = opts(\"watchos\", Arch::Arm64_32);\n+    Target {\n+        llvm_target: \"arm64_32-apple-watchos\".into(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:o-p:32:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n+        options: TargetOptions {\n+            features: \"+neon,+fp-armv8,+apple-a7\".into(),\n+            max_atomic_width: Some(64),\n+            forces_embed_bitcode: true,\n+            // These arguments are not actually invoked - they just have\n+            // to look right to pass App Store validation.\n+            bitcode_llvm_cmdline: \"-triple\\0\\\n+                arm64_32-apple-watchos5.0.0\\0\\\n+                -emit-obj\\0\\\n+                -disable-llvm-passes\\0\\\n+                -target-abi\\0\\\n+                darwinpcs\\0\\\n+                -Os\\0\"\n+                .into(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "af5d1c2ff45813f97615783bcf6ae8ee19974762", "filename": "compiler/rustc_target/src/spec/armv7k_apple_watchos.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,28 @@\n+use super::apple_sdk_base::{opts, Arch};\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let base = opts(\"watchos\", Arch::Armv7k);\n+    Target {\n+        llvm_target: \"armv7k-apple-watchos\".into(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:o-p:32:32-Fi8-i64:64-a:0:32-n32-S128\".into(),\n+        arch: \"arm\".into(),\n+        options: TargetOptions {\n+            features: \"+v7,+vfp4,+neon\".into(),\n+            max_atomic_width: Some(64),\n+            forces_embed_bitcode: true,\n+            // These arguments are not actually invoked - they just have\n+            // to look right to pass App Store validation.\n+            bitcode_llvm_cmdline: \"-triple\\0\\\n+                armv7k-apple-watchos3.0.0\\0\\\n+                -emit-obj\\0\\\n+                -disable-llvm-passes\\0\\\n+                -target-abi\\0\\\n+                darwinpcs\\0\\\n+                -Os\\0\"\n+                .into(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "422af66787579ff7b10f129ea0d1480ace95191b", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -928,6 +928,11 @@ supported_targets! {\n     (\"aarch64-apple-tvos\", aarch64_apple_tvos),\n     (\"x86_64-apple-tvos\", x86_64_apple_tvos),\n \n+    (\"armv7k-apple-watchos\", armv7k_apple_watchos),\n+    (\"arm64_32-apple-watchos\", arm64_32_apple_watchos),\n+    (\"x86_64-apple-watchos-sim\", x86_64_apple_watchos_sim),\n+    (\"aarch64-apple-watchos-sim\", aarch64_apple_watchos_sim),\n+\n     (\"armebv7r-none-eabi\", armebv7r_none_eabi),\n     (\"armebv7r-none-eabihf\", armebv7r_none_eabihf),\n     (\"armv7r-none-eabi\", armv7r_none_eabi),"}, {"sha": "4dff3c2f209cd20c06165e884f404b3c7225ede9", "filename": "compiler/rustc_target/src/spec/x86_64_apple_watchos_sim.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,35 @@\n+use super::apple_sdk_base::{opts, Arch};\n+use crate::spec::{StackProbeType, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let base = opts(\"watchos\", Arch::X86_64);\n+\n+    let arch = \"x86_64\";\n+    let llvm_target = super::apple_base::watchos_sim_llvm_target(arch);\n+\n+    Target {\n+        llvm_target: llvm_target.into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .into(),\n+        arch: \"x86_64\".into(),\n+        options: TargetOptions {\n+            max_atomic_width: Some(64),\n+            // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n+            stack_probes: StackProbeType::Call,\n+            forces_embed_bitcode: true,\n+            // Taken from a clang build on Xcode 11.4.1.\n+            // These arguments are not actually invoked - they just have\n+            // to look right to pass App Store validation.\n+            bitcode_llvm_cmdline: \"-triple\\0\\\n+                x86_64-apple-watchos5.0-simulator\\0\\\n+                -emit-obj\\0\\\n+                -disable-llvm-passes\\0\\\n+                -target-abi\\0\\\n+                darwinpcs\\0\\\n+                -Os\\0\"\n+                .into(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "a74cce5d13ee0c6bfe894318fe69ba7630fdc41b", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -806,8 +806,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n                 hir::ItemKind::Fn(..) => tcx.ensure().fn_sig(def_id),\n                 hir::ItemKind::OpaqueTy(..) => tcx.ensure().item_bounds(def_id),\n                 hir::ItemKind::Const(ty, ..) | hir::ItemKind::Static(ty, ..) => {\n-                    // (#75889): Account for `const C: dyn Fn() -> _ = \"\";`\n-                    if let hir::TyKind::TraitObject(..) = ty.kind {\n+                    if !is_suggestable_infer_ty(ty) {\n                         let mut visitor = HirPlaceholderCollector::default();\n                         visitor.visit_item(it);\n                         placeholder_type_error(tcx, None, visitor.0, false, None, it.kind.descr());"}, {"sha": "e23498873f3d38eccbcbeb419bcc3bfa84c5fe38", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -315,8 +315,11 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_ENABLE_ZLIB\", \"OFF\");\n         }\n \n-        // Are we compiling for iOS/tvOS?\n-        if target.contains(\"apple-ios\") || target.contains(\"apple-tvos\") {\n+        // Are we compiling for iOS/tvOS/watchOS?\n+        if target.contains(\"apple-ios\")\n+            || target.contains(\"apple-tvos\")\n+            || target.contains(\"apple-watchos\")\n+        {\n             // These two defines prevent CMake from automatically trying to add a MacOSX sysroot, which leads to a compiler error.\n             cfg.define(\"CMAKE_OSX_SYSROOT\", \"/\");\n             cfg.define(\"CMAKE_OSX_DEPLOYMENT_TARGET\", \"\");"}, {"sha": "e464564c12078f51ca941f1fe533d0cc0779919b", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -16,6 +16,7 @@\n     - [Target Tier Policy](target-tier-policy.md)\n     - [Template for Target-specific Documentation](platform-support/TEMPLATE.md)\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n+    - [\\*-apple-watchos\\*](platform-support/apple-watchos.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)"}, {"sha": "ec93bdd3fd37f8d2996445ec201d8b280f00e0a1", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -207,6 +207,7 @@ target | std | host | notes\n -------|:---:|:----:|-------\n `aarch64-apple-ios-macabi` | ? |  | Apple Catalyst on ARM64\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n+[`aarch64-apple-watchos-sim`](platform-support/apple-watchos.md) | \u2713 |  | ARM64 Apple WatchOS Simulator\n [`aarch64-kmc-solid_asp3`](platform-support/kmc-solid.md) | \u2713 |  | ARM64 SOLID with TOPPERS/ASP3\n [`aarch64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n@@ -220,6 +221,7 @@ target | std | host | notes\n `aarch64-wrs-vxworks` | ? |  |\n `aarch64_be-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (big-endian, ILP32 ABI)\n `aarch64_be-unknown-linux-gnu` | \u2713 | \u2713 | ARM64 Linux (big-endian)\n+[`arm64_32-apple-watchos`](platform-support/apple-watchos.md) | \u2713 | | ARM Apple WatchOS 64-bit with 32-bit pointers\n `armv4t-unknown-linux-gnueabi` | ? |  |\n `armv5te-unknown-linux-uclibceabi` | ? |  | ARMv5TE Linux with uClibc\n `armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD\n@@ -234,6 +236,7 @@ target | std | host | notes\n [`armv7a-kmc-solid_asp3-eabi`](platform-support/kmc-solid.md) | \u2713 |  | ARM SOLID with TOPPERS/ASP3\n [`armv7a-kmc-solid_asp3-eabihf`](platform-support/kmc-solid.md) | \u2713 |  | ARM SOLID with TOPPERS/ASP3, hardfloat\n `armv7a-none-eabihf` | * | | ARM Cortex-A, hardfloat\n+[`armv7k-apple-watchos`](platform-support/apple-watchos.md) | \u2713 | | ARM Apple WatchOS\n `armv7s-apple-ios` | \u2713 |  |\n `avr-unknown-gnu-atmega328` | * |  | AVR. Requires `-Z build-std=core`\n `bpfeb-unknown-none` | * |  | BPF (big endian)\n@@ -290,6 +293,7 @@ target | std | host | notes\n [`wasm64-unknown-unknown`](platform-support/wasm64-unknown-unknown.md) | ? |  | WebAssembly\n `x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst on x86_64\n `x86_64-apple-tvos` | * | | x86 64-bit tvOS\n+[`x86_64-apple-watchos-sim`](platform-support/apple-watchos.md) | \u2713 | | x86 64-bit Apple WatchOS simulator\n [`x86_64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n `x86_64-pc-windows-msvc` | * |  | 64-bit Windows XP support\n `x86_64-sun-solaris` | ? |  | Deprecated target for 64-bit Solaris 10/11, illumos"}, {"sha": "fe4c7c0c88f6da1559ef939e153a188da60a3e8b", "filename": "src/doc/rustc/src/platform-support/apple-watchos.md", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fapple-watchos.md", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fapple-watchos.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fapple-watchos.md?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,55 @@\n+# *-apple-watchos\n+- arm64_32-apple-watchos\n+- armv7k-apple-watchos\n+- aarch64-apple-watchos-sim\n+- x86_64-apple-watchos-sim\n+\n+**Tier: 3**\n+\n+Apple WatchOS targets:\n+- Apple WatchOS on Arm 64_32\n+- Apple WatchOS on Arm v7k\n+- Apple WatchOS Simulator on arm64\n+- Apple WatchOS Simulator on x86_64\n+\n+## Target maintainers\n+\n+* [@deg4uss3r](https://github.com/deg4uss3r)\n+* [@vladimir-ea](https://github.com/vladimir-ea)\n+\n+## Requirements\n+\n+These targets are cross-compiled.\n+To build these targets Xcode 12 or higher on macOS is required.\n+\n+## Building the target\n+\n+The targets can be built by enabling them for a `rustc` build, for example:\n+\n+```toml\n+[build]\n+build-stage = 1\n+target = [\"aarch64-apple-watchos-sim\"]\n+```\n+\n+## Building Rust programs\n+\n+*Note: Building for this target requires the corresponding WatchOS SDK, as provided by Xcode 12+.*\n+\n+Rust programs can be built for these targets, if `rustc` has been built with support for them, for example:\n+\n+```text\n+rustc --target aarch64-apple-watchos-sim your-code.rs\n+```\n+\n+## Testing\n+\n+There is no support for running the Rust testsuite on WatchOS or the simulators.\n+\n+There is no easy way to run simple programs on WatchOS or the WatchOS simulators. Static library builds can be embedded into WatchOS applications.\n+\n+## Cross-compilation toolchains and C code\n+\n+This target can be cross-compiled from x86_64 or aarch64 macOS hosts.\n+\n+Other hosts are not supported for cross-compilation, but might work when also providing the required Xcode SDK."}, {"sha": "24ce2280c8adffb9da49a1911526eef90cea3ccf", "filename": "src/test/ui/check-cfg/well-known-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -7,7 +7,7 @@ LL | #[cfg(target_os = \"linuz\")]\n    |                   help: did you mean: `\"linux\"`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n-   = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, windows, xous\n+   = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, watchos, windows, xous\n \n warning: unexpected `cfg` condition value\n   --> $DIR/well-known-values.rs:14:7"}, {"sha": "e5be8de79a958461eeb0e711b39f36afc6d46bbe", "filename": "src/test/ui/parser/can-begin-expr-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -16,5 +16,5 @@ pub fn main() {\n         return break as ();\n     }\n \n-    return enum; //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `enum`\n+    return enum; //~ ERROR expected one of `;`, `}`, or an operator, found keyword `enum`\n }"}, {"sha": "9569ababad8d52995f6d1674adcf09882b8217f8", "filename": "src/test/ui/parser/can-begin-expr-check.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `enum`\n+error: expected one of `;`, `}`, or an operator, found keyword `enum`\n   --> $DIR/can-begin-expr-check.rs:19:12\n    |\n LL |     return enum;\n-   |            ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+   |            ^^^^ expected one of `;`, `}`, or an operator\n \n error: aborting due to previous error\n "}, {"sha": "54955944c7d35e0d72207f7f7db8e94a916e07f8", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -2,8 +2,8 @@ fn main() {}\n \n extern \"C\" { //~ NOTE while parsing this item list starting here\n     pub pub fn foo();\n-    //~^ ERROR expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `pub`, `unsafe`, or `use`, found keyword `pub`\n-    //~| NOTE expected one of 9 possible tokens\n+    //~^ ERROR expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `unsafe`, or `use`, found keyword `pub`\n+    //~| NOTE expected one of 8 possible tokens\n     //~| HELP there is already a visibility modifier, remove one\n     //~| NOTE explicit visibility first seen here\n } //~ NOTE the item list ends here"}, {"sha": "8ecebf01f17a3f4758f3553966ecdeb621fd03ab", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -1,12 +1,12 @@\n-error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `pub`, `unsafe`, or `use`, found keyword `pub`\n+error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `unsafe`, or `use`, found keyword `pub`\n   --> $DIR/duplicate-visibility.rs:4:9\n    |\n LL | extern \"C\" {\n    |            - while parsing this item list starting here\n LL |     pub pub fn foo();\n    |         ^^^\n    |         |\n-   |         expected one of 9 possible tokens\n+   |         expected one of 8 possible tokens\n    |         help: there is already a visibility modifier, remove one\n ...\n LL | }"}, {"sha": "2f2c6903a9f4c515acf71cf45a2375a90fc67aba", "filename": "src/test/ui/parser/issues/issue-20616-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -9,7 +9,7 @@ type Type_1_<'a, T> = &'a T;\n //type Type_1<'a T> = &'a T; // error: expected `,` or `>` after lifetime name, found `T`\n \n \n-type Type_2 = Type_1_<'static ()>; //~ error: expected one of `,`, `:`, `=`, or `>`, found `(`\n+type Type_2 = Type_1_<'static ()>; //~ error: expected one of `,` or `>`, found `(`\n \n \n //type Type_3<T> = Box<T,,>; // error: expected type, found `,`"}, {"sha": "42059685c5cc42b41aa295f04791759fd36074c3", "filename": "src/test/ui/parser/issues/issue-20616-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `,`, `:`, `=`, or `>`, found `(`\n+error: expected one of `,` or `>`, found `(`\n   --> $DIR/issue-20616-2.rs:12:31\n    |\n LL | type Type_2 = Type_1_<'static ()>;\n-   |                               ^ expected one of `,`, `:`, `=`, or `>`\n+   |                               ^ expected one of `,` or `>`\n    |\n help: you might have meant to end the type parameters here\n    |"}, {"sha": "33c8a9fa328ca2ee696ec3e88907f6f14c1f0069", "filename": "src/test/ui/parser/issues/issue-62660.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -5,7 +5,7 @@ struct Foo;\n \n impl Foo {\n     pub fn foo(_: i32, self: Box<Self) {}\n-    //~^ ERROR expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`, found `)`\n+    //~^ ERROR expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `)`\n }\n \n fn main() {}"}, {"sha": "14c0bdcb111b8a53768ffb334b1ae90da65c48aa", "filename": "src/test/ui/parser/issues/issue-62660.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`, found `)`\n+error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `)`\n   --> $DIR/issue-62660.rs:7:38\n    |\n LL |     pub fn foo(_: i32, self: Box<Self) {}\n-   |                                      ^ expected one of 9 possible tokens\n+   |                                      ^ expected one of 7 possible tokens\n    |\n help: you might have meant to end the type parameters here\n    |"}, {"sha": "c9ebf133588bfdd774aa9ef980b3c5a8e2e1be3d", "filename": "src/test/ui/parser/issues/issue-84117.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -6,4 +6,4 @@ fn main() {\n     //~| ERROR expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n     //~| ERROR expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n }\n-//~^ ERROR expected one of `,`, `:`, `=`, or `>`, found `}`\n+//~^ ERROR expected one of `,` or `>`, found `}`"}, {"sha": "237bc11bd060ddfc37d86df2af234a99a0d6d23f", "filename": "src/test/ui/parser/issues/issue-84117.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -21,11 +21,11 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, fo\n LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n    |                                                                 ^ expected one of 8 possible tokens\n \n-error: expected one of `,`, `:`, `=`, or `>`, found `}`\n+error: expected one of `,` or `>`, found `}`\n   --> $DIR/issue-84117.rs:8:1\n    |\n LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n-   |         ----------- while parsing the type for `outer_local`       - expected one of `,`, `:`, `=`, or `>`\n+   |         ----------- while parsing the type for `outer_local`       - expected one of `,` or `>`\n ...\n LL | }\n    | ^ unexpected token"}, {"sha": "ee554784b3a247c4772751f52a90e21aa338aa4a", "filename": "src/test/ui/parser/issues/issue-93282.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -4,11 +4,11 @@ error: expected `while`, `for`, `loop` or `{` after a label\n LL |     f<'a,>\n    |         ^ expected `while`, `for`, `loop` or `{` after a label\n \n-error: expected one of `.`, `:`, `;`, `?`, `for`, `loop`, `while`, `{`, `}`, or an operator, found `,`\n+error: expected one of `.`, `:`, `;`, `?`, `for`, `loop`, `while`, `}`, or an operator, found `,`\n   --> $DIR/issue-93282.rs:2:9\n    |\n LL |     f<'a,>\n-   |         ^ expected one of 10 possible tokens\n+   |         ^ expected one of 9 possible tokens\n    |\n help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |"}, {"sha": "507447923915b843507704d5c892d69e5dd747bc", "filename": "src/test/ui/parser/issues/issue-93867.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,10 @@\n+pub struct Entry<'a, K, V> {\n+    k: &'a mut K,\n+    v: V,\n+}\n+\n+pub fn entry<'a, K, V>() -> Entry<'a K, V> {\n+//                                  ^ missing comma\n+//~^^ expected one of `,` or `>`, found `K`\n+    unimplemented!()\n+}"}, {"sha": "ee0cb4efd74c136372919ad055fcf969185adf25", "filename": "src/test/ui/parser/issues/issue-93867.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,13 @@\n+error: expected one of `,` or `>`, found `K`\n+  --> $DIR/issue-93867.rs:6:38\n+   |\n+LL | pub fn entry<'a, K, V>() -> Entry<'a K, V> {\n+   |                                      ^ expected one of `,` or `>`\n+   |\n+help: you might have meant to end the type parameters here\n+   |\n+LL | pub fn entry<'a, K, V>() -> Entry<'a> K, V> {\n+   |                                     +\n+\n+error: aborting due to previous error\n+"}, {"sha": "482b7704695c371ef705df2b891ae9cabf98b9e7", "filename": "src/test/ui/parser/lifetime-semicolon.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.fixed?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -5,6 +5,6 @@ struct Foo<'a, 'b> {\n }\n \n fn foo<'a, 'b>(_x: &mut Foo<'a, 'b>) {}\n-//~^ ERROR expected one of `,`, `:`, `=`, or `>`, found `;`\n+//~^ ERROR expected one of `,` or `>`, found `;`\n \n fn main() {}"}, {"sha": "21c8b0a7f88b3d49e12a1112bb9a644121798152", "filename": "src/test/ui/parser/lifetime-semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -5,6 +5,6 @@ struct Foo<'a, 'b> {\n }\n \n fn foo<'a, 'b>(_x: &mut Foo<'a; 'b>) {}\n-//~^ ERROR expected one of `,`, `:`, `=`, or `>`, found `;`\n+//~^ ERROR expected one of `,` or `>`, found `;`\n \n fn main() {}"}, {"sha": "ee486c2366c9537d412e85921a69e198ea280132", "filename": "src/test/ui/parser/lifetime-semicolon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `,`, `:`, `=`, or `>`, found `;`\n+error: expected one of `,` or `>`, found `;`\n   --> $DIR/lifetime-semicolon.rs:7:31\n    |\n LL | fn foo<'a, 'b>(_x: &mut Foo<'a; 'b>) {}\n-   |                               ^ expected one of `,`, `:`, `=`, or `>`\n+   |                               ^ expected one of `,` or `>`\n    |\n help: use a comma to separate type parameters\n    |"}, {"sha": "0bf52854ec206d64717710fae077a9c72d69fc32", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -59,11 +59,11 @@ error: expected `while`, `for`, `loop` or `{` after a label\n LL |     let _ = f<'_, i8>();\n    |                 ^ expected `while`, `for`, `loop` or `{` after a label\n \n-error: expected one of `.`, `:`, `;`, `?`, `else`, `for`, `loop`, `while`, `{`, or an operator, found `,`\n+error: expected one of `.`, `:`, `;`, `?`, `else`, `for`, `loop`, `while`, or an operator, found `,`\n   --> $DIR/require-parens-for-chained-comparison.rs:22:17\n    |\n LL |     let _ = f<'_, i8>();\n-   |                 ^ expected one of 10 possible tokens\n+   |                 ^ expected one of 9 possible tokens\n    |\n help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |"}, {"sha": "9b7c0d7cc6e2e4671c31ea8234674dda1b7afbc4", "filename": "src/test/ui/typeck/issue-74086.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     static BUG: fn(_) -> u8 = |_| 8;\n     //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions [E0121]\n+    //~| ERROR the placeholder `_` is not allowed within types on item signatures for static items\n }"}, {"sha": "95ebf9a906c142beac58223f9f84cb8aed9b255a", "filename": "src/test/ui/typeck/issue-74086.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -4,6 +4,12 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL |     static BUG: fn(_) -> u8 = |_| 8;\n    |                    ^ not allowed in type signatures\n \n-error: aborting due to previous error\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static items\n+  --> $DIR/issue-74086.rs:2:20\n+   |\n+LL |     static BUG: fn(_) -> u8 = |_| 8;\n+   |                    ^ not allowed in type signatures\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0121`."}, {"sha": "fb3949478a4d3e758ecd33a2ed602a2341d49de4", "filename": "src/test/ui/typeck/issue-81885.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -1,8 +1,9 @@\n const TEST4: fn() -> _ = 42;\n                   //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+                  //~| ERROR the placeholder `_` is not allowed within types on item signatures for constant items\n \n fn main() {\n     const TEST5: fn() -> _ = 42;\n                       //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n-\n+                      //~| ERROR the placeholder `_` is not allowed within types on item signatures for constant items\n }"}, {"sha": "91c08bd8235029634b22313c37754ecd02746b0f", "filename": "src/test/ui/typeck/issue-81885.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -4,12 +4,24 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL | const TEST4: fn() -> _ = 42;\n    |                      ^ not allowed in type signatures\n \n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constant items\n+  --> $DIR/issue-81885.rs:1:22\n+   |\n+LL | const TEST4: fn() -> _ = 42;\n+   |                      ^ not allowed in type signatures\n+\n error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/issue-81885.rs:5:26\n+  --> $DIR/issue-81885.rs:6:26\n+   |\n+LL |     const TEST5: fn() -> _ = 42;\n+   |                          ^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constant items\n+  --> $DIR/issue-81885.rs:6:26\n    |\n LL |     const TEST5: fn() -> _ = 42;\n    |                          ^ not allowed in type signatures\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0121`."}, {"sha": "4435cba0207651dbc1c87f9fa61f6e73b58db997", "filename": "src/test/ui/typeck/issue-88643.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-88643.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-88643.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-88643.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for the ICE described in #88643. Specifically:\n+// https://github.com/rust-lang/rust/issues/88643#issuecomment-913128893\n+// and https://github.com/rust-lang/rust/issues/88643#issuecomment-913171935\n+// and https://github.com/rust-lang/rust/issues/88643#issuecomment-913765984\n+\n+use std::collections::HashMap;\n+\n+pub trait T {}\n+\n+static CALLBACKS: HashMap<*const dyn T, dyn FnMut(&mut _) + 'static> = HashMap::new();\n+//~^ ERROR: the placeholder `_` is not allowed within types on item signatures for static items [E0121]\n+\n+static CALLBACKS2: Vec<dyn Fn(& _)> = Vec::new();\n+//~^ ERROR: the placeholder `_` is not allowed within types on item signatures for static items [E0121]\n+\n+static CALLBACKS3: Option<dyn Fn(& _)> = None;\n+//~^ ERROR: the placeholder `_` is not allowed within types on item signatures for static items [E0121]\n+\n+fn main() {}"}, {"sha": "d5d596b6f428444b6a3b96adaa819aba54e0f1bc", "filename": "src/test/ui/typeck/issue-88643.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-88643.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Fissue-88643.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-88643.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -0,0 +1,21 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static items\n+  --> $DIR/issue-88643.rs:10:56\n+   |\n+LL | static CALLBACKS: HashMap<*const dyn T, dyn FnMut(&mut _) + 'static> = HashMap::new();\n+   |                                                        ^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static items\n+  --> $DIR/issue-88643.rs:13:33\n+   |\n+LL | static CALLBACKS2: Vec<dyn Fn(& _)> = Vec::new();\n+   |                                 ^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static items\n+  --> $DIR/issue-88643.rs:16:36\n+   |\n+LL | static CALLBACKS3: Option<dyn Fn(& _)> = None;\n+   |                                    ^ not allowed in type signatures\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "c459d8c3cdc17663f567cc8dcfd9016394864558", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -12,6 +12,7 @@ const TEST3: _ = Some(42);\n \n const TEST4: fn() -> _ = 42;\n //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+//~| ERROR the placeholder `_` is not allowed within types on item signatures for constant items\n \n trait Test5 {\n     const TEST5: _ = 42;"}, {"sha": "07a5dbd93c7432019860cc177d5b5a6bb481da0b", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -31,8 +31,14 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL | const TEST4: fn() -> _ = 42;\n    |                      ^ not allowed in type signatures\n \n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constant items\n+  --> $DIR/typeck_type_placeholder_item_help.rs:13:22\n+   |\n+LL | const TEST4: fn() -> _ = 42;\n+   |                      ^ not allowed in type signatures\n+\n error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item_help.rs:17:18\n+  --> $DIR/typeck_type_placeholder_item_help.rs:18:18\n    |\n LL |     const TEST5: _ = 42;\n    |                  ^\n@@ -41,14 +47,14 @@ LL |     const TEST5: _ = 42;\n    |                  help: replace with the correct type: `i32`\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item_help.rs:24:18\n+  --> $DIR/typeck_type_placeholder_item_help.rs:25:18\n    |\n LL |     const TEST6: _ = 13;\n    |                  ^\n    |                  |\n    |                  not allowed in type signatures\n    |                  help: replace with the correct type: `i32`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0121`."}, {"sha": "bc2946e2c135426fda022bb56f745e37e3e6f67b", "filename": "src/tools/compiletest/src/raise_fd_limit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -4,7 +4,7 @@\n /// on the number of cores available.\n ///\n /// This fixes issue #7772.\n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n #[allow(non_camel_case_types)]\n pub unsafe fn raise_fd_limit() {\n     use std::cmp;"}, {"sha": "215af347f17d219d09939a88e811101ea3334b8d", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdec3c8abdc48e46715d7b14b764af28da1cee3/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=3bdec3c8abdc48e46715d7b14b764af28da1cee3", "patch": "@@ -31,6 +31,7 @@ const OS_TABLE: &[(&str, &str)] = &[\n     (\"redox\", \"redox\"),\n     (\"sgx\", \"sgx\"),\n     (\"solaris\", \"solaris\"),\n+    (\"watchos\", \"watchos\"),\n     (\"win32\", \"windows\"),\n     (\"windows\", \"windows\"),\n     (\"vxworks\", \"vxworks\"),"}]}