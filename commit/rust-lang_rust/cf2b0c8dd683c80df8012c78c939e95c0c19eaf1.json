{"sha": "cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMmIwYzhkZDY4M2M4MGRmODAxMmM3OGM5MzllOTVjMGMxOWVhZjE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-08-22T16:29:29Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-08-22T16:29:29Z"}, "message": "New cmp_null lint (fixes #1184) (#1186)\n\n* new cmp_null lint (fixes #1184)\r\n\r\n* adressed comments (still fails)\r\n\r\n* fixed tests, dogfood, ran update_lints", "tree": {"sha": "64e049165d756258374f8b0550a227ec39480694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64e049165d756258374f8b0550a227ec39480694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "html_url": "https://github.com/rust-lang/rust/commit/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0474fe27ea62f84b8f35709f68f41b43e0c97294", "url": "https://api.github.com/repos/rust-lang/rust/commits/0474fe27ea62f84b8f35709f68f41b43e0c97294", "html_url": "https://github.com/rust-lang/rust/commit/0474fe27ea62f84b8f35709f68f41b43e0c97294"}], "stats": {"total": 97, "additions": 81, "deletions": 16}, "files": [{"sha": "f0e495961b011f630f317d1e335317cdcf6a6b25", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "patch": "@@ -180,6 +180,7 @@ All notable changes to this project will be documented in this file.\n [`clone_double_ref`]: https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref\n [`clone_on_copy`]: https://github.com/Manishearth/rust-clippy/wiki#clone_on_copy\n [`cmp_nan`]: https://github.com/Manishearth/rust-clippy/wiki#cmp_nan\n+[`cmp_null`]: https://github.com/Manishearth/rust-clippy/wiki#cmp_null\n [`cmp_owned`]: https://github.com/Manishearth/rust-clippy/wiki#cmp_owned\n [`collapsible_if`]: https://github.com/Manishearth/rust-clippy/wiki#collapsible_if\n [`crosspointer_transmute`]: https://github.com/Manishearth/rust-clippy/wiki#crosspointer_transmute"}, {"sha": "401126165325388578810f2e788f74ee236bf023", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 166 lints included in this crate:\n+There are 167 lints included in this crate:\n \n name                                                                                                                 | default | triggers on\n ---------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -42,6 +42,7 @@ name\n [clone_double_ref](https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref)                                 | warn    | using `clone` on `&&T`\n [clone_on_copy](https://github.com/Manishearth/rust-clippy/wiki#clone_on_copy)                                       | warn    | using `clone` on a `Copy` type\n [cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                                   | deny    | comparisons to NAN, which will always return false, probably not intended\n+[cmp_null](https://github.com/Manishearth/rust-clippy/wiki#cmp_null)                                                 | warn    | comparing a pointer to a null pointer, suggesting to use `.is_null()` instead.\n [cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                               | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n [collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                                     | warn    | `if`s that can be collapsed (e.g. `if x { if y { ... } }` and `else { if x { ... } }`)\n [crosspointer_transmute](https://github.com/Manishearth/rust-clippy/wiki#crosspointer_transmute)                     | warn    | transmutes that have to or from types that are a pointer to the other\n@@ -131,7 +132,7 @@ name\n [precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                                             | warn    | operations where precedence may be unclear\n [print_stdout](https://github.com/Manishearth/rust-clippy/wiki#print_stdout)                                         | allow   | printing on stdout\n [print_with_newline](https://github.com/Manishearth/rust-clippy/wiki#print_with_newline)                             | warn    | using `print!()` with a format string that ends in a newline\n-[ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                                   | warn    | arguments of the type `&Vec<...>` (instead of `&[...]`) or `&String` (instead of `&str`)\n+[ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                                   | warn    | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n [range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)                             | warn    | using `Range::step_by(0)`, which produces an infinite iterator\n [range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                             | warn    | zipping iterator with a range when `enumerate()` would do\n [redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                               | warn    | redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)"}, {"sha": "07d504f75ad20828729e219bf40cbfa3a5c1ece9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "patch": "@@ -112,7 +112,7 @@ pub mod overflow_check_conditional;\n pub mod panic;\n pub mod precedence;\n pub mod print;\n-pub mod ptr_arg;\n+pub mod ptr;\n pub mod ranges;\n pub mod regex;\n pub mod returns;\n@@ -182,7 +182,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box enum_glob_use::EnumGlobUse);\n     reg.register_late_lint_pass(box enum_clike::UnportableVariant);\n     reg.register_late_lint_pass(box bit_mask::BitMask);\n-    reg.register_late_lint_pass(box ptr_arg::PtrArg);\n+    reg.register_late_lint_pass(box ptr::PointerPass);\n     reg.register_late_lint_pass(box needless_bool::NeedlessBool);\n     reg.register_late_lint_pass(box needless_bool::BoolComparison);\n     reg.register_late_lint_pass(box approx_const::Pass);\n@@ -405,7 +405,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         panic::PANIC_PARAMS,\n         precedence::PRECEDENCE,\n         print::PRINT_WITH_NEWLINE,\n-        ptr_arg::PTR_ARG,\n+        ptr::CMP_NULL,\n+        ptr::PTR_ARG,\n         ranges::RANGE_STEP_BY_ZERO,\n         ranges::RANGE_ZIP_WITH_LEN,\n         regex::INVALID_REGEX,"}, {"sha": "dea950ac063ef8cf6e261337d510172aca84d662", "filename": "clippy_lints/src/ptr.rs", "status": "renamed", "additions": 52, "deletions": 11, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "patch": "@@ -5,14 +5,14 @@ use rustc::hir::map::NodeItem;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::NodeId;\n-use utils::{match_type, paths, span_lint};\n+use utils::{match_path, match_type, paths, span_lint};\n \n-/// **What it does:** Checks for function arguments of type `&String` or `&Vec`\n-/// unless the references are mutable.\n+/// **What it does:** This lint checks for function arguments of type `&String` or `&Vec` unless\n+/// the references are mutable.\n ///\n-/// **Why is this bad?** Requiring the argument to be of the specific size makes\n-/// the function less useful for no benefit; slices in the form of `&[T]` or\n-/// `&str` usually suffice and can be obtained from other types, too.\n+/// **Why is this bad?** Requiring the argument to be of the specific size makes the function less\n+/// useful for no benefit; slices in the form of `&[T]` or `&str` usually suffice and can be\n+/// obtained from other types, too.\n ///\n /// **Known problems:** None.\n ///\n@@ -23,19 +23,38 @@ use utils::{match_type, paths, span_lint};\n declare_lint! {\n     pub PTR_ARG,\n     Warn,\n-    \"arguments of the type `&Vec<...>` (instead of `&[...]`) or `&String` (instead of `&str`)\"\n+    \"fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` \\\n+     instead, respectively\"\n }\n \n+/// **What it does:** This lint checks for equality comparisons with `ptr::null`\n+///\n+/// **Why is this bad?** It's easier and more readable to use the inherent `.is_null()`\n+/// method instead\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// if x == ptr::null { .. }\n+/// ```\n+declare_lint! {\n+    pub CMP_NULL,\n+    Warn,\n+    \"comparing a pointer to a null pointer, suggesting to use `.is_null()` instead.\"\n+}\n+\n+\n #[derive(Copy,Clone)]\n-pub struct PtrArg;\n+pub struct PointerPass;\n \n-impl LintPass for PtrArg {\n+impl LintPass for PointerPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(PTR_ARG)\n+        lint_array!(PTR_ARG, CMP_NULL)\n     }\n }\n \n-impl LateLintPass for PtrArg {\n+impl LateLintPass for PointerPass {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n         if let ItemFn(ref decl, _, _, _, _, _) = item.node {\n             check_fn(cx, decl, item.id);\n@@ -58,6 +77,17 @@ impl LateLintPass for PtrArg {\n             check_fn(cx, &sig.decl, item.id);\n         }\n     }\n+    \n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if let ExprBinary(ref op, ref l, ref r) = expr.node {\n+            if (op.node == BiEq || op.node == BiNe) && (is_null_path(l) || is_null_path(r)) {\n+                span_lint(cx,\n+                          CMP_NULL,\n+                          expr.span,\n+                          \"Comparing with null is better expressed by the .is_null() method\");\n+            }\n+        }\n+    }\n }\n \n fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId) {\n@@ -81,3 +111,14 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId) {\n         }\n     }\n }\n+\n+fn is_null_path(expr: &Expr) -> bool {\n+    if let ExprCall(ref pathexp, ref args) = expr.node {\n+        if args.is_empty() {\n+            if let ExprPath(_, ref path) = pathexp.node {\n+                return match_path(path, &paths::PTR_NULL) || match_path(path, &paths::PTR_NULL_MUT)\n+            }\n+        }\n+    }\n+    false\n+}", "previous_filename": "clippy_lints/src/ptr_arg.rs"}, {"sha": "a652d0f42f829db6c6ef28860bf5c9cf4d6d492b", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "patch": "@@ -31,6 +31,8 @@ pub const MUTEX: [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const OPEN_OPTIONS: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&'static str; 2] = [\"core\", \"ops\"];\n pub const OPTION: [&'static str; 3] = [\"core\", \"option\", \"Option\"];\n+pub const PTR_NULL: [&'static str; 2] = [\"ptr\", \"null\"];\n+pub const PTR_NULL_MUT: [&'static str; 2] = [\"ptr\", \"null_mut\"];\n pub const RANGE: [&'static str; 3] = [\"core\", \"ops\", \"Range\"];\n pub const RANGE_FROM: [&'static str; 3] = [\"core\", \"ops\", \"RangeFrom\"];\n pub const RANGE_FROM_STD: [&'static str; 3] = [\"std\", \"ops\", \"RangeFrom\"];"}, {"sha": "a55ea6f5bca29fdc8294310a8c0fc67146280ad8", "filename": "tests/compile-fail/cmp_null.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/tests%2Fcompile-fail%2Fcmp_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1/tests%2Fcompile-fail%2Fcmp_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_null.rs?ref=cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "patch": "@@ -0,0 +1,19 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(cmp_null)]\n+#![allow(unused_mut)]\n+\n+use std::ptr;\n+\n+fn main() {\n+    let x = 0;\n+    let p : *const usize = &x;\n+    if p == ptr::null() { //~ERROR:  Comparing with null\n+        println!(\"This is surprising!\");\n+    }\n+    let mut y = 0;\n+    let mut m : *mut usize = &mut y;\n+    if m == ptr::null_mut() { //~ERROR:  Comparing with null\n+        println!(\"This is surprising, too!\");\n+    }\n+}"}]}