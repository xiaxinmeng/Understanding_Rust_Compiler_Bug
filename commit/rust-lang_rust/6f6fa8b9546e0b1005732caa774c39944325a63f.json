{"sha": "6f6fa8b9546e0b1005732caa774c39944325a63f", "node_id": "C_kwDOAAsO6NoAKDZmNmZhOGI5NTQ2ZTBiMTAwNTczMmNhYTc3NGMzOTk0NDMyNWE2M2Y", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-21T21:08:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-21T21:08:57Z"}, "message": "Use SortedMap in HIR.", "tree": {"sha": "946a09673616a259c9db9da45f4dc10e6fd295ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/946a09673616a259c9db9da45f4dc10e6fd295ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f6fa8b9546e0b1005732caa774c39944325a63f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6fa8b9546e0b1005732caa774c39944325a63f", "html_url": "https://github.com/rust-lang/rust/commit/6f6fa8b9546e0b1005732caa774c39944325a63f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f6fa8b9546e0b1005732caa774c39944325a63f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e015ef5b2633960e7653b744d7a1c3d1d336313a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e015ef5b2633960e7653b744d7a1c3d1d336313a", "html_url": "https://github.com/rust-lang/rust/commit/e015ef5b2633960e7653b744d7a1c3d1d336313a"}], "stats": {"total": 112, "additions": 55, "deletions": 57}, "files": [{"sha": "8a9dad2cdd7d86635425ed9853b012abe1003f37", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=6f6fa8b9546e0b1005732caa774c39944325a63f", "patch": "@@ -1,4 +1,5 @@\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sorted_map::SortedMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::definitions;\n@@ -9,14 +10,13 @@ use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{Span, DUMMY_SP};\n \n-use std::iter::repeat;\n use tracing::debug;\n \n /// A visitor that walks over the HIR and collects `Node`s into a HIR map.\n pub(super) struct NodeCollector<'a, 'hir> {\n     /// Source map\n     source_map: &'a SourceMap,\n-    bodies: &'a IndexVec<ItemLocalId, Option<&'hir Body<'hir>>>,\n+    bodies: &'a SortedMap<ItemLocalId, &'hir Body<'hir>>,\n \n     /// Outputs\n     nodes: IndexVec<ItemLocalId, Option<ParentedNode<'hir>>>,\n@@ -30,21 +30,11 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     definitions: &'a definitions::Definitions,\n }\n \n-fn insert_vec_map<K: Idx, V: Clone>(map: &mut IndexVec<K, Option<V>>, k: K, v: V) {\n-    let i = k.index();\n-    let len = map.len();\n-    if i >= len {\n-        map.extend(repeat(None).take(i - len + 1));\n-    }\n-    debug_assert!(map[k].is_none());\n-    map[k] = Some(v);\n-}\n-\n pub(super) fn index_hir<'hir>(\n     sess: &Session,\n     definitions: &definitions::Definitions,\n     item: hir::OwnerNode<'hir>,\n-    bodies: &IndexVec<ItemLocalId, Option<&'hir Body<'hir>>>,\n+    bodies: &SortedMap<ItemLocalId, &'hir Body<'hir>>,\n ) -> (IndexVec<ItemLocalId, Option<ParentedNode<'hir>>>, FxHashMap<LocalDefId, ItemLocalId>) {\n     let mut nodes = IndexVec::new();\n     // This node's parent should never be accessed: the owner's parent is computed by the\n@@ -94,11 +84,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             }\n         }\n \n-        insert_vec_map(\n-            &mut self.nodes,\n-            hir_id.local_id,\n-            ParentedNode { parent: self.parent_node, node: node },\n-        );\n+        self.nodes.insert(hir_id.local_id, ParentedNode { parent: self.parent_node, node: node });\n     }\n \n     fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_node_id: HirId, f: F) {\n@@ -144,7 +130,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_nested_body(&mut self, id: BodyId) {\n         debug_assert_eq!(id.hir_id.owner, self.owner);\n-        let body = self.bodies[id.hir_id.local_id].unwrap();\n+        let body = self.bodies[&id.hir_id.local_id];\n         self.visit_body(body);\n     }\n "}, {"sha": "63b20cd320b37b60ef04f67f0acd4b81f1c79625", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=6f6fa8b9546e0b1005732caa774c39944325a63f", "patch": "@@ -974,8 +974,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let body = hir::Body { generator_kind: self.generator_kind, params, value };\n         let id = body.id();\n         debug_assert_eq!(id.hir_id.owner, self.current_hir_id_owner);\n-        self.bodies.ensure_contains_elem(id.hir_id.local_id, || None);\n-        self.bodies[id.hir_id.local_id] = Some(self.arena.alloc(body));\n+        self.bodies.push((id.hir_id.local_id, self.arena.alloc(body)));\n         id\n     }\n "}, {"sha": "79464a751721751ddfcce69776513184901395dd", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=6f6fa8b9546e0b1005732caa774c39944325a63f", "patch": "@@ -44,6 +44,7 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n@@ -66,7 +67,6 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n use smallvec::SmallVec;\n-use std::collections::BTreeMap;\n use tracing::{debug, trace};\n \n macro_rules! arena_vec {\n@@ -103,9 +103,9 @@ struct LoweringContext<'a, 'hir: 'a> {\n     /// The items being lowered are collected here.\n     owners: IndexVec<LocalDefId, Option<hir::OwnerInfo<'hir>>>,\n     /// Bodies inside the owner being lowered.\n-    bodies: IndexVec<hir::ItemLocalId, Option<&'hir hir::Body<'hir>>>,\n+    bodies: Vec<(hir::ItemLocalId, &'hir hir::Body<'hir>)>,\n     /// Attributes inside the owner being lowered.\n-    attrs: BTreeMap<hir::ItemLocalId, &'hir [Attribute]>,\n+    attrs: SortedMap<hir::ItemLocalId, &'hir [Attribute]>,\n \n     generator_kind: Option<hir::GeneratorKind>,\n \n@@ -300,8 +300,8 @@ pub fn lower_crate<'a, 'hir>(\n         nt_to_tokenstream,\n         arena,\n         owners,\n-        bodies: IndexVec::new(),\n-        attrs: BTreeMap::default(),\n+        bodies: Vec::new(),\n+        attrs: SortedMap::new(),\n         catch_scope: None,\n         loop_scope: None,\n         is_in_loop_condition: false,\n@@ -478,7 +478,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n     fn make_owner_info(&mut self, node: hir::OwnerNode<'hir>) -> hir::OwnerInfo<'hir> {\n         let attrs = std::mem::take(&mut self.attrs);\n-        let bodies = std::mem::take(&mut self.bodies);\n+        let mut bodies = std::mem::take(&mut self.bodies);\n         let local_node_ids = std::mem::take(&mut self.local_node_ids);\n         let trait_map = local_node_ids\n             .into_iter()\n@@ -490,13 +490,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .collect();\n \n         #[cfg(debug_assertions)]\n-        for (&id, attrs) in attrs.iter() {\n+        for (id, attrs) in attrs.iter() {\n             // Verify that we do not store empty slices in the map.\n             if attrs.is_empty() {\n                 panic!(\"Stored empty attributes for {:?}\", id);\n             }\n         }\n \n+        bodies.sort_by_key(|(k, _)| *k);\n+        let bodies = SortedMap::from_presorted_elements(bodies);\n         let (hash_including_bodies, hash_without_bodies) = self.hash_owner(node, &bodies);\n         let (nodes, parenting) =\n             index::index_hir(self.sess, self.resolver.definitions(), node, &bodies);\n@@ -517,7 +519,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn hash_owner(\n         &mut self,\n         node: hir::OwnerNode<'hir>,\n-        bodies: &IndexVec<hir::ItemLocalId, Option<&'hir hir::Body<'hir>>>,\n+        bodies: &SortedMap<hir::ItemLocalId, &'hir hir::Body<'hir>>,\n     ) -> (Fingerprint, Fingerprint) {\n         let mut hcx = self.resolver.create_stable_hashing_context();\n         let mut stable_hasher = StableHasher::new();"}, {"sha": "9efea1228ab29e8ad42783aee9adc7165ef2f5a8", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=6f6fa8b9546e0b1005732caa774c39944325a63f", "patch": "@@ -1,3 +1,4 @@\n+use crate::stable_hasher::{HashStable, StableHasher};\n use std::borrow::Borrow;\n use std::cmp::Ordering;\n use std::iter::FromIterator;\n@@ -16,17 +17,26 @@ pub use index_map::SortedIndexMultiMap;\n /// stores data in a more compact way. It also supports accessing contiguous\n /// ranges of elements as a slice, and slices of already sorted elements can be\n /// inserted efficiently.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Default, Debug, Encodable, Decodable)]\n-pub struct SortedMap<K: Ord, V> {\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n+pub struct SortedMap<K, V> {\n     data: Vec<(K, V)>,\n }\n \n-impl<K: Ord, V> SortedMap<K, V> {\n+impl<K, V> Default for SortedMap<K, V> {\n+    #[inline]\n+    fn default() -> SortedMap<K, V> {\n+        SortedMap { data: Vec::new() }\n+    }\n+}\n+\n+impl<K, V> SortedMap<K, V> {\n     #[inline]\n-    pub fn new() -> SortedMap<K, V> {\n-        SortedMap { data: vec![] }\n+    pub const fn new() -> SortedMap<K, V> {\n+        SortedMap { data: Vec::new() }\n     }\n+}\n \n+impl<K: Ord, V> SortedMap<K, V> {\n     /// Construct a `SortedMap` from a presorted set of elements. This is faster\n     /// than creating an empty map and then inserting the elements individually.\n     ///\n@@ -281,5 +291,12 @@ impl<K: Ord, V> FromIterator<(K, V)> for SortedMap<K, V> {\n     }\n }\n \n+impl<K: HashStable<CTX>, V: HashStable<CTX>, CTX> HashStable<CTX> for SortedMap<K, V> {\n+    #[inline]\n+    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n+        self.data.hash_stable(ctx, hasher);\n+    }\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "a441a635c1eb37ce6b0e3474eeefd97eba449243", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=6f6fa8b9546e0b1005732caa774c39944325a63f", "patch": "@@ -12,6 +12,7 @@ pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sorted_map::SortedMap;\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::Spanned;\n@@ -22,7 +23,6 @@ use rustc_target::asm::InlineAsmRegOrRegClass;\n use rustc_target::spec::abi::Abi;\n \n use smallvec::SmallVec;\n-use std::collections::BTreeMap;\n use std::fmt;\n \n #[derive(Copy, Clone, Encodable, HashStable_Generic)]\n@@ -676,13 +676,13 @@ pub struct ParentedNode<'tcx> {\n /// Attributes owned by a HIR owner.\n #[derive(Debug)]\n pub struct AttributeMap<'tcx> {\n-    pub map: BTreeMap<ItemLocalId, &'tcx [Attribute]>,\n+    pub map: SortedMap<ItemLocalId, &'tcx [Attribute]>,\n     pub hash: Fingerprint,\n }\n \n impl<'tcx> AttributeMap<'tcx> {\n     pub const EMPTY: &'static AttributeMap<'static> =\n-        &AttributeMap { map: BTreeMap::new(), hash: Fingerprint::ZERO };\n+        &AttributeMap { map: SortedMap::new(), hash: Fingerprint::ZERO };\n \n     #[inline]\n     pub fn get(&self, id: ItemLocalId) -> &'tcx [Attribute] {\n@@ -705,7 +705,7 @@ pub struct OwnerNodes<'tcx> {\n     // used.\n     pub nodes: IndexVec<ItemLocalId, Option<ParentedNode<'tcx>>>,\n     /// Content of local bodies.\n-    pub bodies: IndexVec<ItemLocalId, Option<&'tcx Body<'tcx>>>,\n+    pub bodies: SortedMap<ItemLocalId, &'tcx Body<'tcx>>,\n }\n \n /// Full information resulting from lowering an AST node."}, {"sha": "8f52e16c2ebe41e7873d6893dc0917be4e1a37a4", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=6f6fa8b9546e0b1005732caa774c39944325a63f", "patch": "@@ -376,7 +376,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n-        self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[id.hir_id.local_id].unwrap()\n+        self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]\n     }\n \n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {\n@@ -495,13 +495,10 @@ impl<'hir> Map<'hir> {\n             .iter_enumerated()\n             .flat_map(move |(owner, owner_info)| {\n                 let bodies = &owner_info.as_ref()?.nodes.bodies;\n-                Some(bodies.iter_enumerated().filter_map(move |(local_id, body)| {\n-                    if body.is_none() {\n-                        return None;\n-                    }\n+                Some(bodies.iter().map(move |&(local_id, _)| {\n                     let hir_id = HirId { owner, local_id };\n                     let body_id = BodyId { hir_id };\n-                    Some(self.body_owner_def_id(body_id))\n+                    self.body_owner_def_id(body_id)\n                 }))\n             })\n             .flatten()\n@@ -515,13 +512,10 @@ impl<'hir> Map<'hir> {\n         par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {\n             let owner = LocalDefId::new(owner);\n             if let Some(owner_info) = owner_info {\n-                par_iter(&owner_info.nodes.bodies.raw).enumerate().for_each(|(local_id, body)| {\n-                    if body.is_some() {\n-                        let local_id = ItemLocalId::new(local_id);\n-                        let hir_id = HirId { owner, local_id };\n-                        let body_id = BodyId { hir_id };\n-                        f(self.body_owner_def_id(body_id))\n-                    }\n+                par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {\n+                    let hir_id = HirId { owner, local_id: *local_id };\n+                    let body_id = BodyId { hir_id };\n+                    f(self.body_owner_def_id(body_id))\n                 })\n             }\n         });\n@@ -578,8 +572,8 @@ impl<'hir> Map<'hir> {\n         let krate = self.krate();\n         for (owner, info) in krate.owners.iter_enumerated() {\n             if let Some(info) = info {\n-                for (&local_id, attrs) in info.attrs.map.iter() {\n-                    let id = HirId { owner, local_id };\n+                for (local_id, attrs) in info.attrs.map.iter() {\n+                    let id = HirId { owner, local_id: *local_id };\n                     for a in *attrs {\n                         visitor.visit_attribute(id, a)\n                     }"}, {"sha": "5f31fa04b8a6e1c099a846cf76a28ffa09462e65", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=6f6fa8b9546e0b1005732caa774c39944325a63f", "patch": "@@ -1,12 +1,12 @@\n use crate::ich;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::definitions::{DefPathHash, Definitions};\n-use rustc_index::vec::IndexVec;\n use rustc_session::cstore::CrateStore;\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n@@ -51,7 +51,7 @@ pub(super) enum BodyResolver<'tcx> {\n     Traverse {\n         hash_bodies: bool,\n         owner: LocalDefId,\n-        bodies: &'tcx IndexVec<hir::ItemLocalId, Option<&'tcx hir::Body<'tcx>>>,\n+        bodies: &'tcx SortedMap<hir::ItemLocalId, &'tcx hir::Body<'tcx>>,\n     },\n }\n \n@@ -122,7 +122,7 @@ impl<'a> StableHashingContext<'a> {\n         &mut self,\n         hash_bodies: bool,\n         owner: LocalDefId,\n-        bodies: &'a IndexVec<hir::ItemLocalId, Option<&'a hir::Body<'a>>>,\n+        bodies: &'a SortedMap<hir::ItemLocalId, &'a hir::Body<'a>>,\n         f: impl FnOnce(&mut Self),\n     ) {\n         let prev = self.body_resolver;"}, {"sha": "3a0aab81fdb7b257b32908ba0aaf26482bc8195e", "filename": "compiler/rustc_query_system/src/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fa8b9546e0b1005732caa774c39944325a63f/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs?ref=6f6fa8b9546e0b1005732caa774c39944325a63f", "patch": "@@ -33,7 +33,7 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n             BodyResolver::Traverse { hash_bodies: false, .. } => {}\n             BodyResolver::Traverse { hash_bodies: true, owner, bodies } => {\n                 assert_eq!(id.hir_id.owner, owner);\n-                bodies[id.hir_id.local_id].unwrap().hash_stable(hcx, hasher);\n+                bodies[&id.hir_id.local_id].hash_stable(hcx, hasher);\n             }\n         }\n     }"}]}