{"sha": "45db716902f93cd7f9fb7300f48a18db07a1dd5f", "node_id": "C_kwDOAAsO6NoAKDQ1ZGI3MTY5MDJmOTNjZDdmOWZiNzMwMGY0OGExOGRiMDdhMWRkNWY", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-03T23:03:12Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-16T22:02:36Z"}, "message": "Replace NestedVisitorMap with NestedFilter", "tree": {"sha": "dfad0673495e975ec5513359c7778ea7e192ef2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfad0673495e975ec5513359c7778ea7e192ef2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45db716902f93cd7f9fb7300f48a18db07a1dd5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45db716902f93cd7f9fb7300f48a18db07a1dd5f", "html_url": "https://github.com/rust-lang/rust/commit/45db716902f93cd7f9fb7300f48a18db07a1dd5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45db716902f93cd7f9fb7300f48a18db07a1dd5f/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "html_url": "https://github.com/rust-lang/rust/commit/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9"}], "stats": {"total": 768, "additions": 257, "deletions": 511}, "files": [{"sha": "62935a2b1f718753aab726119dd05670ba74ee5e", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::sorted_map::SortedMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::definitions;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::*;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::Session;\n@@ -101,16 +101,10 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n }\n \n impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n-    type Map = !;\n-\n     /// Because we want to track parent items and so forth, enable\n     /// deep walking so that we walk nested items in the context of\n     /// their outer items.\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        panic!(\"`visit_nested_xxx` must be manually implemented in this visitor\");\n-    }\n-\n     fn visit_nested_item(&mut self, item: ItemId) {\n         debug!(\"visit_nested_item: {:?}\", item);\n         self.insert_nested(item.def_id);"}, {"sha": "7eb08b8754a293ad214742ba5cae478f740a08fc", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -2436,12 +2436,6 @@ fn lifetimes_from_impl_trait_bounds(\n     }\n \n     impl<'r, 'v> intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r> {\n-        type Map = intravisit::ErasedMap<'v>;\n-\n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-\n         fn visit_generic_args(&mut self, span: Span, parameters: &'v hir::GenericArgs<'v>) {\n             // Don't collect elided lifetimes used inside of `Fn()` syntax.\n             if parameters.parenthesized {"}, {"sha": "887092fe8b92b28d6d0a4ed1453f3eae994127b1", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 54, "deletions": 80, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -160,87 +160,44 @@ impl<'hir> Map<'hir> for ! {\n     }\n }\n \n-/// An erased version of `Map<'hir>`, using dynamic dispatch.\n-/// NOTE: This type is effectively only usable with `NestedVisitorMap::None`.\n-pub struct ErasedMap<'hir>(&'hir dyn Map<'hir>);\n+pub mod nested_filter {\n+    use super::Map;\n \n-impl<'hir> Map<'hir> for ErasedMap<'hir> {\n-    fn find(&self, _: HirId) -> Option<Node<'hir>> {\n-        None\n-    }\n-    fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n-        self.0.body(id)\n-    }\n-    fn item(&self, id: ItemId) -> &'hir Item<'hir> {\n-        self.0.item(id)\n-    }\n-    fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n-        self.0.trait_item(id)\n-    }\n-    fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n-        self.0.impl_item(id)\n-    }\n-    fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {\n-        self.0.foreign_item(id)\n+    /// Specifies what nested things a visitor wants to visit. The most\n+    /// common choice is `OnlyBodies`, which will cause the visitor to\n+    /// visit fn bodies for fns that it encounters, but skip over nested\n+    /// item-like things.\n+    ///\n+    /// See the comments on `ItemLikeVisitor` for more details on the overall\n+    /// visit strategy.\n+    pub trait NestedFilter<'hir> {\n+        type Map: Map<'hir>;\n+\n+        /// Whether the visitor visits nested \"item-like\" things.\n+        /// E.g., item, impl-item.\n+        const INTER: bool;\n+        /// Whether the visitor visits \"intra item-like\" things.\n+        /// E.g., function body, closure, `AnonConst`\n+        const INTRA: bool;\n     }\n-}\n \n-/// Specifies what nested things a visitor wants to visit. The most\n-/// common choice is `OnlyBodies`, which will cause the visitor to\n-/// visit fn bodies for fns that it encounters, but skip over nested\n-/// item-like things.\n-///\n-/// See the comments on `ItemLikeVisitor` for more details on the overall\n-/// visit strategy.\n-pub enum NestedVisitorMap<M> {\n     /// Do not visit any nested things. When you add a new\n     /// \"non-nested\" thing, you will want to audit such uses to see if\n     /// they remain valid.\n     ///\n     /// Use this if you are only walking some particular kind of tree\n     /// (i.e., a type, or fn signature) and you don't want to thread a\n     /// HIR map around.\n-    None,\n-\n-    /// Do not visit nested item-like things, but visit nested things\n-    /// that are inside of an item-like.\n-    ///\n-    /// **This is the most common choice.** A very common pattern is\n-    /// to use `visit_all_item_likes()` as an outer loop,\n-    /// and to have the visitor that visits the contents of each item\n-    /// using this setting.\n-    OnlyBodies(M),\n-\n-    /// Visits all nested things, including item-likes.\n-    ///\n-    /// **This is an unusual choice.** It is used when you want to\n-    /// process everything within their lexical context. Typically you\n-    /// kick off the visit by doing `walk_krate()`.\n-    All(M),\n-}\n-\n-impl<M> NestedVisitorMap<M> {\n-    /// Returns the map to use for an \"intra item-like\" thing (if any).\n-    /// E.g., function body.\n-    fn intra(self) -> Option<M> {\n-        match self {\n-            NestedVisitorMap::None => None,\n-            NestedVisitorMap::OnlyBodies(map) => Some(map),\n-            NestedVisitorMap::All(map) => Some(map),\n-        }\n-    }\n-\n-    /// Returns the map to use for an \"item-like\" thing (if any).\n-    /// E.g., item, impl-item.\n-    fn inter(self) -> Option<M> {\n-        match self {\n-            NestedVisitorMap::None => None,\n-            NestedVisitorMap::OnlyBodies(_) => None,\n-            NestedVisitorMap::All(map) => Some(map),\n-        }\n+    pub struct None(());\n+    impl NestedFilter<'_> for None {\n+        type Map = !;\n+        const INTER: bool = false;\n+        const INTRA: bool = false;\n     }\n }\n \n+use nested_filter::NestedFilter;\n+\n /// Each method of the Visitor trait is a hook to be potentially\n /// overridden. Each method's default implementation recursively visits\n /// the substructure of the input via the corresponding `walk` method;\n@@ -258,7 +215,9 @@ impl<M> NestedVisitorMap<M> {\n /// to monitor future changes to `Visitor` in case a new method with a\n /// new default implementation gets introduced.)\n pub trait Visitor<'v>: Sized {\n-    type Map: Map<'v>;\n+    // this type should not be overridden, it exists for convenient usage as `Self::Map`\n+    type Map: Map<'v> = <Self::NestedFilter as NestedFilter<'v>>::Map;\n+    type NestedFilter: NestedFilter<'v> = nested_filter::None;\n \n     ///////////////////////////////////////////////////////////////////////////\n     // Nested items.\n@@ -279,7 +238,12 @@ pub trait Visitor<'v>: Sized {\n     /// `panic!()`. This way, if a new `visit_nested_XXX` variant is\n     /// added in the future, we will see the panic in your code and\n     /// fix it appropriately.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map>;\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        panic!(\n+            \"nested_visit_map must be implemented or consider using \\\n+            `type NestedFilter = nested_filter::None` (the default)\"\n+        );\n+    }\n \n     /// Invoked when a nested item is encountered. By default does\n     /// nothing unless you override `nested_visit_map` to return other than\n@@ -290,41 +254,51 @@ pub trait Visitor<'v>: Sized {\n     /// reason to override this method is if you want a nested pattern\n     /// but cannot supply a `Map`; see `nested_visit_map` for advice.\n     fn visit_nested_item(&mut self, id: ItemId) {\n-        let opt_item = self.nested_visit_map().inter().map(|map| map.item(id));\n-        walk_list!(self, visit_item, opt_item);\n+        if Self::NestedFilter::INTER {\n+            let item = self.nested_visit_map().item(id);\n+            self.visit_item(item);\n+        }\n     }\n \n     /// Like `visit_nested_item()`, but for trait items. See\n     /// `visit_nested_item()` for advice on when to override this\n     /// method.\n     fn visit_nested_trait_item(&mut self, id: TraitItemId) {\n-        let opt_item = self.nested_visit_map().inter().map(|map| map.trait_item(id));\n-        walk_list!(self, visit_trait_item, opt_item);\n+        if Self::NestedFilter::INTER {\n+            let item = self.nested_visit_map().trait_item(id);\n+            self.visit_trait_item(item);\n+        }\n     }\n \n     /// Like `visit_nested_item()`, but for impl items. See\n     /// `visit_nested_item()` for advice on when to override this\n     /// method.\n     fn visit_nested_impl_item(&mut self, id: ImplItemId) {\n-        let opt_item = self.nested_visit_map().inter().map(|map| map.impl_item(id));\n-        walk_list!(self, visit_impl_item, opt_item);\n+        if Self::NestedFilter::INTER {\n+            let item = self.nested_visit_map().impl_item(id);\n+            self.visit_impl_item(item);\n+        }\n     }\n \n     /// Like `visit_nested_item()`, but for foreign items. See\n     /// `visit_nested_item()` for advice on when to override this\n     /// method.\n     fn visit_nested_foreign_item(&mut self, id: ForeignItemId) {\n-        let opt_item = self.nested_visit_map().inter().map(|map| map.foreign_item(id));\n-        walk_list!(self, visit_foreign_item, opt_item);\n+        if Self::NestedFilter::INTER {\n+            let item = self.nested_visit_map().foreign_item(id);\n+            self.visit_foreign_item(item);\n+        }\n     }\n \n     /// Invoked to visit the body of a function, method or closure. Like\n     /// visit_nested_item, does nothing by default unless you override\n     /// `nested_visit_map` to return other than `None`, in which case it will walk\n     /// the body.\n     fn visit_nested_body(&mut self, id: BodyId) {\n-        let opt_body = self.nested_visit_map().intra().map(|map| map.body(id));\n-        walk_list!(self, visit_body, opt_body);\n+        if Self::NestedFilter::INTRA {\n+            let body = self.nested_visit_map().body(id);\n+            self.visit_body(body);\n+        }\n     }\n \n     fn visit_param(&mut self, param: &'v Param<'v>) {"}, {"sha": "f1d62d03cbc98e3c8c3c072b27f6b1ec3ca9f0f3", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -2,6 +2,7 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n+#![feature(associated_type_defaults)]\n #![feature(const_btree_new)]\n #![feature(crate_visibility_modifier)]\n #![feature(once_cell)]"}, {"sha": "60b48e9bc8a0124d1b2fc793121ba42e901fb173", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -39,11 +39,11 @@ use rustc_data_structures::graph::implementation::{Direction, NodeIndex, INCOMIN\n use rustc_graphviz as dot;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_middle::dep_graph::{\n     DepGraphQuery, DepKind, DepNode, DepNodeExt, DepNodeFilter, EdgeFilter,\n };\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n@@ -173,10 +173,10 @@ impl<'tcx> IfThisChanged<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for IfThisChanged<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "94c149dd23e6f4c7a92ae8a5a0f690867a2a01bf", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -28,7 +28,7 @@ use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::Node as HirNode;\n use rustc_hir::{ImplItemKind, ItemKind as HirItem, TraitItemKind};\n use rustc_middle::dep_graph::{label_strs, DepNode, DepNodeExt};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n@@ -472,10 +472,10 @@ impl<'tcx> FindAllAttrs<'tcx> {\n }\n \n impl<'tcx> intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_attribute(&mut self, _: hir::HirId, attr: &'tcx Attribute) {"}, {"sha": "1fc78f8f9e305eeb7879ed57d0c57a2d597b767b", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -4,9 +4,9 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder}\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FnRetTy, HirId, Local, MatchSource, Pat};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::infer::unify_key::ConstVariableOriginKind;\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n@@ -83,10 +83,10 @@ impl<'a, 'tcx> FindHirNodeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.infcx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.infcx.tcx.hir()\n     }\n \n     fn visit_local(&mut self, local: &'tcx Local<'tcx>) {"}, {"sha": "07bba00056630b56e571d24c0dc684c06acf9367", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -1,7 +1,8 @@\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Node;\n use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::{self, Region, TyCtxt};\n \n@@ -84,10 +85,10 @@ struct FindNestedTypeVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n@@ -208,10 +209,10 @@ struct TyPathVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for TyPathVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Map<'tcx>> {\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Map<'tcx> {\n+        self.tcx.hir()\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &hir::Lifetime) {"}, {"sha": "412a077959d01a9104d51275eaa26c3a69cc2f5d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -7,7 +7,7 @@ use crate::traits::{ObligationCauseCode, UnifyReceiverContext};\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir::def_id::DefId;\n-use rustc_hir::intravisit::{walk_ty, ErasedMap, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_ty, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n use rustc_middle::ty::{\n     self, AssocItemContainer, RegionKind, StaticLifetimeVisitor, Ty, TyCtxt, TypeFoldable,\n@@ -575,12 +575,6 @@ impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n pub(super) struct HirTraitObjectVisitor<'a>(pub(super) &'a mut Vec<Span>, pub(super) DefId);\n \n impl<'a, 'tcx> Visitor<'tcx> for HirTraitObjectVisitor<'a> {\n-    type Map = ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {\n         if let TyKind::TraitObject(\n             poly_trait_refs,"}, {"sha": "bbea450a76973a868c48b05e169bd936b50944c2", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -9,6 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::print::RegionHighlightMode;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n \n@@ -182,10 +183,10 @@ struct TypeParamSpanVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n-    type Map = rustc_middle::hir::map::Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n-        hir::intravisit::NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {"}, {"sha": "66a89492abd84323134090d364b3bfdee2311f37", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -1479,12 +1479,6 @@ impl TypeAliasBounds {\n             err: &'a mut DiagnosticBuilder<'db>,\n         }\n         impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n-            type Map = intravisit::ErasedMap<'v>;\n-\n-            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-                intravisit::NestedVisitorMap::None\n-            }\n-\n             fn visit_qpath(&mut self, qpath: &'v hir::QPath<'v>, id: hir::HirId, span: Span) {\n                 if TypeAliasBounds::is_type_variable_assoc(qpath) {\n                     self.err.span_help("}, {"sha": "0ce760b64d9ca0e889f01d8877421d0852fc4521", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -21,7 +21,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::LintPass;\n use rustc_span::symbol::Symbol;\n@@ -94,13 +94,13 @@ impl<'tcx, T: LateLintPass<'tcx>> LateContextAndPass<'tcx, T> {\n }\n \n impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPass<'tcx, T> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     /// Because lints are scoped lexically, we want to walk nested\n     /// items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n-        hir_visit::NestedVisitorMap::All(self.context.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.context.tcx.hir()\n     }\n \n     fn visit_nested_body(&mut self, body_id: hir::BodyId) {"}, {"sha": "6e95708b17fe4bcaf4296d66390ac7f0e954bc6f", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::{intravisit, HirId, CRATE_HIR_ID};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::LevelAndSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{\n@@ -599,10 +599,10 @@ impl LintLevelMapBuilder<'_, '_> {\n }\n \n impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {"}, {"sha": "ee6656ce372650c4e97fa64dce89a91da38fa951", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -11,13 +11,13 @@ use rustc_hir::def_id::{\n     CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE,\n };\n use rustc_hir::definitions::DefPathData;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items;\n use rustc_hir::{AnonConst, GenericParamKind};\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_index::vec::Idx;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportLevel,\n@@ -1917,10 +1917,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.\n impl<'a, 'tcx> Visitor<'tcx> for EncodeContext<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {\n         intravisit::walk_expr(self, ex);"}, {"sha": "7cfb20745720d075df04044efc7628a113309c4b", "filename": "compiler/rustc_middle/src/hir/intravisit.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fintravisit.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -0,0 +1,27 @@\n+use rustc_hir::intravisit::nested_filter::NestedFilter;\n+\n+/// Do not visit nested item-like things, but visit nested things\n+/// that are inside of an item-like.\n+///\n+/// **This is the most common choice.** A very common pattern is\n+/// to use `visit_all_item_likes()` as an outer loop,\n+/// and to have the visitor that visits the contents of each item\n+/// using this setting.\n+pub struct OnlyBodies(());\n+impl<'hir> NestedFilter<'hir> for OnlyBodies {\n+    type Map = crate::hir::map::Map<'hir>;\n+    const INTER: bool = false;\n+    const INTRA: bool = true;\n+}\n+\n+/// Visits all nested things, including item-likes.\n+///\n+/// **This is an unusual choice.** It is used when you want to\n+/// process everything within their lexical context. Typically you\n+/// kick off the visit by doing `walk_krate()`.\n+pub struct All(());\n+impl<'hir> NestedFilter<'hir> for All {\n+    type Map = crate::hir::map::Map<'hir>;\n+    const INTER: bool = true;\n+    const INTRA: bool = true;\n+}"}, {"sha": "82ea7ff6aab5445aea1e710ec85d7f9e3bd304ee", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::*;\n use rustc_index::vec::Idx;\n+use rustc_middle::hir::nested_filter;\n use rustc_span::def_id::StableCrateId;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n@@ -1272,10 +1273,10 @@ pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> Module\n     }\n \n     impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {\n-        type Map = Map<'hir>;\n+        type NestedFilter = nested_filter::All;\n \n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::All(self.tcx.hir())\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.tcx.hir()\n         }\n \n         fn visit_item(&mut self, item: &'hir Item<'hir>) {"}, {"sha": "b4c7bb7eba79c82bcbdee45c4ac27a3723f5903d", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -3,6 +3,7 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n pub mod map;\n+pub mod nested_filter;\n pub mod place;\n \n use crate::ty::query::Providers;"}, {"sha": "a29a7d241e3f3928027ca9c9b6321b40630130d6", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -448,12 +448,6 @@ pub fn suggest_constraining_type_param(\n pub struct TraitObjectVisitor<'tcx>(pub Vec<&'tcx hir::Ty<'tcx>>, pub crate::hir::map::Map<'tcx>);\n \n impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n-    type Map = rustc_hir::intravisit::ErasedMap<'v>;\n-\n-    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n-        hir::intravisit::NestedVisitorMap::None\n-    }\n-\n     fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n         match ty.kind {\n             hir::TyKind::TraitObject(\n@@ -482,12 +476,6 @@ impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n pub struct StaticLifetimeVisitor<'tcx>(pub Vec<Span>, pub crate::hir::map::Map<'tcx>);\n \n impl<'v> hir::intravisit::Visitor<'v> for StaticLifetimeVisitor<'v> {\n-    type Map = rustc_hir::intravisit::ErasedMap<'v>;\n-\n-    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n-        hir::intravisit::NestedVisitorMap::None\n-    }\n-\n     fn visit_lifetime(&mut self, lt: &'v hir::Lifetime) {\n         if let hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Static =\n             lt.name"}, {"sha": "868dd195f3a63c7ce2ec67d175b7a61c158383b0", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -10,7 +10,7 @@ use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{HirId, Pat};\n use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n use rustc_session::lint::builtin::{\n@@ -54,12 +54,6 @@ struct MatchVisitor<'a, 'p, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, '_, 'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {\n         intravisit::walk_expr(self, ex);\n         match &ex.kind {"}, {"sha": "8ba6cbef5b59e2168fd701803cf8f1e9718e52f9", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -398,12 +398,6 @@ struct UnusedUnsafeVisitor<'a> {\n }\n \n impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n-\n     fn visit_block(&mut self, block: &'tcx hir::Block<'tcx>) {\n         intravisit::walk_block(self, block);\n "}, {"sha": "bf6f13fa67b58e10e7f9fc5db8ed090b4087679c", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -22,7 +22,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::steal::Steal;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPass, MirPhase, Promoted};\n@@ -162,10 +162,6 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n             }\n             intravisit::walk_struct_def(self, v)\n         }\n-        type Map = intravisit::ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n     }\n     tcx.hir().visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set }.as_deep_visitor());\n "}, {"sha": "4d34a3ba6970c22aaeff75470eaa4185091407e5", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -4,19 +4,18 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n-\n use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{self, FnSig, ForeignItem, HirId, Item, ItemKind, TraitItem, CRATE_HIR_ID};\n use rustc_hir::{MethodKind, Target};\n+use rustc_middle::hir::nested_filter;\n+use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n     CONFLICTING_REPR_HINTS, INVALID_DOC_ATTRIBUTES, UNUSED_ATTRIBUTES,\n };\n@@ -1862,10 +1861,10 @@ impl CheckAttrVisitor<'_> {\n }\n \n impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_item(&mut self, item: &'tcx Item<'tcx>) {"}, {"sha": "2b11f6b0c1d029efbf0d0a4d0812390ede307722", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -11,8 +11,8 @@ use rustc_attr as attr;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_middle::hir::map::Map;\n+use rustc_hir::intravisit::{self, Visitor};\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -262,10 +262,10 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {"}, {"sha": "4cca71424492cf5aa1469e3e5a5375abaf022767", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -6,10 +6,10 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{Node, PatKind, TyKind};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::privacy;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n@@ -323,12 +323,6 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n         let old_maybe_typeck_results =\n             self.maybe_typeck_results.replace(self.tcx.typeck_body(body));\n@@ -673,14 +667,14 @@ impl<'tcx> DeadVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     /// Walk nested items in place so that we don't report dead-code\n     /// on inner functions when the outer function is already getting\n     /// an error. We could do this also by checking the parents, but\n     /// this is how the code is setup and it seems harmless enough.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "56755d68686e3d27b4c70df96de00d5ef82db02d", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -6,6 +6,7 @@ use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ItemLocalId};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n@@ -139,10 +140,10 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n-    type Map = Map<'hir>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::OnlyBodies(self.hir_map)\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.hir_map\n     }\n \n     fn visit_id(&mut self, hir_id: HirId) {"}, {"sha": "5cc958ef54971f67cd7b6ef327bafa8edea88a08", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -95,12 +95,6 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_param(self, param)\n     }\n \n-    type Map = Map<'v>;\n-\n-    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n-        panic!(\"visit_nested_xxx must be manually implemented in this visitor\")\n-    }\n-\n     fn visit_nested_item(&mut self, id: hir::ItemId) {\n         let nested_item = self.krate.unwrap().item(id);\n         self.visit_item(nested_item)"}, {"sha": "85c568d8623badc860a7eff0f0b0821ea38d282d", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -3,7 +3,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n use rustc_middle::ty::query::Providers;\n@@ -488,12 +488,6 @@ impl<'tcx> ExprVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for ItemVisitor<'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_nested_body(&mut self, body_id: hir::BodyId) {\n         let owner_def_id = self.tcx.hir().body_owner_def_id(body_id);\n         let body = self.tcx.hir().body(body_id);\n@@ -505,12 +499,6 @@ impl<'tcx> Visitor<'tcx> for ItemVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for ExprVisitor<'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         match expr.kind {\n             hir::ExprKind::Path(ref qpath) => {"}, {"sha": "00445690f8f02124ff6d8d5840e4f445257dca05", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -6,8 +6,8 @@\n \n use rustc_ast::{Attribute, MetaItemKind};\n use rustc_errors::struct_span_err;\n-use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc_middle::hir::map::Map;\n+use rustc_hir::intravisit::Visitor;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::lib_features::LibFeatures;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -111,10 +111,10 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for LibFeatureCollector<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_attribute(&mut self, _: rustc_hir::HirId, attr: &'tcx Attribute) {"}, {"sha": "ebde144ea58bbbb28f44451e806532900ebc7e77", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -90,10 +90,10 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet};\n use rustc_index::vec::IndexVec;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, RootVariableMinCaptureList, Ty, TyCtxt};\n use rustc_session::lint;\n@@ -317,10 +317,10 @@ impl<'tcx> IrMaps<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n@@ -1327,12 +1327,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n // Checking for error conditions\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n         self.check_unused_vars_in_pat(&local.pat, None, |spans, hir_id, ln, var| {\n             if local.init.is_some() {"}, {"sha": "02b09daf0a41e443b012f19621971e0e685f23a8", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -3,9 +3,10 @@ use Context::*;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Destination, Movability, Node};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n@@ -41,10 +42,10 @@ pub(crate) fn provide(providers: &mut Providers) {\n }\n \n impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n-    type Map = Map<'hir>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.hir_map)\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.hir_map\n     }\n \n     fn visit_anon_const(&mut self, c: &'hir hir::AnonConst) {"}, {"sha": "645955f859cf889c070cc749e9cac3e71467b3cc", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -3,7 +3,7 @@\n use rustc_ast::{Attribute, InlineAsmOptions};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::intravisit::{ErasedMap, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{FnKind, Visitor};\n use rustc_hir::{ExprKind, HirId, InlineAsmOperand, StmtKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -29,12 +29,6 @@ struct CheckNakedFunctions<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for CheckNakedFunctions<'tcx> {\n-    type Map = ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_fn(\n         &mut self,\n         fk: FnKind<'_>,\n@@ -129,12 +123,6 @@ struct CheckParameters<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for CheckParameters<'tcx> {\n-    type Map = ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         if let hir::ExprKind::Path(hir::QPath::Resolved(\n             _,\n@@ -312,12 +300,6 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for CheckInlineAssembly<'tcx> {\n-    type Map = ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n         match stmt.kind {\n             StmtKind::Item(..) => {}"}, {"sha": "6cd9dc23285a963d9bb2dfb46c6ecbbd7e406e0d", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::Node;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -74,12 +74,6 @@ struct ReachableContext<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for ReachableContext<'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n         let old_maybe_typeck_results =\n             self.maybe_typeck_results.replace(self.tcx.typeck_body(body));"}, {"sha": "db699a56645c2ae641e27eca378ea50755ab7537", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Arm, Block, Expr, Local, Pat, PatKind, Stmt};\n use rustc_index::vec::Idx;\n use rustc_middle::middle::region::*;\n@@ -721,12 +721,6 @@ impl<'tcx> RegionResolutionVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_block(&mut self, b: &'tcx Block<'tcx>) {\n         resolve_block(self, b);\n     }"}, {"sha": "3521b6fc1696c7978072e63fe92636be9baf4ecb", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -9,9 +9,9 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{FieldDef, Generics, HirId, Item, TraitRef, Ty, TyKind, Variant};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{DeprecationEntry, Index};\n use rustc_middle::ty::{self, query::Providers, TyCtxt};\n@@ -378,10 +378,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_item(&mut self, i: &'tcx Item<'tcx>) {\n@@ -593,10 +593,10 @@ impl<'tcx> MissingStabilityAnnotations<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_item(&mut self, i: &'tcx Item<'tcx>) {\n@@ -738,13 +738,13 @@ struct Checker<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n@@ -860,12 +860,6 @@ struct CheckTraitImplStable<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _id: hir::HirId) {\n         if let Some(def_id) = path.res.opt_def_id() {\n             if let Some(stab) = self.tcx.lookup_stability(def_id) {"}, {"sha": "25fe8e4582535eb391855e0f5bbba24ee533a992", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -3,7 +3,7 @@\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{self, HirId};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -43,12 +43,6 @@ struct LocalCollector {\n }\n \n impl<'tcx> Visitor<'tcx> for LocalCollector {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {\n         if let hir::PatKind::Binding(_, hir_id, ..) = pat.kind {\n             self.locals.insert(hir_id);\n@@ -72,12 +66,6 @@ impl CaptureCollector<'_, '_> {\n }\n \n impl<'tcx> Visitor<'tcx> for CaptureCollector<'_, 'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _: hir::HirId) {\n         if let Res::Local(var_id) = path.res {\n             self.visit_local_use(var_id, path.span);"}, {"sha": "6b73c95011940a1cc0c3883574ab46d33420d44e", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -3,7 +3,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::lang_items::{self, LangItem};\n use rustc_hir::weak_lang_items::WEAK_ITEMS_REFS;\n use rustc_middle::middle::lang_items::required;\n@@ -95,12 +95,6 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n-    type Map = intravisit::ErasedMap<'v>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem<'_>) {\n         let attrs = self.tcx.hir().attrs(i.hir_id());\n         if let Some((lang_item, _)) = lang_items::extract(attrs) {"}, {"sha": "7bee2ebf2f977813c9c9eabd8e5f0fa6cf85f424", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -12,10 +12,10 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LocalDefIdSet, CRATE_DEF_ID};\n-use rustc_hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, DeepVisitor, Visitor};\n use rustc_hir::{AssocItemKind, HirIdSet, Node, PatKind};\n use rustc_middle::bug;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::{AccessLevel, AccessLevels};\n use rustc_middle::span_bug;\n use rustc_middle::thir::abstract_const::Node as ACNode;\n@@ -305,10 +305,10 @@ struct PubRestrictedVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n     fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {\n         self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();\n@@ -630,12 +630,12 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n@@ -964,12 +964,12 @@ impl<'tcx> NamePrivacyVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {\n@@ -1093,12 +1093,12 @@ impl<'tcx> TypePrivacyVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {\n@@ -1395,12 +1395,6 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n-    type Map = intravisit::ErasedMap<'v>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {\n         match generic_arg {\n             hir::GenericArg::Type(t) => self.visit_ty(t),\n@@ -1431,12 +1425,12 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n@@ -1880,10 +1874,10 @@ impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "b077a5c9144c5d0c6a9460274e7e26644e7495f7", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 40, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -14,10 +14,11 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefIdMap, LocalDefId};\n use rustc_hir::hir_id::ItemLocalId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n use rustc_hir::{GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc_middle::{bug, span_bug};\n@@ -651,10 +652,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n }\n impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     // We want to nest trait/impl items in their parent, but nothing else.\n@@ -1613,12 +1614,6 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     gather.visit_body(body);\n \n     impl<'v, 'a, 'tcx> Visitor<'v> for GatherLabels<'a, 'tcx> {\n-        type Map = intravisit::ErasedMap<'v>;\n-\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, ex: &hir::Expr<'_>) {\n             if let Some(label) = expression_label(ex) {\n                 for prior_label in &self.labels_in_fn[..] {\n@@ -2832,12 +2827,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             impl<'a> Visitor<'a> for SelfVisitor<'a> {\n-                type Map = intravisit::ErasedMap<'a>;\n-\n-                fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-                    NestedVisitorMap::None\n-                }\n-\n                 fn visit_ty(&mut self, ty: &'a hir::Ty<'a>) {\n                     if let hir::TyKind::Rptr(lifetime_ref, ref mt) = ty.kind {\n                         if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = mt.ty.kind\n@@ -2922,12 +2911,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         impl<'v, 'a> Visitor<'v> for GatherLifetimes<'a> {\n-            type Map = intravisit::ErasedMap<'v>;\n-\n-            fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-                NestedVisitorMap::None\n-            }\n-\n             fn visit_ty(&mut self, ty: &hir::Ty<'_>) {\n                 if let hir::TyKind::BareFn(_) = ty.kind {\n                     self.outer_index.shift_in(1);\n@@ -3005,12 +2988,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             anon_count: u32,\n         }\n         impl<'v> Visitor<'v> for GatherAnonLifetimes {\n-            type Map = intravisit::ErasedMap<'v>;\n-\n-            fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-                NestedVisitorMap::None\n-            }\n-\n             #[instrument(skip(self), level = \"trace\")]\n             fn visit_ty(&mut self, ty: &hir::Ty<'_>) {\n                 // If we enter a `BareFn`, then we enter a *new* binding scope\n@@ -3508,12 +3485,6 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for ConstrainedCollector {\n-        type Map = intravisit::ErasedMap<'v>;\n-\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n             match ty.kind {\n                 hir::TyKind::Path(\n@@ -3552,12 +3523,6 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for AllCollector {\n-        type Map = intravisit::ErasedMap<'v>;\n-\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_lifetime(&mut self, lifetime_ref: &'v hir::Lifetime) {\n             self.regions.insert(lifetime_ref.name.normalize_to_macros_2_0());\n         }"}, {"sha": "754c2b03e667125da971456e796424799630a3f5", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -21,7 +21,7 @@ use rustc_hir::def::{DefKind as HirDefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir_pretty::{bounds_to_string, fn_to_string, generic_params_to_string, ty_to_string};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::span_bug;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::config::Input;\n@@ -1137,10 +1137,10 @@ impl<'tcx> DumpVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "21cb93cc5f48bfb3adaec849c9767fdb0d99e6d3", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -18,7 +18,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Node;\n use rustc_hir_pretty::{enum_def_to_string, fn_to_string, ty_to_string};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::{self, print::with_no_trimmed_paths, DefIdTree, TyCtxt};\n use rustc_middle::{bug, span_bug};\n@@ -859,10 +859,10 @@ impl<'l> PathCollector<'l> {\n }\n \n impl<'l> Visitor<'l> for PathCollector<'l> {\n-    type Map = Map<'l>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_pat(&mut self, p: &'l hir::Pat<'l>) {"}, {"sha": "d1958f85521928362173b18a5cf819c949cd12c6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -2184,12 +2184,6 @@ struct FindTypeParam {\n }\n \n impl<'v> Visitor<'v> for FindTypeParam {\n-    type Map = rustc_hir::intravisit::ErasedMap<'v>;\n-\n-    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n-        hir::intravisit::NestedVisitorMap::None\n-    }\n-\n     fn visit_where_predicate(&mut self, _: &'v hir::WherePredicate<'v>) {\n         // Skip where-clauses, to avoid suggesting indirection for type parameters found there.\n     }"}, {"sha": "da0b691a958e199659175b93866dfc7da200f88f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -2519,12 +2519,6 @@ pub struct ReturnsVisitor<'v> {\n }\n \n impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n-    type Map = hir::intravisit::ErasedMap<'v>;\n-\n-    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n-        hir::intravisit::NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n         // Visit every expression to detect `return` paths, either through the function's tail\n         // expression or `return` statements. We walk all nodes to find `return` statements, but\n@@ -2581,12 +2575,6 @@ struct AwaitsVisitor {\n }\n \n impl<'v> Visitor<'v> for AwaitsVisitor {\n-    type Map = hir::intravisit::ErasedMap<'v>;\n-\n-    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n-        hir::intravisit::NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n         if let hir::ExprKind::Yield(_, hir::YieldSource::Await { expr: Some(id) }) = ex.kind {\n             self.awaits.push(id)"}, {"sha": "7a3d5990329b9af1b1d10b6edb6dd9849419c1cf", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{def::Res, ItemKind, Node, PathSegment};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::layout::MAX_SIMD_LANES;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -512,10 +513,10 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n     }\n \n     impl<'tcx> Visitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n-        type Map = rustc_middle::hir::map::Map<'tcx>;\n+        type NestedFilter = nested_filter::OnlyBodies;\n \n-        fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n-            hir::intravisit::NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.tcx.hir()\n         }\n \n         fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {"}, {"sha": "3984d8b74257f4b94e4a021e2775d7b3d4a08398", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -881,13 +881,6 @@ fn compare_synthetic_generics<'tcx>(\n                                     }\n                                 }\n                             }\n-                            type Map = intravisit::ErasedMap<'v>;\n-                            fn nested_visit_map(\n-                                &mut self,\n-                            ) -> intravisit::NestedVisitorMap<Self::Map>\n-                            {\n-                                intravisit::NestedVisitorMap::None\n-                            }\n                         }\n                         let mut visitor = Visitor(None, impl_def_id);\n                         for ty in input_tys {"}, {"sha": "e30871e4347c14f99ecacc2f3b11bd9ded5878df", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -1,6 +1,6 @@\n use crate::check::{FnCtxt, LocalTy, UserType};\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::Ty;\n@@ -98,12 +98,6 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     // Add explicitly-declared locals.\n     fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n         self.declare(local.into());"}, {"sha": "fb6e11dbfb738499e5175276faabe7f2b6894c87", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -10,7 +10,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdSet;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind};\n use rustc_middle::middle::region::{self, YieldData};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -266,12 +266,6 @@ pub fn resolve_interior<'a, 'tcx>(\n // librustc_middle/middle/region.rs since `expr_count` is compared against the results\n // there.\n impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_arm(&mut self, arm: &'tcx Arm<'tcx>) {\n         let Arm { guard, pat, body, .. } = arm;\n         self.visit_pat(pat);\n@@ -439,12 +433,6 @@ struct ArmPatCollector<'a> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ArmPatCollector<'a> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_pat(&mut self, pat: &'tcx Pat<'tcx>) {\n         intravisit::walk_pat(self, pat);\n         if let PatKind::Binding(_, id, ..) = pat.kind {"}, {"sha": "4e50fbf56b2d27bbddfd3e7d7a7bc18f80eec61c", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -80,7 +80,7 @@ use crate::outlives::outlives_bounds::InferCtxtExt as _;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{self, InferCtxt, RegionObligation, RegionckMode};\n@@ -406,12 +406,6 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_fn(\n         &mut self,\n         fk: intravisit::FnKind<'tcx>,"}, {"sha": "becae6c9dc920ad7ee67dcdcf406cebc18326b36", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -37,7 +37,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_infer::infer::UpvarRegion;\n use rustc_middle::hir::place::{Place, PlaceBase, PlaceWithHirId, Projection, ProjectionKind};\n use rustc_middle::mir::FakeReadCause;\n@@ -140,12 +140,6 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         match expr.kind {\n             hir::ExprKind::Closure(cc, _, body_id, _, _) => {"}, {"sha": "606a2d6a24e59fa891f000672feba5abdeb42695", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -17,7 +17,7 @@ use rustc_infer::infer::outlives::obligations::TypeOutlives;\n use rustc_infer::infer::region_constraints::GenericKind;\n use rustc_infer::infer::{self, RegionckMode};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n-use rustc_middle::hir::map as hir_map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n@@ -1747,10 +1747,10 @@ impl<'tcx> ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n-    type Map = hir_map::Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n-        hir_visit::NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     #[instrument(skip(self, i), level = \"debug\")]"}, {"sha": "f50f3c39c8882d8b0af418b8e8ac53c9aceda419", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::stable_map::FxHashMap;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::hir::place::Place as HirPlace;\n@@ -253,12 +253,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n // traffic in node-ids or update typeck results in the type context etc.\n \n impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n         self.fix_scalar_builtin_expr(e);\n         self.fix_index_builtin_expr(e);"}, {"sha": "2ed98e20f1d06a667129f51f838243f5a928ab86", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -29,10 +29,10 @@ use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::weak_lang_items;\n use rustc_hir::{GenericParamKind, HirId, Node};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n use rustc_middle::ty::query::Providers;\n@@ -115,11 +115,6 @@ pub struct ItemCtxt<'tcx> {\n crate struct PlaceholderHirTyCollector(crate Vec<Span>);\n \n impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n-    type Map = intravisit::ErasedMap<'v>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n     fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n         if let hir::TyKind::Infer = t.kind {\n             self.0.push(t.span);\n@@ -253,10 +248,10 @@ fn reject_placeholder_type_signatures_in_item<'tcx>(\n }\n \n impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n@@ -1244,12 +1239,6 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n \n     impl<'tcx> Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n-        type Map = intravisit::ErasedMap<'tcx>;\n-\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n             if self.has_late_bound_regions.is_some() {\n                 return;\n@@ -1357,12 +1346,6 @@ struct AnonConstInParamTyDetector {\n }\n \n impl<'v> Visitor<'v> for AnonConstInParamTyDetector {\n-    type Map = intravisit::ErasedMap<'v>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_generic_param(&mut self, p: &'v hir::GenericParam<'v>) {\n         if let GenericParamKind::Const { ty, default: _ } = p.kind {\n             let prev = self.in_param_ty;\n@@ -2298,12 +2281,6 @@ fn const_evaluatable_predicates_of<'tcx>(\n     }\n \n     impl<'tcx> intravisit::Visitor<'tcx> for ConstCollector<'tcx> {\n-        type Map = Map<'tcx>;\n-\n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-\n         fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n             let def_id = self.tcx.hir().local_def_id(c.hir_id);\n             let ct = ty::Const::from_anon_const(self.tcx, def_id);"}, {"sha": "bc7507bcc500f97793231795c37862b9ef54afb5", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirId, Node};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable, TypeFolder};\n@@ -599,10 +599,10 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n \n     impl<'tcx> intravisit::Visitor<'tcx> for ConstraintLocator<'tcx> {\n-        type Map = Map<'tcx>;\n+        type NestedFilter = nested_filter::All;\n \n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::All(self.tcx.hir())\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.tcx.hir()\n         }\n         fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n             if let hir::ExprKind::Closure(..) = ex.kind {"}, {"sha": "7d1aedc86008b7b60bfe90703b02a9f75afc3180", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -1,6 +1,6 @@\n use crate::collect::ItemCtxt;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::HirId;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::TraitEngine;\n@@ -64,10 +64,6 @@ fn diagnostic_hir_wf_check<'tcx>(\n     }\n \n     impl<'tcx> Visitor<'tcx> for HirWfCheck<'tcx> {\n-        type Map = intravisit::ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n         fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n             self.tcx.infer_ctxt().enter(|infcx| {\n                 let mut fulfill = traits::FulfillmentContext::new();"}, {"sha": "c7c049f9914455837758960337cab9381c72a78e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -5,10 +5,10 @@ use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{HirId, Path};\n use rustc_interface::interface;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_resolve as resolve;\n@@ -474,12 +474,12 @@ impl<'tcx> EmitIgnoredResolutionErrors<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for EmitIgnoredResolutionErrors<'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+    fn nested_visit_map(&mut self) -> Self::Map {\n         // We need to recurse into nested closures,\n         // since those will fallback to the parent for type checking.\n-        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+        self.tcx.hir()\n     }\n \n     fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {"}, {"sha": "024fe6345d295a694b3f2e8b91ac378c4b41795d", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -8,6 +8,7 @@ use rustc_hir::intravisit;\n use rustc_hir::{HirId, CRATE_HIR_ID};\n use rustc_interface::interface;\n use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, CrateType, ErrorOutputType};\n use rustc_session::{lint, DiagnosticOutput, Session};\n@@ -1154,10 +1155,10 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n }\n \n impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx> {\n-    type Map = Map<'hir>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::All(self.map)\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.map\n     }\n \n     fn visit_item(&mut self, item: &'hir hir::Item<'_>) {"}, {"sha": "221e0113d3a43c448b822ed8c277ca603a42988f", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -4,8 +4,9 @@ use crate::html::sources;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{ExprKind, GenericParam, GenericParamKind, HirId, Mod, Node};\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n@@ -93,10 +94,10 @@ impl<'tcx> SpanMapVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for SpanMapVisitor<'tcx> {\n-    type Map = rustc_middle::hir::map::Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n     }\n \n     fn visit_generic_param(&mut self, p: &'tcx GenericParam<'tcx>) {"}, {"sha": "c509d3f882c78b692a32f2809ec1a3bab96c5e97", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45db716902f93cd7f9fb7300f48a18db07a1dd5f/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45db716902f93cd7f9fb7300f48a18db07a1dd5f/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=45db716902f93cd7f9fb7300f48a18db07a1dd5f", "patch": "@@ -14,6 +14,7 @@ use rustc_hir::{\n use rustc_interface::interface;\n use rustc_macros::{Decodable, Encodable};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_serialize::{\n     opaque::{Decoder, FileEncoder},\n@@ -117,10 +118,10 @@ impl<'a, 'tcx> Visitor<'tcx> for FindCalls<'a, 'tcx>\n where\n     'tcx: 'a,\n {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::OnlyBodies(self.map)\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.map\n     }\n \n     fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {"}]}