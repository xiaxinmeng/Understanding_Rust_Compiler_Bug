{"sha": "d773a024a2976f2759235551a52101cd08b37cce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NzNhMDI0YTI5NzZmMjc1OTIzNTU1MWE1MjEwMWNkMDhiMzdjY2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-17T18:06:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-17T18:06:31Z"}, "message": "auto merge of #9908 : alexcrichton/rust/snapshots, r=thestinger", "tree": {"sha": "3751e8ff14bf7860fd49850a1d6c8db4e7205ce4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3751e8ff14bf7860fd49850a1d6c8db4e7205ce4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d773a024a2976f2759235551a52101cd08b37cce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d773a024a2976f2759235551a52101cd08b37cce", "html_url": "https://github.com/rust-lang/rust/commit/d773a024a2976f2759235551a52101cd08b37cce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d773a024a2976f2759235551a52101cd08b37cce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4a32386f3b61a4997de54ed00c0a80fd07ecc75", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4a32386f3b61a4997de54ed00c0a80fd07ecc75", "html_url": "https://github.com/rust-lang/rust/commit/d4a32386f3b61a4997de54ed00c0a80fd07ecc75"}, {"sha": "0adb41d0eb44ef74e897c22d9f1fcd8f97ef3458", "url": "https://api.github.com/repos/rust-lang/rust/commits/0adb41d0eb44ef74e897c22d9f1fcd8f97ef3458", "html_url": "https://github.com/rust-lang/rust/commit/0adb41d0eb44ef74e897c22d9f1fcd8f97ef3458"}], "stats": {"total": 175, "additions": 8, "deletions": 167}, "files": [{"sha": "383130cda376c25df3539fc0d586e01917665e37", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=d773a024a2976f2759235551a52101cd08b37cce", "patch": "@@ -673,24 +673,6 @@ impl<'self> Formatter<'self> {\n         }\n     }\n \n-    #[cfg(stage0)]\n-    fn getcount(&mut self, cnt: &parse::Count) -> Option<uint> {\n-        match *cnt {\n-            parse::CountIs(n) => { Some(n) }\n-            parse::CountImplied => { None }\n-            parse::CountIsParam(i) => {\n-                let v = self.args[i].value;\n-                unsafe { Some(*(v as *util::Void as *uint)) }\n-            }\n-            parse::CountIsNextParam => {\n-                let v = self.curarg.next().unwrap().value;\n-                unsafe { Some(*(v as *util::Void as *uint)) }\n-            }\n-            parse::CountIsName(*) => unreachable!()\n-        }\n-    }\n-\n-    #[cfg(not(stage0))]\n     fn getcount(&mut self, cnt: &rt::Count) -> Option<uint> {\n         match *cnt {\n             rt::CountIs(n) => { Some(n) }"}, {"sha": "8903d817c3fca6178948e943d2ade531d644efc6", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=d773a024a2976f2759235551a52101cd08b37cce", "patch": "@@ -48,27 +48,6 @@ pub struct Argument<'self> {\n \n /// Specification for the formatting of an argument in the format string.\n #[deriving(Eq)]\n-#[cfg(stage0)]\n-pub struct FormatSpec<'self> {\n-    /// Optionally specified character to fill alignment with\n-    fill: Option<char>,\n-    /// Optionally specified alignment\n-    align: Alignment,\n-    /// Packed version of various flags provided\n-    flags: uint,\n-    /// The integer precision to use\n-    precision: Count,\n-    /// The string width requested for the resulting format\n-    width: Count,\n-    /// The descriptor string representing the name of the format desired for\n-    /// this argument, this can be empty or any number of characters, although\n-    /// it is required to be one word.\n-    ty: &'self str\n-}\n-\n-/// Specification for the formatting of an argument in the format string.\n-#[deriving(Eq)]\n-#[cfg(not(stage0))]\n pub struct FormatSpec<'self> {\n     /// Optionally specified character to fill alignment with\n     fill: Option<char>,\n@@ -113,18 +92,6 @@ pub enum Flag {\n /// can reference either an argument or a literal integer.\n #[deriving(Eq)]\n #[allow(missing_doc)]\n-#[cfg(stage0)]\n-pub enum Count {\n-    CountIs(uint),\n-    CountIsParam(uint),\n-    CountIsName(&'static str), // not actually used, see stage1\n-    CountIsNextParam,\n-    CountImplied,\n-}\n-\n-#[deriving(Eq)]\n-#[allow(missing_doc)]\n-#[cfg(not(stage0))]\n pub enum Count<'self> {\n     CountIs(uint),\n     CountIsName(&'self str),\n@@ -594,20 +561,6 @@ impl<'self> Parser<'self> {\n     /// Parses a Count parameter at the current position. This does not check\n     /// for 'CountIsNextParam' because that is only used in precision, not\n     /// width.\n-    #[cfg(stage0)]\n-    fn count(&mut self) -> Count {\n-        match self.integer() {\n-            Some(i) => {\n-                if self.consume('$') {\n-                    CountIsParam(i)\n-                } else {\n-                    CountIs(i)\n-                }\n-            }\n-            None => { CountImplied }\n-        }\n-    }\n-    #[cfg(not(stage0))]\n     fn count(&mut self) -> Count<'self> {\n         match self.integer() {\n             Some(i) => {"}, {"sha": "b20af1a35b8c780b5c2b9b8d2deaa7d3f2f30945", "filename": "src/libstd/fmt/rt.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Frt.rs?ref=d773a024a2976f2759235551a52101cd08b37cce", "patch": "@@ -34,16 +34,6 @@ pub struct Argument<'self> {\n     method: Option<&'self Method<'self>>\n }\n \n-#[cfg(stage0)]\n-pub struct FormatSpec {\n-    fill: char,\n-    align: parse::Alignment,\n-    flags: uint,\n-    precision: parse::Count,\n-    width: parse::Count,\n-}\n-\n-#[cfg(not(stage0))]\n pub struct FormatSpec {\n     fill: char,\n     align: parse::Alignment,\n@@ -52,7 +42,6 @@ pub struct FormatSpec {\n     width: Count,\n }\n \n-#[cfg(not(stage0))]\n pub enum Count {\n     CountIs(uint), CountIsParam(uint), CountIsNextParam, CountImplied,\n }"}, {"sha": "031fd7993eb9a53c6c470db0f83d4ee86dbff6c8", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=d773a024a2976f2759235551a52101cd08b37cce", "patch": "@@ -367,16 +367,6 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n         }\n     }\n \n-    #[cfg(stage0)]\n-    fn visit_evec_slice(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n-        do self.get::<raw::Slice<()>> |this, s| {\n-            this.writer.write(['&' as u8]);\n-            this.write_mut_qualifier(mtbl);\n-            this.write_vec_range(s.data, s.len, inner);\n-        }\n-    }\n-\n-    #[cfg(not(stage0))]\n     fn visit_evec_slice(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n         do self.get::<raw::Slice<()>> |this, s| {\n             this.writer.write(['&' as u8]);"}, {"sha": "3a3c6e6538c60e0b9bc2d49a2b7c6407c6530114", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=d773a024a2976f2759235551a52101cd08b37cce", "patch": "@@ -172,7 +172,6 @@ pub trait TyVisitor {\n \n extern \"rust-intrinsic\" {\n     /// Abort the execution of the process.\n-    #[cfg(not(stage0))]\n     pub fn abort() -> !;\n \n     /// Atomic compare and exchange, sequentially consistent."}, {"sha": "60c569e75d0caefba8cf2e066586ea9782498467", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773a024a2976f2759235551a52101cd08b37cce/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=d773a024a2976f2759235551a52101cd08b37cce", "patch": "@@ -975,22 +975,6 @@ pub trait ImmutableVector<'self, T> {\n \n impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n     #[inline]\n-    #[cfg(stage0)]\n-    fn slice(&self, start: uint, end: uint) -> &'self [T] {\n-        assert!(start <= end);\n-        assert!(end <= self.len());\n-        do self.as_imm_buf |p, _len| {\n-            unsafe {\n-                cast::transmute(Slice {\n-                    data: ptr::offset(p, start as int),\n-                    len: (end - start) * sys::nonzero_size_of::<T>(),\n-                })\n-            }\n-        }\n-    }\n-\n-    #[inline]\n-    #[cfg(not(stage0))]\n     fn slice(&self, start: uint, end: uint) -> &'self [T] {\n         assert!(start <= end);\n         assert!(end <= self.len());\n@@ -1149,14 +1133,6 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n     }\n \n     #[inline]\n-    #[cfg(stage0)]\n-    fn as_imm_buf<U>(&self, f: &fn(*T, uint) -> U) -> U {\n-        let s = self.repr();\n-        f(s.data, s.len / sys::nonzero_size_of::<T>())\n-    }\n-\n-    #[inline]\n-    #[cfg(not(stage0))]\n     fn as_imm_buf<U>(&self, f: &fn(*T, uint) -> U) -> U {\n         let s = self.repr();\n         f(s.data, s.len)\n@@ -1944,22 +1920,6 @@ pub trait MutableVector<'self, T> {\n \n impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n     #[inline]\n-    #[cfg(stage0)]\n-    fn mut_slice(self, start: uint, end: uint) -> &'self mut [T] {\n-        assert!(start <= end);\n-        assert!(end <= self.len());\n-        do self.as_mut_buf |p, _len| {\n-            unsafe {\n-                cast::transmute(Slice {\n-                    data: ptr::mut_offset(p, start as int) as *T,\n-                    len: (end - start) * sys::nonzero_size_of::<T>()\n-                })\n-            }\n-        }\n-    }\n-\n-    #[inline]\n-    #[cfg(not(stage0))]\n     fn mut_slice(self, start: uint, end: uint) -> &'self mut [T] {\n         assert!(start <= end);\n         assert!(end <= self.len());\n@@ -2052,14 +2012,6 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n     }\n \n     #[inline]\n-    #[cfg(stage0)]\n-    fn as_mut_buf<U>(self, f: &fn(*mut T, uint) -> U) -> U {\n-        let Slice{ data, len } = self.repr();\n-        f(data as *mut T, len / sys::nonzero_size_of::<T>())\n-    }\n-\n-    #[inline]\n-    #[cfg(not(stage0))]\n     fn as_mut_buf<U>(self, f: &fn(*mut T, uint) -> U) -> U {\n         let Slice{ data, len } = self.repr();\n         f(data as *mut T, len)\n@@ -2151,22 +2103,6 @@ pub mod raw {\n      * not bytes).\n      */\n     #[inline]\n-    #[cfg(stage0)]\n-    pub unsafe fn buf_as_slice<T,U>(p: *T,\n-                                    len: uint,\n-                                    f: &fn(v: &[T]) -> U) -> U {\n-        f(cast::transmute(Slice {\n-            data: p,\n-            len: len * sys::nonzero_size_of::<T>()\n-        }))\n-    }\n-\n-    /**\n-     * Form a slice from a pointer and length (as a number of units,\n-     * not bytes).\n-     */\n-    #[inline]\n-    #[cfg(not(stage0))]\n     pub unsafe fn buf_as_slice<T,U>(p: *T,\n                                     len: uint,\n                                     f: &fn(v: &[T]) -> U) -> U {\n@@ -2181,22 +2117,6 @@ pub mod raw {\n      * not bytes).\n      */\n     #[inline]\n-    #[cfg(stage0)]\n-    pub unsafe fn mut_buf_as_slice<T,U>(p: *mut T,\n-                                        len: uint,\n-                                        f: &fn(v: &mut [T]) -> U) -> U {\n-        f(cast::transmute(Slice {\n-            data: p as *T,\n-            len: len * sys::nonzero_size_of::<T>()\n-        }))\n-    }\n-\n-    /**\n-     * Form a slice from a pointer and length (as a number of units,\n-     * not bytes).\n-     */\n-    #[inline]\n-    #[cfg(not(stage0))]\n     pub unsafe fn mut_buf_as_slice<T,U>(p: *mut T,\n                                         len: uint,\n                                         f: &fn(v: &mut [T]) -> U) -> U {"}, {"sha": "627546f090703038b6f45e75592bf2d88f701f2e", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d773a024a2976f2759235551a52101cd08b37cce/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d773a024a2976f2759235551a52101cd08b37cce/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=d773a024a2976f2759235551a52101cd08b37cce", "patch": "@@ -1,3 +1,11 @@\n+S 2013-10-16 6c08cc2\n+  freebsd-x86_64 03caf882078eff9b4e04d116732b41a3cdfc260f\n+  linux-i386 ce30bb90434e9eb9920028a5408e1f986ba2ad5d\n+  linux-x86_64 58b1d58a9bf4f0cd11ab479e84f6167cb623cd7a\n+  macos-i386 9efd28f2eabbc60f507f023faa4f20f3b87aab17\n+  macos-x86_64 5f877e0593925d488591e6f0386f4db9b76d2e34\n+  winnt-i386 ca2b4d24e992dc3178c5cde648305d5bc5c11676\n+\n S 2013-10-10 8015f9c\n   freebsd-x86_64 e63594f61d24bec15bc6fa2401fbc76d3651a743\n   linux-i386 7838768d94ba17866ac1e880b896372f08cb48e9"}]}