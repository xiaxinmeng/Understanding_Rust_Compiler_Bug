{"sha": "14667d147417546cee9f4c8ae8aa78f71e371e6c", "node_id": "C_kwDOAAsO6NoAKDE0NjY3ZDE0NzQxNzU0NmNlZTlmNGM4YWU4YWE3OGY3MWUzNzFlNmM", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-04-21T17:42:55Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-04-21T17:45:40Z"}, "message": "Fix missing whitespace in `collapsible_else_if` suggestion", "tree": {"sha": "a239de81851cb6e38fa9c13646c16770d94148c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a239de81851cb6e38fa9c13646c16770d94148c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14667d147417546cee9f4c8ae8aa78f71e371e6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14667d147417546cee9f4c8ae8aa78f71e371e6c", "html_url": "https://github.com/rust-lang/rust/commit/14667d147417546cee9f4c8ae8aa78f71e371e6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14667d147417546cee9f4c8ae8aa78f71e371e6c/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9d31e71beacf97ce44d3cf677e5616c720051dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d31e71beacf97ce44d3cf677e5616c720051dd", "html_url": "https://github.com/rust-lang/rust/commit/a9d31e71beacf97ce44d3cf677e5616c720051dd"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "3227e6e86af4e3021c3b97c28655437536f12f2c", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14667d147417546cee9f4c8ae8aa78f71e371e6c/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14667d147417546cee9f4c8ae8aa78f71e371e6c/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=14667d147417546cee9f4c8ae8aa78f71e371e6c", "patch": "@@ -13,13 +13,14 @@\n //! This lint is **warn** by default\n \n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::source::{snippet_block, snippet_block_with_applicability};\n+use clippy_utils::source::{snippet, snippet_block, snippet_block_with_applicability};\n use clippy_utils::sugg::Sugg;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -102,7 +103,7 @@ impl EarlyLintPass for CollapsibleIf {\n fn check_if(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     if let ast::ExprKind::If(check, then, else_) = &expr.kind {\n         if let Some(else_) = else_ {\n-            check_collapsible_maybe_if_let(cx, else_);\n+            check_collapsible_maybe_if_let(cx, then.span, else_);\n         } else if let ast::ExprKind::Let(..) = check.kind {\n             // Prevent triggering on `if let a = b { if c { .. } }`.\n         } else {\n@@ -119,7 +120,7 @@ fn block_starts_with_comment(cx: &EarlyContext<'_>, expr: &ast::Block) -> bool {\n     trimmed_block_text.starts_with(\"//\") || trimmed_block_text.starts_with(\"/*\")\n }\n \n-fn check_collapsible_maybe_if_let(cx: &EarlyContext<'_>, else_: &ast::Expr) {\n+fn check_collapsible_maybe_if_let(cx: &EarlyContext<'_>, then_span: Span, else_: &ast::Expr) {\n     if_chain! {\n         if let ast::ExprKind::Block(ref block, _) = else_.kind;\n         if !block_starts_with_comment(cx, block);\n@@ -128,14 +129,23 @@ fn check_collapsible_maybe_if_let(cx: &EarlyContext<'_>, else_: &ast::Expr) {\n         if !else_.span.from_expansion();\n         if let ast::ExprKind::If(..) = else_.kind;\n         then {\n+            // Prevent \"elseif\"\n+            // Check that the \"else\" is followed by whitespace\n+            let up_to_else = then_span.between(block.span);\n+            let requires_space = if let Some(c) = snippet(cx, up_to_else, \"..\").chars().last() { !c.is_whitespace() } else { false };\n+\n             let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_sugg(\n                 cx,\n                 COLLAPSIBLE_ELSE_IF,\n                 block.span,\n                 \"this `else { if .. }` block can be collapsed\",\n                 \"collapse nested if block\",\n-                snippet_block_with_applicability(cx, else_.span, \"..\", Some(block.span), &mut applicability).into_owned(),\n+                format!(\n+                    \"{}{}\",\n+                    if requires_space { \" \" } else { \"\" },\n+                    snippet_block_with_applicability(cx, else_.span, \"..\", Some(block.span), &mut applicability)\n+                ),\n                 applicability,\n             );\n         }"}, {"sha": "d6a5a78506791a0e782c4c4911091d4f96ef7104", "filename": "tests/ui/collapsible_else_if.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14667d147417546cee9f4c8ae8aa78f71e371e6c/tests%2Fui%2Fcollapsible_else_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/14667d147417546cee9f4c8ae8aa78f71e371e6c/tests%2Fui%2Fcollapsible_else_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_else_if.fixed?ref=14667d147417546cee9f4c8ae8aa78f71e371e6c", "patch": "@@ -75,3 +75,10 @@ fn main() {\n         }\n     }\n }\n+\n+#[rustfmt::skip]\n+#[allow(dead_code)]\n+fn issue_7318() {\n+    if true { println!(\"I've been resolved!\")\n+    }else if false {}\n+}"}, {"sha": "4399fc8b2bd1d4b760828576d4d09055a6aaeabd", "filename": "tests/ui/collapsible_else_if.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14667d147417546cee9f4c8ae8aa78f71e371e6c/tests%2Fui%2Fcollapsible_else_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14667d147417546cee9f4c8ae8aa78f71e371e6c/tests%2Fui%2Fcollapsible_else_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_else_if.rs?ref=14667d147417546cee9f4c8ae8aa78f71e371e6c", "patch": "@@ -89,3 +89,12 @@ fn main() {\n         }\n     }\n }\n+\n+#[rustfmt::skip]\n+#[allow(dead_code)]\n+fn issue_7318() {\n+    if true { println!(\"I've been resolved!\")\n+    }else{\n+        if false {}\n+    }\n+}"}, {"sha": "45b2094c9948b6961e4da37a27bc5ce631ccb56c", "filename": "tests/ui/collapsible_else_if.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14667d147417546cee9f4c8ae8aa78f71e371e6c/tests%2Fui%2Fcollapsible_else_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14667d147417546cee9f4c8ae8aa78f71e371e6c/tests%2Fui%2Fcollapsible_else_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_else_if.stderr?ref=14667d147417546cee9f4c8ae8aa78f71e371e6c", "patch": "@@ -150,5 +150,14 @@ LL +         println!(\"!\")\n LL +     }\n    |\n \n-error: aborting due to 7 previous errors\n+error: this `else { if .. }` block can be collapsed\n+  --> $DIR/collapsible_else_if.rs:97:10\n+   |\n+LL |       }else{\n+   |  __________^\n+LL | |         if false {}\n+LL | |     }\n+   | |_____^ help: collapse nested if block: `if false {}`\n+\n+error: aborting due to 8 previous errors\n "}]}