{"sha": "544b3a1bb476364f1e5d149cf82beb98a219dda5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NGIzYTFiYjQ3NjM2NGYxZTVkMTQ5Y2Y4MmJlYjk4YTIxOWRkYTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T11:19:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T11:19:04Z"}, "message": "fix rebase fallout", "tree": {"sha": "f2ed92e8e89ec457378e2051a4ad378f79b83a95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2ed92e8e89ec457378e2051a4ad378f79b83a95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/544b3a1bb476364f1e5d149cf82beb98a219dda5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/544b3a1bb476364f1e5d149cf82beb98a219dda5", "html_url": "https://github.com/rust-lang/rust/commit/544b3a1bb476364f1e5d149cf82beb98a219dda5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/544b3a1bb476364f1e5d149cf82beb98a219dda5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a413242efef8e398c385a695eecb255f2713d49d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a413242efef8e398c385a695eecb255f2713d49d", "html_url": "https://github.com/rust-lang/rust/commit/a413242efef8e398c385a695eecb255f2713d49d"}], "stats": {"total": 85, "additions": 45, "deletions": 40}, "files": [{"sha": "84fdbb9423e0a2259cb609b24fe2a0bfd19c580b", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -209,7 +209,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n \n fn dump_mir_results<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     regioncx: &RegionInferenceContext<'_>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,"}, {"sha": "add07b1ddfe0551fabeb7a6c247cbee28c9c1b84", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -2427,7 +2427,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n pub struct TypeckMir;\n \n impl MirPass for TypeckMir {\n-    fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource, mir: &mut Mir<'tcx>) {\n+    fn run_pass<'a, 'tcx>(\n+        &self,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        src: MirSource<'tcx>,\n+        mir: &mut Mir<'tcx>,\n+    ) {\n         let def_id = src.def_id();\n         debug!(\"run_pass: {:?}\", def_id);\n "}, {"sha": "88042d64e96b7271b3600d884dcf73165bb6667b", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -33,7 +33,7 @@ pub use self::AddCallGuards::*;\n impl MirPass for AddCallGuards {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         self.add_call_guards(mir);\n     }"}, {"sha": "4d4c89b8b6a40a38c35655d5a014c7e7a968ff95", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -42,7 +42,7 @@ pub struct AddMovesForPackedDrops;\n impl MirPass for AddMovesForPackedDrops {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          src: MirSource,\n+                          src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>)\n     {\n         debug!(\"add_moves_for_packed_drops({:?} @ {:?})\", src, mir.span);"}, {"sha": "e66c11aa36e0e5d1fba1e51cfc7229d3566efbd5", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -77,7 +77,7 @@ fn may_have_reference<'a, 'gcx, 'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n impl MirPass for AddRetag {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>)\n     {\n         if !tcx.sess.opts.debugging_opts.mir_emit_retag {"}, {"sha": "890d2c56f42b24933bbe40f5939de808af317e13", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -35,7 +35,7 @@ pub struct DeleteAscribeUserType;\n impl MirPass for CleanAscribeUserType {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _source: MirSource,\n+                          _source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let mut delete = DeleteAscribeUserType;\n         delete.visit_mir(mir);\n@@ -69,7 +69,7 @@ pub struct DeleteFakeBorrows {\n impl MirPass for CleanFakeReadsAndBorrows {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _source: MirSource,\n+                          _source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let mut delete_reads = DeleteAndRecordFakeReads::default();\n         delete_reads.visit_mir(mir);"}, {"sha": "7d907ca3a215e019f67e6ecb907549e0047452d5", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -30,7 +30,7 @@ pub struct CopyPropagation;\n impl MirPass for CopyPropagation {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _source: MirSource,\n+                          _source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         // We only run when the MIR optimization level is > 1.\n         // This avoids a slow pass, and messing up debug info."}, {"sha": "9061dfff76fe8f57f5b55e62cb46458de7b1c588", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -8,7 +8,7 @@ pub struct Deaggregator;\n impl MirPass for Deaggregator {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _source: MirSource,\n+                          _source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let (basic_blocks, local_decls) = mir.basic_blocks_and_local_decls_mut();\n         let local_decls = &*local_decls;"}, {"sha": "81e48fe2dbe3bb33d9495bef7ed428000f36e934", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -20,7 +20,7 @@ impl MirPass for Marker {\n \n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _source: MirSource,\n+                          _source: MirSource<'tcx>,\n                           _mir: &mut Mir<'tcx>)\n     {\n     }\n@@ -41,7 +41,7 @@ impl fmt::Display for Disambiguator {\n pub fn on_mir_pass<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              pass_num: &dyn fmt::Display,\n                              pass_name: &str,\n-                             source: MirSource,\n+                             source: MirSource<'tcx>,\n                              mir: &Mir<'tcx>,\n                              is_after: bool) {\n     if mir_util::dump_enabled(tcx, pass_name, source) {"}, {"sha": "6e093a7e240b39e1d1d5c82306afe018ec72d571", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -23,7 +23,7 @@ pub struct ElaborateDrops;\n impl MirPass for ElaborateDrops {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          src: MirSource,\n+                          src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>)\n     {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, mir.span);"}, {"sha": "d59bb3ec5b1c0e30488e2cda2f8977ae854dc567", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -53,7 +53,7 @@ pub struct EraseRegions;\n impl MirPass for EraseRegions {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _: MirSource,\n+                          _: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         EraseRegionsVisitor::new(tcx).visit_mir(mir);\n     }"}, {"sha": "33d98d8f076c88be39b896c60c753aa55b7df4f8", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -376,7 +376,7 @@ impl<'tcx> Visitor<'tcx> for StorageIgnored {\n fn locals_live_across_suspend_points(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     movable: bool,\n ) -> (\n     liveness::LiveVarSet<Local>,\n@@ -484,7 +484,7 @@ fn locals_live_across_suspend_points(\n }\n \n fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            source: MirSource,\n+                            source: MirSource<'tcx>,\n                             upvars: Vec<Ty<'tcx>>,\n                             interior: Ty<'tcx>,\n                             movable: bool,\n@@ -635,7 +635,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 transform: &TransformVisitor<'a, 'tcx>,\n                 def_id: DefId,\n-                source: MirSource,\n+                source: MirSource<'tcx>,\n                 gen_ty: Ty<'tcx>,\n                 mir: &Mir<'tcx>,\n                 drop_clean: BasicBlock) -> Mir<'tcx> {\n@@ -758,7 +758,7 @@ fn create_generator_resume_function<'a, 'tcx>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         transform: TransformVisitor<'a, 'tcx>,\n         def_id: DefId,\n-        source: MirSource,\n+        source: MirSource<'tcx>,\n         mir: &mut Mir<'tcx>) {\n     // Poison the generator when it unwinds\n     for block in mir.basic_blocks_mut() {\n@@ -869,7 +869,7 @@ fn create_cases<'a, 'tcx, F>(mir: &mut Mir<'tcx>,\n impl MirPass for StateTransform {\n     fn run_pass<'a, 'tcx>(&self,\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    source: MirSource,\n+                    source: MirSource<'tcx>,\n                     mir: &mut Mir<'tcx>) {\n         let yield_ty = if let Some(yield_ty) = mir.yield_ty {\n             yield_ty"}, {"sha": "290915763e275671df529077793a6d3231c0d73e", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -13,7 +13,7 @@ pub struct InstCombine;\n impl MirPass for InstCombine {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _: MirSource,\n+                          _: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         // We only run when optimizing MIR (at any level).\n         if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {"}, {"sha": "3d1f55e530e62a7c88ea1dc9a210d01e470cac90", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -12,7 +12,7 @@ pub struct Lower128Bit;\n impl MirPass for Lower128Bit {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let debugging_override = tcx.sess.opts.debugging_opts.lower_128bit_ops;\n         let target_default = tcx.sess.host.options.i128_lowering;"}, {"sha": "089d9b9b544540a83cc3e2bb4af4b097adfa2ef7", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -11,7 +11,7 @@ pub struct NoLandingPads;\n impl MirPass for NoLandingPads {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _: MirSource,\n+                          _: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         no_landing_pads(tcx, mir)\n     }"}, {"sha": "76b8b83031a0a239b830c66509e691b1a0202df7", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -1159,7 +1159,7 @@ pub struct QualifyAndPromoteConstants;\n impl MirPass for QualifyAndPromoteConstants {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          src: MirSource,\n+                          src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         if mir.return_ty().references_error() {"}, {"sha": "68832b73ccd8737a4f2b998c870c4fe7ee7a4fdf", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -24,7 +24,7 @@ pub fn remove_noop_landing_pads<'a, 'tcx>(\n impl MirPass for RemoveNoopLandingPads {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         remove_noop_landing_pads(tcx, mir);\n     }"}, {"sha": "40e02e712c1565bb59065a1a97a6ca0805dc5ed1", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -24,7 +24,7 @@ pub struct SanityCheck;\n \n impl MirPass for SanityCheck {\n     fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          src: MirSource, mir: &mut Mir<'tcx>) {\n+                          src: MirSource<'tcx>, mir: &mut Mir<'tcx>) {\n         let def_id = src.def_id();\n         let id = tcx.hir().as_local_node_id(def_id).unwrap();\n         if !tcx.has_attr(def_id, \"rustc_mir\") {"}, {"sha": "14e7895af0419572fa946ba532f02af8ec16374c", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -59,7 +59,7 @@ impl MirPass for SimplifyCfg {\n \n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, mir);\n         simplify_cfg(mir);\n@@ -298,7 +298,7 @@ pub struct SimplifyLocals;\n impl MirPass for SimplifyLocals {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _: MirSource,\n+                          _: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let mut marker = DeclMarker { locals: BitSet::new_empty(mir.local_decls.len()) };\n         marker.visit_mir(mir);"}, {"sha": "3c4d1227a691c4fa7bf2dd67af95f5e2797bbe4d", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -21,7 +21,7 @@ impl MirPass for SimplifyBranches {\n \n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         for block in mir.basic_blocks_mut() {\n             let terminator = block.terminator_mut();"}, {"sha": "fd8d68a482262320658f748fc1294c6d08f0da82", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -39,7 +39,7 @@ pub struct UniformArrayMoveOut;\n impl MirPass for UniformArrayMoveOut {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let mut patch = MirPatch::new(mir);\n         {\n@@ -161,7 +161,7 @@ pub struct RestoreSubsliceArrayMoveOut;\n impl MirPass for RestoreSubsliceArrayMoveOut {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let mut patch = MirPatch::new(mir);\n         {"}, {"sha": "847699cc500c9b979d86ec96be83af46e3b02cc4", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -307,7 +307,7 @@ fn block<'tcx, V: Idx>(\n pub fn dump_mir<'a, 'tcx, V: Idx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pass_name: &str,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     map: &impl LiveVariableMap<LiveVar = V>,\n     result: &LivenessResult<V>,\n@@ -326,7 +326,7 @@ fn dump_matched_mir_node<'a, 'tcx, V: Idx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pass_name: &str,\n     node_path: &str,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     map: &dyn LiveVariableMap<LiveVar = V>,\n     result: &LivenessResult<V>,\n@@ -348,7 +348,7 @@ fn dump_matched_mir_node<'a, 'tcx, V: Idx>(\n \n pub fn write_mir_fn<'a, 'tcx, V: Idx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    src: MirSource,\n+    src: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     map: &dyn LiveVariableMap<LiveVar = V>,\n     w: &mut dyn Write,"}, {"sha": "1357f8fe79a0dae138dc3776f6b20e5b35fad936", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544b3a1bb476364f1e5d149cf82beb98a219dda5/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=544b3a1bb476364f1e5d149cf82beb98a219dda5", "patch": "@@ -68,7 +68,7 @@ pub fn dump_mir<'a, 'gcx, 'tcx, F>(\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     extra_data: F,\n ) where\n@@ -97,7 +97,7 @@ pub fn dump_mir<'a, 'gcx, 'tcx, F>(\n pub fn dump_enabled<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     pass_name: &str,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n ) -> bool {\n     let filters = match tcx.sess.opts.debugging_opts.dump_mir {\n         None => return false,\n@@ -124,7 +124,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n     pass_name: &str,\n     node_path: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     mut extra_data: F,\n ) where\n@@ -164,7 +164,7 @@ fn dump_path(\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n ) -> PathBuf {\n     let promotion_id = match source.promoted {\n         Some(id) => format!(\"-{:?}\", id),\n@@ -231,7 +231,7 @@ pub(crate) fn create_dump_file(\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n ) -> io::Result<fs::File> {\n     let file_path = dump_path(tcx, extension, pass_num, pass_name, disambiguator, source);\n     if let Some(parent) = file_path.parent() {\n@@ -282,7 +282,7 @@ pub fn write_mir_pretty<'a, 'gcx, 'tcx>(\n \n pub fn write_mir_fn<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    src: MirSource,\n+    src: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     extra_data: &mut F,\n     w: &mut dyn Write,\n@@ -546,7 +546,7 @@ fn write_scope_tree(\n /// local variables (both user-defined bindings and compiler temporaries).\n pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    src: MirSource,\n+    src: MirSource<'tcx>,\n     mir: &Mir<'_>,\n     w: &mut dyn Write,\n ) -> io::Result<()> {\n@@ -588,7 +588,7 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n \n fn write_mir_sig(\n     tcx: TyCtxt<'_, '_, '_>,\n-    src: MirSource,\n+    src: MirSource<'tcx>,\n     mir: &Mir<'_>,\n     w: &mut dyn Write,\n ) -> io::Result<()> {"}]}