{"sha": "1c582be63b35c6602638023d4bd0bc426b0ca744", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNTgyYmU2M2IzNWM2NjAyNjM4MDIzZDRiZDBiYzQyNmIwY2E3NDQ=", "commit": {"author": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-07-07T13:06:54Z"}, "committer": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-07-07T13:06:54Z"}, "message": "Moved module resolution test in mods.rs", "tree": {"sha": "1dd7188a39afb8e18c1e57f522abb059bdecba92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dd7188a39afb8e18c1e57f522abb059bdecba92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c582be63b35c6602638023d4bd0bc426b0ca744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c582be63b35c6602638023d4bd0bc426b0ca744", "html_url": "https://github.com/rust-lang/rust/commit/1c582be63b35c6602638023d4bd0bc426b0ca744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c582be63b35c6602638023d4bd0bc426b0ca744/comments", "author": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8579a9b834555339e400f3161280305a99189a5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8579a9b834555339e400f3161280305a99189a5f", "html_url": "https://github.com/rust-lang/rust/commit/8579a9b834555339e400f3161280305a99189a5f"}], "stats": {"total": 388, "additions": 195, "deletions": 193}, "files": [{"sha": "c84d2eada8219a4745930dd5de380bf14bc902ce", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c582be63b35c6602638023d4bd0bc426b0ca744/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c582be63b35c6602638023d4bd0bc426b0ca744/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=1c582be63b35c6602638023d4bd0bc426b0ca744", "patch": "@@ -1,6 +1,6 @@\n /// This module implements import-resolution/macro expansion algorithm.\n ///\n-/// The result of this module is `CrateDefMap`: a datastructure which contains:\n+/// The result of this module is `CrateDefMap`: a data structure which contains:\n ///\n ///   * a tree of modules for the crate\n ///   * for each module, a set of items visible in the module (directly declared"}, {"sha": "8b0887fb59fe195ab6cd498242911e716ba59876", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 191, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/1c582be63b35c6602638023d4bd0bc426b0ca744/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c582be63b35c6602638023d4bd0bc426b0ca744/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=1c582be63b35c6602638023d4bd0bc426b0ca744", "patch": "@@ -2,6 +2,7 @@ mod macros;\n mod globs;\n mod incremental;\n mod primitives;\n+mod mods;\n \n use std::sync::Arc;\n \n@@ -312,178 +313,6 @@ fn edition_2015_imports() {\n     \"###);\n }\n \n-#[test]\n-fn module_resolution_works_for_non_standard_filenames() {\n-    let map = def_map_with_crate_graph(\n-        \"\n-        //- /my_library.rs\n-        mod foo;\n-        use self::foo::Bar;\n-\n-        //- /foo/mod.rs\n-        pub struct Bar;\n-        \",\n-        crate_graph! {\n-            \"my_library\": (\"/my_library.rs\", []),\n-        },\n-    );\n-\n-    assert_snapshot_matches!(map, @r###\"\n-        \u22eecrate\n-        \u22eeBar: t v\n-        \u22eefoo: t\n-        \u22ee\n-        \u22eecrate::foo\n-        \u22eeBar: t v\n-    \"###);\n-}\n-\n-#[test]\n-fn module_resolution_works_for_raw_modules() {\n-    let map = def_map_with_crate_graph(\n-        \"\n-        //- /library.rs\n-        mod r#async;\n-        use self::r#async::Bar;\n-\n-        //- /async.rs\n-        pub struct Bar;\n-        \",\n-        crate_graph! {\n-            \"library\": (\"/library.rs\", []),\n-        },\n-    );\n-\n-    assert_snapshot_matches!(map, @r###\"\n-        \u22eecrate\n-        \u22eeBar: t v\n-        \u22eeasync: t\n-        \u22ee\n-        \u22eecrate::async\n-        \u22eeBar: t v\n-    \"###);\n-}\n-\n-#[test]\n-fn module_resolution_decl_path() {\n-    let map = def_map_with_crate_graph(\n-        \"\n-        //- /library.rs\n-        #[path = \\\"bar/baz/foo.rs\\\"]\n-        mod foo;\n-        use self::foo::Bar;\n-\n-        //- /bar/baz/foo.rs\n-        pub struct Bar;\n-        \",\n-        crate_graph! {\n-            \"library\": (\"/library.rs\", []),\n-        },\n-    );\n-\n-    assert_snapshot_matches!(map, @r###\"\n-        \u22eecrate\n-        \u22eeBar: t v\n-        \u22eefoo: t\n-        \u22ee\n-        \u22eecrate::foo\n-        \u22eeBar: t v\n-    \"###);\n-}\n-\n-#[test]\n-fn module_resolution_module_with_path_in_mod_rs() {\n-    let map = def_map_with_crate_graph(\n-        \"\n-        //- /main.rs\n-        mod foo;\n-        \n-        //- /foo/mod.rs\n-        #[path = \\\"baz.rs\\\"]\n-        pub mod bar;\n-\n-        use self::bar::Baz;\n-\n-        //- /foo/baz.rs\n-        pub struct Baz;\n-        \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", []),\n-        },\n-    );\n-\n-    assert_snapshot_matches!(map, @r###\"\n-        \u22eecrate\n-        \u22eefoo: t\n-        \u22ee\n-        \u22eecrate::foo\n-        \u22eeBaz: t v\n-        \u22eebar: t\n-        \u22ee\n-        \u22eecrate::foo::bar\n-        \u22eeBaz: t v\n-    \"###);\n-}\n-\n-#[test]\n-fn module_resolution_module_with_path_non_crate_root() {\n-    let map = def_map_with_crate_graph(\n-        \"\n-        //- /main.rs\n-        mod foo;\n-        \n-        //- /foo.rs\n-        #[path = \\\"baz.rs\\\"]\n-        pub mod bar;\n-\n-        use self::bar::Baz;\n-\n-        //- /baz.rs\n-        pub struct Baz;\n-        \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", []),\n-        },\n-    );\n-\n-    assert_snapshot_matches!(map, @r###\"\n-        \u22eecrate\n-        \u22eefoo: t\n-        \u22ee\n-        \u22eecrate::foo\n-        \u22eeBaz: t v\n-        \u22eebar: t\n-        \u22ee\n-        \u22eecrate::foo::bar\n-        \u22eeBaz: t v\n-    \"###);\n-}\n-\n-#[test]\n-fn name_res_works_for_broken_modules() {\n-    covers!(name_res_works_for_broken_modules);\n-    let map = def_map(\n-        \"\n-        //- /lib.rs\n-        mod foo // no `;`, no body\n-\n-        use self::foo::Baz;\n-\n-        //- /foo/mod.rs\n-        pub mod bar;\n-\n-        pub use self::bar::Baz;\n-\n-        //- /foo/bar.rs\n-        pub struct Baz;\n-        \",\n-    );\n-    assert_snapshot_matches!(map, @r###\"\n-        \u22eecrate\n-        \u22eeBaz: _\n-    \"###);\n-}\n-\n #[test]\n fn item_map_using_self() {\n     let map = def_map(\n@@ -676,22 +505,3 @@ fn values_dont_shadow_extern_crates() {\n         \u22eefoo: v\n     \"###);\n }\n-\n-#[test]\n-fn unresolved_module_diagnostics() {\n-    let diagnostics = MockDatabase::with_files(\n-        r\"\n-        //- /lib.rs\n-        mod foo;\n-        mod bar;\n-        mod baz {}\n-        //- /foo.rs\n-        \",\n-    )\n-    .diagnostics();\n-\n-    assert_snapshot_matches!(diagnostics, @r###\"\n-\"mod bar;\": unresolved module\n-\"###\n-    );\n-}"}, {"sha": "7c8c832fc1781a3fdb5976f6634e6dcfd5084af8", "filename": "crates/ra_hir/src/nameres/tests/mods.rs", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/1c582be63b35c6602638023d4bd0bc426b0ca744/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c582be63b35c6602638023d4bd0bc426b0ca744/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs?ref=1c582be63b35c6602638023d4bd0bc426b0ca744", "patch": "@@ -0,0 +1,192 @@\n+use super::*;\n+\n+#[test]\n+fn name_res_works_for_broken_modules() {\n+    covers!(name_res_works_for_broken_modules);\n+    let map = def_map(\n+        \"\n+        //- /lib.rs\n+        mod foo // no `;`, no body\n+\n+        use self::foo::Baz;\n+\n+        //- /foo/mod.rs\n+        pub mod bar;\n+\n+        pub use self::bar::Baz;\n+\n+        //- /foo/bar.rs\n+        pub struct Baz;\n+        \",\n+    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBaz: _\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_works_for_non_standard_filenames() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /my_library.rs\n+        mod foo;\n+        use self::foo::Bar;\n+\n+        //- /foo/mod.rs\n+        pub struct Bar;\n+        \",\n+        crate_graph! {\n+            \"my_library\": (\"/my_library.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBar: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBar: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_works_for_raw_modules() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /library.rs\n+        mod r#async;\n+        use self::r#async::Bar;\n+\n+        //- /async.rs\n+        pub struct Bar;\n+        \",\n+        crate_graph! {\n+            \"library\": (\"/library.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBar: t v\n+        \u22eeasync: t\n+        \u22ee\n+        \u22eecrate::async\n+        \u22eeBar: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_decl_path() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /library.rs\n+        #[path = \\\"bar/baz/foo.rs\\\"]\n+        mod foo;\n+        use self::foo::Bar;\n+\n+        //- /bar/baz/foo.rs\n+        pub struct Bar;\n+        \",\n+        crate_graph! {\n+            \"library\": (\"/library.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBar: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBar: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_module_with_path_in_mod_rs() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        mod foo;\n+        \n+        //- /foo/mod.rs\n+        #[path = \\\"baz.rs\\\"]\n+        pub mod bar;\n+\n+        use self::bar::Baz;\n+\n+        //- /foo/baz.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_module_with_path_non_crate_root() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        mod foo;\n+        \n+        //- /foo.rs\n+        #[path = \\\"baz.rs\\\"]\n+        pub mod bar;\n+\n+        use self::bar::Baz;\n+\n+        //- /baz.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn unresolved_module_diagnostics() {\n+    let diagnostics = MockDatabase::with_files(\n+        r\"\n+        //- /lib.rs\n+        mod foo;\n+        mod bar;\n+        mod baz {}\n+        //- /foo.rs\n+        \",\n+    )\n+    .diagnostics();\n+\n+    assert_snapshot_matches!(diagnostics, @r###\"\n+\"mod bar;\": unresolved module\n+\"###\n+    );\n+}"}, {"sha": "76ace66ea912428460e3a988f97cb11f8c3f6f36", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c582be63b35c6602638023d4bd0bc426b0ca744/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c582be63b35c6602638023d4bd0bc426b0ca744/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=1c582be63b35c6602638023d4bd0bc426b0ca744", "patch": "@@ -116,7 +116,7 @@ impl CrateImplBlocks {\n \n fn def_crates(db: &impl HirDatabase, cur_crate: Crate, ty: &Ty) -> Option<ArrayVec<[Crate; 2]>> {\n     // Types like slice can have inherent impls in several crates, (core and alloc).\n-    // The correspoinding impls are marked with lang items, so we can use them to find the required crates.\n+    // The corresponding impls are marked with lang items, so we can use them to find the required crates.\n     macro_rules! lang_item_crate {\n         ($db:expr, $cur_crate:expr, $($name:expr),+ $(,)?) => {{\n             let mut v = ArrayVec::<[Crate; 2]>::new();"}]}