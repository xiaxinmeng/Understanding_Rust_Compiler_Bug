{"sha": "bc41cc0ec9fbe395598fde5ef22b3e95582a5236", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNDFjYzBlYzlmYmUzOTU1OThmZGU1ZWYyMmIzZTk1NTgyYTUyMzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-26T11:22:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-01T11:13:05Z"}, "message": "Make `unboxed_closure_kind` return `Option` to allow for the possibility that its value is not yet known.", "tree": {"sha": "29034001e2ab364a2dae6f64776f9a66db5f69a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29034001e2ab364a2dae6f64776f9a66db5f69a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc41cc0ec9fbe395598fde5ef22b3e95582a5236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc41cc0ec9fbe395598fde5ef22b3e95582a5236", "html_url": "https://github.com/rust-lang/rust/commit/bc41cc0ec9fbe395598fde5ef22b3e95582a5236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc41cc0ec9fbe395598fde5ef22b3e95582a5236/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53c1956cfbbe8a5957bfa62f57bfb0e4b999a7b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/53c1956cfbbe8a5957bfa62f57bfb0e4b999a7b0", "html_url": "https://github.com/rust-lang/rust/commit/53c1956cfbbe8a5957bfa62f57bfb0e4b999a7b0"}], "stats": {"total": 69, "additions": 51, "deletions": 18}, "files": [{"sha": "1330ad86bfc92e6ebda4781b62a895fe161809bc", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc41cc0ec9fbe395598fde5ef22b3e95582a5236/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc41cc0ec9fbe395598fde5ef22b3e95582a5236/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=bc41cc0ec9fbe395598fde5ef22b3e95582a5236", "patch": "@@ -594,8 +594,16 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n               let ty = try!(self.node_ty(fn_node_id));\n               match ty.sty {\n                   ty::ty_closure(closure_id, _, _) => {\n-                      let kind = self.typer.closure_kind(closure_id);\n-                      self.cat_upvar(id, span, var_id, fn_node_id, kind)\n+                      match self.typer.closure_kind(closure_id) {\n+                          Some(kind) => {\n+                              self.cat_upvar(id, span, var_id, fn_node_id, kind)\n+                          }\n+                          None => {\n+                              self.tcx().sess.span_bug(\n+                                  span,\n+                                  &*format!(\"No closure kind for {:?}\", closure_id));\n+                          }\n+                      }\n                   }\n                   _ => {\n                       self.tcx().sess.span_bug("}, {"sha": "106c07baaa7a1889a09d216370fa1356b670e456", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc41cc0ec9fbe395598fde5ef22b3e95582a5236/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc41cc0ec9fbe395598fde5ef22b3e95582a5236/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=bc41cc0ec9fbe395598fde5ef22b3e95582a5236", "patch": "@@ -1024,12 +1024,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                kind,\n                obligation.repr(self.tcx()));\n \n-        let closure_kind = self.closure_typer.closure_kind(closure_def_id);\n-\n-        debug!(\"closure_kind = {:?}\", closure_kind);\n-\n-        if closure_kind == kind {\n-            candidates.vec.push(ClosureCandidate(closure_def_id, substs.clone()));\n+        match self.closure_typer.closure_kind(closure_def_id) {\n+            Some(closure_kind) => {\n+                debug!(\"assemble_unboxed_candidates: closure_kind = {:?}\", closure_kind);\n+                if closure_kind == kind {\n+                    candidates.vec.push(ClosureCandidate(closure_def_id, substs.clone()));\n+                }\n+            }\n+            None => {\n+                debug!(\"assemble_unboxed_candidates: closure_kind not yet known\");\n+                candidates.ambiguous = true;\n+            }\n         }\n \n         Ok(())"}, {"sha": "cd9684b840b77b3bd6dd455ae16cc71afd29eaff", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bc41cc0ec9fbe395598fde5ef22b3e95582a5236/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc41cc0ec9fbe395598fde5ef22b3e95582a5236/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=bc41cc0ec9fbe395598fde5ef22b3e95582a5236", "patch": "@@ -2288,14 +2288,22 @@ impl ClosureKind {\n pub trait ClosureTyper<'tcx> {\n     fn param_env<'a>(&'a self) -> &'a ty::ParameterEnvironment<'a, 'tcx>;\n \n-    fn closure_kind(&self, def_id: ast::DefId) -> ty::ClosureKind;\n-\n+    /// Is this a `Fn`, `FnMut` or `FnOnce` closure? During typeck,\n+    /// returns `None` if the kind of this closure has not yet been\n+    /// inferred.\n+    fn closure_kind(&self,\n+                    def_id: ast::DefId)\n+                    -> Option<ty::ClosureKind>;\n+\n+    /// Returns the argument/return types of this closure.\n     fn closure_type(&self,\n                     def_id: ast::DefId,\n                     substs: &subst::Substs<'tcx>)\n                     -> ty::ClosureTy<'tcx>;\n \n-    // Returns `None` if the upvar types cannot yet be definitively determined.\n+    /// Returns the set of all upvars and their transformed\n+    /// types. During typeck, maybe return `None` if the upvar types\n+    /// have not yet been inferred.\n     fn closure_upvars(&self,\n                       def_id: ast::DefId,\n                       substs: &Substs<'tcx>)\n@@ -6473,8 +6481,11 @@ impl<'a,'tcx> ClosureTyper<'tcx> for ty::ParameterEnvironment<'a,'tcx> {\n         self\n     }\n \n-    fn closure_kind(&self, def_id: ast::DefId) -> ty::ClosureKind {\n-        self.tcx.closure_kind(def_id)\n+    fn closure_kind(&self,\n+                    def_id: ast::DefId)\n+                    -> Option<ty::ClosureKind>\n+    {\n+        Some(self.tcx.closure_kind(def_id))\n     }\n \n     fn closure_type(&self,"}, {"sha": "5782b3987cb485b245be12d8ecbe97296115351f", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc41cc0ec9fbe395598fde5ef22b3e95582a5236/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc41cc0ec9fbe395598fde5ef22b3e95582a5236/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=bc41cc0ec9fbe395598fde5ef22b3e95582a5236", "patch": "@@ -693,7 +693,10 @@ impl<'blk, 'tcx> ty::ClosureTyper<'tcx> for BlockS<'blk, 'tcx> {\n         &self.fcx.param_env\n     }\n \n-    fn closure_kind(&self, def_id: ast::DefId) -> ty::ClosureKind {\n+    fn closure_kind(&self,\n+                    def_id: ast::DefId)\n+                    -> Option<ty::ClosureKind>\n+    {\n         let typer = NormalizingClosureTyper::new(self.tcx());\n         typer.closure_kind(def_id)\n     }\n@@ -1065,8 +1068,11 @@ impl<'a,'tcx> ty::ClosureTyper<'tcx> for NormalizingClosureTyper<'a,'tcx> {\n         &self.param_env\n     }\n \n-    fn closure_kind(&self, def_id: ast::DefId) -> ty::ClosureKind {\n-        self.param_env.tcx.closure_kind(def_id)\n+    fn closure_kind(&self,\n+                    def_id: ast::DefId)\n+                    -> Option<ty::ClosureKind>\n+    {\n+        self.param_env.closure_kind(def_id)\n     }\n \n     fn closure_type(&self,"}, {"sha": "285b4fdf2e8744e6ab5bb0fc24dab28f653b8a2f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc41cc0ec9fbe395598fde5ef22b3e95582a5236/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc41cc0ec9fbe395598fde5ef22b3e95582a5236/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bc41cc0ec9fbe395598fde5ef22b3e95582a5236", "patch": "@@ -348,8 +348,11 @@ impl<'a, 'tcx> ty::ClosureTyper<'tcx> for FnCtxt<'a, 'tcx> {\n         &self.inh.param_env\n     }\n \n-    fn closure_kind(&self, def_id: ast::DefId) -> ty::ClosureKind {\n-        self.inh.closures.borrow()[def_id].kind\n+    fn closure_kind(&self,\n+                    def_id: ast::DefId)\n+                    -> Option<ty::ClosureKind>\n+    {\n+        Some(self.inh.closures.borrow()[def_id].kind)\n     }\n \n     fn closure_type(&self,"}]}