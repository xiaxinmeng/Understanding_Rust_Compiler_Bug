{"sha": "a6d7fe6209bb31cc46ec5ba60e16b789b5c91914", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZDdmZTYyMDliYjMxY2M0NmVjNWJhNjBlMTZiNzg5YjVjOTE5MTQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-14T11:21:47Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-14T11:21:47Z"}, "message": "std::vec: move documentation from impls to traits.\n\nThis means the text is visible in rustdoc.", "tree": {"sha": "f8afde894d2b864b842561d3ba14a95ee8aa9c2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8afde894d2b864b842561d3ba14a95ee8aa9c2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6d7fe6209bb31cc46ec5ba60e16b789b5c91914", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d7fe6209bb31cc46ec5ba60e16b789b5c91914", "html_url": "https://github.com/rust-lang/rust/commit/a6d7fe6209bb31cc46ec5ba60e16b789b5c91914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6d7fe6209bb31cc46ec5ba60e16b789b5c91914/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91abfd425d74af4cd083c3a6fc15bb39a4aa33da", "url": "https://api.github.com/repos/rust-lang/rust/commits/91abfd425d74af4cd083c3a6fc15bb39a4aa33da", "html_url": "https://github.com/rust-lang/rust/commit/91abfd425d74af4cd083c3a6fc15bb39a4aa33da"}], "stats": {"total": 609, "additions": 305, "deletions": 304}, "files": [{"sha": "77e38b480676b4aa5ec2920e66b0d41d30ea4728", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 305, "deletions": 304, "changes": 609, "blob_url": "https://github.com/rust-lang/rust/blob/a6d7fe6209bb31cc46ec5ba60e16b789b5c91914/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d7fe6209bb31cc46ec5ba60e16b789b5c91914/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=a6d7fe6209bb31cc46ec5ba60e16b789b5c91914", "patch": "@@ -825,49 +825,154 @@ impl<T: Clone> CopyableVector<T> for @[T] {\n     fn into_owned(self) -> ~[T] { self.to_owned() }\n }\n \n-#[allow(missing_doc)]\n+/// Extension methods for vectors\n pub trait ImmutableVector<'self, T> {\n+    /**\n+     * Returns a slice of self between `start` and `end`.\n+     *\n+     * Fails when `start` or `end` point outside the bounds of self,\n+     * or when `start` > `end`.\n+     */\n     fn slice(&self, start: uint, end: uint) -> &'self [T];\n+\n+    /**\n+     * Returns a slice of self from `start` to the end of the vec.\n+     *\n+     * Fails when `start` points outside the bounds of self.\n+     */\n     fn slice_from(&self, start: uint) -> &'self [T];\n+\n+    /**\n+     * Returns a slice of self from the start of the vec to `end`.\n+     *\n+     * Fails when `end` points outside the bounds of self.\n+     */\n     fn slice_to(&self, end: uint) -> &'self [T];\n+    /// Returns an iterator over the vector\n     fn iter(self) -> VecIterator<'self, T>;\n+    /// Returns a reversed iterator over a vector\n     fn rev_iter(self) -> RevIterator<'self, T>;\n+    /// Returns an iterator over the subslices of the vector which are\n+    /// separated by elements that match `pred`.\n     fn split_iter(self, pred: &'self fn(&T) -> bool) -> SplitIterator<'self, T>;\n+    /// Returns an iterator over the subslices of the vector which are\n+    /// separated by elements that match `pred`, limited to splitting\n+    /// at most `n` times.\n     fn splitn_iter(self, n: uint, pred: &'self fn(&T) -> bool) -> SplitIterator<'self, T>;\n+    /// Returns an iterator over the subslices of the vector which are\n+    /// separated by elements that match `pred`. This starts at the\n+    /// end of the vector and works backwards.\n     fn rsplit_iter(self, pred: &'self fn(&T) -> bool) -> RSplitIterator<'self, T>;\n+    /// Returns an iterator over the subslices of the vector which are\n+    /// separated by elements that match `pred` limited to splitting\n+    /// at most `n` times. This starts at the end of the vector and\n+    /// works backwards.\n     fn rsplitn_iter(self,  n: uint, pred: &'self fn(&T) -> bool) -> RSplitIterator<'self, T>;\n \n+    /**\n+     * Returns an iterator over all contiguous windows of length\n+     * `size`. The windows overlap. If the vector is shorter than\n+     * `size`, the iterator returns no values.\n+     *\n+     * # Failure\n+     *\n+     * Fails if `size` is 0.\n+     *\n+     * # Example\n+     *\n+     * Print the adjacent pairs of a vector (i.e. `[1,2]`, `[2,3]`,\n+     * `[3,4]`):\n+     *\n+     * ```rust\n+     * let v = &[1,2,3,4];\n+     * for win in v.window_iter() {\n+     *     println!(\"{:?}\", win);\n+     * }\n+     * ```\n+     *\n+     */\n     fn window_iter(self, size: uint) -> WindowIter<'self, T>;\n+    /**\n+     *\n+     * Returns an iterator over `size` elements of the vector at a\n+     * time. The chunks do not overlap. If `size` does not divide the\n+     * length of the vector, then the last chunk will not have length\n+     * `size`.\n+     *\n+     * # Failure\n+     *\n+     * Fails if `size` is 0.\n+     *\n+     * # Example\n+     *\n+     * Print the vector two elements at a time (i.e. `[1,2]`,\n+     * `[3,4]`, `[5]`):\n+     *\n+     * ```rust\n+     * let v = &[1,2,3,4,5];\n+     * for win in v.chunk_iter() {\n+     *     println!(\"{:?}\", win);\n+     * }\n+     * ```\n+     *\n+     */\n     fn chunk_iter(self, size: uint) -> ChunkIter<'self, T>;\n \n+    /// Returns the element of a vector at the given index, or `None` if the\n+    /// index is out of bounds\n     fn get_opt(&self, index: uint) -> Option<&'self T>;\n+    /// Returns the first element of a vector, failing if the vector is empty.\n     fn head(&self) -> &'self T;\n+    /// Returns the first element of a vector, or `None` if it is empty\n     fn head_opt(&self) -> Option<&'self T>;\n+    /// Returns all but the first element of a vector\n     fn tail(&self) -> &'self [T];\n+    /// Returns all but the first `n' elements of a vector\n     fn tailn(&self, n: uint) -> &'self [T];\n+    /// Returns all but the last element of a vector\n     fn init(&self) -> &'self [T];\n+    /// Returns all but the last `n' elemnts of a vector\n     fn initn(&self, n: uint) -> &'self [T];\n+    /// Returns the last element of a vector, failing if the vector is empty.\n     fn last(&self) -> &'self T;\n+    /// Returns the last element of a vector, or `None` if it is empty.\n     fn last_opt(&self) -> Option<&'self T>;\n+    /**\n+     * Apply a function to each element of a vector and return a concatenation\n+     * of each result vector\n+     */\n     fn flat_map<U>(&self, f: &fn(t: &T) -> ~[U]) -> ~[U];\n+    /// Returns a pointer to the element at the given index, without doing\n+    /// bounds checking.\n     unsafe fn unsafe_ref(&self, index: uint) -> *T;\n \n+    /**\n+     * Binary search a sorted vector with a comparator function.\n+     *\n+     * The comparator should implement an order consistent with the sort\n+     * order of the underlying vector, returning an order code that indicates\n+     * whether its argument is `Less`, `Equal` or `Greater` the desired target.\n+     *\n+     * Returns the index where the comparator returned `Equal`, or `None` if\n+     * not found.\n+     */\n     fn bsearch(&self, f: &fn(&T) -> Ordering) -> Option<uint>;\n \n+    /// Deprecated, use iterators where possible\n+    /// (`self.iter().map(f)`). Apply a function to each element\n+    /// of a vector and return the results.\n     fn map<U>(&self, &fn(t: &T) -> U) -> ~[U];\n \n+    /**\n+     * Work with the buffer of a vector.\n+     *\n+     * Allows for unsafe manipulation of vector contents, which is useful for\n+     * foreign interop.\n+     */\n     fn as_imm_buf<U>(&self, f: &fn(*T, uint) -> U) -> U;\n }\n \n-/// Extension methods for vectors\n impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n-\n-    /**\n-     * Returns a slice of self between `start` and `end`.\n-     *\n-     * Fails when `start` or `end` point outside the bounds of self,\n-     * or when `start` > `end`.\n-     */\n     #[inline]\n     fn slice(&self, start: uint, end: uint) -> &'self [T] {\n         assert!(start <= end);\n@@ -881,29 +986,16 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n             }\n         }\n     }\n-\n-    /**\n-     * Returns a slice of self from `start` to the end of the vec.\n-     *\n-     * Fails when `start` points outside the bounds of self.\n-     */\n     #[inline]\n     fn slice_from(&self, start: uint) -> &'self [T] {\n         self.slice(start, self.len())\n     }\n-\n-    /**\n-     * Returns a slice of self from the start of the vec to `end`.\n-     *\n-     * Fails when `end` points outside the bounds of self.\n-     */\n     #[inline]\n     fn slice_to(&self, end: uint) -> &'self [T] {\n         self.slice(0, end)\n     }\n \n     #[inline]\n-    /// Returns an iterator over the vector\n     fn iter(self) -> VecIterator<'self, T> {\n         unsafe {\n             let p = vec::raw::to_ptr(self);\n@@ -920,20 +1012,14 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n     }\n \n     #[inline]\n-    /// Returns a reversed iterator over a vector\n     fn rev_iter(self) -> RevIterator<'self, T> {\n         self.iter().invert()\n     }\n \n-    /// Returns an iterator over the subslices of the vector which are\n-    /// separated by elements that match `pred`.\n     #[inline]\n     fn split_iter(self, pred: &'self fn(&T) -> bool) -> SplitIterator<'self, T> {\n         self.splitn_iter(uint::max_value, pred)\n     }\n-    /// Returns an iterator over the subslices of the vector which are\n-    /// separated by elements that match `pred`, limited to splitting\n-    /// at most `n` times.\n     #[inline]\n     fn splitn_iter(self, n: uint, pred: &'self fn(&T) -> bool) -> SplitIterator<'self, T> {\n         SplitIterator {\n@@ -943,17 +1029,10 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n             finished: false\n         }\n     }\n-    /// Returns an iterator over the subslices of the vector which are\n-    /// separated by elements that match `pred`. This starts at the\n-    /// end of the vector and works backwards.\n     #[inline]\n     fn rsplit_iter(self, pred: &'self fn(&T) -> bool) -> RSplitIterator<'self, T> {\n         self.rsplitn_iter(uint::max_value, pred)\n     }\n-    /// Returns an iterator over the subslices of the vector which are\n-    /// separated by elements that match `pred` limited to splitting\n-    /// at most `n` times. This starts at the end of the vector and\n-    /// works backwards.\n     #[inline]\n     fn rsplitn_iter(self, n: uint, pred: &'self fn(&T) -> bool) -> RSplitIterator<'self, T> {\n         RSplitIterator {\n@@ -964,141 +1043,69 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n         }\n     }\n \n-    /**\n-     * Returns an iterator over all contiguous windows of length\n-     * `size`. The windows overlap. If the vector is shorter than\n-     * `size`, the iterator returns no values.\n-     *\n-     * # Failure\n-     *\n-     * Fails if `size` is 0.\n-     *\n-     * # Example\n-     *\n-     * Print the adjacent pairs of a vector (i.e. `[1,2]`, `[2,3]`,\n-     * `[3,4]`):\n-     *\n-     * ```rust\n-     * let v = &[1,2,3,4];\n-     * for win in v.window_iter() {\n-     *     println!(\"{:?}\", win);\n-     * }\n-     * ```\n-     *\n-     */\n     fn window_iter(self, size: uint) -> WindowIter<'self, T> {\n         assert!(size != 0);\n         WindowIter { v: self, size: size }\n     }\n \n-    /**\n-     *\n-     * Returns an iterator over `size` elements of the vector at a\n-     * time. The chunks do not overlap. If `size` does not divide the\n-     * length of the vector, then the last chunk will not have length\n-     * `size`.\n-     *\n-     * # Failure\n-     *\n-     * Fails if `size` is 0.\n-     *\n-     * # Example\n-     *\n-     * Print the vector two elements at a time (i.e. `[1,2]`,\n-     * `[3,4]`, `[5]`):\n-     *\n-     * ```rust\n-     * let v = &[1,2,3,4,5];\n-     * for win in v.chunk_iter() {\n-     *     println!(\"{:?}\", win);\n-     * }\n-     * ```\n-     *\n-     */\n     fn chunk_iter(self, size: uint) -> ChunkIter<'self, T> {\n         assert!(size != 0);\n         ChunkIter { v: self, size: size }\n     }\n \n-    /// Returns the element of a vector at the given index, or `None` if the\n-    /// index is out of bounds\n     #[inline]\n     fn get_opt(&self, index: uint) -> Option<&'self T> {\n         if index < self.len() { Some(&self[index]) } else { None }\n     }\n \n-    /// Returns the first element of a vector, failing if the vector is empty.\n     #[inline]\n     fn head(&self) -> &'self T {\n         if self.len() == 0 { fail2!(\"head: empty vector\") }\n         &self[0]\n     }\n \n-    /// Returns the first element of a vector, or `None` if it is empty\n     #[inline]\n     fn head_opt(&self) -> Option<&'self T> {\n         if self.len() == 0 { None } else { Some(&self[0]) }\n     }\n \n-    /// Returns all but the first element of a vector\n     #[inline]\n     fn tail(&self) -> &'self [T] { self.slice(1, self.len()) }\n \n-    /// Returns all but the first `n' elements of a vector\n     #[inline]\n     fn tailn(&self, n: uint) -> &'self [T] { self.slice(n, self.len()) }\n \n-    /// Returns all but the last element of a vector\n     #[inline]\n     fn init(&self) -> &'self [T] {\n         self.slice(0, self.len() - 1)\n     }\n \n-    /// Returns all but the last `n' elemnts of a vector\n     #[inline]\n     fn initn(&self, n: uint) -> &'self [T] {\n         self.slice(0, self.len() - n)\n     }\n \n-    /// Returns the last element of a vector, failing if the vector is empty.\n     #[inline]\n     fn last(&self) -> &'self T {\n         if self.len() == 0 { fail2!(\"last: empty vector\") }\n         &self[self.len() - 1]\n     }\n \n-    /// Returns the last element of a vector, or `None` if it is empty.\n     #[inline]\n     fn last_opt(&self) -> Option<&'self T> {\n             if self.len() == 0 { None } else { Some(&self[self.len() - 1]) }\n     }\n \n-    /**\n-     * Apply a function to each element of a vector and return a concatenation\n-     * of each result vector\n-     */\n     #[inline]\n     fn flat_map<U>(&self, f: &fn(t: &T) -> ~[U]) -> ~[U] {\n         flat_map(*self, f)\n     }\n \n-    /// Returns a pointer to the element at the given index, without doing\n-    /// bounds checking.\n     #[inline]\n     unsafe fn unsafe_ref(&self, index: uint) -> *T {\n         self.repr().data.offset(index as int)\n     }\n \n-    /**\n-     * Binary search a sorted vector with a comparator function.\n-     *\n-     * The comparator should implement an order consistent with the sort\n-     * order of the underlying vector, returning an order code that indicates\n-     * whether its argument is `Less`, `Equal` or `Greater` the desired target.\n-     *\n-     * Returns the index where the comparator returned `Equal`, or `None` if\n-     * not found.\n-     */\n     fn bsearch(&self, f: &fn(&T) -> Ordering) -> Option<uint> {\n         let mut base : uint = 0;\n         let mut lim : uint = self.len();\n@@ -1118,82 +1125,78 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n         return None;\n     }\n \n-    /// Deprecated, use iterators where possible\n-    /// (`self.iter().map(f)`). Apply a function to each element\n-    /// of a vector and return the results.\n     fn map<U>(&self, f: &fn(t: &T) -> U) -> ~[U] {\n         self.iter().map(f).collect()\n     }\n \n-    /**\n-     * Work with the buffer of a vector.\n-     *\n-     * Allows for unsafe manipulation of vector contents, which is useful for\n-     * foreign interop.\n-     */\n     #[inline]\n     fn as_imm_buf<U>(&self, f: &fn(*T, uint) -> U) -> U {\n         let s = self.repr();\n         f(s.data, s.len / sys::nonzero_size_of::<T>())\n     }\n }\n \n-#[allow(missing_doc)]\n+/// Extension methods for vectors contain `Eq` elements.\n pub trait ImmutableEqVector<T:Eq> {\n+    /// Find the first index containing a matching value\n     fn position_elem(&self, t: &T) -> Option<uint>;\n+\n+    /// Find the last index containing a matching value\n     fn rposition_elem(&self, t: &T) -> Option<uint>;\n+\n+    /// Return true if a vector contains an element with the given value\n     fn contains(&self, x: &T) -> bool;\n }\n \n impl<'self,T:Eq> ImmutableEqVector<T> for &'self [T] {\n-    /// Find the first index containing a matching value\n     #[inline]\n     fn position_elem(&self, x: &T) -> Option<uint> {\n         self.iter().position(|y| *x == *y)\n     }\n \n-    /// Find the last index containing a matching value\n     #[inline]\n     fn rposition_elem(&self, t: &T) -> Option<uint> {\n         self.iter().rposition(|x| *x == *t)\n     }\n \n-    /// Return true if a vector contains an element with the given value\n     fn contains(&self, x: &T) -> bool {\n         for elt in self.iter() { if *x == *elt { return true; } }\n         false\n     }\n }\n \n-#[allow(missing_doc)]\n+/// Extension methods for vectors containing `TotalOrd` elements.\n pub trait ImmutableTotalOrdVector<T: TotalOrd> {\n-    fn bsearch_elem(&self, x: &T) -> Option<uint>;\n-}\n-\n-impl<'self, T: TotalOrd> ImmutableTotalOrdVector<T> for &'self [T] {\n     /**\n      * Binary search a sorted vector for a given element.\n      *\n      * Returns the index of the element or None if not found.\n      */\n+    fn bsearch_elem(&self, x: &T) -> Option<uint>;\n+}\n+\n+impl<'self, T: TotalOrd> ImmutableTotalOrdVector<T> for &'self [T] {\n     fn bsearch_elem(&self, x: &T) -> Option<uint> {\n         self.bsearch(|p| p.cmp(x))\n     }\n }\n \n-#[allow(missing_doc)]\n+/// Extension methods for vectors containing `Clone` elements.\n pub trait ImmutableCopyableVector<T> {\n+    /**\n+     * Partitions the vector into those that satisfies the predicate, and\n+     * those that do not.\n+     */\n     fn partitioned(&self, f: &fn(&T) -> bool) -> (~[T], ~[T]);\n+    /// Returns the element at the given index, without doing bounds checking.\n     unsafe fn unsafe_get(&self, elem: uint) -> T;\n+\n+    /// Create an iterator that yields every possible permutation of the\n+    /// vector in succession.\n     fn permutations_iter(self) -> Permutations<T>;\n }\n \n-/// Extension methods for vectors\n impl<'self,T:Clone> ImmutableCopyableVector<T> for &'self [T] {\n-    /**\n-     * Partitions the vector into those that satisfies the predicate, and\n-     * those that do not.\n-     */\n     #[inline]\n     fn partitioned(&self, f: &fn(&T) -> bool) -> (~[T], ~[T]) {\n         let mut lefts  = ~[];\n@@ -1210,14 +1213,11 @@ impl<'self,T:Clone> ImmutableCopyableVector<T> for &'self [T] {\n         (lefts, rights)\n     }\n \n-    /// Returns the element at the given index, without doing bounds checking.\n     #[inline]\n     unsafe fn unsafe_get(&self, index: uint) -> T {\n         (*self.unsafe_ref(index)).clone()\n     }\n \n-    /// Create an iterator that yields every possible permutation of the\n-    /// vector in succession.\n     fn permutations_iter(self) -> Permutations<T> {\n         Permutations{\n             swaps: ElementSwaps::new(self.len()),\n@@ -1227,75 +1227,154 @@ impl<'self,T:Clone> ImmutableCopyableVector<T> for &'self [T] {\n \n }\n \n-#[allow(missing_doc)]\n+/// Extension methods for owned vectors.\n pub trait OwnedVector<T> {\n+    /// Creates a consuming iterator, that is, one that moves each\n+    /// value out of the vector (from start to end). The vector cannot\n+    /// be used after calling this.\n+    ///\n+    /// Note that this performs O(n) swaps, and so `move_rev_iter`\n+    /// (which just calls `pop` repeatedly) is more efficient.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// let v = ~[~\"a\", ~\"b\"];\n+    /// for s in v.move_iter() {\n+    ///   // s has type ~str, not &~str\n+    ///   println(s);\n+    /// }\n+    /// ```\n     fn move_iter(self) -> MoveIterator<T>;\n+    /// Creates a consuming iterator that moves out of the vector in\n+    /// reverse order. Also see `move_iter`, however note that this\n+    /// is more efficient.\n     fn move_rev_iter(self) -> MoveRevIterator<T>;\n \n+    /**\n+     * Reserves capacity for exactly `n` elements in the given vector.\n+     *\n+     * If the capacity for `self` is already equal to or greater than the requested\n+     * capacity, then no action is taken.\n+     *\n+     * # Arguments\n+     *\n+     * * n - The number of elements to reserve space for\n+     *\n+     * # Failure\n+     *\n+     * This method always succeeds in reserving space for `n` elements, or it does\n+     * not return.\n+     */\n     fn reserve(&mut self, n: uint);\n+    /**\n+     * Reserves capacity for at least `n` elements in the given vector.\n+     *\n+     * This function will over-allocate in order to amortize the allocation costs\n+     * in scenarios where the caller may need to repeatedly reserve additional\n+     * space.\n+     *\n+     * If the capacity for `self` is already equal to or greater than the requested\n+     * capacity, then no action is taken.\n+     *\n+     * # Arguments\n+     *\n+     * * n - The number of elements to reserve space for\n+     */\n     fn reserve_at_least(&mut self, n: uint);\n+    /**\n+     * Reserves capacity for at least `n` additional elements in the given vector.\n+     *\n+     * # Failure\n+     *\n+     * Fails if the new required capacity overflows uint.\n+     *\n+     * May also fail if `reserve` fails.\n+     */\n     fn reserve_additional(&mut self, n: uint);\n+    /// Returns the number of elements the vector can hold without reallocating.\n     fn capacity(&self) -> uint;\n+    /// Shrink the capacity of the vector to match the length\n     fn shrink_to_fit(&mut self);\n \n+    /// Append an element to a vector\n     fn push(&mut self, t: T);\n+    /// Takes ownership of the vector `rhs`, moving all elements into\n+    /// the current vector. This does not copy any elements, and it is\n+    /// illegal to use the `rhs` vector after calling this method\n+    /// (because it is moved here).\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut a = ~[~1];\n+    /// a.push_all_move(~[~2, ~3, ~4]);\n+    /// assert!(a == ~[~1, ~2, ~3, ~4]);\n+    /// ```\n     fn push_all_move(&mut self, rhs: ~[T]);\n+    /// Remove the last element from a vector and return it, failing if it is empty\n     fn pop(&mut self) -> T;\n+    /// Remove the last element from a vector and return it, or `None` if it is empty\n     fn pop_opt(&mut self) -> Option<T>;\n+    /// Removes the first element from a vector and return it\n     fn shift(&mut self) -> T;\n+    /// Removes the first element from a vector and return it, or `None` if it is empty\n     fn shift_opt(&mut self) -> Option<T>;\n+    /// Prepend an element to the vector\n     fn unshift(&mut self, x: T);\n+\n+    /// Insert an element at position i within v, shifting all\n+    /// elements after position i one position to the right.\n     fn insert(&mut self, i: uint, x:T);\n+\n+    /// Remove and return the element at position i within v, shifting\n+    /// all elements after position i one position to the left.\n     fn remove(&mut self, i: uint) -> T;\n+\n+    /**\n+     * Remove an element from anywhere in the vector and return it, replacing it\n+     * with the last element. This does not preserve ordering, but is O(1).\n+     *\n+     * Fails if index >= length.\n+     */\n     fn swap_remove(&mut self, index: uint) -> T;\n+\n+    /// Shorten a vector, dropping excess elements.\n     fn truncate(&mut self, newlen: uint);\n+\n+    /**\n+     * Like `filter()`, but in place.  Preserves order of `v`.  Linear time.\n+     */\n     fn retain(&mut self, f: &fn(t: &T) -> bool);\n+    /**\n+     * Partitions the vector into those that satisfies the predicate, and\n+     * those that do not.\n+     */\n     fn partition(self, f: &fn(&T) -> bool) -> (~[T], ~[T]);\n+\n+    /**\n+     * Expands a vector in place, initializing the new elements to the result of\n+     * a function\n+     *\n+     * Function `init_op` is called `n` times with the values [0..`n`)\n+     *\n+     * # Arguments\n+     *\n+     * * n - The number of elements to add\n+     * * init_op - A function to call to retreive each appended element's\n+     *             value\n+     */\n     fn grow_fn(&mut self, n: uint, op: &fn(uint) -> T);\n }\n \n impl<T> OwnedVector<T> for ~[T] {\n-    /// Creates a consuming iterator, that is, one that moves each\n-    /// value out of the vector (from start to end). The vector cannot\n-    /// be used after calling this.\n-    ///\n-    /// Note that this performs O(n) swaps, and so `move_rev_iter`\n-    /// (which just calls `pop` repeatedly) is more efficient.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```rust\n-    /// let v = ~[~\"a\", ~\"b\"];\n-    /// for s in v.move_iter() {\n-    ///   // s has type ~str, not &~str\n-    ///   println(s);\n-    /// }\n-    /// ```\n     fn move_iter(self) -> MoveIterator<T> {\n         MoveIterator { v: self, idx: 0 }\n     }\n-    /// Creates a consuming iterator that moves out of the vector in\n-    /// reverse order. Also see `move_iter`, however note that this\n-    /// is more efficient.\n     fn move_rev_iter(self) -> MoveRevIterator<T> {\n         MoveRevIterator { v: self }\n     }\n \n-    /**\n-     * Reserves capacity for exactly `n` elements in the given vector.\n-     *\n-     * If the capacity for `self` is already equal to or greater than the requested\n-     * capacity, then no action is taken.\n-     *\n-     * # Arguments\n-     *\n-     * * n - The number of elements to reserve space for\n-     *\n-     * # Failure\n-     *\n-     * This method always succeeds in reserving space for `n` elements, or it does\n-     * not return.\n-     */\n     fn reserve(&mut self, n: uint) {\n         // Only make the (slow) call into the runtime if we have to\n         if self.capacity() < n {\n@@ -1319,34 +1398,11 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    /**\n-     * Reserves capacity for at least `n` elements in the given vector.\n-     *\n-     * This function will over-allocate in order to amortize the allocation costs\n-     * in scenarios where the caller may need to repeatedly reserve additional\n-     * space.\n-     *\n-     * If the capacity for `self` is already equal to or greater than the requested\n-     * capacity, then no action is taken.\n-     *\n-     * # Arguments\n-     *\n-     * * n - The number of elements to reserve space for\n-     */\n     #[inline]\n     fn reserve_at_least(&mut self, n: uint) {\n         self.reserve(uint::next_power_of_two_opt(n).unwrap_or(n));\n     }\n \n-    /**\n-     * Reserves capacity for at least `n` additional elements in the given vector.\n-     *\n-     * # Failure\n-     *\n-     * Fails if the new required capacity overflows uint.\n-     *\n-     * May also fail if `reserve` fails.\n-     */\n     #[inline]\n     fn reserve_additional(&mut self, n: uint) {\n         if self.capacity() - self.len() < n {\n@@ -1357,7 +1413,6 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    /// Returns the number of elements the vector can hold without reallocating.\n     #[inline]\n     fn capacity(&self) -> uint {\n         unsafe {\n@@ -1371,7 +1426,6 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    /// Shrink the capacity of the vector to match the length\n     fn shrink_to_fit(&mut self) {\n         unsafe {\n             let ptr: *mut *mut Vec<()> = cast::transmute(self);\n@@ -1382,7 +1436,6 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    /// Append an element to a vector\n     #[inline]\n     fn push(&mut self, t: T) {\n         unsafe {\n@@ -1427,18 +1480,6 @@ impl<T> OwnedVector<T> for ~[T] {\n \n     }\n \n-    /// Takes ownership of the vector `rhs`, moving all elements into\n-    /// the current vector. This does not copy any elements, and it is\n-    /// illegal to use the `rhs` vector after calling this method\n-    /// (because it is moved here).\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// let mut a = ~[~1];\n-    /// a.push_all_move(~[~2, ~3, ~4]);\n-    /// assert!(a == ~[~1, ~2, ~3, ~4]);\n-    /// ```\n     #[inline]\n     fn push_all_move(&mut self, mut rhs: ~[T]) {\n         let self_len = self.len();\n@@ -1454,7 +1495,6 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    /// Remove the last element from a vector and return it, or `None` if it is empty\n     fn pop_opt(&mut self) -> Option<T> {\n         match self.len() {\n             0  => None,\n@@ -1469,19 +1509,16 @@ impl<T> OwnedVector<T> for ~[T] {\n     }\n \n \n-    /// Remove the last element from a vector and return it, failing if it is empty\n     #[inline]\n     fn pop(&mut self) -> T {\n         self.pop_opt().expect(\"pop: empty vector\")\n     }\n \n-    /// Removes the first element from a vector and return it\n     #[inline]\n     fn shift(&mut self) -> T {\n         self.shift_opt().expect(\"shift: empty vector\")\n     }\n \n-    /// Removes the first element from a vector and return it, or `None` if it is empty\n     fn shift_opt(&mut self) -> Option<T> {\n         unsafe {\n             let ln = match self.len() {\n@@ -1535,14 +1572,10 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    /// Prepend an element to the vector\n     fn unshift(&mut self, x: T) {\n         let v = util::replace(self, ~[x]);\n         self.push_all_move(v);\n     }\n-\n-    /// Insert an element at position i within v, shifting all\n-    /// elements after position i one position to the right.\n     fn insert(&mut self, i: uint, x:T) {\n         let len = self.len();\n         assert!(i <= len);\n@@ -1554,9 +1587,6 @@ impl<T> OwnedVector<T> for ~[T] {\n             j -= 1;\n         }\n     }\n-\n-    /// Remove and return the element at position i within v, shifting\n-    /// all elements after position i one position to the left.\n     fn remove(&mut self, i: uint) -> T {\n         let len = self.len();\n         assert!(i < len);\n@@ -1568,13 +1598,6 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n         self.pop()\n     }\n-\n-    /**\n-     * Remove an element from anywhere in the vector and return it, replacing it\n-     * with the last element. This does not preserve ordering, but is O(1).\n-     *\n-     * Fails if index >= length.\n-     */\n     fn swap_remove(&mut self, index: uint) -> T {\n         let ln = self.len();\n         if index >= ln {\n@@ -1585,8 +1608,6 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n         self.pop()\n     }\n-\n-    /// Shorten a vector, dropping excess elements.\n     fn truncate(&mut self, newlen: uint) {\n         do self.as_mut_buf |p, oldlen| {\n             assert!(newlen <= oldlen);\n@@ -1600,10 +1621,6 @@ impl<T> OwnedVector<T> for ~[T] {\n         unsafe { raw::set_len(self, newlen); }\n     }\n \n-\n-    /**\n-     * Like `filter()`, but in place.  Preserves order of `v`.  Linear time.\n-     */\n     fn retain(&mut self, f: &fn(t: &T) -> bool) {\n         let len = self.len();\n         let mut deleted: uint = 0;\n@@ -1621,10 +1638,6 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    /**\n-     * Partitions the vector into those that satisfies the predicate, and\n-     * those that do not.\n-     */\n     #[inline]\n     fn partition(self, f: &fn(&T) -> bool) -> (~[T], ~[T]) {\n         let mut lefts  = ~[];\n@@ -1640,19 +1653,6 @@ impl<T> OwnedVector<T> for ~[T] {\n \n         (lefts, rights)\n     }\n-\n-    /**\n-     * Expands a vector in place, initializing the new elements to the result of\n-     * a function\n-     *\n-     * Function `init_op` is called `n` times with the values [0..`n`)\n-     *\n-     * # Arguments\n-     *\n-     * * n - The number of elements to add\n-     * * init_op - A function to call to retreive each appended element's\n-     *             value\n-     */\n     fn grow_fn(&mut self, n: uint, op: &fn(uint) -> T) {\n         let new_len = self.len() + n;\n         self.reserve_at_least(new_len);\n@@ -1669,14 +1669,8 @@ impl<T> Mutable for ~[T] {\n     fn clear(&mut self) { self.truncate(0) }\n }\n \n-#[allow(missing_doc)]\n+/// Extension methods for owned vectors containing `Clone` elements.\n pub trait OwnedCopyableVector<T:Clone> {\n-    fn push_all(&mut self, rhs: &[T]);\n-    fn grow(&mut self, n: uint, initval: &T);\n-    fn grow_set(&mut self, index: uint, initval: &T, val: T);\n-}\n-\n-impl<T:Clone> OwnedCopyableVector<T> for ~[T] {\n     /// Iterates over the slice `rhs`, copies each element, and then appends it to\n     /// the vector provided `v`. The `rhs` vector is traversed in-order.\n     ///\n@@ -1687,15 +1681,7 @@ impl<T:Clone> OwnedCopyableVector<T> for ~[T] {\n     /// a.push_all([2, 3, 4]);\n     /// assert!(a == ~[1, 2, 3, 4]);\n     /// ```\n-    #[inline]\n-    fn push_all(&mut self, rhs: &[T]) {\n-        let new_len = self.len() + rhs.len();\n-        self.reserve(new_len);\n-\n-        for elt in rhs.iter() {\n-            self.push((*elt).clone())\n-        }\n-    }\n+    fn push_all(&mut self, rhs: &[T]);\n \n     /**\n      * Expands a vector in place, initializing the new elements to a given value\n@@ -1705,6 +1691,29 @@ impl<T:Clone> OwnedCopyableVector<T> for ~[T] {\n      * * n - The number of elements to add\n      * * initval - The value for the new elements\n      */\n+    fn grow(&mut self, n: uint, initval: &T);\n+\n+    /**\n+     * Sets the value of a vector element at a given index, growing the vector as\n+     * needed\n+     *\n+     * Sets the element at position `index` to `val`. If `index` is past the end\n+     * of the vector, expands the vector by replicating `initval` to fill the\n+     * intervening space.\n+     */\n+    fn grow_set(&mut self, index: uint, initval: &T, val: T);\n+}\n+\n+impl<T:Clone> OwnedCopyableVector<T> for ~[T] {\n+    #[inline]\n+    fn push_all(&mut self, rhs: &[T]) {\n+        let new_len = self.len() + rhs.len();\n+        self.reserve(new_len);\n+\n+        for elt in rhs.iter() {\n+            self.push((*elt).clone())\n+        }\n+    }\n     fn grow(&mut self, n: uint, initval: &T) {\n         let new_len = self.len() + n;\n         self.reserve_at_least(new_len);\n@@ -1715,32 +1724,23 @@ impl<T:Clone> OwnedCopyableVector<T> for ~[T] {\n             i += 1u;\n         }\n     }\n-\n-    /**\n-     * Sets the value of a vector element at a given index, growing the vector as\n-     * needed\n-     *\n-     * Sets the element at position `index` to `val`. If `index` is past the end\n-     * of the vector, expands the vector by replicating `initval` to fill the\n-     * intervening space.\n-     */\n     fn grow_set(&mut self, index: uint, initval: &T, val: T) {\n         let l = self.len();\n         if index >= l { self.grow(index - l + 1u, initval); }\n         self[index] = val;\n     }\n }\n \n-#[allow(missing_doc)]\n+/// Extension methods for owned vectors containing `Eq` elements.\n pub trait OwnedEqVector<T:Eq> {\n-    fn dedup(&mut self);\n-}\n-\n-impl<T:Eq> OwnedEqVector<T> for ~[T] {\n     /**\n     * Remove consecutive repeated elements from a vector; if the vector is\n     * sorted, this removes all duplicates.\n     */\n+    fn dedup(&mut self);\n+}\n+\n+impl<T:Eq> OwnedEqVector<T> for ~[T] {\n     fn dedup(&mut self) {\n         unsafe {\n             // Although we have a mutable reference to `self`, we cannot make\n@@ -1829,14 +1829,36 @@ impl<T:Eq> OwnedEqVector<T> for ~[T] {\n     }\n }\n \n-#[allow(missing_doc)]\n+/// Extension methods for vectors such that their elements are\n+/// mutable.\n pub trait MutableVector<'self, T> {\n+    /// Return a slice that points into another slice.\n     fn mut_slice(self, start: uint, end: uint) -> &'self mut [T];\n+    /**\n+     * Returns a slice of self from `start` to the end of the vec.\n+     *\n+     * Fails when `start` points outside the bounds of self.\n+     */\n     fn mut_slice_from(self, start: uint) -> &'self mut [T];\n+    /**\n+     * Returns a slice of self from the start of the vec to `end`.\n+     *\n+     * Fails when `end` points outside the bounds of self.\n+     */\n     fn mut_slice_to(self, end: uint) -> &'self mut [T];\n+    /// Returns an iterator that allows modifying each value\n     fn mut_iter(self) -> VecMutIterator<'self, T>;\n+    /// Returns a reversed iterator that allows modifying each value\n     fn mut_rev_iter(self) -> MutRevIterator<'self, T>;\n \n+    /**\n+     * Swaps two elements in a vector\n+     *\n+     * # Arguments\n+     *\n+     * * a - The index of the first element\n+     * * b - The index of the second element\n+     */\n     fn swap(self, a: uint, b: uint);\n \n     /**\n@@ -1848,6 +1870,7 @@ pub trait MutableVector<'self, T> {\n     fn mut_split(self, mid: uint) -> (&'self mut [T],\n                                       &'self mut [T]);\n \n+    /// Reverse the order of elements in a vector, in place\n     fn reverse(self);\n \n     /**\n@@ -1865,14 +1888,16 @@ pub trait MutableVector<'self, T> {\n      */\n     fn move_from(self, src: ~[T], start: uint, end: uint) -> uint;\n \n+    /// Returns an unsafe mutable pointer to the element in index\n     unsafe fn unsafe_mut_ref(self, index: uint) -> *mut T;\n+    /// Unsafely sets the element in index to the value\n     unsafe fn unsafe_set(self, index: uint, val: T);\n \n+    /// Similar to `as_imm_buf` but passing a `*mut T`\n     fn as_mut_buf<U>(self, f: &fn(*mut T, uint) -> U) -> U;\n }\n \n impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n-    /// Return a slice that points into another slice.\n     #[inline]\n     fn mut_slice(self, start: uint, end: uint) -> &'self mut [T] {\n         assert!(start <= end);\n@@ -1887,22 +1912,12 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n         }\n     }\n \n-    /**\n-     * Returns a slice of self from `start` to the end of the vec.\n-     *\n-     * Fails when `start` points outside the bounds of self.\n-     */\n     #[inline]\n     fn mut_slice_from(self, start: uint) -> &'self mut [T] {\n         let len = self.len();\n         self.mut_slice(start, len)\n     }\n \n-    /**\n-     * Returns a slice of self from the start of the vec to `end`.\n-     *\n-     * Fails when `end` points outside the bounds of self.\n-     */\n     #[inline]\n     fn mut_slice_to(self, end: uint) -> &'self mut [T] {\n         self.mut_slice(0, end)\n@@ -1918,7 +1933,6 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n     }\n \n     #[inline]\n-    /// Returns an iterator that allows modifying each value\n     fn mut_iter(self) -> VecMutIterator<'self, T> {\n         unsafe {\n             let p = vec::raw::to_mut_ptr(self);\n@@ -1935,19 +1949,10 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n     }\n \n     #[inline]\n-    /// Returns a reversed iterator that allows modifying each value\n     fn mut_rev_iter(self) -> MutRevIterator<'self, T> {\n         self.mut_iter().invert()\n     }\n \n-    /**\n-     * Swaps two elements in a vector\n-     *\n-     * # Arguments\n-     *\n-     * * a - The index of the first element\n-     * * b - The index of the second element\n-     */\n     fn swap(self, a: uint, b: uint) {\n         unsafe {\n             // Can't take two mutable loans from one vector, so instead just cast\n@@ -1958,7 +1963,6 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n         }\n     }\n \n-    /// Reverse the order of elements in a vector, in place\n     fn reverse(self) {\n         let mut i: uint = 0;\n         let ln = self.len();\n@@ -1977,18 +1981,15 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n     }\n \n     #[inline]\n-    /// Returns an unsafe mutable pointer to the element in index\n     unsafe fn unsafe_mut_ref(self, index: uint) -> *mut T {\n         ptr::mut_offset(self.repr().data as *mut T, index as int)\n     }\n \n     #[inline]\n-    /// Unsafely sets the element in index to the value\n     unsafe fn unsafe_set(self, index: uint, val: T) {\n         *self.unsafe_mut_ref(index) = val;\n     }\n \n-    /// Similar to `as_imm_buf` but passing a `*mut T`\n     #[inline]\n     fn as_mut_buf<U>(self, f: &fn(*mut T, uint) -> U) -> U {\n         let Slice{ data, len } = self.repr();"}]}