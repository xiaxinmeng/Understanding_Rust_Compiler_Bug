{"sha": "8da26e036630352a21a9ddc14bf53ad31e9b9ba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYTI2ZTAzNjYzMDM1MmEyMWE5ZGRjMTRiZjUzYWQzMWU5YjliYTA=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-03-26T09:32:52Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-04-15T09:45:21Z"}, "message": "Use `call` instead of `invoke` for functions that cannot unwind\n\nThe `FnAbi` now knows if the function is allowed to unwind. If a\nfunction isn't allowed to unwind, we can use a `call` instead of an\n`invoke`.\n\nThis resolves an issue when calling LLVM intrinsics which cannot unwind\nLLVM will generate an error if you attempt to invoke them so we need to\nignore cleanup blocks in codegen and generate a call instead.", "tree": {"sha": "c5f3621b6643930cb462094fa6b656a89d392f38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5f3621b6643930cb462094fa6b656a89d392f38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8da26e036630352a21a9ddc14bf53ad31e9b9ba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8da26e036630352a21a9ddc14bf53ad31e9b9ba0", "html_url": "https://github.com/rust-lang/rust/commit/8da26e036630352a21a9ddc14bf53ad31e9b9ba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8da26e036630352a21a9ddc14bf53ad31e9b9ba0/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba72b15666b2491415aec703a02c2364fe5e2790", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba72b15666b2491415aec703a02c2364fe5e2790", "html_url": "https://github.com/rust-lang/rust/commit/ba72b15666b2491415aec703a02c2364fe5e2790"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "4913138650880cd4b6267f11ed1adfb1db7bd0f5", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8da26e036630352a21a9ddc14bf53ad31e9b9ba0/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da26e036630352a21a9ddc14bf53ad31e9b9ba0/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=8da26e036630352a21a9ddc14bf53ad31e9b9ba0", "patch": "@@ -111,7 +111,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         destination: Option<(ReturnDest<'tcx, Bx::Value>, mir::BasicBlock)>,\n         cleanup: Option<mir::BasicBlock>,\n     ) {\n-        if let Some(cleanup) = cleanup {\n+        // If there is a cleanup block and the function we're calling can unwind, then\n+        // do an invoke, otherwise do a call.\n+        if let Some(cleanup) = cleanup.filter(|_| fn_abi.can_unwind) {\n             let ret_bx = if let Some((_, target)) = destination {\n                 fx.blocks[target]\n             } else {"}, {"sha": "29c82686731ca5c96a0ba24d695eea67de0cfe63", "filename": "src/test/codegen/c-variadic.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8da26e036630352a21a9ddc14bf53ad31e9b9ba0/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da26e036630352a21a9ddc14bf53ad31e9b9ba0/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic.rs?ref=8da26e036630352a21a9ddc14bf53ad31e9b9ba0", "patch": "@@ -16,38 +16,38 @@ extern \"C\" {\n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_0() {\n     // Ensure that we correctly call foreign C-variadic functions.\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM:i32( signext)?]] 0)\n+    // CHECK: call void (i32, ...) @foreign_c_variadic_0([[PARAM:i32( signext)?]] 0)\n     foreign_c_variadic_0(0);\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42)\n+    // CHECK: call void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42)\n     foreign_c_variadic_0(0, 42i32);\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024)\n+    // CHECK: call void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024)\n     foreign_c_variadic_0(0, 42i32, 1024i32);\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024, [[PARAM]] 0)\n+    // CHECK: call void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024, [[PARAM]] 0)\n     foreign_c_variadic_0(0, 42i32, 1024i32, 0i32);\n }\n \n // Ensure that we do not remove the `va_list` passed to the foreign function when\n // removing the \"spoofed\" `VaListImpl` that is used by Rust defined C-variadics.\n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_1_0(ap: VaList) {\n-    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap)\n+    // CHECK: call void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap)\n     foreign_c_variadic_1(ap);\n }\n \n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_1_1(ap: VaList) {\n-    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 42)\n+    // CHECK: call void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 42)\n     foreign_c_variadic_1(ap, 42i32);\n }\n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_1_2(ap: VaList) {\n-    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 2, [[PARAM]] 42)\n+    // CHECK: call void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 2, [[PARAM]] 42)\n     foreign_c_variadic_1(ap, 2i32, 42i32);\n }\n \n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_1_3(ap: VaList) {\n-    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 2, [[PARAM]] 42, [[PARAM]] 0)\n+    // CHECK: call void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 2, [[PARAM]] 42, [[PARAM]] 0)\n     foreign_c_variadic_1(ap, 2i32, 42i32, 0i32);\n }\n "}, {"sha": "c7a464a9b0ef24513f8838ea990f2e00b2aca5fe", "filename": "src/test/codegen/call-llvm-intrinsics.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8da26e036630352a21a9ddc14bf53ad31e9b9ba0/src%2Ftest%2Fcodegen%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da26e036630352a21a9ddc14bf53ad31e9b9ba0/src%2Ftest%2Fcodegen%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcall-llvm-intrinsics.rs?ref=8da26e036630352a21a9ddc14bf53ad31e9b9ba0", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![feature(link_llvm_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+struct A;\n+\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        println!(\"A\");\n+    }\n+}\n+\n+extern {\n+    #[link_name = \"llvm.sqrt.f32\"]\n+    fn sqrt(x: f32) -> f32;\n+}\n+\n+pub fn do_call() {\n+    let _a = A;\n+\n+    unsafe {\n+        // Ensure that we `call` LLVM intrinsics instead of trying to `invoke` them\n+        // CHECK: call float @llvm.sqrt.f32(float 4.000000e+00\n+        sqrt(4.0);\n+    }\n+}"}]}