{"sha": "5a9ccc9ce7242afd866af3321c400c1a87c745a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOWNjYzljZTcyNDJhZmQ4NjZhZjMzMjFjNDAwYzFhODdjNzQ1YTg=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-30T10:35:31Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-03-17T08:46:56Z"}, "message": "Remove `free_region_map` from `TypeckTables`\n\nIt was unused.", "tree": {"sha": "8c0a1c512fc3e5a0c9ab327886e18caeffe70906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c0a1c512fc3e5a0c9ab327886e18caeffe70906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a9ccc9ce7242afd866af3321c400c1a87c745a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a9ccc9ce7242afd866af3321c400c1a87c745a8", "html_url": "https://github.com/rust-lang/rust/commit/5a9ccc9ce7242afd866af3321c400c1a87c745a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a9ccc9ce7242afd866af3321c400c1a87c745a8/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e9ebf4da3522c479aea9c242cb3686f8d6afa78", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9ebf4da3522c479aea9c242cb3686f8d6afa78", "html_url": "https://github.com/rust-lang/rust/commit/5e9ebf4da3522c479aea9c242cb3686f8d6afa78"}], "stats": {"total": 24, "additions": 0, "deletions": 24}, "files": [{"sha": "d7a259cc870749b762281ff9c7adb0f0f069a8ff", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a9ccc9ce7242afd866af3321c400c1a87c745a8/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9ccc9ce7242afd866af3321c400c1a87c745a8/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5a9ccc9ce7242afd866af3321c400c1a87c745a8", "patch": "@@ -23,7 +23,6 @@ use crate::mir::{\n };\n use crate::traits;\n use crate::traits::{Clause, Clauses, Goal, GoalKind, Goals};\n-use crate::ty::free_region_map::FreeRegionMap;\n use crate::ty::layout::{LayoutDetails, TargetDataLayout, VariantIdx};\n use crate::ty::query;\n use crate::ty::steal::Steal;\n@@ -416,11 +415,6 @@ pub struct TypeckTables<'tcx> {\n     /// this field will be set to `true`.\n     pub tainted_by_errors: bool,\n \n-    /// Stores the free-region relationships that were deduced from\n-    /// its where-clauses and parameter types. These are then\n-    /// read-again by borrowck.\n-    pub free_region_map: FreeRegionMap<'tcx>,\n-\n     /// All the opaque types that are restricted to concrete types\n     /// by this function.\n     pub concrete_opaque_types: FxHashMap<DefId, ResolvedOpaqueTy<'tcx>>,\n@@ -456,7 +450,6 @@ impl<'tcx> TypeckTables<'tcx> {\n             coercion_casts: Default::default(),\n             used_trait_imports: Lrc::new(Default::default()),\n             tainted_by_errors: false,\n-            free_region_map: Default::default(),\n             concrete_opaque_types: Default::default(),\n             upvar_list: Default::default(),\n             generator_interior_types: Default::default(),\n@@ -719,7 +712,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n \n             ref used_trait_imports,\n             tainted_by_errors,\n-            ref free_region_map,\n             ref concrete_opaque_types,\n             ref upvar_list,\n             ref generator_interior_types,\n@@ -757,7 +749,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             coercion_casts.hash_stable(hcx, hasher);\n             used_trait_imports.hash_stable(hcx, hasher);\n             tainted_by_errors.hash_stable(hcx, hasher);\n-            free_region_map.hash_stable(hcx, hasher);\n             concrete_opaque_types.hash_stable(hcx, hasher);\n             upvar_list.hash_stable(hcx, hasher);\n             generator_interior_types.hash_stable(hcx, hasher);"}, {"sha": "ecc9a423b910c7c42a0a92e15c1c9e4fd273e26a", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a9ccc9ce7242afd866af3321c400c1a87c745a8/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9ccc9ce7242afd866af3321c400c1a87c745a8/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=5a9ccc9ce7242afd866af3321c400c1a87c745a8", "patch": "@@ -125,9 +125,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             rcx.visit_region_obligations(id);\n         }\n         rcx.resolve_regions_and_report_errors(SuppressRegionErrors::when_nll_is_enabled(self.tcx));\n-\n-        assert!(self.tables.borrow().free_region_map.is_empty());\n-        self.tables.borrow_mut().free_region_map = rcx.outlives_environment.into_free_region_map();\n     }\n \n     /// Region checking during the WF phase for items. `wf_tys` are the\n@@ -169,12 +166,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         rcx.resolve_regions_and_report_errors(SuppressRegionErrors::when_nll_is_enabled(self.tcx));\n-\n-        // In this mode, we also copy the free-region-map into the\n-        // tables of the enclosing fcx. In the other regionck modes\n-        // (e.g., `regionck_item`), we don't have an enclosing tables.\n-        assert!(self.tables.borrow().free_region_map.is_empty());\n-        self.tables.borrow_mut().free_region_map = rcx.outlives_environment.into_free_region_map();\n     }\n }\n "}, {"sha": "21536503ef7eb353b6aca23bfc59929e47aad672", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a9ccc9ce7242afd866af3321c400c1a87c745a8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9ccc9ce7242afd866af3321c400c1a87c745a8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=5a9ccc9ce7242afd866af3321c400c1a87c745a8", "patch": "@@ -62,7 +62,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.visit_fru_field_types();\n         wbcx.visit_opaque_types(body.value.span);\n         wbcx.visit_coercion_casts();\n-        wbcx.visit_free_region_map();\n         wbcx.visit_user_provided_tys();\n         wbcx.visit_user_provided_sigs();\n         wbcx.visit_generator_interior_types();\n@@ -358,11 +357,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         }\n     }\n \n-    fn visit_free_region_map(&mut self) {\n-        self.tables.free_region_map = self.fcx.tables.borrow().free_region_map.clone();\n-        debug_assert!(!self.tables.free_region_map.elements().any(|r| r.has_local_value()));\n-    }\n-\n     fn visit_user_provided_tys(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);"}]}