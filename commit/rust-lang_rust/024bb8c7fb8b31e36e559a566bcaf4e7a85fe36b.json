{"sha": "024bb8c7fb8b31e36e559a566bcaf4e7a85fe36b", "node_id": "C_kwDOAAsO6NoAKDAyNGJiOGM3ZmI4YjMxZTM2ZTU1OWE1NjZiY2FmNGU3YTg1ZmUzNmI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-23T02:05:21Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-23T02:06:03Z"}, "message": "Pass ParamEnv down instead of using ParamEnv of a module", "tree": {"sha": "fb26acb68b6ee6602e2eaa3b0837d22ae7fb5558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb26acb68b6ee6602e2eaa3b0837d22ae7fb5558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/024bb8c7fb8b31e36e559a566bcaf4e7a85fe36b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/024bb8c7fb8b31e36e559a566bcaf4e7a85fe36b", "html_url": "https://github.com/rust-lang/rust/commit/024bb8c7fb8b31e36e559a566bcaf4e7a85fe36b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/024bb8c7fb8b31e36e559a566bcaf4e7a85fe36b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e7f6a7e0d27e0f8d2ab5bccdf2a0c4e627979d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7f6a7e0d27e0f8d2ab5bccdf2a0c4e627979d2", "html_url": "https://github.com/rust-lang/rust/commit/1e7f6a7e0d27e0f8d2ab5bccdf2a0c4e627979d2"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "fd8ea1ad7bff4c503d3e93203fe800a75601f995", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/024bb8c7fb8b31e36e559a566bcaf4e7a85fe36b/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024bb8c7fb8b31e36e559a566bcaf4e7a85fe36b/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=024bb8c7fb8b31e36e559a566bcaf4e7a85fe36b", "patch": "@@ -12,7 +12,7 @@ use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::{\n     hir::map::Map,\n-    ty::{TyCtxt, TypeVisitable, TypeckResults},\n+    ty::{ParamEnv, TyCtxt, TypeVisitable, TypeckResults},\n };\n use std::mem::swap;\n \n@@ -24,12 +24,18 @@ use std::mem::swap;\n pub(super) fn build_control_flow_graph<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     typeck_results: &TypeckResults<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n     consumed_borrowed_places: ConsumedAndBorrowedPlaces,\n     body: &'tcx Body<'tcx>,\n     num_exprs: usize,\n ) -> (DropRangesBuilder, FxHashSet<HirId>) {\n-    let mut drop_range_visitor =\n-        DropRangeVisitor::new(infcx, typeck_results, consumed_borrowed_places, num_exprs);\n+    let mut drop_range_visitor = DropRangeVisitor::new(\n+        infcx,\n+        typeck_results,\n+        param_env,\n+        consumed_borrowed_places,\n+        num_exprs,\n+    );\n     intravisit::walk_body(&mut drop_range_visitor, body);\n \n     drop_range_visitor.drop_ranges.process_deferred_edges();\n@@ -88,6 +94,7 @@ pub(super) fn build_control_flow_graph<'tcx>(\n struct DropRangeVisitor<'a, 'tcx> {\n     typeck_results: &'a TypeckResults<'tcx>,\n     infcx: &'a InferCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n     places: ConsumedAndBorrowedPlaces,\n     drop_ranges: DropRangesBuilder,\n     expr_index: PostOrderId,\n@@ -98,6 +105,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n     fn new(\n         infcx: &'a InferCtxt<'tcx>,\n         typeck_results: &'a TypeckResults<'tcx>,\n+        param_env: ParamEnv<'tcx>,\n         places: ConsumedAndBorrowedPlaces,\n         num_exprs: usize,\n     ) -> Self {\n@@ -110,6 +118,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n         Self {\n             infcx,\n             typeck_results,\n+            param_env,\n             places,\n             drop_ranges,\n             expr_index: PostOrderId::from_u32(0),\n@@ -220,15 +229,14 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n     fn handle_uninhabited_return(&mut self, expr: &Expr<'tcx>) {\n         let ty = self.typeck_results.expr_ty(expr);\n         let ty = self.infcx.resolve_vars_if_possible(ty);\n-        let ty = self.tcx().erase_regions(ty);\n-        let m = self.tcx().parent_module(expr.hir_id).to_def_id();\n-        let param_env = self.tcx().param_env(m.expect_local());\n         if ty.has_non_region_infer() {\n             self.tcx()\n                 .sess\n                 .delay_span_bug(expr.span, format!(\"could not resolve infer vars in `{ty}`\"));\n         }\n-        if !ty.is_inhabited_from(self.tcx(), m, param_env) {\n+        let ty = self.tcx().erase_regions(ty);\n+        let m = self.tcx().parent_module(expr.hir_id).to_def_id();\n+        if !ty.is_inhabited_from(self.tcx(), m, self.param_env) {\n             // This function will not return. We model this fact as an infinite loop.\n             self.drop_ranges.add_control_edge(self.expr_index + 1, self.expr_index + 1);\n         }"}, {"sha": "2abcadcc9ce7de4f6335daf6c9febc0ca8d3a6c4", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/024bb8c7fb8b31e36e559a566bcaf4e7a85fe36b/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024bb8c7fb8b31e36e559a566bcaf4e7a85fe36b/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs?ref=024bb8c7fb8b31e36e559a566bcaf4e7a85fe36b", "patch": "@@ -45,6 +45,7 @@ pub fn compute_drop_ranges<'a, 'tcx>(\n         let (mut drop_ranges, borrowed_temporaries) = build_control_flow_graph(\n             &fcx,\n             typeck_results,\n+            fcx.param_env,\n             consumed_borrowed_places,\n             body,\n             num_exprs,"}]}