{"sha": "1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "node_id": "C_kwDOAAsO6NoAKDFiYzM2ODNiMzI3NWE1ZWIyZWQxM2QyNGVkY2RjYmM1OWFmZTVkNzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-12T17:11:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-12T17:11:03Z"}, "message": "Auto merge of #106773 - Nilstrieb:rollup-sq73pyg, r=Nilstrieb\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #105806 (Support eager subdiagnostics again)\n - #106322 (Handle inference variables in `CollectAllMismatches` correctly)\n - #106579 (Suggest making private tuple struct field public)\n - #106714 (remove unreachable error code `E0490`)\n - #106751 (Fix rendering 'const' in header for intrinsics)\n - #106761 (Add `WaffleLapkin` to compiler reviewers)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "45a2cd6613ff1e78a0a43ffb8e665b41df71bcec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45a2cd6613ff1e78a0a43ffb8e665b41df71bcec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "html_url": "https://github.com/rust-lang/rust/commit/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9", "html_url": "https://github.com/rust-lang/rust/commit/222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9"}, {"sha": "89f9569d54452bb0b93f75aaee720c487ed2b37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/89f9569d54452bb0b93f75aaee720c487ed2b37a", "html_url": "https://github.com/rust-lang/rust/commit/89f9569d54452bb0b93f75aaee720c487ed2b37a"}], "stats": {"total": 506, "additions": 395, "deletions": 111}, "files": [{"sha": "24258974bb97c67e05cabf9d649757f5d5d4ebf6", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -618,7 +618,7 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0487, // unsafe use of destructor: destructor might be called while...\n //  E0488, // lifetime of variable does not enclose its declaration\n //  E0489, // type/lifetime parameter not in scope here\n-    E0490, // a value of type `..` is borrowed for too long\n+//  E0490, // removed: unreachable\n     E0523, // two dependencies have same (crate-name, disambiguator) but different SVH\n //  E0526, // shuffle indices are not constant\n //  E0540, // multiple rustc_deprecated attributes"}, {"sha": "ae0091b03736f3b6c78343ae5d7487ab7b12606a", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -101,7 +101,6 @@ infer_subtype_2 = ...so that {$requirement ->\n infer_reborrow = ...so that reference does not outlive borrowed content\n infer_reborrow_upvar = ...so that closure can access `{$name}`\n infer_relate_object_bound = ...so that it can be closed over into an object\n-infer_data_borrowed = ...so that the type `{$name}` is not borrowed for too long\n infer_reference_outlives_referent = ...so that the reference type `{$name}` does not outlive the data it points at\n infer_relate_param_bound = ...so that the type `{$name}` will meet its required lifetime bounds{$continues ->\n     [true] ..."}, {"sha": "7504ed094a3d4160715436ac3981b6f1729e45e3", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -29,15 +29,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 RegionOriginNote::Plain { span, msg: fluent::infer_relate_object_bound }\n                     .add_to_diagnostic(err);\n             }\n-            infer::DataBorrowed(ty, span) => {\n-                RegionOriginNote::WithName {\n-                    span,\n-                    msg: fluent::infer_data_borrowed,\n-                    name: &self.ty_to_string(ty),\n-                    continues: false,\n-                }\n-                .add_to_diagnostic(err);\n-            }\n             infer::ReferenceOutlivesReferent(ty, span) => {\n                 RegionOriginNote::WithName {\n                     span,\n@@ -227,32 +218,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 );\n                 err\n             }\n-            infer::DataBorrowed(ty, span) => {\n-                let mut err = struct_span_err!(\n-                    self.tcx.sess,\n-                    span,\n-                    E0490,\n-                    \"a value of type `{}` is borrowed for too long\",\n-                    self.ty_to_string(ty)\n-                );\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    \"the type is valid for \",\n-                    sub,\n-                    \"\",\n-                    None,\n-                );\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    \"but the borrow lasts for \",\n-                    sup,\n-                    \"\",\n-                    None,\n-                );\n-                err\n-            }\n             infer::ReferenceOutlivesReferent(ty, span) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "897545046c33f3bfd2b6886e974ab1f1673409ea", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -702,26 +702,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     // Obtain the spans for all the places that can\n                     // influence the constraints on this value for\n                     // richer diagnostics in `static_impl_trait`.\n-                    let influences: Vec<Span> = self\n-                        .data\n-                        .constraints\n-                        .iter()\n-                        .filter_map(|(constraint, origin)| match (constraint, origin) {\n-                            (\n-                                Constraint::VarSubVar(_, sup),\n-                                SubregionOrigin::DataBorrowed(_, sp),\n-                            ) if sup == &node_vid => Some(*sp),\n-                            _ => None,\n-                        })\n-                        .collect();\n-\n-                    self.collect_error_for_expanding_node(\n-                        graph,\n-                        &mut dup_vec,\n-                        node_vid,\n-                        errors,\n-                        influences,\n-                    );\n+\n+                    self.collect_error_for_expanding_node(graph, &mut dup_vec, node_vid, errors);\n                 }\n             }\n         }\n@@ -775,7 +757,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         dup_vec: &mut IndexVec<RegionVid, Option<RegionVid>>,\n         node_idx: RegionVid,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n-        influences: Vec<Span>,\n     ) {\n         // Errors in expanding nodes result from a lower-bound that is\n         // not contained by an upper-bound.\n@@ -830,7 +811,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                         lower_bound.region,\n                         upper_bound.origin.clone(),\n                         upper_bound.region,\n-                        influences,\n+                        vec![],\n                     ));\n                     return;\n                 }"}, {"sha": "4acd0d0edfec774546b1a73bda0ae049d8fe720e", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -410,9 +410,6 @@ pub enum SubregionOrigin<'tcx> {\n     /// Creating a pointer `b` to contents of another reference\n     Reborrow(Span),\n \n-    /// Data with type `Ty<'tcx>` was borrowed\n-    DataBorrowed(Ty<'tcx>, Span),\n-\n     /// (&'a &'b T) where a >= b\n     ReferenceOutlivesReferent(Ty<'tcx>, Span),\n \n@@ -1978,7 +1975,6 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             RelateParamBound(a, ..) => a,\n             RelateRegionParamBound(a) => a,\n             Reborrow(a) => a,\n-            DataBorrowed(_, a) => a,\n             ReferenceOutlivesReferent(_, a) => a,\n             CompareImplItemObligation { span, .. } => span,\n             AscribeUserTypeProvePredicate(span) => span,"}, {"sha": "e405462bbb862268856c601acf1e0711bbce8cdd", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -382,10 +382,26 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n                     return Ok(quote! { #diag.subdiagnostic(#binding); });\n                 }\n             }\n-            (Meta::List(_), \"subdiagnostic\") => {\n-                throw_invalid_attr!(attr, &meta, |diag| {\n-                    diag.help(\"`subdiagnostic` does not support nested attributes\")\n-                })\n+            (Meta::List(MetaList { ref nested, .. }), \"subdiagnostic\") => {\n+                if nested.len() == 1\n+                    && let Some(NestedMeta::Meta(Meta::Path(path))) = nested.first()\n+                    && path.is_ident(\"eager\") {\n+                        let handler = match &self.parent.kind {\n+                            DiagnosticDeriveKind::Diagnostic { handler } => handler,\n+                            DiagnosticDeriveKind::LintDiagnostic => {\n+                                throw_invalid_attr!(attr, &meta, |diag| {\n+                                    diag.help(\"eager subdiagnostics are not supported on lints\")\n+                                })\n+                            }\n+                        };\n+                        return Ok(quote! { #diag.eager_subdiagnostic(#handler, #binding); });\n+                } else {\n+                    throw_invalid_attr!(attr, &meta, |diag| {\n+                        diag.help(\n+                            \"`eager` is the only supported nested attribute for `subdiagnostic`\",\n+                        )\n+                    })\n+                }\n             }\n             _ => (),\n         }"}, {"sha": "bb3722fe156e03b8d01a47d6bbdfe08675e16730", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -1,5 +1,6 @@\n #![feature(allow_internal_unstable)]\n #![feature(if_let_guard)]\n+#![feature(let_chains)]\n #![feature(never_type)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_span)]"}, {"sha": "b1b04c92a75042cfa4af912ff5024c1acbde65f5", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -334,6 +334,15 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         self.r.field_names.insert(def_id, field_names);\n     }\n \n+    fn insert_field_visibilities_local(&mut self, def_id: DefId, vdata: &ast::VariantData) {\n+        let field_vis = vdata\n+            .fields()\n+            .iter()\n+            .map(|field| field.vis.span.until(field.ident.map_or(field.ty.span, |i| i.span)))\n+            .collect();\n+        self.r.field_visibility_spans.insert(def_id, field_vis);\n+    }\n+\n     fn insert_field_names_extern(&mut self, def_id: DefId) {\n         let field_names =\n             self.r.cstore().struct_field_names_untracked(def_id, self.r.session).collect();\n@@ -737,6 +746,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n                 // Record field names for error reporting.\n                 self.insert_field_names_local(def_id, vdata);\n+                self.insert_field_visibilities_local(def_id, vdata);\n \n                 // If this is a tuple or unit struct, define a name\n                 // in the value namespace as well.\n@@ -770,6 +780,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id.to_def_id());\n                     self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, sp, expansion));\n                     self.r.visibilities.insert(ctor_def_id, ctor_vis);\n+                    // We need the field visibility spans also for the constructor for E0603.\n+                    self.insert_field_visibilities_local(ctor_def_id.to_def_id(), vdata);\n \n                     self.r\n                         .struct_constructors\n@@ -783,6 +795,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n                 // Record field names for error reporting.\n                 self.insert_field_names_local(def_id, vdata);\n+                self.insert_field_visibilities_local(def_id, vdata);\n             }\n \n             ItemKind::Trait(..) => {\n@@ -1510,6 +1523,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n \n         // Record field names for error reporting.\n         self.insert_field_names_local(def_id.to_def_id(), &variant.data);\n+        self.insert_field_visibilities_local(def_id.to_def_id(), &variant.data);\n \n         visit::walk_variant(self, variant);\n     }"}, {"sha": "1a852de8eed690d29e6e2cabebff7ead288bb83c", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -6,7 +6,9 @@ use rustc_ast::{self as ast, Crate, ItemKind, ModKind, NodeId, Path, CRATE_NODE_\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n+use rustc_errors::{\n+    pluralize, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n+};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PerNS};\n@@ -1604,6 +1606,16 @@ impl<'a> Resolver<'a> {\n         err.span_label(ident.span, &format!(\"private {}\", descr));\n         if let Some(span) = ctor_fields_span {\n             err.span_label(span, \"a constructor is private if any of the fields is private\");\n+            if let Res::Def(_, d) = res && let Some(fields) = self.field_visibility_spans.get(&d) {\n+                err.multipart_suggestion_verbose(\n+                    &format!(\n+                        \"consider making the field{} publicly accessible\",\n+                        pluralize!(fields.len())\n+                    ),\n+                    fields.iter().map(|span| (*span, \"pub \".to_string())).collect(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n         }\n \n         // Print the whole import chain to make it easier to see what happens."}, {"sha": "d92f5a7c05e6d8473ae85c0eff0107f9e6be3300", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -1451,6 +1451,17 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         .collect();\n \n                     if non_visible_spans.len() > 0 {\n+                        if let Some(fields) = self.r.field_visibility_spans.get(&def_id) {\n+                            err.multipart_suggestion_verbose(\n+                                &format!(\n+                                    \"consider making the field{} publicly accessible\",\n+                                    pluralize!(fields.len())\n+                                ),\n+                                fields.iter().map(|span| (*span, \"pub \".to_string())).collect(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+\n                         let mut m: MultiSpan = non_visible_spans.clone().into();\n                         non_visible_spans\n                             .into_iter()"}, {"sha": "84d9794ccf26671471aab168841bca043c1acdff", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -881,6 +881,10 @@ pub struct Resolver<'a> {\n     /// Used for hints during error reporting.\n     field_names: FxHashMap<DefId, Vec<Spanned<Symbol>>>,\n \n+    /// Span of the privacy modifier in fields of an item `DefId` accessible with dot syntax.\n+    /// Used for hints during error reporting.\n+    field_visibility_spans: FxHashMap<DefId, Vec<Span>>,\n+\n     /// All imports known to succeed or fail.\n     determined_imports: Vec<&'a Import<'a>>,\n \n@@ -1268,6 +1272,7 @@ impl<'a> Resolver<'a> {\n \n             has_self: FxHashSet::default(),\n             field_names: FxHashMap::default(),\n+            field_visibility_spans: FxHashMap::default(),\n \n             determined_imports: Vec::new(),\n             indeterminate_imports: Vec::new(),"}, {"sha": "ba9ee57d4099cbdfea98488cbbe9beaed46f263a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/method_chain.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n \n     fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         self.infcx.probe(|_| {\n-            if a.is_ty_infer() || b.is_ty_infer() {\n+            if a.is_ty_var() || b.is_ty_var() {\n                 Ok(a)\n             } else {\n                 self.infcx.super_combine_tys(self, a, b).or_else(|e| {\n@@ -71,10 +71,13 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n         a: ty::Const<'tcx>,\n         b: ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-        if a == b {\n-            return Ok(a);\n-        }\n-        relate::super_relate_consts(self, a, b) // could do something similar here for constants!\n+        self.infcx.probe(|_| {\n+            if a.is_ct_infer() || b.is_ct_infer() {\n+                Ok(a)\n+            } else {\n+                relate::super_relate_consts(self, a, b) // could do something similar here for constants!\n+            }\n+        })\n     }\n \n     fn binders<T: Relate<'tcx>>("}, {"sha": "87de41fde63c5e27ce9b4b333c81814347eaf33d", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -676,15 +676,23 @@ impl Item {\n         }\n         let header = match *self.kind {\n             ItemKind::ForeignFunctionItem(_) => {\n-                let abi = tcx.fn_sig(self.item_id.as_def_id().unwrap()).abi();\n+                let def_id = self.item_id.as_def_id().unwrap();\n+                let abi = tcx.fn_sig(def_id).abi();\n                 hir::FnHeader {\n                     unsafety: if abi == Abi::RustIntrinsic {\n                         intrinsic_operation_unsafety(tcx, self.item_id.as_def_id().unwrap())\n                     } else {\n                         hir::Unsafety::Unsafe\n                     },\n                     abi,\n-                    constness: hir::Constness::NotConst,\n+                    constness: if abi == Abi::RustIntrinsic\n+                        && tcx.is_const_fn(def_id)\n+                        && is_unstable_const_fn(tcx, def_id).is_none()\n+                    {\n+                        hir::Constness::Const\n+                    } else {\n+                        hir::Constness::NotConst\n+                    },\n                     asyncness: hir::IsAsync::NotAsync,\n                 }\n             }"}, {"sha": "bc9fd35ecde3786c2db4092104dce15e25d69290", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -31,10 +31,8 @@ const IGNORE_DOCTEST_CHECK: &[&str] =\n     &[\"E0208\", \"E0464\", \"E0570\", \"E0601\", \"E0602\", \"E0640\", \"E0717\"];\n \n // Error codes that don't yet have a UI test. This list will eventually be removed.\n-const IGNORE_UI_TEST_CHECK: &[&str] = &[\n-    \"E0461\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n-    \"E0789\",\n-];\n+const IGNORE_UI_TEST_CHECK: &[&str] =\n+    &[\"E0461\", \"E0465\", \"E0476\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\", \"E0789\"];\n \n macro_rules! verbose_print {\n     ($verbose:expr, $($fmt:tt)*) => {"}, {"sha": "2fc486d01dae02b1ed7f2260b001690d96a82fb5", "filename": "tests/rustdoc/const-intrinsic.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Frustdoc%2Fconst-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Frustdoc%2Fconst-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-intrinsic.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -0,0 +1,25 @@\n+#![feature(intrinsics)]\n+#![feature(staged_api)]\n+\n+#![crate_name = \"foo\"]\n+#![stable(since=\"1.0.0\", feature=\"rust1\")]\n+\n+extern \"rust-intrinsic\" {\n+    // @has 'foo/fn.transmute.html'\n+    // @has - '//pre[@class=\"rust fn\"]' 'pub const unsafe extern \"rust-intrinsic\" fn transmute<T, U>(_: T) -> U'\n+    #[stable(since=\"1.0.0\", feature=\"rust1\")]\n+    #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n+    pub fn transmute<T, U>(_: T) -> U;\n+\n+    // @has 'foo/fn.unreachable.html'\n+    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n+    #[stable(since=\"1.0.0\", feature=\"rust1\")]\n+    pub fn unreachable() -> !;\n+}\n+\n+extern \"C\" {\n+    // @has 'foo/fn.needs_drop.html'\n+    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n+    #[stable(since=\"1.0.0\", feature=\"rust1\")]\n+    pub fn needs_drop() -> !;\n+}"}, {"sha": "65d9601e78ab6980d05557915901a44ad72abfd9", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -723,7 +723,6 @@ struct SubdiagnosticEagerLint {\n #[diag(compiletest_example)]\n struct SubdiagnosticEagerCorrect {\n     #[subdiagnostic(eager)]\n-    //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n@@ -744,7 +743,6 @@ pub(crate) struct SubdiagnosticWithSuggestion {\n #[diag(compiletest_example)]\n struct SubdiagnosticEagerSuggestion {\n     #[subdiagnostic(eager)]\n-    //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     sub: SubdiagnosticWithSuggestion,\n }\n "}, {"sha": "13e806a434f637f9e4bb2ca8efec71b06f922ef4", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -539,7 +539,7 @@ error: `#[subdiagnostic(...)]` is not a valid attribute\n LL |     #[subdiagnostic(bad)]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: `subdiagnostic` does not support nested attributes\n+   = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic = ...]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:693:5\n@@ -553,54 +553,38 @@ error: `#[subdiagnostic(...)]` is not a valid attribute\n LL |     #[subdiagnostic(bad, bad)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: `subdiagnostic` does not support nested attributes\n+   = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:709:5\n    |\n LL |     #[subdiagnostic(\"bad\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: `subdiagnostic` does not support nested attributes\n+   = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:717:5\n    |\n LL |     #[subdiagnostic(eager)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: `subdiagnostic` does not support nested attributes\n-\n-error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:725:5\n-   |\n-LL |     #[subdiagnostic(eager)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `subdiagnostic` does not support nested attributes\n-\n-error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:746:5\n-   |\n-LL |     #[subdiagnostic(eager)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `subdiagnostic` does not support nested attributes\n+   = help: eager subdiagnostics are not supported on lints\n \n error: expected at least one string literal for `code(...)`\n-  --> $DIR/diagnostic-derive.rs:777:18\n+  --> $DIR/diagnostic-derive.rs:775:18\n    |\n LL |     #[suggestion(code())]\n    |                  ^^^^^^\n \n error: `code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:785:23\n+  --> $DIR/diagnostic-derive.rs:783:23\n    |\n LL |     #[suggestion(code(foo))]\n    |                       ^^^\n \n error: `code = \"...\"`/`code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:793:18\n+  --> $DIR/diagnostic-derive.rs:791:18\n    |\n LL |     #[suggestion(code = 3)]\n    |                  ^^^^^^^^\n@@ -676,7 +660,7 @@ note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n   --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:LL:CC\n    = note: this error originates in the derive macro `Diagnostic` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 85 previous errors\n+error: aborting due to 83 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "5fb633de9831c52c8d64ec22833560e817f001f8", "filename": "tests/ui/consts/ct-var-in-collect_all_mismatches.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -0,0 +1,20 @@\n+struct Foo<T, const N: usize> {\n+    array: [T; N],\n+}\n+\n+trait Bar<const N: usize> {}\n+\n+impl<T, const N: usize> Foo<T, N> {\n+    fn trigger(self) {\n+        self.unsatisfied()\n+        //~^ ERROR the trait bound `T: Bar<N>` is not satisfied\n+    }\n+\n+    fn unsatisfied(self)\n+    where\n+        T: Bar<N>,\n+    {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "43fba2573ff62164bdf579e7581e5f571520f0c0", "filename": "tests/ui/consts/ct-var-in-collect_all_mismatches.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.stderr?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -0,0 +1,22 @@\n+error[E0277]: the trait bound `T: Bar<N>` is not satisfied\n+  --> $DIR/ct-var-in-collect_all_mismatches.rs:9:14\n+   |\n+LL |         self.unsatisfied()\n+   |              ^^^^^^^^^^^ the trait `Bar<N>` is not implemented for `T`\n+   |\n+note: required by a bound in `Foo::<T, N>::unsatisfied`\n+  --> $DIR/ct-var-in-collect_all_mismatches.rs:15:12\n+   |\n+LL |     fn unsatisfied(self)\n+   |        ----------- required by a bound in this\n+LL |     where\n+LL |         T: Bar<N>,\n+   |            ^^^^^^ required by this bound in `Foo::<T, N>::unsatisfied`\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: Bar<N>, const N: usize> Foo<T, N> {\n+   |       ++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "882a1d139544107a12fd95db6a685c75b8857d49", "filename": "tests/ui/iterators/invalid-iterator-chain-with-int-infer.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x = Some(()).iter().map(|()| 1).sum::<f32>();\n+    //~^ ERROR a value of type `f32` cannot be made by summing an iterator over elements of type `{integer}`\n+}"}, {"sha": "3cb5e44c711010fd7a8b70237b6c7da0f36825d2", "filename": "tests/ui/iterators/invalid-iterator-chain-with-int-infer.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.stderr?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: a value of type `f32` cannot be made by summing an iterator over elements of type `{integer}`\n+  --> $DIR/invalid-iterator-chain-with-int-infer.rs:2:41\n+   |\n+LL |     let x = Some(()).iter().map(|()| 1).sum::<f32>();\n+   |                                         ^^^ value of type `f32` cannot be made by summing a `std::iter::Iterator<Item={integer}>`\n+   |\n+   = help: the trait `Sum<{integer}>` is not implemented for `f32`\n+   = help: the following other types implement trait `Sum<A>`:\n+             <f32 as Sum<&'a f32>>\n+             <f32 as Sum>\n+note: the method call chain might not have had the expected associated types\n+  --> $DIR/invalid-iterator-chain-with-int-infer.rs:2:29\n+   |\n+LL |     let x = Some(()).iter().map(|()| 1).sum::<f32>();\n+   |             -------- ------ ^^^^^^^^^^^ `Iterator::Item` changed to `{integer}` here\n+   |             |        |\n+   |             |        `Iterator::Item` is `&()` here\n+   |             this expression has type `Option<()>`\n+note: required by a bound in `std::iter::Iterator::sum`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "600dc7c876ff3f22709b2db583f0e9c538d7c1a9", "filename": "tests/ui/privacy/issue-75906.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fissue-75906.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fissue-75906.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fissue-75906.stderr?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -9,6 +9,10 @@ note: constructor is not visible here due to private fields\n    |\n LL |     pub struct Bar(u8);\n    |                    ^^ private field\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct Bar(pub u8);\n+   |                    +++\n \n error: aborting due to previous error\n "}, {"sha": "3bed841d13ea29ec632522fda6830ea886e49c3c", "filename": "tests/ui/privacy/issue-75907.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fissue-75907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fissue-75907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fissue-75907.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -2,7 +2,7 @@\n \n mod foo {\n     pub(crate) struct Foo(u8);\n-    pub(crate) struct Bar(pub u8, u8, Foo);\n+    pub(crate) struct Bar(pub u8, pub(in crate::foo) u8, Foo);\n \n     pub(crate) fn make_bar() -> Bar {\n         Bar(1, 12, Foo(10))"}, {"sha": "f7cb874c2cc0d5e05995d4d45d274e167ca10d37", "filename": "tests/ui/privacy/issue-75907.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fissue-75907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fissue-75907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fissue-75907.stderr?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -11,6 +11,10 @@ LL |     let Bar(x, y, Foo(z)) = make_bar();\n    |                ^  ^^^^^^ private field\n    |                |\n    |                private field\n+help: consider making the fields publicly accessible\n+   |\n+LL |     pub(crate) struct Bar(pub u8, pub u8, pub Foo);\n+   |                           ~~~     ~~~     +++\n \n error[E0532]: cannot match against a tuple struct which contains private fields\n   --> $DIR/issue-75907.rs:15:19\n@@ -23,6 +27,10 @@ note: constructor is not visible here due to private fields\n    |\n LL |     let Bar(x, y, Foo(z)) = make_bar();\n    |                       ^ private field\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub(crate) struct Foo(pub u8);\n+   |                           +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "615b0af2762d3de9e70a7d08a2f0a1b989f863cb", "filename": "tests/ui/privacy/privacy5.stderr", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fprivacy5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fprivacy5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivacy5.stderr?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -12,6 +12,10 @@ note: the tuple struct constructor `A` is defined here\n    |\n LL |     pub struct A(());\n    |     ^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct A(pub ());\n+   |                  +++\n \n error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:52:16\n@@ -27,6 +31,10 @@ note: the tuple struct constructor `B` is defined here\n    |\n LL |     pub struct B(isize);\n    |     ^^^^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct B(pub isize);\n+   |                  +++\n \n error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:53:16\n@@ -42,6 +50,10 @@ note: the tuple struct constructor `C` is defined here\n    |\n LL |     pub struct C(pub isize, isize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the fields publicly accessible\n+   |\n+LL |     pub struct C(pub isize, pub isize);\n+   |                  ~~~        +++\n \n error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:56:12\n@@ -57,6 +69,10 @@ note: the tuple struct constructor `A` is defined here\n    |\n LL |     pub struct A(());\n    |     ^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct A(pub ());\n+   |                  +++\n \n error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:57:12\n@@ -72,6 +88,10 @@ note: the tuple struct constructor `A` is defined here\n    |\n LL |     pub struct A(());\n    |     ^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct A(pub ());\n+   |                  +++\n \n error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:58:18\n@@ -87,6 +107,10 @@ note: the tuple struct constructor `A` is defined here\n    |\n LL |     pub struct A(());\n    |     ^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct A(pub ());\n+   |                  +++\n \n error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:59:18\n@@ -102,6 +126,10 @@ note: the tuple struct constructor `A` is defined here\n    |\n LL |     pub struct A(());\n    |     ^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct A(pub ());\n+   |                  +++\n \n error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:61:12\n@@ -117,6 +145,10 @@ note: the tuple struct constructor `B` is defined here\n    |\n LL |     pub struct B(isize);\n    |     ^^^^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct B(pub isize);\n+   |                  +++\n \n error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:62:12\n@@ -132,6 +164,10 @@ note: the tuple struct constructor `B` is defined here\n    |\n LL |     pub struct B(isize);\n    |     ^^^^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct B(pub isize);\n+   |                  +++\n \n error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:63:18\n@@ -147,6 +183,10 @@ note: the tuple struct constructor `B` is defined here\n    |\n LL |     pub struct B(isize);\n    |     ^^^^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct B(pub isize);\n+   |                  +++\n \n error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:64:18\n@@ -162,6 +202,10 @@ note: the tuple struct constructor `B` is defined here\n    |\n LL |     pub struct B(isize);\n    |     ^^^^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct B(pub isize);\n+   |                  +++\n \n error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:65:18\n@@ -177,6 +221,10 @@ note: the tuple struct constructor `B` is defined here\n    |\n LL |     pub struct B(isize);\n    |     ^^^^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct B(pub isize);\n+   |                  +++\n \n error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:65:32\n@@ -192,6 +240,10 @@ note: the tuple struct constructor `B` is defined here\n    |\n LL |     pub struct B(isize);\n    |     ^^^^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct B(pub isize);\n+   |                  +++\n \n error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:68:12\n@@ -207,6 +259,10 @@ note: the tuple struct constructor `C` is defined here\n    |\n LL |     pub struct C(pub isize, isize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the fields publicly accessible\n+   |\n+LL |     pub struct C(pub isize, pub isize);\n+   |                  ~~~        +++\n \n error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:69:12\n@@ -222,6 +278,10 @@ note: the tuple struct constructor `C` is defined here\n    |\n LL |     pub struct C(pub isize, isize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the fields publicly accessible\n+   |\n+LL |     pub struct C(pub isize, pub isize);\n+   |                  ~~~        +++\n \n error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:70:12\n@@ -237,6 +297,10 @@ note: the tuple struct constructor `C` is defined here\n    |\n LL |     pub struct C(pub isize, isize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the fields publicly accessible\n+   |\n+LL |     pub struct C(pub isize, pub isize);\n+   |                  ~~~        +++\n \n error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:71:12\n@@ -252,6 +316,10 @@ note: the tuple struct constructor `C` is defined here\n    |\n LL |     pub struct C(pub isize, isize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the fields publicly accessible\n+   |\n+LL |     pub struct C(pub isize, pub isize);\n+   |                  ~~~        +++\n \n error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:72:18\n@@ -267,6 +335,10 @@ note: the tuple struct constructor `C` is defined here\n    |\n LL |     pub struct C(pub isize, isize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the fields publicly accessible\n+   |\n+LL |     pub struct C(pub isize, pub isize);\n+   |                  ~~~        +++\n \n error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:73:18\n@@ -282,6 +354,10 @@ note: the tuple struct constructor `C` is defined here\n    |\n LL |     pub struct C(pub isize, isize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the fields publicly accessible\n+   |\n+LL |     pub struct C(pub isize, pub isize);\n+   |                  ~~~        +++\n \n error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:74:18\n@@ -297,6 +373,10 @@ note: the tuple struct constructor `C` is defined here\n    |\n LL |     pub struct C(pub isize, isize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the fields publicly accessible\n+   |\n+LL |     pub struct C(pub isize, pub isize);\n+   |                  ~~~        +++\n \n error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:75:18\n@@ -312,6 +392,10 @@ note: the tuple struct constructor `C` is defined here\n    |\n LL |     pub struct C(pub isize, isize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the fields publicly accessible\n+   |\n+LL |     pub struct C(pub isize, pub isize);\n+   |                  ~~~        +++\n \n error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:83:17\n@@ -327,6 +411,10 @@ note: the tuple struct constructor `A` is defined here\n    |\n LL |     pub struct A(());\n    |     ^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct A(pub ());\n+   |                  +++\n \n error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:84:17\n@@ -342,6 +430,10 @@ note: the tuple struct constructor `B` is defined here\n    |\n LL |     pub struct B(isize);\n    |     ^^^^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct B(pub isize);\n+   |                  +++\n \n error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:85:17\n@@ -357,6 +449,10 @@ note: the tuple struct constructor `C` is defined here\n    |\n LL |     pub struct C(pub isize, isize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the fields publicly accessible\n+   |\n+LL |     pub struct C(pub isize, pub isize);\n+   |                  ~~~        +++\n \n error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:90:20"}, {"sha": "78e335b3db1cbaf08b9314e3f32f25e979f87d92", "filename": "tests/ui/privacy/suggest-making-field-public.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fsuggest-making-field-public.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fsuggest-making-field-public.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fsuggest-making-field-public.fixed?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+mod a {\n+    pub struct A(pub String);\n+}\n+\n+mod b {\n+    use crate::a::A;\n+    pub fn x() {\n+        A(\"\".into()); //~ ERROR cannot initialize a tuple struct which contains private fields\n+    }\n+}\n+fn main() {\n+    a::A(\"a\".into()); //~ ERROR tuple struct constructor `A` is private\n+    b::x();\n+}"}, {"sha": "b65c801d10e6a3ca85b15893262ec6ea9ecc44df", "filename": "tests/ui/privacy/suggest-making-field-public.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fsuggest-making-field-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fsuggest-making-field-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fsuggest-making-field-public.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+mod a {\n+    pub struct A(pub(self)String);\n+}\n+\n+mod b {\n+    use crate::a::A;\n+    pub fn x() {\n+        A(\"\".into()); //~ ERROR cannot initialize a tuple struct which contains private fields\n+    }\n+}\n+fn main() {\n+    a::A(\"a\".into()); //~ ERROR tuple struct constructor `A` is private\n+    b::x();\n+}"}, {"sha": "e92e9aae310e3272a8c07016e8eadf9a5cc5ad26", "filename": "tests/ui/privacy/suggest-making-field-public.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fsuggest-making-field-public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fprivacy%2Fsuggest-making-field-public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fsuggest-making-field-public.stderr?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -0,0 +1,39 @@\n+error[E0603]: tuple struct constructor `A` is private\n+  --> $DIR/suggest-making-field-public.rs:13:8\n+   |\n+LL |     pub struct A(pub(self)String);\n+   |                  --------------- a constructor is private if any of the fields is private\n+...\n+LL |     a::A(\"a\".into());\n+   |        ^ private tuple struct constructor\n+   |\n+note: the tuple struct constructor `A` is defined here\n+  --> $DIR/suggest-making-field-public.rs:3:5\n+   |\n+LL |     pub struct A(pub(self)String);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct A(pub String);\n+   |                  ~~~\n+\n+error[E0423]: cannot initialize a tuple struct which contains private fields\n+  --> $DIR/suggest-making-field-public.rs:9:9\n+   |\n+LL |         A(\"\".into());\n+   |         ^\n+   |\n+note: constructor is not visible here due to private fields\n+  --> $DIR/suggest-making-field-public.rs:3:18\n+   |\n+LL |     pub struct A(pub(self)String);\n+   |                  ^^^^^^^^^^^^^^^ private field\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct A(pub String);\n+   |                  ~~~\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0423, E0603.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "7e439c10b7b8408c08d8a2055a5748757cd50135", "filename": "tests/ui/resolve/issue-42944.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fresolve%2Fissue-42944.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fresolve%2Fissue-42944.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-42944.rs?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -1,5 +1,5 @@\n mod foo {\n-    pub struct Bx(());\n+    pub struct Bx(pub(in crate::foo) ());\n }\n \n mod bar {"}, {"sha": "4ffa9402c667e8892d26b906ca16d3c9185a0a54", "filename": "tests/ui/resolve/issue-42944.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fresolve%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fresolve%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-42944.stderr?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -7,8 +7,8 @@ LL |         Bx(());\n note: tuple struct `foo::Bx` exists but is inaccessible\n   --> $DIR/issue-42944.rs:2:5\n    |\n-LL |     pub struct Bx(());\n-   |     ^^^^^^^^^^^^^^^^^^ not accessible\n+LL |     pub struct Bx(pub(in crate::foo) ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible\n \n error[E0423]: cannot initialize a tuple struct which contains private fields\n   --> $DIR/issue-42944.rs:9:9\n@@ -19,8 +19,12 @@ LL |         Bx(());\n note: constructor is not visible here due to private fields\n   --> $DIR/issue-42944.rs:2:19\n    |\n-LL |     pub struct Bx(());\n-   |                   ^^ private field\n+LL |     pub struct Bx(pub(in crate::foo) ());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^ private field\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct Bx(pub ());\n+   |                   ~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c1fcaaf05738f0f348be28a8f5c9c85249f3002d", "filename": "tests/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/tests%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -53,6 +53,10 @@ note: the tuple struct constructor `Z` is defined here\n    |\n LL |         pub(in m) struct Z(pub(in m::n) u8);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |         pub(in m) struct Z(pub u8);\n+   |                            ~~~\n \n error[E0603]: tuple struct constructor `S` is private\n   --> $DIR/privacy-struct-ctor.rs:29:8\n@@ -68,6 +72,10 @@ note: the tuple struct constructor `S` is defined here\n    |\n LL |     pub struct S(u8);\n    |     ^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct S(pub u8);\n+   |                  +++\n \n error[E0603]: tuple struct constructor `S` is private\n   --> $DIR/privacy-struct-ctor.rs:31:19\n@@ -83,6 +91,10 @@ note: the tuple struct constructor `S` is defined here\n    |\n LL |     pub struct S(u8);\n    |     ^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |     pub struct S(pub u8);\n+   |                  +++\n \n error[E0603]: tuple struct constructor `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:35:11\n@@ -98,6 +110,10 @@ note: the tuple struct constructor `Z` is defined here\n    |\n LL |         pub(in m) struct Z(pub(in m::n) u8);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider making the field publicly accessible\n+   |\n+LL |         pub(in m) struct Z(pub u8);\n+   |                            ~~~\n \n error[E0603]: tuple struct constructor `S` is private\n   --> $DIR/privacy-struct-ctor.rs:41:16"}, {"sha": "a7b4925bc178408d76edf39f71fe5000c5566e85", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "patch": "@@ -478,6 +478,7 @@ compiler-team-contributors = [\n     \"@jackh726\",\n     \"@TaKO8Ki\",\n     \"@Nilstrieb\",\n+    \"@WaffleLapkin\",\n ]\n compiler = [\n     \"compiler-team\","}]}