{"sha": "1987a3b6c099e069368ac7caf30ea6d46595ca5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ODdhM2I2YzA5OWUwNjkzNjhhYzdjYWYzMGVhNmQ0NjU5NWNhNWY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-09T13:25:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-09T13:25:37Z"}, "message": "Handle SysV64 abi", "tree": {"sha": "723147ad2a7fa47a9cd0428535900d88f90924f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/723147ad2a7fa47a9cd0428535900d88f90924f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1987a3b6c099e069368ac7caf30ea6d46595ca5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1987a3b6c099e069368ac7caf30ea6d46595ca5f", "html_url": "https://github.com/rust-lang/rust/commit/1987a3b6c099e069368ac7caf30ea6d46595ca5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1987a3b6c099e069368ac7caf30ea6d46595ca5f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac773718522d12b897c1e927bfcb5b083e35d19e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac773718522d12b897c1e927bfcb5b083e35d19e", "html_url": "https://github.com/rust-lang/rust/commit/ac773718522d12b897c1e927bfcb5b083e35d19e"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "2323dcc2083b2c6891b3abc1c6142b3cb608b65e", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1987a3b6c099e069368ac7caf30ea6d46595ca5f/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1987a3b6c099e069368ac7caf30ea6d46595ca5f/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=1987a3b6c099e069368ac7caf30ea6d46595ca5f", "patch": "@@ -91,7 +91,7 @@ fn clif_sig_from_fn_sig<'tcx>(\n     };\n     let (call_conv, inputs, output): (CallConv, Vec<Ty<'tcx>>, Ty<'tcx>) = match abi {\n         Abi::Rust => (CallConv::triple_default(triple), sig.inputs().to_vec(), sig.output()),\n-        Abi::C | Abi::Unadjusted => (CallConv::triple_default(triple), sig.inputs().to_vec(), sig.output()),\n+        Abi::C | Abi::Unadjusted | Abi::SysV64 => (CallConv::triple_default(triple), sig.inputs().to_vec(), sig.output()),\n         Abi::RustCall => {\n             assert_eq!(sig.inputs().len(), 2);\n             let extra_args = match sig.inputs().last().unwrap().kind {"}]}