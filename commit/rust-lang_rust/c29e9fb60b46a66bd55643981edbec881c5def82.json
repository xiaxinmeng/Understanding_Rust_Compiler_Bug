{"sha": "c29e9fb60b46a66bd55643981edbec881c5def82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOWU5ZmI2MGI0NmE2NmJkNTU2NDM5ODFlZGJlYzg4MWM1ZGVmODI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-30T00:25:00Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-31T01:50:28Z"}, "message": "syntax: implement foreach .. in .. { .. } via desugaring.", "tree": {"sha": "98eaff9295335b4ca1612f4f28cc7ed23c6fc5b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98eaff9295335b4ca1612f4f28cc7ed23c6fc5b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c29e9fb60b46a66bd55643981edbec881c5def82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c29e9fb60b46a66bd55643981edbec881c5def82", "html_url": "https://github.com/rust-lang/rust/commit/c29e9fb60b46a66bd55643981edbec881c5def82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c29e9fb60b46a66bd55643981edbec881c5def82/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a2d183d6ae83a0119f5cce1f95e3770ddf5d689", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2d183d6ae83a0119f5cce1f95e3770ddf5d689", "html_url": "https://github.com/rust-lang/rust/commit/9a2d183d6ae83a0119f5cce1f95e3770ddf5d689"}], "stats": {"total": 218, "additions": 215, "deletions": 3}, "files": [{"sha": "a262aa5445e74f6f2c8263657531b7d7bcfe388c", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -239,6 +239,8 @@ impl CFGBuilder {\n                 expr_exit\n             }\n \n+            ast::expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n             ast::expr_loop(ref body, _) => {\n                 //\n                 //     [pred]"}, {"sha": "8bc2c145eb36b6ccba5db25a6d3ac1b5285525a2", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -583,6 +583,8 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n                 copy_bits(new_loop_scope.break_bits, in_out);\n             }\n \n+            ast::expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n             ast::expr_loop(ref blk, _) => {\n                 //\n                 //     (expr) <--+"}, {"sha": "e595e7c0694ccb9ba350e5baf00208c20b5390b7", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -503,6 +503,7 @@ fn visit_expr(expr: @expr, (this, vt): (@mut IrMaps, vt<@mut IrMaps>)) {\n         this.add_live_node_for_node(expr.id, ExprNode(expr.span));\n         visit::visit_expr(expr, (this, vt));\n       }\n+      expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n       expr_binary(_, op, _, _) if ast_util::lazy_binop(op) => {\n         this.add_live_node_for_node(expr.id, ExprNode(expr.span));\n         visit::visit_expr(expr, (this, vt));\n@@ -1057,6 +1058,8 @@ impl Liveness {\n             self.propagate_through_loop(expr, Some(cond), blk, succ)\n           }\n \n+          expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n           // Note that labels have been resolved, so we don't need to look\n           // at the label ident\n           expr_loop(ref blk, _) => {\n@@ -1487,6 +1490,7 @@ fn check_expr(expr: @expr, (this, vt): (@Liveness, vt<@Liveness>)) {\n       expr_paren(*) | expr_fn_block(*) | expr_path(*) | expr_self(*) => {\n         visit::visit_expr(expr, (this, vt));\n       }\n+      expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\")\n     }\n }\n "}, {"sha": "a875381cc433a41ecde5d3cc134b698e0b9ecdca", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -435,6 +435,8 @@ impl mem_categorization_ctxt {\n           ast::expr_inline_asm(*) => {\n             return self.cat_rvalue_node(expr, expr_ty);\n           }\n+\n+          ast::expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\")\n         }\n     }\n "}, {"sha": "eaa7970cfe42eebec3780d17c4fa883d44f56185", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -487,6 +487,8 @@ impl VisitContext {\n                 self.consume_block(blk, visitor);\n             }\n \n+            expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n             expr_unary(_, _, lhs) => {\n                 if !self.use_overloaded_operator(\n                     expr, lhs, [], visitor)"}, {"sha": "ba11476204a8a157aba03e0e2425c89f408e8632", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -5016,6 +5016,8 @@ impl Resolver {\n                 }\n             }\n \n+            expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n             expr_break(Some(label)) | expr_again(Some(label)) => {\n                 match self.search_ribs(self.label_ribs, label, expr.span,\n                                        DontAllowCapturingSelf) {"}, {"sha": "a599c7c798eadae1748675ba9704aa3a364b8a01", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -401,7 +401,9 @@ pub fn mark_for_expr(cx: &Context, e: &expr) {\n       expr_match(*) | expr_block(_) | expr_if(*) | expr_while(*) |\n       expr_break(_) | expr_again(_) | expr_unary(*) | expr_lit(_) |\n       expr_mac(_) | expr_addr_of(*) | expr_ret(_) | expr_loop(*) |\n-      expr_loop_body(_) | expr_do_body(_) => ()\n+      expr_loop_body(_) | expr_do_body(_) => (),\n+\n+      expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\")\n     }\n }\n "}, {"sha": "3ec66aff1760cdab8078f8621fba698a80e1803d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -3240,6 +3240,8 @@ pub fn expr_kind(tcx: ctxt,\n             RvalueStmtExpr\n         }\n \n+        ast::expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n         ast::expr_lit(_) | // Note: lit_str is carved out above\n         ast::expr_unary(*) |\n         ast::expr_addr_of(*) |"}, {"sha": "4a3f72a2276c2ef0934ecdf9806c7fc4aa6d3ff3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -2559,6 +2559,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             fcx.write_nil(id);\n         }\n       }\n+      ast::expr_for_loop(*) =>\n+          fail!(\"non-desugared expr_for_loop\"),\n       ast::expr_loop(ref body, _) => {\n         check_block_no_value(fcx, (body));\n         if !may_break(tcx, expr.id, body) {"}, {"sha": "422f59c14eac16940514bc98b0665bd4f72321e3", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -1041,6 +1041,7 @@ pub mod guarantor {\n                     rcx.fcx.tcx(), rcx.fcx.inh.method_map, expr));\n                 None\n             }\n+            ast::expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n         }\n     }\n "}, {"sha": "d6bee4fe19fbdccc3771bbcdf0cd8040b9bee5f0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -465,6 +465,7 @@ pub enum expr_ {\n     expr_cast(@expr, Ty),\n     expr_if(@expr, Block, Option<@expr>),\n     expr_while(@expr, Block),\n+    expr_for_loop(@pat, @expr, Block),\n     /* Conditionless loop (can be exited with break, cont, or ret)\n        Same semantics as while(true) { body }, but typestate knows that the\n        (implicit) condition is always true. */"}, {"sha": "72bbc4a96c5f738a879e24c61a6eabe057768a2b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 155, "deletions": 1, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -16,11 +16,12 @@ use ast_util::{new_rename, new_mark, resolve};\n use attr;\n use attr::AttrMetaMethods;\n use codemap;\n-use codemap::{span, ExpnInfo, NameAndSpan};\n+use codemap::{span, spanned, ExpnInfo, NameAndSpan};\n use ext::base::*;\n use fold::*;\n use parse;\n use parse::{parse_item_from_source_str};\n+use parse::token;\n use parse::token::{ident_to_str, intern};\n use visit;\n use visit::Visitor;\n@@ -99,6 +100,159 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                 }\n             }\n         }\n+\n+        // Desugar expr_for_loop\n+        // From: `foreach <src_pat> in <src_expr> <src_loop_block>`\n+        ast::expr_for_loop(src_pat, src_expr, ref src_loop_block) => {\n+            let src_pat = src_pat.clone();\n+            let src_expr = src_expr.clone();\n+\n+            // Expand any interior macros etc.\n+            // NB: we don't fold pats yet. Curious.\n+            let src_expr = fld.fold_expr(src_expr).clone();\n+            let src_loop_block = fld.fold_block(src_loop_block).clone();\n+\n+            let span = s;\n+            let lo = s.lo;\n+            let hi = s.hi;\n+\n+            pub fn mk_expr(cx: @ExtCtxt, span: span,\n+                           node: expr_) -> @ast::expr {\n+                @ast::expr {\n+                    id: cx.next_id(),\n+                    node: node,\n+                    span: span,\n+                }\n+            }\n+\n+            fn mk_block(cx: @ExtCtxt,\n+                        stmts: &[@ast::stmt],\n+                        expr: Option<@ast::expr>,\n+                        span: span) -> ast::Block {\n+                ast::Block {\n+                    view_items: ~[],\n+                    stmts: stmts.to_owned(),\n+                    expr: expr,\n+                    id: cx.next_id(),\n+                    rules: ast::DefaultBlock,\n+                    span: span,\n+                }\n+            }\n+\n+            fn mk_simple_path(ident: ast::ident, span: span) -> ast::Path {\n+                ast::Path {\n+                    span: span,\n+                    global: false,\n+                    idents: ~[ident],\n+                    rp: None,\n+                    types: ~[]\n+                }\n+            }\n+\n+            // to:\n+            //\n+            // {\n+            //   let _i = &mut <src_expr>;\n+            //   loop {\n+            //       match i.next() {\n+            //           None => break,\n+            //           Some(<src_pat>) => <src_loop_block>\n+            //       }\n+            //   }\n+            // }\n+\n+            let local_ident = token::gensym_ident(\"i\");\n+            let some_ident = token::str_to_ident(\"Some\");\n+            let none_ident = token::str_to_ident(\"None\");\n+            let next_ident = token::str_to_ident(\"next\");\n+\n+            let local_path_1 = mk_simple_path(local_ident, span);\n+            let local_path_2 = mk_simple_path(local_ident, span);\n+            let some_path = mk_simple_path(some_ident, span);\n+            let none_path = mk_simple_path(none_ident, span);\n+\n+            // `let i = &mut <src_expr>`\n+            let iter_decl_stmt = {\n+                let ty = ast::Ty {\n+                    id: cx.next_id(),\n+                    node: ast::ty_infer,\n+                    span: span\n+                };\n+                let local = @ast::Local {\n+                    is_mutbl: false,\n+                    ty: ty,\n+                    pat: @ast::pat {\n+                        id: cx.next_id(),\n+                        node: ast::pat_ident(ast::bind_infer, local_path_1, None),\n+                        span: src_expr.span\n+                    },\n+                    init: Some(mk_expr(cx, src_expr.span,\n+                                       ast::expr_addr_of(ast::m_mutbl, src_expr))),\n+                    id: cx.next_id(),\n+                    span: src_expr.span,\n+                };\n+                let e = @spanned(src_expr.span.lo,\n+                                 src_expr.span.hi,\n+                                 ast::decl_local(local));\n+                @spanned(lo, hi, ast::stmt_decl(e, cx.next_id()))\n+            };\n+\n+            // `None => break;`\n+            let none_arm = {\n+                let break_expr = mk_expr(cx, span, ast::expr_break(None));\n+                let break_stmt = @spanned(lo, hi, ast::stmt_expr(break_expr, cx.next_id()));\n+                let none_block = mk_block(cx, [break_stmt], None, span);\n+                let none_pat = @ast::pat {\n+                    id: cx.next_id(),\n+                    node: ast::pat_ident(ast::bind_infer, none_path, None),\n+                    span: span\n+                };\n+                ast::arm {\n+                    pats: ~[none_pat],\n+                    guard: None,\n+                    body: none_block\n+                }\n+            };\n+\n+            // `Some(<src_pat>) => <src_loop_block>`\n+            let some_arm = {\n+                let pat = @ast::pat {\n+                    id: cx.next_id(),\n+                    node: ast::pat_enum(some_path, Some(~[src_pat])),\n+                    span: src_pat.span\n+                };\n+                ast::arm {\n+                    pats: ~[pat],\n+                    guard: None,\n+                    body: src_loop_block\n+                }\n+            };\n+\n+            // `match i.next() { ... }`\n+            let match_stmt = {\n+                let local_expr = mk_expr(cx, span, ast::expr_path(local_path_2));\n+                let next_call_expr = mk_expr(cx, span,\n+                                             ast::expr_method_call(cx.next_id(),\n+                                                                   local_expr, next_ident,\n+                                                                   ~[], ~[], ast::NoSugar));\n+                let match_expr = mk_expr(cx, span, ast::expr_match(next_call_expr,\n+                                                                   ~[none_arm, some_arm]));\n+                @spanned(lo, hi, ast::stmt_expr(match_expr, cx.next_id()))\n+            };\n+\n+            // `loop { ... }`\n+            let loop_block = {\n+                let loop_body_block = mk_block(cx, [match_stmt], None, span);\n+                let loop_body_expr = mk_expr(cx, span, ast::expr_loop(loop_body_block, None));\n+                let loop_body_stmt = @spanned(lo, hi, ast::stmt_expr(loop_body_expr, cx.next_id()));\n+                mk_block(cx, [iter_decl_stmt,\n+                              loop_body_stmt],\n+                         None, span)\n+            };\n+\n+            (ast::expr_block(loop_block), span)\n+        }\n+\n         _ => orig(e, s, fld)\n     }\n }"}, {"sha": "3016ee660dc62c4a5bc8402f355f325fe39e6b90", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -559,6 +559,11 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n         expr_while(cond, ref body) => {\n             expr_while(fld.fold_expr(cond), fld.fold_block(body))\n         }\n+        expr_for_loop(pat, iter, ref body) => {\n+            expr_for_loop(fld.fold_pat(pat),\n+                          fld.fold_expr(iter),\n+                          fld.fold_block(body))\n+        }\n         expr_loop(ref body, opt_ident) => {\n             expr_loop(\n                 fld.fold_block(body),"}, {"sha": "0bf87f10597ba29412dcfbb58779953a515af7c9", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -28,6 +28,7 @@ pub fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n       | ast::expr_block(_)\n       | ast::expr_while(*)\n       | ast::expr_loop(*)\n+      | ast::expr_for_loop(*)\n       | ast::expr_call(_, _, ast::DoSugar)\n       | ast::expr_call(_, _, ast::ForSugar)\n       | ast::expr_method_call(_, _, _, _, _, ast::DoSugar)"}, {"sha": "6ff4b91ec97c8cf2fd894459dad99b53b65d5512", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -29,7 +29,7 @@ use ast::{expr_method_call, expr_paren, expr_path, expr_repeat};\n use ast::{expr_ret, expr_self, expr_struct, expr_tup, expr_unary};\n use ast::{expr_vec, expr_vstore, expr_vstore_mut_box};\n use ast::{expr_vstore_slice, expr_vstore_box};\n-use ast::{expr_vstore_mut_slice, expr_while, extern_fn, Field, fn_decl};\n+use ast::{expr_vstore_mut_slice, expr_while, expr_for_loop, extern_fn, Field, fn_decl};\n use ast::{expr_vstore_uniq, Onceness, Once, Many};\n use ast::{foreign_item, foreign_item_static, foreign_item_fn, foreign_mod};\n use ast::{ident, impure_fn, inherited, item, item_, item_static};\n@@ -1622,6 +1622,8 @@ impl Parser {\n             hi = self.span.hi;\n         } else if self.eat_keyword(keywords::If) {\n             return self.parse_if_expr();\n+        } else if self.eat_keyword(keywords::ForEach) {\n+            return self.parse_for_expr();\n         } else if self.eat_keyword(keywords::For) {\n             return self.parse_sugary_call_expr(lo, ~\"for\", ForSugar,\n                                                expr_loop_body);\n@@ -2323,6 +2325,21 @@ impl Parser {\n         }\n     }\n \n+    // parse a 'foreach' .. 'in' expression ('foreach' token already eaten)\n+    pub fn parse_for_expr(&self) -> @expr {\n+        // Parse: `foreach <src_pat> in <src_expr> <src_loop_block>`\n+\n+        let lo = self.last_span.lo;\n+        let pat = self.parse_pat();\n+        self.expect_keyword(keywords::In);\n+        let expr = self.parse_expr();\n+        let loop_block = self.parse_block();\n+        let hi = self.span.hi;\n+\n+        self.mk_expr(lo, hi, expr_for_loop(pat, expr, loop_block))\n+    }\n+\n+\n     // parse a 'for' or 'do'.\n     // the 'for' and 'do' expressions parse as calls, but look like\n     // function calls followed by a closure expression."}, {"sha": "a0e5192ab3a101f1fd7119733fb007cd9f753ea8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -1228,6 +1228,14 @@ pub fn print_expr(s: @ps, expr: &ast::expr) {\n         space(s.s);\n         print_block(s, blk);\n       }\n+      ast::expr_for_loop(pat, iter, ref blk) => {\n+        head(s, \"foreach\");\n+        print_pat(s, pat);\n+        word_space(s, \"in\");\n+        print_expr(s, iter);\n+        space(s.s);\n+        print_block(s, blk);\n+      }\n       ast::expr_loop(ref blk, opt_ident) => {\n         for opt_ident.iter().advance |ident| {\n             word(s.s, \"'\");"}, {"sha": "990aaa99b7862b916877c89d20a5a1df387aaee8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29e9fb60b46a66bd55643981edbec881c5def82/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c29e9fb60b46a66bd55643981edbec881c5def82", "patch": "@@ -512,6 +512,11 @@ pub fn visit_expr<E:Clone>(ex: @expr, (e, v): (E, vt<E>)) {\n             (v.visit_expr)(x, (e.clone(), v));\n             (v.visit_block)(b, (e.clone(), v));\n         }\n+        expr_for_loop(pat, iter, ref b) => {\n+            (v.visit_pat)(pat, (e.clone(), v));\n+            (v.visit_expr)(iter, (e.clone(), v));\n+            (v.visit_block)(b, (e.clone(), v));\n+        }\n         expr_loop(ref b, _) => (v.visit_block)(b, (e.clone(), v)),\n         expr_match(x, ref arms) => {\n             (v.visit_expr)(x, (e.clone(), v));"}]}