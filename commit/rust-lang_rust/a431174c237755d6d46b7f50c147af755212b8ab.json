{"sha": "a431174c237755d6d46b7f50c147af755212b8ab", "node_id": "C_kwDOAAsO6NoAKGE0MzExNzRjMjM3NzU1ZDZkNDZiN2Y1MGMxNDdhZjc1NTIxMmI4YWI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-08T06:00:15Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-11T20:45:51Z"}, "message": "add tainted_by_errors to mir::Body", "tree": {"sha": "de52a63603135ab8b0747c6240b245c7086752d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de52a63603135ab8b0747c6240b245c7086752d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a431174c237755d6d46b7f50c147af755212b8ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a431174c237755d6d46b7f50c147af755212b8ab", "html_url": "https://github.com/rust-lang/rust/commit/a431174c237755d6d46b7f50c147af755212b8ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a431174c237755d6d46b7f50c147af755212b8ab/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c2bb51c0b82bed1322a18566fb659c1846d136", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c2bb51c0b82bed1322a18566fb659c1846d136", "html_url": "https://github.com/rust-lang/rust/commit/29c2bb51c0b82bed1322a18566fb659c1846d136"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "12a8b8c6d77905a745870cb529f08f1fc9b337e9", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=a431174c237755d6d46b7f50c147af755212b8ab", "patch": "@@ -120,7 +120,7 @@ impl<'mir, 'tcx> Qualifs<'mir, 'tcx> {\n     fn in_return_place(\n         &mut self,\n         ccx: &'mir ConstCx<'mir, 'tcx>,\n-        error_occured: Option<ErrorReported>,\n+        tainted_by_errors: Option<ErrorReported>,\n     ) -> ConstQualifs {\n         // Find the `Return` terminator if one exists.\n         //\n@@ -134,7 +134,9 @@ impl<'mir, 'tcx> Qualifs<'mir, 'tcx> {\n             .map(|(bb, _)| bb);\n \n         let return_block = match return_block {\n-            None => return qualifs::in_any_value_of_ty(ccx, ccx.body.return_ty(), error_occured),\n+            None => {\n+                return qualifs::in_any_value_of_ty(ccx, ccx.body.return_ty(), tainted_by_errors);\n+            }\n             Some(bb) => bb,\n         };\n \n@@ -166,7 +168,7 @@ impl<'mir, 'tcx> Qualifs<'mir, 'tcx> {\n             needs_non_const_drop: self.needs_non_const_drop(ccx, RETURN_PLACE, return_loc),\n             has_mut_interior: self.has_mut_interior(ccx, RETURN_PLACE, return_loc),\n             custom_eq,\n-            error_occured,\n+            tainted_by_errors,\n         }\n     }\n }"}, {"sha": "c3fa98b000f4a3cacedd51599e423c9851b01dec", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=a431174c237755d6d46b7f50c147af755212b8ab", "patch": "@@ -17,14 +17,14 @@ use super::ConstCx;\n pub fn in_any_value_of_ty<'tcx>(\n     cx: &ConstCx<'_, 'tcx>,\n     ty: Ty<'tcx>,\n-    error_occured: Option<ErrorReported>,\n+    tainted_by_errors: Option<ErrorReported>,\n ) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n         needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n         needs_non_const_drop: NeedsNonConstDrop::in_any_value_of_ty(cx, ty),\n         custom_eq: CustomEq::in_any_value_of_ty(cx, ty),\n-        error_occured,\n+        tainted_by_errors,\n     }\n }\n "}, {"sha": "92d1f5bceefe41eaef7b01efc4c826adc1e0e4ca", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=a431174c237755d6d46b7f50c147af755212b8ab", "patch": "@@ -974,6 +974,7 @@ pub fn promote_candidates<'tcx>(\n             vec![],\n             body.span,\n             body.generator_kind(),\n+            body.tainted_by_errors,\n         );\n \n         let promoter = Promoter {"}, {"sha": "0688d7d2569f55248a5b1a39832baad327a8e88c", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a431174c237755d6d46b7f50c147af755212b8ab", "patch": "@@ -13,6 +13,7 @@ use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex};\n \n+use rustc_errors::ErrorReported;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, GeneratorKind};\n@@ -284,6 +285,8 @@ pub struct Body<'tcx> {\n \n     predecessor_cache: PredecessorCache,\n     is_cyclic: GraphIsCyclicCache,\n+\n+    pub tainted_by_errors: Option<ErrorReported>,\n }\n \n impl<'tcx> Body<'tcx> {\n@@ -297,6 +300,7 @@ impl<'tcx> Body<'tcx> {\n         var_debug_info: Vec<VarDebugInfo<'tcx>>,\n         span: Span,\n         generator_kind: Option<GeneratorKind>,\n+        tainted_by_errors: Option<ErrorReported>,\n     ) -> Self {\n         // We need `arg_count` locals, and one for the return place.\n         assert!(\n@@ -329,6 +333,7 @@ impl<'tcx> Body<'tcx> {\n             is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n+            tainted_by_errors,\n         };\n         body.is_polymorphic = body.has_param_types_or_consts();\n         body\n@@ -356,6 +361,7 @@ impl<'tcx> Body<'tcx> {\n             is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n+            tainted_by_errors: None,\n         };\n         body.is_polymorphic = body.has_param_types_or_consts();\n         body"}, {"sha": "6e2b060e7ddcf3789e1abf9107ebd0fb629c81e3", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=a431174c237755d6d46b7f50c147af755212b8ab", "patch": "@@ -228,7 +228,7 @@ pub struct ConstQualifs {\n     pub needs_drop: bool,\n     pub needs_non_const_drop: bool,\n     pub custom_eq: bool,\n-    pub error_occured: Option<ErrorReported>,\n+    pub tainted_by_errors: Option<ErrorReported>,\n }\n \n /// After we borrow check a closure, we are left with various"}, {"sha": "39efc006d9d0fa4bda67f3d1ed1d055f044f5307", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=a431174c237755d6d46b7f50c147af755212b8ab", "patch": "@@ -253,6 +253,7 @@ TrivialTypeFoldableAndLiftImpls! {\n     crate::ty::UniverseIndex,\n     crate::ty::Variance,\n     ::rustc_span::Span,\n+    ::rustc_errors::ErrorReported,\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "10807d432764341c782caecf3984da222c3da9e0", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=a431174c237755d6d46b7f50c147af755212b8ab", "patch": "@@ -104,8 +104,8 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n     let span_with_body = span_with_body.unwrap_or_else(|| tcx.hir().span(id));\n \n     tcx.infer_ctxt().enter(|infcx| {\n-        let body = if let Some(ErrorReported) = typeck_results.tainted_by_errors {\n-            build::construct_error(&infcx, def, id, body_id, body_owner_kind)\n+        let body = if let Some(error_reported) = typeck_results.tainted_by_errors {\n+            build::construct_error(&infcx, def, id, body_id, body_owner_kind, error_reported)\n         } else if body_owner_kind.is_fn_or_closure() {\n             // fetch the fully liberated fn signature (that is, all bound\n             // types/lifetimes replaced)\n@@ -715,6 +715,7 @@ fn construct_error<'a, 'tcx>(\n     hir_id: hir::HirId,\n     body_id: hir::BodyId,\n     body_owner_kind: hir::BodyOwnerKind,\n+    err: ErrorReported,\n ) -> Body<'tcx> {\n     let tcx = infcx.tcx;\n     let span = tcx.hir().span(hir_id);\n@@ -769,6 +770,7 @@ fn construct_error<'a, 'tcx>(\n         vec![],\n         span,\n         generator_kind,\n+        Some(err),\n     );\n     body.generator.as_mut().map(|gen| gen.yield_ty = Some(ty));\n     body\n@@ -857,6 +859,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.var_debug_info,\n             self.fn_span,\n             self.generator_kind,\n+            self.typeck_results.tainted_by_errors,\n         )\n     }\n "}, {"sha": "0d314a109bac72c437f64e3be6251cc9905db8db", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=a431174c237755d6d46b7f50c147af755212b8ab", "patch": "@@ -145,6 +145,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             Default::default(),\n             body.span,\n             body.generator_kind(),\n+            body.tainted_by_errors,\n         );\n \n         // FIXME(oli-obk, eddyb) Optimize locals (or even local paths) to hold"}, {"sha": "e7d5bab8fd9d45e6bce054f0d7c75e8f4e754ee8", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=a431174c237755d6d46b7f50c147af755212b8ab", "patch": "@@ -252,8 +252,11 @@ fn mir_promoted<'tcx>(\n     // Ensure that we compute the `mir_const_qualif` for constants at\n     // this point, before we steal the mir-const result.\n     // Also this means promotion can rely on all const checks having been done.\n-    let _ = tcx.mir_const_qualif_opt_const_arg(def);\n+    let const_qualifs = tcx.mir_const_qualif_opt_const_arg(def);\n     let mut body = tcx.mir_const(def).steal();\n+    if let Some(error_reported) = const_qualifs.tainted_by_errors {\n+        body.tainted_by_errors = Some(error_reported);\n+    }\n \n     let mut required_consts = Vec::new();\n     let mut required_consts_visitor = RequiredConstsVisitor::new(&mut required_consts);\n@@ -358,13 +361,7 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n         return tcx.mir_drops_elaborated_and_const_checked(def);\n     }\n \n-    // (Mir-)Borrowck uses `mir_promoted`, so we have to force it to\n-    // execute before we can steal.\n-    if let Some(param_did) = def.const_param_did {\n-        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n-    } else {\n-        tcx.ensure().mir_borrowck(def.did);\n-    }\n+    let mir_borrowck = tcx.mir_borrowck_opt_const_arg(def);\n \n     let is_fn_like = tcx.hir().get_by_def_id(def.did).fn_kind().is_some();\n     if is_fn_like {\n@@ -379,6 +376,9 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n \n     let (body, _) = tcx.mir_promoted(def);\n     let mut body = body.steal();\n+    if let Some(error_reported) = mir_borrowck.tainted_by_errors {\n+        body.tainted_by_errors = Some(error_reported);\n+    }\n \n     // IMPORTANT\n     pm::run_passes(tcx, &mut body, &[&remove_false_edges::RemoveFalseEdges]);\n@@ -544,15 +544,13 @@ fn promoted_mir<'tcx>(\n         return tcx.arena.alloc(IndexVec::new());\n     }\n \n-    if let Some(param_did) = def.const_param_did {\n-        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n-    } else {\n-        tcx.ensure().mir_borrowck(def.did);\n-    }\n-    let (_, promoted) = tcx.mir_promoted(def);\n-    let mut promoted = promoted.steal();\n+    let tainted_by_errors = tcx.mir_borrowck_opt_const_arg(def).tainted_by_errors;\n+    let mut promoted = tcx.mir_promoted(def).1.steal();\n \n     for body in &mut promoted {\n+        if let Some(error_reported) = tainted_by_errors {\n+            body.tainted_by_errors = Some(error_reported);\n+        }\n         run_post_borrowck_cleanup_passes(tcx, body);\n     }\n "}, {"sha": "a4927c467cfc3116357a4af30caec8e19ac4635b", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a431174c237755d6d46b7f50c147af755212b8ab/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=a431174c237755d6d46b7f50c147af755212b8ab", "patch": "@@ -235,6 +235,8 @@ fn new_body<'tcx>(\n         vec![],\n         span,\n         None,\n+        // FIXME(compiler-errors): is this correct?\n+        None,\n     )\n }\n "}]}