{"sha": "1a96f31f763142942adf7f15421b2d59494c2af4", "node_id": "C_kwDOAAsO6NoAKDFhOTZmMzFmNzYzMTQyOTQyYWRmN2YxNTQyMWIyZDU5NDk0YzJhZjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-06T23:19:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-06T23:19:33Z"}, "message": "Rollup merge of #100130 - compiler-errors:erroneous-return-span, r=lcnr\n\nAvoid pointing out `return` span if it has nothing to do with type error\n\nThis code:\n\n```rust\nfn f(_: String) {}\n\nfn main() {\n    let x = || {\n        if true {\n            return ();\n        }\n        f(\"\");\n    };\n}\n```\n\nEmits this:\n```\n   Compiling playground v0.0.1 (/playground)\nerror[E0308]: mismatched types\n --> src/main.rs:8:11\n  |\n8 |         f(\"\");\n  |           ^^- help: try using a conversion method: `.to_string()`\n  |           |\n  |           expected struct `String`, found `&str`\n  |\nnote: return type inferred to be `String` here\n --> src/main.rs:6:20\n  |\n6 |             return ();\n  |                    ^^\n```\n\nSpecifically, that note has nothing to do with the type error in question. This is because the change implemented in #84244 tries to point out the `return` span on _any_ type coercion error within a closure that happens after a `return` statement, regardless of if the error has anything to do with it.\n\nThis is really easy to trigger -- just needs a closure (or an `async`) and an early return (or any other form, e.g. `?` operator suffices) -- and super distracting in production codebases. I'm letting #84128 regress because that issue is much harder to fix correctly, and I can re-open that issue after this lands.\n\nAs a drive-by, I added a `resolve_vars_if_possible` to the coercion error logic, which leads to some error improvements. Unrelated to the issue above, though.", "tree": {"sha": "7d6dced1363253f64a7f34d51152f7d40b1677f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d6dced1363253f64a7f34d51152f7d40b1677f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a96f31f763142942adf7f15421b2d59494c2af4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi7vcFCRBK7hj4Ov3rIwAAP60IAAVslElMSd3VHq4VPlb+5+r+\nqu8SZ7EigfTjyGP7IIgi4ubvD0qOkIz2KXaeIEzGYpyuRRZ5QRiySOd7Co4umnij\nLa1xNkdGQA3BDuau9EV10O3t1/d6G2NDO1kEckJOOHTWwL9s2Ul2Ts6XIi3qeyYW\ndvglWD5vxYX52Ul91OqAPL3a7hJoNXneBYt0Zi9eCSvQmQGh0vb+uF5yXibvb+Q5\nvzbUVUCQN+6+aTzeg3afvdp160gQWHztG9gA8cATAh224k9j8eaC+lE3Z6cWkEhq\n0uX9gICgsyvh5N1iYqeExUPezd09otuVDP/K5pie+NzLC9MLLCPTlFZGsexACX0=\n=OvCx\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d6dced1363253f64a7f34d51152f7d40b1677f5\nparent 879c17f3f9a460e8bb28becead81111ee2cadd97\nparent 1f463ac40735529abd7343bb8a12a1888bb623df\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659827973 +0200\ncommitter GitHub <noreply@github.com> 1659827973 +0200\n\nRollup merge of #100130 - compiler-errors:erroneous-return-span, r=lcnr\n\nAvoid pointing out `return` span if it has nothing to do with type error\n\nThis code:\n\n```rust\nfn f(_: String) {}\n\nfn main() {\n    let x = || {\n        if true {\n            return ();\n        }\n        f(\"\");\n    };\n}\n```\n\nEmits this:\n```\n   Compiling playground v0.0.1 (/playground)\nerror[E0308]: mismatched types\n --> src/main.rs:8:11\n  |\n8 |         f(\"\");\n  |           ^^- help: try using a conversion method: `.to_string()`\n  |           |\n  |           expected struct `String`, found `&str`\n  |\nnote: return type inferred to be `String` here\n --> src/main.rs:6:20\n  |\n6 |             return ();\n  |                    ^^\n```\n\nSpecifically, that note has nothing to do with the type error in question. This is because the change implemented in #84244 tries to point out the `return` span on _any_ type coercion error within a closure that happens after a `return` statement, regardless of if the error has anything to do with it.\n\nThis is really easy to trigger -- just needs a closure (or an `async`) and an early return (or any other form, e.g. `?` operator suffices) -- and super distracting in production codebases. I'm letting #84128 regress because that issue is much harder to fix correctly, and I can re-open that issue after this lands.\n\nAs a drive-by, I added a `resolve_vars_if_possible` to the coercion error logic, which leads to some error improvements. Unrelated to the issue above, though.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a96f31f763142942adf7f15421b2d59494c2af4", "html_url": "https://github.com/rust-lang/rust/commit/1a96f31f763142942adf7f15421b2d59494c2af4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a96f31f763142942adf7f15421b2d59494c2af4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "879c17f3f9a460e8bb28becead81111ee2cadd97", "url": "https://api.github.com/repos/rust-lang/rust/commits/879c17f3f9a460e8bb28becead81111ee2cadd97", "html_url": "https://github.com/rust-lang/rust/commit/879c17f3f9a460e8bb28becead81111ee2cadd97"}, {"sha": "1f463ac40735529abd7343bb8a12a1888bb623df", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f463ac40735529abd7343bb8a12a1888bb623df", "html_url": "https://github.com/rust-lang/rust/commit/1f463ac40735529abd7343bb8a12a1888bb623df"}], "stats": {"total": 197, "additions": 159, "deletions": 38}, "files": [{"sha": "21d0a7869d68ea570df88c6e42047cb9ae3904ee", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -1493,6 +1493,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     // type)\n                     (self.final_ty.unwrap_or(self.expected_ty), expression_ty)\n                 };\n+                let (expected, found) = fcx.resolve_vars_if_possible((expected, found));\n \n                 let mut err;\n                 let mut unsized_return = false;\n@@ -1695,9 +1696,30 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             );\n         }\n \n-        if let (Some(sp), Some(fn_output)) = (fcx.ret_coercion_span.get(), fn_output) {\n+        let ret_coercion_span = fcx.ret_coercion_span.get();\n+\n+        if let Some(sp) = ret_coercion_span\n+            // If the closure has an explicit return type annotation, or if\n+            // the closure's return type has been inferred from outside\n+            // requirements (such as an Fn* trait bound), then a type error\n+            // may occur at the first return expression we see in the closure\n+            // (if it conflicts with the declared return type). Skip adding a\n+            // note in this case, since it would be incorrect.\n+            && !fcx.return_type_pre_known\n+        {\n+            err.span_note(\n+                sp,\n+                &format!(\n+                    \"return type inferred to be `{}` here\",\n+                    expected\n+                ),\n+            );\n+        }\n+\n+        if let (Some(sp), Some(fn_output)) = (ret_coercion_span, fn_output) {\n             self.add_impl_trait_explanation(&mut err, cause, fcx, expected, sp, fn_output);\n         }\n+\n         err\n     }\n "}, {"sha": "0595b9a73bed56ce5c733974686e89ab95e0c5ef", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -45,7 +45,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n-        self.report_closure_inferred_return_type(err, expected);\n     }\n \n     // Requires that the two types unify, and prints an error message if\n@@ -1418,25 +1417,4 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => false,\n         }\n     }\n-\n-    // Report the type inferred by the return statement.\n-    fn report_closure_inferred_return_type(&self, err: &mut Diagnostic, expected: Ty<'tcx>) {\n-        if let Some(sp) = self.ret_coercion_span.get()\n-            // If the closure has an explicit return type annotation, or if\n-            // the closure's return type has been inferred from outside\n-            // requirements (such as an Fn* trait bound), then a type error\n-            // may occur at the first return expression we see in the closure\n-            // (if it conflicts with the declared return type). Skip adding a\n-            // note in this case, since it would be incorrect.\n-            && !self.return_type_pre_known\n-        {\n-            err.span_note(\n-                sp,\n-                &format!(\n-                    \"return type inferred to be `{}` here\",\n-                    self.resolve_vars_if_possible(expected)\n-                ),\n-            );\n-        }\n-    }\n }"}, {"sha": "59607afec8f8da20f901af644eba78a8afe679c3", "filename": "src/test/ui/closures/issue-84128.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -6,11 +6,6 @@ LL |         Foo(())\n    |         |\n    |         arguments to this struct are incorrect\n    |\n-note: return type inferred to be `{integer}` here\n-  --> $DIR/issue-84128.rs:10:20\n-   |\n-LL |             return Foo(0);\n-   |                    ^^^^^^\n note: tuple struct defined here\n   --> $DIR/issue-84128.rs:5:8\n    |"}, {"sha": "d2bba88211ea8c455c7915eb975c7c9fffc698a1", "filename": "src/test/ui/expr/if/if-branch-types.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.stderr?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -5,6 +5,11 @@ LL |     let x = if true { 10i32 } else { 10u32 };\n    |                       -----          ^^^^^ expected `i32`, found `u32`\n    |                       |\n    |                       expected because of this\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     let x = if true { 10i32 } else { 10i32 };\n+   |                                        ~~~\n \n error: aborting due to previous error\n "}, {"sha": "f1fffdb1e7ef8d6443b84aef1cc8e73d1c7be692", "filename": "src/test/ui/expr/if/if-else-type-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.stderr?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -10,6 +10,11 @@ LL | |         2u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         2i32\n+   |          ~~~\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:8:38\n@@ -18,6 +23,11 @@ LL |     let _ = if true { 42i32 } else { 42u32 };\n    |                       -----          ^^^^^ expected `i32`, found `u32`\n    |                       |\n    |                       expected because of this\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     let _ = if true { 42i32 } else { 42i32 };\n+   |                                        ~~~\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:13:9"}, {"sha": "b98da1ed8be6e50b6999bf36ab44742706b8fdbe", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -11,6 +11,12 @@ note: return type inferred to be `Result<{integer}, _>` here\n    |\n LL |             return Ok(6);\n    |                    ^^^^^\n+help: try wrapping the expression in a variant of `Result`\n+   |\n+LL |         Ok(5)\n+   |         +++ +\n+LL |         Err(5)\n+   |         ++++ +\n \n error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:7:5: 7:7] as Generator>::Return == i32`\n   --> $DIR/type-mismatch-signature-deduction.rs:5:13"}, {"sha": "d4a3495515cf14516f1dce084cd539001e450ead", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -12,10 +12,15 @@ error[E0308]: mismatched types\n   --> $DIR/equality.rs:15:5\n    |\n LL | fn two(x: bool) -> impl Foo {\n-   |                    -------- expected `_` because of return type\n+   |                    -------- expected `i32` because of return type\n ...\n LL |     0_u32\n    |     ^^^^^ expected `i32`, found `u32`\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     0_i32\n+   |       ~~~\n \n error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:24:11"}, {"sha": "d6f5a1ac25b641e5cc653d68404c694976c92bd2", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:36:5\n    |\n LL | fn can() -> impl NotObjectSafe {\n-   |             ------------------ expected `_` because of return type\n+   |             ------------------ expected `A` because of return type\n ...\n LL |     B\n    |     ^ expected struct `A`, found struct `B`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:43:5\n    |\n LL | fn cat() -> impl ObjectSafe {\n-   |             --------------- expected `_` because of return type\n+   |             --------------- expected `A` because of return type\n ...\n LL |     B\n    |     ^ expected struct `A`, found struct `B`"}, {"sha": "11c1072f02ccc2c85d18dd00359d05f853fd48bd", "filename": "src/test/ui/impl-trait/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 61, "deletions": 6, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -2,28 +2,43 @@ error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:5:5\n    |\n LL | fn foo() -> impl std::fmt::Display {\n-   |             ---------------------- expected `_` because of return type\n+   |             ---------------------- expected `i32` because of return type\n ...\n LL |     1u32\n    |     ^^^^ expected `i32`, found `u32`\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     1i32\n+   |      ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:12:16\n    |\n LL | fn bar() -> impl std::fmt::Display {\n-   |             ---------------------- expected `_` because of return type\n+   |             ---------------------- expected `i32` because of return type\n ...\n LL |         return 1u32;\n    |                ^^^^ expected `i32`, found `u32`\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         return 1i32;\n+   |                 ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:20:9\n    |\n LL | fn baz() -> impl std::fmt::Display {\n-   |             ---------------------- expected `_` because of return type\n+   |             ---------------------- expected `i32` because of return type\n ...\n LL |         1u32\n    |         ^^^^ expected `i32`, found `u32`\n+   |\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n+   |\n+LL |     }.try_into().unwrap()\n+   |      ++++++++++++++++++++\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:28:9\n@@ -36,36 +51,56 @@ LL | |         1u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         1i32\n+   |          ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:35:14\n    |\n LL | fn bat() -> impl std::fmt::Display {\n-   |             ---------------------- expected `_` because of return type\n+   |             ---------------------- expected `i32` because of return type\n ...\n LL |         _ => 1u32,\n    |              ^^^^ expected `i32`, found `u32`\n+   |\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n+   |\n+LL |     }.try_into().unwrap()\n+   |      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:40:5\n    |\n LL |   fn can() -> impl std::fmt::Display {\n-   |               ---------------------- expected `_` because of return type\n+   |               ---------------------- expected `i32` because of return type\n LL | /     match 13 {\n LL | |         0 => return 0i32,\n LL | |         1 => 1u32,\n LL | |         _ => 2u32,\n LL | |     }\n    | |_____^ expected `i32`, found `u32`\n+   |\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n+   |\n+LL |     }.try_into().unwrap()\n+   |      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:53:13\n    |\n LL | fn cat() -> impl std::fmt::Display {\n-   |             ---------------------- expected `_` because of return type\n+   |             ---------------------- expected `i32` because of return type\n ...\n LL |             1u32\n    |             ^^^^ expected `i32`, found `u32`\n+   |\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n+   |\n+LL |     }.try_into().unwrap()\n+   |      ++++++++++++++++++++\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:61:14\n@@ -78,6 +113,11 @@ LL | |         1 => 1u32,\n LL | |         _ => 2u32,\n LL | |     }\n    | |_____- `match` arms have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         1 => 1i32,\n+   |               ~~~\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:97:9\n@@ -90,6 +130,11 @@ LL | |         1u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         1i32\n+   |          ~~~\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:66:13\n@@ -125,6 +170,11 @@ LL | |         1 => 1u32,\n LL | |         _ => 2u32,\n LL | |     }\n    | |_____- `match` arms have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         1 => 1i32,\n+   |               ~~~\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:77:13\n@@ -164,6 +214,11 @@ LL | |         1u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         1i32\n+   |          ~~~\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:85:13"}, {"sha": "f2ba610e2d1f62ac15c37ae854113949196d076f", "filename": "src/test/ui/mismatched_types/dont-point-return-on-E0308.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.rs?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -0,0 +1,18 @@\n+// edition:2021\n+\n+async fn f(_: &()) {}\n+//~^ NOTE function defined here\n+//~| NOTE\n+// Second note is the span of the underlined argument, I think...\n+\n+fn main() {\n+    (|| async {\n+        Err::<(), ()>(())?;\n+        f(());\n+        //~^ ERROR mismatched types\n+        //~| NOTE arguments to this function are incorrect\n+        //~| NOTE expected `&()`, found `()`\n+        //~| HELP consider borrowing here\n+        Ok::<(), ()>(())\n+    })();\n+}"}, {"sha": "13942682d289c23842e4229ad77df791d3206917", "filename": "src/test/ui/mismatched_types/dont-point-return-on-E0308.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/dont-point-return-on-E0308.rs:11:11\n+   |\n+LL |         f(());\n+   |         - ^^\n+   |         | |\n+   |         | expected `&()`, found `()`\n+   |         | help: consider borrowing here: `&()`\n+   |         arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/dont-point-return-on-E0308.rs:3:10\n+   |\n+LL | async fn f(_: &()) {}\n+   |          ^ ------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9157566e3a79bfa7e150a2ac1e88db723a39b2b3", "filename": "src/test/ui/mismatched_types/issue-84976.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-84976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-84976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-84976.stderr?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -3,6 +3,11 @@ error[E0308]: mismatched types\n    |\n LL |     length = { foo(&length) };\n    |                ^^^^^^^^^^^^ expected `u32`, found `i32`\n+   |\n+help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit\n+   |\n+LL |     length = { foo(&length).try_into().unwrap() };\n+   |                            ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-84976.rs:17:14"}, {"sha": "f78f1d822bf608849b0343cfa8189c53ea035888", "filename": "src/test/ui/reify-intrinsic.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.stderr?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -23,6 +23,9 @@ LL |         std::intrinsics::unlikely,\n    |\n    = note: expected fn item `extern \"rust-intrinsic\" fn(_) -> _ {likely}`\n               found fn item `extern \"rust-intrinsic\" fn(_) -> _ {unlikely}`\n+   = note: different `fn` items always have unique types, even if their signatures are the same\n+   = help: change the expected type to be function pointer `extern \"rust-intrinsic\" fn(bool) -> bool`\n+   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `likely as extern \"rust-intrinsic\" fn(bool) -> bool`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "66886db6eb9465762b89014697cee1bafcd6cc95", "filename": "src/test/ui/type-alias-impl-trait/issue-74280.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a96f31f763142942adf7f15421b2d59494c2af4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr?ref=1a96f31f763142942adf7f15421b2d59494c2af4", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-74280.rs:9:5\n    |\n LL | fn test() -> Test {\n-   |              ---- expected `_` because of return type\n+   |              ---- expected `()` because of return type\n LL |     let y = || -> Test { () };\n LL |     7\n    |     ^ expected `()`, found integer"}]}