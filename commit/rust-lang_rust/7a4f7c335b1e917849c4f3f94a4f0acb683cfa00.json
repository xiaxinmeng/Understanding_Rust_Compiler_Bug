{"sha": "7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNGY3YzMzNWIxZTkxNzg0OWM0ZjNmOTRhNGYwYWNiNjgzY2ZhMDA=", "commit": {"author": {"name": "Enrico Schmitz", "email": "enrico@schmitz.link", "date": "2017-03-31T22:14:04Z"}, "committer": {"name": "Enrico Schmitz", "email": "es@mdtm.de", "date": "2017-03-31T22:14:04Z"}, "message": "Remove unused cs parameter for is_macro and friends", "tree": {"sha": "33dccdd9130aecc3919bbe82e17904ed74344c93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33dccdd9130aecc3919bbe82e17904ed74344c93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "html_url": "https://github.com/rust-lang/rust/commit/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/comments", "author": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aef64dfe8ecafe77671a48cea5e666481332992", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aef64dfe8ecafe77671a48cea5e666481332992", "html_url": "https://github.com/rust-lang/rust/commit/8aef64dfe8ecafe77671a48cea5e666481332992"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "1c4ac3c6261c40128e942e21687be1e291a6a53e", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -215,7 +215,7 @@ fn is_relevant_expr(tcx: ty::TyCtxt, tables: &ty::TypeckTables, expr: &Expr) ->\n }\n \n fn check_attrs(cx: &LateContext, span: Span, name: &Name, attrs: &[Attribute]) {\n-    if in_macro(cx, span) {\n+    if in_macro(span) {\n         return;\n     }\n "}, {"sha": "cabffa8e9697578e4954b336138f2826d896d39f", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                         if let Some(ref ex) = block.expr {\n                             // don't dig into the expression here, just suggest that they remove\n                             // the block\n-                            if in_macro(cx, expr.span) || differing_macro_contexts(expr.span, ex.span) {\n+                            if in_macro(expr.span) || differing_macro_contexts(expr.span, ex.span) {\n                                 return;\n                             }\n                             span_help_and_lint(cx,\n@@ -97,7 +97,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                         }\n                     } else {\n                         let span = block.expr.as_ref().map_or_else(|| block.stmts[0].span, |e| e.span);\n-                        if in_macro(cx, span) || differing_macro_contexts(expr.span, span) {\n+                        if in_macro(span) || differing_macro_contexts(expr.span, span) {\n                             return;\n                         }\n                         // move block higher"}, {"sha": "fd357feab6b7e713f1e6914b01885d8108f52c1d", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -93,7 +93,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n \n     fn run(&mut self, e: &'v Expr) -> Result<Bool, String> {\n         // prevent folding of `cfg!` macros and the like\n-        if !in_macro(self.cx, e.span) {\n+        if !in_macro(e.span) {\n             match e.node {\n                 ExprUnary(UnNot, ref inner) => return Ok(Bool::Not(box self.run(inner)?)),\n                 ExprBinary(binop, ref lhs, ref rhs) => {\n@@ -394,7 +394,7 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, e: &'tcx Expr) {\n-        if in_macro(self.cx, e.span) {\n+        if in_macro(e.span) {\n             return;\n         }\n         match e.node {"}, {"sha": "239a24b6b3c03a2742bc07cba898a81d6e561704", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -78,7 +78,7 @@ impl LintPass for CollapsibleIf {\n \n impl EarlyLintPass for CollapsibleIf {\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &ast::Expr) {\n-        if !in_macro(cx, expr.span) {\n+        if !in_macro(expr.span) {\n             check_if(cx, expr)\n         }\n     }\n@@ -104,7 +104,7 @@ fn check_collapsible_maybe_if_let(cx: &EarlyContext, else_: &ast::Expr) {\n     if_let_chain! {[\n         let ast::ExprKind::Block(ref block) = else_.node,\n         let Some(ref else_) = expr_block(block),\n-        !in_macro(cx, else_.span),\n+        !in_macro(else_.span),\n     ], {\n         match else_.node {\n             ast::ExprKind::If(..) | ast::ExprKind::IfLet(..) => {"}, {"sha": "730c0ac963309aa4f379fcdb8a0b92a2d6a2c97f", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -111,7 +111,7 @@ impl LintPass for CopyAndPaste {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if !in_macro(cx, expr.span) {\n+        if !in_macro(expr.span) {\n             // skip ifs directly in else, it will be checked in the parent if\n             if let Some(&Expr { node: ExprIf(_, _, Some(ref else_expr)), .. }) = get_parent_expr(cx, expr) {\n                 if else_expr.id == expr.id {"}, {"sha": "ed836af4403bb07b1545c7fb0e17630878bd2ead", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -42,7 +42,7 @@ impl LintPass for CyclomaticComplexity {\n \n impl CyclomaticComplexity {\n     fn check<'a, 'tcx: 'a>(&mut self, cx: &'a LateContext<'a, 'tcx>, body: &'tcx Body, span: Span) {\n-        if in_macro(cx, span) {\n+        if in_macro(span) {\n             return;\n         }\n "}, {"sha": "16a2e0217239ff76492ea4183796092c1a156401", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -228,7 +228,7 @@ impl EarlyLintPass for EnumVariantNames {\n         let item_name = item.ident.name.as_str();\n         let item_name_chars = item_name.chars().count();\n         let item_camel = to_camel_case(&item_name);\n-        if !in_macro(cx, item.span) {\n+        if !in_macro(item.span) {\n             if let Some(&(ref mod_name, ref mod_camel)) = self.modules.last() {\n                 // constants don't have surrounding modules\n                 if !mod_camel.is_empty() {"}, {"sha": "bcbb8b1cccd2a75a275394e927ca56409f3a72a4", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -40,7 +40,7 @@ impl LintPass for Pass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let Some(span) = is_expn_of(cx, expr.span, \"format\") {\n+        if let Some(span) = is_expn_of(expr.span, \"format\") {\n             match expr.node {\n                 // `format!(\"{}\", foo)` expansion\n                 ExprCall(ref fun, ref args) => {"}, {"sha": "7fa8c3deb99eec917adc3c03528941a3a857c82c", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -99,7 +99,7 @@ impl EarlyLintPass for Formatting {\n /// Implementation of the `SUSPICIOUS_ASSIGNMENT_FORMATTING` lint.\n fn check_assign(cx: &EarlyContext, expr: &ast::Expr) {\n     if let ast::ExprKind::Assign(ref lhs, ref rhs) = expr.node {\n-        if !differing_macro_contexts(lhs.span, rhs.span) && !in_macro(cx, lhs.span) {\n+        if !differing_macro_contexts(lhs.span, rhs.span) && !in_macro(lhs.span) {\n             let eq_span = Span { lo: lhs.span.hi, hi: rhs.span.lo, ctxt: NO_EXPANSION };\n             if let ast::ExprKind::Unary(op, ref sub_rhs) = rhs.node {\n                 if let Some(eq_snippet) = snippet_opt(cx, eq_span) {\n@@ -124,7 +124,7 @@ fn check_assign(cx: &EarlyContext, expr: &ast::Expr) {\n /// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for weird `else if`.\n fn check_else_if(cx: &EarlyContext, expr: &ast::Expr) {\n     if let Some((then, &Some(ref else_))) = unsugar_if(expr) {\n-        if unsugar_if(else_).is_some() && !differing_macro_contexts(then.span, else_.span) && !in_macro(cx, then.span) {\n+        if unsugar_if(else_).is_some() && !differing_macro_contexts(then.span, else_.span) && !in_macro(then.span) {\n             // this will be a span from the closing \u2018}\u2019 of the \u201cthen\u201d block (excluding) to the\n             // \u201cif\u201d of the \u201celse if\u201d block (excluding)\n             let else_span = Span { lo: then.span.hi, hi: else_.span.lo, ctxt: NO_EXPANSION };\n@@ -174,7 +174,7 @@ fn check_array(cx: &EarlyContext, expr: &ast::Expr) {\n \n /// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for consecutive ifs.\n fn check_consecutive_ifs(cx: &EarlyContext, first: &ast::Expr, second: &ast::Expr) {\n-    if !differing_macro_contexts(first.span, second.span) && !in_macro(cx, first.span) &&\n+    if !differing_macro_contexts(first.span, second.span) && !in_macro(first.span) &&\n        unsugar_if(first).is_some() && unsugar_if(second).is_some() {\n         // where the else would be\n         let else_span = Span { lo: first.span.hi, hi: second.span.lo, ctxt: NO_EXPANSION };"}, {"sha": "e57feaa5937c36a4b2ddf9163f46b2291411261e", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -33,7 +33,7 @@ impl LintPass for IdentityOp {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro(cx, e.span) {\n+        if in_macro(e.span) {\n             return;\n         }\n         if let ExprBinary(ref cmp, ref left, ref right) = e.node {"}, {"sha": "b3561720cc70db18c502e6a329ff93ed4ac0aa00", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -42,7 +42,7 @@ impl LintPass for ItemsAfterStatements {\n \n impl EarlyLintPass for ItemsAfterStatements {\n     fn check_block(&mut self, cx: &EarlyContext, item: &Block) {\n-        if in_macro(cx, item.span) {\n+        if in_macro(item.span) {\n             return;\n         }\n \n@@ -55,7 +55,7 @@ impl EarlyLintPass for ItemsAfterStatements {\n         // lint on all further items\n         for stmt in stmts {\n             if let StmtKind::Item(ref it) = *stmt {\n-                if in_macro(cx, it.span) {\n+                if in_macro(it.span) {\n                     return;\n                 }\n                 if let ItemKind::MacroDef(..) = it.node {"}, {"sha": "92fa1324324e53c6270dec36a3c69eaa59ade037", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -61,7 +61,7 @@ impl LintPass for LenZero {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if in_macro(cx, item.span) {\n+        if in_macro(item.span) {\n             return;\n         }\n \n@@ -73,7 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if in_macro(cx, expr.span) {\n+        if in_macro(expr.span) {\n             return;\n         }\n "}, {"sha": "f8f50bfb8536711c77839812013e1c0b7f380f36", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -342,7 +342,7 @@ fn check_wild_err_arm(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n                     path_str == \"Err\",\n                     inner.iter().any(|pat| pat.node == PatKind::Wild),\n                     let ExprBlock(ref block) = arm.body.node,\n-                    is_panic_block(cx, block)\n+                    is_panic_block(block)\n                 ], {\n                     // `Err(_)` arm with `panic!` found\n                     span_note_and_lint(cx,\n@@ -359,13 +359,13 @@ fn check_wild_err_arm(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n }\n \n // If the block contains only a `panic!` macro (as expression or statement)\n-fn is_panic_block(cx: &LateContext, block: &Block) -> bool {\n+fn is_panic_block(block: &Block) -> bool {\n     match (&block.expr, block.stmts.len(), block.stmts.first()) {\n         (&Some(ref exp), 0, _) => {\n-            is_expn_of(cx, exp.span, \"panic\").is_some() && is_expn_of(cx, exp.span, \"unreachable\").is_none()\n+            is_expn_of(exp.span, \"panic\").is_some() && is_expn_of(exp.span, \"unreachable\").is_none()\n         },\n         (&None, 1, Some(stmt)) => {\n-            is_expn_of(cx, stmt.span, \"panic\").is_some() && is_expn_of(cx, stmt.span, \"unreachable\").is_none()\n+            is_expn_of(stmt.span, \"panic\").is_some() && is_expn_of(stmt.span, \"unreachable\").is_none()\n         },\n         _ => false,\n     }"}, {"sha": "bc4c2b037e9a827da05ed919d9831d730da905f9", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -554,7 +554,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     // ^ required because `cyclomatic_complexity` attribute shows up as unused\n     #[cyclomatic_complexity = \"30\"]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n-        if in_macro(cx, expr.span) {\n+        if in_macro(expr.span) {\n             return;\n         }\n "}, {"sha": "5d3f07ecba9f469e20c0e4ddc906f0e924312f74", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -326,7 +326,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             },\n             _ => {},\n         }\n-        if in_attributes_expansion(cx, expr) {\n+        if in_attributes_expansion(expr) {\n             // Don't lint things expanded by #[derive(...)], etc\n             return;\n         }\n@@ -498,7 +498,7 @@ fn is_used(cx: &LateContext, expr: &Expr) -> bool {\n \n /// Test whether an expression is in a macro expansion (e.g. something generated by\n /// `#[derive(...)`] or the like).\n-fn in_attributes_expansion(cx: &LateContext, expr: &Expr) -> bool {\n+fn in_attributes_expansion(expr: &Expr) -> bool {\n     expr.span.ctxt.outer().expn_info().map(|info| {\n         matches!(info.callee.format, ExpnFormat::MacroAttribute(_))\n     }).unwrap_or(false)\n@@ -510,7 +510,7 @@ fn non_macro_local(cx: &LateContext, def: &def::Def) -> bool {\n         def::Def::Local(id) |\n         def::Def::Upvar(id, _, _) => {\n             if let Some(span) = cx.tcx.hir.span_if_local(id) {\n-                !in_macro(cx, span)\n+                !in_macro(span)\n             } else {\n                 true\n             }"}, {"sha": "1249b638a0815c0077739f61fd0d5b655b9e816a", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -73,7 +73,7 @@ impl MissingDoc {\n             return;\n         }\n \n-        if in_macro(cx, sp) {\n+        if in_macro(sp) {\n             return;\n         }\n "}, {"sha": "740dd2bcb3fcf225c336689ba57667ffffa5ef6b", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -36,7 +36,7 @@ impl LintPass for NeedlessBorrow {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro(cx, e.span) {\n+        if in_macro(e.span) {\n             return;\n         }\n         if let ExprAddrOf(MutImmutable, ref inner) = e.node {\n@@ -55,7 +55,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         }\n     }\n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n-        if in_macro(cx, pat.span) {\n+        if in_macro(pat.span) {\n             return;\n         }\n         if_let_chain! {["}, {"sha": "28129484a3789a9663f0c348bfb1b60e7cad9cdf", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         span: Span,\n         node_id: NodeId\n     ) {\n-        if in_macro(cx, span) {\n+        if in_macro(span) {\n             return;\n         }\n "}, {"sha": "4796243770c79995fc913b44ff9b585b09d723bf", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -41,7 +41,7 @@ declare_lint! {\n }\n \n fn has_no_effect(cx: &LateContext, expr: &Expr) -> bool {\n-    if in_macro(cx, expr.span) {\n+    if in_macro(expr.span) {\n         return false;\n     }\n     match expr.node {\n@@ -110,7 +110,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             } else if let Some(reduced) = reduce_expression(cx, expr) {\n                 let mut snippet = String::new();\n                 for e in reduced {\n-                    if in_macro(cx, e.span) {\n+                    if in_macro(e.span) {\n                         return;\n                     }\n                     if let Some(snip) = snippet_opt(cx, e.span) {\n@@ -132,7 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n \n fn reduce_expression<'a>(cx: &LateContext, expr: &'a Expr) -> Option<Vec<&'a Expr>> {\n-    if in_macro(cx, expr.span) {\n+    if in_macro(expr.span) {\n         return None;\n     }\n     match expr.node {"}, {"sha": "67f1aaa27abee0d6db62c55f265ed28d871764f3", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n         }\n     }\n     fn check_name(&mut self, span: Span, name: Name) {\n-        if in_macro(self.0.cx, span) {\n+        if in_macro(span) {\n             return;\n         }\n         let interned_name = name.as_str();"}, {"sha": "8db7de30f7c2e96fd996920afbee03c2eea5bf04", "filename": "clippy_lints/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -42,7 +42,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             let ExprPath(ref qpath) = fun.node,\n             match_def_path(cx.tcx, resolve_node(cx, qpath, fun.id).def_id(), &paths::BEGIN_PANIC),\n             let ExprLit(ref lit) = params[0].node,\n-            is_direct_expn_of(cx, params[0].span, \"panic\").is_some(),\n+            is_direct_expn_of(params[0].span, \"panic\").is_some(),\n             let LitKind::Str(ref string, _) = lit.node,\n             let Some(par) = string.as_str().find('{'),\n             string.as_str()[par..].contains('}')"}, {"sha": "a6eb5c5dfda92748c6928ce540642a1d1080bb90", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -77,9 +77,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             // Search for `std::io::_print(..)` which is unique in a\n             // `print!` expansion.\n             if match_def_path(cx.tcx, fun_id, &paths::IO_PRINT) {\n-                if let Some(span) = is_expn_of(cx, expr.span, \"print\") {\n+                if let Some(span) = is_expn_of(expr.span, \"print\") {\n                     // `println!` uses `print!`.\n-                    let (span, name) = match is_expn_of(cx, span, \"println\") {\n+                    let (span, name) = match is_expn_of(span, \"println\") {\n                         Some(span) => (span, \"println\"),\n                         None => (span, \"print\"),\n                     };\n@@ -125,7 +125,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 if let ExprPath(ref qpath) = args[1].node {\n                     let def_id = cx.tables.qpath_def(qpath, args[1].id).def_id();\n                     if match_def_path(cx.tcx, def_id, &paths::DEBUG_FMT_METHOD) && !is_in_debug_impl(cx, expr) &&\n-                       is_expn_of(cx, expr.span, \"panic\").is_none() {\n+                       is_expn_of(expr.span, \"panic\").is_none() {\n                         span_lint(cx, USE_DEBUG, args[0].span, \"use of `Debug`-based formatting\");\n                     }\n                 }"}, {"sha": "cdaf51d6646c6bd66dc23f3968445c5ffc213b09", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             self.last.is_none(),\n             let Some(ref expr) = block.expr,\n             match_type(cx, cx.tables.expr_ty(expr), &paths::REGEX),\n-            let Some(span) = is_expn_of(cx, expr.span, \"regex\"),\n+            let Some(span) = is_expn_of(expr.span, \"regex\"),\n         ], {\n             if !self.spans.contains(&span) {\n                 span_lint(cx,"}, {"sha": "59532f3d440834522883954f24bb2dae1f0f6c52", "filename": "clippy_lints/src/should_assert_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshould_assert_eq.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ShouldAssertEq {\n             let ExprIf(ref cond, ..) = e.node,\n             let ExprUnary(UnOp::UnNot, ref cond) = cond.node,\n             let ExprBinary(ref binop, ref expr1, ref expr2) = cond.node,\n-            is_direct_expn_of(cx, e.span, \"assert\").is_some(),\n+            is_direct_expn_of(e.span, \"assert\").is_some(),\n             let Some(debug_trait) = cx.tcx.lang_items.debug_trait(),\n         ], {\n             let sugg = match binop.node {"}, {"sha": "646ba598f8182703b1b1de2bd5824e72ef68ed0c", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n             if name.node == \"as_bytes\" {\n                 if let ExprLit(ref lit) = args[0].node {\n                     if let LitKind::Str(ref lit_content, _) = lit.node {\n-                        if lit_content.as_str().chars().all(|c| c.is_ascii()) && !in_macro(cx, args[0].span) {\n+                        if lit_content.as_str().chars().all(|c| c.is_ascii()) && !in_macro(args[0].span) {\n                             span_lint_and_then(cx,\n                                                STRING_LIT_AS_BYTES,\n                                                e.span,"}, {"sha": "de90ff323d965d5397b69472712dbb9bd96d2535", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -107,7 +107,7 @@ fn check_fn_decl(cx: &LateContext, decl: &FnDecl) {\n }\n \n fn check_ty(cx: &LateContext, ast_ty: &Ty) {\n-    if in_macro(cx, ast_ty.span) {\n+    if in_macro(ast_ty.span) {\n         return;\n     }\n     match ast_ty.node {\n@@ -199,7 +199,7 @@ fn check_let_unit(cx: &LateContext, decl: &Decl) {\n         let bindtype = &cx.tables.pat_ty(&local.pat).sty;\n         match *bindtype {\n             ty::TyTuple(slice, _) if slice.is_empty() => {\n-                if in_external_macro(cx, decl.span) || in_macro(cx, local.pat.span) {\n+                if in_external_macro(cx, decl.span) || in_macro(local.pat.span) {\n                     return;\n                 }\n                 if higher::is_from_for_desugar(decl) {\n@@ -261,7 +261,7 @@ impl LintPass for UnitCmp {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if in_macro(cx, expr.span) {\n+        if in_macro(expr.span) {\n             return;\n         }\n         if let ExprBinary(ref cmp, ref left, _) = expr.node {\n@@ -694,7 +694,7 @@ impl<'a, 'tcx> TypeComplexityPass {\n     }\n \n     fn check_type(&self, cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty) {\n-        if in_macro(cx, ty.span) {\n+        if in_macro(ty.span) {\n             return;\n         }\n         let score = {\n@@ -797,7 +797,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n         if let ExprCast(ref e, _) = expr.node {\n             if let ExprLit(ref l) = e.node {\n                 if let LitKind::Char(_) = l.node {\n-                    if ty::TyUint(UintTy::U8) == cx.tables.expr_ty(expr).sty && !in_macro(cx, expr.span) {\n+                    if ty::TyUint(UintTy::U8) == cx.tables.expr_ty(expr).sty && !in_macro(expr.span) {\n                         let msg = \"casting character literal to u8. `char`s \\\n                                    are 4 bytes wide in rust, so casting to u8 \\\n                                    truncates them\";\n@@ -971,7 +971,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AbsurdExtremeComparisons {\n \n         if let ExprBinary(ref cmp, ref lhs, ref rhs) = expr.node {\n             if let Some((culprit, result)) = detect_absurd_comparison(cx, cmp.node, lhs, rhs) {\n-                if !in_macro(cx, expr.span) {\n+                if !in_macro(expr.span) {\n                     let msg = \"this comparison involving the minimum or maximum element for this \\\n                                type contains a case that is always true or always false\";\n "}, {"sha": "15f327fb5c2f183442a0d8c24ece013ccf916b94", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n         span: Span,\n         fn_id: ast::NodeId\n     ) {\n-        if in_macro(cx, span) {\n+        if in_macro(span) {\n             return;\n         }\n "}, {"sha": "10a1c18e1823a5f4f12ea73acf7be1a6cdce0f72", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -156,7 +156,7 @@ pub fn vec_macro<'e>(cx: &LateContext, expr: &'e hir::Expr) -> Option<VecArgs<'e\n     if_let_chain!{[\n         let hir::ExprCall(ref fun, ref args) = expr.node,\n         let hir::ExprPath(ref path) = fun.node,\n-        is_expn_of(cx, fun.span, \"vec\").is_some(),\n+        is_expn_of(fun.span, \"vec\").is_some(),\n     ], {\n         let fun_def = resolve_node(cx, path, fun.id);\n         return if match_def_path(cx.tcx, fun_def.def_id(), &paths::VEC_FROM_ELEM) && args.len() == 2 {"}, {"sha": "47784113d4ff9420e8f2d6ae6f1e852300d2c192", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f7c335b1e917849c4f3f94a4f0acb683cfa00/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=7a4f7c335b1e917849c4f3f94a4f0acb683cfa00", "patch": "@@ -111,7 +111,7 @@ pub fn in_constant(cx: &LateContext, id: NodeId) -> bool {\n }\n \n /// Returns true if this `expn_info` was expanded by any macro.\n-pub fn in_macro<'a, T: LintContext<'a>>(cx: &T, span: Span) -> bool {\n+pub fn in_macro(span: Span) -> bool {\n     span.ctxt.outer().expn_info().map(|info| {\n         match info.callee.format {// don't treat range expressions desugared to structs as \"in_macro\"\n             ExpnFormat::CompilerDesugaring(name) => name != \"...\",\n@@ -685,7 +685,7 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n \n /// Return the pre-expansion span if is this comes from an expansion of the macro `name`.\n /// See also `is_direct_expn_of`.\n-pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span> {\n+pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n     loop {\n         let span_name_span = span.ctxt.outer()\n             .expn_info().map(|ei| (ei.callee.name(), ei.call_site));\n@@ -705,7 +705,7 @@ pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span>\n /// ```\n /// `42` is considered expanded from `foo!` and `bar!` by `is_expn_of` but only `bar!` by\n /// `is_direct_expn_of`.\n-pub fn is_direct_expn_of(cx: &LateContext, span: Span, name: &str) -> Option<Span> {\n+pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n     let span_name_span = span.ctxt.outer()\n         .expn_info().map(|ei| (ei.callee.name(), ei.call_site));\n "}]}