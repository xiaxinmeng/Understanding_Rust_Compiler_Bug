{"sha": "965eef92c45297e2c54ca429e1c1bf7e324f3351", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NWVlZjkyYzQ1Mjk3ZTJjNTRjYTQyOWUxYzFiZjdlMzI0ZjMzNTE=", "commit": {"author": {"name": "bobtwinkles", "email": "srkoser+github@gmail.com", "date": "2018-05-17T07:49:06Z"}, "committer": {"name": "bobtwinkles", "email": "srkoser+github@gmail.com", "date": "2018-05-17T07:49:06Z"}, "message": "invalidates: properly handle terminators", "tree": {"sha": "e4a339876667cc4cf5eed28ae2969745f5cc3ffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a339876667cc4cf5eed28ae2969745f5cc3ffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/965eef92c45297e2c54ca429e1c1bf7e324f3351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/965eef92c45297e2c54ca429e1c1bf7e324f3351", "html_url": "https://github.com/rust-lang/rust/commit/965eef92c45297e2c54ca429e1c1bf7e324f3351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/965eef92c45297e2c54ca429e1c1bf7e324f3351/comments", "author": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a82c0972965c70c8f061c20a68f2e498bd12367f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a82c0972965c70c8f061c20a68f2e498bd12367f", "html_url": "https://github.com/rust-lang/rust/commit/a82c0972965c70c8f061c20a68f2e498bd12367f"}], "stats": {"total": 67, "additions": 41, "deletions": 26}, "files": [{"sha": "f6704648cb5f3591d80685eda6edccaf5d15e93e", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/965eef92c45297e2c54ca429e1c1bf7e324f3351/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965eef92c45297e2c54ca429e1c1bf7e324f3351/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=965eef92c45297e2c54ca429e1c1bf7e324f3351", "patch": "@@ -234,38 +234,29 @@ impl<'cg, 'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cg, 'cx, 'tc\n             }\n             TerminatorKind::Yield {\n                 ref value,\n-                resume: _,\n+                resume,\n                 drop: _,\n             } => {\n                 self.consume_operand(ContextKind::Yield.new(location), value);\n \n-                // ** FIXME(bob_twinkles) figure out what the equivalent of this is\n-                // if self.movable_generator {\n-                //     // Look for any active borrows to locals\n-                //     let borrow_set = self.borrow_set.clone();\n-                //     flow_state.with_outgoing_borrows(|borrows| {\n-                //         for i in borrows {\n-                //             let borrow = &borrow_set[i];\n-                //             self.check_for_local_borrow(borrow, span);\n-                //         }\n-                //     });\n-                // }\n+                // Invalidate all borrows of local places\n+                let borrow_set = self.borrow_set.clone();\n+                let resume = self.location_table.start_index(resume.start_location());\n+                for i in borrow_set.borrows.indices() {\n+                    if borrow_of_local_data(&borrow_set.borrows[i].borrowed_place) {\n+                        self.all_facts.invalidates.push((resume, i));\n+                    }\n+                }\n             }\n             TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {\n-                // ** FIXME(bob_twinkles) figure out what the equivalent of this is\n-                // // Returning from the function implicitly kills storage for all locals and\n-                // // statics.\n-                // // Often, the storage will already have been killed by an explicit\n-                // // StorageDead, but we don't always emit those (notably on unwind paths),\n-                // // so this \"extra check\" serves as a kind of backup.\n-                // let borrow_set = self.borrow_set.clone();\n-                // flow_state.with_outgoing_borrows(|borrows| {\n-                //     for i in borrows {\n-                //         let borrow = &borrow_set[i];\n-                //         let context = ContextKind::StorageDead.new(loc);\n-                //         self.check_for_invalidation_at_exit(context, borrow, span);\n-                //     }\n-                // });\n+                // Invalidate all borrows of local places\n+                let borrow_set = self.borrow_set.clone();\n+                let start = self.location_table.start_index(location);\n+                for i in borrow_set.borrows.indices() {\n+                    if borrow_of_local_data(&borrow_set.borrows[i].borrowed_place) {\n+                        self.all_facts.invalidates.push((start, i));\n+                    }\n+                }\n             }\n             TerminatorKind::Goto { target: _ }\n             | TerminatorKind::Abort\n@@ -953,3 +944,27 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cg, 'cx, 'tcx, 'gcx> {\n         }\n     }\n }\n+\n+\n+/// Determines if a given borrow is borrowing local data\n+/// This is called for all Yield statements on movable generators\n+fn borrow_of_local_data<'tcx>(place: &Place<'tcx>) -> bool {\n+    match place {\n+        Place::Static(..) => false,\n+        Place::Local(..) => true,\n+        Place::Projection(box proj) => {\n+            match proj.elem {\n+                // Reborrow of already borrowed data is ignored\n+                // Any errors will be caught on the initial borrow\n+                ProjectionElem::Deref => false,\n+\n+                // For interior references and downcasts, find out if the base is local\n+                ProjectionElem::Field(..)\n+                    | ProjectionElem::Index(..)\n+                    | ProjectionElem::ConstantIndex { .. }\n+                | ProjectionElem::Subslice { .. }\n+                | ProjectionElem::Downcast(..) => borrow_of_local_data(&proj.base),\n+            }\n+        }\n+    }\n+}"}]}