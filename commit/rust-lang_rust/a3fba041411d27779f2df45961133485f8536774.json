{"sha": "a3fba041411d27779f2df45961133485f8536774", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZmJhMDQxNDExZDI3Nzc5ZjJkZjQ1OTYxMTMzNDg1Zjg1MzY3NzQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-04-05T23:12:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-05T23:12:11Z"}, "message": "Merge pull request #2593 from topecongiro/issue-2455\n\nAdd reorder_impl_items config option", "tree": {"sha": "fc793528207b0d8d5dc56f4176789a2f92d72fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc793528207b0d8d5dc56f4176789a2f92d72fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3fba041411d27779f2df45961133485f8536774", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaxq1LCRBK7hj4Ov3rIwAAdHIIABAiAONFWr+CUQacdN1BUysK\ntt/VhCDnuWPNLw6NICzMTcHupnuZlZQBDniCFxEBqwiZUu4TAcp4TjcS6ax+h6eu\nV0HstSULqwxfK7apAk+w2VPzwFf75Z7vuSFHy6Sp/A0zr3pnMWCu88hKRJLNMCj4\nuGVSXWeE2pVC/MdwA7F2XFeI15do8kZvpA3u8I5+kvJklx4jhXySq/fcklqXwTOX\nZWqwtc9deBjRBrF8ql2fwtnWGW0rOcUe7KO6DMW+HcWIeUosUTo3TxoXn2OJM7Fd\ngMX6UodWc+xZP6/UXnrZ7Elp9tTOnMBPxVDvdoIF/P0404V3brTK9HlahLPVJok=\n=0Zqu\n-----END PGP SIGNATURE-----\n", "payload": "tree fc793528207b0d8d5dc56f4176789a2f92d72fe6\nparent b7ba6f70b1755048008d2935b50fede3a44618e9\nparent fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7\nauthor Nick Cameron <nrc@ncameron.org> 1522969931 +1200\ncommitter GitHub <noreply@github.com> 1522969931 +1200\n\nMerge pull request #2593 from topecongiro/issue-2455\n\nAdd reorder_impl_items config option"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fba041411d27779f2df45961133485f8536774", "html_url": "https://github.com/rust-lang/rust/commit/a3fba041411d27779f2df45961133485f8536774", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3fba041411d27779f2df45961133485f8536774/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7ba6f70b1755048008d2935b50fede3a44618e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ba6f70b1755048008d2935b50fede3a44618e9", "html_url": "https://github.com/rust-lang/rust/commit/b7ba6f70b1755048008d2935b50fede3a44618e9"}, {"sha": "fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7", "html_url": "https://github.com/rust-lang/rust/commit/fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7"}], "stats": {"total": 132, "additions": 128, "deletions": 4}, "files": [{"sha": "1c6a8048017a456de7c032fd1c28c1fd9534d176", "filename": "Configurations.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a3fba041411d27779f2df45961133485f8536774/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3fba041411d27779f2df45961133485f8536774/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=a3fba041411d27779f2df45961133485f8536774", "patch": "@@ -1413,6 +1413,42 @@ mod sit;\n **Note** `mod` with `#[macro_export]` will not be reordered since that could change the semantic\n of the original source code.\n \n+## `reorder_impl_items`\n+\n+Reorder impl items. `type` and `const` are put first, then macros and methods.\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n+#### `false` (default)\n+\n+```rust\n+struct Dummy;\n+\n+impl Iterator for Dummy {\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+\n+    type Item = i32;\n+}\n+```\n+\n+#### `true`\n+\n+```rust\n+struct Dummy;\n+\n+impl Iterator for Dummy {\n+    type Item = i32;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+```\n+\n ## `report_todo`\n \n Report `TODO` items in comments."}, {"sha": "75ee8e95835704aad708c9d4331503324234ceb8", "filename": "src/config/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3fba041411d27779f2df45961133485f8536774/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fba041411d27779f2df45961133485f8536774/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=a3fba041411d27779f2df45961133485f8536774", "patch": "@@ -75,6 +75,7 @@ create_config! {\n     reorder_imported_names: bool, true, false,\n         \"Reorder lists of names in import statements alphabetically\";\n     reorder_modules: bool, true, false, \"Reorder module statemtents alphabetically in group\";\n+    reorder_impl_items: bool, false, false, \"Reorder impl items\";\n \n     // Spaces around punctuation\n     binop_separator: SeparatorPlace, SeparatorPlace::Front, false,"}, {"sha": "940cd245523c7d1ebbb06c0fb6cc94a1321da56c", "filename": "src/items.rs", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a3fba041411d27779f2df45961133485f8536774/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fba041411d27779f2df45961133485f8536774/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=a3fba041411d27779f2df45961133485f8536774", "patch": "@@ -11,7 +11,7 @@\n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n use std::borrow::Cow;\n-use std::cmp::min;\n+use std::cmp::{min, Ordering};\n \n use config::lists::*;\n use regex::Regex;\n@@ -660,12 +660,55 @@ pub fn format_impl(\n \n         if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n             let mut visitor = FmtVisitor::from_context(context);\n-            visitor.block_indent = offset.block_only().block_indent(context.config);\n+            let item_indent = offset.block_only().block_indent(context.config);\n+            visitor.block_indent = item_indent;\n             visitor.last_pos = item.span.lo() + BytePos(open_pos as u32);\n \n             visitor.visit_attrs(&item.attrs, ast::AttrStyle::Inner);\n-            for item in items {\n-                visitor.visit_impl_item(item);\n+            if context.config.reorder_impl_items() {\n+                // Create visitor for each items, then reorder them.\n+                let mut buffer = vec![];\n+                for item in items {\n+                    visitor.visit_impl_item(item);\n+                    buffer.push((visitor.buffer.clone(), item.clone()));\n+                    visitor.buffer.clear();\n+                }\n+                // type -> const -> macro -> method\n+                use ast::ImplItemKind::*;\n+                fn need_empty_line(a: &ast::ImplItemKind, b: &ast::ImplItemKind) -> bool {\n+                    match (a, b) {\n+                        (Type(..), Type(..)) | (Const(..), Const(..)) => false,\n+                        _ => true,\n+                    }\n+                }\n+\n+                buffer.sort_by(|(_, a), (_, b)| match (&a.node, &b.node) {\n+                    (Type(..), _) => Ordering::Less,\n+                    (_, Type(..)) => Ordering::Greater,\n+                    (Const(..), _) => Ordering::Less,\n+                    (_, Const(..)) => Ordering::Greater,\n+                    (Macro(..), _) => Ordering::Less,\n+                    (_, Macro(..)) => Ordering::Greater,\n+                    _ => Ordering::Less,\n+                });\n+                let mut prev_kind = None;\n+                for (buf, item) in buffer {\n+                    // Make sure that there are at least a single empty line between\n+                    // different impl items.\n+                    if prev_kind\n+                        .as_ref()\n+                        .map_or(false, |prev_kind| need_empty_line(prev_kind, &item.node))\n+                    {\n+                        visitor.push_str(\"\\n\");\n+                    }\n+                    visitor.push_str(&item_indent.to_string_with_newline(context.config));\n+                    visitor.push_str(buf.trim());\n+                    prev_kind = Some(item.node.clone());\n+                }\n+            } else {\n+                for item in items {\n+                    visitor.visit_impl_item(item);\n+                }\n             }\n \n             visitor.format_missing(item.span.hi() - BytePos(1));"}, {"sha": "beb99f0fb8e6ab755bc33135c24f686fb573642e", "filename": "tests/source/configs/reorder_impl_items/false.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3fba041411d27779f2df45961133485f8536774/tests%2Fsource%2Fconfigs%2Freorder_impl_items%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fba041411d27779f2df45961133485f8536774/tests%2Fsource%2Fconfigs%2Freorder_impl_items%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_impl_items%2Ffalse.rs?ref=a3fba041411d27779f2df45961133485f8536774", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-reorder_impl_items: false\n+\n+struct Dummy;\n+\n+impl Iterator for Dummy {\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+\n+    type Item = i32;\n+}"}, {"sha": "612b1c84abdfb1e253086f8935cb02f1786f80e5", "filename": "tests/source/configs/reorder_impl_items/true.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3fba041411d27779f2df45961133485f8536774/tests%2Fsource%2Fconfigs%2Freorder_impl_items%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fba041411d27779f2df45961133485f8536774/tests%2Fsource%2Fconfigs%2Freorder_impl_items%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_impl_items%2Ftrue.rs?ref=a3fba041411d27779f2df45961133485f8536774", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-reorder_impl_items: true\n+\n+struct Dummy;\n+\n+impl Iterator for Dummy {\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+\n+    type Item = i32;\n+}"}, {"sha": "beb99f0fb8e6ab755bc33135c24f686fb573642e", "filename": "tests/target/configs/reorder_impl_items/false.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3fba041411d27779f2df45961133485f8536774/tests%2Ftarget%2Fconfigs%2Freorder_impl_items%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fba041411d27779f2df45961133485f8536774/tests%2Ftarget%2Fconfigs%2Freorder_impl_items%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_impl_items%2Ffalse.rs?ref=a3fba041411d27779f2df45961133485f8536774", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-reorder_impl_items: false\n+\n+struct Dummy;\n+\n+impl Iterator for Dummy {\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+\n+    type Item = i32;\n+}"}, {"sha": "f2294412a991a661309ad1e31ce55258c98e7710", "filename": "tests/target/configs/reorder_impl_items/true.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3fba041411d27779f2df45961133485f8536774/tests%2Ftarget%2Fconfigs%2Freorder_impl_items%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fba041411d27779f2df45961133485f8536774/tests%2Ftarget%2Fconfigs%2Freorder_impl_items%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_impl_items%2Ftrue.rs?ref=a3fba041411d27779f2df45961133485f8536774", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-reorder_impl_items: true\n+\n+struct Dummy;\n+\n+impl Iterator for Dummy {\n+    type Item = i32;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}"}]}