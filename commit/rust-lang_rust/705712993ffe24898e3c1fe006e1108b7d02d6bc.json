{"sha": "705712993ffe24898e3c1fe006e1108b7d02d6bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNTcxMjk5M2ZmZTI0ODk4ZTNjMWZlMDA2ZTExMDhiN2QwMmQ2YmM=", "commit": {"author": {"name": "Conrad Ludgate", "email": "conradludgate@gmail.com", "date": "2021-03-01T10:51:47Z"}, "committer": {"name": "Conrad Ludgate", "email": "conradludgate@gmail.com", "date": "2021-03-02T14:30:10Z"}, "message": "feat: add type ascription assist", "tree": {"sha": "e3f40b0432e0dff4e1f53f37851c56ac9a94fc7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3f40b0432e0dff4e1f53f37851c56ac9a94fc7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/705712993ffe24898e3c1fe006e1108b7d02d6bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE6pcFW95LJgarInbuPdGh2zy0v2MFAmA+S/IACgkQPdGh2zy0\nv2MJjxAAnrhyAONXZUdmxwuLN4cRfDrjJ5NlH2nMPCTTTXQcCEhNhq5vPWWWPAxX\nSyC3h6Ko3SKJm1EM2hV2FIOkIAMH0/4E8fJzPBFwZc8Kfk7e6PCLH3RMXcnlrewf\nYPSZE8v44vsxPZoM4NCkxByQsaBvy15MpsqtfDD/IFST8x6fIJK7zWH1LJlegJpM\nhmxb1Gkx5OsdiTKsx5vdhLcU/aALEXojns53gX9mwnMi7cIvI+A5nRqxlI2/kalo\nOiUYO9oAyKVsvZ5FMTzewkamoG/fbiLimDW79lZOLFH2fOhn5a7b30uDduAL69ix\nnUj00nNXVLlq7uUHmxwXPmXnshPFtlIJMC0dMBA/q1fdgiQjIjYbm4vdZzpc608+\np7Ahqviy+XQuxXxwPuT98+vOuKRu1WYUcUCx0JAxZrqYbHx/gu0CUr7guJrY6pED\nUZaWU40rir8xB4uQy3v34nw9g+YO9lr14ADDrCjGdcLEidcgniDR85MxNT2LjO6o\npxtRZI+rK3mPyV4USlklowXU0dycIrR+AS1vNLGEuQNyOuqUSEqmMacp5b2GOgym\nRP0WkiBHX4/jfIkyY36zFRl26F4bcji9kBiyXtffvPF+bidpKhObb8xzMrNQTxEj\nmKyTvfla/2oyIQto4E0214JenUO0snDlVv/1wvz4/00gBUW1S68=\n=jofU\n-----END PGP SIGNATURE-----", "payload": "tree e3f40b0432e0dff4e1f53f37851c56ac9a94fc7e\nparent f8152171bbe160c4273d692d42c06eb7c6d66e1a\nauthor Conrad Ludgate <conradludgate@gmail.com> 1614595907 +0000\ncommitter Conrad Ludgate <conradludgate@gmail.com> 1614695410 +0000\n\nfeat: add type ascription assist\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/705712993ffe24898e3c1fe006e1108b7d02d6bc", "html_url": "https://github.com/rust-lang/rust/commit/705712993ffe24898e3c1fe006e1108b7d02d6bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/705712993ffe24898e3c1fe006e1108b7d02d6bc/comments", "author": {"login": "conradludgate", "id": 6625462, "node_id": "MDQ6VXNlcjY2MjU0NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6625462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/conradludgate", "html_url": "https://github.com/conradludgate", "followers_url": "https://api.github.com/users/conradludgate/followers", "following_url": "https://api.github.com/users/conradludgate/following{/other_user}", "gists_url": "https://api.github.com/users/conradludgate/gists{/gist_id}", "starred_url": "https://api.github.com/users/conradludgate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/conradludgate/subscriptions", "organizations_url": "https://api.github.com/users/conradludgate/orgs", "repos_url": "https://api.github.com/users/conradludgate/repos", "events_url": "https://api.github.com/users/conradludgate/events{/privacy}", "received_events_url": "https://api.github.com/users/conradludgate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "conradludgate", "id": 6625462, "node_id": "MDQ6VXNlcjY2MjU0NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6625462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/conradludgate", "html_url": "https://github.com/conradludgate", "followers_url": "https://api.github.com/users/conradludgate/followers", "following_url": "https://api.github.com/users/conradludgate/following{/other_user}", "gists_url": "https://api.github.com/users/conradludgate/gists{/gist_id}", "starred_url": "https://api.github.com/users/conradludgate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/conradludgate/subscriptions", "organizations_url": "https://api.github.com/users/conradludgate/orgs", "repos_url": "https://api.github.com/users/conradludgate/repos", "events_url": "https://api.github.com/users/conradludgate/events{/privacy}", "received_events_url": "https://api.github.com/users/conradludgate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8152171bbe160c4273d692d42c06eb7c6d66e1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8152171bbe160c4273d692d42c06eb7c6d66e1a", "html_url": "https://github.com/rust-lang/rust/commit/f8152171bbe160c4273d692d42c06eb7c6d66e1a"}], "stats": {"total": 220, "additions": 220, "deletions": 0}, "files": [{"sha": "e9dc37150b9c6b4c6f7e7d54c2e5377f71c86dd4", "filename": "crates/ide_assists/src/handlers/add_type_ascription.rs", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/705712993ffe24898e3c1fe006e1108b7d02d6bc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_type_ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705712993ffe24898e3c1fe006e1108b7d02d6bc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_type_ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_type_ascription.rs?ref=705712993ffe24898e3c1fe006e1108b7d02d6bc", "patch": "@@ -0,0 +1,198 @@\n+use ide_db::defs::{Definition, NameRefClass};\n+use syntax::{ast, AstNode, SyntaxKind, T};\n+use test_utils::mark;\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: add_type_ascription\n+//\n+// Adds `: _` before the assignment operator to prompt the user for a type\n+//\n+// ```\n+// fn make<T>() -> T { todo!() }\n+// fn main() {\n+//     let x = make$0();\n+// }\n+// ```\n+// ->\n+// ```\n+// fn make<T>() -> T { todo!() }\n+// fn main() {\n+//     let x: ${0:_} = make();\n+// }\n+// ```\n+pub(crate) fn add_type_ascription(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let let_stmt = ctx.find_node_at_offset::<ast::LetStmt>()?;\n+    if let_stmt.colon_token().is_some() {\n+        mark::hit!(add_type_ascription_already_typed);\n+        return None\n+    }\n+\n+    let ident = ctx.find_token_syntax_at_offset(SyntaxKind::IDENT).or_else(|| {\n+        let arg_list = ctx.find_node_at_offset::<ast::ArgList>()?;\n+        if arg_list.args().count() > 0 {\n+            return None;\n+        }\n+        mark::hit!(add_type_ascription_after_call);\n+        arg_list.l_paren_token()?.prev_token().filter(|it| it.kind() == SyntaxKind::IDENT)\n+    })?;\n+    let next_token = ident.next_token()?;\n+    if next_token.kind() == T![::] {\n+        mark::hit!(add_type_ascription_turbofished);\n+        return None;\n+    }\n+    let name_ref = ast::NameRef::cast(ident.parent())?;\n+    let def = match NameRefClass::classify(&ctx.sema, &name_ref)? {\n+        NameRefClass::Definition(def) => def,\n+        NameRefClass::ExternCrate(_) | NameRefClass::FieldShorthand { .. } => return None,\n+    };\n+    let fun = match def {\n+        Definition::ModuleDef(hir::ModuleDef::Function(it)) => it,\n+        _ => return None,\n+    };\n+    let generics = hir::GenericDef::Function(fun).params(ctx.sema.db);\n+    if generics.is_empty() {\n+        mark::hit!(add_type_ascription_non_generic);\n+        return None;\n+    }\n+    let pat = let_stmt.pat()?.syntax().last_token()?.text_range().end();\n+    acc.add(\n+        AssistId(\"add_type_ascription\", AssistKind::RefactorRewrite),\n+        \"Add `: _` before assignment operator\",\n+        ident.text_range(),\n+        |builder| match ctx.config.snippet_cap {\n+            Some(cap) => builder.insert_snippet(cap, pat, \": ${0:_}\"),\n+            None => builder.insert(pat, \": _\"),\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+    use test_utils::mark;\n+\n+    #[test]\n+    fn add_type_ascription_function() {\n+        check_assist(\n+            add_type_ascription,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x = make$0();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x: ${0:_} = make();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_after_call() {\n+        mark::check!(add_type_ascription_after_call);\n+        check_assist(\n+            add_type_ascription,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x = make()$0;\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x: ${0:_} = make();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_method() {\n+        check_assist(\n+            add_type_ascription,\n+            r#\"\n+struct S;\n+impl S {\n+    fn make<T>(&self) -> T {}\n+}\n+fn main() {\n+    let x = S.make$0();\n+}\n+\"#,\n+            r#\"\n+struct S;\n+impl S {\n+    fn make<T>(&self) -> T {}\n+}\n+fn main() {\n+    let x: ${0:_} = S.make();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_turbofished() {\n+        mark::check!(add_type_ascription_turbofished);\n+        check_assist_not_applicable(\n+            add_type_ascription,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x = make$0::<()>();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_already_typed() {\n+        mark::check!(add_type_ascription_already_typed);\n+        check_assist_not_applicable(\n+            add_type_ascription,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x: () = make$0();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_non_generic() {\n+        mark::check!(add_type_ascription_non_generic);\n+        check_assist_not_applicable(\n+            add_type_ascription,\n+            r#\"\n+fn make() -> () {}\n+fn main() {\n+    let x = make$0();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_no_let() {\n+        check_assist_not_applicable(\n+            add_type_ascription,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    make$0();\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "0248cb9c075adcddc35a5948111385d1e429ca7a", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/705712993ffe24898e3c1fe006e1108b7d02d6bc/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705712993ffe24898e3c1fe006e1108b7d02d6bc/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=705712993ffe24898e3c1fe006e1108b7d02d6bc", "patch": "@@ -111,6 +111,7 @@ mod handlers {\n     mod add_lifetime_to_type;\n     mod add_missing_impl_members;\n     mod add_turbo_fish;\n+    mod add_type_ascription;\n     mod apply_demorgan;\n     mod auto_import;\n     mod change_visibility;\n@@ -175,6 +176,7 @@ mod handlers {\n             add_explicit_type::add_explicit_type,\n             add_lifetime_to_type::add_lifetime_to_type,\n             add_turbo_fish::add_turbo_fish,\n+            add_type_ascription::add_type_ascription,\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n             change_visibility::change_visibility,"}, {"sha": "439ee8b222a389534409b6d123e58ebaf3f88b5d", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/705712993ffe24898e3c1fe006e1108b7d02d6bc/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705712993ffe24898e3c1fe006e1108b7d02d6bc/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=705712993ffe24898e3c1fe006e1108b7d02d6bc", "patch": "@@ -141,6 +141,25 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_add_type_ascription() {\n+    check_doc_test(\n+        \"add_type_ascription\",\n+        r#####\"\n+fn make<T>() -> T { todo!() }\n+fn main() {\n+    let x = make$0();\n+}\n+\"#####,\n+        r#####\"\n+fn make<T>() -> T { todo!() }\n+fn main() {\n+    let x: ${0:_} = make();\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_apply_demorgan() {\n     check_doc_test("}, {"sha": "91f1ee21717cf19b3947afa8435785109e2b99a8", "filename": "xtask/src/tidy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/705712993ffe24898e3c1fe006e1108b7d02d6bc/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705712993ffe24898e3c1fe006e1108b7d02d6bc/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=705712993ffe24898e3c1fe006e1108b7d02d6bc", "patch": "@@ -277,6 +277,7 @@ fn check_todo(path: &Path, text: &str) {\n         \"tests/tidy.rs\",\n         // Some of our assists generate `todo!()`.\n         \"handlers/add_turbo_fish.rs\",\n+        \"handlers/add_type_ascription.rs\",\n         \"handlers/generate_function.rs\",\n         // To support generating `todo!()` in assists, we have `expr_todo()` in\n         // `ast::make`."}]}