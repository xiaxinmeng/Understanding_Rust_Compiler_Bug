{"sha": "c86873bda4d0d32a595dbaf24745c1f7cd9b89da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4Njg3M2JkYTRkMGQzMmE1OTVkYmFmMjQ3NDVjMWY3Y2Q5Yjg5ZGE=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-20T12:12:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:54:31Z"}, "message": "Document Deque.", "tree": {"sha": "f01fbda29aec3c7331ec71839101011135ed3d7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f01fbda29aec3c7331ec71839101011135ed3d7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86873bda4d0d32a595dbaf24745c1f7cd9b89da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86873bda4d0d32a595dbaf24745c1f7cd9b89da", "html_url": "https://github.com/rust-lang/rust/commit/c86873bda4d0d32a595dbaf24745c1f7cd9b89da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86873bda4d0d32a595dbaf24745c1f7cd9b89da/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec70f2bb6e8cd3dd187abba351e6cf9eb14a37c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec70f2bb6e8cd3dd187abba351e6cf9eb14a37c1", "html_url": "https://github.com/rust-lang/rust/commit/ec70f2bb6e8cd3dd187abba351e6cf9eb14a37c1"}], "stats": {"total": 183, "additions": 173, "deletions": 10}, "files": [{"sha": "abcd677bba6646f54777d1364cedca622ddc5c52", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 173, "deletions": 10, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/c86873bda4d0d32a595dbaf24745c1f7cd9b89da/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86873bda4d0d32a595dbaf24745c1f7cd9b89da/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=c86873bda4d0d32a595dbaf24745c1f7cd9b89da", "patch": "@@ -327,33 +327,196 @@ pub trait MutableSet<T>: Set<T> + Mutable {\n \n /// A double-ended sequence that allows querying, insertion and deletion at both\n /// ends.\n+///\n+/// # Example\n+///\n+/// With a `Deque` we can simulate a stack:\n+///\n+/// ```\n+/// use std::collections::{RingBuf, Deque};\n+///\n+/// let mut stack = RingBuf::new();\n+/// stack.push_front(1i);\n+/// stack.push_front(2i);\n+/// stack.push_front(3i);\n+///\n+/// // Will print 3, 2, 1\n+/// while !stack.is_empty() {\n+///     let x = stack.pop_front().unwrap();\n+///     println!(\"{}\", x);\n+/// }\n+/// ```\n+///\n+/// We can simulate a queue:\n+///\n+/// ```\n+/// use std::collections::{RingBuf, Deque};\n+///\n+/// let mut queue = RingBuf::new();\n+/// queue.push_back(1i);\n+/// queue.push_back(2i);\n+/// queue.push_back(3i);\n+///\n+/// // Will print 1, 2, 3\n+/// while !queue.is_empty() {\n+///     let x = queue.pop_front().unwrap();\n+///     println!(\"{}\", x);\n+/// }\n+/// ```\n+///\n+/// And of course we can mix and match:\n+///\n+/// ```\n+/// use std::collections::{DList, Deque};\n+///\n+/// let mut deque = DList::new();\n+///\n+/// // Init deque with 1, 2, 3, 4\n+/// deque.push_front(2i);\n+/// deque.push_front(1i);\n+/// deque.push_back(3i);\n+/// deque.push_back(4i);\n+///\n+/// // Will print (1, 4) and (2, 3)\n+/// while !deque.is_empty() {\n+///     let f = deque.pop_front().unwrap();\n+///     let b = deque.pop_back().unwrap();\n+///     println!(\"{}\", (f, b));\n+/// }\n+/// ```\n pub trait Deque<T> : Mutable {\n-    /// Provide a reference to the front element, or None if the sequence is\n-    /// empty\n+    /// Provide a reference to the front element, or `None` if the sequence is.\n+    /// empty.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::{RingBuf, Deque};\n+    ///\n+    /// let mut d = RingBuf::new();\n+    /// assert_eq!(d.front(), None);\n+    ///\n+    /// d.push_back(1i);\n+    /// d.push_back(2i);\n+    /// assert_eq!(d.front(), Some(&1i));\n+    /// ```\n     fn front<'a>(&'a self) -> Option<&'a T>;\n \n-    /// Provide a mutable reference to the front element, or None if the\n-    /// sequence is empty\n+    /// Provide a mutable reference to the front element, or `None` if the\n+    /// sequence is empty.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::{RingBuf, Deque};\n+    ///\n+    /// let mut d = RingBuf::new();\n+    /// assert_eq!(d.front_mut(), None);\n+    ///\n+    /// d.push_back(1i);\n+    /// d.push_back(2i);\n+    /// match d.front_mut() {\n+    ///     Some(x) => *x = 9i,\n+    ///     None => (),\n+    /// }\n+    /// assert_eq!(d.front(), Some(&9i));\n+    /// ```\n     fn front_mut<'a>(&'a mut self) -> Option<&'a mut T>;\n \n     /// Provide a reference to the back element, or None if the sequence is\n-    /// empty\n+    /// empty.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::{DList, Deque};\n+    ///\n+    /// let mut d = DList::new();\n+    /// assert_eq!(d.back(), None);\n+    ///\n+    /// d.push_back(1i);\n+    /// d.push_back(2i);\n+    /// assert_eq!(d.back(), Some(&2i));\n+    /// ```\n     fn back<'a>(&'a self) -> Option<&'a T>;\n \n     /// Provide a mutable reference to the back element, or None if the sequence\n-    /// is empty\n+    /// is empty.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::{DList, Deque};\n+    ///\n+    /// let mut d = DList::new();\n+    /// assert_eq!(d.back(), None);\n+    ///\n+    /// d.push_back(1i);\n+    /// d.push_back(2i);\n+    /// match d.back_mut() {\n+    ///     Some(x) => *x = 9i,\n+    ///     None => (),\n+    /// }\n+    /// assert_eq!(d.back(), Some(&9i));\n+    /// ```\n     fn back_mut<'a>(&'a mut self) -> Option<&'a mut T>;\n \n-    /// Insert an element first in the sequence\n+    /// Insert an element first in the sequence.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::{DList, Deque};\n+    ///\n+    /// let mut d = DList::new();\n+    /// d.push_front(1i);\n+    /// d.push_front(2i);\n+    /// assert_eq!(d.front(), Some(&2i));\n     fn push_front(&mut self, elt: T);\n \n-    /// Insert an element last in the sequence\n+    /// Insert an element last in the sequence.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::{DList, Deque};\n+    ///\n+    /// let mut d = DList::new();\n+    /// d.push_back(1i);\n+    /// d.push_back(2i);\n+    /// assert_eq!(d.front(), Some(&1i));\n     fn push_back(&mut self, elt: T);\n \n-    /// Remove the last element and return it, or None if the sequence is empty\n+    /// Remove the last element and return it, or None if the sequence is empty.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::{RingBuf, Deque};\n+    ///\n+    /// let mut d = RingBuf::new();\n+    /// d.push_back(1i);\n+    /// d.push_back(2i);\n+    ///\n+    /// assert_eq!(d.pop_back(), Some(2i));\n+    /// assert_eq!(d.pop_back(), Some(1i));\n+    /// assert_eq!(d.pop_back(), None);\n     fn pop_back(&mut self) -> Option<T>;\n \n-    /// Remove the first element and return it, or None if the sequence is empty\n+    /// Remove the first element and return it, or None if the sequence is empty.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::{RingBuf, Deque};\n+    ///\n+    /// let mut d = RingBuf::new();\n+    /// d.push_back(1i);\n+    /// d.push_back(2i);\n+    ///\n+    /// assert_eq!(d.pop_front(), Some(1i));\n+    /// assert_eq!(d.pop_front(), Some(2i));\n+    /// assert_eq!(d.pop_front(), None);\n     fn pop_front(&mut self) -> Option<T>;\n }\n "}]}