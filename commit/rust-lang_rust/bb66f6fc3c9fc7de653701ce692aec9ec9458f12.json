{"sha": "bb66f6fc3c9fc7de653701ce692aec9ec9458f12", "node_id": "C_kwDOAAsO6NoAKGJiNjZmNmZjM2M5ZmM3ZGU2NTM3MDFjZTY5MmFlYzllYzk0NThmMTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-06T17:44:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-06T17:44:48Z"}, "message": "Auto merge of #14750 - lowr:fix/rustc_reservation_impl, r=HKalbasi\n\nfix: ignore impls with `#[rustc_reservation_impl]`\n\nFixes #12247\nFixes #14279\n\nCurrently core has two blanket impls for `From`: `impl<T> From<T> for T` and `impl<T> From<!> for T`. These are conflicting and thus chalk cannot uniquely solve `S: From<?0>` for any type `S`.\n\nThe latter impl is actually a reservation impl and should not be considered during trait selection. More generally, impls attributed with perma-unstable `#[rustc_reservation_impl]` attribute should be disregarded except for coherence checks. See rust-lang/rust#64631 and rust-lang/rust#64715 for details.\n\nI chose to entirely ignore them in hir-ty because we don't do coherence checks.", "tree": {"sha": "07ad9c13b9fa2b1136c29cef153d428ddbf8086b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07ad9c13b9fa2b1136c29cef153d428ddbf8086b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb66f6fc3c9fc7de653701ce692aec9ec9458f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb66f6fc3c9fc7de653701ce692aec9ec9458f12", "html_url": "https://github.com/rust-lang/rust/commit/bb66f6fc3c9fc7de653701ce692aec9ec9458f12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb66f6fc3c9fc7de653701ce692aec9ec9458f12/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ee39a6ee50e6ddfdf5ac5532bbd13e268b3bf36", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee39a6ee50e6ddfdf5ac5532bbd13e268b3bf36", "html_url": "https://github.com/rust-lang/rust/commit/5ee39a6ee50e6ddfdf5ac5532bbd13e268b3bf36"}, {"sha": "9360adccda17f3236a93514a44f8c57b0be4c890", "url": "https://api.github.com/repos/rust-lang/rust/commits/9360adccda17f3236a93514a44f8c57b0be4c890", "html_url": "https://github.com/rust-lang/rust/commit/9360adccda17f3236a93514a44f8c57b0be4c890"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "983cc22212421c0aba234243c61a38c3baf1c7a7", "filename": "crates/hir-ty/src/chalk_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb66f6fc3c9fc7de653701ce692aec9ec9458f12/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb66f6fc3c9fc7de653701ce692aec9ec9458f12/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs?ref=bb66f6fc3c9fc7de653701ce692aec9ec9458f12", "patch": "@@ -453,7 +453,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     }\n }\n \n-impl<'a> chalk_ir::UnificationDatabase<Interner> for &'a dyn HirDatabase {\n+impl chalk_ir::UnificationDatabase<Interner> for &dyn HirDatabase {\n     fn fn_def_variance(\n         &self,\n         fn_def_id: chalk_ir::FnDefId<Interner>,"}, {"sha": "8d57211db0778f198e9dd6ea2fe70790cda8b0b6", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb66f6fc3c9fc7de653701ce692aec9ec9458f12/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb66f6fc3c9fc7de653701ce692aec9ec9458f12/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=bb66f6fc3c9fc7de653701ce692aec9ec9458f12", "patch": "@@ -187,6 +187,15 @@ impl TraitImpls {\n     fn collect_def_map(&mut self, db: &dyn HirDatabase, def_map: &DefMap) {\n         for (_module_id, module_data) in def_map.modules() {\n             for impl_id in module_data.scope.impls() {\n+                // Reservation impls should be ignored during trait resolution, so we never need\n+                // them during type analysis. See rust-lang/rust#64631 for details.\n+                //\n+                // FIXME: Reservation impls should be considered during coherence checks. If we are\n+                // (ever) to implement coherence checks, this filtering should be done by the trait\n+                // solver.\n+                if db.attrs(impl_id.into()).by_key(\"rustc_reservation_impl\").exists() {\n+                    continue;\n+                }\n                 let target_trait = match db.impl_trait(impl_id) {\n                     Some(tr) => tr.skip_binders().hir_trait_id(),\n                     None => continue,"}, {"sha": "09c63f873ee6259b63f0f3342614e81f39325a9f", "filename": "crates/hir-ty/src/tests/never_type.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb66f6fc3c9fc7de653701ce692aec9ec9458f12/crates%2Fhir-ty%2Fsrc%2Ftests%2Fnever_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb66f6fc3c9fc7de653701ce692aec9ec9458f12/crates%2Fhir-ty%2Fsrc%2Ftests%2Fnever_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fnever_type.rs?ref=bb66f6fc3c9fc7de653701ce692aec9ec9458f12", "patch": "@@ -483,3 +483,22 @@ fn example() -> bool {\n \"#,\n     );\n }\n+\n+#[test]\n+fn reservation_impl_should_be_ignored() {\n+    // See rust-lang/rust#64631.\n+    check_types(\n+        r#\"\n+//- minicore: from\n+struct S;\n+#[rustc_reservation_impl]\n+impl<T> From<!> for T {}\n+fn foo<T, U: From<T>>(_: U) -> T { loop {} }\n+\n+fn test() {\n+    let s = foo(S);\n+      //^ S\n+}\n+\"#,\n+    );\n+}"}]}