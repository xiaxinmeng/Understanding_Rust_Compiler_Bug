{"sha": "6faa82be42df548877315768184f8cfba111772e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYWE4MmJlNDJkZjU0ODg3NzMxNTc2ODE4NGY4Y2ZiYTExMTc3MmU=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-26T10:04:34Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-26T10:06:25Z"}, "message": "Eagerly lower asm sub-expressions to HIR even if there is an error\n\nFixes #72570", "tree": {"sha": "e76571ac85d93525655584d922989b4fa6becd65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76571ac85d93525655584d922989b4fa6becd65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6faa82be42df548877315768184f8cfba111772e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6faa82be42df548877315768184f8cfba111772e", "html_url": "https://github.com/rust-lang/rust/commit/6faa82be42df548877315768184f8cfba111772e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6faa82be42df548877315768184f8cfba111772e/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "html_url": "https://github.com/rust-lang/rust/commit/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d"}], "stats": {"total": 75, "additions": 42, "deletions": 33}, "files": [{"sha": "d8002bd3e19aeac2d76cff066f14a1561c1e3e97", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6faa82be42df548877315768184f8cfba111772e/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6faa82be42df548877315768184f8cfba111772e/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=6faa82be42df548877315768184f8cfba111772e", "patch": "@@ -974,20 +974,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_expr_asm(&mut self, sp: Span, asm: &InlineAsm) -> hir::ExprKind<'hir> {\n-        let asm_arch = if let Some(asm_arch) = self.sess.asm_arch {\n-            asm_arch\n-        } else {\n+        if self.sess.asm_arch.is_none() {\n             struct_span_err!(self.sess, sp, E0472, \"asm! is unsupported on this target\").emit();\n-            return hir::ExprKind::Err;\n         };\n-        if asm.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n-            match asm_arch {\n-                asm::InlineAsmArch::X86 | asm::InlineAsmArch::X86_64 => {}\n-                _ => self\n-                    .sess\n-                    .struct_span_err(sp, \"the `att_syntax` option is only supported on x86\")\n-                    .emit(),\n-            }\n+        if asm.options.contains(InlineAsmOptions::ATT_SYNTAX)\n+            && !matches!(\n+                self.sess.asm_arch,\n+                Some(asm::InlineAsmArch::X86 | asm::InlineAsmArch::X86_64)\n+            )\n+        {\n+            self.sess\n+                .struct_span_err(sp, \"the `att_syntax` option is only supported on x86\")\n+                .emit();\n         }\n \n         // Lower operands to HIR, filter_map skips any operands with invalid\n@@ -1001,10 +999,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     Some(match reg {\n                         InlineAsmRegOrRegClass::Reg(s) => asm::InlineAsmRegOrRegClass::Reg(\n                             asm::InlineAsmReg::parse(\n-                                asm_arch,\n-                                |feature| {\n-                                    self.sess.target_features.contains(&Symbol::intern(feature))\n-                                },\n+                                sess.asm_arch?,\n+                                |feature| sess.target_features.contains(&Symbol::intern(feature)),\n                                 s,\n                             )\n                             .map_err(|e| {\n@@ -1015,7 +1011,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         ),\n                         InlineAsmRegOrRegClass::RegClass(s) => {\n                             asm::InlineAsmRegOrRegClass::RegClass(\n-                                asm::InlineAsmRegClass::parse(asm_arch, s)\n+                                asm::InlineAsmRegClass::parse(sess.asm_arch?, s)\n                                     .map_err(|e| {\n                                         let msg = format!(\n                                             \"invalid register class `{}`: {}\",\n@@ -1029,33 +1025,38 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         }\n                     })\n                 };\n-                let op = match op {\n-                    InlineAsmOperand::In { reg, expr } => hir::InlineAsmOperand::In {\n-                        reg: lower_reg(*reg)?,\n+\n+                // lower_reg is executed last because we need to lower all\n+                // sub-expressions even if we throw them away later.\n+                let op = match *op {\n+                    InlineAsmOperand::In { reg, ref expr } => hir::InlineAsmOperand::In {\n                         expr: self.lower_expr_mut(expr),\n+                        reg: lower_reg(reg)?,\n                     },\n-                    InlineAsmOperand::Out { reg, late, expr } => hir::InlineAsmOperand::Out {\n-                        reg: lower_reg(*reg)?,\n-                        late: *late,\n+                    InlineAsmOperand::Out { reg, late, ref expr } => hir::InlineAsmOperand::Out {\n+                        late,\n                         expr: expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n+                        reg: lower_reg(reg)?,\n                     },\n-                    InlineAsmOperand::InOut { reg, late, expr } => hir::InlineAsmOperand::InOut {\n-                        reg: lower_reg(*reg)?,\n-                        late: *late,\n-                        expr: self.lower_expr_mut(expr),\n-                    },\n-                    InlineAsmOperand::SplitInOut { reg, late, in_expr, out_expr } => {\n+                    InlineAsmOperand::InOut { reg, late, ref expr } => {\n+                        hir::InlineAsmOperand::InOut {\n+                            late,\n+                            expr: self.lower_expr_mut(expr),\n+                            reg: lower_reg(reg)?,\n+                        }\n+                    }\n+                    InlineAsmOperand::SplitInOut { reg, late, ref in_expr, ref out_expr } => {\n                         hir::InlineAsmOperand::SplitInOut {\n-                            reg: lower_reg(*reg)?,\n-                            late: *late,\n+                            late,\n                             in_expr: self.lower_expr_mut(in_expr),\n                             out_expr: out_expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n+                            reg: lower_reg(reg)?,\n                         }\n                     }\n-                    InlineAsmOperand::Const { expr } => {\n+                    InlineAsmOperand::Const { ref expr } => {\n                         hir::InlineAsmOperand::Const { expr: self.lower_expr_mut(expr) }\n                     }\n-                    InlineAsmOperand::Sym { expr } => {\n+                    InlineAsmOperand::Sym { ref expr } => {\n                         hir::InlineAsmOperand::Sym { expr: self.lower_expr_mut(expr) }\n                     }\n                 };\n@@ -1069,6 +1070,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n \n         // Validate template modifiers against the register classes for the operands\n+        let asm_arch = sess.asm_arch.unwrap();\n         for p in &asm.template {\n             if let InlineAsmTemplatePiece::Placeholder {\n                 operand_idx,"}, {"sha": "df508e90458196d4bd4d2def85a5e7871d2123b7", "filename": "src/test/ui/asm/issue-72570.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6faa82be42df548877315768184f8cfba111772e/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6faa82be42df548877315768184f8cfba111772e/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs?ref=6faa82be42df548877315768184f8cfba111772e", "patch": "@@ -0,0 +1,7 @@\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"\", in(\"invalid\") \"\".len());\n+    }\n+}"}]}