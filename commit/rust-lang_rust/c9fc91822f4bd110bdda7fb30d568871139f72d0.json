{"sha": "c9fc91822f4bd110bdda7fb30d568871139f72d0", "node_id": "C_kwDOAAsO6NoAKGM5ZmM5MTgyMmY0YmQxMTBiZGRhN2ZiMzBkNTY4ODcxMTM5ZjcyZDA", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-10T12:44:45Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T01:32:09Z"}, "message": "minicore", "tree": {"sha": "df7dfd12d7332743b712cf468a5050285310d152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df7dfd12d7332743b712cf468a5050285310d152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9fc91822f4bd110bdda7fb30d568871139f72d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHg0pkACgkQeO9fUvOM\nSb2bxwwAqLq4ibDa/J7sATxPnRvbZw3Cyucak1MHTMN1ctLxaMqmGOh9zv3f4tgr\ndOwXIrKp+ZvobnWNAydw/AXb/TnQmOhPOqy4PehAMC4953HQeIzanoD4uCaUiiFS\nokC47TaE10dDoRSyvRPpe7Eu6DcYMxBujSHpJUWy9g1Oyf0WXDK77ror02Zic5co\nIkzsFg6F1qxc0JPVBVseWNV1siY8lOHWxdYDbFO4xSMItM5jnU5uYNMYGbC7yYAJ\nC7AUII824a036HQ6vF86Wj9USzJo7L3IrBavGUVXFQUSH1oLqHE9lUJzX3pQ0Tzo\nMM8LnFDCslKCguEsSIqQbxcV01osQpUCIDwulj/dgwO4Gn7rGFUeYyhIzyeXekdA\nJBMeHW7z2hHSkKtqsCSHSMwuQ0tmsURrMkx10N+pZf5ujeqq8Vk5Yn11Z9XvOy8G\n88fnUW7caqnVm6kly0CWGeKZAf754KAWYkgxz3dQd7aYtCL/aliLbTXDi/NPLGza\nHSFLWBGz\n=3DpT\n-----END PGP SIGNATURE-----", "payload": "tree df7dfd12d7332743b712cf468a5050285310d152\nparent 215f8966658954a9603a41f3d7039e7b7108f034\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1641818685 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1642123929 +0000\n\nminicore\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9fc91822f4bd110bdda7fb30d568871139f72d0", "html_url": "https://github.com/rust-lang/rust/commit/c9fc91822f4bd110bdda7fb30d568871139f72d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9fc91822f4bd110bdda7fb30d568871139f72d0/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215f8966658954a9603a41f3d7039e7b7108f034", "url": "https://api.github.com/repos/rust-lang/rust/commits/215f8966658954a9603a41f3d7039e7b7108f034", "html_url": "https://github.com/rust-lang/rust/commit/215f8966658954a9603a41f3d7039e7b7108f034"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "4f4f5290fdd3a61228e21e18468509e00d75147f", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9fc91822f4bd110bdda7fb30d568871139f72d0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9fc91822f4bd110bdda7fb30d568871139f72d0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=c9fc91822f4bd110bdda7fb30d568871139f72d0", "patch": "@@ -58,13 +58,16 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 for i in 0..arm_types.len() {\n                     let other_arm_type = &arm_types[i].as_ref();\n                     let current_arm_type = current_arm_types[i].as_ref();\n-                    if other_arm_type.is_some() && current_arm_type.is_some() {\n-                        let other_arm_type = other_arm_type.unwrap().original.clone().as_adt();\n-                        let current_arm_type = current_arm_type.unwrap().original.clone().as_adt();\n+                    if let (Some(other_arm_type), Some(current_arm_type)) = (other_arm_type, current_arm_type) {\n+                        let other_arm_type = &other_arm_type.original;\n+                        let current_arm_type = &current_arm_type.original;\n+\n                         println!(\"Same types!\");\n                         println!(\"{:?}\", other_arm_type);\n                         println!(\"{:?}\", current_arm_type);\n                         return other_arm_type == current_arm_type;\n+\n+                        \n                     }\n                 }\n \n@@ -285,7 +288,7 @@ fn main() {\n     fn merge_match_arms_different_type() {\n         check_assist_not_applicable(\n             merge_match_arms,\n-            r#\"\n+            r#\"//- minicore: result\n fn func() {\n     match Result::<i32, f32>::Ok(0) {\n         Ok(x) => $0x.to_string(),"}]}