{"sha": "b6ea0538a90f40ec940d2ae09e167ef2718dc507", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZWEwNTM4YTkwZjQwZWM5NDBkMmFlMDllMTY3ZWYyNzE4ZGM1MDc=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-07-29T22:58:46Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-07-29T22:58:46Z"}, "message": "Add some missing method wrappers to std::num", "tree": {"sha": "5cfe8c78ecf86a4872444a2c9bbd8a8cd6c10add", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cfe8c78ecf86a4872444a2c9bbd8a8cd6c10add"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6ea0538a90f40ec940d2ae09e167ef2718dc507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ea0538a90f40ec940d2ae09e167ef2718dc507", "html_url": "https://github.com/rust-lang/rust/commit/b6ea0538a90f40ec940d2ae09e167ef2718dc507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6ea0538a90f40ec940d2ae09e167ef2718dc507/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cc3bbb83d3e45cac17537514d08257e5a94cc61", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cc3bbb83d3e45cac17537514d08257e5a94cc61", "html_url": "https://github.com/rust-lang/rust/commit/4cc3bbb83d3e45cac17537514d08257e5a94cc61"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "d6ae08e31fcbfb105b26dc09247c2f19bdf8e3b6", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b6ea0538a90f40ec940d2ae09e167ef2718dc507/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6ea0538a90f40ec940d2ae09e167ef2718dc507/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=b6ea0538a90f40ec940d2ae09e167ef2718dc507", "patch": "@@ -45,18 +45,23 @@ pub trait Orderable: Ord {\n     fn clamp(&self, mn: &Self, mx: &Self) -> Self;\n }\n \n-#[inline(always)] pub fn min<T: Orderable>(a: T, b: T) -> T { a.min(&b) }\n-#[inline(always)] pub fn max<T: Orderable>(a: T, b: T) -> T { a.max(&b) }\n+#[inline(always)] pub fn min<T: Orderable>(x: T, y: T) -> T { x.min(&y) }\n+#[inline(always)] pub fn max<T: Orderable>(x: T, y: T) -> T { x.max(&y) }\n+#[inline(always)] pub fn clamp<T: Orderable>(value: T, mn: T, mx: T) -> T { value.clamp(&mn, &mx) }\n \n pub trait Zero {\n     fn zero() -> Self;      // FIXME (#5527): This should be an associated constant\n     fn is_zero(&self) -> bool;\n }\n \n+#[inline(always)] pub fn zero<T: Zero>() -> T { Zero::zero() }\n+\n pub trait One {\n     fn one() -> Self;       // FIXME (#5527): This should be an associated constant\n }\n \n+#[inline(always)] pub fn one<T: One>() -> T { One::one() }\n+\n pub trait Signed: Num\n                 + Neg<Self> {\n     fn abs(&self) -> Self;\n@@ -68,6 +73,7 @@ pub trait Signed: Num\n }\n \n #[inline(always)] pub fn abs<T: Signed>(value: T) -> T { value.abs() }\n+#[inline(always)] pub fn abs_sub<T: Signed>(x: T, y: T) -> T { x.abs_sub(&y) }\n #[inline(always)] pub fn signum<T: Signed>(value: T) -> T { value.signum() }\n \n pub trait Unsigned: Num {}\n@@ -90,6 +96,9 @@ pub trait Integer: Num\n     fn is_odd(&self) -> bool;\n }\n \n+#[inline(always)] pub fn gcd<T: Integer>(x: T, y: T) -> T { x.gcd(&y) }\n+#[inline(always)] pub fn lcm<T: Integer>(x: T, y: T) -> T { x.lcm(&y) }\n+\n pub trait Round {\n     fn floor(&self) -> Self;\n     fn ceil(&self) -> Self;\n@@ -113,15 +122,21 @@ pub trait Algebraic {\n     fn hypot(&self, other: &Self) -> Self;\n }\n \n+#[inline(always)] pub fn pow<T: Algebraic>(value: T, n: T) -> T { value.pow(&n) }\n #[inline(always)] pub fn sqrt<T: Algebraic>(value: T) -> T { value.sqrt() }\n+#[inline(always)] pub fn rsqrt<T: Algebraic>(value: T) -> T { value.rsqrt() }\n+#[inline(always)] pub fn cbrt<T: Algebraic>(value: T) -> T { value.cbrt() }\n+#[inline(always)] pub fn hypot<T: Algebraic>(x: T, y: T) -> T { x.hypot(&y) }\n \n pub trait Trigonometric {\n     fn sin(&self) -> Self;\n     fn cos(&self) -> Self;\n     fn tan(&self) -> Self;\n+\n     fn asin(&self) -> Self;\n     fn acos(&self) -> Self;\n     fn atan(&self) -> Self;\n+\n     fn atan2(&self, other: &Self) -> Self;\n     fn sin_cos(&self) -> (Self, Self);\n }\n@@ -135,10 +150,12 @@ pub trait Trigonometric {\n #[inline(always)] pub fn atan<T: Trigonometric>(value: T) -> T { value.atan() }\n \n #[inline(always)] pub fn atan2<T: Trigonometric>(x: T, y: T) -> T { x.atan2(&y) }\n+#[inline(always)] pub fn sin_cos<T: Trigonometric>(value: T) -> (T, T) { value.sin_cos() }\n \n pub trait Exponential {\n     fn exp(&self) -> Self;\n     fn exp2(&self) -> Self;\n+\n     fn ln(&self) -> Self;\n     fn log(&self, base: &Self) -> Self;\n     fn log2(&self) -> Self;\n@@ -157,6 +174,7 @@ pub trait Hyperbolic: Exponential {\n     fn sinh(&self) -> Self;\n     fn cosh(&self) -> Self;\n     fn tanh(&self) -> Self;\n+\n     fn asinh(&self) -> Self;\n     fn acosh(&self) -> Self;\n     fn atanh(&self) -> Self;\n@@ -326,6 +344,10 @@ pub trait Float: Real\n }\n \n ///\n+#[inline(always)] pub fn exp_m1<T: Float>(value: T) -> T { value.exp_m1() }\n+#[inline(always)] pub fn ln_1p<T: Float>(value: T) -> T { value.ln_1p() }\n+#[inline(always)] pub fn mul_add<T: Float>(a: T, b: T, c: T) -> T { a.mul_add(b, c) }\n+\n /// Cast from one machine scalar to another\n ///\n /// # Example"}]}