{"sha": "d18dc3d2ab0e63be6ce00142d8cdced48447782c", "node_id": "C_kwDOAAsO6NoAKGQxOGRjM2QyYWIwZTYzYmU2Y2UwMDE0MmQ4Y2RjZWQ0ODQ0Nzc4MmM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-05T08:45:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-05T08:45:51Z"}, "message": "Rollup merge of #101367 - compiler-errors:suggest-copied-or-cloned, r=lcnr\n\nSuggest `{Option,Result}::{copied,clone}()` to satisfy type mismatch\n\nFixes #100699, but in the opposite direction (instead of suggesting to fix the signature, it fixes the body)", "tree": {"sha": "dd0b20736a53f275b4eb34f35d58e5f83ca05ba9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd0b20736a53f275b4eb34f35d58e5f83ca05ba9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d18dc3d2ab0e63be6ce00142d8cdced48447782c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjFbc/CRBK7hj4Ov3rIwAAmxsIAIBT6HmenQyVL5Svuqy+420s\nz5DgEL9GgHIEjXyq0IlirAYdfLAaBpWfrgSHlEG8SQk4s35R3jEhMcAYK38Y9S6U\nu4UyHJDLv4UL3yojNDuMD4qFYW3h5NkdaVKJcxVbu8HvihKyrUjtWl5enH33+XVt\nhIy/Er2c6gIbsm0LAG5gEVgPJAvt17V2ySfTTkcdGsk0NRS0NUTKaG+hvRn3HJiC\nDG22x3eVL7VYcCHwK43sZJx6wxnEB7gikyfxpf2ut08F/ufatIu/wzTJdEKuFmOI\ngmggidEQWXuDWYCi9/OKyhAZlaWVHEl1ehsjhxmnlaf9rnRsHlYCFIOygbpGu2w=\n=JXX+\n-----END PGP SIGNATURE-----\n", "payload": "tree dd0b20736a53f275b4eb34f35d58e5f83ca05ba9\nparent 5d55009b797e7dc1e6231e522bd849279cb1d31a\nparent fdbede7ad85d4ccdabc5da1cdaa41fa93fac2457\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662367551 +0530\ncommitter GitHub <noreply@github.com> 1662367551 +0530\n\nRollup merge of #101367 - compiler-errors:suggest-copied-or-cloned, r=lcnr\n\nSuggest `{Option,Result}::{copied,clone}()` to satisfy type mismatch\n\nFixes #100699, but in the opposite direction (instead of suggesting to fix the signature, it fixes the body)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d18dc3d2ab0e63be6ce00142d8cdced48447782c", "html_url": "https://github.com/rust-lang/rust/commit/d18dc3d2ab0e63be6ce00142d8cdced48447782c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d18dc3d2ab0e63be6ce00142d8cdced48447782c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d55009b797e7dc1e6231e522bd849279cb1d31a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d55009b797e7dc1e6231e522bd849279cb1d31a", "html_url": "https://github.com/rust-lang/rust/commit/5d55009b797e7dc1e6231e522bd849279cb1d31a"}, {"sha": "fdbede7ad85d4ccdabc5da1cdaa41fa93fac2457", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdbede7ad85d4ccdabc5da1cdaa41fa93fac2457", "html_url": "https://github.com/rust-lang/rust/commit/fdbede7ad85d4ccdabc5da1cdaa41fa93fac2457"}], "stats": {"total": 194, "additions": 194, "deletions": 0}, "files": [{"sha": "4a3d69f5b6c661e29b25daf059cfb5b30b060d98", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d18dc3d2ab0e63be6ce00142d8cdced48447782c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18dc3d2ab0e63be6ce00142d8cdced48447782c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=d18dc3d2ab0e63be6ce00142d8cdced48447782c", "patch": "@@ -42,6 +42,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_parentheses(err, expr);\n         self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected);\n+        self.suggest_copied_or_cloned(err, expr, expr_ty, expected);\n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);"}, {"sha": "d8527b9267e50dc293b9b55527cbd2f89bef0aa1", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d18dc3d2ab0e63be6ce00142d8cdced48447782c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18dc3d2ab0e63be6ce00142d8cdced48447782c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=d18dc3d2ab0e63be6ce00142d8cdced48447782c", "patch": "@@ -17,6 +17,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, IsSuggestable, Subst, ToPredicate, Ty};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -925,6 +926,69 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub(crate) fn suggest_copied_or_cloned(\n+        &self,\n+        diag: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expr_ty: Ty<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+    ) {\n+        let ty::Adt(adt_def, substs) = expr_ty.kind() else { return; };\n+        let ty::Adt(expected_adt_def, expected_substs) = expected_ty.kind() else { return; };\n+        if adt_def != expected_adt_def {\n+            return;\n+        }\n+\n+        let mut suggest_copied_or_cloned = || {\n+            let expr_inner_ty = substs.type_at(0);\n+            let expected_inner_ty = expected_substs.type_at(0);\n+            if let ty::Ref(_, ty, hir::Mutability::Not) = expr_inner_ty.kind()\n+                && self.can_eq(self.param_env, *ty, expected_inner_ty).is_ok()\n+            {\n+                let def_path = self.tcx.def_path_str(adt_def.did());\n+                if self.type_is_copy_modulo_regions(self.param_env, *ty, expr.span) {\n+                    diag.span_suggestion_verbose(\n+                        expr.span.shrink_to_hi(),\n+                        format!(\n+                            \"use `{def_path}::copied` to copy the value inside the `{def_path}`\"\n+                        ),\n+                        \".copied()\",\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else if let Some(clone_did) = self.tcx.lang_items().clone_trait()\n+                    && rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions(\n+                        self,\n+                        self.param_env,\n+                        *ty,\n+                        clone_did,\n+                        expr.span\n+                    )\n+                {\n+                    diag.span_suggestion_verbose(\n+                        expr.span.shrink_to_hi(),\n+                        format!(\n+                            \"use `{def_path}::cloned` to clone the value inside the `{def_path}`\"\n+                        ),\n+                        \".cloned()\",\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+        };\n+\n+        if let Some(result_did) = self.tcx.get_diagnostic_item(sym::Result)\n+            && adt_def.did() == result_did\n+            // Check that the error types are equal\n+            && self.can_eq(self.param_env, substs.type_at(1), expected_substs.type_at(1)).is_ok()\n+        {\n+            suggest_copied_or_cloned();\n+        } else if let Some(option_did) = self.tcx.get_diagnostic_item(sym::Option)\n+            && adt_def.did() == option_did\n+        {\n+            suggest_copied_or_cloned();\n+        }\n+    }\n+\n     /// Suggest wrapping the block in square brackets instead of curly braces\n     /// in case the block was mistaken array syntax, e.g. `{ 1 }` -> `[ 1 ]`.\n     pub(crate) fn suggest_block_to_brackets("}, {"sha": "f801403feec4f65404978296d52edbb31f5e296d", "filename": "src/test/ui/suggestions/copied-and-cloned.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d18dc3d2ab0e63be6ce00142d8cdced48447782c/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d18dc3d2ab0e63be6ce00142d8cdced48447782c/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.fixed?ref=d18dc3d2ab0e63be6ce00142d8cdced48447782c", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+fn expect<T>(_: T) {}\n+\n+fn main() {\n+    let x = Some(&());\n+    expect::<Option<()>>(x.copied());\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Option::copied` to copy the value inside the `Option`\n+    let x = Ok(&());\n+    expect::<Result<(), ()>>(x.copied());\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Result::copied` to copy the value inside the `Result`\n+    let s = String::new();\n+    let x = Some(&s);\n+    expect::<Option<String>>(x.cloned());\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Option::cloned` to clone the value inside the `Option`\n+    let x = Ok(&s);\n+    expect::<Result<String, ()>>(x.cloned());\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Result::cloned` to clone the value inside the `Result`\n+}"}, {"sha": "640450b76552723ea2de2f38f265d3edded710b1", "filename": "src/test/ui/suggestions/copied-and-cloned.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d18dc3d2ab0e63be6ce00142d8cdced48447782c/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18dc3d2ab0e63be6ce00142d8cdced48447782c/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.rs?ref=d18dc3d2ab0e63be6ce00142d8cdced48447782c", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+fn expect<T>(_: T) {}\n+\n+fn main() {\n+    let x = Some(&());\n+    expect::<Option<()>>(x);\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Option::copied` to copy the value inside the `Option`\n+    let x = Ok(&());\n+    expect::<Result<(), ()>>(x);\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Result::copied` to copy the value inside the `Result`\n+    let s = String::new();\n+    let x = Some(&s);\n+    expect::<Option<String>>(x);\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Option::cloned` to clone the value inside the `Option`\n+    let x = Ok(&s);\n+    expect::<Result<String, ()>>(x);\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Result::cloned` to clone the value inside the `Result`\n+}"}, {"sha": "a6336281b407265dd26c90a8b5b0d598679a76ea", "filename": "src/test/ui/suggestions/copied-and-cloned.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d18dc3d2ab0e63be6ce00142d8cdced48447782c/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d18dc3d2ab0e63be6ce00142d8cdced48447782c/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.stderr?ref=d18dc3d2ab0e63be6ce00142d8cdced48447782c", "patch": "@@ -0,0 +1,83 @@\n+error[E0308]: mismatched types\n+  --> $DIR/copied-and-cloned.rs:7:26\n+   |\n+LL |     expect::<Option<()>>(x);\n+   |     -------------------- ^ expected `()`, found `&()`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected enum `Option<()>`\n+              found enum `Option<&()>`\n+note: function defined here\n+  --> $DIR/copied-and-cloned.rs:3:4\n+   |\n+LL | fn expect<T>(_: T) {}\n+   |    ^^^^^^    ----\n+help: use `Option::copied` to copy the value inside the `Option`\n+   |\n+LL |     expect::<Option<()>>(x.copied());\n+   |                           +++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/copied-and-cloned.rs:11:30\n+   |\n+LL |     expect::<Result<(), ()>>(x);\n+   |     ------------------------ ^ expected `()`, found `&()`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected enum `Result<(), ()>`\n+              found enum `Result<&(), _>`\n+note: function defined here\n+  --> $DIR/copied-and-cloned.rs:3:4\n+   |\n+LL | fn expect<T>(_: T) {}\n+   |    ^^^^^^    ----\n+help: use `Result::copied` to copy the value inside the `Result`\n+   |\n+LL |     expect::<Result<(), ()>>(x.copied());\n+   |                               +++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/copied-and-cloned.rs:16:30\n+   |\n+LL |     expect::<Option<String>>(x);\n+   |     ------------------------ ^ expected struct `String`, found `&String`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected enum `Option<String>`\n+              found enum `Option<&String>`\n+note: function defined here\n+  --> $DIR/copied-and-cloned.rs:3:4\n+   |\n+LL | fn expect<T>(_: T) {}\n+   |    ^^^^^^    ----\n+help: use `Option::cloned` to clone the value inside the `Option`\n+   |\n+LL |     expect::<Option<String>>(x.cloned());\n+   |                               +++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/copied-and-cloned.rs:20:34\n+   |\n+LL |     expect::<Result<String, ()>>(x);\n+   |     ---------------------------- ^ expected struct `String`, found `&String`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected enum `Result<String, ()>`\n+              found enum `Result<&String, _>`\n+note: function defined here\n+  --> $DIR/copied-and-cloned.rs:3:4\n+   |\n+LL | fn expect<T>(_: T) {}\n+   |    ^^^^^^    ----\n+help: use `Result::cloned` to clone the value inside the `Result`\n+   |\n+LL |     expect::<Result<String, ()>>(x.cloned());\n+   |                                   +++++++++\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}