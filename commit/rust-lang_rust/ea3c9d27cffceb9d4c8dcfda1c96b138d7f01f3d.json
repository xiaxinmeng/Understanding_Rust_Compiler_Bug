{"sha": "ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhM2M5ZDI3Y2ZmY2ViOWQ0YzhkY2ZkYTFjOTZiMTM4ZDdmMDFmM2Q=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-16T22:40:12Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-19T18:51:40Z"}, "message": "Implement an insertion-order preserving, efficient multi-map", "tree": {"sha": "7093720c45183814a25b22ba26cb73a2eac3c3dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7093720c45183814a25b22ba26cb73a2eac3c3dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d", "html_url": "https://github.com/rust-lang/rust/commit/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7710ae0e2653e0fa14ff9b7797ed29340e0284a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7710ae0e2653e0fa14ff9b7797ed29340e0284a8", "html_url": "https://github.com/rust-lang/rust/commit/7710ae0e2653e0fa14ff9b7797ed29340e0284a8"}], "stats": {"total": 250, "additions": 249, "deletions": 1}, "files": [{"sha": "8c42b74b85aef4f0c35a45936ae639c785f52d7d", "filename": "src/librustc_data_structures/sorted_map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d/src%2Flibrustc_data_structures%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d/src%2Flibrustc_data_structures%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map.rs?ref=ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d", "patch": "@@ -4,6 +4,10 @@ use std::iter::FromIterator;\n use std::mem;\n use std::ops::{Bound, Index, IndexMut, RangeBounds};\n \n+mod index_map;\n+\n+pub use index_map::SortedIndexMultiMap;\n+\n /// `SortedMap` is a data structure with similar characteristics as BTreeMap but\n /// slightly different trade-offs: lookup, insertion, and removal are O(log(N))\n /// and elements can be iterated in order cheaply."}, {"sha": "b7005ccdc998be72cb0276c20d2de5917e211a7d", "filename": "src/librustc_data_structures/sorted_map/index_map.rs", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d/src%2Flibrustc_data_structures%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d/src%2Flibrustc_data_structures%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map%2Findex_map.rs?ref=ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d", "patch": "@@ -0,0 +1,218 @@\n+//! A variant of `SortedMap` that preserves insertion order.\n+\n+use std::borrow::Borrow;\n+use std::hash::{Hash, Hasher};\n+use std::iter::FromIterator;\n+\n+use crate::stable_hasher::{HashStable, StableHasher};\n+use rustc_index::vec::{Idx, IndexVec};\n+\n+/// An indexed multi-map that preserves insertion order while permitting both `O(log n)` lookup of\n+/// an item by key and `O(1)` lookup by index.\n+///\n+/// This data structure is a hybrid of an [`IndexVec`] and a [`SortedMap`]. Like `IndexVec`,\n+/// `SortedIndexMultiMap` assigns a typed index to each item while preserving insertion order.\n+/// Like `SortedMap`, `SortedIndexMultiMap` has efficient lookup of items by key. However, this\n+/// is accomplished by sorting an array of item indices instead of the items themselves.\n+///\n+/// Unlike `SortedMap`, this data structure can hold multiple equivalent items at once, so the\n+/// `get_by_key` method and its variants return an iterator instead of an `Option`. Equivalent\n+/// items will be yielded in insertion order.\n+///\n+/// Unlike a general-purpose map like `BTreeSet` or `HashSet`, `SortedMap` and\n+/// `SortedIndexMultiMap` require `O(n)` time to insert a single item. This is because we may need\n+/// to insert into the middle of the sorted array. Users should avoid mutating this data structure\n+/// in-place.\n+///\n+/// [`IndexVec`]: ../../rustc_index/vec/struct.IndexVec.html\n+/// [`SortedMap`]: ../sorted_map/struct.SortedMap.html\n+#[derive(Clone, Debug)]\n+pub struct SortedIndexMultiMap<I: Idx, K, V> {\n+    /// The elements of the map in insertion order.\n+    items: IndexVec<I, (K, V)>,\n+\n+    /// Indices of the items in the set, sorted by the item's key.\n+    idx_sorted_by_item_key: Vec<I>,\n+}\n+\n+impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n+    pub fn new() -> Self {\n+        SortedIndexMultiMap { items: IndexVec::new(), idx_sorted_by_item_key: Vec::new() }\n+    }\n+\n+    pub fn len(&self) -> usize {\n+        self.items.len()\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.items.is_empty()\n+    }\n+\n+    /// Returns an iterator over the items in the map in insertion order.\n+    pub fn into_iter(self) -> impl DoubleEndedIterator<Item = (K, V)> {\n+        self.items.into_iter()\n+    }\n+\n+    /// Returns an iterator over the items in the map in insertion order along with their indices.\n+    pub fn into_iter_enumerated(self) -> impl DoubleEndedIterator<Item = (I, (K, V))> {\n+        self.items.into_iter_enumerated()\n+    }\n+\n+    /// Returns an iterator over the items in the map in insertion order.\n+    pub fn iter(&self) -> impl '_ + DoubleEndedIterator<Item = (&K, &V)> {\n+        self.items.iter().map(|(ref k, ref v)| (k, v))\n+    }\n+\n+    /// Returns an iterator over the items in the map in insertion order along with their indices.\n+    pub fn iter_enumerated(&self) -> impl '_ + DoubleEndedIterator<Item = (I, (&K, &V))> {\n+        self.items.iter_enumerated().map(|(i, (ref k, ref v))| (i, (k, v)))\n+    }\n+\n+    /// Returns the item in the map with the given index.\n+    pub fn get(&self, idx: I) -> Option<&(K, V)> {\n+        self.items.get(idx)\n+    }\n+\n+    /// Returns an iterator over the items in the map that are equal to `key`.\n+    ///\n+    /// If there are multiple items that are equivalent to `key`, they will be yielded in\n+    /// insertion order.\n+    pub fn get_by_key<Q: 'a>(&'a self, key: &Q) -> impl 'a + Iterator<Item = &'a V>\n+    where\n+        Q: Ord + ?Sized,\n+        K: Borrow<Q>,\n+    {\n+        self.get_by_key_enumerated(key).map(|(_, v)| v)\n+    }\n+\n+    /// Returns an iterator over the items in the map that are equal to `key` along with their\n+    /// indices.\n+    ///\n+    /// If there are multiple items that are equivalent to `key`, they will be yielded in\n+    /// insertion order.\n+    pub fn get_by_key_enumerated<Q>(&self, key: &Q) -> impl '_ + Iterator<Item = (I, &V)>\n+    where\n+        Q: Ord + ?Sized,\n+        K: Borrow<Q>,\n+    {\n+        // FIXME: This should be in the standard library as `equal_range`. See rust-lang/rfcs#2184.\n+        match self.binary_search_idx(key) {\n+            Err(_) => self.idxs_to_items_enumerated(&[]),\n+\n+            Ok(idx) => {\n+                let start = self.find_lower_bound(key, idx);\n+                let end = self.find_upper_bound(key, idx);\n+                self.idxs_to_items_enumerated(&self.idx_sorted_by_item_key[start..end])\n+            }\n+        }\n+    }\n+\n+    fn binary_search_idx<Q>(&self, key: &Q) -> Result<usize, usize>\n+    where\n+        Q: Ord + ?Sized,\n+        K: Borrow<Q>,\n+    {\n+        self.idx_sorted_by_item_key.binary_search_by(|&idx| self.items[idx].0.borrow().cmp(key))\n+    }\n+\n+    /// Returns the index into the `idx_sorted_by_item_key` array of the first item equal to\n+    /// `key`.\n+    ///\n+    /// `initial` must be an index into that same array for an item that is equal to `key`.\n+    fn find_lower_bound<Q>(&self, key: &Q, initial: usize) -> usize\n+    where\n+        Q: Ord + ?Sized,\n+        K: Borrow<Q>,\n+    {\n+        debug_assert!(self.items[self.idx_sorted_by_item_key[initial]].0.borrow() == key);\n+\n+        // FIXME: At present, this uses linear search, meaning lookup is only `O(log n)` if duplicate\n+        // entries are rare. It would be better to start with a linear search for the common case but\n+        // fall back to an exponential search if many duplicates are found. This applies to\n+        // `upper_bound` as well.\n+        let mut start = initial;\n+        while start != 0 && self.items[self.idx_sorted_by_item_key[start - 1]].0.borrow() == key {\n+            start -= 1;\n+        }\n+\n+        start\n+    }\n+\n+    /// Returns the index into the `idx_sorted_by_item_key` array of the first item greater than\n+    /// `key`, or `self.len()` if no such item exists.\n+    ///\n+    /// `initial` must be an index into that same array for an item that is equal to `key`.\n+    fn find_upper_bound<Q>(&self, key: &Q, initial: usize) -> usize\n+    where\n+        Q: Ord + ?Sized,\n+        K: Borrow<Q>,\n+    {\n+        debug_assert!(self.items[self.idx_sorted_by_item_key[initial]].0.borrow() == key);\n+\n+        // See the FIXME for `find_lower_bound`.\n+        let mut end = initial + 1;\n+        let len = self.items.len();\n+        while end < len && self.items[self.idx_sorted_by_item_key[end]].0.borrow() == key {\n+            end += 1;\n+        }\n+\n+        end\n+    }\n+\n+    fn idxs_to_items_enumerated(&'a self, idxs: &'a [I]) -> impl 'a + Iterator<Item = (I, &'a V)> {\n+        idxs.iter().map(move |&idx| (idx, &self.items[idx].1))\n+    }\n+}\n+\n+impl<I: Idx, K: Eq, V: Eq> Eq for SortedIndexMultiMap<I, K, V> {}\n+impl<I: Idx, K: PartialEq, V: PartialEq> PartialEq for SortedIndexMultiMap<I, K, V> {\n+    fn eq(&self, other: &Self) -> bool {\n+        // No need to compare the sorted index. If the items are the same, the index will be too.\n+        self.items == other.items\n+    }\n+}\n+\n+impl<I: Idx, K, V> Hash for SortedIndexMultiMap<I, K, V>\n+where\n+    K: Hash,\n+    V: Hash,\n+{\n+    fn hash<H: Hasher>(&self, hasher: &mut H) {\n+        self.items.hash(hasher)\n+    }\n+}\n+impl<I: Idx, K, V, C> HashStable<C> for SortedIndexMultiMap<I, K, V>\n+where\n+    K: HashStable<C>,\n+    V: HashStable<C>,\n+{\n+    fn hash_stable(&self, ctx: &mut C, hasher: &mut StableHasher) {\n+        self.items.hash_stable(ctx, hasher)\n+    }\n+}\n+\n+impl<I: Idx, K: Ord, V> FromIterator<(K, V)> for SortedIndexMultiMap<I, K, V> {\n+    fn from_iter<J>(iter: J) -> Self\n+    where\n+        J: IntoIterator<Item = (K, V)>,\n+    {\n+        let items = IndexVec::from_iter(iter);\n+        let mut idx_sorted_by_item_key: Vec<_> = items.indices().collect();\n+\n+        // `sort_by_key` is stable, so insertion order is preserved for duplicate items.\n+        idx_sorted_by_item_key.sort_by_key(|&idx| &items[idx].0);\n+\n+        SortedIndexMultiMap { items, idx_sorted_by_item_key }\n+    }\n+}\n+\n+impl<I: Idx, K, V> std::ops::Index<I> for SortedIndexMultiMap<I, K, V> {\n+    type Output = V;\n+\n+    fn index(&self, idx: I) -> &Self::Output {\n+        &self.items[idx].1\n+    }\n+}\n+\n+#[cfg(tests)]\n+mod tests;"}, {"sha": "7d91e1fdcef6a3f1db929218752e9a8cfa316416", "filename": "src/librustc_data_structures/sorted_map/tests.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d/src%2Flibrustc_data_structures%2Fsorted_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d/src%2Flibrustc_data_structures%2Fsorted_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map%2Ftests.rs?ref=ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d", "patch": "@@ -1,4 +1,30 @@\n-use super::SortedMap;\n+use super::{SortedIndexMultiMap, SortedMap};\n+\n+#[test]\n+fn test_sorted_index_multi_map() {\n+    let entries: Vec<_> = vec![(2, 0), (1, 0), (2, 1), (3, 0), (2, 2)];\n+    let set: SortedIndexMultiMap<usize, _, _> = entries.iter().copied().collect();\n+\n+    // Insertion order is preserved.\n+    assert!(entries.iter().map(|(ref k, ref v)| (k, v)).eq(set.iter()));\n+\n+    // Indexing\n+    for (i, expect) in entries.iter().enumerate() {\n+        assert_eq!(set[i], expect.1);\n+    }\n+\n+    // `get_by_key` works.\n+    assert_eq!(set.get_by_key(&3).copied().collect::<Vec<_>>(), vec![0]);\n+    assert!(set.get_by_key(&4).next().is_none());\n+\n+    // `get_by_key` returns items in insertion order.\n+    let twos: Vec<_> = set.get_by_key_enumerated(&2).collect();\n+    let idxs: Vec<usize> = twos.iter().map(|(i, _)| *i).collect();\n+    let values: Vec<usize> = twos.iter().map(|(_, &v)| v).collect();\n+\n+    assert_eq!(idxs, vec![0, 2, 4]);\n+    assert_eq!(values, vec![0, 1, 2]);\n+}\n \n #[test]\n fn test_insert_and_iter() {"}]}