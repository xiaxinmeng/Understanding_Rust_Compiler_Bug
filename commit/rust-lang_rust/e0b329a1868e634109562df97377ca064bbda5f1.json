{"sha": "e0b329a1868e634109562df97377ca064bbda5f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYjMyOWExODY4ZTYzNDEwOTU2MmRmOTczNzdjYTA2NGJiZGE1ZjE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-24T12:52:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-28T17:59:57Z"}, "message": "rustc_metadata: Avoid some side effects during speculative crate resolution\n\nNamely, `update_extern_crate`.\n\nAlso, stop tracking visited crates in `update_extern_crate`, the rank check does the same thing (prevents visiting dependencies if the rank didn't change), but more precisely.", "tree": {"sha": "2e362fbe45d66f18a5b14edd44066a36dfd2708d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e362fbe45d66f18a5b14edd44066a36dfd2708d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0b329a1868e634109562df97377ca064bbda5f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b329a1868e634109562df97377ca064bbda5f1", "html_url": "https://github.com/rust-lang/rust/commit/e0b329a1868e634109562df97377ca064bbda5f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0b329a1868e634109562df97377ca064bbda5f1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4710ade6d384adc922ee423373739005dbc0330", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4710ade6d384adc922ee423373739005dbc0330", "html_url": "https://github.com/rust-lang/rust/commit/e4710ade6d384adc922ee423373739005dbc0330"}], "stats": {"total": 33, "additions": 5, "deletions": 28}, "files": [{"sha": "00f3f7f08fabaafdcd0501301cb76044fec1b175", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e0b329a1868e634109562df97377ca064bbda5f1/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b329a1868e634109562df97377ca064bbda5f1/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e0b329a1868e634109562df97377ca064bbda5f1", "patch": "@@ -13,7 +13,6 @@ use rustc::session::config::{Sanitizer, self};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc::session::search_paths::PathKind;\n use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoaderDyn};\n-use rustc::util::nodemap::FxHashSet;\n use rustc::hir::map::Definitions;\n use rustc::hir::def_id::LOCAL_CRATE;\n \n@@ -483,19 +482,13 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn update_extern_crate(&self,\n-                           cnum: CrateNum,\n-                           mut extern_crate: ExternCrate,\n-                           visited: &mut FxHashSet<(CrateNum, bool)>)\n-    {\n-        if !visited.insert((cnum, extern_crate.is_direct())) { return }\n-\n+    fn update_extern_crate(&self, cnum: CrateNum, extern_crate: ExternCrate) {\n         let cmeta = self.cstore.get_crate_data(cnum);\n         if cmeta.update_extern_crate(extern_crate) {\n-            // Propagate the extern crate info to dependencies.\n-            extern_crate.dependency_of = cnum;\n+            // Propagate the extern crate info to dependencies if it was updated.\n+            let extern_crate = ExternCrate { dependency_of: cnum, ..extern_crate };\n             for &dep_cnum in cmeta.dependencies().iter() {\n-                self.update_extern_crate(dep_cnum, extern_crate, visited);\n+                self.update_extern_crate(dep_cnum, extern_crate);\n             }\n         }\n     }\n@@ -935,7 +928,6 @@ impl<'a> CrateLoader<'a> {\n                         path_len,\n                         dependency_of: LOCAL_CRATE,\n                     },\n-                    &mut FxHashSet::default(),\n                 );\n                 cnum\n             }\n@@ -955,27 +947,12 @@ impl<'a> CrateLoader<'a> {\n                 path_len: usize::max_value(),\n                 dependency_of: LOCAL_CRATE,\n             },\n-            &mut FxHashSet::default(),\n         );\n \n         cnum\n     }\n \n     pub fn maybe_process_path_extern(&mut self, name: Symbol, span: Span) -> Option<CrateNum> {\n-        let cnum = self.maybe_resolve_crate(name, span, DepKind::Explicit, None).ok()?;\n-\n-        self.update_extern_crate(\n-            cnum,\n-            ExternCrate {\n-                src: ExternCrateSource::Path,\n-                span,\n-                // to have the least priority in `update_extern_crate`\n-                path_len: usize::max_value(),\n-                dependency_of: LOCAL_CRATE,\n-            },\n-            &mut FxHashSet::default(),\n-        );\n-\n-        Some(cnum)\n+        self.maybe_resolve_crate(name, span, DepKind::Explicit, None).ok()\n     }\n }"}]}