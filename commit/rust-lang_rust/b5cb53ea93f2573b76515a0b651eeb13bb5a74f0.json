{"sha": "b5cb53ea93f2573b76515a0b651eeb13bb5a74f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1Y2I1M2VhOTNmMjU3M2I3NjUxNWEwYjY1MWVlYjEzYmI1YTc0ZjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-16T12:36:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-16T12:36:09Z"}, "message": "tweak readme", "tree": {"sha": "193a7f6125a281a46093049148c0dc1b6a00cece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/193a7f6125a281a46093049148c0dc1b6a00cece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5cb53ea93f2573b76515a0b651eeb13bb5a74f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5cb53ea93f2573b76515a0b651eeb13bb5a74f0", "html_url": "https://github.com/rust-lang/rust/commit/b5cb53ea93f2573b76515a0b651eeb13bb5a74f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5cb53ea93f2573b76515a0b651eeb13bb5a74f0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc76b0d31d8ba013c499dd3a4ca69b37004795e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc76b0d31d8ba013c499dd3a4ca69b37004795e6", "html_url": "https://github.com/rust-lang/rust/commit/cc76b0d31d8ba013c499dd3a4ca69b37004795e6"}], "stats": {"total": 192, "additions": 135, "deletions": 57}, "files": [{"sha": "9504e433d12a26272900266ae49e3c282a80a357", "filename": "README.md", "status": "modified", "additions": 46, "deletions": 57, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/b5cb53ea93f2573b76515a0b651eeb13bb5a74f0/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5cb53ea93f2573b76515a0b651eeb13bb5a74f0/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b5cb53ea93f2573b76515a0b651eeb13bb5a74f0", "patch": "@@ -16,54 +16,28 @@ functionality is provided via a language server.\n \n ## Quick Start\n \n+Rust analyzer builds on stable Rust >= 1.29.0.\n+\n ```\n+# run tests\n $ cargo test\n-$ cargo parse < crates/libsyntax2/src/lib.rs\n-```\n \n-## Trying It Out\n+# show syntax tree of a Rust file\n+$ cargo run --package ra_cli parse < crates/ra_syntax/src/lib.rs\n \n-This installs experimental VS Code plugin\n-\n-```\n-$ cargo install-code\n+# show symbols of a Rust file\n+$ cargo run --package ra_cli symbols < crates/ra_syntax/src/lib.rs\n ```\n \n-It's better to remove existing Rust plugins to avoid interference.\n-Warning: plugin is not intended for general use, has a lot of rough\n-edges and missing features (notably, no code completion). That said,\n-while originally libsyntax2 was developed in IntelliJ, @matklad now\n-uses this plugin (and thus, libsytax2) to develop libsyntax2, and it\n-doesn't hurt too much :-)\n-\n-\n-### Features:\n-\n-* syntax highlighting (LSP does not have API for it, so impl is hacky\n-  and sometimes fall-backs to the horrible built-in highlighting)\n-\n-* commands (`ctrl+shift+p` or keybindings)\n-  - **Show Rust Syntax Tree** (use it to verify that plugin works)\n-  - **Rust Extend Selection** (works with multiple cursors)\n-  - **Rust Matching Brace** (knows the difference between `<` and `<`)\n-  - **Rust Parent Module**\n-  - **Rust Join Lines** (deals with trailing commas)\n+To try out the language server, see [these\n+instructions](./editors/README.md). Please note that the server is not\n+ready for general use yet. If you are looking for a Rust IDE that\n+works, use [IntelliJ\n+Rust](https://github.com/intellij-rust/intellij-rust) or\n+[RLS](https://github.com/rust-lang-nursery/rls). That being said, the\n+basic stuff works, and rust analyzer is developed in the rust analyzer\n+powered editor.\n \n-* **Go to symbol in file**\n-\n-* **Go to symbol in workspace**\n-  - `#Foo` searches for `Foo` type in the current workspace\n-  - `#foo#` searches for `foo` function in the current workspace\n-  - `#Foo*` searches for `Foo` type among dependencies, excluding `stdlib`\n-  - Sorry for a weired UI, neither LSP, not VSCode have any sane API for filtering! :)\n-\n-* code actions:\n-  - Flip `,` in comma separated lists\n-  - Add `#[derive]` to struct/enum\n-  - Add `impl` block to struct/enum\n-  - Run tests at caret\n-\n-* **Go to definition** (\"correct\" for `mod foo;` decls, index-based for functions).\n \n ## Current Status and Plans\n \n@@ -104,7 +78,11 @@ existing rustc.\n \n ## Code Walk-Through\n \n-### `crates/libsyntax2`\n+### `crates/ra_syntax`\n+\n+Rust syntax tree structure and parser. See\n+[RFC](https://github.com/rust-lang/rfcs/pull/2256) for some design\n+notes.\n \n - `yellow`, red/green syntax tree, heavily inspired [by this](https://github.com/apple/swift/tree/ab68f0d4cbf99cdfa672f8ffe18e433fddc8b371/lib/Syntax)\n - `grammar`, the actual parser\n@@ -117,24 +95,35 @@ existing rustc.\n   `Visitor` works, you understand libsyntax2).\n \n \n-### `crates/libeditor`\n+### `crates/ra_editor`\n+\n+All IDE features which can be implemented if you only have access to a\n+single file. `ra_editor` could be used to enhance editing of Rust code\n+without the need to fiddle with build-systems, file\n+synchronization and such.\n+\n+In a sense, `ra_editor` is just a bunch of pure functions which take a\n+syntax tree as an input.\n+\n+### `crates/salsa`\n \n-Most of IDE features leave here, unlike `libanalysis`, `libeditor` is\n-single-file and is basically a bunch of pure functions.\n+An implementation of red-green incremental compilation algorithm from\n+rust compiler. It makes all rust-analyzer features on-demand.\n \n \n-### `crates/libanalysis`\n+### `crates/ra_analysis`\n \n A stateful library for analyzing many Rust files as they change.\n-`WorldState` is a mutable entity (clojure's atom) which holds current\n-state, incorporates changes and handles out `World`s --- immutable\n-consistent snapshots of `WorldState`, which actually power analysis.\n+`AnalysisHost` is a mutable entity (clojure's atom) which holds\n+current state, incorporates changes and handles out `Analysis` --- an\n+immutable consistent snapshot of world state at a point in time, which\n+actually powers analysis.\n \n \n-### `crates/server`\n+### `crates/ra_lsp_server`\n \n-An LSP implementation which uses `libanalysis` for managing state and\n-`libeditor` for actually doing useful stuff.\n+An LSP implementation which uses `ra_analysis` for managing state and\n+`ra_editor` for actually doing useful stuff.\n \n \n ### `crates/cli`\n@@ -149,7 +138,7 @@ Code-gen tasks, used to develop libsyntax2:\n - `cargo gen-tests` -- collect inline tests from grammar\n - `cargo install-code` -- build and install VS Code extension and server\n \n-### `code`\n+### `editors/code`\n \n VS Code plugin\n \n@@ -159,10 +148,10 @@ VS Code plugin\n Non-incremental, but seems pretty fast:\n \n ```\n-$ cargo build --release --package cli\n+$ cargo build --release --package ra_cli\n $ wc -l ~/projects/rust/src/libsyntax/parse/parser.rs\n 7546 /home/matklad/projects/rust/src/libsyntax/parse/parser.rs\n-$ ./target/release/cli parse < ~/projects/rust/src/libsyntax/parse/parser.rs --no-dump  > /dev/null\n+$ ./target/release/ra_cli parse < ~/projects/rust/src/libsyntax/parse/parser.rs --no-dump  > /dev/null\n parsing: 21.067065ms\n ```\n \n@@ -175,7 +164,7 @@ parsing: 21.067065ms\n \n ## License\n \n-libsyntax2 is primarily distributed under the terms of both the MIT license\n-and the Apache License (Version 2.0).\n+Rust analyzer is primarily distributed under the terms of both the MIT\n+license and the Apache License (Version 2.0).\n \n See LICENSE-APACHE and LICENSE-MIT for details."}, {"sha": "798c08581cc5d73fac15351a162270d2453675ec", "filename": "editors/README.md", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/b5cb53ea93f2573b76515a0b651eeb13bb5a74f0/editors%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5cb53ea93f2573b76515a0b651eeb13bb5a74f0/editors%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2FREADME.md?ref=b5cb53ea93f2573b76515a0b651eeb13bb5a74f0", "patch": "@@ -0,0 +1,89 @@\n+To install experimental VS Code plugin:\n+\n+```\n+$ cargo install-code\n+```\n+\n+This will run `cargo install --packge ra_lsp_server` to install the\n+server binary into `~/.cargo/bin`, and then will build and install\n+plugin from `editors/code`. See\n+[this](https://github.com/matklad/rust-analyzer/blob/cc76b0d31d8ba013c499dd3a4ca69b37004795e6/crates/tools/src/main.rs#L192)\n+for details\n+\n+It's better to remove existing Rust plugins to avoid interference.\n+\n+### Features:\n+\n+* syntax highlighting (LSP does not have API for it, so impl is hacky\n+  and sometimes fall-backs to the horrible built-in highlighting)\n+  \n+* **Go to symbol in workspace** (`ctrl+t`)\n+  - `#Foo` searches for `Foo` type in the current workspace\n+  - `#foo#` searches for `foo` function in the current workspace\n+  - `#Foo*` searches for `Foo` type among dependencies, excluding `stdlib`\n+  - Sorry for a weired UI, neither LSP, not VSCode have any sane API for filtering! :)\n+\n+* **Go to symbol in file** (`alt+shift+o`)\n+\n+* **Go to definition** (\"correct\" for `mod foo;` decls, approximate for other things).\n+\n+* commands (`ctrl+shift+p` or keybindings)\n+  - **Show Rust Syntax Tree** (use it to verify that plugin works)\n+  - **Rust Extend Selection**. Extends the current selection to the\n+    encompassing syntactic construct (expression, statement, item,\n+    module, etc). It works with multiple cursors. Do bind this command\n+    to a key, its super-useful!\n+  - **Rust Matching Brace**. If the cursor is on any brace\n+    (`<>(){}[]`) which is a part of a brace-pair, moves cursor to the\n+    matching brace.\n+  - **Rust Parent Module**. Navigate to the parent module of the current module\n+  - **Rust Join Lines**. Join selected lines into one, smartly fixing\n+    up whitespace and trailing commas.\n+  - **Run test at caret**. When cursor is inside a function marked\n+    `#[test]`, this action runs this specific test. If the cursor is\n+    outside of the test function, this re-runs the last test. Do bind\n+    this to a shortcut!\n+\n+* code actions (use `ctrl+.` to activate).\n+\n+`<|>` signifies cursor position\n+\n+- Flip `,`\n+\n+```\n+// before:\n+fn foo(x: usize,<|> dim: (usize, usize))\n+// after:\n+fn foo(dim: (usize, usize), x: usize)\n+```\n+\n+- Add `#[derive]`\n+\n+```\n+// before:\n+struct Foo {\n+    <|>x: i32\n+}\n+// after:\n+#[derive(<|>)]\n+struct Foo {\n+    x: i32\n+}\n+```\n+\n+- Add `impl`\n+\n+```\n+// before:\n+struct Foo<'a, T: Debug> {\n+    <|>t: T\n+}\n+// after:\n+struct Foo<'a, T: Debug> {\n+    t: T\n+}\n+\n+impl<'a, T: Debug> Foo<'a, T> {\n+    <|>\n+}\n+```"}]}