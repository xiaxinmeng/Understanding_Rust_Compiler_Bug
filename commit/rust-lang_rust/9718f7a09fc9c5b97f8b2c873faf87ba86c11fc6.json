{"sha": "9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MThmN2EwOWZjOWM1Yjk3ZjhiMmM4NzNmYWY4N2JhODZjMTFmYzY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T01:59:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T01:59:37Z"}, "message": "Rollup merge of #64005 - ecstatic-morse:is-indirect, r=oli-obk\n\nAdd a `Place::is_indirect` method to determine whether a `Place` contains a `Deref` projection\n\nWorking on #63860 requires tracking some property about each local. This requires differentiating `Place`s like `x` and `x.field[index]` from ones like `*x` and `*x.field`, since the first two will always access the same region of memory as `x` while the latter two may access any region of memory. This functionality is duplicated in various places across the compiler. This PR adds a helper method to `Place` which determines whether that `Place` has a `Deref` projection at any point and changes some existing code to use the new method.\n\nI've not converted `qualify_consts.rs` to use the new method, since it's not a trivial conversion and it will get replaced anyway by #63860. There may be other potential uses besides the two I change in this PR.\n\nr? @oli-obk", "tree": {"sha": "143556b1e9f6ff0f837ff9407e860ea2fdc2c095", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/143556b1e9f6ff0f837ff9407e860ea2fdc2c095"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcGwKCRBK7hj4Ov3rIwAAdHIIACgxFsa2wCR13cVqyKjI+ZcG\nRUaqUsJCxIoUPyAXzgcqVBoAu1EAe3u5xhUrJIA+9wfw+EPOvLm0oMfggiEvRZwW\nnHFEzvhL6P8+gqIH3mVN9FLxTSEnKrIQb6PQ+kQ60TCiDg1XExZk6W5O8q1uRY7Y\ng0V5qrRt9m8fAjti+kymhuqEFeapw1gqn5FxVPhDFVslPBChdgJ8iGxU233GvClf\n4pEAQfXB17V3DHiUpXCQ5FzoZ/KB3FfYbBWFICy6cJcCQ1VaG6Zyo85W9SnMXG9o\nVS1sYZ5VTq84dIuzoWTGhF1Wx7bBxVK4Xw06GJrbeLIF2C3xHTj768kfL43qing=\n=Nn1o\n-----END PGP SIGNATURE-----\n", "payload": "tree 143556b1e9f6ff0f837ff9407e860ea2fdc2c095\nparent d1d511df8c56af39bc491afcd7e896ed4202fdd4\nparent 96ac02b8b3aeebc463d434c57b4a2ada9a3003e6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567648777 +0200\ncommitter GitHub <noreply@github.com> 1567648777 +0200\n\nRollup merge of #64005 - ecstatic-morse:is-indirect, r=oli-obk\n\nAdd a `Place::is_indirect` method to determine whether a `Place` contains a `Deref` projection\n\nWorking on #63860 requires tracking some property about each local. This requires differentiating `Place`s like `x` and `x.field[index]` from ones like `*x` and `*x.field`, since the first two will always access the same region of memory as `x` while the latter two may access any region of memory. This functionality is duplicated in various places across the compiler. This PR adds a helper method to `Place` which determines whether that `Place` has a `Deref` projection at any point and changes some existing code to use the new method.\n\nI've not converted `qualify_consts.rs` to use the new method, since it's not a trivial conversion and it will get replaced anyway by #63860. There may be other potential uses besides the two I change in this PR.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6", "html_url": "https://github.com/rust-lang/rust/commit/9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1d511df8c56af39bc491afcd7e896ed4202fdd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d511df8c56af39bc491afcd7e896ed4202fdd4", "html_url": "https://github.com/rust-lang/rust/commit/d1d511df8c56af39bc491afcd7e896ed4202fdd4"}, {"sha": "96ac02b8b3aeebc463d434c57b4a2ada9a3003e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/96ac02b8b3aeebc463d434c57b4a2ada9a3003e6", "html_url": "https://github.com/rust-lang/rust/commit/96ac02b8b3aeebc463d434c57b4a2ada9a3003e6"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "8956cbb2baefc360b874c65340263b3d8918d1c8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6", "patch": "@@ -1808,6 +1808,23 @@ pub enum ProjectionElem<V, T> {\n     Downcast(Option<Symbol>, VariantIdx),\n }\n \n+impl<V, T> ProjectionElem<V, T> {\n+    /// Returns `true` if the target of this projection may refer to a different region of memory\n+    /// than the base.\n+    fn is_indirect(&self) -> bool {\n+        match self {\n+            Self::Deref => true,\n+\n+            | Self::Field(_, _)\n+            | Self::Index(_)\n+            | Self::ConstantIndex { .. }\n+            | Self::Subslice { .. }\n+            | Self::Downcast(_, _)\n+            => false\n+        }\n+    }\n+}\n+\n /// Alias for projections as they appear in places, where the base is a place\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<Local, Ty<'tcx>>;\n@@ -1869,6 +1886,14 @@ impl<'tcx> Place<'tcx> {\n         }\n     }\n \n+    /// Returns `true` if this `Place` contains a `Deref` projection.\n+    ///\n+    /// If `Place::is_indirect` returns false, the caller knows that the `Place` refers to the\n+    /// same region of memory as its base.\n+    pub fn is_indirect(&self) -> bool {\n+        self.iterate(|_, mut projections| projections.any(|proj| proj.elem.is_indirect()))\n+    }\n+\n     /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or\n     /// a single deref of a local.\n     //"}, {"sha": "bac08090817d952d98ca59d7be60294a8d3f343c", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6", "patch": "@@ -3,7 +3,7 @@ use crate::borrow_check::places_conflict;\n use crate::borrow_check::AccessDepth;\n use crate::dataflow::indexes::BorrowIndex;\n use rustc::mir::{BasicBlock, Location, Body, Place, PlaceBase};\n-use rustc::mir::{ProjectionElem, BorrowKind};\n+use rustc::mir::BorrowKind;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::graph::dominators::Dominators;\n \n@@ -133,20 +133,11 @@ pub(super) fn is_active<'tcx>(\n /// Determines if a given borrow is borrowing local data\n /// This is called for all Yield statements on movable generators\n pub(super) fn borrow_of_local_data(place: &Place<'_>) -> bool {\n-    place.iterate(|place_base, place_projection| {\n-        match place_base {\n-            PlaceBase::Static(..) => return false,\n-            PlaceBase::Local(..) => {},\n-        }\n-\n-        for proj in place_projection {\n-            // Reborrow of already borrowed data is ignored\n-            // Any errors will be caught on the initial borrow\n-            if proj.elem == ProjectionElem::Deref {\n-                return false;\n-            }\n-        }\n+    match place.base {\n+        PlaceBase::Static(_) => false,\n \n-        true\n-    })\n+        // Reborrow of already borrowed data is ignored\n+        // Any errors will be caught on the initial borrow\n+        PlaceBase::Local(_) => !place.is_indirect(),\n+    }\n }"}, {"sha": "1c43a553cc3c9edc681224df761c7f19f1cabe24", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=9718f7a09fc9c5b97f8b2c873faf87ba86c11fc6", "patch": "@@ -93,19 +93,10 @@ struct BorrowedLocalsVisitor<'gk> {\n }\n \n fn find_local(place: &Place<'_>) -> Option<Local> {\n-    place.iterate(|place_base, place_projection| {\n-        for proj in place_projection {\n-            if proj.elem == ProjectionElem::Deref {\n-                return None;\n-            }\n-        }\n-\n-        if let PlaceBase::Local(local) = place_base {\n-            Some(*local)\n-        } else {\n-            None\n-        }\n-    })\n+    match place.base {\n+        PlaceBase::Local(local) if !place.is_indirect() => Some(local),\n+        _ => None,\n+    }\n }\n \n impl<'tcx> Visitor<'tcx> for BorrowedLocalsVisitor<'_> {"}]}