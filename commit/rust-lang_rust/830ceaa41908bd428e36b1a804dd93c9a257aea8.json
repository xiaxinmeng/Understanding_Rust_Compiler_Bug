{"sha": "830ceaa41908bd428e36b1a804dd93c9a257aea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMGNlYWE0MTkwOGJkNDI4ZTM2YjFhODA0ZGQ5M2M5YTI1N2FlYTg=", "commit": {"author": {"name": "Arpad Borsos", "email": "arpad.borsos@googlemail.com", "date": "2020-12-06T12:57:37Z"}, "committer": {"name": "Arpad Borsos", "email": "arpad.borsos@googlemail.com", "date": "2020-12-19T12:22:24Z"}, "message": "Remap instrument-coverage line numbers in doctests\n\nThis uses the `SourceMap::doctest_offset_line` method to re-map line\nnumbers from doctests. Remapping columns is not yet done.\n\nPart of issue #79417.", "tree": {"sha": "300dd4817bf2f7890417671bf6421994bc605bc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/300dd4817bf2f7890417671bf6421994bc605bc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/830ceaa41908bd428e36b1a804dd93c9a257aea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/830ceaa41908bd428e36b1a804dd93c9a257aea8", "html_url": "https://github.com/rust-lang/rust/commit/830ceaa41908bd428e36b1a804dd93c9a257aea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/830ceaa41908bd428e36b1a804dd93c9a257aea8/comments", "author": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "html_url": "https://github.com/rust-lang/rust/commit/3d9ada686fb42bd036b3a4916526f413f1d5d1f8"}], "stats": {"total": 652, "additions": 596, "deletions": 56}, "files": [{"sha": "93133e9b7f06364b52f3b549b7714fae78d858ea", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -30,6 +30,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::DefId;\n+use rustc_span::source_map::SourceMap;\n use rustc_span::{CharPos, Pos, SourceFile, Span, Symbol};\n \n /// A simple error message wrapper for `coverage::Error`s.\n@@ -311,7 +312,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n                 self.mir_body,\n                 counter_kind,\n                 self.bcb_leader_bb(bcb),\n-                Some(make_code_region(file_name, &self.source_file, span, body_span)),\n+                Some(make_code_region(source_map, file_name, &self.source_file, span, body_span)),\n             );\n         }\n     }\n@@ -489,6 +490,7 @@ fn inject_intermediate_expression(mir_body: &mut mir::Body<'tcx>, expression: Co\n \n /// Convert the Span into its file name, start line and column, and end line and column\n fn make_code_region(\n+    source_map: &SourceMap,\n     file_name: Symbol,\n     source_file: &Lrc<SourceFile>,\n     span: Span,\n@@ -508,6 +510,8 @@ fn make_code_region(\n     } else {\n         source_file.lookup_file_pos(span.hi())\n     };\n+    let start_line = source_map.doctest_offset_line(&source_file.name, start_line);\n+    let end_line = source_map.doctest_offset_line(&source_file.name, end_line);\n     CodeRegion {\n         file_name,\n         start_line: start_line as u32,"}, {"sha": "fbef4d06709ec39bf88c79a408d4ace139b41c01", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -182,7 +182,7 @@ impl std::fmt::Display for FileName {\n         use FileName::*;\n         match *self {\n             Real(RealFileName::Named(ref path)) => write!(fmt, \"{}\", path.display()),\n-            // FIXME: might be nice to display both compoments of Devirtualized.\n+            // FIXME: might be nice to display both components of Devirtualized.\n             // But for now (to backport fix for issue #70924), best to not\n             // perturb diagnostics so its obvious test suite still works.\n             Real(RealFileName::Devirtualized { ref local_path, virtual_name: _ }) => {"}, {"sha": "a08ded926402f0627029640e59f4bf6bb2456913", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 49, "deletions": 26, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -247,9 +247,10 @@ fn run_test(\n     edition: Edition,\n     outdir: DirState,\n     path: PathBuf,\n+    test_id: &str,\n ) -> Result<(), TestFailure> {\n     let (test, line_offset, supports_color) =\n-        make_test(test, Some(cratename), as_test_harness, opts, edition);\n+        make_test(test, Some(cratename), as_test_harness, opts, edition, Some(test_id));\n \n     let output_file = outdir.path().join(\"rust_out\");\n \n@@ -387,6 +388,7 @@ crate fn make_test(\n     dont_insert_main: bool,\n     opts: &TestOptions,\n     edition: Edition,\n+    test_id: Option<&str>,\n ) -> (String, usize, bool) {\n     let (crate_attrs, everything_else, crates) = partition_source(s);\n     let everything_else = everything_else.trim();\n@@ -542,16 +544,40 @@ crate fn make_test(\n         prog.push_str(everything_else);\n     } else {\n         let returns_result = everything_else.trim_end().ends_with(\"(())\");\n+        // Give each doctest main function a unique name.\n+        // This is for example needed for the tooling around `-Z instrument-coverage`.\n+        let inner_fn_name = if let Some(test_id) = test_id {\n+            format!(\"_doctest_main_{}\", test_id)\n+        } else {\n+            \"_inner\".into()\n+        };\n         let (main_pre, main_post) = if returns_result {\n             (\n-                \"fn main() { fn _inner() -> Result<(), impl core::fmt::Debug> {\",\n-                \"}\\n_inner().unwrap() }\",\n+                format!(\n+                    \"fn main() {{ fn {}() -> Result<(), impl core::fmt::Debug> {{\\n\",\n+                    inner_fn_name\n+                ),\n+                format!(\"\\n}}; {}().unwrap() }}\", inner_fn_name),\n+            )\n+        } else if test_id.is_some() {\n+            (\n+                format!(\"fn main() {{ fn {}() {{\\n\", inner_fn_name),\n+                format!(\"\\n}}; {}() }}\", inner_fn_name),\n             )\n         } else {\n-            (\"fn main() {\\n\", \"\\n}\")\n+            (\"fn main() {\\n\".into(), \"\\n}\".into())\n         };\n-        prog.extend([main_pre, everything_else, main_post].iter().cloned());\n+        // Note on newlines: We insert a line/newline *before*, and *after*\n+        // the doctest and adjust the `line_offset` accordingly.\n+        // In the case of `-Z instrument-coverage`, this means that the generated\n+        // inner `main` function spans from the doctest opening codeblock to the\n+        // closing one. For example\n+        // /// ``` <- start of the inner main\n+        // /// <- code under doctest\n+        // /// ``` <- end of the inner main\n         line_offset += 1;\n+\n+        prog.extend([&main_pre, everything_else, &main_post].iter().cloned());\n     }\n \n     debug!(\"final doctest:\\n{}\", prog);\n@@ -749,28 +775,24 @@ impl Tester for Collector {\n             _ => PathBuf::from(r\"doctest.rs\"),\n         };\n \n+        // For example `module/file.rs` would become `module_file_rs`\n+        let file = filename\n+            .to_string()\n+            .chars()\n+            .map(|c| if c.is_ascii_alphanumeric() { c } else { '_' })\n+            .collect::<String>();\n+        let test_id = format!(\n+            \"{file}_{line}_{number}\",\n+            file = file,\n+            line = line,\n+            number = {\n+                // Increases the current test number, if this file already\n+                // exists or it creates a new entry with a test number of 0.\n+                self.visited_tests.entry((file.clone(), line)).and_modify(|v| *v += 1).or_insert(0)\n+            },\n+        );\n         let outdir = if let Some(mut path) = options.persist_doctests.clone() {\n-            // For example `module/file.rs` would become `module_file_rs`\n-            let folder_name = filename\n-                .to_string()\n-                .chars()\n-                .map(|c| if c == '\\\\' || c == '/' || c == '.' { '_' } else { c })\n-                .collect::<String>();\n-\n-            path.push(format!(\n-                \"{krate}_{file}_{line}_{number}\",\n-                krate = cratename,\n-                file = folder_name,\n-                line = line,\n-                number = {\n-                    // Increases the current test number, if this file already\n-                    // exists or it creates a new entry with a test number of 0.\n-                    self.visited_tests\n-                        .entry((folder_name.clone(), line))\n-                        .and_modify(|v| *v += 1)\n-                        .or_insert(0)\n-                },\n-            ));\n+            path.push(&test_id);\n \n             std::fs::create_dir_all(&path)\n                 .expect(\"Couldn't create directory for doctest executables\");\n@@ -817,6 +839,7 @@ impl Tester for Collector {\n                     edition,\n                     outdir,\n                     path,\n+                    &test_id,\n                 );\n \n                 if let Err(err) = res {"}, {"sha": "7c0df673c1b9eb5ff472557921353ebdafa7e1a6", "filename": "src/librustdoc/doctest/tests.rs", "status": "modified", "additions": 52, "deletions": 17, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest%2Ftests.rs?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -11,7 +11,7 @@ fn main() {\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 2));\n }\n \n@@ -26,7 +26,7 @@ fn main() {\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 2));\n }\n \n@@ -44,7 +44,7 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 3));\n }\n \n@@ -61,7 +61,7 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 2));\n }\n \n@@ -79,7 +79,7 @@ use std::*;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, Some(\"std\"), false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, Some(\"std\"), false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 2));\n }\n \n@@ -98,7 +98,7 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 2));\n }\n \n@@ -115,7 +115,7 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 2));\n }\n \n@@ -134,7 +134,7 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 3));\n \n     // Adding more will also bump the returned line offset.\n@@ -147,7 +147,7 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 4));\n }\n \n@@ -164,7 +164,7 @@ fn main() {\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 2));\n }\n \n@@ -180,7 +180,7 @@ fn main() {\n     assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 1));\n }\n \n@@ -196,7 +196,7 @@ fn main() {\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 2));\n }\n \n@@ -210,7 +210,7 @@ assert_eq!(2+2, 4);\";\n //Ceci n'est pas une `fn main`\n assert_eq!(2+2, 4);\"\n         .to_string();\n-    let (output, len, _) = make_test(input, None, true, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, None, true, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 1));\n }\n \n@@ -224,7 +224,7 @@ fn make_test_display_warnings() {\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 1));\n }\n \n@@ -242,7 +242,7 @@ assert_eq!(2+2, 4);\n }\"\n     .to_string();\n \n-    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 2));\n \n     let input = \"extern crate hella_qwop;\n@@ -256,7 +256,7 @@ assert_eq!(asdf::foo, 4);\n }\"\n     .to_string();\n \n-    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 3));\n }\n \n@@ -274,6 +274,41 @@ test_wrapper! {\n }\"\n     .to_string();\n \n-    let (output, len, _) = make_test(input, Some(\"my_crate\"), false, &opts, DEFAULT_EDITION);\n+    let (output, len, _) = make_test(input, Some(\"my_crate\"), false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 1));\n }\n+\n+#[test]\n+fn make_test_returns_result() {\n+    // creates an inner function and unwraps it\n+    let opts = TestOptions::default();\n+    let input = \"use std::io;\n+let mut input = String::new();\n+io::stdin().read_line(&mut input)?;\n+Ok::<(), io:Error>(())\";\n+    let expected = \"#![allow(unused)]\n+fn main() { fn _inner() -> Result<(), impl core::fmt::Debug> {\n+use std::io;\n+let mut input = String::new();\n+io::stdin().read_line(&mut input)?;\n+Ok::<(), io:Error>(())\n+}; _inner().unwrap() }\"\n+        .to_string();\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION, None);\n+    assert_eq!((output, len), (expected, 2));\n+}\n+\n+#[test]\n+fn make_test_named_wrapper() {\n+    // creates an inner function with a specific name\n+    let opts = TestOptions::default();\n+    let input = \"assert_eq!(2+2, 4);\";\n+    let expected = \"#![allow(unused)]\n+fn main() { fn _doctest_main_some_unique_name() {\n+assert_eq!(2+2, 4);\n+}; _doctest_main_some_unique_name() }\"\n+        .to_string();\n+    let (output, len, _) =\n+        make_test(input, None, false, &opts, DEFAULT_EDITION, Some(\"some_unique_name\"));\n+    assert_eq!((output, len), (expected, 2));\n+}"}, {"sha": "f911a2ce3fc7888bb63e1cdcd1cec27b6a757cf5", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -248,7 +248,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                 .join(\"\\n\");\n             let krate = krate.as_ref().map(|s| &**s);\n             let (test, _, _) =\n-                doctest::make_test(&test, krate, false, &Default::default(), edition);\n+                doctest::make_test(&test, krate, false, &Default::default(), edition, None);\n             let channel = if test.contains(\"#![feature(\") { \"&amp;version=nightly\" } else { \"\" };\n \n             let edition_string = format!(\"&amp;edition={}\", edition);"}, {"sha": "c4700b317efa03b7286bf2ecf4a78e2838228f2f", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -98,7 +98,7 @@ endif\n \t# Run it in order to generate some profiling data,\n \t# with `LLVM_PROFILE_FILE=<profdata_file>` environment variable set to\n \t# output the coverage stats for this run.\n-\tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@.profraw \\\n+\tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@-%p.profraw \\\n \t\t\t$(call RUN,$@) || \\\n \t\t\t( \\\n \t\t\t\tstatus=$$?; \\\n@@ -108,9 +108,16 @@ endif\n \t\t\t\t) \\\n \t\t\t)\n \n+\t# Run it through rustdoc as well to cover doctests\n+\tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@-%p.profraw \\\n+\t\t\t$(RUSTDOC) --crate-name workaround_for_79771 --test $(SOURCEDIR)/$@.rs \\\n+\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/$@.rs && echo \"--edition=2018\" ) \\\n+\t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage \\\n+\t\t\t-Z unstable-options --persist-doctests=$(TMPDIR)/rustdoc-$@\n+\n \t# Postprocess the profiling data so it can be used by the llvm-cov tool\n \t\"$(LLVM_BIN_DIR)\"/llvm-profdata merge --sparse \\\n-\t\t\t\"$(TMPDIR)\"/$@.profraw \\\n+\t\t\t\"$(TMPDIR)\"/$@-*.profraw \\\n \t\t\t-o \"$(TMPDIR)\"/$@.profdata\n \n \t# Generate a coverage report using `llvm-cov show`.\n@@ -121,8 +128,15 @@ endif\n \t\t\t--show-line-counts-or-regions \\\n \t\t\t--instr-profile=\"$(TMPDIR)\"/$@.profdata \\\n \t\t\t$(call BIN,\"$(TMPDIR)\"/$@) \\\n-\t\t> \"$(TMPDIR)\"/actual_show_coverage.$@.txt \\\n-\t\t2> \"$(TMPDIR)\"/show_coverage_stderr.$@.txt || \\\n+\t\t\t$$( \\\n+\t\t\t\tfor file in $(TMPDIR)/rustdoc-$@/*/rust_out; \\\n+\t\t\t\tdo \\\n+\t\t\t\t[[ -x $$file ]] && printf \"%s %s \" -object $$file; \\\n+\t\t\t\tdone \\\n+\t\t\t) \\\n+\t\t2> \"$(TMPDIR)\"/show_coverage_stderr.$@.txt \\\n+\t\t| \"$(PYTHON)\" $(BASEDIR)/normalize_paths.py \\\n+\t\t> \"$(TMPDIR)\"/actual_show_coverage.$@.txt || \\\n \t( status=$$? ; \\\n \t\t>&2 cat \"$(TMPDIR)\"/show_coverage_stderr.$@.txt ; \\\n \t\texit $$status \\"}, {"sha": "e1731c7223c5d1cda5e0a9fae3ce4d8899d17538", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.doctest.txt", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -0,0 +1,79 @@\n+../coverage/doctest.rs:\n+    1|       |//! This test ensures that code from doctests is properly re-mapped.\n+    2|       |//! See <https://github.com/rust-lang/rust/issues/79417> for more info.\n+    3|       |//!\n+    4|       |//! Just some random code:\n+    5|      1|//! ```\n+    6|      1|//! if true {\n+    7|       |//!     // this is executed!\n+    8|      1|//!     assert_eq!(1, 1);\n+    9|       |//! } else {\n+   10|       |//!     // this is not!\n+   11|       |//!     assert_eq!(1, 2);\n+   12|       |//! }\n+   13|      1|//! ```\n+   14|       |//!\n+   15|       |//! doctest testing external code:\n+   16|       |//! ```\n+   17|      1|//! extern crate doctest_crate;\n+   18|      1|//! doctest_crate::fn_run_in_doctests(1);\n+   19|      1|//! ```\n+   20|       |//!\n+   21|       |//! doctest returning a result:\n+   22|      1|//! ```\n+   23|      1|//! #[derive(Debug)]\n+   24|      1|//! struct SomeError;\n+   25|      1|//! let mut res = Err(SomeError);\n+   26|      1|//! if res.is_ok() {\n+   27|      0|//!   res?;\n+   28|      1|//! } else {\n+   29|      1|//!   res = Ok(0);\n+   30|      1|//! }\n+   31|       |//! // need to be explicit because rustdoc cant infer the return type\n+   32|      1|//! Ok::<(), SomeError>(())\n+   33|      1|//! ```\n+   34|       |//!\n+   35|       |//! doctest with custom main:\n+   36|       |//! ```\n+   37|       |//! #[derive(Debug)]\n+   38|       |//! struct SomeError;\n+   39|       |//!\n+   40|       |//! extern crate doctest_crate;\n+   41|       |//!\n+   42|      1|//! fn doctest_main() -> Result<(), SomeError> {\n+   43|      1|//!     doctest_crate::fn_run_in_doctests(2);\n+   44|      1|//!     Ok(())\n+   45|      1|//! }\n+   46|       |//!\n+   47|       |//! // this `main` is not shown as covered, as it clashes with all the other\n+   48|       |//! // `main` functions that were automatically generated for doctests\n+   49|       |//! fn main() -> Result<(), SomeError> {\n+   50|       |//!     doctest_main()\n+   51|       |//! }\n+   52|       |//! ```\n+   53|       |\n+   54|       |/// doctest attached to fn testing external code:\n+   55|       |/// ```\n+   56|      1|/// extern crate doctest_crate;\n+   57|      1|/// doctest_crate::fn_run_in_doctests(3);\n+   58|      1|/// ```\n+   59|       |///\n+   60|      1|fn main() {\n+   61|      1|    if true {\n+   62|      1|        assert_eq!(1, 1);\n+   63|       |    } else {\n+   64|       |        assert_eq!(1, 2);\n+   65|       |    }\n+   66|      1|}\n+\n+../coverage/lib/doctest_crate.rs:\n+    1|       |/// A function run only from within doctests\n+    2|      3|pub fn fn_run_in_doctests(conditional: usize) {\n+    3|      3|    match conditional {\n+    4|      1|        1 => assert_eq!(1, 1), // this is run,\n+    5|      1|        2 => assert_eq!(1, 1), // this,\n+    6|      1|        3 => assert_eq!(1, 1), // and this too\n+    7|      0|        _ => assert_eq!(1, 2), // however this is not\n+    8|       |    }\n+    9|      3|}\n+"}, {"sha": "4c03e950af029de06d229074b246fca1d69326f6", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -19,12 +19,12 @@\n    18|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    19|      2|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}"}, {"sha": "05fb412cdb635163412c06086bc9862af27cafd9", "filename": "src/test/run-make-fulldeps/coverage-reports/normalize_paths.py", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fnormalize_paths.py", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fnormalize_paths.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fnormalize_paths.py?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -0,0 +1,10 @@\n+#!/usr/bin/env python\n+\n+import sys\n+\n+# Normalize file paths in output\n+for line in sys.stdin:\n+    if line.startswith(\"..\") and line.rstrip().endswith(\".rs:\"):\n+        print(line.replace(\"\\\\\", \"/\"), end='')\n+    else:\n+        print(line, end='')"}, {"sha": "8d074558aae20461a9bf1d2012918d7693a0d45f", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.doctest/doctest.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -0,0 +1,127 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.doctest/doctest.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>doctest.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 59\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>fn main() <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"61:8-61:12: @0[1]: _1 = const true\n+61:8-61:12: @0[2]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"62:9-62:26: @5[0]: _2 = const ()\"><span class=\"annotation\">@5\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"62:9-62:26: @6[5]: _75 = const main::promoted[3]\n+62:9-62:26: @6[6]: _18 = &amp;(*_75)\n+62:9-62:26: @6[7]: _17 = &amp;(*_18)\n+62:9-62:26: @6[8]: _16 = move _17 as &amp;[&amp;str] (Pointer(Unsize))\n+62:9-62:26: @6[17]: _26 = &amp;(*_8)\n+62:9-62:26: @6[18]: _25 = &amp;_26\n+62:9-62:26: @6[21]: _28 = &amp;(*_9)\n+62:9-62:26: @6[22]: _27 = &amp;_28\n+62:9-62:26: @6[23]: _24 = (move _25, move _27)\n+62:9-62:26: @6[26]: FakeRead(ForMatchedPlace, _24)\n+62:9-62:26: @6[28]: _29 = (_24.0: &amp;&amp;i32)\n+62:9-62:26: @6[30]: _30 = (_24.1: &amp;&amp;i32)\n+62:9-62:26: @6[33]: _32 = &amp;(*_29)\n+62:9-62:26: @6[35]: _33 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+62:9-62:26: @6.Call: _31 = ArgumentV1::new::&lt;&amp;i32&gt;(move _32, move _33) -&gt; [return: bb7, unwind: bb17]\n+62:9-62:26: @7[4]: _35 = &amp;(*_30)\n+62:9-62:26: @7[6]: _36 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+62:9-62:26: @7.Call: _34 = ArgumentV1::new::&lt;&amp;i32&gt;(move _35, move _36) -&gt; [return: bb8, unwind: bb17]\n+62:9-62:26: @8[2]: _23 = [move _31, move _34]\n+62:9-62:26: @8[7]: _22 = &amp;_23\n+62:9-62:26: @8[8]: _21 = &amp;(*_22)\n+62:9-62:26: @8[9]: _20 = move _21 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+62:9-62:26: @8.Call: _15 = Arguments::new_v1(move _16, move _20) -&gt; [return: bb9, unwind: bb17]\n+62:9-62:26: @9.Call: core::panicking::panic_fmt(move _15) -&gt; bb17\"><span class=\"annotation\">@4,6,7,8,9\u298a</span>assert_eq!(1, 1);<span class=\"annotation\">\u2989@4,6,7,8,9</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"62:9-62:26: @5[0]: _2 = const ()\"><span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"64:9-64:26: @11[0]: _37 = const ()\"><span class=\"annotation\">@11\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"64:9-64:26: @12[5]: _72 = const main::promoted[0]\n+64:9-64:26: @12[6]: _53 = &amp;(*_72)\n+64:9-64:26: @12[7]: _52 = &amp;(*_53)\n+64:9-64:26: @12[8]: _51 = move _52 as &amp;[&amp;str] (Pointer(Unsize))\n+64:9-64:26: @12[17]: _61 = &amp;(*_43)\n+64:9-64:26: @12[18]: _60 = &amp;_61\n+64:9-64:26: @12[21]: _63 = &amp;(*_44)\n+64:9-64:26: @12[22]: _62 = &amp;_63\n+64:9-64:26: @12[23]: _59 = (move _60, move _62)\n+64:9-64:26: @12[26]: FakeRead(ForMatchedPlace, _59)\n+64:9-64:26: @12[28]: _64 = (_59.0: &amp;&amp;i32)\n+64:9-64:26: @12[30]: _65 = (_59.1: &amp;&amp;i32)\n+64:9-64:26: @12[33]: _67 = &amp;(*_64)\n+64:9-64:26: @12[35]: _68 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+64:9-64:26: @12.Call: _66 = ArgumentV1::new::&lt;&amp;i32&gt;(move _67, move _68) -&gt; [return: bb13, unwind: bb17]\n+64:9-64:26: @13[4]: _70 = &amp;(*_65)\n+64:9-64:26: @13[6]: _71 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+64:9-64:26: @13.Call: _69 = ArgumentV1::new::&lt;&amp;i32&gt;(move _70, move _71) -&gt; [return: bb14, unwind: bb17]\n+64:9-64:26: @14[2]: _58 = [move _66, move _69]\n+64:9-64:26: @14[7]: _57 = &amp;_58\n+64:9-64:26: @14[8]: _56 = &amp;(*_57)\n+64:9-64:26: @14[9]: _55 = move _56 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+64:9-64:26: @14.Call: _50 = Arguments::new_v1(move _51, move _55) -&gt; [return: bb15, unwind: bb17]\n+64:9-64:26: @15.Call: core::panicking::panic_fmt(move _50) -&gt; bb17\"><span class=\"annotation\">@10,12,13,14,15\u298a</span>assert_eq!(1, 2);<span class=\"annotation\">\u2989@10,12,13,14,15</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"64:9-64:26: @11[0]: _37 = const ()\"><span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"66:2-66:2: @16.Return: return\"><span class=\"annotation\">@16\u298a</span>\u2038<span class=\"annotation\">\u2989@16</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "ae119d9ca9f2e20e40ae6063204eb4cce8e96dc9", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.doctest_crate/doctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest_crate%2Fdoctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest_crate%2Fdoctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest_crate%2Fdoctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -0,0 +1,173 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.doctest_crate/doctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>doctest_crate.fn_run_in_doctests - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 1\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>pub fn fn_run_in_doctests(conditional: usize) <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:11-3:22: @0[0]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>conditional<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        1 =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:14-4:30: @7[0]: _0 = const ()\"><span class=\"annotation\">@7\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:14-4:30: @8[5]: _138 = const fn_run_in_doctests::promoted[0]\n+4:14-4:30: @8[6]: _17 = &amp;(*_138)\n+4:14-4:30: @8[7]: _16 = &amp;(*_17)\n+4:14-4:30: @8[8]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n+4:14-4:30: @8[17]: _25 = &amp;(*_7)\n+4:14-4:30: @8[18]: _24 = &amp;_25\n+4:14-4:30: @8[21]: _27 = &amp;(*_8)\n+4:14-4:30: @8[22]: _26 = &amp;_27\n+4:14-4:30: @8[23]: _23 = (move _24, move _26)\n+4:14-4:30: @8[26]: FakeRead(ForMatchedPlace, _23)\n+4:14-4:30: @8[28]: _28 = (_23.0: &amp;&amp;i32)\n+4:14-4:30: @8[30]: _29 = (_23.1: &amp;&amp;i32)\n+4:14-4:30: @8[33]: _31 = &amp;(*_28)\n+4:14-4:30: @8[35]: _32 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+4:14-4:30: @8.Call: _30 = ArgumentV1::new::&lt;&amp;i32&gt;(move _31, move _32) -&gt; [return: bb9, unwind: bb33]\n+4:14-4:30: @9[4]: _34 = &amp;(*_29)\n+4:14-4:30: @9[6]: _35 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+4:14-4:30: @9.Call: _33 = ArgumentV1::new::&lt;&amp;i32&gt;(move _34, move _35) -&gt; [return: bb10, unwind: bb33]\n+4:14-4:30: @10[2]: _22 = [move _30, move _33]\n+4:14-4:30: @10[7]: _21 = &amp;_22\n+4:14-4:30: @10[8]: _20 = &amp;(*_21)\n+4:14-4:30: @10[9]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+4:14-4:30: @10.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb11, unwind: bb33]\n+4:14-4:30: @11.Call: core::panicking::panic_fmt(move _14) -&gt; bb33\"><span class=\"annotation\">@6,8,9,10,11\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@6,8,9,10,11</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:14-4:30: @7[0]: _0 = const ()\"><span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\">, // this is run,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        2 =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:30: @14[0]: _0 = const ()\"><span class=\"annotation\">@14\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"5:14-5:30: @15[5]: _141 = const fn_run_in_doctests::promoted[3]\n+5:14-5:30: @15[6]: _51 = &amp;(*_141)\n+5:14-5:30: @15[7]: _50 = &amp;(*_51)\n+5:14-5:30: @15[8]: _49 = move _50 as &amp;[&amp;str] (Pointer(Unsize))\n+5:14-5:30: @15[17]: _59 = &amp;(*_41)\n+5:14-5:30: @15[18]: _58 = &amp;_59\n+5:14-5:30: @15[21]: _61 = &amp;(*_42)\n+5:14-5:30: @15[22]: _60 = &amp;_61\n+5:14-5:30: @15[23]: _57 = (move _58, move _60)\n+5:14-5:30: @15[26]: FakeRead(ForMatchedPlace, _57)\n+5:14-5:30: @15[28]: _62 = (_57.0: &amp;&amp;i32)\n+5:14-5:30: @15[30]: _63 = (_57.1: &amp;&amp;i32)\n+5:14-5:30: @15[33]: _65 = &amp;(*_62)\n+5:14-5:30: @15[35]: _66 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+5:14-5:30: @15.Call: _64 = ArgumentV1::new::&lt;&amp;i32&gt;(move _65, move _66) -&gt; [return: bb16, unwind: bb33]\n+5:14-5:30: @16[4]: _68 = &amp;(*_63)\n+5:14-5:30: @16[6]: _69 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+5:14-5:30: @16.Call: _67 = ArgumentV1::new::&lt;&amp;i32&gt;(move _68, move _69) -&gt; [return: bb17, unwind: bb33]\n+5:14-5:30: @17[2]: _56 = [move _64, move _67]\n+5:14-5:30: @17[7]: _55 = &amp;_56\n+5:14-5:30: @17[8]: _54 = &amp;(*_55)\n+5:14-5:30: @17[9]: _53 = move _54 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+5:14-5:30: @17.Call: _48 = Arguments::new_v1(move _49, move _53) -&gt; [return: bb18, unwind: bb33]\n+5:14-5:30: @18.Call: core::panicking::panic_fmt(move _48) -&gt; bb33\"><span class=\"annotation\">@13,15,16,17,18\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@13,15,16,17,18</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:30: @14[0]: _0 = const ()\"><span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\">, // this,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        3 =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:14-6:30: @21[0]: _0 = const ()\"><span class=\"annotation\">@21\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"6:14-6:30: @22[5]: _144 = const fn_run_in_doctests::promoted[6]\n+6:14-6:30: @22[6]: _85 = &amp;(*_144)\n+6:14-6:30: @22[7]: _84 = &amp;(*_85)\n+6:14-6:30: @22[8]: _83 = move _84 as &amp;[&amp;str] (Pointer(Unsize))\n+6:14-6:30: @22[17]: _93 = &amp;(*_75)\n+6:14-6:30: @22[18]: _92 = &amp;_93\n+6:14-6:30: @22[21]: _95 = &amp;(*_76)\n+6:14-6:30: @22[22]: _94 = &amp;_95\n+6:14-6:30: @22[23]: _91 = (move _92, move _94)\n+6:14-6:30: @22[26]: FakeRead(ForMatchedPlace, _91)\n+6:14-6:30: @22[28]: _96 = (_91.0: &amp;&amp;i32)\n+6:14-6:30: @22[30]: _97 = (_91.1: &amp;&amp;i32)\n+6:14-6:30: @22[33]: _99 = &amp;(*_96)\n+6:14-6:30: @22[35]: _100 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+6:14-6:30: @22.Call: _98 = ArgumentV1::new::&lt;&amp;i32&gt;(move _99, move _100) -&gt; [return: bb23, unwind: bb33]\n+6:14-6:30: @23[4]: _102 = &amp;(*_97)\n+6:14-6:30: @23[6]: _103 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+6:14-6:30: @23.Call: _101 = ArgumentV1::new::&lt;&amp;i32&gt;(move _102, move _103) -&gt; [return: bb24, unwind: bb33]\n+6:14-6:30: @24[2]: _90 = [move _98, move _101]\n+6:14-6:30: @24[7]: _89 = &amp;_90\n+6:14-6:30: @24[8]: _88 = &amp;(*_89)\n+6:14-6:30: @24[9]: _87 = move _88 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+6:14-6:30: @24.Call: _82 = Arguments::new_v1(move _83, move _87) -&gt; [return: bb25, unwind: bb33]\n+6:14-6:30: @25.Call: core::panicking::panic_fmt(move _82) -&gt; bb33\"><span class=\"annotation\">@20,22,23,24,25\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@20,22,23,24,25</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:14-6:30: @21[0]: _0 = const ()\"><span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\">, // and this too</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:14-7:30: @27[0]: _0 = const ()\"><span class=\"annotation\">@27\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"7:14-7:30: @28[5]: _147 = const fn_run_in_doctests::promoted[9]\n+7:14-7:30: @28[6]: _119 = &amp;(*_147)\n+7:14-7:30: @28[7]: _118 = &amp;(*_119)\n+7:14-7:30: @28[8]: _117 = move _118 as &amp;[&amp;str] (Pointer(Unsize))\n+7:14-7:30: @28[17]: _127 = &amp;(*_109)\n+7:14-7:30: @28[18]: _126 = &amp;_127\n+7:14-7:30: @28[21]: _129 = &amp;(*_110)\n+7:14-7:30: @28[22]: _128 = &amp;_129\n+7:14-7:30: @28[23]: _125 = (move _126, move _128)\n+7:14-7:30: @28[26]: FakeRead(ForMatchedPlace, _125)\n+7:14-7:30: @28[28]: _130 = (_125.0: &amp;&amp;i32)\n+7:14-7:30: @28[30]: _131 = (_125.1: &amp;&amp;i32)\n+7:14-7:30: @28[33]: _133 = &amp;(*_130)\n+7:14-7:30: @28[35]: _134 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+7:14-7:30: @28.Call: _132 = ArgumentV1::new::&lt;&amp;i32&gt;(move _133, move _134) -&gt; [return: bb29, unwind: bb33]\n+7:14-7:30: @29[4]: _136 = &amp;(*_131)\n+7:14-7:30: @29[6]: _137 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+7:14-7:30: @29.Call: _135 = ArgumentV1::new::&lt;&amp;i32&gt;(move _136, move _137) -&gt; [return: bb30, unwind: bb33]\n+7:14-7:30: @30[2]: _124 = [move _132, move _135]\n+7:14-7:30: @30[7]: _123 = &amp;_124\n+7:14-7:30: @30[8]: _122 = &amp;(*_123)\n+7:14-7:30: @30[9]: _121 = move _122 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+7:14-7:30: @30.Call: _116 = Arguments::new_v1(move _117, move _121) -&gt; [return: bb31, unwind: bb33]\n+7:14-7:30: @31.Call: core::panicking::panic_fmt(move _116) -&gt; bb33\"><span class=\"annotation\">@26,28,29,30,31\u298a</span>assert_eq!(1, 2)<span class=\"annotation\">\u2989@26,28,29,30,31</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:14-7:30: @27[0]: _0 = const ()\"><span class=\"annotation\">\u2989@27</span></span></span><span class=\"code\" style=\"--layer: 0\">, // however this is not</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"9:2-9:2: @32.Return: return\"><span class=\"annotation\">@32\u298a</span>\u2038<span class=\"annotation\">\u2989@32</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "d1824d189e38248b8d51973a80a103bae265bcbc", "filename": "src/test/run-make-fulldeps/coverage/compiletest-ignore-dir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcompiletest-ignore-dir", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcompiletest-ignore-dir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcompiletest-ignore-dir?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -1,3 +1,3 @@\n-# Directory \"instrument-coverage\" supports the tests at prefix ../instrument-coverage-*\n+# Directory \"coverage\" supports the tests at prefix ../coverage-*\n \n-# Use ./x.py [options] test src/test/run-make-fulldeps/instrument-coverage to run all related tests.\n+# Use ./x.py [options] test src/test/run-make-fulldeps/coverage to run all related tests."}, {"sha": "4d340d4b1dadddb324f3b349ea0acb37207a68b2", "filename": "src/test/run-make-fulldeps/coverage/coverage_tools.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcoverage_tools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcoverage_tools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcoverage_tools.mk?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -1,7 +1,7 @@\n-# Common Makefile include for Rust `run-make-fulldeps/instrument-coverage-* tests. Include this\n+# Common Makefile include for Rust `run-make-fulldeps/coverage-* tests. Include this\n # file with the line:\n #\n-# -include ../instrument-coverage/coverage_tools.mk\n+# -include ../coverage/coverage_tools.mk\n \n -include ../tools.mk\n "}, {"sha": "e41d669bf0c760a5041af4ce99b1ee5882622052", "filename": "src/test/run-make-fulldeps/coverage/doctest.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fdoctest.rs?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -0,0 +1,66 @@\n+//! This test ensures that code from doctests is properly re-mapped.\n+//! See <https://github.com/rust-lang/rust/issues/79417> for more info.\n+//!\n+//! Just some random code:\n+//! ```\n+//! if true {\n+//!     // this is executed!\n+//!     assert_eq!(1, 1);\n+//! } else {\n+//!     // this is not!\n+//!     assert_eq!(1, 2);\n+//! }\n+//! ```\n+//!\n+//! doctest testing external code:\n+//! ```\n+//! extern crate doctest_crate;\n+//! doctest_crate::fn_run_in_doctests(1);\n+//! ```\n+//!\n+//! doctest returning a result:\n+//! ```\n+//! #[derive(Debug)]\n+//! struct SomeError;\n+//! let mut res = Err(SomeError);\n+//! if res.is_ok() {\n+//!   res?;\n+//! } else {\n+//!   res = Ok(0);\n+//! }\n+//! // need to be explicit because rustdoc cant infer the return type\n+//! Ok::<(), SomeError>(())\n+//! ```\n+//!\n+//! doctest with custom main:\n+//! ```\n+//! #[derive(Debug)]\n+//! struct SomeError;\n+//!\n+//! extern crate doctest_crate;\n+//!\n+//! fn doctest_main() -> Result<(), SomeError> {\n+//!     doctest_crate::fn_run_in_doctests(2);\n+//!     Ok(())\n+//! }\n+//!\n+//! // this `main` is not shown as covered, as it clashes with all the other\n+//! // `main` functions that were automatically generated for doctests\n+//! fn main() -> Result<(), SomeError> {\n+//!     doctest_main()\n+//! }\n+//! ```\n+\n+/// doctest attached to fn testing external code:\n+/// ```\n+/// extern crate doctest_crate;\n+/// doctest_crate::fn_run_in_doctests(3);\n+/// ```\n+///\n+fn main() {\n+    if true {\n+        assert_eq!(1, 1);\n+    } else {\n+        assert_eq!(1, 2);\n+    }\n+}"}, {"sha": "c3210146d69b0f9bc5c5a4580c2c1b740ef3c71c", "filename": "src/test/run-make-fulldeps/coverage/lib/doctest_crate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fdoctest_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830ceaa41908bd428e36b1a804dd93c9a257aea8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fdoctest_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fdoctest_crate.rs?ref=830ceaa41908bd428e36b1a804dd93c9a257aea8", "patch": "@@ -0,0 +1,9 @@\n+/// A function run only from within doctests\n+pub fn fn_run_in_doctests(conditional: usize) {\n+    match conditional {\n+        1 => assert_eq!(1, 1), // this is run,\n+        2 => assert_eq!(1, 1), // this,\n+        3 => assert_eq!(1, 1), // and this too\n+        _ => assert_eq!(1, 2), // however this is not\n+    }\n+}"}]}