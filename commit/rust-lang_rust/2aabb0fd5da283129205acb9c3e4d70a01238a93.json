{"sha": "2aabb0fd5da283129205acb9c3e4d70a01238a93", "node_id": "C_kwDOAAsO6NoAKDJhYWJiMGZkNWRhMjgzMTI5MjA1YWNiOWMzZTRkNzBhMDEyMzhhOTM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T20:15:00Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T20:44:47Z"}, "message": "Point at impl self type for impl wf obligations", "tree": {"sha": "b26584aecba305aa6819e40e9998d82b93964abe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b26584aecba305aa6819e40e9998d82b93964abe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aabb0fd5da283129205acb9c3e4d70a01238a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aabb0fd5da283129205acb9c3e4d70a01238a93", "html_url": "https://github.com/rust-lang/rust/commit/2aabb0fd5da283129205acb9c3e4d70a01238a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aabb0fd5da283129205acb9c3e4d70a01238a93/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d76e168f01e5ed6fc4bbdc127dacb121b51de098", "url": "https://api.github.com/repos/rust-lang/rust/commits/d76e168f01e5ed6fc4bbdc127dacb121b51de098", "html_url": "https://github.com/rust-lang/rust/commit/d76e168f01e5ed6fc4bbdc127dacb121b51de098"}], "stats": {"total": 194, "additions": 97, "deletions": 97}, "files": [{"sha": "9bd49f5e053bef3680ed0f6acaf1eeb886731be4", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1272,7 +1272,7 @@ fn check_impl<'tcx>(\n                     wfcx.param_env,\n                     wfcx.body_id,\n                     &trait_pred,\n-                    ast_trait_ref.path.span,\n+                    ast_self_ty.span,\n                     item,\n                 );\n                 debug!(?obligations);"}, {"sha": "a07a634b28a263a99d68c755a20c42a2a04511a1", "filename": "tests/ui/associated-types/hr-associated-type-bound-param-6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `for<'b> T: X<'b, T>` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-6.rs:12:12\n+  --> $DIR/hr-associated-type-bound-param-6.rs:12:25\n    |\n LL | impl<S, T> X<'_, T> for (S,) {\n-   |            ^^^^^^^^ the trait `for<'b> X<'b, T>` is not implemented for `T`\n+   |                         ^^^^ the trait `for<'b> X<'b, T>` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "ad83a5ca88c3e5294e56af9cb54923d131b65a7b", "filename": "tests/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0271]: type mismatch resolving `<T as Deref>::Target == T`\n-  --> $DIR/hr-associated-type-projection-1.rs:13:33\n+  --> $DIR/hr-associated-type-projection-1.rs:13:55\n    |\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n-   |      - this type parameter      ^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n+   |      - this type parameter                            ^ expected type parameter `T`, found associated type\n    |\n    = note: expected type parameter `T`\n              found associated type `<T as Deref>::Target`"}, {"sha": "592aa4369ce0d404606962514f33ea83a08f623e", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-double-superkind.rs:6:24\n+  --> $DIR/builtin-superkinds-double-superkind.rs:6:32\n    |\n LL | impl <T: Sync+'static> Foo for (T,) { }\n-   |                        ^^^ `T` cannot be sent between threads safely\n+   |                                ^^^^ `T` cannot be sent between threads safely\n    |\n    = note: required because it appears within the type `(T,)`\n note: required by a bound in `Foo`\n@@ -16,10 +16,10 @@ LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n    |                       +++++++++++++++++++\n \n error[E0277]: `T` cannot be shared between threads safely\n-  --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n+  --> $DIR/builtin-superkinds-double-superkind.rs:9:24\n    |\n LL | impl <T: Send> Foo for (T,T) { }\n-   |                ^^^ `T` cannot be shared between threads safely\n+   |                        ^^^^^ `T` cannot be shared between threads safely\n    |\n    = note: required because it appears within the type `(T, T)`\n note: required by a bound in `Foo`"}, {"sha": "f9d548bb8fbe938a3e4093337db91eec8996c784", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-in-metadata.rs:13:23\n+  --> $DIR/builtin-superkinds-in-metadata.rs:13:56\n    |\n LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+   |                                                        ^^^^ `T` cannot be sent between threads safely\n    |\n note: required because it appears within the type `X<T>`\n   --> $DIR/builtin-superkinds-in-metadata.rs:9:8"}, {"sha": "e51fab0dcea5452148a19f92e7481be7a35aec4d", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-self-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/builtin-superkinds-self-type.rs:10:16\n+  --> $DIR/builtin-superkinds-self-type.rs:10:24\n    |\n LL | impl <T: Sync> Foo for T { }\n-   |                ^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |                        ^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n   --> $DIR/builtin-superkinds-self-type.rs:6:24"}, {"sha": "8b19170b0f100e86ea03c8aeed6be1fdf059c46c", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-simple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `Rc<i8>` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-simple.rs:6:6\n+  --> $DIR/builtin-superkinds-simple.rs:6:14\n    |\n LL | impl Foo for std::rc::Rc<i8> { }\n-   |      ^^^ `Rc<i8>` cannot be sent between threads safely\n+   |              ^^^^^^^^^^^^^^^ `Rc<i8>` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `Rc<i8>`\n note: required by a bound in `Foo`"}, {"sha": "0cfea72d5f184dddebc0027c2fc9a9def07c7afd", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-typaram-not-send.rs:5:24\n+  --> $DIR/builtin-superkinds-typaram-not-send.rs:5:32\n    |\n LL | impl <T: Sync+'static> Foo for T { }\n-   |                        ^^^ `T` cannot be sent between threads safely\n+   |                                ^ `T` cannot be sent between threads safely\n    |\n note: required by a bound in `Foo`\n   --> $DIR/builtin-superkinds-typaram-not-send.rs:3:13"}, {"sha": "84c32fa3771a061a2c365335dcfd993f0df8dce4", "filename": "tests/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/impl_wf.rs:11:6\n+  --> $DIR/impl_wf.rs:11:14\n    |\n LL | impl Foo for str { }\n-   |      ^^^ doesn't have a size known at compile-time\n+   |              ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n note: required by a bound in `Foo`\n@@ -12,10 +12,10 @@ LL | trait Foo: Sized { }\n    |            ^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `f32: Foo` is not satisfied\n-  --> $DIR/impl_wf.rs:22:6\n+  --> $DIR/impl_wf.rs:22:19\n    |\n LL | impl Baz<f32> for f32 { }\n-   |      ^^^^^^^^ the trait `Foo` is not implemented for `f32`\n+   |                   ^^^ the trait `Foo` is not implemented for `f32`\n    |\n    = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `Baz`"}, {"sha": "668b8319b3875fba17d26ceda66a8b3700ced1bc", "filename": "tests/ui/coherence/coherence-overlap-trait-alias.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0283]: type annotations needed: cannot satisfy `u32: C`\n-  --> $DIR/coherence-overlap-trait-alias.rs:15:6\n+  --> $DIR/coherence-overlap-trait-alias.rs:15:12\n    |\n LL | impl C for u32 {}\n-   |      ^\n+   |            ^^^\n    |\n note: multiple `impl`s satisfying `u32: C` found\n   --> $DIR/coherence-overlap-trait-alias.rs:14:1"}, {"sha": "7deb4b36fabf00b8f8beddc694b985583e036e99", "filename": "tests/ui/const-generics/issues/issue-67185-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -23,10 +23,10 @@ LL |     [<u8 as Baz>::Quaks; 2]: Bar,\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:21:6\n+  --> $DIR/issue-67185-2.rs:21:14\n    |\n LL | impl Foo for FooImpl {}\n-   |      ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |              ^^^^^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n    = help: the following other types implement trait `Bar`:\n              [[u16; 3]; 3]\n@@ -41,10 +41,10 @@ LL |     <u8 as Baz>::Quaks: Bar,\n    |                         ^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:21:6\n+  --> $DIR/issue-67185-2.rs:21:14\n    |\n LL | impl Foo for FooImpl {}\n-   |      ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+   |              ^^^^^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n    = help: the following other types implement trait `Bar`:\n              [[u16; 3]; 3]"}, {"sha": "5dd517d4d9394f7f3a63ec95dea2adfc07afe4c9", "filename": "tests/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `[isize]` cannot be known at compilation time\n-  --> $DIR/dst-sized-trait-param.rs:7:6\n+  --> $DIR/dst-sized-trait-param.rs:7:23\n    |\n LL | impl Foo<[isize]> for usize { }\n-   |      ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                       ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[isize]`\n note: required by a bound in `Foo`\n@@ -16,10 +16,10 @@ LL | trait Foo<T: ?Sized> : Sized { fn take(self, x: &T) { } } // Note: T is siz\n    |            ++++++++\n \n error[E0277]: the size for values of type `[usize]` cannot be known at compilation time\n-  --> $DIR/dst-sized-trait-param.rs:10:6\n+  --> $DIR/dst-sized-trait-param.rs:10:21\n    |\n LL | impl Foo<isize> for [usize] { }\n-   |      ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[usize]`\n note: required by a bound in `Foo`"}, {"sha": "3a8a81a73a6cec4a598845accd4d88f6350f0619", "filename": "tests/ui/error-codes/E0308-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ferror-codes%2FE0308-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ferror-codes%2FE0308-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0308-2.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/E0308-2.rs:9:6\n+  --> $DIR/E0308-2.rs:9:13\n    |\n LL | impl Eq for &dyn DynEq {}\n-   |      ^^ lifetime mismatch\n+   |             ^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected trait `<&dyn DynEq as PartialEq>`\n               found trait `<&(dyn DynEq + 'static) as PartialEq>`"}, {"sha": "1a50eadb5f0ad1a310fd52c3ef10a09a0147a6f8", "filename": "tests/ui/fn/implied-bounds-unnorm-associated-type-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/implied-bounds-unnorm-associated-type-5.rs:6:13\n+  --> $DIR/implied-bounds-unnorm-associated-type-5.rs:6:27\n    |\n LL | impl<'a, T> Trait<'a> for T {\n-   |             ^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |                           ^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n   --> $DIR/implied-bounds-unnorm-associated-type-5.rs:1:18"}, {"sha": "260a0ce6142ca51dfbd59bf21011c01ce6275b9a", "filename": "tests/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `[()]` cannot be known at compilation time\n-  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:19:6\n+  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:19:17\n    |\n LL | impl Tsized for () {}\n-   |      ^^^^^^ doesn't have a size known at compile-time\n+   |                 ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[()]`\n note: required by a bound in `Tsized`"}, {"sha": "ebaf87630fe7f49dfdd8f0cadfd1cc35d80275f7", "filename": "tests/ui/issues/issue-10412.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-10412.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -53,10 +53,10 @@ LL | impl<'self> Serializable<'_, str> for &'self str {\n    |                          +++\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/issue-10412.rs:7:13\n+  --> $DIR/issue-10412.rs:7:35\n    |\n LL | impl<'self> Serializable<str> for &'self str {\n-   |             ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                                   ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n note: required by a bound in `Serializable`"}, {"sha": "7ccab88948371bd63ec4885fd722919f8736c518", "filename": "tests/ui/issues/issue-65230.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fissues%2Fissue-65230.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fissues%2Fissue-65230.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-65230.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-65230.rs:8:6\n+  --> $DIR/issue-65230.rs:8:13\n    |\n LL | impl T1 for &dyn T2 {}\n-   |      ^^ lifetime mismatch\n+   |             ^^^^^^^ lifetime mismatch\n    |\n    = note: expected trait `<&dyn T2 as T0>`\n               found trait `<&(dyn T2 + 'static) as T0>`"}, {"sha": "3cd59d6926eb4a3f6c6c0c381baf77fb1f5c4047", "filename": "tests/ui/marker_trait_attr/overlap-marker-trait-with-underscore-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait-with-underscore-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait-with-underscore-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait-with-underscore-lifetime.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0283]: type annotations needed: cannot satisfy `&(): Marker`\n-  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:6\n+  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:17\n    |\n LL | impl Marker for &'_ () {}\n-   |      ^^^^^^\n+   |                 ^^^^^^\n    |\n note: multiple `impl`s satisfying `&(): Marker` found\n   --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:1\n@@ -13,10 +13,10 @@ LL | impl Marker for &'_ () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed: cannot satisfy `&(): Marker`\n-  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:7:6\n+  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:7:17\n    |\n LL | impl Marker for &'_ () {}\n-   |      ^^^^^^\n+   |                 ^^^^^^\n    |\n note: multiple `impl`s satisfying `&(): Marker` found\n   --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:1"}, {"sha": "c6497b4669de6666eec7bb017f5b53b05d2c0245", "filename": "tests/ui/marker_trait_attr/region-overlap.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0283]: type annotations needed: cannot satisfy `(&'static (), &'a ()): A`\n-  --> $DIR/region-overlap.rs:5:10\n+  --> $DIR/region-overlap.rs:5:16\n    |\n LL | impl<'a> A for (&'static (), &'a ()) {}\n-   |          ^\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `(&'static (), &'a ()): A` found\n   --> $DIR/region-overlap.rs:5:1\n@@ -13,10 +13,10 @@ LL | impl<'a> A for (&'a (), &'static ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed: cannot satisfy `(&'a (), &'static ()): A`\n-  --> $DIR/region-overlap.rs:6:10\n+  --> $DIR/region-overlap.rs:6:16\n    |\n LL | impl<'a> A for (&'a (), &'static ()) {}\n-   |          ^\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `(&'a (), &'static ()): A` found\n   --> $DIR/region-overlap.rs:5:1"}, {"sha": "8a17446130b67bf54659fabdd154f08da4002629", "filename": "tests/ui/overloaded/overloaded-calls-nontuple.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,17 +1,17 @@\n error[E0059]: type parameter to bare `FnMut` trait must be a tuple\n-  --> $DIR/overloaded-calls-nontuple.rs:10:6\n+  --> $DIR/overloaded-calls-nontuple.rs:10:23\n    |\n LL | impl FnMut<isize> for S {\n-   |      ^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n+   |                       ^ the trait `Tuple` is not implemented for `isize`\n    |\n note: required by a bound in `FnMut`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n \n error[E0059]: type parameter to bare `FnOnce` trait must be a tuple\n-  --> $DIR/overloaded-calls-nontuple.rs:18:6\n+  --> $DIR/overloaded-calls-nontuple.rs:18:24\n    |\n LL | impl FnOnce<isize> for S {\n-   |      ^^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n+   |                        ^ the trait `Tuple` is not implemented for `isize`\n    |\n note: required by a bound in `FnOnce`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL"}, {"sha": "bf12ef1ca77dfa9b0138f5f6000c4bb793c6bb39", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,14 +1,14 @@\n error[E0277]: the trait bound `S: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail.rs:15:12\n+  --> $DIR/super-traits-fail.rs:15:20\n    |\n LL | impl const Bar for S {}\n-   |            ^^^ the trait `~const Foo` is not implemented for `S`\n+   |                    ^ the trait `~const Foo` is not implemented for `S`\n    |\n note: the trait `Foo` is implemented for `S`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail.rs:15:12\n+  --> $DIR/super-traits-fail.rs:15:20\n    |\n LL | impl const Bar for S {}\n-   |            ^^^\n+   |                    ^\n note: required by a bound in `Bar`\n   --> $DIR/super-traits-fail.rs:8:12\n    |"}, {"sha": "cb5cc320276d85b4ffcb40e9a8d949b045e99528", "filename": "tests/ui/span/issue-71363.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-71363.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,19 +1,19 @@\n error[E0277]: `MyError` doesn't implement `std::fmt::Display`\n- --> $DIR/issue-71363.rs:4:6\n+ --> $DIR/issue-71363.rs:4:28\n   |\n 4 | impl std::error::Error for MyError {}\n-  |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted with the default formatter\n+  |                            ^^^^^^^ `MyError` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `MyError`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `std::error::Error`\n  --> $SRC_DIR/core/src/error.rs:LL:COL\n \n error[E0277]: `MyError` doesn't implement `Debug`\n- --> $DIR/issue-71363.rs:4:6\n+ --> $DIR/issue-71363.rs:4:28\n   |\n 4 | impl std::error::Error for MyError {}\n-  |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted using `{:?}`\n+  |                            ^^^^^^^ `MyError` cannot be formatted using `{:?}`\n   |\n   = help: the trait `Debug` is not implemented for `MyError`\n   = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`"}, {"sha": "1d9014a264305e1c9e61ab6c093a2882d08005b0", "filename": "tests/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -9,10 +9,10 @@ LL | #![feature(specialization)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0277]: the trait bound `U: Eq` is not satisfied\n-  --> $DIR/specialization-wfcheck.rs:7:17\n+  --> $DIR/specialization-wfcheck.rs:7:37\n    |\n LL | default impl<U> Foo<'static, U> for () {}\n-   |                 ^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `U`\n+   |                                     ^^ the trait `Eq` is not implemented for `U`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/specialization-wfcheck.rs:5:18"}, {"sha": "4191ab054cb9eb86381d9a8910dfb25d252bceee", "filename": "tests/ui/static/static-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fstatic%2Fstatic-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Fstatic%2Fstatic-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fstatic-lifetime.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/static-lifetime.rs:3:20\n+  --> $DIR/static-lifetime.rs:3:34\n    |\n LL | impl<'a, A: Clone> Arbitrary for ::std::borrow::Cow<'a, A> {}\n-   |                    ^^^^^^^^^\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/static-lifetime.rs:3:6"}, {"sha": "f3c8464abeb53f54a17ea5955a3d2cb99b780755", "filename": "tests/ui/trait-bounds/unsized-bound.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `B` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:2:12\n+  --> $DIR/unsized-bound.rs:2:30\n    |\n LL | impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n-   |         -  ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         -                    ^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n@@ -38,10 +38,10 @@ LL + impl<A, B> Trait<(A, B)> for (A, B) where B: ?Sized, {}\n    |\n \n error[E0277]: the size for values of type `C` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:5:31\n+  --> $DIR/unsized-bound.rs:5:52\n    |\n LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n-   |                    -          ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    -                               ^^^^^^^^^ doesn't have a size known at compile-time\n    |                    |\n    |                    this type parameter needs to be `std::marker::Sized`\n    |\n@@ -92,10 +92,10 @@ LL + impl<A, B, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n    |\n \n error[E0277]: the size for values of type `B` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:10:28\n+  --> $DIR/unsized-bound.rs:10:47\n    |\n LL | impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n-   |                 -          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                 -                             ^^^^^^ doesn't have a size known at compile-time\n    |                 |\n    |                 this type parameter needs to be `std::marker::Sized`\n    |\n@@ -131,10 +131,10 @@ LL + impl<A, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n    |\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:14:9\n+  --> $DIR/unsized-bound.rs:14:23\n    |\n LL | impl<A> Trait3<A> for A where A: ?Sized {}\n-   |      -  ^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n@@ -154,10 +154,10 @@ LL | trait Trait3<A: ?Sized> {}\n    |               ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:17:17\n+  --> $DIR/unsized-bound.rs:17:31\n    |\n LL | impl<A: ?Sized> Trait4<A> for A {}\n-   |      -          ^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                        ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n@@ -177,10 +177,10 @@ LL | trait Trait4<A: ?Sized> {}\n    |               ++++++++\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:20:12\n+  --> $DIR/unsized-bound.rs:20:29\n    |\n LL | impl<X, Y> Trait5<X, Y> for X where X: ?Sized {}\n-   |      -     ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                      ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n@@ -200,10 +200,10 @@ LL | trait Trait5<A: ?Sized, B> {}\n    |               ++++++++\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:23:20\n+  --> $DIR/unsized-bound.rs:23:37\n    |\n LL | impl<X: ?Sized, Y> Trait6<X, Y> for X {}\n-   |      -             ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                              ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n@@ -223,10 +223,10 @@ LL | trait Trait6<A: ?Sized, B> {}\n    |               ++++++++\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:26:12\n+  --> $DIR/unsized-bound.rs:26:29\n    |\n LL | impl<X, Y> Trait7<X, Y> for X where Y: ?Sized {}\n-   |         -  ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         -                   ^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n@@ -246,10 +246,10 @@ LL | trait Trait7<A, B: ?Sized> {}\n    |                  ++++++++\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:29:20\n+  --> $DIR/unsized-bound.rs:29:37\n    |\n LL | impl<X, Y: ?Sized> Trait8<X, Y> for X {}\n-   |         -          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         -                           ^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |"}, {"sha": "903961b4be2b9bfeba161913e010b2f5ed7525b9", "filename": "tests/ui/traits/bound/on-structs-and-enums-in-impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `u16: Trait` is not satisfied\n-  --> $DIR/on-structs-and-enums-in-impls.rs:20:6\n+  --> $DIR/on-structs-and-enums-in-impls.rs:20:30\n    |\n LL | impl PolyTrait<Foo<u16>> for Struct {\n-   |      ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u16`\n+   |                              ^^^^^^ the trait `Trait` is not implemented for `u16`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/on-structs-and-enums-in-impls.rs:3:14"}, {"sha": "1f969efe1141d8dab48aaacd1200f467957fb6f9", "filename": "tests/ui/traits/impl-bounds-checking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `isize: Clone2` is not satisfied\n-  --> $DIR/impl-bounds-checking.rs:10:6\n+  --> $DIR/impl-bounds-checking.rs:10:24\n    |\n LL | impl Getter<isize> for isize {\n-   |      ^^^^^^^^^^^^^ the trait `Clone2` is not implemented for `isize`\n+   |                        ^^^^^ the trait `Clone2` is not implemented for `isize`\n    |\n note: required by a bound in `Getter`\n   --> $DIR/impl-bounds-checking.rs:6:17"}, {"sha": "1bace8ab2864bf4b14c7d9c3cdbafc4e529e4263", "filename": "tests/ui/traits/impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n+  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:28\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n-   |             ^^^^^^^^^^\n+   |                            ^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:6\n@@ -15,10 +15,10 @@ note: ...but the lifetime must also be valid for the lifetime `'b` as defined he\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |         ^^\n note: ...so that the types are compatible\n-  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n+  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:28\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n-   |             ^^^^^^^^^^\n+   |                            ^^^^^^^^^\n    = note: expected `T1<'a>`\n               found `T1<'_>`\n "}, {"sha": "4fe12731475b493d8e9426b04cae17c35f95410e", "filename": "tests/ui/traits/issue-43784-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-43784-supertrait.rs:8:9\n+  --> $DIR/issue-43784-supertrait.rs:8:22\n    |\n LL | impl<T> Complete for T {}\n-   |         ^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                      ^ the trait `Copy` is not implemented for `T`\n    |\n note: required by a bound in `Complete`\n   --> $DIR/issue-43784-supertrait.rs:4:21"}, {"sha": "5b24c571f6c9ea7c933a648589e2d93b1efe2837", "filename": "tests/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized-trait-impl-trait-arg.rs:8:17\n+  --> $DIR/unsized-trait-impl-trait-arg.rs:8:27\n    |\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n-   |      -          ^^^^^ doesn't have a size known at compile-time\n+   |      -                    ^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |"}, {"sha": "1b62bb433146f02c119ffeb6a016bff0175e262b", "filename": "tests/ui/unsized/unsized7.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Funsized%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aabb0fd5da283129205acb9c3e4d70a01238a93/tests%2Fui%2Funsized%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized7.stderr?ref=2aabb0fd5da283129205acb9c3e4d70a01238a93", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized7.rs:12:21\n+  --> $DIR/unsized7.rs:12:31\n    |\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n-   |      -              ^^^^^ doesn't have a size known at compile-time\n+   |      -                        ^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |"}]}