{"sha": "467a5c6cd13af6ccb76e9ebdb35f96fc10fb438f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2N2E1YzZjZDEzYWY2Y2NiNzZlOWViZGIzNWY5NmZjMTBmYjQzOGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-05T17:17:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T17:17:07Z"}, "message": "Merge #8347\n\n8347: Minor interning improvements r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "544d53348105f6cbe94ee6727fe84c11df73cfbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/544d53348105f6cbe94ee6727fe84c11df73cfbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/467a5c6cd13af6ccb76e9ebdb35f96fc10fb438f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga0YTCRBK7hj4Ov3rIwAAdHIIAH+clWv26rlGhqA+DTpJWgo2\nNpAB4YBWhZ6T6CMtvlLZBeUoxy+991P8Mx5CWvQEHrSRg06dQ3laLNvdBJ5tW8sB\npWOvXoLWhpNGOmm/2rP5Bm0WdAVbxR5d6fMvTjJwk2J4TnSt31J94Gn7i37QF+Fe\nhTJKLribIdUwgcu0JHsuunHUqAg6LtnFLhpHvG/s2MMSqBa4joMNCNFZqcrZ0AIE\nEmOG56DM1B0a8Z76u3Q6eCMq0EoiQDOUX4vegIuMJufYVBVVaYVUvjTQfvVyidMp\nbAvXewKzVxynVsubWLVMYNu4HRmKvg0AfhkvcSKk+hmcuVYdg7A67c5VCHHlizk=\n=6fHn\n-----END PGP SIGNATURE-----\n", "payload": "tree 544d53348105f6cbe94ee6727fe84c11df73cfbc\nparent 6e9798a992b30b735f14018379e0861d2ec30647\nparent b57462d60dbebedcfac00544d5ff1592c5117c1f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617643027 +0000\ncommitter GitHub <noreply@github.com> 1617643027 +0000\n\nMerge #8347\n\n8347: Minor interning improvements r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/467a5c6cd13af6ccb76e9ebdb35f96fc10fb438f", "html_url": "https://github.com/rust-lang/rust/commit/467a5c6cd13af6ccb76e9ebdb35f96fc10fb438f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/467a5c6cd13af6ccb76e9ebdb35f96fc10fb438f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9798a992b30b735f14018379e0861d2ec30647", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9798a992b30b735f14018379e0861d2ec30647", "html_url": "https://github.com/rust-lang/rust/commit/6e9798a992b30b735f14018379e0861d2ec30647"}, {"sha": "b57462d60dbebedcfac00544d5ff1592c5117c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b57462d60dbebedcfac00544d5ff1592c5117c1f", "html_url": "https://github.com/rust-lang/rust/commit/b57462d60dbebedcfac00544d5ff1592c5117c1f"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "abc304ef0dbef692218c3b4a2386d7839c983035", "filename": "crates/hir_def/src/intern.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/467a5c6cd13af6ccb76e9ebdb35f96fc10fb438f/crates%2Fhir_def%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a5c6cd13af6ccb76e9ebdb35f96fc10fb438f/crates%2Fhir_def%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fintern.rs?ref=467a5c6cd13af6ccb76e9ebdb35f96fc10fb438f", "patch": "@@ -5,7 +5,7 @@\n use std::{\n     collections::HashMap,\n     fmt::{self, Debug},\n-    hash::{BuildHasherDefault, Hash},\n+    hash::{BuildHasherDefault, Hash, Hasher},\n     ops::Deref,\n     sync::Arc,\n };\n@@ -20,7 +20,6 @@ type InternMap<T> = DashMap<Arc<T>, (), BuildHasherDefault<FxHasher>>;\n type Guard<T> =\n     RwLockWriteGuard<'static, HashMap<Arc<T>, SharedValue<()>, BuildHasherDefault<FxHasher>>>;\n \n-#[derive(Hash)]\n pub struct Interned<T: Internable + ?Sized> {\n     arc: Arc<T>,\n }\n@@ -137,6 +136,13 @@ impl PartialEq for Interned<str> {\n \n impl Eq for Interned<str> {}\n \n+impl<T: Internable + ?Sized> Hash for Interned<T> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        // NOTE: Cast disposes vtable pointer / slice/str length.\n+        state.write_usize(Arc::as_ptr(&self.arc) as *const () as usize)\n+    }\n+}\n+\n impl<T: Internable + ?Sized> AsRef<T> for Interned<T> {\n     #[inline]\n     fn as_ref(&self) -> &T {\n@@ -185,7 +191,10 @@ pub trait Internable: Hash + Eq + 'static {\n     fn storage() -> &'static InternStorage<Self>;\n }\n \n-macro_rules! impl_internable {\n+/// Implements `Internable` for a given list of types, making them usable with `Interned`.\n+#[macro_export]\n+#[doc(hidden)]\n+macro_rules! _impl_internable {\n     ( $($t:path),+ $(,)? ) => { $(\n         impl Internable for $t {\n             fn storage() -> &'static InternStorage<Self> {\n@@ -196,10 +205,12 @@ macro_rules! impl_internable {\n     )+ };\n }\n \n+pub use crate::_impl_internable as impl_internable;\n+\n impl_internable!(\n     crate::type_ref::TypeRef,\n     crate::type_ref::TraitRef,\n     crate::path::ModPath,\n     GenericParams,\n-    str\n+    str,\n );"}]}