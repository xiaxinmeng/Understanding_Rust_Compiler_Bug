{"sha": "bd527909e702640f7250fcf545233ca0ae00ed6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNTI3OTA5ZTcwMjY0MGY3MjUwZmNmNTQ1MjMzY2EwYWUwMGVkNmU=", "commit": {"author": {"name": "Julian Orth", "email": "ju.orth@gmail.com", "date": "2014-10-03T18:34:32Z"}, "committer": {"name": "Julian Orth", "email": "ju.orth@gmail.com", "date": "2014-10-08T18:51:31Z"}, "message": "add {Imm,M}utableIntSlice", "tree": {"sha": "518dad48c56eb5f91d41796f713a9a502819e139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/518dad48c56eb5f91d41796f713a9a502819e139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd527909e702640f7250fcf545233ca0ae00ed6e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd527909e702640f7250fcf545233ca0ae00ed6e", "html_url": "https://github.com/rust-lang/rust/commit/bd527909e702640f7250fcf545233ca0ae00ed6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd527909e702640f7250fcf545233ca0ae00ed6e/comments", "author": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "html_url": "https://github.com/rust-lang/rust/commit/9a2286d3a13c4a97340c99c86c718654f6cb2ed6"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "7090f89d1dc27a9e691258e0f047f3aef7e61e48", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bd527909e702640f7250fcf545233ca0ae00ed6e/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd527909e702640f7250fcf545233ca0ae00ed6e/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=bd527909e702640f7250fcf545233ca0ae00ed6e", "patch": "@@ -1853,3 +1853,61 @@ impl<'a, T: PartialOrd> PartialOrd for &'a [T] {\n         order::gt(self.iter(), other.iter())\n     }\n }\n+\n+/// Extension methods for immutable slices containing integers.\n+#[experimental]\n+pub trait ImmutableIntSlice<'a, U, S> {\n+    /// Converts the slice to an immutable slice of unsigned integers with the same width.\n+    fn as_unsigned(self) -> &'a [U];\n+    /// Converts the slice to an immutable slice of signed integers with the same width.\n+    fn as_signed(self) -> &'a [S];\n+}\n+\n+/// Extension methods for mutable slices containing integers.\n+#[experimental]\n+pub trait MutableIntSlice<'a, U, S>: ImmutableIntSlice<'a, U, S> {\n+    /// Converts the slice to a mutable slice of unsigned integers with the same width.\n+    fn as_unsigned_mut(self) -> &'a mut [U];\n+    /// Converts the slice to a mutable slice of signed integers with the same width.\n+    fn as_signed_mut(self) -> &'a mut [S];\n+}\n+\n+macro_rules! impl_immut_int_slice {\n+    ($u:ty, $s:ty, $t:ty) => {\n+        #[experimental]\n+        impl<'a> ImmutableIntSlice<'a, $u, $s> for $t {\n+            #[inline]\n+            fn as_unsigned(self) -> &'a [$u] { unsafe { transmute(self) } }\n+            #[inline]\n+            fn as_signed(self) -> &'a [$s] { unsafe { transmute(self) } }\n+        }\n+    }\n+}\n+macro_rules! impl_mut_int_slice {\n+    ($u:ty, $s:ty, $t:ty) => {\n+        #[experimental]\n+        impl<'a> MutableIntSlice<'a, $u, $s> for $t {\n+            #[inline]\n+            fn as_unsigned_mut(self) -> &'a mut [$u] { unsafe { transmute(self) } }\n+            #[inline]\n+            fn as_signed_mut(self) -> &'a mut [$s] { unsafe { transmute(self) } }\n+        }\n+    }\n+}\n+\n+macro_rules! impl_int_slice {\n+    ($u:ty, $s:ty) => {\n+        impl_immut_int_slice!($u, $s, &'a [$u])\n+        impl_immut_int_slice!($u, $s, &'a [$s])\n+        impl_immut_int_slice!($u, $s, &'a mut [$u])\n+        impl_immut_int_slice!($u, $s, &'a mut [$s])\n+        impl_mut_int_slice!($u, $s, &'a mut [$u])\n+        impl_mut_int_slice!($u, $s, &'a mut [$s])\n+    }\n+}\n+\n+impl_int_slice!(u8,   i8)\n+impl_int_slice!(u16,  i16)\n+impl_int_slice!(u32,  i32)\n+impl_int_slice!(u64,  i64)\n+impl_int_slice!(uint, int)"}]}