{"sha": "79b6bad406155cad4481150fc5dfa0da5394e3b6", "node_id": "C_kwDOAAsO6NoAKDc5YjZiYWQ0MDYxNTVjYWQ0NDgxMTUwZmM1ZGZhMGRhNTM5NGUzYjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T10:43:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T10:43:27Z"}, "message": "Auto merge of #97086 - 5225225:link-section-is-unsafe, r=davidtwco\n\nReport unsafe for overriding link sections\n\nI'm not too sure about the lint wording here, but I couldn't think of anything better.", "tree": {"sha": "891ceaa39a9d48824d03fdbaab2c9de07b766b70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/891ceaa39a9d48824d03fdbaab2c9de07b766b70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79b6bad406155cad4481150fc5dfa0da5394e3b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79b6bad406155cad4481150fc5dfa0da5394e3b6", "html_url": "https://github.com/rust-lang/rust/commit/79b6bad406155cad4481150fc5dfa0da5394e3b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79b6bad406155cad4481150fc5dfa0da5394e3b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70c60d34b9783a2fd3171d88d248c2e0ec8ecdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70c60d34b9783a2fd3171d88d248c2e0ec8ecdd", "html_url": "https://github.com/rust-lang/rust/commit/e70c60d34b9783a2fd3171d88d248c2e0ec8ecdd"}, {"sha": "a42a7a3eb90d67f9931e912b7e62f697c8467b3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a42a7a3eb90d67f9931e912b7e62f697c8467b3a", "html_url": "https://github.com/rust-lang/rust/commit/a42a7a3eb90d67f9931e912b7e62f697c8467b3a"}], "stats": {"total": 80, "additions": 64, "deletions": 16}, "files": [{"sha": "92cd8c2b6110fdf98361a564d97526b9f7ae59b9", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/79b6bad406155cad4481150fc5dfa0da5394e3b6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b6bad406155cad4481150fc5dfa0da5394e3b6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=79b6bad406155cad4481150fc5dfa0da5394e3b6", "patch": "@@ -338,6 +338,17 @@ impl UnsafeCode {\n                 .emit();\n         })\n     }\n+\n+    fn report_overridden_symbol_section(&self, cx: &EarlyContext<'_>, span: Span, msg: &str) {\n+        self.report_unsafe(cx, span, |lint| {\n+            lint.build(msg)\n+                .note(\n+                    \"the program's behavior with overridden link sections on items is unpredictable \\\n+                    and Rust cannot provide guarantees when you manually override them\",\n+                )\n+                .emit();\n+        })\n+    }\n }\n \n impl EarlyLintPass for UnsafeCode {\n@@ -385,13 +396,22 @@ impl EarlyLintPass for UnsafeCode {\n                         \"declaration of a `no_mangle` function\",\n                     );\n                 }\n+\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n                     self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n                         \"declaration of a function with `export_name`\",\n                     );\n                 }\n+\n+                if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::link_section) {\n+                    self.report_overridden_symbol_section(\n+                        cx,\n+                        attr.span,\n+                        \"declaration of a function with `link_section`\",\n+                    );\n+                }\n             }\n \n             ast::ItemKind::Static(..) => {\n@@ -402,13 +422,22 @@ impl EarlyLintPass for UnsafeCode {\n                         \"declaration of a `no_mangle` static\",\n                     );\n                 }\n+\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n                     self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n                         \"declaration of a static with `export_name`\",\n                     );\n                 }\n+\n+                if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::link_section) {\n+                    self.report_overridden_symbol_section(\n+                        cx,\n+                        attr.span,\n+                        \"declaration of a static with `link_section`\",\n+                    );\n+                }\n             }\n \n             _ => {}"}, {"sha": "b72e4c3a9e7fb6f8ecce2d97128ccd6257c8c030", "filename": "src/test/ui/lint/lint-unsafe-code.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79b6bad406155cad4481150fc5dfa0da5394e3b6/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b6bad406155cad4481150fc5dfa0da5394e3b6/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs?ref=79b6bad406155cad4481150fc5dfa0da5394e3b6", "patch": "@@ -48,6 +48,9 @@ impl AssocFnTrait for AssocFnFoo {\n #[export_name = \"bar\"] fn bar() {} //~ ERROR: declaration of a function with `export_name`\n #[export_name = \"BAR\"] static BAR: u32 = 5; //~ ERROR: declaration of a static with `export_name`\n \n+#[link_section = \".example_section\"] fn uwu() {} //~ ERROR: declaration of a function with `link_section`\n+#[link_section = \".example_section\"] static UWU: u32 = 5; //~ ERROR: declaration of a static with `link_section`\n+\n struct AssocFnBar;\n \n impl AssocFnBar {"}, {"sha": "8dde05fc4de9822f8b475ea5ebe5443747b47e1f", "filename": "src/test/ui/lint/lint-unsafe-code.stderr", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/79b6bad406155cad4481150fc5dfa0da5394e3b6/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79b6bad406155cad4481150fc5dfa0da5394e3b6/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr?ref=79b6bad406155cad4481150fc5dfa0da5394e3b6", "patch": "@@ -51,96 +51,112 @@ LL | #[export_name = \"BAR\"] static BAR: u32 = 5;\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n+error: declaration of a function with `link_section`\n+  --> $DIR/lint-unsafe-code.rs:51:1\n+   |\n+LL | #[link_section = \".example_section\"] fn uwu() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the program's behavior with overridden link sections on items is unpredictable and Rust cannot provide guarantees when you manually override them\n+\n+error: declaration of a static with `link_section`\n+  --> $DIR/lint-unsafe-code.rs:52:1\n+   |\n+LL | #[link_section = \".example_section\"] static UWU: u32 = 5;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the program's behavior with overridden link sections on items is unpredictable and Rust cannot provide guarantees when you manually override them\n+\n error: declaration of a method with `export_name`\n-  --> $DIR/lint-unsafe-code.rs:54:5\n+  --> $DIR/lint-unsafe-code.rs:57:5\n    |\n LL |     #[export_name = \"bar\"] fn bar() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of a method with `export_name`\n-  --> $DIR/lint-unsafe-code.rs:58:5\n+  --> $DIR/lint-unsafe-code.rs:61:5\n    |\n LL |     #[export_name = \"bar\"] fn foo() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of an `unsafe` function\n-  --> $DIR/lint-unsafe-code.rs:61:1\n+  --> $DIR/lint-unsafe-code.rs:64:1\n    |\n LL | unsafe fn baz() {}\n    | ^^^^^^^^^^^^^^^^^^\n \n error: declaration of an `unsafe` trait\n-  --> $DIR/lint-unsafe-code.rs:62:1\n+  --> $DIR/lint-unsafe-code.rs:65:1\n    |\n LL | unsafe trait Foo {}\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` trait\n-  --> $DIR/lint-unsafe-code.rs:63:1\n+  --> $DIR/lint-unsafe-code.rs:66:1\n    |\n LL | unsafe impl Foo for Bar {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: declaration of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:66:5\n+  --> $DIR/lint-unsafe-code.rs:69:5\n    |\n LL |     unsafe fn baz(&self);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:67:5\n+  --> $DIR/lint-unsafe-code.rs:70:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:68:5\n+  --> $DIR/lint-unsafe-code.rs:71:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:72:5\n+  --> $DIR/lint-unsafe-code.rs:75:5\n    |\n LL |     unsafe fn baz(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:73:5\n+  --> $DIR/lint-unsafe-code.rs:76:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:92:5\n+  --> $DIR/lint-unsafe-code.rs:95:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:103:5\n+  --> $DIR/lint-unsafe-code.rs:106:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:109:5\n+  --> $DIR/lint-unsafe-code.rs:112:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:113:5\n+  --> $DIR/lint-unsafe-code.rs:116:5\n    |\n LL |     unsafe fn baz(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: usage of an `unsafe` block\n-  --> $DIR/lint-unsafe-code.rs:124:5\n+  --> $DIR/lint-unsafe-code.rs:127:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^^^^\n@@ -204,5 +220,5 @@ LL |     unsafe_in_macro!()\n    |\n    = note: this error originates in the macro `unsafe_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 26 previous errors\n+error: aborting due to 28 previous errors\n "}]}