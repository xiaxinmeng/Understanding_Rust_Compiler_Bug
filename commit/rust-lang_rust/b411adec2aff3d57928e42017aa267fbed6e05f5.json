{"sha": "b411adec2aff3d57928e42017aa267fbed6e05f5", "node_id": "C_kwDOAAsO6NoAKGI0MTFhZGVjMmFmZjNkNTc5MjhlNDIwMTdhYTI2N2ZiZWQ2ZTA1ZjU", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-08-20T16:33:02Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-08-22T11:22:00Z"}, "message": "Move rustc_interface diagnostics to struct SessionDiagnostic derives", "tree": {"sha": "565e72bdda71b2e87b7087a22705f9334782efe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/565e72bdda71b2e87b7087a22705f9334782efe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b411adec2aff3d57928e42017aa267fbed6e05f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b411adec2aff3d57928e42017aa267fbed6e05f5", "html_url": "https://github.com/rust-lang/rust/commit/b411adec2aff3d57928e42017aa267fbed6e05f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b411adec2aff3d57928e42017aa267fbed6e05f5/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4403ae9ff9ca9912fe80a5401c57c48fb979e5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4403ae9ff9ca9912fe80a5401c57c48fb979e5f", "html_url": "https://github.com/rust-lang/rust/commit/e4403ae9ff9ca9912fe80a5401c57c48fb979e5f"}], "stats": {"total": 177, "additions": 137, "deletions": 40}, "files": [{"sha": "47419537311d67cf4b6e1850d75e3f62f5970d04", "filename": "compiler/rustc_error_messages/locales/en-US/interface.ftl", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b411adec2aff3d57928e42017aa267fbed6e05f5/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b411adec2aff3d57928e42017aa267fbed6e05f5/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl?ref=b411adec2aff3d57928e42017aa267fbed6e05f5", "patch": "@@ -4,3 +4,40 @@ interface_ferris_identifier =\n \n interface_emoji_identifier =\n     identifiers cannot contain emoji: `{$ident}`\n+\n+mixed_bin_crate =\n+    cannot mix `bin` crate type with others\n+\n+mixed_proc_macro_crate =\n+    cannot mix `proc-macro` crate type with others\n+\n+proc_macro_doc_without_arg =\n+    Trying to document proc macro crate without passing '--crate-type proc-macro to rustdoc\n+    .warn = The generated documentation may be incorrect\n+\n+error_writing_dependencies =\n+    error writing dependencies to `{$path}`: {$error}\n+\n+input_file_would_be_overwritten =\n+    the input file \"{$path}\" would be overwritten by the generated executable\n+\n+generated_file_conflicts_with_directory =\n+    the generated executable for the input file \"{$input_path}\" conflicts with the existing directory \"{$dir_path}\"\n+\n+temps_dir_error =\n+    failed to find or create the directory specified by `--temps-dir`\n+\n+out_dir_error =\n+    failed to find or create the directory specified by `--out-dir`\n+\n+cant_emit_mir =\n+    could not emit MIR: {$error}\n+\n+rustc_error_fatal =\n+    fatal error triggered by #[rustc_error]\n+\n+rustc_error_unexpected_annotation =\n+    unexpected annotation used with `#[rustc_error(...)]!\n+\n+failed_writing_file =\n+    failed to write file {$path}: {$error}\""}, {"sha": "a72134e31f175c243d09541bc1cc6c2afe611a06", "filename": "compiler/rustc_interface/src/errors.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b411adec2aff3d57928e42017aa267fbed6e05f5/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b411adec2aff3d57928e42017aa267fbed6e05f5/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs?ref=b411adec2aff3d57928e42017aa267fbed6e05f5", "patch": "@@ -1,3 +1,4 @@\n+use rustc_errors::DiagnosticArgFromDisplay;\n use rustc_macros::SessionDiagnostic;\n use rustc_span::{Span, Symbol};\n \n@@ -17,3 +18,70 @@ pub struct EmojiIdentifier {\n     pub spans: Vec<Span>,\n     pub ident: Symbol,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::mixed_bin_crate)]\n+pub struct MixedBinCrate;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::mixed_proc_macro_crate)]\n+pub struct MixedProcMacroCrate;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::proc_macro_doc_without_arg)]\n+pub struct ProcMacroDocWithoutArg;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::error_writing_dependencies)]\n+pub struct ErrorWritingDependencies<'a> {\n+    pub path: DiagnosticArgFromDisplay<'a>,\n+    pub error: DiagnosticArgFromDisplay<'a>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::input_file_would_be_overwritten)]\n+pub struct InputFileWouldBeOverWritten<'a> {\n+    pub path: DiagnosticArgFromDisplay<'a>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::generated_file_conflicts_with_directory)]\n+pub struct GeneratedFileConflictsWithDirectory<'a> {\n+    pub input_path: DiagnosticArgFromDisplay<'a>,\n+    pub dir_path: DiagnosticArgFromDisplay<'a>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::temps_dir_error)]\n+pub struct TempsDirError;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::out_dir_error)]\n+pub struct OutDirError;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::cant_emit_mir)]\n+pub struct CantEmitMIR<'a> {\n+    pub error: DiagnosticArgFromDisplay<'a>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::rustc_error_fatal)]\n+pub struct RustcErrorFatal {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::rustc_error_unexpected_annotation)]\n+pub struct RustcErrorUnexpectedAnnotation {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::failed_writing_file)]\n+pub struct FailedWritingFile<'a> {\n+    pub path: DiagnosticArgFromDisplay<'a>,\n+    pub error: DiagnosticArgFromDisplay<'a>,\n+}"}, {"sha": "b58fd7b338cd837e6f60a3b6903f8352b1080de2", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b411adec2aff3d57928e42017aa267fbed6e05f5/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b411adec2aff3d57928e42017aa267fbed6e05f5/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=b411adec2aff3d57928e42017aa267fbed6e05f5", "patch": "@@ -1,4 +1,8 @@\n-use crate::errors::{EmojiIdentifier, FerrisIdentifier};\n+use crate::errors::{\n+    CantEmitMIR, EmojiIdentifier, ErrorWritingDependencies, FerrisIdentifier,\n+    GeneratedFileConflictsWithDirectory, InputFileWouldBeOverWritten, MixedBinCrate,\n+    MixedProcMacroCrate, OutDirError, ProcMacroDocWithoutArg, TempsDirError,\n+};\n use crate::interface::{Compiler, Result};\n use crate::proc_macro_decls;\n use crate::util;\n@@ -375,10 +379,10 @@ pub fn configure_and_expand(\n \n     if crate_types.len() > 1 {\n         if is_executable_crate {\n-            sess.err(\"cannot mix `bin` crate type with others\");\n+            sess.emit_err(MixedBinCrate);\n         }\n         if is_proc_macro_crate {\n-            sess.err(\"cannot mix `proc-macro` crate type with others\");\n+            sess.emit_err(MixedProcMacroCrate);\n         }\n     }\n \n@@ -389,13 +393,7 @@ pub fn configure_and_expand(\n     // However, we do emit a warning, to let such users know that they should\n     // start passing '--crate-type proc-macro'\n     if has_proc_macro_decls && sess.opts.actually_rustdoc && !is_proc_macro_crate {\n-        let mut msg = sess.diagnostic().struct_warn(\n-            \"Trying to document proc macro crate \\\n-             without passing '--crate-type proc-macro to rustdoc\",\n-        );\n-\n-        msg.warn(\"The generated documentation may be incorrect\");\n-        msg.emit();\n+        sess.emit_warning(ProcMacroDocWithoutArg);\n     } else {\n         krate = sess.time(\"maybe_create_a_macro_crate\", || {\n             let is_test_crate = sess.opts.test;\n@@ -649,11 +647,12 @@ fn write_out_deps(\n                     .emit_artifact_notification(&deps_filename, \"dep-info\");\n             }\n         }\n-        Err(e) => sess.fatal(&format!(\n-            \"error writing dependencies to `{}`: {}\",\n-            deps_filename.display(),\n-            e\n-        )),\n+        Err(e) => {\n+            sess.emit_fatal(ErrorWritingDependencies {\n+                path: (&deps_filename.display()).into(),\n+                error: (&e).into(),\n+            });\n+        }\n     }\n }\n \n@@ -683,29 +682,23 @@ pub fn prepare_outputs(\n     if let Some(ref input_path) = compiler.input_path {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n-                let reported = sess.err(&format!(\n-                    \"the input file \\\"{}\\\" would be overwritten by the generated \\\n-                        executable\",\n-                    input_path.display()\n-                ));\n+                let reported = sess\n+                    .emit_err(InputFileWouldBeOverWritten { path: (&input_path.display()).into() });\n                 return Err(reported);\n             }\n             if let Some(dir_path) = output_conflicts_with_dir(&output_paths) {\n-                let reported = sess.err(&format!(\n-                    \"the generated executable for the input file \\\"{}\\\" conflicts with the \\\n-                        existing directory \\\"{}\\\"\",\n-                    input_path.display(),\n-                    dir_path.display()\n-                ));\n+                let reported = sess.emit_err(GeneratedFileConflictsWithDirectory {\n+                    input_path: (&input_path.display()).into(),\n+                    dir_path: (&dir_path.display()).into(),\n+                });\n                 return Err(reported);\n             }\n         }\n     }\n \n     if let Some(ref dir) = compiler.temps_dir {\n         if fs::create_dir_all(dir).is_err() {\n-            let reported =\n-                sess.err(\"failed to find or create the directory specified by `--temps-dir`\");\n+            let reported = sess.emit_err(TempsDirError);\n             return Err(reported);\n         }\n     }\n@@ -718,8 +711,7 @@ pub fn prepare_outputs(\n     if !only_dep_info {\n         if let Some(ref dir) = compiler.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n-                let reported =\n-                    sess.err(\"failed to find or create the directory specified by `--out-dir`\");\n+                let reported = sess.emit_err(OutDirError);\n                 return Err(reported);\n             }\n         }\n@@ -1003,7 +995,7 @@ pub fn start_codegen<'tcx>(\n \n     if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {\n         if let Err(e) = rustc_mir_transform::dump_mir::emit_mir(tcx, outputs) {\n-            tcx.sess.err(&format!(\"could not emit MIR: {}\", e));\n+            tcx.sess.emit_err(CantEmitMIR { error: (&e).into() });\n             tcx.sess.abort_if_errors();\n         }\n     }"}, {"sha": "e0e8752036e03d5662a6cb7d8a3c62eeee0b507b", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b411adec2aff3d57928e42017aa267fbed6e05f5/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b411adec2aff3d57928e42017aa267fbed6e05f5/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=b411adec2aff3d57928e42017aa267fbed6e05f5", "patch": "@@ -1,3 +1,4 @@\n+use crate::errors::{FailedWritingFile, RustcErrorFatal, RustcErrorUnexpectedAnnotation};\n use crate::interface::{Compiler, Result};\n use crate::passes::{self, BoxedResolver, QueryContext};\n \n@@ -274,18 +275,14 @@ impl<'tcx> Queries<'tcx> {\n \n                 // Bare `#[rustc_error]`.\n                 None => {\n-                    tcx.sess.span_fatal(\n-                        tcx.def_span(def_id),\n-                        \"fatal error triggered by #[rustc_error]\",\n-                    );\n+                    tcx.sess.emit_fatal(RustcErrorFatal { span: tcx.def_span(def_id) });\n                 }\n \n                 // Some other attribute.\n                 Some(_) => {\n-                    tcx.sess.span_warn(\n-                        tcx.def_span(def_id),\n-                        \"unexpected annotation used with `#[rustc_error(...)]!\",\n-                    );\n+                    tcx.sess.emit_warning(RustcErrorUnexpectedAnnotation {\n+                        span: tcx.def_span(def_id),\n+                    });\n                 }\n             }\n         }\n@@ -361,7 +358,10 @@ impl Linker {\n             let encoded = CodegenResults::serialize_rlink(&codegen_results);\n             let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n             std::fs::write(&rlink_file, encoded).map_err(|err| {\n-                sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n+                sess.emit_fatal(FailedWritingFile {\n+                    path: (&rlink_file.display()).into(),\n+                    error: (&err).into(),\n+                })\n             })?;\n             return Ok(());\n         }"}]}