{"sha": "a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Y2JkOGQ1ZThhY2EwZDBkOGRkZTE3NWJhMTNiZmE5OTVhNzUzYzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-26T16:08:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-26T16:08:13Z"}, "message": "check style for assist docs", "tree": {"sha": "a3dfa55e7fadcb7e7e8299ce03d9f7beaee4a79b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3dfa55e7fadcb7e7e8299ce03d9f7beaee4a79b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "html_url": "https://github.com/rust-lang/rust/commit/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f7d1f10c1614d9448604da5c105b75c43cc6f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7d1f10c1614d9448604da5c105b75c43cc6f2b", "html_url": "https://github.com/rust-lang/rust/commit/2f7d1f10c1614d9448604da5c105b75c43cc6f2b"}], "stats": {"total": 180, "additions": 165, "deletions": 15}, "files": [{"sha": "2903c178193aa1d13c1663258e2eaf6999bf673b", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "patch": "@@ -8,7 +8,7 @@ use crate::{Assist, AssistCtx, AssistId};\n \n // Assist: add_explicit_type\n //\n-// Specify type for a let binding\n+// Specify type for a let binding.\n //\n // ```\n // fn main() {"}, {"sha": "142777b0674f6497bf1bd366b3c836cb55929c9d", "filename": "crates/ra_assists/src/assists/add_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs?ref=a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "patch": "@@ -10,7 +10,7 @@ use crate::{Assist, AssistCtx, AssistId};\n \n // Assist: add_impl\n //\n-// Adds a new inherent impl for a type\n+// Adds a new inherent impl for a type.\n //\n // ```\n // struct Ctx<T: Clone> {"}, {"sha": "4ee4d47faca7b2598e5e61c0b92c04bd741ac3bd", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "patch": "@@ -14,7 +14,7 @@ enum AddMissingImplMembersMode {\n \n // Assist: add_impl_missing_members\n //\n-// Adds scaffold for required impl members\n+// Adds scaffold for required impl members.\n //\n // ```\n // trait T {\n@@ -50,7 +50,9 @@ pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Opti\n }\n \n // Assist: add_impl_default_members\n-// Adds scaffold for overriding default impl members\n+//\n+// Adds scaffold for overriding default impl members.\n+//\n // ```\n // trait T {\n //     Type X;"}, {"sha": "48782db4221ca6ef4553e68a0735ad37fc8d0d14", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "patch": "@@ -14,7 +14,9 @@ use crate::{\n };\n \n // Assist: convert_to_guarded_return\n+//\n // Replace a large conditional with a guarded return.\n+//\n // ```\n // fn main() {\n //     <|>if cond {"}, {"sha": "3a1e5cbe1b109d9beb589acc37afdb0ed653bd17", "filename": "crates/ra_assists/src/assists/flip_binexpr.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs?ref=a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "patch": "@@ -1,11 +1,23 @@\n-//! FIXME: write short doc here\n-\n use hir::db::HirDatabase;\n use ra_syntax::ast::{AstNode, BinExpr, BinOp};\n \n use crate::{Assist, AssistCtx, AssistId};\n \n-/// Flip binary expression assist.\n+// Assist: flip_binexpr\n+//\n+// Flips operands of a binary expression.\n+//\n+// ```\n+// fn main() {\n+//     let _ = 90 +<|> 2;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     let _ = 2 + 90;\n+// }\n+// ```\n pub(crate) fn flip_binexpr(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let expr = ctx.node_at_offset::<BinExpr>()?;\n     let lhs = expr.lhs()?.syntax().clone();"}, {"sha": "d06c5a0e18b3096a3cf2c43b24834d2835b03b57", "filename": "crates/ra_assists/src/assists/flip_comma.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs?ref=a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "patch": "@@ -1,10 +1,23 @@\n-//! FIXME: write short doc here\n-\n use hir::db::HirDatabase;\n use ra_syntax::{algo::non_trivia_sibling, Direction, T};\n \n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: flip_comma\n+//\n+// Flips two comma-separated items.\n+//\n+// ```\n+// fn main() {\n+//     ((1, 2),<|> (3, 4));\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     ((3, 4), (1, 2));\n+// }\n+// ```\n pub(crate) fn flip_comma(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let comma = ctx.token_at_offset().find(|leaf| leaf.kind() == T![,])?;\n     let prev = non_trivia_sibling(comma.clone().into(), Direction::Prev)?;"}, {"sha": "1997781dbbccb7bdec5b6213f7cb98022d060d56", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AstToken},\n@@ -9,6 +7,22 @@ use ra_syntax::{\n use crate::assist_ctx::AssistBuilder;\n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: inline_local_variable\n+//\n+// Inlines local variable.\n+//\n+// ```\n+// fn main() {\n+//     let x<|> = 1 + 2;\n+//     x * 4;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     (1 + 2) * 4;\n+// }\n+// ```\n pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let let_stmt = ctx.node_at_offset::<ast::LetStmt>()?;\n     let bind_pat = match let_stmt.pat()? {"}, {"sha": "d390db33cfe9d23d2864152d76f91b7793ea533c", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "patch": "@@ -203,3 +203,55 @@ fn handle(action: Action) {\n \"#####,\n     )\n }\n+\n+#[test]\n+fn doctest_flip_binexpr() {\n+    check(\n+        \"flip_binexpr\",\n+        r#####\"\n+fn main() {\n+    let _ = 90 +<|> 2;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let _ = 2 + 90;\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_flip_comma() {\n+    check(\n+        \"flip_comma\",\n+        r#####\"\n+fn main() {\n+    ((1, 2),<|> (3, 4));\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    ((3, 4), (1, 2));\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_inline_local_variable() {\n+    check(\n+        \"inline_local_variable\",\n+        r#####\"\n+fn main() {\n+    let x<|> = 1 + 2;\n+    x * 4;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    (1 + 2) * 4;\n+}\n+\"#####,\n+    )\n+}"}, {"sha": "8e2e8cc9457809b87d959304fde162c573522131", "filename": "docs/user/assists.md", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "patch": "@@ -21,7 +21,7 @@ struct Point {\n \n ## `add_explicit_type`\n \n-Specify type for a let binding\n+Specify type for a let binding.\n \n ```rust\n // BEFORE\n@@ -37,7 +37,7 @@ fn main() {\n \n ## `add_impl`\n \n-Adds a new inherent impl for a type\n+Adds a new inherent impl for a type.\n \n ```rust\n // BEFORE\n@@ -57,7 +57,7 @@ impl<T: Clone> Ctx<T> {\n \n ## `add_impl_default_members`\n \n-Adds scaffold for overriding default impl members\n+Adds scaffold for overriding default impl members.\n \n ```rust\n // BEFORE\n@@ -90,7 +90,7 @@ impl T for () {\n \n ## `add_impl_missing_members`\n \n-Adds scaffold for required impl members\n+Adds scaffold for required impl members.\n \n ```rust\n // BEFORE\n@@ -196,3 +196,52 @@ fn handle(action: Action) {\n     }\n }\n ```\n+\n+## `flip_binexpr`\n+\n+Flips operands of a binary expression.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    let _ = 90 +<|> 2;\n+}\n+\n+// AFTER\n+fn main() {\n+    let _ = 2 + 90;\n+}\n+```\n+\n+## `flip_comma`\n+\n+Flips two comma-separated items.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    ((1, 2),<|> (3, 4));\n+}\n+\n+// AFTER\n+fn main() {\n+    ((3, 4), (1, 2));\n+}\n+```\n+\n+## `inline_local_variable`\n+\n+Inlines local variable.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    let x<|> = 1 + 2;\n+    x * 4;\n+}\n+\n+// AFTER\n+fn main() {\n+    (1 + 2) * 4;\n+}\n+```"}, {"sha": "8dca2ed06e34d7d43bbca2fd6a758755d7439944", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=a5cbd8d5e8aca0d0d8dde175ba13bfa995a753c0", "patch": "@@ -52,6 +52,12 @@ fn collect_assists() -> Result<Vec<Assist>> {\n             );\n \n             let doc = take_until(lines.by_ref(), \"```\").trim().to_string();\n+            assert!(\n+                doc.chars().next().unwrap().is_ascii_uppercase() && doc.ends_with(\".\"),\n+                \"\\n\\n{}: assist docs should be proper sentences, with capitalization and a full stop at the end.\\n\\n{}\\n\\n\",\n+                id, doc,\n+            );\n+\n             let before = take_until(lines.by_ref(), \"```\");\n \n             assert_eq!(lines.next().unwrap().as_str(), \"->\");"}]}