{"sha": "0759a55feff2d7c4a15b563adc087ac4f59acb1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NTlhNTVmZWZmMmQ3YzRhMTViNTYzYWRjMDg3YWM0ZjU5YWNiMWI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-10T22:07:31Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T14:54:05Z"}, "message": "Remove unnecessary lifetime parameter\n\nTyCtxt is a reference type and so can be passed by value.", "tree": {"sha": "ec604cbacf0fc406864c411c4aac11355a201724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec604cbacf0fc406864c411c4aac11355a201724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0759a55feff2d7c4a15b563adc087ac4f59acb1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0759a55feff2d7c4a15b563adc087ac4f59acb1b", "html_url": "https://github.com/rust-lang/rust/commit/0759a55feff2d7c4a15b563adc087ac4f59acb1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0759a55feff2d7c4a15b563adc087ac4f59acb1b/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "763d373dabb7ccf581737749a2a1adec335d8249", "url": "https://api.github.com/repos/rust-lang/rust/commits/763d373dabb7ccf581737749a2a1adec335d8249", "html_url": "https://github.com/rust-lang/rust/commit/763d373dabb7ccf581737749a2a1adec335d8249"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "39c214b1fb42b4ee78a71eeedad6eecfe6db1df7", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0759a55feff2d7c4a15b563adc087ac4f59acb1b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0759a55feff2d7c4a15b563adc087ac4f59acb1b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=0759a55feff2d7c4a15b563adc087ac4f59acb1b", "patch": "@@ -392,7 +392,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 let hir = tcx.hir();\n                 let body = hir.body(hir.body_owned_by(hir.as_local_hir_id(def_id)));\n                 debug!(\"visiting body for {:?}\", def_id);\n-                EmitIgnoredResolutionErrors::new(&tcx).visit_body(body);\n+                EmitIgnoredResolutionErrors::new(tcx).visit_body(body);\n                 DEFAULT_TYPECK.with(|typeck| typeck(tcx, def_id))\n             };\n         }),\n@@ -602,17 +602,17 @@ thread_local!(static DEFAULT_TYPECK: for<'tcx> fn(TyCtxt<'tcx>, LocalDefId) -> &\n /// the name resolution pass may find errors that are never emitted.\n /// If typeck is called after this happens, then we'll get an ICE:\n /// 'Res::Error found but not reported'. To avoid this, emit the errors now.\n-struct EmitIgnoredResolutionErrors<'a, 'tcx> {\n-    tcx: &'a TyCtxt<'tcx>,\n+struct EmitIgnoredResolutionErrors<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> EmitIgnoredResolutionErrors<'a, 'tcx> {\n-    fn new(tcx: &'a TyCtxt<'tcx>) -> Self {\n+impl<'tcx> EmitIgnoredResolutionErrors<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>) -> Self {\n         Self { tcx }\n     }\n }\n \n-impl<'tcx> Visitor<'tcx> for EmitIgnoredResolutionErrors<'_, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for EmitIgnoredResolutionErrors<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}]}