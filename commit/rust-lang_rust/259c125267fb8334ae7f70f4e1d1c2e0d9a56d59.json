{"sha": "259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OWMxMjUyNjdmYjgzMzRhZTdmNzBmNGUxZDFjMmUwZDlhNTZkNTk=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-10-03T15:39:31Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-11-03T20:28:04Z"}, "message": "Mark several ascii methods as unstable again\n\nWe don't want to stabilize them now already. The goal of this set of\ncommits is just to add inherent methods to the four types. Stabilizing\nall of those methods can be done later.", "tree": {"sha": "cd89ce806709c21f4fd6391c97f7047ebc268f98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd89ce806709c21f4fd6391c97f7047ebc268f98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "html_url": "https://github.com/rust-lang/rust/commit/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da57580736c6d30fec6c4e4442bc5376ac81f245", "url": "https://api.github.com/repos/rust-lang/rust/commits/da57580736c6d30fec6c4e4442bc5376ac81f245", "html_url": "https://github.com/rust-lang/rust/commit/da57580736c6d30fec6c4e4442bc5376ac81f245"}], "stats": {"total": 128, "additions": 88, "deletions": 40}, "files": [{"sha": "a40ed060604a7b1e4f8e19f30366d2a6fd15413a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "patch": "@@ -83,6 +83,7 @@\n #![cfg_attr(not(test), feature(generator_trait))]\n #![cfg_attr(test, feature(rand, test))]\n #![feature(allow_internal_unstable)]\n+#![feature(ascii_ctype)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]"}, {"sha": "b41cb912fe798d892ad01ba9119f74a469e3f38b", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "patch": "@@ -1631,23 +1631,23 @@ impl [u8] {\n     ///\n     /// - U+0041 'A' ... U+005A 'Z', or\n     /// - U+0061 'a' ... U+007A 'z'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_alphabetic(&self) -> bool {\n         self.iter().all(|b| b.is_ascii_alphabetic())\n     }\n \n     /// Checks if all bytes of this slice are ASCII uppercase characters:\n     /// U+0041 'A' ... U+005A 'Z'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_uppercase(&self) -> bool {\n         self.iter().all(|b| b.is_ascii_uppercase())\n     }\n \n     /// Checks if all bytes of this slice are ASCII lowercase characters:\n     /// U+0061 'a' ... U+007A 'z'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_lowercase(&self) -> bool {\n         self.iter().all(|b| b.is_ascii_lowercase())\n@@ -1658,15 +1658,15 @@ impl [u8] {\n     /// - U+0041 'A' ... U+005A 'Z', or\n     /// - U+0061 'a' ... U+007A 'z', or\n     /// - U+0030 '0' ... U+0039 '9'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n         self.iter().all(|b| b.is_ascii_alphanumeric())\n     }\n \n     /// Checks if all bytes of this slice are ASCII decimal digit:\n     /// U+0030 '0' ... U+0039 '9'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_digit(&self) -> bool {\n         self.iter().all(|b| b.is_ascii_digit())\n@@ -1677,7 +1677,7 @@ impl [u8] {\n     /// - U+0030 '0' ... U+0039 '9', or\n     /// - U+0041 'A' ... U+0046 'F', or\n     /// - U+0061 'a' ... U+0066 'f'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_hexdigit(&self) -> bool {\n         self.iter().all(|b| b.is_ascii_hexdigit())\n@@ -1689,15 +1689,15 @@ impl [u8] {\n     /// - U+003A ... U+0040 `: ; < = > ? @`, or\n     /// - U+005B ... U+0060 `[ \\\\ ] ^ _ \\``, or\n     /// - U+007B ... U+007E `{ | } ~`\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_punctuation(&self) -> bool {\n         self.iter().all(|b| b.is_ascii_punctuation())\n     }\n \n     /// Checks if all bytes of this slice are ASCII graphic characters:\n     /// U+0021 '@' ... U+007E '~'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_graphic(&self) -> bool {\n         self.iter().all(|b| b.is_ascii_graphic())\n@@ -1722,7 +1722,7 @@ impl [u8] {\n     /// [infra-aw]: https://infra.spec.whatwg.org/#ascii-whitespace\n     /// [pct]: http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01\n     /// [bfs]: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_whitespace(&self) -> bool {\n         self.iter().all(|b| b.is_ascii_whitespace())\n@@ -1735,7 +1735,7 @@ impl [u8] {\n     ///\n     /// Note that most ASCII whitespace characters are control\n     /// characters, but SPACE is not.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_control(&self) -> bool {\n         self.iter().all(|b| b.is_ascii_control())"}, {"sha": "5f0b4088fc07eaa53f5f3962985d53d327610da8", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "patch": "@@ -2205,7 +2205,7 @@ impl str {\n     ///\n     /// - U+0041 'A' ... U+005A 'Z', or\n     /// - U+0061 'a' ... U+007A 'z'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_alphabetic(&self) -> bool {\n         self.bytes().all(|b| b.is_ascii_alphabetic())\n@@ -2217,6 +2217,8 @@ impl str {\n     /// # Example\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// // Only ascii uppercase characters\n     /// assert!(\"HELLO\".is_ascii_uppercase());\n     ///\n@@ -2226,7 +2228,7 @@ impl str {\n     /// // While all characters are uppercase, '\u00dc' is not ascii\n     /// assert!(!\"TSCH\u00dcSS\".is_ascii_uppercase());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_uppercase(&self) -> bool {\n         self.bytes().all(|b| b.is_ascii_uppercase())\n@@ -2238,6 +2240,8 @@ impl str {\n     /// # Example\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// // Only ascii uppercase characters\n     /// assert!(\"hello\".is_ascii_lowercase());\n     ///\n@@ -2247,7 +2251,7 @@ impl str {\n     /// // While all characters are lowercase, '\u00dc' is not ascii\n     /// assert!(!\"tsch\u00fcss\".is_ascii_lowercase());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_lowercase(&self) -> bool {\n         self.bytes().all(|b| b.is_ascii_lowercase())\n@@ -2259,15 +2263,15 @@ impl str {\n     /// - U+0041 'A' ... U+005A 'Z', or\n     /// - U+0061 'a' ... U+007A 'z', or\n     /// - U+0030 '0' ... U+0039 '9'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n         self.bytes().all(|b| b.is_ascii_alphanumeric())\n     }\n \n     /// Checks if all characters of this string are ASCII decimal digit:\n     /// U+0030 '0' ... U+0039 '9'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_digit(&self) -> bool {\n         self.bytes().all(|b| b.is_ascii_digit())\n@@ -2278,7 +2282,7 @@ impl str {\n     /// - U+0030 '0' ... U+0039 '9', or\n     /// - U+0041 'A' ... U+0046 'F', or\n     /// - U+0061 'a' ... U+0066 'f'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_hexdigit(&self) -> bool {\n         self.bytes().all(|b| b.is_ascii_hexdigit())\n@@ -2291,15 +2295,15 @@ impl str {\n     /// - U+003A ... U+0040 `: ; < = > ? @`, or\n     /// - U+005B ... U+0060 `[ \\\\ ] ^ _ \\``, or\n     /// - U+007B ... U+007E `{ | } ~`\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_punctuation(&self) -> bool {\n         self.bytes().all(|b| b.is_ascii_punctuation())\n     }\n \n     /// Checks if all characters of this string are ASCII graphic characters:\n     /// U+0021 '@' ... U+007E '~'.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_graphic(&self) -> bool {\n         self.bytes().all(|b| b.is_ascii_graphic())\n@@ -2324,7 +2328,7 @@ impl str {\n     /// [infra-aw]: https://infra.spec.whatwg.org/#ascii-whitespace\n     /// [pct]: http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01\n     /// [bfs]: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_whitespace(&self) -> bool {\n         self.bytes().all(|b| b.is_ascii_whitespace())\n@@ -2337,7 +2341,7 @@ impl str {\n     ///\n     /// Note that most ASCII whitespace characters are control\n     /// characters, but SPACE is not.\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_control(&self) -> bool {\n         self.bytes().all(|b| b.is_ascii_control())"}, {"sha": "104e0cdb741152fb8d061d6be280b6d06d96c3d7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "patch": "@@ -2396,6 +2396,8 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2416,7 +2418,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphabetic());\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_alphabetic(&self) -> bool {\n         if *self >= 0x80 { return false; }\n@@ -2432,6 +2434,8 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2452,7 +2456,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_uppercase());\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_uppercase(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2468,6 +2472,8 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2488,7 +2494,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_lowercase());\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_lowercase(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2507,6 +2513,8 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2527,7 +2535,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphanumeric());\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2543,6 +2551,8 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2563,7 +2573,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_digit());\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_digit(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2582,6 +2592,8 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2602,7 +2614,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_hexdigit());\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_hexdigit(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2622,6 +2634,8 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2642,7 +2656,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_punctuation());\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_punctuation(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2658,6 +2672,8 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2678,7 +2694,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_graphic());\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_graphic(&self) -> bool {\n         if *self >= 0x80 { return false; }\n@@ -2711,6 +2727,8 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2731,7 +2749,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_whitespace());\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_whitespace(&self) -> bool {\n         if *self >= 0x80 { return false; }\n@@ -2749,6 +2767,8 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2769,7 +2789,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_control());\n     /// assert!(esc.is_ascii_control());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_control(&self) -> bool {\n         if *self >= 0x80 { return false; }"}, {"sha": "fcb25f7aef3d4b10e00dc02eeca5dc0c9528fe0f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "patch": "@@ -14,6 +14,7 @@\n        html_playground_url = \"https://play.rust-lang.org/\")]\n #![deny(warnings)]\n \n+#![feature(ascii_ctype)]\n #![feature(rustc_private)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "429153dc58b4cb8e5bdd53f038375e07204f3b8e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "patch": "@@ -244,6 +244,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(align_offset)]\n #![feature(array_error_internals)]\n+#![feature(ascii_ctype)]\n #![feature(asm)]\n #![feature(attr_literals)]\n #![feature(box_syntax)]"}, {"sha": "c012bdcb6dbe3fe707a86c9330d3646d8957913f", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "patch": "@@ -1084,6 +1084,8 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1104,7 +1106,7 @@ impl char {\n     /// assert!(!lf.is_ascii_alphabetic());\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_alphabetic(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_alphabetic()\n@@ -1116,6 +1118,8 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1136,7 +1140,7 @@ impl char {\n     /// assert!(!lf.is_ascii_uppercase());\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_uppercase(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_uppercase()\n@@ -1148,6 +1152,8 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1168,7 +1174,7 @@ impl char {\n     /// assert!(!lf.is_ascii_lowercase());\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_lowercase(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_lowercase()\n@@ -1183,6 +1189,8 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1203,7 +1211,7 @@ impl char {\n     /// assert!(!lf.is_ascii_alphanumeric());\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_alphanumeric()\n@@ -1215,6 +1223,8 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1235,7 +1245,7 @@ impl char {\n     /// assert!(!lf.is_ascii_digit());\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_digit(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_digit()\n@@ -1250,6 +1260,8 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1270,7 +1282,7 @@ impl char {\n     /// assert!(!lf.is_ascii_hexdigit());\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_hexdigit(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_hexdigit()\n@@ -1286,6 +1298,8 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1306,7 +1320,7 @@ impl char {\n     /// assert!(!lf.is_ascii_punctuation());\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_punctuation(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_punctuation()\n@@ -1318,6 +1332,8 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1338,7 +1354,7 @@ impl char {\n     /// assert!(!lf.is_ascii_graphic());\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_graphic(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_graphic()\n@@ -1367,6 +1383,8 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1387,7 +1405,7 @@ impl char {\n     /// assert!(lf.is_ascii_whitespace());\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_whitespace(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_whitespace()\n@@ -1401,6 +1419,8 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ascii_ctype)]\n+    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1421,7 +1441,7 @@ impl char {\n     /// assert!(lf.is_ascii_control());\n     /// assert!(esc.is_ascii_control());\n     /// ```\n-    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n+    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[inline]\n     pub fn is_ascii_control(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_control()"}, {"sha": "65058b6554aa6d6a809c22f93764c2cd781dedbf", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259c125267fb8334ae7f70f4e1d1c2e0d9a56d59/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=259c125267fb8334ae7f70f4e1d1c2e0d9a56d59", "patch": "@@ -30,6 +30,7 @@\n #![deny(warnings)]\n #![no_std]\n \n+#![feature(ascii_ctype)]\n #![feature(core_char_ext)]\n #![feature(str_internals)]\n #![feature(decode_utf8)]"}]}