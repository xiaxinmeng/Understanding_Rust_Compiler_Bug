{"sha": "76fb91be84e93f6d34a428d997e92fcbf4a19f23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZmI5MWJlODRlOTNmNmQzNGE0MjhkOTk3ZTkyZmNiZjRhMTlmMjM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-02T06:06:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-02T06:06:17Z"}, "message": "Rollup merge of #64885 - andjo403:iter, r=scottmcm\n\nuse try_fold instead of try_for_each to reduce compile time\n\nas it was stated in #64572 that the biggest gain was due to less code was generated I tried to reduce the number of functions to inline by using try_fold direct instead of calling try_for_each that calls try_fold.\n\nas there is some gains with using the try_fold function this is maybe a way forward.\nwhen I tried to compile the clap-rs benchmark I get times gains only some % from #64572\n\nthere is more function that use eg. fold that calls try_fold that also can be changed but the question is how mush \"duplication\" that is tolerated in std to give faster compile times\n\ncan someone start a perf run?\n\ncc @nnethercote @scottmcm @bluss\nr? @ghost", "tree": {"sha": "acb49cfb2947597b3fa0ed7ef1416393cd6346ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acb49cfb2947597b3fa0ed7ef1416393cd6346ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76fb91be84e93f6d34a428d997e92fcbf4a19f23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlD5ZCRBK7hj4Ov3rIwAAdHIIAKCZ8rt4XXCc7zofwOMmrBYh\nSfGdUevTJKTrT1LRXIfpsptHBKTArWCT1bxOgkGYuNS5ZK5YzWi/W0BUgMAuWNP4\nKXKL4jaFP64Za6RZL8iZaWv+pksgzgOFbyGdHEqWZTcmGY3m6XLtV3PqhEA1HgV2\nBSNaBbnXhOltbdBrC41yAwsdZAceuuuVv8oEY9ERoNh6lysjXZDoU/qvPPEcvgpq\nZr7wlRU4jW993/0OxYWdPyjL3WdSy3KNDfhRf2Fsfb4HwTHMYIorbltLmgrsQNx5\n5HvN8eARMUBSxIo2BJfK0aQHHRUGumfOvn3hYQ1O9lEFw97vf+83Mt0p5fLuEMY=\n=fOYT\n-----END PGP SIGNATURE-----\n", "payload": "tree acb49cfb2947597b3fa0ed7ef1416393cd6346ee\nparent 8f5f92a07a1c3116eae83cbd4ad550f6d268bbe9\nparent 8737061cb59f2563153bdca3d121f40584597426\nauthor Tyler Mandry <tmandry@gmail.com> 1569996377 -0700\ncommitter GitHub <noreply@github.com> 1569996377 -0700\n\nRollup merge of #64885 - andjo403:iter, r=scottmcm\n\nuse try_fold instead of try_for_each to reduce compile time\n\nas it was stated in #64572 that the biggest gain was due to less code was generated I tried to reduce the number of functions to inline by using try_fold direct instead of calling try_for_each that calls try_fold.\n\nas there is some gains with using the try_fold function this is maybe a way forward.\nwhen I tried to compile the clap-rs benchmark I get times gains only some % from #64572\n\nthere is more function that use eg. fold that calls try_fold that also can be changed but the question is how mush \"duplication\" that is tolerated in std to give faster compile times\n\ncan someone start a perf run?\n\ncc @nnethercote @scottmcm @bluss\nr? @ghost\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76fb91be84e93f6d34a428d997e92fcbf4a19f23", "html_url": "https://github.com/rust-lang/rust/commit/76fb91be84e93f6d34a428d997e92fcbf4a19f23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76fb91be84e93f6d34a428d997e92fcbf4a19f23/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f5f92a07a1c3116eae83cbd4ad550f6d268bbe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5f92a07a1c3116eae83cbd4ad550f6d268bbe9", "html_url": "https://github.com/rust-lang/rust/commit/8f5f92a07a1c3116eae83cbd4ad550f6d268bbe9"}, {"sha": "8737061cb59f2563153bdca3d121f40584597426", "url": "https://api.github.com/repos/rust-lang/rust/commits/8737061cb59f2563153bdca3d121f40584597426", "html_url": "https://github.com/rust-lang/rust/commit/8737061cb59f2563153bdca3d121f40584597426"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "a272035150a1587f7551b38de7f8663e1c5290f5", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/76fb91be84e93f6d34a428d997e92fcbf4a19f23/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76fb91be84e93f6d34a428d997e92fcbf4a19f23/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=76fb91be84e93f6d34a428d997e92fcbf4a19f23", "patch": "@@ -1859,14 +1859,13 @@ pub trait Iterator {\n         Self: Sized, F: FnMut(Self::Item) -> bool\n     {\n         #[inline]\n-        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut(T) -> LoopState<(), ()> {\n-            move |x| {\n+        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> LoopState<(), ()> {\n+            move |(), x| {\n                 if f(x) { LoopState::Continue(()) }\n                 else { LoopState::Break(()) }\n             }\n         }\n-\n-        self.try_for_each(check(f)) == LoopState::Continue(())\n+        self.try_fold((), check(f)) == LoopState::Continue(())\n     }\n \n     /// Tests if any element of the iterator matches a predicate.\n@@ -1913,14 +1912,14 @@ pub trait Iterator {\n         F: FnMut(Self::Item) -> bool\n     {\n         #[inline]\n-        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut(T) -> LoopState<(), ()> {\n-            move |x| {\n+        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> LoopState<(), ()> {\n+            move |(), x| {\n                 if f(x) { LoopState::Break(()) }\n                 else { LoopState::Continue(()) }\n             }\n         }\n \n-        self.try_for_each(check(f)) == LoopState::Break(())\n+        self.try_fold((), check(f)) == LoopState::Break(())\n     }\n \n     /// Searches for an element of an iterator that satisfies a predicate.\n@@ -1972,14 +1971,16 @@ pub trait Iterator {\n         P: FnMut(&Self::Item) -> bool,\n     {\n         #[inline]\n-        fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut(T) -> LoopState<(), T> {\n-            move |x| {\n+        fn check<T>(\n+            mut predicate: impl FnMut(&T) -> bool\n+        ) -> impl FnMut((), T) -> LoopState<(), T> {\n+            move |(), x| {\n                 if predicate(&x) { LoopState::Break(x) }\n                 else { LoopState::Continue(()) }\n             }\n         }\n \n-        self.try_for_each(check(predicate)).break_value()\n+        self.try_fold((), check(predicate)).break_value()\n     }\n \n     /// Applies function to the elements of iterator and returns\n@@ -2004,14 +2005,14 @@ pub trait Iterator {\n         F: FnMut(Self::Item) -> Option<B>,\n     {\n         #[inline]\n-        fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut(T) -> LoopState<(), B> {\n-            move |x| match f(x) {\n+        fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> LoopState<(), B> {\n+            move |(), x| match f(x) {\n                 Some(x) => LoopState::Break(x),\n                 None => LoopState::Continue(()),\n             }\n         }\n \n-        self.try_for_each(check(f)).break_value()\n+        self.try_fold((), check(f)).break_value()\n     }\n \n     /// Searches for an element in an iterator, returning its index."}]}