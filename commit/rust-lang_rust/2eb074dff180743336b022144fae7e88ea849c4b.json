{"sha": "2eb074dff180743336b022144fae7e88ea849c4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYjA3NGRmZjE4MDc0MzMzNmIwMjIxNDRmYWU3ZTg4ZWE4NDljNGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-16T08:19:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-16T08:19:22Z"}, "message": "make example code typecheck at least", "tree": {"sha": "8dfc2da2a0e300644989f8ffd856fef7dcd82f38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dfc2da2a0e300644989f8ffd856fef7dcd82f38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eb074dff180743336b022144fae7e88ea849c4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb074dff180743336b022144fae7e88ea849c4b", "html_url": "https://github.com/rust-lang/rust/commit/2eb074dff180743336b022144fae7e88ea849c4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eb074dff180743336b022144fae7e88ea849c4b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86e283a1b70005e7d0f31131fe17ffe1fb1dcd79", "url": "https://api.github.com/repos/rust-lang/rust/commits/86e283a1b70005e7d0f31131fe17ffe1fb1dcd79", "html_url": "https://github.com/rust-lang/rust/commit/86e283a1b70005e7d0f31131fe17ffe1fb1dcd79"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "ffea5cbf3318c6646a8c3b54cfd98c6b437afada", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2eb074dff180743336b022144fae7e88ea849c4b/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb074dff180743336b022144fae7e88ea849c4b/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=2eb074dff180743336b022144fae7e88ea849c4b", "patch": "@@ -168,7 +168,9 @@\n //! you must treat Drop as implicitly taking `Pin<&mut Self>`.\n //!\n //! For example, you could implement `Drop` as follows:\n-//! ```rust,ignore\n+//! ```rust,no_run\n+//! # use std::pin::Pin;\n+//! # struct Type { }\n //! impl Drop for Type {\n //!     fn drop(&mut self) {\n //!         // `new_unchecked` is okay because we know this value is never used\n@@ -220,7 +222,10 @@\n //! all you have to ensure is that you never create a pinned reference to that field.\n //!\n //! Then you may add a projection method that turns `Pin<&mut Struct>` into `&mut Field`:\n-//! ```rust,ignore\n+//! ```rust,no_run\n+//! # use std::pin::Pin;\n+//! # type Field = i32;\n+//! # struct Struct { field: Field }\n //! impl Struct {\n //!     fn pin_get_field<'a>(self: Pin<&'a mut Self>) -> &'a mut Field {\n //!         // This is okay because `field` is never considered pinned.\n@@ -240,7 +245,10 @@\n //!\n //! This allows writing a projection that creates a `Pin<&mut Field>`, thus\n //! witnessing that the field is pinned:\n-//! ```rust,ignore\n+//! ```rust,no_run\n+//! # use std::pin::Pin;\n+//! # type Field = i32;\n+//! # struct Struct { field: Field }\n //! impl Struct {\n //!     fn pin_get_field<'a>(self: Pin<&'a mut Self>) -> Pin<&'a mut Field> {\n //!         // This is okay because `field` is pinned when `self` is."}]}