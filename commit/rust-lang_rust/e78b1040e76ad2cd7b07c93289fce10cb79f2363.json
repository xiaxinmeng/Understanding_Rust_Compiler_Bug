{"sha": "e78b1040e76ad2cd7b07c93289fce10cb79f2363", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3OGIxMDQwZTc2YWQyY2Q3YjA3YzkzMjg5ZmNlMTBjYjc5ZjIzNjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T07:03:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T23:14:43Z"}, "message": "rustc: Pull some uses of early_error up into build_target_config", "tree": {"sha": "f7aaa6e1c3a188b5ce36525b464e4eaef01e3a9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7aaa6e1c3a188b5ce36525b464e4eaef01e3a9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e78b1040e76ad2cd7b07c93289fce10cb79f2363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e78b1040e76ad2cd7b07c93289fce10cb79f2363", "html_url": "https://github.com/rust-lang/rust/commit/e78b1040e76ad2cd7b07c93289fce10cb79f2363", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e78b1040e76ad2cd7b07c93289fce10cb79f2363/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876e9fdc06563af60e1213f3e29cc325331e2a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/876e9fdc06563af60e1213f3e29cc325331e2a3d", "html_url": "https://github.com/rust-lang/rust/commit/876e9fdc06563af60e1213f3e29cc325331e2a3d"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "03544c3d5fc8020920319feba88b5d5daf9a50df", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e78b1040e76ad2cd7b07c93289fce10cb79f2363/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78b1040e76ad2cd7b07c93289fce10cb79f2363/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=e78b1040e76ad2cd7b07c93289fce10cb79f2363", "patch": "@@ -289,36 +289,42 @@ fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n                         io::string_reader(src), io::stdout(), ann);\n }\n \n-fn get_os(triple: str) -> session::os {\n+fn get_os(triple: str) -> option<session::os> {\n     ret if str::find(triple, \"win32\") >= 0 ||\n                str::find(triple, \"mingw32\") >= 0 {\n-            session::os_win32\n+            some(session::os_win32)\n         } else if str::find(triple, \"darwin\") >= 0 {\n-            session::os_macos\n+            some(session::os_macos)\n         } else if str::find(triple, \"linux\") >= 0 {\n-            session::os_linux\n+            some(session::os_linux)\n         } else if str::find(triple, \"freebsd\") >= 0 {\n-            session::os_freebsd\n-        } else { early_error(\"Unknown operating system!\") };\n+            some(session::os_freebsd)\n+        } else { none };\n }\n \n-fn get_arch(triple: str) -> session::arch {\n+fn get_arch(triple: str) -> option<session::arch> {\n     ret if str::find(triple, \"i386\") >= 0 || str::find(triple, \"i486\") >= 0 ||\n                str::find(triple, \"i586\") >= 0 ||\n                str::find(triple, \"i686\") >= 0 ||\n                str::find(triple, \"i786\") >= 0 {\n-            session::arch_x86\n+            some(session::arch_x86)\n         } else if str::find(triple, \"x86_64\") >= 0 {\n-            session::arch_x86_64\n+            some(session::arch_x86_64)\n         } else if str::find(triple, \"arm\") >= 0 ||\n                       str::find(triple, \"xscale\") >= 0 {\n-            session::arch_arm\n-        } else { early_error(\"Unknown architecture! \" + triple) };\n+            some(session::arch_arm)\n+        } else { none };\n }\n \n fn build_target_config(sopts: @session::options) -> @session::config {\n-    let os = get_os(sopts.target_triple);\n-    let arch = get_arch(sopts.target_triple);\n+    let os = alt get_os(sopts.target_triple) {\n+      some(os) { os }\n+      none. { early_error(\"Unknown operating system!\") }\n+    };\n+    let arch = alt get_arch(sopts.target_triple) {\n+      some(arch) { arch }\n+      none. { early_error(\"Unknown architecture! \" + sopts.target_triple) }\n+    };\n     let (int_type, uint_type, float_type) = alt arch {\n       session::arch_x86. {(ast::ty_i32, ast::ty_u32, ast::ty_f64)}\n       session::arch_x86_64. {(ast::ty_i64, ast::ty_u64, ast::ty_f64)}"}]}