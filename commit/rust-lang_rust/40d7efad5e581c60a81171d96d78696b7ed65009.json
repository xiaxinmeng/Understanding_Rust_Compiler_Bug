{"sha": "40d7efad5e581c60a81171d96d78696b7ed65009", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZDdlZmFkNWU1ODFjNjBhODExNzFkOTZkNzg2OTZiN2VkNjUwMDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-29T02:45:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-29T02:45:48Z"}, "message": "Auto merge of #79529 - Dylan-DPC:rollup-6k20msr, r=Dylan-DPC\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #79327 (Require allocator to be static for boxed `Pin`-API)\n - #79340 (Rename \"stability\" CSS class to \"item-info\" and combine `document_stability` with `document_short`)\n - #79363 (BTreeMap: try to enhance various comments)\n - #79395 (Move ui if tests from top-level into `expr/if`)\n - #79443 (Improve rustdoc JS tests error output)\n - #79464 (Extend doc keyword feature by allowing any ident)\n - #79484 (add enable-full-tools to freebsd builds to prevent occasional link er\u2026)\n - #79505 (Cleanup: shorter and faster code)\n - #79514 (Add test for issue #54121: order dependent trait bounds)\n - #79516 (Remove unnecessary `mut` binding)\n - #79528 (Fix a bootstrap comment)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0c3dd0515d51cffbc95d215fe966856253ad48fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c3dd0515d51cffbc95d215fe966856253ad48fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40d7efad5e581c60a81171d96d78696b7ed65009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40d7efad5e581c60a81171d96d78696b7ed65009", "html_url": "https://github.com/rust-lang/rust/commit/40d7efad5e581c60a81171d96d78696b7ed65009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40d7efad5e581c60a81171d96d78696b7ed65009/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "914d07ae5f90f01f138e66807873295fceaa9a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/914d07ae5f90f01f138e66807873295fceaa9a26", "html_url": "https://github.com/rust-lang/rust/commit/914d07ae5f90f01f138e66807873295fceaa9a26"}, {"sha": "d0515ce7ef9662cef5333d31085831c07b67404a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0515ce7ef9662cef5333d31085831c07b67404a", "html_url": "https://github.com/rust-lang/rust/commit/d0515ce7ef9662cef5333d31085831c07b67404a"}], "stats": {"total": 514, "additions": 343, "deletions": 171}, "files": [{"sha": "2720c376774e8ff285dd6f8903797ff34903fc42", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -94,9 +94,9 @@ fn to_camel_case(s: &str) -> String {\n                 }\n \n                 if new_word {\n-                    camel_cased_component.push_str(&c.to_uppercase().to_string());\n+                    camel_cased_component.extend(c.to_uppercase());\n                 } else {\n-                    camel_cased_component.push_str(&c.to_lowercase().to_string());\n+                    camel_cased_component.extend(c.to_lowercase());\n                 }\n \n                 prev_is_lower_case = c.is_lowercase();"}, {"sha": "523628b70582fc67934402d775ba794061f50f46", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -1590,11 +1590,6 @@ impl Symbol {\n         self == kw::Try\n     }\n \n-    /// Used for sanity checking rustdoc keyword sections.\n-    pub fn is_doc_keyword(self) -> bool {\n-        self <= kw::Union\n-    }\n-\n     /// A keyword or reserved identifier that can be used as a path segment.\n     pub fn is_path_segment_keyword(self) -> bool {\n         self == kw::Super"}, {"sha": "74b6652981a8b62ed1a099b077f184d8ae5eb41b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -833,11 +833,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// - it also appears in the backtrace at some position `X`,\n     /// - all the predicates at positions `X..` between `X` and the top are\n     ///   also defaulted traits.\n-    pub fn coinductive_match<I>(&mut self, cycle: I) -> bool\n+    pub fn coinductive_match<I>(&mut self, mut cycle: I) -> bool\n     where\n         I: Iterator<Item = ty::Predicate<'tcx>>,\n     {\n-        let mut cycle = cycle;\n         cycle.all(|predicate| self.coinductive_predicate(predicate))\n     }\n "}, {"sha": "d814c525ceb6e865479171d5f040dce70d5cf881", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -327,7 +327,10 @@ impl<T, A: AllocRef> Box<T, A> {\n     /// `x` will be pinned in memory and unable to be moved.\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[inline(always)]\n-    pub fn pin_in(x: T, alloc: A) -> Pin<Self> {\n+    pub fn pin_in(x: T, alloc: A) -> Pin<Self>\n+    where\n+        A: 'static,\n+    {\n         Self::new_in(x, alloc).into()\n     }\n \n@@ -802,7 +805,10 @@ impl<T: ?Sized, A: AllocRef> Box<T, A> {\n     ///\n     /// This is also available via [`From`].\n     #[unstable(feature = \"box_into_pin\", issue = \"62370\")]\n-    pub fn into_pin(boxed: Self) -> Pin<Self> {\n+    pub fn into_pin(boxed: Self) -> Pin<Self>\n+    where\n+        A: 'static,\n+    {\n         // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n         // when `T: !Unpin`,  so it's safe to pin it directly without any\n         // additional requirements.\n@@ -1010,7 +1016,10 @@ impl<T> From<T> for Box<T> {\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<T: ?Sized, A: AllocRef> From<Box<T, A>> for Pin<Box<T, A>> {\n+impl<T: ?Sized, A: AllocRef> From<Box<T, A>> for Pin<Box<T, A>>\n+where\n+    A: 'static,\n+{\n     /// Converts a `Box<T>` into a `Pin<Box<T>>`\n     ///\n     /// This conversion does not allocate on the heap and happens in place.\n@@ -1413,10 +1422,13 @@ impl<T: ?Sized, A: AllocRef> AsMut<T> for Box<T, A> {\n  *  could have a method to project a Pin<T> from it.\n  */\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<T: ?Sized, A: AllocRef> Unpin for Box<T, A> {}\n+impl<T: ?Sized, A: AllocRef> Unpin for Box<T, A> where A: 'static {}\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<G: ?Sized + Generator<R> + Unpin, R, A: AllocRef> Generator<R> for Box<G, A> {\n+impl<G: ?Sized + Generator<R> + Unpin, R, A: AllocRef> Generator<R> for Box<G, A>\n+where\n+    A: 'static,\n+{\n     type Yield = G::Yield;\n     type Return = G::Return;\n \n@@ -1426,7 +1438,10 @@ impl<G: ?Sized + Generator<R> + Unpin, R, A: AllocRef> Generator<R> for Box<G, A\n }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<G: ?Sized + Generator<R>, R, A: AllocRef> Generator<R> for Pin<Box<G, A>> {\n+impl<G: ?Sized + Generator<R>, R, A: AllocRef> Generator<R> for Pin<Box<G, A>>\n+where\n+    A: 'static,\n+{\n     type Yield = G::Yield;\n     type Return = G::Return;\n \n@@ -1436,7 +1451,10 @@ impl<G: ?Sized + Generator<R>, R, A: AllocRef> Generator<R> for Pin<Box<G, A>> {\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-impl<F: ?Sized + Future + Unpin, A: AllocRef> Future for Box<F, A> {\n+impl<F: ?Sized + Future + Unpin, A: AllocRef> Future for Box<F, A>\n+where\n+    A: 'static,\n+{\n     type Output = F::Output;\n \n     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {"}, {"sha": "c92888cb8973ce3c6187924c700e6d94c08b06ef", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -459,7 +459,7 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n         self.remove_kv().1\n     }\n \n-    // Body of `remove_entry`, separate to keep the above implementations short.\n+    // Body of `remove_entry`, probably separate because the name reflects the returned pair.\n     pub(super) fn remove_kv(self) -> (K, V) {\n         let mut emptied_internal_root = false;\n         let (old_kv, _) = self.handle.remove_kv_tracking(|| emptied_internal_root = true);"}, {"sha": "cce8b21a2bc416454d61d0a44d1b92018831f279", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -9,6 +9,9 @@ use super::search::{self, SearchResult};\n use super::unwrap_unchecked;\n \n /// Finds the leaf edges delimiting a specified range in or underneath a node.\n+///\n+/// The result is meaningful only if the tree is ordered by key, like the tree\n+/// in a `BTreeMap` is.\n fn range_search<BorrowType, K, V, Q, R>(\n     root1: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n     root2: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n@@ -122,6 +125,9 @@ fn full_range<BorrowType, K, V>(\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal> {\n     /// Creates a pair of leaf edges delimiting a specified range in or underneath a node.\n+    ///\n+    /// The result is meaningful only if the tree is ordered by key, like the tree\n+    /// in a `BTreeMap` is.\n     pub fn range_search<Q, R>(\n         self,\n         range: R,\n@@ -152,6 +158,9 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::ValMut<'a>, K, V, marker::LeafOrInternal>\n     /// Splits a unique reference into a pair of leaf edges delimiting a specified range.\n     /// The result are non-unique references allowing (some) mutation, which must be used\n     /// carefully.\n+    ///\n+    /// The result is meaningful only if the tree is ordered by key, like the tree\n+    /// in a `BTreeMap` is.\n     pub fn range_search<Q, R>(\n         self,\n         range: R,"}, {"sha": "78be070a9838218281329009371912c9588a9dd2", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 91, "deletions": 77, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -27,6 +27,9 @@\n //   given node has exactly the same length.\n // - A node of length `n` has `n` keys, `n` values, and `n + 1` edges.\n //   This implies that even an empty node has at least one edge.\n+//   For a leaf node, \"having an edge\" only means we can identify a position in the node,\n+//   since leaf edges are empty and need no data representation. In an internal node,\n+//   an edge both identifies a position and contains a pointer to a child node.\n \n use core::cmp::Ordering;\n use core::marker::PhantomData;\n@@ -215,6 +218,8 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n ///      although insert methods allow a mutable pointer to a value to coexist.\n ///    - When this is `Owned`, the `NodeRef` acts roughly like `Box<Node>`,\n ///      but does not have a destructor, and must be cleaned up manually.\n+///   Since any `NodeRef` allows navigating through the tree, `BorrowType`\n+///   effectively applies to the entire tree, not just the node itself.\n /// - `K` and `V`: These are the types of keys and values stored in the nodes.\n /// - `Type`: This can be `Leaf`, `Internal`, or `LeafOrInternal`. When this is\n ///   `Leaf`, the `NodeRef` points to a leaf node, when this is `Internal` the\n@@ -227,9 +232,9 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n /// such restrictions:\n /// - For each type parameter, we can only define a method either generically\n ///   or for one particular type. For example, we cannot define a method like\n-///   `key_at` generically for all `BorrowType`, because we want to return\n+///   `key_at` generically for all `BorrowType`, because we want it to return\n ///   `&'a K` for most choices of `BorrowType`, but plain `K` for `Owned`.\n-///   We cannot define `key_at` once for all types that have a lifetime.\n+///   We cannot define `key_at` once for all types that carry a lifetime.\n ///   Therefore, we define it only for the least powerful type `Immut<'a>`.\n /// - We cannot get implicit coercion from say `Mut<'a>` to `Immut<'a>`.\n ///   Therefore, we have to explicitly call `reborrow` on a more powerfull\n@@ -240,16 +245,17 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n ///   That is irrelevant when `BorrowType` is `Immut<'a>`, but the rule does\n ///   no harm because we make those `NodeRef` implicitly `Copy`.\n ///   The rule also avoids implicitly returning the lifetime of `&self`,\n-///   instead of the lifetime contained in `BorrowType`.\n+///   instead of the lifetime carried by `BorrowType`.\n ///   An exception to this rule are the insert functions.\n /// - Given the above, we need a `reborrow_mut` to explicitly copy a `Mut<'a>`\n ///   `NodeRef` whenever we want to invoke a method returning an extra reference\n ///   somewhere in the tree.\n pub struct NodeRef<BorrowType, K, V, Type> {\n-    /// The number of levels below the node, a property of the node that cannot be\n-    /// entirely described by `Type` and that the node does not store itself either.\n-    /// Unconstrained if `Type` is `LeafOrInternal`, must be zero if `Type` is `Leaf`,\n-    /// and must be non-zero if `Type` is `Internal`.\n+    /// The number of levels that the node and the level of leaves are apart, a\n+    /// constant of the node that cannot be entirely described by `Type`, and that\n+    /// the node itself does not store. We only need to store the height of the root\n+    /// node, and derive every other node's height from it.\n+    /// Must be zero if `Type` is `Leaf` and non-zero if `Type` is `Internal`.\n     height: usize,\n     /// The pointer to the leaf or internal node. The definition of `InternalNode`\n     /// ensures that the pointer is valid either way.\n@@ -317,8 +323,11 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n         unsafe { usize::from((*Self::as_leaf_ptr(self)).len) }\n     }\n \n-    /// Returns the height of this node with respect to the leaf level. Zero height means the\n-    /// node is a leaf itself.\n+    /// Returns the number of levels that the node and leaves are apart. Zero\n+    /// height means the node is a leaf itself. If you picture trees with the\n+    /// root on top, the number says at which elevation the node appears.\n+    /// If you picture trees with leaves on top, the number says how high\n+    /// the tree extends above the node.\n     pub fn height(&self) -> usize {\n         self.height\n     }\n@@ -376,6 +385,8 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     /// that points to the current node. Returns `Err(self)` if the current node has\n     /// no parent, giving back the original `NodeRef`.\n     ///\n+    /// The method name assumes you picture trees with the root node on top.\n+    ///\n     /// `edge.descend().ascend().unwrap()` and `node.ascend().unwrap().descend()` should\n     /// both, upon success, do nothing.\n     pub fn ascend(\n@@ -576,7 +587,6 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n impl<'a, K, V, Type> NodeRef<marker::ValMut<'a>, K, V, Type> {\n     /// # Safety\n     /// - The node has more than `idx` initialized elements.\n-    /// - The keys and values of the node must be initialized up to its current length.\n     unsafe fn into_key_val_mut_at(mut self, idx: usize) -> (&'a K, &'a mut V) {\n         // We only create a reference to the one element we are interested in,\n         // to avoid aliasing with outstanding references to other elements,\n@@ -609,7 +619,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n         unsafe { (*leaf).parent_idx.write(parent_idx as u16) };\n     }\n \n-    /// Clear the node's link to its parent edge, freeing it from its tree.\n+    /// Clear the node's link to its parent edge.\n     /// This only makes sense when there are no other references to the node.\n     fn clear_parent_link(&mut self) {\n         let leaf = Self::as_leaf_mut(self);\n@@ -618,7 +628,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n-    /// Adds a key/value pair to the end of the node.\n+    /// Adds a key-value pair to the end of the node.\n     pub fn push(&mut self, key: K, val: V) {\n         let len = unsafe { self.reborrow_mut().into_len_mut() };\n         let idx = usize::from(*len);\n@@ -630,7 +640,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n         }\n     }\n \n-    /// Adds a key/value pair to the beginning of the node.\n+    /// Adds a key-value pair to the beginning of the node.\n     fn push_front(&mut self, key: K, val: V) {\n         assert!(self.len() < CAPACITY);\n \n@@ -659,7 +669,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n-    /// Adds a key/value pair, and an edge to go to the right of that pair,\n+    /// Adds a key-value pair, and an edge to go to the right of that pair,\n     /// to the end of the node.\n     pub fn push(&mut self, key: K, val: V, edge: Root<K, V>) {\n         assert!(edge.height == self.height - 1);\n@@ -676,7 +686,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n         }\n     }\n \n-    /// Adds a key/value pair, and an edge to go to the left of that pair,\n+    /// Adds a key-value pair, and an edge to go to the left of that pair,\n     /// to the beginning of the node.\n     fn push_front(&mut self, key: K, val: V, edge: Root<K, V>) {\n         assert!(edge.height == self.height - 1);\n@@ -694,7 +704,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n-    /// Removes a key/value pair from the end of the node and returns the pair.\n+    /// Removes a key-value pair from the end of the node and returns the pair.\n     /// Also removes the edge that was to the right of that pair and, if the node\n     /// is internal, returns the orphaned subtree that this edge owned.\n     fn pop(&mut self) -> (K, V, Option<Root<K, V>>) {\n@@ -722,7 +732,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n         }\n     }\n \n-    /// Removes a key/value pair from the beginning of the node and returns the pair.\n+    /// Removes a key-value pair from the beginning of the node and returns the pair.\n     /// Also removes the edge that was to the left of that pair and, if the node is\n     /// internal, returns the orphaned subtree that this edge owned.\n     fn pop_front(&mut self) -> (K, V, Option<Root<K, V>>) {\n@@ -786,12 +796,12 @@ impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n     }\n }\n \n-/// A reference to a specific key/value pair or edge within a node. The `Node` parameter\n-/// must be a `NodeRef`, while the `Type` can either be `KV` (signifying a handle on a key/value\n+/// A reference to a specific key-value pair or edge within a node. The `Node` parameter\n+/// must be a `NodeRef`, while the `Type` can either be `KV` (signifying a handle on a key-value\n /// pair) or `Edge` (signifying a handle on an edge).\n ///\n /// Note that even `Leaf` nodes can have `Edge` handles. Instead of representing a pointer to\n-/// a child node, these represent the spaces where child pointers would go between the key/value\n+/// a child node, these represent the spaces where child pointers would go between the key-value\n /// pairs. For example, in a node with length 2, there would be 3 possible edge locations - one\n /// to the left of the node, one between the two pairs, and one at the right of the node.\n pub struct Handle<Node, Type> {\n@@ -810,7 +820,7 @@ impl<Node: Copy, Type> Clone for Handle<Node, Type> {\n }\n \n impl<Node, Type> Handle<Node, Type> {\n-    /// Retrieves the node that contains the edge or key/value pair this handle points to.\n+    /// Retrieves the node that contains the edge or key-value pair this handle points to.\n     pub fn into_node(self) -> Node {\n         self.node\n     }\n@@ -822,7 +832,7 @@ impl<Node, Type> Handle<Node, Type> {\n }\n \n impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV> {\n-    /// Creates a new handle to a key/value pair in `node`.\n+    /// Creates a new handle to a key-value pair in `node`.\n     /// Unsafe because the caller must ensure that `idx < node.len()`.\n     pub unsafe fn new_kv(node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self {\n         debug_assert!(idx < node.len());\n@@ -842,7 +852,7 @@ impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, mar\n impl<BorrowType, K, V, NodeType> NodeRef<BorrowType, K, V, NodeType> {\n     /// Could be a public implementation of PartialEq, but only used in this module.\n     fn eq(&self, other: &Self) -> bool {\n-        let Self { node, height, _marker: _ } = self;\n+        let Self { node, height, _marker } = self;\n         if node.eq(&other.node) {\n             debug_assert_eq!(*height, other.height);\n             true\n@@ -856,7 +866,7 @@ impl<BorrowType, K, V, NodeType, HandleType> PartialEq\n     for Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>\n {\n     fn eq(&self, other: &Self) -> bool {\n-        let Self { node, idx, _marker: _ } = self;\n+        let Self { node, idx, _marker } = self;\n         node.eq(&other.node) && *idx == other.idx\n     }\n }\n@@ -865,7 +875,7 @@ impl<BorrowType, K, V, NodeType, HandleType> PartialOrd\n     for Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>\n {\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        let Self { node, idx, _marker: _ } = self;\n+        let Self { node, idx, _marker } = self;\n         if node.eq(&other.node) { Some(idx.cmp(&other.idx)) } else { None }\n     }\n }\n@@ -950,7 +960,7 @@ fn splitpoint(edge_idx: usize) -> (usize, LeftOrRight<usize>) {\n }\n \n impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {\n-    /// Inserts a new key/value pair between the key/value pairs to the right and left of\n+    /// Inserts a new key-value pair between the key-value pairs to the right and left of\n     /// this edge. This method assumes that there is enough space in the node for the new\n     /// pair to fit.\n     ///\n@@ -969,7 +979,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n }\n \n impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {\n-    /// Inserts a new key/value pair between the key/value pairs to the right and left of\n+    /// Inserts a new key-value pair between the key-value pairs to the right and left of\n     /// this edge. This method splits the node if there isn't enough room.\n     ///\n     /// The returned pointer points to the inserted value.\n@@ -997,8 +1007,8 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n }\n \n impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {\n-    /// Fixes the parent pointer and index in the child node below this edge. This is useful\n-    /// when the ordering of edges has been changed, such as in the various `insert` methods.\n+    /// Fixes the parent pointer and index in the child node that this edge\n+    /// links to. This is useful when the ordering of edges has been changed,\n     fn correct_parent_link(self) {\n         // Create backpointer without invalidating other references to the node.\n         let ptr = unsafe { NonNull::new_unchecked(NodeRef::as_internal_ptr(&self.node)) };\n@@ -1009,8 +1019,8 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n }\n \n impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {\n-    /// Inserts a new key/value pair and an edge that will go to the right of that new pair\n-    /// between this edge and the key/value pair to the right of this edge. This method assumes\n+    /// Inserts a new key-value pair and an edge that will go to the right of that new pair\n+    /// between this edge and the key-value pair to the right of this edge. This method assumes\n     /// that there is enough space in the node for the new pair to fit.\n     fn insert_fit(&mut self, key: K, val: V, edge: Root<K, V>) {\n         debug_assert!(self.node.len() < CAPACITY);\n@@ -1026,8 +1036,8 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n         }\n     }\n \n-    /// Inserts a new key/value pair and an edge that will go to the right of that new pair\n-    /// between this edge and the key/value pair to the right of this edge. This method splits\n+    /// Inserts a new key-value pair and an edge that will go to the right of that new pair\n+    /// between this edge and the key-value pair to the right of this edge. This method splits\n     /// the node if there isn't enough room.\n     fn insert(\n         mut self,\n@@ -1060,7 +1070,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n }\n \n impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {\n-    /// Inserts a new key/value pair between the key/value pairs to the right and left of\n+    /// Inserts a new key-value pair between the key-value pairs to the right and left of\n     /// this edge. This method splits the node if there isn't enough room, and tries to\n     /// insert the split off portion into the parent node recursively, until the root is reached.\n     ///\n@@ -1098,6 +1108,8 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge> {\n     /// Finds the node pointed to by this edge.\n     ///\n+    /// The method name assumes you picture trees with the root node on top.\n+    ///\n     /// `edge.descend().ascend().unwrap()` and `node.ascend().unwrap().descend()` should\n     /// both, upon success, do nothing.\n     pub fn descend(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n@@ -1186,10 +1198,10 @@ impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>\n impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV> {\n     /// Splits the underlying node into three parts:\n     ///\n-    /// - The node is truncated to only contain the key/value pairs to the left of\n+    /// - The node is truncated to only contain the key-value pairs to the left of\n     ///   this handle.\n     /// - The key and value pointed to by this handle are extracted.\n-    /// - All the key/value pairs to the right of this handle are put into a newly\n+    /// - All the key-value pairs to the right of this handle are put into a newly\n     ///   allocated node.\n     pub fn split(mut self) -> SplitResult<'a, K, V, marker::Leaf> {\n         unsafe {\n@@ -1202,8 +1214,8 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n         }\n     }\n \n-    /// Removes the key/value pair pointed to by this handle and returns it, along with the edge\n-    /// that the key/value pair collapsed into.\n+    /// Removes the key-value pair pointed to by this handle and returns it, along with the edge\n+    /// that the key-value pair collapsed into.\n     pub fn remove(\n         mut self,\n     ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {\n@@ -1219,10 +1231,10 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV> {\n     /// Splits the underlying node into three parts:\n     ///\n-    /// - The node is truncated to only contain the edges and key/value pairs to the\n+    /// - The node is truncated to only contain the edges and key-value pairs to the\n     ///   left of this handle.\n     /// - The key and value pointed to by this handle are extracted.\n-    /// - All the edges and key/value pairs to the right of this handle are put into\n+    /// - All the edges and key-value pairs to the right of this handle are put into\n     ///   a newly allocated node.\n     pub fn split(mut self) -> SplitResult<'a, K, V, marker::Internal> {\n         unsafe {\n@@ -1247,7 +1259,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n }\n \n /// Represents a session for evaluating and performing a balancing operation\n-/// around an internal key/value pair.\n+/// around an internal key-value pair.\n pub struct BalancingContext<'a, K, V> {\n     parent: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV>,\n     left_child: NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>,\n@@ -1320,14 +1332,14 @@ impl<'a, K, V> BalancingContext<'a, K, V> {\n \n     /// Returns `true` if it is valid to call `.merge()` in the balancing context,\n     /// i.e., whether there is enough room in a node to hold the combination of\n-    /// both adjacent child nodes, along with the key/value pair in the parent.\n+    /// both adjacent child nodes, along with the key-value pair in the parent.\n     pub fn can_merge(&self) -> bool {\n         self.left_child.len() + 1 + self.right_child.len() <= CAPACITY\n     }\n }\n \n impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n-    /// Merges the parent's key/value pair and both adjacent child nodes into\n+    /// Merges the parent's key-value pair and both adjacent child nodes into\n     /// the left node and returns an edge handle in that expanded left node.\n     /// If `track_edge_idx` is given some value, the returned edge corresponds\n     /// to where the edge in that child node ended up,\n@@ -1409,8 +1421,8 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n         }\n     }\n \n-    /// Removes a key/value pair from the left child and places it in the key/value storage\n-    /// of the parent, while pushing the old parent key/value pair into the right child.\n+    /// Removes a key-value pair from the left child and places it in the key-value storage\n+    /// of the parent, while pushing the old parent key-value pair into the right child.\n     /// Returns a handle to the edge in the right child corresponding to where the original\n     /// edge specified by `track_right_edge_idx` ended up.\n     pub fn steal_left(\n@@ -1432,8 +1444,8 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n         }\n     }\n \n-    /// Removes a key/value pair from the right child and places it in the key/value storage\n-    /// of the parent, while pushing the old parent key/value pair onto the left child.\n+    /// Removes a key-value pair from the right child and places it in the key-value storage\n+    /// of the parent, while pushing the old parent key-value pair onto the left child.\n     /// Returns a handle to the edge in the left child specified by `track_left_edge_idx`,\n     /// which didn't move.\n     pub fn steal_right(\n@@ -1459,17 +1471,17 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n     pub fn bulk_steal_left(&mut self, count: usize) {\n         unsafe {\n             let left_node = &mut self.left_child;\n-            let left_len = left_node.len();\n+            let old_left_len = left_node.len();\n             let right_node = &mut self.right_child;\n-            let right_len = right_node.len();\n+            let old_right_len = right_node.len();\n \n             // Make sure that we may steal safely.\n-            assert!(right_len + count <= CAPACITY);\n-            assert!(left_len >= count);\n+            assert!(old_right_len + count <= CAPACITY);\n+            assert!(old_left_len >= count);\n \n-            let new_left_len = left_len - count;\n+            let new_left_len = old_left_len - count;\n \n-            // Move data.\n+            // Move leaf data.\n             {\n                 let left_kv = left_node.reborrow_mut().into_kv_pointers_mut();\n                 let right_kv = right_node.reborrow_mut().into_kv_pointers_mut();\n@@ -1479,13 +1491,13 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n                 };\n \n                 // Make room for stolen elements in the right child.\n-                ptr::copy(right_kv.0, right_kv.0.add(count), right_len);\n-                ptr::copy(right_kv.1, right_kv.1.add(count), right_len);\n+                ptr::copy(right_kv.0, right_kv.0.add(count), old_right_len);\n+                ptr::copy(right_kv.1, right_kv.1.add(count), old_right_len);\n \n                 // Move elements from the left child to the right one.\n                 move_kv(left_kv, new_left_len + 1, right_kv, 0, count - 1);\n \n-                // Move parent's key/value pair to the right child.\n+                // Move parent's key-value pair to the right child.\n                 move_kv(parent_kv, 0, right_kv, count - 1, 1);\n \n                 // Move the left-most stolen pair to the parent.\n@@ -1500,9 +1512,10 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n                     // Make room for stolen edges.\n                     let left = left.reborrow();\n                     let right_edges = right.reborrow_mut().into_edge_area_slice().as_mut_ptr();\n-                    ptr::copy(right_edges, right_edges.add(count), right_len + 1);\n-                    right.correct_childrens_parent_links(count..count + right_len + 1);\n+                    ptr::copy(right_edges, right_edges.add(count), old_right_len + 1);\n+                    right.correct_childrens_parent_links(count..count + old_right_len + 1);\n \n+                    // Steal edges.\n                     move_edges(left, new_left_len + 1, right, 0, count);\n                 }\n                 (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}\n@@ -1515,17 +1528,17 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n     pub fn bulk_steal_right(&mut self, count: usize) {\n         unsafe {\n             let left_node = &mut self.left_child;\n-            let left_len = left_node.len();\n+            let old_left_len = left_node.len();\n             let right_node = &mut self.right_child;\n-            let right_len = right_node.len();\n+            let old_right_len = right_node.len();\n \n             // Make sure that we may steal safely.\n-            assert!(left_len + count <= CAPACITY);\n-            assert!(right_len >= count);\n+            assert!(old_left_len + count <= CAPACITY);\n+            assert!(old_right_len >= count);\n \n-            let new_right_len = right_len - count;\n+            let new_right_len = old_right_len - count;\n \n-            // Move data.\n+            // Move leaf data.\n             {\n                 let left_kv = left_node.reborrow_mut().into_kv_pointers_mut();\n                 let right_kv = right_node.reborrow_mut().into_kv_pointers_mut();\n@@ -1534,16 +1547,16 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n                     (kv.0 as *mut K, kv.1 as *mut V)\n                 };\n \n-                // Move parent's key/value pair to the left child.\n-                move_kv(parent_kv, 0, left_kv, left_len, 1);\n+                // Move parent's key-value pair to the left child.\n+                move_kv(parent_kv, 0, left_kv, old_left_len, 1);\n \n                 // Move elements from the right child to the left one.\n-                move_kv(right_kv, 0, left_kv, left_len + 1, count - 1);\n+                move_kv(right_kv, 0, left_kv, old_left_len + 1, count - 1);\n \n                 // Move the right-most stolen pair to the parent.\n                 move_kv(right_kv, count - 1, parent_kv, 0, 1);\n \n-                // Fix right indexing\n+                // Fill gap where stolen elements used to be.\n                 ptr::copy(right_kv.0.add(count), right_kv.0, new_right_len);\n                 ptr::copy(right_kv.1.add(count), right_kv.1, new_right_len);\n             }\n@@ -1553,9 +1566,10 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n \n             match (left_node.reborrow_mut().force(), right_node.reborrow_mut().force()) {\n                 (ForceResult::Internal(left), ForceResult::Internal(mut right)) => {\n-                    move_edges(right.reborrow(), 0, left, left_len + 1, count);\n+                    // Steal edges.\n+                    move_edges(right.reborrow(), 0, left, old_left_len + 1, count);\n \n-                    // Fix right indexing.\n+                    // Fill gap where stolen edges used to be.\n                     let right_edges = right.reborrow_mut().into_edge_area_slice().as_mut_ptr();\n                     ptr::copy(right_edges.add(count), right_edges, new_right_len + 1);\n                     right.correct_childrens_parent_links(0..=new_right_len);\n@@ -1671,28 +1685,28 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, ma\n         right: &mut NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>,\n     ) {\n         unsafe {\n-            let left_new_len = self.idx;\n+            let new_left_len = self.idx;\n             let mut left_node = self.reborrow_mut().into_node();\n \n-            let right_new_len = left_node.len() - left_new_len;\n+            let new_right_len = left_node.len() - new_left_len;\n             let mut right_node = right.reborrow_mut();\n \n             assert!(right_node.len() == 0);\n             assert!(left_node.height == right_node.height);\n \n-            if right_new_len > 0 {\n+            if new_right_len > 0 {\n                 let left_kv = left_node.reborrow_mut().into_kv_pointers_mut();\n                 let right_kv = right_node.reborrow_mut().into_kv_pointers_mut();\n \n-                move_kv(left_kv, left_new_len, right_kv, 0, right_new_len);\n+                move_kv(left_kv, new_left_len, right_kv, 0, new_right_len);\n \n-                *left_node.reborrow_mut().into_len_mut() = left_new_len as u16;\n-                *right_node.reborrow_mut().into_len_mut() = right_new_len as u16;\n+                *left_node.reborrow_mut().into_len_mut() = new_left_len as u16;\n+                *right_node.reborrow_mut().into_len_mut() = new_right_len as u16;\n \n                 match (left_node.force(), right_node.force()) {\n                     (ForceResult::Internal(left), ForceResult::Internal(right)) => {\n                         let left = left.reborrow();\n-                        move_edges(left, left_new_len + 1, right, 1, right_new_len);\n+                        move_edges(left, new_left_len + 1, right, 1, new_right_len);\n                     }\n                     (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}\n                     _ => unreachable!(),"}, {"sha": "5ae1c1fcab8031ad85758e6d850814ff8d63e0e6", "filename": "library/alloc/src/collections/btree/remove.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -4,7 +4,7 @@ use super::unwrap_unchecked;\n use core::mem;\n \n impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV> {\n-    /// Removes a key/value-pair from the tree, and returns that pair, as well as\n+    /// Removes a key-value pair from the tree, and returns that pair, as well as\n     /// the leaf edge corresponding to that former pair. It's possible this empties\n     /// a root node that is internal, which the caller should pop from the map\n     /// holding the tree. The caller should also decrement the map's length."}, {"sha": "ed7f95fe632faa209124137b22828e483cd20765", "filename": "library/alloc/src/collections/btree/search.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -14,6 +14,9 @@ pub enum SearchResult<BorrowType, K, V, FoundType, GoDownType> {\n /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,\n /// returns a `GoDown` with the handle of the possible leaf edge where the key\n /// belongs.\n+///\n+/// The result is meaningful only if the tree is ordered by key, like the tree\n+/// in a `BTreeMap` is.\n pub fn search_tree<BorrowType, K, V, Q: ?Sized>(\n     mut node: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n     key: &Q,\n@@ -38,8 +41,11 @@ where\n \n /// Looks up a given key in a given node, without recursion.\n /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,\n-/// returns a `GoDown` with the handle of the edge where the key might be found.\n-/// If the node is a leaf, a `GoDown` edge is not an actual edge but a possible edge.\n+/// returns a `GoDown` with the handle of the edge where the key might be found\n+/// (if the node is internal) or where the key can be inserted.\n+///\n+/// The result is meaningful only if the tree is ordered by key, like the tree\n+/// in a `BTreeMap` is.\n pub fn search_node<BorrowType, K, V, Type, Q: ?Sized>(\n     node: NodeRef<BorrowType, K, V, Type>,\n     key: &Q,\n@@ -54,11 +60,11 @@ where\n     }\n }\n \n-/// Returns the index in the node at which the key (or an equivalent) exists\n-/// or could exist, and whether it exists in the node itself. If it doesn't\n-/// exist in the node itself, it may exist in the subtree with that index\n-/// (if the node has subtrees). If the key doesn't exist in node or subtree,\n-/// the returned index is the position or subtree where the key belongs.\n+/// Returns either the KV index in the node at which the key (or an equivalent)\n+/// exists and `true`, or the edge index where the key belongs and `false`.\n+///\n+/// The result is meaningful only if the tree is ordered by key, like the tree\n+/// in a `BTreeMap` is.\n fn search_linear<BorrowType, K, V, Type, Q: ?Sized>(\n     node: &NodeRef<BorrowType, K, V, Type>,\n     key: &Q,"}, {"sha": "d8ce47ed77d1fb269f0eff8b3d43adc7d530e4ed", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -214,7 +214,7 @@ impl<T: fmt::Debug> fmt::Debug for Union<'_, T> {\n // This constant is used by functions that compare two sets.\n // It estimates the relative size at which searching performs better\n // than iterating, based on the benchmarks in\n-// https://github.com/ssomers/rust_bench_btreeset_intersection;\n+// https://github.com/ssomers/rust_bench_btreeset_intersection.\n // It's used to divide rather than multiply sizes, to rule out overflow,\n // and it's a power of two to make that division cheap.\n const ITER_PERFORMANCE_TIPPING_SIZE_DIFF: usize = 16;"}, {"sha": "6108c139bb3a62d3cfde162dedbb0849308c2d02", "filename": "library/alloc/src/collections/btree/split.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -23,8 +23,8 @@ impl<K, V> Root<K, V> {\n             loop {\n                 let mut split_edge = match search_node(left_node, key) {\n                     // key is going to the right tree\n-                    Found(handle) => handle.left_edge(),\n-                    GoDown(handle) => handle,\n+                    Found(kv) => kv.left_edge(),\n+                    GoDown(edge) => edge,\n                 };\n \n                 split_edge.move_suffix(&mut right_node);"}, {"sha": "fb2c6d1f92a80ae6ae460a8b794b111570ac8926", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -551,7 +551,7 @@ impl Config {\n         config.deny_warnings = true;\n         config.missing_tools = false;\n \n-        // set by bootstrap.py\n+        // set by build.rs\n         config.build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n         let manifest_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n         // Undo `src/bootstrap`"}, {"sha": "8413d775ac4c4b3f9ba287e3522328d931f2405c", "filename": "src/ci/docker/host-x86_64/dist-x86_64-freebsd/Dockerfile", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-freebsd%2FDockerfile?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -30,5 +30,10 @@ ENV \\\n \n ENV HOSTS=x86_64-unknown-freebsd\n \n-ENV RUST_CONFIGURE_ARGS --enable-extended --enable-profiler --enable-sanitizers --disable-docs\n+ENV RUST_CONFIGURE_ARGS \\\n+    --enable-full-tools \\\n+    --enable-extended \\\n+    --enable-profiler \\\n+    --enable-sanitizers \\\n+    --disable-docs\n ENV SCRIPT python3 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "221c818736ea283a37186a8e0def167fa7567956", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -162,18 +162,30 @@ impl Clean<ExternalCrate> for CrateNum {\n                 .collect()\n         };\n \n+        let get_span =\n+            |attr: &ast::NestedMetaItem| Some(attr.meta_item()?.name_value_literal()?.span);\n+\n         let as_keyword = |res: Res| {\n             if let Res::Def(DefKind::Mod, def_id) = res {\n                 let attrs = cx.tcx.get_attrs(def_id).clean(cx);\n                 let mut keyword = None;\n                 for attr in attrs.lists(sym::doc) {\n-                    if let Some(v) = attr.value_str() {\n-                        if attr.has_name(sym::keyword) {\n-                            if v.is_doc_keyword() {\n-                                keyword = Some(v.to_string());\n-                                break;\n+                    if attr.has_name(sym::keyword) {\n+                        if let Some(v) = attr.value_str() {\n+                            let k = v.to_string();\n+                            if !rustc_lexer::is_ident(&k) {\n+                                let sp = get_span(&attr).unwrap_or_else(|| attr.span());\n+                                cx.tcx\n+                                    .sess\n+                                    .struct_span_err(\n+                                        sp,\n+                                        &format!(\"`{}` is not a valid identifier\", v),\n+                                    )\n+                                    .emit();\n+                            } else {\n+                                keyword = Some(k);\n                             }\n-                            // FIXME: should warn on unknown keywords?\n+                            break;\n                         }\n                     }\n                 }"}, {"sha": "bbd4be88e6a8bdd54641899fa2367d1af87ef495", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 46, "deletions": 28, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -1844,7 +1844,7 @@ fn document(w: &mut Buffer, cx: &Context, item: &clean::Item, parent: Option<&cl\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);\n     }\n-    document_stability(w, cx, item, false, parent);\n+    document_item_info(w, cx, item, false, parent);\n     document_full(w, item, cx, \"\", false);\n }\n \n@@ -1880,10 +1880,17 @@ fn render_markdown(\n fn document_short(\n     w: &mut Buffer,\n     item: &clean::Item,\n+    cx: &Context,\n     link: AssocItemLink<'_>,\n     prefix: &str,\n     is_hidden: bool,\n+    parent: Option<&clean::Item>,\n+    show_def_docs: bool,\n ) {\n+    document_item_info(w, cx, item, is_hidden, parent);\n+    if !show_def_docs {\n+        return;\n+    }\n     if let Some(s) = item.doc_value() {\n         let mut summary_html = MarkdownSummaryLine(s, &item.links()).into_string();\n \n@@ -1928,18 +1935,23 @@ fn document_full(w: &mut Buffer, item: &clean::Item, cx: &Context, prefix: &str,\n     }\n }\n \n-fn document_stability(\n+/// Add extra information about an item such as:\n+///\n+/// * Stability\n+/// * Deprecated\n+/// * Required features (through the `doc_cfg` feature)\n+fn document_item_info(\n     w: &mut Buffer,\n     cx: &Context,\n     item: &clean::Item,\n     is_hidden: bool,\n     parent: Option<&clean::Item>,\n ) {\n-    let stabilities = short_stability(item, cx, parent);\n-    if !stabilities.is_empty() {\n-        write!(w, \"<div class=\\\"stability{}\\\">\", if is_hidden { \" hidden\" } else { \"\" });\n-        for stability in stabilities {\n-            write!(w, \"{}\", stability);\n+    let item_infos = short_item_info(item, cx, parent);\n+    if !item_infos.is_empty() {\n+        write!(w, \"<div class=\\\"item-info{}\\\">\", if is_hidden { \" hidden\" } else { \"\" });\n+        for info in item_infos {\n+            write!(w, \"{}\", info);\n         }\n         write!(w, \"</div>\");\n     }\n@@ -2194,7 +2206,7 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                          <td class=\\\"docblock-short\\\">{stab_tags}{docs}</td>\\\n                      </tr>\",\n                     name = *myitem.name.as_ref().unwrap(),\n-                    stab_tags = stability_tags(myitem, item),\n+                    stab_tags = extra_info_tags(myitem, item),\n                     docs = MarkdownSummaryLine(doc_value, &myitem.links()).into_string(),\n                     class = myitem.type_(),\n                     add = add,\n@@ -2216,9 +2228,9 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n     }\n }\n \n-/// Render the stability and deprecation tags that are displayed in the item's summary at the\n-/// module level.\n-fn stability_tags(item: &clean::Item, parent: &clean::Item) -> String {\n+/// Render the stability, deprecation and portability tags that are displayed in the item's summary\n+/// at the module level.\n+fn extra_info_tags(item: &clean::Item, parent: &clean::Item) -> String {\n     let mut tags = String::new();\n \n     fn tag_html(class: &str, title: &str, contents: &str) -> String {\n@@ -2271,10 +2283,10 @@ fn portability(item: &clean::Item, parent: Option<&clean::Item>) -> Option<Strin\n     Some(format!(\"<div class=\\\"stab portability\\\">{}</div>\", cfg?.render_long_html()))\n }\n \n-/// Render the stability and/or deprecation warning that is displayed at the top of the item's\n-/// documentation.\n-fn short_stability(item: &clean::Item, cx: &Context, parent: Option<&clean::Item>) -> Vec<String> {\n-    let mut stability = vec![];\n+/// Render the stability, deprecation and portability information that is displayed at the top of\n+/// the item's documentation.\n+fn short_item_info(item: &clean::Item, cx: &Context, parent: Option<&clean::Item>) -> Vec<String> {\n+    let mut extra_info = vec![];\n     let error_codes = cx.shared.codes;\n \n     if let Some(Deprecation { ref note, ref since, is_since_rustc_version }) = item.deprecation {\n@@ -2301,7 +2313,7 @@ fn short_stability(item: &clean::Item, cx: &Context, parent: Option<&clean::Item\n             );\n             message.push_str(&format!(\": {}\", html.into_string()));\n         }\n-        stability.push(format!(\n+        extra_info.push(format!(\n             \"<div class=\\\"stab deprecated\\\"><span class=\\\"emoji\\\">\ud83d\udc4e</span> {}</div>\",\n             message,\n         ));\n@@ -2345,14 +2357,14 @@ fn short_stability(item: &clean::Item, cx: &Context, parent: Option<&clean::Item\n             );\n         }\n \n-        stability.push(format!(\"<div class=\\\"stab unstable\\\">{}</div>\", message));\n+        extra_info.push(format!(\"<div class=\\\"stab unstable\\\">{}</div>\", message));\n     }\n \n     if let Some(portability) = portability(item, parent) {\n-        stability.push(portability);\n+        extra_info.push(portability);\n     }\n \n-    stability\n+    extra_info\n }\n \n fn item_constant(w: &mut Buffer, cx: &Context, it: &clean::Item, c: &clean::Constant) {\n@@ -3703,7 +3715,7 @@ fn render_impl(\n \n         if trait_.is_some() {\n             if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n-                write!(w, \"<div class=\\\"stability\\\">{}</div>\", portability);\n+                write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n             }\n         }\n \n@@ -3801,26 +3813,32 @@ fn render_impl(\n                     if let Some(it) = t.items.iter().find(|i| i.name == item.name) {\n                         // We need the stability of the item from the trait\n                         // because impls can't have a stability.\n-                        document_stability(w, cx, it, is_hidden, Some(parent));\n                         if item.doc_value().is_some() {\n+                            document_item_info(w, cx, it, is_hidden, Some(parent));\n                             document_full(w, item, cx, \"\", is_hidden);\n-                        } else if show_def_docs {\n+                        } else {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(w, it, link, \"\", is_hidden);\n+                            document_short(\n+                                w,\n+                                it,\n+                                cx,\n+                                link,\n+                                \"\",\n+                                is_hidden,\n+                                Some(parent),\n+                                show_def_docs,\n+                            );\n                         }\n                     }\n                 } else {\n-                    document_stability(w, cx, item, is_hidden, Some(parent));\n+                    document_item_info(w, cx, item, is_hidden, Some(parent));\n                     if show_def_docs {\n                         document_full(w, item, cx, \"\", is_hidden);\n                     }\n                 }\n             } else {\n-                document_stability(w, cx, item, is_hidden, Some(parent));\n-                if show_def_docs {\n-                    document_short(w, item, link, \"\", is_hidden);\n-                }\n+                document_short(w, item, cx, link, \"\", is_hidden, Some(parent), show_def_docs);\n             }\n         }\n     }"}, {"sha": "7ca43684dced20627124ae74fdffdff9a2e485ab", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -2266,7 +2266,7 @@ function defocusSearchBar() {\n                         }\n                     }\n                     var ns = n.nextElementSibling;\n-                    while (ns && (hasClass(ns, \"docblock\") || hasClass(ns, \"stability\"))) {\n+                    while (ns && (hasClass(ns, \"docblock\") || hasClass(ns, \"item-info\"))) {\n                         if (addOrRemove) {\n                             addClass(ns, \"hidden-by-impl-hider\");\n                         } else {\n@@ -2282,7 +2282,7 @@ function defocusSearchBar() {\n         var action = mode;\n         if (hasClass(toggle.parentNode, \"impl\") === false) {\n             relatedDoc = toggle.parentNode.nextElementSibling;\n-            if (hasClass(relatedDoc, \"stability\")) {\n+            if (hasClass(relatedDoc, \"item-info\")) {\n                 relatedDoc = relatedDoc.nextElementSibling;\n             }\n             if (hasClass(relatedDoc, \"docblock\") || hasClass(relatedDoc, \"sub-variant\")) {\n@@ -2332,16 +2332,17 @@ function defocusSearchBar() {\n             var dontApplyBlockRule = toggle.parentNode.parentNode.id !== \"main\";\n             if (action === \"show\") {\n                 removeClass(relatedDoc, \"fns-now-collapsed\");\n-                // Stability information is never hidden.\n-                if (hasClass(docblock, \"stability\") === false) {\n+                // Stability/deprecation/portability information is never hidden.\n+                if (hasClass(docblock, \"item-info\") === false) {\n                     removeClass(docblock, \"hidden-by-usual-hider\");\n                 }\n                 onEachLazy(toggle.childNodes, adjustToggle(false, dontApplyBlockRule));\n                 onEachLazy(relatedDoc.childNodes, implHider(false, dontApplyBlockRule));\n             } else if (action === \"hide\") {\n                 addClass(relatedDoc, \"fns-now-collapsed\");\n-                // Stability information should be shown even when detailed info is hidden.\n-                if (hasClass(docblock, \"stability\") === false) {\n+                // Stability/deprecation/portability information should be shown even when detailed\n+                // info is hidden.\n+                if (hasClass(docblock, \"item-info\") === false) {\n                     addClass(docblock, \"hidden-by-usual-hider\");\n                 }\n                 onEachLazy(toggle.childNodes, adjustToggle(true, dontApplyBlockRule));\n@@ -2445,7 +2446,7 @@ function defocusSearchBar() {\n \n         var func = function(e) {\n             var next = e.nextElementSibling;\n-            if (next && hasClass(next, \"stability\")) {\n+            if (next && hasClass(next, \"item-info\")) {\n               next = next.nextElementSibling;\n             }\n             if (!next) {\n@@ -2462,7 +2463,7 @@ function defocusSearchBar() {\n \n         var funcImpl = function(e) {\n             var next = e.nextElementSibling;\n-            if (next && hasClass(next, \"stability\")) {\n+            if (next && hasClass(next, \"item-info\")) {\n                 next = next.nextElementSibling;\n             }\n             if (next && hasClass(next, \"docblock\")) {"}, {"sha": "8eef65a231d0be7c9cc31b935c554b9cb8c92c66", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -553,21 +553,21 @@ h4 > code, h3 > code, .invisible > code {\n \tborder: none;\n }\n \n-.content .stability code {\n+.content .item-info code {\n \tfont-size: 90%;\n }\n \n-.content .stability {\n+.content .item-info {\n \tposition: relative;\n \tmargin-left: 33px;\n \tmargin-top: -13px;\n }\n \n-.sub-variant > div > .stability {\n+.sub-variant > div > .item-info {\n \tmargin-top: initial;\n }\n \n-.content .stability::before {\n+.content .item-info::before {\n \tcontent: '\u2b11';\n \tfont-size: 25px;\n \tposition: absolute;\n@@ -579,23 +579,23 @@ h4 > code, h3 > code, .invisible > code {\n \tmargin-left: 20px;\n }\n \n-.content .impl-items .docblock, .content .impl-items .stability {\n+.content .impl-items .docblock, .content .impl-items .item-info {\n \tmargin-bottom: .6em;\n }\n \n-.content .impl-items > .stability {\n+.content .impl-items > .item-info {\n \tmargin-left: 40px;\n }\n \n-.methods > .stability, .content .impl-items > .stability {\n+.methods > .item-info, .content .impl-items > .item-info {\n \tmargin-top: -8px;\n }\n \n .impl-items {\n \tflex-basis: 100%;\n }\n \n-#main > .stability {\n+#main > .item-info {\n \tmargin-top: 0;\n }\n \n@@ -655,7 +655,7 @@ a {\n }\n \n .docblock a:not(.srclink):not(.test-arrow):hover,\n-.docblock-short a:not(.srclink):not(.test-arrow):hover, .stability a {\n+.docblock-short a:not(.srclink):not(.test-arrow):hover, .item-info a {\n \ttext-decoration: underline;\n }\n "}, {"sha": "c1f796f09e80474a453e2c3ab573ed978a58c5b7", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -166,7 +166,7 @@ pre {\n \tcolor: #c5c5c5;\n }\n \n-.content .stability::before { color: #ccc; }\n+.content .item-info::before { color: #ccc; }\n \n .content span.foreigntype, .content a.foreigntype { color: #ef57ff; }\n .content span.union, .content a.union { color: #98a01c; }\n@@ -219,7 +219,7 @@ a {\n }\n \n .docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n-.docblock-short a:not(.srclink):not(.test-arrow), .stability a,\n+.docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #39AFD7;\n }"}, {"sha": "946ca0a40c9dc9595ed610113ada880970caa86d", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -136,7 +136,7 @@ pre {\n .content .highlighted.primitive { background-color: #00708a; }\n .content .highlighted.keyword { background-color: #884719; }\n \n-.content .stability::before { color: #ccc; }\n+.content .item-info::before { color: #ccc; }\n \n .content span.enum, .content a.enum, .block a.current.enum { color: #82b089; }\n .content span.struct, .content a.struct, .block a.current.struct { color: #2dbfb8; }\n@@ -177,7 +177,7 @@ a {\n }\n \n .docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n-.docblock-short a:not(.srclink):not(.test-arrow), .stability a,\n+.docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #D2991D;\n }"}, {"sha": "e0b9a04921a80561ca7d9e045c81adcc7d5f0181", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -134,7 +134,7 @@ pre {\n .content .highlighted.primitive { background-color: #9aecff; }\n .content .highlighted.keyword { background-color: #f99650; }\n \n-.content .stability::before { color: #ccc; }\n+.content .item-info::before { color: #ccc; }\n \n .content span.enum, .content a.enum, .block a.current.enum { color: #508157; }\n .content span.struct, .content a.struct, .block a.current.struct { color: #ad448e; }\n@@ -175,7 +175,7 @@ a {\n }\n \n .docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n-.docblock-short a:not(.srclink):not(.test-arrow), .stability a,\n+.docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #3873AD;\n }"}, {"sha": "ce2abc69bbd28be4fb43b29e4bdf31ff64eb7378", "filename": "src/test/rustdoc-ui/invalid-keyword.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -0,0 +1,4 @@\n+#![feature(doc_keyword)]\n+\n+#[doc(keyword = \"foo df\")] //~ ERROR\n+mod foo {}"}, {"sha": "8658e3825782d84c2dea4363436fda570a860190", "filename": "src/test/rustdoc-ui/invalid-keyword.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -0,0 +1,8 @@\n+error: `foo df` is not a valid identifier\n+  --> $DIR/invalid-keyword.rs:3:17\n+   |\n+LL | #[doc(keyword = \"foo df\")]\n+   |                 ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f86541cd1181e65f71614053c45487a77413010f", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -2,28 +2,28 @@\n #![feature(target_feature, cfg_target_feature)]\n \n // @has doc_cfg/struct.Portable.html\n-// @!has - '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' ''\n+// @!has - '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' ''\n // @has - '//*[@id=\"method.unix_and_arm_only_function\"]' 'fn unix_and_arm_only_function()'\n // @has - '//*[@class=\"stab portability\"]' 'This is supported on Unix and ARM only.'\n pub struct Portable;\n \n // @has doc_cfg/unix_only/index.html \\\n-//  '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n+//  '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n //  'This is supported on Unix only.'\n // @matches - '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '\\AARM\\Z'\n // @count - '//*[@class=\"stab portability\"]' 2\n #[doc(cfg(unix))]\n pub mod unix_only {\n     // @has doc_cfg/unix_only/fn.unix_only_function.html \\\n-    //  '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n+    //  '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n     //  'This is supported on Unix only.'\n     // @count - '//*[@class=\"stab portability\"]' 1\n     pub fn unix_only_function() {\n         content::should::be::irrelevant();\n     }\n \n     // @has doc_cfg/unix_only/trait.ArmOnly.html \\\n-    //  '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n+    //  '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n     //  'This is supported on Unix and ARM only.'\n     // @count - '//*[@class=\"stab portability\"]' 2\n     #[doc(cfg(target_arch = \"arm\"))]\n@@ -44,15 +44,15 @@ pub mod unix_only {\n // @matches - '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '\\Aavx\\Z'\n \n // @has doc_cfg/fn.uses_target_feature.html\n-// @has - '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n+// @has - '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n //        'This is supported with target feature avx only.'\n #[target_feature(enable = \"avx\")]\n pub unsafe fn uses_target_feature() {\n     content::should::be::irrelevant();\n }\n \n // @has doc_cfg/fn.uses_cfg_target_feature.html\n-// @has - '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n+// @has - '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n //        'This is supported with target feature avx only.'\n #[doc(cfg(target_feature = \"avx\"))]\n pub fn uses_cfg_target_feature() {"}, {"sha": "25e8b7912e772c7f7ddfa87b56009e914219cdd0", "filename": "src/test/rustdoc/keyword.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Frustdoc%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Frustdoc%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fkeyword.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -14,3 +14,8 @@\n #[doc(keyword = \"match\")]\n /// this is a test!\n mod foo{}\n+\n+// @has foo/keyword.foo.html '//section[@id=\"main\"]//div[@class=\"docblock\"]//p' 'hello'\n+#[doc(keyword = \"foo\")]\n+/// hello\n+mod bar {}"}, {"sha": "4ff06d9c9954e4a7cb6c8b9cf2c33fb242645f42", "filename": "src/test/rustdoc/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Frustdoc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Frustdoc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstability.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -4,7 +4,7 @@\n \n pub struct Unstable {\n     // @has stability/struct.Unstable.html \\\n-    //      '//div[@class=\"stability\"]//div[@class=\"stab unstable\"]' \\\n+    //      '//div[@class=\"item-info\"]//div[@class=\"stab unstable\"]' \\\n     //      'This is a nightly-only experimental API'\n     // @count stability/struct.Unstable.html '//span[@class=\"stab unstable\"]' 0\n     pub foo: u32,"}, {"sha": "77e4bd4d6f5281f26bbf6d8008b66838ab6ac42c", "filename": "src/test/ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fassociated-type-bounds%2Forder-dependent-bounds-issue-54121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fassociated-type-bounds%2Forder-dependent-bounds-issue-54121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Forder-dependent-bounds-issue-54121.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -0,0 +1,47 @@\n+// check-pass\n+\n+// From https://github.com/rust-lang/rust/issues/54121/\n+//\n+// Whether the code compiled depended on the order of the trait bounds in\n+// `type T: Tr<u8, u8> + Tr<u16, u16>`\n+// But both should compile as order shouldn't matter.\n+\n+trait Tr<A, B> {\n+    fn exec(a: A, b: B);\n+}\n+\n+trait P {\n+    // This compiled successfully\n+    type T: Tr<u16, u16> + Tr<u8, u8>;\n+}\n+\n+trait Q {\n+    // This didn't compile\n+    type T: Tr<u8, u8> + Tr<u16, u16>;\n+}\n+\n+#[allow(dead_code)]\n+fn f<S: P>() {\n+    <S as P>::T::exec(0u8, 0u8)\n+}\n+\n+#[allow(dead_code)]\n+fn g<S: Q>() {\n+    // A mismatched types error was emitted on this line.\n+    <S as Q>::T::exec(0u8, 0u8)\n+}\n+\n+// Another reproduction of the same issue\n+trait Trait {\n+    type Type: Into<Self::Type1> + Into<Self::Type2> + Copy;\n+    type Type1;\n+    type Type2;\n+}\n+\n+#[allow(dead_code)]\n+fn foo<T: Trait>(x: T::Type) {\n+    let _1: T::Type1 = x.into();\n+    let _2: T::Type2 = x.into();\n+}\n+\n+fn main() { }"}, {"sha": "0f09db530d45e626a8265384ed022ce575c431d8", "filename": "src/test/ui/expr/if-bot.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif-bot.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-bot.rs"}, {"sha": "3f84929a00e4f4e5a1896ab93cf6a55946b83c17", "filename": "src/test/ui/expr/if/attrs/bad-cfg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fbad-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fbad-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fbad-cfg.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-attrs/bad-cfg.rs"}, {"sha": "8a2890886a15c9a9b8c951507b48fcddddce2af3", "filename": "src/test/ui/expr/if/attrs/bad-cfg.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fbad-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fbad-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fbad-cfg.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-attrs/bad-cfg.stderr"}, {"sha": "7e290661501c9c36eb05c0e395a9e27e5c5b0bc3", "filename": "src/test/ui/expr/if/attrs/builtin-if-attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fbuiltin-if-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fbuiltin-if-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fbuiltin-if-attr.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-attrs/builtin-if-attr.rs"}, {"sha": "1f77a1bb3427db868b975ebdf12473ab5e147542", "filename": "src/test/ui/expr/if/attrs/cfg-false-if-attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fcfg-false-if-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fcfg-false-if-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fcfg-false-if-attr.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-attrs/cfg-false-if-attr.rs"}, {"sha": "85da7cf6bb8c3d453cc2558e11aac91b1f6e58b9", "filename": "src/test/ui/expr/if/attrs/else-attrs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Felse-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Felse-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Felse-attrs.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-attrs/else-attrs.rs"}, {"sha": "2733377054d7d93df1d1cc38e7ff4ed361a5963a", "filename": "src/test/ui/expr/if/attrs/else-attrs.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Felse-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Felse-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Felse-attrs.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-attrs/else-attrs.stderr"}, {"sha": "63772d54b531dacdaca24a706900e90abf75683f", "filename": "src/test/ui/expr/if/attrs/gate-whole-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fgate-whole-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fgate-whole-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fgate-whole-expr.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-attrs/gate-whole-expr.rs"}, {"sha": "5237a9ff3961a060c3d459f0e985bddc2bad9a16", "filename": "src/test/ui/expr/if/attrs/let-chains-attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-attrs/let-chains-attr.rs"}, {"sha": "8b9874715342c30e23133117b9a38eec1061a4de", "filename": "src/test/ui/expr/if/attrs/let-chains-attr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-attrs/let-chains-attr.stderr"}, {"sha": "38599c8e67c4e94dbd4ccbd66b40987957065df0", "filename": "src/test/ui/expr/if/attrs/stmt-expr-gated.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fstmt-expr-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fstmt-expr-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fstmt-expr-gated.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-attrs/stmt-expr-gated.rs"}, {"sha": "47dac39a9ae88563bcbfd92ed05bc5f0ad4c6302", "filename": "src/test/ui/expr/if/attrs/stmt-expr-gated.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fstmt-expr-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fstmt-expr-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Fstmt-expr-gated.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-attrs/stmt-expr-gated.stderr"}, {"sha": "36e49785a49d0445f6b056261e4fc857bc77afd5", "filename": "src/test/ui/expr/if/expr-if-panic-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fexpr-if-panic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fexpr-if-panic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fexpr-if-panic-fn.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/expr-if-panic-fn.rs"}, {"sha": "520ee0870ee15b95a9ac9f4b081d71b3137aab25", "filename": "src/test/ui/expr/if/expr-if-panic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fexpr-if-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fexpr-if-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fexpr-if-panic.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/expr-if-panic.rs"}, {"sha": "c125ba30606c553df7d36e26fcc98ee78211dfcc", "filename": "src/test/ui/expr/if/if-branch-types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-branch-types.rs"}, {"sha": "14f02163a8320f212a099abdf0e1a134c8b1b33e", "filename": "src/test/ui/expr/if/if-branch-types.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-branch-types.stderr"}, {"sha": "037cd427ccf368b9568a37be027d0a01b5a99788", "filename": "src/test/ui/expr/if/if-check-panic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-check-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-check-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-check-panic.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-check-panic.rs"}, {"sha": "6593225e7dd95ab549ab69c91c185a79bbde2be8", "filename": "src/test/ui/expr/if/if-check.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-check.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-check.rs"}, {"sha": "bcd114678528cc2e4df749d114262488d385a79a", "filename": "src/test/ui/expr/if/if-cond-bot.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-cond-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-cond-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-cond-bot.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-cond-bot.rs"}, {"sha": "1a0a36df2ad63f1746b349ec456c3349f7db7ae8", "filename": "src/test/ui/expr/if/if-else-type-mismatch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-else-type-mismatch.rs"}, {"sha": "9fa190d6c9df3d0c6d047a6198a402896a441456", "filename": "src/test/ui/expr/if/if-else-type-mismatch.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-else-type-mismatch.stderr"}, {"sha": "1e8260a017da2b57d23842095944caf36fbe2536", "filename": "src/test/ui/expr/if/if-let-arm-types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let-arm-types.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-let-arm-types.rs"}, {"sha": "b40a0f479d3185136b7cd79367f2fc66372314a0", "filename": "src/test/ui/expr/if/if-let-arm-types.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let-arm-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let-arm-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let-arm-types.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-let-arm-types.stderr"}, {"sha": "2ab0f9fed3fc67fc9b0b4dcd99addc3f62327848", "filename": "src/test/ui/expr/if/if-let.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-let.rs"}, {"sha": "ee2b78af3b84d03ede4cef6743415a72780fc18e", "filename": "src/test/ui/expr/if/if-let.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-let.stderr"}, {"sha": "06d0bdf456cdb33e1be0b037f5d77ad1cd5e08d1", "filename": "src/test/ui/expr/if/if-loop.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-loop.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-loop.rs"}, {"sha": "ca3df0fdde45d457898041b1bae7234efdd726cb", "filename": "src/test/ui/expr/if/if-no-match-bindings.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-no-match-bindings.rs"}, {"sha": "3f382e023a776f98594da06025d73f288f4fbb1c", "filename": "src/test/ui/expr/if/if-no-match-bindings.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-no-match-bindings.stderr"}, {"sha": "6bb0141848af418fd1d1943c936e32f9fddabc3b", "filename": "src/test/ui/expr/if/if-ret.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-ret.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-ret.rs"}, {"sha": "41bbd791862be5ec217f63b0f0a133f814696288", "filename": "src/test/ui/expr/if/if-ret.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-ret.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if-ret.stderr"}, {"sha": "d8c262bd6b370e1904e62dbef39212f831d7886a", "filename": "src/test/ui/expr/if/if-typeck.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-typeck.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-typeck.rs"}, {"sha": "74ed0ed0ae6bded4ff517c787ea0f13d3c397db1", "filename": "src/test/ui/expr/if/if-typeck.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-typeck.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-typeck.stderr"}, {"sha": "8a4c59f32613d46de81544441f3251730cda3811", "filename": "src/test/ui/expr/if/if-without-block.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-without-block.rs"}, {"sha": "ee2bb62e2bb5753877833f84b7479480b9469d84", "filename": "src/test/ui/expr/if/if-without-block.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-without-block.stderr"}, {"sha": "19fbfb27ba6e97b9bc66f063d779e3a160b2a7e1", "filename": "src/test/ui/expr/if/if-without-else-as-fn-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-as-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-as-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-as-fn-expr.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-without-else-as-fn-expr.rs"}, {"sha": "4daf27493c19d3a857f6f66f6e43b25dcf7cbaab", "filename": "src/test/ui/expr/if/if-without-else-as-fn-expr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr"}, {"sha": "cf84a99e53fa113b2eee3795bd8c635cd146c198", "filename": "src/test/ui/expr/if/if-without-else-result.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-without-else-result.rs"}, {"sha": "821635d3768f319fc48a8f1db8fa970621d94d8b", "filename": "src/test/ui/expr/if/if-without-else-result.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/if-without-else-result.stderr"}, {"sha": "a0b0a8fb98594059f62e4bfb10ec767103a28e78", "filename": "src/test/ui/expr/if/ifmt-bad-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-arg.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/ifmt-bad-arg.rs"}, {"sha": "0ff478826f728cc8810c4b65404687c15e5a22e3", "filename": "src/test/ui/expr/if/ifmt-bad-arg.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-arg.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/ifmt-bad-arg.stderr"}, {"sha": "ba7301561bd0d180a298c7ae40e80dc9f23262b0", "filename": "src/test/ui/expr/if/ifmt-bad-format-args.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-format-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-format-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-format-args.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/ifmt-bad-format-args.rs"}, {"sha": "8bb0d40629f0a35f4ba619bc14cfb9787cb1c73f", "filename": "src/test/ui/expr/if/ifmt-bad-format-args.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-bad-format-args.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/ifmt-bad-format-args.stderr"}, {"sha": "258f4eea509d094d45d0592503aa21c662c7dff8", "filename": "src/test/ui/expr/if/ifmt-unimpl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unimpl.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/ifmt-unimpl.rs"}, {"sha": "65b0f4a09b37215ae087f56b3eb6985f34f97479", "filename": "src/test/ui/expr/if/ifmt-unimpl.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unimpl.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/ifmt-unimpl.stderr"}, {"sha": "158152c89a42868f51b6efc77fc1064fbf2505ff", "filename": "src/test/ui/expr/if/ifmt-unknown-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unknown-trait.rs?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/ifmt-unknown-trait.rs"}, {"sha": "459432bf4e4266391843e40de84d7d586d36f399", "filename": "src/test/ui/expr/if/ifmt-unknown-trait.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fifmt-unknown-trait.stderr?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "previous_filename": "src/test/ui/if/ifmt-unknown-trait.stderr"}, {"sha": "63f2d2f5d2f684b2abb3a8035a7ef547561915f5", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/40d7efad5e581c60a81171d96d78696b7ed65009/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=40d7efad5e581c60a81171d96d78696b7ed65009", "patch": "@@ -190,6 +190,30 @@ function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n     return content;\n }\n \n+function contentToDiffLine(key, value) {\n+    return `\"${key}\": \"${value}\",`;\n+}\n+\n+// This function is only called when no matching result was found and therefore will only display\n+// the diff between the two items.\n+function betterLookingDiff(entry, data) {\n+    let output = ' {\\n';\n+    let spaces = '     ';\n+    for (let key in entry) {\n+        if (!entry.hasOwnProperty(key)) {\n+            continue;\n+        }\n+        let value = data[key];\n+        if (value !== entry[key]) {\n+            output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n+            output += '+' + spaces + contentToDiffLine(key, value) + '\\n';\n+        } else {\n+            output += spaces + contentToDiffLine(key, value) + '\\n';\n+        }\n+    }\n+    return output + ' }';\n+}\n+\n function lookForEntry(entry, data) {\n     for (var i = 0; i < data.length; ++i) {\n         var allGood = true;\n@@ -281,6 +305,13 @@ function runSearch(query, expected, index, loaded, loadedFile, queryName) {\n             if (entry_pos === null) {\n                 error_text.push(queryName + \"==> Result not found in '\" + key + \"': '\" +\n                                 JSON.stringify(entry[i]) + \"'\");\n+                // By default, we just compare the two first items.\n+                let item_to_diff = 0;\n+                if ((ignore_order === false || exact_check === true) && i < results[key].length) {\n+                    item_to_diff = i;\n+                }\n+                error_text.push(\"Diff of first error:\\n\" +\n+                    betterLookingDiff(entry[i], results[key][item_to_diff]));\n             } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n                 error_text.push(queryName + \"==> Exact check failed at position \" + (prev_pos + 1) +\n                                 \": expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +"}]}