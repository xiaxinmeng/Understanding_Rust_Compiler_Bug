{"sha": "7cf0b1798bddad33876258d6715b363896252e40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZjBiMTc5OGJkZGFkMzM4NzYyNThkNjcxNWIzNjM4OTYyNTJlNDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-11T20:59:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-19T17:52:55Z"}, "message": "configure: Start adding MSVC support\n\nThis commit starts to add MSVC support to the ./configure script to enable the\nbuild system to detect and build an MSVC target with the cl.exe compiler and\ntoolchain. The primary change here is a large sanity check when an MSVC target\nis requested (and currently only `x86_64-pc-windows-msvc` is recognized).\n\nWhen building an MSVC target, the configure script either requires the\n`--msvc-root` argument or for `cl.exe` to be in `PATH`. It also requires that if\nin the path `cl.exe` is the 64-bit version of the compiler.\n\nOnce detected the configure script will run the `vcvarsall.bat` script provided\nby Visual Studio to learn about the `INCLUDE` and `LIB` variables needed by the\n`cl.exe` compiler to run (the default include/lib paths for the\ncompiler/linker). These variables are then reexported when running `make` to\nensure that our own compiles are running the same toolchain.\n\nThe purpose of this detection and environment variable scraping is to avoid\nrequiring the build itself to be run inside of a `cmd.exe` shell but rather\nallow it to run in the currently expected MinGW/MSYS shell.", "tree": {"sha": "a1e30829d744c9d1ee3066058d81dc2025e69162", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1e30829d744c9d1ee3066058d81dc2025e69162"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cf0b1798bddad33876258d6715b363896252e40", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf0b1798bddad33876258d6715b363896252e40", "html_url": "https://github.com/rust-lang/rust/commit/7cf0b1798bddad33876258d6715b363896252e40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cf0b1798bddad33876258d6715b363896252e40/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee258c548f0303b8d1e315b0c9cb54fa59ad25d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee258c548f0303b8d1e315b0c9cb54fa59ad25d1", "html_url": "https://github.com/rust-lang/rust/commit/ee258c548f0303b8d1e315b0c9cb54fa59ad25d1"}], "stats": {"total": 94, "additions": 83, "deletions": 11}, "files": [{"sha": "b57a2f0fbefe480c6d16bc107f068ad174e35de4", "filename": "configure", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7cf0b1798bddad33876258d6715b363896252e40/configure", "raw_url": "https://github.com/rust-lang/rust/raw/7cf0b1798bddad33876258d6715b363896252e40/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=7cf0b1798bddad33876258d6715b363896252e40", "patch": "@@ -1084,6 +1084,65 @@ do\n                 err \"musl libc $CFG_MUSL_ROOT/lib/libc.a not found\"\n             fi\n             ;;\n+\n+        x86_64-*-msvc)\n+            # Currently the build system is not configured to build jemalloc\n+            # with MSVC, so we omit this optional dependency.\n+            step_msg \"targeting MSVC, disabling jemalloc\"\n+            CFG_DISABLE_JEMALLOC=1\n+            putvar CFG_DISABLE_JEMALLOC\n+\n+            # There are some MSYS python builds which will auto-translate\n+            # windows-style paths to MSYS-style paths in Python itself.\n+            # Unfortunately this breaks LLVM's build system as somewhere along\n+            # the line LLVM prints a path into a file from Python and then CMake\n+            # later tries to interpret that path. If Python prints a MSYS path\n+            # and CMake tries to use it as a Windows path, you're gonna have a\n+            # Bad Time.\n+            #\n+            # Consequently here we try to detect when that happens and print an\n+            # error if it does.\n+            if $CFG_PYTHON -c 'import sys; print sys.argv[1]' `pwd` | grep '^/'\n+            then\n+                err \"python is silently translating windows paths to MSYS paths \\\n+                     and the build will fail if this python is used.\\n\\n \\\n+                     Either an official python install must be used or an \\\n+                     alternative python package in MinGW must be used.\"\n+            fi\n+\n+            # MSVC requires cmake because that's how we're going to build LLVM\n+            probe_need CFG_CMAKE cmake\n+\n+            # Use the REG program to figure out where VS is installed\n+            # We need to figure out where cl.exe and link.exe are, so we do some\n+            # munging and some probing here. We also look for the default\n+            # INCLUDE and LIB variables for MSVC so we can set those in the\n+            # build system as well.\n+            install=$(reg QUERY \\\n+                       'HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\12.0' \\\n+                       -v InstallDir)\n+            need_ok \"couldn't find visual studio install root\"\n+            CFG_MSVC_ROOT=$(echo \"$install\" | grep InstallDir | sed 's/.*REG_SZ[ ]*//')\n+            CFG_MSVC_ROOT=$(dirname \"$CFG_MSVC_ROOT\")\n+            CFG_MSVC_ROOT=$(dirname \"$CFG_MSVC_ROOT\")\n+            CFG_MSVC_CL=\"${CFG_MSVC_ROOT}/VC/bin/amd64/cl.exe\"\n+            CFG_MSVC_LIB=\"${CFG_MSVC_ROOT}/VC/bin/amd64/lib.exe\"\n+            CFG_MSVC_LINK=\"${CFG_MSVC_ROOT}/VC/bin/amd64/link.exe\"\n+\n+            vcvarsall=\"${CFG_MSVC_ROOT}/VC/vcvarsall.bat\"\n+            CFG_MSVC_INCLUDE_PATH=$(cmd /c \"\\\"$vcvarsall\\\" amd64 && cmd /c echo %INCLUDE%\")\n+            need_ok \"failed to learn about MSVC's INCLUDE\"\n+            CFG_MSVC_LIB_PATH=$(cmd /c \"\\\"$vcvarsall\\\" amd64 && cmd /c echo %LIB%\")\n+            need_ok \"failed to learn about MSVC's LIB\"\n+\n+            putvar CFG_MSVC_ROOT\n+            putvar CFG_MSVC_CL\n+            putvar CFG_MSVC_LIB\n+            putvar CFG_MSVC_LINK\n+            putvar CFG_MSVC_INCLUDE_PATH\n+            putvar CFG_MSVC_LIB_PATH\n+            ;;\n+\n         *)\n             ;;\n     esac\n@@ -1125,6 +1184,7 @@ do\n   do\n     make_dir $t/rt/stage$s\n     make_dir $t/rt/jemalloc\n+    make_dir $t/rt/compiler-rt\n     for i in                                          \\\n       isaac sync test \\\n       arch/i386 arch/x86_64 arch/arm arch/aarch64 arch/mips arch/powerpc\n@@ -1496,11 +1556,6 @@ do\n     putvar $CFG_LLVM_INST_DIR\n done\n \n-# Munge any paths that appear in config.mk back to posix-y\n-cp config.tmp config.tmp.bak\n-sed -e 's@ \\([a-zA-Z]\\):[/\\\\]@ /\\1/@g;' <config.tmp.bak >config.tmp\n-rm -f config.tmp.bak\n-\n msg\n copy_if_changed ${CFG_SRC_DIR}Makefile.in ./Makefile\n move_if_changed config.tmp config.mk"}, {"sha": "4e97ae3abe11cd73ab117429f870308746d3c42c", "filename": "mk/cfg/x86_64-pc-windows-msvc.mk", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7cf0b1798bddad33876258d6715b363896252e40/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cf0b1798bddad33876258d6715b363896252e40/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk?ref=7cf0b1798bddad33876258d6715b363896252e40", "patch": "@@ -1,9 +1,9 @@\n # x86_64-pc-windows-msvc configuration\n-CC_x86_64-pc-windows-msvc=cl\n-LINK_x86_64-pc-windows-msvc=link\n-CXX_x86_64-pc-windows-msvc=cl\n-CPP_x86_64-pc-windows-msvc=cl\n-AR_x86_64-pc-windows-msvc=llvm-ar\n+CC_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL)\" -nologo\n+LINK_x86_64-pc-windows-msvc=\"$(CFG_MSVC_LINK)\" -nologo\n+CXX_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL)\" -nologo\n+CPP_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL)\" -nologo\n+AR_x86_64-pc-windows-msvc=\"$(CFG_MSVC_LIB)\" -nologo\n CFG_LIB_NAME_x86_64-pc-windows-msvc=$(1).dll\n CFG_STATIC_LIB_NAME_x86_64-pc-windows-msvc=$(1).lib\n CFG_LIB_GLOB_x86_64-pc-windows-msvc=$(1)-*.dll\n@@ -21,4 +21,21 @@ CFG_UNIXY_x86_64-pc-windows-msvc :=\n CFG_LDPATH_x86_64-pc-windows-msvc :=\n CFG_RUN_x86_64-pc-windows-msvc=$(2)\n CFG_RUN_TARG_x86_64-pc-windows-msvc=$(call CFG_RUN_x86_64-pc-windows-msvc,,$(2))\n-CFG_GNU_TRIPLE_x86_64-pc-windows-msvc := x86_64-pc-windows-msvc\n+CFG_GNU_TRIPLE_x86_64-pc-windows-msvc := x86_64-pc-win32\n+\n+# These two environment variables are scraped by the `./configure` script and\n+# are necessary for `cl.exe` to find standard headers (the INCLUDE variable) and\n+# for `link.exe` to find standard libraries (the LIB variable).\n+ifdef CFG_MSVC_INCLUDE_PATH\n+export INCLUDE := $(CFG_MSVC_INCLUDE_PATH)\n+endif\n+ifdef CFG_MSVC_LIB_PATH\n+export LIB := $(CFG_MSVC_LIB_PATH)\n+endif\n+\n+# Unfortunately `link.exe` is also a program in `/usr/bin` on MinGW installs,\n+# but it's not the one that we want. As a result we make sure that our detected\n+# `link.exe` shows up in PATH first.\n+ifdef CFG_MSVC_LINK\n+export PATH := $(CFG_MSVC_ROOT)/VC/bin/amd64:$(PATH)\n+endif"}]}