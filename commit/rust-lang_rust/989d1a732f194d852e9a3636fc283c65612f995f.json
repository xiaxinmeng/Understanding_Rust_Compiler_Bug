{"sha": "989d1a732f194d852e9a3636fc283c65612f995f", "node_id": "C_kwDOAAsO6NoAKDk4OWQxYTczMmYxOTRkODUyZTlhMzYzNmZjMjgzYzY1NjEyZjk5NWY", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2022-06-08T18:07:59Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2022-06-16T11:40:29Z"}, "message": " fix one more case of trailing space", "tree": {"sha": "f530eaa413fae5cc347e3c0f22d31b6ae2aabf39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f530eaa413fae5cc347e3c0f22d31b6ae2aabf39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/989d1a732f194d852e9a3636fc283c65612f995f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/989d1a732f194d852e9a3636fc283c65612f995f", "html_url": "https://github.com/rust-lang/rust/commit/989d1a732f194d852e9a3636fc283c65612f995f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/989d1a732f194d852e9a3636fc283c65612f995f/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ff8ae3111939a30d61f158b53e120f965989520", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff8ae3111939a30d61f158b53e120f965989520", "html_url": "https://github.com/rust-lang/rust/commit/0ff8ae3111939a30d61f158b53e120f965989520"}], "stats": {"total": 280, "additions": 140, "deletions": 140}, "files": [{"sha": "06a1a31c672e66ae857cef4661fb8a1b32fbc669", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -819,7 +819,7 @@ impl EmitterWriter {\n         }\n         buffer.puts(line_offset, 0, &self.maybe_anonymized(line_index), Style::LineNumber);\n \n-        draw_col_separator(buffer, line_offset, width_offset - 2);\n+        draw_col_separator_no_space(buffer, line_offset, width_offset - 2);\n     }\n \n     fn render_source_line("}, {"sha": "2d61b2a647bfde4c37279de0274eba367c8c7235", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -30,7 +30,7 @@ error[E0053]: method `make` has an incompatible type for trait\n    |\n LL |     default type Ty = bool;\n    |     ----------------------- expected this associated type\n-LL | \n+LL |\n LL |     fn make() -> bool { true }\n    |                  ^^^^\n    |                  |\n@@ -50,7 +50,7 @@ error[E0308]: mismatched types\n    |\n LL |     type Ty = u8;\n    |     ------------- associated type defaults can't be assumed inside the trait defining them\n-LL | \n+LL |\n LL |     fn make() -> Self::Ty {\n    |                  -------- expected `<Self as Tr>::Ty` because of return type\n LL |         0u8\n@@ -77,7 +77,7 @@ error[E0308]: mismatched types\n    |\n LL |     default type Ty = bool;\n    |     ----------------------- expected this associated type\n-LL | \n+LL |\n LL |     fn make() -> Self::Ty { true }\n    |                  --------   ^^^^ expected associated type, found `bool`\n    |                  |"}, {"sha": "71655d54baa2c21253c8f16453e94d8390637b78", "filename": "src/test/ui/associated-types/issue-22560.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL | / trait Sub<Rhs=Self> {\n LL | |     type Output;\n LL | | }\n    | |_- type parameter `Rhs` must be specified for this\n-LL | \n+LL |\n LL |   type Test = dyn Add + Sub;\n    |                         ^^^ help: set the type parameter to the desired type: `Sub<Rhs>`\n    |"}, {"sha": "492e06fbbc06c93d508bb0c5b570fec006294efb", "filename": "src/test/ui/async-await/issue-67765-async-diagnostic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fasync-await%2Fissue-67765-async-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fasync-await%2Fissue-67765-async-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67765-async-diagnostic.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0515]: cannot return value referencing local variable `s`\n    |\n LL |     let b = &s[..];\n    |              - `s` is borrowed here\n-LL | \n+LL |\n LL |     Err(b)?;\n    |     ^^^^^^^ returns a value referencing data owned by the current function\n "}, {"sha": "7f9e8008929186165b62d1f9e77857bf0d2ae070", "filename": "src/test/ui/blind/blind-item-item-shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fblind%2Fblind-item-item-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fblind%2Fblind-item-item-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-item-shadow.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0255]: the name `foo` is defined multiple times\n    |\n LL | mod foo { pub mod foo {  } }\n    | ------- previous definition of the module `foo` here\n-LL | \n+LL |\n LL | use foo::foo;\n    |     ^^^^^^^^ `foo` reimported here\n    |"}, {"sha": "6f7b7e08070bf15be21d66def3f98896c6193870", "filename": "src/test/ui/borrowck/borrow-raw-address-of-borrowed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,10 +3,10 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n    |\n LL |     let y = &x;\n    |             -- immutable borrow occurs here\n-LL | \n+LL |\n LL |     let q = &raw mut x;\n    |             ^^^^^^^^^^ mutable borrow occurs here\n-LL | \n+LL |\n LL |     drop(y);\n    |          - immutable borrow later used here\n \n@@ -15,7 +15,7 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n-LL | \n+LL |\n LL |     let p = &raw const x;\n    |             ^^^^^^^^^^^^ immutable borrow occurs here\n ...\n@@ -30,7 +30,7 @@ LL |     let y = &mut x;\n ...\n LL |     let q = &raw mut x;\n    |             ^^^^^^^^^^ second mutable borrow occurs here\n-LL | \n+LL |\n LL |     drop(y);\n    |          - first borrow later used here\n "}, {"sha": "5963dab9f4aab255fa97c9f4f5a5cd22182a526f", "filename": "src/test/ui/borrowck/borrow-raw-address-of-deref-mutability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n    |\n LL |     let x = &0;\n    |             -- help: consider changing this to be a mutable reference: `&mut 0`\n-LL | \n+LL |\n LL |     let q = &raw mut *x;\n    |             ^^^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n@@ -12,7 +12,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n    |\n LL |     let x = &0 as *const i32;\n    |             -- help: consider changing this to be a mutable pointer: `&mut 0`\n-LL | \n+LL |\n LL |     let q = &raw mut *x;\n    |             ^^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n "}, {"sha": "befa751a6007b49c39a9530b025ccd59b7b46c75", "filename": "src/test/ui/borrowck/borrow-tuple-fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL |     let r = &x.0;\n    |             ---- borrow of `x.0` occurs here\n LL |     let y = x;\n    |             ^ move out of `x` occurs here\n-LL | \n+LL |\n LL |     r.use_ref();\n    |     ----------- borrow later used here\n "}, {"sha": "b80174ae6872e5e39388d2ddc0e6e16940f179c8", "filename": "src/test/ui/borrowck/borrowck-assign-comp-idx.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,10 +3,10 @@ error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immuta\n    |\n LL |     let q: &isize = &p[0];\n    |                      - immutable borrow occurs here\n-LL | \n+LL |\n LL |     p[0] = 5;\n    |     ^ mutable borrow occurs here\n-LL | \n+LL |\n LL |     println!(\"{}\", *q);\n    |                    -- immutable borrow later used here\n "}, {"sha": "24cc4933ef1b055efa4cf821bb90816c98ce1e46", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr-overloaded-op.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `p` because it was mutably borrowed\n    |\n LL |     let q = &mut p;\n    |             ------ borrow of `p` occurs here\n-LL | \n+LL |\n LL |     p + 3;\n    |     ^ use of borrowed `p`\n ...\n@@ -18,7 +18,7 @@ LL |     let q = &mut p;\n ...\n LL |     p.times(3);\n    |     ^^^^^^^^^^ immutable borrow occurs here\n-LL | \n+LL |\n LL |     *q + 3; // OK to use the new alias `q`\n    |     -- mutable borrow later used here\n "}, {"sha": "1d6bd4e2ec8d8e441f75b7a87f8a7da94f645aea", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -18,7 +18,7 @@ LL |     let l = &mut p;\n    |             ------ mutable borrow occurs here\n LL |     p.impurem();\n    |     ^^^^^^^^^^^ immutable borrow occurs here\n-LL | \n+LL |\n LL |     l.x += 1;\n    |     -------- mutable borrow later used here\n "}, {"sha": "f833abcc02acf83a4335359c739c0658ec4eda33", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `*a` because it is borrowed\n    |\n LL |     let b = &a;\n    |             -- borrow of `a` occurs here\n-LL | \n+LL |\n LL |     let z = *a;\n    |             ^^ move out of `*a` occurs here\n LL |     b.use_ref();"}, {"sha": "9509ebb7cde9a6fa66f3afe396d9c83d27b86985", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `t`\n    |\n LL |     let t: Box<_> = Box::new(3);\n    |         - move occurs because `t` has type `Box<isize>`, which does not implement the `Copy` trait\n-LL | \n+LL |\n LL |     call_f(move|| { *t + 1 });\n    |            ------   -- variable moved due to use in closure\n    |            |"}, {"sha": "e01c26adcfc2d51d60c5e912f1fd01cd032b82d8", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `s` because it is borrowed\n    |\n LL |     let rs = &mut s;\n    |              ------ borrow of `s` occurs here\n-LL | \n+LL |\n LL |     println!(\"{}\", f[s]);\n    |                      ^ move out of `s` occurs here\n ..."}, {"sha": "b8ac7a3a4469d4433d8c634cc323d5d5d0d69d60", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -23,7 +23,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s;\n    |                 ------------- immutable borrow occurs here\n-LL | \n+LL |\n LL |     let [_, _, ref mut from_begin2, ..] = *s;\n    |                ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     nop(&[from_begin2, from_end1, from_end3, from_end4]);\n@@ -45,7 +45,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s;\n    |                                               --------------- immutable borrow occurs here\n-LL | \n+LL |\n LL |     let [.., ref mut from_end3, _,  _] = *s;\n    |              ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     nop(&[from_begin0, from_begin1, from_begin3, from_end3]);"}, {"sha": "090c7b6b51a31cf27390e59e9cbdf0ee4a6555d6", "filename": "src/test/ui/borrowck/borrowck-union-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -99,7 +99,7 @@ LL |             let ra = &mut u.a;\n    |                      -------- borrow of `u.a` occurs here\n LL |             let b = u.b;\n    |                     ^^^ use of borrowed `u.a`\n-LL | \n+LL |\n LL |             drop(ra);\n    |                  -- borrow later used here\n "}, {"sha": "1685acf87184b944d1b4af9927a512ceb0019d49", "filename": "src/test/ui/borrowck/copy-suggestion-region-vid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fcopy-suggestion-region-vid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fcopy-suggestion-region-vid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fcopy-suggestion-region-vid.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0382]: borrow of moved value: `helpers`\n    |\n LL |         let helpers = [vec![], vec![]];\n    |             ------- move occurs because `helpers` has type `[Vec<&i64>; 2]`, which does not implement the `Copy` trait\n-LL | \n+LL |\n LL |         HelperStruct { helpers, is_empty: helpers[0].is_empty() }\n    |                        -------            ^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n    |                        |"}, {"sha": "57803247ba8d05fa0ee37e700456d830d7558b81", "filename": "src/test/ui/borrowck/issue-58776-borrowck-scans-children.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL |     let res = (|| (|| &greeting)())();\n    |                --      -------- borrow occurs due to use in closure\n    |                |\n    |                borrow of `greeting` occurs here\n-LL | \n+LL |\n LL |     greeting = \"DEALLOCATED\".to_string();\n    |     ^^^^^^^^ assignment to borrowed `greeting` occurs here\n ..."}, {"sha": "a57ceb847394563448a27e5c98711b60c6814ef9", "filename": "src/test/ui/borrowck/two-phase-allow-access-during-reservation.nll_target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `i` because it was mutably borrowed\n    |\n LL |     /*1*/ let p = &mut i; // (reservation of `i` starts here)\n    |                   ------ borrow of `i` occurs here\n-LL | \n+LL |\n LL |     /*2*/ let j = i;      // OK: `i` is only reserved here\n    |                   ^ use of borrowed `i`\n ..."}, {"sha": "9e0f68b654338a8a0cf183b25239203d389a8daf", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immuta\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n-LL | \n+LL |\n LL |     v.extend(shared);\n    |     ^^------^^^^^^^^\n    |     | |"}, {"sha": "117d7ceaeefe0c04947ad80259da124c6eafeb8c", "filename": "src/test/ui/borrowck/two-phase-sneaky.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL |     v[0].push_str({\n    |     -    -------- first borrow later used by call\n    |     |\n    |     first mutable borrow occurs here\n-LL | \n+LL |\n LL |         v.push(format!(\"foo\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n "}, {"sha": "481d7e58529eebe089afd91fe0460ba870b05600", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/mut_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `**ref_mref_x` as mutable, as it is behind a `&` ref\n    |\n LL |     let ref_mref_x = &mref_x;\n    |                      ------- help: consider changing this to be a mutable reference: `&mut mref_x`\n-LL | \n+LL |\n LL |     let c = || {\n    |             ^^ `ref_mref_x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n LL |"}, {"sha": "6a40db0d51d4bc72a87b9aed6287fe3f9a6baa7e", "filename": "src/test/ui/closures/issue-6801.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL |       let sq =  || { *x * *x };\n    |                 --   -- borrow occurs due to use in closure\n    |                 |\n    |                 borrow of `x` occurs here\n-LL | \n+LL |\n LL |       twice(x);\n    |             ^ move out of `x` occurs here\n LL |       invoke(sq);"}, {"sha": "802284b265821121fcb6fc5fa6bd7b2dbaf811d7", "filename": "src/test/ui/closures/issue-82438-mut-without-upvar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `c` as mutable, as it is not declared as mutable\n    |\n LL |     let c = |a, b, c, d| {};\n    |         - help: consider changing this to be mutable: `mut c`\n-LL | \n+LL |\n LL |     A.f(participant_name, &mut c);\n    |                           ^^^^^^ cannot borrow as mutable\n "}, {"sha": "1110197734f7adb68b4a9860501081dda71603fe", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0751]: found both positive and negative implementation of trait `std::mar\n    |\n LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n    | ------------------------------------------------------ positive implementation here\n-LL | \n+LL |\n LL | impl<T: MyTrait> !Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n "}, {"sha": "8612ce60d18759a65421e13e02d5706a29f2316f", "filename": "src/test/ui/coherence/coherence-fn-implied-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error: conflicting implementations of trait `Trait` for type `for<'a, 'b> fn(&'a\n    |\n LL | impl Trait for for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32 {}\n    | ------------------------------------------------------------------ first implementation here\n-LL | \n+LL |\n LL | impl Trait for for<'c> fn(&'c &'c u32, &'c &'c u32) -> &'c u32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32`\n    |"}, {"sha": "af18655b06fcd101216be6f6d39f79b78d56f55e", "filename": "src/test/ui/coherence/coherence-free-vs-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error: conflicting implementations of trait `TheTrait` for type `fn(&u8)`\n    |\n LL | impl<'a> TheTrait for fn(&'a u8) {}\n    | -------------------------------- first implementation here\n-LL | \n+LL |\n LL | impl TheTrait for fn(&u8) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `fn(&u8)`\n    |"}, {"sha": "8e7d4589e61407033552e6d164c7c79e9f3c4fad", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here\n-LL | \n+LL |\n LL | impl<A:Iterator> Foo<A::Item> for A { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |"}, {"sha": "6492747bb261d76feaf95330d9ee65ceebf95667", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::optio\n    |\n LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n    | ---------------------------------------- first implementation here\n-LL | \n+LL |\n LL | impl<T, U> Foo<T> for Option<U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::option::Option<_>`\n "}, {"sha": "7d2c584c37067935b1a7466319bb2a52fc3d9b94", "filename": "src/test/ui/coherence/coherence-projection-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here\n-LL | \n+LL |\n LL | impl<A:Bar> Foo<A::Output> for A { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n "}, {"sha": "25d8c875653d08a3427364648f134557596d0752", "filename": "src/test/ui/coherence/coherence-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ warning: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> f\n    |\n LL | impl TheTrait for for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {}\n    | ---------------------------------------------------------- first implementation here\n-LL | \n+LL |\n LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n    |"}, {"sha": "c94d566f5df22060dd78065b255933c219c8e0b5", "filename": "src/test/ui/derives/issue-91550.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -23,7 +23,7 @@ error[E0599]: the method `use_eq` exists for struct `Object<NoDerives>`, but its\n    |\n LL | pub struct NoDerives;\n    | --------------------- doesn't satisfy `NoDerives: Eq`\n-LL | \n+LL |\n LL | struct Object<T>(T);\n    | -------------------- method `use_eq` not found for this\n ...\n@@ -42,7 +42,7 @@ error[E0599]: the method `use_ord` exists for struct `Object<NoDerives>`, but it\n    |\n LL | pub struct NoDerives;\n    | --------------------- doesn't satisfy `NoDerives: Ord`\n-LL | \n+LL |\n LL | struct Object<T>(T);\n    | -------------------- method `use_ord` not found for this\n ...\n@@ -64,7 +64,7 @@ LL | pub struct NoDerives;\n    | |\n    | doesn't satisfy `NoDerives: Ord`\n    | doesn't satisfy `NoDerives: PartialOrd`\n-LL | \n+LL |\n LL | struct Object<T>(T);\n    | -------------------- method `use_ord_and_partial_ord` not found for this\n ..."}, {"sha": "352c5ba5be095005c48399f4652202a71d279f49", "filename": "src/test/ui/error-codes/E0255.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0255]: the name `foo` is defined multiple times\n    |\n LL | use bar::foo;\n    |     -------- previous import of the value `foo` here\n-LL | \n+LL |\n LL | fn foo() {}\n    | ^^^^^^^^ `foo` redefined here\n    |"}, {"sha": "06cbc5b4fb5f23bf92133427806288a8dc2f190c", "filename": "src/test/ui/error-codes/E0259.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0259]: the name `alloc` is defined multiple times\n    |\n LL | extern crate alloc;\n    | ------------------- previous import of the extern crate `alloc` here\n-LL | \n+LL |\n LL | extern crate libc as alloc;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `alloc` reimported here\n    |"}, {"sha": "2d3305bd15b0c1659ffb005b4396c036c8715fcb", "filename": "src/test/ui/error-codes/E0260.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0260]: the name `alloc` is defined multiple times\n    |\n LL | extern crate alloc;\n    | ------------------- previous import of the extern crate `alloc` here\n-LL | \n+LL |\n LL | mod alloc {\n    | ^^^^^^^^^ `alloc` redefined here\n    |"}, {"sha": "8aadf5c8b47126a928f00f75307ddf6d671d71af", "filename": "src/test/ui/error-codes/E0393.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0393]: the type parameter `T` must be explicitly specified\n    |\n LL | trait A<T=Self> {}\n    | ------------------ type parameter `T` must be specified for this\n-LL | \n+LL |\n LL | fn together_we_will_rule_the_galaxy(son: &dyn A) {}\n    |                                               ^ help: set the type parameter to the desired type: `A<T>`\n    |"}, {"sha": "8f2ef8c8e6b3e85363618b4bae02f34c7195748e", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -31,7 +31,7 @@ error[E0423]: expected function, tuple struct or tuple variant, found struct `Fo\n    |\n LL |     struct Foo { a: bool };\n    |     ---------------------- `Foo` defined here\n-LL | \n+LL |\n LL |     let f = Foo();\n    |             ^^^^^\n ..."}, {"sha": "35e79e448d5acf1d672c82ed5eabb3df1a9955da", "filename": "src/test/ui/error-codes/E0446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0446]: private type `Bar` in public interface\n    |\n LL |     struct Bar(u32);\n    |     ---------------- `Bar` declared as private\n-LL | \n+LL |\n LL |     pub fn bar() -> Bar {\n    |     ^^^^^^^^^^^^^^^^^^^ can't leak private type\n "}, {"sha": "f982ed26f5c0b8de32b28a4fbaf141dbeb321a70", "filename": "src/test/ui/error-codes/E0453.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0453]: allow(non_snake_case) incompatible with previous forbid\n    |\n LL | #![forbid(non_snake_case)]\n    |           -------------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(non_snake_case)]\n    |         ^^^^^^^^^^^^^^ overruled by previous forbid\n \n@@ -12,7 +12,7 @@ error[E0453]: allow(non_snake_case) incompatible with previous forbid\n    |\n LL | #![forbid(non_snake_case)]\n    |           -------------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(non_snake_case)]\n    |         ^^^^^^^^^^^^^^ overruled by previous forbid\n "}, {"sha": "e677e8916154240fb531b4e282c1871393e908de", "filename": "src/test/ui/error-codes/E0504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0504.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `fancy_num` because it is borrowed\n    |\n LL |     let fancy_ref = &fancy_num;\n    |                     ---------- borrow of `fancy_num` occurs here\n-LL | \n+LL |\n LL |     let x = move || {\n    |             ^^^^^^^ move out of `fancy_num` occurs here\n LL |         println!(\"child function: {}\", fancy_num.num);"}, {"sha": "d70406b750afcf6cb04f1e3f7945b9e6ef9e68c0", "filename": "src/test/ui/error-codes/E0506.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ferror-codes%2FE0506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0506.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL |     let fancy_ref = &fancy_num;\n    |                     ---------- borrow of `fancy_num` occurs here\n LL |     fancy_num = FancyNum { num: 6 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n-LL | \n+LL |\n LL |     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n    |                                                 ------------- borrow later used here\n "}, {"sha": "d4c201b5d3ec58a3cf414229978b63b9a9106917", "filename": "src/test/ui/feature-gates/feature-gate-with_negative_coherence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-with_negative_coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-with_negative_coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-with_negative_coherence.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0119]: conflicting implementations of trait `Foo` for type `&_`\n    |\n LL | impl<T: std::ops::DerefMut> Foo for T { }\n    | ------------------------------------- first implementation here\n-LL | \n+LL |\n LL | impl<T> Foo for &T { }\n    | ^^^^^^^^^^^^^^^^^^ conflicting implementation for `&_`\n "}, {"sha": "8a32c225485fec7ba697fbbc0f313599a197791d", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -93,7 +93,7 @@ error: invalid format string: expected `'}'` but string was terminated\n    |\n LL |     {\n    |     - because of this opening brace\n-LL | \n+LL |\n LL | \"###);\n    | ^ expected `'}'` in format string\n    |"}, {"sha": "d6e7a1d45f08bd9db97a5caf4224ba8cf027e697", "filename": "src/test/ui/hashmap/hashmap-iter-value-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,10 +3,10 @@ error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as\n    |\n LL |     let (_, thing) = my_stuff.iter().next().unwrap();\n    |                      --------------- immutable borrow occurs here\n-LL | \n+LL |\n LL |     my_stuff.clear();\n    |     ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-LL | \n+LL |\n LL |     println!(\"{}\", *thing);\n    |                    ------ immutable borrow later used here\n "}, {"sha": "b514e9fef4d793df5fb9b2b0fb782f0dc6aac20e", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-through-non-recursive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0720]: cannot resolve opaque type\n    |\n LL | fn id<T>(t: T) -> impl Sized { t }\n    |                   ---------- returning this opaque type `impl Sized`\n-LL | \n+LL |\n LL | fn recursive_id() -> impl Sized {\n    |                      ^^^^^^^^^^ recursive opaque type\n LL |     id(recursive_id2())\n@@ -25,7 +25,7 @@ error[E0720]: cannot resolve opaque type\n    |\n LL | fn wrap<T>(t: T) -> impl Sized { (t,) }\n    |                     ---------- returning this opaque type `impl Sized`\n-LL | \n+LL |\n LL | fn recursive_wrap() -> impl Sized {\n    |                        ^^^^^^^^^^ recursive opaque type\n LL |     wrap(recursive_wrap2())"}, {"sha": "c814eedd22614fb511fbc884d9e424ebcaa0ac31", "filename": "src/test/ui/issues/issue-11873.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-11873.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-11873.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11873.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -7,7 +7,7 @@ LL |     let mut f = || v.push(2);\n    |                 borrow of `v` occurs here\n LL |     let _w = v;\n    |              ^ move out of `v` occurs here\n-LL | \n+LL |\n LL |     f();\n    |     - borrow later used here\n "}, {"sha": "4da346f56ab7607f2627e9a6f4ac9303f604c7df", "filename": "src/test/ui/issues/issue-22370.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0393]: the type parameter `T` must be explicitly specified\n    |\n LL | trait A<T=Self> {}\n    | ------------------ type parameter `T` must be specified for this\n-LL | \n+LL |\n LL | fn f(a: &dyn A) {}\n    |              ^ help: set the type parameter to the desired type: `A<T>`\n    |"}, {"sha": "051ed25b6c9d92bc20589e046f46609ec5fe2b11", "filename": "src/test/ui/issues/issue-28472.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-28472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-28472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28472.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0428]: the name `foo` is defined multiple times\n    |\n LL |     fn foo();\n    |     --------- previous definition of the value `foo` here\n-LL | \n+LL |\n LL | /   pub\n LL | |   fn foo();\n    | |___________^ `foo` redefined here"}, {"sha": "e3733cebba58ed7ad14dc1b37fef5a515e9e9ac9", "filename": "src/test/ui/issues/issue-3099-a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0428]: the name `A` is defined multiple times\n    |\n LL | enum A { B, C }\n    | ------ previous definition of the type `A` here\n-LL | \n+LL |\n LL | enum A { D, E }\n    | ^^^^^^ `A` redefined here\n    |"}, {"sha": "c0cfefeb940f492d1c2b37a645392442e913cdd3", "filename": "src/test/ui/issues/issue-3099-b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-3099-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-3099-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3099-b.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0428]: the name `a` is defined multiple times\n    |\n LL | pub mod a {}\n    | --------- previous definition of the module `a` here\n-LL | \n+LL |\n LL | pub mod a {}\n    | ^^^^^^^^^ `a` redefined here\n    |"}, {"sha": "319886f878384e7c6d30a215452680f11c282212", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL | struct Foo(u32);\n    | ---------------- fn(u32) -> Foo {Foo} defined here\n-LL | \n+LL |\n LL | fn test() -> Foo { Foo }\n    |              ---   ^^^ expected struct `Foo`, found fn item\n    |              |"}, {"sha": "e88f31ea1ee17a95a31f01c51c8557d75c189c70", "filename": "src/test/ui/issues/issue-40510-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error: captured variable cannot escape `FnMut` closure body\n    |\n LL |     let mut x: Box<()> = Box::new(());\n    |         ----- variable defined here\n-LL | \n+LL |\n LL |     || {\n    |      - inferred to be a `FnMut` closure\n LL |         &mut x"}, {"sha": "22186ba9a67b6a2aa05f3fadc03ed6b0d7e747d7", "filename": "src/test/ui/issues/issue-40510-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error: captured variable cannot escape `FnMut` closure body\n    |\n LL |       let mut x: Vec<()> = Vec::new();\n    |           ----- variable defined here\n-LL | \n+LL |\n LL |       || {\n    |        - inferred to be a `FnMut` closure\n LL | /         || {"}, {"sha": "acdf963ed3bd7af476cea4d328c62addd21c49d4", "filename": "src/test/ui/issues/issue-4265.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL | /     fn bar() {\n LL | |         Foo { baz: 0 }.bar();\n LL | |     }\n    | |_____- previous definition of `bar` here\n-LL | \n+LL |\n LL | /     fn bar() {\n LL | |     }\n    | |_____^ duplicate definition"}, {"sha": "4e28874e140a40f28e46333666290f4e58c76c86", "filename": "src/test/ui/issues/issue-47646.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `heap` as immutable because it is also borrowed as m\n    |\n LL |     let borrow = heap.peek_mut();\n    |                  --------------- mutable borrow occurs here\n-LL | \n+LL |\n LL |     match (borrow, ()) {\n    |           ------------ a temporary with access to the mutable borrow is created here ...\n LL |         (Some(_), ()) => {"}, {"sha": "2ec151d24d1c6cd3b4815293feb4bd833c69ce35", "filename": "src/test/ui/issues/issue-64792-bad-unicode-ctor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0423]: expected function, tuple struct or tuple variant, found struct `X`\n    |\n LL | struct X {}\n    | ----------- `X` defined here\n-LL | \n+LL |\n LL | const Y: X = X(\"\u00f6\");\n    |              ^^^^^^ help: use struct literal syntax instead: `X {}`\n "}, {"sha": "961f9de6614afad2bcc45414eb4851db8a87af34", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n    |\n LL |   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n    |                           ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n-LL | \n+LL |\n LL |     if true { &self.field } else { x }\n    |                                    ^ lifetime `'a` required\n "}, {"sha": "5bb763813322d5b23ebdaa1292399384747257f3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |            --     - let's call the lifetime of this reference `'1`\n    |            |\n    |            lifetime `'a` defined here\n-LL | \n+LL |\n LL |         if x > y { x } else { y }\n    |                    ^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n "}, {"sha": "4bcd7cf9578db906f1bd8f3d041f13d8aac13663", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |          --  - let's call the lifetime of this reference `'1`\n    |          |\n    |          lifetime `'a` defined here\n-LL | \n+LL |\n LL |     x\n    |     ^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n "}, {"sha": "34a64f8a63e6073558fa2f0c6705c94e20cd8319", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |            --  - let's call the lifetime of this reference `'1`\n    |            |\n    |            lifetime `'a` defined here\n-LL | \n+LL |\n LL |         if true { x } else { self }\n    |                              ^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n "}, {"sha": "891fa9885f3294fb7153f7fcd63012633d93f2e9", "filename": "src/test/ui/lint/forbid-group-member.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ warning: allow(unused_variables) incompatible with previous forbid\n    |\n LL | #![forbid(unused)]\n    |           ------ `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n    |\n@@ -16,7 +16,7 @@ warning: allow(unused_variables) incompatible with previous forbid\n    |\n LL | #![forbid(unused)]\n    |           ------ `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n    |\n@@ -28,7 +28,7 @@ warning: allow(unused_variables) incompatible with previous forbid\n    |\n LL | #![forbid(unused)]\n    |           ------ `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n    |"}, {"sha": "e65301778332a2a104b4f0648cee286444dc18d1", "filename": "src/test/ui/lint/forbid-member-group.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0453]: allow(unused) incompatible with previous forbid\n    |\n LL | #![forbid(unused_variables)]\n    |           ---------------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(unused)]\n    |         ^^^^^^ overruled by previous forbid\n \n@@ -12,7 +12,7 @@ error[E0453]: allow(unused) incompatible with previous forbid\n    |\n LL | #![forbid(unused_variables)]\n    |           ---------------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(unused)]\n    |         ^^^^^^ overruled by previous forbid\n "}, {"sha": "1d397f43133fa7c5ba94ed2bcc5f07d2251d9eb0", "filename": "src/test/ui/lint/issue-80988.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ warning: deny(warnings) incompatible with previous forbid\n    |\n LL | #![forbid(warnings)]\n    |           -------- `forbid` level set here\n-LL | \n+LL |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^ overruled by previous forbid\n    |\n@@ -16,7 +16,7 @@ warning: deny(warnings) incompatible with previous forbid\n    |\n LL | #![forbid(warnings)]\n    |           -------- `forbid` level set here\n-LL | \n+LL |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^ overruled by previous forbid\n    |\n@@ -28,7 +28,7 @@ warning: deny(warnings) incompatible with previous forbid\n    |\n LL | #![forbid(warnings)]\n    |           -------- `forbid` level set here\n-LL | \n+LL |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^ overruled by previous forbid\n    |"}, {"sha": "5977b9c949d5042c17300b57cccc796c4bf8d378", "filename": "src/test/ui/lint/lint-forbid-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0453]: allow(deprecated) incompatible with previous forbid\n    |\n LL | #![forbid(deprecated)]\n    |           ---------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(deprecated)]\n    |         ^^^^^^^^^^ overruled by previous forbid\n \n@@ -12,7 +12,7 @@ error[E0453]: allow(deprecated) incompatible with previous forbid\n    |\n LL | #![forbid(deprecated)]\n    |           ---------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(deprecated)]\n    |         ^^^^^^^^^^ overruled by previous forbid\n "}, {"sha": "afbab9896765f40bd9607a38cfa135d3500b9956", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Se\n    |\n LL | impl Foo for dyn Send {}\n    | --------------------- first implementation here\n-LL | \n+LL |\n LL | impl Foo for dyn Send + Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n    |\n@@ -16,7 +16,7 @@ error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Se\n    |\n LL | impl Foo for dyn Send + Sync {}\n    | ---------------------------- first implementation here\n-LL | \n+LL |\n LL | impl Foo for dyn Sync + Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n    |"}, {"sha": "5f000014c7dba2565c8c11b9b6a16f4f3da4e18a", "filename": "src/test/ui/lint/must_not_suspend/ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error: `Umm` held across a suspend point, but should not be\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n-LL | \n+LL |\n LL |         other().await;\n    |                ------ the value is held across this suspend point\n    |"}, {"sha": "60369430a3e350481072a0707b25ddc90a0758bb", "filename": "src/test/ui/lint/must_not_suspend/trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -23,7 +23,7 @@ error: boxed `Wow` trait object held across a suspend point, but should not be\n    |\n LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^\n-LL | \n+LL |\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |"}, {"sha": "f7d131109ea8f9f6248abebe83deface18ac49cd", "filename": "src/test/ui/liveness/liveness-use-after-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL |     let x: Box<_> = 5.into();\n    |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n LL |     let y = x;\n    |             - value moved here\n-LL | \n+LL |\n LL |     println!(\"{}\", *x);\n    |                    ^^ value borrowed here after move\n    |"}, {"sha": "a6add31d1c510707f62bbc97825f030499778137", "filename": "src/test/ui/match/match-tag-nullary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL | enum B { B }\n    |          - unit variant defined here\n-LL | \n+LL |\n LL | fn main() { let x: A = A::A; match x { B::B => { } } }\n    |                                    -   ^^^^ expected enum `A`, found enum `B`\n    |                                    |"}, {"sha": "f33951c98bfb3aa5d67b5d0b21e2574b0540400b", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0412]: cannot find type `N` in this scope\n    |\n LL | struct X<const N: u8>();\n    | ------------------------ similarly named struct `X` defined here\n-LL | \n+LL |\n LL | impl X<N> {}\n    |        ^\n    |"}, {"sha": "cdfe7f6db82a929eb29c4c6f1f7e608aaa4b7004", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -6,7 +6,7 @@ LL |             y: &y,\n ...\n LL |     }\n    |     - `y` dropped here while still borrowed\n-LL | \n+LL |\n LL |     deref(p);\n    |           - borrow later used here\n "}, {"sha": "49ec0dd931ac0e42c5ebd910322277bba7ed346d", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -32,7 +32,7 @@ LL |         closure(&mut p, &y);\n LL |\n LL |     }\n    |     - `y` dropped here while still borrowed\n-LL | \n+LL |\n LL |     deref(p);\n    |           - borrow later used here\n "}, {"sha": "f0ae4c7fb0492430dc6171bfa54401647dbdbb44", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -54,7 +54,7 @@ LL |             let mut closure1 = || p = &y;\n ...\n LL |     }\n    |     - `y` dropped here while still borrowed\n-LL | \n+LL |\n LL |     deref(p);\n    |           - borrow later used here\n "}, {"sha": "e99fc4b43a23ddb050f7653c70ae323a21b2de31", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -36,7 +36,7 @@ LL |         let mut closure = || p = &y;\n ...\n LL |     }\n    |     - `y` dropped here while still borrowed\n-LL | \n+LL |\n LL |     deref(p);\n    |           - borrow later used here\n "}, {"sha": "ac385e056b9f81712c7e58248950222e04f9d72a", "filename": "src/test/ui/nll/issue-52534-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -6,7 +6,7 @@ LL |         y = &x\n LL |\n LL |     }\n    |     - `x` dropped here while still borrowed\n-LL | \n+LL |\n LL |     println!(\"{}\", y);\n    |                    - borrow later used here\n "}, {"sha": "d8f43cbc92a1e7874581d6af9fa21704c9cec2be", "filename": "src/test/ui/nll/issue-54382-use-span-of-tail-of-block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -9,7 +9,7 @@ LL |             D(\"other\").next(&_thing1)\n ...\n LL |     }\n    |     - `_thing1` dropped here while still borrowed\n-LL | \n+LL |\n LL |     ;\n    |     - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n    |"}, {"sha": "92f5ffdf388ed22e724e4e53ab1df8efb8ee84ed", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -8,7 +8,7 @@ LL |         D(&_thing1).end()\n    |         a temporary with access to the borrow is created here ...\n LL |     }\n    |     - `_thing1` dropped here while still borrowed\n-LL | \n+LL |\n LL |     ;\n    |     - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n    |"}, {"sha": "7fa2090e3e614d348c3a2b0374a2842712148221", "filename": "src/test/ui/no-capture-arc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fno-capture-arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fno-capture-arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-capture-arc.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0382]: borrow of moved value: `arc_v`\n    |\n LL |     let arc_v = Arc::new(v);\n    |         ----- move occurs because `arc_v` has type `Arc<Vec<i32>>`, which does not implement the `Copy` trait\n-LL | \n+LL |\n LL |     thread::spawn(move|| {\n    |                   ------ value moved into closure here\n LL |         assert_eq!((*arc_v)[3], 4);"}, {"sha": "bcc4506dc8d1c928c36755ff634d9643a2369390", "filename": "src/test/ui/no-reuse-move-arc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0382]: borrow of moved value: `arc_v`\n    |\n LL |     let arc_v = Arc::new(v);\n    |         ----- move occurs because `arc_v` has type `Arc<Vec<i32>>`, which does not implement the `Copy` trait\n-LL | \n+LL |\n LL |     thread::spawn(move|| {\n    |                   ------ value moved into closure here\n LL |         assert_eq!((*arc_v)[3], 4);"}, {"sha": "78b35569c21629151808ebd604f076a9b1e40d71", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -6,7 +6,7 @@ LL |       let hello = move || {\n LL | |         println!(\"Hello {}\", a.0);\n LL | |     };\n    | |_____- within this `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n-LL | \n+LL |\n LL |       let hello = hello.clone();\n    |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`, the trait `Clone` is not implemented for `S`\n    |"}, {"sha": "2cfafac7794261e810ff735978394ad6260cf7e1", "filename": "src/test/ui/parser/inner-attr-after-doc-comment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL | / /**\n LL | |  * My module\n LL | |  */\n    | |___- previous doc comment\n-LL | \n+LL |\n LL |   #![recursion_limit=\"100\"]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attribute\n LL |"}, {"sha": "331c254a52b48aaa470bc4a2b2917fbbdb3e2723", "filename": "src/test/ui/parser/inner-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error: an inner attribute is not permitted following an outer attribute\n    |\n LL | #[feature(lang_items)]\n    | ---------------------- previous outer attribute\n-LL | \n+LL |\n LL | #![recursion_limit=\"100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attribute\n LL | fn main() {}"}, {"sha": "ae89926914ebaa7d6c4592d6df24afdf2ea2e64f", "filename": "src/test/ui/parser/issues/issue-62894.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -6,7 +6,7 @@ LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |        |           |\n    |        |           unclosed delimiter\n    |        unclosed delimiter\n-LL | \n+LL |\n LL | fn main() {}\n    |              ^\n \n@@ -18,7 +18,7 @@ LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |        |           |\n    |        |           unclosed delimiter\n    |        unclosed delimiter\n-LL | \n+LL |\n LL | fn main() {}\n    |              ^\n \n@@ -30,7 +30,7 @@ LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |        |           |\n    |        |           unclosed delimiter\n    |        unclosed delimiter\n-LL | \n+LL |\n LL | fn main() {}\n    |              ^\n \n@@ -39,7 +39,7 @@ error: expected one of `(`, `[`, or `{`, found keyword `fn`\n    |\n LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |                                                   - expected one of `(`, `[`, or `{`\n-LL | \n+LL |\n LL | fn main() {}\n    | ^^ unexpected token\n    |"}, {"sha": "bc3358fc6baa6f7c661005dc50cab7e634967419", "filename": "src/test/ui/parser/issues/issue-62973.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,8 +5,8 @@ LL | fn p() { match s { v, E { [) {) }\n    |        -         - unclosed delimiter\n    |        |\n    |        unclosed delimiter\n-LL | \n-LL | \n+LL |\n+LL |\n    |  ^\n \n error: this file contains an unclosed delimiter\n@@ -16,8 +16,8 @@ LL | fn p() { match s { v, E { [) {) }\n    |        -         - unclosed delimiter\n    |        |\n    |        unclosed delimiter\n-LL | \n-LL | \n+LL |\n+LL |\n    |  ^\n \n error: expected one of `,` or `}`, found `{`\n@@ -51,8 +51,8 @@ error: expected one of `.`, `?`, `{`, or an operator, found `}`\n    |\n LL | fn p() { match s { v, E { [) {) }\n    |          ----- while parsing this `match` expression\n-LL | \n-LL | \n+LL |\n+LL |\n    |  ^ expected one of `.`, `?`, `{`, or an operator\n \n error: mismatched closing delimiter: `)`"}, {"sha": "165eb8ae9328217aaa8177b88fc299aff0da0b47", "filename": "src/test/ui/parser/mismatched-delim-brace-empty-block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error: unexpected closing delimiter: `}`\n    |\n LL | fn main() {\n    |           - this opening brace...\n-LL | \n+LL |\n LL | }\n    | - ...matches this closing brace\n LL |     let _ = ();"}, {"sha": "cb1b760c282b5e5e28dbd17f9b59e5adb8b5b402", "filename": "src/test/ui/reachable/unreachable-code.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Freachable%2Funreachable-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Freachable%2Funreachable-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-code.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error: unreachable statement\n    |\n LL |   loop{}\n    |   ------ any code following this expression is unreachable\n-LL | \n+LL |\n LL |   let a = 3;\n    |   ^^^^^^^^^^ unreachable statement\n    |"}, {"sha": "8b89c350c846098f0a0e0f29545cb612ad856459", "filename": "src/test/ui/resolve/issue-23716.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fresolve%2Fissue-23716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fresolve%2Fissue-23716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23716.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0530]: function parameters cannot shadow statics\n    |\n LL | static foo: i32 = 0;\n    | -------------------- the static `foo` is defined here\n-LL | \n+LL |\n LL | fn bar(foo: i32) {}\n    |        ^^^ cannot be named the same as a static\n \n@@ -12,7 +12,7 @@ error[E0530]: function parameters cannot shadow statics\n    |\n LL | use self::submod::answer;\n    |     -------------------- the static `answer` is imported here\n-LL | \n+LL |\n LL | fn question(answer: i32) {}\n    |             ^^^^^^ cannot be named the same as a static\n "}, {"sha": "7258174ba89b30139117b486bacfe1facfa004d0", "filename": "src/test/ui/resolve/issue-81508.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0433]: failed to resolve: use of undeclared type `Baz`\n    |\n LL |     let Baz: &str = \"\";\n    |         --- help: `Baz` is defined here, but is not a type\n-LL | \n+LL |\n LL |     println!(\"{}\", Baz::Bar);\n    |                    ^^^ use of undeclared type `Baz`\n "}, {"sha": "249a7e53d45462cf3b20137ee16558fdf2ef4d93", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -9,7 +9,7 @@ error[E0412]: cannot find type `Baz` in this scope\n    |\n LL | enum Bar { }\n    | -------- similarly named enum `Bar` defined here\n-LL | \n+LL |\n LL | type A = Baz; // Misspelled type name.\n    |          ^^^ help: an enum with a similar name exists: `Bar`\n "}, {"sha": "5e5c9f6b3d8e26fe3894598845cea7eb65516c21", "filename": "src/test/ui/resolve/resolve-conflict-item-vs-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-item-vs-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-item-vs-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-item-vs-import.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0255]: the name `transmute` is defined multiple times\n    |\n LL | use std::mem::transmute;\n    |     ------------------- previous import of the value `transmute` here\n-LL | \n+LL |\n LL | fn transmute() {}\n    | ^^^^^^^^^^^^^^ `transmute` redefined here\n    |"}, {"sha": "198ef10311ee98baf80f56ca9948a60962b20ccd", "filename": "src/test/ui/resolve/resolve-conflict-type-vs-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-type-vs-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-type-vs-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-type-vs-import.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0255]: the name `Iter` is defined multiple times\n    |\n LL | use std::slice::Iter;\n    |     ---------------- previous import of the type `Iter` here\n-LL | \n+LL |\n LL | struct Iter;\n    | ^^^^^^^^^^^^ `Iter` redefined here\n    |"}, {"sha": "8732b10d8f803bca0c227696354318472ddf5d29", "filename": "src/test/ui/specialization/issue-52050.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -17,7 +17,7 @@ LL | |     I: Iterator,\n LL | | {\n LL | | }\n    | |_- first implementation here\n-LL | \n+LL |\n LL |   impl IntoPyDictPointer for ()\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n    |"}, {"sha": "4abc34466106dc2af12fc90ae85fc50e625bbe2a", "filename": "src/test/ui/suggestions/suggest-trait-items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -48,7 +48,7 @@ error[E0046]: not all trait items implemented, missing: `Type`, `foo`, `bar`, `q\n    |\n LL |     type Type;\n    |     ---------- `Type` from trait\n-LL | \n+LL |\n LL |     fn foo();\n    |     --------- `foo` from trait\n LL |     fn bar();"}, {"sha": "bf244b97e9b132baea6c41d1ac4eaad442e04e3b", "filename": "src/test/ui/traits/alias/no-duplicates.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -262,7 +262,7 @@ LL | trait _5 = Obj + Send;\n    |            |\n    |            additional non-auto trait\n    |            first non-auto trait\n-LL | \n+LL |\n LL | type _T20 = dyn _5 + _5;\n    |                 --   ^^ trait alias used in trait object type (additional use)\n    |                 |\n@@ -326,7 +326,7 @@ LL | trait _6 = _5 + _5; // ==> Obj + Send + Obj + Send\n    |            --   -- referenced here (additional use)\n    |            |\n    |            referenced here (first use)\n-LL | \n+LL |\n LL | type _T30 = dyn _6;\n    |                 ^^\n    |                 |\n@@ -392,7 +392,7 @@ LL | trait _7 = _5 + Sync;\n    |            -- referenced here (first use)\n LL | trait _8 = Unpin + _7;\n    |                    -- referenced here (first use)\n-LL | \n+LL |\n LL | type _T40 = dyn _8 + Obj;\n    |                 --   ^^^ additional non-auto trait\n    |                 |"}, {"sha": "4b1ddf6843c3dd4be2759725a7e5ea5aa6cdf022", "filename": "src/test/ui/traits/alias/no-extra-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -148,7 +148,7 @@ LL | trait _1 = _0;\n ...\n LL | trait _5 = Sync + ObjB + Send;\n    |                   ---- first non-auto trait\n-LL | \n+LL |\n LL | type _T20 = dyn _5 + _1;\n    |                 --   ^^ trait alias used in trait object type (additional use)\n    |                 |\n@@ -460,7 +460,7 @@ LL | trait _9 = _5 + Sync;\n    |            -- referenced here (first use)\n LL | trait _10 = Unpin + _9;\n    |                     -- referenced here (first use)\n-LL | \n+LL |\n LL | type _T40 = dyn _10 + ObjA;\n    |                 ---   ^^^^ additional non-auto trait\n    |                 |"}, {"sha": "06c707e4332a5694a6defadce9e2da4dcb3db2a8", "filename": "src/test/ui/traits/alias/only-maybe-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -12,7 +12,7 @@ error[E0224]: at least one trait is required for an object type\n    |\n LL | trait _2 = _1 + _1;\n    | ------------------- this alias does not contain a trait\n-LL | \n+LL |\n LL | type _T1 = dyn _2;\n    |            ^^^^^^\n "}, {"sha": "c4f8294e26356a81f183af1fbb8b991eca42cc75", "filename": "src/test/ui/traits/vtable/issue-97381.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `v` because it is borrowed\n    |\n LL |     let el = &v[0];\n    |               - borrow of `v` occurs here\n-LL | \n+LL |\n LL |     for _ in v {\n    |              ^ move out of `v` occurs here\n LL |"}, {"sha": "ea079e30d9c395858450c640a2bf29bc2da0f22d", "filename": "src/test/ui/try-block/try-block-bad-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -42,7 +42,7 @@ LL |         let k = &mut i;\n ...\n LL |         i = 40;\n    |         ^^^^^^ assignment to borrowed `i` occurs here\n-LL | \n+LL |\n LL |         let i_ptr = if let Err(i_ptr) = j { i_ptr } else { panic ! (\"\") };\n    |                                         - borrow later used here\n "}, {"sha": "9fc0b661f1e7d543093a064cadd6f2d9afd863e9", "filename": "src/test/ui/try-block/try-block-unreachable-code-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ warning: unreachable expression\n    |\n LL |           return;\n    |           ------ any code following this expression is unreachable\n-LL | \n+LL |\n LL | /         try {\n LL | |             loop {\n LL | |                 err()?;\n@@ -32,7 +32,7 @@ LL | /         loop {\n LL | |             err()?;\n LL | |         }\n    | |_________- any code following this expression is unreachable\n-LL | \n+LL |\n LL |           42\n    |           ^^ unreachable expression\n "}, {"sha": "33f81a77aaf0a41da744db2aafa3442f9c0ebbc0", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -21,7 +21,7 @@ error[E0308]: mismatched types\n    |\n LL | type Closure = impl FnOnce();\n    |                ------------- the expected opaque type\n-LL | \n+LL |\n LL | fn c() -> Closure {\n    |           ------- expected `Closure` because of return type\n LL |     || -> Closure { || () }"}, {"sha": "573e691b4cc077f1aad00083d45da012fc598454", "filename": "src/test/ui/type-alias-impl-trait/issue-74280.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL | type Test = impl Copy;\n    |             --------- the expected opaque type\n-LL | \n+LL |\n LL | fn test() -> Test {\n    |              ---- expected `Test` because of return type\n LL |     let y = || -> Test { () };"}, {"sha": "ea259cf3d378590b089c002c541601b2c8513c30", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL | / trait Foo<T=Self> {\n LL | |     fn method(&self);\n LL | | }\n    | |_- type parameter `T` must be specified for this\n-LL | \n+LL |\n LL |   fn foo(x: &dyn Foo) { }\n    |                  ^^^ help: set the type parameter to the desired type: `Foo<T>`\n    |"}, {"sha": "cbdb4dd0fb5c8cd939aa1f7f68e8ab7960899f50", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -31,7 +31,7 @@ error[E0597]: `factorial` does not live long enough\n    |\n LL |     let mut factorial: Option<Box<dyn Fn(u32) -> u32 + 'static>> = None;\n    |                        ----------------------------------------- type annotation requires that `factorial` is borrowed for `'static`\n-LL | \n+LL |\n LL |     let f = |x: u32| -> u32 {\n    |             --------------- value captured here\n LL |         let g = factorial.as_ref().unwrap();\n@@ -45,7 +45,7 @@ error[E0506]: cannot assign to `factorial` because it is borrowed\n    |\n LL |     let mut factorial: Option<Box<dyn Fn(u32) -> u32 + 'static>> = None;\n    |                        ----------------------------------------- type annotation requires that `factorial` is borrowed for `'static`\n-LL | \n+LL |\n LL |     let f = |x: u32| -> u32 {\n    |             --------------- borrow of `factorial` occurs here\n LL |         let g = factorial.as_ref().unwrap();"}, {"sha": "14052486cbbc97158d53be07c7ae0529c38321f1", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -5,7 +5,7 @@ LL | fn move_then_borrow<T: Not<Output=T> + Clone>(x: T) {\n    |                                               - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n LL |     !x;\n    |     -- `x` moved due to usage in operator\n-LL | \n+LL |\n LL |     x.clone();\n    |     ^^^^^^^^^ value borrowed here after move\n    |"}, {"sha": "26804216d9da7466ae7a9f37611dfd441f35a486", "filename": "src/test/ui/use/use-after-move-implicity-coerced-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989d1a732f194d852e9a3636fc283c65612f995f/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr?ref=989d1a732f194d852e9a3636fc283c65612f995f", "patch": "@@ -6,7 +6,7 @@ LL |     let n: Box<_> = Number { n: 42 }.into();\n LL |     let mut l: Box<_> = List { list: Vec::new() }.into();\n LL |     l.push(n);\n    |            - value moved here\n-LL | \n+LL |\n LL |     let x = n.to_string();\n    |             ^^^^^^^^^^^^^ value borrowed here after move\n "}]}