{"sha": "72eb9de74739887874bebb08c71b574106ae80f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZWI5ZGU3NDczOTg4Nzg3NGJlYmIwOGM3MWI1NzQxMDZhZTgwZjE=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2018-12-25T16:45:13Z"}, "committer": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2018-12-25T16:45:13Z"}, "message": "add fix for removing unnecessary braces in use statements", "tree": {"sha": "9608361dacff1cd3f463c766c0b061f243d38b93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9608361dacff1cd3f463c766c0b061f243d38b93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72eb9de74739887874bebb08c71b574106ae80f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72eb9de74739887874bebb08c71b574106ae80f1", "html_url": "https://github.com/rust-lang/rust/commit/72eb9de74739887874bebb08c71b574106ae80f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72eb9de74739887874bebb08c71b574106ae80f1/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb426cb9eeefa69a53d7c8c3367f7c6b714b9b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb426cb9eeefa69a53d7c8c3367f7c6b714b9b8", "html_url": "https://github.com/rust-lang/rust/commit/5fb426cb9eeefa69a53d7c8c3367f7c6b714b9b8"}], "stats": {"total": 129, "additions": 68, "deletions": 61}, "files": [{"sha": "69c9b104e7a2d75fab0d64a76625fb76d4c7c79d", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 25, "deletions": 35, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/72eb9de74739887874bebb08c71b574106ae80f1/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb9de74739887874bebb08c71b574106ae80f1/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=72eb9de74739887874bebb08c71b574106ae80f1", "patch": "@@ -3,31 +3,32 @@ use std::{\n     sync::Arc,\n };\n \n-use ra_editor::{self, find_node_at_offset, FileSymbol, LineIndex, LocalEdit, Severity};\n-use ra_syntax::{\n-    ast::{self, ArgListOwner, Expr, NameOwner, FnDef},\n-    algo::find_covering_node,\n-    AstNode, SourceFileNode,\n-    SyntaxKind::*,\n-    SyntaxNodeRef, TextRange, TextUnit,\n-};\n-use ra_db::{FilesDatabase, SourceRoot, SourceRootId, SyntaxDatabase};\n use rayon::prelude::*;\n use salsa::{Database, ParallelDatabase};\n+\n use hir::{\n     self,\n-    source_binder,\n     FnSignatureInfo,\n     Problem,\n+    source_binder,\n+};\n+use ra_db::{FilesDatabase, SourceRoot, SourceRootId, SyntaxDatabase};\n+use ra_editor::{self, FileSymbol, find_node_at_offset, LineIndex, LocalEdit, Severity};\n+use ra_syntax::{\n+    algo::find_covering_node,\n+    ast::{self, ArgListOwner, Expr, FnDef, NameOwner},\n+    AstNode, SourceFileNode,\n+    SyntaxKind::*,\n+    SyntaxNodeRef, TextRange, TextUnit,\n };\n \n use crate::{\n-    completion::{completions, CompletionItem},\n-    db,\n-    symbol_index::{SymbolIndex, SymbolsDatabase, LibrarySymbolsQuery},\n-    AnalysisChange, RootChange, Cancelable, CrateId, Diagnostic, FileId,\n-    FileSystemEdit, FilePosition, Query, SourceChange, SourceFileEdit,\n-    ReferenceResolution,\n+    AnalysisChange,\n+    Cancelable,\n+    completion::{CompletionItem, completions},\n+    CrateId, db, Diagnostic, FileId, FilePosition, FileSystemEdit,\n+    Query, ReferenceResolution, RootChange, SourceChange, SourceFileEdit,\n+    symbol_index::{LibrarySymbolsQuery, SymbolIndex, SymbolsDatabase},\n };\n \n #[derive(Debug, Default)]\n@@ -366,7 +367,7 @@ impl AnalysisImpl {\n                 range: d.range,\n                 message: d.msg,\n                 severity: d.severity,\n-                fix: None,\n+                fix: d.fix.map(|fix| SourceChange::from_local_edit(file_id, fix)),\n             })\n             .collect::<Vec<_>>();\n         if let Some(m) = source_binder::module_from_file_id(&*self.db, file_id)? {\n@@ -425,25 +426,14 @@ impl AnalysisImpl {\n         let file = self.file_syntax(file_id);\n         let offset = range.start();\n         let actions = vec![\n-            (\n-                \"flip comma\",\n-                ra_editor::flip_comma(&file, offset).map(|f| f()),\n-            ),\n-            (\n-                \"add `#[derive]`\",\n-                ra_editor::add_derive(&file, offset).map(|f| f()),\n-            ),\n-            (\"add impl\", ra_editor::add_impl(&file, offset).map(|f| f())),\n-            (\n-                \"introduce variable\",\n-                ra_editor::introduce_variable(&file, range).map(|f| f()),\n-            ),\n+            ra_editor::flip_comma(&file, offset).map(|f| f()),\n+            ra_editor::add_derive(&file, offset).map(|f| f()),\n+            ra_editor::add_impl(&file, offset).map(|f| f()),\n+            ra_editor::introduce_variable(&file, range).map(|f| f()),\n         ];\n         actions\n             .into_iter()\n-            .filter_map(|(name, local_edit)| {\n-                Some(SourceChange::from_local_edit(file_id, name, local_edit?))\n-            })\n+            .filter_map(|local_edit| Some(SourceChange::from_local_edit(file_id, local_edit?)))\n             .collect()\n     }\n \n@@ -541,13 +531,13 @@ impl AnalysisImpl {\n }\n \n impl SourceChange {\n-    pub(crate) fn from_local_edit(file_id: FileId, label: &str, edit: LocalEdit) -> SourceChange {\n+    pub(crate) fn from_local_edit(file_id: FileId, edit: LocalEdit) -> SourceChange {\n         let file_edit = SourceFileEdit {\n             file_id,\n             edit: edit.edit,\n         };\n         SourceChange {\n-            label: label.to_string(),\n+            label: edit.label,\n             source_file_edits: vec![file_edit],\n             file_system_edits: vec![],\n             cursor_position: edit"}, {"sha": "476d1b438f61509f49a5a6d7546a3c643c28e438", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72eb9de74739887874bebb08c71b574106ae80f1/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb9de74739887874bebb08c71b574106ae80f1/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=72eb9de74739887874bebb08c71b574106ae80f1", "patch": "@@ -288,19 +288,18 @@ impl Analysis {\n     }\n     pub fn join_lines(&self, file_id: FileId, range: TextRange) -> SourceChange {\n         let file = self.imp.file_syntax(file_id);\n-        SourceChange::from_local_edit(file_id, \"join lines\", ra_editor::join_lines(&file, range))\n+        SourceChange::from_local_edit(file_id, ra_editor::join_lines(&file, range))\n     }\n     pub fn on_enter(&self, position: FilePosition) -> Option<SourceChange> {\n         let file = self.imp.file_syntax(position.file_id);\n         let edit = ra_editor::on_enter(&file, position.offset)?;\n-        let res = SourceChange::from_local_edit(position.file_id, \"on enter\", edit);\n+        let res = SourceChange::from_local_edit(position.file_id, edit);\n         Some(res)\n     }\n     pub fn on_eq_typed(&self, position: FilePosition) -> Option<SourceChange> {\n         let file = self.imp.file_syntax(position.file_id);\n         Some(SourceChange::from_local_edit(\n             position.file_id,\n-            \"add semicolon\",\n             ra_editor::on_eq_typed(&file, position.offset)?,\n         ))\n     }"}, {"sha": "7615f37a60ddb958304ed513532d94e3ba6a6a93", "filename": "crates/ra_editor/src/code_actions.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72eb9de74739887874bebb08c71b574106ae80f1/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb9de74739887874bebb08c71b574106ae80f1/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs?ref=72eb9de74739887874bebb08c71b574106ae80f1", "patch": "@@ -12,6 +12,7 @@ use crate::{find_node_at_offset, TextEdit, TextEditBuilder};\n \n #[derive(Debug)]\n pub struct LocalEdit {\n+    pub label: String,\n     pub edit: TextEdit,\n     pub cursor_position: Option<TextUnit>,\n }\n@@ -30,6 +31,7 @@ pub fn flip_comma<'a>(\n         edit.replace(prev.range(), next.text().to_string());\n         edit.replace(next.range(), prev.text().to_string());\n         LocalEdit {\n+            label: \"flip comma\".to_string(),\n             edit: edit.finish(),\n             cursor_position: None,\n         }\n@@ -58,6 +60,7 @@ pub fn add_derive<'a>(\n             Some(tt) => tt.syntax().range().end() - TextUnit::of_char(')'),\n         };\n         LocalEdit {\n+            label: \"add `#[derive]`\".to_string(),\n             edit: edit.finish(),\n             cursor_position: Some(offset),\n         }\n@@ -109,6 +112,7 @@ pub fn add_impl<'a>(\n         buf.push_str(\"\\n}\");\n         edit.insert(start_offset, buf);\n         LocalEdit {\n+            label: \"add impl\".to_string(),\n             edit: edit.finish(),\n             cursor_position: Some(offset),\n         }\n@@ -148,6 +152,7 @@ pub fn introduce_variable<'a>(\n         }\n         let cursor_position = anchor_stmt.range().start() + TextUnit::of_str(\"let \");\n         LocalEdit {\n+            label: \"introduce variable\".to_string(),\n             edit: edit.finish(),\n             cursor_position: Some(cursor_position),\n         }\n@@ -194,13 +199,15 @@ pub fn make_pub_crate<'a>(\n             || parent.children().any(|child| child.kind() == VISIBILITY)\n         {\n             return LocalEdit {\n+                label: \"make pub crate\".to_string(),\n                 edit: edit.finish(),\n                 cursor_position: Some(offset),\n             };\n         }\n \n         edit.insert(node_start, \"pub(crate) \".to_string());\n         LocalEdit {\n+            label: \"make pub crate\".to_string(),\n             edit: edit.finish(),\n             cursor_position: Some(node_start),\n         }"}, {"sha": "898d9b8c7bae97fd05900d72d5e8e78a4848d4f1", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/72eb9de74739887874bebb08c71b574106ae80f1/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb9de74739887874bebb08c71b574106ae80f1/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=72eb9de74739887874bebb08c71b574106ae80f1", "patch": "@@ -42,6 +42,7 @@ pub struct Diagnostic {\n     pub range: TextRange,\n     pub msg: String,\n     pub severity: Severity,\n+    pub fix: Option<LocalEdit>,\n }\n \n #[derive(Debug)]\n@@ -111,6 +112,7 @@ pub fn diagnostics(file: &SourceFileNode) -> Vec<Diagnostic> {\n             range: location_to_range(err.location()),\n             msg: format!(\"Syntax Error: {}\", err),\n             severity: Severity::Error,\n+            fix: None,\n         })\n         .collect();\n \n@@ -124,11 +126,27 @@ fn check_unnecessary_braces_in_use_statement(file: &SourceFileNode) -> Vec<Diagn\n     let mut diagnostics = Vec::new();\n     for node in file.syntax().descendants() {\n         if let Some(use_tree_list) = ast::UseTreeList::cast(node) {\n-            if use_tree_list.use_trees().count() <= 1 {\n+            if use_tree_list.use_trees().count() == 1 {\n+                let range = use_tree_list.syntax().range();\n+                // use_tree_list always has one child, so we use unwrap directly here.\n+                let to_replace = typing::single_use_tree(use_tree_list)\n+                    .unwrap()\n+                    .syntax()\n+                    .text()\n+                    .to_string();\n+                let mut edit_builder = TextEditBuilder::new();\n+                edit_builder.delete(range);\n+                edit_builder.insert(range.start(), to_replace);\n+\n                 diagnostics.push(Diagnostic {\n-                    range: use_tree_list.syntax().range(),\n+                    range: range,\n                     msg: format!(\"Unnecessary braces in use statement\"),\n                     severity: Severity::WeakWarning,\n+                    fix: Some(LocalEdit {\n+                        label: \"Remove unnecessary braces\".to_string(),\n+                        edit: edit_builder.finish(),\n+                        cursor_position: None,\n+                    }),\n                 })\n             }\n         }\n@@ -250,9 +268,7 @@ fn main() {}\n         );\n         let diagnostics = check_unnecessary_braces_in_use_statement(&file);\n         assert_eq_dbg(\n-            r#\"[Diagnostic { range: [12; 15), msg: \"Unnecessary braces in use statement\", severity: WeakWarning },\n-                Diagnostic { range: [24; 27), msg: \"Unnecessary braces in use statement\", severity: WeakWarning },\n-                Diagnostic { range: [61; 64), msg: \"Unnecessary braces in use statement\", severity: WeakWarning }]\"#,\n+            \"[Diagnostic { range: [12; 15), msg: \\\"Unnecessary braces in use statement\\\", severity: WeakWarning, fix: Some(LocalEdit { label: \\\"Remove unnecessary braces\\\", edit: TextEdit { atoms: [AtomTextEdit { delete: [12; 12), insert: \\\"b\\\" }, AtomTextEdit { delete: [12; 15), insert: \\\"\\\" }] }, cursor_position: Some(12) }) }, Diagnostic { range: [24; 27), msg: \\\"Unnecessary braces in use statement\\\", severity: WeakWarning, fix: Some(LocalEdit { label: \\\"Remove unnecessary braces\\\", edit: TextEdit { atoms: [AtomTextEdit { delete: [24; 24), insert: \\\"c\\\" }, AtomTextEdit { delete: [24; 27), insert: \\\"\\\" }] }, cursor_position: Some(24) }) }, Diagnostic { range: [61; 64), msg: \\\"Unnecessary braces in use statement\\\", severity: WeakWarning, fix: Some(LocalEdit { label: \\\"Remove unnecessary braces\\\", edit: TextEdit { atoms: [AtomTextEdit { delete: [61; 61), insert: \\\"e\\\" }, AtomTextEdit { delete: [61; 64), insert: \\\"\\\" }] }, cursor_position: Some(61) }) }]\",\n             &diagnostics,\n         )\n     }"}, {"sha": "dcc8793afc202b3a8ce66d0e6515bf70c6dabd51", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/72eb9de74739887874bebb08c71b574106ae80f1/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb9de74739887874bebb08c71b574106ae80f1/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=72eb9de74739887874bebb08c71b574106ae80f1", "patch": "@@ -8,7 +8,9 @@ use ra_syntax::{\n     SyntaxKind::*,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n-use ra_text_edit::text_utils::contains_offset_nonstrict;\n+use ra_text_edit::text_utils::{\n+    contains_offset_nonstrict\n+};\n \n use crate::{find_node_at_offset, TextEditBuilder, LocalEdit};\n \n@@ -19,6 +21,7 @@ pub fn join_lines(file: &SourceFileNode, range: TextRange) -> LocalEdit {\n         let pos = match text.find('\\n') {\n             None => {\n                 return LocalEdit {\n+                    label: \"join lines\".to_string(),\n                     edit: TextEditBuilder::new().finish(),\n                     cursor_position: None,\n                 };\n@@ -51,6 +54,7 @@ pub fn join_lines(file: &SourceFileNode, range: TextRange) -> LocalEdit {\n     }\n \n     LocalEdit {\n+        label: \"join lines\".to_string(),\n         edit: edit.finish(),\n         cursor_position: None,\n     }\n@@ -76,6 +80,7 @@ pub fn on_enter(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit> {\n     let mut edit = TextEditBuilder::new();\n     edit.insert(offset, inserted);\n     Some(LocalEdit {\n+        label: \"on enter\".to_string(),\n         edit: edit.finish(),\n         cursor_position: Some(cursor_position),\n     })\n@@ -126,6 +131,7 @@ pub fn on_eq_typed(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit>\n     let mut edit = TextEditBuilder::new();\n     edit.insert(offset, \";\".to_string());\n     Some(LocalEdit {\n+        label: \"add semicolon\".to_string(),\n         edit: edit.finish(),\n         cursor_position: None,\n     })\n@@ -248,24 +254,13 @@ fn join_single_use_tree(edit: &mut TextEditBuilder, node: SyntaxNodeRef) -> Opti\n     Some(())\n }\n \n-fn single_use_tree(tree_list: ast::UseTreeList) -> Option<ast::UseTree> {\n-    let mut res = None;\n-    for child in tree_list.syntax().children() {\n-        if let Some(tree) = ast::UseTree::cast(child) {\n-            if tree.syntax().text().contains('\\n') {\n-                return None;\n-            }\n-            if mem::replace(&mut res, Some(tree)).is_some() {\n-                return None;\n-            }\n-        } else {\n-            match child.kind() {\n-                WHITESPACE | L_CURLY | R_CURLY | COMMA => (),\n-                _ => return None,\n-            }\n-        }\n+pub(crate) fn single_use_tree(tree_list: ast::UseTreeList) -> Option<ast::UseTree> {\n+    let sub_use_trees = tree_list.use_trees().count();\n+    if sub_use_trees != 1 {\n+        return None;\n     }\n-    res\n+\n+    tree_list.use_trees().next()\n }\n \n fn compute_ws(left: SyntaxNodeRef, right: SyntaxNodeRef) -> &'static str {"}]}