{"sha": "2b80ed99db8097d3d0e45d03561b81ede6b443b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiODBlZDk5ZGI4MDk3ZDNkMGU0NWQwMzU2MWI4MWVkZTZiNDQzYjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-06T14:23:00Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-26T04:44:57Z"}, "message": "remove feature(nll) in more cases.", "tree": {"sha": "fa0fe5784e306754f0372c0f60acf4d9580a37bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa0fe5784e306754f0372c0f60acf4d9580a37bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b80ed99db8097d3d0e45d03561b81ede6b443b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b80ed99db8097d3d0e45d03561b81ede6b443b2", "html_url": "https://github.com/rust-lang/rust/commit/2b80ed99db8097d3d0e45d03561b81ede6b443b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b80ed99db8097d3d0e45d03561b81ede6b443b2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b638aa1f5b8043a16af67ca52e0645c2c1352ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b638aa1f5b8043a16af67ca52e0645c2c1352ee3", "html_url": "https://github.com/rust-lang/rust/commit/b638aa1f5b8043a16af67ca52e0645c2c1352ee3"}], "stats": {"total": 128, "additions": 47, "deletions": 81}, "files": [{"sha": "71f1f15654b55355ce23a912a5de0d30f1a8f3ba", "filename": "src/test/ui/issues/issue-27282-move-match-input-into-guard.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -7,8 +7,6 @@\n // reaches the panic code when executed, despite the compiler warning\n // about that match arm being unreachable.\n \n-#![feature(nll)]\n-\n fn main() {\n     let b = &mut true;\n     match b {"}, {"sha": "51f9b464d7660e842f1c613f9fce141efedac0aa", "filename": "src/test/ui/issues/issue-27282-move-match-input-into-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `b`\n-  --> $DIR/issue-27282-move-match-input-into-guard.rs:18:14\n+  --> $DIR/issue-27282-move-match-input-into-guard.rs:16:14\n    |\n LL |     let b = &mut true;\n    |         - move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait"}, {"sha": "afa0ba780de46e1826d713ab3c981e8ad244d66b", "filename": "src/test/ui/issues/issue-27282-move-ref-mut-into-guard.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,11 +1,6 @@\n // Issue 27282: Example 1: This sidesteps the AST checks disallowing\n // mutable borrows in match guards by hiding the mutable borrow in a\n // guard behind a move (of the ref mut pattern id) within a closure.\n-//\n-// This example is not rejected by AST borrowck (and then reliably\n-// segfaults when executed).\n-\n-#![feature(nll)]\n \n fn main() {\n     match Some(&4) {"}, {"sha": "30cf0d66afaff9da39ddb7a0f1dde7aaa5e1fa77", "filename": "src/test/ui/issues/issue-27282-move-ref-mut-into-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:14:19\n+  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:9:19\n    |\n LL |             if { (|| { let bar = foo; bar.take() })(); false } => {},\n    |                   ^^             ---"}, {"sha": "d17d6f07f6870e5835b42d7d3ca3e01b7b141be3", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -9,8 +9,6 @@\n // diverges, and therefore a single final fake-read at the very end\n // after the final match arm would not suffice.\n \n-#![feature(nll)]\n-\n struct ForceFnOnce;\n \n fn main() {"}, {"sha": "188f0b25c30842494452728aa5e7f25b533bb7fd", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0510]: cannot mutably borrow `x` in match guard\n-  --> $DIR/issue-27282-mutate-before-diverging-arm-1.rs:23:14\n+  --> $DIR/issue-27282-mutate-before-diverging-arm-1.rs:21:14\n    |\n LL |     match x {\n    |           - value is immutable in match guard"}, {"sha": "9c3e7e9978ec71100621211e5c95feaf04ceb18c", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -13,8 +13,6 @@\n // occurs in the pattern-match itself, and not in the guard\n // expression.\n \n-#![feature(nll)]\n-\n struct ForceFnOnce;\n \n fn main() {"}, {"sha": "f0a3151f4e12f149f1e37af4c23ba34bf0294ce7", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0510]: cannot mutably borrow `x` in match guard\n-  --> $DIR/issue-27282-mutate-before-diverging-arm-2.rs:28:18\n+  --> $DIR/issue-27282-mutate-before-diverging-arm-2.rs:26:18\n    |\n LL |     match x {\n    |           - value is immutable in match guard"}, {"sha": "cff9e963e272515a647e995f783dabf842ded4e2", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-3.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -8,7 +8,7 @@\n // This case is interesting because a borrow of **x is untracked, because **x is\n // immutable. However, for matches we care that **x refers to the same value\n // until we have chosen a match arm.\n-#![feature(nll)]\n+\n struct ForceFnOnce;\n fn main() {\n     let mut x = &mut &Some(&2);"}, {"sha": "ce91022f093d4461749b58f3316cc31b18c6949a", "filename": "src/test/ui/issues/issue-29723.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // test for https://github.com/rust-lang/rust/issues/29723\n \n fn main() {"}, {"sha": "04915ab5f951068d35d4b6c10fa81fe81f235c82", "filename": "src/test/ui/issues/issue-29723.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `s`\n-  --> $DIR/issue-29723.rs:12:13\n+  --> $DIR/issue-29723.rs:10:13\n    |\n LL |     let s = String::new();\n    |         - move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait"}, {"sha": "0cd8e956d309f40e4642567265830900de9b936a", "filename": "src/test/ui/nll/borrowed-match-issue-45045.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,7 +1,5 @@\n // Regression test for issue #45045\n \n-#![feature(nll)]\n-\n enum Xyz {\n     A,\n     B,"}, {"sha": "1607304e6716b541d03abdcf158adc706dd939d1", "filename": "src/test/ui/nll/borrowed-match-issue-45045.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/borrowed-match-issue-45045.rs:15:9\n+  --> $DIR/borrowed-match-issue-45045.rs:13:9\n    |\n LL |     let f = &mut e;\n    |             ------ borrow of `e` occurs here"}, {"sha": "99922cc51b0d1bd497b572b72c76049e9632f789", "filename": "src/test/ui/nll/do-not-ignore-lifetime-bounds-in-copy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,7 +1,5 @@\n // Test that the 'static bound from the Copy impl is respected. Regression test for #29149.\n \n-#![feature(nll)]\n-\n #[derive(Clone)] struct Foo<'a>(&'a u32);\n impl Copy for Foo<'static> {}\n "}, {"sha": "b811ba4fd0cd2a4c12456083ecd99e1b03efd004", "filename": "src/test/ui/nll/do-not-ignore-lifetime-bounds-in-copy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `s` does not live long enough\n-  --> $DIR/do-not-ignore-lifetime-bounds-in-copy.rs:10:17\n+  --> $DIR/do-not-ignore-lifetime-bounds-in-copy.rs:8:17\n    |\n LL |     let a = Foo(&s);\n    |                 ^^ borrowed value does not live long enough"}, {"sha": "5ef0c3fe73dbf8e46376aec4e594b5d1e127aa17", "filename": "src/test/ui/nll/enum-drop-access.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n enum DropOption<T> {\n     Some(T),\n     None,"}, {"sha": "a532ae121a6efabf898bac634285f46af84ef966", "filename": "src/test/ui/nll/enum-drop-access.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/enum-drop-access.rs:15:31\n+  --> $DIR/enum-drop-access.rs:13:31\n    |\n LL | fn drop_enum(opt: DropOption<&mut i32>) -> Option<&mut i32> {\n    |                              - let's call the lifetime of this reference `'1`\n@@ -13,7 +13,7 @@ LL | }\n    | - here, drop of `opt` needs exclusive access to `*opt.0`, because the type `DropOption<&mut i32>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/enum-drop-access.rs:24:36\n+  --> $DIR/enum-drop-access.rs:22:36\n    |\n LL | fn optional_drop_enum(opt: Option<DropOption<&mut i32>>) -> Option<&mut i32> {\n    |                                              - let's call the lifetime of this reference `'1`"}, {"sha": "1836f766cc7ef8a9a6ddd88ee0de134ac303fc28", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -12,8 +12,6 @@\n // tests that are meant to continue failing to compile once\n // rust-lang/rust#54987 is implemented.\n \n-#![feature(nll)]\n-\n struct S<Y> {\n     x: u32,\n "}, {"sha": "9e69262b38900f464262a465a0762b0bb1cdd1dc", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,17 +1,17 @@\n error[E0381]: assign to part of possibly-uninitialized variable: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:99:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:97:5\n    |\n LL |     s.x = 10; s.y = Box::new(20);\n    |     ^^^^^^^^ use of possibly-uninitialized `s`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:106:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:104:5\n    |\n LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n error[E0382]: assign to part of moved value: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:113:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:111:5\n    |\n LL |     let mut s: S<B> = S::new(); drop(s);\n    |         -----                        - value moved here\n@@ -21,7 +21,7 @@ LL |     s.x = 10; s.y = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:120:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:118:5\n    |\n LL |     let mut t: T = (0, Box::new(0)); drop(t);\n    |         -----                             - value moved here\n@@ -31,19 +31,19 @@ LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n \n error[E0381]: assign to part of possibly-uninitialized variable: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:127:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:125:5\n    |\n LL |     s.x = 10;\n    |     ^^^^^^^^ use of possibly-uninitialized `s`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:134:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:132:5\n    |\n LL |     t.0 = 10;\n    |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n error[E0382]: assign to part of moved value: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:141:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:139:5\n    |\n LL |     let mut s: S<B> = S::new(); drop(s);\n    |         -----                        - value moved here\n@@ -53,7 +53,7 @@ LL |     s.x = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:148:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:146:5\n    |\n LL |     let mut t: T = (0, Box::new(0)); drop(t);\n    |         -----                             - value moved here\n@@ -63,31 +63,31 @@ LL |     t.0 = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n \n error[E0381]: assign to part of possibly-uninitialized variable: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:155:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:153:5\n    |\n LL |     s.x = 10;\n    |     ^^^^^^^^ use of possibly-uninitialized `s`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:162:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:160:5\n    |\n LL |     t.0 = 10;\n    |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:178:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:176:5\n    |\n LL |     q.r.f.x = 10; q.r.f.y = Box::new(20);\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:185:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:183:5\n    |\n LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:192:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:190:5\n    |\n LL |     let mut q: Q<S<B>> = Q::new(S::new()); drop(q.r);\n    |                                                 --- value moved here\n@@ -97,7 +97,7 @@ LL |     q.r.f.x = 10; q.r.f.y = Box::new(20);\n    = note: move occurs because `q.r` has type `R<S<std::boxed::Box<u32>>>`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:199:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:197:5\n    |\n LL |     let mut q: Q<T> = Q::new((0, Box::new(0))); drop(q.r);\n    |                                                      --- value moved here\n@@ -107,19 +107,19 @@ LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n    = note: move occurs because `q.r` has type `R<(u32, std::boxed::Box<u32>)>`, which does not implement the `Copy` trait\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:206:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:204:5\n    |\n LL |     q.r.f.x = 10;\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:213:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:211:5\n    |\n LL |     q.r.f.0 = 10;\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:220:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:218:5\n    |\n LL |     let mut q: Q<S<B>> = Q::new(S::new()); drop(q.r);\n    |                                                 --- value moved here\n@@ -129,7 +129,7 @@ LL |     q.r.f.x = 10;\n    = note: move occurs because `q.r` has type `R<S<std::boxed::Box<u32>>>`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:227:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:225:5\n    |\n LL |     let mut q: Q<T> = Q::new((0, Box::new(0))); drop(q.r);\n    |                                                      --- value moved here\n@@ -139,19 +139,19 @@ LL |     q.r.f.0 = 10;\n    = note: move occurs because `q.r` has type `R<(u32, std::boxed::Box<u32>)>`, which does not implement the `Copy` trait\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:234:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:232:5\n    |\n LL |     q.r.f.x = 10;\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:241:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:239:5\n    |\n LL |     q.r.f.0 = 10;\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0382]: assign to part of moved value: `c`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:259:13\n+  --> $DIR/issue-21232-partial-init-and-use.rs:257:13\n    |\n LL |     let mut c = (1, \"\".to_owned());\n    |         ----- move occurs because `c` has type `(i32, std::string::String)`, which does not implement the `Copy` trait\n@@ -162,7 +162,7 @@ LL |             c.0 = 2;\n    |             ^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `c`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:269:13\n+  --> $DIR/issue-21232-partial-init-and-use.rs:267:13\n    |\n LL |     let mut c = (1, (1, \"\".to_owned()));\n    |         ----- move occurs because `c` has type `(i32, (i32, std::string::String))`, which does not implement the `Copy` trait\n@@ -173,7 +173,7 @@ LL |             (c.1).0 = 2;\n    |             ^^^^^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `c.1`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:277:13\n+  --> $DIR/issue-21232-partial-init-and-use.rs:275:13\n    |\n LL |         c2 => {\n    |         -- value moved here"}, {"sha": "d2e9285fa4137bd4ae3669066dc1285830063528", "filename": "src/test/ui/nll/issue-48238.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-48238.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-48238.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48238.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,7 +1,5 @@\n // Regression test for issue #48238\n \n-#![feature(nll)]\n-\n fn use_val<'a>(val: &'a u8) -> &'a u8 {\n     val\n }"}, {"sha": "0aa1eedad9fd9f297f1ed413edc0f794b3af13b3", "filename": "src/test/ui/nll/issue-48238.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-48238.rs:11:13\n+  --> $DIR/issue-48238.rs:9:13\n    |\n LL |     move || use_val(&orig);\n    |     ------- ^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`"}, {"sha": "7ea1c445d143e3266dc544afaf3462915134927a", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -3,8 +3,6 @@\n // one of its fields, it is useful to be reminded of the significance\n // of the fact that the type implements Drop.\n \n-#![feature(nll)]\n-\n pub struct S<'a> { url: &'a mut String }\n \n impl<'a> Drop for S<'a> { fn drop(&mut self) { } }"}, {"sha": "1a1250ff9353f5ee28d53eefd8901d187ab27b9f", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:13:5\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:11:5\n    |\n LL | fn finish_1(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -9,7 +9,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:18:13\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:16:13\n    |\n LL | fn finish_2(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -19,7 +19,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:23:21\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:21:21\n    |\n LL | fn finish_3(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -29,7 +29,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0509]: cannot move out of type `S<'_>`, which implements the `Drop` trait\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:28:13\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:26:13\n    |\n LL |     let p = s.url; p\n    |             ^^^^^"}, {"sha": "e4ee6e913f6839fa26aeef24e01bcca55138568e", "filename": "src/test/ui/nll/issue-53040.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn main() {\n     let mut v: Vec<()> = Vec::new();\n     || &mut v;"}, {"sha": "7cba32c67432cc4cde4576a9614bab1a9cf37da2", "filename": "src/test/ui/nll/issue-53040.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-53040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-53040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53040.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-53040.rs:5:8\n+  --> $DIR/issue-53040.rs:3:8\n    |\n LL |     || &mut v;\n    |      - ^^^^^^ returns a reference to a captured variable which escapes the closure body"}, {"sha": "ed971b6ce0e1bece139e12acded8b1e20e7e87d5", "filename": "src/test/ui/nll/issue-53773.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-53773.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-53773.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53773.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Archive;\n struct ArchiveIterator<'a> {\n     x: &'a Archive,"}, {"sha": "45831460e5238e35b149d718352cfc74aeffd533", "filename": "src/test/ui/nll/issue-53773.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-53773.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-53773.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53773.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-53773.rs:43:22\n+  --> $DIR/issue-53773.rs:41:22\n    |\n LL |         members.push(child.raw);\n    |                      ^^^^^^^^^"}, {"sha": "c7f3e9d730367a3ba7b04d0388501c08b7f277da", "filename": "src/test/ui/nll/issue-57100.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-57100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-57100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57100.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,4 @@\n #![allow(unused)]\n-#![feature(nll)]\n \n // ignore-tidy-linelength\n "}, {"sha": "5f733c14036b00a3c02abd705360a14854ecf501", "filename": "src/test/ui/nll/issue-57100.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-57100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fissue-57100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57100.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `r.r2_union.f3_union` (via `r.r2_union.f3_union.s2_leaf.l1_u8`) as immutable because it is also borrowed as mutable (via `r.r2_union.f3_union.s1_leaf.l1_u8`)\n-  --> $DIR/issue-57100.rs:44:20\n+  --> $DIR/issue-57100.rs:43:20\n    |\n LL |         let mref = &mut r.r2_union.f3_union.s1_leaf.l1_u8;\n    |                    -------------------------------------- mutable borrow occurs here (via `r.r2_union.f3_union.s1_leaf.l1_u8`)\n@@ -13,7 +13,7 @@ LL |         println!(\"{} {}\", mref, nref)\n    = note: `r.r2_union.f3_union.s2_leaf.l1_u8` is a field of the union `Second`, so it overlaps the field `r.r2_union.f3_union.s1_leaf.l1_u8`\n \n error[E0502]: cannot borrow `r.r2_union` (via `r.r2_union.f1_leaf.l1_u8`) as immutable because it is also borrowed as mutable (via `r.r2_union.f2_leaf.l1_u8`)\n-  --> $DIR/issue-57100.rs:62:20\n+  --> $DIR/issue-57100.rs:61:20\n    |\n LL |         let mref = &mut r.r2_union.f2_leaf.l1_u8;\n    |                    ----------------------------- mutable borrow occurs here (via `r.r2_union.f2_leaf.l1_u8`)"}, {"sha": "87dba187ba2c2ed4ba4f343f3c4df8588306403b", "filename": "src/test/ui/nll/match-guards-always-borrow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // Here is arielb1's basic example from rust-lang/rust#27282\n // that AST borrowck is flummoxed by:\n "}, {"sha": "15f94043b430f2aa80405637d80eacc8a49a26e4", "filename": "src/test/ui/nll/match-guards-always-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/match-guards-always-borrow.rs:10:14\n+  --> $DIR/match-guards-always-borrow.rs:8:14\n    |\n LL |             (|| { let bar = foo; bar.take() })();\n    |              ^^             ---"}, {"sha": "aba0a7f71f5c1ff2505ecf54abd1cb0bdd6a2dae", "filename": "src/test/ui/nll/match-on-borrowed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -5,8 +5,6 @@\n // Test that we don't allow mutating the value being matched on in a way that\n // changes which patterns it matches, until we have chosen an arm.\n \n-#![feature(nll)]\n-\n struct A(i32, i32);\n \n fn struct_example(mut a: A) {"}, {"sha": "f9c9a84632212376d32108a57c1043bb134ec80c", "filename": "src/test/ui/nll/match-on-borrowed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b80ed99db8097d3d0e45d03561b81ede6b443b2/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr?ref=2b80ed99db8097d3d0e45d03561b81ede6b443b2", "patch": "@@ -1,5 +1,5 @@\n error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/match-on-borrowed.rs:51:9\n+  --> $DIR/match-on-borrowed.rs:49:9\n    |\n LL |         E::V(ref mut x, _) => x,\n    |              --------- borrow of `e.0` occurs here\n@@ -11,7 +11,7 @@ LL |     x;\n    |     - borrow later used here\n \n error[E0503]: cannot use `*f` because it was mutably borrowed\n-  --> $DIR/match-on-borrowed.rs:64:9\n+  --> $DIR/match-on-borrowed.rs:62:9\n    |\n LL |         E::V(ref mut x, _) => x,\n    |              --------- borrow of `f.0` occurs here\n@@ -23,7 +23,7 @@ LL |     x;\n    |     - borrow later used here\n \n error[E0503]: cannot use `t` because it was mutably borrowed\n-  --> $DIR/match-on-borrowed.rs:82:9\n+  --> $DIR/match-on-borrowed.rs:80:9\n    |\n LL |     let x = &mut t;\n    |             ------ borrow of `t` occurs here\n@@ -35,7 +35,7 @@ LL |     x;\n    |     - borrow later used here\n \n error[E0381]: use of possibly-uninitialized variable: `n`\n-  --> $DIR/match-on-borrowed.rs:92:11\n+  --> $DIR/match-on-borrowed.rs:90:11\n    |\n LL |     match n {}\n    |           ^ use of possibly-uninitialized `n`"}]}