{"sha": "f99f9e48ed77a99747c6d07b42fdfe500f1a7de0", "node_id": "C_kwDOAAsO6NoAKGY5OWY5ZTQ4ZWQ3N2E5OTc0N2M2ZDA3YjQyZmRmZTUwMGYxYTdkZTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T09:36:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T09:36:37Z"}, "message": "Auto merge of #98755 - nnethercote:faster-vec-insert, r=cuviper\n\nOptimize `Vec::insert` for the case where `index == len`.\n\nBy skipping the call to `copy` with a zero length. This makes it closer\nto `push`.\n\nI did this recently for `SmallVec`\n(https://github.com/servo/rust-smallvec/pull/282) and it was a big perf win in\none case. Although I don't have a specific use case in mind, it seems\nworth doing it for `Vec` as well.\n\nThings to note:\n- In the `index < len` case, the number of conditions checked is\n  unchanged.\n- In the `index == len` case, the number of conditions checked increases\n  by one, but the more expensive zero-length copy is avoided.\n- In the `index > len` case the code now reserves space for the extra\n  element before panicking. This seems like an unimportant change.\n\nr? `@cuviper`", "tree": {"sha": "049ae0507ab329ca285c127d1555c7d48d0b62bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/049ae0507ab329ca285c127d1555c7d48d0b62bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f99f9e48ed77a99747c6d07b42fdfe500f1a7de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f99f9e48ed77a99747c6d07b42fdfe500f1a7de0", "html_url": "https://github.com/rust-lang/rust/commit/f99f9e48ed77a99747c6d07b42fdfe500f1a7de0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f99f9e48ed77a99747c6d07b42fdfe500f1a7de0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada8c80bedb713b320af00aacab97d01d9cb5933", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada8c80bedb713b320af00aacab97d01d9cb5933", "html_url": "https://github.com/rust-lang/rust/commit/ada8c80bedb713b320af00aacab97d01d9cb5933"}, {"sha": "679c5ee244f997a563af45e335681e16fc089b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/679c5ee244f997a563af45e335681e16fc089b34", "html_url": "https://github.com/rust-lang/rust/commit/679c5ee244f997a563af45e335681e16fc089b34"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "fa9f2131c0c1d3e2db6896e9925677d1692507e2", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f99f9e48ed77a99747c6d07b42fdfe500f1a7de0/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99f9e48ed77a99747c6d07b42fdfe500f1a7de0/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=f99f9e48ed77a99747c6d07b42fdfe500f1a7de0", "patch": "@@ -1379,9 +1379,6 @@ impl<T, A: Allocator> Vec<T, A> {\n         }\n \n         let len = self.len();\n-        if index > len {\n-            assert_failed(index, len);\n-        }\n \n         // space for the new element\n         if len == self.buf.capacity() {\n@@ -1393,9 +1390,15 @@ impl<T, A: Allocator> Vec<T, A> {\n             // The spot to put the new value\n             {\n                 let p = self.as_mut_ptr().add(index);\n-                // Shift everything over to make space. (Duplicating the\n-                // `index`th element into two consecutive places.)\n-                ptr::copy(p, p.offset(1), len - index);\n+                if index < len {\n+                    // Shift everything over to make space. (Duplicating the\n+                    // `index`th element into two consecutive places.)\n+                    ptr::copy(p, p.offset(1), len - index);\n+                } else if index == len {\n+                    // No elements need shifting.\n+                } else {\n+                    assert_failed(index, len);\n+                }\n                 // Write it in, overwriting the first copy of the `index`th\n                 // element.\n                 ptr::write(p, element);"}]}