{"sha": "f6bbea0f08469fde3e7b9f1b7b4e81690a9482a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YmJlYTBmMDg0NjlmZGUzZTdiOWYxYjdiNGU4MTY5MGE5NDgyYTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T09:24:10Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T09:24:10Z"}, "message": "choose better function and argument names", "tree": {"sha": "40bc7e6776cda32518ce0bece7b07981f532488b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40bc7e6776cda32518ce0bece7b07981f532488b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6bbea0f08469fde3e7b9f1b7b4e81690a9482a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYCd66AAoJEFbW7qD8Z6xGiLkP/0gf24ZmtWFjrZVjcx8IwZjj\nmRy+DoHFgdLLqAlDQH6ZYKfu8bmut341tGljRZcygPLWBzQmDIVXqtsysFDqOcub\n5eOsQc+u+rJFydUohuzvS3VkopgbxJojag96wvB5IHHgHTrzqZqG5W5XaoBHOKsX\nfai4zm3Uy651ZmLE4XVVym//WHLy88iSzZJreIQ6uCjltMT+ggVFIWKSWCPT9NFD\nRgRm2AAvFnRvhWprZd+sNjUAlUElaVBvF3oSDQQXCuV6NiORX0P1/YtfqaFYIuwF\nevWMEBaxYAgGP6CH+csi/EFUlrLfvHwpq6ZlSP9J+ZJPEAH0VwqFnuzRz926X9gP\nohshW4OT1kiTbeI2fkhn01XaHZIt+AaNH98J8ijbTcdVdHPZj7THR3dWcKPuiTUU\npFzIpIdh4t160PqA1GYH/O+maDMXfXmg76xL5Pxh2xyLeGOjTo9z/cjxKr+hExCe\npnE54DXpvS4EryHsTsUHuO2/SqJv2xHT1jJCIwLZegfrurnQlqOvGIh7W9gULeL/\n//2/10sTMX2ryjxFgtuQ+VSoDfsP/NGIoKicJ/oWAPJL66EUm4ctc3hASYbrHCg8\nHnXEUof7r41ccgx4jObvWDxQIwvutqw3s65Bj9R8o8TMirDQEM1FKaVF/ok40w6B\nRw8gtzw0QPSeR0F0KJjL\n=O2N4\n-----END PGP SIGNATURE-----", "payload": "tree 40bc7e6776cda32518ce0bece7b07981f532488b\nparent 9e9586da9555d779be81bd27f2390dced5ff78f4\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477041850 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477041850 +0200\n\nchoose better function and argument names"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6bbea0f08469fde3e7b9f1b7b4e81690a9482a8", "html_url": "https://github.com/rust-lang/rust/commit/f6bbea0f08469fde3e7b9f1b7b4e81690a9482a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6bbea0f08469fde3e7b9f1b7b4e81690a9482a8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e9586da9555d779be81bd27f2390dced5ff78f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9586da9555d779be81bd27f2390dced5ff78f4", "html_url": "https://github.com/rust-lang/rust/commit/9e9586da9555d779be81bd27f2390dced5ff78f4"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "7069a72389ca4edffa662d2a7089a4fd0fc4b94d", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6bbea0f08469fde3e7b9f1b7b4e81690a9482a8/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bbea0f08469fde3e7b9f1b7b4e81690a9482a8/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=f6bbea0f08469fde3e7b9f1b7b4e81690a9482a8", "patch": "@@ -1241,7 +1241,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Lvalue::Static(cid) => {\n                 let dest = *self.statics.get_mut(&cid).expect(\"static should be cached\");\n                 assert!(dest.mutable);\n-                self.write_value_to_dest(\n+                self.write_value_possibly_by_val(\n                     src_val,\n                     |this, val| *this.statics.get_mut(&cid).expect(\"already checked\") = Constant { data: Some(val), ..dest },\n                     dest.data,\n@@ -1256,7 +1256,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             Lvalue::Local { frame, local } => {\n                 let dest = self.stack[frame].get_local(local);\n-                self.write_value_to_dest(\n+                self.write_value_possibly_by_val(\n                     src_val,\n                     |this, val| this.stack[frame].set_local(local, val),\n                     dest,\n@@ -1267,14 +1267,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     // The cases here can be a bit subtle. Read carefully!\n-    fn write_value_to_dest<F: FnOnce(&mut Self, Value)>(\n+    fn write_value_possibly_by_val<F: FnOnce(&mut Self, Value)>(\n         &mut self,\n         src_val: Value,\n         write_dest: F,\n-        dest_val: Option<Value>,\n+        old_dest_val: Option<Value>,\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, ()> {\n-        if let Some(Value::ByRef(dest_ptr)) = dest_val {\n+        if let Some(Value::ByRef(dest_ptr)) = old_dest_val {\n             // If the local value is already `ByRef` (that is, backed by an `Allocation`),\n             // then we must write the new value into this allocation, because there may be\n             // other pointers into the allocation. These other pointers are logically"}]}