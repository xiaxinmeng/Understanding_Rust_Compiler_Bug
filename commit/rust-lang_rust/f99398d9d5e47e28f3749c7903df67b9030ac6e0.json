{"sha": "f99398d9d5e47e28f3749c7903df67b9030ac6e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OTM5OGQ5ZDVlNDdlMjhmMzc0OWM3OTAzZGY2N2I5MDMwYWM2ZTA=", "commit": {"author": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2019-01-05T23:58:03Z"}, "committer": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2019-01-05T23:58:03Z"}, "message": "indent on typing dot. fixes #439", "tree": {"sha": "64168a90441da3d19ad725b1b80513deef5864f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64168a90441da3d19ad725b1b80513deef5864f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f99398d9d5e47e28f3749c7903df67b9030ac6e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f99398d9d5e47e28f3749c7903df67b9030ac6e0", "html_url": "https://github.com/rust-lang/rust/commit/f99398d9d5e47e28f3749c7903df67b9030ac6e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f99398d9d5e47e28f3749c7903df67b9030ac6e0/comments", "author": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e42a158787955ff9f2e81be43479dbe8f2b1bb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e42a158787955ff9f2e81be43479dbe8f2b1bb6", "html_url": "https://github.com/rust-lang/rust/commit/3e42a158787955ff9f2e81be43479dbe8f2b1bb6"}], "stats": {"total": 142, "additions": 103, "deletions": 39}, "files": [{"sha": "feed44b2dbf728c21c772c1d5178fd32ef626b51", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f99398d9d5e47e28f3749c7903df67b9030ac6e0/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99398d9d5e47e28f3749c7903df67b9030ac6e0/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=f99398d9d5e47e28f3749c7903df67b9030ac6e0", "patch": "@@ -12,41 +12,39 @@ macro_rules! ctry {\n     };\n }\n \n-mod db;\n-mod imp;\n mod completion;\n+mod db;\n mod goto_defenition;\n-mod symbol_index;\n+mod imp;\n pub mod mock_analysis;\n mod runnables;\n+mod symbol_index;\n \n mod extend_selection;\n-mod syntax_highlighting;\n mod hover;\n+mod syntax_highlighting;\n \n use std::{fmt, sync::Arc};\n \n-use rustc_hash::FxHashMap;\n-use ra_syntax::{SourceFileNode, TextRange, TextUnit, SmolStr, SyntaxKind};\n+use ra_syntax::{SmolStr, SourceFileNode, SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n+use rustc_hash::FxHashMap;\n use salsa::ParallelDatabase;\n \n-use crate::symbol_index::{SymbolIndex, FileSymbol};\n+use crate::symbol_index::{FileSymbol, SymbolIndex};\n \n pub use crate::{\n     completion::{CompletionItem, CompletionItemKind, InsertText},\n     runnables::{Runnable, RunnableKind},\n };\n-pub use ra_editor::{\n-    Fold, FoldKind, HighlightedRange, LineIndex, StructureNode, Severity\n-};\n pub use hir::FnSignatureInfo;\n+pub use ra_editor::{Fold, FoldKind, HighlightedRange, LineIndex, Severity, StructureNode};\n \n pub use ra_db::{\n-    Canceled, Cancelable, FilePosition, FileRange, LocalSyntaxPtr,\n-    CrateGraph, CrateId, SourceRootId, FileId, SyntaxDatabase, FilesDatabase\n+    Cancelable, Canceled, CrateGraph, CrateId, FileId, FilePosition, FileRange, FilesDatabase,\n+    LocalSyntaxPtr, SourceRootId, SyntaxDatabase,\n };\n \n #[derive(Default)]\n@@ -346,14 +344,20 @@ impl Analysis {\n         let edit = ra_editor::on_enter(&file, position.offset)?;\n         Some(SourceChange::from_local_edit(position.file_id, edit))\n     }\n-    /// Returns an edit which should be applied after `=` was typed. Primaraly,\n+    /// Returns an edit which should be applied after `=` was typed. Primarily,\n     /// this works when adding `let =`.\n     // FIXME: use a snippet completion instead of this hack here.\n     pub fn on_eq_typed(&self, position: FilePosition) -> Option<SourceChange> {\n         let file = self.db.source_file(position.file_id);\n         let edit = ra_editor::on_eq_typed(&file, position.offset)?;\n         Some(SourceChange::from_local_edit(position.file_id, edit))\n     }\n+    /// Returns an edit which should be applied when a dot ('.') is typed on a blank line, indenting the line appropriately.\n+    pub fn on_dot_typed(&self, position: FilePosition) -> Option<SourceChange> {\n+        let file = self.db.source_file(position.file_id);\n+        let edit = ra_editor::on_dot_typed(&file, position.offset)?;\n+        Some(SourceChange::from_local_edit(position.file_id, edit))\n+    }\n     /// Returns a tree representation of symbols in the file. Useful to draw a\n     /// file outline.\n     pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {"}, {"sha": "a3c85ed5dad58f53390f4afb321d5c413301e68a", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99398d9d5e47e28f3749c7903df67b9030ac6e0/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99398d9d5e47e28f3749c7903df67b9030ac6e0/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=f99398d9d5e47e28f3749c7903df67b9030ac6e0", "patch": "@@ -16,7 +16,7 @@ pub use self::{\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n     structure::{file_structure, StructureNode},\n-    typing::{join_lines, on_enter, on_eq_typed},\n+    typing::{join_lines, on_enter, on_dot_typed, on_eq_typed},\n     diagnostics::diagnostics\n };\n use ra_text_edit::TextEditBuilder;"}, {"sha": "aaea858ea5fb92a0e696056e30143d038a3cdcdb", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f99398d9d5e47e28f3749c7903df67b9030ac6e0/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99398d9d5e47e28f3749c7903df67b9030ac6e0/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=f99398d9d5e47e28f3749c7903df67b9030ac6e0", "patch": "@@ -1,5 +1,6 @@\n use std::mem;\n \n+use itertools::Itertools;\n use ra_syntax::{\n     algo::{find_covering_node, find_leaf_at_offset, LeafAtOffset},\n     ast,\n@@ -9,9 +10,8 @@ use ra_syntax::{\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n use ra_text_edit::text_utils::contains_offset_nonstrict;\n-use itertools::Itertools;\n \n-use crate::{find_node_at_offset, TextEditBuilder, LocalEdit};\n+use crate::{find_node_at_offset, LocalEdit, TextEditBuilder};\n \n pub fn join_lines(file: &SourceFileNode, range: TextRange) -> LocalEdit {\n     let range = if range.is_empty() {\n@@ -136,6 +136,27 @@ pub fn on_eq_typed(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit>\n     })\n }\n \n+pub fn on_dot_typed(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit> {\n+    let before_dot_offset = offset - TextUnit::of_char('.');\n+\n+    let whitespace = find_leaf_at_offset(file.syntax(), before_dot_offset)\n+        .left_biased()\n+        .and_then(ast::Whitespace::cast)?;\n+\n+    // whitespace found just left of the dot\n+    // TODO: indent is always 4 spaces now. A better heuristic could look on the previous line(s)\n+    let indent = \"    \".to_string();\n+\n+    let cursor_position = offset + TextUnit::of_str(&indent);;\n+    let mut edit = TextEditBuilder::default();\n+    edit.insert(before_dot_offset, indent);\n+    Some(LocalEdit {\n+        label: \"indent dot\".to_string(),\n+        edit: edit.finish(),\n+        cursor_position: Some(cursor_position),\n+    })\n+}\n+\n fn remove_newline(\n     edit: &mut TextEditBuilder,\n     node: SyntaxNodeRef,\n@@ -283,7 +304,9 @@ fn compute_ws(left: SyntaxNodeRef, right: SyntaxNodeRef) -> &'static str {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::test_utils::{add_cursor, check_action, extract_offset, extract_range, assert_eq_text};\n+    use crate::test_utils::{\n+        add_cursor, assert_eq_text, check_action, extract_offset, extract_range,\n+    };\n \n     fn check_join_lines(before: &str, after: &str) {\n         check_action(before, after, |file, offset| {\n@@ -614,6 +637,31 @@ fn foo() {\n         // \");\n     }\n \n+    #[test]\n+    fn test_on_dot_typed() {\n+        fn do_check(before: &str, after: &str) {\n+            let (offset, before) = extract_offset(before);\n+            let file = SourceFileNode::parse(&before);\n+            let result = on_dot_typed(&file, offset).unwrap();\n+            let actual = result.edit.apply(&before);\n+            assert_eq_text!(after, &actual);\n+        }\n+        do_check(\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+        .<|>\n+    }\n+\",\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+            .\n+    }\n+\",\n+        );\n+    }\n+\n     #[test]\n     fn test_on_enter() {\n         fn apply_on_enter(before: &str) -> Option<String> {"}, {"sha": "2ec9073e402e3e0d9600e983e19ee2a67eea891f", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f99398d9d5e47e28f3749c7903df67b9030ac6e0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99398d9d5e47e28f3749c7903df67b9030ac6e0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=f99398d9d5e47e28f3749c7903df67b9030ac6e0", "patch": "@@ -2,15 +2,16 @@ use std::collections::HashMap;\n \n use gen_lsp_server::ErrorCode;\n use languageserver_types::{\n-    CodeActionResponse, Command, Diagnostic,\n-    DiagnosticSeverity, DocumentSymbol, Documentation, FoldingRange, FoldingRangeKind,\n-    FoldingRangeParams, Location, MarkupContent, MarkupKind, MarkedString, Position,\n-    PrepareRenameResponse, RenameParams, SymbolInformation, TextDocumentIdentifier, TextEdit,\n-    Range, WorkspaceEdit, ParameterInformation, ParameterLabel, SignatureInformation, Hover,\n-    HoverContents, DocumentFormattingParams, DocumentHighlight,\n+    CodeActionResponse, Command, Diagnostic, DiagnosticSeverity, DocumentFormattingParams,\n+    DocumentHighlight, DocumentSymbol, Documentation, FoldingRange, FoldingRangeKind,\n+    FoldingRangeParams, Hover, HoverContents, Location, MarkedString, MarkupContent, MarkupKind,\n+    ParameterInformation, ParameterLabel, Position, PrepareRenameResponse, Range, RenameParams,\n+    SignatureInformation, SymbolInformation, TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n-use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FileRange, FilePosition, Severity};\n-use ra_syntax::{TextUnit, text_utils::intersect};\n+use ra_analysis::{\n+    FileId, FilePosition, FileRange, FoldKind, Query, RunnableKind, Severity, SourceChange,\n+};\n+use ra_syntax::{text_utils::intersect, TextUnit};\n use ra_text_edit::text_utils::contains_offset_nonstrict;\n use rustc_hash::FxHashMap;\n use serde_json::to_value;\n@@ -92,7 +93,7 @@ pub fn handle_on_type_formatting(\n     world: ServerWorld,\n     params: req::DocumentOnTypeFormattingParams,\n ) -> Result<Option<Vec<TextEdit>>> {\n-    if params.ch != \"=\" {\n+    if params.ch != \"=\" || params.ch != \".\" {\n         return Ok(None);\n     }\n \n@@ -102,19 +103,30 @@ pub fn handle_on_type_formatting(\n         file_id,\n         offset: params.position.conv_with(&line_index),\n     };\n-    let edits = match world.analysis().on_eq_typed(position) {\n-        None => return Ok(None),\n-        Some(mut action) => action\n-            .source_file_edits\n-            .pop()\n-            .unwrap()\n-            .edit\n-            .as_atoms()\n-            .iter()\n-            .map_conv_with(&line_index)\n-            .collect(),\n-    };\n-    Ok(Some(edits))\n+\n+    let analysis: Vec<Box<Fn(FilePosition) -> Option<SourceChange>>> = vec![\n+        Box::new(|pos| world.analysis().on_eq_typed(pos)),\n+        Box::new(|pos| world.analysis().on_dot_typed(pos)),\n+    ];\n+\n+    // try all analysis until one succeeds\n+    for ana in analysis {\n+        if let Some(mut action) = ana(position) {\n+            return Ok(Some(\n+                action\n+                    .source_file_edits\n+                    .pop()\n+                    .unwrap()\n+                    .edit\n+                    .as_atoms()\n+                    .iter()\n+                    .map_conv_with(&line_index)\n+                    .collect(),\n+            ));\n+        }\n+    }\n+\n+    return Ok(None);\n }\n \n pub fn handle_document_symbol("}]}