{"sha": "8ae66db798ae61342442eaafca8cd4dddab47a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZTY2ZGI3OThhZTYxMzQyNDQyZWFhZmNhOGNkNGRkZGFiNDdhOTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-05-09T15:45:16Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-05T16:08:18Z"}, "message": "Convert some of the tests to the new format", "tree": {"sha": "a9d4bd469895e34e6b868c6aa5af925854bc0eea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9d4bd469895e34e6b868c6aa5af925854bc0eea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ae66db798ae61342442eaafca8cd4dddab47a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae66db798ae61342442eaafca8cd4dddab47a91", "html_url": "https://github.com/rust-lang/rust/commit/8ae66db798ae61342442eaafca8cd4dddab47a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ae66db798ae61342442eaafca8cd4dddab47a91/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569792acbc6fccc13a7cb7377948912f6bba0aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/569792acbc6fccc13a7cb7377948912f6bba0aab", "html_url": "https://github.com/rust-lang/rust/commit/569792acbc6fccc13a7cb7377948912f6bba0aab"}], "stats": {"total": 146, "additions": 91, "deletions": 55}, "files": [{"sha": "9730fe473aa5d2194460977d8022ee5dc0883ee2", "filename": "tests/compile-fail/alignment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falignment.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -5,7 +5,8 @@ fn main() {\n     let x_ptr: *mut u8 = &mut x[0];\n     let y_ptr = x_ptr as *mut u64;\n     unsafe {\n-        *y_ptr = 42; //~ ERROR tried to access memory with alignment 1, but alignment\n+        *y_ptr = 42; //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to access memory with alignment 1, but alignment\n     }\n     panic!(\"unreachable in miri\");\n }"}, {"sha": "cf0632393ad6d803649f2236b7489d6bc152ac25", "filename": "tests/compile-fail/assume.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fassume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fassume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fassume.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -5,6 +5,7 @@ fn main() {\n     unsafe {\n         std::intrinsics::assume(x < 10);\n         std::intrinsics::assume(x > 1);\n-        std::intrinsics::assume(x > 42); //~ ERROR: `assume` argument was false\n+        std::intrinsics::assume(x > 42); //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE `assume` argument was false\n     }\n }"}, {"sha": "89f5e048a36d9fbe098bd769d6194ea71ba47e00", "filename": "tests/compile-fail/bitop-beyond-alignment.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -28,10 +28,11 @@ fn mk_rec() -> Rec {\n fn is_u64_aligned(u: &Tag<u64>) -> bool {\n     let p: usize = unsafe { mem::transmute(u) };\n     let u64_align = std::mem::align_of::<u64>();\n-    return (p & (u64_align + 1)) == 0; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n+    return (p & (u64_align + 1)) == 0; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n }\n \n pub fn main() {\n     let x = mk_rec();\n-    assert!(is_u64_aligned(&x.t));\n+    assert!(is_u64_aligned(&x.t)); //~ NOTE inside call to `is_u64_aligned\n }"}, {"sha": "39b53da0b75cde1d849468a4bbd3b60b4a4c21de", "filename": "tests/compile-fail/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -7,5 +7,6 @@ fn main() {\n         std::mem::transmute::<&usize, &fn(i32)>(&b)\n     };\n \n-    (*g)(42) //~ ERROR a memory access tried to interpret some bytes as a pointer\n+    (*g)(42) //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n }"}, {"sha": "19344b13ba7c9300eda6965e4b88a1939a883691", "filename": "tests/compile-fail/cast_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fcast_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fcast_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -5,5 +5,6 @@ fn main() {\n         std::mem::transmute::<fn(), fn(i32)>(f)\n     };\n \n-    g(42) //~ ERROR tried to call a function with sig fn() through a function pointer of type fn(i32)\n+    g(42) //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to call a function with sig fn() through a function pointer of type fn(i32)\n }"}, {"sha": "23868c0e57db419a06c40fa9b67d684892bb2cd5", "filename": "tests/compile-fail/cast_fn_ptr2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -5,5 +5,6 @@ fn main() {\n         std::mem::transmute::<fn((i32,i32)), fn(i32)>(f)\n     };\n \n-    g(42) //~ ERROR tried to call a function with sig fn((i32, i32)) through a function pointer of type fn(i32)\n+    g(42) //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to call a function with sig fn((i32, i32)) through a function pointer of type fn(i32)\n }"}, {"sha": "c7556ae06b93e08b563bced30e7fbf979c3e71b6", "filename": "tests/compile-fail/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -6,5 +6,6 @@ fn main() {\n         std::mem::transmute::<usize, fn(i32)>(42)\n     };\n \n-    g(42) //~ ERROR a memory access tried to interpret some bytes as a pointer\n+    g(42) //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n }"}, {"sha": "d952187eba45647de2b67e310660b9f0fa7604b7", "filename": "tests/compile-fail/ctlz_nonzero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fctlz_nonzero.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -10,6 +10,7 @@ pub fn main() {\n     unsafe {\n         use rusti::*;\n \n-        ctlz_nonzero(0u8); //~ ERROR: ctlz_nonzero called on 0\n+        ctlz_nonzero(0u8); //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE ctlz_nonzero called on 0\n     }\n }"}, {"sha": "b308484622bc4f30ebe3268fcf8c30c6e16a1ef6", "filename": "tests/compile-fail/cttz_nonzero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcttz_nonzero.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -10,6 +10,7 @@ pub fn main() {\n     unsafe {\n         use rusti::*;\n \n-        cttz_nonzero(0u8); //~ ERROR: cttz_nonzero called on 0\n+        cttz_nonzero(0u8); //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE cttz_nonzero called on 0\n     }\n }"}, {"sha": "d42c1d33b530a79b43842796a37bd75e8490ed8c", "filename": "tests/compile-fail/dangling_pointer_deref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -3,6 +3,7 @@ fn main() {\n         let b = Box::new(42);\n         &*b as *const i32\n     };\n-    let x = unsafe { *p }; //~ ERROR: dangling pointer was dereferenced\n+    let x = unsafe { *p }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE dangling pointer was dereferenced\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "a56df5bce408e81cfaa0bde60280f6411a26a066", "filename": "tests/compile-fail/deref_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef_fn_ptr.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -2,7 +2,8 @@ fn f() {}\n \n fn main() {\n     let x: i32 = unsafe {\n-        *std::mem::transmute::<fn(), *const i32>(f) //~ ERROR: tried to dereference a function pointer\n+        *std::mem::transmute::<fn(), *const i32>(f) //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to dereference a function pointer\n     };\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "c90ca8d15cceab36cf6ceabd7fa5ab581947c8b8", "filename": "tests/compile-fail/div-by-zero-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -11,5 +11,6 @@\n #![allow(const_err)]\n \n fn main() {\n-    let _n = 1 / 0; //~ ERROR: DivisionByZero\n+    let _n = 1 / 0; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempt to divide by zero\n }"}, {"sha": "014c551df0f13d91ff695cac5c984dbeedb8a85d", "filename": "tests/compile-fail/execute_memory.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexecute_memory.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -7,6 +7,7 @@ fn main() {\n     let x = box 42;\n     unsafe {\n         let f = std::mem::transmute::<Box<i32>, fn()>(x);\n-        f() //~ ERROR: tried to treat a memory pointer as a function pointer\n+        f() //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to treat a memory pointer as a function pointer\n     }\n }"}, {"sha": "20eb6573989c004defcd07c6056cf3a440cbe0d5", "filename": "tests/compile-fail/fn_ptr_offset.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffn_ptr_offset.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -10,5 +10,6 @@ fn main() {\n     let y : *mut u8 = unsafe { mem::transmute(x) };\n     let y = y.wrapping_offset(1);\n     let x : fn() = unsafe { mem::transmute(y) };\n-    x(); //~ ERROR: tried to use a function pointer after offsetting it\n+    x(); //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to use a function pointer after offsetting it\n }"}, {"sha": "07c407966a8fdf52a0c47abdffdadb1d0751569c", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n-    let b = unsafe { std::mem::transmute::<u8, bool>(2) }; //~ ERROR: invalid boolean value read\n-    if b { unreachable!() } else { unreachable!() }\n+    let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n+    if b { unreachable!() } else { unreachable!() } //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE invalid boolean value read\n }"}, {"sha": "69d7e3e427d4b6fae8816778f64b8e3c62721e2c", "filename": "tests/compile-fail/invalid_enum_discriminant.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -9,9 +9,10 @@ pub enum Foo {\n fn main() {\n     let f = unsafe { std::mem::transmute::<i32, Foo>(42) };\n     match f {\n-        Foo::A => {}, //~ ERROR invalid enum discriminant value read\n+        Foo::A => {},\n         Foo::B => {},\n         Foo::C => {},\n         Foo::D => {},\n     }\n-}\n+} //~ ERROR constant evaluation error [E0080]\n+//~^ NOTE entered unreachable code"}, {"sha": "06920fa0acf16647786fc4d82a7047a18d5c18e1", "filename": "tests/compile-fail/modifying_constants.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodifying_constants.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -1,6 +1,7 @@\n fn main() {\n     let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee\n     let y = unsafe { &mut *(x as *const i32 as *mut i32) };\n-    *y = 42; //~ ERROR tried to modify constant memory\n+    *y = 42;  //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to modify constant memory\n     assert_eq!(*x, 42);\n }"}, {"sha": "de8815ffd9c4ec2f49560e97981db1c4e4095168", "filename": "tests/compile-fail/never_say_never.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_say_never.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -7,7 +7,8 @@\n fn main() {\n     let y = &5;\n     let x: ! = unsafe {\n-        *(y as *const _ as *const !) //~ ERROR entered unreachable code\n+        *(y as *const _ as *const !)  //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE entered unreachable code\n     };\n     f(x)\n }"}, {"sha": "3924dc7371e7cc075774a4eb4c6264e6f5b3e716", "filename": "tests/compile-fail/never_transmute_humans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_humans.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-fail causes rustc ICE: rust-lang/rust#50570\n+// ignore-test causes rustc ICE: rust-lang/rust#50570\n // compile-flags: -Zmir-emit-validate=0\n \n #![feature(never_type)]"}, {"sha": "4f1499483eda24b9534e11211b70f45b5e612537", "filename": "tests/compile-fail/never_transmute_void.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_void.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -8,12 +8,13 @@\n enum Void {}\n \n fn f(v: Void) -> ! {\n-    match v {} //~ ERROR entered unreachable code\n+    match v {} //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE entered unreachable code\n }\n \n fn main() {\n     let v: Void = unsafe {\n         std::mem::transmute::<(), Void>(())\n     };\n-    f(v);\n+    f(v); //~ inside call to `f`\n }"}, {"sha": "70df937c4c7c5d9abc9090b47454506c16de78e4", "filename": "tests/compile-fail/null_pointer_deref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n-    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR: invalid use of NULL pointer\n+    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE invalid use of NULL pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "d4aebb912ee1707ef795f555cfa88497b1ff82e9", "filename": "tests/compile-fail/oom.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/569792acbc6fccc13a7cb7377948912f6bba0aab/tests%2Fcompile-fail%2Foom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569792acbc6fccc13a7cb7377948912f6bba0aab/tests%2Fcompile-fail%2Foom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foom.rs?ref=569792acbc6fccc13a7cb7377948912f6bba0aab", "patch": "@@ -1,7 +0,0 @@\n-#![feature(custom_attribute, attr_literals)]\n-#![miri(memory_size=4095)]\n-\n-fn main() {\n-    let _x = [42; 1024];\n-    //~^ERROR tried to allocate 4096 more bytes, but only\n-}"}, {"sha": "d8811e7abcd2555b8c0c1ea0138315acb30483f3", "filename": "tests/compile-fail/out_of_bounds_read.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR: which has size 2\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE which has size 2\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "54738cf81fbd8bd058587c39c1707c535796dd23", "filename": "tests/compile-fail/out_of_bounds_read2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR: memory access at offset 6, outside bounds of allocation\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE memory access at offset 6, outside bounds of allocation\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "e50e4250364995affbb90817bb6af060075bfb2d", "filename": "tests/compile-fail/overflowing-lsh-neg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -12,5 +12,6 @@\n #![allow(const_err)]\n \n fn main() {\n-    let _n = 2i64 << -1; //~ Overflow(Shl)\n+    let _n = 2i64 << -1; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempt to shift left with overflow\n }"}, {"sha": "c291815e2e79ab5f7447433711280b7f1987b66c", "filename": "tests/compile-fail/overflowing-rsh.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -11,5 +11,6 @@\n #![allow(exceeding_bitshifts)]\n \n fn main() {\n-    let _n = 1i64 >> 64; //~ Overflow(Shr)\n+    let _n = 1i64 >> 64; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempt to shift right with overflow\n }"}, {"sha": "fabbef5004d771a718b9dfe9fcd7f54b996ccc46", "filename": "tests/compile-fail/overwriting_part_of_relocation_makes_the_rest_undefined.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -6,6 +6,7 @@ fn main() {\n         // \"attempted to interpret some raw bytes as a pointer address\" instead of\n         // \"attempted to read undefined bytes\"\n     }\n-    let x = *p; //~ ERROR: attempted to read undefined bytes\n+    let x = *p; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempted to read undefined bytes\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "012af897e83703cb30afacb736e330257dd52dbf", "filename": "tests/compile-fail/pointer_byte_read_1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -3,5 +3,6 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const usize;\n     let ptr_bytes = unsafe { *z }; // the actual deref is fine, because we read the entire pointer at once\n-    let _ = ptr_bytes % 432; //~ ERROR: tried to access part of a pointer value as raw bytes\n+    let _ = ptr_bytes % 432; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access part of a pointer value as raw bytes\n }"}, {"sha": "4d25a36a3c883159452bb064053999770f4a013b", "filename": "tests/compile-fail/pointer_byte_read_2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -3,5 +3,6 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const u8;\n     // the deref fails, because we are reading only a part of the pointer\n-    let _ = unsafe { *z }; //~ ERROR: tried to access part of a pointer value as raw bytes\n+    let _ = unsafe { *z }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access part of a pointer value as raw bytes\n }"}, {"sha": "72ae1b123e8a266596c4d368c3459d51b401632f", "filename": "tests/compile-fail/pointers_to_different_allocations_are_unorderable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -1,7 +1,8 @@\n fn main() {\n     let x: *const u8 = &1;\n     let y: *const u8 = &2;\n-    if x < y { //~ ERROR: attempted to do invalid arithmetic on pointers\n+    if x < y { //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempted to do invalid arithmetic on pointers\n         unreachable!()\n     }\n }"}, {"sha": "52bcf24cf6b8fa78e954371b3607efcf6730f0eb", "filename": "tests/compile-fail/ptr_bitops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fptr_bitops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fptr_bitops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_bitops.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -2,6 +2,7 @@ fn main() {\n     let bytes = [0i8, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n     let one = bytes.as_ptr().wrapping_offset(1);\n     let three = bytes.as_ptr().wrapping_offset(3);\n-    let res = (one as usize) | (three as usize); //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n+    let res = (one as usize) | (three as usize); //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n     println!(\"{}\", res);\n }"}, {"sha": "56403d619ffadf38ae792b811fa5ad9d96231fd9", "filename": "tests/compile-fail/ptr_int_cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fptr_int_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fptr_int_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_int_cast.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -2,7 +2,8 @@ fn main() {\n     let x = &1;\n     // Casting down to u8 and back up to a pointer loses too much precision; this must not work.\n     let x = x as *const i32;\n-    let x = x as u8; //~ ERROR: a raw memory access tried to access part of a pointer value as raw bytes\n+    let x = x as u8; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n     let x = x as *const i32;\n     let _ = unsafe { *x };\n }"}, {"sha": "e44f26c4c4cfbb1c849dce1c92fbeb1d1a56463f", "filename": "tests/compile-fail/reading_half_a_pointer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freading_half_a_pointer.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -24,6 +24,7 @@ fn main() {\n     // starts 1 byte to the right, so using it would actually be wrong!\n     let d_alias = &mut w.data as *mut _ as *mut *const u8;\n     unsafe {\n-        let _x = *d_alias; //~ ERROR: tried to access part of a pointer value as raw bytes\n+        let _x = *d_alias; //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to access part of a pointer value as raw bytes\n     }\n }"}, {"sha": "d8234e933300b5dba91d91f0795101b5e0e45a43", "filename": "tests/compile-fail/reallocate-change-alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-change-alloc.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -9,6 +9,7 @@ fn main() {\n     unsafe {\n         let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n         let _y = Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n-        let _z = *(x as *mut u8); //~ ERROR: dangling pointer was dereferenced\n+        let _z = *(x as *mut u8); //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE dangling pointer was dereferenced\n     }\n }"}, {"sha": "16b452ca0e3c9c931e13d733d2160e2aeb5f6d08", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -15,5 +15,6 @@ fn main() {\n         y: 99,\n     };\n     let p = unsafe { &foo.x };\n-    let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+    let i = *p; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "6abe6de1fcf41ddc145cf0120b8546a6bad7562b", "filename": "tests/compile-fail/static_memory_modification2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -7,6 +7,7 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let s = \"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR: tried to modify constant memory\n+        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to modify constant memory\n     }\n }"}, {"sha": "0891756f0ec6141c99ee28e74fa6360af422ca3e", "filename": "tests/compile-fail/static_memory_modification3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -4,6 +4,7 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let bs = b\"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR: tried to modify constant memory\n+        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to modify constant memory\n     }\n }"}, {"sha": "6b4fe2273a080fd0aed3e78b6b25646736fa66d8", "filename": "tests/compile-fail/transmute-pair-undef.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -16,5 +16,6 @@ fn main() {\n         assert_eq!(byte, 0);\n     }\n     let v = unsafe { *z.offset(first_undef) };\n-    if v == 0 {} //~ ERROR attempted to read undefined bytes\n+    if v == 0 {} //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempted to read undefined bytes\n }"}, {"sha": "81d783807c586aa74fc3868a180a9ac8990562bf", "filename": "tests/compile-fail/transmute_fat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -10,5 +10,6 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<&[u8], u64>(&[1u8])\n     };\n-    let _ = bad + 1; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n+    let _ = bad + 1; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n }"}, {"sha": "96a713305e6bd92406b42db993f8d64b49fbb544", "filename": "tests/compile-fail/transmute_fat2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat2.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -7,5 +7,6 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<u64, &[u8]>(42)\n     };\n-    bad[0]; //~ ERROR index out of bounds: the len is 0 but the index is 0\n+    bad[0]; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE index out of bounds: the len is 0 but the index is 0\n }"}, {"sha": "cb9523395391fcef46a51240ec6cd85f9c44c831", "filename": "tests/compile-fail/unaligned_ptr_cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -2,5 +2,6 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const u32;\n     // This must fail because alignment is violated\n-    let _x = unsafe { *x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "dee2bbc9972f7f6b486af5936b7468d304b3376e", "filename": "tests/compile-fail/unaligned_ptr_cast2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -3,5 +3,6 @@ fn main() {\n     let x = x as *const _ as *const *const u8;\n     // This must fail because alignment is violated.  Test specifically for loading pointers, which have special code\n     // in miri's memory.\n-    let _x = unsafe { *x }; //~ ERROR: tried to access memory with alignment 2, but alignment\n+    let _x = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access memory with alignment 2, but alignment\n }"}, {"sha": "eba17ab6c6406b0a4728485492b15b2a95f394bf", "filename": "tests/compile-fail/unaligned_ptr_cast_zst.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -2,5 +2,6 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const [u32; 0];\n     // This must fail because alignment is violated.  Test specifically for loading ZST.\n-    let _x = unsafe { *x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "035d979c5b07eeef54fcf1e23de336182a7604cd", "filename": "tests/compile-fail/wild_pointer_deref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwild_pointer_deref.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     let p = 44 as *const i32;\n-    let x = unsafe { *p }; //~ ERROR: a memory access tried to interpret some bytes as a pointer\n+    let x = unsafe { *p }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "d6518a48aa828c44612b4a52d5b287dbb5d06ab1", "filename": "tests/compile-fail/zst.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae66db798ae61342442eaafca8cd4dddab47a91/tests%2Fcompile-fail%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst.rs?ref=8ae66db798ae61342442eaafca8cd4dddab47a91", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     let x = &() as *const () as *const i32;\n-    let _ = unsafe { *x }; //~ ERROR: tried to access memory with alignment 1, but alignment 4 is required\n+    let _ = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access memory with alignment 1, but alignment 4 is required\n }"}]}