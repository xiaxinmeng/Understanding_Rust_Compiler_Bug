{"sha": "b7e6537935d421afd7e02585aaa5cec92bee63b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZTY1Mzc5MzVkNDIxYWZkN2UwMjU4NWFhYTVjZWM5MmJlZTYzYjA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-08T22:07:04Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-08T22:07:04Z"}, "message": "Use RUSTC_BOOTSTRAP=1 instead of +nightly when discovering rust_cfgs throughs cargo", "tree": {"sha": "457d24df41b334116de8d9fad447e5b832477dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/457d24df41b334116de8d9fad447e5b832477dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e6537935d421afd7e02585aaa5cec92bee63b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e6537935d421afd7e02585aaa5cec92bee63b0", "html_url": "https://github.com/rust-lang/rust/commit/b7e6537935d421afd7e02585aaa5cec92bee63b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e6537935d421afd7e02585aaa5cec92bee63b0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8989fb8315538aece975663c3be4aba867e9ee86", "url": "https://api.github.com/repos/rust-lang/rust/commits/8989fb8315538aece975663c3be4aba867e9ee86", "html_url": "https://github.com/rust-lang/rust/commit/8989fb8315538aece975663c3be4aba867e9ee86"}], "stats": {"total": 75, "additions": 35, "deletions": 40}, "files": [{"sha": "b18699b7711bd1531f02add2751125aa0a337bc7", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7e6537935d421afd7e02585aaa5cec92bee63b0/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e6537935d421afd7e02585aaa5cec92bee63b0/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=b7e6537935d421afd7e02585aaa5cec92bee63b0", "patch": "@@ -375,14 +375,10 @@ fn rustc_discover_host_triple(cargo_toml: &AbsPath) -> Option<String> {\n \n fn cargo_config_build_target(cargo_toml: &AbsPath) -> Option<String> {\n     let mut cargo_config = Command::new(toolchain::cargo());\n-    cargo_config.current_dir(cargo_toml.parent().unwrap()).args(&[\n-        \"+nightly\",\n-        \"-Z\",\n-        \"unstable-options\",\n-        \"config\",\n-        \"get\",\n-        \"build.target\",\n-    ]);\n+    cargo_config\n+        .current_dir(cargo_toml.parent().unwrap())\n+        .args(&[\"-Z\", \"unstable-options\", \"config\", \"get\", \"build.target\"])\n+        .env(\"RUSTC_BOOTSTRAP\", \"1\");\n     // if successful we receive `build.target = \"target-triple\"`\n     log::debug!(\"Discovering cargo config target by {:?}\", cargo_config);\n     match utf8_stdout(cargo_config) {"}, {"sha": "012eab256ab4b76fa81a09d222033f7b8d572733", "filename": "crates/project_model/src/rustc_cfg.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b7e6537935d421afd7e02585aaa5cec92bee63b0/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e6537935d421afd7e02585aaa5cec92bee63b0/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs?ref=b7e6537935d421afd7e02585aaa5cec92bee63b0", "patch": "@@ -2,6 +2,7 @@\n \n use std::process::Command;\n \n+use anyhow::Result;\n use paths::AbsPath;\n \n use crate::{cfg_flag::CfgFlag, utf8_stdout};\n@@ -18,41 +19,39 @@ pub(crate) fn get(cargo_toml: Option<&AbsPath>, target: Option<&str>) -> Vec<Cfg\n         }\n     }\n \n-    let rustc_cfgs = {\n-        cargo_toml\n-            .and_then(|cargo_toml| {\n-                let mut cargo_config = Command::new(toolchain::cargo());\n-                cargo_config.current_dir(cargo_toml.parent().unwrap()).args(&[\n-                    \"+nightly\",\n-                    \"-Z\",\n-                    \"unstable-options\",\n-                    \"rustc\",\n-                    \"--print\",\n-                    \"cfg\",\n-                ]);\n-                if let Some(target) = target {\n-                    cargo_config.args(&[\"--target\", target]);\n-                }\n-                utf8_stdout(cargo_config).ok()\n-            })\n-            .map_or_else(\n-                || {\n-                    // using unstable cargo features failed, fall back to using plain rustc\n-                    let mut cmd = Command::new(toolchain::rustc());\n-                    cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n-                    if let Some(target) = target {\n-                        cmd.args(&[\"--target\", target]);\n-                    }\n-                    utf8_stdout(cmd)\n-                },\n-                Ok,\n-            )\n-    };\n-\n-    match rustc_cfgs {\n+    match get_rust_cfgs(cargo_toml, target) {\n         Ok(rustc_cfgs) => res.extend(rustc_cfgs.lines().map(|it| it.parse().unwrap())),\n         Err(e) => log::error!(\"failed to get rustc cfgs: {:#}\", e),\n     }\n \n     res\n }\n+\n+fn get_rust_cfgs(cargo_toml: Option<&AbsPath>, target: Option<&str>) -> Result<String> {\n+    let cargo_rust_cfgs = match cargo_toml {\n+        Some(cargo_toml) => {\n+            let mut cargo_config = Command::new(toolchain::cargo());\n+            cargo_config\n+                .current_dir(cargo_toml.parent().unwrap())\n+                .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"cfg\"])\n+                .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+            if let Some(target) = target {\n+                cargo_config.args(&[\"--target\", target]);\n+            }\n+            utf8_stdout(cargo_config).ok()\n+        }\n+        None => None,\n+    };\n+    match cargo_rust_cfgs {\n+        Some(stdout) => Ok(stdout),\n+        None => {\n+            // using unstable cargo features failed, fall back to using plain rustc\n+            let mut cmd = Command::new(toolchain::rustc());\n+            cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n+            if let Some(target) = target {\n+                cmd.args(&[\"--target\", target]);\n+            }\n+            utf8_stdout(cmd)\n+        }\n+    }\n+}"}]}