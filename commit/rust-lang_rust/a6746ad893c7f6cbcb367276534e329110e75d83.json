{"sha": "a6746ad893c7f6cbcb367276534e329110e75d83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NzQ2YWQ4OTNjN2Y2Y2JjYjM2NzI3NjUzNGUzMjkxMTBlNzVkODM=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-09-03T01:58:41Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-09-03T01:58:41Z"}, "message": "Add comment", "tree": {"sha": "c5a584cada3f9fdc59bb845a11ea0d355bffad05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5a584cada3f9fdc59bb845a11ea0d355bffad05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6746ad893c7f6cbcb367276534e329110e75d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6746ad893c7f6cbcb367276534e329110e75d83", "html_url": "https://github.com/rust-lang/rust/commit/a6746ad893c7f6cbcb367276534e329110e75d83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6746ad893c7f6cbcb367276534e329110e75d83/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "html_url": "https://github.com/rust-lang/rust/commit/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "39af9d3143aaffeacbeeca5e2e602553ac695780", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6746ad893c7f6cbcb367276534e329110e75d83/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6746ad893c7f6cbcb367276534e329110e75d83/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=a6746ad893c7f6cbcb367276534e329110e75d83", "patch": "@@ -401,6 +401,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some(errno_place) = this.active_thread_ref().last_error {\n             Ok(errno_place)\n         } else {\n+            // Allocate new place, set initial value to 0.\n             let errno_layout = this.machine.layouts.u32;\n             let errno_place = this.allocate(errno_layout, MiriMemoryKind::Machine.into());\n             this.write_scalar(Scalar::from_u32(0), errno_place.into())?;"}]}