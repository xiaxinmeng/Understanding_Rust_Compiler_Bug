{"sha": "17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZGFmMWY5YmY0ZTc4YzlmM2VkOGJlMjRlZjRiYzE1ZDYwYzc0NGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-10T21:47:28Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-10T21:48:24Z"}, "message": "rustc: Cache intermediate results of metadata.Encode.ty_str. Shaves 30% off translation time.", "tree": {"sha": "ec00fbd2224c19c7009dae0fbc555d50ca8a368e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec00fbd2224c19c7009dae0fbc555d50ca8a368e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e", "html_url": "https://github.com/rust-lang/rust/commit/17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bec4c8193bc6d6d8ea798bab01c30b46dc8163c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bec4c8193bc6d6d8ea798bab01c30b46dc8163c", "html_url": "https://github.com/rust-lang/rust/commit/3bec4c8193bc6d6d8ea798bab01c30b46dc8163c"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "dfc441a92fd49a58aa86a22b368ad92215e349fa", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e", "patch": "@@ -82,7 +82,19 @@ mod Encode {\n \n     fn enc_ty(&IO.writer w, &@ctxt cx, &ty.t t) {\n         alt (cx.abbrevs) {\n-            case (ac_no_abbrevs) { enc_sty(w, cx, ty.struct(cx.tcx, t)); }\n+            case (ac_no_abbrevs) {\n+                auto result_str;\n+                alt (cx.tcx.short_names_cache.find(t)) {\n+                    case (some[str](?s)) { result_str = s; }\n+                    case (none[str]) {\n+                        auto sw = IO.string_writer();\n+                        enc_sty(sw.get_writer(), cx, ty.struct(cx.tcx, t));\n+                        result_str = sw.get_str();\n+                        cx.tcx.short_names_cache.insert(t, result_str);\n+                    }\n+                }\n+                w.write_str(result_str);\n+            }\n             case (ac_use_abbrevs(?abbrevs)) {\n                 alt (abbrevs.find(t)) {\n                     case (some[ty_abbrev](?a)) {"}, {"sha": "31a7361e20034c19740a0e21a70df5e602fd0f48", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e", "patch": "@@ -113,6 +113,7 @@ state type crate_ctxt = rec(session.session sess,\n                             std.SHA1.sha1 sha,\n                             hashmap[ty.t, str] type_sha1s,\n                             hashmap[ty.t, metadata.ty_abbrev] type_abbrevs,\n+                            hashmap[ty.t, str] type_short_names,\n                             ty.ctxt tcx,\n                             @upcall.upcalls upcalls);\n \n@@ -192,6 +193,7 @@ fn get_type_sha1(@crate_ctxt ccx, ty.t t) -> str {\n             // NB: do *not* use abbrevs here as we want the symbol names\n             // to be independent of one another in the crate.\n             auto cx = @rec(ds=f, tcx=ccx.tcx, abbrevs=metadata.ac_no_abbrevs);\n+\n             ccx.sha.input_str(metadata.Encode.ty_str(cx, t));\n             hash = Str.substr(ccx.sha.result_str(), 0u, 16u);\n             ccx.type_sha1s.insert(t, hash);\n@@ -7694,6 +7696,7 @@ fn trans_crate(session.session sess, @ast.crate crate, ty.ctxt tcx,\n     auto lltypes = Map.mk_hashmap[ty.t,TypeRef](hasher, eqer);\n     auto sha1s = Map.mk_hashmap[ty.t,str](hasher, eqer);\n     auto abbrevs = Map.mk_hashmap[ty.t,metadata.ty_abbrev](hasher, eqer);\n+    auto short_names = Map.mk_hashmap[ty.t,str](hasher, eqer);\n \n     auto ccx = @rec(sess = sess,\n                     llmod = llmod,\n@@ -7721,6 +7724,7 @@ fn trans_crate(session.session sess, @ast.crate crate, ty.ctxt tcx,\n                     sha = std.SHA1.mk_sha1(),\n                     type_sha1s = sha1s,\n                     type_abbrevs = abbrevs,\n+                    type_short_names = short_names,\n                     tcx = tcx,\n                     upcalls = upcall.declare_upcalls(tn, llmod));\n     auto cx = new_local_ctxt(ccx);"}, {"sha": "797b1ee0bd60b6773b715ea4b3d2c35a6246b500", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=17daf1f9bf4e78c9f3ed8be24ef4bc15d60c744e", "patch": "@@ -55,7 +55,8 @@ type mt = rec(t ty, ast.mutability mut);\n type creader_cache = hashmap[tup(int,uint,uint),ty.t];\n type ctxt = rec(@type_store ts,\n                 session.session sess,\n-                creader_cache rcache);\n+                creader_cache rcache,\n+                hashmap[t,str] short_names_cache);\n type ty_ctxt = ctxt;    // Needed for disambiguation from Unify.ctxt.\n \n // Convert from method type to function type.  Pretty easy; we just drop\n@@ -227,7 +228,9 @@ fn mk_rcache() -> creader_cache {\n fn mk_ctxt(session.session s) -> ctxt {\n     ret rec(ts = mk_type_store(),\n             sess = s,\n-            rcache = mk_rcache());\n+            rcache = mk_rcache(),\n+            short_names_cache =\n+                Map.mk_hashmap[ty.t,str](ty.hash_ty, ty.eq_ty));\n }\n // Type constructors\n "}]}