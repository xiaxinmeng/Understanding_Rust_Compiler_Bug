{"sha": "66613e26b95438c02e2f5c273c557515454121f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NjEzZTI2Yjk1NDM4YzAyZTJmNWMyNzNjNTU3NTE1NDU0MTIxZjc=", "commit": {"author": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-02-18T18:06:21Z"}, "committer": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-02-18T19:01:47Z"}, "message": "make FromIterator use IntoIterator\n\nThis breaks all implementors of FromIterator, as they must now accept IntoIterator instead of Iterator. The fix for this is generally trivial (change the bound, and maybe call into_iter() on the argument to get the old argument).\n\nUsers of FromIterator should be unaffected because Iterators are IntoIterator.\n\n[breaking-change]", "tree": {"sha": "ed2b84cfeb042660366256e38010adb0eb5bc272", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed2b84cfeb042660366256e38010adb0eb5bc272"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66613e26b95438c02e2f5c273c557515454121f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66613e26b95438c02e2f5c273c557515454121f7", "html_url": "https://github.com/rust-lang/rust/commit/66613e26b95438c02e2f5c273c557515454121f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66613e26b95438c02e2f5c273c557515454121f7/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "html_url": "https://github.com/rust-lang/rust/commit/4a9d190423f67a00053f4b5c9869f0ccbdfcc689"}], "stats": {"total": 91, "additions": 48, "deletions": 43}, "files": [{"sha": "9f549fd7237711dce941f7ef0d37e0eec9e8db73", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -650,8 +650,8 @@ impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n-    fn from_iter<Iter: Iterator<Item=T>>(iter: Iter) -> BinaryHeap<T> {\n-        BinaryHeap::from_vec(iter.collect())\n+    fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> BinaryHeap<T> {\n+        BinaryHeap::from_vec(iter.into_iter().collect())\n     }\n }\n "}, {"sha": "f4b65aab38b65658333d748c93b5ee2d25ffb8eb", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -924,9 +924,9 @@ impl Default for BitVec {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromIterator<bool> for BitVec {\n-    fn from_iter<I:Iterator<Item=bool>>(iterator: I) -> BitVec {\n-        let mut ret = BitVec::new();\n-        ret.extend(iterator);\n+    fn from_iter<I: IntoIterator<Item=bool>>(iter: I) -> BitVec {\n+        let mut ret = Bitv::new();\n+        ret.extend(iter);\n         ret\n     }\n }\n@@ -1134,9 +1134,9 @@ impl Default for BitSet {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromIterator<usize> for BitSet {\n-    fn from_iter<I:Iterator<Item=usize>>(iterator: I) -> BitSet {\n-        let mut ret = BitSet::new();\n-        ret.extend(iterator);\n+    fn from_iter<I: IntoIterator<Item=usize>>(iter: I) -> BitSet {\n+        let mut ret = BitvSet::new();\n+        ret.extend(iter);\n         ret\n     }\n }"}, {"sha": "262084d5a91227346b50a7f8b94d32c528fa0202", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -826,7 +826,7 @@ mod stack {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n-    fn from_iter<T: Iterator<Item=(K, V)>>(iter: T) -> BTreeMap<K, V> {\n+    fn from_iter<T: IntoIterator<Item=(K, V)>>(iter: T) -> BTreeMap<K, V> {\n         let mut map = BTreeMap::new();\n         map.extend(iter);\n         map"}, {"sha": "614971866231480fcfdbbbd6a642a90a16a9758e", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -473,7 +473,7 @@ impl<T: Ord> BTreeSet<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n-    fn from_iter<Iter: Iterator<Item=T>>(iter: Iter) -> BTreeSet<T> {\n+    fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> BTreeSet<T> {\n         let mut set = BTreeSet::new();\n         set.extend(iter);\n         set"}, {"sha": "140c9edb5a3a7f5c34c292d0f6659d990597d574", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -250,9 +250,9 @@ impl<E:CLike> Iterator for Iter<E> {\n }\n \n impl<E:CLike> FromIterator<E> for EnumSet<E> {\n-    fn from_iter<I:Iterator<Item=E>>(iterator: I) -> EnumSet<E> {\n+    fn from_iter<I: IntoIterator<Item=E>>(iter: I) -> EnumSet<E> {\n         let mut ret = EnumSet::new();\n-        ret.extend(iterator);\n+        ret.extend(iter);\n         ret\n     }\n }"}, {"sha": "bd8f508b70fabcc526505df7299d4791c24aed17", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -834,9 +834,9 @@ impl<A> DoubleEndedIterator for IntoIter<A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> FromIterator<A> for LinkedList<A> {\n-    fn from_iter<T: Iterator<Item=A>>(iterator: T) -> LinkedList<A> {\n-        let mut ret = LinkedList::new();\n-        ret.extend(iterator);\n+    fn from_iter<T: IntoIterator<Item=A>>(iter: T) -> LinkedList<A> {\n+        let mut ret = DList::new();\n+        ret.extend(iter);\n         ret\n     }\n }"}, {"sha": "627c357d8b3f833b94c3de5b9dd5f8d877d16599", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -709,18 +709,18 @@ impl Error for FromUtf16Error {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromIterator<char> for String {\n-    fn from_iter<I:Iterator<Item=char>>(iterator: I) -> String {\n+    fn from_iter<I: IntoIterator<Item=char>>(iter: I) -> String {\n         let mut buf = String::new();\n-        buf.extend(iterator);\n+        buf.extend(iter);\n         buf\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> FromIterator<&'a str> for String {\n-    fn from_iter<I:Iterator<Item=&'a str>>(iterator: I) -> String {\n+    fn from_iter<I: IntoIterator<Item=&'a str>>(iter: I) -> String {\n         let mut buf = String::new();\n-        buf.extend(iterator);\n+        buf.extend(iter);\n         buf\n     }\n }"}, {"sha": "dd10a7582fb8997262b168fbbc4e2cd131b77ded", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -1407,7 +1407,8 @@ impl<T> ops::DerefMut for Vec<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n-    fn from_iter<I:Iterator<Item=T>>(mut iterator: I) -> Vec<T> {\n+    fn from_iter<I: IntoIterator<Item=T>>(iterable: I) -> Vec<T> {\n+        let mut iterator = iterable.into_iter();\n         let (lower, _) = iterator.size_hint();\n         let mut vector = Vec::with_capacity(lower);\n \n@@ -1651,7 +1652,7 @@ pub type CowVec<'a, T> = Cow<'a, Vec<T>, [T]>;\n \n #[unstable(feature = \"collections\")]\n impl<'a, T> FromIterator<T> for CowVec<'a, T> where T: Clone {\n-    fn from_iter<I: Iterator<Item=T>>(it: I) -> CowVec<'a, T> {\n+    fn from_iter<I: IntoIterator<Item=T>>(it: I) -> CowVec<'a, T> {\n         Cow::Owned(FromIterator::from_iter(it))\n     }\n }"}, {"sha": "c281d5de0272383e46b6c60b79f6662020a81416", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -1701,7 +1701,8 @@ impl<A> IndexMut<usize> for VecDeque<A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> FromIterator<A> for VecDeque<A> {\n-    fn from_iter<T: Iterator<Item=A>>(iterator: T) -> VecDeque<A> {\n+    fn from_iter<T: IntoIterator<Item=A>>(iterable: T) -> VecDeque<A> {\n+        let iterator = iterable.into_iter();\n         let (lower, _) = iterator.size_hint();\n         let mut deq = VecDeque::with_capacity(lower);\n         deq.extend(iterator);"}, {"sha": "4431bfddbd74cb81187c2fb41d0e7a7b5c2ec8ba", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -661,7 +661,7 @@ impl<V: fmt::Debug> fmt::Debug for VecMap<V> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<V> FromIterator<(usize, V)> for VecMap<V> {\n-    fn from_iter<Iter: Iterator<Item=(usize, V)>>(iter: Iter) -> VecMap<V> {\n+    fn from_iter<I: IntoIterator<Item=(usize, V)>>(iter: I) -> VecMap<V> {\n         let mut map = VecMap::new();\n         map.extend(iter);\n         map"}, {"sha": "355bf3a28cbac24615b9ca0882c38bb18cfeaee8", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -113,9 +113,9 @@ impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n #[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be \\\n                           built from an iterator over elements of type `{A}`\"]\n pub trait FromIterator<A> {\n-    /// Build a container with elements from an external iterator.\n+    /// Build a container with elements from something iterable.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from_iter<T: Iterator<Item=A>>(iterator: T) -> Self;\n+    fn from_iter<T: IntoIterator<Item=A>>(iterator: T) -> Self;\n }\n \n /// Conversion into an `Iterator`"}, {"sha": "abfef72a5dbc33b735a67416a191f2e1b093600c", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -149,7 +149,7 @@ use clone::Clone;\n use cmp::{Eq, Ord};\n use default::Default;\n use iter::{ExactSizeIterator};\n-use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator};\n+use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, IntoIterator};\n use mem;\n use ops::{Deref, FnOnce};\n use result::Result::{Ok, Err};\n@@ -909,7 +909,7 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from_iter<I: Iterator<Item=Option<A>>>(iter: I) -> Option<V> {\n+    fn from_iter<I: IntoIterator<Item=Option<A>>>(iter: I) -> Option<V> {\n         // FIXME(#11084): This could be replaced with Iterator::scan when this\n         // performance bug is closed.\n \n@@ -934,7 +934,7 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n             }\n         }\n \n-        let mut adapter = Adapter { iter: iter, found_none: false };\n+        let mut adapter = Adapter { iter: iter.into_iter(), found_none: false };\n         let v: V = FromIterator::from_iter(adapter.by_ref());\n \n         if adapter.found_none {"}, {"sha": "23e936a75d7097e04f972a3da25796a285090711", "filename": "src/libcore/result.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -230,7 +230,8 @@ use self::Result::{Ok, Err};\n \n use clone::Clone;\n use fmt;\n-use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n+use iter::{Iterator, IteratorExt, DoubleEndedIterator,\n+           FromIterator, ExactSizeIterator, IntoIterator};\n use ops::{FnMut, FnOnce};\n use option::Option::{self, None, Some};\n use slice::AsSlice;\n@@ -906,7 +907,7 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n     /// assert!(res == Ok(vec!(2, 3)));\n     /// ```\n     #[inline]\n-    fn from_iter<I: Iterator<Item=Result<A, E>>>(iter: I) -> Result<V, E> {\n+    fn from_iter<I: IntoIterator<Item=Result<A, E>>>(iter: I) -> Result<V, E> {\n         // FIXME(#11084): This could be replaced with Iterator::scan when this\n         // performance bug is closed.\n \n@@ -931,7 +932,7 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n             }\n         }\n \n-        let mut adapter = Adapter { iter: iter, err: None };\n+        let mut adapter = Adapter { iter: iter.into_iter(), err: None };\n         let v: V = FromIterator::from_iter(adapter.by_ref());\n \n         match adapter.err {"}, {"sha": "3b29c43ce8cedf1613bb1ad3945a0d20c9e177eb", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -25,7 +25,7 @@ use middle::ty::*;\n use middle::ty;\n use std::cmp::Ordering;\n use std::fmt;\n-use std::iter::{range_inclusive, AdditiveIterator, FromIterator, repeat};\n+use std::iter::{range_inclusive, AdditiveIterator, FromIterator, IntoIterator, repeat};\n use std::num::Float;\n use std::slice;\n use syntax::ast::{self, DUMMY_NODE_ID, NodeId, Pat};\n@@ -94,8 +94,8 @@ impl<'a> fmt::Debug for Matrix<'a> {\n }\n \n impl<'a> FromIterator<Vec<&'a Pat>> for Matrix<'a> {\n-    fn from_iter<T: Iterator<Item=Vec<&'a Pat>>>(iterator: T) -> Matrix<'a> {\n-        Matrix(iterator.collect())\n+    fn from_iter<T: IntoIterator<Item=Vec<&'a Pat>>>(iter: T) -> Matrix<'a> {\n+        Matrix(iter.into_iter().collect())\n     }\n }\n "}, {"sha": "0ce5b164ca13b3b4fe334cf212690ce736d40dd0", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -1555,7 +1555,8 @@ impl<K, V, S, H> FromIterator<(K, V)> for HashMap<K, V, S>\n           S: HashState<Hasher=H> + Default,\n           H: hash::Hasher<Output=u64>\n {\n-    fn from_iter<T: Iterator<Item=(K, V)>>(iter: T) -> HashMap<K, V, S> {\n+    fn from_iter<T: IntoIterator<Item=(K, V)>>(iterable: T) -> HashMap<K, V, S> {\n+        let iter = iterable.into_iter();\n         let lower = iter.size_hint().0;\n         let mut map = HashMap::with_capacity_and_hash_state(lower,\n                                                             Default::default());"}, {"sha": "593248fd5c6029162bf9b9847f9ecb3d984d1487", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -622,7 +622,8 @@ impl<T, S, H> FromIterator<T> for HashSet<T, S>\n           S: HashState<Hasher=H> + Default,\n           H: hash::Hasher<Output=u64>\n {\n-    fn from_iter<I: Iterator<Item=T>>(iter: I) -> HashSet<T, S> {\n+    fn from_iter<I: IntoIterator<Item=T>>(iterable: I) -> HashSet<T, S> {\n+        let iter = iterable.into_iter();\n         let lower = iter.size_hint().0;\n         let mut set = HashSet::with_capacity_and_hash_state(lower, Default::default());\n         set.extend(iter);"}, {"sha": "2ad07462f20f71033973708f600787e713e2e746", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -953,7 +953,7 @@ impl PathBuf {\n }\n \n impl<'a, P: ?Sized + 'a> iter::FromIterator<&'a P> for PathBuf where P: AsPath {\n-    fn from_iter<I: Iterator<Item = &'a P>>(iter: I) -> PathBuf {\n+    fn from_iter<I: IntoIterator<Item = &'a P>>(iter: I) -> PathBuf {\n         let mut buf = PathBuf::new(\"\");\n         buf.extend(iter);\n         buf"}, {"sha": "da5ab8e434a7bf6516bbe150aaa8b32e00573177", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -356,9 +356,9 @@ impl Wtf8Buf {\n /// This replaces surrogate code point pairs with supplementary code points,\n /// like concatenating ill-formed UTF-16 strings effectively would.\n impl FromIterator<CodePoint> for Wtf8Buf {\n-    fn from_iter<T: Iterator<Item=CodePoint>>(iterator: T) -> Wtf8Buf {\n+    fn from_iter<T: IntoIterator<Item=CodePoint>>(iter: T) -> Wtf8Buf {\n         let mut string = Wtf8Buf::new();\n-        string.extend(iterator);\n+        string.extend(iter);\n         string\n     }\n }"}, {"sha": "f5201d4a8bc68f73ea9f46c07e6bca61330a561e", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -10,7 +10,7 @@\n \n use std::default::Default;\n use std::fmt;\n-use std::iter::FromIterator;\n+use std::iter::{IntoIterator, FromIterator};\n use std::ops::Deref;\n use std::vec;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n@@ -77,8 +77,8 @@ impl<T: Clone> Clone for OwnedSlice<T> {\n }\n \n impl<T> FromIterator<T> for OwnedSlice<T> {\n-    fn from_iter<I: Iterator<Item=T>>(iter: I) -> OwnedSlice<T> {\n-        OwnedSlice::from_vec(iter.collect())\n+    fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> OwnedSlice<T> {\n+        OwnedSlice::from_vec(iter.into_iter().collect())\n     }\n }\n "}, {"sha": "0a39d3809045a2e56f745255e6b204bc5d43f8d0", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66613e26b95438c02e2f5c273c557515454121f7/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=66613e26b95438c02e2f5c273c557515454121f7", "patch": "@@ -30,7 +30,7 @@ enum SmallVectorRepr<T> {\n }\n \n impl<T> FromIterator<T> for SmallVector<T> {\n-    fn from_iter<I: Iterator<Item=T>>(iter: I) -> SmallVector<T> {\n+    fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> SmallVector<T> {\n         let mut v = SmallVector::zero();\n         v.extend(iter);\n         v"}]}