{"sha": "b4db387a6c886d4242a94d997c48967abd63314c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZGIzODdhNmM4ODZkNDI0MmE5NGQ5OTdjNDg5NjdhYmQ2MzMxNGM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-12-14T23:22:41Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-12-14T23:22:41Z"}, "message": "address review comments", "tree": {"sha": "5159f0ec3adbcf676c56d4319c832332884d11a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5159f0ec3adbcf676c56d4319c832332884d11a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4db387a6c886d4242a94d997c48967abd63314c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4db387a6c886d4242a94d997c48967abd63314c", "html_url": "https://github.com/rust-lang/rust/commit/b4db387a6c886d4242a94d997c48967abd63314c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4db387a6c886d4242a94d997c48967abd63314c/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0152d33bc1aa2e57800cc68c811f843e9aa6676d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0152d33bc1aa2e57800cc68c811f843e9aa6676d", "html_url": "https://github.com/rust-lang/rust/commit/0152d33bc1aa2e57800cc68c811f843e9aa6676d"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "ebfc20e30f74edbd1b2eff9a863acd2e0a3ebc7f", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4db387a6c886d4242a94d997c48967abd63314c/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4db387a6c886d4242a94d997c48967abd63314c/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=b4db387a6c886d4242a94d997c48967abd63314c", "patch": "@@ -125,9 +125,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// include all region obligations, so this includes all cases\n     /// that care about regions) with this function, you have to\n     /// do it yourself, by e.g. having them be a part of the answer.\n-    ///\n-    /// TDFX(nikomatsakis): not sure this is the best name.\n-    pub fn make_query_response_with_obligations_pending<T>(\n+    pub fn make_query_response_ignoring_pending_obligations<T>(\n         &self,\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T"}, {"sha": "190419048b4b562b9ca48283a1fa3313e5a7d562", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4db387a6c886d4242a94d997c48967abd63314c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4db387a6c886d4242a94d997c48967abd63314c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=b4db387a6c886d4242a94d997c48967abd63314c", "patch": "@@ -276,7 +276,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                        param_env_and_self_ty, self_ty);\n                 MethodAutoderefStepsResult {\n                     steps: Lrc::new(vec![CandidateStep {\n-                        self_ty: self.make_query_response_with_obligations_pending(\n+                        self_ty: self.make_query_response_ignoring_pending_obligations(\n                             canonical_inference_vars, self_ty),\n                         autoderefs: 0,\n                         from_unsafe_deref: false,\n@@ -387,7 +387,7 @@ fn method_autoderef_steps<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n         let mut steps: Vec<_> = autoderef.by_ref()\n             .map(|(ty, d)| {\n                 let step = CandidateStep {\n-                    self_ty: infcx.make_query_response_with_obligations_pending(\n+                    self_ty: infcx.make_query_response_ignoring_pending_obligations(\n                         inference_vars.clone(), ty),\n                     autoderefs: d,\n                     from_unsafe_deref: reached_raw_pointer,\n@@ -407,15 +407,15 @@ fn method_autoderef_steps<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n             ty::Error => {\n                 Some(MethodAutoderefBadTy {\n                     reached_raw_pointer,\n-                    ty: infcx.make_query_response_with_obligations_pending(\n+                    ty: infcx.make_query_response_ignoring_pending_obligations(\n                         inference_vars, final_ty)\n                 })\n             }\n             ty::Array(elem_ty, _) => {\n                 let dereferences = steps.len() - 1;\n \n                 steps.push(CandidateStep {\n-                    self_ty: infcx.make_query_response_with_obligations_pending(\n+                    self_ty: infcx.make_query_response_ignoring_pending_obligations(\n                         inference_vars, infcx.tcx.mk_slice(elem_ty)),\n                     autoderefs: dereferences,\n                     // this could be from an unsafe deref if we had"}]}