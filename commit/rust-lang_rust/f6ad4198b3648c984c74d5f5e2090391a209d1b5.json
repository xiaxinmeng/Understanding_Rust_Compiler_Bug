{"sha": "f6ad4198b3648c984c74d5f5e2090391a209d1b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YWQ0MTk4YjM2NDhjOTg0Yzc0ZDVmNWUyMDkwMzkxYTIwOWQxYjU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-29T19:28:04Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-29T19:28:04Z"}, "message": "Rustup to rustc 1.34.0-nightly (d8a0dd7ae 2019-01-28)", "tree": {"sha": "016db7f6a559685dab692dc58c6e93e3748b3edf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/016db7f6a559685dab692dc58c6e93e3748b3edf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6ad4198b3648c984c74d5f5e2090391a209d1b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ad4198b3648c984c74d5f5e2090391a209d1b5", "html_url": "https://github.com/rust-lang/rust/commit/f6ad4198b3648c984c74d5f5e2090391a209d1b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6ad4198b3648c984c74d5f5e2090391a209d1b5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdf13205081c6222cc275eb025b4f62a9f4ee967", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf13205081c6222cc275eb025b4f62a9f4ee967", "html_url": "https://github.com/rust-lang/rust/commit/bdf13205081c6222cc275eb025b4f62a9f4ee967"}], "stats": {"total": 114, "additions": 58, "deletions": 56}, "files": [{"sha": "5d47fc8df35fc7662a917e01e12713ad4d4d8ca1", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6ad4198b3648c984c74d5f5e2090391a209d1b5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f6ad4198b3648c984c74d5f5e2090391a209d1b5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f6ad4198b3648c984c74d5f5e2090391a209d1b5", "patch": "@@ -1,3 +1,5 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n [[package]]\n name = \"aho-corasick\"\n version = \"0.6.9\""}, {"sha": "5c922a753d2aa0f98db20c4d18fae75a4e2ef622", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/f6ad4198b3648c984c74d5f5e2090391a209d1b5/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/f6ad4198b3648c984c74d5f5e2090391a209d1b5/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=f6ad4198b3648c984c74d5f5e2090391a209d1b5", "patch": "@@ -1,31 +1,31 @@\n-From 76c92b0dcd7919dab3a48d707d615f260390b839 Mon Sep 17 00:00:00 2001\n+From e56a552cfe6d51ec4db5ea69aff1c46c0090f470 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 26 Jan 2019 11:50:08 +0100\n+Date: Tue, 29 Jan 2019 20:19:01 +0100\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n- src/libcore/clone.rs         |   4 +-\n- src/libcore/cmp.rs           |   6 +-\n- src/libcore/default.rs       |   2 -\n- src/libcore/fmt/num.rs       |   6 +-\n- src/libcore/hash/mod.rs      |  20 ------\n- src/libcore/iter/range.rs    |   1 -\n- src/libcore/iter/traits.rs   |   2 +-\n- src/libcore/lib.rs           |   2 -\n- src/libcore/marker.rs        |   4 +-\n- src/libcore/mem.rs           |   2 -\n- src/libcore/num/mod.rs       | 100 ++++++++--------------------\n- src/libcore/num/wrapping.rs  |  14 ++--\n- src/libcore/ops/arith.rs     |  22 +++----\n- src/libcore/ops/bit.rs       |  30 ++++-----\n- src/libcore/sync/atomic.rs   |  28 --------\n- src/libcore/tests/iter.rs    |  15 -----\n- src/libcore/tests/num/mod.rs |  18 -----\n- src/libcore/time.rs          | 123 -----------------------------------\n- src/libstd/lib.rs            |   4 --\n- src/libstd/net/ip.rs         |  20 ------\n- src/libstd/num.rs            |   2 +-\n- src/libstd/panic.rs          |   6 --\n+ src/libcore/clone.rs             |   4 +-\n+ src/libcore/cmp.rs               |   6 +-\n+ src/libcore/default.rs           |   2 -\n+ src/libcore/fmt/num.rs           |   6 +-\n+ src/libcore/hash/mod.rs          |  20 -------\n+ src/libcore/iter/range.rs        |   1 -\n+ src/libcore/iter/traits/accum.rs |   2 +-\n+ src/libcore/lib.rs               |   2 -\n+ src/libcore/marker.rs            |   4 +-\n+ src/libcore/mem.rs               |   2 -\n+ src/libcore/num/mod.rs           | 100 +++++++++----------------------\n+ src/libcore/num/wrapping.rs      |  14 ++---\n+ src/libcore/ops/arith.rs         |  22 +++----\n+ src/libcore/ops/bit.rs           |  30 ++++------\n+ src/libcore/sync/atomic.rs       |  28 ---------\n+ src/libcore/tests/iter.rs        |  15 -----\n+ src/libcore/tests/num/mod.rs     |  18 ------\n+ src/libcore/time.rs              | 123 ---------------------------------------\n+ src/libstd/lib.rs                |   4 --\n+ src/libstd/net/ip.rs             |  20 -------\n+ src/libstd/num.rs                |   2 +-\n+ src/libstd/panic.rs              |   6 --\n  22 files changed, 63 insertions(+), 368 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n@@ -204,11 +204,11 @@ index 66c09a0..1b8c5c9 100644\n  \n  macro_rules! range_exact_iter_impl {\n      ($($t:ty)*) => ($(\n-diff --git a/src/libcore/iter/traits.rs b/src/libcore/iter/traits.rs\n-index e8c6cd8..f58b446 100644\n---- a/src/libcore/iter/traits.rs\n-+++ b/src/libcore/iter/traits.rs\n-@@ -901,7 +901,7 @@ macro_rules! float_sum_product {\n+diff --git a/src/libcore/iter/traits/accum.rs b/src/libcore/iter/traits/accum.rs\n+index dfe1d2a..06cc578 100644\n+--- a/src/libcore/iter/traits/accum.rs\n++++ b/src/libcore/iter/traits/accum.rs\n+@@ -111,7 +111,7 @@ macro_rules! float_sum_product {\n      )*)\n  }\n  \n@@ -218,10 +218,10 @@ index e8c6cd8..f58b446 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 74a7115..634df60 100644\n+index cde7e7c..094e1fb 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -149,14 +149,12 @@ mod uint_macros;\n+@@ -146,14 +146,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -237,10 +237,10 @@ index 74a7115..634df60 100644\n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index 65752ba..d3b797a 100644\n+index 457d556..91425fb 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n-@@ -663,8 +663,8 @@ mod copy_impls {\n+@@ -664,8 +664,8 @@ mod copy_impls {\n      }\n  \n      impl_copy! {\n@@ -252,7 +252,7 @@ index 65752ba..d3b797a 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 8fcbb73..0e20b88 100644\n+index 0eeac5e..d8277ef 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n @@ -163,12 +163,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n@@ -269,7 +269,7 @@ index 8fcbb73..0e20b88 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index 423b800..b2b3f90 100644\n+index 7cf2317..f928d40 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n @@ -102,13 +102,11 @@ nonzero_integers! {\n@@ -286,7 +286,7 @@ index 423b800..b2b3f90 100644\n      #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n  }\n  \n-@@ -2125,18 +2123,6 @@ impl i64 {\n+@@ -2074,18 +2072,6 @@ impl i64 {\n           \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -305,7 +305,7 @@ index 423b800..b2b3f90 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4440,17 +4426,6 @@ impl u64 {\n+@@ -4316,17 +4302,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -323,7 +323,7 @@ index 423b800..b2b3f90 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4534,7 +4509,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4410,7 +4385,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -332,7 +332,7 @@ index 423b800..b2b3f90 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4650,30 +4625,25 @@ macro_rules! rev {\n+@@ -4526,30 +4501,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -367,7 +367,7 @@ index 423b800..b2b3f90 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4685,21 +4655,21 @@ mod ptr_try_from_impls {\n+@@ -4561,21 +4531,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -397,7 +397,7 @@ index 423b800..b2b3f90 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4708,24 +4678,24 @@ mod ptr_try_from_impls {\n+@@ -4584,24 +4554,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -430,7 +430,7 @@ index 423b800..b2b3f90 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4734,24 +4704,20 @@ mod ptr_try_from_impls {\n+@@ -4610,24 +4580,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -459,7 +459,7 @@ index 423b800..b2b3f90 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -4786,7 +4752,7 @@ macro_rules! doit {\n+@@ -4662,7 +4628,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -468,7 +468,7 @@ index 423b800..b2b3f90 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4977,52 +4943,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4853,52 +4819,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -845,10 +845,10 @@ index 2c9bf24..af2ab6f 100644\n -shr_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n diff --git a/src/libcore/sync/atomic.rs b/src/libcore/sync/atomic.rs\n-index 8992e51..c1babcd 100644\n+index bcedff5..a388e78 100644\n --- a/src/libcore/sync/atomic.rs\n +++ b/src/libcore/sync/atomic.rs\n-@@ -1937,34 +1937,6 @@ atomic_int! {\n+@@ -1978,34 +1978,6 @@ atomic_int! {\n      8,\n      u64 AtomicU64 ATOMIC_U64_INIT\n  }\n@@ -896,11 +896,10 @@ index 0fa9974..75b44b1 100644\n  \n      #[derive(Clone)]\n      struct Test(Bigger);\n-@@ -1968,19 +1966,6 @@ fn test_step_replace_signed() {\n-     assert_eq!(y, 5);\n+@@ -1969,19 +1967,6 @@ fn test_step_replace_signed() {\n  }\n  \n--#[test]\n+ #[test]\n -fn test_step_replace_no_between() {\n -    let mut x = 4u128;\n -    let y = x.replace_zero();\n@@ -913,9 +912,10 @@ index 0fa9974..75b44b1 100644\n -    assert_eq!(y, 5);\n -}\n -\n- #[test]\n+-#[test]\n  fn test_rev_try_folds() {\n      let f = &|acc, x| i32::checked_add(2*acc, x);\n+     assert_eq!((1..10).rev().try_fold(7, f), (1..10).try_rfold(7, f));\n diff --git a/src/libcore/tests/num/mod.rs b/src/libcore/tests/num/mod.rs\n index a17c094..3c36d10 100644\n --- a/src/libcore/tests/num/mod.rs\n@@ -1134,10 +1134,10 @@ index a751965..5d162cb 100644\n      ///\n      /// # Examples\n diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index f395813..d81f80b 100644\n+index 137ec65..4d1386c 100644\n --- a/src/libstd/lib.rs\n +++ b/src/libstd/lib.rs\n-@@ -401,8 +401,6 @@ pub use core::i16;\n+@@ -398,8 +398,6 @@ pub use core::i16;\n  pub use core::i32;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::i64;\n@@ -1146,7 +1146,7 @@ index f395813..d81f80b 100644\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::usize;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-@@ -435,8 +433,6 @@ pub use alloc_crate::string;\n+@@ -432,8 +430,6 @@ pub use alloc_crate::string;\n  pub use alloc_crate::vec;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::char;\n@@ -1156,10 +1156,10 @@ index f395813..d81f80b 100644\n  pub use core::hint;\n  \n diff --git a/src/libstd/net/ip.rs b/src/libstd/net/ip.rs\n-index f98113e..6c41e4e 100644\n+index f45cd8b..cf5ba85 100644\n --- a/src/libstd/net/ip.rs\n +++ b/src/libstd/net/ip.rs\n-@@ -1382,26 +1382,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n+@@ -1381,26 +1381,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n      }\n  }\n  \n@@ -1224,5 +1224,5 @@ index d27f6ca..8ac2a44 100644\n  #[cfg(target_has_atomic = \"8\")]\n  #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n -- \n-2.17.2 (Apple Git-113)\n+2.11.0\n "}]}