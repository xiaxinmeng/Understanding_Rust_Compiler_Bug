{"sha": "c12de4afbfd59d7f848589d564d03049409b7532", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMmRlNGFmYmZkNTlkN2Y4NDg1ODlkNTY0ZDAzMDQ5NDA5Yjc1MzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-04T12:20:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-04T12:20:52Z"}, "message": "Merge #4298\n\n4298: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "08b3d3bbfde6cf76edfe9d77ad13f67ee71652c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08b3d3bbfde6cf76edfe9d77ad13f67ee71652c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c12de4afbfd59d7f848589d564d03049409b7532", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesAikCRBK7hj4Ov3rIwAAdHIIADke+3HTztK9tUs4m7eTvM8h\nklZg1H06kRcGjA8Yc76XJu0+V+PZB5cUDqBLz7UHeWgL8J8kuYRPtZHZWMd2PMFY\nCI+0v3Ls8b4usJhI+skPgXJL6J/k3i3lYq/UfteoD3x02EllxXV2NS5UAlQTQ+VY\nn7piZBR8o67B0WGtlaL7I7soVVzoFIAIdeKEmMpUBmQsZzX9RlbBSFv5vwx0YDRy\nOTTLN0Si4a9U0xi/ETvfyg4moLqcEGCUv9FQOOdeveXnluZ5s32CkahxzzFLrgBS\nnifbjrZFzWkBVHP3KgABBKywPUB3KjN14FgceSElHeCmMUormxcwtg9ctLMjuBg=\n=/mwJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 08b3d3bbfde6cf76edfe9d77ad13f67ee71652c7\nparent 96f581079ff1e2adf5758e77edc0a4c039e52df8\nparent 802617ccc25aeea82eb417b9329812c795311a73\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588594852 +0000\ncommitter GitHub <noreply@github.com> 1588594852 +0000\n\nMerge #4298\n\n4298: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c12de4afbfd59d7f848589d564d03049409b7532", "html_url": "https://github.com/rust-lang/rust/commit/c12de4afbfd59d7f848589d564d03049409b7532", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c12de4afbfd59d7f848589d564d03049409b7532/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96f581079ff1e2adf5758e77edc0a4c039e52df8", "url": "https://api.github.com/repos/rust-lang/rust/commits/96f581079ff1e2adf5758e77edc0a4c039e52df8", "html_url": "https://github.com/rust-lang/rust/commit/96f581079ff1e2adf5758e77edc0a4c039e52df8"}, {"sha": "802617ccc25aeea82eb417b9329812c795311a73", "url": "https://api.github.com/repos/rust-lang/rust/commits/802617ccc25aeea82eb417b9329812c795311a73", "html_url": "https://github.com/rust-lang/rust/commit/802617ccc25aeea82eb417b9329812c795311a73"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "b407eb870f287c738931ae7f37f2580664df2e3f", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c12de4afbfd59d7f848589d564d03049409b7532/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12de4afbfd59d7f848589d564d03049409b7532/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=c12de4afbfd59d7f848589d564d03049409b7532", "patch": "@@ -24,38 +24,38 @@ use ra_syntax::{ast, AstNode, TextRange, T};\n pub(crate) fn unwrap_block(ctx: AssistCtx) -> Option<Assist> {\n     let l_curly_token = ctx.find_token_at_offset(T!['{'])?;\n \n-    let res = if let Some(if_expr) = l_curly_token.ancestors().find_map(IfExpr::cast) {\n+    let (expr, expr_to_unwrap) = if let Some(if_expr) =\n+        l_curly_token.ancestors().find_map(IfExpr::cast)\n+    {\n         // if expression\n         let expr_to_unwrap = if_expr.blocks().find_map(|expr| extract_expr(ctx.frange.range, expr));\n         let expr_to_unwrap = expr_to_unwrap?;\n         // Find if we are in a else if block\n         let ancestor = if_expr.syntax().ancestors().skip(1).find_map(ast::IfExpr::cast);\n \n-        if let Some(ancestor) = ancestor {\n-            Some((ast::Expr::IfExpr(ancestor), expr_to_unwrap))\n-        } else {\n-            Some((ast::Expr::IfExpr(if_expr), expr_to_unwrap))\n+        match ancestor {\n+            None => (ast::Expr::IfExpr(if_expr), expr_to_unwrap),\n+            Some(ancestor) => (ast::Expr::IfExpr(ancestor), expr_to_unwrap),\n         }\n     } else if let Some(for_expr) = l_curly_token.ancestors().find_map(ForExpr::cast) {\n         // for expression\n         let block_expr = for_expr.loop_body()?;\n-        extract_expr(ctx.frange.range, block_expr)\n-            .map(|expr_to_unwrap| (ast::Expr::ForExpr(for_expr), expr_to_unwrap))\n+        let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n+        (ast::Expr::ForExpr(for_expr), expr_to_unwrap)\n     } else if let Some(while_expr) = l_curly_token.ancestors().find_map(WhileExpr::cast) {\n         // while expression\n         let block_expr = while_expr.loop_body()?;\n-        extract_expr(ctx.frange.range, block_expr)\n-            .map(|expr_to_unwrap| (ast::Expr::WhileExpr(while_expr), expr_to_unwrap))\n+        let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n+        (ast::Expr::WhileExpr(while_expr), expr_to_unwrap)\n     } else if let Some(loop_expr) = l_curly_token.ancestors().find_map(LoopExpr::cast) {\n         // loop expression\n         let block_expr = loop_expr.loop_body()?;\n-        extract_expr(ctx.frange.range, block_expr)\n-            .map(|expr_to_unwrap| (ast::Expr::LoopExpr(loop_expr), expr_to_unwrap))\n+        let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n+        (ast::Expr::LoopExpr(loop_expr), expr_to_unwrap)\n     } else {\n-        None\n+        return None;\n     };\n \n-    let (expr, expr_to_unwrap) = res?;\n     ctx.add_assist(AssistId(\"unwrap_block\"), \"Unwrap block\", |edit| {\n         edit.set_cursor(expr.syntax().text_range().start());\n         edit.target(expr_to_unwrap.syntax().text_range());"}]}