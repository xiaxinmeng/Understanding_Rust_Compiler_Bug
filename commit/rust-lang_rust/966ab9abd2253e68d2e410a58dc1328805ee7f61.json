{"sha": "966ab9abd2253e68d2e410a58dc1328805ee7f61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NmFiOWFiZDIyNTNlNjhkMmU0MTBhNThkYzEzMjg4MDVlZTdmNjE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-08-23T12:29:30Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-03T11:25:29Z"}, "message": "Add test for assoc type bindings", "tree": {"sha": "8d48793e69f3cb5f7f398c5579d383c666f1207f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d48793e69f3cb5f7f398c5579d383c666f1207f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/966ab9abd2253e68d2e410a58dc1328805ee7f61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/966ab9abd2253e68d2e410a58dc1328805ee7f61", "html_url": "https://github.com/rust-lang/rust/commit/966ab9abd2253e68d2e410a58dc1328805ee7f61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/966ab9abd2253e68d2e410a58dc1328805ee7f61/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0672b7f802c7e7814ba9a1b3b21ecf866343d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0672b7f802c7e7814ba9a1b3b21ecf866343d6", "html_url": "https://github.com/rust-lang/rust/commit/1c0672b7f802c7e7814ba9a1b3b21ecf866343d6"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "42bcae157d91c36c0971dfc2b09f0bf292c8233e", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/966ab9abd2253e68d2e410a58dc1328805ee7f61/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966ab9abd2253e68d2e410a58dc1328805ee7f61/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=966ab9abd2253e68d2e410a58dc1328805ee7f61", "patch": "@@ -3552,6 +3552,71 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn assoc_type_bindings() {\n+    assert_snapshot!(\n+        infer(r#\"\n+trait Trait {\n+    type Type;\n+}\n+\n+fn get<T: Trait>(t: T) -> <T as Trait>::Type {}\n+fn get2<U, T: Trait<Type = U>>(t: T) -> U {}\n+fn set<T: Trait<Type = u64>>(t: T) -> T {t}\n+\n+struct S<T>;\n+impl<T> Trait for S<T> { type Type = T; }\n+\n+fn test<T: Trait<Type = u32>>(x: T, y: impl Trait<Type = i64>) {\n+    get(x);\n+    get2(x);\n+    get(y);\n+    get2(y);\n+    get(set(S));\n+    get2(set(S));\n+    get2(S::<str>);\n+}\n+\"#),\n+        @r###\"\n+    [50; 51) 't': T\n+    [78; 80) '{}': ()\n+    [112; 113) 't': T\n+    [123; 125) '{}': ()\n+    [155; 156) 't': T\n+    [166; 169) '{t}': T\n+    [167; 168) 't': T\n+    [257; 258) 'x': T\n+    [263; 264) 'y': impl Trait\n+    [290; 398) '{     ...r>); }': ()\n+    [296; 299) 'get': fn get<T>(T) -> <T as Trait>::Type\n+    [296; 302) 'get(x)': {unknown}\n+    [300; 301) 'x': T\n+    [308; 312) 'get2': fn get2<{unknown}, T>(T) -> U\n+    [308; 315) 'get2(x)': {unknown}\n+    [313; 314) 'x': T\n+    [321; 324) 'get': fn get<impl Trait>(T) -> <T as Trait>::Type\n+    [321; 327) 'get(y)': {unknown}\n+    [325; 326) 'y': impl Trait\n+    [333; 337) 'get2': fn get2<{unknown}, impl Trait>(T) -> U\n+    [333; 340) 'get2(y)': {unknown}\n+    [338; 339) 'y': impl Trait\n+    [346; 349) 'get': fn get<S<{unknown}>>(T) -> <T as Trait>::Type\n+    [346; 357) 'get(set(S))': {unknown}\n+    [350; 353) 'set': fn set<S<{unknown}>>(T) -> T\n+    [350; 356) 'set(S)': S<{unknown}>\n+    [354; 355) 'S': S<{unknown}>\n+    [363; 367) 'get2': fn get2<{unknown}, S<{unknown}>>(T) -> U\n+    [363; 375) 'get2(set(S))': {unknown}\n+    [368; 371) 'set': fn set<S<{unknown}>>(T) -> T\n+    [368; 374) 'set(S)': S<{unknown}>\n+    [372; 373) 'S': S<{unknown}>\n+    [381; 385) 'get2': fn get2<{unknown}, S<str>>(T) -> U\n+    [381; 395) 'get2(S::<str>)': {unknown}\n+    [386; 394) 'S::<str>': S<str>\n+    \"###\n+    );\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();"}]}