{"sha": "a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MTkzY2E0YzMyMDRkNmQ4YWFmYWRhYjgwZmY1YzZiMjg0YWE3NmU=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-18T17:35:23Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-19T18:06:19Z"}, "message": "fix suggestion for unsized function parameters", "tree": {"sha": "db88e248997c9679790b4d08f781f50ea61e1d2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db88e248997c9679790b4d08f781f50ea61e1d2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "html_url": "https://github.com/rust-lang/rust/commit/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41f0e13bc53396852f4f1338ce5d8be0d1125b08", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f0e13bc53396852f4f1338ce5d8be0d1125b08", "html_url": "https://github.com/rust-lang/rust/commit/41f0e13bc53396852f4f1338ce5d8be0d1125b08"}], "stats": {"total": 101, "additions": 64, "deletions": 37}, "files": [{"sha": "2683e886eeb0f1ebb6664bed44fca837cdb3d6d7", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -6,20 +6,19 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_middle::ty::Ty;\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits;\n-use std::mem;\n \n pub(super) struct GatherLocalsVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     parent_id: hir::HirId,\n     // parameters are special cases of patterns, but we want to handle them as\n     // *distinct* cases. so track when we are hitting a pattern *within* an fn\n     // parameter.\n-    outermost_fn_param_pat: bool,\n+    outermost_fn_param_pat: Option<Span>,\n }\n \n impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n     pub(super) fn new(fcx: &'a FnCtxt<'a, 'tcx>, parent_id: hir::HirId) -> Self {\n-        Self { fcx, parent_id, outermost_fn_param_pat: false }\n+        Self { fcx, parent_id, outermost_fn_param_pat: None }\n     }\n \n     fn assign(&mut self, span: Span, nid: hir::HirId, ty_opt: Option<LocalTy<'tcx>>) -> Ty<'tcx> {\n@@ -92,7 +91,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        let old_outermost_fn_param_pat = mem::replace(&mut self.outermost_fn_param_pat, true);\n+        let old_outermost_fn_param_pat = self.outermost_fn_param_pat.replace(param.ty_span);\n         intravisit::walk_param(self, param);\n         self.outermost_fn_param_pat = old_outermost_fn_param_pat;\n     }\n@@ -102,12 +101,12 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n         if let PatKind::Binding(_, _, ident, _) = p.kind {\n             let var_ty = self.assign(p.span, p.hir_id, None);\n \n-            if self.outermost_fn_param_pat {\n+            if let Some(ty_span) = self.outermost_fn_param_pat {\n                 if !self.fcx.tcx.features().unsized_fn_params {\n                     self.fcx.require_type_is_sized(\n                         var_ty,\n                         p.span,\n-                        traits::SizedArgumentType(Some(p.span)),\n+                        traits::SizedArgumentType(Some(ty_span)),\n                     );\n                 }\n             } else {\n@@ -123,7 +122,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n                 var_ty\n             );\n         }\n-        let old_outermost_fn_param_pat = mem::replace(&mut self.outermost_fn_param_pat, false);\n+        let old_outermost_fn_param_pat = self.outermost_fn_param_pat.take();\n         intravisit::walk_pat(self, p);\n         self.outermost_fn_param_pat = old_outermost_fn_param_pat;\n     }"}, {"sha": "dea0bb259f5062e95be1a454e8c64fb652422e09", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -9,8 +9,8 @@ LL | fn f(p: Path) { }\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(&p: Path) { }\n-   |      ^\n+LL | fn f(p: &Path) { }\n+   |         ^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:15:15"}, {"sha": "3631a03938a65972ceecc59c4b1a97258171ab43", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -8,8 +8,8 @@ LL | fn foo(x: dyn Foo) {\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn foo(&x: dyn Foo) {\n-   |        ^\n+LL | fn foo(x: &dyn Foo) {\n+   |           ^\n \n error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n   --> $DIR/feature-gate-unsized_fn_params.rs:24:5"}, {"sha": "0919c2f3a1e0e663f4137e2690f041321775dae7", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -8,8 +8,8 @@ LL | fn f(f: dyn FnOnce()) {}\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(&f: dyn FnOnce()) {}\n-   |      ^\n+LL | fn f(f: &dyn FnOnce()) {}\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "82866b355573c5bdb2ce22023d862ff814150521", "filename": "src/test/ui/issues/issue-5883.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.rs?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -4,9 +4,9 @@ struct Struct {\n     r: dyn A + 'static\n }\n \n-fn new_struct(r: dyn A + 'static)\n-    -> Struct { //~^ ERROR the size for values of type\n-    //~^ ERROR the size for values of type\n+fn new_struct(\n+    r: dyn A + 'static //~ ERROR the size for values of type\n+) -> Struct {          //~ ERROR the size for values of type\n     Struct { r: r }\n }\n "}, {"sha": "de598a70ee06ac471677d071481a6498bba08410", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -1,22 +1,21 @@\n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-5883.rs:7:15\n+  --> $DIR/issue-5883.rs:8:5\n    |\n-LL | fn new_struct(r: dyn A + 'static)\n-   |               ^ doesn't have a size known at compile-time\n+LL |     r: dyn A + 'static\n+   |     ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn A + 'static)`\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn new_struct(&r: dyn A + 'static)\n-   |               ^\n+LL |     r: &dyn A + 'static\n+   |        ^\n \n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-5883.rs:8:8\n+  --> $DIR/issue-5883.rs:9:6\n    |\n-LL |     -> Struct {\n-   |        ^^^^^^ doesn't have a size known at compile-time\n-LL |\n+LL | ) -> Struct {\n+   |      ^^^^^^ doesn't have a size known at compile-time\n LL |     Struct { r: r }\n    |     --------------- this returned value is of type `Struct`\n    |"}, {"sha": "e94877fded78467dc24155ce46e4ccb842ff84ff", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -8,8 +8,8 @@ LL | fn foo(_x: K) {}\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn foo(&_x: K) {}\n-   |        ^\n+LL | fn foo(_x: &K) {}\n+   |            ^\n \n error: aborting due to previous error\n "}, {"sha": "5919a6f7492058988705b4de0d2f85f846115d0a", "filename": "src/test/ui/suggestions/path-by-value.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -9,8 +9,8 @@ LL | fn f(p: Path) { }\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(&p: Path) { }\n-   |      ^\n+LL | fn f(p: &Path) { }\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "b8ae88ace02ddded1dfe449a44b204722b67caf6", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -16,8 +16,8 @@ LL | fn foo(_x: Foo + Send) {\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn foo(&_x: Foo + Send) {\n-   |        ^\n+LL | fn foo(_x: &Foo + Send) {\n+   |            ^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "2c686c6c2b27113d90ef2e36f2780c9b5a79913b", "filename": "src/test/ui/unsized/unsized-fn-arg.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.fixed?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+#![crate_type=\"lib\"]\n+#![allow(unused)]\n+\n+fn f<T: ?Sized>(t: &T) {}\n+//~^ ERROR the size for values of type `T` cannot be known at compilation time"}, {"sha": "9fc08bd6d3e755d63518a572592ca37ad58de30f", "filename": "src/test/ui/unsized/unsized-fn-arg.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.rs?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+#![crate_type=\"lib\"]\n+#![allow(unused)]\n+\n+fn f<T: ?Sized>(t: T) {}\n+//~^ ERROR the size for values of type `T` cannot be known at compilation time"}, {"sha": "6b802ddf542d5f9d51cc703bf251a289c3971d1f", "filename": "src/test/ui/unsized/unsized-fn-arg.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/unsized-fn-arg.rs:5:17\n+   |\n+LL | fn f<T: ?Sized>(t: T) {}\n+   |      -          ^ doesn't have a size known at compile-time\n+   |      |\n+   |      this type parameter needs to be `std::marker::Sized`\n+   |\n+   = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn f<T: ?Sized>(t: &T) {}\n+   |                    ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "5e385f33bee7d42e2833c585291647aa35393ce8", "filename": "src/test/ui/unsized/unsized-tuple-impls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized-tuple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized-tuple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-tuple-impls.rs?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "previous_filename": "src/test/ui/unsized-tuple-impls.rs"}, {"sha": "54304834d4b2bd6bfd6ce0817c8739d42eb05eda", "filename": "src/test/ui/unsized/unsized.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized.rs?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "previous_filename": "src/test/ui/unsized.rs"}, {"sha": "be4406399fd0f7ba8ebefa0441bc16954d4f3286", "filename": "src/test/ui/unsized/unsized2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized2.rs?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "previous_filename": "src/test/ui/unsized2.rs"}, {"sha": "65efbd6b52070c5ff628aab36b9c41919129cc7f", "filename": "src/test/ui/unsized/unsized3-rpass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized3-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized3-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3-rpass.rs?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "previous_filename": "src/test/ui/unsized3-rpass.rs"}, {"sha": "f5b5d02593155963477ca07a306c15b9bd305550", "filename": "src/test/ui/unsized/unsized3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.rs?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "previous_filename": "src/test/ui/unsized3.rs"}, {"sha": "bd36008aca044e67b803605cfd3a9e180f4a1ca2", "filename": "src/test/ui/unsized/unsized3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "previous_filename": "src/test/ui/unsized3.stderr"}, {"sha": "befd2244d975b936ae200c19826de896845d3911", "filename": "src/test/ui/unsized/unsized5.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized5.rs?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "previous_filename": "src/test/ui/unsized5.rs"}, {"sha": "0bfd4565529aa2d599c182b097c30d6d0c4cb7b0", "filename": "src/test/ui/unsized/unsized5.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "previous_filename": "src/test/ui/unsized5.stderr"}, {"sha": "79133554d5472ba2097c6cdc724b4188504e76a6", "filename": "src/test/ui/unsized/unsized6.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized6.rs?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "previous_filename": "src/test/ui/unsized6.rs"}, {"sha": "8e5734dffb145abe239c55417493a438f29c969e", "filename": "src/test/ui/unsized/unsized6.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -135,8 +135,8 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn g1<X: ?Sized>(&x: X) {}\n-   |                  ^\n+LL | fn g1<X: ?Sized>(x: &X) {}\n+   |                     ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:40:22\n@@ -149,8 +149,8 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn g2<X: ?Sized + T>(&x: X) {}\n-   |                      ^\n+LL | fn g2<X: ?Sized + T>(x: &X) {}\n+   |                         ^\n \n error: aborting due to 13 previous errors\n ", "previous_filename": "src/test/ui/unsized6.stderr"}, {"sha": "422a784814e9165ca0b4b1af051ddb2896d41041", "filename": "src/test/ui/unsized/unsized7.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized7.rs?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "previous_filename": "src/test/ui/unsized7.rs"}, {"sha": "7dbddd4ed24430579ccc44e484b859a91482cb3a", "filename": "src/test/ui/unsized/unsized7.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "previous_filename": "src/test/ui/unsized7.stderr"}, {"sha": "8498c0407808d1b60950894cb8495fca0a30f787", "filename": "src/tools/clippy/tests/ui/crashes/ice-6251.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8193ca4c3204d6d8aafadab80ff5c6b284aa76e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6251.stderr?ref=a8193ca4c3204d6d8aafadab80ff5c6b284aa76e", "patch": "@@ -16,8 +16,8 @@ LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn bug<T>() -> impl Iterator<Item = [(); { |&x: [u8]| x }]> {\n-   |                                             ^\n+LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: &[u8]| x }]> {\n+   |                                                ^\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/ice-6251.rs:4:54"}]}