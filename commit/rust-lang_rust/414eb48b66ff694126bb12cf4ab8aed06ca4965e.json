{"sha": "414eb48b66ff694126bb12cf4ab8aed06ca4965e", "node_id": "C_kwDOAAsO6NoAKDQxNGViNDhiNjZmZjY5NDEyNmJiMTJjZjRhYjhhZWQwNmNhNDk2NWU", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-02-03T16:23:11Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-02-10T16:25:01Z"}, "message": "add only modified for compiletest", "tree": {"sha": "b0558601a2deee60a9ee6ed2ebc6c9857d3b1539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0558601a2deee60a9ee6ed2ebc6c9857d3b1539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/414eb48b66ff694126bb12cf4ab8aed06ca4965e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/414eb48b66ff694126bb12cf4ab8aed06ca4965e", "html_url": "https://github.com/rust-lang/rust/commit/414eb48b66ff694126bb12cf4ab8aed06ca4965e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/414eb48b66ff694126bb12cf4ab8aed06ca4965e/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a94b9fd0ace1336a3dd93f51f1c0db6ca0fd7f92", "url": "https://api.github.com/repos/rust-lang/rust/commits/a94b9fd0ace1336a3dd93f51f1c0db6ca0fd7f92", "html_url": "https://github.com/rust-lang/rust/commit/a94b9fd0ace1336a3dd93f51f1c0db6ca0fd7f92"}], "stats": {"total": 166, "additions": 137, "deletions": 29}, "files": [{"sha": "613813e6d91ea8523c290e0de565b12a3db4b70d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/414eb48b66ff694126bb12cf4ab8aed06ca4965e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/414eb48b66ff694126bb12cf4ab8aed06ca4965e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=414eb48b66ff694126bb12cf4ab8aed06ca4965e", "patch": "@@ -887,6 +887,7 @@ dependencies = [\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n+ \"build_helper\",\n  \"colored\",\n  \"diff\",\n  \"getopts\","}, {"sha": "3574f11189ee9f2efcf284c70aa480713a85c644", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=414eb48b66ff694126bb12cf4ab8aed06ca4965e", "patch": "@@ -557,6 +557,7 @@ mod dist {\n             rustfix_coverage: false,\n             pass: None,\n             run: None,\n+            only_modified: false,\n         };\n \n         let build = Build::new(config);\n@@ -627,6 +628,7 @@ mod dist {\n             rustfix_coverage: false,\n             pass: None,\n             run: None,\n+            only_modified: false,\n         };\n         // Make sure rustfmt binary not being found isn't an error.\n         config.channel = \"beta\".to_string();"}, {"sha": "ff927ed561b2fe57e44ac1b45ecd9addbb658cb9", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=414eb48b66ff694126bb12cf4ab8aed06ca4965e", "patch": "@@ -124,6 +124,7 @@ pub enum Subcommand {\n         fail_fast: bool,\n         doc_tests: DocTests,\n         rustfix_coverage: bool,\n+        only_modified: bool,\n     },\n     Bench {\n         paths: Vec<PathBuf>,\n@@ -301,6 +302,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                 opts.optflag(\"\", \"doc\", \"only run doc tests\");\n                 opts.optflag(\"\", \"bless\", \"update all stderr/stdout files of failing ui tests\");\n                 opts.optflag(\"\", \"force-rerun\", \"rerun tests even if the inputs are unchanged\");\n+                opts.optflag(\"\", \"only-modified\", \"only run tests that result has been changed\");\n                 opts.optopt(\n                     \"\",\n                     \"compare-mode\",\n@@ -598,6 +600,7 @@ Arguments:\n                 rustc_args: matches.opt_strs(\"rustc-args\"),\n                 fail_fast: !matches.opt_present(\"no-fail-fast\"),\n                 rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n+                only_modified: matches.opt_present(\"only-modified\"),\n                 doc_tests: if matches.opt_present(\"doc\") {\n                     DocTests::Only\n                 } else if matches.opt_present(\"no-doc\") {\n@@ -777,6 +780,13 @@ impl Subcommand {\n         }\n     }\n \n+    pub fn only_modified(&self) -> bool {\n+        match *self {\n+            Subcommand::Test { only_modified, .. } => only_modified,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn force_rerun(&self) -> bool {\n         match *self {\n             Subcommand::Test { force_rerun, .. } => force_rerun,"}, {"sha": "3166cabd1319075f3b28a1ffd12073c6a1ffd229", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=414eb48b66ff694126bb12cf4ab8aed06ca4965e", "patch": "@@ -1,8 +1,8 @@\n //! Runs rustfmt on the repository.\n \n use crate::builder::Builder;\n-use crate::util::{output, output_result, program_out_of_date, t};\n-use build_helper::git::updated_master_branch;\n+use crate::util::{output, program_out_of_date, t};\n+use build_helper::git::get_git_modified_files;\n use ignore::WalkBuilder;\n use std::collections::VecDeque;\n use std::path::{Path, PathBuf};\n@@ -80,23 +80,11 @@ fn update_rustfmt_version(build: &Builder<'_>) {\n ///\n /// Returns `None` if all files should be formatted.\n fn get_modified_rs_files(build: &Builder<'_>) -> Result<Option<Vec<String>>, String> {\n-    let Ok(updated_master) = updated_master_branch(Some(&build.config.src)) else { return Ok(None); };\n-\n     if !verify_rustfmt_version(build) {\n         return Ok(None);\n     }\n \n-    let merge_base =\n-        output_result(build.config.git().arg(\"merge-base\").arg(&updated_master).arg(\"HEAD\"))?;\n-    Ok(Some(\n-        output_result(\n-            build.config.git().arg(\"diff-index\").arg(\"--name-only\").arg(merge_base.trim()),\n-        )?\n-        .lines()\n-        .map(|s| s.trim().to_owned())\n-        .filter(|f| Path::new(f).extension().map_or(false, |ext| ext == \"rs\"))\n-        .collect(),\n-    ))\n+    get_git_modified_files(Some(&build.config.src), &vec![\"rs\"])\n }\n \n #[derive(serde::Deserialize)]\n@@ -169,7 +157,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n                 ignore_fmt.add(&format!(\"!/{}\", untracked_path)).expect(&untracked_path);\n             }\n             if !check && paths.is_empty() {\n-                match get_modified_rs_files(build) {\n+                match get_modified_rs_files(&build) {\n                     Ok(Some(files)) => {\n                         for file in files {\n                             println!(\"formatting modified file {file}\");"}, {"sha": "30380da7ba236da6e9f0d6f8b3f72258dc6fc788", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=414eb48b66ff694126bb12cf4ab8aed06ca4965e", "patch": "@@ -1508,6 +1508,10 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         if builder.config.rust_optimize_tests {\n             cmd.arg(\"--optimize-tests\");\n         }\n+        if builder.config.cmd.only_modified() {\n+            cmd.arg(\"--only-modified\");\n+        }\n+\n         let mut flags = if is_rustdoc { Vec::new() } else { vec![\"-Crpath\".to_string()] };\n         flags.push(format!(\"-Cdebuginfo={}\", builder.config.rust_debuginfo_level_tests));\n         flags.extend(builder.config.cmd.rustc_args().iter().map(|s| s.to_string()));"}, {"sha": "168633c8f63349e12a04e46c803a41ce6cecec03", "filename": "src/tools/build_helper/src/git.rs", "status": "modified", "additions": 65, "deletions": 7, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs?ref=414eb48b66ff694126bb12cf4ab8aed06ca4965e", "patch": "@@ -1,5 +1,24 @@\n+use std::process::Stdio;\n use std::{path::Path, process::Command};\n \n+/// Runs a command and returns the output\n+fn output_result(cmd: &mut Command) -> Result<String, String> {\n+    let output = match cmd.stderr(Stdio::inherit()).output() {\n+        Ok(status) => status,\n+        Err(e) => return Err(format!(\"failed to run command: {:?}: {}\", cmd, e)),\n+    };\n+    if !output.status.success() {\n+        return Err(format!(\n+            \"command did not execute successfully: {:?}\\n\\\n+             expected success, got: {}\\n{}\",\n+            cmd,\n+            output.status,\n+            String::from_utf8(output.stderr).map_err(|err| format!(\"{err:?}\"))?\n+        ));\n+    }\n+    Ok(String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?)\n+}\n+\n /// Finds the remote for rust-lang/rust.\n /// For example for these remotes it will return `upstream`.\n /// ```text\n@@ -14,13 +33,7 @@ pub fn get_rust_lang_rust_remote(git_dir: Option<&Path>) -> Result<String, Strin\n         git.current_dir(git_dir);\n     }\n     git.args([\"config\", \"--local\", \"--get-regex\", \"remote\\\\..*\\\\.url\"]);\n-\n-    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n-    if !output.status.success() {\n-        return Err(\"failed to execute git config command\".to_owned());\n-    }\n-\n-    let stdout = String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?;\n+    let stdout = output_result(&mut git)?;\n \n     let rust_lang_remote = stdout\n         .lines()\n@@ -73,3 +86,48 @@ pub fn updated_master_branch(git_dir: Option<&Path>) -> Result<String, String> {\n     // We could implement smarter logic here in the future.\n     Ok(\"origin/master\".into())\n }\n+\n+/// Returns the files that have been modified in the current branch compared to the master branch.\n+/// The `extensions` parameter can be used to filter the files by their extension.\n+/// If `extensions` is empty, all files will be returned.\n+pub fn get_git_modified_files(\n+    git_dir: Option<&Path>,\n+    extensions: &Vec<&str>,\n+) -> Result<Option<Vec<String>>, String> {\n+    let Ok(updated_master) = updated_master_branch(git_dir) else { return Ok(None); };\n+\n+    let git = || {\n+        let mut git = Command::new(\"git\");\n+        if let Some(git_dir) = git_dir {\n+            git.current_dir(git_dir);\n+        }\n+        git\n+    };\n+\n+    let merge_base = output_result(git().arg(\"merge-base\").arg(&updated_master).arg(\"HEAD\"))?;\n+    let files = output_result(git().arg(\"diff-index\").arg(\"--name-only\").arg(merge_base.trim()))?\n+        .lines()\n+        .map(|s| s.trim().to_owned())\n+        .filter(|f| {\n+            Path::new(f).extension().map_or(false, |ext| {\n+                extensions.is_empty() || extensions.contains(&ext.to_str().unwrap())\n+            })\n+        })\n+        .collect();\n+    Ok(Some(files))\n+}\n+\n+/// Returns the files that haven't been added to git yet.\n+pub fn get_git_untracked_files(git_dir: Option<&Path>) -> Result<Option<Vec<String>>, String> {\n+    let Ok(_updated_master) = updated_master_branch(git_dir) else { return Ok(None); };\n+    let mut git = Command::new(\"git\");\n+    if let Some(git_dir) = git_dir {\n+        git.current_dir(git_dir);\n+    }\n+\n+    let files = output_result(git.arg(\"ls-files\").arg(\"--others\").arg(\"--exclude-standard\"))?\n+        .lines()\n+        .map(|s| s.trim().to_owned())\n+        .collect();\n+    Ok(Some(files))\n+}"}, {"sha": "deed6fbd4391fa165fa4beae1a110047a13ba201", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=414eb48b66ff694126bb12cf4ab8aed06ca4965e", "patch": "@@ -9,6 +9,7 @@ diff = \"0.1.10\"\n unified-diff = \"0.2.1\"\n getopts = \"0.2\"\n miropt-test-tools = { path = \"../miropt-test-tools\" }\n+build_helper = { path = \"../build_helper\" }\n tracing = \"0.1\"\n tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n regex = \"1.0\""}, {"sha": "7fe2e6257d9e78729f65455e00704064118e491e", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=414eb48b66ff694126bb12cf4ab8aed06ca4965e", "patch": "@@ -380,6 +380,9 @@ pub struct Config {\n     /// Whether to rerun tests even if the inputs are unchanged.\n     pub force_rerun: bool,\n \n+    /// Only rerun the tests that result has been modified accoring to Git status\n+    pub only_modified: bool,\n+\n     pub target_cfg: LazyCell<TargetCfg>,\n }\n "}, {"sha": "47640f4a4170b584c1390809b43a4c07e271b17c", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414eb48b66ff694126bb12cf4ab8aed06ca4965e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=414eb48b66ff694126bb12cf4ab8aed06ca4965e", "patch": "@@ -8,15 +8,17 @@ extern crate test;\n use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n use crate::common::{CompareMode, Config, Debugger, Mode, PassMode, TestPaths};\n use crate::util::logv;\n+use build_helper::git::{get_git_modified_files, get_git_untracked_files};\n+use core::panic;\n use getopts::Options;\n use lazycell::LazyCell;\n-use std::env;\n use std::ffi::OsString;\n use std::fs;\n use std::io::{self, ErrorKind};\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::time::SystemTime;\n+use std::{env, vec};\n use test::ColorConfig;\n use tracing::*;\n use walkdir::WalkDir;\n@@ -145,9 +147,10 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"\",\n             \"rustfix-coverage\",\n             \"enable this to generate a Rustfix coverage file, which is saved in \\\n-                `./<build_base>/rustfix_missing_coverage.txt`\",\n+            `./<build_base>/rustfix_missing_coverage.txt`\",\n         )\n         .optflag(\"\", \"force-rerun\", \"rerun tests even if the inputs are unchanged\")\n+        .optflag(\"\", \"only-modified\", \"only run tests that result been modified\")\n         .optflag(\"h\", \"help\", \"show this message\")\n         .reqopt(\"\", \"channel\", \"current Rust channel\", \"CHANNEL\")\n         .optopt(\"\", \"edition\", \"default Rust edition\", \"EDITION\");\n@@ -279,6 +282,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n         verbose: matches.opt_present(\"verbose\"),\n         quiet: matches.opt_present(\"quiet\"),\n+        only_modified: matches.opt_present(\"only-modified\"),\n         color,\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n         compare_mode: matches.opt_str(\"compare-mode\").map(CompareMode::parse),\n@@ -521,8 +525,16 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n pub fn make_tests(config: &Config, tests: &mut Vec<test::TestDescAndFn>) {\n     debug!(\"making tests from {:?}\", config.src_base.display());\n     let inputs = common_inputs_stamp(config);\n-    collect_tests_from_dir(config, &config.src_base, &PathBuf::new(), &inputs, tests)\n-        .unwrap_or_else(|_| panic!(\"Could not read tests from {}\", config.src_base.display()));\n+    let modified_tests = modified_tests(config, &config.src_base);\n+    collect_tests_from_dir(\n+        config,\n+        &config.src_base,\n+        &PathBuf::new(),\n+        &inputs,\n+        tests,\n+        &modified_tests,\n+    )\n+    .unwrap_or_else(|_| panic!(\"Could not read tests from {}\", config.src_base.display()));\n }\n \n /// Returns a stamp constructed from input files common to all test cases.\n@@ -561,12 +573,34 @@ fn common_inputs_stamp(config: &Config) -> Stamp {\n     stamp\n }\n \n+fn modified_tests(config: &Config, dir: &Path) -> Vec<PathBuf> {\n+    if !config.only_modified {\n+        return vec![];\n+    }\n+    let Ok(Some(files)) = get_git_modified_files(Some(dir), &vec![\"rs\", \"stderr\", \"fixed\"]) else { return vec![]; };\n+    // Add new test cases to the list, it will be convenient in daily development.\n+    let Ok(Some(untracked_files)) = get_git_untracked_files(None) else { return vec![]; };\n+\n+    let all_paths = [&files[..], &untracked_files[..]].concat();\n+    let full_paths = {\n+        let mut full_paths: Vec<PathBuf> = all_paths\n+            .into_iter()\n+            .map(|f| fs::canonicalize(&f).unwrap().with_extension(\"\").with_extension(\"rs\"))\n+            .collect();\n+        full_paths.dedup();\n+        full_paths.sort_unstable();\n+        full_paths\n+    };\n+    full_paths\n+}\n+\n fn collect_tests_from_dir(\n     config: &Config,\n     dir: &Path,\n     relative_dir_path: &Path,\n     inputs: &Stamp,\n     tests: &mut Vec<test::TestDescAndFn>,\n+    only_modified: &Vec<PathBuf>,\n ) -> io::Result<()> {\n     // Ignore directories that contain a file named `compiletest-ignore-dir`.\n     if dir.join(\"compiletest-ignore-dir\").exists() {\n@@ -597,7 +631,7 @@ fn collect_tests_from_dir(\n         let file = file?;\n         let file_path = file.path();\n         let file_name = file.file_name();\n-        if is_test(&file_name) {\n+        if is_test(&file_name) && (!config.only_modified || only_modified.contains(&file_path)) {\n             debug!(\"found test file: {:?}\", file_path.display());\n             let paths =\n                 TestPaths { file: file_path, relative_dir: relative_dir_path.to_path_buf() };\n@@ -607,7 +641,14 @@ fn collect_tests_from_dir(\n             let relative_file_path = relative_dir_path.join(file.file_name());\n             if &file_name != \"auxiliary\" {\n                 debug!(\"found directory: {:?}\", file_path.display());\n-                collect_tests_from_dir(config, &file_path, &relative_file_path, inputs, tests)?;\n+                collect_tests_from_dir(\n+                    config,\n+                    &file_path,\n+                    &relative_file_path,\n+                    inputs,\n+                    tests,\n+                    only_modified,\n+                )?;\n             }\n         } else {\n             debug!(\"found other file/directory: {:?}\", file_path.display());"}]}