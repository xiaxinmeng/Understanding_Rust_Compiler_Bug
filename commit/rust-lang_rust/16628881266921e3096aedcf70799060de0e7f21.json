{"sha": "16628881266921e3096aedcf70799060de0e7f21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NjI4ODgxMjY2OTIxZTMwOTZhZWRjZjcwNzk5MDYwZGUwZTdmMjE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-01-24T08:30:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-24T08:30:59Z"}, "message": "Rollup merge of #68479 - Tyg13:unused_parens_return, r=Centril\n\nImplement `unused_parens` for block return values\n\nFixes #68386\n\nr? @Centril", "tree": {"sha": "8b7356e70c4e075a1ec96f4247fa06546b52ae6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b7356e70c4e075a1ec96f4247fa06546b52ae6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16628881266921e3096aedcf70799060de0e7f21", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeKqtDCRBK7hj4Ov3rIwAAdHIIACmckPlJIkSnSL/uNmDDkSdK\n5+vUU3dFxcMGsfvBbF8WjX/Y6NTNx3NUk9DDbsawyrfKYr5bvbPLVp4I4MjnOxjM\nphBeIyUFV+tVPZY9rWVR77CvIFM+Mbfc9JgbonIfjo6j7l9N4Ld6hF50bNZ5dC6O\nmHEvnSqJjP8yhyMjcjNZEVUv1VhZsNJP09Ej5moZ7rLDeIjxDbL/Nnmq5GHpJuyv\nNdNRfwW4sRkk+niWDubgGm9vuVkRfgXqXI6+zL7VWb0UX0+9HpM2dMxGw0vXPh6H\nh3qrNsSMMb8rN0wwTVrIcvJOo5r8087cQEJkPmFwpZvrBf6M/loT9gg1BHXbcjU=\n=7FUL\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b7356e70c4e075a1ec96f4247fa06546b52ae6e\nparent 94aa655a3c7a9dde612b5e65e5e8ec3c57d143a3\nparent 6f7e89ffe3824be03ea75a602dc46e711d16cb25\nauthor Tyler Mandry <tmandry@gmail.com> 1579854659 -0800\ncommitter GitHub <noreply@github.com> 1579854659 -0800\n\nRollup merge of #68479 - Tyg13:unused_parens_return, r=Centril\n\nImplement `unused_parens` for block return values\n\nFixes #68386\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16628881266921e3096aedcf70799060de0e7f21", "html_url": "https://github.com/rust-lang/rust/commit/16628881266921e3096aedcf70799060de0e7f21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16628881266921e3096aedcf70799060de0e7f21/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94aa655a3c7a9dde612b5e65e5e8ec3c57d143a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/94aa655a3c7a9dde612b5e65e5e8ec3c57d143a3", "html_url": "https://github.com/rust-lang/rust/commit/94aa655a3c7a9dde612b5e65e5e8ec3c57d143a3"}, {"sha": "6f7e89ffe3824be03ea75a602dc46e711d16cb25", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f7e89ffe3824be03ea75a602dc46e711d16cb25", "html_url": "https://github.com/rust-lang/rust/commit/6f7e89ffe3824be03ea75a602dc46e711d16cb25"}], "stats": {"total": 77, "additions": 50, "deletions": 27}, "files": [{"sha": "e67131b916413e2eff75dfc4c8d35a0c0944a0cf", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=16628881266921e3096aedcf70799060de0e7f21", "patch": "@@ -2410,7 +2410,7 @@ impl<'tcx> AdtDef {\n \n     #[inline]\n     pub fn variant_range(&self) -> Range<VariantIdx> {\n-        (VariantIdx::new(0)..VariantIdx::new(self.variants.len()))\n+        VariantIdx::new(0)..VariantIdx::new(self.variants.len())\n     }\n \n     /// Computes the discriminant value used by a specific variant."}, {"sha": "837b2fcc50068bf9d8f4e1ea683b9f01eace9e0a", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=16628881266921e3096aedcf70799060de0e7f21", "patch": "@@ -529,7 +529,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> Range<VariantIdx> {\n         // FIXME requires optimized MIR\n         let num_variants = tcx.generator_layout(def_id).variant_fields.len();\n-        (VariantIdx::new(0)..VariantIdx::new(num_variants))\n+        VariantIdx::new(0)..VariantIdx::new(num_variants)\n     }\n \n     /// The discriminant for the given variant. Panics if the `variant_index` is"}, {"sha": "08706aac11e41e88748a8b4a69bf955a90144a9a", "filename": "src/librustc_data_structures/sorted_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc_data_structures%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc_data_structures%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map.rs?ref=16628881266921e3096aedcf70799060de0e7f21", "patch": "@@ -132,7 +132,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n         R: RangeBounds<K>,\n     {\n         let (start, end) = self.range_slice_indices(range);\n-        (&self.data[start..end])\n+        &self.data[start..end]\n     }\n \n     #[inline]"}, {"sha": "bb2c4fa1aaff64f2d6a5fad451f13feaa285498d", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=16628881266921e3096aedcf70799060de0e7f21", "patch": "@@ -544,12 +544,20 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n-        if let ast::StmtKind::Local(ref local) = s.kind {\n-            self.check_unused_parens_pat(cx, &local.pat, false, false);\n+        use ast::StmtKind::*;\n \n-            if let Some(ref value) = local.init {\n-                self.check_unused_parens_expr(cx, &value, \"assigned value\", false, None, None);\n+        match s.kind {\n+            Local(ref local) => {\n+                self.check_unused_parens_pat(cx, &local.pat, false, false);\n+\n+                if let Some(ref value) = local.init {\n+                    self.check_unused_parens_expr(cx, &value, \"assigned value\", false, None, None);\n+                }\n             }\n+            Expr(ref expr) => {\n+                self.check_unused_parens_expr(cx, &expr, \"block return value\", false, None, None);\n+            }\n+            _ => {}\n         }\n     }\n "}, {"sha": "a2ce224904b29f5c5563b0ca8774356f01b25c3c", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=16628881266921e3096aedcf70799060de0e7f21", "patch": "@@ -1530,7 +1530,7 @@ impl<'tcx> IntRange<'tcx> {\n         // 2       --------   // 2 -------\n         let (lo, hi) = self.boundaries();\n         let (other_lo, other_hi) = other.boundaries();\n-        (lo == other_hi || hi == other_lo)\n+        lo == other_hi || hi == other_lo\n     }\n \n     fn to_pat(&self, tcx: TyCtxt<'tcx>) -> Pat<'tcx> {"}, {"sha": "e0b93b9ce2555cb7a8b75896794298c497bac7cd", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16628881266921e3096aedcf70799060de0e7f21/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=16628881266921e3096aedcf70799060de0e7f21", "patch": "@@ -774,10 +774,10 @@ impl SourceMap {\n         // searching forwards for boundaries we've got somewhere to search.\n         let snippet = if let Some(ref src) = local_begin.sf.src {\n             let len = src.len();\n-            (&src[start_index..len])\n+            &src[start_index..len]\n         } else if let Some(src) = src.get_source() {\n             let len = src.len();\n-            (&src[start_index..len])\n+            &src[start_index..len]\n         } else {\n             return 1;\n         };"}, {"sha": "d6f18fda8b25c3f5496c200e1ed1b239975fbf3b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16628881266921e3096aedcf70799060de0e7f21/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16628881266921e3096aedcf70799060de0e7f21/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=16628881266921e3096aedcf70799060de0e7f21", "patch": "@@ -548,11 +548,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         let st = match style {\n             ast::StrStyle::Cooked => (format!(\"\\\"{}\\\"\", st.escape_debug())),\n             ast::StrStyle::Raw(n) => {\n-                (format!(\n-                    \"r{delim}\\\"{string}\\\"{delim}\",\n-                    delim = \"#\".repeat(n as usize),\n-                    string = st\n-                ))\n+                format!(\"r{delim}\\\"{string}\\\"{delim}\", delim = \"#\".repeat(n as usize), string = st)\n             }\n         };\n         self.word(st)"}, {"sha": "4e8339a8e6bf1b41f6163961ce93fe24798406a9", "filename": "src/test/ui/lint/lint-unnecessary-parens.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16628881266921e3096aedcf70799060de0e7f21/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16628881266921e3096aedcf70799060de0e7f21/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs?ref=16628881266921e3096aedcf70799060de0e7f21", "patch": "@@ -17,6 +17,13 @@ fn unused_parens_around_return_type() -> (u32) { //~ ERROR unnecessary parenthes\n     panic!()\n }\n \n+fn unused_parens_around_block_return() -> u32 {\n+    let foo = {\n+        (5) //~ ERROR unnecessary parentheses around block return value\n+    };\n+    (5) //~ ERROR unnecessary parentheses around block return value\n+}\n+\n trait Trait {\n     fn test(&self);\n }"}, {"sha": "ea58220d20c9fe8ac050dc14dbb1e1748fc3b904", "filename": "src/test/ui/lint/lint-unnecessary-parens.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/16628881266921e3096aedcf70799060de0e7f21/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16628881266921e3096aedcf70799060de0e7f21/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr?ref=16628881266921e3096aedcf70799060de0e7f21", "patch": "@@ -22,73 +22,85 @@ error: unnecessary parentheses around type\n LL | fn unused_parens_around_return_type() -> (u32) {\n    |                                          ^^^^^ help: remove these parentheses\n \n+error: unnecessary parentheses around block return value\n+  --> $DIR/lint-unnecessary-parens.rs:22:9\n+   |\n+LL |         (5)\n+   |         ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around block return value\n+  --> $DIR/lint-unnecessary-parens.rs:24:5\n+   |\n+LL |     (5)\n+   |     ^^^ help: remove these parentheses\n+\n error: unnecessary parentheses around function argument\n-  --> $DIR/lint-unnecessary-parens.rs:36:9\n+  --> $DIR/lint-unnecessary-parens.rs:43:9\n    |\n LL |     bar((true));\n    |         ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `if` condition\n-  --> $DIR/lint-unnecessary-parens.rs:38:8\n+  --> $DIR/lint-unnecessary-parens.rs:45:8\n    |\n LL |     if (true) {}\n    |        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `while` condition\n-  --> $DIR/lint-unnecessary-parens.rs:39:11\n+  --> $DIR/lint-unnecessary-parens.rs:46:11\n    |\n LL |     while (true) {}\n    |           ^^^^^^ help: remove these parentheses\n \n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/lint-unnecessary-parens.rs:39:5\n+  --> $DIR/lint-unnecessary-parens.rs:46:5\n    |\n LL |     while (true) {}\n    |     ^^^^^^^^^^^^ help: use `loop`\n    |\n    = note: `#[warn(while_true)]` on by default\n \n error: unnecessary parentheses around `match` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:41:11\n+  --> $DIR/lint-unnecessary-parens.rs:48:11\n    |\n LL |     match (true) {\n    |           ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:44:16\n+  --> $DIR/lint-unnecessary-parens.rs:51:16\n    |\n LL |     if let 1 = (1) {}\n    |                ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:45:19\n+  --> $DIR/lint-unnecessary-parens.rs:52:19\n    |\n LL |     while let 1 = (2) {}\n    |                   ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around method argument\n-  --> $DIR/lint-unnecessary-parens.rs:59:24\n+  --> $DIR/lint-unnecessary-parens.rs:66:24\n    |\n LL |     X { y: false }.foo((true));\n    |                        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:61:18\n+  --> $DIR/lint-unnecessary-parens.rs:68:18\n    |\n LL |     let mut _a = (0);\n    |                  ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:62:10\n+  --> $DIR/lint-unnecessary-parens.rs:69:10\n    |\n LL |     _a = (0);\n    |          ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:63:11\n+  --> $DIR/lint-unnecessary-parens.rs:70:11\n    |\n LL |     _a += (1);\n    |           ^^^ help: remove these parentheses\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 15 previous errors\n "}]}