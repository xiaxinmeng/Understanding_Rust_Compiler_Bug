{"sha": "c407cc554ee8657081ae5357a05025d3eaca1184", "node_id": "C_kwDOAAsO6NoAKGM0MDdjYzU1NGVlODY1NzA4MWFlNTM1N2EwNTAyNWQzZWFjYTExODQ", "commit": {"author": {"name": "Daniel Paoliello", "email": "danpao@microsoft.com", "date": "2022-08-18T21:41:17Z"}, "committer": {"name": "Daniel Paoliello", "email": "danpao@microsoft.com", "date": "2022-09-13T18:29:14Z"}, "message": "Add cargo.extraEnv setting", "tree": {"sha": "b2d149dd4e3c98a665b26284f3aee0f88fedb6eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2d149dd4e3c98a665b26284f3aee0f88fedb6eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c407cc554ee8657081ae5357a05025d3eaca1184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c407cc554ee8657081ae5357a05025d3eaca1184", "html_url": "https://github.com/rust-lang/rust/commit/c407cc554ee8657081ae5357a05025d3eaca1184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c407cc554ee8657081ae5357a05025d3eaca1184/comments", "author": {"login": "dpaoliello", "id": 10580822, "node_id": "MDQ6VXNlcjEwNTgwODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10580822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpaoliello", "html_url": "https://github.com/dpaoliello", "followers_url": "https://api.github.com/users/dpaoliello/followers", "following_url": "https://api.github.com/users/dpaoliello/following{/other_user}", "gists_url": "https://api.github.com/users/dpaoliello/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpaoliello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpaoliello/subscriptions", "organizations_url": "https://api.github.com/users/dpaoliello/orgs", "repos_url": "https://api.github.com/users/dpaoliello/repos", "events_url": "https://api.github.com/users/dpaoliello/events{/privacy}", "received_events_url": "https://api.github.com/users/dpaoliello/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dpaoliello", "id": 10580822, "node_id": "MDQ6VXNlcjEwNTgwODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10580822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpaoliello", "html_url": "https://github.com/dpaoliello", "followers_url": "https://api.github.com/users/dpaoliello/followers", "following_url": "https://api.github.com/users/dpaoliello/following{/other_user}", "gists_url": "https://api.github.com/users/dpaoliello/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpaoliello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpaoliello/subscriptions", "organizations_url": "https://api.github.com/users/dpaoliello/orgs", "repos_url": "https://api.github.com/users/dpaoliello/repos", "events_url": "https://api.github.com/users/dpaoliello/events{/privacy}", "received_events_url": "https://api.github.com/users/dpaoliello/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f64c95600c0887dbb48a429a00700df47af75eaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f64c95600c0887dbb48a429a00700df47af75eaa", "html_url": "https://github.com/rust-lang/rust/commit/f64c95600c0887dbb48a429a00700df47af75eaa"}], "stats": {"total": 198, "additions": 155, "deletions": 43}, "files": [{"sha": "8c6d25f7e8cfb48228a8a31b97c3ef68964bfc22", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -394,6 +394,7 @@ dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\",\n  \"paths\",\n+ \"rustc-hash\",\n  \"serde\",\n  \"serde_json\",\n  \"stdx\","}, {"sha": "688e790c5368cdbe67c15b21287681b9e2f5fa22", "filename": "crates/flycheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fflycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fflycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2FCargo.toml?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -13,6 +13,7 @@ doctest = false\n crossbeam-channel = \"0.5.5\"\n tracing = \"0.1.35\"\n cargo_metadata = \"0.15.0\"\n+rustc-hash = \"1.1.0\"\n serde = { version = \"1.0.137\", features = [\"derive\"] }\n serde_json = \"1.0.81\"\n jod-thread = \"0.1.2\""}, {"sha": "fdc03f4053a2714b18b0364b58127eb73d195ab9", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -12,6 +12,7 @@ use std::{\n \n use crossbeam_channel::{never, select, unbounded, Receiver, Sender};\n use paths::AbsPathBuf;\n+use rustc_hash::FxHashMap;\n use serde::Deserialize;\n use stdx::{process::streaming_output, JodChild};\n \n@@ -30,18 +31,20 @@ pub enum FlycheckConfig {\n         all_features: bool,\n         features: Vec<String>,\n         extra_args: Vec<String>,\n+        extra_env: FxHashMap<String, String>,\n     },\n     CustomCommand {\n         command: String,\n         args: Vec<String>,\n+        extra_env: FxHashMap<String, String>,\n     },\n }\n \n impl fmt::Display for FlycheckConfig {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             FlycheckConfig::CargoCommand { command, .. } => write!(f, \"cargo {}\", command),\n-            FlycheckConfig::CustomCommand { command, args } => {\n+            FlycheckConfig::CustomCommand { command, args, .. } => {\n                 write!(f, \"{} {}\", command, args.join(\" \"))\n             }\n         }\n@@ -256,6 +259,7 @@ impl FlycheckActor {\n                 all_features,\n                 extra_args,\n                 features,\n+                extra_env,\n             } => {\n                 let mut cmd = Command::new(toolchain::cargo());\n                 cmd.arg(command);\n@@ -281,11 +285,13 @@ impl FlycheckActor {\n                     }\n                 }\n                 cmd.args(extra_args);\n+                cmd.envs(extra_env);\n                 cmd\n             }\n-            FlycheckConfig::CustomCommand { command, args } => {\n+            FlycheckConfig::CustomCommand { command, args, extra_env } => {\n                 let mut cmd = Command::new(command);\n                 cmd.args(args);\n+                cmd.envs(extra_env);\n                 cmd\n             }\n         };"}, {"sha": "837ea016193cdc4f6f22f80c65a27ebcd7bbc7d9", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -43,10 +43,12 @@ impl WorkspaceBuildScripts {\n         if let Some([program, args @ ..]) = config.run_build_script_command.as_deref() {\n             let mut cmd = Command::new(program);\n             cmd.args(args);\n+            cmd.envs(&config.extra_env);\n             return cmd;\n         }\n \n         let mut cmd = Command::new(toolchain::cargo());\n+        cmd.envs(&config.extra_env);\n \n         cmd.args(&[\"check\", \"--quiet\", \"--workspace\", \"--message-format=json\"]);\n "}, {"sha": "736d80041bd5115ac5bc3701f6549ea6feb35e52", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -2,6 +2,7 @@\n \n use std::iter;\n use std::path::PathBuf;\n+use std::str::from_utf8;\n use std::{ops, process::Command};\n \n use anyhow::{Context, Result};\n@@ -98,6 +99,8 @@ pub struct CargoConfig {\n     pub wrap_rustc_in_build_scripts: bool,\n \n     pub run_build_script_command: Option<Vec<String>>,\n+\n+    pub extra_env: FxHashMap<String, String>,\n }\n \n impl CargoConfig {\n@@ -263,8 +266,8 @@ impl CargoWorkspace {\n         let target = config\n             .target\n             .clone()\n-            .or_else(|| cargo_config_build_target(cargo_toml))\n-            .or_else(|| rustc_discover_host_triple(cargo_toml));\n+            .or_else(|| cargo_config_build_target(cargo_toml, config))\n+            .or_else(|| rustc_discover_host_triple(cargo_toml, config));\n \n         let mut meta = MetadataCommand::new();\n         meta.cargo_path(toolchain::cargo());\n@@ -292,8 +295,27 @@ impl CargoWorkspace {\n         // unclear whether cargo itself supports it.\n         progress(\"metadata\".to_string());\n \n-        let meta =\n-            meta.exec().with_context(|| format!(\"Failed to run `{:?}`\", meta.cargo_command()))?;\n+        fn exec_with_env(\n+            command: &cargo_metadata::MetadataCommand,\n+            extra_env: &FxHashMap<String, String>,\n+        ) -> Result<cargo_metadata::Metadata, cargo_metadata::Error> {\n+            let mut command = command.cargo_command();\n+            command.envs(extra_env);\n+            let output = command.output()?;\n+            if !output.status.success() {\n+                return Err(cargo_metadata::Error::CargoMetadata {\n+                    stderr: String::from_utf8(output.stderr)?,\n+                });\n+            }\n+            let stdout = from_utf8(&output.stdout)?\n+                .lines()\n+                .find(|line| line.starts_with('{'))\n+                .ok_or(cargo_metadata::Error::NoJson)?;\n+            cargo_metadata::MetadataCommand::parse(stdout)\n+        }\n+\n+        let meta = exec_with_env(&meta, &config.extra_env)\n+            .with_context(|| format!(\"Failed to run `{:?}`\", meta.cargo_command()))?;\n \n         Ok(meta)\n     }\n@@ -463,8 +485,9 @@ impl CargoWorkspace {\n     }\n }\n \n-fn rustc_discover_host_triple(cargo_toml: &ManifestPath) -> Option<String> {\n+fn rustc_discover_host_triple(cargo_toml: &ManifestPath, config: &CargoConfig) -> Option<String> {\n     let mut rustc = Command::new(toolchain::rustc());\n+    rustc.envs(&config.extra_env);\n     rustc.current_dir(cargo_toml.parent()).arg(\"-vV\");\n     tracing::debug!(\"Discovering host platform by {:?}\", rustc);\n     match utf8_stdout(rustc) {\n@@ -486,8 +509,9 @@ fn rustc_discover_host_triple(cargo_toml: &ManifestPath) -> Option<String> {\n     }\n }\n \n-fn cargo_config_build_target(cargo_toml: &ManifestPath) -> Option<String> {\n+fn cargo_config_build_target(cargo_toml: &ManifestPath, config: &CargoConfig) -> Option<String> {\n     let mut cargo_config = Command::new(toolchain::cargo());\n+    cargo_config.envs(&config.extra_env);\n     cargo_config\n         .current_dir(cargo_toml.parent())\n         .args(&[\"-Z\", \"unstable-options\", \"config\", \"get\", \"build.target\"])"}, {"sha": "486cb143b80bd22678fa584a6aedacd14529e9d8", "filename": "crates/project-model/src/rustc_cfg.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -4,9 +4,13 @@ use std::process::Command;\n \n use anyhow::Result;\n \n-use crate::{cfg_flag::CfgFlag, utf8_stdout, ManifestPath};\n+use crate::{cfg_flag::CfgFlag, utf8_stdout, CargoConfig, ManifestPath};\n \n-pub(crate) fn get(cargo_toml: Option<&ManifestPath>, target: Option<&str>) -> Vec<CfgFlag> {\n+pub(crate) fn get(\n+    cargo_toml: Option<&ManifestPath>,\n+    target: Option<&str>,\n+    config: &CargoConfig,\n+) -> Vec<CfgFlag> {\n     let _p = profile::span(\"rustc_cfg::get\");\n     let mut res = Vec::with_capacity(6 * 2 + 1);\n \n@@ -18,7 +22,7 @@ pub(crate) fn get(cargo_toml: Option<&ManifestPath>, target: Option<&str>) -> Ve\n         }\n     }\n \n-    match get_rust_cfgs(cargo_toml, target) {\n+    match get_rust_cfgs(cargo_toml, target, config) {\n         Ok(rustc_cfgs) => {\n             tracing::debug!(\n                 \"rustc cfgs found: {:?}\",\n@@ -35,9 +39,14 @@ pub(crate) fn get(cargo_toml: Option<&ManifestPath>, target: Option<&str>) -> Ve\n     res\n }\n \n-fn get_rust_cfgs(cargo_toml: Option<&ManifestPath>, target: Option<&str>) -> Result<String> {\n+fn get_rust_cfgs(\n+    cargo_toml: Option<&ManifestPath>,\n+    target: Option<&str>,\n+    config: &CargoConfig,\n+) -> Result<String> {\n     if let Some(cargo_toml) = cargo_toml {\n         let mut cargo_config = Command::new(toolchain::cargo());\n+        cargo_config.envs(&config.extra_env);\n         cargo_config\n             .current_dir(cargo_toml.parent())\n             .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"cfg\"])\n@@ -52,6 +61,7 @@ fn get_rust_cfgs(cargo_toml: Option<&ManifestPath>, target: Option<&str>) -> Res\n     }\n     // using unstable cargo features failed, fall back to using plain rustc\n     let mut cmd = Command::new(toolchain::rustc());\n+    cmd.envs(&config.extra_env);\n     cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n     if let Some(target) = target {\n         cmd.args(&[\"--target\", target]);"}, {"sha": "3282719fef3d7a3d0b1c188487797cb384b24817", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -10,7 +10,7 @@ use anyhow::{format_err, Result};\n use la_arena::{Arena, Idx};\n use paths::{AbsPath, AbsPathBuf};\n \n-use crate::{utf8_stdout, ManifestPath};\n+use crate::{utf8_stdout, CargoConfig, ManifestPath};\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Sysroot {\n@@ -67,18 +67,20 @@ impl Sysroot {\n         self.crates.iter().map(|(id, _data)| id)\n     }\n \n-    pub fn discover(dir: &AbsPath) -> Result<Sysroot> {\n+    pub fn discover(dir: &AbsPath, config: &CargoConfig) -> Result<Sysroot> {\n         tracing::debug!(\"Discovering sysroot for {}\", dir.display());\n-        let sysroot_dir = discover_sysroot_dir(dir)?;\n-        let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, dir)?;\n+        let sysroot_dir = discover_sysroot_dir(dir, config)?;\n+        let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, dir, config)?;\n         let res = Sysroot::load(sysroot_dir, sysroot_src_dir)?;\n         Ok(res)\n     }\n \n-    pub fn discover_rustc(cargo_toml: &ManifestPath) -> Option<ManifestPath> {\n+    pub fn discover_rustc(cargo_toml: &ManifestPath, config: &CargoConfig) -> Option<ManifestPath> {\n         tracing::debug!(\"Discovering rustc source for {}\", cargo_toml.display());\n         let current_dir = cargo_toml.parent();\n-        discover_sysroot_dir(current_dir).ok().and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n+        discover_sysroot_dir(current_dir, config)\n+            .ok()\n+            .and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n     }\n \n     pub fn load(sysroot_dir: AbsPathBuf, sysroot_src_dir: AbsPathBuf) -> Result<Sysroot> {\n@@ -144,8 +146,9 @@ impl Sysroot {\n     }\n }\n \n-fn discover_sysroot_dir(current_dir: &AbsPath) -> Result<AbsPathBuf> {\n+fn discover_sysroot_dir(current_dir: &AbsPath, config: &CargoConfig) -> Result<AbsPathBuf> {\n     let mut rustc = Command::new(toolchain::rustc());\n+    rustc.envs(&config.extra_env);\n     rustc.current_dir(current_dir).args(&[\"--print\", \"sysroot\"]);\n     tracing::debug!(\"Discovering sysroot by {:?}\", rustc);\n     let stdout = utf8_stdout(rustc)?;\n@@ -155,6 +158,7 @@ fn discover_sysroot_dir(current_dir: &AbsPath) -> Result<AbsPathBuf> {\n fn discover_sysroot_src_dir(\n     sysroot_path: &AbsPathBuf,\n     current_dir: &AbsPath,\n+    config: &CargoConfig,\n ) -> Result<AbsPathBuf> {\n     if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n         let path = AbsPathBuf::try_from(path.as_str())\n@@ -170,6 +174,7 @@ fn discover_sysroot_src_dir(\n     get_rust_src(sysroot_path)\n         .or_else(|| {\n             let mut rustup = Command::new(toolchain::rustup());\n+            rustup.envs(&config.extra_env);\n             rustup.current_dir(current_dir).args(&[\"component\", \"add\", \"rust-src\"]);\n             utf8_stdout(rustup).ok()?;\n             get_rust_src(sysroot_path)"}, {"sha": "bea624bd54195e73651a0539919a4e80b03a4932", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -10,8 +10,8 @@ use paths::{AbsPath, AbsPathBuf};\n use serde::de::DeserializeOwned;\n \n use crate::{\n-    CargoWorkspace, CfgOverrides, ProjectJson, ProjectJsonData, ProjectWorkspace, Sysroot,\n-    WorkspaceBuildScripts,\n+    CargoConfig, CargoWorkspace, CfgOverrides, ProjectJson, ProjectJsonData, ProjectWorkspace,\n+    Sysroot, WorkspaceBuildScripts,\n };\n \n fn load_cargo(file: &str) -> CrateGraph {\n@@ -92,13 +92,17 @@ fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {\n }\n \n fn to_crate_graph(project_workspace: ProjectWorkspace) -> CrateGraph {\n-    project_workspace.to_crate_graph(&mut |_, _| Ok(Vec::new()), &mut {\n-        let mut counter = 0;\n-        move |_path| {\n-            counter += 1;\n-            Some(FileId(counter))\n-        }\n-    })\n+    project_workspace.to_crate_graph(\n+        &mut |_, _| Ok(Vec::new()),\n+        &mut {\n+            let mut counter = 0;\n+            move |_path| {\n+                counter += 1;\n+                Some(FileId(counter))\n+            }\n+        },\n+        &CargoConfig::default(),\n+    )\n }\n \n fn check_crate_graph(crate_graph: CrateGraph, expect: Expect) {"}, {"sha": "bc4ab45daeffc80a418711f3f0f03a4c7e8f73c1", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -156,11 +156,12 @@ impl ProjectWorkspace {\n                 })?;\n                 let project_location = project_json.parent().to_path_buf();\n                 let project_json = ProjectJson::new(&project_location, data);\n-                ProjectWorkspace::load_inline(project_json, config.target.as_deref())?\n+                ProjectWorkspace::load_inline(project_json, config.target.as_deref(), config)?\n             }\n             ProjectManifest::CargoToml(cargo_toml) => {\n                 let cargo_version = utf8_stdout({\n                     let mut cmd = Command::new(toolchain::cargo());\n+                    cmd.envs(&config.extra_env);\n                     cmd.arg(\"--version\");\n                     cmd\n                 })?;\n@@ -186,7 +187,7 @@ impl ProjectWorkspace {\n                 let sysroot = if config.no_sysroot {\n                     None\n                 } else {\n-                    Some(Sysroot::discover(cargo_toml.parent()).with_context(|| {\n+                    Some(Sysroot::discover(cargo_toml.parent(), config).with_context(|| {\n                         format!(\n                             \"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed?\",\n                             cargo_toml.display()\n@@ -196,7 +197,7 @@ impl ProjectWorkspace {\n \n                 let rustc_dir = match &config.rustc_source {\n                     Some(RustcSource::Path(path)) => ManifestPath::try_from(path.clone()).ok(),\n-                    Some(RustcSource::Discover) => Sysroot::discover_rustc(&cargo_toml),\n+                    Some(RustcSource::Discover) => Sysroot::discover_rustc(&cargo_toml, config),\n                     None => None,\n                 };\n \n@@ -216,7 +217,7 @@ impl ProjectWorkspace {\n                     None => None,\n                 };\n \n-                let rustc_cfg = rustc_cfg::get(Some(&cargo_toml), config.target.as_deref());\n+                let rustc_cfg = rustc_cfg::get(Some(&cargo_toml), config.target.as_deref(), config);\n \n                 let cfg_overrides = config.cfg_overrides();\n                 ProjectWorkspace::Cargo {\n@@ -237,6 +238,7 @@ impl ProjectWorkspace {\n     pub fn load_inline(\n         project_json: ProjectJson,\n         target: Option<&str>,\n+        config: &CargoConfig,\n     ) -> Result<ProjectWorkspace> {\n         let sysroot = match (project_json.sysroot.clone(), project_json.sysroot_src.clone()) {\n             (Some(sysroot), Some(sysroot_src)) => Some(Sysroot::load(sysroot, sysroot_src)?),\n@@ -258,7 +260,7 @@ impl ProjectWorkspace {\n             (None, None) => None,\n         };\n \n-        let rustc_cfg = rustc_cfg::get(None, target);\n+        let rustc_cfg = rustc_cfg::get(None, target, config);\n         Ok(ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg })\n     }\n \n@@ -268,8 +270,9 @@ impl ProjectWorkspace {\n                 .first()\n                 .and_then(|it| it.parent())\n                 .ok_or_else(|| format_err!(\"No detached files to load\"))?,\n+            &CargoConfig::default(),\n         )?;\n-        let rustc_cfg = rustc_cfg::get(None, None);\n+        let rustc_cfg = rustc_cfg::get(None, None, &CargoConfig::default());\n         Ok(ProjectWorkspace::DetachedFiles { files: detached_files, sysroot, rustc_cfg })\n     }\n \n@@ -416,6 +419,7 @@ impl ProjectWorkspace {\n         &self,\n         load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n+        config: &CargoConfig,\n     ) -> CrateGraph {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n \n@@ -426,6 +430,7 @@ impl ProjectWorkspace {\n                 load,\n                 project,\n                 sysroot,\n+                config,\n             ),\n             ProjectWorkspace::Cargo {\n                 cargo,\n@@ -464,6 +469,7 @@ fn project_json_to_crate_graph(\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n+    config: &CargoConfig,\n ) -> CrateGraph {\n     let mut crate_graph = CrateGraph::default();\n     let sysroot_deps = sysroot\n@@ -489,9 +495,9 @@ fn project_json_to_crate_graph(\n             };\n \n             let target_cfgs = match krate.target.as_deref() {\n-                Some(target) => {\n-                    cfg_cache.entry(target).or_insert_with(|| rustc_cfg::get(None, Some(target)))\n-                }\n+                Some(target) => cfg_cache\n+                    .entry(target)\n+                    .or_insert_with(|| rustc_cfg::get(None, Some(target), config)),\n                 None => &rustc_cfg,\n             };\n "}, {"sha": "80128e43fd3c50f6be8ce8aec7190ff8a4fe9df6", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -80,7 +80,8 @@ impl flags::AnalysisStats {\n             Some(build_scripts_sw.elapsed())\n         };\n \n-        let (host, vfs, _proc_macro) = load_workspace(workspace, &load_cargo_config)?;\n+        let (host, vfs, _proc_macro) =\n+            load_workspace(workspace, &cargo_config, &load_cargo_config)?;\n         let db = host.raw_database();\n         eprint!(\"{:<20} {}\", \"Database loaded:\", db_load_sw.elapsed());\n         eprint!(\" (metadata {}\", metadata_time);"}, {"sha": "88953096e2bcd5fff1e61984085458505319b62a", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -38,7 +38,7 @@ pub fn load_workspace_at(\n         workspace.set_build_scripts(build_scripts)\n     }\n \n-    load_workspace(workspace, load_config)\n+    load_workspace(workspace, cargo_config, load_config)\n }\n \n // Note: Since this function is used by external tools that use rust-analyzer as a library\n@@ -48,6 +48,7 @@ pub fn load_workspace_at(\n // these tools need access to `ProjectWorkspace`, too, which `load_workspace_at` hides.\n pub fn load_workspace(\n     ws: ProjectWorkspace,\n+    cargo_config: &CargoConfig,\n     load_config: &LoadCargoConfig,\n ) -> Result<(AnalysisHost, vfs::Vfs, Option<ProcMacroServer>)> {\n     let (sender, receiver) = unbounded();\n@@ -75,6 +76,7 @@ pub fn load_workspace(\n             vfs.set_file_contents(path.clone(), contents);\n             vfs.file_id(&path)\n         },\n+        cargo_config,\n     );\n \n     let project_folders = ProjectFolders::new(&[ws], &[]);"}, {"sha": "79577bf78c8f9d64096e6754017c19164ead274b", "filename": "crates/rust-analyzer/src/cli/lsif.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -299,7 +299,8 @@ impl flags::Lsif {\n \n         let workspace = ProjectWorkspace::load(manifest, &cargo_config, no_progress)?;\n \n-        let (host, vfs, _proc_macro) = load_workspace(workspace, &load_cargo_config)?;\n+        let (host, vfs, _proc_macro) =\n+            load_workspace(workspace, &cargo_config, &load_cargo_config)?;\n         let db = host.raw_database();\n         let analysis = host.analysis();\n "}, {"sha": "05c16bb39e3515960130a7b4d19307ee083be650", "filename": "crates/rust-analyzer/src/cli/scip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -40,7 +40,7 @@ impl flags::Scip {\n \n         let workspace = ProjectWorkspace::load(manifest, &cargo_config, no_progress)?;\n \n-        let (host, vfs, _) = load_workspace(workspace, &load_cargo_config)?;\n+        let (host, vfs, _) = load_workspace(workspace, &cargo_config, &load_cargo_config)?;\n         let db = host.raw_database();\n         let analysis = host.analysis();\n "}, {"sha": "2cf7a3c85b8d8f56ff1b1387410b44a7e19a50d3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -84,6 +84,9 @@ config_data! {\n         /// Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n         /// avoid checking unnecessary things.\n         cargo_buildScripts_useRustcWrapper: bool = \"true\",\n+        /// Extra environment variables that will be set when running cargo, rustc\n+        /// or other commands within the workspace. Useful for setting RUSTFLAGS.\n+        cargo_extraEnv: FxHashMap<String, String> = \"{}\",\n         /// List of features to activate.\n         ///\n         /// Set this to `\"all\"` to pass `--all-features` to cargo.\n@@ -105,6 +108,8 @@ config_data! {\n         checkOnSave_enable: bool                         = \"true\",\n         /// Extra arguments for `cargo check`.\n         checkOnSave_extraArgs: Vec<String>               = \"[]\",\n+        /// Extra environment variables that will be set when running `cargo check`.\n+        checkOnSave_extraEnv: FxHashMap<String, String> = \"{}\",\n         /// List of features to activate. Defaults to\n         /// `#rust-analyzer.cargo.features#`.\n         ///\n@@ -934,6 +939,16 @@ impl Config {\n         }\n     }\n \n+    pub fn extra_env(&self) -> &FxHashMap<String, String> {\n+        &self.data.cargo_extraEnv\n+    }\n+\n+    pub fn check_on_save_extra_env(&self) -> FxHashMap<String, String> {\n+        let mut extra_env = self.data.cargo_extraEnv.clone();\n+        extra_env.extend(self.data.checkOnSave_extraEnv.clone());\n+        extra_env\n+    }\n+\n     pub fn lru_capacity(&self) -> Option<usize> {\n         self.data.lru_capacity\n     }\n@@ -1003,6 +1018,7 @@ impl Config {\n             unset_test_crates: UnsetTestCrates::Only(self.data.cargo_unsetTest.clone()),\n             wrap_rustc_in_build_scripts: self.data.cargo_buildScripts_useRustcWrapper,\n             run_build_script_command: self.data.cargo_buildScripts_overrideCommand.clone(),\n+            extra_env: self.data.cargo_extraEnv.clone(),\n         }\n     }\n \n@@ -1028,7 +1044,11 @@ impl Config {\n             Some(args) if !args.is_empty() => {\n                 let mut args = args.clone();\n                 let command = args.remove(0);\n-                FlycheckConfig::CustomCommand { command, args }\n+                FlycheckConfig::CustomCommand {\n+                    command,\n+                    args,\n+                    extra_env: self.check_on_save_extra_env(),\n+                }\n             }\n             Some(_) | None => FlycheckConfig::CargoCommand {\n                 command: self.data.checkOnSave_command.clone(),\n@@ -1056,6 +1076,7 @@ impl Config {\n                     CargoFeatures::Listed(it) => it,\n                 },\n                 extra_args: self.data.checkOnSave_extraArgs.clone(),\n+                extra_env: self.check_on_save_extra_env(),\n             },\n         };\n         Some(flycheck_config)"}, {"sha": "d511ba347a111821f42b35f7f61637e194975062", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -1786,6 +1786,7 @@ fn run_rustfmt(\n     let mut command = match snap.config.rustfmt() {\n         RustfmtConfig::Rustfmt { extra_args, enable_range_formatting } => {\n             let mut cmd = process::Command::new(toolchain::rustfmt());\n+            cmd.envs(snap.config.extra_env());\n             cmd.args(extra_args);\n             // try to chdir to the file so we can respect `rustfmt.toml`\n             // FIXME: use `rustfmt --config-path` once\n@@ -1843,6 +1844,7 @@ fn run_rustfmt(\n         }\n         RustfmtConfig::CustomCommand { command, args } => {\n             let mut cmd = process::Command::new(command);\n+            cmd.envs(snap.config.extra_env());\n             cmd.args(args);\n             cmd\n         }"}, {"sha": "4cf5de46c485ed134f8d93469a046e5016ca199f", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -143,6 +143,7 @@ impl GlobalState {\n                             project_model::ProjectWorkspace::load_inline(\n                                 it.clone(),\n                                 cargo_config.target.as_deref(),\n+                                &cargo_config,\n                             )\n                         }\n                     })\n@@ -398,7 +399,11 @@ impl GlobalState {\n                         dummy_replacements.get(crate_name).map(|v| &**v).unwrap_or_default(),\n                     )\n                 };\n-                crate_graph.extend(ws.to_crate_graph(&mut load_proc_macro, &mut load));\n+                crate_graph.extend(ws.to_crate_graph(\n+                    &mut load_proc_macro,\n+                    &mut load,\n+                    &self.config.cargo(),\n+                ));\n             }\n             crate_graph\n         };"}, {"sha": "ffae3c105ceb828d66e7783b28c651441d272f93", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -46,6 +46,12 @@ cargo check --quiet --workspace --message-format=json --all-targets\n Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n avoid checking unnecessary things.\n --\n+[[rust-analyzer.cargo.extraEnv]]rust-analyzer.cargo.extraEnv (default: `{}`)::\n++\n+--\n+Extra environment variables that will be set when running cargo, rustc\n+or other commands within the workspace. Useful for setting RUSTFLAGS.\n+--\n [[rust-analyzer.cargo.features]]rust-analyzer.cargo.features (default: `[]`)::\n +\n --\n@@ -93,6 +99,11 @@ Run specified `cargo check` command for diagnostics on save.\n --\n Extra arguments for `cargo check`.\n --\n+[[rust-analyzer.checkOnSave.extraEnv]]rust-analyzer.checkOnSave.extraEnv (default: `{}`)::\n++\n+--\n+Extra environment variables that will be set when running `cargo check`.\n+--\n [[rust-analyzer.checkOnSave.features]]rust-analyzer.checkOnSave.features (default: `null`)::\n +\n --"}, {"sha": "394222e73ac3bd9a32047d005b63c4efc14598ef", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c407cc554ee8657081ae5357a05025d3eaca1184/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c407cc554ee8657081ae5357a05025d3eaca1184/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c407cc554ee8657081ae5357a05025d3eaca1184", "patch": "@@ -437,6 +437,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.cargo.extraEnv\": {\n+                    \"markdownDescription\": \"Extra environment variables that will be set when running cargo, rustc\\nor other commands within the workspace. Useful for setting RUSTFLAGS.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.cargo.features\": {\n                     \"markdownDescription\": \"List of features to activate.\\n\\nSet this to `\\\"all\\\"` to pass `--all-features` to cargo.\",\n                     \"default\": [],\n@@ -509,6 +514,11 @@\n                         \"type\": \"string\"\n                     }\n                 },\n+                \"rust-analyzer.checkOnSave.extraEnv\": {\n+                    \"markdownDescription\": \"Extra environment variables that will be set when running `cargo check`.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.checkOnSave.features\": {\n                     \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`.\\n\\nSet to `\\\"all\\\"` to pass `--all-features` to Cargo.\",\n                     \"default\": null,"}]}