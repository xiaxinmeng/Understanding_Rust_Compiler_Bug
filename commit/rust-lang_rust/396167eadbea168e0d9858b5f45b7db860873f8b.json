{"sha": "396167eadbea168e0d9858b5f45b7db860873f8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NjE2N2VhZGJlYTE2OGUwZDk4NThiNWY0NWI3ZGI4NjA4NzNmOGI=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-12T06:49:12Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-12T06:49:12Z"}, "message": "New testing approach for keywords", "tree": {"sha": "6e011295e5b153166cfbdc1825368b7dce8a419c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e011295e5b153166cfbdc1825368b7dce8a419c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/396167eadbea168e0d9858b5f45b7db860873f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/396167eadbea168e0d9858b5f45b7db860873f8b", "html_url": "https://github.com/rust-lang/rust/commit/396167eadbea168e0d9858b5f45b7db860873f8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/396167eadbea168e0d9858b5f45b7db860873f8b/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b4385f161134955fd729087f142d54c3a5e035", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b4385f161134955fd729087f142d54c3a5e035", "html_url": "https://github.com/rust-lang/rust/commit/a2b4385f161134955fd729087f142d54c3a5e035"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "7eddf76b97e4afcfec0d8162061efd5e750c688c", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/396167eadbea168e0d9858b5f45b7db860873f8b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396167eadbea168e0d9858b5f45b7db860873f8b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=396167eadbea168e0d9858b5f45b7db860873f8b", "patch": "@@ -76,8 +76,6 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     add_keyword(ctx, acc, \"else if\", \"else if $0 {}\", ctx.after_if);\n     add_keyword(ctx, acc, \"mod\", \"mod $0 {}\", ctx.is_new_item || ctx.block_expr_parent);\n     add_keyword(ctx, acc, \"mut\", \"mut \", ctx.bind_pat_parent || ctx.ref_pat_parent);\n-    add_keyword(ctx, acc, \"true\", \"true\", !ctx.is_new_item); // this should be defined properly\n-    add_keyword(ctx, acc, \"false\", \"false\", !ctx.is_new_item); // this should be defined properly\n     add_keyword(ctx, acc, \"const\", \"const \", ctx.is_new_item || ctx.block_expr_parent);\n     add_keyword(ctx, acc, \"type\", \"type \", ctx.is_new_item || ctx.block_expr_parent);\n     add_keyword(ctx, acc, \"static\", \"static \", ctx.is_new_item || ctx.block_expr_parent);\n@@ -89,7 +87,6 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     add_keyword(ctx, acc, \"break\", \"break\", ctx.in_loop_body && !ctx.can_be_stmt);\n     add_keyword(ctx, acc, \"pub\", \"pub \", ctx.is_new_item && !ctx.inside_trait);\n     add_keyword(ctx, acc, \"where\", \"where \", ctx.trait_as_prev_sibling || ctx.impl_as_prev_sibling);\n-    complete_use_tree_keyword(acc, ctx);\n \n     let fn_def = match &ctx.function_syntax {\n         Some(it) => it,\n@@ -114,13 +111,51 @@ fn complete_return(\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n+    use crate::{\n+        completion::{\n+            test_utils::{do_completion, do_completion_with_position},\n+            CompletionItem, CompletionKind,\n+        },\n+        CompletionItemKind,\n+    };\n     use insta::assert_debug_snapshot;\n+    use rustc_hash::FxHashSet;\n \n     fn do_keyword_completion(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Keyword)\n     }\n \n+    fn assert_completion_keyword(code: &str, keywords: &[(&str, &str)]) {\n+        let (position, completion_items) =\n+            do_completion_with_position(code, CompletionKind::Keyword);\n+        let mut set = FxHashSet::<(String, String)>::default();\n+        for (key, value) in keywords {\n+            set.insert(((*key).to_string(), (*value).to_string()));\n+        }\n+\n+        for item in completion_items {\n+            assert!(item.text_edit().len() == 1);\n+            assert!(item.kind() == Some(CompletionItemKind::Keyword));\n+            let atom = item.text_edit().iter().next().unwrap().clone();\n+            assert!(atom.delete.start() == position.offset);\n+            assert!(atom.delete.end() == position.offset);\n+            let pair = (item.label().to_string(), atom.insert);\n+            assert!(set.contains(&pair));\n+            set.remove(&pair);\n+        }\n+        assert!(set.is_empty());\n+    }\n+\n+    #[test]\n+    fn completes_keywords_in_use_stmt_new_approach() {\n+        assert_completion_keyword(\n+            r\"\n+        use <|>\n+        \",\n+            &[(\"crate\", \"crate::\"), (\"self\", \"self\"), (\"super\", \"super::\")],\n+        );\n+    }\n+\n     #[test]\n     fn completes_keywords_in_use_stmt() {\n         assert_debug_snapshot!("}, {"sha": "277d2904d27b70df73dc95fc00f7f7142af07f62", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/396167eadbea168e0d9858b5f45b7db860873f8b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396167eadbea168e0d9858b5f45b7db860873f8b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=396167eadbea168e0d9858b5f45b7db860873f8b", "patch": "@@ -3,7 +3,7 @@\n use crate::{\n     completion::{completion_item::CompletionKind, CompletionConfig},\n     mock_analysis::{analysis_and_position, single_file_with_position},\n-    CompletionItem,\n+    CompletionItem, FilePosition,\n };\n use hir::Semantics;\n use ra_syntax::{AstNode, NodeOrToken, SyntaxElement, SyntaxToken};\n@@ -12,11 +12,26 @@ pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionI\n     do_completion_with_options(code, kind, &CompletionConfig::default())\n }\n \n+pub(crate) fn do_completion_with_position(\n+    code: &str,\n+    kind: CompletionKind,\n+) -> (FilePosition, Vec<CompletionItem>) {\n+    do_completion_with_options_and_position(code, kind, &CompletionConfig::default())\n+}\n+\n pub(crate) fn do_completion_with_options(\n     code: &str,\n     kind: CompletionKind,\n     options: &CompletionConfig,\n ) -> Vec<CompletionItem> {\n+    do_completion_with_options_and_position(code, kind, options).1\n+}\n+\n+pub(crate) fn do_completion_with_options_and_position(\n+    code: &str,\n+    kind: CompletionKind,\n+    options: &CompletionConfig,\n+) -> (FilePosition, Vec<CompletionItem>) {\n     let (analysis, position) = if code.contains(\"//-\") {\n         analysis_and_position(code)\n     } else {\n@@ -27,7 +42,7 @@ pub(crate) fn do_completion_with_options(\n     let mut kind_completions: Vec<CompletionItem> =\n         completion_items.into_iter().filter(|c| c.completion_kind == kind).collect();\n     kind_completions.sort_by_key(|c| c.label().to_owned());\n-    kind_completions\n+    (position, kind_completions)\n }\n \n pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -> bool) {"}]}