{"sha": "74d7731c5b8f6557099b55378881699cd76175b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZDc3MzFjNWI4ZjY1NTcwOTliNTUzNzg4ODE2OTljZDc2MTc1YjM=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-03-22T04:45:38Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-03-22T04:53:25Z"}, "message": "2229 migration: Don't try resolve regions before writeback\n\nIn the analysis use `resolve_vars_if_possible` instead of `fully_resolve`,\nbecause we might not have performed regionck yet.\n\nFixes: #83176", "tree": {"sha": "f6335d69dcf62ea426813ac3ed7841096983b35e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6335d69dcf62ea426813ac3ed7841096983b35e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74d7731c5b8f6557099b55378881699cd76175b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74d7731c5b8f6557099b55378881699cd76175b3", "html_url": "https://github.com/rust-lang/rust/commit/74d7731c5b8f6557099b55378881699cd76175b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74d7731c5b8f6557099b55378881699cd76175b3/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97663b6690689379aa0493deb494dfe14627c46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/97663b6690689379aa0493deb494dfe14627c46b", "html_url": "https://github.com/rust-lang/rust/commit/97663b6690689379aa0493deb494dfe14627c46b"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "5a939cc24f5d6c1571489cb3877bc7345f6fcbf4", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/74d7731c5b8f6557099b55378881699cd76175b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d7731c5b8f6557099b55378881699cd76175b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=74d7731c5b8f6557099b55378881699cd76175b3", "patch": "@@ -30,7 +30,6 @@\n //! then mean that all later passes would have to check for these figments\n //! and report an error, and it just seems like more mess in the end.)\n \n-use super::writeback::Resolver;\n use super::FnCtxt;\n \n use crate::expr_use_visitor as euv;\n@@ -42,7 +41,6 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_infer::infer::UpvarRegion;\n use rustc_middle::hir::place::{Place, PlaceBase, PlaceWithHirId, Projection, ProjectionKind};\n use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeckResults, UpvarSubsts};\n use rustc_session::lint;\n use rustc_span::sym;\n@@ -167,7 +165,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n         if should_do_migration_analysis(self.tcx, closure_hir_id) {\n-            self.perform_2229_migration_anaysis(closure_def_id, capture_clause, span, body);\n+            self.perform_2229_migration_anaysis(closure_def_id, capture_clause, span);\n         }\n \n         // We now fake capture information for all variables that are mentioned within the closure\n@@ -467,13 +465,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         closure_def_id: DefId,\n         capture_clause: hir::CaptureBy,\n         span: Span,\n-        body: &'tcx hir::Body<'tcx>,\n     ) {\n         let need_migrations = self.compute_2229_migrations(\n             closure_def_id,\n             span,\n             capture_clause,\n-            body,\n             self.typeck_results.borrow().closure_min_captures.get(&closure_def_id),\n         );\n \n@@ -511,19 +507,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         closure_def_id: DefId,\n         closure_span: Span,\n         closure_clause: hir::CaptureBy,\n-        body: &'tcx hir::Body<'tcx>,\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n     ) -> Vec<hir::HirId> {\n-        fn resolve_ty<T: TypeFoldable<'tcx>>(\n-            fcx: &FnCtxt<'_, 'tcx>,\n-            span: Span,\n-            body: &'tcx hir::Body<'tcx>,\n-            ty: T,\n-        ) -> T {\n-            let mut resolver = Resolver::new(fcx, &span, body);\n-            ty.fold_with(&mut resolver)\n-        }\n-\n         let upvars = if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n             upvars\n         } else {\n@@ -533,7 +518,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut need_migrations = Vec::new();\n \n         for (&var_hir_id, _) in upvars.iter() {\n-            let ty = resolve_ty(self, closure_span, body, self.node_ty(var_hir_id));\n+            let ty = self.infcx.resolve_vars_if_possible(self.node_ty(var_hir_id));\n \n             if !ty.needs_drop(self.tcx, self.tcx.param_env(closure_def_id.expect_local())) {\n                 continue;"}, {"sha": "e472add6e80f394b1af8074afab69a84b45e3258", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d7731c5b8f6557099b55378881699cd76175b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d7731c5b8f6557099b55378881699cd76175b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=74d7731c5b8f6557099b55378881699cd76175b3", "patch": "@@ -675,7 +675,7 @@ impl Locatable for hir::HirId {\n \n /// The Resolver. This is the type folding engine that detects\n /// unresolved types and so forth.\n-crate struct Resolver<'cx, 'tcx> {\n+struct Resolver<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     span: &'cx dyn Locatable,\n@@ -686,7 +686,7 @@ crate struct Resolver<'cx, 'tcx> {\n }\n \n impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n-    crate fn new(\n+    fn new(\n         fcx: &'cx FnCtxt<'cx, 'tcx>,\n         span: &'cx dyn Locatable,\n         body: &'tcx hir::Body<'tcx>,"}, {"sha": "3a6af00254c5a847b9c7c69d444c7823736bfa26", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/issue-78720.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74d7731c5b8f6557099b55378881699cd76175b3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d7731c5b8f6557099b55378881699cd76175b3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs?ref=74d7731c5b8f6557099b55378881699cd76175b3", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+\n+#![warn(disjoint_capture_drop_reorder)]\n+\n+fn main() {\n+    if let a = \"\" {\n+    //~^ WARNING: irrefutable `if let` pattern\n+        drop(|_: ()| drop(a));\n+    }\n+}"}, {"sha": "7e5da949cb299df5ca9ccc24e661a75e91002679", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/issue-78720.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74d7731c5b8f6557099b55378881699cd76175b3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74d7731c5b8f6557099b55378881699cd76175b3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr?ref=74d7731c5b8f6557099b55378881699cd76175b3", "patch": "@@ -0,0 +1,15 @@\n+warning: irrefutable `if let` pattern\n+  --> $DIR/issue-78720.rs:6:5\n+   |\n+LL | /     if let a = \"\" {\n+LL | |\n+LL | |         drop(|_: ()| drop(a));\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n+   = note: this pattern will always match, so the `if let` is useless\n+   = help: consider replacing the `if let` with a `let`\n+\n+warning: 1 warning emitted\n+"}]}