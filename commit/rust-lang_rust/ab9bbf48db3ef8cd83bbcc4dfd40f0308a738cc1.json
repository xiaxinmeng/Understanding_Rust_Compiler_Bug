{"sha": "ab9bbf48db3ef8cd83bbcc4dfd40f0308a738cc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOWJiZjQ4ZGIzZWY4Y2Q4M2JiY2M0ZGZkNDBmMDMwOGE3MzhjYzE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-03T05:34:54Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-04T21:43:15Z"}, "message": "Avoid unnecessary `rust_2018` calls.\n\nThe commit combines two calls into one by saving the result in a local\nvariable. The commit also moves the check for `async` later, so that\nwhen a different keyword is present the `rust_2018` call will be avoided\ncompletely.", "tree": {"sha": "673421cb7edbb6948b0570a9b354753e300d17d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/673421cb7edbb6948b0570a9b354753e300d17d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab9bbf48db3ef8cd83bbcc4dfd40f0308a738cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9bbf48db3ef8cd83bbcc4dfd40f0308a738cc1", "html_url": "https://github.com/rust-lang/rust/commit/ab9bbf48db3ef8cd83bbcc4dfd40f0308a738cc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab9bbf48db3ef8cd83bbcc4dfd40f0308a738cc1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "425736dc976f786ea1da6eb4e18064477f88c5bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/425736dc976f786ea1da6eb4e18064477f88c5bc", "html_url": "https://github.com/rust-lang/rust/commit/425736dc976f786ea1da6eb4e18064477f88c5bc"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "3c65f8e0329d126142469d0cb39986b3eb4944d6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab9bbf48db3ef8cd83bbcc4dfd40f0308a738cc1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9bbf48db3ef8cd83bbcc4dfd40f0308a738cc1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ab9bbf48db3ef8cd83bbcc4dfd40f0308a738cc1", "patch": "@@ -2083,13 +2083,6 @@ impl<'a> Parser<'a> {\n                     hi = path.span;\n                     return Ok(self.mk_expr(lo.to(hi), ExprKind::Path(Some(qself), path), attrs));\n                 }\n-                if self.span.rust_2018() && self.check_keyword(kw::Async) {\n-                    return if self.is_async_block() { // check for `async {` and `async move {`\n-                        self.parse_async_block(attrs)\n-                    } else {\n-                        self.parse_lambda_expr(attrs)\n-                    };\n-                }\n                 if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n                     return self.parse_lambda_expr(attrs);\n                 }\n@@ -2161,6 +2154,16 @@ impl<'a> Parser<'a> {\n                     assert!(self.eat_keyword(kw::Try));\n                     return self.parse_try_block(lo, attrs);\n                 }\n+\n+                // Span::rust_2018() is somewhat expensive; don't get it repeatedly.\n+                let is_span_rust_2018 = self.span.rust_2018();\n+                if is_span_rust_2018 && self.check_keyword(kw::Async) {\n+                    return if self.is_async_block() { // check for `async {` and `async move {`\n+                        self.parse_async_block(attrs)\n+                    } else {\n+                        self.parse_lambda_expr(attrs)\n+                    };\n+                }\n                 if self.eat_keyword(kw::Return) {\n                     if self.token.can_begin_expr() {\n                         let e = self.parse_expr()?;\n@@ -2196,7 +2199,7 @@ impl<'a> Parser<'a> {\n                     db.span_label(self.span, \"expected expression\");\n                     db.note(\"variable declaration using `let` is a statement\");\n                     return Err(db);\n-                } else if self.span.rust_2018() && self.eat_keyword(kw::Await) {\n+                } else if is_span_rust_2018 && self.eat_keyword(kw::Await) {\n                     let (await_hi, e_kind) = self.parse_await_macro_or_alt(lo, self.prev_span)?;\n                     hi = await_hi;\n                     ex = e_kind;"}]}