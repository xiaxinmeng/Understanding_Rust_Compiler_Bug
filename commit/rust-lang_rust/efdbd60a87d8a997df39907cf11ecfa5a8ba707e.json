{"sha": "efdbd60a87d8a997df39907cf11ecfa5a8ba707e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZGJkNjBhODdkOGE5OTdkZjM5OTA3Y2YxMWVjZmE1YThiYTcwN2U=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-18T23:57:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:22Z"}, "message": "librustc: De-`@mut` the `impl_trait_cache`", "tree": {"sha": "d72bda95ac30a01306f25466fb11a860590d2100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d72bda95ac30a01306f25466fb11a860590d2100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efdbd60a87d8a997df39907cf11ecfa5a8ba707e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efdbd60a87d8a997df39907cf11ecfa5a8ba707e", "html_url": "https://github.com/rust-lang/rust/commit/efdbd60a87d8a997df39907cf11ecfa5a8ba707e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efdbd60a87d8a997df39907cf11ecfa5a8ba707e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f13adaa34fea513ea6d3b48e8f47eff93e47a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f13adaa34fea513ea6d3b48e8f47eff93e47a7", "html_url": "https://github.com/rust-lang/rust/commit/02f13adaa34fea513ea6d3b48e8f47eff93e47a7"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "0dd03b1237bafb25d02a40f8aa4d32a8eb6d3384", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/efdbd60a87d8a997df39907cf11ecfa5a8ba707e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdbd60a87d8a997df39907cf11ecfa5a8ba707e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=efdbd60a87d8a997df39907cf11ecfa5a8ba707e", "patch": "@@ -295,7 +295,7 @@ struct ctxt_ {\n     // A cache for the trait_methods() routine\n     trait_methods_cache: RefCell<HashMap<DefId, @~[@Method]>>,\n \n-    impl_trait_cache: @mut HashMap<ast::DefId, Option<@ty::TraitRef>>,\n+    impl_trait_cache: RefCell<HashMap<ast::DefId, Option<@ty::TraitRef>>>,\n \n     trait_refs: @mut HashMap<NodeId, @TraitRef>,\n     trait_defs: @mut HashMap<DefId, @TraitDef>,\n@@ -1001,7 +1001,7 @@ pub fn mk_ctxt(s: session::Session,\n         methods: RefCell::new(HashMap::new()),\n         trait_method_def_ids: RefCell::new(HashMap::new()),\n         trait_methods_cache: RefCell::new(HashMap::new()),\n-        impl_trait_cache: @mut HashMap::new(),\n+        impl_trait_cache: RefCell::new(HashMap::new()),\n         ty_param_defs: @mut HashMap::new(),\n         adjustments: @mut HashMap::new(),\n         normalized_cache: new_ty_hash(),\n@@ -3621,10 +3621,14 @@ pub fn trait_method_def_ids(cx: ctxt, id: ast::DefId) -> @~[DefId] {\n }\n \n pub fn impl_trait_ref(cx: ctxt, id: ast::DefId) -> Option<@TraitRef> {\n-    match cx.impl_trait_cache.find(&id) {\n-        Some(&ret) => { return ret; }\n-        None => {}\n+    {\n+        let mut impl_trait_cache = cx.impl_trait_cache.borrow_mut();\n+        match impl_trait_cache.get().find(&id) {\n+            Some(&ret) => { return ret; }\n+            None => {}\n+        }\n     }\n+\n     let ret = if id.crate == ast::LOCAL_CRATE {\n         debug!(\"(impl_trait_ref) searching for trait impl {:?}\", id);\n         match cx.items.find(&id.node) {\n@@ -3642,7 +3646,9 @@ pub fn impl_trait_ref(cx: ctxt, id: ast::DefId) -> Option<@TraitRef> {\n     } else {\n         csearch::get_impl_trait(cx, id)\n     };\n-    cx.impl_trait_cache.insert(id, ret);\n+\n+    let mut impl_trait_cache = cx.impl_trait_cache.borrow_mut();\n+    impl_trait_cache.get().insert(id, ret);\n     return ret;\n }\n "}]}