{"sha": "777df024b19d39e52aee479e7c79d767cf1499af", "node_id": "C_kwDOAAsO6NoAKDc3N2RmMDI0YjE5ZDM5ZTUyYWVlNDc5ZTdjNzlkNzY3Y2YxNDk5YWY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-29T08:37:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-29T08:37:26Z"}, "message": "Rollup merge of #108335 - compiler-errors:non_lifetime_binders-rustdoc, r=GuillaumeGomez\n\nrustdoc + rustdoc-json support for `feature(non_lifetime_binders)`\n\nMakes `for<T> T: Trait` and `for<const N: usize> ..` in where clause operate correctly.\n\nFixes #108158", "tree": {"sha": "9713f752b690a5f0410aafca207e06fc542d063a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9713f752b690a5f0410aafca207e06fc542d063a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/777df024b19d39e52aee479e7c79d767cf1499af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkI/jGCRBK7hj4Ov3rIwAAD3cIAE7D+EwrSuNL01QPHwKVK3Oh\nBAyAsGsP9rVSJkDVrKMsmG15ktjDiO9WqkaWiDqqNkG8EvHdGA73Vcx9xFIe3ls0\nx7lmatLBLNLql6Ci0biCwmWuF0CYV22kZFIRNT3z+dmupadCblyydAxgeP1BiUJD\nItKU8ECiLkIitCH0+64FNjkBFUK7DfmyP94XCVz99Z+rKSHSlpJ78D8ngbJb2H1Q\nBg/1UUqYqWq7i+oHtiW2JL4IWFvQ38d9jDyi399F1Yjh9L9Y+SC4Q1G2fRQDxAqt\nGjhdU9WucoX3Rwa2eQmB7KjpMAztu5AvLzkbtunILvR67Q2nwaWfy0OJVcsI9BA=\n=wOT7\n-----END PGP SIGNATURE-----\n", "payload": "tree 9713f752b690a5f0410aafca207e06fc542d063a\nparent 40cd0310db7f67867b305c28fb87b5b660e77df1\nparent be9fd75d32f9af0ebed5aad348891603f2e17ac2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1680079046 +0530\ncommitter GitHub <noreply@github.com> 1680079046 +0530\n\nRollup merge of #108335 - compiler-errors:non_lifetime_binders-rustdoc, r=GuillaumeGomez\n\nrustdoc + rustdoc-json support for `feature(non_lifetime_binders)`\n\nMakes `for<T> T: Trait` and `for<const N: usize> ..` in where clause operate correctly.\n\nFixes #108158\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/777df024b19d39e52aee479e7c79d767cf1499af", "html_url": "https://github.com/rust-lang/rust/commit/777df024b19d39e52aee479e7c79d767cf1499af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/777df024b19d39e52aee479e7c79d767cf1499af/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40cd0310db7f67867b305c28fb87b5b660e77df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/40cd0310db7f67867b305c28fb87b5b660e77df1", "html_url": "https://github.com/rust-lang/rust/commit/40cd0310db7f67867b305c28fb87b5b660e77df1"}, {"sha": "be9fd75d32f9af0ebed5aad348891603f2e17ac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/be9fd75d32f9af0ebed5aad348891603f2e17ac2", "html_url": "https://github.com/rust-lang/rust/commit/be9fd75d32f9af0ebed5aad348891603f2e17ac2"}], "stats": {"total": 102, "additions": 73, "deletions": 29}, "files": [{"sha": "2d247bd537bdf15ceabff3b3d2e1a2a430e76ba2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/777df024b19d39e52aee479e7c79d767cf1499af/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777df024b19d39e52aee479e7c79d767cf1499af/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=777df024b19d39e52aee479e7c79d767cf1499af", "patch": "@@ -31,7 +31,6 @@ use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, ExpnKind};\n \n-use std::assert_matches::assert_matches;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n use std::collections::BTreeMap;\n@@ -270,15 +269,7 @@ fn clean_where_predicate<'tcx>(\n             let bound_params = wbp\n                 .bound_generic_params\n                 .iter()\n-                .map(|param| {\n-                    // Higher-ranked params must be lifetimes.\n-                    // Higher-ranked lifetimes can't have bounds.\n-                    assert_matches!(\n-                        param,\n-                        hir::GenericParam { kind: hir::GenericParamKind::Lifetime { .. }, .. }\n-                    );\n-                    Lifetime(param.name.ident().name)\n-                })\n+                .map(|param| clean_generic_param(cx, None, param))\n                 .collect();\n             WherePredicate::BoundPredicate {\n                 ty: clean_ty(wbp.bounded_ty, cx),\n@@ -410,7 +401,7 @@ fn clean_projection_predicate<'tcx>(\n         .collect_referenced_late_bound_regions(&pred)\n         .into_iter()\n         .filter_map(|br| match br {\n-            ty::BrNamed(_, name) if br.is_named() => Some(Lifetime(name)),\n+            ty::BrNamed(_, name) if br.is_named() => Some(GenericParamDef::lifetime(name)),\n             _ => None,\n         })\n         .collect();\n@@ -508,7 +499,6 @@ fn clean_generic_param_def<'tcx>(\n         ty::GenericParamDefKind::Const { has_default } => (\n             def.name,\n             GenericParamDefKind::Const {\n-                did: def.def_id,\n                 ty: Box::new(clean_middle_ty(\n                     ty::Binder::dummy(\n                         cx.tcx\n@@ -578,7 +568,6 @@ fn clean_generic_param<'tcx>(\n         hir::GenericParamKind::Const { ty, default } => (\n             param.name.ident().name,\n             GenericParamDefKind::Const {\n-                did: param.def_id.to_def_id(),\n                 ty: Box::new(clean_ty(ty, cx)),\n                 default: default\n                     .map(|ct| Box::new(ty::Const::from_anon_const(cx.tcx, ct.def_id).to_string())),\n@@ -831,7 +820,7 @@ fn clean_ty_generics<'tcx>(\n                         p.get_bound_params()\n                             .into_iter()\n                             .flatten()\n-                            .map(|param| GenericParamDef::lifetime(param.0))\n+                            .cloned()\n                             .collect(),\n                     ));\n                 }"}, {"sha": "3c72b0bf9f2f6192fe50902ed8ce20a42b6ea1cb", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/777df024b19d39e52aee479e7c79d767cf1499af/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777df024b19d39e52aee479e7c79d767cf1499af/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=777df024b19d39e52aee479e7c79d767cf1499af", "patch": "@@ -49,11 +49,7 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> ThinVec<WP\n     equalities.retain(|(lhs, rhs, bound_params)| {\n         let Some((ty, trait_did, name)) = lhs.projection() else { return true; };\n         let Some((bounds, _)) = tybounds.get_mut(ty) else { return true };\n-        let bound_params = bound_params\n-            .into_iter()\n-            .map(|param| clean::GenericParamDef::lifetime(param.0))\n-            .collect();\n-        merge_bounds(cx, bounds, bound_params, trait_did, name, rhs)\n+        merge_bounds(cx, bounds, bound_params.clone(), trait_did, name, rhs)\n     });\n \n     // And finally, let's reassemble everything"}, {"sha": "7c68f60426b07083bccdb5d5f8c32093b243cbb6", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/777df024b19d39e52aee479e7c79d767cf1499af/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777df024b19d39e52aee479e7c79d767cf1499af/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=777df024b19d39e52aee479e7c79d767cf1499af", "patch": "@@ -1236,9 +1236,9 @@ impl Lifetime {\n \n #[derive(Clone, Debug)]\n pub(crate) enum WherePredicate {\n-    BoundPredicate { ty: Type, bounds: Vec<GenericBound>, bound_params: Vec<Lifetime> },\n+    BoundPredicate { ty: Type, bounds: Vec<GenericBound>, bound_params: Vec<GenericParamDef> },\n     RegionPredicate { lifetime: Lifetime, bounds: Vec<GenericBound> },\n-    EqPredicate { lhs: Box<Type>, rhs: Box<Term>, bound_params: Vec<Lifetime> },\n+    EqPredicate { lhs: Box<Type>, rhs: Box<Term>, bound_params: Vec<GenericParamDef> },\n }\n \n impl WherePredicate {\n@@ -1250,7 +1250,7 @@ impl WherePredicate {\n         }\n     }\n \n-    pub(crate) fn get_bound_params(&self) -> Option<&[Lifetime]> {\n+    pub(crate) fn get_bound_params(&self) -> Option<&[GenericParamDef]> {\n         match self {\n             Self::BoundPredicate { bound_params, .. } | Self::EqPredicate { bound_params, .. } => {\n                 Some(bound_params)\n@@ -1264,7 +1264,7 @@ impl WherePredicate {\n pub(crate) enum GenericParamDefKind {\n     Lifetime { outlives: Vec<Lifetime> },\n     Type { did: DefId, bounds: Vec<GenericBound>, default: Option<Box<Type>>, synthetic: bool },\n-    Const { did: DefId, ty: Box<Type>, default: Option<Box<String>> },\n+    Const { ty: Box<Type>, default: Option<Box<String>> },\n }\n \n impl GenericParamDefKind {"}, {"sha": "0895bb510d481f084e4c8c3de2d9ffb90ecfc299", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/777df024b19d39e52aee479e7c79d767cf1499af/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777df024b19d39e52aee479e7c79d767cf1499af/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=777df024b19d39e52aee479e7c79d767cf1499af", "patch": "@@ -307,13 +307,13 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n                                 write!(\n                                     f,\n                                     \"for<{:#}> {ty_cx:#}: {generic_bounds:#}\",\n-                                    comma_sep(bound_params.iter().map(|lt| lt.print()), true)\n+                                    comma_sep(bound_params.iter().map(|lt| lt.print(cx)), true)\n                                 )\n                             } else {\n                                 write!(\n                                     f,\n                                     \"for&lt;{}&gt; {ty_cx}: {generic_bounds}\",\n-                                    comma_sep(bound_params.iter().map(|lt| lt.print()), true)\n+                                    comma_sep(bound_params.iter().map(|lt| lt.print(cx)), true)\n                                 )\n                             }\n                         }"}, {"sha": "59d67f27b3006a600a68804bde363f394fdb835c", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/777df024b19d39e52aee479e7c79d767cf1499af/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777df024b19d39e52aee479e7c79d767cf1499af/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=777df024b19d39e52aee479e7c79d767cf1499af", "patch": "@@ -456,7 +456,7 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n                 default: default.map(|x| (*x).into_tcx(tcx)),\n                 synthetic,\n             },\n-            Const { did: _, ty, default } => GenericParamDefKind::Const {\n+            Const { ty, default } => GenericParamDefKind::Const {\n                 type_: (*ty).into_tcx(tcx),\n                 default: default.map(|x| *x),\n             },\n@@ -473,9 +473,35 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n                 bounds: bounds.into_tcx(tcx),\n                 generic_params: bound_params\n                     .into_iter()\n-                    .map(|x| GenericParamDef {\n-                        name: x.0.to_string(),\n-                        kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n+                    .map(|x| {\n+                        let name = x.name.to_string();\n+                        let kind = match x.kind {\n+                            clean::GenericParamDefKind::Lifetime { outlives } => {\n+                                GenericParamDefKind::Lifetime {\n+                                    outlives: outlives.iter().map(|lt| lt.0.to_string()).collect(),\n+                                }\n+                            }\n+                            clean::GenericParamDefKind::Type {\n+                                did: _,\n+                                bounds,\n+                                default,\n+                                synthetic,\n+                            } => GenericParamDefKind::Type {\n+                                bounds: bounds\n+                                    .into_iter()\n+                                    .map(|bound| bound.into_tcx(tcx))\n+                                    .collect(),\n+                                default: default.map(|ty| (*ty).into_tcx(tcx)),\n+                                synthetic,\n+                            },\n+                            clean::GenericParamDefKind::Const { ty, default } => {\n+                                GenericParamDefKind::Const {\n+                                    type_: (*ty).into_tcx(tcx),\n+                                    default: default.map(|d| *d),\n+                                }\n+                            }\n+                        };\n+                        GenericParamDef { name, kind }\n                     })\n                     .collect(),\n             },"}, {"sha": "ca5a008344af22a2b537f5f4e03fe8873ca4594e", "filename": "tests/rustdoc-json/non_lifetime_binders.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/777df024b19d39e52aee479e7c79d767cf1499af/tests%2Frustdoc-json%2Fnon_lifetime_binders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777df024b19d39e52aee479e7c79d767cf1499af/tests%2Frustdoc-json%2Fnon_lifetime_binders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fnon_lifetime_binders.rs?ref=777df024b19d39e52aee479e7c79d767cf1499af", "patch": "@@ -0,0 +1,24 @@\n+// ignore-tidy-linelength\n+\n+#![feature(non_lifetime_binders)]\n+#![allow(incomplete_features)]\n+\n+#![no_core]\n+#![feature(lang_items, no_core)]\n+\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+\n+pub trait Trait {}\n+\n+#[lang = \"phantom_data\"]\n+struct PhantomData<T_>;\n+\n+pub struct Wrapper<T_>(PhantomData<T_>);\n+\n+// @count \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates[0].bound_predicate.generic_params[*]\" 2\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates[0].bound_predicate.generic_params[0].name\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates[0].bound_predicate.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates[0].bound_predicate.generic_params[1].name\" \\\"T\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates[0].bound_predicate.generic_params[1].kind\" '{ \"type\": { \"bounds\": [], \"default\": null, \"synthetic\": false } }'\n+pub fn foo() where for<'a, T> &'a Wrapper<T>: Trait {}"}, {"sha": "da9a4e6a84d5a4664dde104be5879f6d2b209453", "filename": "tests/rustdoc/non_lifetime_binders.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/777df024b19d39e52aee479e7c79d767cf1499af/tests%2Frustdoc%2Fnon_lifetime_binders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777df024b19d39e52aee479e7c79d767cf1499af/tests%2Frustdoc%2Fnon_lifetime_binders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnon_lifetime_binders.rs?ref=777df024b19d39e52aee479e7c79d767cf1499af", "patch": "@@ -0,0 +1,9 @@\n+#![feature(non_lifetime_binders)]\n+#![allow(incomplete_features)]\n+\n+pub trait Trait {}\n+\n+pub struct Wrapper<T: ?Sized>(Box<T>);\n+\n+// @has non_lifetime_binders/fn.foo.html '//pre' \"fn foo()where for<'a, T> &'a Wrapper<T>: Trait\"\n+pub fn foo() where for<'a, T> &'a Wrapper<T>: Trait {}"}]}