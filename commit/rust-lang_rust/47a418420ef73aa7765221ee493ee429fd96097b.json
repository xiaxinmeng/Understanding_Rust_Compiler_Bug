{"sha": "47a418420ef73aa7765221ee493ee429fd96097b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YTQxODQyMGVmNzNhYTc3NjUyMjFlZTQ5M2VlNDI5ZmQ5NjA5N2I=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-12T23:54:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-12T23:54:34Z"}, "message": "Rollup merge of #87065 - FabianWolff:issue-87046, r=oli-obk\n\nFix ICE with unsized type in const pattern\n\nFixes #87046. The `deref_const()` query currently contains the following check:\nhttps://github.com/rust-lang/rust/blob/e9a387d6cf5961a7f2dcb671da3147bd413355c4/compiler/rustc_mir/src/const_eval/mod.rs#L191-L204\n\ni.e. this will cause an ICE for every unsized type except slices. An error is reported with my changes if such a type is used as a const pattern (this should not be a breaking change, since so far, this has caused an ICE).", "tree": {"sha": "77ca6a63446bf9542df8287617d9e153f779435d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ca6a63446bf9542df8287617d9e153f779435d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47a418420ef73aa7765221ee493ee429fd96097b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7NY7CRBK7hj4Ov3rIwAAXGUIAJqYDZjolc9M41P1ZWUpukUZ\nZN3VCtMpNXVaeALyvGhDsMSC01bKCwV1DeW+ppQ7Hy/MymhWfkadSU8E98m4+72E\nln8EqnHDOIql72WVGxQwdm6akh/ubcaPqkBe0gmc+dmg6D6/uxNxLZVyI5ZMwfft\npUNfMU6IxbOdOw2VjRZsyHMpCiHp63y6AaBHuSjQ1F+zokExO3WKVCXmkIe9z55c\nlR2ZVBO34IsvygT4ucJRbwPpY4my5JHcgFwCcWMG2aMVciNkt9BUOWO5AM6m7saM\nMBCB2iYJjClTB8qxdmJ907u06AuJU4f1c+5Cir2dftvOqUCDO/JKzoUwhRp39+k=\n=T9Ij\n-----END PGP SIGNATURE-----\n", "payload": "tree 77ca6a63446bf9542df8287617d9e153f779435d\nparent fab45bf4859d8c74fff421eafed0159fa3f47fde\nparent 79f0743b6f3e94551e5c7cef209abc042d5cea3b\nauthor Yuki Okushi <jtitor@2k36.org> 1626134074 +0900\ncommitter GitHub <noreply@github.com> 1626134074 +0900\n\nRollup merge of #87065 - FabianWolff:issue-87046, r=oli-obk\n\nFix ICE with unsized type in const pattern\n\nFixes #87046. The `deref_const()` query currently contains the following check:\nhttps://github.com/rust-lang/rust/blob/e9a387d6cf5961a7f2dcb671da3147bd413355c4/compiler/rustc_mir/src/const_eval/mod.rs#L191-L204\n\ni.e. this will cause an ICE for every unsized type except slices. An error is reported with my changes if such a type is used as a const pattern (this should not be a breaking change, since so far, this has caused an ICE).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47a418420ef73aa7765221ee493ee429fd96097b", "html_url": "https://github.com/rust-lang/rust/commit/47a418420ef73aa7765221ee493ee429fd96097b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47a418420ef73aa7765221ee493ee429fd96097b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab45bf4859d8c74fff421eafed0159fa3f47fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab45bf4859d8c74fff421eafed0159fa3f47fde", "html_url": "https://github.com/rust-lang/rust/commit/fab45bf4859d8c74fff421eafed0159fa3f47fde"}, {"sha": "79f0743b6f3e94551e5c7cef209abc042d5cea3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/79f0743b6f3e94551e5c7cef209abc042d5cea3b", "html_url": "https://github.com/rust-lang/rust/commit/79f0743b6f3e94551e5c7cef209abc042d5cea3b"}], "stats": {"total": 76, "additions": 65, "deletions": 11}, "files": [{"sha": "3859b22223c006bfc39d2d85282e0518efcbff74", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/47a418420ef73aa7765221ee493ee429fd96097b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a418420ef73aa7765221ee493ee429fd96097b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=47a418420ef73aa7765221ee493ee429fd96097b", "patch": "@@ -490,17 +490,29 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // convert the dereferenced constant to a pattern that is the sub-pattern of the\n                 // deref pattern.\n                 _ => {\n-                    let old = self.behind_reference.replace(true);\n-                    // In case there are structural-match violations somewhere in this subpattern,\n-                    // we fall back to a const pattern. If we do not do this, we may end up with\n-                    // a !structural-match constant that is not of reference type, which makes it\n-                    // very hard to invoke `PartialEq::eq` on it as a fallback.\n-                    let val = match self.recur(tcx.deref_const(self.param_env.and(cv)), false) {\n-                        Ok(subpattern) => PatKind::Deref { subpattern },\n-                        Err(_) => PatKind::Constant { value: cv },\n-                    };\n-                    self.behind_reference.set(old);\n-                    val\n+                    if !pointee_ty.is_sized(tcx.at(span), param_env) {\n+                        // `tcx.deref_const()` below will ICE with an unsized type\n+                        // (except slices, which are handled in a separate arm above).\n+                        let msg = format!(\"cannot use unsized non-slice type `{}` in constant patterns\", pointee_ty);\n+                        if self.include_lint_checks {\n+                            tcx.sess.span_err(span, &msg);\n+                        } else {\n+                            tcx.sess.delay_span_bug(span, &msg);\n+                        }\n+                        PatKind::Wild\n+                    } else {\n+                        let old = self.behind_reference.replace(true);\n+                        // In case there are structural-match violations somewhere in this subpattern,\n+                        // we fall back to a const pattern. If we do not do this, we may end up with\n+                        // a !structural-match constant that is not of reference type, which makes it\n+                        // very hard to invoke `PartialEq::eq` on it as a fallback.\n+                        let val = match self.recur(tcx.deref_const(self.param_env.and(cv)), false) {\n+                            Ok(subpattern) => PatKind::Deref { subpattern },\n+                            Err(_) => PatKind::Constant { value: cv },\n+                        };\n+                        self.behind_reference.set(old);\n+                        val\n+                    }\n                 }\n             },\n             ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::FnDef(..) => {"}, {"sha": "1f147439f8bc37e0853433fa932b5ddd59e168fb", "filename": "src/test/ui/consts/issue-87046.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/47a418420ef73aa7765221ee493ee429fd96097b/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a418420ef73aa7765221ee493ee429fd96097b/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.rs?ref=47a418420ef73aa7765221ee493ee429fd96097b", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for the ICE described in #87046.\n+\n+#![crate_type=\"lib\"]\n+#![allow(unreachable_patterns)]\n+#![feature(const_fn_union)]\n+\n+#[derive(PartialEq, Eq)]\n+#[repr(transparent)]\n+pub struct Username(str);\n+\n+pub const ROOT_USER: &Username = Username::from_str(\"root\");\n+\n+impl Username {\n+    pub const fn from_str(raw: &str) -> &Self {\n+        union Transmute<'a> {\n+            raw: &'a str,\n+            typed: &'a Username,\n+        }\n+\n+        unsafe { Transmute { raw }.typed }\n+    }\n+\n+    pub const fn as_str(&self) -> &str {\n+        &self.0\n+    }\n+\n+    pub fn is_root(&self) -> bool {\n+        match self {\n+            ROOT_USER => true,\n+            //~^ ERROR: cannot use unsized non-slice type `Username` in constant patterns\n+            _ => false,\n+        }\n+    }\n+}"}, {"sha": "5da7a9e2390007ab077636c8e70a45d340a502d6", "filename": "src/test/ui/consts/issue-87046.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47a418420ef73aa7765221ee493ee429fd96097b/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47a418420ef73aa7765221ee493ee429fd96097b/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-87046.stderr?ref=47a418420ef73aa7765221ee493ee429fd96097b", "patch": "@@ -0,0 +1,8 @@\n+error: cannot use unsized non-slice type `Username` in constant patterns\n+  --> $DIR/issue-87046.rs:29:13\n+   |\n+LL |             ROOT_USER => true,\n+   |             ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}