{"sha": "22872196f55d93d7af6b3c96e34bef3579f0c3fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyODcyMTk2ZjU1ZDkzZDdhZjZiM2M5NmUzNGJlZjM1NzlmMGMzZmM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-17T12:36:55Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:32Z"}, "message": "Factor out mplace offsetting into its own method", "tree": {"sha": "77e98ca0edb3bf5a31d21aee7930edd7053b4ff7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77e98ca0edb3bf5a31d21aee7930edd7053b4ff7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22872196f55d93d7af6b3c96e34bef3579f0c3fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22872196f55d93d7af6b3c96e34bef3579f0c3fc", "html_url": "https://github.com/rust-lang/rust/commit/22872196f55d93d7af6b3c96e34bef3579f0c3fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22872196f55d93d7af6b3c96e34bef3579f0c3fc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "972d798881cb470aa7a75b9ed7fa6c37117492e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/972d798881cb470aa7a75b9ed7fa6c37117492e0", "html_url": "https://github.com/rust-lang/rust/commit/972d798881cb470aa7a75b9ed7fa6c37117492e0"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "0fd1a993cbd9095017c1e53fea62ff5e05c783e4", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/22872196f55d93d7af6b3c96e34bef3579f0c3fc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22872196f55d93d7af6b3c96e34bef3579f0c3fc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=22872196f55d93d7af6b3c96e34bef3579f0c3fc", "patch": "@@ -159,6 +159,19 @@ impl<Tag> MemPlace<Tag> {\n             Some(meta) => Immediate::ScalarPair(self.ptr.into(), meta.into()),\n         }\n     }\n+\n+    pub fn offset(\n+        self,\n+        offset: Size,\n+        meta: Option<Scalar<Tag>>,\n+        cx: &impl HasDataLayout,\n+    ) -> EvalResult<'tcx, Self> {\n+        Ok(MemPlace {\n+            ptr: self.ptr.ptr_offset(offset, cx)?,\n+            align: self.align.restrict_for_offset(offset),\n+            meta,\n+        })\n+    }\n }\n \n impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n@@ -174,6 +187,19 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n         }\n     }\n \n+    pub fn offset(\n+        self,\n+        offset: Size,\n+        meta: Option<Scalar<Tag>>,\n+        layout: TyLayout<'tcx>,\n+        cx: &impl HasDataLayout,\n+    ) -> EvalResult<'tcx, Self> {\n+        Ok(MPlaceTy {\n+            mplace: self.mplace.offset(offset, meta, cx)?,\n+            layout,\n+        })\n+    }\n+\n     #[inline]\n     fn from_aligned_ptr(ptr: Pointer<Tag>, layout: TyLayout<'tcx>) -> Self {\n         MPlaceTy { mplace: MemPlace::from_ptr(ptr, layout.align.abi), layout }\n@@ -367,13 +393,9 @@ where\n             (None, offset)\n         };\n \n-        let ptr = base.ptr.ptr_offset(offset, self)?;\n-        let align = base.align\n-            // We do not look at `base.layout.align` nor `field_layout.align`, unlike\n-            // codegen -- mostly to see if we can get away with that\n-            .restrict_for_offset(offset); // must be last thing that happens\n-\n-        Ok(MPlaceTy { mplace: MemPlace { ptr, align, meta }, layout: field_layout })\n+        // We do not look at `base.layout.align` nor `field_layout.align`, unlike\n+        // codegen -- mostly to see if we can get away with that\n+        base.offset(offset, meta, field_layout, self)\n     }\n \n     // Iterates over all fields of an array. Much more efficient than doing the\n@@ -391,14 +413,7 @@ where\n         };\n         let layout = base.layout.field(self, 0)?;\n         let dl = &self.tcx.data_layout;\n-        Ok((0..len).map(move |i| {\n-            let ptr = base.ptr.ptr_offset(i * stride, dl)?;\n-            let align = base.align.restrict_for_offset(i * stride);\n-            Ok(MPlaceTy {\n-                mplace: MemPlace { ptr, align, meta: None },\n-                layout\n-            })\n-        }))\n+        Ok((0..len).map(move |i| base.offset(i * stride, None, layout, dl)))\n     }\n \n     pub fn mplace_subslice(\n@@ -417,8 +432,6 @@ where\n                 stride * from,\n             _ => bug!(\"Unexpected layout of index access: {:#?}\", base.layout),\n         };\n-        let ptr = base.ptr.ptr_offset(from_offset, self)?;\n-        let align = base.align.restrict_for_offset(from_offset);\n \n         // Compute meta and new layout\n         let inner_len = len - to - from;\n@@ -435,11 +448,7 @@ where\n                 bug!(\"cannot subslice non-array type: `{:?}`\", base.layout.ty),\n         };\n         let layout = self.layout_of(ty)?;\n-\n-        Ok(MPlaceTy {\n-            mplace: MemPlace { ptr, align, meta },\n-            layout\n-        })\n+        base.offset(from_offset, meta, layout, self)\n     }\n \n     pub fn mplace_downcast("}]}