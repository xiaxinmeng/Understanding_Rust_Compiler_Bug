{"sha": "3f89ca1a32b666ca5733850ef26af26d9dc27d2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmODljYTFhMzJiNjY2Y2E1NzMzODUwZWYyNmFmMjZkOWRjMjdkMmU=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-28T07:59:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-28T07:59:06Z"}, "message": "Rollup merge of #84529 - richkadel:issue-84180, r=tmandry\n\nImprove coverage spans for chained function calls\n\nFixes: #84180\n\nFor chained function calls separated by the `?` try operator, the\nfunction call following the try operator produced a MIR `Call` span that\nmatched the span of the first call. The `?` try operator started a new\nspan, so the second call got no span.\n\nIt turns out the MIR `Call` terminator has a `func` `Operand`\nfor the `Constant` representing the function name, and the function\nname's Span can be used to reset the starting position of the span.\n\nr? `@tmandry`\ncc: `@wesleywiser`", "tree": {"sha": "9217a1ff06a11005167bf77eea3c0425d86c7a45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9217a1ff06a11005167bf77eea3c0425d86c7a45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f89ca1a32b666ca5733850ef26af26d9dc27d2e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgiRXLCRBK7hj4Ov3rIwAA48MIAIAAKjdPHmaH9jg0pbXACAXk\nLzyqO3Y4PXulvTvanCxV0Ne24vSqnFVyGWyz4XjIq5Lr8W2XSy4EPswtgB7fJZWF\nSzStOE48vqwR4TY0vlURFyhUgnlilz9NUoVxAgOIoSewIFp0ZVQoZAOwrAucptd5\n8HCSBoCEOkhCPm1bYAhy5ZGMiJKdq09cnbhB1hrre2vUT9ODj/lCHjygBgdfFP+2\nxamNqPtrwi3FgIHZlcGIDKnsovFFTTMi3TObAmtAUuf6fJtGl1lp0UzTETpJ1bAE\n5HucN1Ks3xoItsl73fDjKPr5ZaeZhxue5k1XgJSpl1yjXy94sZLOk53kcGzVX/M=\n=JxPa\n-----END PGP SIGNATURE-----\n", "payload": "tree 9217a1ff06a11005167bf77eea3c0425d86c7a45\nparent 537544b1061467ee4b74ef7f552fab3d513e5caf\nparent 41667e853489c54b6e7960871aaa124ce0a5437b\nauthor Yuki Okushi <jtitor@2k36.org> 1619596746 +0900\ncommitter GitHub <noreply@github.com> 1619596746 +0900\n\nRollup merge of #84529 - richkadel:issue-84180, r=tmandry\n\nImprove coverage spans for chained function calls\n\nFixes: #84180\n\nFor chained function calls separated by the `?` try operator, the\nfunction call following the try operator produced a MIR `Call` span that\nmatched the span of the first call. The `?` try operator started a new\nspan, so the second call got no span.\n\nIt turns out the MIR `Call` terminator has a `func` `Operand`\nfor the `Constant` representing the function name, and the function\nname's Span can be used to reset the starting position of the span.\n\nr? `@tmandry`\ncc: `@wesleywiser`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f89ca1a32b666ca5733850ef26af26d9dc27d2e", "html_url": "https://github.com/rust-lang/rust/commit/3f89ca1a32b666ca5733850ef26af26d9dc27d2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f89ca1a32b666ca5733850ef26af26d9dc27d2e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "537544b1061467ee4b74ef7f552fab3d513e5caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/537544b1061467ee4b74ef7f552fab3d513e5caf", "html_url": "https://github.com/rust-lang/rust/commit/537544b1061467ee4b74ef7f552fab3d513e5caf"}, {"sha": "41667e853489c54b6e7960871aaa124ce0a5437b", "url": "https://api.github.com/repos/rust-lang/rust/commits/41667e853489c54b6e7960871aaa124ce0a5437b", "html_url": "https://github.com/rust-lang/rust/commit/41667e853489c54b6e7960871aaa124ce0a5437b"}], "stats": {"total": 185, "additions": 182, "deletions": 3}, "files": [{"sha": "2041109eb385fb586f593baa1070e10254b574d2", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f89ca1a32b666ca5733850ef26af26d9dc27d2e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f89ca1a32b666ca5733850ef26af26d9dc27d2e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=3f89ca1a32b666ca5733850ef26af26d9dc27d2e", "patch": "@@ -717,11 +717,21 @@ pub(super) fn filtered_terminator_span(\n         | TerminatorKind::FalseEdge { .. }\n         | TerminatorKind::Goto { .. } => None,\n \n+        // Call `func` operand can have a more specific span when part of a chain of calls\n+        | TerminatorKind::Call { ref func, .. } => {\n+            let mut span = terminator.source_info.span;\n+            if let mir::Operand::Constant(box constant) = func {\n+                if constant.span.lo() > span.lo() {\n+                    span = span.with_lo(constant.span.lo());\n+                }\n+            }\n+            Some(function_source_span(span, body_span))\n+        }\n+\n         // Retain spans from all other terminators\n         TerminatorKind::Resume\n         | TerminatorKind::Abort\n         | TerminatorKind::Return\n-        | TerminatorKind::Call { .. }\n         | TerminatorKind::Yield { .. }\n         | TerminatorKind::GeneratorDrop\n         | TerminatorKind::FalseUnwind { .. }"}, {"sha": "9fca52451ed57fbcbb03fe1ea16df0384fc7ed71", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.try_error_result.txt", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/3f89ca1a32b666ca5733850ef26af26d9dc27d2e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3f89ca1a32b666ca5733850ef26af26d9dc27d2e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.try_error_result.txt?ref=3f89ca1a32b666ca5733850ef26af26d9dc27d2e", "patch": "@@ -9,7 +9,7 @@\n     9|       |    }\n    10|      6|}\n    11|       |\n-   12|      1|fn main() -> Result<(),()> {\n+   12|      1|fn test1() -> Result<(),()> {\n    13|      1|    let mut\n    14|      1|        countdown = 10\n    15|       |    ;\n@@ -35,4 +35,91 @@\n    34|       |    }\n    35|      0|    Ok(())\n    36|      1|}\n+   37|       |\n+   38|       |struct Thing1;\n+   39|       |impl Thing1 {\n+   40|     18|    fn get_thing_2(&self, return_error: bool) -> Result<Thing2,()> {\n+   41|     18|        if return_error {\n+   42|      1|            Err(())\n+   43|       |        } else {\n+   44|     17|            Ok(Thing2{})\n+   45|       |        }\n+   46|     18|    }\n+   47|       |}\n+   48|       |\n+   49|       |struct Thing2;\n+   50|       |impl Thing2 {\n+   51|     17|    fn call(&self, return_error: bool) -> Result<u32,()> {\n+   52|     17|        if return_error {\n+   53|      2|            Err(())\n+   54|       |        } else {\n+   55|     15|            Ok(57)\n+   56|       |        }\n+   57|     17|    }\n+   58|       |}\n+   59|       |\n+   60|      1|fn test2() -> Result<(),()> {\n+   61|      1|    let thing1 = Thing1{};\n+   62|      1|    let mut\n+   63|      1|        countdown = 10\n+   64|       |    ;\n+   65|       |    for\n+   66|      6|        _\n+   67|       |    in\n+   68|      6|        0..10\n+   69|       |    {\n+   70|      6|        countdown\n+   71|      6|            -= 1\n+   72|      6|        ;\n+   73|      6|        if\n+   74|      6|            countdown < 5\n+   75|       |        {\n+   76|      1|            thing1.get_thing_2(/*err=*/ false)?.call(/*err=*/ true).expect_err(\"call should fail\");\n+                                                            ^0\n+   77|      1|            thing1\n+   78|      1|                .\n+   79|      1|                get_thing_2(/*return_error=*/ false)\n+   80|      0|                ?\n+   81|       |                .\n+   82|      1|                call(/*return_error=*/ true)\n+   83|      1|                .\n+   84|      1|                expect_err(\n+   85|      1|                    \"call should fail\"\n+   86|      1|                );\n+   87|      1|            let val = thing1.get_thing_2(/*return_error=*/ true)?.call(/*return_error=*/ true)?;\n+                              ^0                                                ^0                          ^0\n+   88|      0|            assert_eq!(val, 57);\n+   89|      0|            let val = thing1.get_thing_2(/*return_error=*/ true)?.call(/*return_error=*/ false)?;\n+   90|      0|            assert_eq!(val, 57);\n+   91|       |        }\n+   92|       |        else\n+   93|       |        {\n+   94|      5|            let val = thing1.get_thing_2(/*return_error=*/ false)?.call(/*return_error=*/ false)?;\n+                                                                               ^0                             ^0\n+   95|      5|            assert_eq!(val, 57);\n+   96|      5|            let val = thing1\n+   97|      5|                .get_thing_2(/*return_error=*/ false)?\n+                                                                   ^0\n+   98|      5|                .call(/*return_error=*/ false)?;\n+                                                            ^0\n+   99|      5|            assert_eq!(val, 57);\n+  100|      5|            let val = thing1\n+  101|      5|                .get_thing_2(/*return_error=*/ false)\n+  102|      0|                ?\n+  103|      5|                .call(/*return_error=*/ false)\n+  104|      0|                ?\n+  105|       |                ;\n+  106|      5|            assert_eq!(val, 57);\n+  107|       |        }\n+  108|       |    }\n+  109|      0|    Ok(())\n+  110|      1|}\n+  111|       |\n+  112|      1|fn main() -> Result<(),()> {\n+  113|      1|    test1().expect_err(\"test1 should fail\");\n+  114|      1|    test2()\n+  115|      1|    ?\n+  116|       |    ;\n+  117|      0|    Ok(())\n+  118|      1|}\n "}, {"sha": "cd0acf7230222022229660ebdaccb8357afe9ca8", "filename": "src/test/run-make-fulldeps/coverage/try_error_result.rs", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/3f89ca1a32b666ca5733850ef26af26d9dc27d2e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftry_error_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f89ca1a32b666ca5733850ef26af26d9dc27d2e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftry_error_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftry_error_result.rs?ref=3f89ca1a32b666ca5733850ef26af26d9dc27d2e", "patch": "@@ -9,7 +9,7 @@ fn call(return_error: bool) -> Result<(),()> {\n     }\n }\n \n-fn main() -> Result<(),()> {\n+fn test1() -> Result<(),()> {\n     let mut\n         countdown = 10\n     ;\n@@ -34,3 +34,85 @@ fn main() -> Result<(),()> {\n     }\n     Ok(())\n }\n+\n+struct Thing1;\n+impl Thing1 {\n+    fn get_thing_2(&self, return_error: bool) -> Result<Thing2,()> {\n+        if return_error {\n+            Err(())\n+        } else {\n+            Ok(Thing2{})\n+        }\n+    }\n+}\n+\n+struct Thing2;\n+impl Thing2 {\n+    fn call(&self, return_error: bool) -> Result<u32,()> {\n+        if return_error {\n+            Err(())\n+        } else {\n+            Ok(57)\n+        }\n+    }\n+}\n+\n+fn test2() -> Result<(),()> {\n+    let thing1 = Thing1{};\n+    let mut\n+        countdown = 10\n+    ;\n+    for\n+        _\n+    in\n+        0..10\n+    {\n+        countdown\n+            -= 1\n+        ;\n+        if\n+            countdown < 5\n+        {\n+            thing1.get_thing_2(/*err=*/ false)?.call(/*err=*/ true).expect_err(\"call should fail\");\n+            thing1\n+                .\n+                get_thing_2(/*return_error=*/ false)\n+                ?\n+                .\n+                call(/*return_error=*/ true)\n+                .\n+                expect_err(\n+                    \"call should fail\"\n+                );\n+            let val = thing1.get_thing_2(/*return_error=*/ true)?.call(/*return_error=*/ true)?;\n+            assert_eq!(val, 57);\n+            let val = thing1.get_thing_2(/*return_error=*/ true)?.call(/*return_error=*/ false)?;\n+            assert_eq!(val, 57);\n+        }\n+        else\n+        {\n+            let val = thing1.get_thing_2(/*return_error=*/ false)?.call(/*return_error=*/ false)?;\n+            assert_eq!(val, 57);\n+            let val = thing1\n+                .get_thing_2(/*return_error=*/ false)?\n+                .call(/*return_error=*/ false)?;\n+            assert_eq!(val, 57);\n+            let val = thing1\n+                .get_thing_2(/*return_error=*/ false)\n+                ?\n+                .call(/*return_error=*/ false)\n+                ?\n+                ;\n+            assert_eq!(val, 57);\n+        }\n+    }\n+    Ok(())\n+}\n+\n+fn main() -> Result<(),()> {\n+    test1().expect_err(\"test1 should fail\");\n+    test2()\n+    ?\n+    ;\n+    Ok(())\n+}"}]}