{"sha": "0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMmYyY2FiYmUzZmJlNmUxOGNiZjBmOGExNzRiN2Q0Nzg5ZmM5Mzg=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-22T21:10:32Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-22T21:10:32Z"}, "message": "Send is no longer a subkind of copy. This allows for sendable, but non-copyable resources. Closes #2420.", "tree": {"sha": "ce84fbb044a908ff5c98fd1fa0e6990159126177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce84fbb044a908ff5c98fd1fa0e6990159126177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "html_url": "https://github.com/rust-lang/rust/commit/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f213c1f3a817ba2c0a43c0b27215146b7a279f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/f213c1f3a817ba2c0a43c0b27215146b7a279f65", "html_url": "https://github.com/rust-lang/rust/commit/f213c1f3a817ba2c0a43c0b27215146b7a279f65"}], "stats": {"total": 91, "additions": 43, "deletions": 48}, "files": [{"sha": "e0321b452878c63843cde37a0ba8316467084a78", "filename": "src/libcore/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "patch": "@@ -28,7 +28,7 @@ enum future<A> = {\n };\n \n #[doc = \"Methods on the `future` type\"]\n-impl future<A:send> for future<A> {\n+impl future<A:copy send> for future<A> {\n \n     fn get() -> A {\n         #[doc = \"Get the value of the future\"];"}, {"sha": "cf2c10aa998d19c80eb405b681c5f9cb85a9442a", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "patch": "@@ -20,7 +20,7 @@ for *at least* that period of time.\n * ch - a channel of type T to send a `val` on\n * val - a value of type T to send over the provided `ch`\n \"]\n-fn delayed_send<T: send>(msecs: uint, ch: comm::chan<T>, val: T) {\n+fn delayed_send<T: copy send>(msecs: uint, ch: comm::chan<T>, val: T) {\n     task::spawn() {||\n         unsafe {\n             let timer_done_po = comm::port::<()>();\n@@ -94,7 +94,9 @@ An `option<T>` representing the outcome of the call. If the call `recv`'d on\n the provided port in the allotted timeout period, then the result will be a\n `some(T)`. If not, then `none` will be returned.\n \"]\n-fn recv_timeout<T: send>(msecs: uint, wait_po: comm::port<T>) -> option<T> {\n+fn recv_timeout<T: copy send>(msecs: uint, wait_po: comm::port<T>)\n+    -> option<T> {\n+\n     let timeout_po = comm::port::<()>();\n     let timeout_ch = comm::chan(timeout_po);\n     delayed_send(msecs, timeout_ch, ());"}, {"sha": "effa593109cd1c0aaf4b77d8dbb89372141ecc1e", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "patch": "@@ -24,10 +24,12 @@ import freevars::freevar_entry;\n // types.\n \n fn kind_to_str(k: kind) -> str {\n-    if k == kind_sendable() { \"sendable\" }\n-    else if k == kind_copyable() { \"copyable\" }\n-    else if k == kind_noncopyable() { \"noncopyable\" }\n-    else { fail \"unknown kind\" }\n+    alt (ty::kind_can_be_copied(k), ty::kind_can_be_sent(k)) {\n+      (false, false) { \"noncopyable\" }\n+      (false, true)  { \"sendable\" }\n+      (true,  false) { \"copyable\" }\n+      (true,  true)  { \"copy-sendable\" }\n+    }\n }\n \n type rval_map = std::map::hashmap<node_id, ()>;"}, {"sha": "52cee2fd07b67d853531f72e655f2539a0c1d24a", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "patch": "@@ -425,9 +425,9 @@ fn param_bounds_to_kind(bounds: param_bounds) -> kind {\n     for vec::each(*bounds) {|bound|\n         alt bound {\n           bound_copy {\n-            if kind != kind_sendable() { kind = kind_copyable(); }\n+            kind = lower_kind(kind, kind_copyable());\n           }\n-          bound_send { kind = kind_sendable(); }\n+          bound_send { kind = lower_kind(kind, kind_send_only()); }\n           _ {}\n         }\n     }\n@@ -1277,6 +1277,10 @@ fn kind_sendable() -> kind {\n     kind_(KIND_MASK_COPY | KIND_MASK_SEND)\n }\n \n+fn kind_send_only() -> kind {\n+    kind_(KIND_MASK_SEND)\n+}\n+\n // Using these query functons is preferable to direct comparison or matching\n // against the kind constants, as we may modify the kind hierarchy in the\n // future.\n@@ -1303,7 +1307,7 @@ fn kind_lteq(a: kind, b: kind) -> bool {\n }\n \n fn lower_kind(a: kind, b: kind) -> kind {\n-    if kind_lteq(a, b) { a } else { b }\n+    kind_(*a | *b)\n }\n \n #[test]\n@@ -1402,7 +1406,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n         }\n         lowest\n       }\n-      ty_res(did, inner, tps) { kind_noncopyable() }\n+      ty_res(did, inner, tps) { kind_send_only() }\n       ty_param(_, did) {\n           param_bounds_to_kind(cx.ty_param_bounds.get(did.node))\n       }"}, {"sha": "b4921771e04ef2c16bb5990c78cece7c9b269390", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "patch": "@@ -85,7 +85,7 @@ fn mk_fold<T:copy>(\n     })\n }\n \n-fn default_any_fold<T:send>(ctxt: T) -> fold<T> {\n+fn default_any_fold<T:send copy>(ctxt: T) -> fold<T> {\n     mk_fold(\n         ctxt,\n         {|f, d| default_seq_fold_doc(f, d)},\n@@ -121,7 +121,7 @@ fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n     )\n }\n \n-fn default_par_fold<T:send>(ctxt: T) -> fold<T> {\n+fn default_par_fold<T:send copy>(ctxt: T) -> fold<T> {\n     mk_fold(\n         ctxt,\n         {|f, d| default_seq_fold_doc(f, d)},"}, {"sha": "3e5a501e69130984ea3c3e4f61d4e7a6c93c84c1", "filename": "src/test/compile-fail/kindck-nonsendable-2.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f213c1f3a817ba2c0a43c0b27215146b7a279f65/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f213c1f3a817ba2c0a43c0b27215146b7a279f65/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-2.rs?ref=f213c1f3a817ba2c0a43c0b27215146b7a279f65", "patch": "@@ -1,17 +0,0 @@\n-fn foo(_x: r) {}\n-\n-resource r(_x: ()) {}\n-\n-fn main() {\n-    let x = r(());\n-    let _ = fn~() {\n-        // Error even though this is the last use:\n-        foo(x); //! ERROR not a sendable value\n-    };\n-\n-    let x = r(());\n-    let _ = fn@() {\n-        // OK in fn@ because this is the last use:\n-        foo(x);\n-    };\n-}\n\\ No newline at end of file"}, {"sha": "1a07b3f1de0e09a058ade143289db424ab92efc3", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f213c1f3a817ba2c0a43c0b27215146b7a279f65/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f213c1f3a817ba2c0a43c0b27215146b7a279f65/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=f213c1f3a817ba2c0a43c0b27215146b7a279f65", "patch": "@@ -1,16 +0,0 @@\n-// error-pattern: copying a noncopyable value\n-\n-resource r(i: @mut int) {\n-    *i = *i + 1;\n-}\n-\n-fn main() {\n-    let i = @mut 0;\n-    {\n-        // Can't do this copy\n-        let x = ~~~{y: r(i)};\n-        let z = x;\n-        log(debug, x);\n-    }\n-    log(error, *i);\n-}\n\\ No newline at end of file"}, {"sha": "ab599a44c0b183c8fa57748bda0f839f33fe2194", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "patch": "@@ -13,7 +13,7 @@ fn make_cycle<A:copy>(a: A) {\n     g.rec = some(g);\n }\n \n-fn f<A:send,B:send>(a: A, b: B) -> fn@() -> (A, B) {\n+fn f<A:send copy, B:send copy>(a: A, b: B) -> fn@() -> (A, B) {\n     fn@() -> (A, B) { (a, b) }\n }\n "}, {"sha": "4d2811da7b1454bfb8e8b16196b971a3baa00e24", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn id<T: send>(t: T) -> T { ret t; }\n+fn id<T: copy send>(t: T) -> T { ret t; }\n \n fn main() {\n     let expected = ~100;"}, {"sha": "666f253c9a12d04f3fdccf8d2a824611b52fc4f8", "filename": "src/test/run-pass/send-resource.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=0b2f2cabbe3fbe6e18cbf0f8a174b7d4789fc938", "patch": "@@ -0,0 +1,20 @@\n+import task::*;\n+import comm::*;\n+\n+resource test(_f: int) {\n+    // Do nothing\n+}\n+\n+fn main() {\n+    let p = port();\n+    let c = chan(p);\n+\n+    spawn() {||\n+        let p = port();\n+        c.send(chan(p));\n+\n+        let _r = p.recv();\n+    }\n+\n+    p.recv().send(test(42));\n+}\n\\ No newline at end of file"}]}