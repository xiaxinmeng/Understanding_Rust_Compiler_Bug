{"sha": "8f552ab35222b7ea571f7ea9357db41489ae2247", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNTUyYWIzNTIyMmI3ZWE1NzFmN2VhOTM1N2RiNDE0ODlhZTIyNDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-30T18:32:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-30T18:32:12Z"}, "message": "break/continue completion", "tree": {"sha": "af26565a1269276bf3026349b191be98ae5f3ea5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af26565a1269276bf3026349b191be98ae5f3ea5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f552ab35222b7ea571f7ea9357db41489ae2247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f552ab35222b7ea571f7ea9357db41489ae2247", "html_url": "https://github.com/rust-lang/rust/commit/8f552ab35222b7ea571f7ea9357db41489ae2247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f552ab35222b7ea571f7ea9357db41489ae2247/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80ab3433d3376b7c44787d63af6e7b3217ae41d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/80ab3433d3376b7c44787d63af6e7b3217ae41d8", "html_url": "https://github.com/rust-lang/rust/commit/80ab3433d3376b7c44787d63af6e7b3217ae41d8"}], "stats": {"total": 110, "additions": 72, "deletions": 38}, "files": [{"sha": "2b6a1db86f3ba0873a2c16a0127777602257dd2d", "filename": "crates/libeditor/src/completion.rs", "status": "modified", "additions": 55, "deletions": 18, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8f552ab35222b7ea571f7ea9357db41489ae2247/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f552ab35222b7ea571f7ea9357db41489ae2247/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcompletion.rs?ref=8f552ab35222b7ea571f7ea9357db41489ae2247", "patch": "@@ -1,9 +1,11 @@\n use libsyntax2::{\n-    File, TextUnit, AstNode,\n-    ast::self,\n+    File, TextUnit, AstNode, SyntaxKind::*,\n+    ast::{self, LoopBodyOwner},\n     algo::{\n         ancestors,\n+        visit::{visitor, Visitor},\n     },\n+    text_utils::is_subrange,\n };\n \n use {\n@@ -30,11 +32,9 @@ pub fn scope_completion(file: &File, offset: TextUnit) -> Option<Vec<CompletionI\n \n     let mut res = Vec::new();\n     if let Some(fn_def) = ancestors(name_ref.syntax()).filter_map(ast::FnDef::cast).next() {\n-        complete_keywords(&file, Some(fn_def), name_ref, &mut res);\n+        complete_expr_keywords(&file, fn_def, name_ref, &mut res);\n         let scopes = FnScopes::new(fn_def);\n         complete_fn(name_ref, &scopes, &mut res);\n-    } else {\n-        complete_keywords(&file, None, name_ref, &mut res);\n     }\n     if let Some(root) = ancestors(name_ref.syntax()).filter_map(ast::Root::cast).next() {\n         let scope = ModuleScope::new(root);\n@@ -58,7 +58,7 @@ fn is_single_segment(name_ref: ast::NameRef) -> bool {\n     }\n }\n \n-fn complete_keywords(file: &File, fn_def: Option<ast::FnDef>, name_ref: ast::NameRef, acc: &mut Vec<CompletionItem>) {\n+fn complete_expr_keywords(file: &File, fn_def: ast::FnDef, name_ref: ast::NameRef, acc: &mut Vec<CompletionItem>) {\n     acc.push(keyword(\"if\", \"if $0 { }\"));\n     acc.push(keyword(\"match\", \"match $0 { }\"));\n     acc.push(keyword(\"while\", \"while $0 { }\"));\n@@ -72,22 +72,42 @@ fn complete_keywords(file: &File, fn_def: Option<ast::FnDef>, name_ref: ast::Nam\n             }\n         }\n     }\n+    if is_in_loop_body(name_ref) {\n+        acc.push(keyword(\"continue\", \"continue\"));\n+        acc.push(keyword(\"break\", \"break\"));\n+    }\n+    acc.extend(complete_return(fn_def, name_ref));\n+}\n \n-    if let Some(fn_def) = fn_def {\n-        acc.extend(complete_return(fn_def, name_ref));\n+fn is_in_loop_body(name_ref: ast::NameRef) -> bool {\n+    for node in ancestors(name_ref.syntax()) {\n+        if node.kind() == FN_DEF || node.kind() == LAMBDA_EXPR {\n+            break;\n+        }\n+        let loop_body = visitor()\n+            .visit::<ast::ForExpr, _>(LoopBodyOwner::loop_body)\n+            .visit::<ast::WhileExpr, _>(LoopBodyOwner::loop_body)\n+            .visit::<ast::LoopExpr, _>(LoopBodyOwner::loop_body)\n+            .accept(node);\n+        if let Some(Some(body)) = loop_body {\n+            if is_subrange(body.syntax().range(), name_ref.syntax().range()) {\n+                return true;\n+            }\n+        }\n     }\n+    false\n }\n \n fn complete_return(fn_def: ast::FnDef, name_ref: ast::NameRef) -> Option<CompletionItem> {\n-    let is_last_in_block = ancestors(name_ref.syntax()).filter_map(ast::Expr::cast)\n-        .next()\n-        .and_then(|it| it.syntax().parent())\n-        .and_then(ast::Block::cast)\n-        .is_some();\n+    // let is_last_in_block = ancestors(name_ref.syntax()).filter_map(ast::Expr::cast)\n+    //     .next()\n+    //     .and_then(|it| it.syntax().parent())\n+    //     .and_then(ast::Block::cast)\n+    //     .is_some();\n \n-    if is_last_in_block {\n-        return None;\n-    }\n+    // if is_last_in_block {\n+    //     return None;\n+    // }\n \n     let is_stmt = match ancestors(name_ref.syntax()).filter_map(ast::ExprStmt::cast).next() {\n         None => false,\n@@ -220,7 +240,8 @@ mod tests {\n             \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 { }\") },\n                    CompletionItem { name: \"match\", snippet: Some(\"match $0 { }\") },\n                    CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n-                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") }]\"#);\n+                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n+                   CompletionItem { name: \"return\", snippet: Some(\"return\") }]\"#);\n     }\n \n     #[test]\n@@ -236,7 +257,8 @@ mod tests {\n                    CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n                    CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n                    CompletionItem { name: \"else\", snippet: Some(\"else {$0}\") },\n-                   CompletionItem { name: \"else if\", snippet: Some(\"else if $0 { }\") }]\"#);\n+                   CompletionItem { name: \"else if\", snippet: Some(\"else if $0 { }\") },\n+                   CompletionItem { name: \"return\", snippet: Some(\"return\") }]\"#);\n     }\n \n     #[test]\n@@ -277,4 +299,19 @@ mod tests {\n                    CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n                    CompletionItem { name: \"return\", snippet: Some(\"return $0\") }]\"#);\n     }\n+\n+    #[test]\n+    fn test_continue_break_completion() {\n+        check_snippet_completion(r\"\n+            fn quux() -> i32 {\n+                loop { <|> }\n+            }\n+            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 { }\") },\n+                   CompletionItem { name: \"match\", snippet: Some(\"match $0 { }\") },\n+                   CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n+                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n+                   CompletionItem { name: \"continue\", snippet: Some(\"continue\") },\n+                   CompletionItem { name: \"break\", snippet: Some(\"break\") },\n+                   CompletionItem { name: \"return\", snippet: Some(\"return $0\") }]\"#);\n+    }\n }"}, {"sha": "4b643237fe2b1d36c0d38084dcff3fb8d94ea455", "filename": "crates/libeditor/src/scope/fn_scope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f552ab35222b7ea571f7ea9357db41489ae2247/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f552ab35222b7ea571f7ea9357db41489ae2247/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=8f552ab35222b7ea571f7ea9357db41489ae2247", "patch": "@@ -5,7 +5,7 @@ use std::{\n \n use libsyntax2::{\n     SyntaxNodeRef, SyntaxNode, SmolStr, AstNode,\n-    ast::{self, NameOwner},\n+    ast::{self, NameOwner, LoopBodyOwner},\n     algo::{ancestors, generate, walk::preorder}\n };\n \n@@ -144,7 +144,7 @@ fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n             let cond_scope = e.condition().and_then(|cond| {\n                 compute_cond_scopes(cond, scopes, scope)\n             });\n-            if let Some(block) = e.body() {\n+            if let Some(block) = e.loop_body() {\n                 compute_block_scopes(block, scopes, cond_scope.unwrap_or(scope));\n             }\n         },\n@@ -162,7 +162,7 @@ fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n                 scope = scopes.new_scope(scope);\n                 scopes.add_bindings(scope, pat);\n             }\n-            if let Some(block) = e.body() {\n+            if let Some(block) = e.loop_body() {\n                 compute_block_scopes(block, scopes, scope);\n             }\n         },\n@@ -181,7 +181,7 @@ fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n                 .for_each(|expr| compute_expr_scopes(expr, scopes, scope));\n         }\n         ast::Expr::LoopExpr(e) => {\n-            if let Some(block) = e.body() {\n+            if let Some(block) = e.loop_body() {\n                 compute_block_scopes(block, scopes, scope);\n             }\n         }"}, {"sha": "0668dbfa7ae514bee67a4a4282cfa7f5ed84def6", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f552ab35222b7ea571f7ea9357db41489ae2247/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f552ab35222b7ea571f7ea9357db41489ae2247/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=8f552ab35222b7ea571f7ea9357db41489ae2247", "patch": "@@ -593,6 +593,7 @@ impl<'a> AstNode<'a> for ForExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n+impl<'a> ast::LoopBodyOwner<'a> for ForExpr<'a> {}\n impl<'a> ForExpr<'a> {\n     pub fn pat(self) -> Option<Pat<'a>> {\n         super::child_opt(self)\n@@ -601,10 +602,6 @@ impl<'a> ForExpr<'a> {\n     pub fn iterable(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n-\n-    pub fn body(self) -> Option<Block<'a>> {\n-        super::child_opt(self)\n-    }\n }\n \n // ForType\n@@ -845,11 +842,8 @@ impl<'a> AstNode<'a> for LoopExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> LoopExpr<'a> {\n-    pub fn body(self) -> Option<Block<'a>> {\n-        super::child_opt(self)\n-    }\n-}\n+impl<'a> ast::LoopBodyOwner<'a> for LoopExpr<'a> {}\n+impl<'a> LoopExpr<'a> {}\n \n // MatchArm\n #[derive(Debug, Clone, Copy)]\n@@ -2106,13 +2100,10 @@ impl<'a> AstNode<'a> for WhileExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n+impl<'a> ast::LoopBodyOwner<'a> for WhileExpr<'a> {}\n impl<'a> WhileExpr<'a> {\n     pub fn condition(self) -> Option<Condition<'a>> {\n         super::child_opt(self)\n     }\n-\n-    pub fn body(self) -> Option<Block<'a>> {\n-        super::child_opt(self)\n-    }\n }\n "}, {"sha": "49e283f5e45cf01d799e6fe76d86df8f0975694c", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f552ab35222b7ea571f7ea9357db41489ae2247/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f552ab35222b7ea571f7ea9357db41489ae2247/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=8f552ab35222b7ea571f7ea9357db41489ae2247", "patch": "@@ -20,6 +20,12 @@ pub trait NameOwner<'a>: AstNode<'a> {\n     }\n }\n \n+pub trait LoopBodyOwner<'a>: AstNode<'a> {\n+    fn loop_body(self) -> Option<Block<'a>> {\n+        child_opt(self)\n+    }\n+}\n+\n pub trait TypeParamsOwner<'a>: AstNode<'a> {\n     fn type_param_list(self) -> Option<TypeParamList<'a>> {\n         child_opt(self)"}, {"sha": "da18da8a98cd23f1bcfa5f9f22fb1e566a80772c", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f552ab35222b7ea571f7ea9357db41489ae2247/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/8f552ab35222b7ea571f7ea9357db41489ae2247/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=8f552ab35222b7ea571f7ea9357db41489ae2247", "patch": "@@ -354,19 +354,19 @@ Grammar(\n             options: [ [\"condition\", \"Condition\"] ]\n         ),\n         \"LoopExpr\": (\n-            options: [ [\"body\", \"Block\"] ]\n+            traits: [\"LoopBodyOwner\"],\n         ),\n         \"ForExpr\": (\n+            traits: [\"LoopBodyOwner\"],\n             options: [\n                 [\"pat\", \"Pat\"],\n                 [\"iterable\", \"Expr\"],\n-                [\"body\", \"Block\"] ,\n             ]\n         ),\n         \"WhileExpr\": (\n+            traits: [\"LoopBodyOwner\"],\n             options: [\n                 [\"condition\", \"Condition\"],\n-                [\"body\", \"Block\"],\n             ]\n         ),\n         \"ContinueExpr\": (),"}]}