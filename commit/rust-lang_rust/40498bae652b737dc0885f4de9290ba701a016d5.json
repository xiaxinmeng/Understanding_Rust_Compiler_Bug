{"sha": "40498bae652b737dc0885f4de9290ba701a016d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNDk4YmFlNjUyYjczN2RjMDg4NWY0ZGU5MjkwYmE3MDFhMDE2ZDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-22T16:42:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-25T03:38:19Z"}, "message": "simplify `NLLRegionVariableOrigin`", "tree": {"sha": "5ce1b4ca3a66015ab8ddd08f72c7d89b3228b0d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ce1b4ca3a66015ab8ddd08f72c7d89b3228b0d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40498bae652b737dc0885f4de9290ba701a016d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40498bae652b737dc0885f4de9290ba701a016d5", "html_url": "https://github.com/rust-lang/rust/commit/40498bae652b737dc0885f4de9290ba701a016d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40498bae652b737dc0885f4de9290ba701a016d5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "145155dc96757002c7b2e9de8489416e2fdbbd57", "url": "https://api.github.com/repos/rust-lang/rust/commits/145155dc96757002c7b2e9de8489416e2fdbbd57", "html_url": "https://github.com/rust-lang/rust/commit/145155dc96757002c7b2e9de8489416e2fdbbd57"}], "stats": {"total": 139, "additions": 71, "deletions": 68}, "files": [{"sha": "09baaeadaee43b58d8d7ec7af1ed7e75b412aed0", "filename": "src/Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/40498bae652b737dc0885f4de9290ba701a016d5/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/40498bae652b737dc0885f4de9290ba701a016d5/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=40498bae652b737dc0885f4de9290ba701a016d5", "patch": "@@ -87,7 +87,7 @@ dependencies = [\n \n [[package]]\n name = \"atty\"\n-version = \"0.2.11\"\n+version = \"0.2.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -187,7 +187,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"cargo\"\n version = \"0.30.0\"\n dependencies = [\n- \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core-foundation 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -303,7 +303,7 @@ version = \"2.32.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -622,7 +622,7 @@ name = \"env_logger\"\n version = \"0.5.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"humantime 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1844,7 +1844,7 @@ name = \"rustc-ap-rustc_errors\"\n version = \"182.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-rustc_data_structures 182.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-serialize 182.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-syntax_pos 182.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2097,7 +2097,7 @@ dependencies = [\n name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n- \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n@@ -3056,7 +3056,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n \"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef\"\n \"checksum assert_cli 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"98589b0e465a6c510d95fceebd365bb79bedece7f6e18a480897f2015f85ec51\"\n-\"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n+\"checksum atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fc4a1aa4c24c0718a250f0681885c1af91419d242f29eb8f2ab28502d80dbd1\"\n \"checksum backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89a47830402e9981c5c41223151efcced65a0510c13097c769cede7efb34782a\"\n \"checksum backtrace-sys 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bff67d0c06556c0b8e6b5f090f0eac52d950d9dfd1d35ba04e4ca3543eaf6a7e\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\""}, {"sha": "4677f6222d44a8aa68a409735059e7a7a34e939f", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/40498bae652b737dc0885f4de9290ba701a016d5/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40498bae652b737dc0885f4de9290ba701a016d5/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=40498bae652b737dc0885f4de9290ba701a016d5", "patch": "@@ -377,7 +377,20 @@ pub enum NLLRegionVariableOrigin {\n     // elsewhere. This origin indices we've got one of those.\n     FreeRegion,\n \n-    Inferred(::mir::visit::TyContext),\n+    Existential,\n+}\n+\n+impl NLLRegionVariableOrigin {\n+    pub fn is_universal(self) -> bool {\n+        match self {\n+            NLLRegionVariableOrigin::FreeRegion => true,\n+            NLLRegionVariableOrigin::Existential => false,\n+        }\n+    }\n+\n+    pub fn is_existential(self) -> bool {\n+        !self.is_universal()\n+    }\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "dfcb185e21d1da6a833286d6be0ecd85f6597360", "filename": "src/librustc_mir/borrow_check/nll/region_infer/dump_mir.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40498bae652b737dc0885f4de9290ba701a016d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40498bae652b737dc0885f4de9290ba701a016d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs?ref=40498bae652b737dc0885f4de9290ba701a016d5", "patch": "@@ -27,8 +27,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         writeln!(out, \"| Free Region Mapping\")?;\n \n         for region in self.regions() {\n-            if self.definitions[region].is_universal {\n-                let classification = self.universal_regions.region_classification(region).unwrap();\n+            if self.definitions[region].origin.is_universal() {\n+                let classification = self.universal_regions\n+                    .region_classification(region)\n+                    .unwrap();\n                 let outlived_by = self.universal_regions.regions_outlived_by(region);\n                 writeln!(\n                     out,"}, {"sha": "a74f4f5539fbc2140285f13015d58db500dc492c", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/40498bae652b737dc0885f4de9290ba701a016d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40498bae652b737dc0885f4de9290ba701a016d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=40498bae652b737dc0885f4de9290ba701a016d5", "patch": "@@ -9,18 +9,16 @@\n // except according to those terms.\n \n use super::universal_regions::UniversalRegions;\n+use borrow_check::nll::constraints::graph::ConstraintGraph;\n use borrow_check::nll::constraints::{\n     ConstraintIndex, ConstraintSccIndex, ConstraintSet, OutlivesConstraint,\n };\n-use borrow_check::nll::constraints::graph::ConstraintGraph;\n use borrow_check::nll::region_infer::values::ToElementIndex;\n use borrow_check::nll::type_check::Locations;\n use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::region_constraints::{GenericKind, VarInfos};\n-use rustc::infer::InferCtxt;\n-use rustc::infer::NLLRegionVariableOrigin;\n-use rustc::infer::RegionVariableOrigin;\n+use rustc::infer::{InferCtxt, NLLRegionVariableOrigin, RegionVariableOrigin};\n use rustc::mir::{\n     ClosureOutlivesRequirement, ClosureOutlivesSubject, ClosureRegionRequirements, Local, Location,\n     Mir,\n@@ -85,17 +83,10 @@ pub struct RegionInferenceContext<'tcx> {\n }\n \n struct RegionDefinition<'tcx> {\n-    /// Why we created this variable. Mostly these will be\n-    /// `RegionVariableOrigin::NLL`, but some variables get created\n-    /// elsewhere in the code with other causes (e.g., instantiation\n-    /// late-bound-regions).\n-    origin: RegionVariableOrigin,\n-\n-    /// True if this is a universally quantified region. This means a\n-    /// lifetime parameter that appears in the function signature (or,\n-    /// in the case of a closure, in the closure environment, which of\n-    /// course is also in the function signature).\n-    is_universal: bool,\n+    /// What kind of variable is this -- a free region? existential\n+    /// variable? etc. (See the `NLLRegionVariableOrigin` for more\n+    /// info.)\n+    origin: NLLRegionVariableOrigin,\n \n     /// If this is 'static or an early-bound region, then this is\n     /// `Some(X)` where `X` is the name of the region.\n@@ -287,12 +278,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         for variable in universal_regions.universal_regions() {\n             // These should be free-region variables.\n             assert!(match self.definitions[variable].origin {\n-                RegionVariableOrigin::NLL(NLLRegionVariableOrigin::FreeRegion) => true,\n-                _ => false,\n+                NLLRegionVariableOrigin::FreeRegion => true,\n+                NLLRegionVariableOrigin::Existential => false,\n             });\n \n-            self.definitions[variable].is_universal = true;\n-\n             // Add all nodes in the CFG to liveness constraints\n             for point_index in elements.all_point_indices() {\n                 self.add_live_element(variable, point_index);\n@@ -842,24 +831,26 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mut propagated_outlives_requirements: Option<&mut Vec<ClosureOutlivesRequirement<'gcx>>>,\n         errors_buffer: &mut Vec<Diagnostic>,\n     ) {\n-        // The universal regions are always found in a prefix of the\n-        // full list.\n-        let universal_definitions = self.definitions\n-            .iter_enumerated()\n-            .take_while(|(_, fr_definition)| fr_definition.is_universal);\n-\n-        // Go through each of the universal regions `fr` and check that\n-        // they did not grow too large, accumulating any requirements\n-        // for our caller into the `outlives_requirements` vector.\n-        for (fr, _) in universal_definitions {\n-            self.check_universal_region(\n-                infcx,\n-                mir,\n-                mir_def_id,\n-                fr,\n-                &mut propagated_outlives_requirements,\n-                errors_buffer,\n-            );\n+        for (fr, fr_definition) in self.definitions.iter_enumerated() {\n+            match fr_definition.origin {\n+                NLLRegionVariableOrigin::FreeRegion => {\n+                    // Go through each of the universal regions `fr` and check that\n+                    // they did not grow too large, accumulating any requirements\n+                    // for our caller into the `outlives_requirements` vector.\n+                    self.check_universal_region(\n+                        infcx,\n+                        mir,\n+                        mir_def_id,\n+                        fr,\n+                        &mut propagated_outlives_requirements,\n+                        errors_buffer,\n+                    );\n+                }\n+\n+                NLLRegionVariableOrigin::Existential => {\n+                    // nothing to check here\n+                }\n+            }\n         }\n     }\n \n@@ -940,13 +931,18 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n }\n \n impl<'tcx> RegionDefinition<'tcx> {\n-    fn new(origin: RegionVariableOrigin) -> Self {\n+    fn new(rv_origin: RegionVariableOrigin) -> Self {\n         // Create a new region definition. Note that, for free\n-        // regions, these fields get updated later in\n+        // regions, the `external_name` field gets updated later in\n         // `init_universal_regions`.\n+\n+        let origin = match rv_origin {\n+            RegionVariableOrigin::NLL(origin) => origin,\n+            _ => NLLRegionVariableOrigin::Existential,\n+        };\n+\n         Self {\n             origin,\n-            is_universal: false,\n             external_name: None,\n         }\n     }"}, {"sha": "e1bd8530629d97c80bd432a11cfcb077326ad8c1", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/40498bae652b737dc0885f4de9290ba701a016d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40498bae652b737dc0885f4de9290ba701a016d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=40498bae652b737dc0885f4de9290ba701a016d5", "patch": "@@ -28,7 +28,6 @@ pub fn renumber_mir<'tcx>(infcx: &InferCtxt<'_, '_, 'tcx>, mir: &mut Mir<'tcx>)\n /// variables.\n pub fn renumber_regions<'tcx, T>(\n     infcx: &InferCtxt<'_, '_, 'tcx>,\n-    ty_context: TyContext,\n     value: &T,\n ) -> T\n where\n@@ -39,7 +38,7 @@ where\n     infcx\n         .tcx\n         .fold_regions(value, &mut false, |_region, _depth| {\n-            let origin = NLLRegionVariableOrigin::Inferred(ty_context);\n+            let origin = NLLRegionVariableOrigin::Existential;\n             infcx.next_nll_region_var(origin)\n         })\n }\n@@ -49,28 +48,27 @@ struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n-    fn renumber_regions<T>(&mut self, ty_context: TyContext, value: &T) -> T\n+    fn renumber_regions<T>(&mut self, value: &T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        renumber_regions(self.infcx, ty_context, value)\n+        renumber_regions(self.infcx, value)\n     }\n }\n \n impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, ty_context: TyContext) {\n         debug!(\"visit_ty(ty={:?}, ty_context={:?})\", ty, ty_context);\n \n-        *ty = self.renumber_regions(ty_context, ty);\n+        *ty = self.renumber_regions(ty);\n \n         debug!(\"visit_ty: ty={:?}\", ty);\n     }\n \n     fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, location: Location) {\n         debug!(\"visit_substs(substs={:?}, location={:?})\", substs, location);\n \n-        let ty_context = TyContext::Location(location);\n-        *substs = self.renumber_regions(ty_context, &{ *substs });\n+        *substs = self.renumber_regions(&{ *substs });\n \n         debug!(\"visit_substs: substs={:?}\", substs);\n     }\n@@ -79,15 +77,13 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"visit_region(region={:?}, location={:?})\", region, location);\n \n         let old_region = *region;\n-        let ty_context = TyContext::Location(location);\n-        *region = self.renumber_regions(ty_context, &old_region);\n+        *region = self.renumber_regions(&old_region);\n \n         debug!(\"visit_region: region={:?}\", region);\n     }\n \n-    fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, location: Location) {\n-        let ty_context = TyContext::Location(location);\n-        *constant = self.renumber_regions(ty_context, &*constant);\n+    fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, _location: Location) {\n+        *constant = self.renumber_regions(&*constant);\n     }\n \n     fn visit_generator_substs(&mut self,\n@@ -99,8 +95,7 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n             location,\n         );\n \n-        let ty_context = TyContext::Location(location);\n-        *substs = self.renumber_regions(ty_context, substs);\n+        *substs = self.renumber_regions(substs);\n \n         debug!(\"visit_generator_substs: substs={:?}\", substs);\n     }\n@@ -112,8 +107,7 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n             location\n         );\n \n-        let ty_context = TyContext::Location(location);\n-        *substs = self.renumber_regions(ty_context, substs);\n+        *substs = self.renumber_regions(substs);\n \n         debug!(\"visit_closure_substs: substs={:?}\", substs);\n     }"}, {"sha": "3d831bce5ce176ddd8550003c9886c535e092c61", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40498bae652b737dc0885f4de9290ba701a016d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40498bae652b737dc0885f4de9290ba701a016d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=40498bae652b737dc0885f4de9290ba701a016d5", "patch": "@@ -21,7 +21,6 @@ use borrow_check::nll::renumber;\n use borrow_check::nll::universal_regions::UniversalRegions;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferOk;\n-use rustc::mir::visit::TyContext;\n use rustc::mir::*;\n use rustc::traits::query::type_op::custom::CustomTypeOp;\n use rustc::traits::{ObligationCause, PredicateObligations};\n@@ -117,7 +116,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                             let anon_defn_ty = anon_defn_ty.subst(tcx, anon_decl.substs);\n                             let anon_defn_ty = renumber::renumber_regions(\n                                 infcx,\n-                                TyContext::Location(Location::START),\n                                 &anon_defn_ty,\n                             );\n                             debug!("}]}