{"sha": "bc23b8ebc64565bc3838a8bbfb03ed52e900cfca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMjNiOGViYzY0NTY1YmMzODM4YThiYmZiMDNlZDUyZTkwMGNmY2E=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-01T22:55:28Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:15:39Z"}, "message": "libstd: fix unit tests", "tree": {"sha": "83d7eac0ed37351ac1bf314089126f69f3b55f12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83d7eac0ed37351ac1bf314089126f69f3b55f12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc23b8ebc64565bc3838a8bbfb03ed52e900cfca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc23b8ebc64565bc3838a8bbfb03ed52e900cfca", "html_url": "https://github.com/rust-lang/rust/commit/bc23b8ebc64565bc3838a8bbfb03ed52e900cfca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc23b8ebc64565bc3838a8bbfb03ed52e900cfca/comments", "author": null, "committer": null, "parents": [{"sha": "1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba", "html_url": "https://github.com/rust-lang/rust/commit/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "9aaaceb87e6d3acf37dd87df5964abec494b2b2c", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bc23b8ebc64565bc3838a8bbfb03ed52e900cfca/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc23b8ebc64565bc3838a8bbfb03ed52e900cfca/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=bc23b8ebc64565bc3838a8bbfb03ed52e900cfca", "patch": "@@ -19,6 +19,7 @@\n #[cfg(test)] use cmp::PartialEq;\n #[cfg(test)] use fmt::Show;\n #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n+#[cfg(test)] use kinds::Copy;\n \n pub use core::num::{Num, div_rem, Zero, zero, One, one};\n pub use core::num::{Unsigned, pow, Bounded};\n@@ -130,18 +131,19 @@ pub fn test_num<T>(ten: T, two: T) where\n      + Add<T, T> + Sub<T, T>\n      + Mul<T, T> + Div<T, T>\n      + Rem<T, T> + Show\n+     + Copy\n {\n-    assert_eq!(ten.add(&two),  cast(12i).unwrap());\n-    assert_eq!(ten.sub(&two),  cast(8i).unwrap());\n-    assert_eq!(ten.mul(&two),  cast(20i).unwrap());\n-    assert_eq!(ten.div(&two),  cast(5i).unwrap());\n-    assert_eq!(ten.rem(&two),  cast(0i).unwrap());\n-\n-    assert_eq!(ten.add(&two),  ten + two);\n-    assert_eq!(ten.sub(&two),  ten - two);\n-    assert_eq!(ten.mul(&two),  ten * two);\n-    assert_eq!(ten.div(&two),  ten / two);\n-    assert_eq!(ten.rem(&two),  ten % two);\n+    assert_eq!(ten.add(two),  cast(12i).unwrap());\n+    assert_eq!(ten.sub(two),  cast(8i).unwrap());\n+    assert_eq!(ten.mul(two),  cast(20i).unwrap());\n+    assert_eq!(ten.div(two),  cast(5i).unwrap());\n+    assert_eq!(ten.rem(two),  cast(0i).unwrap());\n+\n+    assert_eq!(ten.add(two),  ten + two);\n+    assert_eq!(ten.sub(two),  ten - two);\n+    assert_eq!(ten.mul(two),  ten * two);\n+    assert_eq!(ten.div(two),  ten / two);\n+    assert_eq!(ten.rem(two),  ten % two);\n }\n \n #[cfg(test)]"}]}