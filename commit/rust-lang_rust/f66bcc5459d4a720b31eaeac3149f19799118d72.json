{"sha": "f66bcc5459d4a720b31eaeac3149f19799118d72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NmJjYzU0NTlkNGE3MjBiMzFlYWVhYzMxNDlmMTk3OTkxMThkNzI=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-06-20T03:07:22Z"}, "committer": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-06-20T03:55:01Z"}, "message": "Add liballoc impl SpecFromElem for i8\n\nSpeedup vec![1_i8; N] for non-zero element.\n\nBefore\ntest do_bench_from_elem_i8        ... bench:         130 ns/iter (+/- 7) = 61 MB/s\ntest do_bench_from_elem_u8        ... bench:         121 ns/iter (+/- 4) = 66 MB/s\nAfter\ntest do_bench_from_elem_i8        ... bench:         123 ns/iter (+/- 7) = 65 MB/s\ntest do_bench_from_elem_u8        ... bench:         121 ns/iter (+/- 5) = 66 MB/s\n\nNo speed difference if element is already zero.\n\n    #[bench]\n    fn do_bench_from_elem_i8(b: &mut Bencher) {\n        b.bytes = 8 as u64;\n        b.iter(|| {\n            let dst = ve::vec![10_i8; 100];\n            assert_eq!(dst.len(), 100);\n            assert!(dst.iter().all(|x| *x == 10));\n        })\n    }\n\nAs suggested by @cuviper\nhttps://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/SpecForElem.20for.20other.20integers", "tree": {"sha": "a6c9480f1efc3f19f5b6cdc5da7505e6c3c5c2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6c9480f1efc3f19f5b6cdc5da7505e6c3c5c2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f66bcc5459d4a720b31eaeac3149f19799118d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f66bcc5459d4a720b31eaeac3149f19799118d72", "html_url": "https://github.com/rust-lang/rust/commit/f66bcc5459d4a720b31eaeac3149f19799118d72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f66bcc5459d4a720b31eaeac3149f19799118d72/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d8bd9b74dc0cf06d881bac645698ccbcf9d9c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8bd9b74dc0cf06d881bac645698ccbcf9d9c5e", "html_url": "https://github.com/rust-lang/rust/commit/2d8bd9b74dc0cf06d881bac645698ccbcf9d9c5e"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "b4a8597656ecb9818f67658acbab831390b50de6", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f66bcc5459d4a720b31eaeac3149f19799118d72/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66bcc5459d4a720b31eaeac3149f19799118d72/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f66bcc5459d4a720b31eaeac3149f19799118d72", "patch": "@@ -1803,6 +1803,21 @@ impl<T: Clone> SpecFromElem for T {\n     }\n }\n \n+impl SpecFromElem for i8 {\n+    #[inline]\n+    fn from_elem(elem: i8, n: usize) -> Vec<i8> {\n+        if elem == 0 {\n+            return Vec { buf: RawVec::with_capacity_zeroed(n), len: n };\n+        }\n+        unsafe {\n+            let mut v = Vec::with_capacity(n);\n+            ptr::write_bytes(v.as_mut_ptr(), elem as u8, n);\n+            v.set_len(n);\n+            v\n+        }\n+    }\n+}\n+\n impl SpecFromElem for u8 {\n     #[inline]\n     fn from_elem(elem: u8, n: usize) -> Vec<u8> {\n@@ -1847,7 +1862,6 @@ macro_rules! impl_is_zero {\n     };\n }\n \n-impl_is_zero!(i8, |x| x == 0);\n impl_is_zero!(i16, |x| x == 0);\n impl_is_zero!(i32, |x| x == 0);\n impl_is_zero!(i64, |x| x == 0);"}]}