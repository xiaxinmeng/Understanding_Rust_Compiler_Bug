{"sha": "844e1aa725cbc26ec8a4221bd5412bd28238544c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NGUxYWE3MjVjYmMyNmVjOGE0MjIxYmQ1NDEyYmQyODIzODU0NGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-19T22:55:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-19T22:55:54Z"}, "message": "Merge #5824\n\n5824: Optimize reference search\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "68d56a0998d9cf703b2f2cf0ef6cf2db51b7ad08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68d56a0998d9cf703b2f2cf0ef6cf2db51b7ad08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/844e1aa725cbc26ec8a4221bd5412bd28238544c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPa36CRBK7hj4Ov3rIwAAdHIIAJVwkExVirYB5uHTrfenNJod\n4y28EV95z+AxL8JGoLznQGRSN1vEz/IrM4d++k0ni4GYItUPQAWMHe79Rg4+U1mD\n8i+3UWYd9/Wix9PZQFDtcgtjCD94Xjoixra6ryDttZTHIPuqQxZayRaLGGS+Y1n4\nbDbfbjBGbUx4Fxrd7xkwzFyzZRCJjFGHLRnS1tVy9Mi/A//A2G/xE12Fpnk51QBw\n7SObPdhOA7r34xU9848M9dpW/HazKjglGtT2mCm3mQ7jx1ZbzzYaIeffBUitAytB\nOOZsXX3UFhmHRghunpi1v7qb9nDRT2Ga+MAjzU9xcuIjv3TMYRLXKu8sWQp+QBM=\n=dq70\n-----END PGP SIGNATURE-----\n", "payload": "tree 68d56a0998d9cf703b2f2cf0ef6cf2db51b7ad08\nparent 5dafd39ad4396c7feb10720e33924d39e8ef2e66\nparent e262149b7cb56ccf86cc5e17a75d0ca809ecab0e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597877754 +0000\ncommitter GitHub <noreply@github.com> 1597877754 +0000\n\nMerge #5824\n\n5824: Optimize reference search\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/844e1aa725cbc26ec8a4221bd5412bd28238544c", "html_url": "https://github.com/rust-lang/rust/commit/844e1aa725cbc26ec8a4221bd5412bd28238544c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/844e1aa725cbc26ec8a4221bd5412bd28238544c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dafd39ad4396c7feb10720e33924d39e8ef2e66", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dafd39ad4396c7feb10720e33924d39e8ef2e66", "html_url": "https://github.com/rust-lang/rust/commit/5dafd39ad4396c7feb10720e33924d39e8ef2e66"}, {"sha": "e262149b7cb56ccf86cc5e17a75d0ca809ecab0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e262149b7cb56ccf86cc5e17a75d0ca809ecab0e", "html_url": "https://github.com/rust-lang/rust/commit/e262149b7cb56ccf86cc5e17a75d0ca809ecab0e"}], "stats": {"total": 63, "additions": 38, "deletions": 25}, "files": [{"sha": "edab1d644d686d555b908481ef1f858a75a7b189", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 38, "deletions": 25, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/844e1aa725cbc26ec8a4221bd5412bd28238544c/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e1aa725cbc26ec8a4221bd5412bd28238544c/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=844e1aa725cbc26ec8a4221bd5412bd28238544c", "patch": "@@ -203,11 +203,25 @@ impl<'a> FindUsages<'a> {\n     }\n \n     pub fn at_least_one(self) -> bool {\n-        !self.all().is_empty()\n+        let mut found = false;\n+        self.search(&mut |_reference| {\n+            found = true;\n+            true\n+        });\n+        found\n     }\n \n     pub fn all(self) -> Vec<Reference> {\n-        let _p = profile::span(\"Definition::find_usages\");\n+        let mut res = Vec::new();\n+        self.search(&mut |reference| {\n+            res.push(reference);\n+            false\n+        });\n+        res\n+    }\n+\n+    fn search(self, sink: &mut dyn FnMut(Reference) -> bool) {\n+        let _p = profile::span(\"FindUsages:search\");\n         let sema = self.sema;\n \n         let search_scope = {\n@@ -219,13 +233,11 @@ impl<'a> FindUsages<'a> {\n         };\n \n         let name = match self.def.name(sema.db) {\n-            None => return Vec::new(),\n             Some(it) => it.to_string(),\n+            None => return,\n         };\n \n         let pat = name.as_str();\n-        let mut refs = vec![];\n-\n         for (file_id, search_range) in search_scope {\n             let text = sema.db.file_text(file_id);\n             let search_range =\n@@ -240,10 +252,9 @@ impl<'a> FindUsages<'a> {\n                 }\n \n                 let name_ref: ast::NameRef =\n-                    if let Some(name_ref) = sema.find_node_at_offset_with_descend(&tree, offset) {\n-                        name_ref\n-                    } else {\n-                        continue;\n+                    match sema.find_node_at_offset_with_descend(&tree, offset) {\n+                        Some(it) => it,\n+                        None => continue,\n                     };\n \n                 match classify_name_ref(&sema, &name_ref) {\n@@ -256,43 +267,45 @@ impl<'a> FindUsages<'a> {\n                             ReferenceKind::Other\n                         };\n \n-                        let file_range = sema.original_range(name_ref.syntax());\n-                        refs.push(Reference {\n-                            file_range,\n+                        let reference = Reference {\n+                            file_range: sema.original_range(name_ref.syntax()),\n                             kind,\n                             access: reference_access(&def, &name_ref),\n-                        });\n+                        };\n+                        if sink(reference) {\n+                            return;\n+                        }\n                     }\n                     Some(NameRefClass::FieldShorthand { local, field }) => {\n-                        match self.def {\n-                            Definition::Field(_) if &field == self.def => refs.push(Reference {\n+                        let reference = match self.def {\n+                            Definition::Field(_) if &field == self.def => Reference {\n                                 file_range: self.sema.original_range(name_ref.syntax()),\n                                 kind: ReferenceKind::FieldShorthandForField,\n                                 access: reference_access(&field, &name_ref),\n-                            }),\n-                            Definition::Local(l) if &local == l => refs.push(Reference {\n+                            },\n+                            Definition::Local(l) if &local == l => Reference {\n                                 file_range: self.sema.original_range(name_ref.syntax()),\n                                 kind: ReferenceKind::FieldShorthandForLocal,\n                                 access: reference_access(&Definition::Local(local), &name_ref),\n-                            }),\n-\n-                            _ => {} // not a usage\n+                            },\n+                            _ => continue, // not a usage\n                         };\n+                        if sink(reference) {\n+                            return;\n+                        }\n                     }\n                     _ => {} // not a usage\n                 }\n             }\n         }\n-        refs\n     }\n }\n \n fn reference_access(def: &Definition, name_ref: &ast::NameRef) -> Option<ReferenceAccess> {\n     // Only Locals and Fields have accesses for now.\n-    match def {\n-        Definition::Local(_) | Definition::Field(_) => {}\n-        _ => return None,\n-    };\n+    if !matches!(def, Definition::Local(_) | Definition::Field(_)) {\n+        return None;\n+    }\n \n     let mode = name_ref.syntax().ancestors().find_map(|node| {\n         match_ast! {"}]}