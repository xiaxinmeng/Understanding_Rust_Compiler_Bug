{"sha": "1fc1ad91cebd17b9e502cfeecb51af593ef04d0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYzFhZDkxY2ViZDE3YjllNTAyY2ZlZWNiNTFhZjU5M2VmMDRkMGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-16T22:19:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-16T22:20:11Z"}, "message": "rustc: Don't rebuild the call expression in typeck::replace_expr_type()", "tree": {"sha": "355a4fdaaf18b0d3a93fce0932f312590e676288", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/355a4fdaaf18b0d3a93fce0932f312590e676288"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fc1ad91cebd17b9e502cfeecb51af593ef04d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fc1ad91cebd17b9e502cfeecb51af593ef04d0e", "html_url": "https://github.com/rust-lang/rust/commit/1fc1ad91cebd17b9e502cfeecb51af593ef04d0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fc1ad91cebd17b9e502cfeecb51af593ef04d0e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "278d64dafce164122698a1c49ab340020aee17a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/278d64dafce164122698a1c49ab340020aee17a5", "html_url": "https://github.com/rust-lang/rust/commit/278d64dafce164122698a1c49ab340020aee17a5"}], "stats": {"total": 42, "additions": 3, "deletions": 39}, "files": [{"sha": "09e25e4a509acfd33a1403e86f94fae8a2aacaef", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1fc1ad91cebd17b9e502cfeecb51af593ef04d0e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fc1ad91cebd17b9e502cfeecb51af593ef04d0e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1fc1ad91cebd17b9e502cfeecb51af593ef04d0e", "patch": "@@ -1627,10 +1627,9 @@ fn resolve_local_types_in_block(&@fn_ctxt fcx, &ast::block block)\n \n // AST fragment utilities\n \n-// FIXME: At the moment this works only for call, bind, and path expressions.\n fn replace_expr_type(&node_type_table ntt,\n                      &@ast::expr expr,\n-                     &tup(vec[ty::t], ty::t) new_tyt) -> @ast::expr {\n+                     &tup(vec[ty::t], ty::t) new_tyt) {\n     auto new_tps;\n     if (ty::expr_has_ty_params(ntt, expr)) {\n         new_tps = some[vec[ty::t]](new_tyt._0);\n@@ -1640,41 +1639,6 @@ fn replace_expr_type(&node_type_table ntt,\n \n     write_type(ntt, ast::ann_tag(ty::expr_ann(expr)),\n                tup(new_tps, new_tyt._1));\n-\n-    fn mkann_fn(ty::t tyt, option::t[vec[ty::t]] tps, &ast::ann old_ann)\n-            -> ast::ann {\n-        ret ast::ann_type(ast::ann_tag(old_ann), tyt, tps, none[@ts_ann]);\n-    }\n-\n-    auto mkann = bind mkann_fn(new_tyt._1, new_tps, _);\n-\n-    alt (expr.node) {\n-        case (ast::expr_call(?callee, ?args, ?a)) {\n-            ret @fold::respan(expr.span,\n-                             ast::expr_call(callee, args, mkann(a)));\n-        }\n-        case (ast::expr_self_method(?ident, ?a)) {\n-            ret @fold::respan(expr.span,\n-                             ast::expr_self_method(ident, mkann(a)));\n-        }\n-        case (ast::expr_bind(?callee, ?args, ?a)) {\n-            ret @fold::respan(expr.span,\n-                             ast::expr_bind(callee, args, mkann(a)));\n-        }\n-        case (ast::expr_field(?e, ?i, ?a)) {\n-            ret @fold::respan(expr.span,\n-                             ast::expr_field(e, i, mkann(a)));\n-        }\n-        case (ast::expr_path(?p, ?a)) {\n-            ret @fold::respan(expr.span,\n-                             ast::expr_path(p, mkann(a)));\n-        }\n-        case (_) {\n-            log_err \"unhandled expr type in replace_expr_type(): \" +\n-                util::common::expr_to_str(expr);\n-            fail;\n-        }\n-    }\n }\n \n \n@@ -1891,9 +1855,9 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n                                                fcx.ccx.node_types, f_0);\n         auto tpt_1 = Demand::full(fcx, f.span, tpt_0._1, t_0, tpt_0._0,\n                                  NO_AUTODEREF);\n-        auto f_1 = replace_expr_type(fcx.ccx.node_types, f_0, tpt_1);\n+        replace_expr_type(fcx.ccx.node_types, f_0, tpt_1);\n \n-        ret tup(f_1, args_0);\n+        ret tup(f_0, args_0);\n     }\n \n     // A generic function for checking assignment expressions"}]}