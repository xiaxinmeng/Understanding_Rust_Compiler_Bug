{"sha": "7f32ea8820727f4f4944423133e6b32e2653a1d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMzJlYTg4MjA3MjdmNGY0OTQ0NDIzMTMzZTZiMzJlMjY1M2ExZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-27T21:35:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-27T21:35:49Z"}, "message": "auto merge of #8771 : thestinger/rust/repr, r=catamorphism", "tree": {"sha": "96ee20983cc3cf4c3ecad104554e4c65db8f9292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96ee20983cc3cf4c3ecad104554e4c65db8f9292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f32ea8820727f4f4944423133e6b32e2653a1d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f32ea8820727f4f4944423133e6b32e2653a1d2", "html_url": "https://github.com/rust-lang/rust/commit/7f32ea8820727f4f4944423133e6b32e2653a1d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f32ea8820727f4f4944423133e6b32e2653a1d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab0561b00d2993706d11bfbbce4a357110195dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab0561b00d2993706d11bfbbce4a357110195dd", "html_url": "https://github.com/rust-lang/rust/commit/3ab0561b00d2993706d11bfbbce4a357110195dd"}, {"sha": "803f941867d1d68710f211535de69bb30f79f917", "url": "https://api.github.com/repos/rust-lang/rust/commits/803f941867d1d68710f211535de69bb30f79f917", "html_url": "https://github.com/rust-lang/rust/commit/803f941867d1d68710f211535de69bb30f79f917"}], "stats": {"total": 159, "additions": 76, "deletions": 83}, "files": [{"sha": "2a3b5d8c963b225d1352779e467288d24ee98949", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -3476,18 +3476,18 @@ pub fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n         terr_ptr_mutability => ~\"pointers differ in mutability\",\n         terr_ref_mutability => ~\"references differ in mutability\",\n         terr_ty_param_size(values) => {\n-            fmt!(\"expected a type with %? type params \\\n-                  but found one with %? type params\",\n+            fmt!(\"expected a type with %u type params \\\n+                  but found one with %u type params\",\n                  values.expected, values.found)\n         }\n         terr_tuple_size(values) => {\n-            fmt!(\"expected a tuple with %? elements \\\n-                  but found one with %? elements\",\n+            fmt!(\"expected a tuple with %u elements \\\n+                  but found one with %u elements\",\n                  values.expected, values.found)\n         }\n         terr_record_size(values) => {\n-            fmt!(\"expected a record with %? fields \\\n-                  but found one with %? fields\",\n+            fmt!(\"expected a record with %u fields \\\n+                  but found one with %u fields\",\n                  values.expected, values.found)\n         }\n         terr_record_mutability => {"}, {"sha": "56e0f83e05cf0ea722ae87f93a52dd82f474da9a", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -460,16 +460,6 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    fn visit_var(&self) -> bool {\n-        if ! self.inner.visit_var() { return false; }\n-        true\n-    }\n-\n-    fn visit_var_integral(&self) -> bool {\n-        if ! self.inner.visit_var_integral() { return false; }\n-        true\n-    }\n-\n     fn visit_param(&self, i: uint) -> bool {\n         if ! self.inner.visit_param(i) { return false; }\n         true\n@@ -494,11 +484,6 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    fn visit_constr(&self, inner: *TyDesc) -> bool {\n-        if ! self.inner.visit_constr(inner) { return false; }\n-        true\n-    }\n-\n     fn visit_closure_ptr(&self, ck: uint) -> bool {\n         self.align_to::<@fn()>();\n         if ! self.inner.visit_closure_ptr(ck) { return false; }"}, {"sha": "ad4658d2f42bb1a7bbdb01e6d9dec192790ec5d4", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 55, "deletions": 30, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -75,35 +75,50 @@ impl Repr for bool {\n     }\n }\n \n-macro_rules! int_repr(($ty:ident) => (impl Repr for $ty {\n+impl Repr for int {\n+    fn write_repr(&self, writer: @Writer) {\n+        do ::int::to_str_bytes(*self, 10u) |bits| {\n+            writer.write(bits);\n+        }\n+    }\n+}\n+\n+macro_rules! int_repr(($ty:ident, $suffix:expr) => (impl Repr for $ty {\n     fn write_repr(&self, writer: @Writer) {\n         do ::$ty::to_str_bytes(*self, 10u) |bits| {\n             writer.write(bits);\n+            writer.write(bytes!($suffix));\n         }\n     }\n }))\n \n-int_repr!(int)\n-int_repr!(i8)\n-int_repr!(i16)\n-int_repr!(i32)\n-int_repr!(i64)\n-int_repr!(uint)\n-int_repr!(u8)\n-int_repr!(u16)\n-int_repr!(u32)\n-int_repr!(u64)\n-\n-macro_rules! num_repr(($ty:ident) => (impl Repr for $ty {\n+int_repr!(i8, \"i8\")\n+int_repr!(i16, \"i16\")\n+int_repr!(i32, \"i32\")\n+int_repr!(i64, \"i64\")\n+int_repr!(uint, \"u\")\n+int_repr!(u8, \"u8\")\n+int_repr!(u16, \"u16\")\n+int_repr!(u32, \"u32\")\n+int_repr!(u64, \"u64\")\n+\n+impl Repr for float {\n+    fn write_repr(&self, writer: @Writer) {\n+        let s = self.to_str();\n+        writer.write(s.as_bytes());\n+    }\n+}\n+\n+macro_rules! num_repr(($ty:ident, $suffix:expr) => (impl Repr for $ty {\n     fn write_repr(&self, writer: @Writer) {\n         let s = self.to_str();\n         writer.write(s.as_bytes());\n+        writer.write(bytes!($suffix));\n     }\n }))\n \n-num_repr!(float)\n-num_repr!(f32)\n-num_repr!(f64)\n+num_repr!(f32, \"f32\")\n+num_repr!(f64, \"f64\")\n \n // New implementation using reflect::MovePtr\n \n@@ -267,12 +282,14 @@ impl TyVisitor for ReprVisitor {\n             self.write_escaped_slice(*s);\n         }\n     }\n+\n     fn visit_estr_uniq(&self) -> bool {\n         do self.get::<~str> |s| {\n             self.writer.write_char('~');\n             self.write_escaped_slice(*s);\n         }\n     }\n+\n     fn visit_estr_slice(&self) -> bool {\n         do self.get::<&str> |s| {\n             self.write_escaped_slice(*s);\n@@ -307,13 +324,23 @@ impl TyVisitor for ReprVisitor {\n         }\n     }\n \n+    #[cfg(stage0)]\n     fn visit_ptr(&self, _mtbl: uint, _inner: *TyDesc) -> bool {\n         do self.get::<*c_void> |p| {\n             self.writer.write_str(fmt!(\"(0x%x as *())\",\n                                        *p as uint));\n         }\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_ptr(&self, mtbl: uint, _inner: *TyDesc) -> bool {\n+        do self.get::<*c_void> |p| {\n+            self.writer.write_str(fmt!(\"(0x%x as *\", *p as uint));\n+            self.write_mut_qualifier(mtbl);\n+            self.writer.write_str(\"())\");\n+        }\n+    }\n+\n     fn visit_rptr(&self, mtbl: uint, inner: *TyDesc) -> bool {\n         self.writer.write_char('&');\n         self.write_mut_qualifier(mtbl);\n@@ -536,8 +563,6 @@ impl TyVisitor for ReprVisitor {\n \n \n     fn visit_trait(&self) -> bool { true }\n-    fn visit_var(&self) -> bool { true }\n-    fn visit_var_integral(&self) -> bool { true }\n     fn visit_param(&self, _i: uint) -> bool { true }\n     fn visit_self(&self) -> bool { true }\n     fn visit_type(&self) -> bool { true }\n@@ -550,9 +575,6 @@ impl TyVisitor for ReprVisitor {\n         }\n     }\n \n-    // Type no longer exists, vestigial function.\n-    fn visit_constr(&self, _inner: *TyDesc) -> bool { fail!(); }\n-\n     fn visit_closure_ptr(&self, _ck: uint) -> bool { true }\n }\n \n@@ -598,11 +620,14 @@ fn test_repr() {\n     exact_test(&(&mut x), \"&mut 10\");\n     exact_test(&(@mut [1, 2]), \"@mut [1, 2]\");\n \n+    exact_test(&(0 as *()), \"(0x0 as *())\");\n+    exact_test(&(0 as *mut ()), \"(0x0 as *mut ())\");\n+\n     exact_test(&(1,), \"(1,)\");\n     exact_test(&(@[1,2,3,4,5,6,7,8]),\n                \"@[1, 2, 3, 4, 5, 6, 7, 8]\");\n     exact_test(&(@[1u8,2u8,3u8,4u8]),\n-               \"@[1, 2, 3, 4]\");\n+               \"@[1u8, 2u8, 3u8, 4u8]\");\n     exact_test(&(@[\"hi\", \"there\"]),\n                \"@[\\\"hi\\\", \\\"there\\\"]\");\n     exact_test(&(~[\"hi\", \"there\"]),\n@@ -615,14 +640,14 @@ fn test_repr() {\n                \"@{a: 10, b: 1.234}\");\n     exact_test(&(~P{a:10, b:1.234}),\n                \"~{a: 10, b: 1.234}\");\n-    exact_test(&(10_u8, ~\"hello\"),\n-               \"(10, ~\\\"hello\\\")\");\n-    exact_test(&(10_u16, ~\"hello\"),\n-               \"(10, ~\\\"hello\\\")\");\n-    exact_test(&(10_u32, ~\"hello\"),\n-               \"(10, ~\\\"hello\\\")\");\n-    exact_test(&(10_u64, ~\"hello\"),\n-               \"(10, ~\\\"hello\\\")\");\n+    exact_test(&(10u8, ~\"hello\"),\n+               \"(10u8, ~\\\"hello\\\")\");\n+    exact_test(&(10u16, ~\"hello\"),\n+               \"(10u16, ~\\\"hello\\\")\");\n+    exact_test(&(10u32, ~\"hello\"),\n+               \"(10u32, ~\\\"hello\\\")\");\n+    exact_test(&(10u64, ~\"hello\"),\n+               \"(10u64, ~\\\"hello\\\")\");\n \n     struct Foo;\n     exact_test(&(~[Foo, Foo, Foo]), \"~[{}, {}, {}]\");"}, {"sha": "796567bd561196a3903f67a81b3547af5e63249c", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -161,13 +161,10 @@ pub trait TyVisitor {\n                       n_inputs: uint, retstyle: uint) -> bool;\n \n     fn visit_trait(&self) -> bool;\n-    fn visit_var(&self) -> bool;\n-    fn visit_var_integral(&self) -> bool;\n     fn visit_param(&self, i: uint) -> bool;\n     fn visit_self(&self) -> bool;\n     fn visit_type(&self) -> bool;\n     fn visit_opaque_box(&self) -> bool;\n-    fn visit_constr(&self, inner: *TyDesc) -> bool;\n     fn visit_closure_ptr(&self, ck: uint) -> bool;\n }\n "}, {"sha": "556842e6544e7791f385b50aa3633cc96a7ff9d3", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -59,7 +59,7 @@ And much, much more.\n #[warn(non_camel_case_types)];\n \n use cast;\n-use clone::Clone;\n+use clone::{Clone, DeepClone};\n use container::{Container, Mutable};\n use cmp::{Eq, TotalOrd, Ordering, Less, Equal, Greater};\n use cmp;\n@@ -2199,13 +2199,20 @@ pub mod bytes {\n     }\n }\n \n-impl<A:Clone> Clone for ~[A] {\n+impl<A: Clone> Clone for ~[A] {\n     #[inline]\n     fn clone(&self) -> ~[A] {\n         self.iter().map(|item| item.clone()).collect()\n     }\n }\n \n+impl<A: DeepClone> DeepClone for ~[A] {\n+    #[inline]\n+    fn deep_clone(&self) -> ~[A] {\n+        self.iter().map(|item| item.deep_clone()).collect()\n+    }\n+}\n+\n // This works because every lifetime is a sub-lifetime of 'static\n impl<'self, A> Zero for &'self [A] {\n     fn zero() -> &'self [A] { &'self [] }"}, {"sha": "eb67c45ed0015f136583ea1a9e6d44ce763de8b4", "filename": "src/test/run-pass/fixed_length_vec_glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -16,5 +16,5 @@ pub fn main() {\n     let arr = [1,2,3];\n     let struc = Struc {a: 13u8, b: arr, c: 42};\n     let s = sys::log_str(&struc);\n-    assert_eq!(s, ~\"{a: 13, b: [1, 2, 3], c: 42}\");\n+    assert_eq!(s, ~\"{a: 13u8, b: [1, 2, 3], c: 42}\");\n }"}, {"sha": "ec048d13a181aed1ff65e85c6d43e64def44bd46", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -25,7 +25,7 @@ fn check_log<T>(exp: ~str, v: T) {\n \n pub fn main() {\n     let x = list::from_vec([a(22u), b(~\"hi\")]);\n-    let exp = ~\"@Cons(a(22), @Cons(b(~\\\"hi\\\"), @Nil))\";\n+    let exp = ~\"@Cons(a(22u), @Cons(b(~\\\"hi\\\"), @Nil))\";\n     let act = fmt!(\"%?\", x);\n     assert!(act == exp);\n     check_log(exp, x);"}, {"sha": "4727e61b1fd0ffaeeb8551a7d7df2506f27d7df7", "filename": "src/test/run-pass/log-knows-the-names-of-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -19,7 +19,7 @@ enum bar {\n }\n \n pub fn main() {\n-    assert_eq!(~\"a(22)\", fmt!(\"%?\", a(22u)));\n+    assert_eq!(~\"a(22u)\", fmt!(\"%?\", a(22u)));\n     assert_eq!(~\"b(~\\\"hi\\\")\", fmt!(\"%?\", b(~\"hi\")));\n     assert_eq!(~\"c\", fmt!(\"%?\", c));\n     assert_eq!(~\"d\", fmt!(\"%?\", d));"}, {"sha": "11aa2b852045f1e1b2ded40472fa3bb3a2d5a649", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -64,6 +64,6 @@ pub fn main() {\n         // because `inner`s alignment was 4.\n         assert_eq!(sys::size_of::<Outer>(), m::size());\n \n-        assert_eq!(y, ~\"{c8: 22, t: {c64: 44}}\");\n+        assert_eq!(y, ~\"{c8: 22u8, t: {c64: 44u32}}\");\n     }\n }"}, {"sha": "cca2adc0873dba54d6730216ccb130779a5b44e0", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -86,6 +86,6 @@ pub fn main() {\n         // because `Inner`s alignment was 4.\n         assert_eq!(sys::size_of::<Outer>(), m::m::size());\n \n-        assert_eq!(y, ~\"{c8: 22, t: {c64: 44}}\");\n+        assert_eq!(y, ~\"{c8: 22u8, t: {c64: 44u64}}\");\n     }\n }"}, {"sha": "b56cef4277f5742faec632f7a3098b8e4a1e4d80", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -436,16 +436,6 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_var(&self) -> bool {\n-        if ! self.inner.visit_var() { return false; }\n-        true\n-    }\n-\n-    fn visit_var_integral(&self) -> bool {\n-        if ! self.inner.visit_var_integral() { return false; }\n-        true\n-    }\n-\n     fn visit_param(&self, i: uint) -> bool {\n         if ! self.inner.visit_param(i) { return false; }\n         true\n@@ -470,11 +460,6 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_constr(&self, inner: *TyDesc) -> bool {\n-        if ! self.inner.visit_constr(inner) { return false; }\n-        true\n-    }\n-\n     fn visit_closure_ptr(&self, ck: uint) -> bool {\n         self.align_to::<@fn()>();\n         if ! self.inner.visit_closure_ptr(ck) { return false; }\n@@ -633,13 +618,10 @@ impl TyVisitor for my_visitor {\n \n \n     fn visit_trait(&self) -> bool { true }\n-    fn visit_var(&self) -> bool { true }\n-    fn visit_var_integral(&self) -> bool { true }\n     fn visit_param(&self, _i: uint) -> bool { true }\n     fn visit_self(&self) -> bool { true }\n     fn visit_type(&self) -> bool { true }\n     fn visit_opaque_box(&self) -> bool { true }\n-    fn visit_constr(&self, _inner: *TyDesc) -> bool { true }\n     fn visit_closure_ptr(&self, _ck: uint) -> bool { true }\n }\n "}, {"sha": "1462d8aace130cbe73a31ffe699a91306cabe679", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -144,13 +144,10 @@ impl TyVisitor for MyVisitor {\n \n \n     fn visit_trait(&self) -> bool { true }\n-    fn visit_var(&self) -> bool { true }\n-    fn visit_var_integral(&self) -> bool { true }\n     fn visit_param(&self, _i: uint) -> bool { true }\n     fn visit_self(&self) -> bool { true }\n     fn visit_type(&self) -> bool { true }\n     fn visit_opaque_box(&self) -> bool { true }\n-    fn visit_constr(&self, _inner: *TyDesc) -> bool { true }\n     fn visit_closure_ptr(&self, _ck: uint) -> bool { true }\n }\n "}, {"sha": "cb93cea28956b7e7121d46540215a2acc055f67a", "filename": "src/test/run-pass/tag-align-shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f32ea8820727f4f4944423133e6b32e2653a1d2/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs?ref=7f32ea8820727f4f4944423133e6b32e2653a1d2", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n     let x = t_rec {c8: 22u8, t: a_tag(44u64)};\n     let y = fmt!(\"%?\", x);\n     info!(\"y = %s\", y);\n-    assert_eq!(y, ~\"{c8: 22, t: a_tag(44)}\");\n+    assert_eq!(y, ~\"{c8: 22u8, t: a_tag(44u64)}\");\n }"}]}