{"sha": "dfa8ae40480b76f2137cf1bbd8e87215bd01ad60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYThhZTQwNDgwYjc2ZjIxMzdjZjFiYmQ4ZTg3MjE1YmQwMWFkNjA=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-15T19:03:38Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-15T19:03:38Z"}, "message": "Merge pull request #464 from marcusklaas/semicolonz\n\nForce semicolons after break/continue/return. Remove after blocks.", "tree": {"sha": "cf28b6399dec50aa51aecf43f69423c5efcb0081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf28b6399dec50aa51aecf43f69423c5efcb0081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60", "html_url": "https://github.com/rust-lang/rust/commit/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ac3be2c11d48c7f982f3c3a48da50254946d6a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac3be2c11d48c7f982f3c3a48da50254946d6a1", "html_url": "https://github.com/rust-lang/rust/commit/5ac3be2c11d48c7f982f3c3a48da50254946d6a1"}, {"sha": "b039e3a8c31a1357c13034c7d1fc00cd2686fc37", "url": "https://api.github.com/repos/rust-lang/rust/commits/b039e3a8c31a1357c13034c7d1fc00cd2686fc37", "html_url": "https://github.com/rust-lang/rust/commit/b039e3a8c31a1357c13034c7d1fc00cd2686fc37"}], "stats": {"total": 65, "additions": 54, "deletions": 11}, "files": [{"sha": "7d2ce3ea3af5dfecfe700cbeec00c320446d0319", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=dfa8ae40480b76f2137cf1bbd8e87215bd01ad60", "patch": "@@ -1322,7 +1322,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n \n         if prelim_tactic == ListTactic::HorizontalVertical && fields.len() > 1 {\n             prelim_tactic = ListTactic::LimitedHorizontalVertical(context.config.struct_lit_width);\n-        };\n+        }\n \n         definitive_tactic(&item_vec, prelim_tactic, h_budget)\n     };"}, {"sha": "5f287ab5ee9e509c590ad86e5c8e95fe65702aff", "filename": "src/visitor.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=dfa8ae40480b76f2137cf1bbd8e87215bd01ad60", "patch": "@@ -59,13 +59,11 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             }\n             ast::Stmt_::StmtExpr(ref ex, _) | ast::Stmt_::StmtSemi(ref ex, _) => {\n                 self.format_missing_with_indent(stmt.span.lo);\n-                let suffix = if let ast::Stmt_::StmtExpr(..) = stmt.node {\n-                    \"\"\n-                } else {\n+                let suffix = if semicolon_for_stmt(stmt) {\n                     \";\"\n+                } else {\n+                    \"\"\n                 };\n-\n-                // 1 = trailing semicolon;\n                 let rewrite = ex.rewrite(&self.get_context(),\n                                          self.config.max_width - self.block_indent.width() -\n                                          suffix.len(),\n@@ -110,6 +108,10 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             Some(ref e) => {\n                 self.format_missing_with_indent(e.span.lo);\n                 self.visit_expr(e);\n+\n+                if semicolon_for_expr(e) {\n+                    self.buffer.push_str(\";\");\n+                }\n             }\n             None => {}\n         }\n@@ -215,7 +217,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             }\n             ast::Item_::ItemMac(..) => {\n                 self.format_missing_with_indent(item.span.lo);\n-                // TODO: we cannot format these yet, because of a bad span.\n+                // FIXME: we cannot format these yet, because of a bad span.\n                 // See rust lang issue #28424.\n                 // visit::walk_item(self, item);\n             }\n@@ -245,7 +247,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 self.last_pos = ti.span.hi;\n             }\n         }\n-        // TODO: format trait types.\n+        // TODO(#78): format trait types.\n \n         visit::walk_trait_item(self, ti)\n     }\n@@ -399,6 +401,35 @@ impl<'a> FmtVisitor<'a> {\n     }\n }\n \n+fn semicolon_for_stmt(stmt: &ast::Stmt) -> bool {\n+    match stmt.node {\n+        ast::Stmt_::StmtSemi(ref expr, _) => {\n+            match expr.node {\n+                ast::Expr_::ExprWhile(..) |\n+                ast::Expr_::ExprWhileLet(..) |\n+                ast::Expr_::ExprIf(..) |\n+                ast::Expr_::ExprIfLet(..) |\n+                ast::Expr_::ExprBlock(..) |\n+                ast::Expr_::ExprLoop(..) |\n+                ast::Expr_::ExprForLoop(..) |\n+                ast::Expr_::ExprMatch(..) => false,\n+                _ => true,\n+            }\n+        }\n+        ast::Stmt_::StmtExpr(..) => false,\n+        _ => true,\n+    }\n+}\n+\n+fn semicolon_for_expr(expr: &ast::Expr) -> bool {\n+    match expr.node {\n+        ast::Expr_::ExprRet(..) |\n+        ast::Expr_::ExprAgain(..) |\n+        ast::Expr_::ExprBreak(..) => true,\n+        _ => false,\n+    }\n+}\n+\n impl<'a> Rewrite for [ast::Attribute] {\n     fn rewrite(&self, context: &RewriteContext, _: usize, offset: Indent) -> Option<String> {\n         let mut result = String::new();"}, {"sha": "b5a22479058db54d66fe84cb258e21ee5d67d5f7", "filename": "tests/source/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=dfa8ae40480b76f2137cf1bbd8e87215bd01ad60", "patch": "@@ -70,7 +70,7 @@ fn bar() {\n     let bar = 5 ;\n     let nonsense = (10 .. 0)..(0..10);\n \n-    loop{if true {break;}}\n+    loop{if true {break}}\n \n     let x = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa &&\n              aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n@@ -226,3 +226,9 @@ fn repeats() {\n     let x = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa+bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb+cccccccccccccccc; x + y + z ];\n     let y = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccc; xxxxx + yyyyy + zzzzz ];\n }\n+\n+fn blocks() {\n+    if 1 + 1 == 2 {\n+        println!(\"yay arithmetix!\");\n+    };\n+}"}, {"sha": "ed842289439cfd4378a27fe74053dbbace9a4497", "filename": "tests/target/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=dfa8ae40480b76f2137cf1bbd8e87215bd01ad60", "patch": "@@ -40,7 +40,7 @@ fn foo() -> bool {\n         result\n     } else {\n         4\n-    };\n+    }\n \n     if let Some(x) = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa {\n         // Nothing\n@@ -248,3 +248,9 @@ fn repeats() {\n     let y = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb +\n              cccccccccccccccc; xxxxx + yyyyy + zzzzz];\n }\n+\n+fn blocks() {\n+    if 1 + 1 == 2 {\n+        println!(\"yay arithmetix!\");\n+    }\n+}"}, {"sha": "e758cdd6f71011d623ff2db953a9db1d11d662f5", "filename": "tests/target/match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa8ae40480b76f2137cf1bbd8e87215bd01ad60/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=dfa8ae40480b76f2137cf1bbd8e87215bd01ad60", "patch": "@@ -215,5 +215,5 @@ fn issue383() {\n     match resolution.last_private {\n         LastImport{..} => false,\n         _ => true,\n-    };\n+    }\n }"}]}