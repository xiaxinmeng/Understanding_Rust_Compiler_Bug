{"sha": "634774b89b446945d62572e86c6d29f2dacc8c76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNDc3NGI4OWI0NDY5NDVkNjI1NzJlODZjNmQyOWYyZGFjYzhjNzY=", "commit": {"author": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2020-01-24T10:50:03Z"}, "committer": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2020-01-24T11:42:24Z"}, "message": "don't fire empty_loop in no_std crates", "tree": {"sha": "56d89ae222afe7552d6f2e7091e23a76453c98c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56d89ae222afe7552d6f2e7091e23a76453c98c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/634774b89b446945d62572e86c6d29f2dacc8c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/634774b89b446945d62572e86c6d29f2dacc8c76", "html_url": "https://github.com/rust-lang/rust/commit/634774b89b446945d62572e86c6d29f2dacc8c76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/634774b89b446945d62572e86c6d29f2dacc8c76/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c7cfa83211c03a24f0c075c71ac3e77525f3232", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7cfa83211c03a24f0c075c71ac3e77525f3232", "html_url": "https://github.com/rust-lang/rust/commit/2c7cfa83211c03a24f0c075c71ac3e77525f3232"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "3f0fa6eebc64b6884eb6b8d624fc2589b3403626", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/634774b89b446945d62572e86c6d29f2dacc8c76/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634774b89b446945d62572e86c6d29f2dacc8c76/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=634774b89b446945d62572e86c6d29f2dacc8c76", "patch": "@@ -4,9 +4,9 @@ use crate::utils::paths;\n use crate::utils::usage::{is_unused, mutated_variables};\n use crate::utils::{\n     get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n-    is_integer_const, is_refutable, last_path_segment, match_trait_method, match_type, match_var, multispan_sugg,\n-    snippet, snippet_opt, snippet_with_applicability, span_help_and_lint, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, SpanlessEq,\n+    is_integer_const, is_no_std_crate, is_refutable, last_path_segment, match_trait_method, match_type, match_var,\n+    multispan_sugg, snippet, snippet_opt, snippet_with_applicability, span_help_and_lint, span_lint,\n+    span_lint_and_sugg, span_lint_and_then, SpanlessEq,\n };\n use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sext, sugg};\n use if_chain::if_chain;\n@@ -502,7 +502,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n         // (even if the \"match\" or \"if let\" is used for declaration)\n         if let ExprKind::Loop(ref block, _, LoopSource::Loop) = expr.kind {\n             // also check for empty `loop {}` statements\n-            if block.stmts.is_empty() && block.expr.is_none() {\n+            if block.stmts.is_empty() && block.expr.is_none() && !is_no_std_crate(cx.tcx.hir().krate()) {\n                 span_lint(\n                     cx,\n                     EMPTY_LOOP,"}, {"sha": "2d21aeaeec4132e3f548045cb33eae39fc3e92a2", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/634774b89b446945d62572e86c6d29f2dacc8c76/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634774b89b446945d62572e86c6d29f2dacc8c76/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=634774b89b446945d62572e86c6d29f2dacc8c76", "patch": "@@ -1,10 +1,8 @@\n use rustc_hir::{Crate, Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::symbol::sym;\n-use syntax::ast::AttrKind;\n \n-use crate::utils::{is_entrypoint_fn, snippet, span_help_and_lint};\n+use crate::utils::{is_entrypoint_fn, is_no_std_crate, snippet, span_help_and_lint};\n use if_chain::if_chain;\n \n declare_clippy_lint! {\n@@ -35,13 +33,7 @@ impl_lint_pass!(MainRecursion => [MAIN_RECURSION]);\n \n impl LateLintPass<'_, '_> for MainRecursion {\n     fn check_crate(&mut self, _: &LateContext<'_, '_>, krate: &Crate<'_>) {\n-        self.has_no_std_attr = krate.attrs.iter().any(|attr| {\n-            if let AttrKind::Normal(ref attr) = attr.kind {\n-                attr.path == sym::no_std\n-            } else {\n-                false\n-            }\n-        });\n+        self.has_no_std_attr = is_no_std_crate(krate);\n     }\n \n     fn check_expr_post(&mut self, cx: &LateContext<'_, '_>, expr: &Expr<'_>) {"}, {"sha": "8918cbfa59b1ceb3b8ffd5ee3923850ffabaeb2f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/634774b89b446945d62572e86c6d29f2dacc8c76/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634774b89b446945d62572e86c6d29f2dacc8c76/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=634774b89b446945d62572e86c6d29f2dacc8c76", "patch": "@@ -43,7 +43,7 @@ use rustc_hir::Node;\n use rustc_hir::*;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_span::hygiene::ExpnKind;\n-use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::symbol::{self, kw, Symbol};\n use rustc_span::{BytePos, Pos, Span, DUMMY_SP};\n use smallvec::SmallVec;\n use syntax::ast::{self, Attribute, LitKind};\n@@ -1344,3 +1344,13 @@ pub fn is_must_use_func_call(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool\n         false\n     }\n }\n+\n+pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {\n+    krate.attrs.iter().any(|attr| {\n+        if let ast::AttrKind::Normal(ref attr) = attr.kind {\n+            attr.path == symbol::sym::no_std\n+        } else {\n+            false\n+        }\n+    })\n+}"}, {"sha": "879d1d5d916e439bf219fef4e343ab0320c13d51", "filename": "tests/ui/issue-3746.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/634774b89b446945d62572e86c6d29f2dacc8c76/tests%2Fui%2Fissue-3746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634774b89b446945d62572e86c6d29f2dacc8c76/tests%2Fui%2Fissue-3746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue-3746.rs?ref=634774b89b446945d62572e86c6d29f2dacc8c76", "patch": "@@ -0,0 +1,22 @@\n+// ignore-macos\n+// ignore-windows\n+\n+#![warn(clippy::empty_loop)]\n+#![feature(lang_items, link_args, start, libc)]\n+#![link_args = \"-nostartfiles\"]\n+#![no_std]\n+\n+use core::panic::PanicInfo;\n+\n+#[start]\n+fn main(argc: isize, argv: *const *const u8) -> isize {\n+    loop {}\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}]}