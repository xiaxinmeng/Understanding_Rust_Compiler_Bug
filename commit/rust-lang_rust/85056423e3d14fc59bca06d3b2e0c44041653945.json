{"sha": "85056423e3d14fc59bca06d3b2e0c44041653945", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MDU2NDIzZTNkMTRmYzU5YmNhMDZkM2IyZTBjNDQwNDE2NTM5NDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-09T17:21:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-09T17:21:50Z"}, "message": "Merge #9193\n\n9193: Implement dummy expansions for builtin attributes r=jonas-schievink a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "482b3232ebab974ca73616fef50bfc531f44b53f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/482b3232ebab974ca73616fef50bfc531f44b53f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85056423e3d14fc59bca06d3b2e0c44041653945", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwPiuCRBK7hj4Ov3rIwAAdHEIAJ5/ekYuXwphl+7TQItBkDZ+\nGk6xWdjIBsHf/y9c+WMYq291wd3VqQ6AbOCU+HxhzV6rXvSCipvMORcQVk3mxWsc\nxQE9zYE9iqBn1iuKGh0BpvgBkcGzLb+EePN6Z/eWshBBUY9EFuuFAG2iKA81UOcc\nMul3V6jb+IZS8pzCZGnE+d+8UAgt/q6QwSPVnosaRvwScPk8QmkxMTkWu7lKhJxa\neeCIOmb9tRwmI8dNgXvlrcb1kL3MVSsCTpQWe1+VXrO+dp1+mMNfJ8iwyEUUdmMe\nCXxEFPMICpPIktFoTq/u+4TL1twYaAgKSocnBliyxjBH6u+PZTkqCYqxTKgMAfo=\n=GXGe\n-----END PGP SIGNATURE-----\n", "payload": "tree 482b3232ebab974ca73616fef50bfc531f44b53f\nparent 5f592f4f58a6e1e1db0f920af34a2f569b65017c\nparent 1e51b137d947b209a083f43cd4b0903d7ba28ce3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623259310 +0000\ncommitter GitHub <noreply@github.com> 1623259310 +0000\n\nMerge #9193\n\n9193: Implement dummy expansions for builtin attributes r=jonas-schievink a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85056423e3d14fc59bca06d3b2e0c44041653945", "html_url": "https://github.com/rust-lang/rust/commit/85056423e3d14fc59bca06d3b2e0c44041653945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85056423e3d14fc59bca06d3b2e0c44041653945/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f592f4f58a6e1e1db0f920af34a2f569b65017c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f592f4f58a6e1e1db0f920af34a2f569b65017c", "html_url": "https://github.com/rust-lang/rust/commit/5f592f4f58a6e1e1db0f920af34a2f569b65017c"}, {"sha": "1e51b137d947b209a083f43cd4b0903d7ba28ce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e51b137d947b209a083f43cd4b0903d7ba28ce3", "html_url": "https://github.com/rust-lang/rust/commit/1e51b137d947b209a083f43cd4b0903d7ba28ce3"}], "stats": {"total": 139, "additions": 128, "deletions": 11}, "files": [{"sha": "debc3ee624c069be28ca25bab988ff316435ab86", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=85056423e3d14fc59bca06d3b2e0c44041653945", "patch": "@@ -1344,6 +1344,7 @@ impl MacroDef {\n             MacroDefKind::Declarative(_) => MacroKind::Declarative,\n             MacroDefKind::BuiltIn(_, _) | MacroDefKind::BuiltInEager(_, _) => MacroKind::BuiltIn,\n             MacroDefKind::BuiltInDerive(_, _) => MacroKind::Derive,\n+            MacroDefKind::BuiltInAttr(_, _) => MacroKind::Attr,\n             MacroDefKind::ProcMacro(_, base_db::ProcMacroKind::CustomDerive, _) => {\n                 MacroKind::Derive\n             }"}, {"sha": "93f30f23dd8ac10909968a623ace406df5dfb5c2", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=85056423e3d14fc59bca06d3b2e0c44041653945", "patch": "@@ -9,6 +9,7 @@ use base_db::{CrateId, Edition, FileId, ProcMacroId};\n use cfg::{CfgExpr, CfgOptions};\n use hir_expand::{\n     ast_id_map::FileAstId,\n+    builtin_attr::find_builtin_attr,\n     builtin_derive::find_builtin_derive,\n     builtin_macro::find_builtin_macro,\n     name::{name, AsName, Name},\n@@ -1836,7 +1837,8 @@ impl ModCollector<'_, '_> {\n         let attrs = self.item_tree.attrs(self.def_collector.db, krate, ModItem::from(id).into());\n         if attrs.by_key(\"rustc_builtin_macro\").exists() {\n             let macro_id = find_builtin_macro(&mac.name, krate, ast_id)\n-                .or_else(|| find_builtin_derive(&mac.name, krate, ast_id));\n+                .or_else(|| find_builtin_derive(&mac.name, krate, ast_id))\n+                .or_else(|| find_builtin_attr(&mac.name, krate, ast_id));\n \n             match macro_id {\n                 Some(macro_id) => {"}, {"sha": "c8432005ef52f54fa93548e0f600f24f519a99fb", "filename": "crates/hir_expand/src/builtin_attr.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs?ref=85056423e3d14fc59bca06d3b2e0c44041653945", "patch": "@@ -0,0 +1,67 @@\n+//! Builtin derives.\n+\n+use syntax::ast;\n+\n+use crate::{db::AstDatabase, name, AstId, CrateId, MacroCallId, MacroDefId, MacroDefKind};\n+\n+macro_rules! register_builtin {\n+    ( $(($name:ident, $variant:ident) => $expand:ident),* ) => {\n+        #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+        pub enum BuiltinAttrExpander {\n+            $($variant),*\n+        }\n+\n+        impl BuiltinAttrExpander {\n+            pub fn expand(\n+                &self,\n+                db: &dyn AstDatabase,\n+                id: MacroCallId,\n+                tt: &tt::Subtree,\n+            ) -> Result<tt::Subtree, mbe::ExpandError> {\n+                let expander = match *self {\n+                    $( BuiltinAttrExpander::$variant => $expand, )*\n+                };\n+                expander(db, id, tt)\n+            }\n+\n+            fn find_by_name(name: &name::Name) -> Option<Self> {\n+                match name {\n+                    $( id if id == &name::name![$name] => Some(BuiltinAttrExpander::$variant), )*\n+                     _ => None,\n+                }\n+            }\n+        }\n+\n+    };\n+}\n+\n+register_builtin! {\n+    (bench, Bench) => dummy_attr_expand,\n+    (cfg_accessible, CfgAccessible) => dummy_attr_expand,\n+    (cfg_eval, CfgEval) => dummy_attr_expand,\n+    (derive, Derive) => dummy_attr_expand,\n+    (global_allocator, GlobalAllocator) => dummy_attr_expand,\n+    (test, Test) => dummy_attr_expand,\n+    (test_case, TestCase) => dummy_attr_expand\n+}\n+\n+pub fn find_builtin_attr(\n+    ident: &name::Name,\n+    krate: CrateId,\n+    ast_id: AstId<ast::Macro>,\n+) -> Option<MacroDefId> {\n+    let expander = BuiltinAttrExpander::find_by_name(ident)?;\n+    Some(MacroDefId {\n+        krate,\n+        kind: MacroDefKind::BuiltInAttr(expander, ast_id),\n+        local_inner: false,\n+    })\n+}\n+\n+fn dummy_attr_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    Ok(tt.clone())\n+}"}, {"sha": "45e6e446afe970ad41a4126093c6cea0cebf1ceb", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=85056423e3d14fc59bca06d3b2e0c44041653945", "patch": "@@ -12,9 +12,9 @@ use syntax::{\n };\n \n use crate::{\n-    ast_id_map::AstIdMap, hygiene::HygieneFrame, input::process_macro_input, BuiltinDeriveExpander,\n-    BuiltinFnLikeExpander, HirFileId, HirFileIdRepr, MacroCallId, MacroCallKind, MacroCallLoc,\n-    MacroDefId, MacroDefKind, MacroFile, ProcMacroExpander,\n+    ast_id_map::AstIdMap, hygiene::HygieneFrame, input::process_macro_input, BuiltinAttrExpander,\n+    BuiltinDeriveExpander, BuiltinFnLikeExpander, HirFileId, HirFileIdRepr, MacroCallId,\n+    MacroCallKind, MacroCallLoc, MacroDefId, MacroDefKind, MacroFile, ProcMacroExpander,\n };\n \n /// Total limit on the number of tokens produced by any macro invocation.\n@@ -31,6 +31,8 @@ pub enum TokenExpander {\n     MacroDef { mac: mbe::MacroDef, def_site_token_map: mbe::TokenMap },\n     /// Stuff like `line!` and `file!`.\n     Builtin(BuiltinFnLikeExpander),\n+    /// `global_allocator` and such.\n+    BuiltinAttr(BuiltinAttrExpander),\n     /// `derive(Copy)` and such.\n     BuiltinDerive(BuiltinDeriveExpander),\n     /// The thing we love the most here in rust-analyzer -- procedural macros.\n@@ -49,6 +51,7 @@ impl TokenExpander {\n             TokenExpander::MacroDef { mac, .. } => mac.expand(tt),\n             TokenExpander::Builtin(it) => it.expand(db, id, tt),\n             // FIXME switch these to ExpandResult as well\n+            TokenExpander::BuiltinAttr(it) => it.expand(db, id, tt).into(),\n             TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n             TokenExpander::ProcMacro(_) => {\n                 // We store the result in salsa db to prevent non-deterministic behavior in\n@@ -64,6 +67,7 @@ impl TokenExpander {\n             TokenExpander::MacroRules { mac, .. } => mac.map_id_down(id),\n             TokenExpander::MacroDef { mac, .. } => mac.map_id_down(id),\n             TokenExpander::Builtin(..)\n+            | TokenExpander::BuiltinAttr(..)\n             | TokenExpander::BuiltinDerive(..)\n             | TokenExpander::ProcMacro(..) => id,\n         }\n@@ -74,6 +78,7 @@ impl TokenExpander {\n             TokenExpander::MacroRules { mac, .. } => mac.map_id_up(id),\n             TokenExpander::MacroDef { mac, .. } => mac.map_id_up(id),\n             TokenExpander::Builtin(..)\n+            | TokenExpander::BuiltinAttr(..)\n             | TokenExpander::BuiltinDerive(..)\n             | TokenExpander::ProcMacro(..) => (id, mbe::Origin::Call),\n         }\n@@ -299,6 +304,9 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<TokenExpander>>\n             }\n         },\n         MacroDefKind::BuiltIn(expander, _) => Some(Arc::new(TokenExpander::Builtin(expander))),\n+        MacroDefKind::BuiltInAttr(expander, _) => {\n+            Some(Arc::new(TokenExpander::BuiltinAttr(expander)))\n+        }\n         MacroDefKind::BuiltInDerive(expander, _) => {\n             Some(Arc::new(TokenExpander::BuiltinDerive(expander)))\n         }"}, {"sha": "9093255f4c3b17c448999f6b6447db8d3891d08b", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=85056423e3d14fc59bca06d3b2e0c44041653945", "patch": "@@ -224,6 +224,7 @@ fn eager_macro_recur(\n             }\n             MacroDefKind::Declarative(_)\n             | MacroDefKind::BuiltIn(..)\n+            | MacroDefKind::BuiltInAttr(..)\n             | MacroDefKind::BuiltInDerive(..)\n             | MacroDefKind::ProcMacro(..) => {\n                 let res = lazy_expand(db, &def, curr.with_value(child.clone()), krate);"}, {"sha": "05c6c3fb1644bceffa63872b4cb22c11c40d7d63", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=85056423e3d14fc59bca06d3b2e0c44041653945", "patch": "@@ -192,6 +192,7 @@ impl HygieneFrame {\n                         (info, Some(loc.def.krate), loc.def.local_inner)\n                     }\n                     MacroDefKind::BuiltIn(..) => (info, Some(loc.def.krate), false),\n+                    MacroDefKind::BuiltInAttr(..) => (info, None, false),\n                     MacroDefKind::BuiltInDerive(..) => (info, None, false),\n                     MacroDefKind::BuiltInEager(..) => (info, None, false),\n                     MacroDefKind::ProcMacro(..) => (info, None, false),"}, {"sha": "623791b5829e0142618a26687c800ce6733898d7", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=85056423e3d14fc59bca06d3b2e0c44041653945", "patch": "@@ -8,6 +8,7 @@ pub mod db;\n pub mod ast_id_map;\n pub mod name;\n pub mod hygiene;\n+pub mod builtin_attr;\n pub mod builtin_derive;\n pub mod builtin_macro;\n pub mod proc_macro;\n@@ -32,6 +33,7 @@ use syntax::{\n };\n \n use crate::ast_id_map::FileAstId;\n+use crate::builtin_attr::BuiltinAttrExpander;\n use crate::builtin_derive::BuiltinDeriveExpander;\n use crate::builtin_macro::{BuiltinFnLikeExpander, EagerExpander};\n use crate::proc_macro::ProcMacroExpander;\n@@ -206,6 +208,7 @@ impl MacroDefId {\n         let id = match &self.kind {\n             MacroDefKind::Declarative(id) => id,\n             MacroDefKind::BuiltIn(_, id) => id,\n+            MacroDefKind::BuiltInAttr(_, id) => id,\n             MacroDefKind::BuiltInDerive(_, id) => id,\n             MacroDefKind::BuiltInEager(_, id) => id,\n             MacroDefKind::ProcMacro(.., id) => return Either::Right(*id),\n@@ -223,6 +226,7 @@ pub enum MacroDefKind {\n     Declarative(AstId<ast::Macro>),\n     BuiltIn(BuiltinFnLikeExpander, AstId<ast::Macro>),\n     // FIXME: maybe just Builtin and rename BuiltinFnLikeExpander to BuiltinExpander\n+    BuiltInAttr(BuiltinAttrExpander, AstId<ast::Macro>),\n     BuiltInDerive(BuiltinDeriveExpander, AstId<ast::Macro>),\n     BuiltInEager(EagerExpander, AstId<ast::Macro>),\n     ProcMacro(ProcMacroExpander, ProcMacroKind, AstId<ast::Fn>),"}, {"sha": "376fe130f1efbedba0a9b8f0605c7fb6d396d79d", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=85056423e3d14fc59bca06d3b2e0c44041653945", "patch": "@@ -160,7 +160,6 @@ pub mod known {\n         str,\n         // Special names\n         macro_rules,\n-        derive,\n         doc,\n         cfg,\n         cfg_attr,\n@@ -240,6 +239,14 @@ pub mod known {\n         PartialOrd,\n         Eq,\n         PartialEq,\n+        // Builtin attributes\n+        bench,\n+        cfg_accessible,\n+        cfg_eval,\n+        derive,\n+        global_allocator,\n+        test,\n+        test_case,\n         // Safe intrinsics\n         abort,\n         size_of,"}, {"sha": "58d4dd9ee81805ca19aba75e832ec8e4df605cd4", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=85056423e3d14fc59bca06d3b2e0c44041653945", "patch": "@@ -656,6 +656,32 @@ fn main() { let _ = crate::$0 }\n         );\n     }\n \n+    #[test]\n+    fn does_not_complete_non_fn_macros() {\n+        check(\n+            r#\"\n+mod m {\n+    #[rustc_builtin_macro]\n+    pub macro Clone {}\n+}\n+\n+fn f() {m::$0}\n+\"#,\n+            expect![[r#\"\"#]],\n+        );\n+        check(\n+            r#\"\n+mod m {\n+    #[rustc_builtin_macro]\n+    pub macro bench {}\n+}\n+\n+fn f() {m::$0}\n+\"#,\n+            expect![[r#\"\"#]],\n+        );\n+    }\n+\n     #[test]\n     fn completes_in_assoc_item_list() {\n         check("}, {"sha": "b1e6b2b775ec5245d98856a8cb7b29c97bc90c3b", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85056423e3d14fc59bca06d3b2e0c44041653945/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=85056423e3d14fc59bca06d3b2e0c44041653945", "patch": "@@ -481,14 +481,14 @@ impl S {\n         );\n         check(\n             r#\"\n-mod m {\n-    #[rustc_builtin_macro]\n-    pub macro Clone {}\n-}\n+#[rustc_builtin_macro]\n+pub macro bench {}\n \n-fn f() {m::$0}\n+fn f() {$0}\n \"#,\n-            expect![[r#\"\"#]],\n+            expect![[r#\"\n+                fn f() fn()\n+            \"#]],\n         );\n     }\n "}]}