{"sha": "600fcc71594cb74b1d3802379b5b352bcc31274c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMGZjYzcxNTk0Y2I3NGIxZDM4MDIzNzliNWIzNTJiY2MzMTI3NGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-01-29T18:53:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:14Z"}, "message": "Report const eval errors at the correct span", "tree": {"sha": "06b4ad5cbcfe33adae3613050f3cbeacb050ca5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b4ad5cbcfe33adae3613050f3cbeacb050ca5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/600fcc71594cb74b1d3802379b5b352bcc31274c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53YACgkQpp+NIls6\n19mKdQ//dZMmtrCAgTU78FvrDjo4pcytVA4iXLlxecyKnWzZ/NoGmcSWRox3JcNa\nBvWHeDXf5Gx5DLHEfYaHOOgFvuKJZpiAHx2NhR3Jp3FTiOSy18ju6a3g1lVS8rz0\nDWieMTyxEjqJmrmrwpaVDbi5Zk3JiqAmUkY5ForCZHZ/3Sg1L3rNdoYGOaNz9M2m\nDM+f7I/ucMwVJNYGX193lOv+DQYX8PhGms0RnnWE2/jp0tDRYYTk+3JmfgwcSjdV\nGKf6QHBU/KWpQJct3d/Xsmpbnwsko3kqG/jgZpJFIRfkM9Rbag2RoFFwpceSdzZf\nianNKMsVY9vqoSxe8wt9d1V21Qk5Uu8hPJBi9P/ovKr0701ufMVgiQhxz94Meyzx\nyISn01BXs7VK/bm7Hg7cFog3fWPTwV2Hc4T2UFoNzmb31nHaUUsvlre9/1EMSFW+\nPeSqmCZrEFyztPGCY64s45QEzdF0LnrxHgGSMirJFmnFJIgHNFbtkGhGvmGHyNuo\nF2ZZaXsCbzKDYjoFqOB2TRycraEpAklAdSsgnwxBFI3hPUE5F9cwXdxrFRMmxzYc\nnNpV3s+1fmjIlLH7oT3eMtYmAKEANHnehSKvKj4hBe1sgu0e3D3e5Gkr1RtOJXhE\ncm6JFi1TNbAb9TV3TWs5UpqFtWo9xUHuK12yMgyYWR3xHOvwlao=\n=bxCr\n-----END PGP SIGNATURE-----", "payload": "tree 06b4ad5cbcfe33adae3613050f3cbeacb050ca5e\nparent 13c0dc56dfa42e6674dd379e3a728b418bfdedcb\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1517252026 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494454 +0100\n\nReport const eval errors at the correct span\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/600fcc71594cb74b1d3802379b5b352bcc31274c", "html_url": "https://github.com/rust-lang/rust/commit/600fcc71594cb74b1d3802379b5b352bcc31274c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/600fcc71594cb74b1d3802379b5b352bcc31274c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c0dc56dfa42e6674dd379e3a728b418bfdedcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/13c0dc56dfa42e6674dd379e3a728b418bfdedcb", "html_url": "https://github.com/rust-lang/rust/commit/13c0dc56dfa42e6674dd379e3a728b418bfdedcb"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "3dba00d1fb1b24d66a0ee54fa58f704584c4c77b", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/600fcc71594cb74b1d3802379b5b352bcc31274c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600fcc71594cb74b1d3802379b5b352bcc31274c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=600fcc71594cb74b1d3802379b5b352bcc31274c", "patch": "@@ -38,6 +38,7 @@ use syntax_pos::Span;\n \n #[derive(Clone, Debug)]\n pub enum PatternError {\n+    AssociatedConstInPattern(Span),\n     StaticInPattern(Span),\n     FloatBug,\n     NonConstPath(Span),\n@@ -150,7 +151,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                     BindingMode::ByValue => mutability == Mutability::Mut,\n                     BindingMode::ByRef(_, bk) => {\n                         write!(f, \"ref \")?;\n-                        bk == BorrowKind::Mut\n+                        match bk { BorrowKind::Mut { .. } => true, _ => false }\n                     }\n                 };\n                 if is_mut {\n@@ -462,7 +463,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         (Mutability::Not, BindingMode::ByValue),\n                     ty::BindByReference(hir::MutMutable) =>\n                         (Mutability::Not, BindingMode::ByRef(\n-                            region.unwrap(), BorrowKind::Mut)),\n+                            region.unwrap(), BorrowKind::Mut { allow_two_phase_borrow: false })),\n                     ty::BindByReference(hir::MutImmutable) =>\n                         (Mutability::Not, BindingMode::ByRef(\n                             region.unwrap(), BorrowKind::Shared)),\n@@ -672,6 +673,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                   -> Pattern<'tcx> {\n         let ty = self.tables.node_id_to_type(id);\n         let def = self.tables.qpath_def(qpath, id);\n+        let is_associated_const = match def {\n+            Def::AssociatedConst(_) => true,\n+            _ => false,\n+        };\n         let kind = match def {\n             Def::Const(def_id) | Def::AssociatedConst(def_id) => {\n                 let substs = self.tables.node_substs(id);\n@@ -697,7 +702,11 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         }\n                     },\n                     None => {\n-                        self.errors.push(PatternError::StaticInPattern(span));\n+                        self.errors.push(if is_associated_const {\n+                            PatternError::AssociatedConstInPattern(span)\n+                        } else {\n+                            PatternError::StaticInPattern(span)\n+                        });\n                         PatternKind::Wild\n                     },\n                 }\n@@ -814,7 +823,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                 let field = Field::new(i);\n                                 let val = match cv.val {\n                                     ConstVal::Value(miri) => const_val_field(\n-                                        self.tcx, self.param_env, instance,\n+                                        self.tcx, self.param_env, instance, span,\n                                         Some(variant_index), field, miri, cv.ty,\n                                     ).unwrap(),\n                                     _ => bug!(\"{:#?} is not a valid tuple\", cv),\n@@ -842,7 +851,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         let field = Field::new(i);\n                         let val = match cv.val {\n                             ConstVal::Value(miri) => const_val_field(\n-                                self.tcx, self.param_env, instance, None, field, miri, cv.ty,\n+                                self.tcx, self.param_env, instance, span,\n+                                None, field, miri, cv.ty,\n                             ).unwrap(),\n                             _ => bug!(\"{:#?} is not a valid tuple\", cv),\n                         };\n@@ -859,7 +869,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         let field = Field::new(i);\n                         let val = match cv.val {\n                             ConstVal::Value(miri) => const_val_field(\n-                                self.tcx, self.param_env, instance, None, field, miri, cv.ty,\n+                                self.tcx, self.param_env, instance, span,\n+                                None, field, miri, cv.ty,\n                             ).unwrap(),\n                             _ => bug!(\"{:#?} is not a valid tuple\", cv),\n                         };\n@@ -877,7 +888,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         let field = Field::new(i);\n                         let val = match cv.val {\n                             ConstVal::Value(miri) => const_val_field(\n-                                self.tcx, self.param_env, instance, None, field, miri, cv.ty,\n+                                self.tcx, self.param_env, instance, span,\n+                                None, field, miri, cv.ty,\n                             ).unwrap(),\n                             _ => bug!(\"{:#?} is not a valid tuple\", cv),\n                         };"}, {"sha": "c2f9690b9f19604094a064e82e1697a5951001a7", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/600fcc71594cb74b1d3802379b5b352bcc31274c/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600fcc71594cb74b1d3802379b5b352bcc31274c/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=600fcc71594cb74b1d3802379b5b352bcc31274c", "patch": "@@ -374,6 +374,7 @@ pub fn const_val_field<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     instance: ty::Instance<'tcx>,\n+    span: Span,\n     variant: Option<usize>,\n     field: mir::Field,\n     val: Value,\n@@ -385,7 +386,7 @@ pub fn const_val_field<'a, 'tcx>(\n             ty,\n         })),\n         Err(err) => Err(ConstEvalErr {\n-            span: tcx.def_span(instance.def_id()),\n+            span,\n             kind: err.into(),\n         }),\n     }\n@@ -455,7 +456,6 @@ pub fn const_eval_provider<'a, 'tcx>(\n     trace!(\"const eval: {:?}\", key);\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();\n-    let span = tcx.def_span(def_id);\n \n     if tcx.is_foreign_item(def_id) {\n         let id = tcx.interpret_interner.get_cached(def_id);\n@@ -479,6 +479,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n \n     if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n         let tables = tcx.typeck_tables_of(def_id);\n+        let span = tcx.def_span(def_id);\n \n         // Do match-check before building MIR\n         if tcx.check_match(def_id).is_err() {\n@@ -511,6 +512,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         if tcx.is_static(def_id).is_some() {\n             ecx.report(&mut err, true, None);\n         }\n+        let span = ecx.frame().span;\n         ConstEvalErr {\n             kind: err.into(),\n             span,"}, {"sha": "71450f4266576e82c6adcb62a8b867da0c796e20", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/600fcc71594cb74b1d3802379b5b352bcc31274c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600fcc71594cb74b1d3802379b5b352bcc31274c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=600fcc71594cb74b1d3802379b5b352bcc31274c", "patch": "@@ -1637,9 +1637,11 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             };\n             err.span_label(span, e.to_string());\n             let mut last_span = None;\n-            for &Frame { instance, span, .. } in self.stack().iter().rev() {\n+            // skip 1 because the last frame is just the environment of the constant\n+            for &Frame { instance, span, .. } in self.stack().iter().skip(1).rev() {\n                 // make sure we don't emit frames that are duplicates of the previous\n                 if explicit_span == Some(span) {\n+                    last_span = Some(span);\n                     continue;\n                 }\n                 if let Some(last) = last_span {"}, {"sha": "8018073883fcc1a4126894dea000e633bc8bc71d", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/600fcc71594cb74b1d3802379b5b352bcc31274c/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600fcc71594cb74b1d3802379b5b352bcc31274c/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=600fcc71594cb74b1d3802379b5b352bcc31274c", "patch": "@@ -203,6 +203,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                         bx.tcx(),\n                         ty::ParamEnv::empty(traits::Reveal::All),\n                         self.instance,\n+                        constant.span,\n                         None,\n                         mir::Field::new(field as usize),\n                         c,"}]}