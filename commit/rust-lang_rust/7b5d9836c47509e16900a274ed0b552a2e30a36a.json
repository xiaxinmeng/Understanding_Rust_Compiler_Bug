{"sha": "7b5d9836c47509e16900a274ed0b552a2e30a36a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNWQ5ODM2YzQ3NTA5ZTE2OTAwYTI3NGVkMGI1NTJhMmUzMGEzNmE=", "commit": {"author": {"name": "Juan Aguilar Santillana", "email": "mhpoin@gmail.com", "date": "2020-09-17T10:27:04Z"}, "committer": {"name": "Juan Aguilar Santillana", "email": "mhpoin@gmail.com", "date": "2020-09-17T10:27:04Z"}, "message": "Remove redundant to_string", "tree": {"sha": "b67eb6a22f8376ec7653a87a1b020b42e97ef54e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b67eb6a22f8376ec7653a87a1b020b42e97ef54e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b5d9836c47509e16900a274ed0b552a2e30a36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b5d9836c47509e16900a274ed0b552a2e30a36a", "html_url": "https://github.com/rust-lang/rust/commit/7b5d9836c47509e16900a274ed0b552a2e30a36a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b5d9836c47509e16900a274ed0b552a2e30a36a/comments", "author": {"login": "botika", "id": 2625545, "node_id": "MDQ6VXNlcjI2MjU1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2625545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botika", "html_url": "https://github.com/botika", "followers_url": "https://api.github.com/users/botika/followers", "following_url": "https://api.github.com/users/botika/following{/other_user}", "gists_url": "https://api.github.com/users/botika/gists{/gist_id}", "starred_url": "https://api.github.com/users/botika/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botika/subscriptions", "organizations_url": "https://api.github.com/users/botika/orgs", "repos_url": "https://api.github.com/users/botika/repos", "events_url": "https://api.github.com/users/botika/events{/privacy}", "received_events_url": "https://api.github.com/users/botika/received_events", "type": "User", "site_admin": false}, "committer": {"login": "botika", "id": 2625545, "node_id": "MDQ6VXNlcjI2MjU1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2625545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botika", "html_url": "https://github.com/botika", "followers_url": "https://api.github.com/users/botika/followers", "following_url": "https://api.github.com/users/botika/following{/other_user}", "gists_url": "https://api.github.com/users/botika/gists{/gist_id}", "starred_url": "https://api.github.com/users/botika/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botika/subscriptions", "organizations_url": "https://api.github.com/users/botika/orgs", "repos_url": "https://api.github.com/users/botika/repos", "events_url": "https://api.github.com/users/botika/events{/privacy}", "received_events_url": "https://api.github.com/users/botika/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bdb5dee7bac15458b10b148e9e24968e633053e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bdb5dee7bac15458b10b148e9e24968e633053e", "html_url": "https://github.com/rust-lang/rust/commit/7bdb5dee7bac15458b10b148e9e24968e633053e"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "98cbf98df92b4d0888e20c3d95adf40923138998", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7b5d9836c47509e16900a274ed0b552a2e30a36a/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b5d9836c47509e16900a274ed0b552a2e30a36a/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=7b5d9836c47509e16900a274ed0b552a2e30a36a", "patch": "@@ -1227,26 +1227,22 @@ impl EmitterWriter {\n             }\n             draw_note_separator(&mut buffer, 0, max_line_num_len + 1);\n             if *level != Level::FailureNote {\n-                let level_str = level.to_string();\n-                if !level_str.is_empty() {\n-                    buffer.append(0, &level_str, Style::MainHeaderMsg);\n-                    buffer.append(0, \": \", Style::NoStyle);\n-                }\n+                buffer.append(0, level.to_str(), Style::MainHeaderMsg);\n+                buffer.append(0, \": \", Style::NoStyle);\n             }\n             self.msg_to_buffer(&mut buffer, msg, max_line_num_len, \"note\", None);\n         } else {\n-            let level_str = level.to_string();\n             // The failure note level itself does not provide any useful diagnostic information\n-            if *level != Level::FailureNote && !level_str.is_empty() {\n-                buffer.append(0, &level_str, Style::Level(*level));\n+            if *level != Level::FailureNote {\n+                buffer.append(0, level.to_str(), Style::Level(*level));\n             }\n             // only render error codes, not lint codes\n             if let Some(DiagnosticId::Error(ref code)) = *code {\n                 buffer.append(0, \"[\", Style::Level(*level));\n                 buffer.append(0, &code, Style::Level(*level));\n                 buffer.append(0, \"]\", Style::Level(*level));\n             }\n-            if *level != Level::FailureNote && !level_str.is_empty() {\n+            if *level != Level::FailureNote {\n                 buffer.append(0, \": \", header_style);\n             }\n             for &(ref text, _) in msg.iter() {\n@@ -1548,11 +1544,9 @@ impl EmitterWriter {\n         let mut buffer = StyledBuffer::new();\n \n         // Render the suggestion message\n-        let level_str = level.to_string();\n-        if !level_str.is_empty() {\n-            buffer.append(0, &level_str, Style::Level(*level));\n-            buffer.append(0, \": \", Style::HeaderMsg);\n-        }\n+        buffer.append(0, level.to_str(), Style::Level(*level));\n+        buffer.append(0, \": \", Style::HeaderMsg);\n+\n         self.msg_to_buffer(\n             &mut buffer,\n             &[(suggestion.msg.to_owned(), Style::NoStyle)],"}]}