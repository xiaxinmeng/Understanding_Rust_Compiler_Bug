{"sha": "2555f3bbcf0c42e2405912ff93318107596f698b", "node_id": "C_kwDOAAsO6NoAKDI1NTVmM2JiY2YwYzQyZTI0MDU5MTJmZjkzMzE4MTA3NTk2ZjY5OGI", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-05-11T11:57:45Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-05-11T20:41:07Z"}, "message": "Better diagnostics for `env!` where variable contains escape", "tree": {"sha": "0754e4c14c4db9836cc5b78315c3cc7b60acadce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0754e4c14c4db9836cc5b78315c3cc7b60acadce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2555f3bbcf0c42e2405912ff93318107596f698b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2555f3bbcf0c42e2405912ff93318107596f698b", "html_url": "https://github.com/rust-lang/rust/commit/2555f3bbcf0c42e2405912ff93318107596f698b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2555f3bbcf0c42e2405912ff93318107596f698b/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d941cd9812891af3b83dd4de64aa7d8ee99641a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d941cd9812891af3b83dd4de64aa7d8ee99641a", "html_url": "https://github.com/rust-lang/rust/commit/4d941cd9812891af3b83dd4de64aa7d8ee99641a"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "8f64e3328619e054b0c24c2ee3966b9c6b12f43b", "filename": "compiler/rustc_builtin_macros/src/env.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2555f3bbcf0c42e2405912ff93318107596f698b/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2555f3bbcf0c42e2405912ff93318107596f698b/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs?ref=2555f3bbcf0c42e2405912ff93318107596f698b", "patch": "@@ -63,15 +63,16 @@ pub fn expand_env<'cx>(\n         Some(exprs) => exprs.into_iter(),\n     };\n \n-    let Some((var, _style)) = expr_to_string(cx, exprs.next().unwrap(), \"expected string literal\") else {\n+    let var_expr = exprs.next().unwrap();\n+    let Some((var, _)) = expr_to_string(cx, var_expr.clone(), \"expected string literal\") else {\n         return DummyResult::any(sp);\n     };\n \n     let custom_msg = match exprs.next() {\n         None => None,\n         Some(second) => match expr_to_string(cx, second, \"expected string literal\") {\n             None => return DummyResult::any(sp),\n-            Some((s, _style)) => Some(s),\n+            Some((s, _)) => Some(s),\n         },\n     };\n \n@@ -80,10 +81,15 @@ pub fn expand_env<'cx>(\n     cx.sess.parse_sess.env_depinfo.borrow_mut().insert((var, value));\n     let e = match value {\n         None => {\n+            // Use the string literal in the code in the diagnostic to avoid confusing diagnostics,\n+            // e.g. when the literal contains escape sequences.\n+            let ast::ExprKind::Lit(ast::token::Lit { kind: ast::token::LitKind::Str, symbol: original_var, ..}) = &var_expr.kind else {\n+                unreachable!(\"`expr_to_string` ensures this is a string lit\")\n+            };\n             cx.emit_err(errors::EnvNotDefined {\n                 span: sp,\n                 msg: custom_msg,\n-                var,\n+                var: *original_var,\n                 help: custom_msg.is_none().then(|| help_for_missing_env_var(var.as_str())),\n             });\n             return DummyResult::any(sp);"}, {"sha": "d898feb78c6f7cdcf041a58519274b2da917a1b3", "filename": "tests/ui/extenv/extenv-escaped-var.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2555f3bbcf0c42e2405912ff93318107596f698b/tests%2Fui%2Fextenv%2Fextenv-escaped-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2555f3bbcf0c42e2405912ff93318107596f698b/tests%2Fui%2Fextenv%2Fextenv-escaped-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fextenv-escaped-var.rs?ref=2555f3bbcf0c42e2405912ff93318107596f698b", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    env!(\"\\t\"); //~ERROR environment variable `\\t` not defined at compile time\n+}"}, {"sha": "25e218c63f336b1599588721e361a1aeecae8ec4", "filename": "tests/ui/extenv/extenv-escaped-var.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2555f3bbcf0c42e2405912ff93318107596f698b/tests%2Fui%2Fextenv%2Fextenv-escaped-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2555f3bbcf0c42e2405912ff93318107596f698b/tests%2Fui%2Fextenv%2Fextenv-escaped-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fextenv-escaped-var.stderr?ref=2555f3bbcf0c42e2405912ff93318107596f698b", "patch": "@@ -0,0 +1,11 @@\n+error: environment variable `\\t` not defined at compile time\n+  --> $DIR/extenv-escaped-var.rs:2:5\n+   |\n+LL |     env!(\"\\t\");\n+   |     ^^^^^^^^^^\n+   |\n+   = help: use `std::env::var(\"\\t\")` to read the variable at run time\n+   = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "10589ec2f54a4a1b216dac215a2dea601a85e212", "filename": "tests/ui/extenv/issue-110547.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2555f3bbcf0c42e2405912ff93318107596f698b/tests%2Fui%2Fextenv%2Fissue-110547.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2555f3bbcf0c42e2405912ff93318107596f698b/tests%2Fui%2Fextenv%2Fissue-110547.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fissue-110547.stderr?ref=2555f3bbcf0c42e2405912ff93318107596f698b", "patch": "@@ -1,28 +1,28 @@\n-error: environment variable `    ` not defined at compile time\n+error: environment variable `\\t` not defined at compile time\n   --> $DIR/issue-110547.rs:4:5\n    |\n LL |     env!{\"\\t\"};\n    |     ^^^^^^^^^^\n    |\n-   = help: use `std::env::var(\"    \")` to read the variable at run time\n+   = help: use `std::env::var(\"\\t\")` to read the variable at run time\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: environment variable `    ` not defined at compile time\n+error: environment variable `\\t` not defined at compile time\n   --> $DIR/issue-110547.rs:5:5\n    |\n LL |     env!(\"\\t\");\n    |     ^^^^^^^^^^\n    |\n-   = help: use `std::env::var(\"    \")` to read the variable at run time\n+   = help: use `std::env::var(\"\\t\")` to read the variable at run time\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: environment variable `` not defined at compile time\n+error: environment variable `\\u{2069}` not defined at compile time\n   --> $DIR/issue-110547.rs:6:5\n    |\n LL |     env!(\"\\u{2069}\");\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = help: use `std::env::var(\"\")` to read the variable at run time\n+   = help: use `std::env::var(\"\\u{2069}\")` to read the variable at run time\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}]}