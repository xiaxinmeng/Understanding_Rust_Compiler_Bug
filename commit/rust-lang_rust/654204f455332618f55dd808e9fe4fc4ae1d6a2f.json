{"sha": "654204f455332618f55dd808e9fe4fc4ae1d6a2f", "node_id": "C_kwDOAAsO6NoAKDY1NDIwNGY0NTUzMzI2MThmNTVkZDgwOGU5ZmU0ZmM0YWUxZDZhMmY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-19T10:03:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-19T10:03:58Z"}, "message": "Rollup merge of #109022 - tmiasko:read-buf-exact, r=dtolnay\n\nread_buf_exact: on error, all read bytes are appended to the buffer\n\nGuarantee that when `read_buf_exact` returns, all bytes read will be\nappended to the buffer. Including the case when the operations fails.\n\nThe motivating use case are operations on a non-blocking reader. When\n`read_buf_exact` fails with `ErrorKind::WouldBlock` error, the operation\ncan be resumed at a later time.", "tree": {"sha": "4b53b762c6146a97e5ef92ad2893be979ea03edd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b53b762c6146a97e5ef92ad2893be979ea03edd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/654204f455332618f55dd808e9fe4fc4ae1d6a2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkFt4OCRBK7hj4Ov3rIwAA1iIIAFCnAclsfOajeX1pB3DksdGa\nYfqyFvOzUBb3yUqN5SWSI9T2Xa+10j+P2AFsF2S7nXaYELgiaIDOJHO6rkLXWL7T\nLQAzJQycq2xD6W804PS0D0HduPReXDwENmL8Z3euPE3493Dwy9oT/wwBfDVzrinZ\nqzqPf5dbNgNNH4dWSy88jdw9vTiIbbZEdjaNz9v7NFaAdz0IrhigKytxrVpfBgrr\n9qA+KprPrbTSBZL1e/kztbyNiVwBjE8PIFnJEVfKfOaCR9OjItZdQbPQhkMQuB9W\np8cyGH54B7EiJFy4ZnVR5PJet/1CKlCCxy7+gL52HNYw88U9N0f/o5O7z/xnavk=\n=yjGa\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b53b762c6146a97e5ef92ad2893be979ea03edd\nparent 462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad\nparent c21f1d09de3a6a7bb4952f400919e936032b8ee2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1679220238 +0530\ncommitter GitHub <noreply@github.com> 1679220238 +0530\n\nRollup merge of #109022 - tmiasko:read-buf-exact, r=dtolnay\n\nread_buf_exact: on error, all read bytes are appended to the buffer\n\nGuarantee that when `read_buf_exact` returns, all bytes read will be\nappended to the buffer. Including the case when the operations fails.\n\nThe motivating use case are operations on a non-blocking reader. When\n`read_buf_exact` fails with `ErrorKind::WouldBlock` error, the operation\ncan be resumed at a later time.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/654204f455332618f55dd808e9fe4fc4ae1d6a2f", "html_url": "https://github.com/rust-lang/rust/commit/654204f455332618f55dd808e9fe4fc4ae1d6a2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/654204f455332618f55dd808e9fe4fc4ae1d6a2f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "html_url": "https://github.com/rust-lang/rust/commit/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad"}, {"sha": "c21f1d09de3a6a7bb4952f400919e936032b8ee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c21f1d09de3a6a7bb4952f400919e936032b8ee2", "html_url": "https://github.com/rust-lang/rust/commit/c21f1d09de3a6a7bb4952f400919e936032b8ee2"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "4b31c552eedd2c06d84a593963a2209d8569995c", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/654204f455332618f55dd808e9fe4fc4ae1d6a2f/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654204f455332618f55dd808e9fe4fc4ae1d6a2f/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=654204f455332618f55dd808e9fe4fc4ae1d6a2f", "patch": "@@ -823,8 +823,22 @@ pub trait Read {\n \n     /// Read the exact number of bytes required to fill `cursor`.\n     ///\n-    /// This is equivalent to the [`read_exact`](Read::read_exact) method, except that it is passed a [`BorrowedCursor`] rather than `[u8]` to\n-    /// allow use with uninitialized buffers.\n+    /// This is similar to the [`read_exact`](Read::read_exact) method, except\n+    /// that it is passed a [`BorrowedCursor`] rather than `[u8]` to allow use\n+    /// with uninitialized buffers.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If this function encounters an error of the kind [`ErrorKind::Interrupted`]\n+    /// then the error is ignored and the operation will continue.\n+    ///\n+    /// If this function encounters an \"end of file\" before completely filling\n+    /// the buffer, it returns an error of the kind [`ErrorKind::UnexpectedEof`].\n+    ///\n+    /// If any other read error is encountered then this function immediately\n+    /// returns.\n+    ///\n+    /// If this function returns an error, all bytes read will be appended to `cursor`.\n     #[unstable(feature = \"read_buf\", issue = \"78485\")]\n     fn read_buf_exact(&mut self, mut cursor: BorrowedCursor<'_>) -> Result<()> {\n         while cursor.capacity() > 0 {"}]}