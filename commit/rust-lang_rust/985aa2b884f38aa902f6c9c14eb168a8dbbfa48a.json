{"sha": "985aa2b884f38aa902f6c9c14eb168a8dbbfa48a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NWFhMmI4ODRmMzhhYTkwMmY2YzljMTRlYjE2OGE4ZGJiZmE0OGE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-10-26T19:09:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-26T19:09:21Z"}, "message": "Merge pull request #2070 from jugglerchris/diff_zero_context\n\nFix make_diff with zero context requested", "tree": {"sha": "79de134f7f436d7f35d7316c7b96d5c3c0fbbb53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79de134f7f436d7f35d7316c7b96d5c3c0fbbb53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/985aa2b884f38aa902f6c9c14eb168a8dbbfa48a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/985aa2b884f38aa902f6c9c14eb168a8dbbfa48a", "html_url": "https://github.com/rust-lang/rust/commit/985aa2b884f38aa902f6c9c14eb168a8dbbfa48a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/985aa2b884f38aa902f6c9c14eb168a8dbbfa48a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e48dd81a2ba05088099b7f5e09df36d72bc93db2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e48dd81a2ba05088099b7f5e09df36d72bc93db2", "html_url": "https://github.com/rust-lang/rust/commit/e48dd81a2ba05088099b7f5e09df36d72bc93db2"}, {"sha": "2a84352d1df09d04fc38311f49bb4ccb4ad83a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a84352d1df09d04fc38311f49bb4ccb4ad83a91", "html_url": "https://github.com/rust-lang/rust/commit/2a84352d1df09d04fc38311f49bb4ccb4ad83a91"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "c0aca68fe2ffebba94a00a4fafc5941385a79310", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 75, "deletions": 3, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/985aa2b884f38aa902f6c9c14eb168a8dbbfa48a/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985aa2b884f38aa902f6c9c14eb168a8dbbfa48a/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=985aa2b884f38aa902f6c9c14eb168a8dbbfa48a", "patch": "@@ -47,7 +47,7 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n     for result in diff::lines(expected, actual) {\n         match result {\n             diff::Result::Left(str) => {\n-                if lines_since_mismatch >= context_size {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n                     results.push(mismatch);\n                     mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n                 }\n@@ -60,7 +60,7 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n                 lines_since_mismatch = 0;\n             }\n             diff::Result::Right(str) => {\n-                if lines_since_mismatch >= context_size {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n                     results.push(mismatch);\n                     mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n                 }\n@@ -80,7 +80,7 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n \n                 if lines_since_mismatch < context_size {\n                     mismatch.lines.push(DiffLine::Context(str.to_owned()));\n-                } else {\n+                } else if context_size > 0 {\n                     context_queue.push_back(str);\n                 }\n \n@@ -162,3 +162,75 @@ where\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::{make_diff, Mismatch};\n+    use super::DiffLine::*;\n+\n+    #[test]\n+    fn diff_simple() {\n+        let src = \"one\\ntwo\\nthree\\nfour\\nfive\\n\";\n+        let dest = \"one\\ntwo\\ntrois\\nfour\\nfive\\n\";\n+        let diff = make_diff(src, dest, 1);\n+        assert_eq!(\n+            diff,\n+            vec![\n+                Mismatch {\n+                    line_number: 2,\n+                    lines: vec![\n+                        Context(\"two\".into()),\n+                        Resulting(\"three\".into()),\n+                        Expected(\"trois\".into()),\n+                        Context(\"four\".into()),\n+                    ],\n+                },\n+            ]\n+        );\n+    }\n+\n+    #[test]\n+    fn diff_simple2() {\n+        let src = \"one\\ntwo\\nthree\\nfour\\nfive\\nsix\\nseven\\n\";\n+        let dest = \"one\\ntwo\\ntrois\\nfour\\ncinq\\nsix\\nseven\\n\";\n+        let diff = make_diff(src, dest, 1);\n+        assert_eq!(\n+            diff,\n+            vec![\n+                Mismatch {\n+                    line_number: 2,\n+                    lines: vec![\n+                        Context(\"two\".into()),\n+                        Resulting(\"three\".into()),\n+                        Expected(\"trois\".into()),\n+                        Context(\"four\".into()),\n+                    ],\n+                },\n+                Mismatch {\n+                    line_number: 5,\n+                    lines: vec![\n+                        Resulting(\"five\".into()),\n+                        Expected(\"cinq\".into()),\n+                        Context(\"six\".into()),\n+                    ],\n+                },\n+            ]\n+        );\n+    }\n+\n+    #[test]\n+    fn diff_zerocontext() {\n+        let src = \"one\\ntwo\\nthree\\nfour\\nfive\\n\";\n+        let dest = \"one\\ntwo\\ntrois\\nfour\\nfive\\n\";\n+        let diff = make_diff(src, dest, 0);\n+        assert_eq!(\n+            diff,\n+            vec![\n+                Mismatch {\n+                    line_number: 3,\n+                    lines: vec![Resulting(\"three\".into()), Expected(\"trois\".into())],\n+                },\n+            ]\n+        );\n+    }\n+}"}]}