{"sha": "4f3c7a472b77ba3f3afbc12d004b9d1bbcee7fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmM2M3YTQ3MmI3N2JhM2YzYWZiYzEyZDAwNGI5ZDFiYmNlZTdmZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-17T19:28:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-17T19:28:23Z"}, "message": "Auto merge of #52145 - ExpHP:drop-it-like-its-eof, r=nikomatsakis\n\nFix macro parser quadratic complexity in small repeating groups\n\nObserved in #51754, and more easily demonstrated with the following:\n\n```rust\nmacro_rules! stress {\n    ($($t:tt)+) => { };\n}\n\nfn main() {\n    stress!{\n        a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\n        a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\n        a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\n        a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\n        //    ... 65536 copies of \"a\" total ...\n        a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\n        a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\n        a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\n        a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\n    }\n}\n```\nwhich takes 50 seconds to compile prior to the fix and <1s after.\n\nI hope this has a visible impact on the compile times for real code.  (I think it is most likely to affect incremental TT munchers that deal with large inputs, though it depends on how they are written)\n\nFor a fuller description of the performance issue:  https://github.com/rust-lang/rust/issues/51754#issuecomment-403242159\n\n---\n\nThere is no test (yet) because I'm not sure how easily to measure this for regressions.", "tree": {"sha": "5e2753e692856610a816a80af55947e967e77832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e2753e692856610a816a80af55947e967e77832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f3c7a472b77ba3f3afbc12d004b9d1bbcee7fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3c7a472b77ba3f3afbc12d004b9d1bbcee7fe7", "html_url": "https://github.com/rust-lang/rust/commit/4f3c7a472b77ba3f3afbc12d004b9d1bbcee7fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f3c7a472b77ba3f3afbc12d004b9d1bbcee7fe7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c84d8187395b641616649a0f16f15a78ea8bbce", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c84d8187395b641616649a0f16f15a78ea8bbce", "html_url": "https://github.com/rust-lang/rust/commit/1c84d8187395b641616649a0f16f15a78ea8bbce"}, {"sha": "0467ae0cf52c47f204cc88a0e851e853ee2bed8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0467ae0cf52c47f204cc88a0e851e853ee2bed8f", "html_url": "https://github.com/rust-lang/rust/commit/0467ae0cf52c47f204cc88a0e851e853ee2bed8f"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "3046525b7144c7a4ce40561180037a081e39d892", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3c7a472b77ba3f3afbc12d004b9d1bbcee7fe7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3c7a472b77ba3f3afbc12d004b9d1bbcee7fe7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=4f3c7a472b77ba3f3afbc12d004b9d1bbcee7fe7", "patch": "@@ -697,9 +697,14 @@ pub fn parse(\n                 return Failure(parser.span, token::Eof);\n             }\n         }\n+        // Performance hack: eof_items may share matchers via Rc with other things that we want\n+        // to modify. Dropping eof_items now may drop these refcounts to 1, preventing an\n+        // unnecessary implicit clone later in Rc::make_mut.\n+        drop(eof_items);\n+\n         // Another possibility is that we need to call out to parse some rust nonterminal\n         // (black-box) parser. However, if there is not EXACTLY ONE of these, something is wrong.\n-        else if (!bb_items.is_empty() && !next_items.is_empty()) || bb_items.len() > 1 {\n+        if (!bb_items.is_empty() && !next_items.is_empty()) || bb_items.len() > 1 {\n             let nts = bb_items\n                 .iter()\n                 .map(|item| match item.top_elts.get_tt(item.idx) {"}]}