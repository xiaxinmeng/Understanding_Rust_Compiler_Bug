{"sha": "2f42b14b4f57d602ffa446a8f30840c2dcbeb127", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNDJiMTRiNGY1N2Q2MDJmZmE0NDZhOGYzMDg0MGMyZGNiZWIxMjc=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-04-06T10:45:49Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-04-07T14:11:23Z"}, "message": "Use version and hash in crate_map name\n\nRelated issue #2137", "tree": {"sha": "983687acf6bc9f23fffa031538efb7451bc0bd6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/983687acf6bc9f23fffa031538efb7451bc0bd6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f42b14b4f57d602ffa446a8f30840c2dcbeb127", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f42b14b4f57d602ffa446a8f30840c2dcbeb127", "html_url": "https://github.com/rust-lang/rust/commit/2f42b14b4f57d602ffa446a8f30840c2dcbeb127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f42b14b4f57d602ffa446a8f30840c2dcbeb127/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13686b6778b5d03fb4887ae314ebd79001695064", "url": "https://api.github.com/repos/rust-lang/rust/commits/13686b6778b5d03fb4887ae314ebd79001695064", "html_url": "https://github.com/rust-lang/rust/commit/13686b6778b5d03fb4887ae314ebd79001695064"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "fd7f82a7bc787c2a090d497a07dda1d8b9f822db", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f42b14b4f57d602ffa446a8f30840c2dcbeb127/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42b14b4f57d602ffa446a8f30840c2dcbeb127/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=2f42b14b4f57d602ffa446a8f30840c2dcbeb127", "patch": "@@ -3,7 +3,7 @@\n \n import std::map;\n import std::map::hashmap;\n-import syntax::ast;\n+import syntax::{ast, attr};\n import util::common::*;\n \n export cstore::{};\n@@ -12,6 +12,8 @@ export crate_metadata;\n export mk_cstore;\n export get_crate_data;\n export set_crate_data;\n+export get_crate_hash;\n+export get_crate_vers;\n export have_crate_data;\n export iter_crate_data;\n export add_used_crate_file;\n@@ -79,6 +81,18 @@ fn get_crate_data(cstore: cstore, cnum: ast::crate_num) -> crate_metadata {\n     ret p(cstore).metas.get(cnum);\n }\n \n+fn get_crate_hash(cstore: cstore, cnum: ast::crate_num) -> str {\n+    let cdata = get_crate_data(cstore, cnum);\n+    ret decoder::get_crate_hash(cdata.data);\n+}\n+\n+fn get_crate_vers(cstore: cstore, cnum: ast::crate_num) -> str {\n+    let cdata = get_crate_data(cstore, cnum);\n+    let attrs = decoder::get_crate_attributes(cdata.data);\n+    ret option::get(attr::meta_item_value_from_list(\n+        attr::find_linkage_metas(attrs), \"vers\"));\n+}\n+\n fn set_crate_data(cstore: cstore, cnum: ast::crate_num,\n                   data: crate_metadata) {\n     p(cstore).metas.insert(cnum, data);"}, {"sha": "1c195024ed4ab9cf1793a007dc4d888b2ca1b2b5", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f42b14b4f57d602ffa446a8f30840c2dcbeb127/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42b14b4f57d602ffa446a8f30840c2dcbeb127/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2f42b14b4f57d602ffa446a8f30840c2dcbeb127", "patch": "@@ -4748,14 +4748,16 @@ fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n }\n \n \n-fn decl_crate_map(sess: session::session, mapname: str,\n+fn decl_crate_map(sess: session::session, mapmeta: link::link_meta,\n                   llmod: ModuleRef) -> ValueRef {\n     let targ_cfg = sess.targ_cfg;\n     let int_type = T_int(targ_cfg);\n     let mut n_subcrates = 1;\n     let cstore = sess.cstore;\n     while cstore::have_crate_data(cstore, n_subcrates) { n_subcrates += 1; }\n-    let mapname = if sess.building_library { mapname } else { \"toplevel\" };\n+    let mapname = if sess.building_library {\n+        mapmeta.name + \"_\" + mapmeta.vers + \"_\" + mapmeta.extras_hash\n+    } else { \"toplevel\" };\n     let sym_name = \"_rust_crate_map_\" + mapname;\n     let arrtype = T_array(int_type, n_subcrates as uint);\n     let maptype = T_struct([int_type, arrtype]);\n@@ -4766,13 +4768,15 @@ fn decl_crate_map(sess: session::session, mapname: str,\n     ret map;\n }\n \n-// FIXME use hashed metadata instead of crate names once we have that\n fn fill_crate_map(ccx: @crate_ctxt, map: ValueRef) {\n     let mut subcrates: [ValueRef] = [];\n     let mut i = 1;\n     let cstore = ccx.sess.cstore;\n     while cstore::have_crate_data(cstore, i) {\n-        let nm = \"_rust_crate_map_\" + cstore::get_crate_data(cstore, i).name;\n+        let cdata = cstore::get_crate_data(cstore, i);\n+        let nm = \"_rust_crate_map_\" + cdata.name +\n+            \"_\" + cstore::get_crate_vers(cstore, i) +\n+            \"_\" + cstore::get_crate_hash(cstore, i);\n         let cr = str::as_c_str(nm, {|buf|\n             llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type, buf)\n         });\n@@ -4857,7 +4861,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     lib::llvm::associate_type(tn, \"taskptr\", taskptr_type);\n     let tydesc_type = T_tydesc(targ_cfg);\n     lib::llvm::associate_type(tn, \"tydesc\", tydesc_type);\n-    let crate_map = decl_crate_map(sess, link_meta.name, llmod);\n+    let crate_map = decl_crate_map(sess, link_meta, llmod);\n     let dbg_cx = if sess.opts.debuginfo {\n         option::some(debuginfo::mk_ctxt(llmod_id))\n     } else {"}, {"sha": "a2315e4c74992747c74c148d3b5c2ff5b8aa7234", "filename": "src/test/auxiliary/crateresolve3-1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f42b14b4f57d602ffa446a8f30840c2dcbeb127/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42b14b4f57d602ffa446a8f30840c2dcbeb127/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs?ref=2f42b14b4f57d602ffa446a8f30840c2dcbeb127", "patch": "@@ -0,0 +1,6 @@\n+#[link(name = \"crateresolve3\",\n+       vers = \"0.1\")];\n+\n+#[crate_type = \"lib\"];\n+\n+fn f() -> int { 10 }"}, {"sha": "2e3684c340f4ec815babd3bdf4b59e5efa981ddc", "filename": "src/test/auxiliary/crateresolve3-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f42b14b4f57d602ffa446a8f30840c2dcbeb127/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42b14b4f57d602ffa446a8f30840c2dcbeb127/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs?ref=2f42b14b4f57d602ffa446a8f30840c2dcbeb127", "patch": "@@ -0,0 +1,6 @@\n+#[link(name = \"crateresolve3\",\n+       vers = \"0.2\")];\n+\n+#[crate_type = \"lib\"];\n+\n+fn g() -> int { 20 }"}, {"sha": "29d4c0c368f8d021dddd68d649f1957e618da914", "filename": "src/test/run-pass/crateresolve3.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2f42b14b4f57d602ffa446a8f30840c2dcbeb127/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42b14b4f57d602ffa446a8f30840c2dcbeb127/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs?ref=2f42b14b4f57d602ffa446a8f30840c2dcbeb127", "patch": "@@ -0,0 +1,21 @@\n+// xfail-fast\n+// aux-build:crateresolve3-1.rs\n+// aux-build:crateresolve3-2.rs\n+\n+// verify able to link with crates with same name but different versions\n+// as long as no name collision on invoked functions.\n+\n+mod a {\n+    use crateresolve3(vers = \"0.1\");\n+    fn f() { assert crateresolve3::f() == 10; }\n+}\n+\n+mod b {\n+    use crateresolve3(vers = \"0.2\");\n+    fn f() { assert crateresolve3::g() == 20; }\n+}\n+\n+fn main() {\n+    a::f();\n+    b::f();\n+}"}]}