{"sha": "5d85d8d80081211ca26cdf5a19671e7462ef4fe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkODVkOGQ4MDA4MTIxMWNhMjZjZGY1YTE5NjcxZTc0NjJlZjRmZTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:54Z"}, "message": "rollup merge of #24945: pnkfelix/fixes-for-dash-g-handling\n\nFixes for -g handling\n\nFirst:\n * decouples our handling of `-g` for the test suite from our handling of `-g` for the rest of the compiler/stdlib building.\n * Namely, if you do `--enable-debug` or `--enable-debuginfo`, that should only affect `rustc` and the standard library crates; the tests should all continue to compile without `-g` unless:\n   * you pass `--enable-debuginfo-tests`, or\n   * the test itself requests the `-g` option (e.g. via a `// compile-flags: -g` embedded comment).\n\nSecond:\n * Makes `rustc` more flexible in that it now accepts multiple occurrences of `-g -g`\n * (as a drive-by, I gave `-O` the same treatment: multiple occurrences of `-O` are treated as synonymous as a single occurrence of `-O`.\n\nFix #24937", "tree": {"sha": "7c5126fbe1197fe615c0d33775541f604d5bdce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c5126fbe1197fe615c0d33775541f604d5bdce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d85d8d80081211ca26cdf5a19671e7462ef4fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d85d8d80081211ca26cdf5a19671e7462ef4fe2", "html_url": "https://github.com/rust-lang/rust/commit/5d85d8d80081211ca26cdf5a19671e7462ef4fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d85d8d80081211ca26cdf5a19671e7462ef4fe2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "373d6202cffedd379cbb22128fb754f42fdbfb97", "url": "https://api.github.com/repos/rust-lang/rust/commits/373d6202cffedd379cbb22128fb754f42fdbfb97", "html_url": "https://github.com/rust-lang/rust/commit/373d6202cffedd379cbb22128fb754f42fdbfb97"}, {"sha": "df82df8cf846246577507d32edcec14c6d3d0851", "url": "https://api.github.com/repos/rust-lang/rust/commits/df82df8cf846246577507d32edcec14c6d3d0851", "html_url": "https://github.com/rust-lang/rust/commit/df82df8cf846246577507d32edcec14c6d3d0851"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "dbca73415fec62d11ef151ff41d2592d19d981a8", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d85d8d80081211ca26cdf5a19671e7462ef4fe2/configure", "raw_url": "https://github.com/rust-lang/rust/raw/5d85d8d80081211ca26cdf5a19671e7462ef4fe2/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=5d85d8d80081211ca26cdf5a19671e7462ef4fe2", "patch": "@@ -551,6 +551,7 @@ opt valgrind-rpass 1 \"run rpass-valgrind tests with valgrind\"\n opt docs     1 \"build standard library documentation\"\n opt compiler-docs     0 \"build compiler documentation\"\n opt optimize-tests 1 \"build tests with optimizations\"\n+opt debuginfo-tests 0 \"build tests with debugger metadata\"\n opt libcpp 1 \"build with llvm with libc++ instead of libstdc++ when using clang\"\n opt llvm-assertions 0 \"build LLVM with assertions\"\n opt debug-assertions 0 \"build with debugging assertions\""}, {"sha": "f391d8555fc2bff578a2a6c329b79cf71aa84542", "filename": "mk/tests.mk", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d85d8d80081211ca26cdf5a19671e7462ef4fe2/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5d85d8d80081211ca26cdf5a19671e7462ef4fe2/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=5d85d8d80081211ca26cdf5a19671e7462ef4fe2", "patch": "@@ -632,6 +632,13 @@ ifndef CFG_DISABLE_OPTIMIZE_TESTS\n CTEST_RUSTC_FLAGS += -O\n endif\n \n+# Analogously to the above, whether to pass `-g` when compiling tests\n+# is a separate choice from whether to pass `-g` when building the\n+# compiler and standard library themselves.\n+CTEST_RUSTC_FLAGS := $$(subst -g,,$$(CTEST_RUSTC_FLAGS))\n+ifdef CFG_ENABLE_DEBUGINFO_TESTS\n+CTEST_RUSTC_FLAGS += -g\n+endif\n \n CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n \t\t--compile-lib-path $$(HLIB$(1)_H_$(3)) \\"}, {"sha": "b999929c4af9e4a5a24d75e4c15042865f9aa1ae", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d85d8d80081211ca26cdf5a19671e7462ef4fe2/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d85d8d80081211ca26cdf5a19671e7462ef4fe2/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5d85d8d80081211ca26cdf5a19671e7462ef4fe2", "patch": "@@ -755,11 +755,14 @@ mod opt {\n     pub fn   multi(a: S, b: S, c: S, d: S) -> R { stable(getopts::optmulti(a, b, c, d)) }\n     pub fn    flag(a: S, b: S, c: S)       -> R { stable(getopts::optflag(a, b, c)) }\n     pub fn flagopt(a: S, b: S, c: S, d: S) -> R { stable(getopts::optflagopt(a, b, c, d)) }\n+    pub fn flagmulti(a: S, b: S, c: S)     -> R { stable(getopts::optflagmulti(a, b, c)) }\n+\n \n     pub fn     opt_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optopt(a, b, c, d)) }\n     pub fn   multi_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optmulti(a, b, c, d)) }\n     pub fn    flag_u(a: S, b: S, c: S)       -> R { unstable(getopts::optflag(a, b, c)) }\n     pub fn flagopt_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optflagopt(a, b, c, d)) }\n+    pub fn flagmulti_u(a: S, b: S, c: S)     -> R { unstable(getopts::optflagmulti(a, b, c)) }\n }\n \n /// Returns the \"short\" subset of the rustc command line options,\n@@ -786,8 +789,8 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n         opt::multi(\"\", \"print\", \"Comma separated list of compiler information to \\\n                                print on stdout\",\n                  \"[crate-name|file-names|sysroot]\"),\n-        opt::flag(\"g\",  \"\",  \"Equivalent to -C debuginfo=2\"),\n-        opt::flag(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n+        opt::flagmulti(\"g\",  \"\",  \"Equivalent to -C debuginfo=2\"),\n+        opt::flagmulti(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n         opt::opt(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n         opt::opt(\"\",  \"out-dir\", \"Write output to compiler-chosen filename \\\n                                 in <dir>\", \"DIR\"),"}, {"sha": "33ac519a584f99bbd941524418f9a2d670fb0561", "filename": "src/test/run-pass/issue-24945-repeat-dash-opts.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5d85d8d80081211ca26cdf5a19671e7462ef4fe2/src%2Ftest%2Frun-pass%2Fissue-24945-repeat-dash-opts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d85d8d80081211ca26cdf5a19671e7462ef4fe2/src%2Ftest%2Frun-pass%2Fissue-24945-repeat-dash-opts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-24945-repeat-dash-opts.rs?ref=5d85d8d80081211ca26cdf5a19671e7462ef4fe2", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test is just checking that we continue to accept `-g -g -O -O`\n+// as options to the compiler.\n+\n+// compile-flags:-g -g -O -O\n+\n+fn main() {\n+    assert_eq!(1, 1);\n+}"}]}