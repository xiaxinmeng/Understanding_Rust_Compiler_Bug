{"sha": "1746c0269d356a93aaef367541872d363651cb23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NDZjMDI2OWQzNTZhOTNhYWVmMzY3NTQxODcyZDM2MzY1MWNiMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-25T11:42:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-25T11:42:40Z"}, "message": "auto merge of #10644 : cmr/rust/rustdoc_cfg, r=alexcrichton\n\nCloses #10623", "tree": {"sha": "0e16f7f4904206097c8d6a775176554b6977006c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e16f7f4904206097c8d6a775176554b6977006c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1746c0269d356a93aaef367541872d363651cb23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1746c0269d356a93aaef367541872d363651cb23", "html_url": "https://github.com/rust-lang/rust/commit/1746c0269d356a93aaef367541872d363651cb23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1746c0269d356a93aaef367541872d363651cb23/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40439516ecf10c760a9df2cd562f6b695d4d4a6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/40439516ecf10c760a9df2cd562f6b695d4d4a6b", "html_url": "https://github.com/rust-lang/rust/commit/40439516ecf10c760a9df2cd562f6b695d4d4a6b"}, {"sha": "6fbe2a0c8b62487d64c32fa57bbed8138251f8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fbe2a0c8b62487d64c32fa57bbed8138251f8c5", "html_url": "https://github.com/rust-lang/rust/commit/6fbe2a0c8b62487d64c32fa57bbed8138251f8c5"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "412981add6c629d3e51ec14546cd679d01372efe", "filename": "mk/docs.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1746c0269d356a93aaef367541872d363651cb23/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1746c0269d356a93aaef367541872d363651cb23/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=1746c0269d356a93aaef367541872d363651cb23", "patch": "@@ -215,10 +215,12 @@ RUSTDOC = $(HBIN2_H_$(CFG_BUILD))/rustdoc$(X_$(CFG_BUILD))\n # $(1) - The crate name (std/extra)\n # $(2) - The crate file\n # $(3) - The relevant host build triple (to depend on libstd)\n+#\n+# Passes --cfg stage2 to rustdoc because it uses the stage2 librustc.\n define libdoc\n doc/$(1)/index.html: $$(RUSTDOC) $$(TLIB2_T_$(3)_H_$(3))/$(CFG_STDLIB_$(3))\n \t@$$(call E, rustdoc: $$@)\n-\t$(Q)$(RUSTDOC) $(2)\n+\t$(Q)$(RUSTDOC) --cfg stage2 $(2)\n \n DOCS += doc/$(1)/index.html\n endef"}, {"sha": "79aba0f1320e9803f2d7a3f29a7c35e6731537dd", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1746c0269d356a93aaef367541872d363651cb23/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1746c0269d356a93aaef367541872d363651cb23/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1746c0269d356a93aaef367541872d363651cb23", "patch": "@@ -37,7 +37,7 @@ pub struct CrateAnalysis {\n \n /// Parses, resolves, and typechecks the given crate\n fn get_ast_and_resolve(cpath: &Path,\n-                       libs: HashSet<Path>) -> (DocContext, CrateAnalysis) {\n+                       libs: HashSet<Path>, cfgs: ~[~str]) -> (DocContext, CrateAnalysis) {\n     use syntax::codemap::dummy_spanned;\n     use rustc::driver::driver::{file_input, build_configuration,\n                                 phase_1_parse_input,\n@@ -66,7 +66,9 @@ fn get_ast_and_resolve(cpath: &Path,\n                                               span_diagnostic_handler);\n \n     let mut cfg = build_configuration(sess);\n-    cfg.push(@dummy_spanned(ast::MetaWord(@\"stage2\")));\n+    for cfg_ in cfgs.move_iter() {\n+        cfg.push(@dummy_spanned(ast::MetaWord(cfg_.to_managed())));\n+    }\n \n     let mut crate = phase_1_parse_input(sess, cfg.clone(), &input);\n     crate = phase_2_configure_and_expand(sess, cfg, crate);\n@@ -79,8 +81,8 @@ fn get_ast_and_resolve(cpath: &Path,\n             CrateAnalysis { exported_items: exported_items });\n }\n \n-pub fn run_core (libs: HashSet<Path>, path: &Path) -> (clean::Crate, CrateAnalysis) {\n-    let (ctxt, analysis) = get_ast_and_resolve(path, libs);\n+pub fn run_core (libs: HashSet<Path>, cfgs: ~[~str], path: &Path) -> (clean::Crate, CrateAnalysis) {\n+    let (ctxt, analysis) = get_ast_and_resolve(path, libs, cfgs);\n     let ctxt = @ctxt;\n     debug!(\"defmap:\");\n     for (k, v) in ctxt.tycx.def_map.iter() {"}, {"sha": "1ed1b79a628cf7ef871b11bff9ed664d2e975209", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1746c0269d356a93aaef367541872d363651cb23/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1746c0269d356a93aaef367541872d363651cb23/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1746c0269d356a93aaef367541872d363651cb23", "patch": "@@ -96,6 +96,7 @@ pub fn opts() -> ~[groups::OptGroup] {\n         optopt(\"o\", \"output\", \"where to place the output\", \"PATH\"),\n         optmulti(\"L\", \"library-path\", \"directory to add to crate search path\",\n                  \"DIR\"),\n+        optmulti(\"\", \"cfg\", \"pass a --cfg to rustc\", \"\"),\n         optmulti(\"\", \"plugin-path\", \"directory to load plugins from\", \"DIR\"),\n         optmulti(\"\", \"passes\", \"space separated list of passes to also run, a \\\n                                 value of `list` will print available passes\",\n@@ -194,11 +195,12 @@ fn rust_input(cratefile: &str, matches: &getopts::Matches) -> Output {\n \n     // First, parse the crate and extract all relevant information.\n     let libs = Cell::new(matches.opt_strs(\"L\").map(|s| Path::new(s.as_slice())));\n+    let cfgs = Cell::new(matches.opt_strs(\"cfg\"));\n     let cr = Cell::new(Path::new(cratefile));\n     info!(\"starting to run rustc\");\n     let (crate, analysis) = do std::task::try {\n         let cr = cr.take();\n-        core::run_core(libs.take().move_iter().collect(), &cr)\n+        core::run_core(libs.take().move_iter().collect(), cfgs.take(), &cr)\n     }.unwrap();\n     info!(\"finished with rustc\");\n     local_data::set(analysiskey, analysis);"}]}