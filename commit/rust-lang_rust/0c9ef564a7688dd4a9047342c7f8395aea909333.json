{"sha": "0c9ef564a7688dd4a9047342c7f8395aea909333", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOWVmNTY0YTc2ODhkZDRhOTA0NzM0MmM3ZjgzOTVhZWE5MDkzMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-11T03:08:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-11T03:08:32Z"}, "message": "Auto merge of #79656 - jnqnfe:ordering, r=sfackler\n\nAdd some core::cmp::Ordering helpers\n\n...to allow easier equal-to-or-greater-than and less-than-or-equal-to\ncomparisons.\n\nPrior to Rust 1.42 a greater-than-or-equal-to comparison might be written\neither as a match block, or a traditional conditional check like this:\n\n```rust\nif cmp == Ordering::Equal || cmp == Ordering::Greater {\n    // Do something\n}\n```\n\nWhich requires two instances of `cmp`. Don't forget that while `cmp` here\nis very short, it could be something much longer in real use cases.\n\nFrom Rust 1.42 a nicer alternative is possible:\n\n```rust\nif matches!(cmp, Ordering::Equal | Ordering::Greater) {\n    // Do something\n}\n```\n\nThe commit adds another alternative which may be even better in some cases:\n\n```rust\nif cmp.is_equal_or_greater() {\n    // Do something\n}\n```\n\nThe earlier examples could be cleaner than they are if the variants of\n`Ordering` are imported such that `Equal`, `Greater` and `Less` can be\nreferred to directly, but not everyone will want to do that.\n\nThe new solution can shorten lines, help avoid logic mistakes, and avoids\nhaving to import `Ordering` / `Ordering::*`.", "tree": {"sha": "b3f120c745cc1b46ff4d513306b5d5c40a49d71a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3f120c745cc1b46ff4d513306b5d5c40a49d71a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c9ef564a7688dd4a9047342c7f8395aea909333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9ef564a7688dd4a9047342c7f8395aea909333", "html_url": "https://github.com/rust-lang/rust/commit/0c9ef564a7688dd4a9047342c7f8395aea909333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c9ef564a7688dd4a9047342c7f8395aea909333/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cef65fde3f92a84218fc338de6ab967fafd1820", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cef65fde3f92a84218fc338de6ab967fafd1820", "html_url": "https://github.com/rust-lang/rust/commit/8cef65fde3f92a84218fc338de6ab967fafd1820"}, {"sha": "169c59ff0fcbd606c6f639c2318f71b51f6c9207", "url": "https://api.github.com/repos/rust-lang/rust/commits/169c59ff0fcbd606c6f639c2318f71b51f6c9207", "html_url": "https://github.com/rust-lang/rust/commit/169c59ff0fcbd606c6f639c2318f71b51f6c9207"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "f752472c3ba80d5ad8b9371f3afa1247e897d11e", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/0c9ef564a7688dd4a9047342c7f8395aea909333/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9ef564a7688dd4a9047342c7f8395aea909333/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=0c9ef564a7688dd4a9047342c7f8395aea909333", "patch": "@@ -325,6 +325,120 @@ pub enum Ordering {\n }\n \n impl Ordering {\n+    /// Returns `true` if the ordering is the `Equal` variant.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ordering_helpers)]\n+    /// use std::cmp::Ordering;\n+    ///\n+    /// assert_eq!(Ordering::Less.is_eq(), false);\n+    /// assert_eq!(Ordering::Equal.is_eq(), true);\n+    /// assert_eq!(Ordering::Greater.is_eq(), false);\n+    /// ```\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    pub const fn is_eq(self) -> bool {\n+        matches!(self, Equal)\n+    }\n+\n+    /// Returns `true` if the ordering is not the `Equal` variant.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ordering_helpers)]\n+    /// use std::cmp::Ordering;\n+    ///\n+    /// assert_eq!(Ordering::Less.is_ne(), true);\n+    /// assert_eq!(Ordering::Equal.is_ne(), false);\n+    /// assert_eq!(Ordering::Greater.is_ne(), true);\n+    /// ```\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    pub const fn is_ne(self) -> bool {\n+        !matches!(self, Equal)\n+    }\n+\n+    /// Returns `true` if the ordering is the `Less` variant.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ordering_helpers)]\n+    /// use std::cmp::Ordering;\n+    ///\n+    /// assert_eq!(Ordering::Less.is_lt(), true);\n+    /// assert_eq!(Ordering::Equal.is_lt(), false);\n+    /// assert_eq!(Ordering::Greater.is_lt(), false);\n+    /// ```\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    pub const fn is_lt(self) -> bool {\n+        matches!(self, Less)\n+    }\n+\n+    /// Returns `true` if the ordering is the `Greater` variant.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ordering_helpers)]\n+    /// use std::cmp::Ordering;\n+    ///\n+    /// assert_eq!(Ordering::Less.is_gt(), false);\n+    /// assert_eq!(Ordering::Equal.is_gt(), false);\n+    /// assert_eq!(Ordering::Greater.is_gt(), true);\n+    /// ```\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    pub const fn is_gt(self) -> bool {\n+        matches!(self, Greater)\n+    }\n+\n+    /// Returns `true` if the ordering is either the `Less` or `Equal` variant.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ordering_helpers)]\n+    /// use std::cmp::Ordering;\n+    ///\n+    /// assert_eq!(Ordering::Less.is_le(), true);\n+    /// assert_eq!(Ordering::Equal.is_le(), true);\n+    /// assert_eq!(Ordering::Greater.is_le(), false);\n+    /// ```\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    pub const fn is_le(self) -> bool {\n+        !matches!(self, Greater)\n+    }\n+\n+    /// Returns `true` if the ordering is either the `Greater` or `Equal` variant.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ordering_helpers)]\n+    /// use std::cmp::Ordering;\n+    ///\n+    /// assert_eq!(Ordering::Less.is_ge(), false);\n+    /// assert_eq!(Ordering::Equal.is_ge(), true);\n+    /// assert_eq!(Ordering::Greater.is_ge(), true);\n+    /// ```\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    pub const fn is_ge(self) -> bool {\n+        !matches!(self, Less)\n+    }\n+\n     /// Reverses the `Ordering`.\n     ///\n     /// * `Less` becomes `Greater`."}]}