{"sha": "dda5ea883a2191b16e08ba1a455a5776acbe57d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYTVlYTg4M2EyMTkxYjE2ZTA4YmExYTQ1NWE1Nzc2YWNiZTU3ZDA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-19T13:37:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-19T13:37:07Z"}, "message": "Fix debuginfo for machO\n\nThis only fixes it when using object::write as backend, and not when using faerie.\n\nThere were two problems:\n\n* object::write doesn't replace .debug_info with __debug_info, unlike faerie\n* machO requires section relative relocations, and not symbol relative\n  relocations. When using symbol relative relocations, the linker\n  interprets the relocations as section relative. Thus writing the wrong\n  values to the debug sections.\n\nFixes #303", "tree": {"sha": "5ccb95133d3135329a89adc606edfd0441861851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ccb95133d3135329a89adc606edfd0441861851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dda5ea883a2191b16e08ba1a455a5776acbe57d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dda5ea883a2191b16e08ba1a455a5776acbe57d0", "html_url": "https://github.com/rust-lang/rust/commit/dda5ea883a2191b16e08ba1a455a5776acbe57d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dda5ea883a2191b16e08ba1a455a5776acbe57d0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "html_url": "https://github.com/rust-lang/rust/commit/75c24b9c9677600422ec86fa9f4c78fe3678d2ce"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "3ed6e08f497781b00263c77fd1eb5e7ecec55f46", "filename": "src/backend.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dda5ea883a2191b16e08ba1a455a5776acbe57d0/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda5ea883a2191b16e08ba1a455a5776acbe57d0/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=dda5ea883a2191b16e08ba1a455a5776acbe57d0", "patch": "@@ -1,4 +1,5 @@\n use std::collections::HashMap;\n+use std::convert::TryFrom;\n \n use rustc::session::Session;\n \n@@ -122,8 +123,13 @@ impl WriteDebugInfo for ObjectProduct {\n         id: SectionId,\n         data: Vec<u8>,\n     ) -> (object::write::SectionId, object::write::SymbolId) {\n+        let name = if self.object.format() == target_lexicon::BinaryFormat::Macho {\n+            id.name().replace('.', \"__\") // machO expects __debug_info instead of .debug_info\n+        } else {\n+            id.name().to_string()\n+        }.into_bytes();\n+\n         let segment = self.object.segment_name(StandardSegment::Debug).to_vec();\n-        let name = id.name().as_bytes().to_vec();\n         let section_id = self.object.add_section(segment, name, SectionKind::Debug);\n         self.object.section_mut(section_id).set_data(data, 1);\n         let symbol_id = self.object.section_symbol(section_id);\n@@ -137,10 +143,19 @@ impl WriteDebugInfo for ObjectProduct {\n         from: &Self::SectionId,\n         reloc: &DebugReloc,\n     ) {\n-        let symbol = match reloc.name {\n-            DebugRelocName::Section(id) => section_map.get(&id).unwrap().1,\n+        let (symbol, symbol_offset) = match reloc.name {\n+            DebugRelocName::Section(id) => {\n+                (section_map.get(&id).unwrap().1, 0)\n+            }\n             DebugRelocName::Symbol(id) => {\n-                self.function_symbol(*symbol_map.get_index(id).unwrap().0)\n+                let symbol_id = self.function_symbol(*symbol_map.get_index(id).unwrap().0);\n+                let symbol = self.object.symbol(symbol_id);\n+\n+                // A symbol gets a section assigned when `add_symbol_data` is called.\n+                let section = symbol.section.expect(\"Symbol not defined\");\n+                let symbol_offset = symbol.value;\n+\n+                (self.object.section_symbol(section), symbol_offset)\n             }\n         };\n         self.object.add_relocation(from.0, Relocation {\n@@ -149,7 +164,7 @@ impl WriteDebugInfo for ObjectProduct {\n             kind: RelocationKind::Absolute,\n             encoding: RelocationEncoding::Generic,\n             size: reloc.size * 8,\n-            addend: reloc.addend,\n+            addend: i64::try_from(symbol_offset).unwrap() + reloc.addend,\n         }).unwrap();\n     }\n }"}, {"sha": "22271460b02ba030a415f158bb53645d235c1440", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dda5ea883a2191b16e08ba1a455a5776acbe57d0/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda5ea883a2191b16e08ba1a455a5776acbe57d0/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=dda5ea883a2191b16e08ba1a455a5776acbe57d0", "patch": "@@ -184,10 +184,7 @@ fn run_aot(\n \n     let mut module = new_module(\"some_file\".to_string());\n \n-    let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None\n-        // macOS debuginfo doesn't work yet (see #303)\n-        && !tcx.sess.target.target.options.is_like_osx\n-    {\n+    let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None {\n         let debug = DebugContext::new(\n             tcx,\n             module.target_config().pointer_type().bytes() as u8,"}]}