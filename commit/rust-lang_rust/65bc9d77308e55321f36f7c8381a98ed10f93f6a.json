{"sha": "65bc9d77308e55321f36f7c8381a98ed10f93f6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YmM5ZDc3MzA4ZTU1MzIxZjM2ZjdjODM4MWE5OGVkMTBmOTNmNmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-26T17:25:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-26T17:25:03Z"}, "message": "Auto merge of #32503 - dotdash:llvm_attrs, r=eddyb\n\nFix building on ARM", "tree": {"sha": "025ef8ae260c53286dbae300d284b8bf90e51717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/025ef8ae260c53286dbae300d284b8bf90e51717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65bc9d77308e55321f36f7c8381a98ed10f93f6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65bc9d77308e55321f36f7c8381a98ed10f93f6a", "html_url": "https://github.com/rust-lang/rust/commit/65bc9d77308e55321f36f7c8381a98ed10f93f6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65bc9d77308e55321f36f7c8381a98ed10f93f6a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f34053f762f708430971a36fc4c6e665528ebe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f34053f762f708430971a36fc4c6e665528ebe2", "html_url": "https://github.com/rust-lang/rust/commit/8f34053f762f708430971a36fc4c6e665528ebe2"}, {"sha": "1eacb4a6c3e5d4d45cd69c0b32c7de89d2d26e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eacb4a6c3e5d4d45cd69c0b32c7de89d2d26e89", "html_url": "https://github.com/rust-lang/rust/commit/1eacb4a6c3e5d4d45cd69c0b32c7de89d2d26e89"}], "stats": {"total": 60, "additions": 27, "deletions": 33}, "files": [{"sha": "b3bd6b92299654a01564290b7914da6e7836a86b", "filename": "src/bootstrap/build/native.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65bc9d77308e55321f36f7c8381a98ed10f93f6a/src%2Fbootstrap%2Fbuild%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc9d77308e55321f36f7c8381a98ed10f93f6a/src%2Fbootstrap%2Fbuild%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fnative.rs?ref=65bc9d77308e55321f36f7c8381a98ed10f93f6a", "patch": "@@ -39,12 +39,7 @@ pub fn llvm(build: &Build, target: &str) {\n \n     let _ = fs::remove_dir_all(&dst.join(\"build\"));\n     t!(fs::create_dir_all(&dst.join(\"build\")));\n-    let mut assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n-\n-    // Disable LLVM assertions on ARM compilers until #32360 is fixed\n-    if target.contains(\"arm\") && target.contains(\"gnu\") {\n-        assertions = \"OFF\";\n-    }\n+    let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n \n     // http://llvm.org/docs/CMake.html\n     let mut cfg = cmake::Config::new(build.src.join(\"src/llvm\"));"}, {"sha": "ee57812fb9823017e35dfae40db51d330149b66c", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65bc9d77308e55321f36f7c8381a98ed10f93f6a/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc9d77308e55321f36f7c8381a98ed10f93f6a/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=65bc9d77308e55321f36f7c8381a98ed10f93f6a", "patch": "@@ -964,9 +964,10 @@ extern {\n     pub fn LLVMAddFunctionAttrStringValue(Fn: ValueRef, index: c_uint,\n                                           Name: *const c_char,\n                                           Value: *const c_char);\n+    pub fn LLVMRemoveFunctionAttributes(Fn: ValueRef, index: c_uint, attr: uint64_t);\n     pub fn LLVMRemoveFunctionAttrString(Fn: ValueRef, index: c_uint, Name: *const c_char);\n-    pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_ulonglong;\n-    pub fn LLVMRemoveFunctionAttr(Fn: ValueRef, val: c_ulonglong);\n+    pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_uint;\n+    pub fn LLVMRemoveFunctionAttr(Fn: ValueRef, val: c_uint);\n \n     /* Operations on parameters */\n     pub fn LLVMCountParams(Fn: ValueRef) -> c_uint;\n@@ -2184,6 +2185,13 @@ pub fn SetFunctionAttribute(fn_: ValueRef, attr: Attribute) {\n     }\n }\n \n+pub fn RemoveFunctionAttributes(fn_: ValueRef, attr: Attribute) {\n+    unsafe {\n+        LLVMRemoveFunctionAttributes(fn_, FunctionIndex as c_uint,\n+                                           attr.bits() as uint64_t)\n+    }\n+}\n+\n /* Memory-managed interface to target data. */\n \n pub struct TargetData {"}, {"sha": "b771afea0f3bde1e04fe86927ab5f9a6174b4cd5", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/65bc9d77308e55321f36f7c8381a98ed10f93f6a/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc9d77308e55321f36f7c8381a98ed10f93f6a/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=65bc9d77308e55321f36f7c8381a98ed10f93f6a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n //! Set and unset common attributes on LLVM values.\n \n-use libc::{c_uint, c_ulonglong};\n+use libc::c_uint;\n use llvm::{self, ValueRef};\n use session::config::NoDebugInfo;\n pub use syntax::attr::InlineAttr;\n@@ -28,9 +28,7 @@ pub fn inline(val: ValueRef, inline: InlineAttr) {\n             let attr = llvm::Attribute::InlineHint |\n                        llvm::Attribute::AlwaysInline |\n                        llvm::Attribute::NoInline;\n-            unsafe {\n-                llvm::LLVMRemoveFunctionAttr(val, attr.bits() as c_ulonglong)\n-            }\n+            llvm::RemoveFunctionAttributes(val, attr)\n         },\n     };\n }\n@@ -41,25 +39,15 @@ pub fn emit_uwtable(val: ValueRef, emit: bool) {\n     if emit {\n         llvm::SetFunctionAttribute(val, llvm::Attribute::UWTable);\n     } else {\n-        unsafe {\n-            llvm::LLVMRemoveFunctionAttr(\n-                val,\n-                llvm::Attribute::UWTable.bits() as c_ulonglong,\n-            );\n-        }\n+        llvm::RemoveFunctionAttributes(val, llvm::Attribute::UWTable);\n     }\n }\n \n /// Tell LLVM whether the function can or cannot unwind.\n #[inline]\n pub fn unwind(val: ValueRef, can_unwind: bool) {\n     if can_unwind {\n-        unsafe {\n-            llvm::LLVMRemoveFunctionAttr(\n-                val,\n-                llvm::Attribute::NoUnwind.bits() as c_ulonglong,\n-            );\n-        }\n+        llvm::RemoveFunctionAttributes(val, llvm::Attribute::NoUnwind);\n     } else {\n         llvm::SetFunctionAttribute(val, llvm::Attribute::NoUnwind);\n     }\n@@ -72,12 +60,7 @@ pub fn set_optimize_for_size(val: ValueRef, optimize: bool) {\n     if optimize {\n         llvm::SetFunctionAttribute(val, llvm::Attribute::OptimizeForSize);\n     } else {\n-        unsafe {\n-            llvm::LLVMRemoveFunctionAttr(\n-                val,\n-                llvm::Attribute::OptimizeForSize.bits() as c_ulonglong,\n-            );\n-        }\n+        llvm::RemoveFunctionAttributes(val, llvm::Attribute::OptimizeForSize);\n     }\n }\n \n@@ -87,9 +70,7 @@ pub fn naked(val: ValueRef, is_naked: bool) {\n     if is_naked {\n         llvm::SetFunctionAttribute(val, llvm::Attribute::Naked);\n     } else {\n-        unsafe {\n-            llvm::LLVMRemoveFunctionAttr(val, llvm::Attribute::Naked.bits() as c_ulonglong);\n-        }\n+        llvm::RemoveFunctionAttributes(val, llvm::Attribute::Naked);\n     }\n }\n "}, {"sha": "6ff90a8f53a04098893948488993fece9a822ac1", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65bc9d77308e55321f36f7c8381a98ed10f93f6a/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/65bc9d77308e55321f36f7c8381a98ed10f93f6a/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=65bc9d77308e55321f36f7c8381a98ed10f93f6a", "patch": "@@ -151,6 +151,16 @@ extern \"C\" void LLVMAddFunctionAttrStringValue(LLVMValueRef Fn, unsigned index,\n   F->addAttributes(index, AttributeSet::get(F->getContext(), index, B));\n }\n \n+extern \"C\" void LLVMRemoveFunctionAttributes(LLVMValueRef Fn, unsigned index, uint64_t Val) {\n+  Function *A = unwrap<Function>(Fn);\n+  const AttributeSet PAL = A->getAttributes();\n+  AttrBuilder B(Val);\n+  const AttributeSet PALnew =\n+    PAL.removeAttributes(A->getContext(), index,\n+                         AttributeSet::get(A->getContext(), index, B));\n+  A->setAttributes(PALnew);\n+}\n+\n extern \"C\" void LLVMRemoveFunctionAttrString(LLVMValueRef fn, unsigned index, const char *Name) {\n   Function *f = unwrap<Function>(fn);\n   LLVMContext &C = f->getContext();"}]}