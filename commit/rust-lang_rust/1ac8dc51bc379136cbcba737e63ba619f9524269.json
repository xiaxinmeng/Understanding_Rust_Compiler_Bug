{"sha": "1ac8dc51bc379136cbcba737e63ba619f9524269", "node_id": "C_kwDOAAsO6NoAKDFhYzhkYzUxYmMzNzkxMzZjYmNiYTczN2U2M2JhNjE5Zjk1MjQyNjk", "commit": {"author": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-04-12T18:17:26Z"}, "committer": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-04-22T19:12:55Z"}, "message": "Compact emmited lint", "tree": {"sha": "33513b2e88b5b12c125cff6b9b6e286194ba199f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33513b2e88b5b12c125cff6b9b6e286194ba199f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ac8dc51bc379136cbcba737e63ba619f9524269", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEM3aofraJSaf7CtgpTTgXC1ovwzQFAmREMboACgkQTTgXC1ov\nwzQV7RAArQFeOjMBhRZe9Zt2sv/rVK3oB5BuXRpJvPp7eMD9+TEEV9PTZ3xj9uVI\nujSSixyUmSQXLVyYHUHKmxCDvVEJQ8vXtbAa3O4n4k6JWQvW9pmSZTlJadNpQPGD\n/GRIy665Xno1n1JOX21H3wdXij5xLTRLZ5488OjTyi0X/bBlqBghVNIOaM7hruT0\nJzT/quBzZU2hSYAyBFP2k9qpXaQva/BTk25TktMGjTWvQ9ig3vNjP4VIYEMCkUkn\niXvW1ovO3pbBD0gJFS38+z38ebzui+MNYMg7Jw2bA/YHeIZuf0OjCwi7D0P/ce9V\n5J6dYUZj+SMcJMfL+9Apf4JymrHPAjUkveIHbvIxZQ/X3JjUJXVPY4E8ej/oxDEo\nqenFnCKmkCuzKIBjyS3P1FNlmWyo8TZL5bPc05aoRYXFoeTd1m0FBYL+Ku9dq8zJ\nch7IGZZCWRtbC80N1d9mj9R6TZeh2xVznMcz5KBJ1cPmWCZPMw+Uc4AbBnJ9x6xd\nfpllnacXTtpjWRg6f3yAEwY13K9T+7kDXSjjSE88vxMR7Yx248SZBziX4XEk63+R\nKJnGCL07l/9fTeSbkEyUS7E79q5XEta1BWy4nTiM3NJAUdyJLksG1PKaNntrepb8\n15C5wovplCi+977saAA17YG8zTgS0kAsk6mgtnhsEH62Ro1WxFI=\n=z9ZX\n-----END PGP SIGNATURE-----", "payload": "tree 33513b2e88b5b12c125cff6b9b6e286194ba199f\nparent 0354cee1372ac80028588f9a2f2772c868b0a21c\nauthor blyxyas <blyxyas@gmail.com> 1681323446 +0200\ncommitter blyxyas <blyxyas@gmail.com> 1682190775 +0200\n\nCompact emmited lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac8dc51bc379136cbcba737e63ba619f9524269", "html_url": "https://github.com/rust-lang/rust/commit/1ac8dc51bc379136cbcba737e63ba619f9524269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ac8dc51bc379136cbcba737e63ba619f9524269/comments", "author": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0354cee1372ac80028588f9a2f2772c868b0a21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0354cee1372ac80028588f9a2f2772c868b0a21c", "html_url": "https://github.com/rust-lang/rust/commit/0354cee1372ac80028588f9a2f2772c868b0a21c"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "52d716feea02fbe57a72ef3ea3e106dbc20fcbe6", "filename": "clippy_lints/src/items_after_test_module.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1ac8dc51bc379136cbcba737e63ba619f9524269/clippy_lints%2Fsrc%2Fitems_after_test_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac8dc51bc379136cbcba737e63ba619f9524269/clippy_lints%2Fsrc%2Fitems_after_test_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_test_module.rs?ref=1ac8dc51bc379136cbcba737e63ba619f9524269", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::{HirId, ItemId, ItemKind, Mod};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n+use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -43,38 +43,39 @@ declare_lint_pass!(ItemsAfterTestModule => [ITEMS_AFTER_TEST_MODULE]);\n impl LateLintPass<'_> for ItemsAfterTestModule {\n     fn check_mod(&mut self, cx: &LateContext<'_>, _: &Mod<'_>, _: HirId) {\n         let mut was_test_mod_visited = false;\n-        let mut test_mod_hash: Option<u128> = None;\n+        let mut test_mod_span: Option<Span> = None;\n \n         let hir = cx.tcx.hir();\n         let items = hir.items().collect::<Vec<ItemId>>();\n \n-        for itid in &items {\n+        for (i, itid) in items.iter().enumerate() {\n             let item = hir.item(*itid);\n \n             if_chain! {\n             if was_test_mod_visited;\n+            if i == (items.len() - 3 /* Weird magic number (HIR-translation behaviour) */);\n             if cx.sess().source_map().lookup_char_pos(item.span.lo()).file.name_hash\n-            == test_mod_hash.unwrap(); // Will never fail\n-            if !matches!(item.kind, ItemKind::Mod(_) | ItemKind::Macro(_, _));\n+            == cx.sess().source_map().lookup_char_pos(test_mod_span.unwrap().lo()).file.name_hash; // Will never fail\n+            if !matches!(item.kind, ItemKind::Mod(_));\n             if !is_in_cfg_test(cx.tcx, itid.hir_id()); // The item isn't in the testing module itself\n-\n             if !in_external_macro(cx.sess(), item.span);\n+\n             then {\n-                span_lint_and_help(cx, ITEMS_AFTER_TEST_MODULE, item.span, \"an item was found after the testing module\", None, \"move the item to before the testing module was defined\");\n+                span_lint_and_help(cx, ITEMS_AFTER_TEST_MODULE, test_mod_span.unwrap().with_hi(item.span.hi()), \"items were found after the testing module\", None, \"move the items to before the testing module was defined\");\n             }};\n \n             if matches!(item.kind, ItemKind::Mod(_)) {\n                 for attr in cx.tcx.get_attrs(item.owner_id.to_def_id(), sym::cfg) {\n                     if_chain! {\n-                                if attr.has_name(sym::cfg);\n-                                if let Some(mitems) = attr.meta_item_list();\n-                                if let [mitem] = &*mitems;\n-                                if mitem.has_name(sym::test);\n-                                then {\n-                                    was_test_mod_visited = true;\n-                    test_mod_hash = Some(cx.sess().source_map().lookup_char_pos(item.span.lo()).file.name_hash);\n-                                }\n-                            }\n+                        if attr.has_name(sym::cfg);\n+                        if let Some(mitems) = attr.meta_item_list();\n+                        if let [mitem] = &*mitems;\n+                        if mitem.has_name(sym::test);\n+                        then {\n+                            was_test_mod_visited = true;\n+                            test_mod_span = Some(item.span);\n+                        }\n+                    }\n                 }\n             }\n         }"}, {"sha": "5136b2557ec1a6d695b66a4b67181d7ea71f29c6", "filename": "tests/ui/items_after_test_module.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ac8dc51bc379136cbcba737e63ba619f9524269/tests%2Fui%2Fitems_after_test_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac8dc51bc379136cbcba737e63ba619f9524269/tests%2Fui%2Fitems_after_test_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitems_after_test_module.rs?ref=1ac8dc51bc379136cbcba737e63ba619f9524269", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: --test\n+//@compile-flags: --test\n #![allow(unused)]\n #![warn(clippy::items_after_test_module)]\n \n@@ -18,7 +18,6 @@ mod tests {\n fn should_lint() {}\n \n const SHOULD_ALSO_LINT: usize = 1;\n-\n macro_rules! should_not_lint {\n     () => {};\n }"}, {"sha": "8f1616dabc1f01541ae95c52f8a504e7a77fe126", "filename": "tests/ui/items_after_test_module.stderr", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1ac8dc51bc379136cbcba737e63ba619f9524269/tests%2Fui%2Fitems_after_test_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ac8dc51bc379136cbcba737e63ba619f9524269/tests%2Fui%2Fitems_after_test_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitems_after_test_module.stderr?ref=1ac8dc51bc379136cbcba737e63ba619f9524269", "patch": "@@ -1,19 +1,17 @@\n-error: an item was found after the testing module\n-  --> $DIR/items_after_test_module.rs:18:1\n+error: items were found after the testing module\n+  --> $DIR/items_after_test_module.rs:13:1\n    |\n-LL | fn should_lint() {}\n-   | ^^^^^^^^^^^^^^^^^^^\n+LL | / mod tests {\n+LL | |     #[test]\n+LL | |     fn hi() {}\n+LL | | }\n+...  |\n+LL | |     () => {};\n+LL | | }\n+   | |_^\n    |\n-   = help: move the item to before the testing module was defined\n+   = help: move the items to before the testing module was defined\n    = note: `-D clippy::items-after-test-module` implied by `-D warnings`\n \n-error: an item was found after the testing module\n-  --> $DIR/items_after_test_module.rs:20:1\n-   |\n-LL | const SHOULD_ALSO_LINT: usize = 1;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: move the item to before the testing module was defined\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}