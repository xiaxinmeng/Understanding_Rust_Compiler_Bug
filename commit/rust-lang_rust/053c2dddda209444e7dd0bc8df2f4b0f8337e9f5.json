{"sha": "053c2dddda209444e7dd0bc8df2f4b0f8337e9f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1M2MyZGRkZGEyMDk0NDRlN2RkMGJjOGRmMmY0YjBmODMzN2U5ZjU=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-04-15T23:54:55Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-04-16T00:35:37Z"}, "message": "Add note about Layout::pad_to_align to Layout::extend", "tree": {"sha": "84d476872658df04233f4154d999a0b247eca8e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84d476872658df04233f4154d999a0b247eca8e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/053c2dddda209444e7dd0bc8df2f4b0f8337e9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/053c2dddda209444e7dd0bc8df2f4b0f8337e9f5", "html_url": "https://github.com/rust-lang/rust/commit/053c2dddda209444e7dd0bc8df2f4b0f8337e9f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/053c2dddda209444e7dd0bc8df2f4b0f8337e9f5/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c266b8b98c763984c6d1183e3518379c0cf2751f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c266b8b98c763984c6d1183e3518379c0cf2751f", "html_url": "https://github.com/rust-lang/rust/commit/c266b8b98c763984c6d1183e3518379c0cf2751f"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "2ad36627403084bed1432fa5ac6d1698f9e8533f", "filename": "src/libcore/alloc/layout.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/053c2dddda209444e7dd0bc8df2f4b0f8337e9f5/src%2Flibcore%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053c2dddda209444e7dd0bc8df2f4b0f8337e9f5/src%2Flibcore%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc%2Flayout.rs?ref=053c2dddda209444e7dd0bc8df2f4b0f8337e9f5", "patch": "@@ -258,16 +258,44 @@ impl Layout {\n \n     /// Creates a layout describing the record for `self` followed by\n     /// `next`, including any necessary padding to ensure that `next`\n-    /// will be properly aligned, but *no trailing padding*. Note that\n-    /// the resulting layout will satisfy the alignment properties of\n-    /// both `self` and `next`, in order to ensure field alignment.\n+    /// will be properly aligned, but *no trailing padding*. In order to\n+    /// match C representation layout, you should call `pad_to_align`\n+    /// after extending the layout with all fields.\n+    ///\n+    /// Note that the resulting layout will satisfy the alignment properties\n+    /// of both `self` and `next`, in order to ensure alignment of both parts.\n     ///\n     /// Returns `Ok((k, offset))`, where `k` is layout of the concatenated\n     /// record and `offset` is the relative location, in bytes, of the\n     /// start of the `next` embedded within the concatenated record\n     /// (assuming that the record itself starts at offset 0).\n     ///\n     /// On arithmetic overflow, returns `LayoutErr`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// To calculate the layout of a `#[repr(C)]` structure from its fields' layouts:\n+    ///\n+    /// ```rust\n+    /// # use std::alloc::{Layout, LayoutErr};\n+    /// pub fn repr_c(fields: &[Layout]) -> Result<(Layout, Vec<usize>), LayoutErr> {\n+    ///     let mut offsets = Vec::new();\n+    ///     let mut layout = Layout::from_size_align(0, 1)?;\n+    ///     for &field in fields {\n+    ///         let (new_layout, offset) = layout.extend(field)?;\n+    ///         layout = new_layout;\n+    ///         offsets.push(offset);\n+    ///     }\n+    ///     Ok((layout.pad_to_align(), offsets))\n+    /// }\n+    /// # // test that it works\n+    /// # #[repr(C)] struct S { a: u64, b: u32, c: u16, d: u32 }\n+    /// # let s = Layout::new::<S>();\n+    /// # let u16 = Layout::new::<u16>();\n+    /// # let u32 = Layout::new::<u32>();\n+    /// # let u64 = Layout::new::<u64>();\n+    /// # assert_eq!(repr_c(&[u64, u32, u16, u32]), Ok((s, vec![0, 8, 12, 16])));\n+    /// ```\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n     pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutErr> {"}]}