{"sha": "4a4916920fed8221251d1942d01f17ce5f5a0fa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNDkxNjkyMGZlZDgyMjEyNTFkMTk0MmQwMWYxN2NlNWY1YTBmYTA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-02T23:14:01Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-02T23:14:01Z"}, "message": "Make test temp files in the Cargo target directory, if known", "tree": {"sha": "445447ef22a203d1544b4a6d532a319c62d641c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/445447ef22a203d1544b4a6d532a319c62d641c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a4916920fed8221251d1942d01f17ce5f5a0fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4916920fed8221251d1942d01f17ce5f5a0fa0", "html_url": "https://github.com/rust-lang/rust/commit/4a4916920fed8221251d1942d01f17ce5f5a0fa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a4916920fed8221251d1942d01f17ce5f5a0fa0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36c49d703a429ff2d324453b11a2f243491fb444", "url": "https://api.github.com/repos/rust-lang/rust/commits/36c49d703a429ff2d324453b11a2f243491fb444", "html_url": "https://github.com/rust-lang/rust/commit/36c49d703a429ff2d324453b11a2f243491fb444"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "ba0c75a1834d79729b16e4fa6e7d8db6a816cd54", "filename": "src/test/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a4916920fed8221251d1942d01f17ce5f5a0fa0/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4916920fed8221251d1942d01f17ce5f5a0fa0/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=4a4916920fed8221251d1942d01f17ce5f5a0fa0", "patch": "@@ -859,23 +859,27 @@ fn configuration_snippet_tests() {\n }\n \n struct TempFile {\n-    file_name: &'static str,\n+    path: PathBuf,\n }\n \n fn make_temp_file(file_name: &'static str) -> TempFile {\n+    use std::env::var;\n     use std::fs::File;\n \n-    let mut file = File::create(file_name).expect(\"Couldn't create temp file\");\n+    let target_dir = var(\"CARGO_TARGET_DIR\").unwrap_or_else(|_| \".\".to_owned());\n+    let path = Path::new(&target_dir).join(file_name);\n+\n+    let mut file = File::create(&path).expect(\"Couldn't create temp file\");\n     let content = \"fn main() {}\\n\";\n     file.write_all(content.as_bytes())\n         .expect(\"Couldn't write temp file\");\n-    TempFile { file_name }\n+    TempFile { path }\n }\n \n impl Drop for TempFile {\n     fn drop(&mut self) {\n         use std::fs::remove_file;\n-        remove_file(self.file_name).expect(\"Couldn't delete temp file\");\n+        remove_file(&self.path).expect(\"Couldn't delete temp file\");\n     }\n }\n "}]}