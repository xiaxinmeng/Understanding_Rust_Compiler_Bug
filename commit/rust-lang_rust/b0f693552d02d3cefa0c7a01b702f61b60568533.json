{"sha": "b0f693552d02d3cefa0c7a01b702f61b60568533", "node_id": "C_kwDOAAsO6NoAKGIwZjY5MzU1MmQwMmQzY2VmYTBjN2EwMWI3MDJmNjFiNjA1Njg1MzM", "commit": {"author": {"name": "Alex Saveau", "email": "saveau.alexandre@gmail.com", "date": "2022-10-19T17:43:57Z"}, "committer": {"name": "Alex Saveau", "email": "saveau.alexandre@gmail.com", "date": "2022-10-19T18:48:56Z"}, "message": "Make miri read_dir test a little more robust\n\nSigned-off-by: Alex Saveau <saveau.alexandre@gmail.com>", "tree": {"sha": "8e5ee6d3106058875772e49b583f5f77afa23e91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e5ee6d3106058875772e49b583f5f77afa23e91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0f693552d02d3cefa0c7a01b702f61b60568533", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTBcJf70cgSZQv+KO8/jVsW6xadSAUCY1BGmAAKCRA/jVsW6xad\nSBajAP9ylkXh+pd2QOqGF+EPlzhA7FfxEv/dhmDxmYdxFQbZzgEAms+wjlyNlTD/\nMWK+EV/xFQlotNLWDTvcFEfC0WDWcg8=\n=SgAA\n-----END PGP SIGNATURE-----", "payload": "tree 8e5ee6d3106058875772e49b583f5f77afa23e91\nparent 4b8f4319954ff2642690b9e5cbe4af352d095bf6\nauthor Alex Saveau <saveau.alexandre@gmail.com> 1666201437 -0700\ncommitter Alex Saveau <saveau.alexandre@gmail.com> 1666205336 -0700\n\nMake miri read_dir test a little more robust\n\nSigned-off-by: Alex Saveau <saveau.alexandre@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f693552d02d3cefa0c7a01b702f61b60568533", "html_url": "https://github.com/rust-lang/rust/commit/b0f693552d02d3cefa0c7a01b702f61b60568533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0f693552d02d3cefa0c7a01b702f61b60568533/comments", "author": {"login": "SUPERCILEX", "id": 9490724, "node_id": "MDQ6VXNlcjk0OTA3MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9490724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SUPERCILEX", "html_url": "https://github.com/SUPERCILEX", "followers_url": "https://api.github.com/users/SUPERCILEX/followers", "following_url": "https://api.github.com/users/SUPERCILEX/following{/other_user}", "gists_url": "https://api.github.com/users/SUPERCILEX/gists{/gist_id}", "starred_url": "https://api.github.com/users/SUPERCILEX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SUPERCILEX/subscriptions", "organizations_url": "https://api.github.com/users/SUPERCILEX/orgs", "repos_url": "https://api.github.com/users/SUPERCILEX/repos", "events_url": "https://api.github.com/users/SUPERCILEX/events{/privacy}", "received_events_url": "https://api.github.com/users/SUPERCILEX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SUPERCILEX", "id": 9490724, "node_id": "MDQ6VXNlcjk0OTA3MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9490724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SUPERCILEX", "html_url": "https://github.com/SUPERCILEX", "followers_url": "https://api.github.com/users/SUPERCILEX/followers", "following_url": "https://api.github.com/users/SUPERCILEX/following{/other_user}", "gists_url": "https://api.github.com/users/SUPERCILEX/gists{/gist_id}", "starred_url": "https://api.github.com/users/SUPERCILEX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SUPERCILEX/subscriptions", "organizations_url": "https://api.github.com/users/SUPERCILEX/orgs", "repos_url": "https://api.github.com/users/SUPERCILEX/repos", "events_url": "https://api.github.com/users/SUPERCILEX/events{/privacy}", "received_events_url": "https://api.github.com/users/SUPERCILEX/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b8f4319954ff2642690b9e5cbe4af352d095bf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8f4319954ff2642690b9e5cbe4af352d095bf6", "html_url": "https://github.com/rust-lang/rust/commit/4b8f4319954ff2642690b9e5cbe4af352d095bf6"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "e573d330aa4ac327f1bcf8a8f220033a99485e08", "filename": "src/tools/miri/tests/pass-dep/shims/fs.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b0f693552d02d3cefa0c7a01b702f61b60568533/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f693552d02d3cefa0c7a01b702f61b60568533/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffs.rs?ref=b0f693552d02d3cefa0c7a01b702f61b60568533", "patch": "@@ -4,7 +4,8 @@\n #![feature(io_error_more)]\n #![feature(io_error_uncategorized)]\n \n-use std::ffi::CString;\n+use std::collections::HashMap;\n+use std::ffi::{CString, OsString};\n use std::fs::{\n     create_dir, read_dir, read_link, remove_dir, remove_dir_all, remove_file, rename, File,\n     OpenOptions,\n@@ -394,29 +395,34 @@ fn test_directory() {\n     // Creating a directory when it already exists should fail.\n     assert_eq!(ErrorKind::AlreadyExists, create_dir(&dir_path).unwrap_err().kind());\n \n-    // Create some files inside the directory\n+    // Create some files and dirs inside the directory\n     let path_1 = dir_path.join(\"test_file_1\");\n     drop(File::create(&path_1).unwrap());\n     let path_2 = dir_path.join(\"test_file_2\");\n     drop(File::create(&path_2).unwrap());\n-    // Test that the files are present inside the directory\n-    let dir_iter = read_dir(&dir_path).unwrap();\n-    let mut file_names = dir_iter.map(|e| e.unwrap().file_name()).collect::<Vec<_>>();\n-    file_names.sort_unstable();\n-    assert_eq!(file_names, vec![\"test_file_1\", \"test_file_2\"]);\n+    let dir_1 = dir_path.join(\"test_dir_1\");\n+    create_dir(&dir_1).unwrap();\n     // Test that read_dir metadata calls succeed\n     assert_eq!(\n-        &[true, true],\n-        &*read_dir(&dir_path)\n+        HashMap::from([\n+            (OsString::from(\"test_file_1\"), true),\n+            (OsString::from(\"test_file_2\"), true),\n+            (OsString::from(\"test_dir_1\"), false)\n+        ]),\n+        read_dir(&dir_path)\n             .unwrap()\n-            .map(|e| e.unwrap().metadata().unwrap().is_file())\n-            .collect::<Vec<_>>()\n+            .map(|e| {\n+                let e = e.unwrap();\n+                (e.file_name(), e.metadata().unwrap().is_file())\n+            })\n+            .collect::<HashMap<_, _>>()\n     );\n     // Deleting the directory should fail, since it is not empty.\n     assert_eq!(ErrorKind::DirectoryNotEmpty, remove_dir(&dir_path).unwrap_err().kind());\n     // Clean up the files in the directory\n     remove_file(&path_1).unwrap();\n     remove_file(&path_2).unwrap();\n+    remove_dir(&dir_1).unwrap();\n     // Now there should be nothing left in the directory.\n     let dir_iter = read_dir(&dir_path).unwrap();\n     let file_names = dir_iter.map(|e| e.unwrap().file_name()).collect::<Vec<_>>();"}]}