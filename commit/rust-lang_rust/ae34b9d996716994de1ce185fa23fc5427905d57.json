{"sha": "ae34b9d996716994de1ce185fa23fc5427905d57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMzRiOWQ5OTY3MTY5OTRkZTFjZTE4NWZhMjNmYzU0Mjc5MDVkNTc=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-02T19:01:03Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-03T00:01:14Z"}, "message": "Use .any(x) instead of .find(x).is_some() on iterators.", "tree": {"sha": "e60adf642892ad03ce036d105afab5ba93ec0b46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e60adf642892ad03ce036d105afab5ba93ec0b46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae34b9d996716994de1ce185fa23fc5427905d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae34b9d996716994de1ce185fa23fc5427905d57", "html_url": "https://github.com/rust-lang/rust/commit/ae34b9d996716994de1ce185fa23fc5427905d57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae34b9d996716994de1ce185fa23fc5427905d57/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c287d86d2c535425cdf830e3be11e00fa32c909f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c287d86d2c535425cdf830e3be11e00fa32c909f", "html_url": "https://github.com/rust-lang/rust/commit/c287d86d2c535425cdf830e3be11e00fa32c909f"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "bdf587dc321f7940fd160245614a601eff9dd836", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae34b9d996716994de1ce185fa23fc5427905d57/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae34b9d996716994de1ce185fa23fc5427905d57/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=ae34b9d996716994de1ce185fa23fc5427905d57", "patch": "@@ -236,8 +236,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     //\n                     // FIXME? Other potential candidate methods: `as_ref` and\n                     // `as_mut`?\n-                    .find(|a| a.check_name(sym::rustc_conversion_suggestion))\n-                    .is_some()\n+                    .any(|a| a.check_name(sym::rustc_conversion_suggestion))\n         });\n \n         methods"}, {"sha": "778eee3586b4bc69644280bb3911e3ce01c1b971", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae34b9d996716994de1ce185fa23fc5427905d57/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae34b9d996716994de1ce185fa23fc5427905d57/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=ae34b9d996716994de1ce185fa23fc5427905d57", "patch": "@@ -23,14 +23,11 @@ impl InherentOverlapChecker<'tcx> {\n         let impl_items2 = self.tcx.associated_items(impl2);\n \n         for item1 in impl_items1.in_definition_order() {\n-            let collision = impl_items2\n-                .filter_by_name_unhygienic(item1.ident.name)\n-                .find(|item2| {\n-                    // Symbols and namespace match, compare hygienically.\n-                    item1.kind.namespace() == item2.kind.namespace()\n-                        && item1.ident.modern() == item2.ident.modern()\n-                })\n-                .is_some();\n+            let collision = impl_items2.filter_by_name_unhygienic(item1.ident.name).any(|item2| {\n+                // Symbols and namespace match, compare hygienically.\n+                item1.kind.namespace() == item2.kind.namespace()\n+                    && item1.ident.modern() == item2.ident.modern()\n+            });\n \n             if collision {\n                 return true;"}]}