{"sha": "cf1cc7c449e881f0ac5d8474209222bc269df250", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMWNjN2M0NDllODgxZjBhYzVkODQ3NDIwOTIyMmJjMjY5ZGYyNTA=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-09-04T03:15:31Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-09-04T03:15:31Z"}, "message": "Simplify `clippy::default_trait_access`\n\nRemove repeated matching on the same QPath.", "tree": {"sha": "9785422174c54290e000b206cc848b98abbb67b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9785422174c54290e000b206cc848b98abbb67b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf1cc7c449e881f0ac5d8474209222bc269df250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1cc7c449e881f0ac5d8474209222bc269df250", "html_url": "https://github.com/rust-lang/rust/commit/cf1cc7c449e881f0ac5d8474209222bc269df250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf1cc7c449e881f0ac5d8474209222bc269df250/comments", "author": null, "committer": null, "parents": [{"sha": "8829214764cf67c3184d8dbbeff4225292471f0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8829214764cf67c3184d8dbbeff4225292471f0d", "html_url": "https://github.com/rust-lang/rust/commit/8829214764cf67c3184d8dbbeff4225292471f0d"}], "stats": {"total": 46, "additions": 16, "deletions": 30}, "files": [{"sha": "320a2a257bd09405a2435fa94e7f2ada169dabb2", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cf1cc7c449e881f0ac5d8474209222bc269df250/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1cc7c449e881f0ac5d8474209222bc269df250/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=cf1cc7c449e881f0ac5d8474209222bc269df250", "patch": "@@ -38,37 +38,23 @@ impl<'tcx> LateLintPass<'tcx> for DefaultTraitAccess {\n             if let ExprKind::Path(ref qpath) = path.kind;\n             if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            // Detect and ignore <Foo as Default>::default() because these calls do explicitly name the type.\n+            if let QPath::Resolved(None, _path) = qpath;\n             then {\n-                match qpath {\n-                    QPath::Resolved(..) => {\n-                        if_chain! {\n-                            // Detect and ignore <Foo as Default>::default() because these calls do\n-                            // explicitly name the type.\n-                            if let ExprKind::Call(ref method, ref _args) = expr.kind;\n-                            if let ExprKind::Path(ref p) = method.kind;\n-                            if let QPath::Resolved(Some(_ty), _path) = p;\n-                            then {\n-                                return;\n-                            }\n-                        }\n-\n-                        // TODO: Work out a way to put \"whatever the imported way of referencing\n-                        // this type in this file\" rather than a fully-qualified type.\n-                        let expr_ty = cx.typeck_results().expr_ty(expr);\n-                        if let ty::Adt(def, ..) = expr_ty.kind {\n-                            let replacement = format!(\"{}::default()\", cx.tcx.def_path_str(def.did));\n-                            span_lint_and_sugg(\n-                                cx,\n-                                DEFAULT_TRAIT_ACCESS,\n-                                expr.span,\n-                                &format!(\"calling `{}` is more clear than this expression\", replacement),\n-                                \"try\",\n-                                replacement,\n-                                Applicability::Unspecified, // First resolve the TODO above\n-                            );\n-                         }\n-                    },\n-                    QPath::TypeRelative(..) | QPath::LangItem(..) => {},\n+                let expr_ty = cx.typeck_results().expr_ty(expr);\n+                if let ty::Adt(def, ..) = expr_ty.kind {\n+                    // TODO: Work out a way to put \"whatever the imported way of referencing\n+                    // this type in this file\" rather than a fully-qualified type.\n+                    let replacement = format!(\"{}::default()\", cx.tcx.def_path_str(def.did));\n+                    span_lint_and_sugg(\n+                        cx,\n+                        DEFAULT_TRAIT_ACCESS,\n+                        expr.span,\n+                        &format!(\"calling `{}` is more clear than this expression\", replacement),\n+                        \"try\",\n+                        replacement,\n+                        Applicability::Unspecified, // First resolve the TODO above\n+                    );\n                 }\n             }\n         }"}]}