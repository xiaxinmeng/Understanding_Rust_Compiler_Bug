{"sha": "302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd", "node_id": "C_kwDOAAsO6NoAKDMwMmJmMzE4MjZjZGJiYmU5YThlZDllMGM0YzcxNDlkOTAxMGJmZGQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-10T08:13:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-10T08:13:41Z"}, "message": "Rollup merge of #102794 - dtolnay:termination, r=thomcc\n\nMake tests capture the error printed by a Result return\n\nAn error returned by tests previously would get written directly to stderr, instead of to the capture buffer set up by the test harness. This PR makes it write to the capture buffer so that it can be integrated as part of the test output by build tools such as `buck test`, since being able to read the error message returned by a test is pretty critical to debugging why the test failed.\n\n<br>\n\n**Before:**\n\n```rust\n// tests/test.rs\n\n#[test]\nfn test() -> Result<(), &'static str> {\n    println!(\"STDOUT\");\n    eprintln!(\"STDERR\");\n    Err(\"RESULT\")\n}\n```\n\n```console\n$ cargo build --test test\n$ target/debug/deps/test-???????????????? -Z unstable-options --format=json\n{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": 1 }\n{ \"type\": \"test\", \"event\": \"started\", \"name\": \"test\" }\nError: \"RESULT\"\n{ \"type\": \"test\", \"name\": \"test\", \"event\": \"failed\", \"stdout\": \"STDOUT\\nSTDERR\\n\" }\n{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 0, \"failed\": 1, \"ignored\": 0, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": 0.00040313 }\n```\n\n**After:**\n\n```console\n$ target/debug/deps/test-???????????????? -Z unstable-options --format=json\n{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": 1 }\n{ \"type\": \"test\", \"event\": \"started\", \"name\": \"test\" }\n{ \"type\": \"test\", \"name\": \"test\", \"event\": \"failed\", \"stdout\": \"STDOUT\\nSTDERR\\nError: \\\"RESULT\\\"\" }\n{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 0, \"failed\": 1, \"ignored\": 0, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": 0.000261894 }\n```", "tree": {"sha": "990e2de1a6a4f332c0197341b7e734e0f583b865", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/990e2de1a6a4f332c0197341b7e734e0f583b865"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQ9Q1CRBK7hj4Ov3rIwAAVyEIAGFTQj+JBqgFAlW0P/y9+VAI\nHvz9BC8Lhr/I1LR9IhhA65HkoQbaEcm/C3QCp0Ldsd5YGJGQ8M3/Q/YsTe+jFzjF\noWHGwk8fqQ6KhpKqBRWaHvErzbIdvtF3kJewXy7paCvKmB6yDHMmXn4OAgBwMEbs\nUZ8CkQLY3e+7HVtRSyAabQgJgXNEuXPP0CHEbGP1nMiS1HGYLWZx76/nVH4UBY0k\nx+HrEnqoxuA7LLTuqBzMS5rh4xQ/lcHXZThygnofR6CMjzoNw5hSlnYiFmjpdnH+\nIj39F3PHmnZA3dJ0aL5Vhj3AS/18baLC5g6Bbq00JlMJBAO7OilL8L23Wl9fmyQ=\n=RuWf\n-----END PGP SIGNATURE-----\n", "payload": "tree 990e2de1a6a4f332c0197341b7e734e0f583b865\nparent 58d533dfc12f9ecd2bf1afa2837b6221a8ddbfdf\nparent 293f662ca94d6f1eac749da55f5ff924c87fd1d5\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665389621 +0530\ncommitter GitHub <noreply@github.com> 1665389621 +0530\n\nRollup merge of #102794 - dtolnay:termination, r=thomcc\n\nMake tests capture the error printed by a Result return\n\nAn error returned by tests previously would get written directly to stderr, instead of to the capture buffer set up by the test harness. This PR makes it write to the capture buffer so that it can be integrated as part of the test output by build tools such as `buck test`, since being able to read the error message returned by a test is pretty critical to debugging why the test failed.\n\n<br>\n\n**Before:**\n\n```rust\n// tests/test.rs\n\n#[test]\nfn test() -> Result<(), &'static str> {\n    println!(\"STDOUT\");\n    eprintln!(\"STDERR\");\n    Err(\"RESULT\")\n}\n```\n\n```console\n$ cargo build --test test\n$ target/debug/deps/test-???????????????? -Z unstable-options --format=json\n{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": 1 }\n{ \"type\": \"test\", \"event\": \"started\", \"name\": \"test\" }\nError: \"RESULT\"\n{ \"type\": \"test\", \"name\": \"test\", \"event\": \"failed\", \"stdout\": \"STDOUT\\nSTDERR\\n\" }\n{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 0, \"failed\": 1, \"ignored\": 0, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": 0.00040313 }\n```\n\n**After:**\n\n```console\n$ target/debug/deps/test-???????????????? -Z unstable-options --format=json\n{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": 1 }\n{ \"type\": \"test\", \"event\": \"started\", \"name\": \"test\" }\n{ \"type\": \"test\", \"name\": \"test\", \"event\": \"failed\", \"stdout\": \"STDOUT\\nSTDERR\\nError: \\\"RESULT\\\"\" }\n{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 0, \"failed\": 1, \"ignored\": 0, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": 0.000261894 }\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd", "html_url": "https://github.com/rust-lang/rust/commit/302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58d533dfc12f9ecd2bf1afa2837b6221a8ddbfdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/58d533dfc12f9ecd2bf1afa2837b6221a8ddbfdf", "html_url": "https://github.com/rust-lang/rust/commit/58d533dfc12f9ecd2bf1afa2837b6221a8ddbfdf"}, {"sha": "293f662ca94d6f1eac749da55f5ff924c87fd1d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/293f662ca94d6f1eac749da55f5ff924c87fd1d5", "html_url": "https://github.com/rust-lang/rust/commit/293f662ca94d6f1eac749da55f5ff924c87fd1d5"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "cceef539b90c7bca0241e9c0861d38e3eda0f00e", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd", "patch": "@@ -262,6 +262,7 @@ use crate::sys_common::memchr;\n \n #[stable(feature = \"bufwriter_into_parts\", since = \"1.56.0\")]\n pub use self::buffered::WriterPanicked;\n+pub(crate) use self::stdio::attempt_print_to_stderr;\n #[unstable(feature = \"internal_output_capture\", issue = \"none\")]\n #[doc(no_inline, hidden)]\n pub use self::stdio::set_output_capture;"}, {"sha": "4ccb2bf3231f53a92bdfc70cd89c5c7ff291204c", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd", "patch": "@@ -999,7 +999,18 @@ fn print_to<T>(args: fmt::Arguments<'_>, global_s: fn() -> T, label: &str)\n where\n     T: Write,\n {\n-    if OUTPUT_CAPTURE_USED.load(Ordering::Relaxed)\n+    if print_to_buffer_if_capture_used(args) {\n+        // Successfully wrote to capture buffer.\n+        return;\n+    }\n+\n+    if let Err(e) = global_s().write_fmt(args) {\n+        panic!(\"failed printing to {label}: {e}\");\n+    }\n+}\n+\n+fn print_to_buffer_if_capture_used(args: fmt::Arguments<'_>) -> bool {\n+    OUTPUT_CAPTURE_USED.load(Ordering::Relaxed)\n         && OUTPUT_CAPTURE.try_with(|s| {\n             // Note that we completely remove a local sink to write to in case\n             // our printing recursively panics/prints, so the recursive\n@@ -1009,14 +1020,19 @@ where\n                 s.set(Some(w));\n             })\n         }) == Ok(Some(()))\n-    {\n-        // Successfully wrote to capture buffer.\n+}\n+\n+/// Used by impl Termination for Result to print error after `main` or a test\n+/// has returned. Should avoid panicking, although we can't help it if one of\n+/// the Display impls inside args decides to.\n+pub(crate) fn attempt_print_to_stderr(args: fmt::Arguments<'_>) {\n+    if print_to_buffer_if_capture_used(args) {\n         return;\n     }\n \n-    if let Err(e) = global_s().write_fmt(args) {\n-        panic!(\"failed printing to {label}: {e}\");\n-    }\n+    // Ignore error if the write fails, for example because stderr is already\n+    // closed. There is not much point panicking at this point.\n+    let _ = stderr().write_fmt(args);\n }\n \n #[unstable("}, {"sha": "e08ea8f9a5fc9fde9d422d35fede1608e94fea3b", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=302bf31826cdbbbe9a8ed9e0c4c7149d9010bfdd", "patch": "@@ -2200,9 +2200,7 @@ impl<T: Termination, E: fmt::Debug> Termination for Result<T, E> {\n         match self {\n             Ok(val) => val.report(),\n             Err(err) => {\n-                // Ignore error if the write fails, for example because stderr is\n-                // already closed. There is not much point panicking at this point.\n-                let _ = writeln!(io::stderr(), \"Error: {err:?}\");\n+                io::attempt_print_to_stderr(format_args_nl!(\"Error: {err:?}\"));\n                 ExitCode::FAILURE\n             }\n         }"}]}