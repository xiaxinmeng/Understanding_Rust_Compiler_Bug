{"sha": "fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNjBhY2U3YTllYzZmZWVkNzljZjUyY2MyNDVmNGQ3YzA0OGZjOGI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-01-09T20:56:38Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-01-10T02:59:07Z"}, "message": "port over the old tests to the new `Rc`", "tree": {"sha": "e7de14e8284cc6ca97e837c6ed1d479247f8786a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7de14e8284cc6ca97e837c6ed1d479247f8786a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b", "html_url": "https://github.com/rust-lang/rust/commit/fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5bcb22719a8af3075fdd204003a748022022479", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5bcb22719a8af3075fdd204003a748022022479", "html_url": "https://github.com/rust-lang/rust/commit/c5bcb22719a8af3075fdd204003a748022022479"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "3d6e81d0d6fd5f1104742caa2fffcaf8e94fa8b1", "filename": "src/librustuv/idle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b/src%2Flibrustuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b/src%2Flibrustuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fidle.rs?ref=fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b", "patch": "@@ -127,7 +127,7 @@ mod test {\n     }\n \n     fn mk(v: uint) -> (~IdleWatcher, Chan) {\n-        let rc = Rc::from_send(RefCell::new((None, 0)));\n+        let rc = Rc::new(RefCell::new((None, 0)));\n         let cb = ~MyCallback(rc.clone(), v);\n         let cb = cb as ~Callback:;\n         let cb = unsafe { cast::transmute(cb) };"}, {"sha": "7ce9873c2da418a9c10d1c1e9e2085fcd1b1dc0d", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b", "patch": "@@ -509,7 +509,7 @@ mod tests {\n             }\n         }\n \n-        let i = Rc::from_send(RefCell::new(0));\n+        let i = Rc::new(RefCell::new(0));\n         {\n             let x = R(i.clone());\n             let opt = Some(x);"}, {"sha": "9947d8822ae65a67427ae3301dbacdb3a9ccd071", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=fc60ace7a9ec6feed79cf52cc245f4d7c048fc8b", "patch": "@@ -172,8 +172,49 @@ impl<T> Clone for Weak<T> {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n-    use prelude::drop;\n+    use cell::RefCell;\n+\n+    #[test]\n+    fn test_clone() {\n+        let x = Rc::new(RefCell::new(5));\n+        let y = x.clone();\n+        x.borrow().with_mut(|inner| {\n+            *inner = 20;\n+        });\n+        assert_eq!(y.borrow().with(|v| *v), 20);\n+    }\n+\n+    #[test]\n+    fn test_deep_clone() {\n+        let x = Rc::new(RefCell::new(5));\n+        let y = x.deep_clone();\n+        x.borrow().with_mut(|inner| {\n+            *inner = 20;\n+        });\n+        assert_eq!(y.borrow().with(|v| *v), 5);\n+    }\n+\n+    #[test]\n+    fn test_simple() {\n+        let x = Rc::new(5);\n+        assert_eq!(*x.borrow(), 5);\n+    }\n+\n+    #[test]\n+    fn test_simple_clone() {\n+        let x = Rc::new(5);\n+        let y = x.clone();\n+        assert_eq!(*x.borrow(), 5);\n+        assert_eq!(*y.borrow(), 5);\n+    }\n+\n+    #[test]\n+    fn test_destructor() {\n+        let x = Rc::new(~5);\n+        assert_eq!(**x.borrow(), 5);\n+    }\n \n     #[test]\n     fn test_live() {"}]}