{"sha": "db5ffdedf7ed64bde30a55e14e67efbb0f6ea538", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNWZmZGVkZjdlZDY0YmRlMzBhNTVlMTRlNjdlZmJiMGY2ZWE1Mzg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-17T17:52:47Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-23T15:32:32Z"}, "message": "Implement bswap intrinsic", "tree": {"sha": "f296babefb9fe51d098a77ddfa4a4765f33ca800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f296babefb9fe51d098a77ddfa4a4765f33ca800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db5ffdedf7ed64bde30a55e14e67efbb0f6ea538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db5ffdedf7ed64bde30a55e14e67efbb0f6ea538", "html_url": "https://github.com/rust-lang/rust/commit/db5ffdedf7ed64bde30a55e14e67efbb0f6ea538", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db5ffdedf7ed64bde30a55e14e67efbb0f6ea538/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d425116bdc764bdd46bf482c91aeef38fe4480e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d425116bdc764bdd46bf482c91aeef38fe4480e7", "html_url": "https://github.com/rust-lang/rust/commit/d425116bdc764bdd46bf482c91aeef38fe4480e7"}], "stats": {"total": 114, "additions": 89, "deletions": 25}, "files": [{"sha": "56ab9578e78720987cd8985d35969db1fac67a63", "filename": "example/mini_core.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db5ffdedf7ed64bde30a55e14e67efbb0f6ea538/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5ffdedf7ed64bde30a55e14e67efbb0f6ea538/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=db5ffdedf7ed64bde30a55e14e67efbb0f6ea538", "patch": "@@ -208,6 +208,16 @@ impl PartialEq for u32 {\n     }\n }\n \n+\n+impl PartialEq for u64 {\n+    fn eq(&self, other: &u64) -> bool {\n+        (*self) == (*other)\n+    }\n+    fn ne(&self, other: &u64) -> bool {\n+        (*self) != (*other)\n+    }\n+}\n+\n impl PartialEq for usize {\n     fn eq(&self, other: &usize) -> bool {\n         (*self) == (*other)\n@@ -375,6 +385,7 @@ pub mod intrinsics {\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n         pub fn needs_drop<T>() -> bool;\n         pub fn bitreverse<T>(x: T) -> T;\n+        pub fn bswap<T>(x: T) -> T;\n     }\n }\n "}, {"sha": "f9e820da76c128b1d6a48ca05a211b26299c6df6", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db5ffdedf7ed64bde30a55e14e67efbb0f6ea538/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5ffdedf7ed64bde30a55e14e67efbb0f6ea538/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=db5ffdedf7ed64bde30a55e14e67efbb0f6ea538", "patch": "@@ -139,6 +139,11 @@ fn main() {\n \n         assert_eq!(intrinsics::bitreverse(0b10101000u8), 0b00010101u8);\n \n+        assert_eq!(intrinsics::bswap(0xabu8), 0xabu8);\n+        assert_eq!(intrinsics::bswap(0xddccu16), 0xccddu16);\n+        assert_eq!(intrinsics::bswap(0xffee_ddccu32), 0xccdd_eeffu32);\n+        assert_eq!(intrinsics::bswap(0x1234_5678_ffee_ddccu64), 0xccdd_eeff_7856_3412u64);\n+\n         assert_eq!(intrinsics::size_of_val(hello) as u8, 6);\n \n         let chars = &['C', 'h', 'a', 'r', 's'];"}, {"sha": "e29042c729705719727e3292861eff096e300f82", "filename": "patches/0013-Patch-away-bswap-usage.patch", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d425116bdc764bdd46bf482c91aeef38fe4480e7/patches%2F0013-Patch-away-bswap-usage.patch", "raw_url": "https://github.com/rust-lang/rust/raw/d425116bdc764bdd46bf482c91aeef38fe4480e7/patches%2F0013-Patch-away-bswap-usage.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0013-Patch-away-bswap-usage.patch?ref=d425116bdc764bdd46bf482c91aeef38fe4480e7", "patch": "@@ -1,25 +0,0 @@\n-From da996dae0b95f986de46a916aca00e03257ba4f9 Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Wed, 30 Jan 2019 14:51:57 +0100\n-Subject: [PATCH] Patch away bswap usage\n-\n----\n- src/libcore/num/mod.rs | 2 +-\n- 1 file changed, 1 insertion(+), 1 deletion(-)\n-\n-diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index f928d40..6a146f5 100644\n---- a/src/libcore/num/mod.rs\n-+++ b/src/libcore/num/mod.rs\n-@@ -2303,7 +2303,7 @@ assert_eq!(m, \", $swapped, \");\n-             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-             #[inline]\n-             pub const fn swap_bytes(self) -> Self {\n--                intrinsics::bswap(self as $ActualT) as Self\n-+                42 // bswap is unsupported by cg_clif\n-             }\n-         }\n- \n--- \n-2.11.0\n-"}, {"sha": "4f455454a2fd19f8bfc1bb20f881092437f069ae", "filename": "src/intrinsics.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/db5ffdedf7ed64bde30a55e14e67efbb0f6ea538/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5ffdedf7ed64bde30a55e14e67efbb0f6ea538/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=db5ffdedf7ed64bde30a55e14e67efbb0f6ea538", "patch": "@@ -415,6 +415,79 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let res = CValue::by_val(fx.bcx.ins().bitrev(arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n+        bswap, <T> (v arg) {\n+            // FIXME(CraneStation/cranelift#794) add bswap instruction to cranelift\n+            fn swap(bcx: &mut FunctionBuilder, v: Value) -> Value {\n+                match bcx.func.dfg.value_type(v) {\n+                    types::I8 => v,\n+\n+                    // https://code.woboq.org/gcc/include/bits/byteswap.h.html\n+                    types::I16 => {\n+                        let tmp1 = bcx.ins().ishl_imm(v, 8);\n+                        let n1 = bcx.ins().band_imm(tmp1, 0xFF00);\n+\n+                        let tmp2 = bcx.ins().ushr_imm(v, 8);\n+                        let n2 = bcx.ins().band_imm(tmp2, 0x00FF);\n+\n+                        bcx.ins().bor(n1, n2)\n+                    }\n+                    types::I32 => {\n+                        let tmp1 = bcx.ins().ishl_imm(v, 24);\n+                        let n1 = bcx.ins().band_imm(tmp1, 0xFF00_0000);\n+\n+                        let tmp2 = bcx.ins().ishl_imm(v, 8);\n+                        let n2 = bcx.ins().band_imm(tmp2, 0x00FF_0000);\n+\n+                        let tmp3 = bcx.ins().ushr_imm(v, 8);\n+                        let n3 = bcx.ins().band_imm(tmp3, 0x0000_FF00);\n+\n+                        let tmp4 = bcx.ins().ushr_imm(v, 24);\n+                        let n4 = bcx.ins().band_imm(tmp4, 0x0000_00FF);\n+\n+                        let or_tmp1 = bcx.ins().bor(n1, n2);\n+                        let or_tmp2 = bcx.ins().bor(n3, n4);\n+                        bcx.ins().bor(or_tmp1, or_tmp2)\n+                    }\n+                    types::I64 => {\n+                        let tmp1 = bcx.ins().ishl_imm(v, 56);\n+                        let n1 = bcx.ins().band_imm(tmp1, 0xFF00_0000_0000_0000u64 as i64);\n+\n+                        let tmp2 = bcx.ins().ishl_imm(v, 40);\n+                        let n2 = bcx.ins().band_imm(tmp2, 0x00FF_0000_0000_0000u64 as i64);\n+\n+                        let tmp3 = bcx.ins().ishl_imm(v, 24);\n+                        let n3 = bcx.ins().band_imm(tmp3, 0x0000_FF00_0000_0000u64 as i64);\n+\n+                        let tmp4 = bcx.ins().ishl_imm(v, 8);\n+                        let n4 = bcx.ins().band_imm(tmp4, 0x0000_00FF_0000_0000u64 as i64);\n+\n+                        let tmp5 = bcx.ins().ushr_imm(v, 8);\n+                        let n5 = bcx.ins().band_imm(tmp5, 0x0000_0000_FF00_0000u64 as i64);\n+\n+                        let tmp6 = bcx.ins().ushr_imm(v, 24);\n+                        let n6 = bcx.ins().band_imm(tmp6, 0x0000_0000_00FF_0000u64 as i64);\n+\n+                        let tmp7 = bcx.ins().ushr_imm(v, 40);\n+                        let n7 = bcx.ins().band_imm(tmp7, 0x0000_0000_0000_FF00u64 as i64);\n+\n+                        let tmp8 = bcx.ins().ushr_imm(v, 56);\n+                        let n8 = bcx.ins().band_imm(tmp8, 0x0000_0000_0000_00FFu64 as i64);\n+\n+                        let or_tmp1 = bcx.ins().bor(n1, n2);\n+                        let or_tmp2 = bcx.ins().bor(n3, n4);\n+                        let or_tmp3 = bcx.ins().bor(n5, n6);\n+                        let or_tmp4 = bcx.ins().bor(n7, n8);\n+\n+                        let or_tmp5 = bcx.ins().bor(or_tmp1, or_tmp2);\n+                        let or_tmp6 = bcx.ins().bor(or_tmp3, or_tmp4);\n+                        bcx.ins().bor(or_tmp5, or_tmp6)\n+                    }\n+                    ty => unimplemented!(\"bwap {}\", ty),\n+                }\n+            };\n+            let res = CValue::by_val(swap(&mut fx.bcx, arg), fx.layout_of(T));\n+            ret.write_cvalue(fx, res);\n+        };\n         needs_drop, <T> () {\n             let needs_drop = if T.needs_drop(fx.tcx, ParamEnv::reveal_all()) {\n                 1"}]}