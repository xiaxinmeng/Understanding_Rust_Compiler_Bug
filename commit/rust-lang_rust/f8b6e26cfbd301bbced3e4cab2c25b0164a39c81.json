{"sha": "f8b6e26cfbd301bbced3e4cab2c25b0164a39c81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YjZlMjZjZmJkMzAxYmJjZWQzZTRjYWIyYzI1YjAxNjRhMzljODE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-09-17T21:10:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-17T21:10:55Z"}, "message": "Rollup merge of #64541 - RalfJung:miri-errors, r=oli-obk\n\ndocument Miri error categories\n\nr? @oli-obk", "tree": {"sha": "05f1d6f3cf979f4a65776806de02cb7772da726e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f1d6f3cf979f4a65776806de02cb7772da726e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8b6e26cfbd301bbced3e4cab2c25b0164a39c81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdgUvfCRBK7hj4Ov3rIwAAdHIIAFU6jg+XQOFDmnowPUZ1NFct\nlfrcG+i8u+20H7jMh3SO3iW8edxlWQxYSaI3oJfCAYSnRPDVwknZS0GytMh27oLg\nU0ou/b++UhR8XUMmA/NM1qVYJm6xGyqBQ6iGPqlEWEUiB7mpM43TM34tXT274FGI\n5ffrg+PtPbRDquX4Cx+BynZSEc1Xkk6jCnly2wGZSuoVorXJW2vtBeuHFJCh/L20\nUYiX00itXkakxv9MXIwLaJlwiw3wtYpPa8ALmtq/0hD4eQr8iWH5xmzghv0tBc8u\nkNclA3AHOdoGyjmOgIso3cbCemupaJqRwCOlA0xK2MqQcpk9cPTLUmLoxIwS3Ww=\n=hgZo\n-----END PGP SIGNATURE-----\n", "payload": "tree 05f1d6f3cf979f4a65776806de02cb7772da726e\nparent d782f09ae0b88a73a69e2fa3169222cdbc47d4ec\nparent daafeb35b731a599fc8b6c4cf37b81f838dae319\nauthor Tyler Mandry <tmandry@gmail.com> 1568754655 -0700\ncommitter GitHub <noreply@github.com> 1568754655 -0700\n\nRollup merge of #64541 - RalfJung:miri-errors, r=oli-obk\n\ndocument Miri error categories\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b6e26cfbd301bbced3e4cab2c25b0164a39c81", "html_url": "https://github.com/rust-lang/rust/commit/f8b6e26cfbd301bbced3e4cab2c25b0164a39c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8b6e26cfbd301bbced3e4cab2c25b0164a39c81/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d782f09ae0b88a73a69e2fa3169222cdbc47d4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/d782f09ae0b88a73a69e2fa3169222cdbc47d4ec", "html_url": "https://github.com/rust-lang/rust/commit/d782f09ae0b88a73a69e2fa3169222cdbc47d4ec"}, {"sha": "daafeb35b731a599fc8b6c4cf37b81f838dae319", "url": "https://api.github.com/repos/rust-lang/rust/commits/daafeb35b731a599fc8b6c4cf37b81f838dae319", "html_url": "https://github.com/rust-lang/rust/commit/daafeb35b731a599fc8b6c4cf37b81f838dae319"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "ac99ccd45eafe4e8b0c578a5d1c63d174e0bc3cf", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8b6e26cfbd301bbced3e4cab2c25b0164a39c81/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b6e26cfbd301bbced3e4cab2c25b0164a39c81/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=f8b6e26cfbd301bbced3e4cab2c25b0164a39c81", "patch": "@@ -322,6 +322,9 @@ impl<O: fmt::Debug> fmt::Debug for PanicInfo<O> {\n     }\n }\n \n+/// Error information for when the program we executed turned out not to actually be a valid\n+/// program. This cannot happen in stand-alone Miri, but it can happen during CTFE/ConstProp\n+/// where we work on generic code or execution does not have all information available.\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum InvalidProgramInfo<'tcx> {\n     /// Resolution can fail if we are in a too generic context.\n@@ -351,6 +354,7 @@ impl fmt::Debug for InvalidProgramInfo<'tcx> {\n     }\n }\n \n+/// Error information for when the program caused Undefined Behavior.\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum UndefinedBehaviorInfo {\n     /// Free-form case. Only for errors that are never caught!\n@@ -373,12 +377,19 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n     }\n }\n \n+/// Error information for when the program did something that might (or might not) be correct\n+/// to do according to the Rust spec, but due to limitations in the interpreter, the\n+/// operation could not be carried out. These limitations can differ between CTFE and the\n+/// Miri engine, e.g., CTFE does not support casting pointers to \"real\" integers.\n+///\n+/// Currently, we also use this as fall-back error kind for errors that have not been\n+/// categorized yet.\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum UnsupportedOpInfo<'tcx> {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n \n-    // -- Everything below is not classified yet --\n+    // -- Everything below is not categorized yet --\n     FunctionAbiMismatch(Abi, Abi),\n     FunctionArgMismatch(Ty<'tcx>, Ty<'tcx>),\n     FunctionRetMismatch(Ty<'tcx>, Ty<'tcx>),\n@@ -545,6 +556,8 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n     }\n }\n \n+/// Error information for when the program exhausted the resources granted to it\n+/// by the interpreter.\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum ResourceExhaustionInfo {\n     /// The stack grew too big."}]}