{"sha": "abace0a1f17986d89aedf610819deab2b4afee56", "node_id": "C_kwDOAAsO6NoAKGFiYWNlMGExZjE3OTg2ZDg5YWVkZjYxMDgxOWRlYWIyYjRhZmVlNTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-21T07:40:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-21T07:40:32Z"}, "message": "Auto merge of #97657 - Urgau:check-cfg-many-mut, r=oli-obk\n\nUse get_many_mut to reduce the cost of setting up check cfg values\n\nThis PR use the newly added [`get_many_mut`](https://github.com/rust-lang/rust/issues/97601) function in [`HashMap`](https://doc.rust-lang.org/nightly/std/collections/hash_map/struct.HashMap.html#method.get_many_mut) to reduce the cost of setting up the initial check cfg values.\n\ncc `@petrochenkov`", "tree": {"sha": "9a29ca75f3ffb88af44d471fc6f7d22f6aed0c25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a29ca75f3ffb88af44d471fc6f7d22f6aed0c25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abace0a1f17986d89aedf610819deab2b4afee56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abace0a1f17986d89aedf610819deab2b4afee56", "html_url": "https://github.com/rust-lang/rust/commit/abace0a1f17986d89aedf610819deab2b4afee56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abace0a1f17986d89aedf610819deab2b4afee56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42dcf70f99c21c6d59ad036e33e846769b369fff", "url": "https://api.github.com/repos/rust-lang/rust/commits/42dcf70f99c21c6d59ad036e33e846769b369fff", "html_url": "https://github.com/rust-lang/rust/commit/42dcf70f99c21c6d59ad036e33e846769b369fff"}, {"sha": "5f042811a2654b4d9dad46b4e1aadb126305205a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f042811a2654b4d9dad46b4e1aadb126305205a", "html_url": "https://github.com/rust-lang/rust/commit/5f042811a2654b4d9dad46b4e1aadb126305205a"}], "stats": {"total": 124, "additions": 90, "deletions": 34}, "files": [{"sha": "14ad1a42a7d83804fb1d158628640fb6f0783267", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 89, "deletions": 34, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/abace0a1f17986d89aedf610819deab2b4afee56/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abace0a1f17986d89aedf610819deab2b4afee56/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=abace0a1f17986d89aedf610819deab2b4afee56", "patch": "@@ -1102,41 +1102,96 @@ impl CrateCheckConfig {\n             .extend(atomic_values);\n \n         // Target specific values\n-        for target in\n-            TARGETS.iter().map(|target| Target::expect_builtin(&TargetTriple::from_triple(target)))\n+        #[cfg(bootstrap)]\n         {\n-            self.values_valid\n-                .entry(sym::target_os)\n-                .or_default()\n-                .insert(Symbol::intern(&target.options.os));\n-            self.values_valid\n-                .entry(sym::target_family)\n-                .or_default()\n-                .extend(target.options.families.iter().map(|family| Symbol::intern(family)));\n-            self.values_valid\n-                .entry(sym::target_arch)\n-                .or_default()\n-                .insert(Symbol::intern(&target.arch));\n-            self.values_valid\n-                .entry(sym::target_endian)\n-                .or_default()\n-                .insert(Symbol::intern(&target.options.endian.as_str()));\n-            self.values_valid\n-                .entry(sym::target_env)\n-                .or_default()\n-                .insert(Symbol::intern(&target.options.env));\n-            self.values_valid\n-                .entry(sym::target_abi)\n-                .or_default()\n-                .insert(Symbol::intern(&target.options.abi));\n-            self.values_valid\n-                .entry(sym::target_vendor)\n-                .or_default()\n-                .insert(Symbol::intern(&target.options.vendor));\n-            self.values_valid\n-                .entry(sym::target_pointer_width)\n-                .or_default()\n-                .insert(sym::integer(target.pointer_width));\n+            for target in TARGETS\n+                .iter()\n+                .map(|target| Target::expect_builtin(&TargetTriple::from_triple(target)))\n+            {\n+                self.values_valid\n+                    .entry(sym::target_os)\n+                    .or_default()\n+                    .insert(Symbol::intern(&target.options.os));\n+                self.values_valid\n+                    .entry(sym::target_family)\n+                    .or_default()\n+                    .extend(target.options.families.iter().map(|family| Symbol::intern(family)));\n+                self.values_valid\n+                    .entry(sym::target_arch)\n+                    .or_default()\n+                    .insert(Symbol::intern(&target.arch));\n+                self.values_valid\n+                    .entry(sym::target_endian)\n+                    .or_default()\n+                    .insert(Symbol::intern(&target.options.endian.as_str()));\n+                self.values_valid\n+                    .entry(sym::target_env)\n+                    .or_default()\n+                    .insert(Symbol::intern(&target.options.env));\n+                self.values_valid\n+                    .entry(sym::target_abi)\n+                    .or_default()\n+                    .insert(Symbol::intern(&target.options.abi));\n+                self.values_valid\n+                    .entry(sym::target_vendor)\n+                    .or_default()\n+                    .insert(Symbol::intern(&target.options.vendor));\n+                self.values_valid\n+                    .entry(sym::target_pointer_width)\n+                    .or_default()\n+                    .insert(sym::integer(target.pointer_width));\n+            }\n+        }\n+\n+        // Target specific values\n+        #[cfg(not(bootstrap))]\n+        {\n+            const VALUES: [&Symbol; 8] = [\n+                &sym::target_os,\n+                &sym::target_family,\n+                &sym::target_arch,\n+                &sym::target_endian,\n+                &sym::target_env,\n+                &sym::target_abi,\n+                &sym::target_vendor,\n+                &sym::target_pointer_width,\n+            ];\n+\n+            // Initialize (if not already initialized)\n+            for &e in VALUES {\n+                self.values_valid.entry(e).or_default();\n+            }\n+\n+            // Get all values map at once otherwise it would be costly.\n+            // (8 values * 220 targets ~= 1760 times, at the time of writing this comment).\n+            let [\n+                values_target_os,\n+                values_target_family,\n+                values_target_arch,\n+                values_target_endian,\n+                values_target_env,\n+                values_target_abi,\n+                values_target_vendor,\n+                values_target_pointer_width,\n+            ] = self\n+                .values_valid\n+                .get_many_mut(VALUES)\n+                .expect(\"unable to get all the check-cfg values buckets\");\n+\n+            for target in TARGETS\n+                .iter()\n+                .map(|target| Target::expect_builtin(&TargetTriple::from_triple(target)))\n+            {\n+                values_target_os.insert(Symbol::intern(&target.options.os));\n+                values_target_family\n+                    .extend(target.options.families.iter().map(|family| Symbol::intern(family)));\n+                values_target_arch.insert(Symbol::intern(&target.arch));\n+                values_target_endian.insert(Symbol::intern(&target.options.endian.as_str()));\n+                values_target_env.insert(Symbol::intern(&target.options.env));\n+                values_target_abi.insert(Symbol::intern(&target.options.abi));\n+                values_target_vendor.insert(Symbol::intern(&target.options.vendor));\n+                values_target_pointer_width.insert(sym::integer(target.pointer_width));\n+            }\n         }\n     }\n "}, {"sha": "35b55981e37eac6bdf0c3cb5408a8e2d46277626", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abace0a1f17986d89aedf610819deab2b4afee56/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abace0a1f17986d89aedf610819deab2b4afee56/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=abace0a1f17986d89aedf610819deab2b4afee56", "patch": "@@ -6,6 +6,7 @@\n #![feature(once_cell)]\n #![feature(option_get_or_insert_default)]\n #![feature(rustc_attrs)]\n+#![cfg_attr(not(bootstrap), feature(map_many_mut))]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}]}