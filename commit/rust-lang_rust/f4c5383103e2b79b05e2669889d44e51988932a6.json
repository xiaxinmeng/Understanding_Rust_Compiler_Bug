{"sha": "f4c5383103e2b79b05e2669889d44e51988932a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YzUzODMxMDNlMmI3OWIwNWUyNjY5ODg5ZDQ0ZTUxOTg4OTMyYTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-02T13:18:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-02T13:18:40Z"}, "message": "dont store body inside source map", "tree": {"sha": "ff26374ccd6e2dfdfe4491820651614da2d366a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff26374ccd6e2dfdfe4491820651614da2d366a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4c5383103e2b79b05e2669889d44e51988932a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c5383103e2b79b05e2669889d44e51988932a6", "html_url": "https://github.com/rust-lang/rust/commit/f4c5383103e2b79b05e2669889d44e51988932a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4c5383103e2b79b05e2669889d44e51988932a6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf1df26e9903772d40df30dd70c75c38d8cb887", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf1df26e9903772d40df30dd70c75c38d8cb887", "html_url": "https://github.com/rust-lang/rust/commit/eaf1df26e9903772d40df30dd70c75c38d8cb887"}], "stats": {"total": 115, "additions": 54, "deletions": 61}, "files": [{"sha": "c77b8acc7bf8dafdd16f8d4cc805d000d32e2963", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4c5383103e2b79b05e2669889d44e51988932a6/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c5383103e2b79b05e2669889d44e51988932a6/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=f4c5383103e2b79b05e2669889d44e51988932a6", "patch": "@@ -484,7 +484,7 @@ impl Function {\n     }\n \n     pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_source_map(*self)\n+        db.body_with_source_map(*self).1\n     }\n \n     pub fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n@@ -497,7 +497,7 @@ impl Function {\n \n     pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSyntaxMapping {\n         let scopes = db.expr_scopes(*self);\n-        let syntax_mapping = db.body_source_map(*self);\n+        let syntax_mapping = db.body_with_source_map(*self).1;\n         ScopesWithSyntaxMapping { scopes, syntax_mapping }\n     }\n "}, {"sha": "a669dc9b0e1451ba3da5c0c970c14ee59ded8819", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4c5383103e2b79b05e2669889d44e51988932a6/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c5383103e2b79b05e2669889d44e51988932a6/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=f4c5383103e2b79b05e2669889d44e51988932a6", "patch": "@@ -105,11 +105,14 @@ pub trait HirDatabase: PersistentHirDatabase {\n     #[salsa::invoke(crate::ty::type_for_field)]\n     fn type_for_field(&self, field: StructField) -> Ty;\n \n-    #[salsa::invoke(crate::expr::body_hir)]\n-    fn body_hir(&self, func: Function) -> Arc<crate::expr::Body>;\n+    #[salsa::invoke(crate::expr::body_with_source_map_query)]\n+    fn body_with_source_map(\n+        &self,\n+        func: Function,\n+    ) -> (Arc<crate::expr::Body>, Arc<crate::expr::BodySourceMap>);\n \n-    #[salsa::invoke(crate::expr::body_source_map)]\n-    fn body_source_map(&self, func: Function) -> Arc<crate::expr::BodySourceMap>;\n+    #[salsa::invoke(crate::expr::body_hir_query)]\n+    fn body_hir(&self, func: Function) -> Arc<crate::expr::Body>;\n \n     #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;"}, {"sha": "4e399ec6d1bb58615246385202b62104073bb5d3", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 38, "deletions": 48, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/f4c5383103e2b79b05e2669889d44e51988932a6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c5383103e2b79b05e2669889d44e51988932a6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=f4c5383103e2b79b05e2669889d44e51988932a6", "patch": "@@ -48,13 +48,13 @@ pub struct Body {\n /// expression containing it; but for type inference etc., we want to operate on\n /// a structure that is agnostic to the actual positions of expressions in the\n /// file, so that we don't recompute types whenever some whitespace is typed.\n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Default, Debug, Eq, PartialEq)]\n pub struct BodySourceMap {\n-    body: Arc<Body>,\n-    expr_syntax_mapping: FxHashMap<SyntaxNodePtr, ExprId>,\n-    expr_syntax_mapping_back: ArenaMap<ExprId, SyntaxNodePtr>,\n-    pat_syntax_mapping: FxHashMap<SyntaxNodePtr, PatId>,\n-    pat_syntax_mapping_back: ArenaMap<PatId, SyntaxNodePtr>,\n+    // body: Arc<Body>,\n+    expr_map: FxHashMap<SyntaxNodePtr, ExprId>,\n+    expr_map_back: ArenaMap<ExprId, SyntaxNodePtr>,\n+    pat_map: FxHashMap<SyntaxNodePtr, PatId>,\n+    pat_map_back: ArenaMap<PatId, SyntaxNodePtr>,\n }\n \n impl Body {\n@@ -79,7 +79,7 @@ impl Body {\n     }\n \n     pub fn syntax_mapping(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_source_map(self.owner)\n+        db.body_with_source_map(self.owner).1\n     }\n }\n \n@@ -121,31 +121,27 @@ impl Index<PatId> for Body {\n \n impl BodySourceMap {\n     pub fn expr_syntax(&self, expr: ExprId) -> Option<SyntaxNodePtr> {\n-        self.expr_syntax_mapping_back.get(expr).cloned()\n+        self.expr_map_back.get(expr).cloned()\n     }\n \n     pub fn syntax_expr(&self, ptr: SyntaxNodePtr) -> Option<ExprId> {\n-        self.expr_syntax_mapping.get(&ptr).cloned()\n+        self.expr_map.get(&ptr).cloned()\n     }\n \n     pub fn node_expr(&self, node: &ast::Expr) -> Option<ExprId> {\n-        self.expr_syntax_mapping.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n+        self.expr_map.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n     }\n \n     pub fn pat_syntax(&self, pat: PatId) -> Option<SyntaxNodePtr> {\n-        self.pat_syntax_mapping_back.get(pat).cloned()\n+        self.pat_map_back.get(pat).cloned()\n     }\n \n     pub fn syntax_pat(&self, ptr: SyntaxNodePtr) -> Option<PatId> {\n-        self.pat_syntax_mapping.get(&ptr).cloned()\n+        self.pat_map.get(&ptr).cloned()\n     }\n \n     pub fn node_pat(&self, node: &ast::Pat) -> Option<PatId> {\n-        self.pat_syntax_mapping.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n-    }\n-\n-    pub fn body(&self) -> &Arc<Body> {\n-        &self.body\n+        self.pat_map.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n     }\n }\n \n@@ -467,18 +463,11 @@ impl Pat {\n \n // Queries\n \n-pub(crate) fn body_hir(db: &impl HirDatabase, func: Function) -> Arc<Body> {\n-    Arc::clone(&body_source_map(db, func).body)\n-}\n-\n struct ExprCollector {\n     owner: Function,\n     exprs: Arena<ExprId, Expr>,\n     pats: Arena<PatId, Pat>,\n-    expr_syntax_mapping: FxHashMap<SyntaxNodePtr, ExprId>,\n-    expr_syntax_mapping_back: ArenaMap<ExprId, SyntaxNodePtr>,\n-    pat_syntax_mapping: FxHashMap<SyntaxNodePtr, PatId>,\n-    pat_syntax_mapping_back: ArenaMap<PatId, SyntaxNodePtr>,\n+    source_map: BodySourceMap,\n     params: Vec<PatId>,\n     body_expr: Option<ExprId>,\n }\n@@ -489,26 +478,23 @@ impl ExprCollector {\n             owner,\n             exprs: Arena::default(),\n             pats: Arena::default(),\n-            expr_syntax_mapping: FxHashMap::default(),\n-            expr_syntax_mapping_back: ArenaMap::default(),\n-            pat_syntax_mapping: FxHashMap::default(),\n-            pat_syntax_mapping_back: ArenaMap::default(),\n+            source_map: BodySourceMap::default(),\n             params: Vec::new(),\n             body_expr: None,\n         }\n     }\n \n     fn alloc_expr(&mut self, expr: Expr, syntax_ptr: SyntaxNodePtr) -> ExprId {\n         let id = self.exprs.alloc(expr);\n-        self.expr_syntax_mapping.insert(syntax_ptr, id);\n-        self.expr_syntax_mapping_back.insert(id, syntax_ptr);\n+        self.source_map.expr_map.insert(syntax_ptr, id);\n+        self.source_map.expr_map_back.insert(id, syntax_ptr);\n         id\n     }\n \n     fn alloc_pat(&mut self, pat: Pat, syntax_ptr: SyntaxNodePtr) -> PatId {\n         let id = self.pats.alloc(pat);\n-        self.pat_syntax_mapping.insert(syntax_ptr, id);\n-        self.pat_syntax_mapping_back.insert(id, syntax_ptr);\n+        self.source_map.pat_map.insert(syntax_ptr, id);\n+        self.source_map.pat_map_back.insert(id, syntax_ptr);\n         id\n     }\n \n@@ -639,7 +625,7 @@ impl ExprCollector {\n             ast::ExprKind::ParenExpr(e) => {\n                 let inner = self.collect_expr_opt(e.expr());\n                 // make the paren expr point to the inner expression as well\n-                self.expr_syntax_mapping.insert(syntax_ptr, inner);\n+                self.source_map.expr_map.insert(syntax_ptr, inner);\n                 inner\n             }\n             ast::ExprKind::ReturnExpr(e) => {\n@@ -660,9 +646,11 @@ impl ExprCollector {\n                             } else if let Some(nr) = field.name_ref() {\n                                 // field shorthand\n                                 let id = self.exprs.alloc(Expr::Path(Path::from_name_ref(nr)));\n-                                self.expr_syntax_mapping\n+                                self.source_map\n+                                    .expr_map\n                                     .insert(SyntaxNodePtr::new(nr.syntax()), id);\n-                                self.expr_syntax_mapping_back\n+                                self.source_map\n+                                    .expr_map_back\n                                     .insert(id, SyntaxNodePtr::new(nr.syntax()));\n                                 id\n                             } else {\n@@ -910,36 +898,38 @@ impl ExprCollector {\n         self.body_expr = Some(body);\n     }\n \n-    fn into_body_source_map(self) -> BodySourceMap {\n+    fn finish(self) -> (Body, BodySourceMap) {\n         let body = Body {\n             owner: self.owner,\n             exprs: self.exprs,\n             pats: self.pats,\n             params: self.params,\n             body_expr: self.body_expr.expect(\"A body should have been collected\"),\n         };\n-        BodySourceMap {\n-            body: Arc::new(body),\n-            expr_syntax_mapping: self.expr_syntax_mapping,\n-            expr_syntax_mapping_back: self.expr_syntax_mapping_back,\n-            pat_syntax_mapping: self.pat_syntax_mapping,\n-            pat_syntax_mapping_back: self.pat_syntax_mapping_back,\n-        }\n+        (body, self.source_map)\n     }\n }\n \n-pub(crate) fn body_source_map(db: &impl HirDatabase, func: Function) -> Arc<BodySourceMap> {\n+pub(crate) fn body_with_source_map_query(\n+    db: &impl HirDatabase,\n+    func: Function,\n+) -> (Arc<Body>, Arc<BodySourceMap>) {\n     let mut collector = ExprCollector::new(func);\n \n     // TODO: consts, etc.\n     collector.collect_fn_body(&func.source(db).1);\n \n-    Arc::new(collector.into_body_source_map())\n+    let (body, source_map) = collector.finish();\n+    (Arc::new(body), Arc::new(source_map))\n+}\n+\n+pub(crate) fn body_hir_query(db: &impl HirDatabase, func: Function) -> Arc<Body> {\n+    db.body_with_source_map(func).0\n }\n \n #[cfg(test)]\n-pub(crate) fn collect_fn_body_syntax(function: Function, node: &ast::FnDef) -> BodySourceMap {\n+fn collect_fn_body_syntax(function: Function, node: &ast::FnDef) -> (Body, BodySourceMap) {\n     let mut collector = ExprCollector::new(function);\n     collector.collect_fn_body(node);\n-    collector.into_body_source_map()\n+    collector.finish()\n }"}, {"sha": "d5824eb81a6eab12e867f8e77d27f93ac68ec3a2", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4c5383103e2b79b05e2669889d44e51988932a6/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c5383103e2b79b05e2669889d44e51988932a6/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=f4c5383103e2b79b05e2669889d44e51988932a6", "patch": "@@ -316,11 +316,11 @@ mod tests {\n         let marker: &ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let fn_def: &ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n         let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n-        let body_hir = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n-        let scopes = ExprScopes::new(Arc::clone(body_hir.body()));\n+        let (body, syntax_mapping) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n+        let scopes = ExprScopes::new(Arc::new(body));\n         let scopes = ScopesWithSyntaxMapping {\n             scopes: Arc::new(scopes),\n-            syntax_mapping: Arc::new(body_hir),\n+            syntax_mapping: Arc::new(syntax_mapping),\n         };\n         let actual = scopes\n             .scope_chain(marker.syntax())\n@@ -417,11 +417,11 @@ mod tests {\n         let name_ref: &ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n \n         let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n-        let body_hir = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n-        let scopes = ExprScopes::new(Arc::clone(body_hir.body()));\n+        let (body, syntax_mapping) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n+        let scopes = ExprScopes::new(Arc::new(body));\n         let scopes = ScopesWithSyntaxMapping {\n             scopes: Arc::new(scopes),\n-            syntax_mapping: Arc::new(body_hir),\n+            syntax_mapping: Arc::new(syntax_mapping),\n         };\n         let local_name_entry = scopes.resolve_local_name(name_ref).unwrap();\n         let local_name = local_name_entry.ptr();"}, {"sha": "4c35ce0503ec950e67874f470dfbb98f52d7c637", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4c5383103e2b79b05e2669889d44e51988932a6/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c5383103e2b79b05e2669889d44e51988932a6/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=f4c5383103e2b79b05e2669889d44e51988932a6", "patch": "@@ -225,6 +225,6 @@ impl RootDatabase {\n \n         self.query(hir::db::LowerModuleQuery).sweep(sweep);\n         self.query(hir::db::LowerModuleSourceMapQuery).sweep(sweep);\n-        self.query(hir::db::BodySourceMapQuery).sweep(sweep);\n+        self.query(hir::db::BodyWithSourceMapQuery).sweep(sweep);\n     }\n }"}]}