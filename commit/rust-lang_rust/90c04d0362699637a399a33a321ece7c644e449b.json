{"sha": "90c04d0362699637a399a33a321ece7c644e449b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYzA0ZDAzNjI2OTk2MzdhMzk5YTMzYTMyMWVjZTdjNjQ0ZTQ0OWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-27T01:25:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-27T01:25:00Z"}, "message": "Auto merge of #28685 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #28666, #28674, #28677, #28678, #28679, #28680\n- Failed merges: #28621", "tree": {"sha": "c7f4db6cf64acab5d52ff3e86863296f509cd522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f4db6cf64acab5d52ff3e86863296f509cd522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90c04d0362699637a399a33a321ece7c644e449b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90c04d0362699637a399a33a321ece7c644e449b", "html_url": "https://github.com/rust-lang/rust/commit/90c04d0362699637a399a33a321ece7c644e449b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90c04d0362699637a399a33a321ece7c644e449b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf4c885fc74dd0218518ee933c99a61ead7696f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf4c885fc74dd0218518ee933c99a61ead7696f", "html_url": "https://github.com/rust-lang/rust/commit/7bf4c885fc74dd0218518ee933c99a61ead7696f"}, {"sha": "cc44d65c19835ff24aa3bfa5b76231d522fd0070", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc44d65c19835ff24aa3bfa5b76231d522fd0070", "html_url": "https://github.com/rust-lang/rust/commit/cc44d65c19835ff24aa3bfa5b76231d522fd0070"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "0882b073ea48c32109697ec28b4d65ffae767c4a", "filename": "src/doc/README.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90c04d0362699637a399a33a321ece7c644e449b/src%2Fdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/90c04d0362699637a399a33a321ece7c644e449b/src%2Fdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2FREADME.md?ref=90c04d0362699637a399a33a321ece7c644e449b", "patch": "@@ -2,9 +2,10 @@\n \n ## Building\n \n-To generate all the docs, just run `make docs` from the root of the repository.\n-This will convert the distributed Markdown docs to HTML and generate HTML doc\n-for the 'std' and 'extra' libraries.\n+To generate all the docs, follow the \"Building Documentation\" instructions in\n+the README in the root of the repository. This will convert the distributed\n+Markdown docs to HTML and generate HTML doc for the books, 'std' and 'extra'\n+libraries.\n \n To generate HTML documentation from one source file/crate, do something like:\n "}, {"sha": "b50e3af0fdd956b0be91a5fe937ecf6e741c9f30", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90c04d0362699637a399a33a321ece7c644e449b/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/90c04d0362699637a399a33a321ece7c644e449b/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=90c04d0362699637a399a33a321ece7c644e449b", "patch": "@@ -881,7 +881,7 @@ mod foo {\n     }\n \n     use foo::example::iter; // good: foo is at crate root\n-//  use example::iter;      // bad:  core is not at the crate root\n+//  use example::iter;      // bad:  example is not at the crate root\n     use self::baz::foobaz;  // good: self refers to module 'foo'\n     use foo::bar::foobar;   // good: foo is at crate root\n "}, {"sha": "b52e0fefa57e2ab3904fb0259fb633775628b37c", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90c04d0362699637a399a33a321ece7c644e449b/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/90c04d0362699637a399a33a321ece7c644e449b/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=90c04d0362699637a399a33a321ece7c644e449b", "patch": "@@ -150,15 +150,16 @@ let greater_than_forty_two = (0..100)\n                              .find(|x| *x > 42);\n \n match greater_than_forty_two {\n-    Some(_) => println!(\"We got some numbers!\"),\n-    None => println!(\"No numbers found :(\"),\n+    Some(_) => println!(\"Found a match!\"),\n+    None => println!(\"No match found :(\"),\n }\n ```\n \n `find` takes a closure, and works on a reference to each element of an\n iterator. This closure returns `true` if the element is the element we're\n-looking for, and `false` otherwise. Because we might not find a matching\n-element, `find` returns an `Option` rather than the element itself.\n+looking for, and `false` otherwise. `find` returns the first element satisfying\n+the specified predicate. Because we might not find a matching element, `find`\n+returns an `Option` rather than the element itself.\n \n Another important consumer is `fold`. Here's what it looks like:\n "}, {"sha": "b51ad8e087d22a995f550d2f15f79fc864cf17ba", "filename": "src/doc/trpl/structs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90c04d0362699637a399a33a321ece7c644e449b/src%2Fdoc%2Ftrpl%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/90c04d0362699637a399a33a321ece7c644e449b/src%2Fdoc%2Ftrpl%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstructs.md?ref=90c04d0362699637a399a33a321ece7c644e449b", "patch": "@@ -184,6 +184,8 @@ You can define a `struct` with no members at all:\n \n ```rust\n struct Electron;\n+\n+let x = Electron;\n ```\n \n Such a `struct` is called \u2018unit-like\u2019 because it resembles the empty"}, {"sha": "582c091091fb2ac800de643d52936b48bb97b7c4", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90c04d0362699637a399a33a321ece7c644e449b/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90c04d0362699637a399a33a321ece7c644e449b/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=90c04d0362699637a399a33a321ece7c644e449b", "patch": "@@ -1628,7 +1628,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n /// impl<T> Deref for DerefExample<T> {\n ///     type Target = T;\n ///\n-///     fn deref<'a>(&'a self) -> &'a T {\n+///     fn deref(&self) -> &T {\n ///         &self.value\n ///     }\n /// }"}, {"sha": "b5901762e30d7974cc06aa67ff35abf4afa80a22", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/90c04d0362699637a399a33a321ece7c644e449b/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90c04d0362699637a399a33a321ece7c644e449b/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=90c04d0362699637a399a33a321ece7c644e449b", "patch": "@@ -709,20 +709,26 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n             if !is_const {\n                 v.add_qualif(ConstQualif::NOT_CONST);\n                 if v.mode != Mode::Var {\n+                    fn span_limited_call_error(tcx: &ty::ctxt, span: Span, s: &str) {\n+                        span_err!(tcx.sess, span, E0015, \"{}\", s);\n+                    }\n+\n                     // FIXME(#24111) Remove this check when const fn stabilizes\n                     if let UnstableFeatures::Disallow = v.tcx.sess.opts.unstable_features {\n-                        span_err!(v.tcx.sess, e.span, E0015,\n-                                  \"function calls in {}s are limited to \\\n-                                   struct and enum constructors\", v.msg());\n+                        span_limited_call_error(&v.tcx, e.span,\n+                                                &format!(\"function calls in {}s are limited to \\\n+                                                          struct and enum constructors\",\n+                                                         v.msg()));\n                         v.tcx.sess.span_note(e.span,\n                                              \"a limited form of compile-time function \\\n                                               evaluation is available on a nightly \\\n                                               compiler via `const fn`\");\n                     } else {\n-                        span_err!(v.tcx.sess, e.span, E0015,\n-                                  \"function calls in {}s are limited to \\\n-                                   constant functions, \\\n-                                   struct and enum constructors\", v.msg());\n+                        span_limited_call_error(&v.tcx, e.span,\n+                                                &format!(\"function calls in {}s are limited \\\n+                                                          to constant functions, \\\n+                                                          struct and enum constructors\",\n+                                                         v.msg()));\n                     }\n                 }\n             }"}]}