{"sha": "2afec4dad1e80b3e53256306822f7849b7b9d128", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZmVjNGRhZDFlODBiM2U1MzI1NjMwNjgyMmY3ODQ5YjdiOWQxMjg=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-11-22T06:39:56Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-11-22T06:39:56Z"}, "message": "Use FxHashSet instead of HashMap", "tree": {"sha": "3f1cb6e0db43c2fc553908fbc7c6ed862b137b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f1cb6e0db43c2fc553908fbc7c6ed862b137b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2afec4dad1e80b3e53256306822f7849b7b9d128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2afec4dad1e80b3e53256306822f7849b7b9d128", "html_url": "https://github.com/rust-lang/rust/commit/2afec4dad1e80b3e53256306822f7849b7b9d128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2afec4dad1e80b3e53256306822f7849b7b9d128/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d756f61a5a7ab84d58fdaa9d53d84f6dad29f8db", "url": "https://api.github.com/repos/rust-lang/rust/commits/d756f61a5a7ab84d58fdaa9d53d84f6dad29f8db", "html_url": "https://github.com/rust-lang/rust/commit/d756f61a5a7ab84d58fdaa9d53d84f6dad29f8db"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "d3864539c75a8a09640460ad886946663927c361", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2afec4dad1e80b3e53256306822f7849b7b9d128/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afec4dad1e80b3e53256306822f7849b7b9d128/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2afec4dad1e80b3e53256306822f7849b7b9d128", "patch": "@@ -16,7 +16,6 @@ pub use self::IntVarValue::*;\n pub use self::LvaluePreference::*;\n pub use self::fold::TypeFoldable;\n \n-use std::collections::{hash_map, HashMap};\n use dep_graph::{self, DepNode};\n use hir::map as ast_map;\n use middle;\n@@ -31,7 +30,7 @@ use ty::subst::{Subst, Substs};\n use ty::walk::TypeWalker;\n use util::common::MemoizationMap;\n use util::nodemap::NodeSet;\n-use util::nodemap::FxHashMap;\n+use util::nodemap::{FxHashMap, FxHashSet};\n \n use serialize::{self, Encodable, Encoder};\n use std::borrow::Cow;\n@@ -1393,13 +1392,12 @@ impl<'tcx> serialize::UseSpecializedDecodable for AdtDef<'tcx> {}\n impl<'a, 'gcx, 'tcx> AdtDefData<'tcx, 'static> {\n     #[inline]\n     pub fn is_uninhabited_recurse(&'tcx self,\n-                                  visited: &mut HashMap<(DefId, &'tcx Substs<'tcx>), ()>,\n+                                  visited: &mut FxHashSet<(DefId, &'tcx Substs<'tcx>)>,\n                                   block: Option<NodeId>,\n                                   cx: TyCtxt<'a, 'gcx, 'tcx>,\n                                   substs: &'tcx Substs<'tcx>) -> bool {\n-        match visited.entry((self.did, substs)) {\n-            hash_map::Entry::Occupied(_) => return false,\n-            hash_map::Entry::Vacant(ve) => ve.insert(()),\n+        if !visited.insert((self.did, substs)) {\n+            return false;\n         };\n         self.variants.iter().all(|v| {\n             v.is_uninhabited_recurse(visited, block, cx, substs, self.is_union())\n@@ -1811,7 +1809,7 @@ impl<'tcx, 'container> VariantDefData<'tcx, 'container> {\n impl<'a, 'gcx, 'tcx> VariantDefData<'tcx, 'static> {\n     #[inline]\n     pub fn is_uninhabited_recurse(&'tcx self,\n-                                  visited: &mut HashMap<(DefId, &'tcx Substs<'tcx>), ()>,\n+                                  visited: &mut FxHashSet<(DefId, &'tcx Substs<'tcx>)>,\n                                   block: Option<NodeId>,\n                                   cx: TyCtxt<'a, 'gcx, 'tcx>,\n                                   substs: &'tcx Substs<'tcx>,\n@@ -1852,7 +1850,7 @@ impl<'a, 'gcx, 'tcx, 'container> FieldDefData<'tcx, 'container> {\n impl<'a, 'gcx, 'tcx> FieldDefData<'tcx, 'static> {\n     #[inline]\n     pub fn is_uninhabited_recurse(&'tcx self,\n-                                  visited: &mut HashMap<(DefId, &'tcx Substs<'tcx>), ()>,\n+                                  visited: &mut FxHashSet<(DefId, &'tcx Substs<'tcx>)>,\n                                   block: Option<NodeId>,\n                                   tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                   substs: &'tcx Substs<'tcx>) -> bool {"}, {"sha": "cb3176cce10bd468e747db63596e2f0691205e21", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2afec4dad1e80b3e53256306822f7849b7b9d128/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afec4dad1e80b3e53256306822f7849b7b9d128/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=2afec4dad1e80b3e53256306822f7849b7b9d128", "patch": "@@ -21,10 +21,10 @@ use util::common::ErrorReported;\n use collections::enum_set::{self, EnumSet, CLike};\n use std::fmt;\n use std::ops;\n-use std::collections::HashMap;\n use syntax::abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::symbol::{keywords, InternedString};\n+use util::nodemap::FxHashSet;\n \n use serialize;\n \n@@ -933,12 +933,12 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     /// Checks whether a type is uninhabited.\n     /// If `block` is `Some(id)` it also checks that the uninhabited-ness is visible from `id`.\n     pub fn is_uninhabited(&self, block: Option<NodeId>, cx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n-        let mut visited = HashMap::new();\n+        let mut visited = FxHashSet::default();\n         self.is_uninhabited_recurse(&mut visited, block, cx)\n     }\n \n     pub fn is_uninhabited_recurse(&self,\n-                                  visited: &mut HashMap<(DefId, &'tcx Substs<'tcx>), ()>,\n+                                  visited: &mut FxHashSet<(DefId, &'tcx Substs<'tcx>)>,\n                                   block: Option<NodeId>,\n                                   cx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n         match self.sty {"}]}