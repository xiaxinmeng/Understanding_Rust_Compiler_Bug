{"sha": "298d1578f074c9472fa69f7ac902d8703ac07c7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OGQxNTc4ZjA3NGM5NDcyZmE2OWY3YWM5MDJkODcwM2FjMDdjN2E=", "commit": {"author": {"name": "Philip Munksgaard", "email": "pmunksgaard@gmail.com", "date": "2015-03-06T17:06:05Z"}, "committer": {"name": "Philip Munksgaard", "email": "pmunksgaard@gmail.com", "date": "2015-03-10T13:18:58Z"}, "message": "with_attrs -> attrs\n\nWe don't need to take a closure, instead just return the list of attributes.", "tree": {"sha": "4d00c861165df5fb0f9e9ad53a6850adde2b55a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d00c861165df5fb0f9e9ad53a6850adde2b55a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/298d1578f074c9472fa69f7ac902d8703ac07c7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/298d1578f074c9472fa69f7ac902d8703ac07c7a", "html_url": "https://github.com/rust-lang/rust/commit/298d1578f074c9472fa69f7ac902d8703ac07c7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/298d1578f074c9472fa69f7ac902d8703ac07c7a/comments", "author": {"login": "Munksgaard", "id": 230613, "node_id": "MDQ6VXNlcjIzMDYxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/230613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Munksgaard", "html_url": "https://github.com/Munksgaard", "followers_url": "https://api.github.com/users/Munksgaard/followers", "following_url": "https://api.github.com/users/Munksgaard/following{/other_user}", "gists_url": "https://api.github.com/users/Munksgaard/gists{/gist_id}", "starred_url": "https://api.github.com/users/Munksgaard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Munksgaard/subscriptions", "organizations_url": "https://api.github.com/users/Munksgaard/orgs", "repos_url": "https://api.github.com/users/Munksgaard/repos", "events_url": "https://api.github.com/users/Munksgaard/events{/privacy}", "received_events_url": "https://api.github.com/users/Munksgaard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Munksgaard", "id": 230613, "node_id": "MDQ6VXNlcjIzMDYxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/230613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Munksgaard", "html_url": "https://github.com/Munksgaard", "followers_url": "https://api.github.com/users/Munksgaard/followers", "following_url": "https://api.github.com/users/Munksgaard/following{/other_user}", "gists_url": "https://api.github.com/users/Munksgaard/gists{/gist_id}", "starred_url": "https://api.github.com/users/Munksgaard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Munksgaard/subscriptions", "organizations_url": "https://api.github.com/users/Munksgaard/orgs", "repos_url": "https://api.github.com/users/Munksgaard/repos", "events_url": "https://api.github.com/users/Munksgaard/events{/privacy}", "received_events_url": "https://api.github.com/users/Munksgaard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e055c3f0041067000dfae7bbc2b0383a8fed19e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e055c3f0041067000dfae7bbc2b0383a8fed19e", "html_url": "https://github.com/rust-lang/rust/commit/6e055c3f0041067000dfae7bbc2b0383a8fed19e"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "18b5d21318f9c649c6b4a28c8e3d78d8f19295d3", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/298d1578f074c9472fa69f7ac902d8703ac07c7a/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298d1578f074c9472fa69f7ac902d8703ac07c7a/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=298d1578f074c9472fa69f7ac902d8703ac07c7a", "patch": "@@ -457,35 +457,32 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n-    /// Given a node ID and a closure, apply the closure to the array\n-    /// of attributes associated with the AST corresponding to the Node ID\n-    pub fn with_attrs<T, F>(&self, id: NodeId, f: F) -> T where\n-        F: FnOnce(Option<&[Attribute]>) -> T,\n-    {\n-        let attrs = match self.get(id) {\n-            NodeItem(i) => Some(&i.attrs[..]),\n-            NodeForeignItem(fi) => Some(&fi.attrs[..]),\n-            NodeTraitItem(ref tm) => match **tm {\n+    /// Given a node ID, get a list of of attributes associated with the AST\n+    /// corresponding to the Node ID\n+    pub fn attrs(&self, id: NodeId) -> &[Attribute] {\n+        let attrs = match self.find(id) {\n+            Some(NodeItem(i)) => Some(&i.attrs[..]),\n+            Some(NodeForeignItem(fi)) => Some(&fi.attrs[..]),\n+            Some(NodeTraitItem(ref tm)) => match **tm {\n                 RequiredMethod(ref type_m) => Some(&type_m.attrs[..]),\n                 ProvidedMethod(ref m) => Some(&m.attrs[..]),\n                 TypeTraitItem(ref typ) => Some(&typ.attrs[..]),\n             },\n-            NodeImplItem(ref ii) => {\n+            Some(NodeImplItem(ref ii)) => {\n                 match **ii {\n                     MethodImplItem(ref m) => Some(&m.attrs[..]),\n                     TypeImplItem(ref t) => Some(&t.attrs[..]),\n                 }\n             }\n-            NodeVariant(ref v) => Some(&v.node.attrs[..]),\n+            Some(NodeVariant(ref v)) => Some(&v.node.attrs[..]),\n             // unit/tuple structs take the attributes straight from\n             // the struct definition.\n-            // FIXME(eddyb) make this work again (requires access to the map).\n-            NodeStructCtor(_) => {\n-                return self.with_attrs(self.get_parent(id), f);\n+            Some(NodeStructCtor(_)) => {\n+                return self.attrs(self.get_parent(id));\n             }\n             _ => None\n         };\n-        f(attrs)\n+        attrs.unwrap_or(&[])\n     }\n \n     /// Returns an iterator that yields the node id's with paths that"}]}