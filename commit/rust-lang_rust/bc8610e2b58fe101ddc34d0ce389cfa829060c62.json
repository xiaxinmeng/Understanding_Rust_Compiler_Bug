{"sha": "bc8610e2b58fe101ddc34d0ce389cfa829060c62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjODYxMGUyYjU4ZmUxMDFkZGMzNGQwY2UzODljZmE4MjkwNjBjNjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T16:52:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T16:52:59Z"}, "message": "Merge #5608\n\n5608: Introduce GenericParam r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "fac9cf9a1ac4e4e28570261f2e755aa4f92f904d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fac9cf9a1ac4e4e28570261f2e755aa4f92f904d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc8610e2b58fe101ddc34d0ce389cfa829060c62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIvrrCRBK7hj4Ov3rIwAAdHIIAFPwD1rhprTnZ57yfnRiOhbR\nZefKKjk5+r/G3WqhQKsXW4XEWLPmmcHQCrOj+drlXN5WYw9RYC+evtLiu5HYFCjD\nP7lwgVcl/lqOuq7htUVydcmgT00JHRRzVRBgx+5El/noEdtbxsgLp+LLDvFvA8yU\n9g5p+SwkZ3GI2CMOO23tpC4jf20bavq0n+f5aQzosy8dYAlv10DdJdvvExNV/Nza\nNamkW9DE1e4ctbMuI9XkICfb01w+i5Eus7VD3WQBCz9jZCq8EiBL+03pVXD84ji9\nzNGWHW5h3nVsM+pVXmN36MUp4NoTfnJFoZpubksde7MKhu/0NWvATtE+AfOKxxc=\n=0ywY\n-----END PGP SIGNATURE-----\n", "payload": "tree fac9cf9a1ac4e4e28570261f2e755aa4f92f904d\nparent af8132e610d1e649e67ab797e372d1efcf106c48\nparent 3dce34aaf83c67836c94a526cb90eba8f36e3985\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596127979 +0000\ncommitter GitHub <noreply@github.com> 1596127979 +0000\n\nMerge #5608\n\n5608: Introduce GenericParam r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8610e2b58fe101ddc34d0ce389cfa829060c62", "html_url": "https://github.com/rust-lang/rust/commit/bc8610e2b58fe101ddc34d0ce389cfa829060c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc8610e2b58fe101ddc34d0ce389cfa829060c62/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af8132e610d1e649e67ab797e372d1efcf106c48", "url": "https://api.github.com/repos/rust-lang/rust/commits/af8132e610d1e649e67ab797e372d1efcf106c48", "html_url": "https://github.com/rust-lang/rust/commit/af8132e610d1e649e67ab797e372d1efcf106c48"}, {"sha": "3dce34aaf83c67836c94a526cb90eba8f36e3985", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dce34aaf83c67836c94a526cb90eba8f36e3985", "html_url": "https://github.com/rust-lang/rust/commit/3dce34aaf83c67836c94a526cb90eba8f36e3985"}], "stats": {"total": 273, "additions": 170, "deletions": 103}, "files": [{"sha": "be4da67bcb03e5fe5498594ef6505f5d183583cc", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc8610e2b58fe101ddc34d0ce389cfa829060c62/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8610e2b58fe101ddc34d0ce389cfa829060c62/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=bc8610e2b58fe101ddc34d0ce389cfa829060c62", "patch": "@@ -231,6 +231,7 @@ pub enum SyntaxKind {\n     LET_STMT,\n     EXPR_STMT,\n     GENERIC_PARAM_LIST,\n+    GENERIC_PARAM,\n     LIFETIME_PARAM,\n     TYPE_PARAM,\n     CONST_PARAM,"}, {"sha": "e3b3f44ccfd7e8b7d90cd0a399733a5c928cd9ac", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 128, "deletions": 85, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/bc8610e2b58fe101ddc34d0ce389cfa829060c62/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8610e2b58fe101ddc34d0ce389cfa829060c62/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=bc8610e2b58fe101ddc34d0ce389cfa829060c62", "patch": "@@ -312,9 +312,7 @@ pub struct GenericParamList {\n }\n impl GenericParamList {\n     pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n-    pub fn type_params(&self) -> AstChildren<TypeParam> { support::children(&self.syntax) }\n-    pub fn lifetime_params(&self) -> AstChildren<LifetimeParam> { support::children(&self.syntax) }\n-    pub fn const_params(&self) -> AstChildren<ConstParam> { support::children(&self.syntax) }\n+    pub fn generic_params(&self) -> AstChildren<GenericParam> { support::children(&self.syntax) }\n     pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -470,6 +468,40 @@ impl ExternItemList {\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct LifetimeParam {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for LifetimeParam {}\n+impl LifetimeParam {\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TypeParam {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for TypeParam {}\n+impl ast::NameOwner for TypeParam {}\n+impl ast::TypeBoundsOwner for TypeParam {}\n+impl TypeParam {\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n+    pub fn default_type(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ConstParam {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for ConstParam {}\n+impl ast::NameOwner for ConstParam {}\n+impl ast::TypeAscriptionOwner for ConstParam {}\n+impl ConstParam {\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n+    pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n+    pub fn default_val(&self) -> Option<Expr> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParenType {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1133,40 +1165,6 @@ impl MacroStmts {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeParam {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for TypeParam {}\n-impl ast::NameOwner for TypeParam {}\n-impl ast::TypeBoundsOwner for TypeParam {}\n-impl TypeParam {\n-    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n-    pub fn default_type(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LifetimeParam {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for LifetimeParam {}\n-impl LifetimeParam {\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ConstParam {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for ConstParam {}\n-impl ast::NameOwner for ConstParam {}\n-impl ast::TypeAscriptionOwner for ConstParam {}\n-impl ConstParam {\n-    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n-    pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n-    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n-    pub fn default_val(&self) -> Option<Expr> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeBound {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1383,6 +1381,13 @@ pub enum ExternItem {\n impl ast::AttrsOwner for ExternItem {}\n impl ast::NameOwner for ExternItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum GenericParam {\n+    LifetimeParam(LifetimeParam),\n+    TypeParam(TypeParam),\n+    ConstParam(ConstParam),\n+}\n+impl ast::AttrsOwner for GenericParam {}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Stmt {\n     LetStmt(LetStmt),\n     ExprStmt(ExprStmt),\n@@ -1854,6 +1859,39 @@ impl AstNode for ExternItemList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for LifetimeParam {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LIFETIME_PARAM }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for TypeParam {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_PARAM }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for ConstParam {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_PARAM }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for ParenType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PAREN_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2635,39 +2673,6 @@ impl AstNode for MacroStmts {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TypeParam {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_PARAM }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl AstNode for LifetimeParam {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LIFETIME_PARAM }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl AstNode for ConstParam {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_PARAM }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for TypeBound {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3325,6 +3330,39 @@ impl AstNode for ExternItem {\n         }\n     }\n }\n+impl From<LifetimeParam> for GenericParam {\n+    fn from(node: LifetimeParam) -> GenericParam { GenericParam::LifetimeParam(node) }\n+}\n+impl From<TypeParam> for GenericParam {\n+    fn from(node: TypeParam) -> GenericParam { GenericParam::TypeParam(node) }\n+}\n+impl From<ConstParam> for GenericParam {\n+    fn from(node: ConstParam) -> GenericParam { GenericParam::ConstParam(node) }\n+}\n+impl AstNode for GenericParam {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            LIFETIME_PARAM | TYPE_PARAM | CONST_PARAM => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        let res = match syntax.kind() {\n+            LIFETIME_PARAM => GenericParam::LifetimeParam(LifetimeParam { syntax }),\n+            TYPE_PARAM => GenericParam::TypeParam(TypeParam { syntax }),\n+            CONST_PARAM => GenericParam::ConstParam(ConstParam { syntax }),\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            GenericParam::LifetimeParam(it) => &it.syntax,\n+            GenericParam::TypeParam(it) => &it.syntax,\n+            GenericParam::ConstParam(it) => &it.syntax,\n+        }\n+    }\n+}\n impl From<LetStmt> for Stmt {\n     fn from(node: LetStmt) -> Stmt { Stmt::LetStmt(node) }\n }\n@@ -3449,6 +3487,11 @@ impl std::fmt::Display for ExternItem {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for GenericParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for Stmt {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3669,6 +3712,21 @@ impl std::fmt::Display for ExternItemList {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for LifetimeParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TypeParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ConstParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for ParenType {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4024,21 +4082,6 @@ impl std::fmt::Display for MacroStmts {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TypeParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl std::fmt::Display for LifetimeParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl std::fmt::Display for ConstParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for TypeBound {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "d2ee9586d2a46dd89797ff97b689e6511cd46a7e", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bc8610e2b58fe101ddc34d0ce389cfa829060c62/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8610e2b58fe101ddc34d0ce389cfa829060c62/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=bc8610e2b58fe101ddc34d0ce389cfa829060c62", "patch": "@@ -473,6 +473,27 @@ impl ast::TokenTree {\n     }\n }\n \n+impl ast::GenericParamList {\n+    pub fn lifetime_params(&self) -> impl Iterator<Item = ast::LifetimeParam> {\n+        self.generic_params().filter_map(|param| match param {\n+            ast::GenericParam::LifetimeParam(it) => Some(it),\n+            ast::GenericParam::TypeParam(_) | ast::GenericParam::ConstParam(_) => None,\n+        })\n+    }\n+    pub fn type_params(&self) -> impl Iterator<Item = ast::TypeParam> {\n+        self.generic_params().filter_map(|param| match param {\n+            ast::GenericParam::TypeParam(it) => Some(it),\n+            ast::GenericParam::LifetimeParam(_) | ast::GenericParam::ConstParam(_) => None,\n+        })\n+    }\n+    pub fn const_params(&self) -> impl Iterator<Item = ast::ConstParam> {\n+        self.generic_params().filter_map(|param| match param {\n+            ast::GenericParam::ConstParam(it) => Some(it),\n+            ast::GenericParam::TypeParam(_) | ast::GenericParam::LifetimeParam(_) => None,\n+        })\n+    }\n+}\n+\n impl ast::DocCommentsOwner for ast::SourceFile {}\n impl ast::DocCommentsOwner for ast::Fn {}\n impl ast::DocCommentsOwner for ast::Struct {}"}, {"sha": "114898e3833a2fa56be55e06397006a1a06335bc", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc8610e2b58fe101ddc34d0ce389cfa829060c62/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8610e2b58fe101ddc34d0ce389cfa829060c62/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=bc8610e2b58fe101ddc34d0ce389cfa829060c62", "patch": "@@ -204,6 +204,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"LET_STMT\",\n         \"EXPR_STMT\",\n         \"GENERIC_PARAM_LIST\",\n+        \"GENERIC_PARAM\",\n         \"LIFETIME_PARAM\",\n         \"TYPE_PARAM\",\n         \"CONST_PARAM\","}, {"sha": "4025f7f96cdd1354b5e07dfa6a03ce37559c34fa", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bc8610e2b58fe101ddc34d0ce389cfa829060c62/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/bc8610e2b58fe101ddc34d0ce389cfa829060c62/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=bc8610e2b58fe101ddc34d0ce389cfa829060c62", "patch": "@@ -154,6 +154,25 @@ ExternItemList =\n ExternItem =\n   Fn | Static | MacroCall\n \n+GenericParamList =\n+  '<' (GenericParam (',' GenericParam)* ','?)? '>'\n+\n+GenericParam =\n+  LifetimeParam\n+| TypeParam\n+| ConstParam\n+\n+TypeParam =\n+  Attr* Name (':' TypeBoundList?)?\n+  ('=' default_type:TypeRef)?\n+\n+ConstParam =\n+  Attr* 'const' Name ':' ascribed_type:TypeRef\n+  ('=' default_val:Expr)?\n+\n+LifetimeParam =\n+  Attr* 'lifetime'\n+\n ParenType =\n   '(' TypeRef ')'\n \n@@ -400,24 +419,6 @@ MacroStmts =\n Attr =\n   '#' '!'? '[' Path ('=' input:AttrInput)? ']'\n \n-GenericParamList =\n-  '<'\n-    TypeParam*\n-    LifetimeParam*\n-    ConstParam*\n-  '>'\n-\n-TypeParam =\n-  Attr* Name (':' TypeBoundList?)?\n-  ('=' default_type:TypeRef)?\n-\n-ConstParam =\n-  Attr* 'const' Name ':' ascribed_type:TypeRef\n-  ('=' default_val:Expr)?\n-\n-LifetimeParam =\n-  Attr* 'lifetime'\n-\n TypeBound =\n   'lifetime' | 'const'? TypeRef\n "}]}