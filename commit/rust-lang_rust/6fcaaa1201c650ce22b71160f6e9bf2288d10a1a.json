{"sha": "6fcaaa1201c650ce22b71160f6e9bf2288d10a1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmY2FhYTEyMDFjNjUwY2UyMmI3MTE2MGY2ZTliZjIyODhkMTBhMWE=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-22T06:06:14Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-24T11:34:00Z"}, "message": "SSR tests: Define all paths needed for templates\n\nIn a later commit, paths in templates will be resolved. This allows us\nto render the path with appropriate qualifiers for its context. Here we\nprepare for that change by updating existing tests where I'd previously\nnot bothered to define the items that the template referred to.", "tree": {"sha": "528e554a584eb746f67eaf6e1d9af04cdc780337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/528e554a584eb746f67eaf6e1d9af04cdc780337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fcaaa1201c650ce22b71160f6e9bf2288d10a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcaaa1201c650ce22b71160f6e9bf2288d10a1a", "html_url": "https://github.com/rust-lang/rust/commit/6fcaaa1201c650ce22b71160f6e9bf2288d10a1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fcaaa1201c650ce22b71160f6e9bf2288d10a1a/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a45682ed96f18f962ac403419b4d143d59ba5283", "url": "https://api.github.com/repos/rust-lang/rust/commits/a45682ed96f18f962ac403419b4d143d59ba5283", "html_url": "https://github.com/rust-lang/rust/commit/a45682ed96f18f962ac403419b4d143d59ba5283"}], "stats": {"total": 102, "additions": 76, "deletions": 26}, "files": [{"sha": "11512c8ccd6251d7ceb7f2d7edca05d2f04de1c7", "filename": "crates/ra_ssr/src/tests.rs", "status": "modified", "additions": 76, "deletions": 26, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/6fcaaa1201c650ce22b71160f6e9bf2288d10a1a/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcaaa1201c650ce22b71160f6e9bf2288d10a1a/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Ftests.rs?ref=6fcaaa1201c650ce22b71160f6e9bf2288d10a1a", "patch": "@@ -154,8 +154,19 @@ fn ssr_function_to_method() {\n fn ssr_nested_function() {\n     assert_ssr_transform(\n         \"foo($a, $b, $c) ==>> bar($c, baz($a, $b))\",\n-        \"fn foo() {} fn main { foo  (x + value.method(b), x+y-z, true && false) }\",\n-        expect![[\"fn foo() {} fn main { bar(true && false, baz(x + value.method(b), x+y-z)) }\"]],\n+        r#\"\n+            //- /lib.rs crate:foo\n+            fn foo() {}\n+            fn bar() {}\n+            fn baz() {}\n+            fn main { foo  (x + value.method(b), x+y-z, true && false) }\n+            \"#,\n+        expect![[r#\"\n+            fn foo() {}\n+            fn bar() {}\n+            fn baz() {}\n+            fn main { bar(true && false, baz(x + value.method(b), x+y-z)) }\n+        \"#]],\n     )\n }\n \n@@ -181,26 +192,34 @@ fn ssr_with_extra_space() {\n fn ssr_keeps_nested_comment() {\n     assert_ssr_transform(\n         \"foo($x) ==>> bar($x)\",\n-        \"fn foo() {} fn main() { foo(other(5 /* using 5 */)) }\",\n-        expect![[\"fn foo() {} fn main() { bar(other(5 /* using 5 */)) }\"]],\n+        \"fn foo() {} fn bar() {} fn main() { foo(other(5 /* using 5 */)) }\",\n+        expect![[\"fn foo() {} fn bar() {} fn main() { bar(other(5 /* using 5 */)) }\"]],\n     )\n }\n \n #[test]\n fn ssr_keeps_comment() {\n     assert_ssr_transform(\n         \"foo($x) ==>> bar($x)\",\n-        \"fn foo() {} fn main() { foo(5 /* using 5 */) }\",\n-        expect![[\"fn foo() {} fn main() { bar(5)/* using 5 */ }\"]],\n+        \"fn foo() {} fn bar() {} fn main() { foo(5 /* using 5 */) }\",\n+        expect![[\"fn foo() {} fn bar() {} fn main() { bar(5)/* using 5 */ }\"]],\n     )\n }\n \n #[test]\n fn ssr_struct_lit() {\n     assert_ssr_transform(\n-        \"foo{a: $a, b: $b} ==>> foo::new($a, $b)\",\n-        \"fn foo() {} fn main() { foo{b:2, a:1} }\",\n-        expect![[\"fn foo() {} fn main() { foo::new(1, 2) }\"]],\n+        \"Foo{a: $a, b: $b} ==>> Foo::new($a, $b)\",\n+        r#\"\n+            struct Foo() {}\n+            impl Foo { fn new() {} }\n+            fn main() { Foo{b:2, a:1} }\n+            \"#,\n+        expect![[r#\"\n+            struct Foo() {}\n+            impl Foo { fn new() {} }\n+            fn main() { Foo::new(1, 2) }\n+        \"#]],\n     )\n }\n \n@@ -312,7 +331,7 @@ fn match_struct_instantiation() {\n fn match_path() {\n     let code = r#\"\n         mod foo {\n-            fn bar() {}\n+            pub fn bar() {}\n         }\n         fn f() {foo::bar(42)}\"#;\n     assert_matches(\"foo::bar\", code, &[\"foo::bar\"]);\n@@ -413,44 +432,58 @@ fn no_match_split_expression() {\n fn replace_function_call() {\n     assert_ssr_transform(\n         \"foo() ==>> bar()\",\n-        \"fn foo() {} fn f1() {foo(); foo();}\",\n-        expect![[\"fn foo() {} fn f1() {bar(); bar();}\"]],\n+        \"fn foo() {} fn bar() {} fn f1() {foo(); foo();}\",\n+        expect![[\"fn foo() {} fn bar() {} fn f1() {bar(); bar();}\"]],\n     );\n }\n \n #[test]\n fn replace_function_call_with_placeholders() {\n     assert_ssr_transform(\n         \"foo($a, $b) ==>> bar($b, $a)\",\n-        \"fn foo() {} fn f1() {foo(5, 42)}\",\n-        expect![[\"fn foo() {} fn f1() {bar(42, 5)}\"]],\n+        \"fn foo() {} fn bar() {} fn f1() {foo(5, 42)}\",\n+        expect![[\"fn foo() {} fn bar() {} fn f1() {bar(42, 5)}\"]],\n     );\n }\n \n #[test]\n fn replace_nested_function_calls() {\n     assert_ssr_transform(\n         \"foo($a) ==>> bar($a)\",\n-        \"fn foo() {} fn f1() {foo(foo(42))}\",\n-        expect![[\"fn foo() {} fn f1() {bar(bar(42))}\"]],\n+        \"fn foo() {} fn bar() {} fn f1() {foo(foo(42))}\",\n+        expect![[\"fn foo() {} fn bar() {} fn f1() {bar(bar(42))}\"]],\n     );\n }\n \n #[test]\n-fn replace_type() {\n+fn replace_associated_function_call() {\n     assert_ssr_transform(\n-        \"Result<(), $a> ==>> Option<$a>\",\n-        \"struct Result<T, E> {} fn f1() -> Result<(), Vec<Error>> {foo()}\",\n-        expect![[\"struct Result<T, E> {} fn f1() -> Option<Vec<Error>> {foo()}\"]],\n+        \"Foo::new() ==>> Bar::new()\",\n+        r#\"\n+            struct Foo {}\n+            impl Foo { fn new() {} }\n+            struct Bar {}\n+            impl Bar { fn new() {} }\n+            fn f1() {Foo::new();}\n+            \"#,\n+        expect![[r#\"\n+            struct Foo {}\n+            impl Foo { fn new() {} }\n+            struct Bar {}\n+            impl Bar { fn new() {} }\n+            fn f1() {Bar::new();}\n+        \"#]],\n     );\n }\n \n #[test]\n-fn replace_struct_init() {\n+fn replace_type() {\n     assert_ssr_transform(\n-        \"Foo {a: $a, b: $b} ==>> Foo::new($a, $b)\",\n-        \"struct Foo {} fn f1() {Foo{b: 1, a: 2}}\",\n-        expect![[\"struct Foo {} fn f1() {Foo::new(2, 1)}\"]],\n+        \"Result<(), $a> ==>> Option<$a>\",\n+        \"struct Result<T, E> {} struct Option<T> {} fn f1() -> Result<(), Vec<Error>> {foo()}\",\n+        expect![[\n+            \"struct Result<T, E> {} struct Option<T> {} fn f1() -> Option<Vec<Error>> {foo()}\"\n+        ]],\n     );\n }\n \n@@ -491,8 +524,23 @@ fn match_binary_op() {\n fn multiple_rules() {\n     assert_ssr_transforms(\n         &[\"$a + 1 ==>> add_one($a)\", \"$a + $b ==>> add($a, $b)\"],\n-        \"fn f() -> i32 {3 + 2 + 1}\",\n-        expect![[\"fn f() -> i32 {add_one(add(3, 2))}\"]],\n+        \"fn add() {} fn add_one() {} fn f() -> i32 {3 + 2 + 1}\",\n+        expect![[\"fn add() {} fn add_one() {} fn f() -> i32 {add_one(add(3, 2))}\"]],\n+    )\n+}\n+\n+#[test]\n+fn multiple_rules_with_nested_matches() {\n+    assert_ssr_transforms(\n+        &[\"foo1($a) ==>> bar1($a)\", \"foo2($a) ==>> bar2($a)\"],\n+        r#\"\n+            fn foo1() {} fn foo2() {} fn bar1() {} fn bar2() {}\n+            fn f() {foo1(foo2(foo1(foo2(foo1(42)))))}\n+            \"#,\n+        expect![[r#\"\n+            fn foo1() {} fn foo2() {} fn bar1() {} fn bar2() {}\n+            fn f() {bar1(bar2(bar1(bar2(bar1(42)))))}\n+        \"#]],\n     )\n }\n \n@@ -524,12 +572,14 @@ fn replace_within_macro_expansion() {\n             macro_rules! macro1 {\n                 ($a:expr) => {$a}\n             }\n+            fn bar() {}\n             fn f() {macro1!(5.x().foo().o2())}\n             \"#,\n         expect![[r#\"\n             macro_rules! macro1 {\n                 ($a:expr) => {$a}\n             }\n+            fn bar() {}\n             fn f() {macro1!(bar(5.x()).o2())}\n             \"#]],\n     )"}]}