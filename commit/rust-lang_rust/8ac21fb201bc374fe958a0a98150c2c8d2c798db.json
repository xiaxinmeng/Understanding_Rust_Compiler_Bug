{"sha": "8ac21fb201bc374fe958a0a98150c2c8d2c798db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzIxZmIyMDFiYzM3NGZlOTU4YTBhOTgxNTBjMmM4ZDJjNzk4ZGI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-14T17:59:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-14T17:59:53Z"}, "message": "Rollup merge of #79982 - ijackson:exit-status, r=dtolnay\n\nAdd missing methods to unix ExitStatusExt\n\nThese are the methods corresponding to the remaining exit status examination macros from `wait.h`.  `WCOREDUMP` isn't in SuS but is it is very standard.  I have not done portability testing to see if this builds everywhere, so I may need to Do Something if it doesn't.\n\nThere is also a bugfix and doc improvement to `.signal()`, and an `.into_raw()` accessor.\n\nThis would fix #73128 and fix #73129.  Please let me know if you like this direction, and if so I will open the tracking issue and so on.\n\nIf this MR goes well, I may tackle #73125 next - I have an idea for how to do it.", "tree": {"sha": "af6fa8d3865848ae875417f39404f36c16e1ab93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af6fa8d3865848ae875417f39404f36c16e1ab93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac21fb201bc374fe958a0a98150c2c8d2c798db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAIaZCRBK7hj4Ov3rIwAAdHIIADXXETqFgH3YS3vLPYzDQp9N\nr+uLhB6AD3BM3rmo0TIPT5FP3gkLNT49OXMKox1IYg/27kmxb5dFs+RUo7ZSE59w\nDgEPH11ejt7VXi+cNzDN1UXfXEBklzBE2X+9OVysoKRiEr8kol8BCWMY3pqhVf9X\n9nPWiU0Z5bUrwfTlXqjooM0y2nW/x4XTC8HnVoHt2+aTFEOagjPs57YXofZpFlhm\n4L42mu6Q+5X+CaX5ZA2uTvqVd8XeDkQulPOhn4TnebeoKkQg7gN+uhPGh0BJhm7H\nLh17edhmIoAbCt4XViqyi9b8a49/dL+26U3FZunoc7rFRJ9NPW49gsHdN0W17QA=\n=uDD1\n-----END PGP SIGNATURE-----\n", "payload": "tree af6fa8d3865848ae875417f39404f36c16e1ab93\nparent d03fe84169d50a4b96cdef7b2f862217ab634055\nparent a8d01619608715e6abc4c6d3c6f347f393262725\nauthor Mara Bos <m-ou.se@m-ou.se> 1610647193 +0000\ncommitter GitHub <noreply@github.com> 1610647193 +0000\n\nRollup merge of #79982 - ijackson:exit-status, r=dtolnay\n\nAdd missing methods to unix ExitStatusExt\n\nThese are the methods corresponding to the remaining exit status examination macros from `wait.h`.  `WCOREDUMP` isn't in SuS but is it is very standard.  I have not done portability testing to see if this builds everywhere, so I may need to Do Something if it doesn't.\n\nThere is also a bugfix and doc improvement to `.signal()`, and an `.into_raw()` accessor.\n\nThis would fix #73128 and fix #73129.  Please let me know if you like this direction, and if so I will open the tracking issue and so on.\n\nIf this MR goes well, I may tackle #73125 next - I have an idea for how to do it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac21fb201bc374fe958a0a98150c2c8d2c798db", "html_url": "https://github.com/rust-lang/rust/commit/8ac21fb201bc374fe958a0a98150c2c8d2c798db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac21fb201bc374fe958a0a98150c2c8d2c798db/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03fe84169d50a4b96cdef7b2f862217ab634055", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03fe84169d50a4b96cdef7b2f862217ab634055", "html_url": "https://github.com/rust-lang/rust/commit/d03fe84169d50a4b96cdef7b2f862217ab634055"}, {"sha": "a8d01619608715e6abc4c6d3c6f347f393262725", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d01619608715e6abc4c6d3c6f347f393262725", "html_url": "https://github.com/rust-lang/rust/commit/a8d01619608715e6abc4c6d3c6f347f393262725"}], "stats": {"total": 134, "additions": 131, "deletions": 3}, "files": [{"sha": "f4c67b225e6e19623e2e85f8f5e6497f931d283c", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8ac21fb201bc374fe958a0a98150c2c8d2c798db/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac21fb201bc374fe958a0a98150c2c8d2c798db/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=8ac21fb201bc374fe958a0a98150c2c8d2c798db", "patch": "@@ -9,6 +9,14 @@ use crate::process;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n+mod private {\n+    /// This trait being unreachable from outside the crate\n+    /// prevents other implementations of the `ExitStatusExt` trait,\n+    /// which allows potentially adding more trait methods in the future.\n+    #[stable(feature = \"none\", since = \"1.51.0\")]\n+    pub trait Sealed {}\n+}\n+\n /// Unix-specific extensions to the [`process::Command`] builder.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait CommandExt {\n@@ -163,18 +171,48 @@ impl CommandExt for process::Command {\n }\n \n /// Unix-specific extensions to [`process::ExitStatus`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait ExitStatusExt {\n+pub trait ExitStatusExt: private::Sealed {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of\n     /// a process.\n     #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n     fn from_raw(raw: i32) -> Self;\n \n     /// If the process was terminated by a signal, returns that signal.\n+    ///\n+    /// In other words, if `WIFSIGNALED`, this returns `WTERMSIG`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn signal(&self) -> Option<i32>;\n+\n+    /// If the process was terminated by a signal, says whether it dumped core.\n+    #[unstable(feature = \"unix_process_wait_more\", issue = \"80695\")]\n+    fn core_dumped(&self) -> bool;\n+\n+    /// If the process was stopped by a signal, returns that signal.\n+    ///\n+    /// In other words, if `WIFSTOPPED`, this returns `WSTOPSIG`.  This is only possible if the status came from\n+    /// a `wait` system call which was passed `WUNTRACED`, was then converted into an `ExitStatus`.\n+    #[unstable(feature = \"unix_process_wait_more\", issue = \"80695\")]\n+    fn stopped_signal(&self) -> Option<i32>;\n+\n+    /// Whether the process was continued from a stopped status.\n+    ///\n+    /// Ie, `WIFCONTINUED`.  This is only possible if the status came from a `wait` system call\n+    /// which was passed `WCONTINUED`, was then converted into an `ExitStatus`.\n+    #[unstable(feature = \"unix_process_wait_more\", issue = \"80695\")]\n+    fn continued(&self) -> bool;\n+\n+    /// Returns the underlying raw `wait` status.\n+    #[unstable(feature = \"unix_process_wait_more\", issue = \"80695\")]\n+    fn into_raw(self) -> i32;\n }\n \n+#[stable(feature = \"none\", since = \"1.51.0\")]\n+impl private::Sealed for process::ExitStatus {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ExitStatusExt for process::ExitStatus {\n     fn from_raw(raw: i32) -> Self {\n@@ -184,6 +222,22 @@ impl ExitStatusExt for process::ExitStatus {\n     fn signal(&self) -> Option<i32> {\n         self.as_inner().signal()\n     }\n+\n+    fn core_dumped(&self) -> bool {\n+        self.as_inner().core_dumped()\n+    }\n+\n+    fn stopped_signal(&self) -> Option<i32> {\n+        self.as_inner().stopped_signal()\n+    }\n+\n+    fn continued(&self) -> bool {\n+        self.as_inner().continued()\n+    }\n+\n+    fn into_raw(self) -> i32 {\n+        self.as_inner().into_raw().into()\n+    }\n }\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]"}, {"sha": "0d4703d7f503abe5c2c6c70705196c66d7390bea", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8ac21fb201bc374fe958a0a98150c2c8d2c798db/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac21fb201bc374fe958a0a98150c2c8d2c798db/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=8ac21fb201bc374fe958a0a98150c2c8d2c798db", "patch": "@@ -245,6 +245,50 @@ impl ExitStatus {\n     pub fn signal(&self) -> Option<i32> {\n         None\n     }\n+\n+    // FIXME: The actually-Unix implementation in process_unix.rs uses WSTOPSIG, WCOREDUMP et al.\n+    // I infer from the implementation of `success`, `code` and `signal` above that these are not\n+    // available on Fuchsia.\n+    //\n+    // It does not appear that Fuchsia is Unix-like enough to implement ExitStatus (or indeed many\n+    // other things from std::os::unix) properly.  This veneer is always going to be a bodge.  So\n+    // while I don't know if these implementations are actually correct, I think they will do for\n+    // now at least.\n+    pub fn core_dumped(&self) -> bool {\n+        false\n+    }\n+    pub fn stopped_signal(&self) -> Option<i32> {\n+        None\n+    }\n+    pub fn continued(&self) -> bool {\n+        false\n+    }\n+\n+    pub fn into_raw(&self) -> c_int {\n+        // We don't know what someone who calls into_raw() will do with this value, but it should\n+        // have the conventional Unix representation.  Despite the fact that this is not\n+        // standardised in SuS or POSIX, all Unix systems encode the signal and exit status the\n+        // same way.  (Ie the WIFEXITED, WEXITSTATUS etc. macros have identical behaviour on every\n+        // Unix.)\n+        //\n+        // The caller of `std::os::unix::into_raw` is probably wanting a Unix exit status, and may\n+        // do their own shifting and masking, or even pass the status to another computer running a\n+        // different Unix variant.\n+        //\n+        // The other view would be to say that the caller on Fuchsia ought to know that `into_raw`\n+        // will give a raw Fuchsia status (whatever that is - I don't know, personally).  That is\n+        // not possible here becaause we must return a c_int because that's what Unix (including\n+        // SuS and POSIX) say a wait status is, but Fuchsia apparently uses a u64, so it won't\n+        // necessarily fit.\n+        //\n+        // It seems to me that that the right answer would be to provide std::os::fuchsia with its\n+        // own ExitStatusExt, rather that trying to provide a not very convincing imitation of\n+        // Unix.  Ie, std::os::unix::process:ExitStatusExt ought not to exist on Fuchsia.  But\n+        // fixing this up that is beyond the scope of my efforts now.\n+        let exit_status_as_if_unix: u8 = self.0.try_into().expect(\"Fuchsia process return code bigger than 8 bits, but std::os::unix::ExitStatusExt::into_raw() was called to try to convert the value into a traditional Unix-style wait status, which cannot represent values greater than 255.\");\n+        let wait_status_as_if_unix = (exit_status_as_if_unix as c_int) << 8;\n+        wait_status_as_if_unix\n+    }\n }\n \n /// Converts a raw `c_int` to a type-safe `ExitStatus` by wrapping it without copying."}, {"sha": "945b43678a9192368c70eeefd49117583d6b4480", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ac21fb201bc374fe958a0a98150c2c8d2c798db/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac21fb201bc374fe958a0a98150c2c8d2c798db/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=8ac21fb201bc374fe958a0a98150c2c8d2c798db", "patch": "@@ -479,7 +479,23 @@ impl ExitStatus {\n     }\n \n     pub fn signal(&self) -> Option<i32> {\n-        if !self.exited() { Some(libc::WTERMSIG(self.0)) } else { None }\n+        if libc::WIFSIGNALED(self.0) { Some(libc::WTERMSIG(self.0)) } else { None }\n+    }\n+\n+    pub fn core_dumped(&self) -> bool {\n+        libc::WIFSIGNALED(self.0) && libc::WCOREDUMP(self.0)\n+    }\n+\n+    pub fn stopped_signal(&self) -> Option<i32> {\n+        if libc::WIFSTOPPED(self.0) { Some(libc::WSTOPSIG(self.0)) } else { None }\n+    }\n+\n+    pub fn continued(&self) -> bool {\n+        libc::WIFCONTINUED(self.0)\n+    }\n+\n+    pub fn into_raw(&self) -> c_int {\n+        self.0\n     }\n }\n "}, {"sha": "7a92381d6609b56d5a1042d350daff13711bb792", "filename": "library/std/src/sys/windows/ext/process.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ac21fb201bc374fe958a0a98150c2c8d2c798db/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac21fb201bc374fe958a0a98150c2c8d2c798db/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=8ac21fb201bc374fe958a0a98150c2c8d2c798db", "patch": "@@ -7,6 +7,14 @@ use crate::process;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n+mod private {\n+    /// This trait being unreachable from outside the crate\n+    /// prevents other implementations of the `ExitStatusExt` trait,\n+    /// which allows potentially adding more trait methods in the future.\n+    #[stable(feature = \"none\", since = \"1.51.0\")]\n+    pub trait Sealed {}\n+}\n+\n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawHandle for process::Stdio {\n     unsafe fn from_raw_handle(handle: RawHandle) -> process::Stdio {\n@@ -73,8 +81,11 @@ impl IntoRawHandle for process::ChildStderr {\n }\n \n /// Windows-specific extensions to [`process::ExitStatus`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n-pub trait ExitStatusExt {\n+pub trait ExitStatusExt: private::Sealed {\n     /// Creates a new `ExitStatus` from the raw underlying `u32` return value of\n     /// a process.\n     #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n@@ -88,6 +99,9 @@ impl ExitStatusExt for process::ExitStatus {\n     }\n }\n \n+#[stable(feature = \"none\", since = \"1.51.0\")]\n+impl private::Sealed for process::ExitStatus {}\n+\n /// Windows-specific extensions to the [`process::Command`] builder.\n #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n pub trait CommandExt {"}]}