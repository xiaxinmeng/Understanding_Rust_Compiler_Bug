{"sha": "56b77869141efecc9daef02654bf0add552ad398", "node_id": "C_kwDOAAsO6NoAKDU2Yjc3ODY5MTQxZWZlY2M5ZGFlZjAyNjU0YmYwYWRkNTUyYWQzOTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-28T10:00:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-28T10:00:03Z"}, "message": "Rollup merge of #98384 - rdzhaafar:fix-macos-rss-reporting, r=davidtwco,michaelwoerister\n\nFix RSS reporting on macOS\n\n> NOTE: This is a duplicate of #98164, which I closed because I borked my rustc fork\n\nCurrently, `rustc_data_structures::profiling::get_resident_set_size()` always returns `None` on macOS. This is because\nmacOS does not implement procfs used in the unix version of the function:\n\n```rust\n...\nelse if #[cfg(unix)] {\n        pub fn get_resident_set_size() -> Option<usize> {\n            let field = 1;\n            let contents = fs::read(\"/proc/self/statm\").ok()?;\n            let contents = String::from_utf8(contents).ok()?;\n            let s = contents.split_whitespace().nth(field)?;\n            let npages = s.parse::<usize>().ok()?;\n            Some(npages * 4096)\n        }\n...\n```\n\nThe proposed solution uses libproc, and more specifically `proc_pidinfo`, which has been available on macOS since 10.5 if the function signature inside libproc.h is to be believed:\n\n```c\nint proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_2_0);\n```", "tree": {"sha": "6636a9b9a22532944788ea71485dea23fb00aa4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6636a9b9a22532944788ea71485dea23fb00aa4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56b77869141efecc9daef02654bf0add552ad398", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiutEjCRBK7hj4Ov3rIwAAAkYIABfbgiJDznT1tttdY249p/UA\nWYxnJfXxTeJPKxbSrOjFyk/yOU7yDeQzc1zFuhBUOj+dRTcSWJhgeCEdYsV01+Rt\nZVkObWu2R6e6KxY0s5rHmgiQEijNdAnDiuVIiursyypHcLCjWTKSNr0hZNP/vork\nZ6VBns9iO/V5uPlLx0h3NAYfg6l4aaPOQC22YfgDJ1KJzL9w97n7IycGo9cSs8Ts\nVZOP4FrUQind+DQkyOQWC5jSFRUFJrBBThftUW1Q+VkfuJKc8sL1dzMdnVdkV0fx\nPLLby1fsAdSCg+AryJVCCd+BANdmE5YFeXlTMt/TI9FCDUMpQ5oBZlZYaTZtRpk=\n=/p1M\n-----END PGP SIGNATURE-----\n", "payload": "tree 6636a9b9a22532944788ea71485dea23fb00aa4e\nparent ec8477fea1989bb187ec026b2dad3e4b89d60e91\nparent c41630735c00187d54ae30ff0a7a98c1d689b831\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1656410403 +0530\ncommitter GitHub <noreply@github.com> 1656410403 +0530\n\nRollup merge of #98384 - rdzhaafar:fix-macos-rss-reporting, r=davidtwco,michaelwoerister\n\nFix RSS reporting on macOS\n\n> NOTE: This is a duplicate of #98164, which I closed because I borked my rustc fork\n\nCurrently, `rustc_data_structures::profiling::get_resident_set_size()` always returns `None` on macOS. This is because\nmacOS does not implement procfs used in the unix version of the function:\n\n```rust\n...\nelse if #[cfg(unix)] {\n        pub fn get_resident_set_size() -> Option<usize> {\n            let field = 1;\n            let contents = fs::read(\"/proc/self/statm\").ok()?;\n            let contents = String::from_utf8(contents).ok()?;\n            let s = contents.split_whitespace().nth(field)?;\n            let npages = s.parse::<usize>().ok()?;\n            Some(npages * 4096)\n        }\n...\n```\n\nThe proposed solution uses libproc, and more specifically `proc_pidinfo`, which has been available on macOS since 10.5 if the function signature inside libproc.h is to be believed:\n\n```c\nint proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_2_0);\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56b77869141efecc9daef02654bf0add552ad398", "html_url": "https://github.com/rust-lang/rust/commit/56b77869141efecc9daef02654bf0add552ad398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56b77869141efecc9daef02654bf0add552ad398/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec8477fea1989bb187ec026b2dad3e4b89d60e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec8477fea1989bb187ec026b2dad3e4b89d60e91", "html_url": "https://github.com/rust-lang/rust/commit/ec8477fea1989bb187ec026b2dad3e4b89d60e91"}, {"sha": "c41630735c00187d54ae30ff0a7a98c1d689b831", "url": "https://api.github.com/repos/rust-lang/rust/commits/c41630735c00187d54ae30ff0a7a98c1d689b831", "html_url": "https://github.com/rust-lang/rust/commit/c41630735c00187d54ae30ff0a7a98c1d689b831"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "d8b26f9840b63e9ed9891b7f524f51aa782efd20", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56b77869141efecc9daef02654bf0add552ad398/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b77869141efecc9daef02654bf0add552ad398/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=56b77869141efecc9daef02654bf0add552ad398", "patch": "@@ -826,6 +826,24 @@ cfg_if! {\n                 }\n             }\n         }\n+    } else if #[cfg(target_os = \"macos\")] {\n+        pub fn get_resident_set_size() -> Option<usize> {\n+            use libc::{c_int, c_void, getpid, proc_pidinfo, proc_taskinfo, PROC_PIDTASKINFO};\n+            use std::mem;\n+            const PROC_TASKINFO_SIZE: c_int = mem::size_of::<proc_taskinfo>() as c_int;\n+\n+            unsafe {\n+                let mut info: proc_taskinfo = mem::zeroed();\n+                let info_ptr = &mut info as *mut proc_taskinfo as *mut c_void;\n+                let pid = getpid() as c_int;\n+                let ret = proc_pidinfo(pid, PROC_PIDTASKINFO, 0, info_ptr, PROC_TASKINFO_SIZE);\n+                if ret == PROC_TASKINFO_SIZE {\n+                    Some(info.pti_resident_size as usize)\n+                } else {\n+                    None\n+                }\n+            }\n+        }\n     } else if #[cfg(unix)] {\n         pub fn get_resident_set_size() -> Option<usize> {\n             let field = 1;"}]}