{"sha": "5225feceaa345e55bdd3b45007555f6d477faf55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMjVmZWNlYWEzNDVlNTViZGQzYjQ1MDA3NTU1ZjZkNDc3ZmFmNTU=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-21T15:11:34Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-25T11:40:26Z"}, "message": "shadowing detection", "tree": {"sha": "da8b93c37efb3907eba3989f5fd981733acba2cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da8b93c37efb3907eba3989f5fd981733acba2cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5225feceaa345e55bdd3b45007555f6d477faf55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5225feceaa345e55bdd3b45007555f6d477faf55", "html_url": "https://github.com/rust-lang/rust/commit/5225feceaa345e55bdd3b45007555f6d477faf55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5225feceaa345e55bdd3b45007555f6d477faf55/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "209e6981a3ec67ddc8d94cb46d876550948f6238", "url": "https://api.github.com/repos/rust-lang/rust/commits/209e6981a3ec67ddc8d94cb46d876550948f6238", "html_url": "https://github.com/rust-lang/rust/commit/209e6981a3ec67ddc8d94cb46d876550948f6238"}], "stats": {"total": 155, "additions": 93, "deletions": 62}, "files": [{"sha": "66411e432c91f2c9dde3a9b327c47d877a54d093", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5225feceaa345e55bdd3b45007555f6d477faf55/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5225feceaa345e55bdd3b45007555f6d477faf55/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5225feceaa345e55bdd3b45007555f6d477faf55", "patch": "@@ -44,9 +44,9 @@ ptr_arg                  | allow   | fn arguments of the type `&Vec<...>` or `&S\n range_step_by_zero       | warn    | using Range::step_by(0), which produces an infinite iterator\n redundant_closure        | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n result_unwrap_used       | allow   | using `Result.unwrap()`, which might be better handled\n-shadow_foreign           | warn    | The name is re-bound without even using the original value\n shadow_reuse             | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n shadow_same              | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n+shadow_unrelated         | warn    | The name is re-bound without even using the original value\n single_match             | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n str_to_string            | warn    | using `to_string()` on a str, which should be `to_owned()`\n string_add               | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead"}, {"sha": "33788190fd3f95d0918ea753299e3170ec6b0355", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5225feceaa345e55bdd3b45007555f6d477faf55/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5225feceaa345e55bdd3b45007555f6d477faf55/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5225feceaa345e55bdd3b45007555f6d477faf55", "patch": "@@ -76,9 +76,9 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box matches::MatchPass as LintPassObject);\n \n     reg.register_lint_group(\"shadow\", vec![\n-        shadow::SHADOW_FOREIGN,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,\n+        shadow::SHADOW_UNRELATED,\n     ]);\n \n     reg.register_lint_group(\"clippy\", vec![\n@@ -114,9 +114,9 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         ranges::RANGE_STEP_BY_ZERO,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n-        shadow::SHADOW_FOREIGN,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,\n+        shadow::SHADOW_UNRELATED,\n         strings::STRING_ADD,\n         strings::STRING_ADD_ASSIGN,\n         types::BOX_VEC,"}, {"sha": "40043be109a6ade07b227ffe428adc3ccbc4db59", "filename": "src/methods.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5225feceaa345e55bdd3b45007555f6d477faf55/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5225feceaa345e55bdd3b45007555f6d477faf55/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=5225feceaa345e55bdd3b45007555f6d477faf55", "patch": "@@ -41,7 +41,8 @@ impl LintPass for MethodsPass {\n                 if obj_ty.sty == ty::TyStr {\n                     span_lint(cx, STR_TO_STRING, expr.span, \"`str.to_owned()` is faster\");\n                 } else if match_type(cx, obj_ty, &STRING_PATH) {\n-                    span_lint(cx, STRING_TO_STRING, expr.span, \"`String.to_string()` is a no-op\");\n+                    span_lint(cx, STRING_TO_STRING, expr.span, \"`String.to_string()` is a no-op; use \\\n+                                                                `clone()` to make a copy\");\n                 }\n             }\n         }"}, {"sha": "bbd146f77a5ace04dfd8016b7469c477dc7980fb", "filename": "src/shadow.rs", "status": "modified", "additions": 87, "deletions": 57, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/5225feceaa345e55bdd3b45007555f6d477faf55/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5225feceaa345e55bdd3b45007555f6d477faf55/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=5225feceaa345e55bdd3b45007555f6d477faf55", "patch": "@@ -1,3 +1,4 @@\n+use std::ops::Deref;\n use syntax::ast::*;\n use syntax::codemap::Span;\n use syntax::visit::FnKind;\n@@ -10,15 +11,15 @@ declare_lint!(pub SHADOW_SAME, Allow,\n declare_lint!(pub SHADOW_REUSE, Allow,\n     \"rebinding a name to an expression that re-uses the original value, e.g. \\\n     `let x = x + 1`\");\n-declare_lint!(pub SHADOW_FOREIGN, Warn,\n+declare_lint!(pub SHADOW_UNRELATED, Warn,\n     \"The name is re-bound without even using the original value\");\n \n #[derive(Copy, Clone)]\n pub struct ShadowPass;\n \n impl LintPass for ShadowPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(SHADOW_SAME, SHADOW_REUSE, SHADOW_FOREIGN)\n+        lint_array!(SHADOW_SAME, SHADOW_REUSE, SHADOW_UNRELATED)\n     }\n \n     fn check_fn(&mut self, cx: &Context, _: FnKind, decl: &FnDecl,\n@@ -44,10 +45,6 @@ fn named(pat: &Pat) -> Option<Name> {\n     } else { None }\n }\n \n-fn add(bindings: &mut Vec<Name>, pat: &Pat) {\n-    named(pat).map(|name| bindings.push(name));\n-}\n-\n fn check_block(cx: &Context, block: &Block, bindings: &mut Vec<Name>) {\n     let len = bindings.len();\n     for stmt in &block.stmts {\n@@ -65,41 +62,53 @@ fn check_block(cx: &Context, block: &Block, bindings: &mut Vec<Name>) {\n fn check_decl(cx: &Context, decl: &Decl, bindings: &mut Vec<Name>) {\n     if in_external_macro(cx, decl.span) { return; }\n     if let DeclLocal(ref local) = decl.node {\n-        let Local{ ref pat, ref ty, ref init, id: _, span: _ } = **local;\n-        if let &Some(ref t) = ty { check_ty(cx, t, bindings); }\n-        named(pat).map(|name| if bindings.contains(&name) {\n-            if let &Some(ref o) = init {\n-                if in_external_macro(cx, o.span) { return; }\n+        let Local{ ref pat, ref ty, ref init, id: _, span } = **local;\n+        if let &Some(ref t) = ty { check_ty(cx, t, bindings) }\n+        check_pat(cx, pat, init, span, bindings);\n+        if let &Some(ref o) = init { check_expr(cx, o, bindings) }\n+    }\n+}\n+\n+fn check_pat<T>(cx: &Context, pat: &Pat, init: &Option<T>, span: Span,  \n+        bindings: &mut Vec<Name>) where T: Deref<Target=Expr> {\n+    //TODO: match more stuff / destructuring\n+    named(pat).map(|name| {\n+        if let &Some(ref o) = init {\n+            if !in_external_macro(cx, o.span) {\n                 check_expr(cx, o, bindings);\n-                bindings.push(name);\n-                lint_shadow(cx, name, decl.span, pat.span, o);\n             }\n-        });\n-        add(bindings, pat);\n-        if let &Some(ref o) = init {\n-            check_expr(cx, o, bindings)\n         }\n-    }\n+        if bindings.contains(&name) {\n+            lint_shadow(cx, name, span, pat.span, init);\n+        }\n+        bindings.push(name);\n+    });\n }\n \n-fn lint_shadow(cx: &Context, name: Name, span: Span, lspan: Span, init: &Expr) {\n-    if is_self_shadow(name, init) {\n-        span_lint(cx, SHADOW_SAME, span, &format!(\n-            \"{} is shadowed by itself in {}\",\n-            snippet(cx, lspan, \"_\"),\n-            snippet(cx, init.span, \"..\")));\n-    } else {\n-        if contains_self(name, init) {\n-            span_lint(cx, SHADOW_REUSE, span, &format!(\n-                \"{} is shadowed by {} which reuses the original value\",\n+fn lint_shadow<T>(cx: &Context, name: Name, span: Span, lspan: Span, init: \n+        &Option<T>) where T: Deref<Target=Expr> {\n+    if let &Some(ref expr) = init {\n+        if is_self_shadow(name, expr) {\n+            span_lint(cx, SHADOW_SAME, span, &format!(\n+                \"{} is shadowed by itself in {}\",\n                 snippet(cx, lspan, \"_\"),\n-                snippet(cx, init.span, \"..\")));\n+                snippet(cx, expr.span, \"..\")));\n         } else {\n-            span_lint(cx, SHADOW_FOREIGN, span, &format!(\n-                \"{} is shadowed by {} in this declaration\",\n-                snippet(cx, lspan, \"_\"),\n-                snippet(cx, init.span, \"..\")));\n+            if contains_self(name, expr) {\n+                span_lint(cx, SHADOW_REUSE, span, &format!(\n+                    \"{} is shadowed by {} which reuses the original value\",\n+                    snippet(cx, lspan, \"_\"),\n+                    snippet(cx, expr.span, \"..\")));\n+            } else {\n+                span_lint(cx, SHADOW_UNRELATED, span, &format!(\n+                    \"{} is shadowed by {} in this declaration\",\n+                    snippet(cx, lspan, \"_\"),\n+                    snippet(cx, expr.span, \"..\")));\n+            }\n         }\n+    } else {\n+        span_lint(cx, SHADOW_UNRELATED, span, &format!(\n+            \"{} is shadowed in this declaration\", snippet(cx, lspan, \"_\")));\n     }\n }\n \n@@ -120,26 +129,21 @@ fn check_expr(cx: &Context, expr: &Expr, bindings: &mut Vec<Name>) {\n             check_block(cx, then, bindings);\n             if let &Some(ref o) = otherwise { check_expr(cx, o, bindings); }\n         },\n-        ExprIfLet(ref pat, ref e, ref block, ref otherwise) => {\n-            check_expr(cx, e, bindings);\n-            let len = bindings.len();\n-            add(bindings, pat);\n-            check_block(cx, block, bindings);\n-            if let &Some(ref o) = otherwise { check_expr(cx, o, bindings); }\n-            bindings.truncate(len);\n-        },\n         ExprWhile(ref cond, ref block, _) => {\n             check_expr(cx, cond, bindings);\n             check_block(cx, block, bindings);\n         },\n-        ExprWhileLet(ref pat, ref e, ref block, _) |\n-        ExprForLoop(ref pat, ref e, ref block, _) => {\n-            check_expr(cx, e, bindings);\n-            let len = bindings.len();\n-            add(bindings, pat);\n-            check_block(cx, block, bindings);\n-            bindings.truncate(len);\n-        },\n+        ExprMatch(ref init, ref arms, _) =>\n+            for ref arm in arms {\n+                for ref pat in &arm.pats {\n+                    //TODO: This is ugly, but needed to get the right type\n+                    check_pat(cx, pat, &Some(&**init), pat.span, bindings);\n+                }\n+                if let Some(ref guard) = arm.guard {\n+                    check_expr(cx, guard, bindings);\n+                }\n+                check_expr(cx, &*arm.body, bindings);\n+            },\n         _ => ()\n     }\n }\n@@ -169,12 +173,15 @@ fn is_self_shadow(name: Name, expr: &Expr) -> bool {\n             map_or(false, |ref e| is_self_shadow(name, e)),\n         ExprUnary(op, ref inner) => (UnUniq == op || UnDeref == op) &&\n             is_self_shadow(name, inner),\n-        ExprPath(_, ref path) => path.segments.len() == 1 &&\n-            path.segments[0].identifier.name == name,\n+        ExprPath(_, ref path) => path_eq_name(name, path),\n         _ => false,\n     }\n }\n \n+fn path_eq_name(name: Name, path: &Path) -> bool {\n+    path.segments.len() == 1 && path.segments[0].identifier.name == name\n+}\n+\n fn contains_self(name: Name, expr: &Expr) -> bool {\n     match expr.node {\n         ExprUnary(_, ref e) | ExprParen(ref e) | ExprField(ref e, _) |\n@@ -193,13 +200,11 @@ fn contains_self(name: Name, expr: &Expr) -> bool {\n         ExprIf(ref cond, ref then, ref otherwise) =>\n             contains_self(name, cond) || contains_block_self(name, then) ||\n             otherwise.as_ref().map_or(false, |ref e| contains_self(name, e)),\n-        ExprIfLet(_, ref e, ref block, ref otherwise) =>\n-            contains_self(name, e) || contains_block_self(name, block) ||\n-            otherwise.as_ref().map_or(false, |ref o| contains_self(name, o)),\n-        ExprWhile(ref e, ref block, _) |\n-        ExprWhileLet(_, ref e, ref block, _) |\n-        ExprForLoop(_, ref e, ref block, _) =>\n+        ExprWhile(ref e, ref block, _)  =>\n             contains_self(name, e) || contains_block_self(name, block),\n+        ExprMatch(ref e, ref arms, _) => \n+            arms.iter().any(|ref arm| arm.pats.iter().any(|ref pat| \n+                contains_pat_self(name, pat))) || contains_self(name, e),\n         ExprPath(_, ref path) => path.segments.len() == 1 &&\n             path.segments[0].identifier.name == name,\n         _ => false\n@@ -211,6 +216,9 @@ fn contains_block_self(name: Name, block: &Block) -> bool {\n         match stmt.node {\n             StmtDecl(ref decl, _) =>\n             if let DeclLocal(ref local) = decl.node {\n+                //TODO: We don't currently handle the case where the name\n+                //is shadowed wiithin the block; this means code including this\n+                //degenerate pattern will get the wrong warning.\n                 if let Some(ref init) = local.init {\n                     if contains_self(name, init) { return true; }\n                 }\n@@ -222,3 +230,25 @@ fn contains_block_self(name: Name, block: &Block) -> bool {\n     }\n     if let Some(ref e) = block.expr { contains_self(name, e) } else { false }\n }\n+\n+fn contains_pat_self(name: Name, pat: &Pat) -> bool {\n+    match pat.node {\n+        PatIdent(_, ref ident, ref inner) => name == ident.node.name ||\n+            inner.as_ref().map_or(false, |ref p| contains_pat_self(name, p)),\n+        PatEnum(_, ref opats) => opats.as_ref().map_or(false, \n+            |pats| pats.iter().any(|p| contains_pat_self(name, p))),\n+        PatQPath(_, ref path) => path_eq_name(name, path),\n+        PatStruct(_, ref fieldpats, _) => fieldpats.iter().any(\n+            |ref fp| contains_pat_self(name, &fp.node.pat)),\n+        PatTup(ref ps) => ps.iter().any(|ref p| contains_pat_self(name, p)),\n+        PatBox(ref p) |\n+        PatRegion(ref p, _) => contains_pat_self(name, p),\n+        PatRange(ref from, ref until) => \n+            contains_self(name, from) || contains_self(name, until),\n+        PatVec(ref pre, ref opt, ref post) =>\n+            pre.iter().any(|ref p| contains_pat_self(name, p)) || \n+                opt.as_ref().map_or(false, |ref p| contains_pat_self(name, p)) ||\n+                post.iter().any(|ref p| contains_pat_self(name, p)),\n+        _ => false,\n+    }\n+}"}, {"sha": "a75cd0bf3f26a07040cf92d6b771e9e6387b520b", "filename": "tests/compile-fail/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5225feceaa345e55bdd3b45007555f6d477faf55/tests%2Fcompile-fail%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5225feceaa345e55bdd3b45007555f6d477faf55/tests%2Fcompile-fail%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fapprox_const.rs?ref=5225feceaa345e55bdd3b45007555f6d477faf55", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #[deny(approx_constant)]\n-#[allow(unused, shadow_foreign)]\n+#[allow(unused, shadow_unrelated)]\n fn main() {\n     let my_e = 2.7182; //~ERROR approximate value of `f{32, 64}::E` found\n     let almost_e = 2.718; //~ERROR approximate value of `f{32, 64}::E` found"}]}