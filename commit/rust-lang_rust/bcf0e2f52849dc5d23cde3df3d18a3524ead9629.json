{"sha": "bcf0e2f52849dc5d23cde3df3d18a3524ead9629", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZjBlMmY1Mjg0OWRjNWQyM2NkZTNkZjNkMThhMzUyNGVhZDk2Mjk=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-26T03:13:23Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-13T09:28:50Z"}, "message": "Fix assoc-type test", "tree": {"sha": "94cdfa85bc348eb17ae7afbbbd8678999c651ed2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94cdfa85bc348eb17ae7afbbbd8678999c651ed2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf0e2f52849dc5d23cde3df3d18a3524ead9629", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEWO1IACgkQAn35M4hi\nrd0v1g//ZlIydrilJRJ9WsZuoGH5w8UUtPoRMOjyBuc/QlENbFtg1s/4Ems262wt\nCAlYvbaVEM1nTnG/+Ytn7ks4JrbnR8DUpcHoc+vqAQABf2qzhzZZUPG3d6lWlb1F\nQKIJ0bg7e4vXFvspL8uvuu2pFNkcZBZztFtsm12MR+FoF1u/efOhM6D8hZ4R0mvt\nk4wTUKrryME7lslAB3GCoiZPRXJtQANgRGmodu4HCSevFAAaB/v7bal1KTamUnC+\nmgnQRFBE7INXQEEqj9jgzMs9VvSgsuBYQNeB/KqneOmoPLkAVq4N0n/5GI0qPh64\nTJSuMshcTsefBp3Rlpo4lHCvVihJUdlJpAcQBRwhmL2Pkl7YwKQwy+cjyljLNjYb\nQTBj+o3PdDdrTky6eNxfUR+Ewmer3i+z/Jrcm2TGc8aMf1BibZWF4vyABx3Tmy4t\nomNGSHwQGLb/KGYIQdYuvSwlXaMCOms5GpzDzGRyOV5cNm4J23N8tgejK0ZoTVNw\n4SV7mURwjDkPDSnJ4l6kDFP4/XPUmAFG6nGvDqN5AYR6aZhCyiH+2sDcVlgcoxJ+\nr89zaDdiUau5tULowJaC751XyvTPe32z5OjOAANbnwBdVZdTR57ggK0JVp7CLvsT\nlOEFJGJ49UXp8tcIaXrOugub3QKVkfAzFeTFeg3/wR16X/xytEQ=\n=0e7+\n-----END PGP SIGNATURE-----", "payload": "tree 94cdfa85bc348eb17ae7afbbbd8678999c651ed2\nparent 01bb3710b5e7114a470f07b6d0463a70ae728607\nauthor Deadbeef <ent3rm4n@gmail.com> 1627269203 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1628846930 +0000\n\nFix assoc-type test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf0e2f52849dc5d23cde3df3d18a3524ead9629", "html_url": "https://github.com/rust-lang/rust/commit/bcf0e2f52849dc5d23cde3df3d18a3524ead9629", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf0e2f52849dc5d23cde3df3d18a3524ead9629/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01bb3710b5e7114a470f07b6d0463a70ae728607", "url": "https://api.github.com/repos/rust-lang/rust/commits/01bb3710b5e7114a470f07b6d0463a70ae728607", "html_url": "https://github.com/rust-lang/rust/commit/01bb3710b5e7114a470f07b6d0463a70ae728607"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "8cc57f952ad4bf82dfff8040b71ea008609c83ab", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0e2f52849dc5d23cde3df3d18a3524ead9629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0e2f52849dc5d23cde3df3d18a3524ead9629/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=bcf0e2f52849dc5d23cde3df3d18a3524ead9629", "patch": "@@ -1,3 +1,6 @@\n+use rustc_hir as hir;\n+use rustc_middle::ty::PredicateKind;\n+\n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n use crate::traits::{\n@@ -46,6 +49,12 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> bool {\n+        if let PredicateKind::Trait(pred) = obligation.predicate.kind().skip_binder() {\n+            if let hir::Constness::Const = pred.constness {\n+                // do not evaluate to holds when we have a const predicate.\n+                return false;\n+            }\n+        }\n         self.evaluate_obligation_no_overflow(obligation).must_apply_considering_regions()\n     }\n "}, {"sha": "8d72adb6b61edaf5ed406afa525c10f09cd06e6a", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0e2f52849dc5d23cde3df3d18a3524ead9629/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0e2f52849dc5d23cde3df3d18a3524ead9629/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=bcf0e2f52849dc5d23cde3df3d18a3524ead9629", "patch": "@@ -1,8 +1,4 @@\n-// ignore-test\n-//\n-// FIXME: This test should fail since, within a const impl of `Foo`, the bound on `Foo::Bar` should\n-// require a const impl of `Add` for the associated type.\n-\n+// FIXME(fee1-dead): this should have a better error message\n #![feature(const_trait_impl)]\n \n struct NonConstAdd(i32);\n@@ -21,6 +17,7 @@ trait Foo {\n \n impl const Foo for NonConstAdd {\n     type Bar = NonConstAdd;\n+    //~^ ERROR\n }\n \n fn main() {}"}, {"sha": "1fdc963e7b2db76675f2c40ab33c27338a67892a", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0e2f52849dc5d23cde3df3d18a3524ead9629/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0e2f52849dc5d23cde3df3d18a3524ead9629/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=bcf0e2f52849dc5d23cde3df3d18a3524ead9629", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: cannot add `NonConstAdd` to `NonConstAdd`\n+  --> $DIR/assoc-type.rs:19:5\n+   |\n+LL |     type Bar: std::ops::Add;\n+   |               ------------- required by this bound in `Foo::Bar`\n+...\n+LL |     type Bar = NonConstAdd;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n+   |\n+   = help: the trait `Add` is not implemented for `NonConstAdd`\n+help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+   |\n+LL | impl const Foo for NonConstAdd where NonConstAdd: Add {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}