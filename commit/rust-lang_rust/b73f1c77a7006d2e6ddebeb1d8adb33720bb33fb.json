{"sha": "b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "node_id": "C_kwDOAAsO6NoAKGI3M2YxYzc3YTcwMDZkMmU2ZGRlYmViMWQ4YWRiMzM3MjBiYjMzZmI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-23T05:43:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-23T05:43:50Z"}, "message": "Rollup merge of #97254 - jhpratt:remove-crate-vis, r=cjgillot\n\nRemove feature: `crate` visibility modifier\n\nFCP completed in #53120.", "tree": {"sha": "be1b5820fe109f83774ccf49f1a70c347998c26e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be1b5820fe109f83774ccf49f1a70c347998c26e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiix8WCRBK7hj4Ov3rIwAAAM8IAE+PAfDcsVWZK6j2iF8YYTyv\nlNgMF96Nc1Y+HNG4eq1L01Pm5PatDQK3N/t0b6NS0SN0MoA2cYczOQMaSRh0uyzD\nuMFSnHVXR5WfsYHRoH3Q5MUBP8N8oA9wrtarBsP3dfFYAjfNIO654mhyfMXAd780\nlZl1fjPctTyMsz9HBbDbgMwje1A/mCO0UJt58e438izBX4Vqp6bR0Mh8m7b7O3xk\nbPnbeC1BAmZKzi/SJOIT5JRT9QRGMwDXviOKjP8duFMsTC2Ide7vepyeg7bQyPZ0\nQN0NsT7F6+/c2VQApKSkEsylNOIsHoXJaNCqjoHAT2MjTOxcbpjptP1QaeTQwqg=\n=nTBu\n-----END PGP SIGNATURE-----\n", "payload": "tree be1b5820fe109f83774ccf49f1a70c347998c26e\nparent e5cf3cb97d228f7c5ac691ebf3f754bec5a92852\nparent 7b987e34c083c81a9e70cb1d387759ac98c752c0\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653284630 +0200\ncommitter GitHub <noreply@github.com> 1653284630 +0200\n\nRollup merge of #97254 - jhpratt:remove-crate-vis, r=cjgillot\n\nRemove feature: `crate` visibility modifier\n\nFCP completed in #53120.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "html_url": "https://github.com/rust-lang/rust/commit/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5cf3cb97d228f7c5ac691ebf3f754bec5a92852", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5cf3cb97d228f7c5ac691ebf3f754bec5a92852", "html_url": "https://github.com/rust-lang/rust/commit/e5cf3cb97d228f7c5ac691ebf3f754bec5a92852"}, {"sha": "7b987e34c083c81a9e70cb1d387759ac98c752c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b987e34c083c81a9e70cb1d387759ac98c752c0", "html_url": "https://github.com/rust-lang/rust/commit/7b987e34c083c81a9e70cb1d387759ac98c752c0"}], "stats": {"total": 155, "additions": 19, "deletions": 136}, "files": [{"sha": "b81f7a2427076a028a3cd5278d2f4a1880a877c8", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -2552,15 +2552,6 @@ impl PolyTraitRef {\n     }\n }\n \n-#[derive(Copy, Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n-pub enum CrateSugar {\n-    /// Source is `pub(crate)`.\n-    PubCrate,\n-\n-    /// Source is (just) `crate`.\n-    JustCrate,\n-}\n-\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct Visibility {\n     pub kind: VisibilityKind,\n@@ -2571,7 +2562,6 @@ pub struct Visibility {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum VisibilityKind {\n     Public,\n-    Crate(CrateSugar),\n     Restricted { path: P<Path>, id: NodeId },\n     Inherited,\n }"}, {"sha": "85bb52964865bab31cae06050335eb19295e823a", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -1469,7 +1469,7 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n \n pub fn noop_visit_vis<T: MutVisitor>(visibility: &mut Visibility, vis: &mut T) {\n     match &mut visibility.kind {\n-        VisibilityKind::Public | VisibilityKind::Crate(_) | VisibilityKind::Inherited => {}\n+        VisibilityKind::Public | VisibilityKind::Inherited => {}\n         VisibilityKind::Restricted { path, id } => {\n             vis.visit_path(path);\n             vis.visit_id(id);"}, {"sha": "f0b94047ed9daa5517007163f3441c6db1c661f2", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -697,18 +697,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n         visit::walk_assoc_item(self, i, ctxt)\n     }\n-\n-    fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n-        if let ast::VisibilityKind::Crate(ast::CrateSugar::JustCrate) = vis.kind {\n-            gate_feature_post!(\n-                &self,\n-                crate_visibility_modifier,\n-                vis.span,\n-                \"`crate` visibility modifier is experimental\"\n-            );\n-        }\n-        visit::walk_vis(self, vis)\n-    }\n }\n \n pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n@@ -770,7 +758,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n \n     gate_all!(trait_alias, \"trait aliases are experimental\");\n     gate_all!(associated_type_bounds, \"associated type bounds are unstable\");\n-    gate_all!(crate_visibility_modifier, \"`crate` visibility modifier is experimental\");\n     gate_all!(decl_macro, \"`macro` is experimental\");\n     gate_all!(box_patterns, \"box pattern syntax is experimental\");\n     gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");"}, {"sha": "67b539a7ad41b77f25b231fe34c89773704ed1b8", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -403,13 +403,9 @@ impl<'a> State<'a> {\n     pub(crate) fn print_visibility(&mut self, vis: &ast::Visibility) {\n         match vis.kind {\n             ast::VisibilityKind::Public => self.word_nbsp(\"pub\"),\n-            ast::VisibilityKind::Crate(sugar) => match sugar {\n-                ast::CrateSugar::PubCrate => self.word_nbsp(\"pub(crate)\"),\n-                ast::CrateSugar::JustCrate => self.word_nbsp(\"crate\"),\n-            },\n             ast::VisibilityKind::Restricted { ref path, .. } => {\n                 let path = Self::to_string(|s| s.print_path(path, false, 0));\n-                if path == \"self\" || path == \"super\" {\n+                if path == \"crate\" || path == \"self\" || path == \"super\" {\n                     self.word_nbsp(format!(\"pub({})\", path))\n                 } else {\n                     self.word_nbsp(format!(\"pub(in {})\", path))"}, {"sha": "1956327dfaba4be5c1ba9f5e8b9e4dee10987e91", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -351,8 +351,6 @@ declare_features! (\n     (active, const_trait_impl, \"1.42.0\", Some(67792), None),\n     /// Allows the `?` operator in const contexts.\n     (active, const_try, \"1.56.0\", Some(74935), None),\n-    /// Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n-    (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n     /// Allows non-builtin attributes in inner attribute position.\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n     /// Allows custom test frameworks with `#![test_runner]` and `#[test_case]`."}, {"sha": "b546662dc1496bf090c30e9599bf44dd21883553", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -72,6 +72,8 @@ declare_features! (\n     /// Allows `T: ?const Trait` syntax in bounds.\n     (removed, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None,\n      Some(\"Removed in favor of `~const` bound in #![feature(const_trait_impl)]\")),\n+    /// Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n+    (removed, crate_visibility_modifier, \"1.63.0\", Some(53120), None, Some(\"removed in favor of `pub(crate)`\")),\n     /// Allows using custom attributes (RFC 572).\n     (removed, custom_attribute, \"1.0.0\", Some(29642), None,\n      Some(\"removed in favor of `#![register_tool]` and `#![register_attr]`\")),"}, {"sha": "9317858aed909812b867788927a24d5c748ff9f4", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -1372,17 +1372,11 @@ impl UnreachablePub {\n             let def_span = cx.tcx.sess.source_map().guess_head_span(span);\n             cx.struct_span_lint(UNREACHABLE_PUB, def_span, |lint| {\n                 let mut err = lint.build(&format!(\"unreachable `pub` {}\", what));\n-                let replacement = if cx.tcx.features().crate_visibility_modifier {\n-                    \"crate\"\n-                } else {\n-                    \"pub(crate)\"\n-                }\n-                .to_owned();\n \n                 err.span_suggestion(\n                     vis_span,\n                     \"consider restricting its visibility\",\n-                    replacement,\n+                    \"pub(crate)\".to_owned(),\n                     applicability,\n                 );\n                 if exportable {"}, {"sha": "e99347206fe50e9075dc77f7e27c18edcc0d1e2d", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -302,8 +302,7 @@ impl<'a> Parser<'a> {\n \n     /// When parsing a statement, would the start of a path be an item?\n     pub(super) fn is_path_start_item(&mut self) -> bool {\n-        self.is_crate_vis() // no: `crate::b`, yes: `crate $item`\n-        || self.is_kw_followed_by_ident(kw::Union) // no: `union::b`, yes: `union U { .. }`\n+        self.is_kw_followed_by_ident(kw::Union) // no: `union::b`, yes: `union U { .. }`\n         || self.check_auto_or_unsafe_trait_item() // no: `auto::b`, yes: `auto trait X { .. }`\n         || self.is_async_fn() // no(2015): `async::b`, yes: `async fn`\n         || matches!(self.is_macro_rules_item(), IsMacroRulesItem::Yes{..}) // no: `macro_rules::b`, yes: `macro_rules! mac`"}, {"sha": "6e6c1ffe747375853822230e5be16add2f1f3c43", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -25,7 +25,7 @@ use rustc_ast::tokenstream::{self, DelimSpan, Spacing};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::AttrId;\n use rustc_ast::DUMMY_NODE_ID;\n-use rustc_ast::{self as ast, AnonConst, AttrStyle, AttrVec, Const, CrateSugar, Extern};\n+use rustc_ast::{self as ast, AnonConst, AttrStyle, AttrVec, Const, Extern};\n use rustc_ast::{Async, Expr, ExprKind, MacArgs, MacArgsEq, MacDelimiter, Mutability, StrLit};\n use rustc_ast::{HasAttrs, HasTokens, Unsafe, Visibility, VisibilityKind};\n use rustc_ast_pretty::pprust;\n@@ -1245,30 +1245,15 @@ impl<'a> Parser<'a> {\n         res\n     }\n \n-    fn is_crate_vis(&self) -> bool {\n-        self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)\n-    }\n-\n-    /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,\n-    /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.\n+    /// Parses `pub` and `pub(in path)` plus shortcuts `pub(crate)` for `pub(in crate)`, `pub(self)`\n+    /// for `pub(in self)` and `pub(super)` for `pub(in super)`.\n     /// If the following element can't be a tuple (i.e., it's a function definition), then\n     /// it's not a tuple struct field), and the contents within the parentheses aren't valid,\n     /// so emit a proper diagnostic.\n     // Public for rustfmt usage.\n     pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {\n         maybe_whole!(self, NtVis, |x| x.into_inner());\n \n-        self.expected_tokens.push(TokenType::Keyword(kw::Crate));\n-        if self.is_crate_vis() {\n-            self.bump(); // `crate`\n-            self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);\n-            return Ok(Visibility {\n-                span: self.prev_token.span,\n-                kind: VisibilityKind::Crate(CrateSugar::JustCrate),\n-                tokens: None,\n-            });\n-        }\n-\n         if !self.eat_keyword(kw::Pub) {\n             // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no\n             // keyword to grab a span from for inherited visibility; an empty span at the\n@@ -1286,20 +1271,7 @@ impl<'a> Parser<'a> {\n             // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.\n             // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so\n             // by the following tokens.\n-            if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)\n-            // account for `pub(crate::foo)`\n-            {\n-                // Parse `pub(crate)`.\n-                self.bump(); // `(`\n-                self.bump(); // `crate`\n-                self.expect(&token::CloseDelim(Delimiter::Parenthesis))?; // `)`\n-                let vis = VisibilityKind::Crate(CrateSugar::PubCrate);\n-                return Ok(Visibility {\n-                    span: lo.to(self.prev_token.span),\n-                    kind: vis,\n-                    tokens: None,\n-                });\n-            } else if self.is_keyword_ahead(1, &[kw::In]) {\n+            if self.is_keyword_ahead(1, &[kw::In]) {\n                 // Parse `pub(in path)`.\n                 self.bump(); // `(`\n                 self.bump(); // `in`\n@@ -1312,11 +1284,11 @@ impl<'a> Parser<'a> {\n                     tokens: None,\n                 });\n             } else if self.look_ahead(2, |t| t == &token::CloseDelim(Delimiter::Parenthesis))\n-                && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])\n+                && self.is_keyword_ahead(1, &[kw::Crate, kw::Super, kw::SelfLower])\n             {\n-                // Parse `pub(self)` or `pub(super)`.\n+                // Parse `pub(crate)`, `pub(self)`, or `pub(super)`.\n                 self.bump(); // `(`\n-                let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`\n+                let path = self.parse_path(PathStyle::Mod)?; // `crate`/`super`/`self`\n                 self.expect(&token::CloseDelim(Delimiter::Parenthesis))?; // `)`\n                 let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n                 return Ok(Visibility {"}, {"sha": "20d9123e411ab2361a1ef9f5c10028accd40448b", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -249,9 +249,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let parent_scope = &self.parent_scope;\n         match vis.kind {\n             ast::VisibilityKind::Public => Ok(ty::Visibility::Public),\n-            ast::VisibilityKind::Crate(..) => {\n-                Ok(ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id()))\n-            }\n             ast::VisibilityKind::Inherited => {\n                 Ok(match self.parent_scope.module.kind {\n                     // Any inherited visibility resolved directly inside an enum or trait"}, {"sha": "b59859dd348e70a323db7504f2865f344782479f", "filename": "src/doc/unstable-book/src/language-features/crate-visibility-modifier.md", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e5cf3cb97d228f7c5ac691ebf3f754bec5a92852/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5cf3cb97d228f7c5ac691ebf3f754bec5a92852/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md?ref=e5cf3cb97d228f7c5ac691ebf3f754bec5a92852", "patch": "@@ -1,20 +0,0 @@\n-# `crate_visibility_modifier`\n-\n-The tracking issue for this feature is: [#53120]\n-\n-[#53120]: https://github.com/rust-lang/rust/issues/53120\n-\n------\n-\n-The `crate_visibility_modifier` feature allows the `crate` keyword to be used\n-as a visibility modifier synonymous to `pub(crate)`, indicating that a type\n-(function, _&c._) is to be visible to the entire enclosing crate, but not to\n-other crates.\n-\n-```rust\n-#![feature(crate_visibility_modifier)]\n-\n-crate struct Foo {\n-    bar: usize,\n-}\n-```"}, {"sha": "0e3f6b168be6b602b8ced5181e712c7b26b6dde1", "filename": "src/test/ui/feature-gates/feature-gate-crate_visibility_modifier.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5cf3cb97d228f7c5ac691ebf3f754bec5a92852/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cf3cb97d228f7c5ac691ebf3f754bec5a92852/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs?ref=e5cf3cb97d228f7c5ac691ebf3f754bec5a92852", "patch": "@@ -1,8 +0,0 @@\n-crate struct Bender { //~ ERROR `crate` visibility modifier is experimental\n-    earth: bool,\n-    fire: bool,\n-    air: bool,\n-    water: bool,\n-}\n-\n-fn main() {}"}, {"sha": "969606375c3e9cb918ab7d28bbf2d9fc4412a08c", "filename": "src/test/ui/feature-gates/feature-gate-crate_visibility_modifier.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5cf3cb97d228f7c5ac691ebf3f754bec5a92852/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5cf3cb97d228f7c5ac691ebf3f754bec5a92852/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr?ref=e5cf3cb97d228f7c5ac691ebf3f754bec5a92852", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `crate` visibility modifier is experimental\n-  --> $DIR/feature-gate-crate_visibility_modifier.rs:1:1\n-   |\n-LL | crate struct Bender {\n-   | ^^^^^\n-   |\n-   = note: see issue #53120 <https://github.com/rust-lang/rust/issues/53120> for more information\n-   = help: add `#![feature(crate_visibility_modifier)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "f246aa26a9d039586271a095083f10ac24c9905b", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -861,10 +861,8 @@ fn test_vis() {\n     // VisibilityKind::Public\n     assert_eq!(stringify_vis!(pub), \"pub \");\n \n-    // VisibilityKind::Crate\n-    assert_eq!(stringify_vis!(crate), \"crate \");\n-\n     // VisibilityKind::Restricted\n+    assert_eq!(stringify_vis!(pub(crate)), \"pub(crate) \");\n     assert_eq!(stringify_vis!(pub(self)), \"pub(self) \");\n     assert_eq!(stringify_vis!(pub(super)), \"pub(super) \");\n     assert_eq!(stringify_vis!(pub(in self)), \"pub(self) \");"}, {"sha": "6487199172e0939faf520c2b473fb88e6309efdb", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -545,7 +545,7 @@ pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n pub fn eq_vis(l: &Visibility, r: &Visibility) -> bool {\n     use VisibilityKind::*;\n     match (&l.kind, &r.kind) {\n-        (Public, Public) | (Inherited, Inherited) | (Crate(_), Crate(_)) => true,\n+        (Public, Public) | (Inherited, Inherited) => true,\n         (Restricted { path: l, .. }, Restricted { path: r, .. }) => eq_path(l, r),\n         _ => false,\n     }"}, {"sha": "8816d7d2f1fe2623da86deca3f056547e42d88bf", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -1361,7 +1361,7 @@ pub(crate) fn format_struct_struct(\n \n fn get_bytepos_after_visibility(vis: &ast::Visibility, default_span: Span) -> BytePos {\n     match vis.kind {\n-        ast::VisibilityKind::Crate(..) | ast::VisibilityKind::Restricted { .. } => vis.span.hi(),\n+        ast::VisibilityKind::Restricted { .. } => vis.span.hi(),\n         _ => default_span.lo(),\n     }\n }"}, {"sha": "58fd95c656e799fafccf22f41a52483495c0ce16", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=b73f1c77a7006d2e6ddebeb1d8adb33720bb33fb", "patch": "@@ -1,7 +1,7 @@\n use std::borrow::Cow;\n \n use rustc_ast::ast::{\n-    self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem, NodeId, Path, Visibility,\n+    self, Attribute, MetaItem, MetaItemKind, NestedMetaItem, NodeId, Path, Visibility,\n     VisibilityKind,\n };\n use rustc_ast::ptr;\n@@ -44,15 +44,7 @@ pub(crate) fn is_same_visibility(a: &Visibility, b: &Visibility) -> bool {\n             VisibilityKind::Restricted { path: q, .. },\n         ) => pprust::path_to_string(p) == pprust::path_to_string(q),\n         (VisibilityKind::Public, VisibilityKind::Public)\n-        | (VisibilityKind::Inherited, VisibilityKind::Inherited)\n-        | (\n-            VisibilityKind::Crate(CrateSugar::PubCrate),\n-            VisibilityKind::Crate(CrateSugar::PubCrate),\n-        )\n-        | (\n-            VisibilityKind::Crate(CrateSugar::JustCrate),\n-            VisibilityKind::Crate(CrateSugar::JustCrate),\n-        ) => true,\n+        | (VisibilityKind::Inherited, VisibilityKind::Inherited) => true,\n         _ => false,\n     }\n }\n@@ -65,8 +57,6 @@ pub(crate) fn format_visibility(\n     match vis.kind {\n         VisibilityKind::Public => Cow::from(\"pub \"),\n         VisibilityKind::Inherited => Cow::from(\"\"),\n-        VisibilityKind::Crate(CrateSugar::PubCrate) => Cow::from(\"pub(crate) \"),\n-        VisibilityKind::Crate(CrateSugar::JustCrate) => Cow::from(\"crate \"),\n         VisibilityKind::Restricted { ref path, .. } => {\n             let Path { ref segments, .. } = **path;\n             let mut segments_iter = segments.iter().map(|seg| rewrite_ident(context, seg.ident));\n@@ -75,7 +65,7 @@ pub(crate) fn format_visibility(\n                     .next()\n                     .expect(\"Non-global path in pub(restricted)?\");\n             }\n-            let is_keyword = |s: &str| s == \"self\" || s == \"super\";\n+            let is_keyword = |s: &str| s == \"crate\" || s == \"self\" || s == \"super\";\n             let path = segments_iter.collect::<Vec<_>>().join(\"::\");\n             let in_str = if is_keyword(&path) { \"\" } else { \"in \" };\n "}]}