{"sha": "e3319e7d1678b011de6af5b99caa4343ce8c4286", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMzE5ZTdkMTY3OGIwMTFkZTZhZjViOTljYWE0MzQzY2U4YzQyODY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-27T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-27T21:55:52Z"}, "message": "liveness: Move body_owner field from IrMaps to Liveness\n\nThe Liveness struct is the only user of body_owner field.  Move the\nfield there.", "tree": {"sha": "76b6d8b08c7514dc4aa1627d86350619b9939b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76b6d8b08c7514dc4aa1627d86350619b9939b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3319e7d1678b011de6af5b99caa4343ce8c4286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3319e7d1678b011de6af5b99caa4343ce8c4286", "html_url": "https://github.com/rust-lang/rust/commit/e3319e7d1678b011de6af5b99caa4343ce8c4286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3319e7d1678b011de6af5b99caa4343ce8c4286/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f7a1cbfd3b55daee191247770627afab09eece2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7a1cbfd3b55daee191247770627afab09eece2", "html_url": "https://github.com/rust-lang/rust/commit/7f7a1cbfd3b55daee191247770627afab09eece2"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "565af3268593e78d317f2b412b3cf1b88bf9823e", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e3319e7d1678b011de6af5b99caa4343ce8c4286/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3319e7d1678b011de6af5b99caa4343ce8c4286/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=e3319e7d1678b011de6af5b99caa4343ce8c4286", "patch": "@@ -168,10 +168,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n }\n \n fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(\n-        module_def_id,\n-        &mut IrMaps::new(tcx, module_def_id).as_deep_visitor(),\n-    );\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx).as_deep_visitor());\n }\n \n pub fn provide(providers: &mut Providers) {\n@@ -227,7 +224,6 @@ enum VarKind {\n \n struct IrMaps<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    body_owner: LocalDefId,\n     live_node_map: HirIdMap<LiveNode>,\n     variable_map: HirIdMap<Variable>,\n     capture_info_map: HirIdMap<Rc<Vec<CaptureInfo>>>,\n@@ -236,10 +232,9 @@ struct IrMaps<'tcx> {\n }\n \n impl IrMaps<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx>, body_owner: LocalDefId) -> IrMaps<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>) -> IrMaps<'tcx> {\n         IrMaps {\n             tcx,\n-            body_owner,\n             live_node_map: HirIdMap::default(),\n             variable_map: HirIdMap::default(),\n             capture_info_map: Default::default(),\n@@ -316,7 +311,7 @@ fn visit_fn<'tcx>(\n \n     // swap in a new set of IR maps for this function body:\n     let def_id = ir.tcx.hir().local_def_id(id);\n-    let mut fn_maps = IrMaps::new(ir.tcx, def_id);\n+    let mut fn_maps = IrMaps::new(ir.tcx);\n \n     // Don't run unused pass for #[derive()]\n     if let FnKind::Method(..) = fk {\n@@ -448,10 +443,7 @@ fn visit_expr<'tcx>(ir: &mut IrMaps<'tcx>, expr: &'tcx Expr<'tcx>) {\n                 }));\n             }\n             ir.set_captures(expr.hir_id, call_caps);\n-            let old_body_owner = ir.body_owner;\n-            ir.body_owner = closure_def_id;\n             intravisit::walk_expr(ir, expr);\n-            ir.body_owner = old_body_owner;\n         }\n \n         // live nodes required for interesting control flow:\n@@ -605,6 +597,7 @@ const ACC_USE: u32 = 4;\n \n struct Liveness<'a, 'tcx> {\n     ir: &'a mut IrMaps<'tcx>,\n+    body_owner: LocalDefId,\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     successors: IndexVec<LiveNode, LiveNode>,\n@@ -626,9 +619,9 @@ struct Liveness<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Liveness<'a, 'tcx> {\n-    fn new(ir: &'a mut IrMaps<'tcx>, def_id: LocalDefId) -> Liveness<'a, 'tcx> {\n-        let typeck_results = ir.tcx.typeck(def_id);\n-        let param_env = ir.tcx.param_env(def_id);\n+    fn new(ir: &'a mut IrMaps<'tcx>, body_owner: LocalDefId) -> Liveness<'a, 'tcx> {\n+        let typeck_results = ir.tcx.typeck(body_owner);\n+        let param_env = ir.tcx.param_env(body_owner);\n \n         let closure_ln = ir.add_live_node(ClosureNode);\n         let exit_ln = ir.add_live_node(ExitNode);\n@@ -638,6 +631,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n         Liveness {\n             ir,\n+            body_owner,\n             typeck_results,\n             param_env,\n             successors: IndexVec::from_elem_n(INVALID_NODE, num_live_nodes),\n@@ -893,12 +887,12 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         // if they are live on the entry to the closure, since only the closure\n         // itself can access them on subsequent calls.\n \n-        if let Some(upvars) = self.ir.tcx.upvars_mentioned(self.ir.body_owner) {\n+        if let Some(upvars) = self.ir.tcx.upvars_mentioned(self.body_owner) {\n             // Mark upvars captured by reference as used after closure exits.\n             for (&var_hir_id, upvar) in upvars.iter().rev() {\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath { hir_id: var_hir_id },\n-                    closure_expr_id: self.ir.body_owner,\n+                    closure_expr_id: self.body_owner,\n                 };\n                 match self.typeck_results.upvar_capture(upvar_id) {\n                     ty::UpvarCapture::ByRef(_) => {\n@@ -1565,15 +1559,15 @@ impl<'tcx> Liveness<'_, 'tcx> {\n     }\n \n     fn warn_about_unused_upvars(&self, entry_ln: LiveNode) {\n-        let upvars = match self.ir.tcx.upvars_mentioned(self.ir.body_owner) {\n+        let upvars = match self.ir.tcx.upvars_mentioned(self.body_owner) {\n             None => return,\n             Some(upvars) => upvars,\n         };\n         for (&var_hir_id, upvar) in upvars.iter() {\n             let var = self.variable(var_hir_id, upvar.span);\n             let upvar_id = ty::UpvarId {\n                 var_path: ty::UpvarPath { hir_id: var_hir_id },\n-                closure_expr_id: self.ir.body_owner,\n+                closure_expr_id: self.body_owner,\n             };\n             match self.typeck_results.upvar_capture(upvar_id) {\n                 ty::UpvarCapture::ByValue(_) => {}"}]}