{"sha": "ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNzYyYmE5NTQ3NjQ5ZjU3ZTJkOGEzZTU2YjgzZDBhNjI5OGZiYjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-26T21:53:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-30T14:48:59Z"}, "message": "rustc: Disallow machine applicability in foreign macros\n\nRecent changes to lints disallowed lints from being emitted against code located\nin foreign macros, except for future-incompatible lints. For a future\nincompatible lint, however, the automatic suggestions may not be applicable!\n\nThis commit updates this code path to force all applicability suggestions made\nto foreign macros to never be `MachineApplicable`. This should avoid rustfix\nactually attempting fixing these suggestions, causing non-compiling code to be\nproduced.\n\nCloses rust-lang/cargo#5799", "tree": {"sha": "62c5b96306e300e3bed07f9a98ef99a5c80811bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62c5b96306e300e3bed07f9a98ef99a5c80811bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "html_url": "https://github.com/rust-lang/rust/commit/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54628c8ea844956f3f4f416b82067c634eb09f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/54628c8ea844956f3f4f416b82067c634eb09f7b", "html_url": "https://github.com/rust-lang/rust/commit/54628c8ea844956f3f4f416b82067c634eb09f7b"}], "stats": {"total": 252, "additions": 217, "deletions": 35}, "files": [{"sha": "96b7d865dc8ba7fff065ac37f7264bcde4a83d52", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "patch": "@@ -575,7 +575,8 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n     // Check for future incompatibility lints and issue a stronger warning.\n     let lints = sess.lint_store.borrow();\n     let lint_id = LintId::of(lint);\n-    if let Some(future_incompatible) = lints.future_incompatible(lint_id) {\n+    let future_incompatible = lints.future_incompatible(lint_id);\n+    if let Some(future_incompatible) = future_incompatible {\n         const STANDARD_MESSAGE: &str =\n             \"this was previously accepted by the compiler but is being phased out; \\\n              it will become a hard error\";\n@@ -593,20 +594,21 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n                                future_incompatible.reference);\n         err.warn(&explanation);\n         err.note(&citation);\n+    }\n \n-    // If this lint is *not* a future incompatibility warning then we want to be\n-    // sure to not be too noisy in some situations. If this code originates in a\n-    // foreign macro, aka something that this crate did not itself author, then\n-    // it's likely that there's nothing this crate can do about it. We probably\n-    // want to skip the lint entirely.\n-    //\n-    // For some lints though (like unreachable code) there's clear actionable\n-    // items to take care of (delete the macro invocation). As a result we have\n-    // a few lints we whitelist here for allowing a lint even though it's in a\n-    // foreign macro invocation.\n-    } else if !lint.report_in_external_macro {\n-        if err.span.primary_spans().iter().any(|s| in_external_macro(sess, *s)) {\n-            err.cancel();\n+    // If this code originates in a foreign macro, aka something that this crate\n+    // did not itself author, then it's likely that there's nothing this crate\n+    // can do about it. We probably want to skip the lint entirely.\n+    if err.span.primary_spans().iter().any(|s| in_external_macro(sess, *s)) {\n+        // Any suggestions made here are likely to be incorrect, so anything we\n+        // emit shouldn't be automatically fixed by rustfix.\n+        err.allow_suggestions(false);\n+\n+        // If this is a future incompatible lint it'll become a hard error, so\n+        // we have to emit *something*. Also allow lints to whitelist themselves\n+        // on a case-by-case basis for emission in a foreign macro.\n+        if future_incompatible.is_none() && !lint.report_in_external_macro {\n+            err.cancel()\n         }\n     }\n "}, {"sha": "1b34898b99084e20f6ddf15b46080f1666d3d8fe", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 64, "deletions": 19, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "patch": "@@ -26,6 +26,7 @@ use syntax_pos::{MultiSpan, Span};\n pub struct DiagnosticBuilder<'a> {\n     pub handler: &'a Handler,\n     diagnostic: Diagnostic,\n+    allow_suggestions: bool,\n }\n \n /// In general, the `DiagnosticBuilder` uses deref to allow access to\n@@ -186,27 +187,67 @@ impl<'a> DiagnosticBuilder<'a> {\n                                      msg: &str,\n                                      suggestions: Vec<String>)\n                                      -> &mut Self);\n-    forward!(pub fn span_suggestion_with_applicability(&mut self,\n-                                                sp: Span,\n-                                                msg: &str,\n-                                                suggestion: String,\n-                                                applicability: Applicability)\n-                                                -> &mut Self);\n-    forward!(pub fn span_suggestions_with_applicability(&mut self,\n-                                                 sp: Span,\n-                                                 msg: &str,\n-                                                 suggestions: Vec<String>,\n-                                                 applicability: Applicability)\n-                                                 -> &mut Self);\n-    forward!(pub fn span_suggestion_short_with_applicability(&mut self,\n-                                                             sp: Span,\n-                                                             msg: &str,\n-                                                             suggestion: String,\n-                                                             applicability: Applicability)\n-                                                             -> &mut Self);\n+    pub fn span_suggestion_with_applicability(&mut self,\n+                                              sp: Span,\n+                                              msg: &str,\n+                                              suggestion: String,\n+                                              applicability: Applicability)\n+                                              -> &mut Self {\n+        if !self.allow_suggestions {\n+            return self\n+        }\n+        self.diagnostic.span_suggestion_with_applicability(\n+            sp,\n+            msg,\n+            suggestion,\n+            applicability,\n+        );\n+        self\n+    }\n+\n+    pub fn span_suggestions_with_applicability(&mut self,\n+                                               sp: Span,\n+                                               msg: &str,\n+                                               suggestions: Vec<String>,\n+                                               applicability: Applicability)\n+                                               -> &mut Self {\n+        if !self.allow_suggestions {\n+            return self\n+        }\n+        self.diagnostic.span_suggestions_with_applicability(\n+            sp,\n+            msg,\n+            suggestions,\n+            applicability,\n+        );\n+        self\n+    }\n+\n+    pub fn span_suggestion_short_with_applicability(&mut self,\n+                                                    sp: Span,\n+                                                    msg: &str,\n+                                                    suggestion: String,\n+                                                    applicability: Applicability)\n+                                                    -> &mut Self {\n+        if !self.allow_suggestions {\n+            return self\n+        }\n+        self.diagnostic.span_suggestion_short_with_applicability(\n+            sp,\n+            msg,\n+            suggestion,\n+            applicability,\n+        );\n+        self\n+    }\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n \n+    pub fn allow_suggestions(&mut self, allow: bool) -> &mut Self {\n+        self.allow_suggestions = allow;\n+        self\n+    }\n+\n     /// Convenience function for internal use, clients should use one of the\n     /// struct_* methods on Handler.\n     pub fn new(handler: &'a Handler, level: Level, message: &str) -> DiagnosticBuilder<'a> {\n@@ -228,7 +269,11 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// diagnostic.\n     pub fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic)\n                          -> DiagnosticBuilder<'a> {\n-        DiagnosticBuilder { handler, diagnostic }\n+        DiagnosticBuilder {\n+            handler,\n+            diagnostic,\n+            allow_suggestions: true,\n+        }\n     }\n }\n "}, {"sha": "7ae4731fde1961fae46d96a6652d27496eea7460", "filename": "src/test/ui-fulldeps/rust-2018/auxiliary/suggestions-not-always-applicable.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fauxiliary%2Fsuggestions-not-always-applicable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fauxiliary%2Fsuggestions-not-always-applicable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fauxiliary%2Fsuggestions-not-always-applicable.rs?ref=ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro_attribute]\n+pub fn foo(_attr: TokenStream, _f: TokenStream) -> TokenStream {\n+    \"pub fn foo() -> ::Foo { ::Foo }\".parse().unwrap()\n+}"}, {"sha": "e5b47c70863e5371b0d0d640cf5ba182b3bb7fbc", "filename": "src/test/ui-fulldeps/rust-2018/suggestions-not-always-applicable.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.fixed?ref=ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:suggestions-not-always-applicable.rs\n+// compile-flags: --edition 2015\n+// run-rustfix\n+// rustfix-only-machine-applicable\n+// compile-pass\n+\n+#![feature(rust_2018_preview)]\n+#![warn(rust_2018_compatibility)]\n+\n+extern crate suggestions_not_always_applicable as foo;\n+\n+pub struct Foo;\n+\n+mod test {\n+    use crate::foo::foo;\n+\n+    #[foo] //~ WARN: absolute paths must start with\n+    //~| WARN: previously accepted\n+    //~| WARN: absolute paths\n+    //~| WARN: previously accepted\n+    fn main() {\n+    }\n+}\n+\n+fn main() {\n+    test::foo();\n+}"}, {"sha": "e5b47c70863e5371b0d0d640cf5ba182b3bb7fbc", "filename": "src/test/ui-fulldeps/rust-2018/suggestions-not-always-applicable.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.rs?ref=ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:suggestions-not-always-applicable.rs\n+// compile-flags: --edition 2015\n+// run-rustfix\n+// rustfix-only-machine-applicable\n+// compile-pass\n+\n+#![feature(rust_2018_preview)]\n+#![warn(rust_2018_compatibility)]\n+\n+extern crate suggestions_not_always_applicable as foo;\n+\n+pub struct Foo;\n+\n+mod test {\n+    use crate::foo::foo;\n+\n+    #[foo] //~ WARN: absolute paths must start with\n+    //~| WARN: previously accepted\n+    //~| WARN: absolute paths\n+    //~| WARN: previously accepted\n+    fn main() {\n+    }\n+}\n+\n+fn main() {\n+    test::foo();\n+}"}, {"sha": "76dc139b58f077235ef1e67295d697117ca6dee2", "filename": "src/test/ui-fulldeps/rust-2018/suggestions-not-always-applicable.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.stderr?ref=ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "patch": "@@ -0,0 +1,24 @@\n+warning: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/suggestions-not-always-applicable.rs:27:5\n+   |\n+LL |     #[foo] //~ WARN: absolute paths must start with\n+   |     ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/suggestions-not-always-applicable.rs:18:9\n+   |\n+LL | #![warn(rust_2018_compatibility)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: #[warn(absolute_paths_not_starting_with_crate)] implied by #[warn(rust_2018_compatibility)]\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+warning: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/suggestions-not-always-applicable.rs:27:5\n+   |\n+LL |     #[foo] //~ WARN: absolute paths must start with\n+   |     ^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+"}, {"sha": "5f68d00eab1d4b9bb91044cdc0370166f33e666c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "patch": "@@ -231,6 +231,7 @@ pub struct TestProps {\n     pub normalize_stderr: Vec<(String, String)>,\n     pub failure_status: i32,\n     pub run_rustfix: bool,\n+    pub rustfix_only_machine_applicable: bool,\n }\n \n impl TestProps {\n@@ -263,6 +264,7 @@ impl TestProps {\n             normalize_stderr: vec![],\n             failure_status: -1,\n             run_rustfix: false,\n+            rustfix_only_machine_applicable: false,\n         }\n     }\n \n@@ -397,6 +399,11 @@ impl TestProps {\n             if !self.run_rustfix {\n                 self.run_rustfix = config.parse_run_rustfix(ln);\n             }\n+\n+            if !self.rustfix_only_machine_applicable {\n+                self.rustfix_only_machine_applicable =\n+                    config.parse_rustfix_only_machine_applicable(ln);\n+            }\n         });\n \n         if self.failure_status == -1 {\n@@ -663,6 +670,10 @@ impl Config {\n         self.parse_name_directive(line, \"run-rustfix\")\n     }\n \n+    fn parse_rustfix_only_machine_applicable(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"rustfix-only-machine-applicable\")\n+    }\n+\n     fn parse_edition(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"edition\")\n     }"}, {"sha": "c8f3956415d533dfd384e3e2136e1ab083a3f1e3", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca762ba9547649f57e2d8a3e56b83d0a6298fbb2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ca762ba9547649f57e2d8a3e56b83d0a6298fbb2", "patch": "@@ -2624,7 +2624,11 @@ impl<'test> TestCx<'test> {\n             let suggestions = get_suggestions_from_json(\n                 &proc_res.stderr,\n                 &HashSet::new(),\n-                Filter::Everything,\n+                if self.props.rustfix_only_machine_applicable {\n+                    Filter::MachineApplicableOnly\n+                } else {\n+                    Filter::Everything\n+                },\n             ).unwrap();\n             let fixed_code = apply_suggestions(&unfixed_code, &suggestions).expect(&format!(\n                 \"failed to apply suggestions for {:?} with rustfix\",\n@@ -2686,7 +2690,7 @@ impl<'test> TestCx<'test> {\n             if !res.status.success() {\n                 self.fatal_proc_rec(\"failed to compile fixed code\", &res);\n             }\n-            if !res.stderr.is_empty() {\n+            if !res.stderr.is_empty() && !self.props.rustfix_only_machine_applicable {\n                 self.fatal_proc_rec(\"fixed code is still producing diagnostics\", &res);\n             }\n         }"}]}