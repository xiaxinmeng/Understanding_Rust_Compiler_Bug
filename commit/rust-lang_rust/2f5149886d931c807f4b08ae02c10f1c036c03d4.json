{"sha": "2f5149886d931c807f4b08ae02c10f1c036c03d4", "node_id": "C_kwDOAAsO6NoAKDJmNTE0OTg4NmQ5MzFjODA3ZjRiMDhhZTAyYzEwZjFjMDM2YzAzZDQ", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-11-27T05:29:44Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-11-27T05:29:44Z"}, "message": "Respect http.proxyStrictSSL", "tree": {"sha": "c72ced4096decba1babef87bf2d5b97cefd1e376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c72ced4096decba1babef87bf2d5b97cefd1e376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f5149886d931c807f4b08ae02c10f1c036c03d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5149886d931c807f4b08ae02c10f1c036c03d4", "html_url": "https://github.com/rust-lang/rust/commit/2f5149886d931c807f4b08ae02c10f1c036c03d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f5149886d931c807f4b08ae02c10f1c036c03d4/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f447ad522a2e7464d827d5b51cdeb53a90c91f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f447ad522a2e7464d827d5b51cdeb53a90c91f5", "html_url": "https://github.com/rust-lang/rust/commit/9f447ad522a2e7464d827d5b51cdeb53a90c91f5"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "28acfec057ca9811c112c500a139535bedc897ae", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f5149886d931c807f4b08ae02c10f1c036c03d4/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2f5149886d931c807f4b08ae02c10f1c036c03d4/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=2f5149886d931c807f4b08ae02c10f1c036c03d4", "patch": "@@ -107,6 +107,9 @@ export class Config {\n \n         return httpProxy || process.env[\"https_proxy\"] || process.env[\"HTTPS_PROXY\"];\n     }\n+    get proxyStrictSSL(): boolean {\n+        return vscode.workspace.getConfiguration(\"http\").get(\"proxyStrictSSL\") || true;\n+    }\n \n     get inlayHints() {\n         return {"}, {"sha": "983aa728c64fc894c1c98d425b384641e5198197", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f5149886d931c807f4b08ae02c10f1c036c03d4/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2f5149886d931c807f4b08ae02c10f1c036c03d4/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=2f5149886d931c807f4b08ae02c10f1c036c03d4", "patch": "@@ -198,7 +198,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n     }\n \n     const latestNightlyRelease = await downloadWithRetryDialog(state, async () => {\n-        return await fetchRelease(\"nightly\", state.githubToken, config.httpProxy);\n+        return await fetchRelease(\"nightly\", state.githubToken, config.httpProxy, config.proxyStrictSSL);\n     }).catch(async (e) => {\n         log.error(e);\n         if (isInitialNightlyDownload) {\n@@ -231,6 +231,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n             dest,\n             progressTitle: \"Downloading rust-analyzer extension\",\n             httpProxy: config.httpProxy,\n+            proxyStrictSSL: config.proxyStrictSSL,\n         });\n     });\n \n@@ -361,7 +362,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n \n     const releaseTag = config.package.releaseTag;\n     const release = await downloadWithRetryDialog(state, async () => {\n-        return await fetchRelease(releaseTag, state.githubToken, config.httpProxy);\n+        return await fetchRelease(releaseTag, state.githubToken, config.httpProxy, config.proxyStrictSSL);\n     });\n     const artifact = release.assets.find(artifact => artifact.name === `rust-analyzer-${platform}.gz`);\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n@@ -374,6 +375,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n             gunzip: true,\n             mode: 0o755,\n             httpProxy: config.httpProxy,\n+            proxyStrictSSL: config.proxyStrictSSL,\n         });\n     });\n "}, {"sha": "96a7d61ff1fbf10fd884f3d9b5d56e90e97d4428", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2f5149886d931c807f4b08ae02c10f1c036c03d4/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2f5149886d931c807f4b08ae02c10f1c036c03d4/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=2f5149886d931c807f4b08ae02c10f1c036c03d4", "patch": "@@ -9,17 +9,28 @@ import * as zlib from \"zlib\";\n import * as util from \"util\";\n import * as path from \"path\";\n import { log, assert } from \"./util\";\n+import * as url from \"url\";\n+import * as https from \"https\";\n \n const pipeline = util.promisify(stream.pipeline);\n \n const GITHUB_API_ENDPOINT_URL = \"https://api.github.com\";\n const OWNER = \"rust-analyzer\";\n const REPO = \"rust-analyzer\";\n \n+function makeHttpAgent(proxy: string | null | undefined, options?: https.AgentOptions) {\n+    if (proxy) {\n+        return new HttpsProxyAgent(proxy, { ...options, ...url.parse(proxy) });\n+    } else {\n+        return new https.Agent(options);\n+    }\n+}\n+\n export async function fetchRelease(\n     releaseTag: string,\n     githubToken: string | null | undefined,\n     httpProxy: string | null | undefined,\n+    proxyStrictSSL: boolean,\n ): Promise<GithubRelease> {\n \n     const apiEndpointPath = `/repos/${OWNER}/${REPO}/releases/tags/${releaseTag}`;\n@@ -36,10 +47,13 @@ export async function fetchRelease(\n     const response = await (() => {\n         if (httpProxy) {\n             log.debug(`Fetching release metadata via proxy: ${httpProxy}`);\n-            return fetch(requestUrl, { headers: headers, agent: new HttpsProxyAgent(httpProxy) });\n         }\n-\n-        return fetch(requestUrl, { headers: headers });\n+        let options: any = {};\n+        if (proxyStrictSSL) {\n+            options[\"rejectUnauthorized\"] = false;\n+        }\n+        const agent = makeHttpAgent(httpProxy, options);\n+        return fetch(requestUrl, { headers: headers, agent: agent });\n     })();\n \n     if (!response.ok) {\n@@ -84,6 +98,7 @@ interface DownloadOpts {\n     mode?: number;\n     gunzip?: boolean;\n     httpProxy?: string;\n+    proxyStrictSSL: boolean;\n }\n \n export async function download(opts: DownloadOpts) {\n@@ -103,7 +118,7 @@ export async function download(opts: DownloadOpts) {\n         },\n         async (progress, _cancellationToken) => {\n             let lastPercentage = 0;\n-            await downloadFile(opts.url, tempFilePath, opts.mode, !!opts.gunzip, opts.httpProxy, (readBytes, totalBytes) => {\n+            await downloadFile(opts.url, tempFilePath, opts.mode, !!opts.gunzip, opts.httpProxy, opts.proxyStrictSSL, (readBytes, totalBytes) => {\n                 const newPercentage = Math.round((readBytes / totalBytes) * 100);\n                 if (newPercentage !== lastPercentage) {\n                     progress.report({\n@@ -168,17 +183,21 @@ async function downloadFile(\n     mode: number | undefined,\n     gunzip: boolean,\n     httpProxy: string | null | undefined,\n+    proxyStrictSSL: boolean,\n     onProgress: (readBytes: number, totalBytes: number) => void\n ): Promise<void> {\n     const urlString = url.toString();\n \n     const res = await (() => {\n         if (httpProxy) {\n             log.debug(`Downloading ${urlString} via proxy: ${httpProxy}`);\n-            return fetch(urlString, { agent: new HttpsProxyAgent(httpProxy) });\n         }\n-\n-        return fetch(urlString);\n+        let options: any = {};\n+        if (proxyStrictSSL) {\n+            options[\"rejectUnauthorized\"] = false;\n+        }\n+        const agent = makeHttpAgent(httpProxy, options);\n+        return fetch(urlString, { agent: agent });\n     })();\n \n     if (!res.ok) {"}]}