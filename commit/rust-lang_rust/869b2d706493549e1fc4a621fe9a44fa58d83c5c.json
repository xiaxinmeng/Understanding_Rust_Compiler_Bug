{"sha": "869b2d706493549e1fc4a621fe9a44fa58d83c5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2OWIyZDcwNjQ5MzU0OWUxZmM0YTYyMWZlOWE0NGZhNThkODNjNWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-19T21:06:59Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-19T21:29:39Z"}, "message": "Send string concatenation to specialized upcall, shave 17s off librustc compile time.", "tree": {"sha": "882f79b4939e5ac60fa54a95c9be70a3d10f3605", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/882f79b4939e5ac60fa54a95c9be70a3d10f3605"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/869b2d706493549e1fc4a621fe9a44fa58d83c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/869b2d706493549e1fc4a621fe9a44fa58d83c5c", "html_url": "https://github.com/rust-lang/rust/commit/869b2d706493549e1fc4a621fe9a44fa58d83c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/869b2d706493549e1fc4a621fe9a44fa58d83c5c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbfa08d9474bd08b03718639ad82315d66097e6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbfa08d9474bd08b03718639ad82315d66097e6e", "html_url": "https://github.com/rust-lang/rust/commit/bbfa08d9474bd08b03718639ad82315d66097e6e"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "647e8edf3a82cf2282feec6bf295b54add0d0d57", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/869b2d706493549e1fc4a621fe9a44fa58d83c5c/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/869b2d706493549e1fc4a621fe9a44fa58d83c5c/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=869b2d706493549e1fc4a621fe9a44fa58d83c5c", "patch": "@@ -309,6 +309,34 @@ upcall_vec_grow(rust_vec** vp, size_t new_sz) {\n     UPCALL_SWITCH_STACK(&args, upcall_s_vec_grow);\n }\n \n+struct s_str_concat_args {\n+    rust_vec* lhs;\n+    rust_vec* rhs;\n+    rust_vec* retval;\n+};\n+\n+extern \"C\" CDECL void\n+upcall_s_str_concat(s_str_concat_args *args) {\n+    rust_vec *lhs = args->lhs;\n+    rust_vec *rhs = args->rhs;\n+    rust_task *task = rust_task_thread::get_task();\n+    size_t fill = lhs->fill + rhs->fill - 1;\n+    rust_vec* v = (rust_vec*)task->kernel->malloc(fill + sizeof(rust_vec),\n+                                                  \"str_concat\");\n+    v->fill = v->alloc = fill;\n+    memmove(&v->data[0], &lhs->data[0], lhs->fill - 1);\n+    memmove(&v->data[lhs->fill - 1], &rhs->data[0], rhs->fill);\n+    args->retval = v;\n+}\n+\n+extern \"C\" CDECL rust_vec*\n+upcall_str_concat(rust_vec* lhs, rust_vec* rhs) {\n+    s_str_concat_args args = {lhs, rhs, 0};\n+    UPCALL_SWITCH_STACK(&args, upcall_s_str_concat);\n+    return args.retval;\n+}\n+\n+\n extern \"C\" _Unwind_Reason_Code\n __gxx_personality_v0(int version,\n                      _Unwind_Action actions,"}, {"sha": "4383ebf265715fd1a50241a0b5464ea06a6c011e", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/869b2d706493549e1fc4a621fe9a44fa58d83c5c/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/869b2d706493549e1fc4a621fe9a44fa58d83c5c/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=869b2d706493549e1fc4a621fe9a44fa58d83c5c", "patch": "@@ -67,6 +67,7 @@ upcall_shared_malloc\n upcall_shared_free\n upcall_shared_realloc\n upcall_vec_grow\n+upcall_str_concat\n upcall_call_shim_on_c_stack\n upcall_call_shim_on_rust_stack\n upcall_new_stack"}, {"sha": "cf862d3ca440c9579687206de1e17a214b6c09da", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/869b2d706493549e1fc4a621fe9a44fa58d83c5c/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/869b2d706493549e1fc4a621fe9a44fa58d83c5c/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=869b2d706493549e1fc4a621fe9a44fa58d83c5c", "patch": "@@ -18,6 +18,7 @@ type upcalls =\n      mark: ValueRef,\n      vec_grow: ValueRef,\n      vec_push: ValueRef,\n+     str_concat: ValueRef,\n      cmp_type: ValueRef,\n      log_type: ValueRef,\n      alloc_c_stack: ValueRef,\n@@ -69,6 +70,9 @@ fn declare_upcalls(targ_cfg: @session::config,\n               dvi(\"vec_push\",\n                 [T_ptr(T_ptr(opaque_vec_t)), T_ptr(tydesc_type),\n                  T_ptr(T_i8())]),\n+          str_concat:\n+              d(\"str_concat\", [T_ptr(opaque_vec_t), T_ptr(opaque_vec_t)],\n+                T_ptr(opaque_vec_t)),\n           cmp_type:\n               dv(\"cmp_type\",\n                  [T_ptr(T_i1()), T_ptr(tydesc_type),"}, {"sha": "c322e9255e0fcbcf09d81a509a5a3ee3c0776a54", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/869b2d706493549e1fc4a621fe9a44fa58d83c5c/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/869b2d706493549e1fc4a621fe9a44fa58d83c5c/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=869b2d706493549e1fc4a621fe9a44fa58d83c5c", "patch": "@@ -194,15 +194,16 @@ fn trans_append_literal(bcx: block, vptrptr: ValueRef, vec_ty: ty::t,\n fn trans_add(bcx: block, vec_ty: ty::t, lhs: ValueRef,\n              rhs: ValueRef, dest: dest) -> block {\n     let ccx = bcx.ccx();\n-    let strings = alt ty::get(vec_ty).struct {\n-      ty::ty_str { true }\n-      _ { false }\n-    };\n+\n+    if ty::get(vec_ty).struct == ty::ty_str {\n+        let n = Call(bcx, ccx.upcalls.str_concat, [lhs, rhs]);\n+        ret base::store_in_dest(bcx, n, dest);\n+    }\n+\n     let unit_ty = ty::sequence_element_type(bcx.tcx(), vec_ty);\n     let llunitty = type_of::type_of(ccx, unit_ty);\n \n     let lhs_fill = get_fill(bcx, lhs);\n-    if strings { lhs_fill = Sub(bcx, lhs_fill, C_int(ccx, 1)); }\n     let rhs_fill = get_fill(bcx, rhs);\n     let new_fill = Add(bcx, lhs_fill, rhs_fill);\n     let {bcx: bcx, val: new_vec_ptr} = alloc_raw(bcx, new_fill, new_fill);"}]}