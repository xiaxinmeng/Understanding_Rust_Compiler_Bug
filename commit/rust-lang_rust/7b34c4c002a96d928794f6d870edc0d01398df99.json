{"sha": "7b34c4c002a96d928794f6d870edc0d01398df99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMzRjNGMwMDJhOTZkOTI4Nzk0ZjZkODcwZWRjMGQwMTM5OGRmOTk=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-03-27T14:00:51Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-03-27T14:00:51Z"}, "message": "Take number of arguments at the call-site into account for signature help\n\nFixes #1065", "tree": {"sha": "eb852662d1fceda1cc963c2e5fb935aa77001718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb852662d1fceda1cc963c2e5fb935aa77001718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b34c4c002a96d928794f6d870edc0d01398df99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b34c4c002a96d928794f6d870edc0d01398df99", "html_url": "https://github.com/rust-lang/rust/commit/7b34c4c002a96d928794f6d870edc0d01398df99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b34c4c002a96d928794f6d870edc0d01398df99/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb21dc8cc38a0597fb7949b5c1f42408cd93e35", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb21dc8cc38a0597fb7949b5c1f42408cd93e35", "html_url": "https://github.com/rust-lang/rust/commit/eeb21dc8cc38a0597fb7949b5c1f42408cd93e35"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "831c4ad1247dca0efb8e5af518701a356f57f173", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7b34c4c002a96d928794f6d870edc0d01398df99/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b34c4c002a96d928794f6d870edc0d01398df99/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=7b34c4c002a96d928794f6d870edc0d01398df99", "patch": "@@ -28,6 +28,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let function = hir::source_binder::function_from_source(db, symbol.file_id, fn_def)?;\n \n     let mut call_info = CallInfo::new(db, function, fn_def)?;\n+\n     // If we have a calling expression let's find which argument we are on\n     let num_params = call_info.parameters.len();\n     let has_self = fn_def.param_list().and_then(|l| l.self_param()).is_some();\n@@ -38,7 +39,15 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n         }\n     } else if num_params > 1 {\n         // Count how many parameters into the call we are.\n-        if let Some(ref arg_list) = calling_node.arg_list() {\n+        if let Some(arg_list) = calling_node.arg_list() {\n+            // Number of arguments specified at the caller site\n+            let mut num_args_of_call = arg_list.args().count();\n+\n+            // If we are calling a method account for the `self` argument.\n+            if has_self {\n+                num_args_of_call = num_args_of_call + 1;\n+            }\n+\n             let arg_list_range = arg_list.syntax().range();\n             if !arg_list_range.contains_inclusive(position.offset) {\n                 tested_by!(call_info_bad_offset);\n@@ -49,6 +58,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n                 .args()\n                 .position(|arg| arg.syntax().range().contains(position.offset))\n                 .or(Some(num_params - 1))\n+                .min(Some(num_args_of_call))\n                 .unwrap();\n \n             call_info.active_parameter = Some(param);\n@@ -155,6 +165,17 @@ fn bar() { foo(3, <|>); }\"#,\n         assert_eq!(info.active_parameter, Some(1));\n     }\n \n+    #[test]\n+    fn test_fn_signature_two_args_empty() {\n+        let info = call_info(\n+            r#\"fn foo(x: u32, y: u32) -> u32 {x + y}\n+fn bar() { foo(<|>); }\"#,\n+        );\n+\n+        assert_eq!(info.parameters, vec!(\"x\".to_string(), \"y\".to_string()));\n+        assert_eq!(info.active_parameter, Some(0));\n+    }\n+\n     #[test]\n     fn test_fn_signature_for_impl() {\n         let info = call_info("}]}