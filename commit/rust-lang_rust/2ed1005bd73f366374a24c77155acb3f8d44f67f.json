{"sha": "2ed1005bd73f366374a24c77155acb3f8d44f67f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZDEwMDViZDczZjM2NjM3NGEyNGM3NzE1NWFjYjNmOGQ0NGY2N2Y=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-28T21:41:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-28T21:41:31Z"}, "message": "On second thought, re-land pull request #1385 with backquotes; easier to grep, can change in the future.", "tree": {"sha": "dd3f0f730463967bfd5a54378e017e1d811d2439", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3f0f730463967bfd5a54378e017e1d811d2439"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ed1005bd73f366374a24c77155acb3f8d44f67f", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed1005bd73f366374a24c77155acb3f8d44f67f", "html_url": "https://github.com/rust-lang/rust/commit/2ed1005bd73f366374a24c77155acb3f8d44f67f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ed1005bd73f366374a24c77155acb3f8d44f67f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2c88c1b8093009cd52312fdc082aecf0730072e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c88c1b8093009cd52312fdc082aecf0730072e", "html_url": "https://github.com/rust-lang/rust/commit/f2c88c1b8093009cd52312fdc082aecf0730072e"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "df099016e4b3538556691d0a094b353640fc089f", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -369,7 +369,7 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n         alt mode {\n           m_check_tyvar(fcx) { ret next_ty_var(fcx); }\n           _ { tcx.sess.span_bug(ast_ty.span,\n-                                \"found 'ty_infer' in unexpected place\"); }\n+                                \"found `ty_infer` in unexpected place\"); }\n         }\n       }\n     }\n@@ -895,11 +895,11 @@ mod demand {\n             let e_err = resolve_type_vars_if_possible(fcx, expected);\n             let a_err = resolve_type_vars_if_possible(fcx, actual);\n             fcx.ccx.tcx.sess.span_err(sp,\n-                                      \"mismatched types: expected '\" +\n+                                      \"mismatched types: expected `\" +\n                                           ty_to_str(fcx.ccx.tcx, e_err) +\n-                                          \"' but found '\" +\n+                                          \"` but found `\" +\n                                           ty_to_str(fcx.ccx.tcx, a_err) +\n-                                          \"' (\" + ty::type_err_to_str(err) +\n+                                          \"` (\" + ty::type_err_to_str(err) +\n                                           \")\");\n             ret mk_result(fcx, expected, ty_param_subst_var_ids);\n           }\n@@ -1303,7 +1303,7 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n             // can never tell.\n             fcx.ccx.tcx.sess.span_fatal\n                 (pat.span,\n-                 #fmt[\"mismatched types: expected '%s' but found tag\",\n+                 #fmt[\"mismatched types: expected `%s` but found tag\",\n                       ty_to_str(fcx.ccx.tcx, expected)]);\n           }\n         }\n@@ -1316,7 +1316,7 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n           _ {\n             fcx.ccx.tcx.sess.span_fatal\n                 (pat.span,\n-                #fmt[\"mismatched types: expected '%s' but found record\",\n+                #fmt[\"mismatched types: expected `%s` but found record\",\n                                 ty_to_str(fcx.ccx.tcx, expected)]);\n           }\n         }\n@@ -1338,7 +1338,7 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n               none. {\n                 fcx.ccx.tcx.sess.span_fatal(pat.span,\n                                             #fmt[\"mismatched types: did not \\\n-                                           expect a record with a field '%s'\",\n+                                           expect a record with a field `%s`\",\n                                                  f.ident]);\n               }\n             }\n@@ -1352,7 +1352,7 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n           _ {\n             fcx.ccx.tcx.sess.span_fatal\n                 (pat.span,\n-                 #fmt[\"mismatched types: expected '%s', found tuple\",\n+                 #fmt[\"mismatched types: expected `%s`, found tuple\",\n                         ty_to_str(fcx.ccx.tcx, expected)]);\n           }\n         }\n@@ -1375,9 +1375,9 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n           }\n           _ {\n             fcx.ccx.tcx.sess.span_fatal(pat.span,\n-                                        \"mismatched types: expected '\" +\n+                                        \"mismatched types: expected `\" +\n                                             ty_to_str(fcx.ccx.tcx, expected) +\n-                                            \"' found box\");\n+                                            \"` found box\");\n           }\n         }\n       }\n@@ -1389,9 +1389,9 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n           }\n           _ {\n             fcx.ccx.tcx.sess.span_fatal(pat.span,\n-                                        \"mismatched types: expected '\" +\n+                                        \"mismatched types: expected `\" +\n                                             ty_to_str(fcx.ccx.tcx, expected) +\n-                                            \"' found uniq\");\n+                                            \"` found uniq\");\n           }\n         }\n       }\n@@ -1793,8 +1793,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             if !type_is_integral(fcx, oper.span, oper_t) &&\n                    structure_of(fcx, oper.span, oper_t) != ty::ty_bool {\n                 tcx.sess.span_err(expr.span,\n-                                  #fmt[\"mismatched types: expected 'bool' \\\n-                          or 'integer' but found '%s'\",\n+                                  #fmt[\"mismatched types: expected `bool` \\\n+                          or `integer` but found `%s`\",\n                                        ty_to_str(tcx, oper_t)]);\n             }\n           }\n@@ -1804,8 +1804,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                      ty::type_is_fp(tcx, oper_t)) {\n                 tcx.sess.span_err(expr.span,\n                                   \"applying unary minus to \\\n-                   non-numeric type '\"\n-                                      + ty_to_str(tcx, oper_t) + \"'\");\n+                   non-numeric type `\"\n+                                      + ty_to_str(tcx, oper_t) + \"`\");\n             }\n           }\n         }\n@@ -1921,7 +1921,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           _ {\n             tcx.sess.span_fatal(expr.span,\n                                 \"mismatched types: expected vector or string \"\n-                                + \"but found '\" + ty_to_str(tcx, ety) + \"'\");\n+                                + \"but found `\" + ty_to_str(tcx, ety) + \"`\");\n           }\n         }\n         bot |= check_for(fcx, decl, elt_ty, body, id);\n@@ -2252,8 +2252,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         if !type_is_integral(fcx, idx.span, idx_t) {\n             tcx.sess.span_err(idx.span,\n                               \"mismatched types: expected \\\n-                               'integer' but found '\"\n-                                  + ty_to_str(tcx, idx_t) + \"'\");\n+                               `integer` but found `\"\n+                                  + ty_to_str(tcx, idx_t) + \"`\");\n         }\n         alt structure_of(fcx, expr.span, base_t) {\n           ty::ty_vec(mt) { write::ty_only_fixup(fcx, id, mt.ty); }\n@@ -2690,13 +2690,13 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n                       some(m) {\n                         if !ty::same_method(ccx.tcx, m, if_m) {\n                             ccx.tcx.sess.span_err(\n-                                ty.span, \"method '\" + if_m.ident +\n-                                \"' has the wrong type\");\n+                                ty.span, \"method `\" + if_m.ident +\n+                                \"` has the wrong type\");\n                         }\n                       }\n                       none. {\n-                        ccx.tcx.sess.span_err(ty.span, \"missing method '\" +\n-                                              if_m.ident + \"'\");\n+                        ccx.tcx.sess.span_err(ty.span, \"missing method `\" +\n+                                              if_m.ident + \"`\");\n                       }\n                     }\n                 }\n@@ -2740,15 +2740,15 @@ fn check_main_fn_ty(tcx: ty::ctxt, main_id: ast::node_id) {\n         if !ok {\n             let span = ast_map::node_span(tcx.items.get(main_id));\n             tcx.sess.span_err(span,\n-                              \"wrong type in main function: found '\" +\n-                                  ty_to_str(tcx, main_t) + \"'\");\n+                              \"wrong type in main function: found `\" +\n+                                  ty_to_str(tcx, main_t) + \"`\");\n         }\n       }\n       _ {\n         let span = ast_map::node_span(tcx.items.get(main_id));\n         tcx.sess.span_bug(span,\n-                          \"main has a non-function type: found '\" +\n-                              ty_to_str(tcx, main_t) + \"'\");\n+                          \"main has a non-function type: found `\" +\n+                              ty_to_str(tcx, main_t) + \"`\");\n       }\n     }\n }"}, {"sha": "4966b777d7229306e3c359be1e9b48c3bae0dc34", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected 'str' but found 'int'\n+// error-pattern:expected `str` but found `int`\n \n const i: str = 10;\n fn main() { log(debug, i); }"}, {"sha": "5647fef472b035240ebc02d99382e190ed83ca31", "filename": "src/test/compile-fail/bad-record-pat-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:did not expect a record with a field 'q'\n+// error-pattern:did not expect a record with a field `q`\n \n fn main() { alt {x: 1, y: 2} { {x: x, q: q} { } } }"}, {"sha": "d45a7383a826d2e4f8a5bdc52a009aee3364434c", "filename": "src/test/compile-fail/fail-type-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:expected 'str' but found '[int]'\n+// error-pattern:expected `str` but found `[int]`\n fn main() { fail [0]; }"}, {"sha": "c15147f36f833c6db265a22bc3908feea5f41593", "filename": "src/test/compile-fail/fn-bare-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:mismatched types: expected 'fn()' but found 'fn@()'\n+// error-pattern:mismatched types: expected `fn()` but found `fn@()`\n \n fn f() {\n }"}, {"sha": "e13ec6396c1b23d4d2a7898ca5d5b790339e1305", "filename": "src/test/compile-fail/fn-compare-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected 'fn()' but found 'fn(++int)'\n+// error-pattern:expected `fn()` but found `fn(++int)`\n \n fn main() {\n     fn f() { }"}, {"sha": "cf78f2eff74b32b01de39004749511d33f15d070", "filename": "src/test/compile-fail/main-wrong-type-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:wrong type in main function: found 'fn() -> char'\n+// error-pattern:wrong type in main function: found `fn() -> char`\n fn main() -> char { }"}, {"sha": "854a6a2299decbdaf1da3c85f0682d9f033729ed", "filename": "src/test/compile-fail/main-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:wrong type in main function: found 'fn(&&{x: int,y: int})'\n+// error-pattern:wrong type in main function: found `fn(&&{x: int,y: int})`\n fn main(foo: {x: int, y: int}) { }"}, {"sha": "f77756942b188c86a0e57c48edfb8cf4d8013237", "filename": "src/test/compile-fail/minus-string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fminus-string.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:applying unary minus to non-numeric type 'str'\n+// error-pattern:applying unary minus to non-numeric type `str`\n \n fn main() { -\"foo\"; }"}, {"sha": "381c89c3aa32a76c535eb9311ba2c418eccca9ce", "filename": "src/test/compile-fail/native-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected '*Mb' but found 'native'\n+// error-pattern:expected `*Mb` but found `native`\n use std;\n \n fn main() unsafe {"}, {"sha": "b3ac40be24a127cfc2987f58f394b3fe32dbdf58", "filename": "src/test/compile-fail/nonsense-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,5 +1,5 @@\n // Tests that the typechecker checks constraints\n-// error-pattern:mismatched types: expected 'uint' but found 'u8'\n+// error-pattern:mismatched types: expected `uint` but found `u8`\n use std;\n import uint;\n "}, {"sha": "15c55d09b02f8b0c43f08def8c53f56786dfb41a", "filename": "src/test/compile-fail/rec-extend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Frec-extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Frec-extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frec-extend.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected 'int' but found 'bool'\n+// error-pattern:expected `int` but found `bool`\n \n fn main() {\n "}, {"sha": "0eb787761f31a98ff04ed5210a65f5644ecfa549", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: mismatched types: expected 'lambda(++uint) -> uint'\n+// error-pattern: mismatched types: expected `lambda(++uint) -> uint`\n \n fn test(f: lambda(uint) -> uint) -> uint {\n     ret f(22u);"}, {"sha": "bb741b1e88948a3476d4bb15a0b4fd3937a58ced", "filename": "src/test/compile-fail/type-mismatch-multiple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,5 +1,5 @@\n // Checking that the compiler reports multiple type errors at once\n-// error-pattern:mismatched types: expected 'bool'\n-// error-pattern:mismatched types: expected 'int'\n+// error-pattern:mismatched types: expected `bool`\n+// error-pattern:mismatched types: expected `int`\n \n fn main() { let a: bool = 1; let b: int = true; }"}, {"sha": "ad9e4f0505c0b70d39ab559fdc65294726749fbf", "filename": "src/test/compile-fail/type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1005bd73f366374a24c77155acb3f8d44f67f/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs?ref=2ed1005bd73f366374a24c77155acb3f8d44f67f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected 'bool' but found 'int'\n+// error-pattern:expected `bool` but found `int`\n // issue #516\n \n fn main() { let x = true; let y = 1; let z = x + y; }"}]}