{"sha": "9dc3f3f18371144daef8cfadb0bb9fce61c7b463", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYzNmM2YxODM3MTE0NGRhZWY4Y2ZhZGIwYmI5ZmNlNjFjN2I0NjM=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-16T22:06:09Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-16T22:09:12Z"}, "message": "Fixed version of my previous patch to rename the upcall functions. This time also update the inline assembly.", "tree": {"sha": "a6717f328b28d9c6594e0a0372f5e19ed5cdba0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6717f328b28d9c6594e0a0372f5e19ed5cdba0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dc3f3f18371144daef8cfadb0bb9fce61c7b463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc3f3f18371144daef8cfadb0bb9fce61c7b463", "html_url": "https://github.com/rust-lang/rust/commit/9dc3f3f18371144daef8cfadb0bb9fce61c7b463", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dc3f3f18371144daef8cfadb0bb9fce61c7b463/comments", "author": null, "committer": null, "parents": [{"sha": "54587bdccb7b6771cfc704a30fc0ef2c65824a15", "url": "https://api.github.com/repos/rust-lang/rust/commits/54587bdccb7b6771cfc704a30fc0ef2c65824a15", "html_url": "https://github.com/rust-lang/rust/commit/54587bdccb7b6771cfc704a30fc0ef2c65824a15"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "345603bb71003ff86df0bfb2a9902cf29697ef5c", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dc3f3f18371144daef8cfadb0bb9fce61c7b463/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc3f3f18371144daef8cfadb0bb9fce61c7b463/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=9dc3f3f18371144daef8cfadb0bb9fce61c7b463", "patch": "@@ -212,10 +212,10 @@ fn upcall_glue(int n_args) -> vec[str] {\n         + store_esp_to_rust_sp_second_arg()\n         + load_esp_from_runtime_sp_second_arg()\n \n-        + vec(\"subl  $\" + wstr(n_args + 1) + \", %esp   # esp -= args\",\n+        + vec(\"subl  $\" + wstr(n_args) + \", %esp   # esp -= args\",\n               \"andl  $~0xf, %esp    # align esp down\")\n \n-        + _vec.init_fn[str](carg, (n_args + 1) as uint)\n+        + _vec.init_fn[str](carg, (n_args) as uint)\n \n         +  vec(\"movl  %edx, %edi     # save task from edx to edi\",\n                \"call  *%ecx          # call *%ecx\",\n@@ -268,7 +268,7 @@ fn get_module_asm() -> str {\n                       rust_yield_glue()))\n \n         + _vec.init_fn[str](bind decl_upcall_glue(align, prefix, _),\n-                            abi.n_upcall_glues as uint);\n+                            (abi.n_upcall_glues + 1) as uint);\n \n     ret _str.connect(glues, \"\\n\\n\");\n }"}, {"sha": "f119681b0c2bc18528ecbc2583b59fd373d48281", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9dc3f3f18371144daef8cfadb0bb9fce61c7b463/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc3f3f18371144daef8cfadb0bb9fce61c7b463/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9dc3f3f18371144daef8cfadb0bb9fce61c7b463", "patch": "@@ -832,8 +832,7 @@ fn decl_upcall_glue(ModuleRef llmod, type_names tn, uint _n) -> ValueRef {\n     let int n = _n as int;\n     let str s = abi.upcall_glue_name(n);\n     let vec[TypeRef] args =\n-        vec(T_int(),     // callee\n-            T_int()) // taskptr\n+        vec(T_int())     // callee\n         + _vec.init_elt[TypeRef](T_int(), n as uint);\n \n     ret decl_fastcall_fn(llmod, s, T_fn(args, T_int()));\n@@ -864,7 +863,7 @@ fn trans_upcall2(builder b, @glue_fns glues, ValueRef lltaskptr,\n                  &hashmap[str, ValueRef] upcalls,\n                  type_names tn, ModuleRef llmod, str name,\n                  vec[ValueRef] args) -> ValueRef {\n-    let int n = _vec.len[ValueRef](args) as int;\n+    let int n = (_vec.len[ValueRef](args) as int) + 1;\n     let ValueRef llupcall = get_upcall(upcalls, tn, llmod, name, n);\n     llupcall = llvm.LLVMConstPointerCast(llupcall, T_int());\n \n@@ -6098,7 +6097,7 @@ fn make_glues(ModuleRef llmod, type_names tn) -> @glue_fns {\n \n              upcall_glues =\n              _vec.init_fn[ValueRef](bind decl_upcall_glue(llmod, tn, _),\n-                                    abi.n_upcall_glues as uint),\n+                                    abi.n_upcall_glues + 1 as uint),\n              no_op_type_glue = decl_no_op_type_glue(llmod, tn),\n              memcpy_glue = decl_memcpy_glue(llmod),\n              bzero_glue = decl_bzero_glue(llmod),"}]}