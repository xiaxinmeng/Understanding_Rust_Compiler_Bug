{"sha": "0d1aa1e0346630189b779da0939e8138a8e6d668", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMWFhMWUwMzQ2NjMwMTg5Yjc3OWRhMDkzOWU4MTM4YThlNmQ2Njg=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-14T16:22:10Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-15T10:02:23Z"}, "message": "Rename target_pointer_width to pointer_width and turn it into an u32\n\nRename target_pointer_width to pointer_width because it is already\nmember of the Target struct.\n\nThe compiler supports only three valid values for target_pointer_width:\n16, 32, 64. Thus it can safely be turned into an int.\nThis means less allocations and clones as well as easier handling of the type.", "tree": {"sha": "df045171720cf7ec7a7dc87d896823f87134c709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df045171720cf7ec7a7dc87d896823f87134c709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d1aa1e0346630189b779da0939e8138a8e6d668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1aa1e0346630189b779da0939e8138a8e6d668", "html_url": "https://github.com/rust-lang/rust/commit/0d1aa1e0346630189b779da0939e8138a8e6d668", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d1aa1e0346630189b779da0939e8138a8e6d668/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64ba25d0f2137aade97a0cfabc9ad2547bd6b376", "url": "https://api.github.com/repos/rust-lang/rust/commits/64ba25d0f2137aade97a0cfabc9ad2547bd6b376", "html_url": "https://github.com/rust-lang/rust/commit/64ba25d0f2137aade97a0cfabc9ad2547bd6b376"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "237ef688f88a7675f3a1959f9d9dd579a08eaaff", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d1aa1e0346630189b779da0939e8138a8e6d668/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1aa1e0346630189b779da0939e8138a8e6d668/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=0d1aa1e0346630189b779da0939e8138a8e6d668", "patch": "@@ -16,10 +16,10 @@ pub(crate) unsafe fn codegen(\n ) {\n     let llcx = &*mods.llcx;\n     let llmod = mods.llmod();\n-    let usize = match &tcx.sess.target.target.target_pointer_width[..] {\n-        \"16\" => llvm::LLVMInt16TypeInContext(llcx),\n-        \"32\" => llvm::LLVMInt32TypeInContext(llcx),\n-        \"64\" => llvm::LLVMInt64TypeInContext(llcx),\n+    let usize = match tcx.sess.target.target.pointer_width {\n+        16 => llvm::LLVMInt16TypeInContext(llcx),\n+        32 => llvm::LLVMInt32TypeInContext(llcx),\n+        64 => llvm::LLVMInt64TypeInContext(llcx),\n         tws => bug!(\"Unsupported target word size for int: {}\", tws),\n     };\n     let i8 = llvm::LLVMInt8TypeInContext(llcx);"}, {"sha": "a2cd030ac0e5b20fcc5d320feab3e1df0a3acecf", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d1aa1e0346630189b779da0939e8138a8e6d668/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1aa1e0346630189b779da0939e8138a8e6d668/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=0d1aa1e0346630189b779da0939e8138a8e6d668", "patch": "@@ -307,7 +307,7 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     pub allocator_module_config: Arc<ModuleConfig>,\n     pub tm_factory: TargetMachineFactory<B>,\n     pub msvc_imps_needed: bool,\n-    pub target_pointer_width: String,\n+    pub target_pointer_width: u32,\n     pub target_arch: String,\n     pub debuginfo: config::DebugInfo,\n \n@@ -1022,7 +1022,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         tm_factory: TargetMachineFactory(backend.target_machine_factory(tcx.sess, ol)),\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n-        target_pointer_width: tcx.sess.target.target.target_pointer_width.clone(),\n+        target_pointer_width: tcx.sess.target.target.pointer_width,\n         target_arch: tcx.sess.target.target.arch.clone(),\n         debuginfo: tcx.sess.opts.debuginfo,\n     };"}, {"sha": "a70ae62539f61258738f1da9d84d36160e809126", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0d1aa1e0346630189b779da0939e8138a8e6d668/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1aa1e0346630189b779da0939e8138a8e6d668/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=0d1aa1e0346630189b779da0939e8138a8e6d668", "patch": "@@ -742,7 +742,7 @@ pub const fn default_lib_output() -> CrateType {\n pub fn default_configuration(sess: &Session) -> CrateConfig {\n     let end = &sess.target.target.target_endian;\n     let arch = &sess.target.target.arch;\n-    let wordsz = &sess.target.target.target_pointer_width;\n+    let wordsz = sess.target.target.pointer_width.to_string();\n     let os = &sess.target.target.target_os;\n     let env = &sess.target.target.target_env;\n     let vendor = &sess.target.target.target_vendor;\n@@ -767,7 +767,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     }\n     ret.insert((sym::target_arch, Some(Symbol::intern(arch))));\n     ret.insert((sym::target_endian, Some(Symbol::intern(end))));\n-    ret.insert((sym::target_pointer_width, Some(Symbol::intern(wordsz))));\n+    ret.insert((sym::target_pointer_width, Some(Symbol::intern(&wordsz))));\n     ret.insert((sym::target_env, Some(Symbol::intern(env))));\n     ret.insert((sym::target_vendor, Some(Symbol::intern(vendor))));\n     if sess.target.target.options.has_elf_tls {\n@@ -792,7 +792,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n             };\n             let s = i.to_string();\n             insert_atomic(&s, align);\n-            if &s == wordsz {\n+            if s == wordsz {\n                 insert_atomic(\"ptr\", layout.pointer_align.abi);\n             }\n         }\n@@ -844,19 +844,18 @@ pub fn build_target_config(opts: &Options, target_override: Option<Target>) -> C\n         )\n     });\n \n-    let ptr_width = match &target.target_pointer_width[..] {\n-        \"16\" => 16,\n-        \"32\" => 32,\n-        \"64\" => 64,\n-        w => early_error(\n+    if !matches!(target.pointer_width, 16 | 32 | 64) {\n+        early_error(\n             opts.error_format,\n             &format!(\n                 \"target specification was invalid: \\\n              unrecognized target-pointer-width {}\",\n-                w\n+                target.pointer_width\n             ),\n-        ),\n-    };\n+        )\n+    }\n+\n+    let ptr_width = target.pointer_width;\n \n     Config { target, ptr_width }\n }"}, {"sha": "047b8cf5cdbe89faa875c6fae1ff43a05b80434d", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d1aa1e0346630189b779da0939e8138a8e6d668/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1aa1e0346630189b779da0939e8138a8e6d668/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=0d1aa1e0346630189b779da0939e8138a8e6d668", "patch": "@@ -164,12 +164,12 @@ impl TargetDataLayout {\n             ));\n         }\n \n-        if dl.pointer_size.bits().to_string() != target.target_pointer_width {\n+        if dl.pointer_size.bits() != target.pointer_width.into() {\n             return Err(format!(\n                 \"inconsistent target specification: \\\"data-layout\\\" claims \\\n                                 pointers are {}-bit, while \\\"target-pointer-width\\\" is `{}`\",\n                 dl.pointer_size.bits(),\n-                target.target_pointer_width\n+                target.pointer_width\n             ));\n         }\n "}, {"sha": "2d93b6d5fd43b6b35818bb7a1a7f56869b05c3d0", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d1aa1e0346630189b779da0939e8138a8e6d668/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1aa1e0346630189b779da0939e8138a8e6d668/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=0d1aa1e0346630189b779da0939e8138a8e6d668", "patch": "@@ -665,8 +665,8 @@ pub struct Target {\n     pub llvm_target: String,\n     /// String to use as the `target_endian` `cfg` variable.\n     pub target_endian: String,\n-    /// String to use as the `target_pointer_width` `cfg` variable.\n-    pub target_pointer_width: String,\n+    /// Number of bits in a pointer. Influences the `target_pointer_width` `cfg` variable.\n+    pub pointer_width: u32,\n     /// Width of c_int type\n     pub target_c_int_width: String,\n     /// OS name to use for conditional compilation.\n@@ -1111,7 +1111,7 @@ impl Target {\n     /// Maximum integer size in bits that this target can perform atomic\n     /// operations on.\n     pub fn max_atomic_width(&self) -> u64 {\n-        self.options.max_atomic_width.unwrap_or_else(|| self.target_pointer_width.parse().unwrap())\n+        self.options.max_atomic_width.unwrap_or_else(|| self.pointer_width.into())\n     }\n \n     pub fn is_abi_supported(&self, abi: Abi) -> bool {\n@@ -1144,7 +1144,9 @@ impl Target {\n         let mut base = Target {\n             llvm_target: get_req_field(\"llvm-target\")?,\n             target_endian: get_req_field(\"target-endian\")?,\n-            target_pointer_width: get_req_field(\"target-pointer-width\")?,\n+            pointer_width: get_req_field(\"target-pointer-width\")?\n+                .parse::<u32>()\n+                .map_err(|_| \"target-pointer-width must be an integer\".to_string())?,\n             target_c_int_width: get_req_field(\"target-c-int-width\")?,\n             data_layout: get_req_field(\"data-layout\")?,\n             arch: get_req_field(\"arch\")?,\n@@ -1617,7 +1619,10 @@ impl ToJson for Target {\n \n         target_val!(llvm_target);\n         target_val!(target_endian);\n-        target_val!(target_pointer_width);\n+        d.insert(\n+            \"target-pointer-width\".to_string(),\n+            self.pointer_width.to_string().to_json(),\n+        );\n         target_val!(target_c_int_width);\n         target_val!(arch);\n         target_val!(target_os, \"os\");"}]}