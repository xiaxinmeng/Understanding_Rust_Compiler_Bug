{"sha": "06345574d96da7c471ee59c991ce14f33741c0ee", "node_id": "C_kwDOAAsO6NoAKDA2MzQ1NTc0ZDk2ZGE3YzQ3MWVlNTljOTkxY2UxNGYzMzc0MWMwZWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-21T11:23:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-21T11:23:26Z"}, "message": "Auto merge of #111424 - JakobDegen:inline-unsized, r=tmiasko\n\nDon't inline functions with unsized args\n\nFixes #111355 .\n\nI have some ideas for how we can get this back in the future, out of scope for this PR though.\n\nr? `@cjgillot`", "tree": {"sha": "0a82ab74142f474bada3c40882d1fc7c461fdcab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a82ab74142f474bada3c40882d1fc7c461fdcab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06345574d96da7c471ee59c991ce14f33741c0ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06345574d96da7c471ee59c991ce14f33741c0ee", "html_url": "https://github.com/rust-lang/rust/commit/06345574d96da7c471ee59c991ce14f33741c0ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06345574d96da7c471ee59c991ce14f33741c0ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77014a608a97884e547d4215517ccd4babb2088", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77014a608a97884e547d4215517ccd4babb2088", "html_url": "https://github.com/rust-lang/rust/commit/d77014a608a97884e547d4215517ccd4babb2088"}, {"sha": "60cc72cf7be596650a0dac5f74887f7e4eefae40", "url": "https://api.github.com/repos/rust-lang/rust/commits/60cc72cf7be596650a0dac5f74887f7e4eefae40", "html_url": "https://github.com/rust-lang/rust/commit/60cc72cf7be596650a0dac5f74887f7e4eefae40"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "6c2e22a70b94377c76be5119d636c4232f3f54b1", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06345574d96da7c471ee59c991ce14f33741c0ee/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06345574d96da7c471ee59c991ce14f33741c0ee/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=06345574d96da7c471ee59c991ce14f33741c0ee", "patch": "@@ -168,6 +168,18 @@ impl<'tcx> Inliner<'tcx> {\n     ) -> Result<std::ops::Range<BasicBlock>, &'static str> {\n         let callee_attrs = self.tcx.codegen_fn_attrs(callsite.callee.def_id());\n         self.check_codegen_attributes(callsite, callee_attrs)?;\n+\n+        let terminator = caller_body[callsite.block].terminator.as_ref().unwrap();\n+        let TerminatorKind::Call { args, destination, .. } = &terminator.kind else { bug!() };\n+        let destination_ty = destination.ty(&caller_body.local_decls, self.tcx).ty;\n+        for arg in args {\n+            if !arg.ty(&caller_body.local_decls, self.tcx).is_sized(self.tcx, self.param_env) {\n+                // We do not allow inlining functions with unsized params. Inlining these functions\n+                // could create unsized locals, which are unsound and being phased out.\n+                return Err(\"Call has unsized argument\");\n+            }\n+        }\n+\n         self.check_mir_is_available(caller_body, &callsite.callee)?;\n         let callee_body = try_instance_mir(self.tcx, callsite.callee.def)?;\n         self.check_mir_body(callsite, callee_body, callee_attrs)?;\n@@ -189,9 +201,6 @@ impl<'tcx> Inliner<'tcx> {\n         // Check call signature compatibility.\n         // Normally, this shouldn't be required, but trait normalization failure can create a\n         // validation ICE.\n-        let terminator = caller_body[callsite.block].terminator.as_ref().unwrap();\n-        let TerminatorKind::Call { args, destination, .. } = &terminator.kind else { bug!() };\n-        let destination_ty = destination.ty(&caller_body.local_decls, self.tcx).ty;\n         let output_type = callee_body.return_ty();\n         if !util::is_subtype(self.tcx, self.param_env, output_type, destination_ty) {\n             trace!(?output_type, ?destination_ty);"}, {"sha": "745f2bb193aa109f7aac058f4f0e948755c601ba", "filename": "tests/mir-opt/inline/unsized_argument.caller.Inline.diff", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/06345574d96da7c471ee59c991ce14f33741c0ee/tests%2Fmir-opt%2Finline%2Funsized_argument.caller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/06345574d96da7c471ee59c991ce14f33741c0ee/tests%2Fmir-opt%2Finline%2Funsized_argument.caller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funsized_argument.caller.Inline.diff?ref=06345574d96da7c471ee59c991ce14f33741c0ee", "patch": "@@ -0,0 +1,50 @@\n+- // MIR for `caller` before Inline\n++ // MIR for `caller` after Inline\n+  \n+  fn caller(_1: Box<[i32]>) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/unsized_argument.rs:+0:11: +0:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/unsized_argument.rs:+0:26: +0:26\n+      let _2: ();                          // in scope 0 at $DIR/unsized_argument.rs:+1:5: +1:15\n+      let mut _3: std::boxed::Box<[i32]>;  // in scope 0 at $DIR/unsized_argument.rs:+1:13: +1:14\n+      let mut _4: ();                      // in scope 0 at $DIR/unsized_argument.rs:+1:14: +1:15\n+      let mut _5: ();                      // in scope 0 at $DIR/unsized_argument.rs:+1:14: +1:15\n+      let mut _6: ();                      // in scope 0 at $DIR/unsized_argument.rs:+1:14: +1:15\n+      let mut _7: *const [i32];            // in scope 0 at $DIR/unsized_argument.rs:+1:13: +1:14\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/unsized_argument.rs:+1:5: +1:15\n+          StorageLive(_3);                 // scope 0 at $DIR/unsized_argument.rs:+1:13: +1:14\n+          _3 = move _1;                    // scope 0 at $DIR/unsized_argument.rs:+1:13: +1:14\n+          _7 = (((_3.0: std::ptr::Unique<[i32]>).0: std::ptr::NonNull<[i32]>).0: *const [i32]); // scope 0 at $DIR/unsized_argument.rs:+1:5: +1:15\n+          _2 = callee(move (*_7)) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/unsized_argument.rs:+1:5: +1:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/unsized_argument.rs:9:5: 9:11\n+                                           // + literal: Const { ty: fn([i32]) {callee}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/unsized_argument.rs:+1:14: +1:15\n+          StorageDead(_2);                 // scope 0 at $DIR/unsized_argument.rs:+1:15: +1:16\n+          _0 = const ();                   // scope 0 at $DIR/unsized_argument.rs:+0:26: +2:2\n+          return;                          // scope 0 at $DIR/unsized_argument.rs:+2:2: +2:2\n+      }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/unsized_argument.rs:+0:1: +2:2\n+      }\n+  \n+      bb3: {\n+          _4 = alloc::alloc::box_free::<[i32], std::alloc::Global>(move (_3.0: std::ptr::Unique<[i32]>), move (_3.1: std::alloc::Global)) -> bb1; // scope 0 at $DIR/unsized_argument.rs:+1:14: +1:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/unsized_argument.rs:9:14: 9:15\n+                                           // + literal: Const { ty: unsafe fn(Unique<[i32]>, std::alloc::Global) {alloc::alloc::box_free::<[i32], std::alloc::Global>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb4 (cleanup): {\n+          _6 = alloc::alloc::box_free::<[i32], std::alloc::Global>(move (_3.0: std::ptr::Unique<[i32]>), move (_3.1: std::alloc::Global)) -> [return: bb2, unwind terminate]; // scope 0 at $DIR/unsized_argument.rs:+1:14: +1:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/unsized_argument.rs:9:14: 9:15\n+                                           // + literal: Const { ty: unsafe fn(Unique<[i32]>, std::alloc::Global) {alloc::alloc::box_free::<[i32], std::alloc::Global>}, val: Value(<ZST>) }\n+      }\n+  }\n+  "}, {"sha": "b2c51407fd5363510d80cfeb2650daa24183a558", "filename": "tests/mir-opt/inline/unsized_argument.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06345574d96da7c471ee59c991ce14f33741c0ee/tests%2Fmir-opt%2Finline%2Funsized_argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06345574d96da7c471ee59c991ce14f33741c0ee/tests%2Fmir-opt%2Finline%2Funsized_argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funsized_argument.rs?ref=06345574d96da7c471ee59c991ce14f33741c0ee", "patch": "@@ -0,0 +1,15 @@\n+// needs-unwind\n+#![feature(unsized_fn_params)]\n+\n+#[inline(always)]\n+fn callee(y: [i32]) {}\n+\n+// EMIT_MIR unsized_argument.caller.Inline.diff\n+fn caller(x: Box<[i32]>) {\n+    callee(*x);\n+}\n+\n+fn main() {\n+    let b = Box::new([1]);\n+    caller(b);\n+}"}]}