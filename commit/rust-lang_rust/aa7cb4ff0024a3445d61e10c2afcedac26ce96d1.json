{"sha": "aa7cb4ff0024a3445d61e10c2afcedac26ce96d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhN2NiNGZmMDAyNGEzNDQ1ZDYxZTEwYzJhZmNlZGFjMjZjZTk2ZDE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-12-22T23:13:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-22T23:13:48Z"}, "message": "Rollup merge of #80272 - petrochenkov:kwed, r=oli-obk\n\nrustc_span: Provide a reserved identifier check for a specific edition\n\nwhile keeping edition evaluation lazy because it may be expensive.\n\nNeeded for https://github.com/rust-lang/rust/pull/80226.", "tree": {"sha": "a6bee7ea235a10477d231474cecbed8eeec7c166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6bee7ea235a10477d231474cecbed8eeec7c166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa7cb4ff0024a3445d61e10c2afcedac26ce96d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf4n2tCRBK7hj4Ov3rIwAAdHIIAGpa+OfBNFjpX+P2qN/R2U/s\nQLzAw9zGaYhecZJa63XGtZGL8AkgycsJZOhwUEY2x6OmSjOmR0C1Tbeyw1Iiu1hM\nojM5MIMq0ZU+/JhQzbhe6qbfHvrGDOC1pL+C3jwwUPkjAEc39I73qtlzH61DwOme\nnudWJ1xiKynfgFx+aVTcUzHFxP5N7jhjg/IjJbnW+4pY8s3Kb3E2FGbh6jFa8UFW\nUh4pn0SlNObcgFDhFQH4IwwBXhsN3XSanVgYjokiRNOaWwvA8/CxXDqX3wouaK6B\nQCn7YYuubljoHGZgQYAWXkn5So8sKpSmdqZDWCNOlP0LpjIP0qGHwBl5r5g9m9c=\n=gsfU\n-----END PGP SIGNATURE-----\n", "payload": "tree a6bee7ea235a10477d231474cecbed8eeec7c166\nparent 93690dc3c3d41dc81f9b142e9add3284542b8e72\nparent 00ff7fe6bd068b457fcd70de943d4ed81d58e1a5\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1608678828 +0100\ncommitter GitHub <noreply@github.com> 1608678828 +0100\n\nRollup merge of #80272 - petrochenkov:kwed, r=oli-obk\n\nrustc_span: Provide a reserved identifier check for a specific edition\n\nwhile keeping edition evaluation lazy because it may be expensive.\n\nNeeded for https://github.com/rust-lang/rust/pull/80226.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7cb4ff0024a3445d61e10c2afcedac26ce96d1", "html_url": "https://github.com/rust-lang/rust/commit/aa7cb4ff0024a3445d61e10c2afcedac26ce96d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa7cb4ff0024a3445d61e10c2afcedac26ce96d1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93690dc3c3d41dc81f9b142e9add3284542b8e72", "url": "https://api.github.com/repos/rust-lang/rust/commits/93690dc3c3d41dc81f9b142e9add3284542b8e72", "html_url": "https://github.com/rust-lang/rust/commit/93690dc3c3d41dc81f9b142e9add3284542b8e72"}, {"sha": "00ff7fe6bd068b457fcd70de943d4ed81d58e1a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ff7fe6bd068b457fcd70de943d4ed81d58e1a5", "html_url": "https://github.com/rust-lang/rust/commit/00ff7fe6bd068b457fcd70de943d4ed81d58e1a5"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "46b08174f7406d407d71f719a0f6ce847acdc2f9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/aa7cb4ff0024a3445d61e10c2afcedac26ce96d1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7cb4ff0024a3445d61e10c2afcedac26ce96d1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=aa7cb4ff0024a3445d61e10c2afcedac26ce96d1", "patch": "@@ -13,7 +13,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::str;\n \n-use crate::{Span, DUMMY_SP, SESSION_GLOBALS};\n+use crate::{Edition, Span, DUMMY_SP, SESSION_GLOBALS};\n \n #[cfg(test)]\n mod tests;\n@@ -1609,12 +1609,32 @@ pub mod sym {\n }\n \n impl Symbol {\n-    fn is_used_keyword_2018(self) -> bool {\n-        self >= kw::Async && self <= kw::Dyn\n+    fn is_special(self) -> bool {\n+        self <= kw::Underscore\n     }\n \n-    fn is_unused_keyword_2018(self) -> bool {\n-        self == kw::Try\n+    fn is_used_keyword_always(self) -> bool {\n+        self >= kw::As && self <= kw::While\n+    }\n+\n+    fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {\n+        (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018\n+    }\n+\n+    fn is_unused_keyword_always(self) -> bool {\n+        self >= kw::Abstract && self <= kw::Yield\n+    }\n+\n+    fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {\n+        self == kw::Try && edition() >= Edition::Edition2018\n+    }\n+\n+    pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {\n+        self.is_special()\n+            || self.is_used_keyword_always()\n+            || self.is_unused_keyword_always()\n+            || self.is_used_keyword_conditional(edition)\n+            || self.is_unused_keyword_conditional(edition)\n     }\n \n     /// A keyword or reserved identifier that can be used as a path segment.\n@@ -1642,26 +1662,27 @@ impl Ident {\n     // Returns `true` for reserved identifiers used internally for elided lifetimes,\n     // unnamed method parameters, crate root module, error recovery etc.\n     pub fn is_special(self) -> bool {\n-        self.name <= kw::Underscore\n+        self.name.is_special()\n     }\n \n     /// Returns `true` if the token is a keyword used in the language.\n     pub fn is_used_keyword(self) -> bool {\n         // Note: `span.edition()` is relatively expensive, don't call it unless necessary.\n-        self.name >= kw::As && self.name <= kw::While\n-            || self.name.is_used_keyword_2018() && self.span.rust_2018()\n+        self.name.is_used_keyword_always()\n+            || self.name.is_used_keyword_conditional(|| self.span.edition())\n     }\n \n     /// Returns `true` if the token is a keyword reserved for possible future use.\n     pub fn is_unused_keyword(self) -> bool {\n         // Note: `span.edition()` is relatively expensive, don't call it unless necessary.\n-        self.name >= kw::Abstract && self.name <= kw::Yield\n-            || self.name.is_unused_keyword_2018() && self.span.rust_2018()\n+        self.name.is_unused_keyword_always()\n+            || self.name.is_unused_keyword_conditional(|| self.span.edition())\n     }\n \n     /// Returns `true` if the token is either a special identifier or a keyword.\n     pub fn is_reserved(self) -> bool {\n-        self.is_special() || self.is_used_keyword() || self.is_unused_keyword()\n+        // Note: `span.edition()` is relatively expensive, don't call it unless necessary.\n+        self.name.is_reserved(|| self.span.edition())\n     }\n \n     /// A keyword or reserved identifier that can be used as a path segment."}]}