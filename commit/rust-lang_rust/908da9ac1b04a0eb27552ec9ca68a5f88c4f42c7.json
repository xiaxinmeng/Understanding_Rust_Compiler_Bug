{"sha": "908da9ac1b04a0eb27552ec9ca68a5f88c4f42c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOGRhOWFjMWIwNGEwZWIyNzU1MmVjOWNhNjhhNWY4OGM0ZjQyYzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T14:45:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T14:45:57Z"}, "message": "Simplify", "tree": {"sha": "9560be4a80cb7e9e0147450b6ff50ff3eb8043ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9560be4a80cb7e9e0147450b6ff50ff3eb8043ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/908da9ac1b04a0eb27552ec9ca68a5f88c4f42c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/908da9ac1b04a0eb27552ec9ca68a5f88c4f42c7", "html_url": "https://github.com/rust-lang/rust/commit/908da9ac1b04a0eb27552ec9ca68a5f88c4f42c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/908da9ac1b04a0eb27552ec9ca68a5f88c4f42c7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c9ebbeaa415a5ff811b3be5058d8cb374e9baac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9ebbeaa415a5ff811b3be5058d8cb374e9baac", "html_url": "https://github.com/rust-lang/rust/commit/5c9ebbeaa415a5ff811b3be5058d8cb374e9baac"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "aee7e751189f2825b1e24077e0c6a486ccfd89c3", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/908da9ac1b04a0eb27552ec9ca68a5f88c4f42c7/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908da9ac1b04a0eb27552ec9ca68a5f88c4f42c7/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=908da9ac1b04a0eb27552ec9ca68a5f88c4f42c7", "patch": "@@ -17,18 +17,14 @@ const MAX_PATH_LEN: usize = 15;\n \n impl ModPath {\n     fn starts_with_std(&self) -> bool {\n-        self.segments.first().filter(|&first_segment| first_segment == &known::std).is_some()\n+        self.segments.first() == Some(&known::std)\n     }\n \n     // When std library is present, paths starting with `std::`\n     // should be preferred over paths starting with `core::` and `alloc::`\n     fn can_start_with_std(&self) -> bool {\n-        self.segments\n-            .first()\n-            .filter(|&first_segment| {\n-                first_segment == &known::alloc || first_segment == &known::core\n-            })\n-            .is_some()\n+        let first_segment = self.segments.first();\n+        first_segment == Some(&known::alloc) || first_segment == Some(&known::core)\n     }\n \n     fn len(&self) -> usize {"}]}