{"sha": "adf624b433277a0106f5354bb7d62ab1a04f216b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZjYyNGI0MzMyNzdhMDEwNmY1MzU0YmI3ZDYyYWIxYTA0ZjIxNmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-01T09:19:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-01T09:19:40Z"}, "message": "Add file support to expect", "tree": {"sha": "82b7095484d457ae8f0d89960cc94291ee53c909", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82b7095484d457ae8f0d89960cc94291ee53c909"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adf624b433277a0106f5354bb7d62ab1a04f216b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adf624b433277a0106f5354bb7d62ab1a04f216b", "html_url": "https://github.com/rust-lang/rust/commit/adf624b433277a0106f5354bb7d62ab1a04f216b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adf624b433277a0106f5354bb7d62ab1a04f216b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82838f5eda6ee98cebb9574ceef36544f1a45a4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/82838f5eda6ee98cebb9574ceef36544f1a45a4d", "html_url": "https://github.com/rust-lang/rust/commit/82838f5eda6ee98cebb9574ceef36544f1a45a4d"}], "stats": {"total": 84, "additions": 63, "deletions": 21}, "files": [{"sha": "3f293f5d57721730a5767883c3d86e9c11fe512d", "filename": "crates/expect/src/lib.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/adf624b433277a0106f5354bb7d62ab1a04f216b/crates%2Fexpect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf624b433277a0106f5354bb7d62ab1a04f216b/crates%2Fexpect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fexpect%2Fsrc%2Flib.rs?ref=adf624b433277a0106f5354bb7d62ab1a04f216b", "patch": "@@ -14,7 +14,7 @@ use once_cell::sync::Lazy;\n use stdx::{lines_with_ends, trim_indent};\n \n const HELP: &str = \"\n-You can update all `expect![[]]` tests by:\n+You can update all `expect![[]]` tests by running:\n \n     env UPDATE_EXPECT=1 cargo test\n \n@@ -25,26 +25,37 @@ fn update_expect() -> bool {\n     env::var(\"UPDATE_EXPECT\").is_ok()\n }\n \n-/// expect![[\"\"]]\n+/// expect![[r#\"inline snapshot\"#]]\n #[macro_export]\n macro_rules! expect {\n-    [[$lit:literal]] => {$crate::Expect {\n+    [[$data:literal]] => {$crate::Expect {\n         position: $crate::Position {\n             file: file!(),\n             line: line!(),\n             column: column!(),\n         },\n-        data: $lit,\n+        data: $data,\n     }};\n     [[]] => { $crate::expect![[\"\"]] };\n }\n \n+/// expect_file![\"/crates/foo/test_data/foo.rs\"]\n+#[macro_export]\n+macro_rules! expect_file {\n+    [$path:literal] => {$crate::ExpectFile { path: $path }};\n+}\n+\n #[derive(Debug)]\n pub struct Expect {\n     pub position: Position,\n     pub data: &'static str,\n }\n \n+#[derive(Debug)]\n+pub struct ExpectFile {\n+    pub path: &'static str,\n+}\n+\n #[derive(Debug)]\n pub struct Position {\n     pub file: &'static str,\n@@ -64,7 +75,7 @@ impl Expect {\n         if &trimmed == actual {\n             return;\n         }\n-        Runtime::fail(self, &trimmed, actual);\n+        Runtime::fail_expect(self, &trimmed, actual);\n     }\n     pub fn assert_debug_eq(&self, actual: &impl fmt::Debug) {\n         let actual = format!(\"{:#?}\\n\", actual);\n@@ -100,6 +111,25 @@ impl Expect {\n     }\n }\n \n+impl ExpectFile {\n+    pub fn assert_eq(&self, actual: &str) {\n+        let expected = self.read();\n+        if actual == expected {\n+            return;\n+        }\n+        Runtime::fail_file(self, &expected, actual);\n+    }\n+    fn read(&self) -> String {\n+        fs::read_to_string(self.abs_path()).unwrap_or_default().replace(\"\\r\\n\", \"\\n\")\n+    }\n+    fn write(&self, contents: &str) {\n+        fs::write(self.abs_path(), contents).unwrap()\n+    }\n+    fn abs_path(&self) -> PathBuf {\n+        workspace_root().join(self.path)\n+    }\n+}\n+\n #[derive(Default)]\n struct Runtime {\n     help_printed: bool,\n@@ -108,7 +138,7 @@ struct Runtime {\n static RT: Lazy<Mutex<Runtime>> = Lazy::new(Default::default);\n \n impl Runtime {\n-    fn fail(expect: &Expect, expected: &str, actual: &str) {\n+    fn fail_expect(expect: &Expect, expected: &str, actual: &str) {\n         let mut rt = RT.lock().unwrap_or_else(|poisoned| poisoned.into_inner());\n         if update_expect() {\n             println!(\"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}\", expect.position);\n@@ -118,7 +148,21 @@ impl Runtime {\n                 .update(expect, actual);\n             return;\n         }\n-        let print_help = !mem::replace(&mut rt.help_printed, true);\n+        rt.panic(expect.position.to_string(), expected, actual);\n+    }\n+\n+    fn fail_file(expect: &ExpectFile, expected: &str, actual: &str) {\n+        let mut rt = RT.lock().unwrap_or_else(|poisoned| poisoned.into_inner());\n+        if update_expect() {\n+            println!(\"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}\", expect.path);\n+            expect.write(actual);\n+            return;\n+        }\n+        rt.panic(expect.path.to_string(), expected, actual);\n+    }\n+\n+    fn panic(&mut self, position: String, expected: &str, actual: &str) {\n+        let print_help = !mem::replace(&mut self.help_printed, true);\n         let help = if print_help { HELP } else { \"\" };\n \n         let diff = Changeset::new(actual, expected, \"\\n\");\n@@ -143,7 +187,7 @@ impl Runtime {\n {}\n ----\n \",\n-            expect.position, help, expected, actual, diff\n+            position, help, expected, actual, diff\n         );\n         // Use resume_unwind instead of panic!() to prevent a backtrace, which is unnecessary noise.\n         panic::resume_unwind(Box::new(()));"}, {"sha": "f19628485db00b1a4978cd7e6f4b33cec0473644", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/adf624b433277a0106f5354bb7d62ab1a04f216b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf624b433277a0106f5354bb7d62ab1a04f216b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=adf624b433277a0106f5354bb7d62ab1a04f216b", "patch": "@@ -1,6 +1,7 @@\n use std::fs;\n \n-use test_utils::{assert_eq_text, project_dir, read_text};\n+use expect::{expect_file, ExpectFile};\n+use test_utils::project_dir;\n \n use crate::{mock_analysis::single_file, FileRange, TextRange};\n \n@@ -91,7 +92,7 @@ impl<T> Option<T> {\n }\n \"#\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/highlighting.html\",\n+        expect_file![\"crates/ra_ide/src/snapshots/highlighting.html\"],\n         false,\n     );\n }\n@@ -114,7 +115,7 @@ fn bar() {\n }\n \"#\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/rainbow_highlighting.html\",\n+        expect_file![\"crates/ra_ide/src/snapshots/rainbow_highlighting.html\"],\n         true,\n     );\n }\n@@ -167,7 +168,7 @@ fn main() {\n     );\n }\"##\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/highlight_injection.html\",\n+        expect_file![\"crates/ra_ide/src/snapshots/highlight_injection.html\"],\n         false,\n     );\n }\n@@ -250,7 +251,7 @@ fn main() {\n     println!(\"{\u043d\u0438\u0447\u043e\u0441\u0438}\", \u043d\u0438\u0447\u043e\u0441\u0438 = 92);\n }\"#\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/highlight_strings.html\",\n+        expect_file![\"crates/ra_ide/src/snapshots/highlight_strings.html\"],\n         false,\n     );\n }\n@@ -278,7 +279,7 @@ fn main() {\n }\n \"#\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/highlight_unsafe.html\",\n+        expect_file![\"crates/ra_ide/src/snapshots/highlight_unsafe.html\"],\n         false,\n     );\n }\n@@ -354,19 +355,16 @@ macro_rules! noop {\n }\n \"#\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/highlight_doctest.html\",\n+        expect_file![\"crates/ra_ide/src/snapshots/highlight_doctest.html\"],\n         false,\n     );\n }\n \n /// Highlights the code given by the `ra_fixture` argument, renders the\n /// result as HTML, and compares it with the HTML file given as `snapshot`.\n /// Note that the `snapshot` file is overwritten by the rendered HTML.\n-fn check_highlighting(ra_fixture: &str, snapshot: &str, rainbow: bool) {\n+fn check_highlighting(ra_fixture: &str, expect: ExpectFile, rainbow: bool) {\n     let (analysis, file_id) = single_file(ra_fixture);\n-    let dst_file = project_dir().join(snapshot);\n     let actual_html = &analysis.highlight_as_html(file_id, rainbow).unwrap();\n-    let expected_html = &read_text(&dst_file);\n-    fs::write(dst_file, &actual_html).unwrap();\n-    assert_eq_text!(expected_html, actual_html);\n+    expect.assert_eq(actual_html)\n }"}, {"sha": "607a95682a7f80ee64b8a0d24a69a26a458a7f16", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf624b433277a0106f5354bb7d62ab1a04f216b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf624b433277a0106f5354bb7d62ab1a04f216b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=adf624b433277a0106f5354bb7d62ab1a04f216b", "patch": "@@ -415,7 +415,7 @@ pub(crate) fn handle_runnables(\n             let source_file = snap.analysis.parse(file_id)?;\n             algo::find_node_at_offset::<ast::MacroCall>(source_file.syntax(), offset)\n                 .and_then(|it| it.path()?.segment()?.name_ref())\n-                .map_or(false, |it| it.text() == \"expect\")\n+                .map_or(false, |it| it.text() == \"expect\" || it.text() == \"expect_file\")\n         }\n         None => false,\n     };"}]}