{"sha": "b7c9687d2e2504de0e0047b19fec00c54efc08a7", "node_id": "C_kwDOAAsO6NoAKGI3Yzk2ODdkMmUyNTA0ZGUwZTAwNDdiMTlmZWMwMGM1NGVmYzA4YTc", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-02T02:21:29Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-10T01:16:47Z"}, "message": "Simplify the implementation of `rustc_queries`", "tree": {"sha": "11118a623f7a2042ccb0a81d67445daa5d0c0afe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11118a623f7a2042ccb0a81d67445daa5d0c0afe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7c9687d2e2504de0e0047b19fec00c54efc08a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c9687d2e2504de0e0047b19fec00c54efc08a7", "html_url": "https://github.com/rust-lang/rust/commit/b7c9687d2e2504de0e0047b19fec00c54efc08a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7c9687d2e2504de0e0047b19fec00c54efc08a7/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb0c36a3fe8d6da31c221cf3b65e6e316e7d9c8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0c36a3fe8d6da31c221cf3b65e6e316e7d9c8e", "html_url": "https://github.com/rust-lang/rust/commit/fb0c36a3fe8d6da31c221cf3b65e6e316e7d9c8e"}], "stats": {"total": 53, "additions": 18, "deletions": 35}, "files": [{"sha": "77fb997dc48bdb6d9c1be8b8daed9fa1646e06ce", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 18, "deletions": 35, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b7c9687d2e2504de0e0047b19fec00c54efc08a7/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c9687d2e2504de0e0047b19fec00c54efc08a7/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=b7c9687d2e2504de0e0047b19fec00c54efc08a7", "patch": "@@ -344,43 +344,26 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n \n         let mut attributes = Vec::new();\n \n-        // Pass on the fatal_cycle modifier\n-        if let Some(fatal_cycle) = &modifiers.fatal_cycle {\n-            attributes.push(quote! { (#fatal_cycle) });\n-        };\n-        // Pass on the arena modifier\n-        if let Some(ref arena_cache) = modifiers.arena_cache {\n-            attributes.push(quote! {span=> (#arena_cache) });\n-        };\n-        // Pass on the cycle_delay_bug modifier\n-        if let Some(cycle_delay_bug) = &modifiers.cycle_delay_bug {\n-            attributes.push(quote! { (#cycle_delay_bug) });\n-        };\n-        // Pass on the no_hash modifier\n-        if let Some(no_hash) = &modifiers.no_hash {\n-            attributes.push(quote! { (#no_hash) });\n-        };\n-        // Pass on the anon modifier\n-        if let Some(anon) = &modifiers.anon {\n-            attributes.push(quote! { (#anon) });\n-        };\n-        // Pass on the eval_always modifier\n-        if let Some(eval_always) = &modifiers.eval_always {\n-            attributes.push(quote! { (#eval_always) });\n-        };\n-        // Pass on the depth_limit modifier\n-        if let Some(depth_limit) = &modifiers.depth_limit {\n-            attributes.push(quote! { (#depth_limit) });\n-        };\n-        // Pass on the separate_provide_extern modifier\n-        if let Some(separate_provide_extern) = &modifiers.separate_provide_extern {\n-            attributes.push(quote! { (#separate_provide_extern) });\n-        }\n-        // Pass on the remap_env_constness modifier\n-        if let Some(remap_env_constness) = &modifiers.remap_env_constness {\n-            attributes.push(quote! { (#remap_env_constness) });\n+        macro_rules! passthrough {\n+            ( $( $modifier:ident ),+ $(,)? ) => {\n+                $( if let Some($modifier) = &modifiers.$modifier {\n+                    attributes.push(quote! { (#$modifier) });\n+                }; )+\n+            }\n         }\n \n+        passthrough!(\n+            fatal_cycle,\n+            arena_cache,\n+            cycle_delay_bug,\n+            no_hash,\n+            anon,\n+            eval_always,\n+            depth_limit,\n+            separate_provide_extern,\n+            remap_env_constness,\n+        );\n+\n         // This uses the span of the query definition for the commas,\n         // which can be important if we later encounter any ambiguity\n         // errors with any of the numerous macro_rules! macros that"}]}